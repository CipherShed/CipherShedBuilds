     1                                  ;
     2                                  ; Copyright (c) 2010 TrueCrypt Developers Association. All rights reserved.
     3                                  ;
     4                                  ; Governed by the TrueCrypt License 3.0 the full text of which is contained in
     5                                  ; the file License.txt included in TrueCrypt binary and source code distribution
     6                                  ; packages.
     7                                  ;
     8                                  
     9                                  
    10                                  %ifidn __BITS__, 16
    11                                  	%define R e
    12                                  %elifidn __BITS__, 32
    13                                  	%define R e
    14                                  %elifidn __BITS__, 64
    15                                  	%define R r
    16                                  %endif
    17                                  
    18                                  
    19                                  %macro export_function 1-2 0
    20                                  
    21                                  	%ifdef MS_STDCALL
    22                                  		global %1@%2
    23                                  		export _%1@%2
    24                                  	%1@%2:
    25                                  	%elifidn __BITS__, 16
    26                                  		global _%1
    27                                  	_%1:
    28                                  	%else
    29                                  		global %1
    30                                  	%1:
    31                                  	%endif
    32                                  
    33                                  %endmacro
    34                                  
    35                                  
    36                                  %macro aes_function_entry 1
    37                                  
    38                                  	; void (const byte *ks, byte *data);
    39                                  
    40                                  	export_function %1, 8
    41                                  
    42                                  	%ifidn __BITS__, 32
    43                                  		mov ecx, [esp + 4 + 4 * 0]
    44                                  		mov edx, [esp + 4 + 4 * 1]
    45                                  	%elifidn __BITS__, 64
    46                                  		%ifnidn __OUTPUT_FORMAT__, win64
    47                                  			mov rcx, rdi
    48                                  			mov rdx, rsi
    49                                  		%endif
    50                                  	%endif
    51                                  
    52                                  	; ecx/rcx = ks
    53                                  	; edx/rdx = data
    54                                  
    55                                  %endmacro
    56                                  
    57                                  
    58                                  %macro aes_function_exit 0
    59                                  
    60                                  	; void (const byte *, byte *);
    61                                  
    62                                  	%ifdef MS_STDCALL
    63                                  		ret 8
    64                                  	%else
    65                                  		ret
    66                                  	%endif
    67                                  
    68                                  %endmacro
    69                                  
    70                                  
    71                                  %macro push_xmm 2
    72                                  	sub rsp, 16 * (%2 - %1 + 1)
    73                                  
    74                                  	%assign stackoffset 0
    75                                  	%assign regnumber %1
    76                                  
    77                                  	%rep (%2 - %1 + 1)
    78                                  		movdqu [rsp + 16 * stackoffset], xmm%[regnumber]
    79                                  
    80                                  		%assign stackoffset stackoffset+1
    81                                  		%assign regnumber regnumber+1
    82                                  	%endrep
    83                                  %endmacro
    84                                  
    85                                  
    86                                  %macro pop_xmm 2
    87                                  	%assign stackoffset 0
    88                                  	%assign regnumber %1
    89                                  
    90                                  	%rep (%2 - %1 + 1)
    91                                  		movdqu xmm%[regnumber], [rsp + 16 * stackoffset]
    92                                  
    93                                  		%assign stackoffset stackoffset+1
    94                                  		%assign regnumber regnumber+1
    95                                  	%endrep
    96                                  
    97                                  	add rsp, 16 * (%2 - %1 + 1)
    98                                  %endmacro
    99                                  
   100                                  
   101                                  %macro aes_hw_cpu 2
   102                                  	%define OPERATION %1
   103                                  	%define BLOCK_COUNT %2
   104                                  
   105                                  	; Load data blocks
   106                                  	%assign block 1
   107                                  	%rep BLOCK_COUNT
   108                                  		movdqu xmm%[block], [%[R]dx + 16 * (block - 1)]
   109                                  		%assign block block+1
   110                                  	%endrep
   111                                  
   112                                  	; Encrypt/decrypt data blocks
   113                                  	%assign round 0
   114                                  	%rep 15
   115                                  		movdqu xmm0, [%[R]cx + 16 * round]
   116                                  
   117                                  		%assign block 1
   118                                  		%rep BLOCK_COUNT
   119                                  
   120                                  			%if round = 0
   121                                  				pxor xmm%[block], xmm0
   122                                  			%else
   123                                  				%if round < 14
   124                                  					aes%[OPERATION] xmm%[block], xmm0
   125                                  				%else
   126                                  					aes%[OPERATION]last xmm%[block], xmm0
   127                                  				%endif
   128                                  			%endif
   129                                  
   130                                  			%assign block block+1
   131                                  		%endrep
   132                                  
   133                                  		%assign round round+1
   134                                  	%endrep
   135                                  
   136                                  	; Store data blocks
   137                                  	%assign block 1
   138                                  	%rep BLOCK_COUNT
   139                                  		movdqu [%[R]dx + 16 * (block - 1)], xmm%[block]
   140                                  		%assign block block+1
   141                                  	%endrep
   142                                  
   143                                  	%undef OPERATION
   144                                  	%undef BLOCK_COUNT
   145                                  %endmacro
   146                                  
   147                                  
   148                                  %macro aes_hw_cpu_32_blocks 1
   149                                  	%define OPERATION_32_BLOCKS %1
   150                                  
   151                                  	%ifidn __BITS__, 64
   152                                  		%define MAX_REG_BLOCK_COUNT 15
   153                                  	%else
   154                                  		%define MAX_REG_BLOCK_COUNT 7
   155                                  	%endif
   156                                  
   157                                  	%ifidn __OUTPUT_FORMAT__, win64
   158                                  		%if MAX_REG_BLOCK_COUNT > 5
   159                                  			push_xmm 6, MAX_REG_BLOCK_COUNT
   160                                  		%endif
   161                                  	%endif
   162                                  
   163                                  		mov eax, 32 / MAX_REG_BLOCK_COUNT
   164                                  	.1:
   165                                  		aes_hw_cpu %[OPERATION_32_BLOCKS], MAX_REG_BLOCK_COUNT
   166                                  
   167                                  		add %[R]dx, 16 * MAX_REG_BLOCK_COUNT
   168                                  		dec eax
   169                                  		jnz .1
   170                                  
   171                                  	%if (32 % MAX_REG_BLOCK_COUNT) != 0
   172                                  		aes_hw_cpu %[OPERATION_32_BLOCKS], (32 % MAX_REG_BLOCK_COUNT)
   173                                  	%endif
   174                                  
   175                                  	%ifidn __OUTPUT_FORMAT__, win64
   176                                  		%if MAX_REG_BLOCK_COUNT > 5
   177                                  			pop_xmm 6, MAX_REG_BLOCK_COUNT
   178                                  		%endif
   179                                  	%endif
   180                                  
   181                                  	%undef OPERATION_32_BLOCKS
   182                                  	%undef MAX_REG_BLOCK_COUNT
   183                                  %endmacro
   184                                  
   185                                  
   186                                  %ifidn __BITS__, 16
   187                                  
   188                                  	USE16
   189                                  	SEGMENT _TEXT PUBLIC CLASS=CODE USE16
   190                                  	SEGMENT _DATA PUBLIC CLASS=DATA USE16
   191                                  	GROUP DGROUP _TEXT _DATA
   192                                  	SECTION _TEXT
   193                                  
   194                                  %else
   195                                  
   196                                  	SECTION .text
   197                                  
   198                                  %endif
   199                                  
   200                                  
   201                                  ; void aes_hw_cpu_enable_sse ();
   202                                  
   203                                  	export_function aes_hw_cpu_enable_sse
   204                              <1> 
   205                              <1>  %ifdef MS_STDCALL
   206                              <1>  global %1@%2
   207                              <1>  export _%1@%2
   208                              <1>  %1@%2:
   209                              <1>  %elifidn __BITS__, 16
   210                              <1>  global _%1
   211                              <1>  _%1:
   212                              <1>  %else
   213                              <1>  global %1
   214                              <1>  %1:
   215                              <1>  %endif
   216                              <1> 
   217 00000000 0F20E0                  		mov %[R]ax, cr4
   218 00000003 0D0002                  		or ax, 1 << 9
   219 00000006 0F22E0                  		mov cr4, %[R]ax
   220 00000009 C3                      	ret
   221                                  
   222                                  
   223                                  %ifidn __BITS__, 16
   224                                  
   225                                  
   226                                  ; byte is_aes_hw_cpu_supported ();
   227                                  
   228                                  	export_function is_aes_hw_cpu_supported
   229                              <1> 
   230                              <1>  %ifdef MS_STDCALL
   231                              <1>  global %1@%2
   232                              <1>  export _%1@%2
   233                              <1>  %1@%2:
   234                              <1>  %elifidn __BITS__, 16
   235                              <1>  global _%1
   236                              <1>  _%1:
   237                              <1>  %else
   238                              <1>  global %1
   239                              <1>  %1:
   240                              <1>  %endif
   241                              <1> 
   242 0000000A 66B801000000            		mov eax, 1
   243 00000010 0FA2                    		cpuid
   244 00000012 6689C8                  		mov eax, ecx
   245 00000015 66C1E819                		shr eax, 25
   246 00000019 2401                    		and al, 1
   247 0000001B C3                      	ret
   248                                  
   249                                  
   250                                  ; void aes_hw_cpu_decrypt (const byte *ks, byte *data);
   251                                  
   252                                  	export_function aes_hw_cpu_decrypt
   253                              <1> 
   254                              <1>  %ifdef MS_STDCALL
   255                              <1>  global %1@%2
   256                              <1>  export _%1@%2
   257                              <1>  %1@%2:
   258                              <1>  %elifidn __BITS__, 16
   259                              <1>  global _%1
   260                              <1>  _%1:
   261                              <1>  %else
   262                              <1>  global %1
   263                              <1>  %1:
   264                              <1>  %endif
   265                              <1> 
   266 0000001C B8F0FF                  		mov ax, -16
   267 0000001F EB03                    		jmp aes_hw_cpu_encrypt_decrypt
   268                                  
   269                                  ; void aes_hw_cpu_encrypt (const byte *ks, byte *data);
   270                                  
   271                                  	export_function aes_hw_cpu_encrypt
   272                              <1> 
   273                              <1>  %ifdef MS_STDCALL
   274                              <1>  global %1@%2
   275                              <1>  export _%1@%2
   276                              <1>  %1@%2:
   277                              <1>  %elifidn __BITS__, 16
   278                              <1>  global _%1
   279                              <1>  _%1:
   280                              <1>  %else
   281                              <1>  global %1
   282                              <1>  %1:
   283                              <1>  %endif
   284                              <1> 
   285 00000021 B81000                  		mov ax, 16
   286                                  
   287                                  	aes_hw_cpu_encrypt_decrypt:
   288 00000024 55                      		push bp
   289 00000025 89E5                    		mov bp, sp
   290 00000027 57                      		push di
   291 00000028 56                      		push si
   292                                  
   293 00000029 8B7604                  		mov si, [bp + 4]			; ks
   294 0000002C 8B7E06                  		mov di, [bp + 4 + 2]		; data
   295                                  
   296 0000002F F30F6F04                		movdqu xmm0, [si]
   297 00000033 F30F6F0D                		movdqu xmm1, [di]
   298                                  
   299 00000037 660FEFC8                		pxor xmm1, xmm0
   300                                  
   301 0000003B B90D00                  		mov cx, 13
   302                                  
   303                                  	.round1_13:
   304 0000003E 01C6                    		add si, ax
   305 00000040 F30F6F04                		movdqu xmm0, [si]
   306                                  
   307 00000044 83F800                  		cmp ax, 0
   308 00000047 7C07                    		jl .decrypt
   309                                  		
   310 00000049 660F38DCC8              		aesenc xmm1, xmm0
   311 0000004E EB05                    		jmp .2
   312                                  	.decrypt:
   313 00000050 660F38DEC8              		aesdec xmm1, xmm0
   314                                  	.2:
   315 00000055 E2E7                    		loop .round1_13
   316                                  
   317 00000057 01C6                    		add si, ax
   318 00000059 F30F6F04                		movdqu xmm0, [si]
   319                                  		
   320 0000005D 83F800                  		cmp ax, 0
   321 00000060 7C07                    		jl .decrypt_last
   322                                  
   323 00000062 660F38DDC8              		aesenclast xmm1, xmm0
   324 00000067 EB05                    		jmp .3
   325                                  	.decrypt_last:
   326 00000069 660F38DFC8              		aesdeclast xmm1, xmm0
   327                                  	.3:
   328 0000006E F30F7F0D                		movdqu [di], xmm1
   329                                  
   330 00000072 5E                      		pop si
   331 00000073 5F                      		pop di
   332 00000074 5D                      		pop bp
   333 00000075 C3                      	ret
   334                                  
   335                                  
   336                                  %else	; __BITS__ != 16
   337                                  
   338                                  
   339                                  ; byte is_aes_hw_cpu_supported ();
   340                                  
   341                                  	export_function is_aes_hw_cpu_supported
   342                                  		push %[R]bx
   343                                  
   344                                  		mov eax, 1
   345                                  		cpuid
   346                                  		mov eax, ecx
   347                                  		shr eax, 25
   348                                  		and eax, 1
   349                                  
   350                                  		pop %[R]bx
   351                                  	ret
   352                                  
   353                                  
   354                                  ; void aes_hw_cpu_decrypt (const byte *ks, byte *data);
   355                                  
   356                                  	aes_function_entry aes_hw_cpu_decrypt
   357                                  		aes_hw_cpu dec, 1
   358                                  	aes_function_exit
   359                                  
   360                                  
   361                                  ; void aes_hw_cpu_decrypt_32_blocks (const byte *ks, byte *data);
   362                                  
   363                                  	aes_function_entry aes_hw_cpu_decrypt_32_blocks
   364                                  		aes_hw_cpu_32_blocks dec
   365                                  	aes_function_exit
   366                                  
   367                                  
   368                                  ; void aes_hw_cpu_encrypt (const byte *ks, byte *data);
   369                                  
   370                                  	aes_function_entry aes_hw_cpu_encrypt
   371                                  		aes_hw_cpu enc, 1
   372                                  	aes_function_exit
   373                                  
   374                                  
   375                                  ; void aes_hw_cpu_encrypt_32_blocks (const byte *ks, byte *data);
   376                                  
   377                                  	aes_function_entry aes_hw_cpu_encrypt_32_blocks
   378                                  		aes_hw_cpu_32_blocks enc
   379                                  	aes_function_exit
   380                                  
   381                                  
   382                                  %endif	; __BITS__ != 16
