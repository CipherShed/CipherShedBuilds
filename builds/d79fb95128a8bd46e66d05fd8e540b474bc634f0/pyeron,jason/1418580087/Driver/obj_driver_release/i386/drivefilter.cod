; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	c:\home\public\desktop\projects\ciphershed.build\src\driver\drivefilter.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_BootArgsValid
PUBLIC	_EncryptionSetupThread
PUBLIC	_DecoySystemWipeThread
_DATA	SEGMENT
COMM	_BootArgs:BYTE:076H
_DATA	ENDS
_BSS	SEGMENT
_DeviceFilterActive DD 01H DUP (?)
_BootArgsValid DD 01H DUP (?)
_BootDriveSignatureValid DD 01H DUP (?)
_BootDriveFound DD 01H DUP (?)
_BootDriveFilterExtension DD 01H DUP (?)
_CrashDumpEnabled DD 01H DUP (?)
_HibernationEnabled DD 01H DUP (?)
_LegacyHibernationDriverFilterActive DD 01H DUP (?)
_HibernationWriteBuffer DD 01H DUP (?)
_HibernationWriteBufferMdl DD 01H DUP (?)
_HibernationPreventionCount DD 01H DUP (?)
_SetupInProgress DD 01H DUP (?)
_EncryptionSetupThread DD 01H DUP (?)
_DecoySystemWipeInProgress DD 01H DUP (?)
_DecoySystemWipeThread DD 01H DUP (?)
_LastHiberFilterNumber DD 01H DUP (?)
_BSS	ENDS
PUBLIC	_RtlSecureZeroMemory@8
; Function compile flags: /Ogsp
; File c:\winddk\7600.16385.1\inc\ddk\wdm.h
;	COMDAT _RtlSecureZeroMemory@8
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_cnt$ = 12						; size = 4
_RtlSecureZeroMemory@8 PROC				; COMDAT

; 8322 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 8323 :     volatile char *vptr = (volatile char *)ptr;
; 8324 : 
; 8325 : #if defined(_M_AMD64)
; 8326 : 
; 8327 :         __stosb((PUCHAR)((ULONG64)vptr), 0, cnt);
; 8328 : 
; 8329 : #else
; 8330 : 
; 8331 :     while (cnt) {

  00005	83 7d 0c 00	 cmp	 DWORD PTR _cnt$[ebp], 0
  00009	8b 45 08	 mov	 eax, DWORD PTR _ptr$[ebp]
  0000c	74 09		 je	 SHORT $LN1@RtlSecureZ
$LL2@RtlSecureZ:

; 8332 :         *vptr = 0;

  0000e	c6 00 00	 mov	 BYTE PTR [eax], 0

; 8333 :         vptr++;

  00011	40		 inc	 eax

; 8334 :         cnt--;

  00012	ff 4d 0c	 dec	 DWORD PTR _cnt$[ebp]
  00015	75 f7		 jne	 SHORT $LL2@RtlSecureZ
$LN1@RtlSecureZ:

; 8335 :     }
; 8336 : 
; 8337 : #endif
; 8338 : 
; 8339 :     return ptr;

  00017	8b 45 08	 mov	 eax, DWORD PTR _ptr$[ebp]

; 8340 : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
_RtlSecureZeroMemory@8 ENDP
_TEXT	ENDS
PUBLIC	_KeInitializeSpinLock@4
; Function compile flags: /Ogsp
;	COMDAT _KeInitializeSpinLock@4
_TEXT	SEGMENT
_SpinLock$ = 8						; size = 4
_KeInitializeSpinLock@4 PROC				; COMDAT

; 15095: {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 15096: 
; 15097:     *SpinLock = 0;

  00005	8b 45 08	 mov	 eax, DWORD PTR _SpinLock$[ebp]
  00008	83 20 00	 and	 DWORD PTR [eax], 0

; 15098:     return;
; 15099: }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
_KeInitializeSpinLock@4 ENDP
_TEXT	ENDS
PUBLIC	_PsGetCurrentThread@0
EXTRN	__imp__KeGetCurrentThread@0:PROC
; Function compile flags: /Ogsp
;	COMDAT _PsGetCurrentThread@0
_TEXT	SEGMENT
_PsGetCurrentThread@0 PROC				; COMDAT

; 19989: 
; 19990:     return (PETHREAD)KeGetCurrentThread();

  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__KeGetCurrentThread@0
_PsGetCurrentThread@0 ENDP
_TEXT	ENDS
PUBLIC	_IoGetCurrentIrpStackLocation@4
; Function compile flags: /Ogsp
;	COMDAT _IoGetCurrentIrpStackLocation@4
_TEXT	SEGMENT
_Irp$ = 8						; size = 4
_IoGetCurrentIrpStackLocation@4 PROC			; COMDAT

; 23316: {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 23317:     ASSERT(Irp->CurrentLocation <= Irp->StackCount + 1);
; 23318:     return Irp->Tail.Overlay.CurrentStackLocation;

  00005	8b 45 08	 mov	 eax, DWORD PTR _Irp$[ebp]
  00008	8b 40 60	 mov	 eax, DWORD PTR [eax+96]

; 23319: }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
_IoGetCurrentIrpStackLocation@4 ENDP
_TEXT	ENDS
PUBLIC	_IoGetNextIrpStackLocation@4
; Function compile flags: /Ogsp
;	COMDAT _IoGetNextIrpStackLocation@4
_TEXT	SEGMENT
_Irp$ = 8						; size = 4
_IoGetNextIrpStackLocation@4 PROC			; COMDAT

; 23479: {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 23480:     ASSERT(Irp->CurrentLocation > 0);
; 23481: 
; 23482:     return ((Irp)->Tail.Overlay.CurrentStackLocation - 1 );

  00005	8b 45 08	 mov	 eax, DWORD PTR _Irp$[ebp]
  00008	8b 40 60	 mov	 eax, DWORD PTR [eax+96]
  0000b	83 e8 24	 sub	 eax, 36			; 00000024H

; 23483: }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
_IoGetNextIrpStackLocation@4 ENDP
_TEXT	ENDS
PUBLIC	_IoMarkIrpPending@4
; Function compile flags: /Ogsp
;	COMDAT _IoMarkIrpPending@4
_TEXT	SEGMENT
_Irp$ = 8						; size = 4
_IoMarkIrpPending@4 PROC				; COMDAT

; 23667: {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 23668:     IoGetCurrentIrpStackLocation( (Irp) )->Control |= SL_PENDING_RETURNED;

  00005	8b 45 08	 mov	 eax, DWORD PTR _Irp$[ebp]
  00008	8b 40 60	 mov	 eax, DWORD PTR [eax+96]
  0000b	80 48 03 01	 or	 BYTE PTR [eax+3], 1

; 23669: }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
_IoMarkIrpPending@4 ENDP
_TEXT	ENDS
PUBLIC	_IoSetCompletionRoutine@24
; Function compile flags: /Ogsp
;	COMDAT _IoSetCompletionRoutine@24
_TEXT	SEGMENT
_Irp$ = 8						; size = 4
_CompletionRoutine$ = 12				; size = 4
_Context$ = 16						; size = 4
_InvokeOnSuccess$ = 20					; size = 1
_InvokeOnError$ = 24					; size = 1
_InvokeOnCancel$ = 28					; size = 1
_IoSetCompletionRoutine@24 PROC				; COMDAT

; 23820: {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 23821:     PIO_STACK_LOCATION irpSp;
; 23822:     ASSERT( (InvokeOnSuccess || InvokeOnError || InvokeOnCancel) ? (CompletionRoutine != NULL) : TRUE );
; 23823:     irpSp = IoGetNextIrpStackLocation(Irp);

  00005	8b 45 08	 mov	 eax, DWORD PTR _Irp$[ebp]
  00008	8b 40 60	 mov	 eax, DWORD PTR [eax+96]

; 23824:     irpSp->CompletionRoutine = CompletionRoutine;

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _CompletionRoutine$[ebp]
  0000e	83 e8 24	 sub	 eax, 36			; 00000024H
  00011	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 23825:     irpSp->Context = Context;

  00014	8b 4d 10	 mov	 ecx, DWORD PTR _Context$[ebp]
  00017	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 23826:     irpSp->Control = 0;

  0001a	32 c9		 xor	 cl, cl
  0001c	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 23827: 
; 23828:     if (InvokeOnSuccess) {

  0001f	38 4d 14	 cmp	 BYTE PTR _InvokeOnSuccess$[ebp], cl
  00022	74 04		 je	 SHORT $LN3@IoSetCompl

; 23829:         irpSp->Control = SL_INVOKE_ON_SUCCESS;

  00024	c6 40 03 40	 mov	 BYTE PTR [eax+3], 64	; 00000040H
$LN3@IoSetCompl:

; 23830:     }
; 23831: 
; 23832:     if (InvokeOnError) {

  00028	38 4d 18	 cmp	 BYTE PTR _InvokeOnError$[ebp], cl
  0002b	74 04		 je	 SHORT $LN2@IoSetCompl

; 23833:         irpSp->Control |= SL_INVOKE_ON_ERROR;

  0002d	80 48 03 80	 or	 BYTE PTR [eax+3], 128	; 00000080H
$LN2@IoSetCompl:

; 23834:     }
; 23835: 
; 23836:     if (InvokeOnCancel) {

  00031	38 4d 1c	 cmp	 BYTE PTR _InvokeOnCancel$[ebp], cl
  00034	74 04		 je	 SHORT $LN1@IoSetCompl

; 23837:         irpSp->Control |= SL_INVOKE_ON_CANCEL;

  00036	80 48 03 20	 or	 BYTE PTR [eax+3], 32	; 00000020H
$LN1@IoSetCompl:

; 23838:     }
; 23839: }

  0003a	5d		 pop	 ebp
  0003b	c2 18 00	 ret	 24			; 00000018H
_IoSetCompletionRoutine@24 ENDP
_TEXT	ENDS
PUBLIC	_IoCopyCurrentIrpStackLocationToNext@4
; Function compile flags: /Ogsp
;	COMDAT _IoCopyCurrentIrpStackLocationToNext@4
_TEXT	SEGMENT
_Irp$ = 8						; size = 4
_IoCopyCurrentIrpStackLocationToNext@4 PROC		; COMDAT

; 23912: {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 23913:     PIO_STACK_LOCATION irpSp;
; 23914:     PIO_STACK_LOCATION nextIrpSp;
; 23915:     irpSp = IoGetCurrentIrpStackLocation(Irp);

  00005	8b 45 08	 mov	 eax, DWORD PTR _Irp$[ebp]
  00008	56		 push	 esi
  00009	8b 70 60	 mov	 esi, DWORD PTR [eax+96]
  0000c	57		 push	 edi

; 23916:     nextIrpSp = IoGetNextIrpStackLocation(Irp);

  0000d	8d 46 dc	 lea	 eax, DWORD PTR [esi-36]

; 23917:     RtlCopyMemory( nextIrpSp, irpSp, FIELD_OFFSET(IO_STACK_LOCATION, CompletionRoutine));

  00010	6a 07		 push	 7
  00012	59		 pop	 ecx
  00013	8b f8		 mov	 edi, eax
  00015	f3 a5		 rep movsd
  00017	5f		 pop	 edi

; 23918:     nextIrpSp->Control = 0;

  00018	c6 40 03 00	 mov	 BYTE PTR [eax+3], 0
  0001c	5e		 pop	 esi

; 23919: }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
_IoCopyCurrentIrpStackLocationToNext@4 ENDP
_TEXT	ENDS
PUBLIC	_IoSkipCurrentIrpStackLocation@4
; Function compile flags: /Ogsp
;	COMDAT _IoSkipCurrentIrpStackLocation@4
_TEXT	SEGMENT
_Irp$ = 8						; size = 4
_IoSkipCurrentIrpStackLocation@4 PROC			; COMDAT

; 23945: {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 23946:     ASSERT(Irp->CurrentLocation <= Irp->StackCount);
; 23947:     Irp->CurrentLocation++;

  00005	8b 45 08	 mov	 eax, DWORD PTR _Irp$[ebp]
  00008	fe 40 23	 inc	 BYTE PTR [eax+35]

; 23948:     Irp->Tail.Overlay.CurrentStackLocation++;

  0000b	83 40 60 24	 add	 DWORD PTR [eax+96], 36	; 00000024H

; 23949: }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
_IoSkipCurrentIrpStackLocation@4 ENDP
_TEXT	ENDS
PUBLIC	_LoadBootArguments@0
EXTRN	__imp__KeBugCheckEx@20:PROC
EXTRN	__imp__MmUnmapIoSpace@8:PROC
EXTRN	_AddPasswordToCache@4:PROC
EXTRN	_CacheBootPassword:DWORD
EXTRN	_GetCrc32@8:PROC
EXTRN	__imp__MmMapIoSpace@16:PROC
EXTRN	__imp__KeInitializeMutex@8:PROC
EXTRN	_memset:PROC
_BSS	SEGMENT
_BootLoaderSegment DW 01H DUP (?)
	ALIGN	4

_MountMutex DB	020H DUP (?)
; Function compile flags: /Ogsp
; File c:\home\public\desktop\projects\ciphershed.build\src\driver\drivefilter.c
_BSS	ENDS
;	COMDAT _LoadBootArguments@0
_TEXT	SEGMENT
_bootLoaderSegment$ = -4				; size = 2
_LoadBootArguments@0 PROC				; COMDAT

; 67   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 68   : 	NTSTATUS status = STATUS_UNSUCCESSFUL;
; 69   : 	PHYSICAL_ADDRESS bootArgsAddr;
; 70   : 	byte *mappedBootArgs;
; 71   : 	uint16 bootLoaderSegment;
; 72   : 
; 73   : 	KeInitializeMutex (&MountMutex, 0);

  00009	6a 00		 push	 0
  0000b	68 00 00 00 00	 push	 OFFSET _MountMutex
  00010	be 01 00 00 c0	 mov	 esi, -1073741823	; c0000001H
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeMutex@8

; 74   : 
; 75   : 	for (bootLoaderSegment = TC_BOOT_LOADER_SEGMENT;
; 76   : 		bootLoaderSegment >= TC_BOOT_LOADER_SEGMENT - 64 * 1024 / 16 && status != STATUS_SUCCESS;
; 77   : 		bootLoaderSegment -= 32 * 1024 / 16)

  0001b	c7 45 fc 00 90
	00 00		 mov	 DWORD PTR _bootLoaderSegment$[ebp], 36864 ; 00009000H
$LL16@LoadBootAr:
  00022	85 f6		 test	 esi, esi
  00024	0f 84 3b 01 00
	00		 je	 $LN7@LoadBootAr

; 78   : 	{
; 79   : 		bootArgsAddr.QuadPart = (bootLoaderSegment << 4) + TC_BOOT_LOADER_ARGS_OFFSET;

  0002a	0f b7 45 fc	 movzx	 eax, WORD PTR _bootLoaderSegment$[ebp]
  0002e	40		 inc	 eax

; 80   : 		Dump ("Checking BootArguments at 0x%x\n", bootArgsAddr.LowPart);
; 81   : 
; 82   : 		mappedBootArgs = MmMapIoSpace (bootArgsAddr, sizeof (BootArguments), MmCached);

  0002f	6a 01		 push	 1
  00031	c1 e0 04	 shl	 eax, 4
  00034	99		 cdq
  00035	6a 76		 push	 118			; 00000076H
  00037	52		 push	 edx
  00038	50		 push	 eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmMapIoSpace@16
  0003f	8b d8		 mov	 ebx, eax

; 83   : 		if (!mappedBootArgs)

  00041	85 db		 test	 ebx, ebx
  00043	0f 84 23 01 00
	00		 je	 $LN13@LoadBootAr

; 85   : 
; 86   : 		if (TC_IS_BOOT_ARGUMENTS_SIGNATURE (mappedBootArgs))

  00049	80 3b 54	 cmp	 BYTE PTR [ebx], 84	; 00000054H
  0004c	0f 85 f4 00 00
	00		 jne	 $LN1@LoadBootAr
  00052	80 7b 01 52	 cmp	 BYTE PTR [ebx+1], 82	; 00000052H
  00056	0f 85 ea 00 00
	00		 jne	 $LN1@LoadBootAr
  0005c	80 7b 02 55	 cmp	 BYTE PTR [ebx+2], 85	; 00000055H
  00060	0f 85 e0 00 00
	00		 jne	 $LN1@LoadBootAr
  00066	80 7b 03 45	 cmp	 BYTE PTR [ebx+3], 69	; 00000045H
  0006a	0f 85 d6 00 00
	00		 jne	 $LN1@LoadBootAr
  00070	80 7b 04 11	 cmp	 BYTE PTR [ebx+4], 17	; 00000011H
  00074	0f 85 cc 00 00
	00		 jne	 $LN1@LoadBootAr
  0007a	80 7b 05 23	 cmp	 BYTE PTR [ebx+5], 35	; 00000023H
  0007e	0f 85 c2 00 00
	00		 jne	 $LN1@LoadBootAr
  00084	80 7b 06 45	 cmp	 BYTE PTR [ebx+6], 69	; 00000045H
  00088	0f 85 b8 00 00
	00		 jne	 $LN1@LoadBootAr
  0008e	80 7b 07 66	 cmp	 BYTE PTR [ebx+7], 102	; 00000066H
  00092	0f 85 ae 00 00
	00		 jne	 $LN1@LoadBootAr

; 87   : 		{
; 88   : 			BootArguments *bootArguments = (BootArguments *) mappedBootArgs;
; 89   : 			Dump ("BootArguments found at 0x%x\n", bootArgsAddr.LowPart);
; 90   : 
; 91   : 			DumpMem (mappedBootArgs, sizeof (BootArguments));
; 92   : 
; 93   : 			if (bootArguments->BootLoaderVersion == VERSION_NUM
; 94   : 				&& bootArguments->BootArgumentsCrc32 != GetCrc32 ((byte *) bootArguments, (int) ((byte *) &bootArguments->BootArgumentsCrc32 - (byte *) bootArguments)))

  00098	b8 30 07 00 00	 mov	 eax, 1840		; 00000730H
  0009d	66 39 43 08	 cmp	 WORD PTR [ebx+8], ax
  000a1	75 11		 jne	 SHORT $LN4@LoadBootAr
  000a3	6a 72		 push	 114			; 00000072H
  000a5	53		 push	 ebx
  000a6	e8 00 00 00 00	 call	 _GetCrc32@8
  000ab	39 43 72	 cmp	 DWORD PTR [ebx+114], eax
  000ae	0f 85 bf 00 00
	00		 jne	 $LN14@LoadBootAr
$LN4@LoadBootAr:

; 98   : 			}
; 99   : 
; 100  : 			BootLoaderSegment = bootLoaderSegment;

  000b4	66 8b 45 fc	 mov	 ax, WORD PTR _bootLoaderSegment$[ebp]

; 101  : 
; 102  : 			BootArgs = *bootArguments;

  000b8	6a 1d		 push	 29			; 0000001dH
  000ba	59		 pop	 ecx
  000bb	8b f3		 mov	 esi, ebx
  000bd	bf 00 00 00 00	 mov	 edi, OFFSET _BootArgs
  000c2	f3 a5		 rep movsd
  000c4	66 a5		 movsw

; 103  : 			BootArgsValid = TRUE;
; 104  : 			memset (bootArguments, 0, sizeof (*bootArguments));

  000c6	6a 76		 push	 118			; 00000076H
  000c8	33 f6		 xor	 esi, esi
  000ca	56		 push	 esi
  000cb	53		 push	 ebx
  000cc	66 a3 00 00 00
	00		 mov	 WORD PTR _BootLoaderSegment, ax
  000d2	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _BootArgsValid, 1
  000dc	e8 00 00 00 00	 call	 _memset

; 105  : 
; 106  : 			if (BootArgs.BootLoaderVersion < 0x600)

  000e1	66 a1 08 00 00
	00		 mov	 ax, WORD PTR _BootArgs+8
  000e7	b9 00 06 00 00	 mov	 ecx, 1536		; 00000600H
  000ec	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ef	66 3b c1	 cmp	 ax, cx
  000f2	73 18		 jae	 SHORT $LN3@LoadBootAr

; 107  : 			{
; 108  : 				BootArgs.HiddenSystemPartitionStart = 0;

  000f4	89 35 5a 00 00
	00		 mov	 DWORD PTR _BootArgs+90, esi
  000fa	89 35 5e 00 00
	00		 mov	 DWORD PTR _BootArgs+94, esi

; 109  : 				BootArgs.DecoySystemPartitionStart = 0;

  00100	89 35 62 00 00
	00		 mov	 DWORD PTR _BootArgs+98, esi
  00106	89 35 66 00 00
	00		 mov	 DWORD PTR _BootArgs+102, esi
$LN3@LoadBootAr:

; 110  : 			}
; 111  : 
; 112  : 			if (BootArgs.BootLoaderVersion < 0x630)

  0010c	b9 30 06 00 00	 mov	 ecx, 1584		; 00000630H
  00111	66 3b c1	 cmp	 ax, cx
  00114	73 06		 jae	 SHORT $LN2@LoadBootAr

; 113  : 				BootArgs.Flags = 0;

  00116	89 35 6a 00 00
	00		 mov	 DWORD PTR _BootArgs+106, esi
$LN2@LoadBootAr:

; 114  : 
; 115  : 			BootDriveSignatureValid = (BootArgs.BootLoaderVersion >= 0x710);

  0011c	b9 10 07 00 00	 mov	 ecx, 1808		; 00000710H
  00121	66 3b c1	 cmp	 ax, cx
  00124	1b c0		 sbb	 eax, eax
  00126	40		 inc	 eax
  00127	a3 00 00 00 00	 mov	 DWORD PTR _BootDriveSignatureValid, eax

; 116  : 
; 117  : 			Dump ("BootLoaderVersion = %x\n", (int) BootArgs.BootLoaderVersion);
; 118  : 			Dump ("HeaderSaltCrc32 = %x\n", (int) BootArgs.HeaderSaltCrc32);
; 119  : 			Dump ("CryptoInfoOffset = %x\n", (int) BootArgs.CryptoInfoOffset);
; 120  : 			Dump ("CryptoInfoLength = %d\n", (int) BootArgs.CryptoInfoLength);
; 121  : 			Dump ("HiddenSystemPartitionStart = %I64u\n", BootArgs.HiddenSystemPartitionStart);
; 122  : 			Dump ("DecoySystemPartitionStart = %I64u\n", BootArgs.DecoySystemPartitionStart);
; 123  : 			Dump ("Flags = %x\n", BootArgs.Flags);
; 124  : 			Dump ("BootDriveSignature = %x\n", BootArgs.BootDriveSignature);
; 125  : 			Dump ("BootArgumentsCrc32 = %x\n", BootArgs.BootArgumentsCrc32);
; 126  : 
; 127  : 			if (CacheBootPassword && BootArgs.BootPassword.Length > 0)

  0012c	39 35 00 00 00
	00		 cmp	 DWORD PTR _CacheBootPassword, esi
  00132	74 12		 je	 SHORT $LN1@LoadBootAr
  00134	39 35 12 00 00
	00		 cmp	 DWORD PTR _BootArgs+18, esi
  0013a	76 0a		 jbe	 SHORT $LN1@LoadBootAr

; 128  : 				AddPasswordToCache (&BootArgs.BootPassword);

  0013c	68 12 00 00 00	 push	 OFFSET _BootArgs+18
  00141	e8 00 00 00 00	 call	 _AddPasswordToCache@4
$LN1@LoadBootAr:

; 129  : 
; 130  : 			status = STATUS_SUCCESS;
; 131  : 		}
; 132  : 
; 133  : 		MmUnmapIoSpace (mappedBootArgs, sizeof (BootArguments));

  00146	6a 76		 push	 118			; 00000076H
  00148	53		 push	 ebx
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmUnmapIoSpace@8
  0014f	81 45 fc 00 f8
	00 00		 add	 DWORD PTR _bootLoaderSegment$[ebp], 63488 ; 0000f800H
  00156	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  0015b	66 39 45 fc	 cmp	 WORD PTR _bootLoaderSegment$[ebp], ax
  0015f	0f 83 bd fe ff
	ff		 jae	 $LL16@LoadBootAr
$LN7@LoadBootAr:

; 134  : 	}
; 135  : 
; 136  : 	return status;

  00165	8b c6		 mov	 eax, esi
$LN10@LoadBootAr:
  00167	5f		 pop	 edi
  00168	5e		 pop	 esi
  00169	5b		 pop	 ebx

; 137  : }

  0016a	c9		 leave
  0016b	c3		 ret	 0
$LN13@LoadBootAr:

; 84   : 			return STATUS_INSUFFICIENT_RESOURCES;

  0016c	b8 9a 00 00 c0	 mov	 eax, -1073741670	; c000009aH
  00171	eb f4		 jmp	 SHORT $LN10@LoadBootAr
$LN14@LoadBootAr:

; 95   : 			{
; 96   : 				Dump ("BootArguments CRC incorrect\n");
; 97   : 				TC_BUG_CHECK (STATUS_CRC_ERROR);

  00173	68 43 54 00 00	 push	 21571			; 00005443H
  00178	6a 00		 push	 0
  0017a	68 3f 00 00 c0	 push	 -1073741761		; c000003fH
  0017f	6a 61		 push	 97			; 00000061H
  00181	6a 29		 push	 41			; 00000029H
  00183	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeBugCheckEx@20
$LN18@LoadBootAr:
$LN17@LoadBootAr:
  00189	cc		 int	 3
_LoadBootArguments@0 ENDP
_TEXT	ENDS
PUBLIC	_DriveFilterAddDevice@8
EXTRN	__imp__IoInitializeRemoveLockEx@20:PROC
EXTRN	__imp__IoDeleteDevice@4:PROC
EXTRN	__imp__IoDetachDevice@4:PROC
EXTRN	__imp__IoAttachDeviceToDeviceStack@8:PROC
EXTRN	__imp_@ObfDereferenceObject@4:PROC
EXTRN	__imp__IoCreateDevice@28:PROC
EXTRN	__imp__IoGetAttachedDeviceReference@4:PROC
; Function compile flags: /Ogsp
;	COMDAT _DriveFilterAddDevice@8
_TEXT	SEGMENT
_filterDeviceObject$ = -4				; size = 4
_status$ = 8						; size = 4
_driverObject$ = 8					; size = 4
_pdo$ = 12						; size = 4
_DriveFilterAddDevice@8 PROC				; COMDAT

; 141  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 142  : 	DriveFilterExtension *Extension;
; 143  : 	NTSTATUS status;
; 144  : 	PDEVICE_OBJECT filterDeviceObject = NULL;
; 145  : 	PDEVICE_OBJECT attachedDeviceObject;
; 146  : 
; 147  : 	Dump ("DriveFilterAddDevice pdo=%p\n", pdo);
; 148  : 
; 149  : 	attachedDeviceObject = IoGetAttachedDeviceReference (pdo);

  00009	ff 75 0c	 push	 DWORD PTR _pdo$[ebp]
  0000c	33 db		 xor	 ebx, ebx
  0000e	89 5d fc	 mov	 DWORD PTR _filterDeviceObject$[ebp], ebx
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoGetAttachedDeviceReference@4
  00017	8b f0		 mov	 esi, eax

; 150  : 	status = IoCreateDevice (driverObject, sizeof (DriveFilterExtension), NULL, attachedDeviceObject->DeviceType, 0, FALSE, &filterDeviceObject);

  00019	8d 45 fc	 lea	 eax, DWORD PTR _filterDeviceObject$[ebp]
  0001c	50		 push	 eax
  0001d	53		 push	 ebx
  0001e	53		 push	 ebx
  0001f	ff 76 2c	 push	 DWORD PTR [esi+44]
  00022	bf 10 02 00 00	 mov	 edi, 528		; 00000210H
  00027	53		 push	 ebx
  00028	57		 push	 edi
  00029	ff 75 08	 push	 DWORD PTR _driverObject$[ebp]
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoCreateDevice@28

; 151  : 
; 152  : 	ObDereferenceObject (attachedDeviceObject);

  00032	8b ce		 mov	 ecx, esi
  00034	89 45 08	 mov	 DWORD PTR _status$[ebp], eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@ObfDereferenceObject@4

; 153  : 
; 154  : 	if (!NT_SUCCESS (status))

  0003d	39 5d 08	 cmp	 DWORD PTR _status$[ebp], ebx

; 155  : 	{
; 156  : 		filterDeviceObject = NULL;
; 157  : 		goto err;

  00040	0f 8c d8 00 00
	00		 jl	 $LN7@DriveFilte

; 158  : 	}
; 159  : 
; 160  : 	Extension = (DriveFilterExtension *) filterDeviceObject->DeviceExtension;

  00046	8b 45 fc	 mov	 eax, DWORD PTR _filterDeviceObject$[ebp]
  00049	8b 70 28	 mov	 esi, DWORD PTR [eax+40]

; 161  : 	memset (Extension, 0, sizeof (DriveFilterExtension));

  0004c	57		 push	 edi
  0004d	53		 push	 ebx
  0004e	56		 push	 esi
  0004f	e8 00 00 00 00	 call	 _memset
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 162  : 
; 163  : 	Extension->LowerDeviceObject = IoAttachDeviceToDeviceStack (filterDeviceObject, pdo);  // IoAttachDeviceToDeviceStackSafe() is not required in AddDevice routine and is also unavailable on Windows 2000 SP4

  00057	ff 75 0c	 push	 DWORD PTR _pdo$[ebp]
  0005a	ff 75 fc	 push	 DWORD PTR _filterDeviceObject$[ebp]
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoAttachDeviceToDeviceStack@8
  00063	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 164  : 	if (!Extension->LowerDeviceObject)

  00066	3b c3		 cmp	 eax, ebx
  00068	75 2b		 jne	 SHORT $LN3@DriveFilte

; 165  : 	{
; 166  : 		status = STATUS_DEVICE_REMOVED;

  0006a	c7 45 08 b6 02
	00 c0		 mov	 DWORD PTR _status$[ebp], -1073741130 ; c00002b6H
$err$27887:

; 188  : 
; 189  : err:
; 190  : 	if (filterDeviceObject)

  00071	39 5d fc	 cmp	 DWORD PTR _filterDeviceObject$[ebp], ebx
  00074	0f 84 a4 00 00
	00		 je	 $LN7@DriveFilte

; 191  : 	{
; 192  : 		if (Extension->LowerDeviceObject)

  0007a	8b f0		 mov	 esi, eax
  0007c	3b f3		 cmp	 esi, ebx
  0007e	74 07		 je	 SHORT $LN1@DriveFilte

; 193  : 			IoDetachDevice (Extension->LowerDeviceObject);

  00080	56		 push	 esi
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoDetachDevice@4
$LN1@DriveFilte:

; 194  : 
; 195  : 		IoDeleteDevice (filterDeviceObject);

  00087	ff 75 fc	 push	 DWORD PTR _filterDeviceObject$[ebp]
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoDeleteDevice@4

; 196  : 	}
; 197  : 
; 198  : 	return status;

  00090	e9 89 00 00 00	 jmp	 $LN7@DriveFilte
$LN3@DriveFilte:

; 167  : 		goto err;
; 168  : 	}
; 169  : 
; 170  : 	Extension->IsDriveFilterDevice = Extension->Queue.IsFilterDevice = TRUE;

  00095	33 ff		 xor	 edi, edi

; 171  : 	Extension->DeviceObject = Extension->Queue.DeviceObject = filterDeviceObject;
; 172  : 	Extension->Pdo = pdo;
; 173  : 	
; 174  : 	Extension->Queue.LowerDeviceObject = Extension->LowerDeviceObject;
; 175  : 	IoInitializeRemoveLock (&Extension->Queue.RemoveLock, 'LRCT', 0, 0);

  00097	6a 18		 push	 24			; 00000018H
  00099	47		 inc	 edi
  0009a	89 be 84 00 00
	00		 mov	 DWORD PTR [esi+132], edi
  000a0	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR _filterDeviceObject$[ebp]
  000a6	53		 push	 ebx
  000a7	89 4e 48	 mov	 DWORD PTR [esi+72], ecx
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _filterDeviceObject$[ebp]
  000ad	53		 push	 ebx
  000ae	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax
  000b4	89 4e 18	 mov	 DWORD PTR [esi+24], ecx
  000b7	8b 4d 0c	 mov	 ecx, DWORD PTR _pdo$[ebp]
  000ba	68 54 43 52 4c	 push	 1280459604		; 4c524354H
  000bf	8d 86 b8 00 00
	00		 lea	 eax, DWORD PTR [esi+184]
  000c5	50		 push	 eax
  000c6	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoInitializeRemoveLockEx@20

; 176  : 
; 177  : 	Extension->ConfiguredEncryptedAreaStart = -1;
; 178  : 	Extension->ConfiguredEncryptedAreaEnd = -1;
; 179  : 	Extension->Queue.EncryptedAreaStart = -1;
; 180  : 	Extension->Queue.EncryptedAreaEnd = -1;
; 181  : 	Extension->Queue.EncryptedAreaEndUpdatePending = FALSE;
; 182  : 
; 183  : 	filterDeviceObject->Flags |= Extension->LowerDeviceObject->Flags & (DO_DIRECT_IO | DO_BUFFERED_IO | DO_POWER_PAGABLE);

  000cf	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  000d2	83 c8 ff	 or	 eax, -1
  000d5	89 46 30	 mov	 DWORD PTR [esi+48], eax
  000d8	89 46 34	 mov	 DWORD PTR [esi+52], eax
  000db	89 46 38	 mov	 DWORD PTR [esi+56], eax
  000de	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  000e1	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax
  000e7	89 86 94 00 00
	00		 mov	 DWORD PTR [esi+148], eax
  000ed	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
  000f3	89 86 9c 00 00
	00		 mov	 DWORD PTR [esi+156], eax
  000f9	89 9e a0 00 00
	00		 mov	 DWORD PTR [esi+160], ebx
  000ff	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00102	8b 45 fc	 mov	 eax, DWORD PTR _filterDeviceObject$[ebp]
  00105	81 e1 14 20 00
	00		 and	 ecx, 8212		; 00002014H
  0010b	09 48 1c	 or	 DWORD PTR [eax+28], ecx

; 184  : 	filterDeviceObject->Flags &= ~DO_DEVICE_INITIALIZING;

  0010e	8b 45 fc	 mov	 eax, DWORD PTR _filterDeviceObject$[ebp]
  00111	81 60 1c 7f ff
	ff ff		 and	 DWORD PTR [eax+28], -129 ; ffffff7fH

; 185  : 
; 186  : 	DeviceFilterActive = TRUE;

  00118	89 3d 00 00 00
	00		 mov	 DWORD PTR _DeviceFilterActive, edi
$LN7@DriveFilte:

; 187  : 	return status;

  0011e	8b 45 08	 mov	 eax, DWORD PTR _status$[ebp]
  00121	5f		 pop	 edi
  00122	5e		 pop	 esi
  00123	5b		 pop	 ebx

; 199  : }

  00124	c9		 leave
  00125	c2 08 00	 ret	 8
_DriveFilterAddDevice@8 ENDP
_TEXT	ENDS
EXTRN	_crypto_close@4:PROC
EXTRN	_EncryptedIoQueueStop@4:PROC
EXTRN	_EncryptedIoQueueIsRunning@4:PROC
; Function compile flags: /Ogsp
;	COMDAT _DismountDrive@8
_TEXT	SEGMENT
_stopIoQueue$ = 8					; size = 4
_DismountDrive@8 PROC					; COMDAT
; _Extension$ = esi

; 203  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 204  : 	Dump ("Dismounting drive\n");
; 205  : 	ASSERT (Extension->DriveMounted);
; 206  : 	
; 207  : 	if (stopIoQueue && EncryptedIoQueueIsRunning (&Extension->Queue))

  00005	83 7d 08 00	 cmp	 DWORD PTR _stopIoQueue$[ebp], 0
  00009	57		 push	 edi
  0000a	74 13		 je	 SHORT $LN1@DismountDr
  0000c	8d 7e 48	 lea	 edi, DWORD PTR [esi+72]
  0000f	57		 push	 edi
  00010	e8 00 00 00 00	 call	 _EncryptedIoQueueIsRunning@4
  00015	85 c0		 test	 eax, eax
  00017	74 06		 je	 SHORT $LN1@DismountDr

; 208  : 		EncryptedIoQueueStop (&Extension->Queue);

  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 _EncryptedIoQueueStop@4
$LN1@DismountDr:

; 209  : 
; 210  : 	crypto_close (Extension->Queue.CryptoInfo);

  0001f	ff 76 70	 push	 DWORD PTR [esi+112]
  00022	e8 00 00 00 00	 call	 _crypto_close@4

; 211  : 	Extension->Queue.CryptoInfo = NULL;

  00027	83 66 70 00	 and	 DWORD PTR [esi+112], 0

; 212  : 
; 213  : 	crypto_close (Extension->HeaderCryptoInfo);

  0002b	8d be 04 02 00
	00		 lea	 edi, DWORD PTR [esi+516]
  00031	ff 37		 push	 DWORD PTR [edi]
  00033	e8 00 00 00 00	 call	 _crypto_close@4

; 214  : 	Extension->HeaderCryptoInfo = NULL;

  00038	83 27 00	 and	 DWORD PTR [edi], 0

; 215  : 
; 216  : 	Extension->DriveMounted = FALSE;

  0003b	83 a6 f0 01 00
	00 00		 and	 DWORD PTR [esi+496], 0
  00042	5f		 pop	 edi

; 217  : }

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
_DismountDrive@8 ENDP
_TEXT	ENDS
EXTRN	__imp__ExFreePoolWithTag@8:PROC
EXTRN	_TCWriteDevice@20:PROC
EXTRN	_EncryptBuffer@16:PROC
EXTRN	_GetHeaderField32@8:PROC
EXTRN	_DecryptBuffer@16:PROC
EXTRN	_TCReadDevice@20:PROC
EXTRN	__imp__ExAllocatePoolWithTag@12:PROC
_BSS	SEGMENT
_SetupRequest DB 010H DUP (?)
; Function compile flags: /Ogsp
_BSS	ENDS
;	COMDAT _SaveDriveVolumeHeader@4
_TEXT	SEGMENT
_encryptedAreaLength$27996 = -12			; size = 8
_header$ = -4						; size = 4
_SaveDriveVolumeHeader@4 PROC				; COMDAT
; _Extension$ = edi

; 408  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00008	56		 push	 esi

; 409  : 	NTSTATUS status = STATUS_SUCCESS;
; 410  : 	LARGE_INTEGER offset;
; 411  : 	byte *header;
; 412  : 
; 413  : 	header = TCalloc (TC_BOOT_ENCRYPTION_VOLUME_HEADER_SIZE);

  00009	68 54 43 4d 4d	 push	 1296909140		; 4d4d4354H
  0000e	be 00 02 00 00	 mov	 esi, 512		; 00000200H
  00013	56		 push	 esi
  00014	6a 00		 push	 0
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  0001c	89 45 fc	 mov	 DWORD PTR _header$[ebp], eax

; 414  : 	if (!header)

  0001f	85 c0		 test	 eax, eax
  00021	75 0a		 jne	 SHORT $LN8@SaveDriveV

; 415  : 		return STATUS_INSUFFICIENT_RESOURCES;

  00023	b8 9a 00 00 c0	 mov	 eax, -1073741670	; c000009aH
  00028	e9 ab 01 00 00	 jmp	 $LN9@SaveDriveV
$LN8@SaveDriveV:
  0002d	53		 push	 ebx

; 416  : 
; 417  : 	offset.QuadPart = TC_BOOT_VOLUME_HEADER_SECTOR_OFFSET;
; 418  : 
; 419  : 	status = TCReadDevice (Extension->LowerDeviceObject, header, offset, TC_BOOT_ENCRYPTION_VOLUME_HEADER_SIZE);

  0002e	56		 push	 esi
  0002f	33 d2		 xor	 edx, edx
  00031	52		 push	 edx
  00032	b9 00 7c 00 00	 mov	 ecx, 31744		; 00007c00H
  00037	51		 push	 ecx
  00038	50		 push	 eax
  00039	ff 77 1c	 push	 DWORD PTR [edi+28]
  0003c	e8 00 00 00 00	 call	 _TCReadDevice@20
  00041	8b d8		 mov	 ebx, eax

; 420  : 	if (!NT_SUCCESS (status))

  00043	85 db		 test	 ebx, ebx
  00045	0f 8c 7c 01 00
	00		 jl	 $ret$27990

; 421  : 	{
; 422  : 		Dump ("TCReadDevice error %x", status);
; 423  : 		goto ret;
; 424  : 	}
; 425  : 
; 426  : 	Dump ("Saving: ConfiguredEncryptedAreaStart=%I64d (%I64d)  ConfiguredEncryptedAreaEnd=%I64d (%I64d)\n", Extension->ConfiguredEncryptedAreaStart / 1024 / 1024, Extension->ConfiguredEncryptedAreaStart, Extension->ConfiguredEncryptedAreaEnd / 1024 / 1024, Extension->ConfiguredEncryptedAreaEnd);
; 427  : 	Dump ("Saving: EncryptedAreaStart=%I64d (%I64d)  EncryptedAreaEnd=%I64d (%I64d)\n", Extension->Queue.EncryptedAreaStart / 1024 / 1024, Extension->Queue.EncryptedAreaStart, Extension->Queue.EncryptedAreaEnd / 1024 / 1024, Extension->Queue.EncryptedAreaEnd);
; 428  : 	
; 429  : 	if (Extension->Queue.EncryptedAreaStart == -1 || Extension->Queue.EncryptedAreaEnd == -1
; 430  : 		|| Extension->Queue.EncryptedAreaEnd <= Extension->Queue.EncryptedAreaStart)

  0004b	8b 87 90 00 00
	00		 mov	 eax, DWORD PTR [edi+144]
  00051	23 87 94 00 00
	00		 and	 eax, DWORD PTR [edi+148]
  00057	83 f8 ff	 cmp	 eax, -1
  0005a	0f 84 32 01 00
	00		 je	 $LN5@SaveDriveV
  00060	8b 87 98 00 00
	00		 mov	 eax, DWORD PTR [edi+152]
  00066	23 87 9c 00 00
	00		 and	 eax, DWORD PTR [edi+156]
  0006c	83 f8 ff	 cmp	 eax, -1
  0006f	0f 84 1d 01 00
	00		 je	 $LN5@SaveDriveV
  00075	8b 8f 98 00 00
	00		 mov	 ecx, DWORD PTR [edi+152]
  0007b	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  00081	3b 87 94 00 00
	00		 cmp	 eax, DWORD PTR [edi+148]
  00087	0f 8c 05 01 00
	00		 jl	 $LN5@SaveDriveV
  0008d	7f 0c		 jg	 SHORT $LN11@SaveDriveV
  0008f	3b 8f 90 00 00
	00		 cmp	 ecx, DWORD PTR [edi+144]
  00095	0f 86 f7 00 00
	00		 jbe	 $LN5@SaveDriveV
$LN11@SaveDriveV:

; 436  : 		}
; 437  : 	}
; 438  : 	else
; 439  : 	{
; 440  : 		uint32 headerCrc32;
; 441  : 		uint64 encryptedAreaLength = Extension->Queue.EncryptedAreaEnd + 1 - Extension->Queue.EncryptedAreaStart;

  0009b	8b 8f 98 00 00
	00		 mov	 ecx, DWORD PTR [edi+152]
  000a1	8b 97 9c 00 00
	00		 mov	 edx, DWORD PTR [edi+156]

; 442  : 		byte *fieldPos = header + TC_HEADER_OFFSET_ENCRYPTED_AREA_LENGTH;

  000a7	8b 75 fc	 mov	 esi, DWORD PTR _header$[ebp]
  000aa	33 c0		 xor	 eax, eax
  000ac	40		 inc	 eax
  000ad	2b 87 90 00 00
	00		 sub	 eax, DWORD PTR [edi+144]
  000b3	6a 00		 push	 0
  000b5	5b		 pop	 ebx
  000b6	1b 9f 94 00 00
	00		 sbb	 ebx, DWORD PTR [edi+148]

; 443  : 
; 444  : 		DecryptBuffer (header + HEADER_ENCRYPTED_DATA_OFFSET, HEADER_ENCRYPTED_DATA_SIZE, Extension->HeaderCryptoInfo);

  000bc	ff b7 04 02 00
	00		 push	 DWORD PTR [edi+516]
  000c2	03 c1		 add	 eax, ecx
  000c4	89 45 f4	 mov	 DWORD PTR _encryptedAreaLength$27996[ebp], eax
  000c7	8b 45 fc	 mov	 eax, DWORD PTR _header$[ebp]
  000ca	6a 00		 push	 0
  000cc	13 da		 adc	 ebx, edx
  000ce	83 c0 40	 add	 eax, 64			; 00000040H
  000d1	68 c0 01 00 00	 push	 448			; 000001c0H
  000d6	50		 push	 eax
  000d7	83 c6 74	 add	 esi, 116		; 00000074H
  000da	e8 00 00 00 00	 call	 _DecryptBuffer@16

; 445  : 
; 446  : 		/* Modifying 'TRUE' can introduce incompatibility with previous versions. */
; 447  : 		if (GetHeaderField32 (header, TC_HEADER_OFFSET_MAGIC) != 0x54525545)

  000df	6a 40		 push	 64			; 00000040H
  000e1	ff 75 fc	 push	 DWORD PTR _header$[ebp]
  000e4	e8 00 00 00 00	 call	 _GetHeaderField32@8
  000e9	3d 45 55 52 54	 cmp	 eax, 1414681925		; 54525545H
  000ee	74 0a		 je	 SHORT $LN2@SaveDriveV

; 448  : 		{
; 449  : 			Dump ("Header not decrypted");
; 450  : 			status = STATUS_UNKNOWN_REVISION;

  000f0	bb 58 00 00 c0	 mov	 ebx, -1073741736	; c0000058H

; 451  : 			goto ret;

  000f5	e9 cd 00 00 00	 jmp	 $ret$27990
$LN2@SaveDriveV:

; 452  : 		}
; 453  : 
; 454  : 		mputInt64 (fieldPos, encryptedAreaLength);

  000fa	8b c3		 mov	 eax, ebx
  000fc	c1 e8 18	 shr	 eax, 24			; 00000018H
  000ff	88 06		 mov	 BYTE PTR [esi], al
  00101	46		 inc	 esi
  00102	8b c3		 mov	 eax, ebx
  00104	c1 e8 10	 shr	 eax, 16			; 00000010H
  00107	88 06		 mov	 BYTE PTR [esi], al
  00109	46		 inc	 esi
  0010a	8b c3		 mov	 eax, ebx
  0010c	c1 e8 08	 shr	 eax, 8
  0010f	88 06		 mov	 BYTE PTR [esi], al
  00111	46		 inc	 esi
  00112	8b c3		 mov	 eax, ebx
  00114	88 06		 mov	 BYTE PTR [esi], al
  00116	8b 45 f4	 mov	 eax, DWORD PTR _encryptedAreaLength$27996[ebp]
  00119	8b c8		 mov	 ecx, eax
  0011b	8b d3		 mov	 edx, ebx
  0011d	0f ac d1 18	 shrd	 ecx, edx, 24
  00121	46		 inc	 esi
  00122	88 0e		 mov	 BYTE PTR [esi], cl
  00124	c1 ea 18	 shr	 edx, 24			; 00000018H
  00127	8b c8		 mov	 ecx, eax
  00129	8b d3		 mov	 edx, ebx
  0012b	0f ac d1 10	 shrd	 ecx, edx, 16
  0012f	46		 inc	 esi
  00130	88 0e		 mov	 BYTE PTR [esi], cl
  00132	8b c8		 mov	 ecx, eax
  00134	0f ac d9 08	 shrd	 ecx, ebx, 8
  00138	c1 ea 10	 shr	 edx, 16			; 00000010H
  0013b	46		 inc	 esi
  0013c	88 0e		 mov	 BYTE PTR [esi], cl
  0013e	88 46 01	 mov	 BYTE PTR [esi+1], al

; 455  : 
; 456  : 		headerCrc32 = GetCrc32 (header + TC_HEADER_OFFSET_MAGIC, TC_HEADER_OFFSET_HEADER_CRC - TC_HEADER_OFFSET_MAGIC);

  00141	8b 75 fc	 mov	 esi, DWORD PTR _header$[ebp]
  00144	68 bc 00 00 00	 push	 188			; 000000bcH
  00149	83 c6 40	 add	 esi, 64			; 00000040H
  0014c	56		 push	 esi
  0014d	c1 eb 08	 shr	 ebx, 8
  00150	e8 00 00 00 00	 call	 _GetCrc32@8

; 457  : 		fieldPos = header + TC_HEADER_OFFSET_HEADER_CRC;

  00155	8b 4d fc	 mov	 ecx, DWORD PTR _header$[ebp]
  00158	81 c1 fc 00 00
	00		 add	 ecx, 252		; 000000fcH

; 458  : 		mputLong (fieldPos, headerCrc32);

  0015e	8b d0		 mov	 edx, eax
  00160	c1 ea 18	 shr	 edx, 24			; 00000018H
  00163	88 11		 mov	 BYTE PTR [ecx], dl
  00165	8b d0		 mov	 edx, eax
  00167	c1 ea 10	 shr	 edx, 16			; 00000010H
  0016a	41		 inc	 ecx
  0016b	88 11		 mov	 BYTE PTR [ecx], dl
  0016d	8b d0		 mov	 edx, eax
  0016f	41		 inc	 ecx
  00170	c1 ea 08	 shr	 edx, 8
  00173	88 11		 mov	 BYTE PTR [ecx], dl
  00175	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 459  : 
; 460  : 		EncryptBuffer (header + HEADER_ENCRYPTED_DATA_OFFSET, HEADER_ENCRYPTED_DATA_SIZE, Extension->HeaderCryptoInfo);

  00178	ff b7 04 02 00
	00		 push	 DWORD PTR [edi+516]
  0017e	6a 00		 push	 0
  00180	68 c0 01 00 00	 push	 448			; 000001c0H
  00185	56		 push	 esi
  00186	e8 00 00 00 00	 call	 _EncryptBuffer@16
  0018b	be 00 02 00 00	 mov	 esi, 512		; 00000200H
  00190	eb 1e		 jmp	 SHORT $LN12@SaveDriveV
$LN5@SaveDriveV:

; 431  : 	{
; 432  : 		if (SetupRequest.SetupMode == SetupDecryption)

  00192	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _SetupRequest, 2
  00199	75 15		 jne	 SHORT $LN12@SaveDriveV

; 433  : 		{
; 434  : 			memset (header, 0, TC_BOOT_ENCRYPTION_VOLUME_HEADER_SIZE);

  0019b	56		 push	 esi
  0019c	6a 00		 push	 0
  0019e	ff 75 fc	 push	 DWORD PTR _header$[ebp]
  001a1	e8 00 00 00 00	 call	 _memset
  001a6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 435  : 			Extension->VolumeHeaderPresent = FALSE;

  001a9	83 a7 ec 01 00
	00 00		 and	 DWORD PTR [edi+492], 0
$LN12@SaveDriveV:

; 461  : 	}
; 462  : 
; 463  : 	status = TCWriteDevice (Extension->LowerDeviceObject, header, offset, TC_BOOT_ENCRYPTION_VOLUME_HEADER_SIZE);

  001b0	56		 push	 esi
  001b1	33 c0		 xor	 eax, eax
  001b3	50		 push	 eax
  001b4	b8 00 7c 00 00	 mov	 eax, 31744		; 00007c00H
  001b9	50		 push	 eax
  001ba	ff 75 fc	 push	 DWORD PTR _header$[ebp]
  001bd	ff 77 1c	 push	 DWORD PTR [edi+28]
  001c0	e8 00 00 00 00	 call	 _TCWriteDevice@20
  001c5	8b d8		 mov	 ebx, eax
$ret$27990:

; 464  : 	if (!NT_SUCCESS (status))
; 465  : 	{
; 466  : 		Dump ("TCWriteDevice error %x", status);
; 467  : 		goto ret;
; 468  : 	}
; 469  : 
; 470  : ret:
; 471  : 	TCfree (header);

  001c7	68 54 43 4d 4d	 push	 1296909140		; 4d4d4354H
  001cc	ff 75 fc	 push	 DWORD PTR _header$[ebp]
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePoolWithTag@8

; 472  : 	return status;

  001d5	8b c3		 mov	 eax, ebx
  001d7	5b		 pop	 ebx
$LN9@SaveDriveV:
  001d8	5e		 pop	 esi

; 473  : }

  001d9	c9		 leave
  001da	c3		 ret	 0
_SaveDriveVolumeHeader@4 ENDP
_TEXT	ENDS
EXTRN	__imp_@IofCallDriver@8:PROC
; Function compile flags: /Ogsp
;	COMDAT _PassIrp@8
_TEXT	SEGMENT
_PassIrp@8 PROC						; COMDAT
; _deviceObject$ = ecx
; _irp$ = edx

; 478  : 	IoSkipCurrentIrpStackLocation (irp);

  00000	fe 42 23	 inc	 BYTE PTR [edx+35]
  00003	83 42 60 24	 add	 DWORD PTR [edx+96], 36	; 00000024H

; 479  : 	return IoCallDriver (deviceObject, irp);

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_@IofCallDriver@8
_PassIrp@8 ENDP
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT _PassFilteredIrp@16
_TEXT	SEGMENT
_deviceObject$ = 8					; size = 4
_completionRoutineArg$ = 12				; size = 4
_PassFilteredIrp@16 PROC				; COMDAT
; _irp$ = edx
; _completionRoutine$ = ebx

; 484  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	56		 push	 esi

; 485  : 	IoCopyCurrentIrpStackLocationToNext (irp);

  00006	8b 72 60	 mov	 esi, DWORD PTR [edx+96]
  00009	57		 push	 edi
  0000a	8d 46 dc	 lea	 eax, DWORD PTR [esi-36]
  0000d	6a 07		 push	 7
  0000f	59		 pop	 ecx
  00010	8b f8		 mov	 edi, eax
  00012	f3 a5		 rep movsd
  00014	5f		 pop	 edi
  00015	c6 40 03 00	 mov	 BYTE PTR [eax+3], 0
  00019	5e		 pop	 esi

; 486  : 
; 487  : 	if (completionRoutine)

  0001a	85 db		 test	 ebx, ebx
  0001c	74 13		 je	 SHORT $LN10@PassFilter

; 488  : 		IoSetCompletionRoutine (irp, completionRoutine, completionRoutineArg, TRUE, TRUE, TRUE);

  0001e	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR _completionRoutineArg$[ebp]
  00024	83 e8 24	 sub	 eax, 36			; 00000024H
  00027	89 58 1c	 mov	 DWORD PTR [eax+28], ebx
  0002a	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  0002d	c6 40 03 e0	 mov	 BYTE PTR [eax+3], 224	; 000000e0H
$LN10@PassFilter:

; 489  : 
; 490  : 	return IoCallDriver (deviceObject, irp);

  00031	8b 4d 08	 mov	 ecx, DWORD PTR _deviceObject$[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCallDriver@8

; 491  : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
_PassFilteredIrp@16 ENDP
_TEXT	ENDS
EXTRN	__imp__IoReleaseRemoveLockEx@12:PROC
; Function compile flags: /Ogsp
;	COMDAT _OnDeviceUsageNotificationCompleted@12
_TEXT	SEGMENT
_filterDeviceObject$ = 8				; size = 4
_Irp$ = 12						; size = 4
_Extension$ = 16					; size = 4
_OnDeviceUsageNotificationCompleted@12 PROC		; COMDAT

; 495  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 496  : 	if (Irp->PendingReturned)

  00005	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00008	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0000c	74 07		 je	 SHORT $LN5@OnDeviceUs

; 497  : 		IoMarkIrpPending (Irp);

  0000e	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00011	80 48 03 01	 or	 BYTE PTR [eax+3], 1
$LN5@OnDeviceUs:

; 498  : 
; 499  : 	if (!(Extension->LowerDeviceObject->Flags & DO_POWER_PAGABLE))

  00015	8b 45 10	 mov	 eax, DWORD PTR _Extension$[ebp]
  00018	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  0001b	f7 42 1c 00 20
	00 00		 test	 DWORD PTR [edx+28], 8192 ; 00002000H
  00022	75 0a		 jne	 SHORT $LN1@OnDeviceUs

; 500  : 		filterDeviceObject->Flags &= ~DO_POWER_PAGABLE;

  00024	8b 55 08	 mov	 edx, DWORD PTR _filterDeviceObject$[ebp]
  00027	81 62 1c ff df
	ff ff		 and	 DWORD PTR [edx+28], -8193 ; ffffdfffH
$LN1@OnDeviceUs:

; 501  : 
; 502  : 	IoReleaseRemoveLock (&Extension->Queue.RemoveLock, Irp);

  0002e	6a 18		 push	 24			; 00000018H
  00030	51		 push	 ecx
  00031	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoReleaseRemoveLockEx@12

; 503  : 	return STATUS_CONTINUE_COMPLETION;

  0003d	33 c0		 xor	 eax, eax

; 504  : }

  0003f	5d		 pop	 ebp
  00040	c2 0c 00	 ret	 12			; 0000000cH
_OnDeviceUsageNotificationCompleted@12 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_SendDeviceIoControlRequest@24:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogsp
;	COMDAT _IsVolumeDevice@4
_TEXT	SEGMENT
_extents$ = -88						; size = 64
_volNumber$ = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_IsVolumeDevice@4 PROC					; COMDAT
; _deviceObject$ = edi

; 508  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 58	 sub	 esp, 88			; 00000058H
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00012	53		 push	 ebx
  00013	56		 push	 esi

; 509  : 	VOLUME_NUMBER volNumber;
; 510  : 	VOLUME_DISK_EXTENTS extents[2];
; 511  : 	NTSTATUS extentStatus = SendDeviceIoControlRequest (deviceObject, IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS, NULL, 0, extents, sizeof (extents));

  00014	6a 40		 push	 64			; 00000040H
  00016	8d 45 a8	 lea	 eax, DWORD PTR _extents$[ebp]
  00019	50		 push	 eax
  0001a	33 f6		 xor	 esi, esi
  0001c	56		 push	 esi
  0001d	56		 push	 esi
  0001e	68 00 00 56 00	 push	 5636096			; 00560000H
  00023	57		 push	 edi
  00024	e8 00 00 00 00	 call	 _SendDeviceIoControlRequest@24

; 512  : 
; 513  : 	return NT_SUCCESS (SendDeviceIoControlRequest (deviceObject, IOCTL_VOLUME_SUPPORTS_ONLINE_OFFLINE, NULL, 0,  NULL, 0))
; 514  : 		|| NT_SUCCESS (SendDeviceIoControlRequest (deviceObject, IOCTL_VOLUME_IS_OFFLINE, NULL, 0,  NULL, 0))
; 515  : 		|| NT_SUCCESS (SendDeviceIoControlRequest (deviceObject, IOCTL_VOLUME_IS_IO_CAPABLE, NULL, 0,  NULL, 0))
; 516  : 		|| NT_SUCCESS (SendDeviceIoControlRequest (deviceObject, IOCTL_VOLUME_IS_PARTITION, NULL, 0,  NULL, 0))
; 517  : 		|| NT_SUCCESS (SendDeviceIoControlRequest (deviceObject, IOCTL_VOLUME_QUERY_VOLUME_NUMBER, NULL, 0, &volNumber, sizeof (volNumber)))
; 518  : 		|| NT_SUCCESS (extentStatus) || extentStatus == STATUS_BUFFER_OVERFLOW || extentStatus == STATUS_BUFFER_TOO_SMALL;

  00029	56		 push	 esi
  0002a	56		 push	 esi
  0002b	56		 push	 esi
  0002c	56		 push	 esi
  0002d	68 04 00 56 00	 push	 5636100			; 00560004H
  00032	57		 push	 edi
  00033	8b d8		 mov	 ebx, eax
  00035	e8 00 00 00 00	 call	 _SendDeviceIoControlRequest@24
  0003a	85 c0		 test	 eax, eax
  0003c	7d 68		 jge	 SHORT $LN3@IsVolumeDe
  0003e	56		 push	 esi
  0003f	56		 push	 esi
  00040	56		 push	 esi
  00041	56		 push	 esi
  00042	68 10 00 56 00	 push	 5636112			; 00560010H
  00047	57		 push	 edi
  00048	e8 00 00 00 00	 call	 _SendDeviceIoControlRequest@24
  0004d	85 c0		 test	 eax, eax
  0004f	7d 55		 jge	 SHORT $LN3@IsVolumeDe
  00051	56		 push	 esi
  00052	56		 push	 esi
  00053	56		 push	 esi
  00054	56		 push	 esi
  00055	68 14 00 56 00	 push	 5636116			; 00560014H
  0005a	57		 push	 edi
  0005b	e8 00 00 00 00	 call	 _SendDeviceIoControlRequest@24
  00060	85 c0		 test	 eax, eax
  00062	7d 42		 jge	 SHORT $LN3@IsVolumeDe
  00064	56		 push	 esi
  00065	56		 push	 esi
  00066	56		 push	 esi
  00067	56		 push	 esi
  00068	68 28 00 56 00	 push	 5636136			; 00560028H
  0006d	57		 push	 edi
  0006e	e8 00 00 00 00	 call	 _SendDeviceIoControlRequest@24
  00073	85 c0		 test	 eax, eax
  00075	7d 2f		 jge	 SHORT $LN3@IsVolumeDe
  00077	6a 14		 push	 20			; 00000014H
  00079	8d 45 e8	 lea	 eax, DWORD PTR _volNumber$[ebp]
  0007c	50		 push	 eax
  0007d	56		 push	 esi
  0007e	56		 push	 esi
  0007f	68 1c 00 56 00	 push	 5636124			; 0056001cH
  00084	57		 push	 edi
  00085	e8 00 00 00 00	 call	 _SendDeviceIoControlRequest@24
  0008a	85 c0		 test	 eax, eax
  0008c	7d 18		 jge	 SHORT $LN3@IsVolumeDe
  0008e	3b de		 cmp	 ebx, esi
  00090	7d 14		 jge	 SHORT $LN3@IsVolumeDe
  00092	81 fb 05 00 00
	80		 cmp	 ebx, -2147483643	; 80000005H
  00098	74 0c		 je	 SHORT $LN3@IsVolumeDe
  0009a	81 fb 23 00 00
	c0		 cmp	 ebx, -1073741789	; c0000023H
  000a0	74 04		 je	 SHORT $LN3@IsVolumeDe
  000a2	33 c0		 xor	 eax, eax
  000a4	eb 03		 jmp	 SHORT $LN4@IsVolumeDe
$LN3@IsVolumeDe:
  000a6	33 c0		 xor	 eax, eax
  000a8	40		 inc	 eax
$LN4@IsVolumeDe:

; 519  : }

  000a9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ac	5e		 pop	 esi
  000ad	33 cd		 xor	 ecx, ebp
  000af	5b		 pop	 ebx
  000b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b5	c9		 leave
  000b6	c3		 ret	 0
_IsVolumeDevice@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@FNODOBFM@			;  ?? ::FNODOBFM::`string'
EXTRN	__imp__PoCallDriver@8:PROC
EXTRN	_TCCompleteIrp@12:PROC
EXTRN	__imp__IoAcquireRemoveLockEx@20:PROC
EXTRN	__imp__PoStartNextPowerIrp@4:PROC
EXTRN	_RootDeviceObject:DWORD
;	COMDAT ??_C@_00CNPNBAHC@?$AA@FNODOBFM@
; File c:\winddk\7600.16385.1\inc\ddk\wdm.h
text$s	SEGMENT
??_C@_00CNPNBAHC@?$AA@FNODOBFM@ DB 00H			;  ?? ::FNODOBFM::`string'
; Function compile flags: /Ogsp
; File c:\home\public\desktop\projects\ciphershed.build\src\driver\drivefilter.c
text$s	ENDS
;	COMDAT _DispatchPower@16
_TEXT	SEGMENT
_DispatchPower@16 PROC					; COMDAT
; _Irp$ = esi
; _Extension$ = ecx
; _irpSp$ = eax

; 669  : {

  00000	8b ff		 npad	 2
  00002	53		 push	 ebx
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 670  : 	NTSTATUS status;
; 671  : 	Dump ("IRP_MJ_POWER minor=%d type=%d shutdown=%d\n", (int) irpSp->MinorFunction, (int) irpSp->Parameters.Power.Type, (int) irpSp->Parameters.Power.ShutdownType);
; 672  : 
; 673  : 	if (SetupInProgress
; 674  : 		&& irpSp->MinorFunction == IRP_MN_SET_POWER
; 675  : 		&& irpSp->Parameters.Power.ShutdownType == PowerActionHibernate)

  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SetupInProgress
  0000c	85 c9		 test	 ecx, ecx
  0000e	74 29		 je	 SHORT $LN2@DispatchPo
  00010	80 78 01 02	 cmp	 BYTE PTR [eax+1], 2
  00014	75 23		 jne	 SHORT $LN2@DispatchPo
  00016	83 78 10 03	 cmp	 DWORD PTR [eax+16], 3
  0001a	75 1d		 jne	 SHORT $LN2@DispatchPo
$LL3@DispatchPo:

; 676  : 	{
; 677  : 		while (SendDeviceIoControlRequest (RootDeviceObject, TC_IOCTL_ABORT_BOOT_ENCRYPTION_SETUP, NULL, 0, NULL, 0) == STATUS_INSUFFICIENT_RESOURCES);

  0001c	33 c0		 xor	 eax, eax
  0001e	50		 push	 eax
  0001f	50		 push	 eax
  00020	50		 push	 eax
  00021	50		 push	 eax
  00022	68 50 20 22 00	 push	 2236496			; 00222050H
  00027	ff 35 00 00 00
	00		 push	 DWORD PTR _RootDeviceObject
  0002d	e8 00 00 00 00	 call	 _SendDeviceIoControlRequest@24
  00032	3d 9a 00 00 c0	 cmp	 eax, -1073741670	; c000009aH
  00037	74 e3		 je	 SHORT $LL3@DispatchPo
$LN2@DispatchPo:

; 678  : 	}
; 679  : 
; 680  : #if 0	// Dismount of the system drive is disabled until there is a way to do it without causing system errors (see the documentation for more info)
; 681  : 	if (DriverShuttingDown
; 682  : 		&& Extension->BootDrive
; 683  : 		&& Extension->DriveMounted
; 684  : 		&& irpSp->MinorFunction == IRP_MN_SET_POWER
; 685  : 		&& irpSp->Parameters.Power.Type == DevicePowerState)
; 686  : 	{
; 687  : 		DismountDrive (Extension, TRUE);
; 688  : 	}
; 689  : #endif // 0
; 690  : 
; 691  : 	PoStartNextPowerIrp (Irp);

  00039	56		 push	 esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PoStartNextPowerIrp@4

; 692  : 
; 693  : 	status = IoAcquireRemoveLock (&Extension->Queue.RemoveLock, Irp);

  00040	6a 18		 push	 24			; 00000018H
  00042	6a 01		 push	 1
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@FNODOBFM@
  00049	56		 push	 esi
  0004a	8d 9f b8 00 00
	00		 lea	 ebx, DWORD PTR [edi+184]
  00050	53		 push	 ebx
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoAcquireRemoveLockEx@20

; 694  : 	if (!NT_SUCCESS (status))

  00057	85 c0		 test	 eax, eax
  00059	7d 0b		 jge	 SHORT $LN1@DispatchPo

; 695  : 		return TCCompleteIrp (Irp, status, 0);

  0005b	6a 00		 push	 0
  0005d	50		 push	 eax
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 _TCCompleteIrp@12
  00064	eb 1f		 jmp	 SHORT $LN5@DispatchPo
$LN1@DispatchPo:

; 696  : 
; 697  : 	IoSkipCurrentIrpStackLocation (Irp);

  00066	fe 46 23	 inc	 BYTE PTR [esi+35]
  00069	83 46 60 24	 add	 DWORD PTR [esi+96], 36	; 00000024H

; 698  : 	status = PoCallDriver (Extension->LowerDeviceObject, Irp);

  0006d	56		 push	 esi
  0006e	ff 77 1c	 push	 DWORD PTR [edi+28]
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PoCallDriver@8

; 699  : 
; 700  : 	IoReleaseRemoveLock (&Extension->Queue.RemoveLock, Irp);

  00077	6a 18		 push	 24			; 00000018H
  00079	56		 push	 esi
  0007a	53		 push	 ebx
  0007b	8b f8		 mov	 edi, eax
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoReleaseRemoveLockEx@12

; 701  : 	return status;

  00083	8b c7		 mov	 eax, edi
$LN5@DispatchPo:
  00085	5f		 pop	 edi
  00086	5b		 pop	 ebx

; 702  : }

  00087	c3		 ret	 0
_DispatchPower@16 ENDP
_TEXT	ENDS
PUBLIC	_ReopenBootVolumeHeader@8
EXTRN	_ReadVolumeHeader@20:PROC
EXTRN	_ValidateIOBufferSize@12:PROC
EXTRN	_UserCanAccessDriveDevice@0:PROC
EXTRN	__imp__IoIsSystemThread@4:PROC
; Function compile flags: /Ogsp
;	COMDAT _ReopenBootVolumeHeader@8
_TEXT	SEGMENT
_request$ = -4						; size = 4
_header$ = 8						; size = 4
_irp$ = 8						; size = 4
_irpSp$ = 12						; size = 4
_ReopenBootVolumeHeader@8 PROC				; COMDAT

; 747  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 748  : 	LARGE_INTEGER offset;
; 749  : 	char *header;
; 750  : 	ReopenBootVolumeHeaderRequest *request = (ReopenBootVolumeHeaderRequest *) irp->AssociatedIrp.SystemBuffer;

  00008	8b 75 08	 mov	 esi, DWORD PTR _irp$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]

; 751  : 
; 752  : 	irp->IoStatus.Information = 0;

  0000f	33 db		 xor	 ebx, ebx
  00011	89 7d fc	 mov	 DWORD PTR _request$[ebp], edi
  00014	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx

; 753  : 
; 754  : 	if (!IoIsSystemThread (PsGetCurrentThread()) && !UserCanAccessDriveDevice())

  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeGetCurrentThread@0
  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoIsSystemThread@4
  00024	84 c0		 test	 al, al
  00026	75 15		 jne	 SHORT $LN15@ReopenBoot
  00028	e8 00 00 00 00	 call	 _UserCanAccessDriveDevice@0
  0002d	85 c0		 test	 eax, eax
  0002f	75 0c		 jne	 SHORT $LN15@ReopenBoot

; 755  : 	{
; 756  : 		irp->IoStatus.Status = STATUS_ACCESS_DENIED;

  00031	c7 46 18 22 00
	00 c0		 mov	 DWORD PTR [esi+24], -1073741790 ; c0000022H

; 757  : 		return;

  00038	e9 7c 01 00 00	 jmp	 $LN3@ReopenBoot
$LN15@ReopenBoot:

; 758  : 	}
; 759  : 
; 760  : 	if (!ValidateIOBufferSize (irp, sizeof (ReopenBootVolumeHeaderRequest), ValidateInput))

  0003d	53		 push	 ebx
  0003e	6a 48		 push	 72			; 00000048H
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 _ValidateIOBufferSize@12
  00046	85 c0		 test	 eax, eax
  00048	0f 84 6b 01 00
	00		 je	 $LN3@ReopenBoot

; 761  : 		return;
; 762  : 
; 763  : 	if (!BootDriveFound || !BootDriveFilterExtension || !BootDriveFilterExtension->DriveMounted || !BootDriveFilterExtension->HeaderCryptoInfo
; 764  : 		|| request->VolumePassword.Length > MAX_PASSWORD)

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFound
  00053	85 c0		 test	 eax, eax
  00055	0f 84 3f 01 00
	00		 je	 $LN12@ReopenBoot
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  00060	3b c3		 cmp	 eax, ebx
  00062	0f 84 32 01 00
	00		 je	 $LN12@ReopenBoot
  00068	39 98 f0 01 00
	00		 cmp	 DWORD PTR [eax+496], ebx
  0006e	0f 84 26 01 00
	00		 je	 $LN12@ReopenBoot
  00074	39 98 04 02 00
	00		 cmp	 DWORD PTR [eax+516], ebx
  0007a	0f 84 1a 01 00
	00		 je	 $LN12@ReopenBoot
  00080	83 3f 40	 cmp	 DWORD PTR [edi], 64	; 00000040H
  00083	0f 87 11 01 00
	00		 ja	 $LN12@ReopenBoot

; 767  : 		goto wipe;
; 768  : 	}
; 769  : 
; 770  : 	header = TCalloc (TC_BOOT_ENCRYPTION_VOLUME_HEADER_SIZE);

  00089	68 54 43 4d 4d	 push	 1296909140		; 4d4d4354H
  0008e	bf 00 02 00 00	 mov	 edi, 512		; 00000200H
  00093	57		 push	 edi
  00094	53		 push	 ebx
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  0009b	89 45 08	 mov	 DWORD PTR _header$[ebp], eax

; 771  : 	if (!header)

  0009e	3b c3		 cmp	 eax, ebx
  000a0	75 0c		 jne	 SHORT $LN11@ReopenBoot

; 772  : 	{
; 773  : 		irp->IoStatus.Status = STATUS_INSUFFICIENT_RESOURCES;

  000a2	c7 46 18 9a 00
	00 c0		 mov	 DWORD PTR [esi+24], -1073741670 ; c000009aH

; 774  : 		goto wipe;

  000a9	e9 f3 00 00 00	 jmp	 $wipe$28207
$LN11@ReopenBoot:

; 775  : 	}
; 776  : 
; 777  : 	if (BootDriveFilterExtension->HiddenSystem)

  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  000b3	39 98 08 02 00
	00		 cmp	 DWORD PTR [eax+520], ebx
  000b9	74 16		 je	 SHORT $LN10@ReopenBoot

; 778  : 		offset.QuadPart = BootArgs.HiddenSystemPartitionStart + TC_HIDDEN_VOLUME_HEADER_OFFSET;

  000bb	8b 0d 5a 00 00
	00		 mov	 ecx, DWORD PTR _BootArgs+90
  000c1	8b 15 5e 00 00
	00		 mov	 edx, DWORD PTR _BootArgs+94
  000c7	81 c1 00 00 01
	00		 add	 ecx, 65536		; 00010000H
  000cd	13 d3		 adc	 edx, ebx

; 779  : 	else

  000cf	eb 07		 jmp	 SHORT $LN9@ReopenBoot
$LN10@ReopenBoot:

; 780  : 		offset.QuadPart = TC_BOOT_VOLUME_HEADER_SECTOR_OFFSET;

  000d1	b9 00 7c 00 00	 mov	 ecx, 31744		; 00007c00H
  000d6	33 d2		 xor	 edx, edx
$LN9@ReopenBoot:

; 781  : 
; 782  : 	irp->IoStatus.Status = TCReadDevice (BootDriveFilterExtension->LowerDeviceObject, header, offset, TC_BOOT_ENCRYPTION_VOLUME_HEADER_SIZE);

  000d8	57		 push	 edi
  000d9	52		 push	 edx
  000da	51		 push	 ecx
  000db	ff 75 08	 push	 DWORD PTR _header$[ebp]
  000de	ff 70 1c	 push	 DWORD PTR [eax+28]
  000e1	e8 00 00 00 00	 call	 _TCReadDevice@20

; 783  : 	if (!NT_SUCCESS (irp->IoStatus.Status))

  000e6	3b c3		 cmp	 eax, ebx
  000e8	89 46 18	 mov	 DWORD PTR [esi+24], eax
  000eb	0f 8c 99 00 00
	00		 jl	 $ret$28215

; 784  : 	{
; 785  : 		Dump ("TCReadDevice error %x\n", irp->IoStatus.Status);
; 786  : 		goto ret;
; 787  : 	}
; 788  : 
; 789  : 	if (ReadVolumeHeader (!BootDriveFilterExtension->HiddenSystem, header, &request->VolumePassword, NULL, BootDriveFilterExtension->HeaderCryptoInfo) == 0)

  000f1	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  000f6	ff b0 04 02 00
	00		 push	 DWORD PTR [eax+516]
  000fc	33 c9		 xor	 ecx, ecx
  000fe	39 98 08 02 00
	00		 cmp	 DWORD PTR [eax+520], ebx
  00104	53		 push	 ebx
  00105	ff 75 fc	 push	 DWORD PTR _request$[ebp]
  00108	0f 94 c1	 sete	 cl
  0010b	ff 75 08	 push	 DWORD PTR _header$[ebp]
  0010e	51		 push	 ecx
  0010f	e8 00 00 00 00	 call	 _ReadVolumeHeader@20
  00114	85 c0		 test	 eax, eax

; 790  : 	{
; 791  : 		Dump ("Header reopened\n");
; 792  : 		
; 793  : 		BootDriveFilterExtension->Queue.CryptoInfo->header_creation_time = BootDriveFilterExtension->HeaderCryptoInfo->header_creation_time;

  00116	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  0011b	75 50		 jne	 SHORT $LN7@ReopenBoot
  0011d	8b 88 04 02 00
	00		 mov	 ecx, DWORD PTR [eax+516]
  00123	8b b9 f8 43 00
	00		 mov	 edi, DWORD PTR [ecx+17400]
  00129	8b 50 70	 mov	 edx, DWORD PTR [eax+112]
  0012c	89 ba f8 43 00
	00		 mov	 DWORD PTR [edx+17400], edi
  00132	8b 89 fc 43 00
	00		 mov	 ecx, DWORD PTR [ecx+17404]
  00138	89 8a fc 43 00
	00		 mov	 DWORD PTR [edx+17404], ecx

; 794  : 		BootDriveFilterExtension->Queue.CryptoInfo->pkcs5 = BootDriveFilterExtension->HeaderCryptoInfo->pkcs5;

  0013e	8b 88 04 02 00
	00		 mov	 ecx, DWORD PTR [eax+516]
  00144	8b 89 ec 43 00
	00		 mov	 ecx, DWORD PTR [ecx+17388]
  0014a	8b 50 70	 mov	 edx, DWORD PTR [eax+112]
  0014d	89 8a ec 43 00
	00		 mov	 DWORD PTR [edx+17388], ecx

; 795  : 		BootDriveFilterExtension->Queue.CryptoInfo->noIterations = BootDriveFilterExtension->HeaderCryptoInfo->noIterations;

  00153	8b 88 04 02 00
	00		 mov	 ecx, DWORD PTR [eax+516]
  00159	8b 40 70	 mov	 eax, DWORD PTR [eax+112]
  0015c	8b 89 e8 43 00
	00		 mov	 ecx, DWORD PTR [ecx+17384]
  00162	89 88 e8 43 00
	00		 mov	 DWORD PTR [eax+17384], ecx

; 796  : 
; 797  : 		irp->IoStatus.Status = STATUS_SUCCESS;

  00168	89 5e 18	 mov	 DWORD PTR [esi+24], ebx

; 798  : 	}
; 799  : 	else

  0016b	eb 1d		 jmp	 SHORT $ret$28215
$LN7@ReopenBoot:

; 800  : 	{
; 801  : 		crypto_close (BootDriveFilterExtension->HeaderCryptoInfo);

  0016d	ff b0 04 02 00
	00		 push	 DWORD PTR [eax+516]
  00173	e8 00 00 00 00	 call	 _crypto_close@4

; 802  : 		BootDriveFilterExtension->HeaderCryptoInfo = NULL;

  00178	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  0017d	89 98 04 02 00
	00		 mov	 DWORD PTR [eax+516], ebx

; 803  : 
; 804  : 		Dump ("Header not reopened\n");
; 805  : 		irp->IoStatus.Status = STATUS_INVALID_PARAMETER;

  00183	c7 46 18 0d 00
	00 c0		 mov	 DWORD PTR [esi+24], -1073741811 ; c000000dH
$ret$28215:

; 806  : 	}
; 807  : 
; 808  : ret:
; 809  : 	TCfree (header);

  0018a	68 54 43 4d 4d	 push	 1296909140		; 4d4d4354H
  0018f	ff 75 08	 push	 DWORD PTR _header$[ebp]
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePoolWithTag@8
  00198	eb 07		 jmp	 SHORT $wipe$28207
$LN12@ReopenBoot:

; 765  : 	{
; 766  : 		irp->IoStatus.Status = STATUS_INVALID_PARAMETER;

  0019a	c7 46 18 0d 00
	00 c0		 mov	 DWORD PTR [esi+24], -1073741811 ; c000000dH
$wipe$28207:

; 810  : wipe:
; 811  : 	burn (request, sizeof (*request));

  001a1	8b 45 fc	 mov	 eax, DWORD PTR _request$[ebp]
  001a4	6a 48		 push	 72			; 00000048H
  001a6	5e		 pop	 esi
  001a7	8b c8		 mov	 ecx, eax
  001a9	8b d6		 mov	 edx, esi
$LL21@ReopenBoot:
  001ab	88 18		 mov	 BYTE PTR [eax], bl
  001ad	40		 inc	 eax
  001ae	4e		 dec	 esi
  001af	75 fa		 jne	 SHORT $LL21@ReopenBoot
$LL2@ReopenBoot:
  001b1	4a		 dec	 edx
  001b2	88 19		 mov	 BYTE PTR [ecx], bl
  001b4	41		 inc	 ecx
  001b5	3b d3		 cmp	 edx, ebx
  001b7	75 f8		 jne	 SHORT $LL2@ReopenBoot
$LN3@ReopenBoot:
  001b9	5f		 pop	 edi
  001ba	5e		 pop	 esi
  001bb	5b		 pop	 ebx

; 812  : }

  001bc	c9		 leave
  001bd	c2 08 00	 ret	 8
_ReopenBootVolumeHeader@8 ENDP
_TEXT	ENDS
EXTRN	_EncryptDataUnitsCurrentThread@20:PROC
EXTRN	_GetIntersection@36:PROC
EXTRN	_memcpy:PROC
_BSS	SEGMENT
_OriginalHiberDriverWriteFunctionsA DD 03H DUP (?)
_OriginalHiberDriverWriteFunctionsB DD 03H DUP (?)
	ALIGN	8

_HiberPartitionOffset DQ 01H DUP (?)
; Function compile flags: /Ogsp
_BSS	ENDS
;	COMDAT _HiberDriverWriteFunctionFilter@24
_TEXT	SEGMENT
_offset$28289 = -32					; size = 8
_intersectStart$28290 = -24				; size = 8
_dataUnit$28305 = -16					; size = 8
_intersectLength$28291 = -8				; size = 4
_encryptedDataMdl$ = -4					; size = 4
_filterNumber$ = 8					; size = 4
_writeOffset$ = 12					; size = 4
_dataMdl$ = 16						; size = 4
_writeB$ = 20						; size = 4
_arg0WriteA$ = 24					; size = 4
_arg3WriteA$ = 28					; size = 4
_HiberDriverWriteFunctionFilter@24 PROC			; COMDAT

; 868  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 20	 sub	 esp, 32			; 00000020H

; 869  : 	MDL *encryptedDataMdl = dataMdl;

  00008	8b 45 10	 mov	 eax, DWORD PTR _dataMdl$[ebp]
  0000b	56		 push	 esi

; 870  : 
; 871  : 	if (writeOffset && dataMdl && BootDriveFilterExtension && BootDriveFilterExtension->DriveMounted)

  0000c	8b 75 0c	 mov	 esi, DWORD PTR _writeOffset$[ebp]
  0000f	89 45 fc	 mov	 DWORD PTR _encryptedDataMdl$[ebp], eax
  00012	85 f6		 test	 esi, esi
  00014	0f 84 a5 01 00
	00		 je	 $LN11@HiberDrive
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 9d 01 00
	00		 je	 $LN11@HiberDrive
  00022	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _BootDriveFilterExtension
  00028	85 d2		 test	 edx, edx
  0002a	0f 84 8f 01 00
	00		 je	 $LN11@HiberDrive
  00030	83 ba f0 01 00
	00 00		 cmp	 DWORD PTR [edx+496], 0
  00037	0f 84 82 01 00
	00		 je	 $LN11@HiberDrive

; 872  : 	{
; 873  : 		ULONG dataLength = MmGetMdlByteCount (dataMdl);
; 874  : 
; 875  : 		if (dataMdl->MappedSystemVa && dataLength > 0)

  0003d	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00041	53		 push	 ebx
  00042	8b 58 14	 mov	 ebx, DWORD PTR [eax+20]
  00045	0f 84 73 01 00
	00		 je	 $LN12@HiberDrive
  0004b	85 db		 test	 ebx, ebx
  0004d	0f 86 6b 01 00
	00		 jbe	 $LN12@HiberDrive

; 876  : 		{
; 877  : 			uint64 offset = HiberPartitionOffset.QuadPart + writeOffset->QuadPart;

  00053	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00055	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _HiberPartitionOffset
  0005b	57		 push	 edi
  0005c	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0005f	13 3d 04 00 00
	00		 adc	 edi, DWORD PTR _HiberPartitionOffset+4
  00065	89 4d e0	 mov	 DWORD PTR _offset$28289[ebp], ecx

; 878  : 			uint64 intersectStart;
; 879  : 			uint32 intersectLength;
; 880  : 
; 881  : 			if (dataLength > TC_HIBERNATION_WRITE_BUFFER_SIZE)

  00068	81 fb 00 00 02
	00		 cmp	 ebx, 131072		; 00020000H
  0006e	76 19		 jbe	 SHORT $LN6@HiberDrive

; 882  : 				TC_BUG_CHECK (STATUS_BUFFER_OVERFLOW);

  00070	68 43 54 00 00	 push	 21571			; 00005443H
  00075	6a 00		 push	 0
  00077	68 05 00 00 80	 push	 -2147483643		; 80000005H
  0007c	68 72 03 00 00	 push	 882			; 00000372H
$LN15@HiberDrive:
  00081	6a 29		 push	 41			; 00000029H
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeBugCheckEx@20
$LN16@HiberDrive:
$LN6@HiberDrive:

; 883  : 
; 884  : 			if ((dataLength & (ENCRYPTION_DATA_UNIT_SIZE - 1)) != 0)

  00089	be ff 01 00 00	 mov	 esi, 511		; 000001ffH
  0008e	85 de		 test	 ebx, esi
  00090	74 13		 je	 SHORT $LN5@HiberDrive

; 885  : 				TC_BUG_CHECK (STATUS_INVALID_PARAMETER);

  00092	68 43 54 00 00	 push	 21571			; 00005443H
  00097	6a 00		 push	 0
  00099	68 0d 00 00 c0	 push	 -1073741811		; c000000dH
  0009e	68 75 03 00 00	 push	 885			; 00000375H
  000a3	eb dc		 jmp	 SHORT $LN15@HiberDrive
$LN5@HiberDrive:

; 886  : 
; 887  : 			if ((offset & (ENCRYPTION_DATA_UNIT_SIZE - 1)) != 0)

  000a5	8b c1		 mov	 eax, ecx
  000a7	23 c6		 and	 eax, esi
  000a9	33 f6		 xor	 esi, esi
  000ab	0b c6		 or	 eax, esi
  000ad	74 12		 je	 SHORT $LN4@HiberDrive

; 888  : 				TC_BUG_CHECK (STATUS_INVALID_PARAMETER);

  000af	68 43 54 00 00	 push	 21571			; 00005443H
  000b4	56		 push	 esi
  000b5	68 0d 00 00 c0	 push	 -1073741811		; c000000dH
  000ba	68 78 03 00 00	 push	 888			; 00000378H
  000bf	eb c0		 jmp	 SHORT $LN15@HiberDrive
$LN4@HiberDrive:

; 889  : 
; 890  : 			GetIntersection (offset,
; 891  : 				dataLength,
; 892  : 				BootDriveFilterExtension->Queue.EncryptedAreaStart,
; 893  : 				BootDriveFilterExtension->Queue.EncryptedAreaEnd,
; 894  : 				&intersectStart,
; 895  : 				&intersectLength);

  000c1	8d 45 f8	 lea	 eax, DWORD PTR _intersectLength$28291[ebp]
  000c4	50		 push	 eax
  000c5	8d 45 e8	 lea	 eax, DWORD PTR _intersectStart$28290[ebp]
  000c8	50		 push	 eax
  000c9	ff b2 9c 00 00
	00		 push	 DWORD PTR [edx+156]
  000cf	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  000d4	ff b0 98 00 00
	00		 push	 DWORD PTR [eax+152]
  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  000df	ff b0 94 00 00
	00		 push	 DWORD PTR [eax+148]
  000e5	ff b0 90 00 00
	00		 push	 DWORD PTR [eax+144]
  000eb	53		 push	 ebx
  000ec	57		 push	 edi
  000ed	51		 push	 ecx
  000ee	e8 00 00 00 00	 call	 _GetIntersection@36

; 896  : 
; 897  : 			if (intersectLength > 0)

  000f3	39 75 f8	 cmp	 DWORD PTR _intersectLength$28291[ebp], esi
  000f6	0f 86 c1 00 00
	00		 jbe	 $LN13@HiberDrive

; 898  : 			{
; 899  : 				UINT64_STRUCT dataUnit;
; 900  : 				dataUnit.Value = intersectStart / ENCRYPTION_DATA_UNIT_SIZE;

  000fc	8b 7d ec	 mov	 edi, DWORD PTR _intersectStart$28290[ebp+4]
  000ff	8b 45 e8	 mov	 eax, DWORD PTR _intersectStart$28290[ebp]

; 901  : 
; 902  : 				memcpy (HibernationWriteBuffer, dataMdl->MappedSystemVa, dataLength);

  00102	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _HibernationWriteBuffer
  00108	0f ac f8 09	 shrd	 eax, edi, 9
  0010c	89 45 f0	 mov	 DWORD PTR _dataUnit$28305[ebp], eax
  0010f	8b 45 10	 mov	 eax, DWORD PTR _dataMdl$[ebp]
  00112	53		 push	 ebx
  00113	ff 70 0c	 push	 DWORD PTR [eax+12]
  00116	c1 ef 09	 shr	 edi, 9
  00119	56		 push	 esi
  0011a	89 7d f4	 mov	 DWORD PTR _dataUnit$28305[ebp+4], edi
  0011d	e8 00 00 00 00	 call	 _memcpy

; 903  : 
; 904  : 				if (BootDriveFilterExtension->Queue.RemapEncryptedArea)

  00122	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  00127	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012a	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00131	74 14		 je	 SHORT $LN2@HiberDrive

; 905  : 					dataUnit.Value += BootDriveFilterExtension->Queue.RemappedAreaDataUnitOffset;

  00133	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00139	01 4d f0	 add	 DWORD PTR _dataUnit$28305[ebp], ecx
  0013c	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  00142	13 f9		 adc	 edi, ecx
  00144	89 7d f4	 mov	 DWORD PTR _dataUnit$28305[ebp+4], edi
$LN2@HiberDrive:

; 906  : 
; 907  : 				EncryptDataUnitsCurrentThread (HibernationWriteBuffer + (intersectStart - offset),
; 908  : 					&dataUnit,
; 909  : 					intersectLength / ENCRYPTION_DATA_UNIT_SIZE,
; 910  : 					BootDriveFilterExtension->Queue.CryptoInfo);

  00147	ff 70 70	 push	 DWORD PTR [eax+112]
  0014a	8b 45 f8	 mov	 eax, DWORD PTR _intersectLength$28291[ebp]
  0014d	2b 75 e0	 sub	 esi, DWORD PTR _offset$28289[ebp]
  00150	6a 00		 push	 0
  00152	03 75 e8	 add	 esi, DWORD PTR _intersectStart$28290[ebp]
  00155	c1 e8 09	 shr	 eax, 9
  00158	50		 push	 eax
  00159	8d 45 f0	 lea	 eax, DWORD PTR _dataUnit$28305[ebp]
  0015c	50		 push	 eax
  0015d	56		 push	 esi
  0015e	e8 00 00 00 00	 call	 _EncryptDataUnitsCurrentThread@20

; 911  : 
; 912  : 				encryptedDataMdl = HibernationWriteBufferMdl;
; 913  : 				MmInitializeMdl (encryptedDataMdl, HibernationWriteBuffer, dataLength);

  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _HibernationWriteBuffer
  00169	a1 00 00 00 00	 mov	 eax, DWORD PTR _HibernationWriteBufferMdl
  0016e	83 20 00	 and	 DWORD PTR [eax], 0
  00171	8b d1		 mov	 edx, ecx
  00173	be ff 0f 00 00	 mov	 esi, 4095		; 00000fffH
  00178	23 d6		 and	 edx, esi
  0017a	8b fb		 mov	 edi, ebx
  0017c	23 fe		 and	 edi, esi
  0017e	8d b4 17 ff 0f
	00 00		 lea	 esi, DWORD PTR [edi+edx+4095]
  00185	c1 ee 0c	 shr	 esi, 12			; 0000000cH
  00188	8b fb		 mov	 edi, ebx
  0018a	c1 ef 0c	 shr	 edi, 12			; 0000000cH
  0018d	03 f7		 add	 esi, edi
  0018f	8d 34 b5 1c 00
	00 00		 lea	 esi, DWORD PTR [esi*4+28]
  00196	66 89 70 04	 mov	 WORD PTR [eax+4], si
  0019a	33 f6		 xor	 esi, esi
  0019c	81 e1 00 f0 ff
	ff		 and	 ecx, -4096		; fffff000H
  001a2	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 914  : 				encryptedDataMdl->MdlFlags = dataMdl->MdlFlags;

  001a5	8b 4d 10	 mov	 ecx, DWORD PTR _dataMdl$[ebp]
  001a8	66 89 70 06	 mov	 WORD PTR [eax+6], si
  001ac	89 50 18	 mov	 DWORD PTR [eax+24], edx
  001af	89 58 14	 mov	 DWORD PTR [eax+20], ebx
  001b2	66 8b 49 06	 mov	 cx, WORD PTR [ecx+6]
  001b6	89 45 fc	 mov	 DWORD PTR _encryptedDataMdl$[ebp], eax
  001b9	66 89 48 06	 mov	 WORD PTR [eax+6], cx
$LN13@HiberDrive:
  001bd	5f		 pop	 edi
$LN12@HiberDrive:
  001be	5b		 pop	 ebx
$LN11@HiberDrive:

; 915  : 			}
; 916  : 		}
; 917  : 	}
; 918  : 
; 919  : 	if (writeB)

  001bf	83 7d 14 00	 cmp	 DWORD PTR _writeB$[ebp], 0

; 920  : 		return (*OriginalHiberDriverWriteFunctionsB[filterNumber]) (writeOffset, encryptedDataMdl);

  001c3	8b 45 08	 mov	 eax, DWORD PTR _filterNumber$[ebp]
  001c6	5e		 pop	 esi
  001c7	74 0f		 je	 SHORT $LN1@HiberDrive
  001c9	ff 75 fc	 push	 DWORD PTR _encryptedDataMdl$[ebp]
  001cc	ff 75 0c	 push	 DWORD PTR _writeOffset$[ebp]
  001cf	ff 14 85 00 00
	00 00		 call	 DWORD PTR _OriginalHiberDriverWriteFunctionsB[eax*4]
  001d6	eb 13		 jmp	 SHORT $LN9@HiberDrive
$LN1@HiberDrive:

; 921  : 	
; 922  : 	return (*OriginalHiberDriverWriteFunctionsA[filterNumber]) (arg0WriteA, writeOffset, encryptedDataMdl, arg3WriteA);

  001d8	ff 75 1c	 push	 DWORD PTR _arg3WriteA$[ebp]
  001db	ff 75 fc	 push	 DWORD PTR _encryptedDataMdl$[ebp]
  001de	ff 75 0c	 push	 DWORD PTR _writeOffset$[ebp]
  001e1	ff 75 18	 push	 DWORD PTR _arg0WriteA$[ebp]
  001e4	ff 14 85 00 00
	00 00		 call	 DWORD PTR _OriginalHiberDriverWriteFunctionsA[eax*4]
$LN9@HiberDrive:

; 923  : }

  001eb	c9		 leave
  001ec	c2 18 00	 ret	 24			; 00000018H
$LN14@HiberDrive:
_HiberDriverWriteFunctionFilter@24 ENDP
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT _HiberDriverWriteFunctionAFilter0@16
_TEXT	SEGMENT
_arg0$ = 8						; size = 4
_writeOffset$ = 12					; size = 4
_dataMdl$ = 16						; size = 4
_arg3$ = 20						; size = 4
_HiberDriverWriteFunctionAFilter0@16 PROC		; COMDAT

; 927  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 928  : 	return HiberDriverWriteFunctionFilter (0, writeOffset, dataMdl, FALSE, arg0, arg3);

  00005	ff 75 14	 push	 DWORD PTR _arg3$[ebp]
  00008	ff 75 08	 push	 DWORD PTR _arg0$[ebp]
  0000b	6a 00		 push	 0
  0000d	ff 75 10	 push	 DWORD PTR _dataMdl$[ebp]
  00010	ff 75 0c	 push	 DWORD PTR _writeOffset$[ebp]
  00013	6a 00		 push	 0
  00015	e8 00 00 00 00	 call	 _HiberDriverWriteFunctionFilter@24

; 929  : }

  0001a	5d		 pop	 ebp
  0001b	c2 10 00	 ret	 16			; 00000010H
_HiberDriverWriteFunctionAFilter0@16 ENDP
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT _HiberDriverWriteFunctionAFilter1@16
_TEXT	SEGMENT
_arg0$ = 8						; size = 4
_writeOffset$ = 12					; size = 4
_dataMdl$ = 16						; size = 4
_arg3$ = 20						; size = 4
_HiberDriverWriteFunctionAFilter1@16 PROC		; COMDAT

; 932  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 933  : 	return HiberDriverWriteFunctionFilter (1, writeOffset, dataMdl, FALSE, arg0, arg3);

  00005	ff 75 14	 push	 DWORD PTR _arg3$[ebp]
  00008	ff 75 08	 push	 DWORD PTR _arg0$[ebp]
  0000b	6a 00		 push	 0
  0000d	ff 75 10	 push	 DWORD PTR _dataMdl$[ebp]
  00010	ff 75 0c	 push	 DWORD PTR _writeOffset$[ebp]
  00013	6a 01		 push	 1
  00015	e8 00 00 00 00	 call	 _HiberDriverWriteFunctionFilter@24

; 934  : }

  0001a	5d		 pop	 ebp
  0001b	c2 10 00	 ret	 16			; 00000010H
_HiberDriverWriteFunctionAFilter1@16 ENDP
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT _HiberDriverWriteFunctionAFilter2@16
_TEXT	SEGMENT
_arg0$ = 8						; size = 4
_writeOffset$ = 12					; size = 4
_dataMdl$ = 16						; size = 4
_arg3$ = 20						; size = 4
_HiberDriverWriteFunctionAFilter2@16 PROC		; COMDAT

; 937  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 938  : 	return HiberDriverWriteFunctionFilter (2, writeOffset, dataMdl, FALSE, arg0, arg3);

  00005	ff 75 14	 push	 DWORD PTR _arg3$[ebp]
  00008	ff 75 08	 push	 DWORD PTR _arg0$[ebp]
  0000b	6a 00		 push	 0
  0000d	ff 75 10	 push	 DWORD PTR _dataMdl$[ebp]
  00010	ff 75 0c	 push	 DWORD PTR _writeOffset$[ebp]
  00013	6a 02		 push	 2
  00015	e8 00 00 00 00	 call	 _HiberDriverWriteFunctionFilter@24

; 939  : }

  0001a	5d		 pop	 ebp
  0001b	c2 10 00	 ret	 16			; 00000010H
_HiberDriverWriteFunctionAFilter2@16 ENDP
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT _HiberDriverWriteFunctionBFilter0@8
_TEXT	SEGMENT
_writeOffset$ = 8					; size = 4
_dataMdl$ = 12						; size = 4
_HiberDriverWriteFunctionBFilter0@8 PROC		; COMDAT

; 943  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 944  : 	return HiberDriverWriteFunctionFilter (0, writeOffset, dataMdl, TRUE, 0, NULL);

  00005	33 c0		 xor	 eax, eax
  00007	50		 push	 eax
  00008	50		 push	 eax
  00009	6a 01		 push	 1
  0000b	ff 75 0c	 push	 DWORD PTR _dataMdl$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR _writeOffset$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _HiberDriverWriteFunctionFilter@24

; 945  : }

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
_HiberDriverWriteFunctionBFilter0@8 ENDP
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT _HiberDriverWriteFunctionBFilter1@8
_TEXT	SEGMENT
_writeOffset$ = 8					; size = 4
_dataMdl$ = 12						; size = 4
_HiberDriverWriteFunctionBFilter1@8 PROC		; COMDAT

; 948  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 949  : 	return HiberDriverWriteFunctionFilter (1, writeOffset, dataMdl, TRUE, 0, NULL);

  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	6a 01		 push	 1
  0000b	ff 75 0c	 push	 DWORD PTR _dataMdl$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR _writeOffset$[ebp]
  00011	6a 01		 push	 1
  00013	e8 00 00 00 00	 call	 _HiberDriverWriteFunctionFilter@24

; 950  : }

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
_HiberDriverWriteFunctionBFilter1@8 ENDP
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT _HiberDriverWriteFunctionBFilter2@8
_TEXT	SEGMENT
_writeOffset$ = 8					; size = 4
_dataMdl$ = 12						; size = 4
_HiberDriverWriteFunctionBFilter2@8 PROC		; COMDAT

; 953  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 954  : 	return HiberDriverWriteFunctionFilter (2, writeOffset, dataMdl, TRUE, 0, NULL);

  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	6a 01		 push	 1
  0000b	ff 75 0c	 push	 DWORD PTR _dataMdl$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR _writeOffset$[ebp]
  00011	6a 02		 push	 2
  00013	e8 00 00 00 00	 call	 _HiberDriverWriteFunctionFilter@24

; 955  : }

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
_HiberDriverWriteFunctionBFilter2@8 ENDP
_TEXT	ENDS
_BSS	SEGMENT
_OriginalHiberDriverEntries DD 03H DUP (?)
; Function compile flags: /Ogsp
_BSS	ENDS
;	COMDAT _HiberDriverEntryFilter@12
_TEXT	SEGMENT
_filterInstalled$ = -4					; size = 4
_arg0$ = 8						; size = 4
_HiberDriverEntryFilter@12 PROC				; COMDAT
; _filterNumber$ = eax
; _hiberDriverContext$ = esi

; 959  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b f8		 mov	 edi, eax

; 960  : 	BOOL filterInstalled = FALSE;
; 961  : 	NTSTATUS status;
; 962  : 
; 963  : 	if (!OriginalHiberDriverEntries[filterNumber])

  0000a	8b 04 bd 00 00
	00 00		 mov	 eax, DWORD PTR _OriginalHiberDriverEntries[edi*4]
  00011	33 db		 xor	 ebx, ebx
  00013	89 5d fc	 mov	 DWORD PTR _filterInstalled$[ebp], ebx
  00016	3b c3		 cmp	 eax, ebx
  00018	75 0a		 jne	 SHORT $LN20@HiberDrive@2

; 964  : 		return STATUS_UNSUCCESSFUL;

  0001a	b8 01 00 00 c0	 mov	 eax, -1073741823	; c0000001H
  0001f	e9 06 01 00 00	 jmp	 $LN21@HiberDrive@2
$LN20@HiberDrive@2:

; 965  : 
; 966  : 	status = (*OriginalHiberDriverEntries[filterNumber]) (arg0, hiberDriverContext);

  00024	56		 push	 esi
  00025	ff 75 08	 push	 DWORD PTR _arg0$[ebp]
  00028	ff d0		 call	 eax

; 967  : 
; 968  : 	if (!NT_SUCCESS (status) || !hiberDriverContext)

  0002a	3b c3		 cmp	 eax, ebx
  0002c	0f 8c f8 00 00
	00		 jl	 $LN21@HiberDrive@2
  00032	3b f3		 cmp	 esi, ebx
  00034	0f 84 f0 00 00
	00		 je	 $LN21@HiberDrive@2

; 969  : 		return status;
; 970  : 
; 971  : 	if (SetupInProgress)

  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SetupInProgress
  0003f	85 c0		 test	 eax, eax
  00041	74 18		 je	 SHORT $LN17@HiberDrive@2

; 972  : 		TC_BUG_CHECK (STATUS_INVALID_PARAMETER);

  00043	68 43 54 00 00	 push	 21571			; 00005443H
  00048	53		 push	 ebx
  00049	68 0d 00 00 c0	 push	 -1073741811		; c000000dH
  0004e	68 cc 03 00 00	 push	 972			; 000003ccH
$LN25@HiberDrive@2:
  00053	6a 29		 push	 41			; 00000029H
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeBugCheckEx@20
$LN26@HiberDrive@2:
$LN17@HiberDrive@2:

; 973  : 
; 974  : 	if (hiberDriverContext->WriteFunctionA)

  0005b	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  0005e	33 c9		 xor	 ecx, ecx
  00060	41		 inc	 ecx
  00061	3b c3		 cmp	 eax, ebx
  00063	74 3d		 je	 SHORT $LN23@HiberDrive@2

; 975  : 	{
; 976  : 		Dump ("Filtering WriteFunctionA %d\n", filterNumber);
; 977  : 		OriginalHiberDriverWriteFunctionsA[filterNumber] = hiberDriverContext->WriteFunctionA;

  00065	89 04 bd 00 00
	00 00		 mov	 DWORD PTR _OriginalHiberDriverWriteFunctionsA[edi*4], eax

; 978  : 
; 979  : 		switch (filterNumber)

  0006c	8b c7		 mov	 eax, edi
  0006e	2b c3		 sub	 eax, ebx
  00070	74 26		 je	 SHORT $LN13@HiberDrive@2
  00072	48		 dec	 eax
  00073	74 1a		 je	 SHORT $LN12@HiberDrive@2
  00075	48		 dec	 eax
  00076	74 0e		 je	 SHORT $LN11@HiberDrive@2

; 984  : 		default: TC_THROW_FATAL_EXCEPTION;

  00078	68 43 54 00 00	 push	 21571			; 00005443H
  0007d	53		 push	 ebx
  0007e	53		 push	 ebx
  0007f	68 d8 03 00 00	 push	 984			; 000003d8H
  00084	eb cd		 jmp	 SHORT $LN25@HiberDrive@2
$LN11@HiberDrive@2:

; 983  : 		case 2: hiberDriverContext->WriteFunctionA = HiberDriverWriteFunctionAFilter2; break;

  00086	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], OFFSET _HiberDriverWriteFunctionAFilter2@16
  0008d	eb 10		 jmp	 SHORT $LN14@HiberDrive@2
$LN12@HiberDrive@2:

; 982  : 		case 1: hiberDriverContext->WriteFunctionA = HiberDriverWriteFunctionAFilter1; break;

  0008f	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], OFFSET _HiberDriverWriteFunctionAFilter1@16
  00096	eb 07		 jmp	 SHORT $LN14@HiberDrive@2
$LN13@HiberDrive@2:

; 980  : 		{
; 981  : 		case 0: hiberDriverContext->WriteFunctionA = HiberDriverWriteFunctionAFilter0; break;

  00098	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], OFFSET _HiberDriverWriteFunctionAFilter0@16
$LN14@HiberDrive@2:

; 985  : 		}
; 986  : 
; 987  : 		filterInstalled = TRUE;

  0009f	89 4d fc	 mov	 DWORD PTR _filterInstalled$[ebp], ecx
$LN23@HiberDrive@2:

; 988  : 	}
; 989  : 
; 990  : 	if (hiberDriverContext->WriteFunctionB)

  000a2	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000a5	3b c3		 cmp	 eax, ebx
  000a7	74 3d		 je	 SHORT $LN9@HiberDrive@2

; 991  : 	{
; 992  : 		Dump ("Filtering WriteFunctionB %d\n", filterNumber);
; 993  : 		OriginalHiberDriverWriteFunctionsB[filterNumber] = hiberDriverContext->WriteFunctionB;

  000a9	89 04 bd 00 00
	00 00		 mov	 DWORD PTR _OriginalHiberDriverWriteFunctionsB[edi*4], eax

; 994  : 
; 995  : 		switch (filterNumber)

  000b0	8b c7		 mov	 eax, edi
  000b2	2b c3		 sub	 eax, ebx
  000b4	74 26		 je	 SHORT $LN6@HiberDrive@2
  000b6	48		 dec	 eax
  000b7	74 1a		 je	 SHORT $LN5@HiberDrive@2
  000b9	48		 dec	 eax
  000ba	74 0e		 je	 SHORT $LN4@HiberDrive@2

; 1000 : 		default: TC_THROW_FATAL_EXCEPTION;

  000bc	68 43 54 00 00	 push	 21571			; 00005443H
  000c1	53		 push	 ebx
  000c2	53		 push	 ebx
  000c3	68 e8 03 00 00	 push	 1000			; 000003e8H
  000c8	eb 89		 jmp	 SHORT $LN25@HiberDrive@2
$LN4@HiberDrive@2:

; 999  : 		case 2: hiberDriverContext->WriteFunctionB = HiberDriverWriteFunctionBFilter2; break;

  000ca	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], OFFSET _HiberDriverWriteFunctionBFilter2@8
  000d1	eb 10		 jmp	 SHORT $LN7@HiberDrive@2
$LN5@HiberDrive@2:

; 998  : 		case 1: hiberDriverContext->WriteFunctionB = HiberDriverWriteFunctionBFilter1; break;

  000d3	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], OFFSET _HiberDriverWriteFunctionBFilter1@8
  000da	eb 07		 jmp	 SHORT $LN7@HiberDrive@2
$LN6@HiberDrive@2:

; 996  : 		{
; 997  : 		case 0: hiberDriverContext->WriteFunctionB = HiberDriverWriteFunctionBFilter0; break;

  000dc	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], OFFSET _HiberDriverWriteFunctionBFilter0@8
$LN7@HiberDrive@2:

; 1001 : 		}
; 1002 : 
; 1003 : 		filterInstalled = TRUE;

  000e3	89 4d fc	 mov	 DWORD PTR _filterInstalled$[ebp], ecx
$LN9@HiberDrive@2:

; 1004 : 	}
; 1005 : 
; 1006 : 	if (filterInstalled && hiberDriverContext->PartitionStartOffset.QuadPart != 0)

  000e6	39 5d fc	 cmp	 DWORD PTR _filterInstalled$[ebp], ebx
  000e9	74 3d		 je	 SHORT $LN1@HiberDrive@2
  000eb	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  000ee	8b 56 74	 mov	 edx, DWORD PTR [esi+116]
  000f1	8b c1		 mov	 eax, ecx
  000f3	0b c2		 or	 eax, edx
  000f5	74 31		 je	 SHORT $LN1@HiberDrive@2

; 1007 : 	{
; 1008 : 		HiberPartitionOffset = hiberDriverContext->PartitionStartOffset;

  000f7	8b c1		 mov	 eax, ecx
  000f9	a3 00 00 00 00	 mov	 DWORD PTR _HiberPartitionOffset, eax
  000fe	8b c2		 mov	 eax, edx
  00100	a3 04 00 00 00	 mov	 DWORD PTR _HiberPartitionOffset+4, eax

; 1009 : 
; 1010 : 		if (BootDriveFilterExtension->Queue.RemapEncryptedArea)

  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  0010a	39 98 a4 00 00
	00		 cmp	 DWORD PTR [eax+164], ebx
  00110	74 16		 je	 SHORT $LN1@HiberDrive@2

; 1011 : 			hiberDriverContext->PartitionStartOffset.QuadPart += BootDriveFilterExtension->Queue.RemappedAreaOffset;

  00112	8b b8 a8 00 00
	00		 mov	 edi, DWORD PTR [eax+168]
  00118	8b 80 ac 00 00
	00		 mov	 eax, DWORD PTR [eax+172]
  0011e	03 f9		 add	 edi, ecx
  00120	13 c2		 adc	 eax, edx
  00122	89 7e 70	 mov	 DWORD PTR [esi+112], edi
  00125	89 46 74	 mov	 DWORD PTR [esi+116], eax
$LN1@HiberDrive@2:

; 1012 : 	}
; 1013 : 
; 1014 : 	return STATUS_SUCCESS;

  00128	33 c0		 xor	 eax, eax
$LN21@HiberDrive@2:
  0012a	5f		 pop	 edi
  0012b	5b		 pop	 ebx

; 1015 : }

  0012c	c9		 leave
  0012d	c2 04 00	 ret	 4
$LN24@HiberDrive@2:
_HiberDriverEntryFilter@12 ENDP
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT _HiberDriverEntryFilter0@8
_TEXT	SEGMENT
_arg0$ = 8						; size = 4
_hiberDriverContext$ = 12				; size = 4
_HiberDriverEntryFilter0@8 PROC				; COMDAT

; 1019 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	56		 push	 esi

; 1020 : 	return HiberDriverEntryFilter (0, arg0, hiberDriverContext);

  00006	ff 75 08	 push	 DWORD PTR _arg0$[ebp]
  00009	8b 75 0c	 mov	 esi, DWORD PTR _hiberDriverContext$[ebp]
  0000c	33 c0		 xor	 eax, eax
  0000e	e8 00 00 00 00	 call	 _HiberDriverEntryFilter@12
  00013	5e		 pop	 esi

; 1021 : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
_HiberDriverEntryFilter0@8 ENDP
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT _HiberDriverEntryFilter1@8
_TEXT	SEGMENT
_arg0$ = 8						; size = 4
_hiberDriverContext$ = 12				; size = 4
_HiberDriverEntryFilter1@8 PROC				; COMDAT

; 1025 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	56		 push	 esi

; 1026 : 	return HiberDriverEntryFilter (1, arg0, hiberDriverContext);

  00006	ff 75 08	 push	 DWORD PTR _arg0$[ebp]
  00009	8b 75 0c	 mov	 esi, DWORD PTR _hiberDriverContext$[ebp]
  0000c	33 c0		 xor	 eax, eax
  0000e	40		 inc	 eax
  0000f	e8 00 00 00 00	 call	 _HiberDriverEntryFilter@12
  00014	5e		 pop	 esi

; 1027 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
_HiberDriverEntryFilter1@8 ENDP
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT _HiberDriverEntryFilter2@8
_TEXT	SEGMENT
_arg0$ = 8						; size = 4
_hiberDriverContext$ = 12				; size = 4
_HiberDriverEntryFilter2@8 PROC				; COMDAT

; 1031 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	56		 push	 esi

; 1032 : 	return HiberDriverEntryFilter (2, arg0, hiberDriverContext);

  00006	ff 75 08	 push	 DWORD PTR _arg0$[ebp]
  00009	8b 75 0c	 mov	 esi, DWORD PTR _hiberDriverContext$[ebp]
  0000c	6a 02		 push	 2
  0000e	58		 pop	 eax
  0000f	e8 00 00 00 00	 call	 _HiberDriverEntryFilter@12
  00014	5e		 pop	 esi

; 1033 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
_HiberDriverEntryFilter2@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_1M@IFMDENJC@?$AAH?$AAI?$AAB?$AAE?$AAR?$AA?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_1M@JEHGIGBM@?$AAH?$AAi?$AAb?$AAe?$AAr?$AA?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_1M@IMEHFNOE@?$AAh?$AAi?$AAb?$AAe?$AAr?$AA?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
EXTRN	__imp_@KfLowerIrql@4:PROC
EXTRN	__imp__KeRaiseIrqlToDpcLevel@0:PROC
EXTRN	_TCDriverObject:DWORD
;	COMDAT ??_C@_1M@IFMDENJC@?$AAH?$AAI?$AAB?$AAE?$AAR?$AA?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_1M@IFMDENJC@?$AAH?$AAI?$AAB?$AAE?$AAR?$AA?$AA@FNODOBFM@ DB 'H', 00H
	DB	'I', 00H, 'B', 00H, 'E', 00H, 'R', 00H, 00H, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_1M@JEHGIGBM@?$AAH?$AAi?$AAb?$AAe?$AAr?$AA?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_1M@JEHGIGBM@?$AAH?$AAi?$AAb?$AAe?$AAr?$AA?$AA@FNODOBFM@ DB 'H', 00H
	DB	'i', 00H, 'b', 00H, 'e', 00H, 'r', 00H, 00H, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_1M@IMEHFNOE@?$AAh?$AAi?$AAb?$AAe?$AAr?$AA?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_1M@IMEHFNOE@?$AAh?$AAi?$AAb?$AAe?$AAr?$AA?$AA@FNODOBFM@ DB 'h', 00H
	DB	'i', 00H, 'b', 00H, 'e', 00H, 'r', 00H, 00H, 00H ;  ?? ::FNODOBFM::`string'
; Function compile flags: /Ogsp
text$s	ENDS
;	COMDAT _LoadImageNotifyRoutine@12
_TEXT	SEGMENT
_fullImageName$ = 8					; size = 4
_processId$ = 12					; size = 4
_imageInfo$ = 16					; size = 4
_origIrql$ = 19						; size = 1
_LoadImageNotifyRoutine@12 PROC				; COMDAT

; 1037 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	53		 push	 ebx

; 1038 : 	ModuleTableItem *moduleItem;
; 1039 : 	LIST_ENTRY *listEntry;
; 1040 : 	KIRQL origIrql;
; 1041 : 
; 1042 : 	if (!imageInfo || !imageInfo->SystemModeImage || !imageInfo->ImageBase || !TCDriverObject->DriverSection)

  00006	8b 5d 10	 mov	 ebx, DWORD PTR _imageInfo$[ebp]
  00009	57		 push	 edi
  0000a	33 ff		 xor	 edi, edi
  0000c	3b df		 cmp	 ebx, edi
  0000e	0f 84 27 01 00
	00		 je	 $LN16@LoadImageN
  00014	f7 03 00 01 00
	00		 test	 DWORD PTR [ebx], 256	; 00000100H
  0001a	0f 84 1b 01 00
	00		 je	 $LN16@LoadImageN
  00020	39 7b 04	 cmp	 DWORD PTR [ebx+4], edi
  00023	0f 84 12 01 00
	00		 je	 $LN16@LoadImageN
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR _TCDriverObject
  0002e	39 78 14	 cmp	 DWORD PTR [eax+20], edi
  00031	0f 84 04 01 00
	00		 je	 $LN16@LoadImageN

; 1043 : 		return;
; 1044 : 
; 1045 : 	moduleItem = *(ModuleTableItem **) TCDriverObject->DriverSection;

  00037	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0003a	56		 push	 esi
  0003b	8b 30		 mov	 esi, DWORD PTR [eax]

; 1046 : 	if (!moduleItem || !moduleItem->ModuleList.Flink)

  0003d	3b f7		 cmp	 esi, edi
  0003f	0f 84 f5 00 00
	00		 je	 $LN29@LoadImageN
  00045	39 3e		 cmp	 DWORD PTR [esi], edi
  00047	0f 84 ed 00 00
	00		 je	 $LN29@LoadImageN

; 1047 : 		return;
; 1048 : 
; 1049 : 	// Search loaded system modules for hibernation driver
; 1050 : 	origIrql = KeRaiseIrqlToDpcLevel();

  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeRaiseIrqlToDpcLevel@0
  00053	88 45 13	 mov	 BYTE PTR _origIrql$[ebp], al

; 1051 : 
; 1052 : 	for (listEntry = moduleItem->ModuleList.Flink->Blink;
; 1053 : 		listEntry && listEntry != TCDriverObject->DriverSection;
; 1054 : 		listEntry = listEntry->Flink)

  00056	8b 06		 mov	 eax, DWORD PTR [esi]
  00058	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0005b	3b d7		 cmp	 edx, edi
  0005d	0f 84 ce 00 00
	00		 je	 $LN28@LoadImageN
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR _TCDriverObject
  00068	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
$LL15@LoadImageN:
  0006b	3b d0		 cmp	 edx, eax
  0006d	0f 84 be 00 00
	00		 je	 $LN28@LoadImageN

; 1055 : 	{
; 1056 : 		moduleItem = CONTAINING_RECORD (listEntry, ModuleTableItem, ModuleList);
; 1057 : 
; 1058 : 		if (moduleItem && imageInfo->ImageBase == moduleItem->ModuleBaseAddress)

  00073	3b d7		 cmp	 edx, edi
  00075	74 08		 je	 SHORT $LN14@LoadImageN
  00077	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0007a	3b 4a 18	 cmp	 ecx, DWORD PTR [edx+24]
  0007d	74 0b		 je	 SHORT $LN23@LoadImageN
$LN14@LoadImageN:

; 1051 : 
; 1052 : 	for (listEntry = moduleItem->ModuleList.Flink->Blink;
; 1053 : 		listEntry && listEntry != TCDriverObject->DriverSection;
; 1054 : 		listEntry = listEntry->Flink)

  0007f	8b 12		 mov	 edx, DWORD PTR [edx]
  00081	3b d7		 cmp	 edx, edi
  00083	75 e6		 jne	 SHORT $LL15@LoadImageN

; 1055 : 	{
; 1056 : 		moduleItem = CONTAINING_RECORD (listEntry, ModuleTableItem, ModuleList);
; 1057 : 
; 1058 : 		if (moduleItem && imageInfo->ImageBase == moduleItem->ModuleBaseAddress)

  00085	e9 a7 00 00 00	 jmp	 $LN28@LoadImageN
$LN23@LoadImageN:

; 1059 : 		{
; 1060 : 			if (moduleItem->ModuleName.Buffer && moduleItem->ModuleName.Length >= 5 * sizeof (wchar_t))

  0008a	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0008d	3b c7		 cmp	 eax, edi
  0008f	0f 84 9c 00 00
	00		 je	 $LN28@LoadImageN
  00095	66 83 7a 2c 0a	 cmp	 WORD PTR [edx+44], 10	; 0000000aH
  0009a	0f 82 91 00 00
	00		 jb	 $LN28@LoadImageN

; 1061 : 			{
; 1062 : 				if (memcmp (moduleItem->ModuleName.Buffer, L"hiber", 5 * sizeof (wchar_t)) == 0
; 1063 : 					|| memcmp (moduleItem->ModuleName.Buffer, L"Hiber", 5 * sizeof (wchar_t)) == 0
; 1064 : 					|| memcmp (moduleItem->ModuleName.Buffer, L"HIBER", 5 * sizeof (wchar_t)) == 0)

  000a0	6a 05		 push	 5
  000a2	59		 pop	 ecx
  000a3	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_1M@IMEHFNOE@?$AAh?$AAi?$AAb?$AAe?$AAr?$AA?$AA@FNODOBFM@
  000a8	8b f0		 mov	 esi, eax
  000aa	33 db		 xor	 ebx, ebx
  000ac	66 f3 a7	 repe cmpsw
  000af	74 22		 je	 SHORT $LN9@LoadImageN
  000b1	6a 05		 push	 5
  000b3	59		 pop	 ecx
  000b4	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_1M@JEHGIGBM@?$AAH?$AAi?$AAb?$AAe?$AAr?$AA?$AA@FNODOBFM@
  000b9	8b f0		 mov	 esi, eax
  000bb	33 db		 xor	 ebx, ebx
  000bd	66 f3 a7	 repe cmpsw
  000c0	74 11		 je	 SHORT $LN9@LoadImageN
  000c2	6a 05		 push	 5
  000c4	8b f0		 mov	 esi, eax
  000c6	59		 pop	 ecx
  000c7	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_1M@IFMDENJC@?$AAH?$AAI?$AAB?$AAE?$AAR?$AA?$AA@FNODOBFM@
  000cc	33 c0		 xor	 eax, eax
  000ce	66 f3 a7	 repe cmpsw
  000d1	75 5e		 jne	 SHORT $LN28@LoadImageN
$LN9@LoadImageN:

; 1065 : 				{
; 1066 : 					HiberDriverEntry filterEntry;
; 1067 : 
; 1068 : 					switch (LastHiberFilterNumber)

  000d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _LastHiberFilterNumber
  000d9	8b c1		 mov	 eax, ecx
  000db	33 db		 xor	 ebx, ebx
  000dd	2b c3		 sub	 eax, ebx
  000df	74 28		 je	 SHORT $LN6@LoadImageN
  000e1	48		 dec	 eax
  000e2	74 1e		 je	 SHORT $LN5@LoadImageN
  000e4	48		 dec	 eax
  000e5	74 14		 je	 SHORT $LN4@LoadImageN

; 1073 : 					default: TC_THROW_FATAL_EXCEPTION;

  000e7	68 43 54 00 00	 push	 21571			; 00005443H
  000ec	53		 push	 ebx
  000ed	53		 push	 ebx
  000ee	68 31 04 00 00	 push	 1073			; 00000431H
  000f3	6a 29		 push	 41			; 00000029H
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeBugCheckEx@20
$LN31@LoadImageN:
$LN4@LoadImageN:

; 1072 : 					case 2: filterEntry = HiberDriverEntryFilter2; break;

  000fb	bf 00 00 00 00	 mov	 edi, OFFSET _HiberDriverEntryFilter2@8
  00100	eb 0c		 jmp	 SHORT $LN7@LoadImageN
$LN5@LoadImageN:

; 1071 : 					case 1: filterEntry = HiberDriverEntryFilter1; break;

  00102	bf 00 00 00 00	 mov	 edi, OFFSET _HiberDriverEntryFilter1@8
  00107	eb 05		 jmp	 SHORT $LN7@LoadImageN
$LN6@LoadImageN:

; 1069 : 					{
; 1070 : 					case 0: filterEntry = HiberDriverEntryFilter0; break;

  00109	bf 00 00 00 00	 mov	 edi, OFFSET _HiberDriverEntryFilter0@8
$LN7@LoadImageN:

; 1074 : 					}
; 1075 : 
; 1076 : 					if (moduleItem->ModuleEntryAddress != filterEntry)

  0010e	8b 72 1c	 mov	 esi, DWORD PTR [edx+28]
  00111	3b f7		 cmp	 esi, edi
  00113	74 1c		 je	 SHORT $LN28@LoadImageN

; 1077 : 					{
; 1078 : 						// Install filter
; 1079 : 						OriginalHiberDriverEntries[LastHiberFilterNumber] = moduleItem->ModuleEntryAddress;

  00115	89 34 8d 00 00
	00 00		 mov	 DWORD PTR _OriginalHiberDriverEntries[ecx*4], esi

; 1080 : 						moduleItem->ModuleEntryAddress = filterEntry;
; 1081 : 
; 1082 : 						if (++LastHiberFilterNumber > TC_MAX_HIBER_FILTER_COUNT - 1)

  0011c	41		 inc	 ecx
  0011d	83 f9 02	 cmp	 ecx, 2
  00120	89 7a 1c	 mov	 DWORD PTR [edx+28], edi
  00123	89 0d 00 00 00
	00		 mov	 DWORD PTR _LastHiberFilterNumber, ecx
  00129	7e 06		 jle	 SHORT $LN28@LoadImageN

; 1083 : 							LastHiberFilterNumber = 0;

  0012b	89 1d 00 00 00
	00		 mov	 DWORD PTR _LastHiberFilterNumber, ebx
$LN28@LoadImageN:

; 1084 : 					}
; 1085 : 				}
; 1086 : 			}
; 1087 : 			break;
; 1088 : 		}
; 1089 : 	}
; 1090 : 
; 1091 : 	KeLowerIrql (origIrql);

  00131	8a 4d 13	 mov	 cl, BYTE PTR _origIrql$[ebp]
  00134	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfLowerIrql@4
$LN29@LoadImageN:
  0013a	5e		 pop	 esi
$LN16@LoadImageN:
  0013b	5f		 pop	 edi
  0013c	5b		 pop	 ebx

; 1092 : }

  0013d	5d		 pop	 ebp
  0013e	c2 0c 00	 ret	 12			; 0000000cH
$LN30@LoadImageN:
_LoadImageNotifyRoutine@12 ENDP
_TEXT	ENDS
PUBLIC	_StartLegacyHibernationDriverFilter@0
EXTRN	__imp__MmFreeContiguousMemory@4:PROC
EXTRN	__imp__IoFreeMdl@4:PROC
EXTRN	__imp__PsSetLoadImageNotifyRoutine@4:PROC
EXTRN	__imp__MmBuildMdlForNonPagedPool@4:PROC
EXTRN	__imp__IoAllocateMdl@20:PROC
EXTRN	__imp__MmAllocateContiguousMemory@12:PROC
; Function compile flags: /Ogsp
;	COMDAT _StartLegacyHibernationDriverFilter@0
_TEXT	SEGMENT
_StartLegacyHibernationDriverFilter@0 PROC		; COMDAT

; 1097 : 	PHYSICAL_ADDRESS highestAcceptableWriteBufferAddr;
; 1098 : 	NTSTATUS status;
; 1099 : 
; 1100 : 	ASSERT (KeGetCurrentIrql() == PASSIVE_LEVEL);
; 1101 : 	ASSERT (!IsOSAtLeast (WIN_VISTA));
; 1102 : 
; 1103 : 	if (!TCDriverObject->DriverSection || !*(ModuleTableItem **) TCDriverObject->DriverSection)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _TCDriverObject
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	33 ff		 xor	 edi, edi
  00009	39 78 14	 cmp	 DWORD PTR [eax+20], edi
  0000c	74 62		 je	 SHORT $LN12@StartLegac
  0000e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00011	39 38		 cmp	 DWORD PTR [eax], edi
  00013	74 5b		 je	 SHORT $LN12@StartLegac

; 1104 : 		goto err;
; 1105 : 
; 1106 : 	// All buffers required for hibernation must be allocated here
; 1107 : #ifdef _WIN64
; 1108 : 	highestAcceptableWriteBufferAddr.QuadPart = 0x7FFffffFFFFULL;
; 1109 : #else
; 1110 : 	highestAcceptableWriteBufferAddr.QuadPart = 0xffffFFFFULL;

  00015	33 c9		 xor	 ecx, ecx

; 1111 : #endif
; 1112 : 
; 1113 : 	HibernationWriteBuffer = MmAllocateContiguousMemory (TC_HIBERNATION_WRITE_BUFFER_SIZE, highestAcceptableWriteBufferAddr);

  00017	51		 push	 ecx
  00018	83 c8 ff	 or	 eax, -1
  0001b	50		 push	 eax
  0001c	be 00 00 02 00	 mov	 esi, 131072		; 00020000H
  00021	56		 push	 esi
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmAllocateContiguousMemory@12
  00028	a3 00 00 00 00	 mov	 DWORD PTR _HibernationWriteBuffer, eax

; 1114 : 	if (!HibernationWriteBuffer)

  0002d	3b c7		 cmp	 eax, edi
  0002f	74 3f		 je	 SHORT $LN12@StartLegac

; 1115 : 		goto err;
; 1116 : 
; 1117 : 	HibernationWriteBufferMdl = IoAllocateMdl (HibernationWriteBuffer, TC_HIBERNATION_WRITE_BUFFER_SIZE, FALSE, FALSE, NULL);

  00031	57		 push	 edi
  00032	57		 push	 edi
  00033	57		 push	 edi
  00034	56		 push	 esi
  00035	50		 push	 eax
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoAllocateMdl@20
  0003c	a3 00 00 00 00	 mov	 DWORD PTR _HibernationWriteBufferMdl, eax

; 1118 : 	if (!HibernationWriteBufferMdl)

  00041	3b c7		 cmp	 eax, edi
  00043	74 30		 je	 SHORT $err$28490

; 1119 : 		goto err;
; 1120 : 
; 1121 : 	MmBuildMdlForNonPagedPool (HibernationWriteBufferMdl);

  00045	50		 push	 eax
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmBuildMdlForNonPagedPool@4

; 1122 : 
; 1123 : 	status = PsSetLoadImageNotifyRoutine (LoadImageNotifyRoutine);

  0004c	68 00 00 00 00	 push	 OFFSET _LoadImageNotifyRoutine@12
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PsSetLoadImageNotifyRoutine@4

; 1124 : 	if (!NT_SUCCESS (status))

  00057	85 c0		 test	 eax, eax
  00059	7c 15		 jl	 SHORT $LN12@StartLegac

; 1125 : 		goto err;
; 1126 : 
; 1127 : 	LegacyHibernationDriverFilterActive = TRUE;

  0005b	33 c0		 xor	 eax, eax
  0005d	40		 inc	 eax
  0005e	a3 00 00 00 00	 mov	 DWORD PTR _LegacyHibernationDriverFilterActive, eax

; 1128 : 	CrashDumpEnabled = FALSE;

  00063	89 3d 00 00 00
	00		 mov	 DWORD PTR _CrashDumpEnabled, edi

; 1129 : 	HibernationEnabled = TRUE;

  00069	a3 00 00 00 00	 mov	 DWORD PTR _HibernationEnabled, eax

; 1130 : 	return;

  0006e	eb 3e		 jmp	 SHORT $LN1@StartLegac
$LN12@StartLegac:
  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR _HibernationWriteBufferMdl
$err$28490:

; 1131 : 
; 1132 : err:
; 1133 : 	LegacyHibernationDriverFilterActive = FALSE;

  00075	89 3d 00 00 00
	00		 mov	 DWORD PTR _LegacyHibernationDriverFilterActive, edi

; 1134 : 	CrashDumpEnabled = FALSE;

  0007b	89 3d 00 00 00
	00		 mov	 DWORD PTR _CrashDumpEnabled, edi

; 1135 : 	HibernationEnabled = FALSE;

  00081	89 3d 00 00 00
	00		 mov	 DWORD PTR _HibernationEnabled, edi

; 1136 : 
; 1137 : 	if (HibernationWriteBufferMdl)

  00087	3b c7		 cmp	 eax, edi
  00089	74 0d		 je	 SHORT $LN2@StartLegac

; 1138 : 	{
; 1139 : 		IoFreeMdl (HibernationWriteBufferMdl);

  0008b	50		 push	 eax
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoFreeMdl@4

; 1140 : 		HibernationWriteBufferMdl = NULL;

  00092	89 3d 00 00 00
	00		 mov	 DWORD PTR _HibernationWriteBufferMdl, edi
$LN2@StartLegac:

; 1141 : 	}
; 1142 : 
; 1143 : 	if (HibernationWriteBuffer)

  00098	a1 00 00 00 00	 mov	 eax, DWORD PTR _HibernationWriteBuffer
  0009d	3b c7		 cmp	 eax, edi
  0009f	74 0d		 je	 SHORT $LN1@StartLegac

; 1144 : 	{
; 1145 : 		MmFreeContiguousMemory (HibernationWriteBuffer);

  000a1	50		 push	 eax
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmFreeContiguousMemory@4

; 1146 : 		HibernationWriteBuffer = NULL;

  000a8	89 3d 00 00 00
	00		 mov	 DWORD PTR _HibernationWriteBuffer, edi
$LN1@StartLegac:
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi

; 1147 : 	}
; 1148 : }

  000b0	c3		 ret	 0
_StartLegacyHibernationDriverFilter@0 ENDP
_TEXT	ENDS
EXTRN	__imp__PsTerminateSystemThread@4:PROC
EXTRN	_RootDeviceControlMutexRelease@0:PROC
EXTRN	_RootDeviceControlMutexAcquireNoWait@0:PROC
EXTRN	_TCSleep@4:PROC
EXTRN	__imp_@KfReleaseSpinLock@8:PROC
EXTRN	__imp_@KfAcquireSpinLock@4:PROC
EXTRN	_DecryptDataUnits@16:PROC
EXTRN	_WipeBuffer@20:PROC
EXTRN	_GetWipePassCount@4:PROC
EXTRN	_EncryptDataUnits@16:PROC
EXTRN	_ReadDeviceSkipUnreadableSectors@24:PROC
EXTRN	_ZeroUnreadableSectors@20:PROC
EXTRN	_EncryptedIoQueueIsSuspended@4:PROC
EXTRN	_EncryptedIoQueueResumeFromHold@4:PROC
EXTRN	_EncryptedIoQueueHoldWhenIdle@12:PROC
EXTRN	__alldiv:PROC
_BSS	SEGMENT
	ALIGN	8

_SetupStatusEncryptedAreaEnd DQ 01H DUP (?)
_SetupStatusSpinLock DD 01H DUP (?)
_TransformWaitingForIdle DD 01H DUP (?)
_EncryptionSetupThreadAbortRequested DD 01H DUP (?)
_SetupResult DD	01H DUP (?)
; Function compile flags: /Ogsp
_BSS	ENDS
;	COMDAT _SetupThreadProc@4
_TEXT	SEGMENT
_badSectorCount$28578 = -84				; size = 8
_zeroedSectorCount$28571 = -76				; size = 8
tv572 = -68						; size = 8
_dataUnit$ = -60					; size = 8
_bytesWrittenSinceHeaderUpdate$ = -52			; size = 8
_offset$ = -44						; size = 8
tv511 = -36						; size = 4
tv512 = -32						; size = 4
_status$ = -32						; size = 4
_headerUpdateRequired$ = -28				; size = 4
_wipeBuffer$ = -24					; size = 4
_buffer$ = -20						; size = 4
_setupBlockSize$ = -16					; size = 4
_wipeRandChars$ = -12					; size = 3
_wipeRandCharsUpdate$ = -8				; size = 3
_wipePass$28584 = -1					; size = 1
_threadArg$ = 8						; size = 4
_SetupThreadProc@4 PROC					; COMDAT

; 1152 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 54	 sub	 esp, 84			; 00000054H

; 1153 : 	DriveFilterExtension *Extension = BootDriveFilterExtension;
; 1154 : 
; 1155 : 	LARGE_INTEGER offset;
; 1156 : 	UINT64_STRUCT dataUnit;
; 1157 : 	ULONG setupBlockSize = TC_ENCRYPTION_SETUP_IO_BLOCK_SIZE;
; 1158 : 	BOOL headerUpdateRequired = FALSE;

  00008	33 c0		 xor	 eax, eax
  0000a	53		 push	 ebx
  0000b	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR _BootDriveFilterExtension
  00011	56		 push	 esi
  00012	be 00 00 18 00	 mov	 esi, 1572864		; 00180000H
  00017	89 75 f0	 mov	 DWORD PTR _setupBlockSize$[ebp], esi
  0001a	89 45 e4	 mov	 DWORD PTR _headerUpdateRequired$[ebp], eax

; 1159 : 	int64 bytesWrittenSinceHeaderUpdate = 0;

  0001d	89 45 cc	 mov	 DWORD PTR _bytesWrittenSinceHeaderUpdate$[ebp], eax
  00020	89 45 d0	 mov	 DWORD PTR _bytesWrittenSinceHeaderUpdate$[ebp+4], eax

; 1160 : 
; 1161 : 	byte *buffer = NULL;
; 1162 : 	byte *wipeBuffer = NULL;

  00023	89 45 e8	 mov	 DWORD PTR _wipeBuffer$[ebp], eax

; 1163 : 	byte wipeRandChars[TC_WIPE_RAND_CHAR_COUNT];
; 1164 : 	byte wipeRandCharsUpdate[TC_WIPE_RAND_CHAR_COUNT];
; 1165 : 	
; 1166 : 	KIRQL irql;
; 1167 : 	NTSTATUS status;
; 1168 : 
; 1169 : 	SetupResult = STATUS_UNSUCCESSFUL;

  00026	c7 05 00 00 00
	00 01 00 00 c0	 mov	 DWORD PTR _SetupResult, -1073741823 ; c0000001H

; 1170 : 
; 1171 : 	// Make sure volume header can be updated
; 1172 : 	if (Extension->HeaderCryptoInfo == NULL)

  00030	39 83 04 02 00
	00		 cmp	 DWORD PTR [ebx+516], eax
  00036	75 0f		 jne	 SHORT $LN67@SetupThrea

; 1173 : 	{
; 1174 : 		SetupResult = STATUS_INVALID_PARAMETER;

  00038	c7 05 00 00 00
	00 0d 00 00 c0	 mov	 DWORD PTR _SetupResult, -1073741811 ; c000000dH

; 1175 : 		goto ret;

  00042	e9 56 06 00 00	 jmp	 $LN1@SetupThrea
$LN67@SetupThrea:
  00047	57		 push	 edi

; 1176 : 	}
; 1177 : 
; 1178 : 	buffer = TCalloc (TC_ENCRYPTION_SETUP_IO_BLOCK_SIZE);

  00048	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__ExAllocatePoolWithTag@12
  0004e	68 54 43 4d 4d	 push	 1296909140		; 4d4d4354H
  00053	56		 push	 esi
  00054	6a 00		 push	 0
  00056	ff d7		 call	 edi
  00058	89 45 ec	 mov	 DWORD PTR _buffer$[ebp], eax

; 1179 : 	if (!buffer)

  0005b	85 c0		 test	 eax, eax
  0005d	75 0f		 jne	 SHORT $LN66@SetupThrea
$LN118@SetupThrea:

; 1180 : 	{
; 1181 : 		SetupResult = STATUS_INSUFFICIENT_RESOURCES;

  0005f	c7 05 00 00 00
	00 9a 00 00 c0	 mov	 DWORD PTR _SetupResult, -1073741670 ; c000009aH

; 1182 : 		goto ret;

  00069	e9 08 06 00 00	 jmp	 $ret$28522
$LN66@SetupThrea:

; 1183 : 	}
; 1184 : 
; 1185 : 	if (SetupRequest.SetupMode == SetupEncryption && SetupRequest.WipeAlgorithm != TC_WIPE_NONE)

  0006e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _SetupRequest, 1
  00075	75 1a		 jne	 SHORT $LN70@SetupThrea
  00077	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR _SetupRequest+4, 0
  0007e	74 11		 je	 SHORT $LN70@SetupThrea

; 1186 : 	{
; 1187 : 		wipeBuffer = TCalloc (TC_ENCRYPTION_SETUP_IO_BLOCK_SIZE);

  00080	68 54 43 4d 4d	 push	 1296909140		; 4d4d4354H
  00085	56		 push	 esi
  00086	6a 00		 push	 0
  00088	ff d7		 call	 edi
  0008a	89 45 e8	 mov	 DWORD PTR _wipeBuffer$[ebp], eax

; 1188 : 		if (!wipeBuffer)

  0008d	85 c0		 test	 eax, eax

; 1189 : 		{
; 1190 : 			SetupResult = STATUS_INSUFFICIENT_RESOURCES;
; 1191 : 			goto ret;

  0008f	74 ce		 je	 SHORT $LN118@SetupThrea
$LN70@SetupThrea:

; 1192 : 		}
; 1193 : 	}
; 1194 : 
; 1195 : 	while (!NT_SUCCESS (EncryptedIoQueueHoldWhenIdle (&Extension->Queue, 1000)))

  00091	be e8 03 00 00	 mov	 esi, 1000		; 000003e8H
  00096	eb 17		 jmp	 SHORT $LN112@SetupThrea
$LL63@SetupThrea:

; 1196 : 	{
; 1197 : 		if (EncryptionSetupThreadAbortRequested)

  00098	a1 00 00 00 00	 mov	 eax, DWORD PTR _EncryptionSetupThreadAbortRequested
  0009d	85 c0		 test	 eax, eax
  0009f	0f 85 39 01 00
	00		 jne	 $abort$28535

; 1198 : 			goto abort;
; 1199 : 
; 1200 : 		TransformWaitingForIdle = TRUE;

  000a5	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _TransformWaitingForIdle, 1
$LN112@SetupThrea:

; 1192 : 		}
; 1193 : 	}
; 1194 : 
; 1195 : 	while (!NT_SUCCESS (EncryptedIoQueueHoldWhenIdle (&Extension->Queue, 1000)))

  000af	6a 00		 push	 0
  000b1	56		 push	 esi
  000b2	8d 43 48	 lea	 eax, DWORD PTR [ebx+72]
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _EncryptedIoQueueHoldWhenIdle@12
  000bb	85 c0		 test	 eax, eax
  000bd	7c d9		 jl	 SHORT $LL63@SetupThrea

; 1201 : 	}
; 1202 : 	TransformWaitingForIdle = FALSE;
; 1203 : 
; 1204 : 	switch (SetupRequest.SetupMode)

  000bf	a1 00 00 00 00	 mov	 eax, DWORD PTR _SetupRequest
  000c4	83 25 00 00 00
	00 00		 and	 DWORD PTR _TransformWaitingForIdle, 0
  000cb	48		 dec	 eax
  000cc	74 45		 je	 SHORT $LN58@SetupThrea
  000ce	48		 dec	 eax
  000cf	0f 85 10 01 00
	00		 jne	 $err$28545

; 1222 : 		}
; 1223 : 
; 1224 : 		break;
; 1225 : 
; 1226 : 	case SetupDecryption:
; 1227 : 		Dump ("Decrypting...\n");
; 1228 : 		if (Extension->Queue.EncryptedAreaStart == -1 || Extension->Queue.EncryptedAreaEnd == -1)

  000d5	8b 83 90 00 00
	00		 mov	 eax, DWORD PTR [ebx+144]
  000db	23 83 94 00 00
	00		 and	 eax, DWORD PTR [ebx+148]
  000e1	83 f8 ff	 cmp	 eax, -1
  000e4	0f 84 f4 00 00
	00		 je	 $abort$28535
  000ea	8b 83 98 00 00
	00		 mov	 eax, DWORD PTR [ebx+152]
  000f0	23 83 9c 00 00
	00		 and	 eax, DWORD PTR [ebx+156]
  000f6	83 f8 ff	 cmp	 eax, -1
  000f9	0f 84 df 00 00
	00		 je	 $abort$28535
$LN91@SetupThrea:

; 1229 : 		{
; 1230 : 			SetupResult = STATUS_SUCCESS;
; 1231 : 			goto abort;
; 1232 : 		}
; 1233 : 
; 1234 : 		offset.QuadPart = Extension->Queue.EncryptedAreaEnd + 1;

  000ff	8b b3 98 00 00
	00		 mov	 esi, DWORD PTR [ebx+152]
  00105	8b bb 9c 00 00
	00		 mov	 edi, DWORD PTR [ebx+156]
  0010b	83 c6 01	 add	 esi, 1
  0010e	83 d7 00	 adc	 edi, 0

; 1235 : 		break;

  00111	eb 6a		 jmp	 SHORT $LN113@SetupThrea
$LN58@SetupThrea:

; 1205 : 	{
; 1206 : 	case SetupEncryption:
; 1207 : 		Dump ("Encrypting...\n");
; 1208 : 		if (Extension->Queue.EncryptedAreaStart == -1 || Extension->Queue.EncryptedAreaEnd == -1)

  00113	8b 83 90 00 00
	00		 mov	 eax, DWORD PTR [ebx+144]
  00119	23 83 94 00 00
	00		 and	 eax, DWORD PTR [ebx+148]
  0011f	83 f8 ff	 cmp	 eax, -1
  00122	74 2d		 je	 SHORT $LN56@SetupThrea
  00124	8b 83 98 00 00
	00		 mov	 eax, DWORD PTR [ebx+152]
  0012a	23 83 9c 00 00
	00		 and	 eax, DWORD PTR [ebx+156]
  00130	83 f8 ff	 cmp	 eax, -1
  00133	74 1c		 je	 SHORT $LN56@SetupThrea

; 1214 : 		}
; 1215 : 		else
; 1216 : 		{
; 1217 : 			// Resume aborted encryption
; 1218 : 			if (Extension->Queue.EncryptedAreaEnd == Extension->ConfiguredEncryptedAreaEnd)

  00135	8b 83 98 00 00
	00		 mov	 eax, DWORD PTR [ebx+152]
  0013b	8b 8b 9c 00 00
	00		 mov	 ecx, DWORD PTR [ebx+156]
  00141	3b 43 38	 cmp	 eax, DWORD PTR [ebx+56]
  00144	75 b9		 jne	 SHORT $LN91@SetupThrea
  00146	3b 4b 3c	 cmp	 ecx, DWORD PTR [ebx+60]
  00149	0f 84 96 00 00
	00		 je	 $err$28545

; 1219 : 				goto err;
; 1220 : 
; 1221 : 			offset.QuadPart = Extension->Queue.EncryptedAreaEnd + 1;

  0014f	eb ae		 jmp	 SHORT $LN91@SetupThrea
$LN56@SetupThrea:

; 1209 : 		{
; 1210 : 			// Start encryption
; 1211 : 			Extension->Queue.EncryptedAreaStart = Extension->ConfiguredEncryptedAreaStart;

  00151	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]

; 1212 : 			Extension->Queue.EncryptedAreaEnd = -1;
; 1213 : 			offset.QuadPart = Extension->ConfiguredEncryptedAreaStart;

  00154	8b 73 30	 mov	 esi, DWORD PTR [ebx+48]
  00157	8b 7b 34	 mov	 edi, DWORD PTR [ebx+52]
  0015a	89 83 90 00 00
	00		 mov	 DWORD PTR [ebx+144], eax
  00160	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]
  00163	89 83 94 00 00
	00		 mov	 DWORD PTR [ebx+148], eax
  00169	c7 83 98 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [ebx+152], -1
  00173	c7 83 9c 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [ebx+156], -1
$LN113@SetupThrea:

; 1236 : 
; 1237 : 	default:
; 1238 : 		goto err;
; 1239 : 	}
; 1240 : 
; 1241 : 	EncryptedIoQueueResumeFromHold (&Extension->Queue);

  0017d	8d 43 48	 lea	 eax, DWORD PTR [ebx+72]
  00180	50		 push	 eax
  00181	89 75 d4	 mov	 DWORD PTR _offset$[ebp], esi
  00184	89 7d d8	 mov	 DWORD PTR _offset$[ebp+4], edi
  00187	e8 00 00 00 00	 call	 _EncryptedIoQueueResumeFromHold@4

; 1242 : 		
; 1243 : 	Dump ("EncryptedAreaStart=%I64d\n", Extension->Queue.EncryptedAreaStart);
; 1244 : 	Dump ("EncryptedAreaEnd=%I64d\n", Extension->Queue.EncryptedAreaEnd);
; 1245 : 	Dump ("ConfiguredEncryptedAreaStart=%I64d\n", Extension->ConfiguredEncryptedAreaStart);
; 1246 : 	Dump ("ConfiguredEncryptedAreaEnd=%I64d\n", Extension->ConfiguredEncryptedAreaEnd);
; 1247 : 	Dump ("offset=%I64d\n", offset.QuadPart);
; 1248 : 	Dump ("EncryptedAreaStart=%I64d (%I64d)  EncryptedAreaEnd=%I64d\n", Extension->Queue.EncryptedAreaStart / 1024 / 1024, Extension->Queue.EncryptedAreaStart, Extension->Queue.EncryptedAreaEnd / 1024 / 1024);
; 1249 : 
; 1250 : 	while (!EncryptionSetupThreadAbortRequested)

  0018c	e9 43 04 00 00	 jmp	 $LN14@SetupThrea
$LL49@SetupThrea:

; 1251 : 	{
; 1252 : 		if (SetupRequest.SetupMode == SetupEncryption)

  00191	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _SetupRequest, 1
  00198	0f 85 30 01 00
	00		 jne	 $LN47@SetupThrea

; 1253 : 		{
; 1254 : 			if (offset.QuadPart + setupBlockSize > Extension->ConfiguredEncryptedAreaEnd + 1)

  0019e	8b 55 f0	 mov	 edx, DWORD PTR _setupBlockSize$[ebp]
  001a1	8b 4b 38	 mov	 ecx, DWORD PTR [ebx+56]
  001a4	33 c0		 xor	 eax, eax
  001a6	03 d6		 add	 edx, esi
  001a8	13 c7		 adc	 eax, edi
  001aa	83 c1 01	 add	 ecx, 1
  001ad	89 4d bc	 mov	 DWORD PTR tv572[ebp], ecx
  001b0	8b 4b 3c	 mov	 ecx, DWORD PTR [ebx+60]
  001b3	83 d1 00	 adc	 ecx, 0
  001b6	3b c1		 cmp	 eax, ecx
  001b8	7c 10		 jl	 SHORT $LN46@SetupThrea
  001ba	7f 05		 jg	 SHORT $LN92@SetupThrea
  001bc	3b 55 bc	 cmp	 edx, DWORD PTR tv572[ebp]
  001bf	76 09		 jbe	 SHORT $LN46@SetupThrea
$LN92@SetupThrea:

; 1255 : 				setupBlockSize = (ULONG) (Extension->ConfiguredEncryptedAreaEnd + 1 - offset.QuadPart);

  001c1	8b 43 38	 mov	 eax, DWORD PTR [ebx+56]
  001c4	2b c6		 sub	 eax, esi
  001c6	40		 inc	 eax
  001c7	89 45 f0	 mov	 DWORD PTR _setupBlockSize$[ebp], eax
$LN46@SetupThrea:

; 1256 : 
; 1257 : 			if (offset.QuadPart > Extension->ConfiguredEncryptedAreaEnd)

  001ca	3b 7b 3c	 cmp	 edi, DWORD PTR [ebx+60]
  001cd	7f 0f		 jg	 SHORT $abort$28535
  001cf	0f 8c 6a 01 00
	00		 jl	 $LN95@SetupThrea
  001d5	3b 73 38	 cmp	 esi, DWORD PTR [ebx+56]
  001d8	0f 86 61 01 00
	00		 jbe	 $LN95@SetupThrea
$abort$28535:

; 1408 : 		}
; 1409 : 	}
; 1410 : 
; 1411 : abort:
; 1412 : 	SetupResult = STATUS_SUCCESS;

  001de	83 25 00 00 00
	00 00		 and	 DWORD PTR _SetupResult, 0
$err$28545:

; 1413 : err:
; 1414 : 
; 1415 : 	if (Extension->Queue.EncryptedAreaEnd == -1)

  001e5	8b 83 98 00 00
	00		 mov	 eax, DWORD PTR [ebx+152]
  001eb	23 83 9c 00 00
	00		 and	 eax, DWORD PTR [ebx+156]
  001f1	83 cf ff	 or	 edi, -1
  001f4	3b c7		 cmp	 eax, edi
  001f6	75 0c		 jne	 SHORT $LN13@SetupThrea

; 1416 : 		Extension->Queue.EncryptedAreaStart = -1;

  001f8	89 bb 90 00 00
	00		 mov	 DWORD PTR [ebx+144], edi
  001fe	89 bb 94 00 00
	00		 mov	 DWORD PTR [ebx+148], edi
$LN13@SetupThrea:

; 1417 : 
; 1418 : 	if (EncryptedIoQueueIsSuspended (&Extension->Queue))

  00204	8d 73 48	 lea	 esi, DWORD PTR [ebx+72]
  00207	56		 push	 esi
  00208	e8 00 00 00 00	 call	 _EncryptedIoQueueIsSuspended@4
  0020d	85 c0		 test	 eax, eax
  0020f	74 06		 je	 SHORT $LN12@SetupThrea

; 1419 : 		EncryptedIoQueueResumeFromHold (&Extension->Queue);

  00211	56		 push	 esi
  00212	e8 00 00 00 00	 call	 _EncryptedIoQueueResumeFromHold@4
$LN12@SetupThrea:

; 1420 : 
; 1421 : 	if (SetupRequest.SetupMode == SetupDecryption && Extension->Queue.EncryptedAreaStart >= Extension->Queue.EncryptedAreaEnd)

  00217	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _SetupRequest, 2
  0021e	75 61		 jne	 SHORT $LN100@SetupThrea
  00220	8b 8b 98 00 00
	00		 mov	 ecx, DWORD PTR [ebx+152]
  00226	8b 83 9c 00 00
	00		 mov	 eax, DWORD PTR [ebx+156]
  0022c	8b 93 94 00 00
	00		 mov	 edx, DWORD PTR [ebx+148]
  00232	3b d0		 cmp	 edx, eax
  00234	7c 4b		 jl	 SHORT $LN100@SetupThrea
  00236	7f 0a		 jg	 SHORT $LL10@SetupThrea
  00238	8b 83 90 00 00
	00		 mov	 eax, DWORD PTR [ebx+144]
  0023e	3b c1		 cmp	 eax, ecx
  00240	72 3f		 jb	 SHORT $LN100@SetupThrea
$LL10@SetupThrea:

; 1422 : 	{
; 1423 : 		while (!NT_SUCCESS (EncryptedIoQueueHoldWhenIdle (&Extension->Queue, 0)));

  00242	6a 00		 push	 0
  00244	6a 00		 push	 0
  00246	56		 push	 esi
  00247	e8 00 00 00 00	 call	 _EncryptedIoQueueHoldWhenIdle@12
  0024c	85 c0		 test	 eax, eax
  0024e	7c f2		 jl	 SHORT $LL10@SetupThrea

; 1424 : 
; 1425 : 		Extension->ConfiguredEncryptedAreaStart = Extension->ConfiguredEncryptedAreaEnd = -1;

  00250	89 7b 38	 mov	 DWORD PTR [ebx+56], edi
  00253	89 7b 3c	 mov	 DWORD PTR [ebx+60], edi
  00256	89 7b 30	 mov	 DWORD PTR [ebx+48], edi
  00259	89 7b 34	 mov	 DWORD PTR [ebx+52], edi

; 1426 : 		Extension->Queue.EncryptedAreaStart = Extension->Queue.EncryptedAreaEnd = -1;

  0025c	89 bb 98 00 00
	00		 mov	 DWORD PTR [ebx+152], edi

; 1427 : 
; 1428 : 		EncryptedIoQueueResumeFromHold (&Extension->Queue);

  00262	56		 push	 esi
  00263	89 bb 9c 00 00
	00		 mov	 DWORD PTR [ebx+156], edi
  00269	89 bb 90 00 00
	00		 mov	 DWORD PTR [ebx+144], edi
  0026f	89 bb 94 00 00
	00		 mov	 DWORD PTR [ebx+148], edi
  00275	e8 00 00 00 00	 call	 _EncryptedIoQueueResumeFromHold@4

; 1429 : 
; 1430 : 		headerUpdateRequired = TRUE;

  0027a	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _headerUpdateRequired$[ebp], 1
$LN100@SetupThrea:

; 1431 : 	}
; 1432 : 
; 1433 : 	Dump ("Setup completed:  EncryptedAreaStart=%I64d (%I64d)  EncryptedAreaEnd=%I64d (%I64d)\n", Extension->Queue.EncryptedAreaStart / 1024 / 1024, Extension->Queue.EncryptedAreaStart, Extension->Queue.EncryptedAreaEnd / 1024 / 1024, Extension->Queue.EncryptedAreaEnd);
; 1434 : 
; 1435 : 	if (headerUpdateRequired)

  00281	83 7d e4 00	 cmp	 DWORD PTR _headerUpdateRequired$[ebp], 0
  00285	74 19		 je	 SHORT $LN101@SetupThrea

; 1436 : 	{
; 1437 : 		status = SaveDriveVolumeHeader (Extension);

  00287	8b fb		 mov	 edi, ebx
  00289	e8 00 00 00 00	 call	 _SaveDriveVolumeHeader@4

; 1438 : 
; 1439 : 		if (!NT_SUCCESS (status) && NT_SUCCESS (SetupResult))

  0028e	85 c0		 test	 eax, eax
  00290	7d 0e		 jge	 SHORT $LN101@SetupThrea
  00292	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SetupResult, 0
  00299	7c 05		 jl	 SHORT $LN101@SetupThrea

; 1440 : 			SetupResult = status;

  0029b	a3 00 00 00 00	 mov	 DWORD PTR _SetupResult, eax
$LN101@SetupThrea:

; 1441 : 	}
; 1442 : 
; 1443 : 	if (SetupRequest.SetupMode == SetupDecryption && Extension->ConfiguredEncryptedAreaEnd == -1 && Extension->DriveMounted)

  002a0	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _SetupRequest, 2
  002a7	0f 85 c9 03 00
	00		 jne	 $ret$28522
  002ad	8b 43 38	 mov	 eax, DWORD PTR [ebx+56]
  002b0	23 43 3c	 and	 eax, DWORD PTR [ebx+60]
  002b3	83 f8 ff	 cmp	 eax, -1
  002b6	0f 85 ba 03 00
	00		 jne	 $ret$28522
  002bc	83 bb f0 01 00
	00 00		 cmp	 DWORD PTR [ebx+496], 0
  002c3	0f 84 ad 03 00
	00		 je	 $ret$28522

; 1444 : 	{
; 1445 : 		while (!RootDeviceControlMutexAcquireNoWait() && !EncryptionSetupThreadAbortRequested)

  002c9	e9 81 03 00 00	 jmp	 $LN117@SetupThrea
$LN47@SetupThrea:

; 1258 : 				break;
; 1259 : 		}
; 1260 : 		else
; 1261 : 		{
; 1262 : 			if (offset.QuadPart - setupBlockSize < Extension->Queue.EncryptedAreaStart)

  002ce	33 d2		 xor	 edx, edx
  002d0	8b ce		 mov	 ecx, esi
  002d2	2b 4d f0	 sub	 ecx, DWORD PTR _setupBlockSize$[ebp]
  002d5	8b c7		 mov	 eax, edi
  002d7	1b c2		 sbb	 eax, edx
  002d9	8b 93 94 00 00
	00		 mov	 edx, DWORD PTR [ebx+148]
  002df	3b c2		 cmp	 eax, edx
  002e1	7f 17		 jg	 SHORT $LN106@SetupThrea
  002e3	7c 08		 jl	 SHORT $LN94@SetupThrea
  002e5	3b 8b 90 00 00
	00		 cmp	 ecx, DWORD PTR [ebx+144]
  002eb	73 0d		 jae	 SHORT $LN106@SetupThrea
$LN94@SetupThrea:

; 1263 : 				setupBlockSize = (ULONG) (offset.QuadPart - Extension->Queue.EncryptedAreaStart);

  002ed	8b c6		 mov	 eax, esi
  002ef	2b 83 90 00 00
	00		 sub	 eax, DWORD PTR [ebx+144]
  002f5	89 45 f0	 mov	 DWORD PTR _setupBlockSize$[ebp], eax
  002f8	eb 03		 jmp	 SHORT $LN43@SetupThrea
$LN106@SetupThrea:
  002fa	8b 45 f0	 mov	 eax, DWORD PTR _setupBlockSize$[ebp]
$LN43@SetupThrea:

; 1264 : 
; 1265 : 			offset.QuadPart -= setupBlockSize;

  002fd	2b f0		 sub	 esi, eax
  002ff	83 df 00	 sbb	 edi, 0
  00302	89 75 d4	 mov	 DWORD PTR _offset$[ebp], esi
  00305	89 7d d8	 mov	 DWORD PTR _offset$[ebp+4], edi

; 1266 : 
; 1267 : 			if (setupBlockSize == 0 || offset.QuadPart < Extension->Queue.EncryptedAreaStart)

  00308	85 c0		 test	 eax, eax
  0030a	0f 84 ce fe ff
	ff		 je	 $abort$28535
  00310	3b fa		 cmp	 edi, edx
  00312	0f 8c c6 fe ff
	ff		 jl	 $abort$28535
  00318	7f 25		 jg	 SHORT $LN95@SetupThrea
  0031a	3b b3 90 00 00
	00		 cmp	 esi, DWORD PTR [ebx+144]
  00320	0f 82 b8 fe ff
	ff		 jb	 $abort$28535

; 1268 : 				break;
; 1269 : 		}
; 1270 : 
; 1271 : 		while (!NT_SUCCESS (EncryptedIoQueueHoldWhenIdle (&Extension->Queue, 500)))

  00326	eb 17		 jmp	 SHORT $LN95@SetupThrea
$LL40@SetupThrea:

; 1272 : 		{
; 1273 : 			if (EncryptionSetupThreadAbortRequested)

  00328	a1 00 00 00 00	 mov	 eax, DWORD PTR _EncryptionSetupThreadAbortRequested
  0032d	85 c0		 test	 eax, eax
  0032f	0f 85 a9 fe ff
	ff		 jne	 $abort$28535

; 1274 : 				goto abort;
; 1275 : 
; 1276 : 			TransformWaitingForIdle = TRUE;

  00335	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _TransformWaitingForIdle, 1
$LN95@SetupThrea:

; 1268 : 				break;
; 1269 : 		}
; 1270 : 
; 1271 : 		while (!NT_SUCCESS (EncryptedIoQueueHoldWhenIdle (&Extension->Queue, 500)))

  0033f	6a 00		 push	 0
  00341	68 f4 01 00 00	 push	 500			; 000001f4H
  00346	8d 43 48	 lea	 eax, DWORD PTR [ebx+72]
  00349	50		 push	 eax
  0034a	e8 00 00 00 00	 call	 _EncryptedIoQueueHoldWhenIdle@12
  0034f	85 c0		 test	 eax, eax
  00351	7c d5		 jl	 SHORT $LL40@SetupThrea

; 1277 : 		}
; 1278 : 		TransformWaitingForIdle = FALSE;
; 1279 : 
; 1280 : 		status = TCReadDevice (BootDriveFilterExtension->LowerDeviceObject, buffer, offset, setupBlockSize);

  00353	ff 75 f0	 push	 DWORD PTR _setupBlockSize$[ebp]
  00356	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  0035b	83 25 00 00 00
	00 00		 and	 DWORD PTR _TransformWaitingForIdle, 0
  00362	57		 push	 edi
  00363	56		 push	 esi
  00364	ff 75 ec	 push	 DWORD PTR _buffer$[ebp]
  00367	ff 70 1c	 push	 DWORD PTR [eax+28]
  0036a	e8 00 00 00 00	 call	 _TCReadDevice@20

; 1281 : 		if (!NT_SUCCESS (status))

  0036f	85 c0		 test	 eax, eax
  00371	0f 8d 80 00 00
	00		 jge	 $LN31@SetupThrea

; 1282 : 		{
; 1283 : 			Dump ("TCReadDevice error %x  offset=%I64d\n", status, offset.QuadPart);
; 1284 : 
; 1285 : 			if (SetupRequest.ZeroUnreadableSectors && SetupRequest.SetupMode == SetupEncryption)

  00377	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR _SetupRequest+8, 0
  0037e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SetupRequest
  00384	74 3a		 je	 SHORT $LN36@SetupThrea
  00386	83 f9 01	 cmp	 ecx, 1
  00389	75 35		 jne	 SHORT $LN36@SetupThrea

; 1286 : 			{
; 1287 : 				// Zero unreadable sectors
; 1288 : 				uint64 zeroedSectorCount;
; 1289 : 
; 1290 : 				status = ZeroUnreadableSectors (BootDriveFilterExtension->LowerDeviceObject, offset, setupBlockSize, &zeroedSectorCount);

  0038b	8d 45 b4	 lea	 eax, DWORD PTR _zeroedSectorCount$28571[ebp]
  0038e	50		 push	 eax
  0038f	ff 75 f0	 push	 DWORD PTR _setupBlockSize$[ebp]
  00392	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  00397	57		 push	 edi
  00398	56		 push	 esi
  00399	ff 70 1c	 push	 DWORD PTR [eax+28]
  0039c	e8 00 00 00 00	 call	 _ZeroUnreadableSectors@20

; 1291 : 				if (!NT_SUCCESS (status))

  003a1	85 c0		 test	 eax, eax
  003a3	0f 8c 6b 02 00
	00		 jl	 $LN82@SetupThrea

; 1295 : 				}
; 1296 : 
; 1297 : 				// Retry read
; 1298 : 				status = TCReadDevice (BootDriveFilterExtension->LowerDeviceObject, buffer, offset, setupBlockSize);

  003a9	ff 75 f0	 push	 DWORD PTR _setupBlockSize$[ebp]
  003ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  003b1	57		 push	 edi
  003b2	56		 push	 esi
  003b3	ff 75 ec	 push	 DWORD PTR _buffer$[ebp]
  003b6	ff 70 1c	 push	 DWORD PTR [eax+28]
  003b9	e8 00 00 00 00	 call	 _TCReadDevice@20

; 1299 : 				if (!NT_SUCCESS (status))
; 1300 : 				{
; 1301 : 					SetupResult = status;
; 1302 : 					goto err;
; 1303 : 				}

  003be	eb 2f		 jmp	 SHORT $LN119@SetupThrea
$LN36@SetupThrea:

; 1304 : 			}
; 1305 : 			else if (SetupRequest.DiscardUnreadableEncryptedSectors && SetupRequest.SetupMode == SetupDecryption)

  003c0	83 3d 0c 00 00
	00 00		 cmp	 DWORD PTR _SetupRequest+12, 0
  003c7	0f 84 47 02 00
	00		 je	 $LN82@SetupThrea
  003cd	83 f9 02	 cmp	 ecx, 2
  003d0	0f 85 3e 02 00
	00		 jne	 $LN82@SetupThrea

; 1306 : 			{
; 1307 : 				// Discard unreadable encrypted sectors
; 1308 : 				uint64 badSectorCount;
; 1309 : 
; 1310 : 				status = ReadDeviceSkipUnreadableSectors (BootDriveFilterExtension->LowerDeviceObject, buffer, offset, setupBlockSize, &badSectorCount);

  003d6	8d 45 ac	 lea	 eax, DWORD PTR _badSectorCount$28578[ebp]
  003d9	50		 push	 eax
  003da	ff 75 f0	 push	 DWORD PTR _setupBlockSize$[ebp]
  003dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  003e2	57		 push	 edi
  003e3	56		 push	 esi
  003e4	ff 75 ec	 push	 DWORD PTR _buffer$[ebp]
  003e7	ff 70 1c	 push	 DWORD PTR [eax+28]
  003ea	e8 00 00 00 00	 call	 _ReadDeviceSkipUnreadableSectors@24
$LN119@SetupThrea:

; 1311 : 				if (!NT_SUCCESS (status))

  003ef	85 c0		 test	 eax, eax
  003f1	0f 8c 1d 02 00
	00		 jl	 $LN82@SetupThrea
$LN31@SetupThrea:

; 1312 : 				{
; 1313 : 					SetupResult = status;
; 1314 : 					goto err;
; 1315 : 				}
; 1316 : 			}
; 1317 : 			else
; 1318 : 			{
; 1319 : 				SetupResult = status;
; 1320 : 				goto err;
; 1321 : 			}
; 1322 : 		}
; 1323 : 
; 1324 : 		dataUnit.Value = offset.QuadPart / ENCRYPTION_DATA_UNIT_SIZE;

  003f7	6a 00		 push	 0
  003f9	68 00 02 00 00	 push	 512			; 00000200H
  003fe	57		 push	 edi
  003ff	56		 push	 esi
  00400	e8 00 00 00 00	 call	 __alldiv
  00405	89 45 c4	 mov	 DWORD PTR _dataUnit$[ebp], eax

; 1325 : 
; 1326 : 		if (SetupRequest.SetupMode == SetupEncryption)
; 1327 : 		{
; 1328 : 			EncryptDataUnits (buffer, &dataUnit, setupBlockSize / ENCRYPTION_DATA_UNIT_SIZE, Extension->Queue.CryptoInfo);

  00408	8b 45 f0	 mov	 eax, DWORD PTR _setupBlockSize$[ebp]
  0040b	c1 e8 09	 shr	 eax, 9
  0040e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _SetupRequest, 1
  00415	89 55 c8	 mov	 DWORD PTR _dataUnit$[ebp+4], edx
  00418	0f 85 df 00 00
	00		 jne	 $LN29@SetupThrea
  0041e	ff 73 70	 push	 DWORD PTR [ebx+112]
  00421	89 45 dc	 mov	 DWORD PTR tv511[ebp], eax
  00424	50		 push	 eax
  00425	8d 45 c4	 lea	 eax, DWORD PTR _dataUnit$[ebp]
  00428	50		 push	 eax
  00429	ff 75 ec	 push	 DWORD PTR _buffer$[ebp]
  0042c	e8 00 00 00 00	 call	 _EncryptDataUnits@16

; 1329 : 
; 1330 : 			if (SetupRequest.WipeAlgorithm != TC_WIPE_NONE)

  00431	a1 04 00 00 00	 mov	 eax, DWORD PTR _SetupRequest+4
  00436	85 c0		 test	 eax, eax
  00438	0f 84 cf 00 00
	00		 je	 $LN19@SetupThrea

; 1331 : 			{
; 1332 : 				byte wipePass;
; 1333 : 				for (wipePass = 1; wipePass <= GetWipePassCount (SetupRequest.WipeAlgorithm); ++wipePass)

  0043e	50		 push	 eax
  0043f	c6 45 ff 01	 mov	 BYTE PTR _wipePass$28584[ebp], 1
  00443	e8 00 00 00 00	 call	 _GetWipePassCount@4
  00448	83 f8 01	 cmp	 eax, 1
  0044b	0f 8c 9b 00 00
	00		 jl	 $LN25@SetupThrea
  00451	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR tv512[ebp], 1
$LL27@SetupThrea:

; 1334 : 				{
; 1335 : 					if (!WipeBuffer (SetupRequest.WipeAlgorithm, wipeRandChars, wipePass, wipeBuffer, setupBlockSize))

  00458	ff 75 f0	 push	 DWORD PTR _setupBlockSize$[ebp]
  0045b	8d 45 f4	 lea	 eax, DWORD PTR _wipeRandChars$[ebp]
  0045e	ff 75 e8	 push	 DWORD PTR _wipeBuffer$[ebp]
  00461	ff 75 e0	 push	 DWORD PTR tv512[ebp]
  00464	50		 push	 eax
  00465	ff 35 04 00 00
	00		 push	 DWORD PTR _SetupRequest+4
  0046b	e8 00 00 00 00	 call	 _WipeBuffer@20
  00470	85 c0		 test	 eax, eax
  00472	75 3a		 jne	 SHORT $LN24@SetupThrea

; 1336 : 					{
; 1337 : 						ULONG i;
; 1338 : 						for (i = 0; i < setupBlockSize; ++i)

  00474	8b 7d f0	 mov	 edi, DWORD PTR _setupBlockSize$[ebp]
  00477	85 ff		 test	 edi, edi
  00479	76 14		 jbe	 SHORT $LN21@SetupThrea
  0047b	8b 45 e8	 mov	 eax, DWORD PTR _wipeBuffer$[ebp]
  0047e	8b 75 ec	 mov	 esi, DWORD PTR _buffer$[ebp]
  00481	2b f0		 sub	 esi, eax
$LL23@SetupThrea:

; 1339 : 						{
; 1340 : 							wipeBuffer[i] = buffer[i] + wipePass;

  00483	8a 0c 06	 mov	 cl, BYTE PTR [esi+eax]
  00486	02 4d ff	 add	 cl, BYTE PTR _wipePass$28584[ebp]
  00489	88 08		 mov	 BYTE PTR [eax], cl
  0048b	40		 inc	 eax
  0048c	4f		 dec	 edi
  0048d	75 f4		 jne	 SHORT $LL23@SetupThrea
$LN21@SetupThrea:

; 1341 : 						}
; 1342 : 
; 1343 : 						EncryptDataUnits (wipeBuffer, &dataUnit, setupBlockSize / ENCRYPTION_DATA_UNIT_SIZE, Extension->Queue.CryptoInfo);

  0048f	ff 73 70	 push	 DWORD PTR [ebx+112]
  00492	8b 75 e8	 mov	 esi, DWORD PTR _wipeBuffer$[ebp]
  00495	ff 75 dc	 push	 DWORD PTR tv511[ebp]
  00498	8d 45 c4	 lea	 eax, DWORD PTR _dataUnit$[ebp]
  0049b	50		 push	 eax
  0049c	56		 push	 esi
  0049d	e8 00 00 00 00	 call	 _EncryptDataUnits@16

; 1344 : 						memcpy (wipeRandCharsUpdate, wipeBuffer, sizeof (wipeRandCharsUpdate)); 

  004a2	8d 7d f8	 lea	 edi, DWORD PTR _wipeRandCharsUpdate$[ebp]
  004a5	66 a5		 movsw
  004a7	a4		 movsb
  004a8	8b 75 d4	 mov	 esi, DWORD PTR _offset$[ebp]
  004ab	8b 7d d8	 mov	 edi, DWORD PTR _offset$[ebp+4]
$LN24@SetupThrea:

; 1345 : 					}
; 1346 : 
; 1347 : 					status = TCWriteDevice (BootDriveFilterExtension->LowerDeviceObject, wipeBuffer, offset, setupBlockSize);

  004ae	ff 75 f0	 push	 DWORD PTR _setupBlockSize$[ebp]
  004b1	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  004b6	57		 push	 edi
  004b7	56		 push	 esi
  004b8	ff 75 e8	 push	 DWORD PTR _wipeBuffer$[ebp]
  004bb	ff 70 1c	 push	 DWORD PTR [eax+28]
  004be	e8 00 00 00 00	 call	 _TCWriteDevice@20
  004c3	89 45 e0	 mov	 DWORD PTR _status$[ebp], eax

; 1348 : 					if (!NT_SUCCESS (status))

  004c6	85 c0		 test	 eax, eax
  004c8	0f 8c 18 01 00
	00		 jl	 $LN79@SetupThrea
  004ce	fe 45 ff	 inc	 BYTE PTR _wipePass$28584[ebp]
  004d1	0f b6 45 ff	 movzx	 eax, BYTE PTR _wipePass$28584[ebp]
  004d5	ff 35 04 00 00
	00		 push	 DWORD PTR _SetupRequest+4
  004db	89 45 e0	 mov	 DWORD PTR tv512[ebp], eax
  004de	e8 00 00 00 00	 call	 _GetWipePassCount@4
  004e3	39 45 e0	 cmp	 DWORD PTR tv512[ebp], eax
  004e6	0f 8e 6c ff ff
	ff		 jle	 $LL27@SetupThrea
$LN25@SetupThrea:

; 1355 : 						goto err;
; 1356 : 					}
; 1357 : 				}
; 1358 : 
; 1359 : 				memcpy (wipeRandChars, wipeRandCharsUpdate, sizeof (wipeRandCharsUpdate)); 

  004ec	8d 75 f8	 lea	 esi, DWORD PTR _wipeRandCharsUpdate$[ebp]
  004ef	8d 7d f4	 lea	 edi, DWORD PTR _wipeRandChars$[ebp]
  004f2	66 a5		 movsw
  004f4	a4		 movsb

; 1360 : 			}
; 1361 : 		}
; 1362 : 		else

  004f5	8b 75 d4	 mov	 esi, DWORD PTR _offset$[ebp]
  004f8	8b 7d d8	 mov	 edi, DWORD PTR _offset$[ebp+4]
  004fb	eb 10		 jmp	 SHORT $LN19@SetupThrea
$LN29@SetupThrea:

; 1363 : 		{
; 1364 : 			DecryptDataUnits (buffer, &dataUnit, setupBlockSize / ENCRYPTION_DATA_UNIT_SIZE, Extension->Queue.CryptoInfo);

  004fd	ff 73 70	 push	 DWORD PTR [ebx+112]
  00500	50		 push	 eax
  00501	8d 45 c4	 lea	 eax, DWORD PTR _dataUnit$[ebp]
  00504	50		 push	 eax
  00505	ff 75 ec	 push	 DWORD PTR _buffer$[ebp]
  00508	e8 00 00 00 00	 call	 _DecryptDataUnits@16
$LN19@SetupThrea:

; 1365 : 		}
; 1366 : 
; 1367 : 		status = TCWriteDevice (BootDriveFilterExtension->LowerDeviceObject, buffer, offset, setupBlockSize);

  0050d	ff 75 f0	 push	 DWORD PTR _setupBlockSize$[ebp]
  00510	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  00515	57		 push	 edi
  00516	56		 push	 esi
  00517	ff 75 ec	 push	 DWORD PTR _buffer$[ebp]
  0051a	ff 70 1c	 push	 DWORD PTR [eax+28]
  0051d	e8 00 00 00 00	 call	 _TCWriteDevice@20
  00522	89 45 e0	 mov	 DWORD PTR _status$[ebp], eax

; 1368 : 		if (!NT_SUCCESS (status))

  00525	85 c0		 test	 eax, eax
  00527	0f 8c f1 00 00
	00		 jl	 $LN85@SetupThrea

; 1382 : 		}
; 1383 : 
; 1384 : 		if (SetupRequest.SetupMode == SetupEncryption)

  0052d	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _SetupRequest, 1
  00534	75 0c		 jne	 SHORT $LN15@SetupThrea

; 1385 : 			offset.QuadPart += setupBlockSize;

  00536	03 75 f0	 add	 esi, DWORD PTR _setupBlockSize$[ebp]
  00539	83 d7 00	 adc	 edi, 0
  0053c	89 75 d4	 mov	 DWORD PTR _offset$[ebp], esi
  0053f	89 7d d8	 mov	 DWORD PTR _offset$[ebp+4], edi
$LN15@SetupThrea:

; 1386 : 
; 1387 : 		Extension->Queue.EncryptedAreaEndUpdatePending = TRUE;

  00542	33 c9		 xor	 ecx, ecx
  00544	41		 inc	 ecx
  00545	8d 83 a0 00 00
	00		 lea	 eax, DWORD PTR [ebx+160]
  0054b	89 08		 mov	 DWORD PTR [eax], ecx

; 1388 : 		Extension->Queue.EncryptedAreaEnd = offset.QuadPart - 1;

  0054d	8b d6		 mov	 edx, esi
  0054f	2b d1		 sub	 edx, ecx
  00551	8b cf		 mov	 ecx, edi
  00553	83 d9 00	 sbb	 ecx, 0
  00556	89 93 98 00 00
	00		 mov	 DWORD PTR [ebx+152], edx
  0055c	89 8b 9c 00 00
	00		 mov	 DWORD PTR [ebx+156], ecx

; 1389 : 		Extension->Queue.EncryptedAreaEndUpdatePending = FALSE;

  00562	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1390 : 
; 1391 : 		headerUpdateRequired = TRUE;
; 1392 : 
; 1393 : 		EncryptedIoQueueResumeFromHold (&Extension->Queue);

  00568	8d 43 48	 lea	 eax, DWORD PTR [ebx+72]
  0056b	50		 push	 eax
  0056c	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _headerUpdateRequired$[ebp], 1
  00573	e8 00 00 00 00	 call	 _EncryptedIoQueueResumeFromHold@4

; 1394 : 
; 1395 : 		KeAcquireSpinLock (&SetupStatusSpinLock, &irql);

  00578	b9 00 00 00 00	 mov	 ecx, OFFSET _SetupStatusSpinLock
  0057d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfAcquireSpinLock@4

; 1396 : 		SetupStatusEncryptedAreaEnd = Extension->Queue.EncryptedAreaEnd;

  00583	8b 8b 98 00 00
	00		 mov	 ecx, DWORD PTR [ebx+152]
  00589	89 0d 00 00 00
	00		 mov	 DWORD PTR _SetupStatusEncryptedAreaEnd, ecx
  0058f	8b 8b 9c 00 00
	00		 mov	 ecx, DWORD PTR [ebx+156]
  00595	89 0d 04 00 00
	00		 mov	 DWORD PTR _SetupStatusEncryptedAreaEnd+4, ecx

; 1397 : 		KeReleaseSpinLock (&SetupStatusSpinLock, irql);

  0059b	8a d0		 mov	 dl, al
  0059d	b9 00 00 00 00	 mov	 ecx, OFFSET _SetupStatusSpinLock
  005a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfReleaseSpinLock@8

; 1398 : 
; 1399 : 		// Update volume header
; 1400 : 		bytesWrittenSinceHeaderUpdate += setupBlockSize;

  005a8	8b 45 f0	 mov	 eax, DWORD PTR _setupBlockSize$[ebp]
  005ab	01 45 cc	 add	 DWORD PTR _bytesWrittenSinceHeaderUpdate$[ebp], eax
  005ae	83 55 d0 00	 adc	 DWORD PTR _bytesWrittenSinceHeaderUpdate$[ebp+4], 0

; 1401 : 		if (bytesWrittenSinceHeaderUpdate >= TC_ENCRYPTION_SETUP_HEADER_UPDATE_THRESHOLD)

  005b2	78 20		 js	 SHORT $LN14@SetupThrea
  005b4	7f 09		 jg	 SHORT $LN96@SetupThrea
  005b6	81 7d cc 00 00
	00 04		 cmp	 DWORD PTR _bytesWrittenSinceHeaderUpdate$[ebp], 67108864 ; 04000000H
  005bd	72 15		 jb	 SHORT $LN14@SetupThrea
$LN96@SetupThrea:

; 1402 : 		{
; 1403 : 			status = SaveDriveVolumeHeader (Extension);

  005bf	8b fb		 mov	 edi, ebx
  005c1	e8 00 00 00 00	 call	 _SaveDriveVolumeHeader@4

; 1404 : 			ASSERT (NT_SUCCESS (status));
; 1405 : 
; 1406 : 			headerUpdateRequired = FALSE;
; 1407 : 			bytesWrittenSinceHeaderUpdate = 0;

  005c6	8b 7d d8	 mov	 edi, DWORD PTR _offset$[ebp+4]
  005c9	33 c0		 xor	 eax, eax
  005cb	89 45 e4	 mov	 DWORD PTR _headerUpdateRequired$[ebp], eax
  005ce	89 45 cc	 mov	 DWORD PTR _bytesWrittenSinceHeaderUpdate$[ebp], eax
  005d1	89 45 d0	 mov	 DWORD PTR _bytesWrittenSinceHeaderUpdate$[ebp+4], eax
$LN14@SetupThrea:
  005d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _EncryptionSetupThreadAbortRequested
  005d9	85 c0		 test	 eax, eax
  005db	0f 84 b0 fb ff
	ff		 je	 $LL49@SetupThrea

; 1368 : 		if (!NT_SUCCESS (status))

  005e1	e9 f8 fb ff ff	 jmp	 $abort$28535
$LN79@SetupThrea:

; 1349 : 					{
; 1350 : 						// Undo failed write operation
; 1351 : 						DecryptDataUnits (buffer, &dataUnit, setupBlockSize / ENCRYPTION_DATA_UNIT_SIZE, Extension->Queue.CryptoInfo);

  005e6	ff 73 70	 push	 DWORD PTR [ebx+112]
  005e9	8b 45 f0	 mov	 eax, DWORD PTR _setupBlockSize$[ebp]
  005ec	c1 e8 09	 shr	 eax, 9
  005ef	50		 push	 eax
  005f0	8d 45 c4	 lea	 eax, DWORD PTR _dataUnit$[ebp]
  005f3	50		 push	 eax
  005f4	ff 75 ec	 push	 DWORD PTR _buffer$[ebp]
$LN120@SetupThrea:
  005f7	e8 00 00 00 00	 call	 _DecryptDataUnits@16
$LN16@SetupThrea:

; 1352 : 						TCWriteDevice (BootDriveFilterExtension->LowerDeviceObject, buffer, offset, setupBlockSize);

  005fc	ff 75 f0	 push	 DWORD PTR _setupBlockSize$[ebp]
  005ff	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  00604	57		 push	 edi
  00605	56		 push	 esi
  00606	ff 75 ec	 push	 DWORD PTR _buffer$[ebp]
  00609	ff 70 1c	 push	 DWORD PTR [eax+28]
  0060c	e8 00 00 00 00	 call	 _TCWriteDevice@20

; 1353 : 
; 1354 : 						SetupResult = status;

  00611	8b 45 e0	 mov	 eax, DWORD PTR _status$[ebp]
$LN82@SetupThrea:

; 1292 : 				{
; 1293 : 					SetupResult = status;

  00614	a3 00 00 00 00	 mov	 DWORD PTR _SetupResult, eax

; 1294 : 					goto err;

  00619	e9 c7 fb ff ff	 jmp	 $err$28545
$LN85@SetupThrea:

; 1369 : 		{
; 1370 : 			Dump ("TCWriteDevice error %x\n", status);
; 1371 : 
; 1372 : 			// Undo failed write operation
; 1373 : 			if (SetupRequest.SetupMode == SetupEncryption)
; 1374 : 				DecryptDataUnits (buffer, &dataUnit, setupBlockSize / ENCRYPTION_DATA_UNIT_SIZE, Extension->Queue.CryptoInfo);

  0061e	ff 73 70	 push	 DWORD PTR [ebx+112]
  00621	8b 45 f0	 mov	 eax, DWORD PTR _setupBlockSize$[ebp]
  00624	c1 e8 09	 shr	 eax, 9
  00627	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _SetupRequest, 1
  0062e	50		 push	 eax
  0062f	8d 45 c4	 lea	 eax, DWORD PTR _dataUnit$[ebp]
  00632	50		 push	 eax
  00633	ff 75 ec	 push	 DWORD PTR _buffer$[ebp]

; 1375 : 			else

  00636	74 bf		 je	 SHORT $LN120@SetupThrea

; 1376 : 				EncryptDataUnits (buffer, &dataUnit, setupBlockSize / ENCRYPTION_DATA_UNIT_SIZE, Extension->Queue.CryptoInfo);

  00638	e8 00 00 00 00	 call	 _EncryptDataUnits@16

; 1377 : 
; 1378 : 			TCWriteDevice (BootDriveFilterExtension->LowerDeviceObject, buffer, offset, setupBlockSize);
; 1379 : 
; 1380 : 			SetupResult = status;
; 1381 : 			goto err;

  0063d	eb bd		 jmp	 SHORT $LN16@SetupThrea
$LL5@SetupThrea:

; 1444 : 	{
; 1445 : 		while (!RootDeviceControlMutexAcquireNoWait() && !EncryptionSetupThreadAbortRequested)

  0063f	a1 00 00 00 00	 mov	 eax, DWORD PTR _EncryptionSetupThreadAbortRequested
  00644	85 c0		 test	 eax, eax
  00646	75 10		 jne	 SHORT $LN4@SetupThrea

; 1446 : 		{
; 1447 : 			TCSleep (10);

  00648	6a 0a		 push	 10			; 0000000aH
  0064a	e8 00 00 00 00	 call	 _TCSleep@4
$LN117@SetupThrea:
  0064f	e8 00 00 00 00	 call	 _RootDeviceControlMutexAcquireNoWait@0
  00654	85 c0		 test	 eax, eax
  00656	74 e7		 je	 SHORT $LL5@SetupThrea
$LN4@SetupThrea:

; 1448 : 		}
; 1449 : 
; 1450 : 		// Disable hibernation (resume would fail due to a change in the system memory map)
; 1451 : 		HibernationEnabled = FALSE;

  00658	83 25 00 00 00
	00 00		 and	 DWORD PTR _HibernationEnabled, 0

; 1452 : 
; 1453 : 		DismountDrive (Extension, FALSE);

  0065f	6a 00		 push	 0
  00661	8b f3		 mov	 esi, ebx
  00663	e8 00 00 00 00	 call	 _DismountDrive@8

; 1454 : 
; 1455 : 		if (!EncryptionSetupThreadAbortRequested)

  00668	a1 00 00 00 00	 mov	 eax, DWORD PTR _EncryptionSetupThreadAbortRequested
  0066d	85 c0		 test	 eax, eax
  0066f	75 05		 jne	 SHORT $ret$28522

; 1456 : 			RootDeviceControlMutexRelease();

  00671	e8 00 00 00 00	 call	 _RootDeviceControlMutexRelease@0
$ret$28522:

; 1457 : 	}
; 1458 : 
; 1459 : ret:
; 1460 : 	if (buffer)

  00676	83 7d ec 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  0067a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__ExFreePoolWithTag@8
  00680	5f		 pop	 edi
  00681	74 0a		 je	 SHORT $LN105@SetupThrea

; 1461 : 		TCfree (buffer);

  00683	68 54 43 4d 4d	 push	 1296909140		; 4d4d4354H
  00688	ff 75 ec	 push	 DWORD PTR _buffer$[ebp]
  0068b	ff d6		 call	 esi
$LN105@SetupThrea:

; 1462 : 	if (wipeBuffer)

  0068d	83 7d e8 00	 cmp	 DWORD PTR _wipeBuffer$[ebp], 0
  00691	74 0a		 je	 SHORT $LN1@SetupThrea

; 1463 : 		TCfree (wipeBuffer);

  00693	68 54 43 4d 4d	 push	 1296909140		; 4d4d4354H
  00698	ff 75 e8	 push	 DWORD PTR _wipeBuffer$[ebp]
  0069b	ff d6		 call	 esi
$LN1@SetupThrea:

; 1464 : 
; 1465 : 	SetupInProgress = FALSE;
; 1466 : 	PsTerminateSystemThread (SetupResult);

  0069d	ff 35 00 00 00
	00		 push	 DWORD PTR _SetupResult
  006a3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _SetupInProgress, 0
  006ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PsTerminateSystemThread@4
  006b3	5e		 pop	 esi
  006b4	5b		 pop	 ebx

; 1467 : }

  006b5	c9		 leave
  006b6	c2 04 00	 ret	 4
_SetupThreadProc@4 ENDP
_TEXT	ENDS
PUBLIC	_GetBootDriveVolumeProperties@8
; Function compile flags: /Ogsp
;	COMDAT _GetBootDriveVolumeProperties@8
_TEXT	SEGMENT
_irp$ = 8						; size = 4
_irpSp$ = 12						; size = 4
_GetBootDriveVolumeProperties@8 PROC			; COMDAT

; 1503 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	53		 push	 ebx

; 1504 : 	if (ValidateIOBufferSize (irp, sizeof (VOLUME_PROPERTIES_STRUCT), ValidateOutput))

  00006	8b 5d 08	 mov	 ebx, DWORD PTR _irp$[ebp]
  00009	6a 01		 push	 1
  0000b	68 54 02 00 00	 push	 596			; 00000254H
  00010	53		 push	 ebx
  00011	e8 00 00 00 00	 call	 _ValidateIOBufferSize@12
  00016	85 c0		 test	 eax, eax
  00018	0f 84 fe 00 00
	00		 je	 $LN1@GetBootDri
  0001e	56		 push	 esi

; 1505 : 	{
; 1506 : 		DriveFilterExtension *Extension = BootDriveFilterExtension;

  0001f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _BootDriveFilterExtension
  00025	57		 push	 edi

; 1507 : 		VOLUME_PROPERTIES_STRUCT *prop = (VOLUME_PROPERTIES_STRUCT *) irp->AssociatedIrp.SystemBuffer;

  00026	8b 7b 0c	 mov	 edi, DWORD PTR [ebx+12]

; 1508 : 		memset (prop, 0, sizeof (*prop));

  00029	68 54 02 00 00	 push	 596			; 00000254H
  0002e	6a 00		 push	 0
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 _memset

; 1509 : 
; 1510 : 		if (!BootDriveFound || !Extension || !Extension->DriveMounted)

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFound
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003e	85 c0		 test	 eax, eax
  00040	0f 84 c8 00 00
	00		 je	 $LN7@GetBootDri
  00046	33 c0		 xor	 eax, eax
  00048	3b f0		 cmp	 esi, eax
  0004a	0f 84 c0 00 00
	00		 je	 $LN2@GetBootDri
  00050	39 86 f0 01 00
	00		 cmp	 DWORD PTR [esi+496], eax
  00056	0f 84 b4 00 00
	00		 je	 $LN2@GetBootDri

; 1514 : 		}
; 1515 : 		else
; 1516 : 		{
; 1517 : 			prop->hiddenVolume = Extension->Queue.CryptoInfo->hiddenVolume;

  0005c	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  0005f	8b 89 a0 29 00
	00		 mov	 ecx, DWORD PTR [ecx+10656]
  00065	89 8f 28 02 00
	00		 mov	 DWORD PTR [edi+552], ecx

; 1518 : 			prop->diskLength = Extension->ConfiguredEncryptedAreaEnd + 1 - Extension->ConfiguredEncryptedAreaStart;

  0006b	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0006e	2b 4e 30	 sub	 ecx, DWORD PTR [esi+48]
  00071	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]
  00074	1b 56 34	 sbb	 edx, DWORD PTR [esi+52]
  00077	83 c1 01	 add	 ecx, 1
  0007a	89 8f 10 02 00
	00		 mov	 DWORD PTR [edi+528], ecx
  00080	13 d0		 adc	 edx, eax
  00082	89 97 14 02 00
	00		 mov	 DWORD PTR [edi+532], edx

; 1519 : 			prop->ea = Extension->Queue.CryptoInfo->ea;

  00088	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  0008b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0008d	89 8f 18 02 00
	00		 mov	 DWORD PTR [edi+536], ecx

; 1520 : 			prop->mode = Extension->Queue.CryptoInfo->mode;

  00093	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  00096	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00099	89 8f 1c 02 00
	00		 mov	 DWORD PTR [edi+540], ecx

; 1521 : 			prop->pkcs5 = Extension->Queue.CryptoInfo->pkcs5;

  0009f	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  000a2	8b 89 ec 43 00
	00		 mov	 ecx, DWORD PTR [ecx+17388]
  000a8	89 8f 20 02 00
	00		 mov	 DWORD PTR [edi+544], ecx

; 1522 : 			prop->pkcs5Iterations = Extension->Queue.CryptoInfo->noIterations;

  000ae	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  000b1	8b 89 e8 43 00
	00		 mov	 ecx, DWORD PTR [ecx+17384]
  000b7	89 8f 24 02 00
	00		 mov	 DWORD PTR [edi+548], ecx

; 1523 : #if 0
; 1524 : 			prop->volumeCreationTime = Extension->Queue.CryptoInfo->volume_creation_time;
; 1525 : 			prop->headerCreationTime = Extension->Queue.CryptoInfo->header_creation_time;
; 1526 : #endif
; 1527 : 			prop->volFormatVersion = Extension->Queue.CryptoInfo->LegacyVolume ? TC_VOLUME_FORMAT_VERSION_PRE_6_0 : TC_VOLUME_FORMAT_VERSION;

  000bd	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  000c0	33 d2		 xor	 edx, edx
  000c2	39 81 3c 44 00
	00		 cmp	 DWORD PTR [ecx+17468], eax
  000c8	0f 94 c2	 sete	 dl
  000cb	42		 inc	 edx
  000cc	89 97 50 02 00
	00		 mov	 DWORD PTR [edi+592], edx

; 1528 : 
; 1529 : 			prop->totalBytesRead = Extension->Queue.TotalBytesRead;

  000d2	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  000d8	89 8f 3c 02 00
	00		 mov	 DWORD PTR [edi+572], ecx
  000de	8b 8e b4 01 00
	00		 mov	 ecx, DWORD PTR [esi+436]
  000e4	89 8f 40 02 00
	00		 mov	 DWORD PTR [edi+576], ecx

; 1530 : 			prop->totalBytesWritten = Extension->Queue.TotalBytesWritten;

  000ea	8b 8e b8 01 00
	00		 mov	 ecx, DWORD PTR [esi+440]
  000f0	89 8f 44 02 00
	00		 mov	 DWORD PTR [edi+580], ecx
  000f6	8b 8e bc 01 00
	00		 mov	 ecx, DWORD PTR [esi+444]
  000fc	89 8f 48 02 00
	00		 mov	 DWORD PTR [edi+584], ecx

; 1531 : 
; 1532 : 			irp->IoStatus.Information = sizeof (VOLUME_PROPERTIES_STRUCT);

  00102	c7 43 1c 54 02
	00 00		 mov	 DWORD PTR [ebx+28], 596	; 00000254H

; 1533 : 			irp->IoStatus.Status = STATUS_SUCCESS;

  00109	89 43 18	 mov	 DWORD PTR [ebx+24], eax
  0010c	eb 0c		 jmp	 SHORT $LN8@GetBootDri
$LN7@GetBootDri:
  0010e	33 c0		 xor	 eax, eax
$LN2@GetBootDri:

; 1511 : 		{
; 1512 : 			irp->IoStatus.Status = STATUS_INVALID_PARAMETER;

  00110	c7 43 18 0d 00
	00 c0		 mov	 DWORD PTR [ebx+24], -1073741811 ; c000000dH

; 1513 : 			irp->IoStatus.Information = 0;

  00117	89 43 1c	 mov	 DWORD PTR [ebx+28], eax
$LN8@GetBootDri:
  0011a	5f		 pop	 edi
  0011b	5e		 pop	 esi
$LN1@GetBootDri:
  0011c	5b		 pop	 ebx

; 1534 : 		}
; 1535 : 	}
; 1536 : }

  0011d	5d		 pop	 ebp
  0011e	c2 08 00	 ret	 8
_GetBootDriveVolumeProperties@8 ENDP
_TEXT	ENDS
PUBLIC	_GetBootEncryptionStatus@8
EXTRN	_HiddenSysLeakProtectionCount:DWORD
_BSS	SEGMENT
_BootDriveLength DQ 01H DUP (?)
; Function compile flags: /Ogsp
_BSS	ENDS
;	COMDAT _GetBootEncryptionStatus@8
_TEXT	SEGMENT
_irp$ = 8						; size = 4
_irpSp$ = 12						; size = 4
_GetBootEncryptionStatus@8 PROC				; COMDAT

; 1540 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	53		 push	 ebx

; 1541 : 	/* IMPORTANT: Do NOT add any potentially time-consuming operations to this function. */
; 1542 : 
; 1543 : 	if (ValidateIOBufferSize (irp, sizeof (BootEncryptionStatus), ValidateOutput))

  00006	8b 5d 08	 mov	 ebx, DWORD PTR _irp$[ebp]
  00009	6a 01		 push	 1
  0000b	6a 5e		 push	 94			; 0000005eH
  0000d	53		 push	 ebx
  0000e	e8 00 00 00 00	 call	 _ValidateIOBufferSize@12
  00013	85 c0		 test	 eax, eax
  00015	0f 84 66 01 00
	00		 je	 $LN8@GetBootEnc
  0001b	56		 push	 esi

; 1544 : 	{
; 1545 : 		DriveFilterExtension *Extension = BootDriveFilterExtension;
; 1546 : 		BootEncryptionStatus *bootEncStatus = (BootEncryptionStatus *) irp->AssociatedIrp.SystemBuffer;

  0001c	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]
  0001f	57		 push	 edi
  00020	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _BootDriveFilterExtension

; 1547 : 		memset (bootEncStatus, 0, sizeof (*bootEncStatus));

  00026	6a 5e		 push	 94			; 0000005eH
  00028	6a 00		 push	 0
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 _memset

; 1548 : 
; 1549 : 		if (BootArgsValid)

  00030	33 c9		 xor	 ecx, ecx
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	39 0d 00 00 00
	00		 cmp	 DWORD PTR _BootArgsValid, ecx
  0003b	74 0a		 je	 SHORT $LN7@GetBootEnc

; 1550 : 			bootEncStatus->BootLoaderVersion = BootArgs.BootLoaderVersion;

  0003d	66 a1 08 00 00
	00		 mov	 ax, WORD PTR _BootArgs+8
  00043	66 89 46 04	 mov	 WORD PTR [esi+4], ax
$LN7@GetBootEnc:

; 1551 : 
; 1552 : 		bootEncStatus->DeviceFilterActive = DeviceFilterActive;

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR _DeviceFilterActive
  0004c	89 06		 mov	 DWORD PTR [esi], eax

; 1553 : 		bootEncStatus->SetupInProgress = SetupInProgress;

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR _SetupInProgress
  00053	89 46 3e	 mov	 DWORD PTR [esi+62], eax

; 1554 : 		bootEncStatus->SetupMode = SetupRequest.SetupMode;

  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR _SetupRequest
  0005b	89 46 42	 mov	 DWORD PTR [esi+66], eax

; 1555 : 		bootEncStatus->TransformWaitingForIdle = TransformWaitingForIdle;

  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR _TransformWaitingForIdle
  00063	89 46 46	 mov	 DWORD PTR [esi+70], eax

; 1556 : 
; 1557 : 		if (!BootDriveFound || !Extension || !Extension->DriveMounted)

  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFound
  0006b	85 c0		 test	 eax, eax
  0006d	0f 84 f9 00 00
	00		 je	 $LN5@GetBootEnc
  00073	3b f9		 cmp	 edi, ecx
  00075	0f 84 f1 00 00
	00		 je	 $LN5@GetBootEnc
  0007b	8b 87 f0 01 00
	00		 mov	 eax, DWORD PTR [edi+496]
  00081	3b c1		 cmp	 eax, ecx
  00083	0f 84 e3 00 00
	00		 je	 $LN5@GetBootEnc

; 1562 : 		}
; 1563 : 		else
; 1564 : 		{
; 1565 : 			bootEncStatus->DriveMounted = Extension->DriveMounted;

  00089	89 46 06	 mov	 DWORD PTR [esi+6], eax

; 1566 : 			bootEncStatus->VolumeHeaderPresent = Extension->VolumeHeaderPresent;

  0008c	8b 87 ec 01 00
	00		 mov	 eax, DWORD PTR [edi+492]
  00092	89 46 0a	 mov	 DWORD PTR [esi+10], eax

; 1567 : 			bootEncStatus->DriveEncrypted = Extension->Queue.EncryptedAreaStart != -1;

  00095	8b 87 90 00 00
	00		 mov	 eax, DWORD PTR [edi+144]
  0009b	23 87 94 00 00
	00		 and	 eax, DWORD PTR [edi+148]
  000a1	83 f8 ff	 cmp	 eax, -1
  000a4	74 05		 je	 SHORT $LN11@GetBootEnc
  000a6	33 c0		 xor	 eax, eax
  000a8	40		 inc	 eax
  000a9	eb 02		 jmp	 SHORT $LN12@GetBootEnc
$LN11@GetBootEnc:
  000ab	33 c0		 xor	 eax, eax
$LN12@GetBootEnc:
  000ad	89 46 0e	 mov	 DWORD PTR [esi+14], eax

; 1568 : 			bootEncStatus->BootDriveLength = BootDriveLength;

  000b0	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveLength
  000b5	89 46 12	 mov	 DWORD PTR [esi+18], eax
  000b8	a1 04 00 00 00	 mov	 eax, DWORD PTR _BootDriveLength+4
  000bd	89 46 16	 mov	 DWORD PTR [esi+22], eax

; 1569 : 
; 1570 : 			bootEncStatus->ConfiguredEncryptedAreaStart = Extension->ConfiguredEncryptedAreaStart;

  000c0	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  000c3	89 46 1a	 mov	 DWORD PTR [esi+26], eax
  000c6	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  000c9	89 46 1e	 mov	 DWORD PTR [esi+30], eax

; 1571 : 			bootEncStatus->ConfiguredEncryptedAreaEnd = Extension->ConfiguredEncryptedAreaEnd;

  000cc	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  000cf	89 46 22	 mov	 DWORD PTR [esi+34], eax
  000d2	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  000d5	89 46 26	 mov	 DWORD PTR [esi+38], eax

; 1572 : 			bootEncStatus->EncryptedAreaStart = Extension->Queue.EncryptedAreaStart;

  000d8	8b 87 90 00 00
	00		 mov	 eax, DWORD PTR [edi+144]
  000de	89 46 2a	 mov	 DWORD PTR [esi+42], eax
  000e1	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  000e7	89 46 2e	 mov	 DWORD PTR [esi+46], eax

; 1573 : 
; 1574 : 			if (SetupInProgress)

  000ea	a1 00 00 00 00	 mov	 eax, DWORD PTR _SetupInProgress
  000ef	85 c0		 test	 eax, eax
  000f1	74 30		 je	 SHORT $LN3@GetBootEnc

; 1575 : 			{
; 1576 : 				KIRQL irql;
; 1577 : 				KeAcquireSpinLock (&SetupStatusSpinLock, &irql);

  000f3	bb 00 00 00 00	 mov	 ebx, OFFSET _SetupStatusSpinLock
  000f8	8b cb		 mov	 ecx, ebx
  000fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfAcquireSpinLock@4

; 1578 : 				bootEncStatus->EncryptedAreaEnd = SetupStatusEncryptedAreaEnd;

  00100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SetupStatusEncryptedAreaEnd
  00106	89 4e 32	 mov	 DWORD PTR [esi+50], ecx
  00109	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _SetupStatusEncryptedAreaEnd+4
  0010f	89 4e 36	 mov	 DWORD PTR [esi+54], ecx

; 1579 : 				KeReleaseSpinLock (&SetupStatusSpinLock, irql);

  00112	8a d0		 mov	 dl, al
  00114	8b cb		 mov	 ecx, ebx
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfReleaseSpinLock@8

; 1580 : 			}
; 1581 : 			else

  0011c	8b 5d 08	 mov	 ebx, DWORD PTR _irp$[ebp]
  0011f	33 c9		 xor	 ecx, ecx
  00121	eb 12		 jmp	 SHORT $LN2@GetBootEnc
$LN3@GetBootEnc:

; 1582 : 				bootEncStatus->EncryptedAreaEnd = Extension->Queue.EncryptedAreaEnd;

  00123	8b 87 98 00 00
	00		 mov	 eax, DWORD PTR [edi+152]
  00129	89 46 32	 mov	 DWORD PTR [esi+50], eax
  0012c	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  00132	89 46 36	 mov	 DWORD PTR [esi+54], eax
$LN2@GetBootEnc:

; 1583 : 
; 1584 : 			bootEncStatus->VolumeHeaderSaltCrc32 = Extension->VolumeHeaderSaltCrc32;

  00135	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  00138	89 46 3a	 mov	 DWORD PTR [esi+58], eax

; 1585 : 			bootEncStatus->HibernationPreventionCount = HibernationPreventionCount;

  0013b	a1 00 00 00 00	 mov	 eax, DWORD PTR _HibernationPreventionCount
  00140	89 46 4a	 mov	 DWORD PTR [esi+74], eax

; 1586 : 			bootEncStatus->HiddenSysLeakProtectionCount = HiddenSysLeakProtectionCount;

  00143	a1 00 00 00 00	 mov	 eax, DWORD PTR _HiddenSysLeakProtectionCount
  00148	89 46 5a	 mov	 DWORD PTR [esi+90], eax

; 1587 : 
; 1588 : 			bootEncStatus->HiddenSystem = Extension->HiddenSystem;

  0014b	8d 87 08 02 00
	00		 lea	 eax, DWORD PTR [edi+520]
  00151	8b 10		 mov	 edx, DWORD PTR [eax]
  00153	89 56 4e	 mov	 DWORD PTR [esi+78], edx

; 1589 : 			
; 1590 : 			if (Extension->HiddenSystem)

  00156	39 08		 cmp	 DWORD PTR [eax], ecx
  00158	74 1b		 je	 SHORT $LN1@GetBootEnc

; 1591 : 				bootEncStatus->HiddenSystemPartitionStart = BootArgs.HiddenSystemPartitionStart;

  0015a	a1 5a 00 00 00	 mov	 eax, DWORD PTR _BootArgs+90
  0015f	89 46 52	 mov	 DWORD PTR [esi+82], eax
  00162	a1 5e 00 00 00	 mov	 eax, DWORD PTR _BootArgs+94
  00167	89 46 56	 mov	 DWORD PTR [esi+86], eax
  0016a	eb 09		 jmp	 SHORT $LN1@GetBootEnc
$LN5@GetBootEnc:

; 1558 : 		{
; 1559 : 			bootEncStatus->DriveEncrypted = FALSE;

  0016c	89 4e 0e	 mov	 DWORD PTR [esi+14], ecx

; 1560 : 			bootEncStatus->DriveMounted = FALSE;

  0016f	89 4e 06	 mov	 DWORD PTR [esi+6], ecx

; 1561 : 			bootEncStatus->VolumeHeaderPresent = FALSE;

  00172	89 4e 0a	 mov	 DWORD PTR [esi+10], ecx
$LN1@GetBootEnc:
  00175	5f		 pop	 edi

; 1592 : 		}
; 1593 : 
; 1594 : 		irp->IoStatus.Information = sizeof (BootEncryptionStatus);

  00176	c7 43 1c 5e 00
	00 00		 mov	 DWORD PTR [ebx+28], 94	; 0000005eH

; 1595 : 		irp->IoStatus.Status = STATUS_SUCCESS;

  0017d	89 4b 18	 mov	 DWORD PTR [ebx+24], ecx
  00180	5e		 pop	 esi
$LN8@GetBootEnc:
  00181	5b		 pop	 ebx

; 1596 : 	}
; 1597 : }

  00182	5d		 pop	 ebp
  00183	c2 08 00	 ret	 8
_GetBootEncryptionStatus@8 ENDP
_TEXT	ENDS
PUBLIC	_GetBootLoaderVersion@8
; Function compile flags: /Ogsp
;	COMDAT _GetBootLoaderVersion@8
_TEXT	SEGMENT
_irp$ = 8						; size = 4
_irpSp$ = 12						; size = 4
_GetBootLoaderVersion@8 PROC				; COMDAT

; 1601 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	56		 push	 esi

; 1602 : 	if (ValidateIOBufferSize (irp, sizeof (uint16), ValidateOutput))

  00006	8b 75 08	 mov	 esi, DWORD PTR _irp$[ebp]
  00009	6a 01		 push	 1
  0000b	6a 02		 push	 2
  0000d	56		 push	 esi
  0000e	e8 00 00 00 00	 call	 _ValidateIOBufferSize@12
  00013	85 c0		 test	 eax, eax
  00015	74 2d		 je	 SHORT $LN1@GetBootLoa

; 1603 : 	{
; 1604 : 		if (BootArgsValid)

  00017	33 c0		 xor	 eax, eax
  00019	39 05 00 00 00
	00		 cmp	 DWORD PTR _BootArgsValid, eax
  0001f	74 19		 je	 SHORT $LN2@GetBootLoa

; 1605 : 		{
; 1606 : 			*(uint16 *) irp->AssociatedIrp.SystemBuffer = BootArgs.BootLoaderVersion;

  00021	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR _BootArgs+8
  00028	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0002b	66 89 11	 mov	 WORD PTR [ecx], dx

; 1607 : 			irp->IoStatus.Information = sizeof (uint16);

  0002e	c7 46 1c 02 00
	00 00		 mov	 DWORD PTR [esi+28], 2

; 1608 : 			irp->IoStatus.Status = STATUS_SUCCESS;

  00035	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 1609 : 		}
; 1610 : 		else

  00038	eb 0a		 jmp	 SHORT $LN1@GetBootLoa
$LN2@GetBootLoa:

; 1611 : 		{
; 1612 : 			irp->IoStatus.Status = STATUS_INVALID_PARAMETER;

  0003a	c7 46 18 0d 00
	00 c0		 mov	 DWORD PTR [esi+24], -1073741811 ; c000000dH

; 1613 : 			irp->IoStatus.Information = 0;

  00041	89 46 1c	 mov	 DWORD PTR [esi+28], eax
$LN1@GetBootLoa:
  00044	5e		 pop	 esi

; 1614 : 		}
; 1615 : 	}
; 1616 : }

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
_GetBootLoaderVersion@8 ENDP
_TEXT	ENDS
PUBLIC	_GetBootEncryptionAlgorithmName@8
EXTRN	_EAGetName@8:PROC
; Function compile flags: /Ogsp
;	COMDAT _GetBootEncryptionAlgorithmName@8
_TEXT	SEGMENT
_irp$ = 8						; size = 4
_irpSp$ = 12						; size = 4
_GetBootEncryptionAlgorithmName@8 PROC			; COMDAT

; 1620 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	56		 push	 esi

; 1621 : 	if (ValidateIOBufferSize (irp, sizeof (GetBootEncryptionAlgorithmNameRequest), ValidateOutput))

  00006	8b 75 08	 mov	 esi, DWORD PTR _irp$[ebp]
  00009	6a 01		 push	 1
  0000b	68 00 01 00 00	 push	 256			; 00000100H
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 _ValidateIOBufferSize@12
  00016	85 c0		 test	 eax, eax
  00018	74 37		 je	 SHORT $LN1@GetBootEnc@2

; 1622 : 	{
; 1623 : 		if (BootDriveFilterExtension && BootDriveFilterExtension->DriveMounted)

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  0001f	85 c0		 test	 eax, eax
  00021	74 23		 je	 SHORT $LN2@GetBootEnc@2
  00023	83 b8 f0 01 00
	00 00		 cmp	 DWORD PTR [eax+496], 0
  0002a	74 1a		 je	 SHORT $LN2@GetBootEnc@2

; 1624 : 		{
; 1625 : 			GetBootEncryptionAlgorithmNameRequest *request = (GetBootEncryptionAlgorithmNameRequest *) irp->AssociatedIrp.SystemBuffer;
; 1626 : 			EAGetName (request->BootEncryptionAlgorithmName, BootDriveFilterExtension->Queue.CryptoInfo->ea);

  0002c	8b 40 70	 mov	 eax, DWORD PTR [eax+112]
  0002f	ff 30		 push	 DWORD PTR [eax]
  00031	ff 76 0c	 push	 DWORD PTR [esi+12]
  00034	e8 00 00 00 00	 call	 _EAGetName@8

; 1627 : 
; 1628 : 			irp->IoStatus.Information = sizeof (GetBootEncryptionAlgorithmNameRequest);
; 1629 : 			irp->IoStatus.Status = STATUS_SUCCESS;

  00039	83 66 18 00	 and	 DWORD PTR [esi+24], 0
  0003d	c7 46 1c 00 01
	00 00		 mov	 DWORD PTR [esi+28], 256	; 00000100H

; 1630 : 		}
; 1631 : 		else

  00044	eb 0b		 jmp	 SHORT $LN1@GetBootEnc@2
$LN2@GetBootEnc@2:

; 1632 : 		{
; 1633 : 			irp->IoStatus.Status = STATUS_INVALID_PARAMETER;
; 1634 : 			irp->IoStatus.Information = 0;

  00046	83 66 1c 00	 and	 DWORD PTR [esi+28], 0
  0004a	c7 46 18 0d 00
	00 c0		 mov	 DWORD PTR [esi+24], -1073741811 ; c000000dH
$LN1@GetBootEnc@2:
  00051	5e		 pop	 esi

; 1635 : 		}
; 1636 : 	}
; 1637 : }

  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
_GetBootEncryptionAlgorithmName@8 ENDP
_TEXT	ENDS
PUBLIC	_GetSetupResult@0
; Function compile flags: /Ogsp
;	COMDAT _GetSetupResult@0
_TEXT	SEGMENT
_GetSetupResult@0 PROC					; COMDAT

; 1642 : 	return SetupResult;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _SetupResult

; 1643 : }

  00005	c3		 ret	 0
_GetSetupResult@0 ENDP
_TEXT	ENDS
PUBLIC	_IsBootDriveMounted@0
; Function compile flags: /Ogsp
;	COMDAT _IsBootDriveMounted@0
_TEXT	SEGMENT
_IsBootDriveMounted@0 PROC				; COMDAT

; 1648 : 	return BootDriveFilterExtension && BootDriveFilterExtension->DriveMounted;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  00005	85 c0		 test	 eax, eax
  00007	74 0d		 je	 SHORT $LN3@IsBootDriv
  00009	83 b8 f0 01 00
	00 00		 cmp	 DWORD PTR [eax+496], 0
  00010	74 04		 je	 SHORT $LN3@IsBootDriv
  00012	33 c0		 xor	 eax, eax
  00014	40		 inc	 eax

; 1649 : }

  00015	c3		 ret	 0
$LN3@IsBootDriv:

; 1648 : 	return BootDriveFilterExtension && BootDriveFilterExtension->DriveMounted;

  00016	33 c0		 xor	 eax, eax

; 1649 : }

  00018	c3		 ret	 0
_IsBootDriveMounted@0 ENDP
_TEXT	ENDS
PUBLIC	_IsBootEncryptionSetupInProgress@0
; Function compile flags: /Ogsp
;	COMDAT _IsBootEncryptionSetupInProgress@0
_TEXT	SEGMENT
_IsBootEncryptionSetupInProgress@0 PROC			; COMDAT

; 1654 : 	return SetupInProgress;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _SetupInProgress

; 1655 : }

  00005	c3		 ret	 0
_IsBootEncryptionSetupInProgress@0 ENDP
_TEXT	ENDS
PUBLIC	_IsHiddenSystemRunning@0
; Function compile flags: /Ogsp
;	COMDAT _IsHiddenSystemRunning@0
_TEXT	SEGMENT
_IsHiddenSystemRunning@0 PROC				; COMDAT

; 1660 : 	return BootDriveFilterExtension && BootDriveFilterExtension->HiddenSystem;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  00005	85 c0		 test	 eax, eax
  00007	74 0d		 je	 SHORT $LN3@IsHiddenSy
  00009	83 b8 08 02 00
	00 00		 cmp	 DWORD PTR [eax+520], 0
  00010	74 04		 je	 SHORT $LN3@IsHiddenSy
  00012	33 c0		 xor	 eax, eax
  00014	40		 inc	 eax

; 1661 : }

  00015	c3		 ret	 0
$LN3@IsHiddenSy:

; 1660 : 	return BootDriveFilterExtension && BootDriveFilterExtension->HiddenSystem;

  00016	33 c0		 xor	 eax, eax

; 1661 : }

  00018	c3		 ret	 0
_IsHiddenSystemRunning@0 ENDP
_TEXT	ENDS
PUBLIC	_GetBootDriveFilterExtension@0
; Function compile flags: /Ogsp
;	COMDAT _GetBootDriveFilterExtension@0
_TEXT	SEGMENT
_GetBootDriveFilterExtension@0 PROC			; COMDAT

; 1666 : 	return BootDriveFilterExtension;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension

; 1667 : }

  00005	c3		 ret	 0
_GetBootDriveFilterExtension@0 ENDP
_TEXT	ENDS
PUBLIC	_GetSystemDriveCryptoInfo@0
; Function compile flags: /Ogsp
;	COMDAT _GetSystemDriveCryptoInfo@0
_TEXT	SEGMENT
_GetSystemDriveCryptoInfo@0 PROC			; COMDAT

; 1672 : 	return BootDriveFilterExtension->Queue.CryptoInfo;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  00005	8b 40 70	 mov	 eax, DWORD PTR [eax+112]

; 1673 : }

  00008	c3		 ret	 0
_GetSystemDriveCryptoInfo@0 ENDP
_TEXT	ENDS
PUBLIC	_AbortBootEncryptionSetup@0
EXTRN	_TCStopThread@8:PROC
; Function compile flags: /Ogsp
;	COMDAT _AbortBootEncryptionSetup@0
_TEXT	SEGMENT
_AbortBootEncryptionSetup@0 PROC			; COMDAT

; 1678 : 	if (!IoIsSystemThread (PsGetCurrentThread()) && !UserCanAccessDriveDevice())

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeGetCurrentThread@0
  00006	50		 push	 eax
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoIsSystemThread@4
  0000d	84 c0		 test	 al, al
  0000f	75 0f		 jne	 SHORT $LN2@AbortBootE
  00011	e8 00 00 00 00	 call	 _UserCanAccessDriveDevice@0
  00016	85 c0		 test	 eax, eax
  00018	75 06		 jne	 SHORT $LN2@AbortBootE

; 1679 : 		return STATUS_ACCESS_DENIED;

  0001a	b8 22 00 00 c0	 mov	 eax, -1073741790	; c0000022H

; 1690 : }

  0001f	c3		 ret	 0
$LN2@AbortBootE:

; 1680 : 
; 1681 : 	if (EncryptionSetupThread)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _EncryptionSetupThread
  00025	85 c0		 test	 eax, eax
  00027	74 19		 je	 SHORT $LN1@AbortBootE

; 1682 : 	{
; 1683 : 		EncryptionSetupThreadAbortRequested = TRUE;
; 1684 : 
; 1685 : 		TCStopThread (EncryptionSetupThread, NULL);

  00029	6a 00		 push	 0
  0002b	50		 push	 eax
  0002c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _EncryptionSetupThreadAbortRequested, 1
  00036	e8 00 00 00 00	 call	 _TCStopThread@8

; 1686 : 		EncryptionSetupThread = NULL;

  0003b	83 25 00 00 00
	00 00		 and	 DWORD PTR _EncryptionSetupThread, 0
$LN1@AbortBootE:

; 1687 : 	}
; 1688 : 
; 1689 : 	return STATUS_SUCCESS;

  00042	33 c0		 xor	 eax, eax

; 1690 : }

  00044	c3		 ret	 0
_AbortBootEncryptionSetup@0 ENDP
_TEXT	ENDS
EXTRN	_EAInitMode@4:PROC
EXTRN	_EAGetKeySize@4:PROC
EXTRN	_EAInit@12:PROC
EXTRN	_crypto_open@0:PROC
_BSS	SEGMENT
_DecoySystemWipedAreaEnd DQ 01H DUP (?)
_DecoySystemWipeStatusSpinLock DD 01H DUP (?)
_DecoySystemWipeThreadAbortRequested DD 01H DUP (?)
_WipeDecoyRequest DB 0104H DUP (?)
_DecoySystemWipeResult DD 01H DUP (?)
; Function compile flags: /Ogsp
_BSS	ENDS
;	COMDAT _DecoySystemWipeThreadProc@4
_TEXT	SEGMENT
_dataUnit$ = -44					; size = 8
_offset$ = -36						; size = 8
_Extension$ = -28					; size = 4
_wipeCryptoInfo$ = -24					; size = 4
_wipeBuffer$ = -20					; size = 4
_wipePass$ = -16					; size = 4
_ea$ = -16						; size = 4
_wipeRandBuffer$ = -12					; size = 4
_wipeBlockSize$ = -8					; size = 4
_wipeRandChars$ = -4					; size = 3
_threadArg$ = 8						; size = 4
_DecoySystemWipeThreadProc@4 PROC			; COMDAT

; 1694 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 1695 : 	DriveFilterExtension *Extension = BootDriveFilterExtension;

  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 1696 : 
; 1697 : 	LARGE_INTEGER offset;
; 1698 : 	UINT64_STRUCT dataUnit;
; 1699 : 	ULONG wipeBlockSize = TC_ENCRYPTION_SETUP_IO_BLOCK_SIZE;
; 1700 : 
; 1701 : 	CRYPTO_INFO *wipeCryptoInfo = NULL;
; 1702 : 	byte *wipeBuffer = NULL;
; 1703 : 	byte *wipeRandBuffer = NULL;
; 1704 : 	byte wipeRandChars[TC_WIPE_RAND_CHAR_COUNT];
; 1705 : 	int wipePass;
; 1706 : 	int ea = Extension->Queue.CryptoInfo->ea;

  00010	8d 58 70	 lea	 ebx, DWORD PTR [eax+112]
  00013	89 45 e4	 mov	 DWORD PTR _Extension$[ebp], eax
  00016	8b 03		 mov	 eax, DWORD PTR [ebx]
  00018	8b 00		 mov	 eax, DWORD PTR [eax]

; 1707 : 
; 1708 : 	KIRQL irql;
; 1709 : 	NTSTATUS status;
; 1710 : 
; 1711 : 	DecoySystemWipeResult = STATUS_UNSUCCESSFUL;
; 1712 : 
; 1713 : 	wipeBuffer = TCalloc (TC_ENCRYPTION_SETUP_IO_BLOCK_SIZE);

  0001a	bf 54 43 4d 4d	 mov	 edi, 1296909140		; 4d4d4354H
  0001f	57		 push	 edi
  00020	be 00 00 18 00	 mov	 esi, 1572864		; 00180000H
  00025	56		 push	 esi
  00026	6a 00		 push	 0
  00028	89 75 f8	 mov	 DWORD PTR _wipeBlockSize$[ebp], esi
  0002b	89 45 f0	 mov	 DWORD PTR _ea$[ebp], eax
  0002e	c7 05 00 00 00
	00 01 00 00 c0	 mov	 DWORD PTR _DecoySystemWipeResult, -1073741823 ; c0000001H
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  0003e	89 45 ec	 mov	 DWORD PTR _wipeBuffer$[ebp], eax

; 1714 : 	if (!wipeBuffer)

  00041	85 c0		 test	 eax, eax
  00043	75 0f		 jne	 SHORT $LN26@DecoySyste

; 1715 : 	{
; 1716 : 		DecoySystemWipeResult = STATUS_INSUFFICIENT_RESOURCES;

  00045	c7 05 00 00 00
	00 9a 00 00 c0	 mov	 DWORD PTR _DecoySystemWipeResult, -1073741670 ; c000009aH

; 1717 : 		goto ret;

  0004f	e9 97 02 00 00	 jmp	 $LN1@DecoySyste
$LN26@DecoySyste:

; 1718 : 	}
; 1719 : 	
; 1720 : 	wipeRandBuffer = TCalloc (TC_ENCRYPTION_SETUP_IO_BLOCK_SIZE);

  00054	57		 push	 edi
  00055	56		 push	 esi
  00056	6a 00		 push	 0
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  0005e	89 45 f4	 mov	 DWORD PTR _wipeRandBuffer$[ebp], eax

; 1721 : 	if (!wipeRandBuffer)

  00061	85 c0		 test	 eax, eax
  00063	75 0f		 jne	 SHORT $LN25@DecoySyste

; 1722 : 	{
; 1723 : 		DecoySystemWipeResult = STATUS_INSUFFICIENT_RESOURCES;

  00065	c7 05 00 00 00
	00 9a 00 00 c0	 mov	 DWORD PTR _DecoySystemWipeResult, -1073741670 ; c000009aH

; 1724 : 		goto ret;

  0006f	e9 5f 02 00 00	 jmp	 $LN58@DecoySyste
$LN25@DecoySyste:

; 1725 : 	}
; 1726 : 
; 1727 : 	wipeCryptoInfo = crypto_open();

  00074	e8 00 00 00 00	 call	 _crypto_open@0
  00079	8b f0		 mov	 esi, eax
  0007b	89 75 e8	 mov	 DWORD PTR _wipeCryptoInfo$[ebp], esi

; 1728 : 	if (!wipeCryptoInfo)

  0007e	85 f6		 test	 esi, esi
  00080	75 0f		 jne	 SHORT $LN24@DecoySyste

; 1729 : 	{
; 1730 : 		DecoySystemWipeResult = STATUS_INSUFFICIENT_RESOURCES;

  00082	c7 05 00 00 00
	00 9a 00 00 c0	 mov	 DWORD PTR _DecoySystemWipeResult, -1073741670 ; c000009aH

; 1731 : 		goto ret;

  0008c	e9 38 02 00 00	 jmp	 $ret$28739
$LN24@DecoySyste:

; 1732 : 	}
; 1733 : 
; 1734 : 	wipeCryptoInfo->ea = ea;

  00091	8b 45 f0	 mov	 eax, DWORD PTR _ea$[ebp]
  00094	89 06		 mov	 DWORD PTR [esi], eax

; 1735 : 	wipeCryptoInfo->mode = Extension->Queue.CryptoInfo->mode;

  00096	8b 03		 mov	 eax, DWORD PTR [ebx]
  00098	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0009b	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1736 : 
; 1737 : 	if (EAInit (ea, WipeDecoyRequest.WipeKey, wipeCryptoInfo->ks) != ERR_SUCCESS)

  0009e	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  000a1	50		 push	 eax
  000a2	bb 04 00 00 00	 mov	 ebx, OFFSET _WipeDecoyRequest+4
  000a7	53		 push	 ebx
  000a8	ff 75 f0	 push	 DWORD PTR _ea$[ebp]
  000ab	e8 00 00 00 00	 call	 _EAInit@12
  000b0	85 c0		 test	 eax, eax
  000b2	74 0f		 je	 SHORT $LN23@DecoySyste

; 1738 : 	{
; 1739 : 		DecoySystemWipeResult = STATUS_INVALID_PARAMETER;

  000b4	c7 05 00 00 00
	00 0d 00 00 c0	 mov	 DWORD PTR _DecoySystemWipeResult, -1073741811 ; c000000dH

; 1740 : 		goto ret;

  000be	e9 06 02 00 00	 jmp	 $ret$28739
$LN23@DecoySyste:

; 1741 : 	}
; 1742 : 
; 1743 : 	memcpy (wipeCryptoInfo->k2, WipeDecoyRequest.WipeKey + EAGetKeySize (ea), EAGetKeySize (ea));

  000c3	ff 75 f0	 push	 DWORD PTR _ea$[ebp]
  000c6	e8 00 00 00 00	 call	 _EAGetKeySize@4
  000cb	50		 push	 eax
  000cc	ff 75 f0	 push	 DWORD PTR _ea$[ebp]
  000cf	e8 00 00 00 00	 call	 _EAGetKeySize@4
  000d4	03 c3		 add	 eax, ebx
  000d6	50		 push	 eax
  000d7	8d 86 a8 42 00
	00		 lea	 eax, DWORD PTR [esi+17064]
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 _memcpy
  000e3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1744 : 	
; 1745 : 	if (!EAInitMode (wipeCryptoInfo))

  000e6	56		 push	 esi
  000e7	e8 00 00 00 00	 call	 _EAInitMode@4
  000ec	85 c0		 test	 eax, eax
  000ee	75 0f		 jne	 SHORT $LN22@DecoySyste

; 1746 : 	{
; 1747 : 		DecoySystemWipeResult = STATUS_INVALID_PARAMETER;

  000f0	c7 05 00 00 00
	00 0d 00 00 c0	 mov	 DWORD PTR _DecoySystemWipeResult, -1073741811 ; c000000dH

; 1748 : 		goto err;

  000fa	e9 b4 01 00 00	 jmp	 $err$28749
$LN22@DecoySyste:

; 1749 : 	}
; 1750 : 
; 1751 : 	EncryptDataUnits (wipeRandBuffer, &dataUnit, wipeBlockSize / ENCRYPTION_DATA_UNIT_SIZE, wipeCryptoInfo);

  000ff	56		 push	 esi
  00100	8b 75 f4	 mov	 esi, DWORD PTR _wipeRandBuffer$[ebp]
  00103	68 00 0c 00 00	 push	 3072			; 00000c00H
  00108	8d 45 d4	 lea	 eax, DWORD PTR _dataUnit$[ebp]
  0010b	50		 push	 eax
  0010c	56		 push	 esi
  0010d	e8 00 00 00 00	 call	 _EncryptDataUnits@16

; 1752 : 	memcpy (wipeRandChars, wipeRandBuffer, sizeof (wipeRandChars));

  00112	8d 7d fc	 lea	 edi, DWORD PTR _wipeRandChars$[ebp]
  00115	66 a5		 movsw

; 1753 : 
; 1754 : 	burn (WipeDecoyRequest.WipeKey, sizeof (WipeDecoyRequest.WipeKey));

  00117	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  0011c	a4		 movsb
  0011d	8b cb		 mov	 ecx, ebx
  0011f	8b d0		 mov	 edx, eax
$LL30@DecoySyste:
  00121	c6 03 00	 mov	 BYTE PTR [ebx], 0
  00124	43		 inc	 ebx
  00125	48		 dec	 eax
  00126	75 f9		 jne	 SHORT $LL30@DecoySyste
$LL18@DecoySyste:
  00128	4a		 dec	 edx
  00129	c6 01 00	 mov	 BYTE PTR [ecx], 0
  0012c	41		 inc	 ecx
  0012d	85 d2		 test	 edx, edx
  0012f	75 f7		 jne	 SHORT $LL18@DecoySyste

; 1755 : 
; 1756 : 	offset.QuadPart = Extension->ConfiguredEncryptedAreaStart;

  00131	8b 7d e4	 mov	 edi, DWORD PTR _Extension$[ebp]
  00134	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00137	89 45 dc	 mov	 DWORD PTR _offset$[ebp], eax
  0013a	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  0013d	89 45 e0	 mov	 DWORD PTR _offset$[ebp+4], eax

; 1757 : 		
; 1758 : 	Dump ("Wiping decoy system:  start offset = %I64d\n", offset.QuadPart);
; 1759 : 
; 1760 : 	while (!DecoySystemWipeThreadAbortRequested)

  00140	e9 52 01 00 00	 jmp	 $LN71@DecoySyste
$LL16@DecoySyste:

; 1761 : 	{
; 1762 : 		if (offset.QuadPart + wipeBlockSize > Extension->ConfiguredEncryptedAreaEnd + 1)

  00145	8b 55 f8	 mov	 edx, DWORD PTR _wipeBlockSize$[ebp]
  00148	8b 77 38	 mov	 esi, DWORD PTR [edi+56]
  0014b	8b 5f 3c	 mov	 ebx, DWORD PTR [edi+60]
  0014e	33 c0		 xor	 eax, eax
  00150	03 55 dc	 add	 edx, DWORD PTR _offset$[ebp]
  00153	8b cb		 mov	 ecx, ebx
  00155	13 45 e0	 adc	 eax, DWORD PTR _offset$[ebp+4]
  00158	83 c6 01	 add	 esi, 1
  0015b	83 d1 00	 adc	 ecx, 0
  0015e	3b c1		 cmp	 eax, ecx
  00160	7c 10		 jl	 SHORT $LN60@DecoySyste
  00162	7f 04		 jg	 SHORT $LN50@DecoySyste
  00164	3b d6		 cmp	 edx, esi
  00166	76 0a		 jbe	 SHORT $LN60@DecoySyste
$LN50@DecoySyste:

; 1763 : 			wipeBlockSize = (ULONG) (Extension->ConfiguredEncryptedAreaEnd + 1 - offset.QuadPart);

  00168	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  0016b	2b 45 dc	 sub	 eax, DWORD PTR _offset$[ebp]
  0016e	40		 inc	 eax
  0016f	89 45 f8	 mov	 DWORD PTR _wipeBlockSize$[ebp], eax
$LN60@DecoySyste:

; 1764 : 
; 1765 : 		if (offset.QuadPart > Extension->ConfiguredEncryptedAreaEnd)

  00172	39 5d e0	 cmp	 DWORD PTR _offset$[ebp+4], ebx
  00175	0f 8f 29 01 00
	00		 jg	 $abort$28774
  0017b	7c 0c		 jl	 SHORT $LN51@DecoySyste
  0017d	8b 45 dc	 mov	 eax, DWORD PTR _offset$[ebp]
  00180	3b 47 38	 cmp	 eax, DWORD PTR [edi+56]
  00183	0f 87 1b 01 00
	00		 ja	 $abort$28774
$LN51@DecoySyste:

; 1766 : 			break;
; 1767 : 
; 1768 : 		for (wipePass = 1; wipePass <= GetWipePassCount (WipeDecoyRequest.WipeAlgorithm); ++wipePass)

  00189	ff 35 00 00 00
	00		 push	 DWORD PTR _WipeDecoyRequest
  0018f	33 f6		 xor	 esi, esi
  00191	46		 inc	 esi
  00192	89 75 f0	 mov	 DWORD PTR _wipePass$[ebp], esi
  00195	e8 00 00 00 00	 call	 _GetWipePassCount@4
  0019a	3b c6		 cmp	 eax, esi
  0019c	0f 8c bc 00 00
	00		 jl	 $LN62@DecoySyste
  001a2	8d 5f 48	 lea	 ebx, DWORD PTR [edi+72]
$LL64@DecoySyste:

; 1769 : 		{
; 1770 : 			if (!WipeBuffer (WipeDecoyRequest.WipeAlgorithm, wipeRandChars, wipePass, wipeBuffer, wipeBlockSize))

  001a5	ff 75 f8	 push	 DWORD PTR _wipeBlockSize$[ebp]
  001a8	8d 45 fc	 lea	 eax, DWORD PTR _wipeRandChars$[ebp]
  001ab	ff 75 ec	 push	 DWORD PTR _wipeBuffer$[ebp]
  001ae	ff 75 f0	 push	 DWORD PTR _wipePass$[ebp]
  001b1	50		 push	 eax
  001b2	ff 35 00 00 00
	00		 push	 DWORD PTR _WipeDecoyRequest
  001b8	e8 00 00 00 00	 call	 _WipeBuffer@20
  001bd	85 c0		 test	 eax, eax
  001bf	75 3e		 jne	 SHORT $LN61@DecoySyste

; 1771 : 			{
; 1772 : 				dataUnit.Value = offset.QuadPart / ENCRYPTION_DATA_UNIT_SIZE;

  001c1	50		 push	 eax
  001c2	68 00 02 00 00	 push	 512			; 00000200H
  001c7	ff 75 e0	 push	 DWORD PTR _offset$[ebp+4]
  001ca	ff 75 dc	 push	 DWORD PTR _offset$[ebp]
  001cd	e8 00 00 00 00	 call	 __alldiv

; 1773 : 				EncryptDataUnits (wipeRandBuffer, &dataUnit, wipeBlockSize / ENCRYPTION_DATA_UNIT_SIZE, wipeCryptoInfo);

  001d2	ff 75 e8	 push	 DWORD PTR _wipeCryptoInfo$[ebp]
  001d5	89 45 d4	 mov	 DWORD PTR _dataUnit$[ebp], eax
  001d8	8b 45 f8	 mov	 eax, DWORD PTR _wipeBlockSize$[ebp]
  001db	c1 e8 09	 shr	 eax, 9
  001de	50		 push	 eax
  001df	8d 45 d4	 lea	 eax, DWORD PTR _dataUnit$[ebp]
  001e2	50		 push	 eax
  001e3	ff 75 f4	 push	 DWORD PTR _wipeRandBuffer$[ebp]
  001e6	89 55 d8	 mov	 DWORD PTR _dataUnit$[ebp+4], edx
  001e9	e8 00 00 00 00	 call	 _EncryptDataUnits@16

; 1774 : 				memcpy (wipeBuffer, wipeRandBuffer, wipeBlockSize);

  001ee	ff 75 f8	 push	 DWORD PTR _wipeBlockSize$[ebp]
  001f1	ff 75 f4	 push	 DWORD PTR _wipeRandBuffer$[ebp]
  001f4	ff 75 ec	 push	 DWORD PTR _wipeBuffer$[ebp]
  001f7	e8 00 00 00 00	 call	 _memcpy
  001fc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN61@DecoySyste:

; 1775 : 			}
; 1776 : 
; 1777 : 			while (!NT_SUCCESS (EncryptedIoQueueHoldWhenIdle (&Extension->Queue, 500)))

  001ff	be f4 01 00 00	 mov	 esi, 500		; 000001f4H
  00204	eb 0d		 jmp	 SHORT $LN73@DecoySyste
$LL8@DecoySyste:

; 1778 : 			{
; 1779 : 				if (DecoySystemWipeThreadAbortRequested)

  00206	a1 00 00 00 00	 mov	 eax, DWORD PTR _DecoySystemWipeThreadAbortRequested
  0020b	85 c0		 test	 eax, eax
  0020d	0f 85 91 00 00
	00		 jne	 $abort$28774
$LN73@DecoySyste:

; 1775 : 			}
; 1776 : 
; 1777 : 			while (!NT_SUCCESS (EncryptedIoQueueHoldWhenIdle (&Extension->Queue, 500)))

  00213	6a 00		 push	 0
  00215	56		 push	 esi
  00216	53		 push	 ebx
  00217	e8 00 00 00 00	 call	 _EncryptedIoQueueHoldWhenIdle@12
  0021c	85 c0		 test	 eax, eax
  0021e	7c e6		 jl	 SHORT $LL8@DecoySyste

; 1780 : 					goto abort;
; 1781 : 			}
; 1782 : 
; 1783 : 			status = TCWriteDevice (BootDriveFilterExtension->LowerDeviceObject, wipeBuffer, offset, wipeBlockSize);

  00220	ff 75 f8	 push	 DWORD PTR _wipeBlockSize$[ebp]
  00223	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  00228	ff 75 e0	 push	 DWORD PTR _offset$[ebp+4]
  0022b	ff 75 dc	 push	 DWORD PTR _offset$[ebp]
  0022e	ff 75 ec	 push	 DWORD PTR _wipeBuffer$[ebp]
  00231	ff 70 1c	 push	 DWORD PTR [eax+28]
  00234	e8 00 00 00 00	 call	 _TCWriteDevice@20

; 1784 : 
; 1785 : 			if (!NT_SUCCESS (status))

  00239	85 c0		 test	 eax, eax
  0023b	0f 8c c7 00 00
	00		 jl	 $LN39@DecoySyste

; 1789 : 			}
; 1790 : 
; 1791 : 			EncryptedIoQueueResumeFromHold (&Extension->Queue);

  00241	53		 push	 ebx
  00242	e8 00 00 00 00	 call	 _EncryptedIoQueueResumeFromHold@4
  00247	ff 35 00 00 00
	00		 push	 DWORD PTR _WipeDecoyRequest
  0024d	ff 45 f0	 inc	 DWORD PTR _wipePass$[ebp]
  00250	e8 00 00 00 00	 call	 _GetWipePassCount@4
  00255	39 45 f0	 cmp	 DWORD PTR _wipePass$[ebp], eax
  00258	0f 8e 47 ff ff
	ff		 jle	 $LL64@DecoySyste
$LN62@DecoySyste:

; 1792 : 		}
; 1793 : 
; 1794 : 		offset.QuadPart += wipeBlockSize;

  0025e	8b 45 f8	 mov	 eax, DWORD PTR _wipeBlockSize$[ebp]
  00261	01 45 dc	 add	 DWORD PTR _offset$[ebp], eax

; 1795 : 
; 1796 : 		KeAcquireSpinLock (&DecoySystemWipeStatusSpinLock, &irql);

  00264	be 00 00 00 00	 mov	 esi, OFFSET _DecoySystemWipeStatusSpinLock
  00269	8b ce		 mov	 ecx, esi
  0026b	83 55 e0 00	 adc	 DWORD PTR _offset$[ebp+4], 0
  0026f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfAcquireSpinLock@4

; 1797 : 		DecoySystemWipedAreaEnd = offset.QuadPart - 1;

  00275	8b 4d dc	 mov	 ecx, DWORD PTR _offset$[ebp]
  00278	8b 55 e0	 mov	 edx, DWORD PTR _offset$[ebp+4]
  0027b	83 e9 01	 sub	 ecx, 1
  0027e	83 da 00	 sbb	 edx, 0
  00281	89 0d 00 00 00
	00		 mov	 DWORD PTR _DecoySystemWipedAreaEnd, ecx
  00287	89 15 04 00 00
	00		 mov	 DWORD PTR _DecoySystemWipedAreaEnd+4, edx

; 1798 : 		KeReleaseSpinLock (&DecoySystemWipeStatusSpinLock, irql);

  0028d	8a d0		 mov	 dl, al
  0028f	8b ce		 mov	 ecx, esi
  00291	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfReleaseSpinLock@8
$LN71@DecoySyste:
  00297	a1 00 00 00 00	 mov	 eax, DWORD PTR _DecoySystemWipeThreadAbortRequested
  0029c	85 c0		 test	 eax, eax
  0029e	0f 84 a1 fe ff
	ff		 je	 $LL16@DecoySyste
$abort$28774:

; 1799 : 	}
; 1800 : 
; 1801 : abort:
; 1802 : 	DecoySystemWipeResult = STATUS_SUCCESS;

  002a4	83 25 00 00 00
	00 00		 and	 DWORD PTR _DecoySystemWipeResult, 0
$LN74@DecoySyste:
  002ab	8b 75 e8	 mov	 esi, DWORD PTR _wipeCryptoInfo$[ebp]
  002ae	bf 54 43 4d 4d	 mov	 edi, 1296909140		; 4d4d4354H
$err$28749:

; 1803 : err:
; 1804 : 
; 1805 : 	if (EncryptedIoQueueIsSuspended (&Extension->Queue))

  002b3	8b 5d e4	 mov	 ebx, DWORD PTR _Extension$[ebp]
  002b6	83 c3 48	 add	 ebx, 72			; 00000048H
  002b9	53		 push	 ebx
  002ba	e8 00 00 00 00	 call	 _EncryptedIoQueueIsSuspended@4
  002bf	85 c0		 test	 eax, eax
  002c1	74 06		 je	 SHORT $ret$28739

; 1806 : 		EncryptedIoQueueResumeFromHold (&Extension->Queue);

  002c3	53		 push	 ebx
  002c4	e8 00 00 00 00	 call	 _EncryptedIoQueueResumeFromHold@4
$ret$28739:

; 1807 : 
; 1808 : 	Dump ("Wipe end: DecoySystemWipedAreaEnd=%I64d (%I64d)\n", DecoySystemWipedAreaEnd, DecoySystemWipedAreaEnd / 1024 / 1024);
; 1809 : 
; 1810 : ret:
; 1811 : 	if (wipeCryptoInfo)

  002c9	85 f6		 test	 esi, esi
  002cb	74 06		 je	 SHORT $LN58@DecoySyste

; 1812 : 		crypto_close (wipeCryptoInfo);

  002cd	56		 push	 esi
  002ce	e8 00 00 00 00	 call	 _crypto_close@4
$LN58@DecoySyste:

; 1813 : 
; 1814 : 	if (wipeRandBuffer)

  002d3	83 7d f4 00	 cmp	 DWORD PTR _wipeRandBuffer$[ebp], 0
  002d7	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__ExFreePoolWithTag@8
  002dd	74 06		 je	 SHORT $LN2@DecoySyste

; 1815 : 		TCfree (wipeRandBuffer);

  002df	57		 push	 edi
  002e0	ff 75 f4	 push	 DWORD PTR _wipeRandBuffer$[ebp]
  002e3	ff d6		 call	 esi
$LN2@DecoySyste:

; 1816 : 
; 1817 : 	if (wipeBuffer)
; 1818 : 		TCfree (wipeBuffer);

  002e5	57		 push	 edi
  002e6	ff 75 ec	 push	 DWORD PTR _wipeBuffer$[ebp]
  002e9	ff d6		 call	 esi
$LN1@DecoySyste:

; 1819 : 
; 1820 : 	DecoySystemWipeInProgress = FALSE;
; 1821 : 	PsTerminateSystemThread (DecoySystemWipeResult);

  002eb	ff 35 00 00 00
	00		 push	 DWORD PTR _DecoySystemWipeResult
  002f1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _DecoySystemWipeInProgress, 0
  002fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PsTerminateSystemThread@4
  00301	5f		 pop	 edi
  00302	5e		 pop	 esi
  00303	5b		 pop	 ebx

; 1822 : }

  00304	c9		 leave
  00305	c2 04 00	 ret	 4
$LN39@DecoySyste:

; 1786 : 			{
; 1787 : 				DecoySystemWipeResult = status;

  00308	a3 00 00 00 00	 mov	 DWORD PTR _DecoySystemWipeResult, eax

; 1788 : 				goto err;

  0030d	eb 9c		 jmp	 SHORT $LN74@DecoySyste
_DecoySystemWipeThreadProc@4 ENDP
_TEXT	ENDS
PUBLIC	_IsDecoySystemWipeInProgress@0
; Function compile flags: /Ogsp
;	COMDAT _IsDecoySystemWipeInProgress@0
_TEXT	SEGMENT
_IsDecoySystemWipeInProgress@0 PROC			; COMDAT

; 1864 : 	return DecoySystemWipeInProgress;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _DecoySystemWipeInProgress

; 1865 : }

  00005	c3		 ret	 0
_IsDecoySystemWipeInProgress@0 ENDP
_TEXT	ENDS
PUBLIC	_GetDecoySystemWipeStatus@8
; Function compile flags: /Ogsp
;	COMDAT _GetDecoySystemWipeStatus@8
_TEXT	SEGMENT
_irp$ = 8						; size = 4
_irpSp$ = 12						; size = 4
_GetDecoySystemWipeStatus@8 PROC			; COMDAT

; 1869 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	53		 push	 ebx

; 1870 : 	if (ValidateIOBufferSize (irp, sizeof (DecoySystemWipeStatus), ValidateOutput))

  00006	8b 5d 08	 mov	 ebx, DWORD PTR _irp$[ebp]
  00009	6a 01		 push	 1
  0000b	6a 10		 push	 16			; 00000010H
  0000d	53		 push	 ebx
  0000e	e8 00 00 00 00	 call	 _ValidateIOBufferSize@12
  00013	85 c0		 test	 eax, eax
  00015	74 7a		 je	 SHORT $LN3@GetDecoySy
  00017	56		 push	 esi

; 1871 : 	{
; 1872 : 		DecoySystemWipeStatus *wipeStatus = (DecoySystemWipeStatus *) irp->AssociatedIrp.SystemBuffer;

  00018	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]

; 1873 : 
; 1874 : 		if (!IsHiddenSystemRunning())

  0001b	e8 00 00 00 00	 call	 _IsHiddenSystemRunning@0
  00020	85 c0		 test	 eax, eax
  00022	75 0c		 jne	 SHORT $LN4@GetDecoySy

; 1875 : 		{
; 1876 : 			irp->IoStatus.Status = STATUS_INVALID_PARAMETER;
; 1877 : 			irp->IoStatus.Information = 0;

  00024	21 43 1c	 and	 DWORD PTR [ebx+28], eax
  00027	c7 43 18 0d 00
	00 c0		 mov	 DWORD PTR [ebx+24], -1073741811 ; c000000dH

; 1878 : 		}
; 1879 : 		else

  0002e	eb 60		 jmp	 SHORT $LN8@GetDecoySy
$LN4@GetDecoySy:

; 1880 : 		{
; 1881 : 			wipeStatus->WipeInProgress = DecoySystemWipeInProgress;

  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR _DecoySystemWipeInProgress
  00035	89 06		 mov	 DWORD PTR [esi], eax

; 1882 : 			wipeStatus->WipeAlgorithm = WipeDecoyRequest.WipeAlgorithm;

  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR _WipeDecoyRequest
  0003c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1883 : 
; 1884 : 			if (DecoySystemWipeInProgress)

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR _DecoySystemWipeInProgress
  00044	85 c0		 test	 eax, eax
  00046	74 2d		 je	 SHORT $LN2@GetDecoySy
  00048	57		 push	 edi

; 1885 : 			{
; 1886 : 				KIRQL irql;
; 1887 : 				KeAcquireSpinLock (&DecoySystemWipeStatusSpinLock, &irql);

  00049	bf 00 00 00 00	 mov	 edi, OFFSET _DecoySystemWipeStatusSpinLock
  0004e	8b cf		 mov	 ecx, edi
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfAcquireSpinLock@4

; 1888 : 				wipeStatus->WipedAreaEnd = DecoySystemWipedAreaEnd;

  00056	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _DecoySystemWipedAreaEnd
  0005c	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0005f	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _DecoySystemWipedAreaEnd+4
  00065	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx

; 1889 : 				KeReleaseSpinLock (&DecoySystemWipeStatusSpinLock, irql);

  00068	8a d0		 mov	 dl, al
  0006a	8b cf		 mov	 ecx, edi
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfReleaseSpinLock@8
  00072	5f		 pop	 edi

; 1890 : 			}
; 1891 : 			else

  00073	eb 10		 jmp	 SHORT $LN1@GetDecoySy
$LN2@GetDecoySy:

; 1892 : 				wipeStatus->WipedAreaEnd = DecoySystemWipedAreaEnd;

  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR _DecoySystemWipedAreaEnd
  0007a	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0007d	a1 04 00 00 00	 mov	 eax, DWORD PTR _DecoySystemWipedAreaEnd+4
  00082	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN1@GetDecoySy:

; 1893 : 			
; 1894 : 			irp->IoStatus.Information = sizeof (DecoySystemWipeStatus);
; 1895 : 			irp->IoStatus.Status = STATUS_SUCCESS;

  00085	83 63 18 00	 and	 DWORD PTR [ebx+24], 0
  00089	c7 43 1c 10 00
	00 00		 mov	 DWORD PTR [ebx+28], 16	; 00000010H
$LN8@GetDecoySy:
  00090	5e		 pop	 esi
$LN3@GetDecoySy:
  00091	5b		 pop	 ebx

; 1896 : 		}
; 1897 : 	}
; 1898 : }

  00092	5d		 pop	 ebp
  00093	c2 08 00	 ret	 8
_GetDecoySystemWipeStatus@8 ENDP
_TEXT	ENDS
PUBLIC	_GetDecoySystemWipeResult@0
; Function compile flags: /Ogsp
;	COMDAT _GetDecoySystemWipeResult@0
_TEXT	SEGMENT
_GetDecoySystemWipeResult@0 PROC			; COMDAT

; 1903 : 	return DecoySystemWipeResult;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _DecoySystemWipeResult

; 1904 : }

  00005	c3		 ret	 0
_GetDecoySystemWipeResult@0 ENDP
_TEXT	ENDS
PUBLIC	_AbortDecoySystemWipe@0
; Function compile flags: /Ogsp
;	COMDAT _AbortDecoySystemWipe@0
_TEXT	SEGMENT
_AbortDecoySystemWipe@0 PROC				; COMDAT

; 1909 : 	if (!IoIsSystemThread (PsGetCurrentThread()) && !UserCanAccessDriveDevice())

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeGetCurrentThread@0
  00006	50		 push	 eax
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoIsSystemThread@4
  0000d	84 c0		 test	 al, al
  0000f	75 0f		 jne	 SHORT $LN2@AbortDecoy
  00011	e8 00 00 00 00	 call	 _UserCanAccessDriveDevice@0
  00016	85 c0		 test	 eax, eax
  00018	75 06		 jne	 SHORT $LN2@AbortDecoy

; 1910 : 		return STATUS_ACCESS_DENIED;

  0001a	b8 22 00 00 c0	 mov	 eax, -1073741790	; c0000022H

; 1921 : }

  0001f	c3		 ret	 0
$LN2@AbortDecoy:

; 1911 : 
; 1912 : 	if (DecoySystemWipeThread)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _DecoySystemWipeThread
  00025	85 c0		 test	 eax, eax
  00027	74 19		 je	 SHORT $LN1@AbortDecoy

; 1913 : 	{
; 1914 : 		DecoySystemWipeThreadAbortRequested = TRUE;
; 1915 : 
; 1916 : 		TCStopThread (DecoySystemWipeThread, NULL);

  00029	6a 00		 push	 0
  0002b	50		 push	 eax
  0002c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _DecoySystemWipeThreadAbortRequested, 1
  00036	e8 00 00 00 00	 call	 _TCStopThread@8

; 1917 : 		DecoySystemWipeThread = NULL;

  0003b	83 25 00 00 00
	00 00		 and	 DWORD PTR _DecoySystemWipeThread, 0
$LN1@AbortDecoy:

; 1918 : 	}
; 1919 : 
; 1920 : 	return STATUS_SUCCESS;

  00042	33 c0		 xor	 eax, eax

; 1921 : }

  00044	c3		 ret	 0
_AbortDecoySystemWipe@0 ENDP
_TEXT	ENDS
PUBLIC	_GetBootDriveLength@0
; Function compile flags: /Ogsp
;	COMDAT _GetBootDriveLength@0
_TEXT	SEGMENT
_GetBootDriveLength@0 PROC				; COMDAT

; 1926 : 	return BootDriveLength.QuadPart;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveLength
  00005	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR _BootDriveLength+4

; 1927 : }

  0000b	c3		 ret	 0
_GetBootDriveLength@0 ENDP
_TEXT	ENDS
PUBLIC	_WriteBootDriveSector@8
; Function compile flags: /Ogsp
;	COMDAT _WriteBootDriveSector@8
_TEXT	SEGMENT
_irp$ = 8						; size = 4
_irpSp$ = 12						; size = 4
_WriteBootDriveSector@8 PROC				; COMDAT

; 1931 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 1932 : 	WriteBootDriveSectorRequest *request;
; 1933 : 
; 1934 : 	if (!UserCanAccessDriveDevice())

  00005	e8 00 00 00 00	 call	 _UserCanAccessDriveDevice@0
  0000a	85 c0		 test	 eax, eax
  0000c	75 07		 jne	 SHORT $LN3@WriteBootD

; 1935 : 		return STATUS_ACCESS_DENIED;

  0000e	b8 22 00 00 c0	 mov	 eax, -1073741790	; c0000022H
  00013	eb 39		 jmp	 SHORT $LN4@WriteBootD
$LN3@WriteBootD:

; 1936 : 
; 1937 : 	if (!BootDriveFilterExtension
; 1938 : 		|| irpSp->Parameters.DeviceIoControl.InputBufferLength < sizeof (WriteBootDriveSectorRequest))

  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _BootDriveFilterExtension
  0001b	85 c9		 test	 ecx, ecx
  0001d	74 2a		 je	 SHORT $LN1@WriteBootD
  0001f	8b 45 0c	 mov	 eax, DWORD PTR _irpSp$[ebp]
  00022	81 78 08 08 02
	00 00		 cmp	 DWORD PTR [eax+8], 520	; 00000208H
  00029	72 1e		 jb	 SHORT $LN1@WriteBootD

; 1940 : 
; 1941 : 	request = (WriteBootDriveSectorRequest *) irp->AssociatedIrp.SystemBuffer;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _irp$[ebp]
  0002e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 1942 : 	return TCWriteDevice (BootDriveFilterExtension->LowerDeviceObject, request->Data, request->Offset, sizeof (request->Data));

  00031	68 00 02 00 00	 push	 512			; 00000200H
  00036	ff 70 04	 push	 DWORD PTR [eax+4]
  00039	ff 30		 push	 DWORD PTR [eax]
  0003b	83 c0 08	 add	 eax, 8
  0003e	50		 push	 eax
  0003f	ff 71 1c	 push	 DWORD PTR [ecx+28]
  00042	e8 00 00 00 00	 call	 _TCWriteDevice@20
  00047	eb 05		 jmp	 SHORT $LN4@WriteBootD
$LN1@WriteBootD:

; 1939 : 		return STATUS_INVALID_PARAMETER;

  00049	b8 0d 00 00 c0	 mov	 eax, -1073741811	; c000000dH
$LN4@WriteBootD:

; 1943 : }

  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
_WriteBootDriveSector@8 ENDP
_TEXT	ENDS
PUBLIC	_password$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	_IsOSAtLeast@4:PROC
EXTRN	_EncryptedIoQueueStart@4:PROC
; Function compile flags: /Ogsp
;	COMDAT _MountDrive@12
_TEXT	SEGMENT
_password$GSCopy$ = -540				; size = 4
_storageDeviceNumber$27958 = -536			; size = 12
_hiddenPartitionOffset$27940 = -532			; size = 8
_hiddenHeaderOffset$ = -532				; size = 8
_hiddenVolume$ = -524					; size = 4
_header$ = -520						; size = 4
_mbr$27920 = -516					; size = 512
__$ArrayPad$ = -4					; size = 4
_password$ = 8						; size = 4
_headerSaltCrc32$ = 12					; size = 4
_MountDrive@12 PROC					; COMDAT
; _Extension$ = ecx

; 221  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 1c 02 00
	00		 sub	 esp, 540		; 0000021cH
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	8b 45 08	 mov	 eax, DWORD PTR _password$[ebp]
  00018	53		 push	 ebx
  00019	56		 push	 esi

; 306  : 		}
; 307  : 
; 308  : 		Extension->ConfiguredEncryptedAreaStart = Extension->Queue.CryptoInfo->EncryptedAreaStart.Value;

  0001a	89 85 e4 fd ff
	ff		 mov	 DWORD PTR _password$GSCopy$[ebp], eax
  00020	a1 5a 00 00 00	 mov	 eax, DWORD PTR _BootArgs+90
  00025	57		 push	 edi
  00026	8b f1		 mov	 esi, ecx
  00028	8b 0d 5e 00 00
	00		 mov	 ecx, DWORD PTR _BootArgs+94
  0002e	8b d0		 mov	 edx, eax
  00030	0b d1		 or	 edx, ecx
  00032	6a 01		 push	 1
  00034	5b		 pop	 ebx
  00035	74 08		 je	 SHORT $LN32@MountDrive

; 222  : 	BOOL hiddenVolume = (BootArgs.HiddenSystemPartitionStart != 0);

  00037	89 9d f4 fd ff
	ff		 mov	 DWORD PTR _hiddenVolume$[ebp], ebx
  0003d	eb 07		 jmp	 SHORT $LN33@MountDrive
$LN32@MountDrive:
  0003f	83 a5 f4 fd ff
	ff 00		 and	 DWORD PTR _hiddenVolume$[ebp], 0
$LN33@MountDrive:

; 223  : 	int64 hiddenHeaderOffset = BootArgs.HiddenSystemPartitionStart + TC_HIDDEN_VOLUME_HEADER_OFFSET;

  00046	05 00 00 01 00	 add	 eax, 65536		; 00010000H
  0004b	83 d1 00	 adc	 ecx, 0

; 224  : 	NTSTATUS status;
; 225  : 	LARGE_INTEGER offset;
; 226  : 	char *header;
; 227  : 
; 228  : 	Dump ("MountDrive pdo=%p\n", Extension->Pdo);
; 229  : 	ASSERT (KeGetCurrentIrql() == PASSIVE_LEVEL);
; 230  : 
; 231  : 	// Check boot drive signature first (header CRC search could fail if a user restored the header to a non-boot drive)
; 232  : 	if (BootDriveSignatureValid)

  0004e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _BootDriveSignatureValid, 0
  00055	89 85 ec fd ff
	ff		 mov	 DWORD PTR _hiddenHeaderOffset$[ebp], eax
  0005b	89 8d f0 fd ff
	ff		 mov	 DWORD PTR _hiddenHeaderOffset$[ebp+4], ecx
  00061	bf 00 02 00 00	 mov	 edi, 512		; 00000200H
  00066	74 2e		 je	 SHORT $LN50@MountDrive

; 233  : 	{
; 234  : 		byte mbr[TC_SECTOR_SIZE_BIOS];
; 235  : 
; 236  : 		offset.QuadPart = 0;
; 237  : 		status = TCReadDevice (Extension->LowerDeviceObject, mbr, offset, TC_SECTOR_SIZE_BIOS);

  00068	57		 push	 edi
  00069	33 c9		 xor	 ecx, ecx
  0006b	51		 push	 ecx
  0006c	33 c0		 xor	 eax, eax
  0006e	50		 push	 eax
  0006f	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _mbr$27920[ebp]
  00075	50		 push	 eax
  00076	ff 76 1c	 push	 DWORD PTR [esi+28]
  00079	e8 00 00 00 00	 call	 _TCReadDevice@20

; 238  : 
; 239  : 		if (NT_SUCCESS (status) && BootArgs.BootDriveSignature != *(uint32 *) (mbr + 0x1b8))

  0007e	85 c0		 test	 eax, eax
  00080	7c 14		 jl	 SHORT $LN50@MountDrive
  00082	a1 6e 00 00 00	 mov	 eax, DWORD PTR _BootArgs+110
  00087	3b 45 b4	 cmp	 eax, DWORD PTR _mbr$27920[ebp+440]
  0008a	74 0a		 je	 SHORT $LN50@MountDrive

; 240  : 			return STATUS_UNSUCCESSFUL;

  0008c	b8 01 00 00 c0	 mov	 eax, -1073741823	; c0000001H
  00091	e9 05 04 00 00	 jmp	 $LN30@MountDrive
$LN50@MountDrive:

; 241  : 	}
; 242  : 
; 243  : 	header = TCalloc (TC_BOOT_ENCRYPTION_VOLUME_HEADER_SIZE);

  00096	68 54 43 4d 4d	 push	 1296909140		; 4d4d4354H
  0009b	57		 push	 edi
  0009c	6a 00		 push	 0
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12

; 244  : 	if (!header)

  000a4	33 c9		 xor	 ecx, ecx
  000a6	89 85 f8 fd ff
	ff		 mov	 DWORD PTR _header$[ebp], eax
  000ac	3b c1		 cmp	 eax, ecx
  000ae	75 0a		 jne	 SHORT $LN27@MountDrive

; 245  : 		return STATUS_INSUFFICIENT_RESOURCES;

  000b0	b8 9a 00 00 c0	 mov	 eax, -1073741670	; c000009aH
  000b5	e9 e1 03 00 00	 jmp	 $LN30@MountDrive
$LN27@MountDrive:

; 246  : 
; 247  : 	offset.QuadPart = hiddenVolume ? hiddenHeaderOffset : TC_BOOT_VOLUME_HEADER_SECTOR_OFFSET;

  000ba	39 8d f4 fd ff
	ff		 cmp	 DWORD PTR _hiddenVolume$[ebp], ecx
  000c0	74 0e		 je	 SHORT $LN34@MountDrive
  000c2	8b 85 ec fd ff
	ff		 mov	 eax, DWORD PTR _hiddenHeaderOffset$[ebp]
  000c8	8b 8d f0 fd ff
	ff		 mov	 ecx, DWORD PTR _hiddenHeaderOffset$[ebp+4]
  000ce	eb 05		 jmp	 SHORT $LN35@MountDrive
$LN34@MountDrive:
  000d0	b8 00 7c 00 00	 mov	 eax, 31744		; 00007c00H
$LN35@MountDrive:

; 248  : 	Dump ("Reading volume header at %I64u\n", offset.QuadPart);
; 249  : 
; 250  : 	status = TCReadDevice (Extension->LowerDeviceObject, header, offset, TC_BOOT_ENCRYPTION_VOLUME_HEADER_SIZE);

  000d5	57		 push	 edi
  000d6	51		 push	 ecx
  000d7	50		 push	 eax
  000d8	ff b5 f8 fd ff
	ff		 push	 DWORD PTR _header$[ebp]
  000de	ff 76 1c	 push	 DWORD PTR [esi+28]
  000e1	e8 00 00 00 00	 call	 _TCReadDevice@20
  000e6	8b f8		 mov	 edi, eax

; 251  : 	if (!NT_SUCCESS (status))

  000e8	85 ff		 test	 edi, edi
  000ea	0f 8c 98 03 00
	00		 jl	 $ret$27930

; 252  : 	{
; 253  : 		Dump ("TCReadDevice error %x\n", status);
; 254  : 		goto ret;
; 255  : 	}
; 256  : 
; 257  : 	if (headerSaltCrc32)

  000f0	8b 7d 0c	 mov	 edi, DWORD PTR _headerSaltCrc32$[ebp]
  000f3	85 ff		 test	 edi, edi
  000f5	74 18		 je	 SHORT $LN51@MountDrive

; 258  : 	{
; 259  : 		uint32 saltCrc = GetCrc32 (header, PKCS5_SALT_SIZE);

  000f7	6a 40		 push	 64			; 00000040H
  000f9	ff b5 f8 fd ff
	ff		 push	 DWORD PTR _header$[ebp]
  000ff	e8 00 00 00 00	 call	 _GetCrc32@8

; 260  : 
; 261  : 		if (saltCrc != *headerSaltCrc32)

  00104	3b 07		 cmp	 eax, DWORD PTR [edi]

; 262  : 		{
; 263  : 			status = STATUS_UNSUCCESSFUL;
; 264  : 			goto ret;

  00106	0f 85 77 03 00
	00		 jne	 $LN55@MountDrive

; 265  : 		}
; 266  : 
; 267  : 		Extension->VolumeHeaderSaltCrc32 = saltCrc;

  0010c	89 46 40	 mov	 DWORD PTR [esi+64], eax
$LN51@MountDrive:

; 268  : 	}
; 269  : 
; 270  : 	Extension->HeaderCryptoInfo = crypto_open();

  0010f	e8 00 00 00 00	 call	 _crypto_open@0
  00114	89 86 04 02 00
	00		 mov	 DWORD PTR [esi+516], eax

; 271  : 	if (!Extension->HeaderCryptoInfo)

  0011a	85 c0		 test	 eax, eax
  0011c	75 0a		 jne	 SHORT $LN23@MountDrive

; 272  : 	{
; 273  : 		status = STATUS_INSUFFICIENT_RESOURCES;

  0011e	bf 9a 00 00 c0	 mov	 edi, -1073741670	; c000009aH

; 274  : 		goto ret;

  00123	e9 60 03 00 00	 jmp	 $ret$27930
$LN23@MountDrive:

; 275  : 	}
; 276  : 
; 277  : 	if (ReadVolumeHeader (!hiddenVolume, header, password, &Extension->Queue.CryptoInfo, Extension->HeaderCryptoInfo) == 0)

  00128	50		 push	 eax
  00129	33 c0		 xor	 eax, eax
  0012b	39 85 f4 fd ff
	ff		 cmp	 DWORD PTR _hiddenVolume$[ebp], eax
  00131	8d 7e 70	 lea	 edi, DWORD PTR [esi+112]
  00134	57		 push	 edi
  00135	ff b5 e4 fd ff
	ff		 push	 DWORD PTR _password$GSCopy$[ebp]
  0013b	0f 94 c0	 sete	 al
  0013e	ff b5 f8 fd ff
	ff		 push	 DWORD PTR _header$[ebp]
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 _ReadVolumeHeader@20
  0014a	85 c0		 test	 eax, eax
  0014c	0f 85 1f 03 00
	00		 jne	 $LN22@MountDrive

; 278  : 	{
; 279  : 		// Header decrypted
; 280  : 		status = STATUS_SUCCESS;
; 281  : 		Dump ("Header decrypted\n");
; 282  : 			
; 283  : 		if (Extension->Queue.CryptoInfo->hiddenVolume)

  00152	8b 07		 mov	 eax, DWORD PTR [edi]
  00154	33 c9		 xor	 ecx, ecx
  00156	39 88 a0 29 00
	00		 cmp	 DWORD PTR [eax+10656], ecx
  0015c	0f 84 e3 00 00
	00		 je	 $LN21@MountDrive

; 284  : 		{
; 285  : 			int64 hiddenPartitionOffset = BootArgs.HiddenSystemPartitionStart;

  00162	8b 0d 5a 00 00
	00		 mov	 ecx, DWORD PTR _BootArgs+90
  00168	8b 15 5e 00 00
	00		 mov	 edx, DWORD PTR _BootArgs+94

; 286  : 			Dump ("Hidden volume start offset = %I64d\n", Extension->Queue.CryptoInfo->EncryptedAreaStart.Value + hiddenPartitionOffset);
; 287  : 			
; 288  : 			Extension->HiddenSystem = TRUE;

  0016e	89 9e 08 02 00
	00		 mov	 DWORD PTR [esi+520], ebx

; 289  : 
; 290  : 			Extension->Queue.RemapEncryptedArea = TRUE;

  00174	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx

; 291  : 			Extension->Queue.RemappedAreaOffset = hiddenPartitionOffset + Extension->Queue.CryptoInfo->EncryptedAreaStart.Value - BootArgs.DecoySystemPartitionStart;

  0017a	8b b8 50 44 00
	00		 mov	 edi, DWORD PTR [eax+17488]
  00180	2b 3d 62 00 00
	00		 sub	 edi, DWORD PTR _BootArgs+98
  00186	8b 98 54 44 00
	00		 mov	 ebx, DWORD PTR [eax+17492]
  0018c	1b 1d 66 00 00
	00		 sbb	 ebx, DWORD PTR _BootArgs+102
  00192	03 f9		 add	 edi, ecx
  00194	13 da		 adc	 ebx, edx
  00196	89 be a8 00 00
	00		 mov	 DWORD PTR [esi+168], edi
  0019c	89 9e ac 00 00
	00		 mov	 DWORD PTR [esi+172], ebx

; 292  : 			Extension->Queue.RemappedAreaDataUnitOffset = Extension->Queue.CryptoInfo->EncryptedAreaStart.Value / ENCRYPTION_DATA_UNIT_SIZE - BootArgs.DecoySystemPartitionStart / ENCRYPTION_DATA_UNIT_SIZE;

  001a2	8b 3d 62 00 00
	00		 mov	 edi, DWORD PTR _BootArgs+98
  001a8	8b 1d 66 00 00
	00		 mov	 ebx, DWORD PTR _BootArgs+102
  001ae	89 8d ec fd ff
	ff		 mov	 DWORD PTR _hiddenPartitionOffset$27940[ebp], ecx
  001b4	8b 88 50 44 00
	00		 mov	 ecx, DWORD PTR [eax+17488]
  001ba	89 95 f0 fd ff
	ff		 mov	 DWORD PTR _hiddenPartitionOffset$27940[ebp+4], edx
  001c0	8b 90 54 44 00
	00		 mov	 edx, DWORD PTR [eax+17492]
  001c6	0f ac d1 09	 shrd	 ecx, edx, 9
  001ca	0f ac df 09	 shrd	 edi, ebx, 9
  001ce	c1 ea 09	 shr	 edx, 9
  001d1	c1 eb 09	 shr	 ebx, 9
  001d4	2b cf		 sub	 ecx, edi
  001d6	1b d3		 sbb	 edx, ebx
  001d8	89 8e b0 00 00
	00		 mov	 DWORD PTR [esi+176], ecx
  001de	89 96 b4 00 00
	00		 mov	 DWORD PTR [esi+180], edx

; 293  : 			
; 294  : 			Extension->Queue.CryptoInfo->EncryptedAreaStart.Value = BootArgs.DecoySystemPartitionStart;

  001e4	8b 0d 62 00 00
	00		 mov	 ecx, DWORD PTR _BootArgs+98

; 295  : 			
; 296  : 			if (Extension->Queue.CryptoInfo->VolumeSize.Value > hiddenPartitionOffset - BootArgs.DecoySystemPartitionStart)

  001ea	8b 95 f0 fd ff
	ff		 mov	 edx, DWORD PTR _hiddenPartitionOffset$27940[ebp+4]
  001f0	89 88 50 44 00
	00		 mov	 DWORD PTR [eax+17488], ecx
  001f6	8b 0d 66 00 00
	00		 mov	 ecx, DWORD PTR _BootArgs+102
  001fc	89 88 54 44 00
	00		 mov	 DWORD PTR [eax+17492], ecx
  00202	8b 8d ec fd ff
	ff		 mov	 ecx, DWORD PTR _hiddenPartitionOffset$27940[ebp]
  00208	2b 0d 62 00 00
	00		 sub	 ecx, DWORD PTR _BootArgs+98
  0020e	8d 7e 70	 lea	 edi, DWORD PTR [esi+112]
  00211	8b 07		 mov	 eax, DWORD PTR [edi]
  00213	1b 15 66 00 00
	00		 sbb	 edx, DWORD PTR _BootArgs+102
  00219	8b 98 4c 44 00
	00		 mov	 ebx, DWORD PTR [eax+17484]
  0021f	3b da		 cmp	 ebx, edx
  00221	72 30		 jb	 SHORT $LN48@MountDrive
  00223	77 0a		 ja	 SHORT $LN46@MountDrive
  00225	8b 90 48 44 00
	00		 mov	 edx, DWORD PTR [eax+17480]
  0022b	3b d1		 cmp	 edx, ecx
  0022d	76 24		 jbe	 SHORT $LN48@MountDrive
$LN46@MountDrive:

; 297  : 				TC_THROW_FATAL_EXCEPTION;

  0022f	68 43 54 00 00	 push	 21571			; 00005443H
  00234	6a 00		 push	 0
  00236	6a 00		 push	 0
  00238	68 29 01 00 00	 push	 297			; 00000129H
$LN56@MountDrive:
  0023d	6a 29		 push	 41			; 00000029H
  0023f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeBugCheckEx@20
$LN57@MountDrive:
$LN21@MountDrive:

; 298  : 
; 299  : 			Dump ("RemappedAreaOffset = %I64d\n", Extension->Queue.RemappedAreaOffset);
; 300  : 			Dump ("RemappedAreaDataUnitOffset = %I64d\n", Extension->Queue.RemappedAreaDataUnitOffset);
; 301  : 		}
; 302  : 		else
; 303  : 		{
; 304  : 			Extension->HiddenSystem = FALSE;

  00245	89 8e 08 02 00
	00		 mov	 DWORD PTR [esi+520], ecx

; 305  : 			Extension->Queue.RemapEncryptedArea = FALSE;

  0024b	89 8e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ecx
  00251	eb 03		 jmp	 SHORT $LN19@MountDrive
$LN48@MountDrive:
  00253	33 db		 xor	 ebx, ebx
  00255	43		 inc	 ebx
$LN19@MountDrive:

; 306  : 		}
; 307  : 
; 308  : 		Extension->ConfiguredEncryptedAreaStart = Extension->Queue.CryptoInfo->EncryptedAreaStart.Value;

  00256	8b 88 50 44 00
	00		 mov	 ecx, DWORD PTR [eax+17488]
  0025c	89 4e 30	 mov	 DWORD PTR [esi+48], ecx
  0025f	8b 88 54 44 00
	00		 mov	 ecx, DWORD PTR [eax+17492]
  00265	89 4e 34	 mov	 DWORD PTR [esi+52], ecx

; 309  : 		Extension->ConfiguredEncryptedAreaEnd = Extension->Queue.CryptoInfo->EncryptedAreaStart.Value + Extension->Queue.CryptoInfo->VolumeSize.Value - 1;

  00268	8b 88 48 44 00
	00		 mov	 ecx, DWORD PTR [eax+17480]
  0026e	03 88 50 44 00
	00		 add	 ecx, DWORD PTR [eax+17488]
  00274	8b 90 4c 44 00
	00		 mov	 edx, DWORD PTR [eax+17484]
  0027a	13 90 54 44 00
	00		 adc	 edx, DWORD PTR [eax+17492]

; 310  : 
; 311  : 		Extension->Queue.EncryptedAreaStart = Extension->Queue.CryptoInfo->EncryptedAreaStart.Value;
; 312  : 		Extension->Queue.EncryptedAreaEnd = Extension->Queue.CryptoInfo->EncryptedAreaStart.Value + Extension->Queue.CryptoInfo->EncryptedAreaLength.Value - 1;
; 313  : 
; 314  : 		if (Extension->Queue.CryptoInfo->EncryptedAreaLength.Value == 0)

  00280	8b 3f		 mov	 edi, DWORD PTR [edi]
  00282	2b cb		 sub	 ecx, ebx
  00284	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
  00287	83 da 00	 sbb	 edx, 0
  0028a	89 56 3c	 mov	 DWORD PTR [esi+60], edx
  0028d	8b 88 50 44 00
	00		 mov	 ecx, DWORD PTR [eax+17488]
  00293	89 8e 90 00 00
	00		 mov	 DWORD PTR [esi+144], ecx
  00299	8b 88 54 44 00
	00		 mov	 ecx, DWORD PTR [eax+17492]
  0029f	89 8e 94 00 00
	00		 mov	 DWORD PTR [esi+148], ecx
  002a5	8b 88 58 44 00
	00		 mov	 ecx, DWORD PTR [eax+17496]
  002ab	03 88 50 44 00
	00		 add	 ecx, DWORD PTR [eax+17488]
  002b1	8b 90 5c 44 00
	00		 mov	 edx, DWORD PTR [eax+17500]
  002b7	13 90 54 44 00
	00		 adc	 edx, DWORD PTR [eax+17492]
  002bd	83 c8 ff	 or	 eax, -1
  002c0	03 c8		 add	 ecx, eax
  002c2	13 d0		 adc	 edx, eax
  002c4	89 8e 98 00 00
	00		 mov	 DWORD PTR [esi+152], ecx
  002ca	89 96 9c 00 00
	00		 mov	 DWORD PTR [esi+156], edx
  002d0	8b 8f 58 44 00
	00		 mov	 ecx, DWORD PTR [edi+17496]
  002d6	0b 8f 5c 44 00
	00		 or	 ecx, DWORD PTR [edi+17500]
  002dc	75 18		 jne	 SHORT $LN18@MountDrive

; 315  : 		{
; 316  : 			Extension->Queue.EncryptedAreaStart = -1;

  002de	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax
  002e4	89 86 94 00 00
	00		 mov	 DWORD PTR [esi+148], eax

; 317  : 			Extension->Queue.EncryptedAreaEnd = -1;

  002ea	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
  002f0	89 86 9c 00 00
	00		 mov	 DWORD PTR [esi+156], eax
$LN18@MountDrive:

; 318  : 		}
; 319  : 
; 320  : 		Dump ("Loaded: ConfiguredEncryptedAreaStart=%I64d (%I64d)  ConfiguredEncryptedAreaEnd=%I64d (%I64d)\n", Extension->ConfiguredEncryptedAreaStart / 1024 / 1024, Extension->ConfiguredEncryptedAreaStart, Extension->ConfiguredEncryptedAreaEnd / 1024 / 1024, Extension->ConfiguredEncryptedAreaEnd);
; 321  : 		Dump ("Loaded: EncryptedAreaStart=%I64d (%I64d)  EncryptedAreaEnd=%I64d (%I64d)\n", Extension->Queue.EncryptedAreaStart / 1024 / 1024, Extension->Queue.EncryptedAreaStart, Extension->Queue.EncryptedAreaEnd / 1024 / 1024, Extension->Queue.EncryptedAreaEnd);
; 322  : 
; 323  : 		// Erase boot loader scheduled keys
; 324  : 		if (BootArgs.CryptoInfoLength > 0)

  002f6	66 8b 0d 0c 00
	00 00		 mov	 cx, WORD PTR _BootArgs+12
  002fd	66 85 c9	 test	 cx, cx
  00300	76 49		 jbe	 SHORT $LN53@MountDrive

; 325  : 		{
; 326  : 			PHYSICAL_ADDRESS cryptoInfoAddress;
; 327  : 			byte *mappedCryptoInfo;
; 328  : 			
; 329  : 			cryptoInfoAddress.QuadPart = (BootLoaderSegment << 4) + BootArgs.CryptoInfoOffset;

  00302	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _BootLoaderSegment
  00309	0f b7 15 0a 00
	00 00		 movzx	 edx, WORD PTR _BootArgs+10
  00310	c1 e0 04	 shl	 eax, 4

; 330  : 			mappedCryptoInfo = MmMapIoSpace (cryptoInfoAddress, BootArgs.CryptoInfoLength, MmCached);

  00313	53		 push	 ebx
  00314	0f b7 c9	 movzx	 ecx, cx
  00317	03 c2		 add	 eax, edx
  00319	99		 cdq
  0031a	51		 push	 ecx
  0031b	52		 push	 edx
  0031c	50		 push	 eax
  0031d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmMapIoSpace@16
  00323	8b f8		 mov	 edi, eax

; 331  : 			
; 332  : 			if (mappedCryptoInfo)

  00325	85 ff		 test	 edi, edi
  00327	74 22		 je	 SHORT $LN53@MountDrive

; 333  : 			{
; 334  : 				Dump ("Wiping memory %x %d\n", cryptoInfoAddress.LowPart, BootArgs.CryptoInfoLength);
; 335  : 				memset (mappedCryptoInfo, 0, BootArgs.CryptoInfoLength);

  00329	0f b7 05 0c 00
	00 00		 movzx	 eax, WORD PTR _BootArgs+12
  00330	50		 push	 eax
  00331	6a 00		 push	 0
  00333	57		 push	 edi
  00334	e8 00 00 00 00	 call	 _memset

; 336  : 				MmUnmapIoSpace (mappedCryptoInfo, BootArgs.CryptoInfoLength);

  00339	0f b7 05 0c 00
	00 00		 movzx	 eax, WORD PTR _BootArgs+12
  00340	83 c4 0c	 add	 esp, 12			; 0000000cH
  00343	50		 push	 eax
  00344	57		 push	 edi
  00345	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmUnmapIoSpace@8
$LN53@MountDrive:

; 337  : 			}
; 338  : 		}
; 339  : 
; 340  : 		BootDriveFilterExtension = Extension;
; 341  : 		BootDriveFound = Extension->BootDrive = Extension->DriveMounted = Extension->VolumeHeaderPresent = TRUE;
; 342  : 		BootDriveFilterExtension->MagicNumber = TC_BOOT_DRIVE_FILTER_EXTENSION_MAGIC_NUMBER;
; 343  : 
; 344  : 		burn (&BootArgs.BootPassword, sizeof (BootArgs.BootPassword));

  0034b	6a 48		 push	 72			; 00000048H
  0034d	5a		 pop	 edx
  0034e	b8 12 00 00 00	 mov	 eax, OFFSET _BootArgs+18
  00353	52		 push	 edx
  00354	89 35 00 00 00
	00		 mov	 DWORD PTR _BootDriveFilterExtension, esi
  0035a	89 9e ec 01 00
	00		 mov	 DWORD PTR [esi+492], ebx
  00360	89 9e f0 01 00
	00		 mov	 DWORD PTR [esi+496], ebx
  00366	89 9e e8 01 00
	00		 mov	 DWORD PTR [esi+488], ebx
  0036c	89 1d 00 00 00
	00		 mov	 DWORD PTR _BootDriveFound, ebx
  00372	c7 46 10 54 58
	45 42		 mov	 DWORD PTR [esi+16], 1111840852 ; 42455854H
  00379	c7 46 14 45 55
	52 54		 mov	 DWORD PTR [esi+20], 1414681925 ; 54525545H
  00380	8b c8		 mov	 ecx, eax
  00382	5f		 pop	 edi
$LL37@MountDrive:
  00383	c6 00 00	 mov	 BYTE PTR [eax], 0
  00386	40		 inc	 eax
  00387	4f		 dec	 edi
  00388	75 f9		 jne	 SHORT $LL37@MountDrive
$LL12@MountDrive:
  0038a	4a		 dec	 edx
  0038b	c6 01 00	 mov	 BYTE PTR [ecx], 0
  0038e	41		 inc	 ecx
  0038f	3b d7		 cmp	 edx, edi
  00391	75 f7		 jne	 SHORT $LL12@MountDrive

; 345  : 
; 346  : 		{
; 347  : 			STORAGE_DEVICE_NUMBER storageDeviceNumber;
; 348  : 			status = SendDeviceIoControlRequest (Extension->LowerDeviceObject, IOCTL_STORAGE_GET_DEVICE_NUMBER, NULL, 0, &storageDeviceNumber, sizeof (storageDeviceNumber));

  00393	6a 0c		 push	 12			; 0000000cH
  00395	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _storageDeviceNumber$27958[ebp]
  0039b	50		 push	 eax
  0039c	57		 push	 edi
  0039d	57		 push	 edi
  0039e	68 80 10 2d 00	 push	 2953344			; 002d1080H
  003a3	ff 76 1c	 push	 DWORD PTR [esi+28]
  003a6	e8 00 00 00 00	 call	 _SendDeviceIoControlRequest@24

; 349  : 
; 350  : 			if (!NT_SUCCESS (status))

  003ab	85 c0		 test	 eax, eax
  003ad	7d 05		 jge	 SHORT $LN10@MountDrive

; 351  : 			{
; 352  : 				Dump ("Failed to get drive number - error %x\n", status);
; 353  : 				Extension->SystemStorageDeviceNumberValid = FALSE;

  003af	89 7e 28	 mov	 DWORD PTR [esi+40], edi

; 354  : 			}
; 355  : 			else

  003b2	eb 0c		 jmp	 SHORT $LN9@MountDrive
$LN10@MountDrive:

; 356  : 			{
; 357  : 				Extension->SystemStorageDeviceNumber = storageDeviceNumber.DeviceNumber;

  003b4	8b 85 ec fd ff
	ff		 mov	 eax, DWORD PTR _storageDeviceNumber$27958[ebp+4]
  003ba	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 358  : 				Extension->SystemStorageDeviceNumberValid = TRUE;

  003bd	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
$LN9@MountDrive:

; 359  : 			}
; 360  : 		}
; 361  : 
; 362  : 		status = SendDeviceIoControlRequest (Extension->LowerDeviceObject, IOCTL_DISK_GET_LENGTH_INFO, NULL, 0, &BootDriveLength, sizeof (BootDriveLength));

  003c0	6a 08		 push	 8
  003c2	68 00 00 00 00	 push	 OFFSET _BootDriveLength
  003c7	57		 push	 edi
  003c8	57		 push	 edi
  003c9	68 5c 40 07 00	 push	 475228			; 0007405cH
  003ce	ff 76 1c	 push	 DWORD PTR [esi+28]
  003d1	e8 00 00 00 00	 call	 _SendDeviceIoControlRequest@24

; 363  : 		
; 364  : 		if (!NT_SUCCESS (status))

  003d6	85 c0		 test	 eax, eax
  003d8	7d 1a		 jge	 SHORT $LN8@MountDrive

; 365  : 		{
; 366  : 			Dump ("Failed to get drive length - error %x\n", status);
; 367  : 			BootDriveLength.QuadPart = 0;

  003da	89 3d 00 00 00
	00		 mov	 DWORD PTR _BootDriveLength, edi
  003e0	89 3d 04 00 00
	00		 mov	 DWORD PTR _BootDriveLength+4, edi

; 368  : 			Extension->Queue.MaxReadAheadOffset.QuadPart = 0;

  003e6	89 be 80 01 00
	00		 mov	 DWORD PTR [esi+384], edi
  003ec	89 be 84 01 00
	00		 mov	 DWORD PTR [esi+388], edi

; 369  : 		}
; 370  : 		else

  003f2	eb 16		 jmp	 SHORT $LN7@MountDrive
$LN8@MountDrive:

; 371  : 			Extension->Queue.MaxReadAheadOffset = BootDriveLength;

  003f4	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveLength
  003f9	89 86 80 01 00
	00		 mov	 DWORD PTR [esi+384], eax
  003ff	a1 04 00 00 00	 mov	 eax, DWORD PTR _BootDriveLength+4
  00404	89 86 84 01 00
	00		 mov	 DWORD PTR [esi+388], eax
$LN7@MountDrive:

; 372  : 		
; 373  : 		status = EncryptedIoQueueStart (&Extension->Queue);

  0040a	83 c6 48	 add	 esi, 72			; 00000048H
  0040d	56		 push	 esi
  0040e	e8 00 00 00 00	 call	 _EncryptedIoQueueStart@4
  00413	8b f8		 mov	 edi, eax

; 374  : 		if (!NT_SUCCESS (status))

  00415	33 f6		 xor	 esi, esi
  00417	3b fe		 cmp	 edi, esi
  00419	7d 11		 jge	 SHORT $LN6@MountDrive

; 375  : 			TC_BUG_CHECK (status);

  0041b	68 43 54 00 00	 push	 21571			; 00005443H
  00420	56		 push	 esi
  00421	57		 push	 edi
  00422	68 77 01 00 00	 push	 375			; 00000177H
  00427	e9 11 fe ff ff	 jmp	 $LN56@MountDrive
$LN6@MountDrive:

; 376  : 
; 377  : 		if (IsOSAtLeast (WIN_VISTA))

  0042c	6a 0b		 push	 11			; 0000000bH
  0042e	e8 00 00 00 00	 call	 _IsOSAtLeast@4
  00433	85 c0		 test	 eax, eax
  00435	74 0e		 je	 SHORT $LN5@MountDrive

; 378  : 		{
; 379  : 			CrashDumpEnabled = TRUE;

  00437	89 1d 00 00 00
	00		 mov	 DWORD PTR _CrashDumpEnabled, ebx

; 380  : 			HibernationEnabled = TRUE;

  0043d	89 1d 00 00 00
	00		 mov	 DWORD PTR _HibernationEnabled, ebx
  00443	eb 0d		 jmp	 SHORT $LN3@MountDrive
$LN5@MountDrive:

; 381  : 		}
; 382  : 		else if (!LegacyHibernationDriverFilterActive)

  00445	39 35 00 00 00
	00		 cmp	 DWORD PTR _LegacyHibernationDriverFilterActive, esi
  0044b	75 05		 jne	 SHORT $LN3@MountDrive

; 383  : 			StartLegacyHibernationDriverFilter();

  0044d	e8 00 00 00 00	 call	 _StartLegacyHibernationDriverFilter@0
$LN3@MountDrive:

; 384  : 
; 385  : 		// Hidden system hibernation is not supported if an extra boot partition is present as the system is not allowed to update the boot partition
; 386  : 		if (IsHiddenSystemRunning() && (BootArgs.Flags & TC_BOOT_ARGS_FLAG_EXTRA_BOOT_PARTITION))

  00452	e8 00 00 00 00	 call	 _IsHiddenSystemRunning@0
  00457	85 c0		 test	 eax, eax
  00459	74 2d		 je	 SHORT $ret$27930
  0045b	84 1d 6a 00 00
	00		 test	 BYTE PTR _BootArgs+106, bl
  00461	74 25		 je	 SHORT $ret$27930

; 387  : 		{
; 388  : 			CrashDumpEnabled = FALSE;

  00463	89 35 00 00 00
	00		 mov	 DWORD PTR _CrashDumpEnabled, esi

; 389  : 			HibernationEnabled = FALSE;

  00469	89 35 00 00 00
	00		 mov	 DWORD PTR _HibernationEnabled, esi

; 390  : 		}
; 391  : 	}
; 392  : 	else

  0046f	eb 17		 jmp	 SHORT $ret$27930
$LN22@MountDrive:

; 393  : 	{
; 394  : 		Dump ("Header not decrypted\n");
; 395  : 		crypto_close (Extension->HeaderCryptoInfo);

  00471	ff b6 04 02 00
	00		 push	 DWORD PTR [esi+516]
  00477	e8 00 00 00 00	 call	 _crypto_close@4

; 396  : 		Extension->HeaderCryptoInfo = NULL;

  0047c	83 a6 04 02 00
	00 00		 and	 DWORD PTR [esi+516], 0
$LN55@MountDrive:

; 397  : 
; 398  : 		status = STATUS_UNSUCCESSFUL;

  00483	bf 01 00 00 c0	 mov	 edi, -1073741823	; c0000001H
$ret$27930:

; 399  : 	}
; 400  : 
; 401  : ret:
; 402  : 	TCfree (header);

  00488	68 54 43 4d 4d	 push	 1296909140		; 4d4d4354H
  0048d	ff b5 f8 fd ff
	ff		 push	 DWORD PTR _header$[ebp]
  00493	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePoolWithTag@8

; 403  : 	return status;

  00499	8b c7		 mov	 eax, edi
$LN30@MountDrive:

; 404  : }

  0049b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0049e	5f		 pop	 edi
  0049f	5e		 pop	 esi
  004a0	33 cd		 xor	 ecx, ebp
  004a2	5b		 pop	 ebx
  004a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004a8	c9		 leave
  004a9	c2 08 00	 ret	 8
$LN54@MountDrive:
_MountDrive@12 ENDP
_TEXT	ENDS
EXTRN	__imp__KeReleaseMutex@8:PROC
EXTRN	__imp__KeWaitForSingleObject@20:PROC
EXTRN	_VolumeClassFilterRegistered:DWORD
; Function compile flags: /Ogsp
;	COMDAT _CheckDeviceTypeAndMount@4
_TEXT	SEGMENT
_filterExtension$ = 8					; size = 4
_CheckDeviceTypeAndMount@4 PROC				; COMDAT

; 523  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	53		 push	 ebx

; 524  : 	if (BootArgsValid)

  00006	33 db		 xor	 ebx, ebx
  00008	39 1d 00 00 00
	00		 cmp	 DWORD PTR _BootArgsValid, ebx
  0000e	74 7f		 je	 SHORT $LN3@CheckDevic
  00010	56		 push	 esi

; 525  : 	{
; 526  : 		// Windows sometimes merges a removable drive PDO and its volume PDO to a single PDO having no volume interface (GUID_DEVINTERFACE_VOLUME).
; 527  : 		// Therefore, we need to test whether the device supports volume IOCTLs.
; 528  : 		if (VolumeClassFilterRegistered
; 529  : 			&& BootArgs.HiddenSystemPartitionStart != 0
; 530  : 			&& IsVolumeDevice (filterExtension->LowerDeviceObject))

  00011	39 1d 00 00 00
	00		 cmp	 DWORD PTR _VolumeClassFilterRegistered, ebx
  00017	74 2a		 je	 SHORT $LN4@CheckDevic
  00019	a1 5a 00 00 00	 mov	 eax, DWORD PTR _BootArgs+90
  0001e	0b 05 5e 00 00
	00		 or	 eax, DWORD PTR _BootArgs+94
  00024	74 1d		 je	 SHORT $LN4@CheckDevic
  00026	8b 75 08	 mov	 esi, DWORD PTR _filterExtension$[ebp]
  00029	57		 push	 edi
  0002a	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  0002d	e8 00 00 00 00	 call	 _IsVolumeDevice@4
  00032	5f		 pop	 edi
  00033	85 c0		 test	 eax, eax
  00035	74 0c		 je	 SHORT $LN4@CheckDevic

; 531  : 		{
; 532  : 			Dump ("Drive and volume merged pdo=%p", filterExtension->Pdo);
; 533  : 
; 534  : 			filterExtension->IsVolumeFilterDevice = TRUE;

  00037	c7 46 0c 01 00
	00 00		 mov	 DWORD PTR [esi+12], 1

; 535  : 			filterExtension->IsDriveFilterDevice = FALSE;

  0003e	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 536  : 		}
; 537  : 		else

  00041	eb 4b		 jmp	 SHORT $LN8@CheckDevic
$LN4@CheckDevic:

; 538  : 		{
; 539  : 			NTSTATUS status = KeWaitForMutexObject (&MountMutex, Executive, KernelMode, FALSE, NULL);

  00043	53		 push	 ebx
  00044	53		 push	 ebx
  00045	53		 push	 ebx
  00046	53		 push	 ebx
  00047	be 00 00 00 00	 mov	 esi, OFFSET _MountMutex
  0004c	56		 push	 esi
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeWaitForSingleObject@20

; 540  : 			if (!NT_SUCCESS (status))

  00053	3b c3		 cmp	 eax, ebx
  00055	7d 14		 jge	 SHORT $LN2@CheckDevic

; 541  : 				TC_BUG_CHECK (status);

  00057	68 43 54 00 00	 push	 21571			; 00005443H
  0005c	53		 push	 ebx
  0005d	50		 push	 eax
  0005e	68 1d 02 00 00	 push	 541			; 0000021dH
  00063	6a 29		 push	 41			; 00000029H
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeBugCheckEx@20
$LN10@CheckDevic:
$LN2@CheckDevic:

; 542  : 
; 543  : 			if (!BootDriveFound)

  0006b	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFound
  00070	85 c0		 test	 eax, eax
  00072	75 12		 jne	 SHORT $LN1@CheckDevic

; 544  : 				MountDrive (filterExtension, &BootArgs.BootPassword, &BootArgs.HeaderSaltCrc32);

  00074	8b 4d 08	 mov	 ecx, DWORD PTR _filterExtension$[ebp]
  00077	68 0e 00 00 00	 push	 OFFSET _BootArgs+14
  0007c	68 12 00 00 00	 push	 OFFSET _BootArgs+18
  00081	e8 00 00 00 00	 call	 _MountDrive@12
$LN1@CheckDevic:

; 545  : 
; 546  : 			KeReleaseMutex (&MountMutex, FALSE);

  00086	53		 push	 ebx
  00087	56		 push	 esi
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeReleaseMutex@8
$LN8@CheckDevic:
  0008e	5e		 pop	 esi
$LN3@CheckDevic:
  0008f	5b		 pop	 ebx

; 547  : 		}
; 548  : 	}
; 549  : }

  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
$LN9@CheckDevic:
_CheckDeviceTypeAndMount@4 ENDP
_TEXT	ENDS
EXTRN	__imp__KeSetEvent@12:PROC
; Function compile flags: /Ogsp
;	COMDAT _MountDriveWorkItemRoutine@8
_TEXT	SEGMENT
_deviceObject$ = 8					; size = 4
_filterExtension$ = 12					; size = 4
_MountDriveWorkItemRoutine@8 PROC			; COMDAT

; 553  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	56		 push	 esi

; 554  : 	CheckDeviceTypeAndMount (filterExtension);

  00006	8b 75 0c	 mov	 esi, DWORD PTR _filterExtension$[ebp]
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _CheckDeviceTypeAndMount@4

; 555  : 	KeSetEvent (&filterExtension->MountWorkItemCompletedEvent, IO_NO_INCREMENT, FALSE);

  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	81 c6 f4 01 00
	00		 add	 esi, 500		; 000001f4H
  00019	56		 push	 esi
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSetEvent@12
  00020	5e		 pop	 esi

; 556  : }

  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
_MountDriveWorkItemRoutine@8 ENDP
_TEXT	ENDS
EXTRN	__imp__IoFreeWorkItem@4:PROC
EXTRN	__imp__IoQueueWorkItem@16:PROC
EXTRN	__imp__KeInitializeEvent@12:PROC
EXTRN	__imp__IoAllocateWorkItem@4:PROC
EXTRN	__imp__KeGetCurrentIrql@0:PROC
; Function compile flags: /Ogsp
;	COMDAT _OnStartDeviceCompleted@12
_TEXT	SEGMENT
_filterDeviceObject$ = 8				; size = 4
_Irp$ = 12						; size = 4
_workItem$28100 = 16					; size = 4
_Extension$ = 16					; size = 4
_OnStartDeviceCompleted@12 PROC				; COMDAT

; 560  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 561  : 	if (Irp->PendingReturned)

  00005	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  00008	53		 push	 ebx
  00009	33 db		 xor	 ebx, ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	38 58 21	 cmp	 BYTE PTR [eax+33], bl
  00010	74 07		 je	 SHORT $LN8@OnStartDev

; 562  : 		IoMarkIrpPending (Irp);

  00012	8b 40 60	 mov	 eax, DWORD PTR [eax+96]
  00015	80 48 03 01	 or	 BYTE PTR [eax+3], 1
$LN8@OnStartDev:

; 563  : 
; 564  : 	if (Extension->LowerDeviceObject->Characteristics & FILE_REMOVABLE_MEDIA)

  00019	8b 75 10	 mov	 esi, DWORD PTR _Extension$[ebp]
  0001c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001f	f6 40 20 01	 test	 BYTE PTR [eax+32], 1
  00023	8b 7d 08	 mov	 edi, DWORD PTR _filterDeviceObject$[ebp]
  00026	74 04		 je	 SHORT $LN4@OnStartDev

; 565  : 		filterDeviceObject->Characteristics |= FILE_REMOVABLE_MEDIA;

  00028	83 4f 20 01	 or	 DWORD PTR [edi+32], 1
$LN4@OnStartDev:

; 566  : 
; 567  : 	if (KeGetCurrentIrql() == PASSIVE_LEVEL)

  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeGetCurrentIrql@0
  00032	84 c0		 test	 al, al
  00034	75 08		 jne	 SHORT $LN3@OnStartDev

; 568  : 	{
; 569  : 		CheckDeviceTypeAndMount (Extension);

  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 _CheckDeviceTypeAndMount@4

; 570  : 	}
; 571  : 	else

  0003c	eb 13		 jmp	 SHORT $LN12@OnStartDev
$LN3@OnStartDev:

; 572  : 	{
; 573  : 		PIO_WORKITEM workItem = IoAllocateWorkItem (filterDeviceObject);

  0003e	57		 push	 edi
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoAllocateWorkItem@4
  00045	89 45 10	 mov	 DWORD PTR _workItem$28100[ebp], eax

; 574  : 		if (!workItem)

  00048	3b c3		 cmp	 eax, ebx
  0004a	75 20		 jne	 SHORT $LN1@OnStartDev
  0004c	bb 9a 00 00 c0	 mov	 ebx, -1073741670	; c000009aH
$LN12@OnStartDev:

; 575  : 		{
; 576  : 			IoReleaseRemoveLock (&Extension->Queue.RemoveLock, Irp);

  00051	6a 18		 push	 24			; 00000018H
  00053	ff 75 0c	 push	 DWORD PTR _Irp$[ebp]
  00056	81 c6 b8 00 00
	00		 add	 esi, 184		; 000000b8H
  0005c	56		 push	 esi
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoReleaseRemoveLockEx@12
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi

; 577  : 			return STATUS_INSUFFICIENT_RESOURCES;

  00065	8b c3		 mov	 eax, ebx
  00067	5b		 pop	 ebx

; 585  : 	}
; 586  : 
; 587  : 	IoReleaseRemoveLock (&Extension->Queue.RemoveLock, Irp);
; 588  : 	return STATUS_CONTINUE_COMPLETION;
; 589  : }

  00068	5d		 pop	 ebp
  00069	c2 0c 00	 ret	 12			; 0000000cH
$LN1@OnStartDev:

; 578  : 		}
; 579  : 
; 580  : 		KeInitializeEvent (&Extension->MountWorkItemCompletedEvent, SynchronizationEvent, FALSE);

  0006c	53		 push	 ebx
  0006d	6a 01		 push	 1
  0006f	8d be f4 01 00
	00		 lea	 edi, DWORD PTR [esi+500]
  00075	57		 push	 edi
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeEvent@12

; 581  : 		IoQueueWorkItem (workItem, MountDriveWorkItemRoutine, DelayedWorkQueue, Extension); 

  0007c	56		 push	 esi
  0007d	6a 01		 push	 1
  0007f	68 00 00 00 00	 push	 OFFSET _MountDriveWorkItemRoutine@8
  00084	ff 75 10	 push	 DWORD PTR _workItem$28100[ebp]
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoQueueWorkItem@16

; 582  : 
; 583  : 		KeWaitForSingleObject (&Extension->MountWorkItemCompletedEvent, Executive, KernelMode, FALSE, NULL);

  0008d	53		 push	 ebx
  0008e	53		 push	 ebx
  0008f	53		 push	 ebx
  00090	53		 push	 ebx
  00091	57		 push	 edi
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeWaitForSingleObject@20

; 584  : 		IoFreeWorkItem (workItem);

  00098	ff 75 10	 push	 DWORD PTR _workItem$28100[ebp]
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoFreeWorkItem@4
  000a1	eb ae		 jmp	 SHORT $LN12@OnStartDev
_OnStartDeviceCompleted@12 ENDP
_TEXT	ENDS
EXTRN	__imp__IoReleaseRemoveLockAndWaitEx@12:PROC
; Function compile flags: /Ogsp
;	COMDAT _DispatchPnp@16
_TEXT	SEGMENT
_DeviceObject$ = 8					; size = 4
_irpSp$ = 12						; size = 4
_DispatchPnp@16 PROC					; COMDAT
; _Irp$ = ecx
; _Extension$ = eax

; 593  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	57		 push	 edi

; 594  : 	NTSTATUS status;
; 595  : 
; 596  : 	status = IoAcquireRemoveLock (&Extension->Queue.RemoveLock, Irp);

  00008	6a 18		 push	 24			; 00000018H
  0000a	6a 01		 push	 1
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@FNODOBFM@
  00011	8b f0		 mov	 esi, eax
  00013	8b f9		 mov	 edi, ecx
  00015	57		 push	 edi
  00016	8d 9e b8 00 00
	00		 lea	 ebx, DWORD PTR [esi+184]
  0001c	53		 push	 ebx
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoAcquireRemoveLockEx@20

; 597  : 	if (!NT_SUCCESS (status))

  00023	85 c0		 test	 eax, eax
  00025	7d 0e		 jge	 SHORT $LN15@DispatchPn

; 598  : 		return TCCompleteIrp (Irp, status, 0);

  00027	6a 00		 push	 0
  00029	50		 push	 eax
$LN28@DispatchPn:
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 _TCCompleteIrp@12
  00030	e9 24 01 00 00	 jmp	 $LN16@DispatchPn
$LN15@DispatchPn:

; 599  : 
; 600  : 	switch (irpSp->MinorFunction)

  00035	8b 45 0c	 mov	 eax, DWORD PTR _irpSp$[ebp]
  00038	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  0003c	83 e8 00	 sub	 eax, 0
  0003f	0f 84 04 01 00
	00		 je	 $LN12@DispatchPn
  00045	48		 dec	 eax
  00046	48		 dec	 eax
  00047	0f 84 a3 00 00
	00		 je	 $LN4@DispatchPn
  0004d	83 e8 14	 sub	 eax, 20			; 00000014H
  00050	74 25		 je	 SHORT $LN11@DispatchPn

; 658  : 
; 659  : 
; 660  : 	default:
; 661  : 		status = PassIrp (Extension->LowerDeviceObject, Irp);

  00052	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00055	fe 47 23	 inc	 BYTE PTR [edi+35]
  00058	83 47 60 24	 add	 DWORD PTR [edi+96], 36	; 00000024H
  0005c	8b d7		 mov	 edx, edi
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCallDriver@8

; 662  : 		IoReleaseRemoveLock (&Extension->Queue.RemoveLock, Irp);

  00064	6a 18		 push	 24			; 00000018H
  00066	57		 push	 edi
  00067	53		 push	 ebx
  00068	8b f0		 mov	 esi, eax
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoReleaseRemoveLockEx@12

; 663  : 	}
; 664  : 	return status;

  00070	8b c6		 mov	 eax, esi
  00072	e9 e2 00 00 00	 jmp	 $LN16@DispatchPn
$LN11@DispatchPn:

; 605  : 
; 606  : 
; 607  : 	case IRP_MN_DEVICE_USAGE_NOTIFICATION:
; 608  : 		Dump ("IRP_MN_DEVICE_USAGE_NOTIFICATION type=%d\n", (int) irpSp->Parameters.UsageNotification.Type);
; 609  : 
; 610  : 		{
; 611  : 			PDEVICE_OBJECT attachedDevice = IoGetAttachedDeviceReference (DeviceObject);

  00077	ff 75 08	 push	 DWORD PTR _DeviceObject$[ebp]
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoGetAttachedDeviceReference@4

; 612  : 
; 613  : 			if (attachedDevice == DeviceObject || (attachedDevice->Flags & DO_POWER_PAGABLE))

  00080	8b 4d 08	 mov	 ecx, DWORD PTR _DeviceObject$[ebp]
  00083	ba 00 20 00 00	 mov	 edx, 8192		; 00002000H
  00088	3b c1		 cmp	 eax, ecx
  0008a	74 05		 je	 SHORT $LN9@DispatchPn
  0008c	85 50 1c	 test	 DWORD PTR [eax+28], edx
  0008f	74 03		 je	 SHORT $LN10@DispatchPn
$LN9@DispatchPn:

; 614  : 				DeviceObject->Flags |= DO_POWER_PAGABLE;

  00091	09 51 1c	 or	 DWORD PTR [ecx+28], edx
$LN10@DispatchPn:

; 615  : 
; 616  : 			ObDereferenceObject (attachedDevice);

  00094	8b c8		 mov	 ecx, eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@ObfDereferenceObject@4

; 617  : 		}
; 618  : 
; 619  : 		// Prevent creation of hibernation and crash dump files if required
; 620  : 		if (irpSp->Parameters.UsageNotification.InPath
; 621  : 			&& (
; 622  : 				(irpSp->Parameters.UsageNotification.Type == DeviceUsageTypeDumpFile && !CrashDumpEnabled)
; 623  : 				|| (irpSp->Parameters.UsageNotification.Type == DeviceUsageTypeHibernation && !HibernationEnabled)
; 624  : 				)
; 625  : 			)

  0009c	8b 45 0c	 mov	 eax, DWORD PTR _irpSp$[ebp]
  0009f	80 78 04 00	 cmp	 BYTE PTR [eax+4], 0
  000a3	74 44		 je	 SHORT $LN8@DispatchPn
  000a5	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000a8	83 f8 03	 cmp	 eax, 3
  000ab	75 09		 jne	 SHORT $LN26@DispatchPn
  000ad	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _CrashDumpEnabled, 0
  000b4	74 0e		 je	 SHORT $LN7@DispatchPn
$LN26@DispatchPn:
  000b6	83 f8 02	 cmp	 eax, 2
  000b9	75 2e		 jne	 SHORT $LN8@DispatchPn
  000bb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _HibernationEnabled, 0
  000c2	75 25		 jne	 SHORT $LN8@DispatchPn
$LN7@DispatchPn:

; 626  : 		{
; 627  : 			IoReleaseRemoveLock (&Extension->Queue.RemoveLock, Irp);

  000c4	6a 18		 push	 24			; 00000018H
  000c6	57		 push	 edi
  000c7	53		 push	 ebx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoReleaseRemoveLockEx@12

; 628  : 
; 629  : 			if (irpSp->Parameters.UsageNotification.Type == DeviceUsageTypeHibernation)

  000ce	8b 45 0c	 mov	 eax, DWORD PTR _irpSp$[ebp]
  000d1	83 78 08 02	 cmp	 DWORD PTR [eax+8], 2
  000d5	75 06		 jne	 SHORT $LN5@DispatchPn

; 630  : 				++HibernationPreventionCount;

  000d7	ff 05 00 00 00
	00		 inc	 DWORD PTR _HibernationPreventionCount
$LN5@DispatchPn:

; 631  : 
; 632  : 			Dump ("Preventing dump type=%d\n", (int) irpSp->Parameters.UsageNotification.Type);
; 633  : 			return TCCompleteIrp (Irp, STATUS_UNSUCCESSFUL, 0);

  000dd	6a 00		 push	 0
  000df	68 01 00 00 c0	 push	 -1073741823		; c0000001H
  000e4	e9 41 ff ff ff	 jmp	 $LN28@DispatchPn
$LN8@DispatchPn:

; 634  : 		}
; 635  : 
; 636  : 		return PassFilteredIrp (Extension->LowerDeviceObject, Irp, OnDeviceUsageNotificationCompleted, Extension);

  000e9	bb 00 00 00 00	 mov	 ebx, OFFSET _OnDeviceUsageNotificationCompleted@12
  000ee	eb 5e		 jmp	 SHORT $LN27@DispatchPn
$LN4@DispatchPn:

; 637  : 
; 638  : 
; 639  : 	case IRP_MN_REMOVE_DEVICE:
; 640  : 		Dump ("IRP_MN_REMOVE_DEVICE pdo=%p\n", Extension->Pdo);
; 641  : 
; 642  : 		IoReleaseRemoveLockAndWait (&Extension->Queue.RemoveLock, Irp);

  000f0	6a 18		 push	 24			; 00000018H
  000f2	57		 push	 edi
  000f3	53		 push	 ebx
  000f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoReleaseRemoveLockAndWaitEx@12

; 643  : 		status = PassIrp (Extension->LowerDeviceObject, Irp);

  000fa	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  000fd	fe 47 23	 inc	 BYTE PTR [edi+35]
  00100	83 47 60 24	 add	 DWORD PTR [edi+96], 36	; 00000024H
  00104	8b d7		 mov	 edx, edi
  00106	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCallDriver@8

; 644  : 
; 645  : 		IoDetachDevice (Extension->LowerDeviceObject);

  0010c	ff 76 1c	 push	 DWORD PTR [esi+28]
  0010f	8b d8		 mov	 ebx, eax
  00111	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoDetachDevice@4

; 646  : 
; 647  : 		if (Extension->DriveMounted)

  00117	33 ff		 xor	 edi, edi
  00119	39 be f0 01 00
	00		 cmp	 DWORD PTR [esi+496], edi
  0011f	74 07		 je	 SHORT $LN3@DispatchPn

; 648  : 			DismountDrive (Extension, TRUE);

  00121	6a 01		 push	 1
  00123	e8 00 00 00 00	 call	 _DismountDrive@8
$LN3@DispatchPn:

; 649  : 
; 650  : 		if (Extension->BootDrive)

  00128	39 be e8 01 00
	00		 cmp	 DWORD PTR [esi+488], edi
  0012e	74 0c		 je	 SHORT $LN2@DispatchPn

; 651  : 		{
; 652  : 			BootDriveFound = FALSE;

  00130	89 3d 00 00 00
	00		 mov	 DWORD PTR _BootDriveFound, edi

; 653  : 			BootDriveFilterExtension = NULL;

  00136	89 3d 00 00 00
	00		 mov	 DWORD PTR _BootDriveFilterExtension, edi
$LN2@DispatchPn:

; 654  : 		}
; 655  : 
; 656  : 		IoDeleteDevice (DeviceObject);

  0013c	ff 75 08	 push	 DWORD PTR _DeviceObject$[ebp]
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoDeleteDevice@4

; 657  : 		return status;

  00145	8b c3		 mov	 eax, ebx
  00147	eb 10		 jmp	 SHORT $LN16@DispatchPn
$LN12@DispatchPn:

; 601  : 	{
; 602  : 	case IRP_MN_START_DEVICE:
; 603  : 		Dump ("IRP_MN_START_DEVICE pdo=%p\n", Extension->Pdo);
; 604  : 		return PassFilteredIrp (Extension->LowerDeviceObject, Irp, OnStartDeviceCompleted, Extension);

  00149	bb 00 00 00 00	 mov	 ebx, OFFSET _OnStartDeviceCompleted@12
$LN27@DispatchPn:
  0014e	56		 push	 esi
  0014f	ff 76 1c	 push	 DWORD PTR [esi+28]
  00152	8b d7		 mov	 edx, edi
  00154	e8 00 00 00 00	 call	 _PassFilteredIrp@16
$LN16@DispatchPn:
  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi
  0015b	5b		 pop	 ebx

; 665  : }

  0015c	5d		 pop	 ebp
  0015d	c2 08 00	 ret	 8
_DispatchPnp@16 ENDP
_TEXT	ENDS
PUBLIC	_DriveFilterDispatchIrp@8
EXTRN	_TCCompleteDiskIrp@12:PROC
EXTRN	_EncryptedIoQueueAddIrp@8:PROC
; Function compile flags: /Ogsp
;	COMDAT _DriveFilterDispatchIrp@8
_TEXT	SEGMENT
_DeviceObject$ = 8					; size = 4
_Irp$ = 12						; size = 4
_DriveFilterDispatchIrp@8 PROC				; COMDAT

; 706  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 707  : 	DriveFilterExtension *Extension = (DriveFilterExtension *) DeviceObject->DeviceExtension;

  00005	8b 55 08	 mov	 edx, DWORD PTR _DeviceObject$[ebp]
  00008	56		 push	 esi

; 708  : 	PIO_STACK_LOCATION irpSp = IoGetCurrentIrpStackLocation (Irp);

  00009	8b 75 0c	 mov	 esi, DWORD PTR _Irp$[ebp]
  0000c	8b 46 60	 mov	 eax, DWORD PTR [esi+96]

; 709  : 	NTSTATUS status;
; 710  : 
; 711  : 	ASSERT (!Extension->bRootDevice && Extension->IsDriveFilterDevice);
; 712  : 
; 713  : 	switch (irpSp->MajorFunction)

  0000f	8a 08		 mov	 cl, BYTE PTR [eax]
  00011	57		 push	 edi
  00012	8b 7a 28	 mov	 edi, DWORD PTR [edx+40]
  00015	80 f9 03	 cmp	 cl, 3
  00018	72 4f		 jb	 SHORT $LN5@DriveFilte@2
  0001a	80 f9 04	 cmp	 cl, 4
  0001d	76 20		 jbe	 SHORT $LN6@DriveFilte@2
  0001f	80 f9 16	 cmp	 cl, 22			; 00000016H
  00022	74 12		 je	 SHORT $LN2@DriveFilte@2
  00024	80 f9 1b	 cmp	 cl, 27			; 0000001bH
  00027	75 40		 jne	 SHORT $LN5@DriveFilte@2

; 725  : 		}
; 726  : 		break;
; 727  : 
; 728  : 	case IRP_MJ_PNP:
; 729  : 		return DispatchPnp (DeviceObject, Irp, Extension, irpSp);

  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b c7		 mov	 eax, edi
  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 _DispatchPnp@16
  00034	eb 7b		 jmp	 SHORT $LN9@DriveFilte@2
$LN2@DriveFilte@2:

; 730  : 
; 731  : 	case IRP_MJ_POWER:
; 732  : 		return DispatchPower (DeviceObject, Irp, Extension, irpSp);

  00036	8b cf		 mov	 ecx, edi
  00038	e8 00 00 00 00	 call	 _DispatchPower@16
  0003d	eb 72		 jmp	 SHORT $LN9@DriveFilte@2
$LN6@DriveFilte@2:

; 714  : 	{
; 715  : 	case IRP_MJ_READ:
; 716  : 	case IRP_MJ_WRITE:
; 717  : 		if (Extension->BootDrive)

  0003f	83 bf e8 01 00
	00 00		 cmp	 DWORD PTR [edi+488], 0
  00046	74 21		 je	 SHORT $LN5@DriveFilte@2

; 718  : 		{
; 719  : 			status = EncryptedIoQueueAddIrp (&Extension->Queue, Irp);

  00048	56		 push	 esi
  00049	83 c7 48	 add	 edi, 72			; 00000048H
  0004c	57		 push	 edi
  0004d	e8 00 00 00 00	 call	 _EncryptedIoQueueAddIrp@8
  00052	8b f8		 mov	 edi, eax

; 720  : 			
; 721  : 			if (status != STATUS_PENDING)

  00054	81 ff 03 01 00
	00		 cmp	 edi, 259		; 00000103H
  0005a	74 09		 je	 SHORT $LN4@DriveFilte@2

; 722  : 				TCCompleteDiskIrp (Irp, status, 0);

  0005c	6a 00		 push	 0
  0005e	57		 push	 edi
  0005f	56		 push	 esi
  00060	e8 00 00 00 00	 call	 _TCCompleteDiskIrp@12
$LN4@DriveFilte@2:

; 723  : 
; 724  : 			return status;

  00065	8b c7		 mov	 eax, edi
  00067	eb 48		 jmp	 SHORT $LN9@DriveFilte@2
$LN5@DriveFilte@2:
  00069	53		 push	 ebx

; 733  : 	}
; 734  : 
; 735  : 	status = IoAcquireRemoveLock (&Extension->Queue.RemoveLock, Irp);

  0006a	6a 18		 push	 24			; 00000018H
  0006c	6a 01		 push	 1
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@FNODOBFM@
  00073	56		 push	 esi
  00074	8d 9f b8 00 00
	00		 lea	 ebx, DWORD PTR [edi+184]
  0007a	53		 push	 ebx
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoAcquireRemoveLockEx@20

; 736  : 	if (!NT_SUCCESS (status))

  00081	85 c0		 test	 eax, eax
  00083	7d 0b		 jge	 SHORT $LN1@DriveFilte@2

; 737  : 		return TCCompleteIrp (Irp, status, 0);

  00085	6a 00		 push	 0
  00087	50		 push	 eax
  00088	56		 push	 esi
  00089	e8 00 00 00 00	 call	 _TCCompleteIrp@12
  0008e	eb 20		 jmp	 SHORT $LN17@DriveFilte@2
$LN1@DriveFilte@2:

; 738  : 
; 739  : 	status = PassIrp (Extension->LowerDeviceObject, Irp);

  00090	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  00093	fe 46 23	 inc	 BYTE PTR [esi+35]
  00096	83 46 60 24	 add	 DWORD PTR [esi+96], 36	; 00000024H
  0009a	8b d6		 mov	 edx, esi
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCallDriver@8

; 740  : 
; 741  : 	IoReleaseRemoveLock (&Extension->Queue.RemoveLock, Irp);

  000a2	6a 18		 push	 24			; 00000018H
  000a4	56		 push	 esi
  000a5	53		 push	 ebx
  000a6	8b f8		 mov	 edi, eax
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoReleaseRemoveLockEx@12

; 742  : 	return status;

  000ae	8b c7		 mov	 eax, edi
$LN17@DriveFilte@2:
  000b0	5b		 pop	 ebx
$LN9@DriveFilte@2:
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi

; 743  : }

  000b3	5d		 pop	 ebp
  000b4	c2 08 00	 ret	 8
_DriveFilterDispatchIrp@8 ENDP
_TEXT	ENDS
PUBLIC	_StartBootEncryptionSetup@12
EXTRN	_TCStartThread@12:PROC
; Function compile flags: /Ogsp
;	COMDAT _StartBootEncryptionSetup@12
_TEXT	SEGMENT
_DeviceObject$ = 8					; size = 4
_irp$ = 12						; size = 4
_irpSp$ = 16						; size = 4
_StartBootEncryptionSetup@12 PROC			; COMDAT

; 1471 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 1472 : 	NTSTATUS status;
; 1473 : 
; 1474 : 	if (!UserCanAccessDriveDevice())

  00005	e8 00 00 00 00	 call	 _UserCanAccessDriveDevice@0
  0000a	85 c0		 test	 eax, eax
  0000c	75 0a		 jne	 SHORT $LN5@StartBootE

; 1475 : 		return STATUS_ACCESS_DENIED;

  0000e	b8 22 00 00 c0	 mov	 eax, -1073741790	; c0000022H
  00013	e9 dd 00 00 00	 jmp	 $LN6@StartBootE
$LN5@StartBootE:

; 1476 : 
; 1477 : 	if (SetupInProgress || !BootDriveFound || !BootDriveFilterExtension
; 1478 : 		|| !BootDriveFilterExtension->DriveMounted
; 1479 : 		|| BootDriveFilterExtension->HiddenSystem
; 1480 : 		|| irpSp->Parameters.DeviceIoControl.InputBufferLength < sizeof (BootEncryptionSetupRequest))

  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR _SetupInProgress
  0001d	53		 push	 ebx
  0001e	85 c0		 test	 eax, eax
  00020	0f 85 c9 00 00
	00		 jne	 $LN3@StartBootE
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFound
  0002b	85 c0		 test	 eax, eax
  0002d	0f 84 bc 00 00
	00		 je	 $LN3@StartBootE
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  00038	33 db		 xor	 ebx, ebx
  0003a	3b c3		 cmp	 eax, ebx
  0003c	0f 84 ad 00 00
	00		 je	 $LN3@StartBootE
  00042	39 98 f0 01 00
	00		 cmp	 DWORD PTR [eax+496], ebx
  00048	0f 84 a1 00 00
	00		 je	 $LN3@StartBootE
  0004e	39 98 08 02 00
	00		 cmp	 DWORD PTR [eax+520], ebx
  00054	0f 85 95 00 00
	00		 jne	 $LN3@StartBootE
  0005a	8b 4d 10	 mov	 ecx, DWORD PTR _irpSp$[ebp]
  0005d	83 79 08 10	 cmp	 DWORD PTR [ecx+8], 16	; 00000010H
  00061	0f 82 88 00 00
	00		 jb	 $LN3@StartBootE

; 1482 : 
; 1483 : 	if (EncryptionSetupThread)

  00067	39 1d 00 00 00
	00		 cmp	 DWORD PTR _EncryptionSetupThread, ebx
  0006d	74 0a		 je	 SHORT $LN2@StartBootE

; 1484 : 		AbortBootEncryptionSetup();

  0006f	e8 00 00 00 00	 call	 _AbortBootEncryptionSetup@0
  00074	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
$LN2@StartBootE:

; 1485 : 
; 1486 : 	SetupRequest = *(BootEncryptionSetupRequest *) irp->AssociatedIrp.SystemBuffer;

  00079	8b 4d 0c	 mov	 ecx, DWORD PTR _irp$[ebp]
  0007c	56		 push	 esi
  0007d	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  00080	57		 push	 edi
  00081	bf 00 00 00 00	 mov	 edi, OFFSET _SetupRequest
  00086	a5		 movsd
  00087	a5		 movsd
  00088	a5		 movsd
  00089	a5		 movsd
  0008a	5f		 pop	 edi

; 1487 : 
; 1488 : 	EncryptionSetupThreadAbortRequested = FALSE;

  0008b	89 1d 00 00 00
	00		 mov	 DWORD PTR _EncryptionSetupThreadAbortRequested, ebx

; 1489 : 	KeInitializeSpinLock (&SetupStatusSpinLock);

  00091	89 1d 00 00 00
	00		 mov	 DWORD PTR _SetupStatusSpinLock, ebx
  00097	5e		 pop	 esi

; 1490 : 	SetupStatusEncryptedAreaEnd = BootDriveFilterExtension ? BootDriveFilterExtension->Queue.EncryptedAreaEnd : -1;

  00098	3b c3		 cmp	 eax, ebx
  0009a	74 1d		 je	 SHORT $LN8@StartBootE
  0009c	8b 80 98 00 00
	00		 mov	 eax, DWORD PTR [eax+152]
  000a2	a3 00 00 00 00	 mov	 DWORD PTR _SetupStatusEncryptedAreaEnd, eax
  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  000ac	8b 80 9c 00 00
	00		 mov	 eax, DWORD PTR [eax+156]
  000b2	a3 04 00 00 00	 mov	 DWORD PTR _SetupStatusEncryptedAreaEnd+4, eax
  000b7	eb 0e		 jmp	 SHORT $LN9@StartBootE
$LN8@StartBootE:
  000b9	83 0d 00 00 00
	00 ff		 or	 DWORD PTR _SetupStatusEncryptedAreaEnd, -1
  000c0	83 0d 04 00 00
	00 ff		 or	 DWORD PTR _SetupStatusEncryptedAreaEnd+4, -1
$LN9@StartBootE:

; 1491 : 
; 1492 : 	SetupInProgress = TRUE;
; 1493 : 	status = TCStartThread (SetupThreadProc, DeviceObject, &EncryptionSetupThread);

  000c7	68 00 00 00 00	 push	 OFFSET _EncryptionSetupThread
  000cc	ff 75 08	 push	 DWORD PTR _DeviceObject$[ebp]
  000cf	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _SetupInProgress, 1
  000d9	68 00 00 00 00	 push	 OFFSET _SetupThreadProc@4
  000de	e8 00 00 00 00	 call	 _TCStartThread@12

; 1494 : 	
; 1495 : 	if (!NT_SUCCESS (status))

  000e3	3b c3		 cmp	 eax, ebx
  000e5	7d 0d		 jge	 SHORT $LN12@StartBootE

; 1496 : 		SetupInProgress = FALSE;

  000e7	89 1d 00 00 00
	00		 mov	 DWORD PTR _SetupInProgress, ebx

; 1497 : 
; 1498 : 	return status;

  000ed	eb 05		 jmp	 SHORT $LN12@StartBootE
$LN3@StartBootE:

; 1481 : 		return STATUS_INVALID_PARAMETER;

  000ef	b8 0d 00 00 c0	 mov	 eax, -1073741811	; c000000dH
$LN12@StartBootE:
  000f4	5b		 pop	 ebx
$LN6@StartBootE:

; 1499 : }

  000f5	5d		 pop	 ebp
  000f6	c2 0c 00	 ret	 12			; 0000000cH
_StartBootEncryptionSetup@12 ENDP
_TEXT	ENDS
PUBLIC	_StartDecoySystemWipe@12
; Function compile flags: /Ogsp
;	COMDAT _StartDecoySystemWipe@12
_TEXT	SEGMENT
_DeviceObject$ = 8					; size = 4
_irp$ = 12						; size = 4
_irpSp$ = 16						; size = 4
_StartDecoySystemWipe@12 PROC				; COMDAT

; 1826 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 1827 : 	NTSTATUS status;
; 1828 : 	WipeDecoySystemRequest *request;
; 1829 : 
; 1830 : 	if (!UserCanAccessDriveDevice())

  00005	e8 00 00 00 00	 call	 _UserCanAccessDriveDevice@0
  0000a	85 c0		 test	 eax, eax
  0000c	75 0a		 jne	 SHORT $LN11@StartDecoy

; 1831 : 		return STATUS_ACCESS_DENIED;

  0000e	b8 22 00 00 c0	 mov	 eax, -1073741790	; c0000022H
  00013	e9 bd 00 00 00	 jmp	 $LN12@StartDecoy
$LN11@StartDecoy:

; 1832 : 
; 1833 : 	if (!IsHiddenSystemRunning()
; 1834 : 		|| irpSp->Parameters.DeviceIoControl.InputBufferLength < sizeof (WipeDecoySystemRequest))

  00018	e8 00 00 00 00	 call	 _IsHiddenSystemRunning@0
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 ab 00 00
	00		 je	 $LN9@StartDecoy
  00025	8b 45 10	 mov	 eax, DWORD PTR _irpSp$[ebp]
  00028	81 78 08 04 01
	00 00		 cmp	 DWORD PTR [eax+8], 260	; 00000104H
  0002f	0f 82 9b 00 00
	00		 jb	 $LN9@StartDecoy

; 1836 : 
; 1837 : 	if (DecoySystemWipeInProgress)

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR _DecoySystemWipeInProgress
  0003a	85 c0		 test	 eax, eax
  0003c	74 07		 je	 SHORT $LN8@StartDecoy

; 1838 : 		return STATUS_SUCCESS;

  0003e	33 c0		 xor	 eax, eax
  00040	e9 90 00 00 00	 jmp	 $LN12@StartDecoy
$LN8@StartDecoy:
  00045	53		 push	 ebx

; 1839 : 
; 1840 : 	if (DecoySystemWipeThread)

  00046	33 db		 xor	 ebx, ebx
  00048	39 1d 00 00 00
	00		 cmp	 DWORD PTR _DecoySystemWipeThread, ebx
  0004e	74 05		 je	 SHORT $LN7@StartDecoy

; 1841 : 		AbortDecoySystemWipe();

  00050	e8 00 00 00 00	 call	 _AbortDecoySystemWipe@0
$LN7@StartDecoy:

; 1842 : 
; 1843 : 	request = (WipeDecoySystemRequest *) irp->AssociatedIrp.SystemBuffer;

  00055	8b 45 0c	 mov	 eax, DWORD PTR _irp$[ebp]
  00058	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0005b	56		 push	 esi
  0005c	57		 push	 edi

; 1844 : 	WipeDecoyRequest = *request;

  0005d	6a 41		 push	 65			; 00000041H
  0005f	8b f0		 mov	 esi, eax
  00061	59		 pop	 ecx
  00062	bf 00 00 00 00	 mov	 edi, OFFSET _WipeDecoyRequest
  00067	f3 a5		 rep movsd

; 1845 : 
; 1846 : 	burn (request->WipeKey, sizeof (request->WipeKey));

  00069	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0006c	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00071	8b f0		 mov	 esi, eax
  00073	8b d1		 mov	 edx, ecx
$LL15@StartDecoy:
  00075	88 1a		 mov	 BYTE PTR [edx], bl
  00077	42		 inc	 edx
  00078	48		 dec	 eax
  00079	75 fa		 jne	 SHORT $LL15@StartDecoy
$LL3@StartDecoy:
  0007b	4e		 dec	 esi
  0007c	88 19		 mov	 BYTE PTR [ecx], bl
  0007e	41		 inc	 ecx
  0007f	3b f3		 cmp	 esi, ebx
  00081	75 f8		 jne	 SHORT $LL3@StartDecoy

; 1847 : 
; 1848 : 	DecoySystemWipeThreadAbortRequested = FALSE;
; 1849 : 	KeInitializeSpinLock (&DecoySystemWipeStatusSpinLock);
; 1850 : 	DecoySystemWipedAreaEnd = BootDriveFilterExtension->ConfiguredEncryptedAreaStart;

  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR _BootDriveFilterExtension
  00088	89 1d 00 00 00
	00		 mov	 DWORD PTR _DecoySystemWipeStatusSpinLock, ebx
  0008e	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00091	8b 40 34	 mov	 eax, DWORD PTR [eax+52]

; 1851 : 
; 1852 : 	DecoySystemWipeInProgress = TRUE;
; 1853 : 	status = TCStartThread (DecoySystemWipeThreadProc, DeviceObject, &DecoySystemWipeThread);

  00094	68 00 00 00 00	 push	 OFFSET _DecoySystemWipeThread
  00099	ff 75 08	 push	 DWORD PTR _DeviceObject$[ebp]
  0009c	89 1d 00 00 00
	00		 mov	 DWORD PTR _DecoySystemWipeThreadAbortRequested, ebx
  000a2	89 0d 00 00 00
	00		 mov	 DWORD PTR _DecoySystemWipedAreaEnd, ecx
  000a8	a3 04 00 00 00	 mov	 DWORD PTR _DecoySystemWipedAreaEnd+4, eax
  000ad	68 00 00 00 00	 push	 OFFSET _DecoySystemWipeThreadProc@4
  000b2	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _DecoySystemWipeInProgress, 1
  000bc	e8 00 00 00 00	 call	 _TCStartThread@12

; 1854 : 	
; 1855 : 	if (!NT_SUCCESS (status))

  000c1	3b c3		 cmp	 eax, ebx
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	7d 06		 jge	 SHORT $LN1@StartDecoy

; 1856 : 		DecoySystemWipeInProgress = FALSE;

  000c7	89 1d 00 00 00
	00		 mov	 DWORD PTR _DecoySystemWipeInProgress, ebx
$LN1@StartDecoy:
  000cd	5b		 pop	 ebx

; 1857 : 
; 1858 : 	return status;

  000ce	eb 05		 jmp	 SHORT $LN12@StartDecoy
$LN9@StartDecoy:

; 1835 : 		return STATUS_INVALID_PARAMETER;

  000d0	b8 0d 00 00 c0	 mov	 eax, -1073741811	; c000000dH
$LN12@StartDecoy:

; 1859 : }

  000d5	5d		 pop	 ebp
  000d6	c2 0c 00	 ret	 12			; 0000000cH
_StartDecoySystemWipe@12 ENDP
_TEXT	ENDS
END
