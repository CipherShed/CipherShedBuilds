; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	crc_32_tab
crc_32_tab DD	00H
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
PUBLIC	crc32int
;	COMDAT pdata
; File c:\home\public\desktop\projects\ciphershed.build\src\common\crc.c
pdata	SEGMENT
$pdata$crc32int DD imagerel $LN3
	DD	imagerel $LN3+250
	DD	imagerel $unwind$crc32int
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$crc32int DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT crc32int
_TEXT	SEGMENT
d$ = 0
CRC$ = 8
data$ = 32
crc32int PROC						; COMDAT

; 68   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 69   : 	unsigned char *d = (unsigned char *) data;

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR data$[rsp]
  0000e	48 89 04 24	 mov	 QWORD PTR d$[rsp], rax

; 70   : 	unsigned __int32 CRC = 0xffffffff;

  00012	c7 44 24 08 ff
	ff ff ff	 mov	 DWORD PTR CRC$[rsp], -1	; ffffffffH

; 71   : 
; 72   : 	CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d++) & 0xFF ];

  0001a	44 8b 44 24 08	 mov	 r8d, DWORD PTR CRC$[rsp]
  0001f	41 c1 e8 08	 shr	 r8d, 8
  00023	48 8b 04 24	 mov	 rax, QWORD PTR d$[rsp]
  00027	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0002a	8b 44 24 08	 mov	 eax, DWORD PTR CRC$[rsp]
  0002e	33 c1		 xor	 eax, ecx
  00030	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00035	8b d0		 mov	 edx, eax
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_32_tab
  0003e	41 8b c0	 mov	 eax, r8d
  00041	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00044	89 44 24 08	 mov	 DWORD PTR CRC$[rsp], eax
  00048	48 8b 04 24	 mov	 rax, QWORD PTR d$[rsp]
  0004c	48 83 c0 01	 add	 rax, 1
  00050	48 89 04 24	 mov	 QWORD PTR d$[rsp], rax

; 73   : 	CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d++) & 0xFF ];

  00054	44 8b 44 24 08	 mov	 r8d, DWORD PTR CRC$[rsp]
  00059	41 c1 e8 08	 shr	 r8d, 8
  0005d	48 8b 04 24	 mov	 rax, QWORD PTR d$[rsp]
  00061	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00064	8b 44 24 08	 mov	 eax, DWORD PTR CRC$[rsp]
  00068	33 c1		 xor	 eax, ecx
  0006a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0006f	8b d0		 mov	 edx, eax
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_32_tab
  00078	41 8b c0	 mov	 eax, r8d
  0007b	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  0007e	89 44 24 08	 mov	 DWORD PTR CRC$[rsp], eax
  00082	48 8b 04 24	 mov	 rax, QWORD PTR d$[rsp]
  00086	48 83 c0 01	 add	 rax, 1
  0008a	48 89 04 24	 mov	 QWORD PTR d$[rsp], rax

; 74   : 	CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d++) & 0xFF ];

  0008e	44 8b 44 24 08	 mov	 r8d, DWORD PTR CRC$[rsp]
  00093	41 c1 e8 08	 shr	 r8d, 8
  00097	48 8b 04 24	 mov	 rax, QWORD PTR d$[rsp]
  0009b	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0009e	8b 44 24 08	 mov	 eax, DWORD PTR CRC$[rsp]
  000a2	33 c1		 xor	 eax, ecx
  000a4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000a9	8b d0		 mov	 edx, eax
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_32_tab
  000b2	41 8b c0	 mov	 eax, r8d
  000b5	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  000b8	89 44 24 08	 mov	 DWORD PTR CRC$[rsp], eax
  000bc	48 8b 04 24	 mov	 rax, QWORD PTR d$[rsp]
  000c0	48 83 c0 01	 add	 rax, 1
  000c4	48 89 04 24	 mov	 QWORD PTR d$[rsp], rax

; 75   : 	return (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d) & 0xFF ] ^ 0xffffffff;

  000c8	44 8b 44 24 08	 mov	 r8d, DWORD PTR CRC$[rsp]
  000cd	41 c1 e8 08	 shr	 r8d, 8
  000d1	48 8b 04 24	 mov	 rax, QWORD PTR d$[rsp]
  000d5	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  000d8	8b 44 24 08	 mov	 eax, DWORD PTR CRC$[rsp]
  000dc	33 c1		 xor	 eax, ecx
  000de	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000e3	8b d0		 mov	 edx, eax
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_32_tab
  000ec	41 8b c0	 mov	 eax, r8d
  000ef	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  000f2	83 f0 ff	 xor	 eax, -1			; ffffffffH

; 76   : }

  000f5	48 83 c4 18	 add	 rsp, 24
  000f9	c3		 ret	 0
crc32int ENDP
_TEXT	ENDS
PUBLIC	GetCrc32
;	COMDAT pdata
pdata	SEGMENT
$pdata$GetCrc32 DD imagerel $LN5
	DD	imagerel $LN5+110
	DD	imagerel $unwind$GetCrc32
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetCrc32 DD 010d01H
	DD	0220dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT GetCrc32
_TEXT	SEGMENT
CRC$ = 0
data$ = 32
length$ = 40
GetCrc32 PROC						; COMDAT

; 56   : {

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 18	 sub	 rsp, 24

; 57   : 	unsigned __int32 CRC = 0xffffffff;

  0000d	c7 04 24 ff ff
	ff ff		 mov	 DWORD PTR CRC$[rsp], -1	; ffffffffH
$LN2@GetCrc32:

; 58   : 
; 59   : 	while (length--)

  00014	8b 4c 24 28	 mov	 ecx, DWORD PTR length$[rsp]
  00018	8b 44 24 28	 mov	 eax, DWORD PTR length$[rsp]
  0001c	83 e8 01	 sub	 eax, 1
  0001f	89 44 24 28	 mov	 DWORD PTR length$[rsp], eax
  00023	85 c9		 test	 ecx, ecx
  00025	74 3c		 je	 SHORT $LN1@GetCrc32

; 60   : 	{
; 61   : 		CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *data++) & 0xFF ];

  00027	44 8b 04 24	 mov	 r8d, DWORD PTR CRC$[rsp]
  0002b	41 c1 e8 08	 shr	 r8d, 8
  0002f	48 8b 44 24 20	 mov	 rax, QWORD PTR data$[rsp]
  00034	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00037	8b 04 24	 mov	 eax, DWORD PTR CRC$[rsp]
  0003a	33 c1		 xor	 eax, ecx
  0003c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00041	8b d0		 mov	 edx, eax
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_32_tab
  0004a	41 8b c0	 mov	 eax, r8d
  0004d	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00050	89 04 24	 mov	 DWORD PTR CRC$[rsp], eax
  00053	48 8b 44 24 20	 mov	 rax, QWORD PTR data$[rsp]
  00058	48 83 c0 01	 add	 rax, 1
  0005c	48 89 44 24 20	 mov	 QWORD PTR data$[rsp], rax

; 62   : 	}

  00061	eb b1		 jmp	 SHORT $LN2@GetCrc32
$LN1@GetCrc32:

; 63   : 
; 64   : 	return CRC ^ 0xffffffff;

  00063	8b 04 24	 mov	 eax, DWORD PTR CRC$[rsp]
  00066	83 f0 ff	 xor	 eax, -1			; ffffffffH

; 65   : }

  00069	48 83 c4 18	 add	 rsp, 24
  0006d	c3		 ret	 0
GetCrc32 ENDP
PUBLIC	crc32_selftests
;	COMDAT pdata
pdata	SEGMENT
$pdata$crc32_selftests DD imagerel $LN10
	DD	imagerel $LN10+210
	DD	imagerel $unwind$crc32_selftests
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$crc32_selftests DD 010401H
	DD	08204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT crc32_selftests
_TEXT	SEGMENT
crc$ = 32
i$ = 36
bSuccess$ = 40
tv78 = 44
tv83 = 48
crc32_selftests PROC					; COMDAT

; 85   : {

$LN10:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 86   : 	int i;
; 87   : 	unsigned __int32 crc  = 0xffffffff;

  00004	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR crc$[rsp], -1	; ffffffffH

; 88   : 	BOOL bSuccess = FALSE;

  0000c	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR bSuccess$[rsp], 0

; 89   : 
; 90   : 	for (i = 0; i < (int)sizeof(crc_32_tab); i++)

  00014	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0001c	eb 0b		 jmp	 SHORT $LN3@crc32_self
$LN2@crc32_self:
  0001e	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN3@crc32_self:
  00029	81 7c 24 24 00
	04 00 00	 cmp	 DWORD PTR i$[rsp], 1024	; 00000400H
  00031	7d 36		 jge	 SHORT $LN1@crc32_self

; 91   : 		crc = UPDC32 (((unsigned char *) crc_32_tab)[i], crc);

  00033	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  00038	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:crc_32_tab
  0003f	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  00043	8b 44 24 20	 mov	 eax, DWORD PTR crc$[rsp]
  00047	33 c1		 xor	 eax, ecx
  00049	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0004e	8b d0		 mov	 edx, eax
  00050	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:crc_32_tab
  00057	8b 4c 24 20	 mov	 ecx, DWORD PTR crc$[rsp]
  0005b	c1 e9 08	 shr	 ecx, 8
  0005e	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00061	33 c1		 xor	 eax, ecx
  00063	89 44 24 20	 mov	 DWORD PTR crc$[rsp], eax
  00067	eb b5		 jmp	 SHORT $LN2@crc32_self
$LN1@crc32_self:

; 92   : 
; 93   : 	bSuccess = CRC_SELFTEST == (crc ^ 0xffffffff);

  00069	8b 44 24 20	 mov	 eax, DWORD PTR crc$[rsp]
  0006d	83 f0 ff	 xor	 eax, -1			; ffffffffH
  00070	3d 13 9e cf 6f	 cmp	 eax, 1875877395		; 6fcf9e13H
  00075	75 0a		 jne	 SHORT $LN6@crc32_self
  00077	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv78[rsp], 1
  0007f	eb 08		 jmp	 SHORT $LN7@crc32_self
$LN6@crc32_self:
  00081	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
$LN7@crc32_self:
  00089	8b 44 24 2c	 mov	 eax, DWORD PTR tv78[rsp]
  0008d	89 44 24 28	 mov	 DWORD PTR bSuccess$[rsp], eax

; 94   : 
; 95   : 	bSuccess &= GetCrc32 ((unsigned char *)crc_32_tab, sizeof crc_32_tab) == CRC_SELFTEST;

  00091	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_32_tab
  0009d	e8 00 00 00 00	 call	 GetCrc32
  000a2	3d 13 9e cf 6f	 cmp	 eax, 1875877395		; 6fcf9e13H
  000a7	75 0a		 jne	 SHORT $LN8@crc32_self
  000a9	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv83[rsp], 1
  000b1	eb 08		 jmp	 SHORT $LN9@crc32_self
$LN8@crc32_self:
  000b3	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv83[rsp], 0
$LN9@crc32_self:
  000bb	8b 4c 24 30	 mov	 ecx, DWORD PTR tv83[rsp]
  000bf	8b 44 24 28	 mov	 eax, DWORD PTR bSuccess$[rsp]
  000c3	23 c1		 and	 eax, ecx
  000c5	89 44 24 28	 mov	 DWORD PTR bSuccess$[rsp], eax

; 96   : 
; 97   : 	return bSuccess;

  000c9	8b 44 24 28	 mov	 eax, DWORD PTR bSuccess$[rsp]

; 98   : }

  000cd	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d1	c3		 ret	 0
crc32_selftests ENDP
END
