; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	c:\home\public\desktop\projects\ciphershed.build\src\common\tests.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@ ; `string'
PUBLIC	??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@ ; `string'
PUBLIC	??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@ ; `string'
PUBLIC	??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@ ; `string'
PUBLIC	??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@ ; `string'
PUBLIC	??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@ ; `string'
PUBLIC	??_C@_0P@ONGHGJEC@message?5digest?$AA@		; `string'
PUBLIC	??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@ ; `string'
PUBLIC	??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@ ; `string'
PUBLIC	??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@ ; `string'
PUBLIC	??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@ ; `string'
PUBLIC	??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@ ; `string'
PUBLIC	??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@		; `string'
PUBLIC	??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@ ; `string'
PUBLIC	??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@ ; `string'
PUBLIC	??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@ ; `string'
PUBLIC	??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@ ; `string'
PUBLIC	??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@ ; `string'
PUBLIC	??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@ ; `string'
PUBLIC	??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@ ; `string'
PUBLIC	??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@ ; `string'
PUBLIC	??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@ ; `string'
PUBLIC	??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@ ; `string'
PUBLIC	??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@ ; `string'
PUBLIC	??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@ ; `string'
PUBLIC	??_C@_08BPPJKMC@Hi?5There?$AA@			; `string'
PUBLIC	??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@ ; `string'
PUBLIC	??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@ ; `string'
PUBLIC	??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@ ; `string'
PUBLIC	??_C@_04HDLGGHEL@Jefe?$AA@			; `string'
PUBLIC	??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@ ; `string'
PUBLIC	_XTS_vectors
PUBLIC	_bf_ecb_vectors
PUBLIC	_tripledes_vectors
PUBLIC	_cast_ecb_vectors
PUBLIC	_aes_ecb_vectors
PUBLIC	_serpent_vectors
PUBLIC	_twofish_vectors
PUBLIC	_hmac_sha512_test_keys
PUBLIC	_hmac_sha512_test_data
PUBLIC	_hmac_sha512_test_vectors
PUBLIC	_hmac_sha1_test_keys
PUBLIC	_hmac_sha1_test_data
PUBLIC	_hmac_sha1_test_vectors
PUBLIC	_hmac_ripemd160_test_keys
PUBLIC	_hmac_ripemd160_test_data
PUBLIC	_hmac_ripemd160_test_vectors
PUBLIC	_hmac_whirlpool_test_key
PUBLIC	_hmac_whirlpool_test_data
PUBLIC	_hmac_whirlpool_test_vectors
PUBLIC	_lrw_vectors
_DATA	SEGMENT
COMM	_ks_tmp:BYTE:014ccH
_DATA	ENDS
;	COMDAT ??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@
CONST	SEGMENT
??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@ DB 03H
	DB	091H, 0d2H, 080H, 00H, 0b6H, 'b', 0bbH, 0b8H, 0e6H, '#>', 0e8H
	DB	'l', 0f2H, 0b2H, 084H, 'tLs', 08bH, 'X', 00H, 0baH, '(', 012H, 0edH
	DB	'Ro', 0e3H, 015H, ':', 0b1H, 0baH, 0e7H, 0e2H, '6', 0beH, 096H
	DB	'TI?', 019H, 0faH, 0ceH, 0a6H, 'D', 01fH, '`', 0f5H, 0f0H, 018H
	DB	093H, 09H, 011H, 0a5H, 0e5H, 0ceH, 0d8H, 0f2H, 'j', 0bfH, 0a4H
	DB	02H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
CONST	SEGMENT
??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@ DB 'abcdbcdecdefdefg'
	DB	'efghfghighijhijkijkljklmklmnlmnomnopnopq', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
CONST	SEGMENT
??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@ DB 00H
	DB	011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH, 00H, 011H, '"3DUfw', 088H, 099H
	DB	0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH, 01H, '#Eg', 089H, 0abH, 0cdH
	DB	0efH, 00H, 011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH
	DB	0ffH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@
CONST	SEGMENT
??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@ DB 085H
	DB	0f1H, 'dp>a', 0a6H, '11', 0beH, '~E', 095H, 08eH, 07H, 094H, 012H
	DB	'9', 04H, 0f9H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@
CONST	SEGMENT
??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@ DB 0f8H
	DB	'6b', 0ccH, 08dH, '3', 09cH, '"~`', 0fH, 0cdH, 'clW', 0d2H, 'W'
	DB	01bH, 01cH, '4', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@
CONST	SEGMENT
??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@ DB '1234567890123456'
	DB	'7890123456789012345678901234567890123456789012345678901234567'
	DB	'890', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ONGHGJEC@message?5digest?$AA@
CONST	SEGMENT
??_C@_0P@ONGHGJEC@message?5digest?$AA@ DB 'message digest', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@
CONST	SEGMENT
??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@ DB 01H
	DB	'#Eg', 089H, 0abH, 0cdH, 0efH, 0feH, 0dcH, 0baH, 098H, 'vT2', 010H
	DB	00H, 011H, '"3', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@
CONST	SEGMENT
??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@ DB 00H
	DB	011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH
	DB	01H, '#Eg', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@
CONST	SEGMENT
??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@ DB 012H
	DB	']sB', 0b9H, 0acH, 011H, 0cdH, 091H, 0a3H, 09aH, 0f4H, 08aH, 0a1H
	DB	'{Oc', 0f1H, 'u', 0d3H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@
CONST	SEGMENT
??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@ DB 0efH
	DB	0fcH, 0dfH, 'j', 0e5H, 0ebH, '/', 0a2H, 0d2H, 't', 016H, 0d5H, 0f1H
	DB	084H, 0dfH, 09cH, '%', 09aH, '|y', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@
CONST	SEGMENT
??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@ DB 0b6H
	DB	017H, '1', 086H, 'U', 05H, 'rd', 0e2H, 08bH, 0c0H, 0b6H, 0fbH, '7'
	DB	08cH, 08eH, 0f1H, 'F', 0beH, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@
CONST	SEGMENT
??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@ DB 0bcH
	DB	0f4H, 01eH, 0abH, 08bH, 0b2H, 0d8H, 02H, 0f3H, 0d0H, '\', 0afH
	DB	'|', 0b0H, 092H, 0ecH, 0f8H, 0d1H, 0a3H, 0aaH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@
CONST	SEGMENT
??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@ DB 'Sample #3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@
CONST	SEGMENT
??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@ DB 'PQR'
	DB	'STUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~', 07fH, 080H, 081H
	DB	082H, 083H, 084H, 085H, 086H, 087H, 088H, 089H, 08aH, 08bH, 08cH
	DB	08dH, 08eH, 08fH, 090H, 091H, 092H, 093H, 094H, 095H, 096H, 097H
	DB	098H, 099H, 09aH, 09bH, 09cH, 09dH, 09eH, 09fH, 0a0H, 0a1H, 0a2H
	DB	0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H, 0aaH, 0abH, 0acH, 0adH
	DB	0aeH, 0afH, 0b0H, 0b1H, 0b2H, 0b3H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@
CONST	SEGMENT
??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@ DB 0e3H
	DB	'{jw]', 0c8H, '}', 0baH, 0a4H, 0dfH, 0a9H, 0f9H, 'n^?', 0fdH, 0deH
	DB	0bdH, 'q', 0f8H, 086H, 'r', 089H, 086H, ']', 0f5H, 0a3H, '- ', 0cdH
	DB	0c9H, 'D', 0b6H, 02H, ',', 0acH, '<I', 082H, 0b1H, 0dH, '^', 0ebH
	DB	'U', 0c3H, 0e4H, 0deH, 015H, 013H, 'Fv', 0fbH, 'm', 0e0H, 'D`e'
	DB	0c9H, 't@', 0faH, 08cH, 'jX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@
CONST	SEGMENT
??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@ DB 080H
	DB	0b2H, 'Bc', 0c7H, 0c1H, 0a3H, 0ebH, 0b7H, 014H, 093H, 0c1H, 0ddH
	DB	'{', 0e8H, 0b4H, 09bH, 'F', 0d1H, 0f4H, 01bH, 'J', 0eeH, 0c1H, 012H
	DB	01bH, 01H, '7', 083H, 0f8H, 0f3H, 'RkV', 0d0H, '7', 0e0H, '_%', 098H
	DB	0bdH, 0fH, 0d2H, '!]j', 01eH, 'R', 095H, 0e6H, 'Os', 0f6H, '?', 0aH
	DB	0ecH, 08bH, 091H, 'Z', 098H, ']xe', 098H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@
CONST	SEGMENT
??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@ DB 0b0H
	DB	0baH, 'FV7E', 08cH, 'i', 090H, 0e5H, 0a8H, 0c5H, 0f6H, 01dH, 'J'
	DB	0f7H, 0e5H, 'v', 0d9H, 07fH, 0f9H, 'K', 087H, '-', 0e7H, 'o', 080H
	DB	'P6', 01eH, 0e3H, 0dbH, 0a9H, 01cH, 0a5H, 0c1H, 01aH, 0a2H, '^'
	DB	0b4H, 0d6H, 'y''\', 0c5H, 'x', 080H, 'c', 0a5H, 0f1H, 097H, 'A'
	DB	012H, 0cH, 'O-', 0e2H, 0adH, 0ebH, 0ebH, 010H, 0a2H, 098H, 0ddH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@
CONST	SEGMENT
??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@ DB 0faH
	DB	's', 0b0H, 08H, 09dH, 'V', 0a2H, 084H, 0efH, 0b0H, 0f0H, 'ul', 089H
	DB	0bH, 0e9H, 0b1H, 0b5H, 0dbH, 0ddH, 08eH, 0e8H, 01aH, '6U', 0f8H
	DB	'>3', 0b2H, '''', 09dH, '9', 0bfH, '>', 084H, 082H, 'y', 0a7H, '"'
	DB	0c8H, 06H, 0b4H, 085H, 0a4H, '~g', 0c8H, 07H, 0b9H, 'F', 0a3H, '7'
	DB	0beH, 0e8H, 094H, '&t''', 088H, 'Y', 0e1H, '2', 092H, 0fbH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@
CONST	SEGMENT
??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@ DB 016H
	DB	'Kz{', 0fcH, 0f8H, 019H, 0e2H, 0e3H, 095H, 0fbH, 0e7H, ';V', 0e0H
	DB	0a3H, 087H, 0bdH, 'd".', 083H, 01fH, 0d6H, 010H, '''', 0cH, 0d7H
	DB	0eaH, '%', 05H, 'T', 097H, 'X', 0bfH, 'u', 0c0H, 'Z', 099H, 'J'
	DB	'm', 03H, 'Oe', 0f8H, 0f0H, 0e6H, 0fdH, 0caH, 0eaH, 0b1H, 0a3H
	DB	'MJkKcn', 07H, 0aH, '8', 0bcH, 0e7H, '7', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@
CONST	SEGMENT
??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@ DB 087H
	DB	0aaH, '|', 0deH, 0a5H, 0efH, 'a', 09dH, 'O', 0f0H, 0b4H, '$', 01aH
	DB	01dH, 'l', 0b0H, '#y', 0f4H, 0e2H, 0ceH, 'N', 0c2H, 'xz', 0d0H
	DB	0b3H, 05H, 'E', 0e1H, '|', 0deH, 0daH, 0a8H, '3', 0b7H, 0d6H, 0b8H
	DB	0a7H, 02H, 03H, 08bH, '''N', 0aeH, 0a3H, 0f4H, 0e4H, 0beH, 09dH
	DB	091H, 'N', 0ebH, 'a', 0f1H, 'p.il :', 012H, 'hT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@
CONST	SEGMENT
??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@ DB 'This is a '
	DB	'test using a larger than block-size key and a larger than blo'
	DB	'ck-size data. The key needs to be hashed before being used by'
	DB	' the HMAC algorithm.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@
CONST	SEGMENT
??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@ DB 'Test Using '
	DB	'Larger Than Block-Size Key - Hash Key First', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@
CONST	SEGMENT
??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@ DB 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@
CONST	SEGMENT
??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@ DB 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@
CONST	SEGMENT
??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@ DB 'what do '
	DB	'ya want for nothing?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08BPPJKMC@Hi?5There?$AA@
CONST	SEGMENT
??_C@_08BPPJKMC@Hi?5There?$AA@ DB 'Hi There', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@
CONST	SEGMENT
??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@ DB 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@
CONST	SEGMENT
??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@ DB 01H
	DB	02H, 03H, 04H, 05H, 06H, 07H, 08H, 09H, 0aH, 0bH, 0cH, 0dH, 0eH
	DB	0fH, 010H, 011H, 012H, 013H, 014H, 015H, 016H, 017H, 018H, 019H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@
CONST	SEGMENT
??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@ DB 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDLGGHEL@Jefe?$AA@
CONST	SEGMENT
??_C@_04HDLGGHEL@Jefe?$AA@ DB 'Jefe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@
CONST	SEGMENT
??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@ DB 0bH
	DB	0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH
	DB	0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_XTS_vectors DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	01cH
	DB	03bH
	DB	03aH
	DB	010H
	DB	02fH
	DB	077H
	DB	03H
	DB	086H
	DB	0e4H
	DB	083H
	DB	06cH
	DB	099H
	DB	0e3H
	DB	070H
	DB	0cfH
	DB	09bH
	DB	0eaH
	DB	00H
	DB	080H
	DB	03fH
	DB	05eH
	DB	048H
	DB	023H
	DB	057H
	DB	0a4H
	DB	0aeH
	DB	012H
	DB	0d4H
	DB	014H
	DB	0a3H
	DB	0e6H
	DB	03bH
	DB	05dH
	DB	031H
	DB	0e2H
	DB	076H
	DB	0f8H
	DB	0feH
	DB	04aH
	DB	08dH
	DB	066H
	DB	0b3H
	DB	017H
	DB	0f9H
	DB	0acH
	DB	068H
	DB	03fH
	DB	044H
	DB	068H
	DB	0aH
	DB	086H
	DB	0acH
	DB	035H
	DB	0adH
	DB	0fcH
	DB	033H
	DB	045H
	DB	0beH
	DB	0feH
	DB	0cbH
	DB	04bH
	DB	0b1H
	DB	088H
	DB	0fdH
	DB	057H
	DB	076H
	DB	092H
	DB	06cH
	DB	049H
	DB	0a3H
	DB	09H
	DB	05eH
	DB	0b1H
	DB	08H
	DB	0fdH
	DB	010H
	DB	098H
	DB	0baH
	DB	0ecH
	DB	070H
	DB	0aaH
	DB	0a6H
	DB	069H
	DB	099H
	DB	0a7H
	DB	02aH
	DB	082H
	DB	0f2H
	DB	07dH
	DB	084H
	DB	08bH
	DB	021H
	DB	0d4H
	DB	0a7H
	DB	041H
	DB	0b0H
	DB	0c5H
	DB	0cdH
	DB	04dH
	DB	05fH
	DB	0ffH
	DB	09dH
	DB	0acH
	DB	089H
	DB	0aeH
	DB	0baH
	DB	012H
	DB	029H
	DB	061H
	DB	0d0H
	DB	03aH
	DB	075H
	DB	071H
	DB	023H
	DB	0e9H
	DB	087H
	DB	0fH
	DB	08aH
	DB	0cfH
	DB	010H
	DB	00H
	DB	02H
	DB	08H
	DB	087H
	DB	089H
	DB	014H
	DB	029H
	DB	0caH
	DB	02aH
	DB	03eH
	DB	07aH
	DB	07dH
	DB	07dH
	DB	0f7H
	DB	0b1H
	DB	03H
	DB	055H
	DB	016H
	DB	05cH
	DB	08bH
	DB	09aH
	DB	06dH
	DB	0aH
	DB	07dH
	DB	0e8H
	DB	0b0H
	DB	062H
	DB	0c4H
	DB	050H
	DB	0dH
	DB	0c4H
	DB	0cdH
	DB	012H
	DB	0cH
	DB	0fH
	DB	074H
	DB	018H
	DB	0daH
	DB	0e3H
	DB	0d0H
	DB	0b5H
	DB	078H
	DB	01cH
	DB	034H
	DB	080H
	DB	03fH
	DB	0a7H
	DB	054H
	DB	021H
	DB	0c7H
	DB	090H
	DB	0dfH
	DB	0e1H
	DB	0deH
	DB	018H
	DB	034H
	DB	0f2H
	DB	080H
	DB	0d7H
	DB	066H
	DB	07bH
	DB	032H
	DB	07fH
	DB	06cH
	DB	08cH
	DB	0d7H
	DB	055H
	DB	07eH
	DB	012H
	DB	0acH
	DB	03aH
	DB	0fH
	DB	093H
	DB	0ecH
	DB	05H
	DB	0c5H
	DB	02eH
	DB	04H
	DB	093H
	DB	0efH
	DB	031H
	DB	0a1H
	DB	02dH
	DB	03dH
	DB	092H
	DB	060H
	DB	0f7H
	DB	09aH
	DB	028H
	DB	09dH
	DB	06aH
	DB	037H
	DB	09bH
	DB	0c7H
	DB	0cH
	DB	050H
	DB	084H
	DB	014H
	DB	073H
	DB	0d1H
	DB	0a8H
	DB	0ccH
	DB	081H
	DB	0ecH
	DB	058H
	DB	03eH
	DB	096H
	DB	045H
	DB	0e0H
	DB	07bH
	DB	08dH
	DB	096H
	DB	070H
	DB	065H
	DB	05bH
	DB	0a5H
	DB	0bbH
	DB	0cfH
	DB	0ecH
	DB	0c6H
	DB	0dcH
	DB	039H
	DB	066H
	DB	038H
	DB	0aH
	DB	0d8H
	DB	0feH
	DB	0cbH
	DB	017H
	DB	0b6H
	DB	0baH
	DB	02H
	DB	046H
	DB	09aH
	DB	02H
	DB	0aH
	DB	084H
	DB	0e1H
	DB	08eH
	DB	08fH
	DB	084H
	DB	025H
	DB	020H
	DB	070H
	DB	0c1H
	DB	03eH
	DB	09fH
	DB	01fH
	DB	028H
	DB	09bH
	DB	0e5H
	DB	04fH
	DB	0bcH
	DB	048H
	DB	014H
	DB	057H
	DB	077H
	DB	08fH
	DB	061H
	DB	060H
	DB	015H
	DB	0e1H
	DB	032H
	DB	07aH
	DB	02H
	DB	0b1H
	DB	040H
	DB	0f1H
	DB	050H
	DB	05eH
	DB	0b3H
	DB	09H
	DB	032H
	DB	06dH
	DB	068H
	DB	037H
	DB	08fH
	DB	083H
	DB	074H
	DB	059H
	DB	05cH
	DB	084H
	DB	09dH
	DB	084H
	DB	0f4H
	DB	0c3H
	DB	033H
	DB	0ecH
	DB	044H
	DB	023H
	DB	088H
	DB	051H
	DB	043H
	DB	0cbH
	DB	047H
	DB	0bdH
	DB	071H
	DB	0c5H
	DB	0edH
	DB	0aeH
	DB	09bH
	DB	0e6H
	DB	09aH
	DB	02fH
	DB	0feH
	DB	0ceH
	DB	0b1H
	DB	0beH
	DB	0c9H
	DB	0deH
	DB	024H
	DB	04fH
	DB	0beH
	DB	015H
	DB	099H
	DB	02bH
	DB	011H
	DB	0b7H
	DB	07cH
	DB	04H
	DB	0fH
	DB	012H
	DB	0bdH
	DB	08fH
	DB	06aH
	DB	097H
	DB	05aH
	DB	044H
	DB	0a0H
	DB	0f9H
	DB	0cH
	DB	029H
	DB	0a9H
	DB	0abH
	DB	0c3H
	DB	0d4H
	DB	0d8H
	DB	093H
	DB	092H
	DB	072H
	DB	084H
	DB	0c5H
	DB	087H
	DB	054H
	DB	0ccH
	DB	0e2H
	DB	094H
	DB	052H
	DB	09fH
	DB	086H
	DB	014H
	DB	0dcH
	DB	0d2H
	DB	0abH
	DB	0a9H
	DB	091H
	DB	092H
	DB	05fH
	DB	0edH
	DB	0c4H
	DB	0aeH
	DB	074H
	DB	0ffH
	DB	0acH
	DB	06eH
	DB	033H
	DB	03bH
	DB	093H
	DB	0ebH
	DB	04aH
	DB	0ffH
	DB	04H
	DB	079H
	DB	0daH
	DB	09aH
	DB	041H
	DB	0eH
	DB	044H
	DB	050H
	DB	0e0H
	DB	0ddH
	DB	07aH
	DB	0e4H
	DB	0c6H
	DB	0e2H
	DB	091H
	DB	09H
	DB	00H
	DB	057H
	DB	05dH
	DB	0a4H
	DB	01H
	DB	0fcH
	DB	07H
	DB	05H
	DB	09fH
	DB	064H
	DB	05eH
	DB	08bH
	DB	07eH
	DB	09bH
	DB	0fdH
	DB	0efH
	DB	033H
	DB	094H
	DB	030H
	DB	054H
	DB	0ffH
	DB	084H
	DB	01H
	DB	014H
	DB	093H
	DB	0c2H
	DB	07bH
	DB	034H
	DB	029H
	DB	0eaH
	DB	0edH
	DB	0b4H
	DB	0edH
	DB	053H
	DB	076H
	DB	044H
	DB	01aH
	DB	077H
	DB	0edH
	DB	043H
	DB	085H
	DB	01aH
	DB	0d7H
	DB	07fH
	DB	016H
	DB	0f5H
	DB	041H
	DB	0dfH
	DB	0d2H
	DB	069H
	DB	0d5H
	DB	0dH
	DB	06aH
	DB	05fH
	DB	014H
	DB	0fbH
	DB	0aH
	DB	0abH
	DB	01cH
	DB	0bbH
	DB	04cH
	DB	015H
	DB	050H
	DB	0beH
	DB	097H
	DB	0f7H
	DB	0abH
	DB	040H
	DB	066H
	DB	019H
	DB	03cH
	DB	04cH
	DB	0aaH
	DB	077H
	DB	03dH
	DB	0adH
	DB	038H
	DB	01H
	DB	04bH
	DB	0d2H
	DB	09H
	DB	02fH
	DB	0a7H
	DB	055H
	DB	0c8H
	DB	024H
	DB	0bbH
	DB	05eH
	DB	054H
	DB	0c4H
	DB	0f3H
	DB	06fH
	DB	0fdH
	DB	0a9H
	DB	0fcH
	DB	0eaH
	DB	070H
	DB	0b9H
	DB	0c6H
	DB	0e6H
	DB	093H
	DB	0e1H
	DB	048H
	DB	0c1H
	DB	051H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	077H
	DB	0a3H
	DB	012H
	DB	051H
	DB	061H
	DB	08aH
	DB	015H
	DB	0e6H
	DB	0b9H
	DB	02dH
	DB	01dH
	DB	066H
	DB	0dfH
	DB	0feH
	DB	07bH
	DB	050H
	DB	0b5H
	DB	0bH
	DB	0adH
	DB	055H
	DB	023H
	DB	05H
	DB	0baH
	DB	02H
	DB	017H
	DB	0a6H
	DB	010H
	DB	068H
	DB	08eH
	DB	0ffH
	DB	07eH
	DB	011H
	DB	0e1H
	DB	0d0H
	DB	022H
	DB	054H
	DB	038H
	DB	0e0H
	DB	093H
	DB	024H
	DB	02dH
	DB	06dH
	DB	0b2H
	DB	074H
	DB	0fdH
	DB	0e8H
	DB	01H
	DB	0d4H
	DB	0caH
	DB	0e0H
	DB	06fH
	DB	020H
	DB	092H
	DB	0c7H
	DB	028H
	DB	0b2H
	DB	047H
	DB	085H
	DB	059H
	DB	0dfH
	DB	058H
	DB	0e8H
	DB	037H
	DB	0c2H
	DB	046H
	DB	09eH
	DB	0e4H
	DB	0a4H
	DB	0faH
	DB	079H
	DB	04eH
	DB	04bH
	DB	0bcH
	DB	07fH
	DB	039H
	DB	0bcH
	DB	02H
	DB	06eH
	DB	03cH
	DB	0b7H
	DB	02cH
	DB	033H
	DB	0b0H
	DB	088H
	DB	08fH
	DB	025H
	DB	0b4H
	DB	0acH
	DB	0f5H
	DB	06aH
	DB	02aH
	DB	098H
	DB	04H
	DB	0f1H
	DB	0ceH
	DB	06dH
	DB	03dH
	DB	06eH
	DB	01dH
	DB	0c6H
	DB	0caH
	DB	018H
	DB	01dH
	DB	04bH
	DB	054H
	DB	061H
	DB	079H
	DB	0d5H
	DB	055H
	DB	044H
	DB	0aaH
	DB	077H
	DB	060H
	DB	0c4H
	DB	0dH
	DB	06H
	DB	074H
	DB	015H
	DB	039H
	DB	0c7H
	DB	0e3H
	DB	0cdH
	DB	09dH
	DB	02fH
	DB	066H
	DB	050H
	DB	0b2H
	DB	01H
	DB	03fH
	DB	0d0H
	DB	0eeH
	DB	0b8H
	DB	0c2H
	DB	0b8H
	DB	0e3H
	DB	0d8H
	DB	0d2H
	DB	040H
	DB	0ccH
	DB	0aeH
	DB	02dH
	DB	04cH
	DB	098H
	DB	032H
	DB	0aH
	DB	074H
	DB	042H
	DB	0e1H
	DB	0c8H
	DB	0d7H
	DB	05aH
	DB	042H
	DB	0d6H
	DB	0e6H
	DB	0cfH
	DB	0a4H
	DB	0c2H
	DB	0ecH
	DB	0a1H
	DB	079H
	DB	08dH
	DB	015H
	DB	08cH
	DB	07aH
	DB	0ecH
	DB	0dfH
	DB	082H
	DB	049H
	DB	0fH
	DB	024H
	DB	0bbH
	DB	09bH
	DB	038H
	DB	0e1H
	DB	08H
	DB	0bcH
	DB	0daH
	DB	012H
	DB	0c3H
	DB	0faH
	DB	0f9H
	DB	0a2H
	DB	011H
	DB	041H
	DB	0c3H
	DB	061H
	DB	03bH
	DB	058H
	DB	036H
	DB	07fH
	DB	092H
	DB	02aH
	DB	0aaH
	DB	026H
	DB	0cdH
	DB	022H
	DB	0f2H
	DB	03dH
	DB	070H
	DB	08dH
	DB	0aeH
	DB	069H
	DB	09aH
	DB	0d7H
	DB	0cbH
	DB	040H
	DB	0a8H
	DB	0adH
	DB	0bH
	DB	06eH
	DB	027H
	DB	084H
	DB	097H
	DB	03dH
	DB	0cbH
	DB	060H
	DB	056H
	DB	084H
	DB	0c0H
	DB	08bH
	DB	08dH
	DB	069H
	DB	098H
	DB	0c6H
	DB	09aH
	DB	0acH
	DB	04H
	DB	099H
	DB	021H
	DB	087H
	DB	01eH
	DB	0bbH
	DB	065H
	DB	030H
	DB	01aH
	DB	046H
	DB	019H
	DB	0caH
	DB	080H
	DB	0ecH
	DB	0b4H
	DB	085H
	DB	0a3H
	DB	01dH
	DB	074H
	DB	042H
	DB	023H
	DB	0ceH
	DB	08dH
	DB	0dcH
	DB	023H
	DB	094H
	DB	082H
	DB	08dH
	DB	06aH
	DB	080H
	DB	047H
	DB	0cH
	DB	09H
	DB	02fH
	DB	05bH
	DB	0a4H
	DB	013H
	DB	0c3H
	DB	037H
	DB	08fH
	DB	0a6H
	DB	05H
	DB	042H
	DB	055H
	DB	0c6H
	DB	0f9H
	DB	0dfH
	DB	044H
	DB	095H
	DB	086H
	DB	02bH
	DB	0bbH
	DB	032H
	DB	087H
	DB	068H
	DB	01fH
	DB	093H
	DB	01bH
	DB	068H
	DB	07cH
	DB	088H
	DB	08aH
	DB	0bfH
	DB	084H
	DB	04dH
	DB	0fcH
	DB	08fH
	DB	0c2H
	DB	083H
	DB	031H
	DB	0e5H
	DB	079H
	DB	092H
	DB	08cH
	DB	0d1H
	DB	02bH
	DB	0d2H
	DB	039H
	DB	0aH
	DB	0e1H
	DB	023H
	DB	0cfH
	DB	03H
	DB	081H
	DB	08dH
	DB	014H
	DB	0deH
	DB	0ddH
	DB	0e5H
	DB	0c0H
	DB	0c2H
	DB	04cH
	DB	08aH
	DB	0b0H
	DB	018H
	DB	0bfH
	DB	0caH
	DB	075H
	DB	0caH
	DB	09H
	DB	06fH
	DB	02dH
	DB	053H
	DB	01fH
	DB	03dH
	DB	016H
	DB	019H
	DB	0e7H
	DB	085H
	DB	0f1H
	DB	0adH
	DB	0a4H
	DB	037H
	DB	0caH
	DB	0b9H
	DB	02eH
	DB	098H
	DB	05H
	DB	058H
	DB	0b3H
	DB	0dcH
	DB	0e1H
	DB	047H
	DB	04aH
	DB	0fbH
	DB	075H
	DB	0bfH
	DB	0edH
	DB	0bfH
	DB	08fH
	DB	0f5H
	DB	04cH
	DB	0b2H
	DB	061H
	DB	08eH
	DB	02H
	DB	044H
	DB	0c9H
	DB	0acH
	DB	0dH
	DB	03cH
	DB	066H
	DB	0fbH
	DB	051H
	DB	059H
	DB	08cH
	DB	0d2H
	DB	0dbH
	DB	011H
	DB	0f9H
	DB	0beH
	DB	039H
	DB	079H
	DB	01aH
	DB	0beH
	DB	044H
	DB	07cH
	DB	063H
	DB	09H
	DB	04fH
	DB	07cH
	DB	045H
	DB	03bH
	DB	07fH
	DB	0f8H
	DB	07cH
	DB	0b5H
	DB	0bbH
	DB	036H
	DB	0b7H
	DB	0c7H
	DB	09eH
	DB	0fbH
	DB	08H
	DB	072H
	DB	0d1H
	DB	070H
	DB	058H
	DB	0b8H
	DB	03bH
	DB	015H
	DB	0abH
	DB	08H
	DB	066H
	DB	0adH
	DB	08aH
	DB	058H
	DB	065H
	DB	06cH
	DB	05aH
	DB	07eH
	DB	020H
	DB	0dbH
	DB	0dfH
	DB	030H
	DB	08bH
	DB	024H
	DB	061H
	DB	0d9H
	DB	07cH
	DB	0eH
	DB	0c0H
	DB	02H
	DB	04aH
	DB	027H
	DB	015H
	DB	05H
	DB	052H
	DB	049H
	DB	0cfH
	DB	03bH
	DB	047H
	DB	08dH
	DB	0ddH
	DB	047H
	DB	040H
	DB	0deH
	DB	065H
	DB	04fH
	DB	075H
	DB	0caH
	DB	068H
	DB	06eH
	DB	0dH
	DB	073H
	DB	045H
	DB	0c6H
	DB	09eH
	DB	0d5H
	DB	0cH
	DB	0dcH
	DB	02aH
	DB	08bH
	DB	033H
	DB	02bH
	DB	01fH
	DB	088H
	DB	024H
	DB	010H
	DB	08aH
	DB	0c9H
	DB	037H
	DB	0ebH
	DB	05H
	DB	05H
	DB	085H
	DB	060H
	DB	08eH
	DB	0e7H
	DB	034H
	DB	09H
	DB	07fH
	DB	0c0H
	DB	090H
	DB	054H
	DB	0fbH
	DB	0ffH
	DB	089H
	DB	0eeH
	DB	0aeH
	DB	0eaH
	DB	079H
	DB	01fH
	DB	04aH
	DB	07aH
	DB	0b1H
	DB	0f9H
	DB	086H
	DB	082H
	DB	094H
	DB	0a4H
	DB	0f9H
	DB	0e2H
	DB	07bH
	DB	042H
	DB	0afH
	DB	081H
	DB	00H
	DB	0cbH
	DB	09dH
	DB	059H
	DB	0ceH
	DB	0f9H
	DB	064H
	DB	058H
	DB	03H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	0e3H
	DB	087H
	DB	0aaH
	DB	0a5H
	DB	08bH
	DB	0a4H
	DB	083H
	DB	0afH
	DB	0a7H
	DB	0e8H
	DB	0ebH
	DB	046H
	DB	097H
	DB	078H
	DB	031H
	DB	07eH
	DB	0cfH
	DB	04cH
	DB	0f5H
	DB	073H
	DB	0aaH
	DB	09dH
	DB	04eH
	DB	0acH
	DB	023H
	DB	0f2H
	DB	0cdH
	DB	0f9H
	DB	014H
	DB	0e4H
	DB	0e2H
	DB	00H
	DB	0a8H
	DB	0b4H
	DB	090H
	DB	0e4H
	DB	02eH
	DB	0e6H
	DB	046H
	DB	080H
	DB	02dH
	DB	0c6H
	DB	0eeH
	DB	02bH
	DB	047H
	DB	01bH
	DB	027H
	DB	081H
	DB	095H
	DB	0d6H
	DB	09H
	DB	018H
	DB	0ecH
	DB	0ecH
	DB	0b4H
	DB	04bH
	DB	0f7H
	DB	099H
	DB	066H
	DB	0f8H
	DB	03fH
	DB	0abH
	DB	0a0H
	DB	049H
	DB	092H
	DB	098H
	DB	0ebH
	DB	0c6H
	DB	099H
	DB	0c0H
	DB	0c8H
	DB	063H
	DB	047H
	DB	015H
	DB	0a3H
	DB	020H
	DB	0bbH
	DB	04fH
	DB	07H
	DB	05dH
	DB	062H
	DB	02eH
	DB	074H
	DB	0c8H
	DB	0c9H
	DB	032H
	DB	00H
	DB	04fH
	DB	025H
	DB	0b4H
	DB	01eH
	DB	036H
	DB	010H
	DB	025H
	DB	0b5H
	DB	0a8H
	DB	078H
	DB	015H
	DB	039H
	DB	01fH
	DB	061H
	DB	08H
	DB	0fcH
	DB	04aH
	DB	0faH
	DB	06aH
	DB	05H
	DB	0d9H
	DB	030H
	DB	03cH
	DB	06bH
	DB	0a6H
	DB	08aH
	DB	012H
	DB	08aH
	DB	055H
	DB	070H
	DB	05dH
	DB	041H
	DB	059H
	DB	085H
	DB	083H
	DB	02fH
	DB	0deH
	DB	0aaH
	DB	0e6H
	DB	0c8H
	DB	0e1H
	DB	091H
	DB	010H
	DB	0e8H
	DB	04dH
	DB	01bH
	DB	01fH
	DB	019H
	DB	09aH
	DB	026H
	DB	092H
	DB	011H
	DB	09eH
	DB	0dcH
	DB	096H
	DB	013H
	DB	026H
	DB	058H
	DB	0f0H
	DB	09dH
	DB	0a7H
	DB	0c6H
	DB	023H
	DB	0efH
	DB	0ceH
	DB	0c7H
	DB	012H
	DB	053H
	DB	07aH
	DB	03dH
	DB	094H
	DB	0c0H
	DB	0bfH
	DB	05dH
	DB	07eH
	DB	035H
	DB	02eH
	DB	0c9H
	DB	04aH
	DB	0e5H
	DB	079H
	DB	07fH
	DB	0dbH
	DB	037H
	DB	07dH
	DB	0c1H
	DB	055H
	DB	011H
	DB	050H
	DB	072H
	DB	01aH
	DB	0dfH
	DB	015H
	DB	0bdH
	DB	026H
	DB	0a8H
	DB	0efH
	DB	0c2H
	DB	0fcH
	DB	0aaH
	DB	0d5H
	DB	068H
	DB	081H
	DB	0faH
	DB	09eH
	DB	062H
	DB	046H
	DB	02cH
	DB	028H
	DB	0f3H
	DB	0aH
	DB	0e1H
	DB	0ceH
	DB	0acH
	DB	0a9H
	DB	03cH
	DB	034H
	DB	05cH
	DB	0f2H
	DB	043H
	DB	0b7H
	DB	03fH
	DB	054H
	DB	02eH
	DB	020H
	DB	074H
	DB	0a7H
	DB	05H
	DB	0bdH
	DB	026H
	DB	043H
	DB	0bbH
	DB	09fH
	DB	07cH
	DB	0c7H
	DB	09bH
	DB	0b6H
	DB	0e7H
	DB	09H
	DB	01eH
	DB	0a6H
	DB	0e2H
	DB	032H
	DB	0dfH
	DB	0fH
	DB	09aH
	DB	0d0H
	DB	0d6H
	DB	0cfH
	DB	050H
	DB	023H
	DB	027H
	DB	087H
	DB	06dH
	DB	082H
	DB	020H
	DB	07aH
	DB	0bfH
	DB	021H
	DB	015H
	DB	0cdH
	DB	0acH
	DB	0f6H
	DB	0d5H
	DB	0a4H
	DB	08fH
	DB	06cH
	DB	018H
	DB	079H
	DB	0a6H
	DB	05bH
	DB	011H
	DB	05fH
	DB	0fH
	DB	08bH
	DB	03cH
	DB	0b3H
	DB	0c5H
	DB	09dH
	DB	015H
	DB	0ddH
	DB	08cH
	DB	076H
	DB	09bH
	DB	0c0H
	DB	014H
	DB	079H
	DB	05aH
	DB	018H
	DB	037H
	DB	0f3H
	DB	090H
	DB	01bH
	DB	058H
	DB	045H
	DB	0ebH
	DB	049H
	DB	01aH
	DB	0dfH
	DB	0efH
	DB	0e0H
	DB	097H
	DB	0b1H
	DB	0faH
	DB	030H
	DB	0a1H
	DB	02fH
	DB	0c1H
	DB	0f6H
	DB	05bH
	DB	0a2H
	DB	029H
	DB	05H
	DB	03H
	DB	015H
	DB	039H
	DB	097H
	DB	01aH
	DB	010H
	DB	0f2H
	DB	0f3H
	DB	06cH
	DB	032H
	DB	01bH
	DB	0b5H
	DB	013H
	DB	031H
	DB	0cdH
	DB	0efH
	DB	0b3H
	DB	09eH
	DB	039H
	DB	064H
	DB	0c7H
	DB	0efH
	DB	07H
	DB	099H
	DB	094H
	DB	0f5H
	DB	0b6H
	DB	09bH
	DB	02eH
	DB	0ddH
	DB	083H
	DB	0a7H
	DB	01eH
	DB	0f5H
	DB	049H
	DB	097H
	DB	01eH
	DB	0e9H
	DB	03fH
	DB	044H
	DB	0eaH
	DB	0c3H
	DB	093H
	DB	08fH
	DB	0cdH
	DB	0d6H
	DB	01dH
	DB	01H
	DB	0faH
	DB	071H
	DB	079H
	DB	09dH
	DB	0a3H
	DB	0a8H
	DB	09H
	DB	01cH
	DB	04cH
	DB	048H
	DB	0aaH
	DB	09eH
	DB	0d2H
	DB	063H
	DB	0ffH
	DB	07H
	DB	049H
	DB	0dfH
	DB	095H
	DB	0d4H
	DB	04fH
	DB	0efH
	DB	06aH
	DB	0bH
	DB	0b5H
	DB	078H
	DB	0ecH
	DB	069H
	DB	045H
	DB	06aH
	DB	0a5H
	DB	040H
	DB	08aH
	DB	0e3H
	DB	02cH
	DB	07aH
	DB	0f0H
	DB	08aH
	DB	0d7H
	DB	0baH
	DB	089H
	DB	021H
	DB	028H
	DB	07eH
	DB	03bH
	DB	0beH
	DB	0e3H
	DB	01bH
	DB	076H
	DB	07bH
	DB	0e0H
	DB	06aH
	DB	0eH
	DB	070H
	DB	05cH
	DB	086H
	DB	04aH
	DB	076H
	DB	091H
	DB	037H
	DB	0dfH
	DB	028H
	DB	029H
	DB	022H
	DB	083H
	DB	0eaH
	DB	081H
	DB	0a2H
	DB	048H
	DB	02H
	DB	041H
	DB	0b4H
	DB	04dH
	DB	099H
	DB	021H
	DB	0cdH
	DB	0beH
	DB	0c1H
	DB	0bcH
	DB	028H
	DB	0dcH
	DB	01fH
	DB	0daH
	DB	011H
	DB	04bH
	DB	0d8H
	DB	0e5H
	DB	021H
	DB	07aH
	DB	0c9H
	DB	0d8H
	DB	0ebH
	DB	0afH
	DB	0a7H
	DB	020H
	DB	0e9H
	DB	0daH
	DB	04fH
	DB	09aH
	DB	0ceH
	DB	023H
	DB	01cH
	DB	0c9H
	DB	049H
	DB	0e5H
	DB	0b9H
	DB	06fH
	DB	0e7H
	DB	06fH
	DB	0fcH
	DB	021H
	DB	06H
	DB	03fH
	DB	0ddH
	DB	0c8H
	DB	03aH
	DB	06bH
	DB	086H
	DB	079H
	DB	0c0H
	DB	0dH
	DB	035H
	DB	0e0H
	DB	095H
	DB	076H
	DB	0a8H
	DB	075H
	DB	030H
	DB	05bH
	DB	0edH
	DB	05fH
	DB	036H
	DB	0edH
	DB	024H
	DB	02cH
	DB	089H
	DB	00H
	DB	0ddH
	DB	01fH
	DB	0a9H
	DB	065H
	DB	0bcH
	DB	095H
	DB	0dH
	DB	0fcH
	DB	0e0H
	DB	09bH
	DB	013H
	DB	022H
	DB	063H
	DB	0a1H
	DB	0eeH
	DB	0f5H
	DB	02dH
	DB	0d6H
	DB	088H
	DB	08cH
	DB	030H
	DB	09fH
	DB	05aH
	DB	07dH
	DB	071H
	DB	028H
	DB	026H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	0bfH
	DB	053H
	DB	0d2H
	DB	0daH
	DB	0deH
	DB	078H
	DB	0e8H
	DB	022H
	DB	0a4H
	DB	0d9H
	DB	049H
	DB	0a9H
	DB	0bcH
	DB	067H
	DB	066H
	DB	0b0H
	DB	01bH
	DB	06H
	DB	0a8H
	DB	0efH
	DB	070H
	DB	0d2H
	DB	067H
	DB	048H
	DB	0c6H
	DB	0a7H
	DB	0fcH
	DB	036H
	DB	0d8H
	DB	0aH
	DB	0e4H
	DB	0c5H
	DB	052H
	DB	0fH
	DB	07cH
	DB	04aH
	DB	0b0H
	DB	0acH
	DB	085H
	DB	044H
	DB	042H
	DB	04fH
	DB	0a4H
	DB	05H
	DB	016H
	DB	02fH
	DB	0efH
	DB	05aH
	DB	06bH
	DB	07fH
	DB	022H
	DB	094H
	DB	098H
	DB	06H
	DB	036H
	DB	018H
	DB	0d3H
	DB	09fH
	DB	00H
	DB	03H
	DB	0cbH
	DB	05fH
	DB	0b8H
	DB	0d1H
	DB	0c8H
	DB	06bH
	DB	064H
	DB	034H
	DB	097H
	DB	0daH
	DB	01fH
	DB	0f9H
	DB	045H
	DB	0c8H
	DB	0d3H
	DB	0beH
	DB	0deH
	DB	0caH
	DB	04fH
	DB	047H
	DB	097H
	DB	02H
	DB	0a7H
	DB	0a7H
	DB	035H
	DB	0f0H
	DB	043H
	DB	0ddH
	DB	0b1H
	DB	0d6H
	DB	0aaH
	DB	0adH
	DB	0e3H
	DB	0c4H
	DB	0a0H
	DB	0acH
	DB	07cH
	DB	0a7H
	DB	0f3H
	DB	0faH
	DB	052H
	DB	079H
	DB	0beH
	DB	0f5H
	DB	06fH
	DB	082H
	DB	0cdH
	DB	07aH
	DB	02fH
	DB	038H
	DB	067H
	DB	02eH
	DB	082H
	DB	048H
	DB	014H
	DB	0e1H
	DB	07H
	DB	00H
	DB	030H
	DB	0aH
	DB	05H
	DB	05eH
	DB	016H
	DB	030H
	DB	0b8H
	DB	0f1H
	DB	0cbH
	DB	0eH
	DB	091H
	DB	09fH
	DB	05eH
	DB	094H
	DB	020H
	DB	010H
	DB	0a4H
	DB	016H
	DB	0e2H
	DB	0bfH
	DB	048H
	DB	0cbH
	DB	046H
	DB	099H
	DB	03dH
	DB	03cH
	DB	0b6H
	DB	0a5H
	DB	01cH
	DB	019H
	DB	0baH
	DB	0cfH
	DB	086H
	DB	047H
	DB	085H
	DB	0a0H
	DB	0bH
	DB	0c2H
	DB	0ecH
	DB	0ffH
	DB	015H
	DB	0d3H
	DB	050H
	DB	087H
	DB	05bH
	DB	024H
	DB	06eH
	DB	0d5H
	DB	03eH
	DB	068H
	DB	0beH
	DB	06fH
	DB	055H
	DB	0bdH
	DB	07eH
	DB	05H
	DB	0cfH
	DB	0c2H
	DB	0b2H
	DB	0edH
	DB	064H
	DB	032H
	DB	019H
	DB	08aH
	DB	064H
	DB	044H
	DB	0b6H
	DB	0d8H
	DB	0c2H
	DB	047H
	DB	0faH
	DB	0b9H
	DB	041H
	DB	0f5H
	DB	069H
	DB	076H
	DB	08bH
	DB	05cH
	DB	042H
	DB	093H
	DB	066H
	DB	0f1H
	DB	0d3H
	DB	0f0H
	DB	0fH
	DB	03H
	DB	045H
	DB	0b9H
	DB	061H
	DB	023H
	DB	0d5H
	DB	062H
	DB	04H
	DB	0c0H
	DB	01cH
	DB	063H
	DB	0b2H
	DB	02cH
	DB	0e7H
	DB	08bH
	DB	0afH
	DB	011H
	DB	06eH
	DB	052H
	DB	05eH
	DB	0d9H
	DB	0fH
	DB	0deH
	DB	0a3H
	DB	09fH
	DB	0a4H
	DB	069H
	DB	049H
	DB	04dH
	DB	038H
	DB	066H
	DB	0c3H
	DB	01eH
	DB	05H
	DB	0f2H
	DB	095H
	DB	0ffH
	DB	021H
	DB	0feH
	DB	0a8H
	DB	0d4H
	DB	0e6H
	DB	0e1H
	DB	03dH
	DB	067H
	DB	0e4H
	DB	07cH
	DB	0e7H
	DB	022H
	DB	0e9H
	DB	069H
	DB	08aH
	DB	01cH
	DB	010H
	DB	048H
	DB	0d6H
	DB	08eH
	DB	0bcH
	DB	0deH
	DB	076H
	DB	0b8H
	DB	06fH
	DB	0cfH
	DB	097H
	DB	06eH
	DB	0abH
	DB	08aH
	DB	0a9H
	DB	079H
	DB	02H
	DB	068H
	DB	0b7H
	DB	06H
	DB	08eH
	DB	01H
	DB	07aH
	DB	08bH
	DB	09bH
	DB	074H
	DB	094H
	DB	09H
	DB	051H
	DB	04fH
	DB	010H
	DB	053H
	DB	02H
	DB	07fH
	DB	0d1H
	DB	06cH
	DB	037H
	DB	086H
	DB	0eaH
	DB	01bH
	DB	0acH
	DB	05fH
	DB	015H
	DB	0cbH
	DB	079H
	DB	071H
	DB	01eH
	DB	0e2H
	DB	0abH
	DB	0e8H
	DB	02fH
	DB	05cH
	DB	0f8H
	DB	0b1H
	DB	03aH
	DB	0e7H
	DB	030H
	DB	030H
	DB	0efH
	DB	05bH
	DB	09eH
	DB	044H
	DB	057H
	DB	0e7H
	DB	05dH
	DB	013H
	DB	04H
	DB	0f9H
	DB	088H
	DB	0d6H
	DB	02dH
	DB	0d6H
	DB	0fcH
	DB	04bH
	DB	094H
	DB	0edH
	DB	038H
	DB	0baH
	DB	083H
	DB	01dH
	DB	0a4H
	DB	0b7H
	DB	063H
	DB	049H
	DB	071H
	DB	0b6H
	DB	0cdH
	DB	08eH
	DB	0c3H
	DB	025H
	DB	0d9H
	DB	0c6H
	DB	01cH
	DB	00H
	DB	0f1H
	DB	0dfH
	DB	073H
	DB	062H
	DB	07eH
	DB	0d3H
	DB	074H
	DB	05aH
	DB	05eH
	DB	084H
	DB	089H
	DB	0f3H
	DB	0a9H
	DB	05cH
	DB	069H
	DB	063H
	DB	09cH
	DB	032H
	DB	0cdH
	DB	06eH
	DB	01dH
	DB	053H
	DB	07aH
	DB	085H
	DB	0f7H
	DB	05cH
	DB	0c8H
	DB	044H
	DB	072H
	DB	06eH
	DB	08aH
	DB	072H
	DB	0fcH
	DB	00H
	DB	077H
	DB	0adH
	DB	022H
	DB	00H
	DB	0fH
	DB	01dH
	DB	050H
	DB	078H
	DB	0f6H
	DB	0b8H
	DB	066H
	DB	031H
	DB	08cH
	DB	066H
	DB	08fH
	DB	01aH
	DB	0d0H
	DB	03dH
	DB	05aH
	DB	05fH
	DB	0ceH
	DB	0d5H
	DB	021H
	DB	09fH
	DB	02eH
	DB	0abH
	DB	0bdH
	DB	0aH
	DB	0a5H
	DB	0c0H
	DB	0f4H
	DB	060H
	DB	0d1H
	DB	083H
	DB	0f0H
	DB	044H
	DB	04H
	DB	0a0H
	DB	0d6H
	DB	0f4H
	DB	069H
	DB	055H
	DB	08eH
	DB	081H
	DB	0faH
	DB	0b2H
	DB	04aH
	DB	016H
	DB	079H
	DB	05H
	DB	0abH
	DB	04cH
	DB	078H
	DB	078H
	DB	050H
	DB	02aH
	DB	0d3H
	DB	0e3H
	DB	08fH
	DB	0dbH
	DB	0e6H
	DB	02aH
	DB	041H
	DB	055H
	DB	06cH
	DB	0ecH
	DB	037H
	DB	032H
	DB	057H
	DB	059H
	DB	053H
	DB	03cH
	DB	0e8H
	DB	0f2H
	DB	05fH
	DB	036H
	DB	07cH
	DB	087H
	DB	0bbH
	DB	055H
	DB	078H
	DB	0d6H
	DB	067H
	DB	0aeH
	DB	093H
	DB	0f9H
	DB	0e2H
	DB	0fdH
	DB	099H
	DB	0bcH
	DB	0bcH
	DB	05fH
	DB	02fH
	DB	0bbH
	DB	0a8H
	DB	08cH
	DB	0f6H
	DB	051H
	DB	061H
	DB	039H
	DB	042H
	DB	0fH
	DB	0cfH
	DB	0f3H
	DB	0b7H
	DB	036H
	DB	01dH
	DB	086H
	DB	032H
	DB	02cH
	DB	04bH
	DB	0d8H
	DB	04cH
	DB	082H
	DB	0f3H
	DB	035H
	DB	0abH
	DB	0b1H
	DB	052H
	DB	0c4H
	DB	0a9H
	DB	034H
	DB	011H
	DB	037H
	DB	03aH
	DB	0aaH
	DB	082H
	DB	020H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	064H
	DB	049H
	DB	07eH
	DB	05aH
	DB	083H
	DB	01eH
	DB	04aH
	DB	093H
	DB	02cH
	DB	09H
	DB	0beH
	DB	03eH
	DB	053H
	DB	093H
	DB	037H
	DB	06dH
	DB	0aaH
	DB	059H
	DB	095H
	DB	048H
	DB	0b8H
	DB	016H
	DB	03H
	DB	01dH
	DB	022H
	DB	04bH
	DB	0bfH
	DB	050H
	DB	0a8H
	DB	018H
	DB	0edH
	DB	023H
	DB	050H
	DB	0eaH
	DB	0e7H
	DB	0e9H
	DB	060H
	DB	087H
	DB	0c8H
	DB	0a0H
	DB	0dbH
	DB	051H
	DB	0adH
	DB	029H
	DB	0bH
	DB	0d0H
	DB	0cH
	DB	01aH
	DB	0c1H
	DB	062H
	DB	08H
	DB	057H
	DB	063H
	DB	05bH
	DB	0f2H
	DB	046H
	DB	0c1H
	DB	076H
	DB	0abH
	DB	046H
	DB	03bH
	DB	0e3H
	DB	0bH
	DB	080H
	DB	08dH
	DB	0a5H
	DB	048H
	DB	08H
	DB	01aH
	DB	0c8H
	DB	047H
	DB	0b1H
	DB	058H
	DB	0e1H
	DB	026H
	DB	04bH
	DB	0e2H
	DB	05bH
	DB	0b0H
	DB	091H
	DB	0bH
	DB	0bcH
	DB	092H
	DB	064H
	DB	071H
	DB	08H
	DB	08H
	DB	094H
	DB	015H
	DB	0d4H
	DB	05fH
	DB	0abH
	DB	01bH
	DB	03dH
	DB	026H
	DB	04H
	DB	0e8H
	DB	0a8H
	DB	0efH
	DB	0f1H
	DB	0aeH
	DB	040H
	DB	020H
	DB	0cfH
	DB	0a3H
	DB	099H
	DB	036H
	DB	0b6H
	DB	068H
	DB	027H
	DB	0b2H
	DB	03fH
	DB	037H
	DB	01bH
	DB	092H
	DB	020H
	DB	0bH
	DB	0e9H
	DB	02H
	DB	051H
	DB	0e6H
	DB	0d7H
	DB	03cH
	DB	05fH
	DB	086H
	DB	0deH
	DB	05fH
	DB	0d4H
	DB	0a9H
	DB	050H
	DB	078H
	DB	019H
	DB	033H
	DB	0d7H
	DB	09aH
	DB	028H
	DB	027H
	DB	02bH
	DB	078H
	DB	02aH
	DB	02eH
	DB	0c3H
	DB	013H
	DB	0efH
	DB	0dfH
	DB	0ccH
	DB	06H
	DB	028H
	DB	0f4H
	DB	03dH
	DB	074H
	DB	04cH
	DB	02dH
	DB	0c2H
	DB	0ffH
	DB	03dH
	DB	0cbH
	DB	066H
	DB	099H
	DB	09bH
	DB	050H
	DB	0c7H
	DB	0caH
	DB	089H
	DB	05bH
	DB	0cH
	DB	064H
	DB	079H
	DB	01eH
	DB	0eaH
	DB	0a5H
	DB	0f2H
	DB	094H
	DB	099H
	DB	0fbH
	DB	01cH
	DB	02H
	DB	06fH
	DB	084H
	DB	0ceH
	DB	05bH
	DB	05cH
	DB	072H
	DB	0baH
	DB	010H
	DB	083H
	DB	0cdH
	DB	0dbH
	DB	05cH
	DB	0e4H
	DB	054H
	DB	034H
	DB	063H
	DB	016H
	DB	065H
	DB	0c3H
	DB	033H
	DB	0b6H
	DB	0bH
	DB	011H
	DB	059H
	DB	03fH
	DB	0b2H
	DB	053H
	DB	0c5H
	DB	017H
	DB	09aH
	DB	02cH
	DB	08dH
	DB	0b8H
	DB	013H
	DB	078H
	DB	02aH
	DB	00H
	DB	048H
	DB	056H
	DB	0a1H
	DB	065H
	DB	030H
	DB	011H
	DB	0e9H
	DB	03fH
	DB	0b6H
	DB	0d8H
	DB	076H
	DB	0c1H
	DB	083H
	DB	066H
	DB	0ddH
	DB	086H
	DB	083H
	DB	0f5H
	DB	034H
	DB	012H
	DB	0c0H
	DB	0c1H
	DB	080H
	DB	0f9H
	DB	0c8H
	DB	048H
	DB	059H
	DB	02dH
	DB	059H
	DB	03fH
	DB	086H
	DB	09H
	DB	0caH
	DB	073H
	DB	063H
	DB	017H
	DB	0d3H
	DB	056H
	DB	0e1H
	DB	03eH
	DB	02bH
	DB	0ffH
	DB	03aH
	DB	09fH
	DB	059H
	DB	0cdH
	DB	09aH
	DB	0ebH
	DB	019H
	DB	0cdH
	DB	048H
	DB	025H
	DB	093H
	DB	0d8H
	DB	0c4H
	DB	061H
	DB	028H
	DB	0bbH
	DB	032H
	DB	042H
	DB	03bH
	DB	037H
	DB	0a9H
	DB	0adH
	DB	0fbH
	DB	048H
	DB	02bH
	DB	099H
	DB	045H
	DB	03fH
	DB	0beH
	DB	025H
	DB	0a4H
	DB	01bH
	DB	0f6H
	DB	0feH
	DB	0b4H
	DB	0aaH
	DB	0bH
	DB	0efH
	DB	05eH
	DB	0d2H
	DB	04bH
	DB	0f7H
	DB	03cH
	DB	076H
	DB	029H
	DB	078H
	DB	02H
	DB	054H
	DB	082H
	DB	0c1H
	DB	031H
	DB	015H
	DB	0e4H
	DB	01H
	DB	05aH
	DB	0acH
	DB	099H
	DB	02eH
	DB	056H
	DB	013H
	DB	0a3H
	DB	0b5H
	DB	0c2H
	DB	0f6H
	DB	085H
	DB	0b8H
	DB	047H
	DB	095H
	DB	0cbH
	DB	06eH
	DB	09bH
	DB	026H
	DB	056H
	DB	0d8H
	DB	0c8H
	DB	081H
	DB	057H
	DB	0e5H
	DB	02cH
	DB	042H
	DB	0f9H
	DB	078H
	DB	0d8H
	DB	063H
	DB	04cH
	DB	043H
	DB	0d0H
	DB	06fH
	DB	0eaH
	DB	092H
	DB	08fH
	DB	028H
	DB	022H
	DB	0e4H
	DB	065H
	DB	0aaH
	DB	065H
	DB	076H
	DB	0e9H
	DB	0bfH
	DB	041H
	DB	093H
	DB	084H
	DB	050H
	DB	06cH
	DB	0c3H
	DB	0ceH
	DB	03cH
	DB	054H
	DB	0acH
	DB	01aH
	DB	06fH
	DB	067H
	DB	0dcH
	DB	066H
	DB	0f3H
	DB	0b3H
	DB	01H
	DB	091H
	DB	0e6H
	DB	098H
	DB	038H
	DB	0bH
	DB	0c9H
	DB	099H
	DB	0b0H
	DB	05aH
	DB	0bcH
	DB	0e1H
	DB	09dH
	DB	0c0H
	DB	0c6H
	DB	0dcH
	DB	0c2H
	DB	0ddH
	DB	00H
	DB	01eH
	DB	0c5H
	DB	035H
	DB	0baH
	DB	018H
	DB	0deH
	DB	0b2H
	DB	0dfH
	DB	01aH
	DB	010H
	DB	010H
	DB	023H
	DB	010H
	DB	083H
	DB	018H
	DB	0c7H
	DB	05dH
	DB	0c9H
	DB	086H
	DB	011H
	DB	0a0H
	DB	09dH
	DB	0c4H
	DB	08aH
	DB	0aH
	DB	0cdH
	DB	0ecH
	DB	067H
	DB	06fH
	DB	0abH
	DB	0dfH
	DB	022H
	DB	02fH
	DB	07H
	DB	0e0H
	DB	026H
	DB	0f0H
	DB	059H
	DB	0b6H
	DB	072H
	DB	0b5H
	DB	06eH
	DB	05cH
	DB	0bcH
	DB	08eH
	DB	01dH
	DB	021H
	DB	0bbH
	DB	0d8H
	DB	067H
	DB	0ddH
	DB	092H
	DB	072H
	DB	012H
	DB	05H
	DB	046H
	DB	081H
	DB	0d7H
	DB	0eH
	DB	0a7H
	DB	037H
	DB	013H
	DB	04cH
	DB	0dfH
	DB	0ceH
	DB	093H
	DB	0b6H
	DB	0f8H
	DB	02aH
	DB	0e2H
	DB	024H
	DB	023H
	DB	027H
	DB	04eH
	DB	058H
	DB	0a0H
	DB	082H
	DB	01cH
	DB	0c5H
	DB	050H
	DB	02eH
	DB	02dH
	DB	0aH
	DB	0b4H
	DB	058H
	DB	05eH
	DB	094H
	DB	0deH
	DB	069H
	DB	075H
	DB	0beH
	DB	05eH
	DB	0bH
	DB	04eH
	DB	0fcH
	DB	0e5H
	DB	01cH
	DB	0d3H
	DB	0e7H
	DB	0cH
	DB	025H
	DB	0a1H
	DB	0fbH
	DB	0bbH
	DB	0d6H
	DB	09H
	DB	0d2H
	DB	073H
	DB	0adH
	DB	05bH
	DB	0dH
	DB	059H
	DB	063H
	DB	01cH
	DB	053H
	DB	01fH
	DB	06aH
	DB	0aH
	DB	057H
	DB	0b9H
_hmac_whirlpool_test_key DD FLAT:??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
_bf_ecb_vectors DB 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	'N', 0f9H, 097H, 'Ea', 098H, 0ddH, 'x'
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	'Q', 086H, 'o', 0d5H, 0b8H, '^', 0cbH, 08aH
	DB	'0', 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	010H, 00H, 00H, 00H, 00H, 00H, 00H, 01H
	DB	'}', 085H, 'o', 09aH, 'a0c', 0f2H
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	'$f', 0ddH, 087H, 08bH, 096H, '<', 09dH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	'a', 0f9H, 0c3H, 080H, '"', 081H, 0b0H, 096H
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	'}', 0cH, 0c6H, '0', 0afH, 0daH, 01eH, 0c7H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	'N', 0f9H, 097H, 'Ea', 098H, 0ddH, 'x'
	DB	0feH, 0dcH, 0baH, 098H, 'vT2', 010H
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0aH, 0ceH, 0abH, 0fH, 0c6H, 0a0H, 0a2H, 08dH
	DB	'|', 0a1H, 010H, 'EJ', 01aH, 'nW'
	DB	01H, 0a1H, 0d6H, 0d0H, '9wgB'
	DB	'Y', 0c6H, 082H, 'E', 0ebH, 05H, '(+'
	DB	01H, '1', 0d9H, 'a', 09dH, 0c1H, '7n'
	DB	'\', 0d5H, 'L', 0a8H, '=', 0efH, 'W', 0daH
	DB	0b1H, 0b8H, 0ccH, 0bH, '%', 0fH, 09H, 0a0H
	DB	07H, 0a1H, 013H, '>J', 0bH, '&', 086H
	DB	02H, 'H', 0d4H, '8', 06H, 0f6H, 'qr'
	DB	017H, '0', 0e5H, 'w', 08bH, 0eaH, 01dH, 0a4H
	DB	'8IgL&', 02H, '1', 09eH
	DB	'QEKX-', 0dfH, 'D', 0aH
	DB	0a2H, '^xV', 0cfH, '&Q', 0ebH
	DB	04H, 0b9H, 015H, 0baH, 'C', 0feH, 0b5H, 0b6H
	DB	'B', 0fdH, 'D0YW', 07fH, 0a2H
	DB	'58', 082H, 0b1H, 09H, 0ceH, 08fH, 01aH
	DB	01H, 013H, 0b9H, 'p', 0fdH, '4', 0f2H, 0ceH
	DB	05H, 09bH, '^', 08H, 'Q', 0cfH, 014H, ':'
	DB	'H', 0f4H, 0d0H, 088H, 'L7', 099H, 018H
	DB	01H, 'p', 0f1H, 'uF', 08fH, 0b5H, 0e6H
	DB	07H, 'V', 0d8H, 0e0H, 'wGa', 0d2H
	DB	'C!', 093H, 0b7H, 089H, 'Q', 0fcH, 098H
	DB	'C)', 07fH, 0adH, '8', 0e3H, 's', 0feH
	DB	'v%', 014H, 0b8H, ')', 0bfH, 'Hj'
	DB	013H, 0f0H, 'AT', 0d6H, 09dH, 01aH, 0e5H
	DB	07H, 0a7H, 013H, 'pE', 0daH, '*', 016H
	DB	';', 0ddH, 011H, 090H, 'I7(', 02H
	DB	'.', 0edH, 0daH, 093H, 0ffH, 0d3H, 09cH, 'y'
	DB	04H, 'h', 091H, 04H, 0c2H, 0fdH, ';/'
	DB	'&', 095H, '_h5', 0afH, '`', 09aH
	DB	0d8H, 087H, 0e0H, '9<-', 0a6H, 0e3H
	DB	'7', 0d0H, 'k', 0b5H, 016H, 0cbH, 'uF'
	DB	016H, 'M^@O''R2'
	DB	'_', 099H, 0d0H, 'O[', 016H, '9i'
	DB	01fH, 08H, '&', 0dH, 01aH, 0c2H, 'F^'
	DB	'k', 05H, 'n', 018H, 'u', 09fH, '\', 0caH
	DB	'J', 05H, 'z;$', 0d3H, 097H, '{'
	DB	'X@#d', 01aH, 0baH, 'av'
	DB	00H, 'K', 0d6H, 0efH, 09H, 017H, '`b'
	DB	'E 1', 0c1H, 0e4H, 0faH, 0daH, 08eH
	DB	02H, 'X', 016H, 016H, 'F)', 0b0H, 07H
	DB	'H', 0dH, '9', 00H, 'n', 0e7H, 'b', 0f2H
	DB	'uU', 0aeH, '9', 0f5H, 09bH, 087H, 0bdH
	DB	'Iy>', 0bcH, 'y', 0b3H, '%', 08fH
	DB	'Cu@', 0c8H, 'i', 08fH, '<', 0faH
	DB	'S', 0c5H, '_', 09cH, 0b4H, 09fH, 0c0H, 019H
	DB	'O', 0b0H, '^', 015H, 015H, 0abH, 's', 0a7H
	DB	07H, '-C', 0a0H, 'w', 07H, 'R', 092H
	DB	'z', 08eH, '{', 0faH, 093H, '~', 089H, 0a3H
	DB	'I', 0e9H, ']mL', 0a2H, ')', 0bfH
	DB	02H, 0feH, 'Uw', 081H, 017H, 0f1H, '*'
	DB	0cfH, 09cH, ']zI', 086H, 0adH, 0b5H
	DB	01H, 083H, 010H, 0dcH, '@', 09bH, '&', 0d6H
	DB	01dH, 09dH, '\P', 018H, 0f7H, '(', 0c2H
	DB	0d1H, 0abH, 0b2H, 090H, 'e', 08bH, 0c7H, 'x'
	DB	01cH, 'X', 07fH, 01cH, 013H, 092H, 'O', 0efH
	DB	'0U2(mo)Z'
	DB	'U', 0cbH, '7t', 0d1H, '>', 0f2H, 01H
	DB	01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0faH, '4', 0ecH, 'HG', 0b2H, 'h', 0b2H
	DB	01fH, 01fH, 01fH, 01fH, 0eH, 0eH, 0eH, 0eH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0a7H, 090H, 'yQ', 08H, 0eaH, '<', 0aeH
	DB	0e0H, 0feH, 0e0H, 0feH, 0f1H, 0feH, 0f1H, 0feH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0c3H, 09eH, 07H, '-', 09fH, 0acH, 'c', 01dH
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	01H, 'I3', 0e0H, 0cdH, 0afH, 0f6H, 0e4H
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	0f2H, 01eH, 09aH, 'w', 0b7H, 01cH, 'I', 0bcH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	'$YF', 088H, 'WT6', 09aH
	DB	0feH, 0dcH, 0baH, 098H, 'vT2', 010H
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	'k\Z', 09cH, ']', 09eH, 0aH, 'Z'
_tripledes_vectors DB 01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	0feH
	DB	0dcH
	DB	0baH
	DB	098H
	DB	076H
	DB	054H
	DB	032H
	DB	010H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0e7H
	DB	0deH
	DB	0bH
	DB	07cH
	DB	06H
	DB	0aeH
	DB	05eH
	DB	0eH
	DB	0d5H
_cast_ecb_vectors DB 01H, '#Eg', 012H, '4Vx#Eg', 089H, '4Vx', 09aH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	'#', 08bH, 'O', 0e5H, 084H, '~D', 0b2H
_aes_ecb_vectors DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	00H
	DB	011H
	DB	022H
	DB	033H
	DB	044H
	DB	055H
	DB	066H
	DB	077H
	DB	088H
	DB	099H
	DB	0aaH
	DB	0bbH
	DB	0ccH
	DB	0ddH
	DB	0eeH
	DB	0ffH
	DB	08eH
	DB	0a2H
	DB	0b7H
	DB	0caH
	DB	051H
	DB	067H
	DB	045H
	DB	0bfH
	DB	0eaH
	DB	0fcH
	DB	049H
	DB	090H
	DB	04bH
	DB	049H
	DB	060H
	DB	089H
_serpent_vectors DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	0deH
	DB	026H
	DB	09fH
	DB	0f8H
	DB	033H
	DB	0e4H
	DB	032H
	DB	0b8H
	DB	05bH
	DB	02eH
	DB	088H
	DB	0d2H
	DB	070H
	DB	01cH
	DB	0e7H
	DB	05cH
_twofish_vectors DB 0d4H
	DB	03bH
	DB	0b7H
	DB	055H
	DB	06eH
	DB	0a3H
	DB	02eH
	DB	046H
	DB	0f2H
	DB	0a2H
	DB	082H
	DB	0b7H
	DB	0d4H
	DB	05bH
	DB	04eH
	DB	0dH
	DB	057H
	DB	0ffH
	DB	073H
	DB	09dH
	DB	04dH
	DB	0c9H
	DB	02cH
	DB	01bH
	DB	0d7H
	DB	0fcH
	DB	01H
	DB	070H
	DB	0cH
	DB	0c8H
	DB	021H
	DB	06fH
	DB	090H
	DB	0afH
	DB	0e9H
	DB	01bH
	DB	0b2H
	DB	088H
	DB	054H
	DB	04fH
	DB	02cH
	DB	032H
	DB	0dcH
	DB	023H
	DB	09bH
	DB	026H
	DB	035H
	DB	0e6H
	DB	06cH
	DB	0b4H
	DB	056H
	DB	01cH
	DB	040H
	DB	0bfH
	DB	0aH
	DB	097H
	DB	05H
	DB	093H
	DB	01cH
	DB	0b6H
	DB	0d4H
	DB	08H
	DB	0e7H
	DB	0faH
_hmac_sha512_test_keys DD FLAT:??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@
	DD	FLAT:??_C@_04HDLGGHEL@Jefe?$AA@
	DD	FLAT:??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@
	DD	FLAT:??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@
	DD	FLAT:??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@
	DD	FLAT:??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@
_hmac_sha512_test_data DD FLAT:??_C@_08BPPJKMC@Hi?5There?$AA@
	DD	FLAT:??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@
	DD	FLAT:??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@
	DD	FLAT:??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@
	DD	FLAT:??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@
	DD	FLAT:??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@
_hmac_sha512_test_vectors DD FLAT:??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@
	DD	FLAT:??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@
	DD	FLAT:??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@
	DD	FLAT:??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@
	DD	FLAT:??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@
	DD	FLAT:??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@
_hmac_sha1_test_keys DD FLAT:??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@
	DD	FLAT:??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@
	DD	FLAT:??_C@_04HDLGGHEL@Jefe?$AA@
	DD	FLAT:??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@
_hmac_sha1_test_data DD FLAT:??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@
	DD	FLAT:??_C@_08BPPJKMC@Hi?5There?$AA@
	DD	FLAT:??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@
	DD	FLAT:??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@
_hmac_sha1_test_vectors DD FLAT:??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@
	DD	FLAT:??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@
	DD	FLAT:??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@
	DD	FLAT:??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@
_hmac_ripemd160_test_keys DD FLAT:??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@
	DD	FLAT:??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@
_hmac_ripemd160_test_data DD FLAT:??_C@_0P@ONGHGJEC@message?5digest?$AA@
	DD	FLAT:??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@
_hmac_ripemd160_test_vectors DD FLAT:??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@
	DD	FLAT:??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@
_hmac_whirlpool_test_data DD FLAT:??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
_hmac_whirlpool_test_vectors DD FLAT:??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@
_lrw_vectors DB	0f8H
	DB	0d4H
	DB	076H
	DB	0ffH
	DB	0d6H
	DB	046H
	DB	0eeH
	DB	06cH
	DB	023H
	DB	084H
	DB	0cbH
	DB	01cH
	DB	077H
	DB	0d6H
	DB	019H
	DB	05dH
	DB	0feH
	DB	0f1H
	DB	0a9H
	DB	0f3H
	DB	07bH
	DB	0bcH
	DB	08dH
	DB	021H
	DB	0a7H
	DB	09cH
	DB	021H
	DB	0f8H
	DB	0cbH
	DB	090H
	DB	02H
	DB	089H
	DB	0a8H
	DB	045H
	DB	034H
	DB	08eH
	DB	0c8H
	DB	0c5H
	DB	0b5H
	DB	0f1H
	DB	026H
	DB	0f5H
	DB	0eH
	DB	076H
	DB	0feH
	DB	0fdH
	DB	01bH
	DB	01eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	0bdH
	DB	06H
	DB	0b8H
	DB	0e1H
	DB	0dbH
	DB	098H
	DB	089H
	DB	09eH
	DB	0c4H
	DB	098H
	DB	0e4H
	DB	091H
	DB	0cfH
	DB	01cH
	DB	070H
	DB	02bH
	DB	0fbH
	DB	076H
	DB	015H
	DB	0b2H
	DB	03dH
	DB	080H
	DB	089H
	DB	01dH
	DB	0d4H
	DB	070H
	DB	098H
	DB	0bH
	DB	0c7H
	DB	095H
	DB	084H
	DB	0c8H
	DB	0b2H
	DB	0fbH
	DB	064H
	DB	0ceH
	DB	060H
	DB	097H
	DB	087H
	DB	08dH
	DB	017H
	DB	0fcH
	DB	0e4H
	DB	05aH
	DB	049H
	DB	0e8H
	DB	030H
	DB	0b7H
	DB	06eH
	DB	078H
	DB	017H
	DB	0e7H
	DB	02dH
	DB	05eH
	DB	012H
	DB	0d4H
	DB	060H
	DB	064H
	DB	04H
	DB	07aH
	DB	0f1H
	DB	02fH
	DB	09eH
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	05bH
	DB	090H
	DB	08eH
	DB	0c1H
	DB	0abH
	DB	0ddH
	DB	067H
	DB	05fH
	DB	03dH
	DB	069H
	DB	08aH
	DB	095H
	DB	053H
	DB	0c8H
	DB	09cH
	DB	0e5H
?key1@?1??TestSectorBufEncryption@@9@9 DB 027H		; `TestSectorBufEncryption'::`2'::key1
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
_DATA	ENDS
PUBLIC	??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	__$ArrayPad$
PUBLIC	_XTSAesTest@4
EXTRN	_EncryptBufferXTS@32:PROC
EXTRN	_MirrorBytes64@8:PROC
EXTRN	_EAInitMode@4:PROC
EXTRN	_EAInit@12:PROC
EXTRN	_EAGetByName@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
; File c:\home\public\desktop\projects\ciphershed.build\src\common\tests.c
text$s	SEGMENT
??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@ DB 'AES', 00H	;  ?? ::FNODOBFM::`string'
; Function compile flags: /Odtp
text$s	ENDS
;	COMDAT _XTSAesTest@4
_TEXT	SEGMENT
_dataUnitNo$ = -536					; size = 8
_i$ = -524						; size = 4
_p$ = -520						; size = 512
__$ArrayPad$ = -4					; size = 4
_ci$ = 8						; size = 4
_XTSAesTest@4 PROC					; COMDAT

; 259  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 18 02 00
	00		 sub	 esp, 536		; 00000218H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	56		 push	 esi
  00016	57		 push	 edi

; 260  : 	unsigned __int8 p[ENCRYPTION_DATA_UNIT_SIZE];
; 261  : 	UINT64_STRUCT dataUnitNo;
; 262  : 	int i;
; 263  : 
; 264  : 	for (i = 0; i < XTS_TEST_COUNT; i++)

  00017	c7 85 f4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  00021	eb 0f		 jmp	 SHORT $LN7@XTSAesTest
$LN6@XTSAesTest:
  00023	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00029	83 c0 01	 add	 eax, 1
  0002c	89 85 f4 fd ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN7@XTSAesTest:
  00032	83 bd f4 fd ff
	ff 05		 cmp	 DWORD PTR _i$[ebp], 5
  00039	0f 8d 43 01 00
	00		 jge	 $LN5@XTSAesTest

; 265  : 	{
; 266  : 		ci->ea = EAGetByName ("AES");

  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  00044	e8 00 00 00 00	 call	 _EAGetByName@4
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  0004c	89 01		 mov	 DWORD PTR [ecx], eax

; 267  : 		if (ci->ea == 0)

  0004e	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00051	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00054	75 07		 jne	 SHORT $LN4@XTSAesTest

; 268  : 			return FALSE;

  00056	33 c0		 xor	 eax, eax
  00058	e9 2a 01 00 00	 jmp	 $LN8@XTSAesTest
$LN4@XTSAesTest:

; 269  : 
; 270  : 		ci->mode = XTS;

  0005d	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  00060	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [eax+4], 1

; 271  : 
; 272  : 		if (EAInit (ci->ea, XTS_vectors[i].key1, ci->ks) != ERR_SUCCESS)

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  0006a	83 c1 08	 add	 ecx, 8
  0006d	51		 push	 ecx
  0006e	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  00074	69 d2 4c 04 00
	00		 imul	 edx, 1100		; 0000044cH
  0007a	81 c2 00 00 00
	00		 add	 edx, OFFSET _XTS_vectors
  00080	52		 push	 edx
  00081	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  00084	8b 08		 mov	 ecx, DWORD PTR [eax]
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 _EAInit@12
  0008c	85 c0		 test	 eax, eax
  0008e	74 07		 je	 SHORT $LN3@XTSAesTest

; 273  : 			return FALSE;

  00090	33 c0		 xor	 eax, eax
  00092	e9 f0 00 00 00	 jmp	 $LN8@XTSAesTest
$LN3@XTSAesTest:

; 274  : 
; 275  : 		memcpy (&ci->k2, XTS_vectors[i].key2, sizeof (XTS_vectors[i].key2));

  00097	8b b5 f4 fd ff
	ff		 mov	 esi, DWORD PTR _i$[ebp]
  0009d	69 f6 4c 04 00
	00		 imul	 esi, 1100		; 0000044cH
  000a3	81 c6 20 00 00
	00		 add	 esi, OFFSET _XTS_vectors+32
  000a9	8b 7d 08	 mov	 edi, DWORD PTR _ci$[ebp]
  000ac	81 c7 a8 42 00
	00		 add	 edi, 17064		; 000042a8H
  000b2	b9 08 00 00 00	 mov	 ecx, 8
  000b7	f3 a5		 rep movsd

; 276  : 
; 277  : 		if (!EAInitMode (ci))

  000b9	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  000bc	52		 push	 edx
  000bd	e8 00 00 00 00	 call	 _EAInitMode@4
  000c2	85 c0		 test	 eax, eax
  000c4	75 07		 jne	 SHORT $LN2@XTSAesTest

; 278  : 			return FALSE;

  000c6	33 c0		 xor	 eax, eax
  000c8	e9 ba 00 00 00	 jmp	 $LN8@XTSAesTest
$LN2@XTSAesTest:

; 279  : 
; 280  : 		memcpy (p, XTS_vectors[i].plaintext, sizeof (p));

  000cd	8b b5 f4 fd ff
	ff		 mov	 esi, DWORD PTR _i$[ebp]
  000d3	69 f6 4c 04 00
	00		 imul	 esi, 1100		; 0000044cH
  000d9	81 c6 4c 00 00
	00		 add	 esi, OFFSET _XTS_vectors+76
  000df	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  000e4	8d bd f8 fd ff
	ff		 lea	 edi, DWORD PTR _p$[ebp]
  000ea	f3 a5		 rep movsd

; 281  : 
; 282  : 		dataUnitNo.Value = BE64 (*((unsigned __int64 *) XTS_vectors[i].dataUnitNo));

  000ec	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  000f2	69 c0 4c 04 00
	00		 imul	 eax, 1100		; 0000044cH
  000f8	8b 88 44 00 00
	00		 mov	 ecx, DWORD PTR _XTS_vectors[eax+68]
  000fe	51		 push	 ecx
  000ff	8b 90 40 00 00
	00		 mov	 edx, DWORD PTR _XTS_vectors[eax+64]
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 _MirrorBytes64@8
  0010b	89 85 e8 fd ff
	ff		 mov	 DWORD PTR _dataUnitNo$[ebp], eax
  00111	89 95 ec fd ff
	ff		 mov	 DWORD PTR _dataUnitNo$[ebp+4], edx

; 283  : 
; 284  : 		EncryptBufferXTS (p, sizeof (p), &dataUnitNo, XTS_vectors[i].blockNo, (unsigned char *) (ci->ks), (unsigned char *) ci->ks2, AES);

  00117	6a 01		 push	 1
  00119	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  0011c	05 d4 14 00 00	 add	 eax, 5332		; 000014d4H
  00121	50		 push	 eax
  00122	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00125	83 c1 08	 add	 ecx, 8
  00128	51		 push	 ecx
  00129	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  0012f	69 d2 4c 04 00
	00		 imul	 edx, 1100		; 0000044cH
  00135	8b 82 48 00 00
	00		 mov	 eax, DWORD PTR _XTS_vectors[edx+72]
  0013b	50		 push	 eax
  0013c	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR _dataUnitNo$[ebp]
  00142	51		 push	 ecx
  00143	6a 00		 push	 0
  00145	68 00 02 00 00	 push	 512			; 00000200H
  0014a	8d 95 f8 fd ff
	ff		 lea	 edx, DWORD PTR _p$[ebp]
  00150	52		 push	 edx
  00151	e8 00 00 00 00	 call	 _EncryptBufferXTS@32

; 285  : 
; 286  : 		if (memcmp (XTS_vectors[i].ciphertext, p, sizeof (p)) != 0)

  00156	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  0015b	8d bd f8 fd ff
	ff		 lea	 edi, DWORD PTR _p$[ebp]
  00161	8b b5 f4 fd ff
	ff		 mov	 esi, DWORD PTR _i$[ebp]
  00167	69 f6 4c 04 00
	00		 imul	 esi, 1100		; 0000044cH
  0016d	81 c6 4c 02 00
	00		 add	 esi, OFFSET _XTS_vectors+588
  00173	33 c0		 xor	 eax, eax
  00175	f3 a7		 repe cmpsd
  00177	74 04		 je	 SHORT $LN1@XTSAesTest

; 287  : 			return FALSE;

  00179	33 c0		 xor	 eax, eax
  0017b	eb 0a		 jmp	 SHORT $LN8@XTSAesTest
$LN1@XTSAesTest:

; 288  : 	}

  0017d	e9 a1 fe ff ff	 jmp	 $LN6@XTSAesTest
$LN5@XTSAesTest:

; 289  : 
; 290  : 	return TRUE;

  00182	b8 01 00 00 00	 mov	 eax, 1
$LN8@XTSAesTest:

; 291  : }

  00187	5f		 pop	 edi
  00188	5e		 pop	 esi
  00189	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018c	33 cd		 xor	 ecx, ebp
  0018e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00193	8b e5		 mov	 esp, ebp
  00195	5d		 pop	 ebp
  00196	c2 04 00	 ret	 4
_XTSAesTest@4 ENDP
_TEXT	ENDS
PUBLIC	_CipherInit2@16
EXTRN	__imp__KeBugCheckEx@20:PROC
EXTRN	_CipherInit@12:PROC
EXTRN	_BlowfishSetKey@12:PROC
; Function compile flags: /Odtp
;	COMDAT _CipherInit2@16
_TEXT	SEGMENT
tv64 = -4						; size = 4
_cipher$ = 8						; size = 4
_key$ = 12						; size = 4
_ks$ = 16						; size = 4
_key_len$ = 20						; size = 4
_CipherInit2@16 PROC					; COMDAT

; 534  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 535  : 	switch (cipher)

  00006	8b 45 08	 mov	 eax, DWORD PTR _cipher$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR tv64[ebp]
  0000f	83 e9 01	 sub	 ecx, 1
  00012	89 4d fc	 mov	 DWORD PTR tv64[ebp], ecx
  00015	83 7d fc 05	 cmp	 DWORD PTR tv64[ebp], 5
  00019	77 7c		 ja	 SHORT $LN1@CipherInit
  0001b	8b 55 fc	 mov	 edx, DWORD PTR tv64[ebp]
  0001e	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN12@CipherInit[edx*4]
$LN7@CipherInit:

; 536  : 	{
; 537  : 	case BLOWFISH:
; 538  : 		/* Deprecated/legacy */
; 539  : 		BlowfishSetKey (ks, key_len,  key); 

  00025	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00028	50		 push	 eax
  00029	8b 4d 14	 mov	 ecx, DWORD PTR _key_len$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  00030	52		 push	 edx
  00031	e8 00 00 00 00	 call	 _BlowfishSetKey@12

; 540  : 		break;

  00036	eb 75		 jmp	 SHORT $LN11@CipherInit
$LN6@CipherInit:

; 541  : 
; 542  : 	case AES:
; 543  : 		CipherInit(cipher,key,ks);

  00038	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  0003b	50		 push	 eax
  0003c	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  0003f	51		 push	 ecx
  00040	8b 55 08	 mov	 edx, DWORD PTR _cipher$[ebp]
  00043	52		 push	 edx
  00044	e8 00 00 00 00	 call	 _CipherInit@12

; 544  : 		break;

  00049	eb 62		 jmp	 SHORT $LN11@CipherInit
$LN5@CipherInit:

; 545  : 
; 546  : 	case CAST:
; 547  : 		/* Deprecated/legacy */
; 548  : 		CipherInit(cipher,key,ks);

  0004b	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  0004e	50		 push	 eax
  0004f	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  00052	51		 push	 ecx
  00053	8b 55 08	 mov	 edx, DWORD PTR _cipher$[ebp]
  00056	52		 push	 edx
  00057	e8 00 00 00 00	 call	 _CipherInit@12

; 549  : 		break;

  0005c	eb 4f		 jmp	 SHORT $LN11@CipherInit
$LN4@CipherInit:

; 550  : 
; 551  : 	case SERPENT:
; 552  : 		CipherInit(cipher,key,ks);

  0005e	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  00061	50		 push	 eax
  00062	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 08	 mov	 edx, DWORD PTR _cipher$[ebp]
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 _CipherInit@12

; 553  : 		break;

  0006f	eb 3c		 jmp	 SHORT $LN11@CipherInit
$LN3@CipherInit:

; 554  : 
; 555  : 	case TRIPLEDES:
; 556  : 		/* Deprecated/legacy */
; 557  : 		CipherInit(cipher,key,ks);

  00071	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  00074	50		 push	 eax
  00075	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  00078	51		 push	 ecx
  00079	8b 55 08	 mov	 edx, DWORD PTR _cipher$[ebp]
  0007c	52		 push	 edx
  0007d	e8 00 00 00 00	 call	 _CipherInit@12

; 558  : 		break;

  00082	eb 29		 jmp	 SHORT $LN11@CipherInit
$LN2@CipherInit:

; 559  : 
; 560  : 	case TWOFISH:
; 561  : 		CipherInit(cipher,key,ks);

  00084	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  00087	50		 push	 eax
  00088	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  0008b	51		 push	 ecx
  0008c	8b 55 08	 mov	 edx, DWORD PTR _cipher$[ebp]
  0008f	52		 push	 edx
  00090	e8 00 00 00 00	 call	 _CipherInit@12

; 562  : 		break;

  00095	eb 16		 jmp	 SHORT $LN11@CipherInit
$LN1@CipherInit:

; 563  : 
; 564  : 	default:			
; 565  : 		/* Unknown/wrong ID */
; 566  : 		TC_THROW_FATAL_EXCEPTION;

  00097	68 43 54 00 00	 push	 21571			; 00005443H
  0009c	6a 00		 push	 0
  0009e	6a 00		 push	 0
  000a0	68 36 02 00 00	 push	 566			; 00000236H
  000a5	6a 29		 push	 41			; 00000029H
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeBugCheckEx@20
$LN11@CipherInit:

; 567  : 	}
; 568  : }

  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 10 00	 ret	 16			; 00000010H
  000b3	90		 npad	 1
$LN12@CipherInit:
  000b4	00 00 00 00	 DD	 $LN6@CipherInit
  000b8	00 00 00 00	 DD	 $LN4@CipherInit
  000bc	00 00 00 00	 DD	 $LN2@CipherInit
  000c0	00 00 00 00	 DD	 $LN7@CipherInit
  000c4	00 00 00 00	 DD	 $LN5@CipherInit
  000c8	00 00 00 00	 DD	 $LN3@CipherInit
_CipherInit2@16 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_LRWAesTest@4
EXTRN	_EncryptBufferLRW128@24:PROC
; Function compile flags: /Odtp
;	COMDAT _LRWAesTest@4
_TEXT	SEGMENT
_i$ = -24						; size = 4
_p$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_ci$ = 8						; size = 4
_LRWAesTest@4 PROC					; COMDAT

; 604  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 18	 sub	 esp, 24			; 00000018H
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00012	56		 push	 esi
  00013	57		 push	 edi

; 605  : 	/* Deprecated/legacy */
; 606  : 
; 607  : 	unsigned __int8 p[16];
; 608  : 	int i;
; 609  : 
; 610  : 	for (i = 0; i < LRW_TEST_COUNT; i++)

  00014	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001b	eb 09		 jmp	 SHORT $LN7@LRWAesTest
$LN6@LRWAesTest:
  0001d	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  00020	83 c0 01	 add	 eax, 1
  00023	89 45 e8	 mov	 DWORD PTR _i$[ebp], eax
$LN7@LRWAesTest:
  00026	83 7d e8 02	 cmp	 DWORD PTR _i$[ebp], 2
  0002a	0f 8d ff 00 00
	00		 jge	 $LN5@LRWAesTest

; 611  : 	{
; 612  : 		ci->ea = EAGetByName ("AES");

  00030	68 00 00 00 00	 push	 OFFSET ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  00035	e8 00 00 00 00	 call	 _EAGetByName@4
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  0003d	89 01		 mov	 DWORD PTR [ecx], eax

; 613  : 		if (ci->ea == 0)

  0003f	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00042	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00045	75 07		 jne	 SHORT $LN4@LRWAesTest

; 614  : 			return FALSE;

  00047	33 c0		 xor	 eax, eax
  00049	e9 e6 00 00 00	 jmp	 $LN8@LRWAesTest
$LN4@LRWAesTest:

; 615  : 
; 616  : 		ci->mode = LRW;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  00051	c7 40 04 02 00
	00 00		 mov	 DWORD PTR [eax+4], 2

; 617  : 
; 618  : 		if (EAInit (ci->ea, lrw_vectors[i].key1, ci->ks) != ERR_SUCCESS)

  00058	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  0005b	83 c1 08	 add	 ecx, 8
  0005e	51		 push	 ecx
  0005f	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  00062	6b d2 60	 imul	 edx, 96			; 00000060H
  00065	81 c2 00 00 00
	00		 add	 edx, OFFSET _lrw_vectors
  0006b	52		 push	 edx
  0006c	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  0006f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00071	51		 push	 ecx
  00072	e8 00 00 00 00	 call	 _EAInit@12
  00077	85 c0		 test	 eax, eax
  00079	74 07		 je	 SHORT $LN3@LRWAesTest

; 619  : 			return FALSE;

  0007b	33 c0		 xor	 eax, eax
  0007d	e9 b2 00 00 00	 jmp	 $LN8@LRWAesTest
$LN3@LRWAesTest:

; 620  : 
; 621  : 		memcpy (&ci->k2, lrw_vectors[i].key2, sizeof (lrw_vectors[i].key2));

  00082	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  00085	6b d2 60	 imul	 edx, 96			; 00000060H
  00088	81 c2 20 00 00
	00		 add	 edx, OFFSET _lrw_vectors+32
  0008e	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  00091	05 a8 42 00 00	 add	 eax, 17064		; 000042a8H
  00096	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00098	89 08		 mov	 DWORD PTR [eax], ecx
  0009a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0009d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000a0	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  000a3	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000a6	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  000a9	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 622  : 		if (!EAInitMode (ci))

  000ac	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 _EAInitMode@4
  000b5	85 c0		 test	 eax, eax
  000b7	75 04		 jne	 SHORT $LN2@LRWAesTest

; 623  : 			return FALSE;

  000b9	33 c0		 xor	 eax, eax
  000bb	eb 77		 jmp	 SHORT $LN8@LRWAesTest
$LN2@LRWAesTest:

; 624  : 
; 625  : 		memcpy (p, lrw_vectors[i].plaintext, sizeof (p));

  000bd	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  000c0	6b c9 60	 imul	 ecx, 96			; 00000060H
  000c3	81 c1 40 00 00
	00		 add	 ecx, OFFSET _lrw_vectors+64
  000c9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000cb	89 55 ec	 mov	 DWORD PTR _p$[ebp], edx
  000ce	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000d1	89 45 f0	 mov	 DWORD PTR _p$[ebp+4], eax
  000d4	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000d7	89 55 f4	 mov	 DWORD PTR _p$[ebp+8], edx
  000da	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000dd	89 45 f8	 mov	 DWORD PTR _p$[ebp+12], eax

; 626  : 
; 627  : 		EncryptBufferLRW128 (p, sizeof (p), BE64(((unsigned __int64 *)(lrw_vectors[i].index))[1]), ci);

  000e0	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  000e3	51		 push	 ecx
  000e4	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  000e7	6b d2 60	 imul	 edx, 96			; 00000060H
  000ea	8b 82 3c 00 00
	00		 mov	 eax, DWORD PTR _lrw_vectors[edx+60]
  000f0	50		 push	 eax
  000f1	8b 8a 38 00 00
	00		 mov	 ecx, DWORD PTR _lrw_vectors[edx+56]
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 _MirrorBytes64@8
  000fd	52		 push	 edx
  000fe	50		 push	 eax
  000ff	6a 00		 push	 0
  00101	6a 10		 push	 16			; 00000010H
  00103	8d 55 ec	 lea	 edx, DWORD PTR _p$[ebp]
  00106	52		 push	 edx
  00107	e8 00 00 00 00	 call	 _EncryptBufferLRW128@24

; 628  : 
; 629  : 		if (memcmp (lrw_vectors[i].ciphertext, p, sizeof (p)) != 0)

  0010c	b9 04 00 00 00	 mov	 ecx, 4
  00111	8d 7d ec	 lea	 edi, DWORD PTR _p$[ebp]
  00114	8b 75 e8	 mov	 esi, DWORD PTR _i$[ebp]
  00117	6b f6 60	 imul	 esi, 96			; 00000060H
  0011a	81 c6 50 00 00
	00		 add	 esi, OFFSET _lrw_vectors+80
  00120	33 c0		 xor	 eax, eax
  00122	f3 a7		 repe cmpsd
  00124	74 04		 je	 SHORT $LN1@LRWAesTest

; 630  : 			return FALSE;

  00126	33 c0		 xor	 eax, eax
  00128	eb 0a		 jmp	 SHORT $LN8@LRWAesTest
$LN1@LRWAesTest:

; 631  : 	}

  0012a	e9 ee fe ff ff	 jmp	 $LN6@LRWAesTest
$LN5@LRWAesTest:

; 632  : 
; 633  : 	return TRUE;

  0012f	b8 01 00 00 00	 mov	 eax, 1
$LN8@LRWAesTest:

; 634  : }

  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00139	33 cd		 xor	 ecx, ebp
  0013b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c2 04 00	 ret	 4
_LRWAesTest@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	_TestLegacySectorBufEncryption@4
PUBLIC	__$ArrayPad$
PUBLIC	_TestSectorBufEncryption@4
EXTRN	_DecryptBuffer@16:PROC
EXTRN	_EncryptBuffer@16:PROC
EXTRN	_DecryptDataUnits@16:PROC
EXTRN	_GetCrc32@8:PROC
EXTRN	_EncryptDataUnits@16:PROC
EXTRN	_EAGetName@8:PROC
EXTRN	_EAIsModeSupported@8:PROC
EXTRN	_EAGetNext@4:PROC
EXTRN	_EAGetFirst@0:PROC
EXTRN	__aulldiv:PROC
;	COMDAT ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@ DB 'Twofish-Serpent', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@ DB 'Serpent-Twofis'
	DB	'h-AES', 00H					;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@ DB 'Serpent-AES', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@ DB 'AES-Twofish-Se'
	DB	'rpent', 00H					;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@ DB 'AES-Twofish', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@ DB 'Twofish', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@ DB 'Serpent', 00H ;  ?? ::FNODOBFM::`string'
; Function compile flags: /Odtp
text$s	ENDS
;	COMDAT _TestSectorBufEncryption@4
_TEXT	SEGMENT
tv394 = -2520						; size = 4
tv983 = -2516						; size = 4
tv978 = -2510						; size = 1
tv971 = -2509						; size = 1
tv966 = -2508						; size = 4
tv968 = -2504						; size = 4
tv387 = -2500						; size = 4
tv959 = -2496						; size = 4
tv954 = -2490						; size = 1
tv947 = -2489						; size = 1
tv942 = -2488						; size = 4
tv944 = -2484						; size = 4
tv380 = -2480						; size = 4
tv935 = -2476						; size = 4
tv930 = -2470						; size = 1
tv923 = -2469						; size = 1
tv918 = -2468						; size = 4
tv920 = -2464						; size = 4
tv373 = -2460						; size = 4
tv911 = -2456						; size = 4
tv906 = -2450						; size = 1
tv899 = -2449						; size = 1
tv894 = -2448						; size = 4
tv896 = -2444						; size = 4
tv366 = -2440						; size = 4
tv887 = -2436						; size = 4
tv882 = -2430						; size = 1
tv875 = -2429						; size = 1
tv870 = -2428						; size = 4
tv872 = -2424						; size = 4
tv359 = -2420						; size = 4
tv863 = -2416						; size = 4
tv858 = -2410						; size = 1
tv851 = -2409						; size = 1
tv846 = -2408						; size = 4
tv848 = -2404						; size = 4
tv352 = -2400						; size = 4
tv839 = -2396						; size = 4
tv834 = -2390						; size = 1
tv827 = -2389						; size = 1
tv822 = -2388						; size = 4
tv824 = -2384						; size = 4
tv345 = -2380						; size = 4
tv815 = -2376						; size = 4
tv810 = -2370						; size = 1
tv803 = -2369						; size = 1
tv798 = -2368						; size = 4
tv800 = -2364						; size = 4
tv276 = -2360						; size = 4
tv274 = -2356						; size = 4
tv734 = -2352						; size = 4
tv729 = -2346						; size = 1
tv722 = -2345						; size = 1
tv717 = -2344						; size = 4
tv719 = -2340						; size = 4
tv261 = -2336						; size = 4
tv259 = -2332						; size = 4
tv702 = -2328						; size = 4
tv697 = -2322						; size = 1
tv690 = -2321						; size = 1
tv685 = -2320						; size = 4
tv687 = -2316						; size = 4
tv246 = -2312						; size = 4
tv244 = -2308						; size = 4
tv670 = -2304						; size = 4
tv665 = -2298						; size = 1
tv658 = -2297						; size = 1
tv653 = -2296						; size = 4
tv655 = -2292						; size = 4
tv231 = -2288						; size = 4
tv229 = -2284						; size = 4
tv638 = -2280						; size = 4
tv633 = -2274						; size = 1
tv626 = -2273						; size = 1
tv621 = -2272						; size = 4
tv623 = -2268						; size = 4
tv216 = -2264						; size = 4
tv214 = -2260						; size = 4
tv606 = -2256						; size = 4
tv601 = -2250						; size = 1
tv594 = -2249						; size = 1
tv589 = -2248						; size = 4
tv591 = -2244						; size = 4
tv201 = -2240						; size = 4
tv199 = -2236						; size = 4
tv574 = -2232						; size = 4
tv569 = -2226						; size = 1
tv562 = -2225						; size = 1
tv557 = -2224						; size = 4
tv559 = -2220						; size = 4
tv186 = -2216						; size = 4
tv184 = -2212						; size = 4
tv542 = -2208						; size = 4
tv537 = -2202						; size = 1
tv530 = -2201						; size = 1
tv525 = -2200						; size = 4
tv527 = -2196						; size = 4
tv171 = -2192						; size = 4
tv159 = -2188						; size = 4
tv505 = -2184						; size = 4
tv500 = -2178						; size = 1
tv493 = -2177						; size = 1
tv488 = -2176						; size = 4
tv490 = -2172						; size = 4
tv426 = -2168						; size = 8
_nTestsPerformed$ = -2160				; size = 4
_nbrUnits$ = -2156					; size = 4
_buf$ = -2152						; size = 2048
_writeOffset$ = -104					; size = 8
_name$ = -96						; size = 64
__$ArrayPad$ = -28					; size = 4
_unitNo$ = -24						; size = 8
_i$ = -12						; size = 4
_crc$ = -8						; size = 4
_testCase$ = -4						; size = 4
_ci$ = 8						; size = 4
_TestSectorBufEncryption@4 PROC				; COMDAT

; 638  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec d8 09 00
	00		 sub	 esp, 2520		; 000009d8H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	56		 push	 esi
  00016	57		 push	 edi

; 639  : 	unsigned char buf [ENCRYPTION_DATA_UNIT_SIZE * 4];
; 640  : 	unsigned int i;
; 641  : 	char name[64];
; 642  : 	unsigned __int32 crc;
; 643  : 	UINT64_STRUCT unitNo;
; 644  : 	uint32 nbrUnits;
; 645  : 	unsigned __int64 writeOffset;
; 646  : 	int testCase = 0;

  00017	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _testCase$[ebp], 0

; 647  : 	int nTestsPerformed = 0;

  0001e	c7 85 90 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _nTestsPerformed$[ebp], 0

; 648  : 
; 649  : 	static unsigned char key1[] =
; 650  : 	{ 
; 651  : 		0x27, 0x18, 0x28, 0x18, 0x28, 0x45, 0x90, 0x45, 0x23, 0x53, 0x60, 0x28, 0x74, 0x71, 0x35, 0x26, 0x62, 0x49, 0x77, 0x57, 0x24, 0x70, 0x93, 0x69, 0x99, 0x59, 0x57, 0x49, 0x66, 0x96, 0x76, 0x27,
; 652  : 		0x31, 0x41, 0x59, 0x26, 0x53, 0x58, 0x97, 0x93, 0x23, 0x84, 0x62, 0x64, 0x33, 0x83, 0x27, 0x95, 0x02, 0x88, 0x41, 0x97, 0x16, 0x93, 0x99, 0x37, 0x51, 0x05, 0x82, 0x09, 0x74, 0x94, 0x45, 0x92,
; 653  : 		0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13
; 654  : 	};
; 655  : 
; 656  : 	if (!TestLegacySectorBufEncryption (ci))

  00028	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _TestLegacySectorBufEncryption@4
  00031	85 c0		 test	 eax, eax
  00033	75 07		 jne	 SHORT $LN148@TestSector

; 657  : 		return FALSE;

  00035	33 c0		 xor	 eax, eax
  00037	e9 4f 13 00 00	 jmp	 $LN149@TestSector
$LN148@TestSector:

; 658  : 
; 659  : 
; 660  : 	/* Encryption/decryption of data units (typically, volume data sectors) */
; 661  : 
; 662  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;

  0003c	c7 85 94 f7 ff
	ff 04 00 00 00	 mov	 DWORD PTR _nbrUnits$[ebp], 4

; 663  : 
; 664  : 	ci->mode = XTS;	// Other modes of operation are tested in TestLegacySectorBufEncryption()

  00046	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00049	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1

; 665  : 
; 666  : 	/* The buffer can accommodate 4 data units and we'll test 4 cases by "scrolling". The data unit 0xFFFFFFFFFF
; 667  : 	will "move" from the start of the buffer to its end. For a 512-byte data unit, the byte offset 562949953420800
; 668  : 	corresponds to the data unit 0xFFFFFFFFFF. */
; 669  : 	for (writeOffset = 562949953420800ULL; 
; 670  : 		writeOffset > 562949953420800ULL - nbrUnits * ENCRYPTION_DATA_UNIT_SIZE; 
; 671  : 		writeOffset -= ENCRYPTION_DATA_UNIT_SIZE)

  00050	c7 45 98 00 fe
	ff ff		 mov	 DWORD PTR _writeOffset$[ebp], -512 ; fffffe00H
  00057	c7 45 9c ff ff
	01 00		 mov	 DWORD PTR _writeOffset$[ebp+4], 131071 ; 0001ffffH
  0005e	eb 15		 jmp	 SHORT $LN147@TestSector
$LN146@TestSector:
  00060	8b 55 98	 mov	 edx, DWORD PTR _writeOffset$[ebp]
  00063	81 ea 00 02 00
	00		 sub	 edx, 512		; 00000200H
  00069	8b 45 9c	 mov	 eax, DWORD PTR _writeOffset$[ebp+4]
  0006c	83 d8 00	 sbb	 eax, 0
  0006f	89 55 98	 mov	 DWORD PTR _writeOffset$[ebp], edx
  00072	89 45 9c	 mov	 DWORD PTR _writeOffset$[ebp+4], eax
$LN147@TestSector:
  00075	8b 8d 94 f7 ff
	ff		 mov	 ecx, DWORD PTR _nbrUnits$[ebp]
  0007b	c1 e1 09	 shl	 ecx, 9
  0007e	33 d2		 xor	 edx, edx
  00080	b8 00 fe ff ff	 mov	 eax, -512		; fffffe00H
  00085	2b c1		 sub	 eax, ecx
  00087	b9 ff ff 01 00	 mov	 ecx, 131071		; 0001ffffH
  0008c	1b ca		 sbb	 ecx, edx
  0008e	89 85 88 f7 ff
	ff		 mov	 DWORD PTR tv426[ebp], eax
  00094	89 8d 8c f7 ff
	ff		 mov	 DWORD PTR tv426[ebp+4], ecx
  0009a	8b 55 9c	 mov	 edx, DWORD PTR _writeOffset$[ebp+4]
  0009d	3b 95 8c f7 ff
	ff		 cmp	 edx, DWORD PTR tv426[ebp+4]
  000a3	0f 82 db 0b 00
	00		 jb	 $LN145@TestSector
  000a9	77 0f		 ja	 SHORT $LN151@TestSector
  000ab	8b 45 98	 mov	 eax, DWORD PTR _writeOffset$[ebp]
  000ae	3b 85 88 f7 ff
	ff		 cmp	 eax, DWORD PTR tv426[ebp]
  000b4	0f 86 ca 0b 00
	00		 jbe	 $LN145@TestSector
$LN151@TestSector:

; 672  : 	{
; 673  : 		unitNo.Value = writeOffset / ENCRYPTION_DATA_UNIT_SIZE;

  000ba	6a 00		 push	 0
  000bc	68 00 02 00 00	 push	 512			; 00000200H
  000c1	8b 4d 9c	 mov	 ecx, DWORD PTR _writeOffset$[ebp+4]
  000c4	51		 push	 ecx
  000c5	8b 55 98	 mov	 edx, DWORD PTR _writeOffset$[ebp]
  000c8	52		 push	 edx
  000c9	e8 00 00 00 00	 call	 __aulldiv
  000ce	89 45 e8	 mov	 DWORD PTR _unitNo$[ebp], eax
  000d1	89 55 ec	 mov	 DWORD PTR _unitNo$[ebp+4], edx

; 674  : 
; 675  : 		// Test all EAs that support this mode of operation
; 676  : 		for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  000d4	e8 00 00 00 00	 call	 _EAGetFirst@0
  000d9	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  000dc	89 01		 mov	 DWORD PTR [ecx], eax
  000de	eb 10		 jmp	 SHORT $LN144@TestSector
$LN143@TestSector:
  000e0	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  000e3	8b 02		 mov	 eax, DWORD PTR [edx]
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 _EAGetNext@4
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  000ee	89 01		 mov	 DWORD PTR [ecx], eax
$LN144@TestSector:
  000f0	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  000f3	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000f6	0f 84 7a 0b 00
	00		 je	 $LN142@TestSector

; 677  : 		{
; 678  : 			if (!EAIsModeSupported (ci->ea, ci->mode))

  000fc	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  000ff	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00102	51		 push	 ecx
  00103	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00106	8b 02		 mov	 eax, DWORD PTR [edx]
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _EAIsModeSupported@8
  0010e	85 c0		 test	 eax, eax
  00110	75 02		 jne	 SHORT $LN141@TestSector

; 679  : 				continue;

  00112	eb cc		 jmp	 SHORT $LN143@TestSector
$LN141@TestSector:

; 680  : 
; 681  : 			EAGetName (name, ci->ea);

  00114	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00117	8b 11		 mov	 edx, DWORD PTR [ecx]
  00119	52		 push	 edx
  0011a	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 _EAGetName@8

; 682  : 
; 683  : 			if (EAInit (ci->ea, key1, ci->ks) != ERR_SUCCESS)

  00123	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00126	83 c1 08	 add	 ecx, 8
  00129	51		 push	 ecx
  0012a	68 00 00 00 00	 push	 OFFSET ?key1@?1??TestSectorBufEncryption@@9@9
  0012f	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00132	8b 02		 mov	 eax, DWORD PTR [edx]
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 _EAInit@12
  0013a	85 c0		 test	 eax, eax
  0013c	74 07		 je	 SHORT $LN140@TestSector

; 684  : 				return FALSE;

  0013e	33 c0		 xor	 eax, eax
  00140	e9 46 12 00 00	 jmp	 $LN149@TestSector
$LN140@TestSector:

; 685  : 
; 686  : 			for (i = 0; i < sizeof (ci->k2); i++)

  00145	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0014c	eb 09		 jmp	 SHORT $LN139@TestSector
$LN138@TestSector:
  0014e	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00151	83 c1 01	 add	 ecx, 1
  00154	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
$LN139@TestSector:
  00157	81 7d f4 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  0015e	73 11		 jae	 SHORT $LN137@TestSector

; 687  : 				ci->k2[i] = (unsigned char) i;

  00160	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00163	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  00166	8a 45 f4	 mov	 al, BYTE PTR _i$[ebp]
  00169	88 82 a8 42 00
	00		 mov	 BYTE PTR [edx+17064], al
  0016f	eb dd		 jmp	 SHORT $LN138@TestSector
$LN137@TestSector:

; 688  : 
; 689  : 			memcpy (&ci->k2, XTS_vectors[XTS_TEST_COUNT-1].key2, sizeof (XTS_vectors[XTS_TEST_COUNT-1].key2));

  00171	be 50 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4432
  00176	8b 7d 08	 mov	 edi, DWORD PTR _ci$[ebp]
  00179	81 c7 a8 42 00
	00		 add	 edi, 17064		; 000042a8H
  0017f	b9 08 00 00 00	 mov	 ecx, 8
  00184	f3 a5		 rep movsd

; 690  : 
; 691  : 			if (!EAInitMode (ci))

  00186	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00189	51		 push	 ecx
  0018a	e8 00 00 00 00	 call	 _EAInitMode@4
  0018f	85 c0		 test	 eax, eax
  00191	75 07		 jne	 SHORT $LN136@TestSector

; 692  : 				return FALSE;

  00193	33 c0		 xor	 eax, eax
  00195	e9 f1 11 00 00	 jmp	 $LN149@TestSector
$LN136@TestSector:

; 693  : 
; 694  : 			// Each data unit will contain the same plaintext
; 695  : 			for (i = 0; i < nbrUnits; i++)

  0019a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001a1	eb 09		 jmp	 SHORT $LN135@TestSector
$LN134@TestSector:
  001a3	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  001a6	83 c2 01	 add	 edx, 1
  001a9	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$LN135@TestSector:
  001ac	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  001af	3b 85 94 f7 ff
	ff		 cmp	 eax, DWORD PTR _nbrUnits$[ebp]
  001b5	73 1b		 jae	 SHORT $LN133@TestSector

; 696  : 			{
; 697  : 				memcpy ((unsigned char *) buf + i * ENCRYPTION_DATA_UNIT_SIZE, 
; 698  : 					XTS_vectors[XTS_TEST_COUNT-1].plaintext, 
; 699  : 					ENCRYPTION_DATA_UNIT_SIZE);

  001b7	be 7c 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4476
  001bc	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  001bf	c1 e1 09	 shl	 ecx, 9
  001c2	8d bc 0d 98 f7
	ff ff		 lea	 edi, DWORD PTR _buf$[ebp+ecx]
  001c9	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  001ce	f3 a5		 rep movsd

; 700  : 			}

  001d0	eb d1		 jmp	 SHORT $LN134@TestSector
$LN133@TestSector:

; 701  : 
; 702  : 			EncryptDataUnits (buf, &unitNo, nbrUnits, ci);

  001d2	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  001d5	52		 push	 edx
  001d6	8b 85 94 f7 ff
	ff		 mov	 eax, DWORD PTR _nbrUnits$[ebp]
  001dc	50		 push	 eax
  001dd	8d 4d e8	 lea	 ecx, DWORD PTR _unitNo$[ebp]
  001e0	51		 push	 ecx
  001e1	8d 95 98 f7 ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  001e7	52		 push	 edx
  001e8	e8 00 00 00 00	 call	 _EncryptDataUnits@16

; 703  : 
; 704  : 			crc = GetCrc32 (buf, sizeof (buf));

  001ed	68 00 08 00 00	 push	 2048			; 00000800H
  001f2	8d 85 98 f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  001f8	50		 push	 eax
  001f9	e8 00 00 00 00	 call	 _GetCrc32@8
  001fe	89 45 f8	 mov	 DWORD PTR _crc$[ebp], eax

; 705  : 
; 706  : 			if (strcmp (name, "AES") == 0)

  00201	c7 85 84 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv490[ebp], OFFSET ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  0020b	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  0020e	89 8d 80 f7 ff
	ff		 mov	 DWORD PTR tv488[ebp], ecx
$LL152@TestSector:
  00214	8b 95 80 f7 ff
	ff		 mov	 edx, DWORD PTR tv488[ebp]
  0021a	8a 02		 mov	 al, BYTE PTR [edx]
  0021c	88 85 7f f7 ff
	ff		 mov	 BYTE PTR tv493[ebp], al
  00222	8b 8d 84 f7 ff
	ff		 mov	 ecx, DWORD PTR tv490[ebp]
  00228	3a 01		 cmp	 al, BYTE PTR [ecx]
  0022a	75 46		 jne	 SHORT $LN153@TestSector
  0022c	80 bd 7f f7 ff
	ff 00		 cmp	 BYTE PTR tv493[ebp], 0
  00233	74 31		 je	 SHORT $LN154@TestSector
  00235	8b 95 80 f7 ff
	ff		 mov	 edx, DWORD PTR tv488[ebp]
  0023b	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  0023e	88 85 7e f7 ff
	ff		 mov	 BYTE PTR tv500[ebp], al
  00244	8b 8d 84 f7 ff
	ff		 mov	 ecx, DWORD PTR tv490[ebp]
  0024a	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  0024d	75 23		 jne	 SHORT $LN153@TestSector
  0024f	83 85 80 f7 ff
	ff 02		 add	 DWORD PTR tv488[ebp], 2
  00256	83 85 84 f7 ff
	ff 02		 add	 DWORD PTR tv490[ebp], 2
  0025d	80 bd 7e f7 ff
	ff 00		 cmp	 BYTE PTR tv500[ebp], 0
  00264	75 ae		 jne	 SHORT $LL152@TestSector
$LN154@TestSector:
  00266	c7 85 78 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv505[ebp], 0
  00270	eb 0b		 jmp	 SHORT $LN155@TestSector
$LN153@TestSector:
  00272	1b d2		 sbb	 edx, edx
  00274	83 da ff	 sbb	 edx, -1
  00277	89 95 78 f7 ff
	ff		 mov	 DWORD PTR tv505[ebp], edx
$LN155@TestSector:
  0027d	8b 85 78 f7 ff
	ff		 mov	 eax, DWORD PTR tv505[ebp]
  00283	89 85 74 f7 ff
	ff		 mov	 DWORD PTR tv159[ebp], eax
  00289	83 bd 74 f7 ff
	ff 00		 cmp	 DWORD PTR tv159[ebp], 0
  00290	0f 85 ce 00 00
	00		 jne	 $LN132@TestSector

; 707  : 			{
; 708  : 				// Verify the ciphertext of the "moving" data unit using the IEEE test vector #14
; 709  : 				if (memcmp (XTS_vectors[XTS_TEST_COUNT-1].ciphertext,
; 710  : 					(unsigned char *) buf + testCase * ENCRYPTION_DATA_UNIT_SIZE,
; 711  : 					ENCRYPTION_DATA_UNIT_SIZE) != 0)

  00296	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  0029b	8b 55 fc	 mov	 edx, DWORD PTR _testCase$[ebp]
  0029e	c1 e2 09	 shl	 edx, 9
  002a1	8d bc 15 98 f7
	ff ff		 lea	 edi, DWORD PTR _buf$[ebp+edx]
  002a8	be 7c 13 00 00	 mov	 esi, OFFSET _XTS_vectors+4988
  002ad	33 c0		 xor	 eax, eax
  002af	f3 a7		 repe cmpsd
  002b1	74 07		 je	 SHORT $LN131@TestSector

; 712  : 				{
; 713  : 					return FALSE;

  002b3	33 c0		 xor	 eax, eax
  002b5	e9 d1 10 00 00	 jmp	 $LN149@TestSector
$LN131@TestSector:

; 714  : 				}
; 715  : 
; 716  : 				// CRC of all data units in the buffer for each test case
; 717  : 				switch (testCase)

  002ba	8b 4d fc	 mov	 ecx, DWORD PTR _testCase$[ebp]
  002bd	89 8d 70 f7 ff
	ff		 mov	 DWORD PTR tv171[ebp], ecx
  002c3	83 bd 70 f7 ff
	ff 03		 cmp	 DWORD PTR tv171[ebp], 3
  002ca	0f 87 8f 00 00
	00		 ja	 $LN129@TestSector
  002d0	8b 95 70 f7 ff
	ff		 mov	 edx, DWORD PTR tv171[ebp]
  002d6	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN217@TestSector[edx*4]
$LN128@TestSector:

; 718  : 				{
; 719  : 				case 0: 
; 720  : 					if (crc != 0x888f2990)

  002dd	81 7d f8 90 29
	8f 88		 cmp	 DWORD PTR _crc$[ebp], -2003883632 ; 888f2990H
  002e4	74 07		 je	 SHORT $LN127@TestSector

; 721  : 						return FALSE;

  002e6	33 c0		 xor	 eax, eax
  002e8	e9 9e 10 00 00	 jmp	 $LN149@TestSector
$LN127@TestSector:

; 722  : 					nTestsPerformed++;

  002ed	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  002f3	83 c0 01	 add	 eax, 1
  002f6	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax

; 723  : 					break;

  002fc	eb 61		 jmp	 SHORT $LN129@TestSector
$LN126@TestSector:

; 724  : 				case 1:
; 725  : 					if (crc != 0xea28ea34)

  002fe	81 7d f8 34 ea
	28 ea		 cmp	 DWORD PTR _crc$[ebp], -366417356 ; ea28ea34H
  00305	74 07		 je	 SHORT $LN125@TestSector

; 726  : 						return FALSE;

  00307	33 c0		 xor	 eax, eax
  00309	e9 7d 10 00 00	 jmp	 $LN149@TestSector
$LN125@TestSector:

; 727  : 					nTestsPerformed++;

  0030e	8b 8d 90 f7 ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  00314	83 c1 01	 add	 ecx, 1
  00317	89 8d 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx

; 728  : 					break;

  0031d	eb 40		 jmp	 SHORT $LN129@TestSector
$LN124@TestSector:

; 729  : 				case 2:
; 730  : 					if (crc != 0xe058f5a2)

  0031f	81 7d f8 a2 f5
	58 e0		 cmp	 DWORD PTR _crc$[ebp], -531040862 ; e058f5a2H
  00326	74 07		 je	 SHORT $LN123@TestSector

; 731  : 						return FALSE;

  00328	33 c0		 xor	 eax, eax
  0032a	e9 5c 10 00 00	 jmp	 $LN149@TestSector
$LN123@TestSector:

; 732  : 					nTestsPerformed++;

  0032f	8b 95 90 f7 ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  00335	83 c2 01	 add	 edx, 1
  00338	89 95 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx

; 733  : 					break;

  0033e	eb 1f		 jmp	 SHORT $LN129@TestSector
$LN122@TestSector:

; 734  : 				case 3:
; 735  : 					if (crc != 0x10473dc9)

  00340	81 7d f8 c9 3d
	47 10		 cmp	 DWORD PTR _crc$[ebp], 273104329 ; 10473dc9H
  00347	74 07		 je	 SHORT $LN121@TestSector

; 736  : 						return FALSE;

  00349	33 c0		 xor	 eax, eax
  0034b	e9 3b 10 00 00	 jmp	 $LN149@TestSector
$LN121@TestSector:

; 737  : 					nTestsPerformed++;

  00350	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  00356	83 c0 01	 add	 eax, 1
  00359	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
$LN129@TestSector:

; 738  : 					break;
; 739  : 				}
; 740  : 			}
; 741  : 			else if (strcmp (name, "Serpent") == 0)

  0035f	e9 b4 08 00 00	 jmp	 $LN120@TestSector
$LN132@TestSector:
  00364	c7 85 6c f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv527[ebp], OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  0036e	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  00371	89 8d 68 f7 ff
	ff		 mov	 DWORD PTR tv525[ebp], ecx
$LL157@TestSector:
  00377	8b 95 68 f7 ff
	ff		 mov	 edx, DWORD PTR tv525[ebp]
  0037d	8a 02		 mov	 al, BYTE PTR [edx]
  0037f	88 85 67 f7 ff
	ff		 mov	 BYTE PTR tv530[ebp], al
  00385	8b 8d 6c f7 ff
	ff		 mov	 ecx, DWORD PTR tv527[ebp]
  0038b	3a 01		 cmp	 al, BYTE PTR [ecx]
  0038d	75 46		 jne	 SHORT $LN158@TestSector
  0038f	80 bd 67 f7 ff
	ff 00		 cmp	 BYTE PTR tv530[ebp], 0
  00396	74 31		 je	 SHORT $LN159@TestSector
  00398	8b 95 68 f7 ff
	ff		 mov	 edx, DWORD PTR tv525[ebp]
  0039e	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  003a1	88 85 66 f7 ff
	ff		 mov	 BYTE PTR tv537[ebp], al
  003a7	8b 8d 6c f7 ff
	ff		 mov	 ecx, DWORD PTR tv527[ebp]
  003ad	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  003b0	75 23		 jne	 SHORT $LN158@TestSector
  003b2	83 85 68 f7 ff
	ff 02		 add	 DWORD PTR tv525[ebp], 2
  003b9	83 85 6c f7 ff
	ff 02		 add	 DWORD PTR tv527[ebp], 2
  003c0	80 bd 66 f7 ff
	ff 00		 cmp	 BYTE PTR tv537[ebp], 0
  003c7	75 ae		 jne	 SHORT $LL157@TestSector
$LN159@TestSector:
  003c9	c7 85 60 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv542[ebp], 0
  003d3	eb 0b		 jmp	 SHORT $LN160@TestSector
$LN158@TestSector:
  003d5	1b d2		 sbb	 edx, edx
  003d7	83 da ff	 sbb	 edx, -1
  003da	89 95 60 f7 ff
	ff		 mov	 DWORD PTR tv542[ebp], edx
$LN160@TestSector:
  003e0	8b 85 60 f7 ff
	ff		 mov	 eax, DWORD PTR tv542[ebp]
  003e6	89 85 5c f7 ff
	ff		 mov	 DWORD PTR tv184[ebp], eax
  003ec	83 bd 5c f7 ff
	ff 00		 cmp	 DWORD PTR tv184[ebp], 0
  003f3	0f 85 aa 00 00
	00		 jne	 $LN119@TestSector

; 742  : 			{
; 743  : 				switch (testCase)

  003f9	8b 4d fc	 mov	 ecx, DWORD PTR _testCase$[ebp]
  003fc	89 8d 58 f7 ff
	ff		 mov	 DWORD PTR tv186[ebp], ecx
  00402	83 bd 58 f7 ff
	ff 03		 cmp	 DWORD PTR tv186[ebp], 3
  00409	0f 87 8f 00 00
	00		 ja	 $LN117@TestSector
  0040f	8b 95 58 f7 ff
	ff		 mov	 edx, DWORD PTR tv186[ebp]
  00415	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN218@TestSector[edx*4]
$LN116@TestSector:

; 744  : 				{
; 745  : 				case 0:
; 746  : 					if (crc != 0x7edfecb3)

  0041c	81 7d f8 b3 ec
	df 7e		 cmp	 DWORD PTR _crc$[ebp], 2128604339 ; 7edfecb3H
  00423	74 07		 je	 SHORT $LN115@TestSector

; 747  : 						return FALSE;

  00425	33 c0		 xor	 eax, eax
  00427	e9 5f 0f 00 00	 jmp	 $LN149@TestSector
$LN115@TestSector:

; 748  : 					nTestsPerformed++;

  0042c	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  00432	83 c0 01	 add	 eax, 1
  00435	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax

; 749  : 					break;

  0043b	eb 61		 jmp	 SHORT $LN117@TestSector
$LN114@TestSector:

; 750  : 				case 1:
; 751  : 					if (crc != 0x357baaaa)

  0043d	81 7d f8 aa aa
	7b 35		 cmp	 DWORD PTR _crc$[ebp], 897297066 ; 357baaaaH
  00444	74 07		 je	 SHORT $LN113@TestSector

; 752  : 						return FALSE;

  00446	33 c0		 xor	 eax, eax
  00448	e9 3e 0f 00 00	 jmp	 $LN149@TestSector
$LN113@TestSector:

; 753  : 					nTestsPerformed++;

  0044d	8b 8d 90 f7 ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  00453	83 c1 01	 add	 ecx, 1
  00456	89 8d 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx

; 754  : 					break;

  0045c	eb 40		 jmp	 SHORT $LN117@TestSector
$LN112@TestSector:

; 755  : 				case 2:
; 756  : 					if (crc != 0xc7b9fca5)

  0045e	81 7d f8 a5 fc
	b9 c7		 cmp	 DWORD PTR _crc$[ebp], -944112475 ; c7b9fca5H
  00465	74 07		 je	 SHORT $LN111@TestSector

; 757  : 						return FALSE;

  00467	33 c0		 xor	 eax, eax
  00469	e9 1d 0f 00 00	 jmp	 $LN149@TestSector
$LN111@TestSector:

; 758  : 					nTestsPerformed++;

  0046e	8b 95 90 f7 ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  00474	83 c2 01	 add	 edx, 1
  00477	89 95 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx

; 759  : 					break;

  0047d	eb 1f		 jmp	 SHORT $LN117@TestSector
$LN110@TestSector:

; 760  : 				case 3:
; 761  : 					if (crc != 0xb5263e0c)

  0047f	81 7d f8 0c 3e
	26 b5		 cmp	 DWORD PTR _crc$[ebp], -1255784948 ; b5263e0cH
  00486	74 07		 je	 SHORT $LN109@TestSector

; 762  : 						return FALSE;

  00488	33 c0		 xor	 eax, eax
  0048a	e9 fc 0e 00 00	 jmp	 $LN149@TestSector
$LN109@TestSector:

; 763  : 					nTestsPerformed++;

  0048f	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  00495	83 c0 01	 add	 eax, 1
  00498	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
$LN117@TestSector:

; 764  : 					break;
; 765  : 				}
; 766  : 			}
; 767  : 			else if (strcmp (name, "Twofish") == 0)

  0049e	e9 75 07 00 00	 jmp	 $LN120@TestSector
$LN119@TestSector:
  004a3	c7 85 54 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv559[ebp], OFFSET ??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@
  004ad	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  004b0	89 8d 50 f7 ff
	ff		 mov	 DWORD PTR tv557[ebp], ecx
$LL161@TestSector:
  004b6	8b 95 50 f7 ff
	ff		 mov	 edx, DWORD PTR tv557[ebp]
  004bc	8a 02		 mov	 al, BYTE PTR [edx]
  004be	88 85 4f f7 ff
	ff		 mov	 BYTE PTR tv562[ebp], al
  004c4	8b 8d 54 f7 ff
	ff		 mov	 ecx, DWORD PTR tv559[ebp]
  004ca	3a 01		 cmp	 al, BYTE PTR [ecx]
  004cc	75 46		 jne	 SHORT $LN162@TestSector
  004ce	80 bd 4f f7 ff
	ff 00		 cmp	 BYTE PTR tv562[ebp], 0
  004d5	74 31		 je	 SHORT $LN163@TestSector
  004d7	8b 95 50 f7 ff
	ff		 mov	 edx, DWORD PTR tv557[ebp]
  004dd	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  004e0	88 85 4e f7 ff
	ff		 mov	 BYTE PTR tv569[ebp], al
  004e6	8b 8d 54 f7 ff
	ff		 mov	 ecx, DWORD PTR tv559[ebp]
  004ec	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  004ef	75 23		 jne	 SHORT $LN162@TestSector
  004f1	83 85 50 f7 ff
	ff 02		 add	 DWORD PTR tv557[ebp], 2
  004f8	83 85 54 f7 ff
	ff 02		 add	 DWORD PTR tv559[ebp], 2
  004ff	80 bd 4e f7 ff
	ff 00		 cmp	 BYTE PTR tv569[ebp], 0
  00506	75 ae		 jne	 SHORT $LL161@TestSector
$LN163@TestSector:
  00508	c7 85 48 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv574[ebp], 0
  00512	eb 0b		 jmp	 SHORT $LN164@TestSector
$LN162@TestSector:
  00514	1b d2		 sbb	 edx, edx
  00516	83 da ff	 sbb	 edx, -1
  00519	89 95 48 f7 ff
	ff		 mov	 DWORD PTR tv574[ebp], edx
$LN164@TestSector:
  0051f	8b 85 48 f7 ff
	ff		 mov	 eax, DWORD PTR tv574[ebp]
  00525	89 85 44 f7 ff
	ff		 mov	 DWORD PTR tv199[ebp], eax
  0052b	83 bd 44 f7 ff
	ff 00		 cmp	 DWORD PTR tv199[ebp], 0
  00532	0f 85 aa 00 00
	00		 jne	 $LN107@TestSector

; 768  : 			{
; 769  : 				switch (testCase)

  00538	8b 4d fc	 mov	 ecx, DWORD PTR _testCase$[ebp]
  0053b	89 8d 40 f7 ff
	ff		 mov	 DWORD PTR tv201[ebp], ecx
  00541	83 bd 40 f7 ff
	ff 03		 cmp	 DWORD PTR tv201[ebp], 3
  00548	0f 87 8f 00 00
	00		 ja	 $LN105@TestSector
  0054e	8b 95 40 f7 ff
	ff		 mov	 edx, DWORD PTR tv201[ebp]
  00554	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN219@TestSector[edx*4]
$LN104@TestSector:

; 770  : 				{
; 771  : 				case 0:
; 772  : 					if (crc != 0x91525124)

  0055b	81 7d f8 24 51
	52 91		 cmp	 DWORD PTR _crc$[ebp], -1856876252 ; 91525124H
  00562	74 07		 je	 SHORT $LN103@TestSector

; 773  : 						return FALSE;

  00564	33 c0		 xor	 eax, eax
  00566	e9 20 0e 00 00	 jmp	 $LN149@TestSector
$LN103@TestSector:

; 774  : 					nTestsPerformed++;

  0056b	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  00571	83 c0 01	 add	 eax, 1
  00574	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax

; 775  : 					break;

  0057a	eb 61		 jmp	 SHORT $LN105@TestSector
$LN102@TestSector:

; 776  : 				case 1:
; 777  : 					if (crc != 0x2895cc47)

  0057c	81 7d f8 47 cc
	95 28		 cmp	 DWORD PTR _crc$[ebp], 680905799 ; 2895cc47H
  00583	74 07		 je	 SHORT $LN101@TestSector

; 778  : 						return FALSE;

  00585	33 c0		 xor	 eax, eax
  00587	e9 ff 0d 00 00	 jmp	 $LN149@TestSector
$LN101@TestSector:

; 779  : 					nTestsPerformed++;

  0058c	8b 8d 90 f7 ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  00592	83 c1 01	 add	 ecx, 1
  00595	89 8d 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx

; 780  : 					break;

  0059b	eb 40		 jmp	 SHORT $LN105@TestSector
$LN100@TestSector:

; 781  : 				case 2:
; 782  : 					if (crc != 0x6bee346d)

  0059d	81 7d f8 6d 34
	ee 6b		 cmp	 DWORD PTR _crc$[ebp], 1810773101 ; 6bee346dH
  005a4	74 07		 je	 SHORT $LN99@TestSector

; 783  : 						return FALSE;

  005a6	33 c0		 xor	 eax, eax
  005a8	e9 de 0d 00 00	 jmp	 $LN149@TestSector
$LN99@TestSector:

; 784  : 					nTestsPerformed++;

  005ad	8b 95 90 f7 ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  005b3	83 c2 01	 add	 edx, 1
  005b6	89 95 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx

; 785  : 					break;

  005bc	eb 1f		 jmp	 SHORT $LN105@TestSector
$LN98@TestSector:

; 786  : 				case 3:
; 787  : 					if (crc != 0xb1c45759)

  005be	81 7d f8 59 57
	c4 b1		 cmp	 DWORD PTR _crc$[ebp], -1312532647 ; b1c45759H
  005c5	74 07		 je	 SHORT $LN97@TestSector

; 788  : 						return FALSE;

  005c7	33 c0		 xor	 eax, eax
  005c9	e9 bd 0d 00 00	 jmp	 $LN149@TestSector
$LN97@TestSector:

; 789  : 					nTestsPerformed++;

  005ce	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  005d4	83 c0 01	 add	 eax, 1
  005d7	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
$LN105@TestSector:

; 790  : 					break;
; 791  : 				}
; 792  : 			}
; 793  : 			else if (strcmp (name, "AES-Twofish") == 0)

  005dd	e9 36 06 00 00	 jmp	 $LN120@TestSector
$LN107@TestSector:
  005e2	c7 85 3c f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv591[ebp], OFFSET ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  005ec	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  005ef	89 8d 38 f7 ff
	ff		 mov	 DWORD PTR tv589[ebp], ecx
$LL165@TestSector:
  005f5	8b 95 38 f7 ff
	ff		 mov	 edx, DWORD PTR tv589[ebp]
  005fb	8a 02		 mov	 al, BYTE PTR [edx]
  005fd	88 85 37 f7 ff
	ff		 mov	 BYTE PTR tv594[ebp], al
  00603	8b 8d 3c f7 ff
	ff		 mov	 ecx, DWORD PTR tv591[ebp]
  00609	3a 01		 cmp	 al, BYTE PTR [ecx]
  0060b	75 46		 jne	 SHORT $LN166@TestSector
  0060d	80 bd 37 f7 ff
	ff 00		 cmp	 BYTE PTR tv594[ebp], 0
  00614	74 31		 je	 SHORT $LN167@TestSector
  00616	8b 95 38 f7 ff
	ff		 mov	 edx, DWORD PTR tv589[ebp]
  0061c	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  0061f	88 85 36 f7 ff
	ff		 mov	 BYTE PTR tv601[ebp], al
  00625	8b 8d 3c f7 ff
	ff		 mov	 ecx, DWORD PTR tv591[ebp]
  0062b	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  0062e	75 23		 jne	 SHORT $LN166@TestSector
  00630	83 85 38 f7 ff
	ff 02		 add	 DWORD PTR tv589[ebp], 2
  00637	83 85 3c f7 ff
	ff 02		 add	 DWORD PTR tv591[ebp], 2
  0063e	80 bd 36 f7 ff
	ff 00		 cmp	 BYTE PTR tv601[ebp], 0
  00645	75 ae		 jne	 SHORT $LL165@TestSector
$LN167@TestSector:
  00647	c7 85 30 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv606[ebp], 0
  00651	eb 0b		 jmp	 SHORT $LN168@TestSector
$LN166@TestSector:
  00653	1b d2		 sbb	 edx, edx
  00655	83 da ff	 sbb	 edx, -1
  00658	89 95 30 f7 ff
	ff		 mov	 DWORD PTR tv606[ebp], edx
$LN168@TestSector:
  0065e	8b 85 30 f7 ff
	ff		 mov	 eax, DWORD PTR tv606[ebp]
  00664	89 85 2c f7 ff
	ff		 mov	 DWORD PTR tv214[ebp], eax
  0066a	83 bd 2c f7 ff
	ff 00		 cmp	 DWORD PTR tv214[ebp], 0
  00671	0f 85 aa 00 00
	00		 jne	 $LN95@TestSector

; 794  : 			{
; 795  : 				switch (testCase)

  00677	8b 4d fc	 mov	 ecx, DWORD PTR _testCase$[ebp]
  0067a	89 8d 28 f7 ff
	ff		 mov	 DWORD PTR tv216[ebp], ecx
  00680	83 bd 28 f7 ff
	ff 03		 cmp	 DWORD PTR tv216[ebp], 3
  00687	0f 87 8f 00 00
	00		 ja	 $LN93@TestSector
  0068d	8b 95 28 f7 ff
	ff		 mov	 edx, DWORD PTR tv216[ebp]
  00693	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN220@TestSector[edx*4]
$LN92@TestSector:

; 796  : 				{
; 797  : 				case 0:
; 798  : 					if (crc != 0x6cea7fa2)

  0069a	81 7d f8 a2 7f
	ea 6c		 cmp	 DWORD PTR _crc$[ebp], 1827307426 ; 6cea7fa2H
  006a1	74 07		 je	 SHORT $LN91@TestSector

; 799  : 						return FALSE;

  006a3	33 c0		 xor	 eax, eax
  006a5	e9 e1 0c 00 00	 jmp	 $LN149@TestSector
$LN91@TestSector:

; 800  : 					nTestsPerformed++;

  006aa	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  006b0	83 c0 01	 add	 eax, 1
  006b3	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax

; 801  : 					break;

  006b9	eb 61		 jmp	 SHORT $LN93@TestSector
$LN90@TestSector:

; 802  : 				case 1:
; 803  : 					if (crc != 0x69052c4c)

  006bb	81 7d f8 4c 2c
	05 69		 cmp	 DWORD PTR _crc$[ebp], 1761946700 ; 69052c4cH
  006c2	74 07		 je	 SHORT $LN89@TestSector

; 804  : 						return FALSE;

  006c4	33 c0		 xor	 eax, eax
  006c6	e9 c0 0c 00 00	 jmp	 $LN149@TestSector
$LN89@TestSector:

; 805  : 					nTestsPerformed++;

  006cb	8b 8d 90 f7 ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  006d1	83 c1 01	 add	 ecx, 1
  006d4	89 8d 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx

; 806  : 					break;

  006da	eb 40		 jmp	 SHORT $LN93@TestSector
$LN88@TestSector:

; 807  : 				case 2:
; 808  : 					if (crc != 0x88db8de5)

  006dc	81 7d f8 e5 8d
	db 88		 cmp	 DWORD PTR _crc$[ebp], -1998877211 ; 88db8de5H
  006e3	74 07		 je	 SHORT $LN87@TestSector

; 809  : 						return FALSE;

  006e5	33 c0		 xor	 eax, eax
  006e7	e9 9f 0c 00 00	 jmp	 $LN149@TestSector
$LN87@TestSector:

; 810  : 					nTestsPerformed++;

  006ec	8b 95 90 f7 ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  006f2	83 c2 01	 add	 edx, 1
  006f5	89 95 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx

; 811  : 					break;

  006fb	eb 1f		 jmp	 SHORT $LN93@TestSector
$LN86@TestSector:

; 812  : 				case 3:
; 813  : 					if (crc != 0xf16fd8c5)

  006fd	81 7d f8 c5 d8
	6f f1		 cmp	 DWORD PTR _crc$[ebp], -244328251 ; f16fd8c5H
  00704	74 07		 je	 SHORT $LN85@TestSector

; 814  : 						return FALSE;

  00706	33 c0		 xor	 eax, eax
  00708	e9 7e 0c 00 00	 jmp	 $LN149@TestSector
$LN85@TestSector:

; 815  : 					nTestsPerformed++;

  0070d	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  00713	83 c0 01	 add	 eax, 1
  00716	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
$LN93@TestSector:

; 816  : 					break;
; 817  : 				}
; 818  : 			}
; 819  : 			else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  0071c	e9 f7 04 00 00	 jmp	 $LN120@TestSector
$LN95@TestSector:
  00721	c7 85 24 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv623[ebp], OFFSET ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  0072b	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  0072e	89 8d 20 f7 ff
	ff		 mov	 DWORD PTR tv621[ebp], ecx
$LL169@TestSector:
  00734	8b 95 20 f7 ff
	ff		 mov	 edx, DWORD PTR tv621[ebp]
  0073a	8a 02		 mov	 al, BYTE PTR [edx]
  0073c	88 85 1f f7 ff
	ff		 mov	 BYTE PTR tv626[ebp], al
  00742	8b 8d 24 f7 ff
	ff		 mov	 ecx, DWORD PTR tv623[ebp]
  00748	3a 01		 cmp	 al, BYTE PTR [ecx]
  0074a	75 46		 jne	 SHORT $LN170@TestSector
  0074c	80 bd 1f f7 ff
	ff 00		 cmp	 BYTE PTR tv626[ebp], 0
  00753	74 31		 je	 SHORT $LN171@TestSector
  00755	8b 95 20 f7 ff
	ff		 mov	 edx, DWORD PTR tv621[ebp]
  0075b	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  0075e	88 85 1e f7 ff
	ff		 mov	 BYTE PTR tv633[ebp], al
  00764	8b 8d 24 f7 ff
	ff		 mov	 ecx, DWORD PTR tv623[ebp]
  0076a	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  0076d	75 23		 jne	 SHORT $LN170@TestSector
  0076f	83 85 20 f7 ff
	ff 02		 add	 DWORD PTR tv621[ebp], 2
  00776	83 85 24 f7 ff
	ff 02		 add	 DWORD PTR tv623[ebp], 2
  0077d	80 bd 1e f7 ff
	ff 00		 cmp	 BYTE PTR tv633[ebp], 0
  00784	75 ae		 jne	 SHORT $LL169@TestSector
$LN171@TestSector:
  00786	c7 85 18 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv638[ebp], 0
  00790	eb 0b		 jmp	 SHORT $LN172@TestSector
$LN170@TestSector:
  00792	1b d2		 sbb	 edx, edx
  00794	83 da ff	 sbb	 edx, -1
  00797	89 95 18 f7 ff
	ff		 mov	 DWORD PTR tv638[ebp], edx
$LN172@TestSector:
  0079d	8b 85 18 f7 ff
	ff		 mov	 eax, DWORD PTR tv638[ebp]
  007a3	89 85 14 f7 ff
	ff		 mov	 DWORD PTR tv229[ebp], eax
  007a9	83 bd 14 f7 ff
	ff 00		 cmp	 DWORD PTR tv229[ebp], 0
  007b0	0f 85 aa 00 00
	00		 jne	 $LN83@TestSector

; 820  : 			{
; 821  : 				switch (testCase)

  007b6	8b 4d fc	 mov	 ecx, DWORD PTR _testCase$[ebp]
  007b9	89 8d 10 f7 ff
	ff		 mov	 DWORD PTR tv231[ebp], ecx
  007bf	83 bd 10 f7 ff
	ff 03		 cmp	 DWORD PTR tv231[ebp], 3
  007c6	0f 87 8f 00 00
	00		 ja	 $LN81@TestSector
  007cc	8b 95 10 f7 ff
	ff		 mov	 edx, DWORD PTR tv231[ebp]
  007d2	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN221@TestSector[edx*4]
$LN80@TestSector:

; 822  : 				{
; 823  : 				case 0:
; 824  : 					if (crc != 0xa2d7d82a)

  007d9	81 7d f8 2a d8
	d7 a2		 cmp	 DWORD PTR _crc$[ebp], -1562912726 ; a2d7d82aH
  007e0	74 07		 je	 SHORT $LN79@TestSector

; 825  : 						return FALSE;

  007e2	33 c0		 xor	 eax, eax
  007e4	e9 a2 0b 00 00	 jmp	 $LN149@TestSector
$LN79@TestSector:

; 826  : 					nTestsPerformed++;

  007e9	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  007ef	83 c0 01	 add	 eax, 1
  007f2	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax

; 827  : 					break;

  007f8	eb 61		 jmp	 SHORT $LN81@TestSector
$LN78@TestSector:

; 828  : 				case 1:
; 829  : 					if (crc != 0xdbf76412)

  007fa	81 7d f8 12 64
	f7 db		 cmp	 DWORD PTR _crc$[ebp], -604543982 ; dbf76412H
  00801	74 07		 je	 SHORT $LN77@TestSector

; 830  : 						return FALSE;

  00803	33 c0		 xor	 eax, eax
  00805	e9 81 0b 00 00	 jmp	 $LN149@TestSector
$LN77@TestSector:

; 831  : 					nTestsPerformed++;

  0080a	8b 8d 90 f7 ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  00810	83 c1 01	 add	 ecx, 1
  00813	89 8d 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx

; 832  : 					break;

  00819	eb 40		 jmp	 SHORT $LN81@TestSector
$LN76@TestSector:

; 833  : 				case 2:
; 834  : 					if (crc != 0xdf0ea03e)

  0081b	81 7d f8 3e a0
	0e df		 cmp	 DWORD PTR _crc$[ebp], -552689602 ; df0ea03eH
  00822	74 07		 je	 SHORT $LN75@TestSector

; 835  : 						return FALSE;

  00824	33 c0		 xor	 eax, eax
  00826	e9 60 0b 00 00	 jmp	 $LN149@TestSector
$LN75@TestSector:

; 836  : 					nTestsPerformed++;

  0082b	8b 95 90 f7 ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  00831	83 c2 01	 add	 edx, 1
  00834	89 95 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx

; 837  : 					break;

  0083a	eb 1f		 jmp	 SHORT $LN81@TestSector
$LN74@TestSector:

; 838  : 				case 3:
; 839  : 					if (crc != 0xdadedff7)

  0083c	81 7d f8 f7 df
	de da		 cmp	 DWORD PTR _crc$[ebp], -622927881 ; dadedff7H
  00843	74 07		 je	 SHORT $LN73@TestSector

; 840  : 						return FALSE;

  00845	33 c0		 xor	 eax, eax
  00847	e9 3f 0b 00 00	 jmp	 $LN149@TestSector
$LN73@TestSector:

; 841  : 					nTestsPerformed++;

  0084c	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  00852	83 c0 01	 add	 eax, 1
  00855	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
$LN81@TestSector:

; 842  : 					break;
; 843  : 				}
; 844  : 			}
; 845  : 			else if (strcmp (name, "Serpent-AES") == 0)

  0085b	e9 b8 03 00 00	 jmp	 $LN120@TestSector
$LN83@TestSector:
  00860	c7 85 0c f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv655[ebp], OFFSET ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  0086a	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  0086d	89 8d 08 f7 ff
	ff		 mov	 DWORD PTR tv653[ebp], ecx
$LL173@TestSector:
  00873	8b 95 08 f7 ff
	ff		 mov	 edx, DWORD PTR tv653[ebp]
  00879	8a 02		 mov	 al, BYTE PTR [edx]
  0087b	88 85 07 f7 ff
	ff		 mov	 BYTE PTR tv658[ebp], al
  00881	8b 8d 0c f7 ff
	ff		 mov	 ecx, DWORD PTR tv655[ebp]
  00887	3a 01		 cmp	 al, BYTE PTR [ecx]
  00889	75 46		 jne	 SHORT $LN174@TestSector
  0088b	80 bd 07 f7 ff
	ff 00		 cmp	 BYTE PTR tv658[ebp], 0
  00892	74 31		 je	 SHORT $LN175@TestSector
  00894	8b 95 08 f7 ff
	ff		 mov	 edx, DWORD PTR tv653[ebp]
  0089a	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  0089d	88 85 06 f7 ff
	ff		 mov	 BYTE PTR tv665[ebp], al
  008a3	8b 8d 0c f7 ff
	ff		 mov	 ecx, DWORD PTR tv655[ebp]
  008a9	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  008ac	75 23		 jne	 SHORT $LN174@TestSector
  008ae	83 85 08 f7 ff
	ff 02		 add	 DWORD PTR tv653[ebp], 2
  008b5	83 85 0c f7 ff
	ff 02		 add	 DWORD PTR tv655[ebp], 2
  008bc	80 bd 06 f7 ff
	ff 00		 cmp	 BYTE PTR tv665[ebp], 0
  008c3	75 ae		 jne	 SHORT $LL173@TestSector
$LN175@TestSector:
  008c5	c7 85 00 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv670[ebp], 0
  008cf	eb 0b		 jmp	 SHORT $LN176@TestSector
$LN174@TestSector:
  008d1	1b d2		 sbb	 edx, edx
  008d3	83 da ff	 sbb	 edx, -1
  008d6	89 95 00 f7 ff
	ff		 mov	 DWORD PTR tv670[ebp], edx
$LN176@TestSector:
  008dc	8b 85 00 f7 ff
	ff		 mov	 eax, DWORD PTR tv670[ebp]
  008e2	89 85 fc f6 ff
	ff		 mov	 DWORD PTR tv244[ebp], eax
  008e8	83 bd fc f6 ff
	ff 00		 cmp	 DWORD PTR tv244[ebp], 0
  008ef	0f 85 aa 00 00
	00		 jne	 $LN71@TestSector

; 846  : 			{
; 847  : 				switch (testCase)

  008f5	8b 4d fc	 mov	 ecx, DWORD PTR _testCase$[ebp]
  008f8	89 8d f8 f6 ff
	ff		 mov	 DWORD PTR tv246[ebp], ecx
  008fe	83 bd f8 f6 ff
	ff 03		 cmp	 DWORD PTR tv246[ebp], 3
  00905	0f 87 8f 00 00
	00		 ja	 $LN69@TestSector
  0090b	8b 95 f8 f6 ff
	ff		 mov	 edx, DWORD PTR tv246[ebp]
  00911	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN222@TestSector[edx*4]
$LN68@TestSector:

; 848  : 				{
; 849  : 				case 0:
; 850  : 					if (crc != 0x6dd133b3)

  00918	81 7d f8 b3 33
	d1 6d		 cmp	 DWORD PTR _crc$[ebp], 1842426803 ; 6dd133b3H
  0091f	74 07		 je	 SHORT $LN67@TestSector

; 851  : 						return FALSE;

  00921	33 c0		 xor	 eax, eax
  00923	e9 63 0a 00 00	 jmp	 $LN149@TestSector
$LN67@TestSector:

; 852  : 					nTestsPerformed++;

  00928	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  0092e	83 c0 01	 add	 eax, 1
  00931	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax

; 853  : 					break;

  00937	eb 61		 jmp	 SHORT $LN69@TestSector
$LN66@TestSector:

; 854  : 				case 1:
; 855  : 					if (crc != 0x0e5717d2)

  00939	81 7d f8 d2 17
	57 0e		 cmp	 DWORD PTR _crc$[ebp], 240588754 ; 0e5717d2H
  00940	74 07		 je	 SHORT $LN65@TestSector

; 856  : 						return FALSE;

  00942	33 c0		 xor	 eax, eax
  00944	e9 42 0a 00 00	 jmp	 $LN149@TestSector
$LN65@TestSector:

; 857  : 					nTestsPerformed++;

  00949	8b 8d 90 f7 ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  0094f	83 c1 01	 add	 ecx, 1
  00952	89 8d 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx

; 858  : 					break;

  00958	eb 40		 jmp	 SHORT $LN69@TestSector
$LN64@TestSector:

; 859  : 				case 2:
; 860  : 					if (crc != 0x39f83cd9)

  0095a	81 7d f8 d9 3c
	f8 39		 cmp	 DWORD PTR _crc$[ebp], 972569817 ; 39f83cd9H
  00961	74 07		 je	 SHORT $LN63@TestSector

; 861  : 						return FALSE;

  00963	33 c0		 xor	 eax, eax
  00965	e9 21 0a 00 00	 jmp	 $LN149@TestSector
$LN63@TestSector:

; 862  : 					nTestsPerformed++;

  0096a	8b 95 90 f7 ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  00970	83 c2 01	 add	 edx, 1
  00973	89 95 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx

; 863  : 					break;

  00979	eb 1f		 jmp	 SHORT $LN69@TestSector
$LN62@TestSector:

; 864  : 				case 3:
; 865  : 					if (crc != 0x8a79fa2c)

  0097b	81 7d f8 2c fa
	79 8a		 cmp	 DWORD PTR _crc$[ebp], -1971717588 ; 8a79fa2cH
  00982	74 07		 je	 SHORT $LN61@TestSector

; 866  : 						return FALSE;

  00984	33 c0		 xor	 eax, eax
  00986	e9 00 0a 00 00	 jmp	 $LN149@TestSector
$LN61@TestSector:

; 867  : 					nTestsPerformed++;

  0098b	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  00991	83 c0 01	 add	 eax, 1
  00994	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
$LN69@TestSector:

; 868  : 					break;
; 869  : 				}
; 870  : 			}
; 871  : 			else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  0099a	e9 79 02 00 00	 jmp	 $LN120@TestSector
$LN71@TestSector:
  0099f	c7 85 f4 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv687[ebp], OFFSET ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  009a9	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  009ac	89 8d f0 f6 ff
	ff		 mov	 DWORD PTR tv685[ebp], ecx
$LL177@TestSector:
  009b2	8b 95 f0 f6 ff
	ff		 mov	 edx, DWORD PTR tv685[ebp]
  009b8	8a 02		 mov	 al, BYTE PTR [edx]
  009ba	88 85 ef f6 ff
	ff		 mov	 BYTE PTR tv690[ebp], al
  009c0	8b 8d f4 f6 ff
	ff		 mov	 ecx, DWORD PTR tv687[ebp]
  009c6	3a 01		 cmp	 al, BYTE PTR [ecx]
  009c8	75 46		 jne	 SHORT $LN178@TestSector
  009ca	80 bd ef f6 ff
	ff 00		 cmp	 BYTE PTR tv690[ebp], 0
  009d1	74 31		 je	 SHORT $LN179@TestSector
  009d3	8b 95 f0 f6 ff
	ff		 mov	 edx, DWORD PTR tv685[ebp]
  009d9	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  009dc	88 85 ee f6 ff
	ff		 mov	 BYTE PTR tv697[ebp], al
  009e2	8b 8d f4 f6 ff
	ff		 mov	 ecx, DWORD PTR tv687[ebp]
  009e8	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  009eb	75 23		 jne	 SHORT $LN178@TestSector
  009ed	83 85 f0 f6 ff
	ff 02		 add	 DWORD PTR tv685[ebp], 2
  009f4	83 85 f4 f6 ff
	ff 02		 add	 DWORD PTR tv687[ebp], 2
  009fb	80 bd ee f6 ff
	ff 00		 cmp	 BYTE PTR tv697[ebp], 0
  00a02	75 ae		 jne	 SHORT $LL177@TestSector
$LN179@TestSector:
  00a04	c7 85 e8 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv702[ebp], 0
  00a0e	eb 0b		 jmp	 SHORT $LN180@TestSector
$LN178@TestSector:
  00a10	1b d2		 sbb	 edx, edx
  00a12	83 da ff	 sbb	 edx, -1
  00a15	89 95 e8 f6 ff
	ff		 mov	 DWORD PTR tv702[ebp], edx
$LN180@TestSector:
  00a1b	8b 85 e8 f6 ff
	ff		 mov	 eax, DWORD PTR tv702[ebp]
  00a21	89 85 e4 f6 ff
	ff		 mov	 DWORD PTR tv259[ebp], eax
  00a27	83 bd e4 f6 ff
	ff 00		 cmp	 DWORD PTR tv259[ebp], 0
  00a2e	0f 85 aa 00 00
	00		 jne	 $LN59@TestSector

; 872  : 			{
; 873  : 				switch (testCase)

  00a34	8b 4d fc	 mov	 ecx, DWORD PTR _testCase$[ebp]
  00a37	89 8d e0 f6 ff
	ff		 mov	 DWORD PTR tv261[ebp], ecx
  00a3d	83 bd e0 f6 ff
	ff 03		 cmp	 DWORD PTR tv261[ebp], 3
  00a44	0f 87 8f 00 00
	00		 ja	 $LN57@TestSector
  00a4a	8b 95 e0 f6 ff
	ff		 mov	 edx, DWORD PTR tv261[ebp]
  00a50	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN223@TestSector[edx*4]
$LN56@TestSector:

; 874  : 				{
; 875  : 				case 0:
; 876  : 					if (crc != 0xe536daf8)

  00a57	81 7d f8 f8 da
	36 e5		 cmp	 DWORD PTR _crc$[ebp], -449389832 ; e536daf8H
  00a5e	74 07		 je	 SHORT $LN55@TestSector

; 877  : 						return FALSE;

  00a60	33 c0		 xor	 eax, eax
  00a62	e9 24 09 00 00	 jmp	 $LN149@TestSector
$LN55@TestSector:

; 878  : 					nTestsPerformed++;

  00a67	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  00a6d	83 c0 01	 add	 eax, 1
  00a70	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax

; 879  : 					break;

  00a76	eb 61		 jmp	 SHORT $LN57@TestSector
$LN54@TestSector:

; 880  : 				case 1:
; 881  : 					if (crc != 0x3ae89e7f)

  00a78	81 7d f8 7f 9e
	e8 3a		 cmp	 DWORD PTR _crc$[ebp], 988323455 ; 3ae89e7fH
  00a7f	74 07		 je	 SHORT $LN53@TestSector

; 882  : 						return FALSE;

  00a81	33 c0		 xor	 eax, eax
  00a83	e9 03 09 00 00	 jmp	 $LN149@TestSector
$LN53@TestSector:

; 883  : 					nTestsPerformed++;

  00a88	8b 8d 90 f7 ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  00a8e	83 c1 01	 add	 ecx, 1
  00a91	89 8d 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx

; 884  : 					break;

  00a97	eb 40		 jmp	 SHORT $LN57@TestSector
$LN52@TestSector:

; 885  : 				case 2:
; 886  : 					if (crc != 0x2cc1301a)

  00a99	81 7d f8 1a 30
	c1 2c		 cmp	 DWORD PTR _crc$[ebp], 750858266 ; 2cc1301aH
  00aa0	74 07		 je	 SHORT $LN51@TestSector

; 887  : 						return FALSE;

  00aa2	33 c0		 xor	 eax, eax
  00aa4	e9 e2 08 00 00	 jmp	 $LN149@TestSector
$LN51@TestSector:

; 888  : 					nTestsPerformed++;

  00aa9	8b 95 90 f7 ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  00aaf	83 c2 01	 add	 edx, 1
  00ab2	89 95 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx

; 889  : 					break;

  00ab8	eb 1f		 jmp	 SHORT $LN57@TestSector
$LN50@TestSector:

; 890  : 				case 3:
; 891  : 					if (crc != 0xcac7bdc7)

  00aba	81 7d f8 c7 bd
	c7 ca		 cmp	 DWORD PTR _crc$[ebp], -892879417 ; cac7bdc7H
  00ac1	74 07		 je	 SHORT $LN49@TestSector

; 892  : 						return FALSE;

  00ac3	33 c0		 xor	 eax, eax
  00ac5	e9 c1 08 00 00	 jmp	 $LN149@TestSector
$LN49@TestSector:

; 893  : 					nTestsPerformed++;

  00aca	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  00ad0	83 c0 01	 add	 eax, 1
  00ad3	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
$LN57@TestSector:

; 894  : 					break;
; 895  : 				}
; 896  : 			}
; 897  : 			else if (strcmp (name, "Twofish-Serpent") == 0)

  00ad9	e9 3a 01 00 00	 jmp	 $LN120@TestSector
$LN59@TestSector:
  00ade	c7 85 dc f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv719[ebp], OFFSET ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  00ae8	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  00aeb	89 8d d8 f6 ff
	ff		 mov	 DWORD PTR tv717[ebp], ecx
$LL181@TestSector:
  00af1	8b 95 d8 f6 ff
	ff		 mov	 edx, DWORD PTR tv717[ebp]
  00af7	8a 02		 mov	 al, BYTE PTR [edx]
  00af9	88 85 d7 f6 ff
	ff		 mov	 BYTE PTR tv722[ebp], al
  00aff	8b 8d dc f6 ff
	ff		 mov	 ecx, DWORD PTR tv719[ebp]
  00b05	3a 01		 cmp	 al, BYTE PTR [ecx]
  00b07	75 46		 jne	 SHORT $LN182@TestSector
  00b09	80 bd d7 f6 ff
	ff 00		 cmp	 BYTE PTR tv722[ebp], 0
  00b10	74 31		 je	 SHORT $LN183@TestSector
  00b12	8b 95 d8 f6 ff
	ff		 mov	 edx, DWORD PTR tv717[ebp]
  00b18	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00b1b	88 85 d6 f6 ff
	ff		 mov	 BYTE PTR tv729[ebp], al
  00b21	8b 8d dc f6 ff
	ff		 mov	 ecx, DWORD PTR tv719[ebp]
  00b27	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00b2a	75 23		 jne	 SHORT $LN182@TestSector
  00b2c	83 85 d8 f6 ff
	ff 02		 add	 DWORD PTR tv717[ebp], 2
  00b33	83 85 dc f6 ff
	ff 02		 add	 DWORD PTR tv719[ebp], 2
  00b3a	80 bd d6 f6 ff
	ff 00		 cmp	 BYTE PTR tv729[ebp], 0
  00b41	75 ae		 jne	 SHORT $LL181@TestSector
$LN183@TestSector:
  00b43	c7 85 d0 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv734[ebp], 0
  00b4d	eb 0b		 jmp	 SHORT $LN184@TestSector
$LN182@TestSector:
  00b4f	1b d2		 sbb	 edx, edx
  00b51	83 da ff	 sbb	 edx, -1
  00b54	89 95 d0 f6 ff
	ff		 mov	 DWORD PTR tv734[ebp], edx
$LN184@TestSector:
  00b5a	8b 85 d0 f6 ff
	ff		 mov	 eax, DWORD PTR tv734[ebp]
  00b60	89 85 cc f6 ff
	ff		 mov	 DWORD PTR tv274[ebp], eax
  00b66	83 bd cc f6 ff
	ff 00		 cmp	 DWORD PTR tv274[ebp], 0
  00b6d	0f 85 a5 00 00
	00		 jne	 $LN120@TestSector

; 898  : 			{
; 899  : 				switch (testCase)

  00b73	8b 4d fc	 mov	 ecx, DWORD PTR _testCase$[ebp]
  00b76	89 8d c8 f6 ff
	ff		 mov	 DWORD PTR tv276[ebp], ecx
  00b7c	83 bd c8 f6 ff
	ff 03		 cmp	 DWORD PTR tv276[ebp], 3
  00b83	0f 87 8f 00 00
	00		 ja	 $LN120@TestSector
  00b89	8b 95 c8 f6 ff
	ff		 mov	 edx, DWORD PTR tv276[ebp]
  00b8f	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN224@TestSector[edx*4]
$LN44@TestSector:

; 900  : 				{
; 901  : 				case 0:
; 902  : 					if (crc != 0x2686c859)

  00b96	81 7d f8 59 c8
	86 26		 cmp	 DWORD PTR _crc$[ebp], 646367321 ; 2686c859H
  00b9d	74 07		 je	 SHORT $LN43@TestSector

; 903  : 						return FALSE;

  00b9f	33 c0		 xor	 eax, eax
  00ba1	e9 e5 07 00 00	 jmp	 $LN149@TestSector
$LN43@TestSector:

; 904  : 					nTestsPerformed++;

  00ba6	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  00bac	83 c0 01	 add	 eax, 1
  00baf	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax

; 905  : 					break;

  00bb5	eb 61		 jmp	 SHORT $LN120@TestSector
$LN42@TestSector:

; 906  : 				case 1:
; 907  : 					if (crc != 0x8a201780)

  00bb7	81 7d f8 80 17
	20 8a		 cmp	 DWORD PTR _crc$[ebp], -1977608320 ; 8a201780H
  00bbe	74 07		 je	 SHORT $LN41@TestSector

; 908  : 						return FALSE;

  00bc0	33 c0		 xor	 eax, eax
  00bc2	e9 c4 07 00 00	 jmp	 $LN149@TestSector
$LN41@TestSector:

; 909  : 					nTestsPerformed++;

  00bc7	8b 8d 90 f7 ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  00bcd	83 c1 01	 add	 ecx, 1
  00bd0	89 8d 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx

; 910  : 					break;

  00bd6	eb 40		 jmp	 SHORT $LN120@TestSector
$LN40@TestSector:

; 911  : 				case 2:
; 912  : 					if (crc != 0x8dd13796)

  00bd8	81 7d f8 96 37
	d1 8d		 cmp	 DWORD PTR _crc$[ebp], -1915668586 ; 8dd13796H
  00bdf	74 07		 je	 SHORT $LN39@TestSector

; 913  : 						return FALSE;

  00be1	33 c0		 xor	 eax, eax
  00be3	e9 a3 07 00 00	 jmp	 $LN149@TestSector
$LN39@TestSector:

; 914  : 					nTestsPerformed++;

  00be8	8b 95 90 f7 ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  00bee	83 c2 01	 add	 edx, 1
  00bf1	89 95 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx

; 915  : 					break;

  00bf7	eb 1f		 jmp	 SHORT $LN120@TestSector
$LN38@TestSector:

; 916  : 				case 3:
; 917  : 					if (crc != 0xe95196cb)

  00bf9	81 7d f8 cb 96
	51 e9		 cmp	 DWORD PTR _crc$[ebp], -380528949 ; e95196cbH
  00c00	74 07		 je	 SHORT $LN37@TestSector

; 918  : 						return FALSE;

  00c02	33 c0		 xor	 eax, eax
  00c04	e9 82 07 00 00	 jmp	 $LN149@TestSector
$LN37@TestSector:

; 919  : 					nTestsPerformed++;

  00c09	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  00c0f	83 c0 01	 add	 eax, 1
  00c12	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
$LN120@TestSector:

; 920  : 					break;
; 921  : 				}
; 922  : 			}
; 923  : 
; 924  : 			if (crc == 0x9f5edd58)

  00c18	81 7d f8 58 dd
	5e 9f		 cmp	 DWORD PTR _crc$[ebp], -1621172904 ; 9f5edd58H
  00c1f	75 07		 jne	 SHORT $LN36@TestSector

; 925  : 				return FALSE;

  00c21	33 c0		 xor	 eax, eax
  00c23	e9 63 07 00 00	 jmp	 $LN149@TestSector
$LN36@TestSector:

; 926  : 
; 927  : 			DecryptDataUnits (buf, &unitNo, nbrUnits, ci);

  00c28	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00c2b	51		 push	 ecx
  00c2c	8b 95 94 f7 ff
	ff		 mov	 edx, DWORD PTR _nbrUnits$[ebp]
  00c32	52		 push	 edx
  00c33	8d 45 e8	 lea	 eax, DWORD PTR _unitNo$[ebp]
  00c36	50		 push	 eax
  00c37	8d 8d 98 f7 ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  00c3d	51		 push	 ecx
  00c3e	e8 00 00 00 00	 call	 _DecryptDataUnits@16

; 928  : 
; 929  : 			if (GetCrc32 (buf, sizeof (buf)) != 0x9f5edd58)

  00c43	68 00 08 00 00	 push	 2048			; 00000800H
  00c48	8d 95 98 f7 ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  00c4e	52		 push	 edx
  00c4f	e8 00 00 00 00	 call	 _GetCrc32@8
  00c54	3d 58 dd 5e 9f	 cmp	 eax, -1621172904	; 9f5edd58H
  00c59	74 07		 je	 SHORT $LN35@TestSector

; 930  : 				return FALSE;

  00c5b	33 c0		 xor	 eax, eax
  00c5d	e9 29 07 00 00	 jmp	 $LN149@TestSector
$LN35@TestSector:

; 931  : 
; 932  : 			nTestsPerformed++;

  00c62	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  00c68	83 c0 01	 add	 eax, 1
  00c6b	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax

; 933  : 		}

  00c71	e9 6a f4 ff ff	 jmp	 $LN143@TestSector
$LN142@TestSector:

; 934  : 		testCase++;

  00c76	8b 4d fc	 mov	 ecx, DWORD PTR _testCase$[ebp]
  00c79	83 c1 01	 add	 ecx, 1
  00c7c	89 4d fc	 mov	 DWORD PTR _testCase$[ebp], ecx

; 935  : 	}

  00c7f	e9 dc f3 ff ff	 jmp	 $LN146@TestSector
$LN145@TestSector:

; 936  : 
; 937  : 	/* Encryption/decryption of a buffer (typically, a volume header) */
; 938  : 
; 939  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;

  00c84	c7 85 94 f7 ff
	ff 04 00 00 00	 mov	 DWORD PTR _nbrUnits$[ebp], 4

; 940  : 
; 941  : 	// Test all EAs that support this mode of operation
; 942  : 	for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  00c8e	e8 00 00 00 00	 call	 _EAGetFirst@0
  00c93	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00c96	89 02		 mov	 DWORD PTR [edx], eax
  00c98	eb 10		 jmp	 SHORT $LN34@TestSector
$LN33@TestSector:
  00c9a	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  00c9d	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c9f	51		 push	 ecx
  00ca0	e8 00 00 00 00	 call	 _EAGetNext@4
  00ca5	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00ca8	89 02		 mov	 DWORD PTR [edx], eax
$LN34@TestSector:
  00caa	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  00cad	83 38 00	 cmp	 DWORD PTR [eax], 0
  00cb0	0f 84 c9 06 00
	00		 je	 $LN32@TestSector

; 943  : 	{
; 944  : 		if (!EAIsModeSupported (ci->ea, ci->mode))

  00cb6	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00cb9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00cbc	52		 push	 edx
  00cbd	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  00cc0	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cc2	51		 push	 ecx
  00cc3	e8 00 00 00 00	 call	 _EAIsModeSupported@8
  00cc8	85 c0		 test	 eax, eax
  00cca	75 02		 jne	 SHORT $LN31@TestSector

; 945  : 			continue;

  00ccc	eb cc		 jmp	 SHORT $LN33@TestSector
$LN31@TestSector:

; 946  : 
; 947  : 		EAGetName (name, ci->ea);

  00cce	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00cd1	8b 02		 mov	 eax, DWORD PTR [edx]
  00cd3	50		 push	 eax
  00cd4	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  00cd7	51		 push	 ecx
  00cd8	e8 00 00 00 00	 call	 _EAGetName@8

; 948  : 
; 949  : 		if (EAInit (ci->ea, key1, ci->ks) != ERR_SUCCESS)

  00cdd	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00ce0	83 c2 08	 add	 edx, 8
  00ce3	52		 push	 edx
  00ce4	68 00 00 00 00	 push	 OFFSET ?key1@?1??TestSectorBufEncryption@@9@9
  00ce9	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  00cec	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cee	51		 push	 ecx
  00cef	e8 00 00 00 00	 call	 _EAInit@12
  00cf4	85 c0		 test	 eax, eax
  00cf6	74 07		 je	 SHORT $LN30@TestSector

; 950  : 			return FALSE;

  00cf8	33 c0		 xor	 eax, eax
  00cfa	e9 8c 06 00 00	 jmp	 $LN149@TestSector
$LN30@TestSector:

; 951  : 
; 952  : 		memcpy (&ci->k2, XTS_vectors[XTS_TEST_COUNT-1].key2, sizeof (XTS_vectors[XTS_TEST_COUNT-1].key2));

  00cff	be 50 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4432
  00d04	8b 7d 08	 mov	 edi, DWORD PTR _ci$[ebp]
  00d07	81 c7 a8 42 00
	00		 add	 edi, 17064		; 000042a8H
  00d0d	b9 08 00 00 00	 mov	 ecx, 8
  00d12	f3 a5		 rep movsd

; 953  : 
; 954  : 		if (!EAInitMode (ci))

  00d14	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00d17	52		 push	 edx
  00d18	e8 00 00 00 00	 call	 _EAInitMode@4
  00d1d	85 c0		 test	 eax, eax
  00d1f	75 07		 jne	 SHORT $LN29@TestSector

; 955  : 			return FALSE;

  00d21	33 c0		 xor	 eax, eax
  00d23	e9 63 06 00 00	 jmp	 $LN149@TestSector
$LN29@TestSector:

; 956  : 
; 957  : 		// Each data unit will contain the same plaintext
; 958  : 		for (i = 0; i < nbrUnits; i++)

  00d28	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00d2f	eb 09		 jmp	 SHORT $LN28@TestSector
$LN27@TestSector:
  00d31	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00d34	83 c0 01	 add	 eax, 1
  00d37	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN28@TestSector:
  00d3a	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00d3d	3b 8d 94 f7 ff
	ff		 cmp	 ecx, DWORD PTR _nbrUnits$[ebp]
  00d43	73 1b		 jae	 SHORT $LN26@TestSector

; 959  : 		{
; 960  : 			memcpy ((unsigned char *) buf + i * ENCRYPTION_DATA_UNIT_SIZE, 
; 961  : 				XTS_vectors[XTS_TEST_COUNT-1].plaintext, 
; 962  : 				ENCRYPTION_DATA_UNIT_SIZE);

  00d45	be 7c 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4476
  00d4a	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00d4d	c1 e2 09	 shl	 edx, 9
  00d50	8d bc 15 98 f7
	ff ff		 lea	 edi, DWORD PTR _buf$[ebp+edx]
  00d57	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00d5c	f3 a5		 rep movsd

; 963  : 		}

  00d5e	eb d1		 jmp	 SHORT $LN27@TestSector
$LN26@TestSector:

; 964  : 
; 965  : 		EncryptBuffer (buf, sizeof (buf), ci);

  00d60	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  00d63	50		 push	 eax
  00d64	6a 00		 push	 0
  00d66	68 00 08 00 00	 push	 2048			; 00000800H
  00d6b	8d 8d 98 f7 ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  00d71	51		 push	 ecx
  00d72	e8 00 00 00 00	 call	 _EncryptBuffer@16

; 966  : 
; 967  : 		crc = GetCrc32 (buf, sizeof (buf));

  00d77	68 00 08 00 00	 push	 2048			; 00000800H
  00d7c	8d 95 98 f7 ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  00d82	52		 push	 edx
  00d83	e8 00 00 00 00	 call	 _GetCrc32@8
  00d88	89 45 f8	 mov	 DWORD PTR _crc$[ebp], eax

; 968  : 
; 969  : 		if (strcmp (name, "AES") == 0)

  00d8b	c7 85 c4 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv800[ebp], OFFSET ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  00d95	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  00d98	89 85 c0 f6 ff
	ff		 mov	 DWORD PTR tv798[ebp], eax
$LL185@TestSector:
  00d9e	8b 8d c0 f6 ff
	ff		 mov	 ecx, DWORD PTR tv798[ebp]
  00da4	8a 11		 mov	 dl, BYTE PTR [ecx]
  00da6	88 95 bf f6 ff
	ff		 mov	 BYTE PTR tv803[ebp], dl
  00dac	8b 85 c4 f6 ff
	ff		 mov	 eax, DWORD PTR tv800[ebp]
  00db2	3a 10		 cmp	 dl, BYTE PTR [eax]
  00db4	75 46		 jne	 SHORT $LN186@TestSector
  00db6	80 bd bf f6 ff
	ff 00		 cmp	 BYTE PTR tv803[ebp], 0
  00dbd	74 31		 je	 SHORT $LN187@TestSector
  00dbf	8b 8d c0 f6 ff
	ff		 mov	 ecx, DWORD PTR tv798[ebp]
  00dc5	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00dc8	88 95 be f6 ff
	ff		 mov	 BYTE PTR tv810[ebp], dl
  00dce	8b 85 c4 f6 ff
	ff		 mov	 eax, DWORD PTR tv800[ebp]
  00dd4	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00dd7	75 23		 jne	 SHORT $LN186@TestSector
  00dd9	83 85 c0 f6 ff
	ff 02		 add	 DWORD PTR tv798[ebp], 2
  00de0	83 85 c4 f6 ff
	ff 02		 add	 DWORD PTR tv800[ebp], 2
  00de7	80 bd be f6 ff
	ff 00		 cmp	 BYTE PTR tv810[ebp], 0
  00dee	75 ae		 jne	 SHORT $LL185@TestSector
$LN187@TestSector:
  00df0	c7 85 b8 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv815[ebp], 0
  00dfa	eb 0b		 jmp	 SHORT $LN188@TestSector
$LN186@TestSector:
  00dfc	1b c9		 sbb	 ecx, ecx
  00dfe	83 d9 ff	 sbb	 ecx, -1
  00e01	89 8d b8 f6 ff
	ff		 mov	 DWORD PTR tv815[ebp], ecx
$LN188@TestSector:
  00e07	8b 95 b8 f6 ff
	ff		 mov	 edx, DWORD PTR tv815[ebp]
  00e0d	89 95 b4 f6 ff
	ff		 mov	 DWORD PTR tv345[ebp], edx
  00e13	83 bd b4 f6 ff
	ff 00		 cmp	 DWORD PTR tv345[ebp], 0
  00e1a	75 24		 jne	 SHORT $LN25@TestSector

; 970  : 		{
; 971  : 			if (crc != 0x33b91fab)

  00e1c	81 7d f8 ab 1f
	b9 33		 cmp	 DWORD PTR _crc$[ebp], 867770283 ; 33b91fabH
  00e23	74 07		 je	 SHORT $LN24@TestSector

; 972  : 				return FALSE;

  00e25	33 c0		 xor	 eax, eax
  00e27	e9 5f 05 00 00	 jmp	 $LN149@TestSector
$LN24@TestSector:

; 973  : 			nTestsPerformed++;

  00e2c	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  00e32	83 c0 01	 add	 eax, 1
  00e35	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
  00e3b	e9 eb 04 00 00	 jmp	 $LN23@TestSector
$LN25@TestSector:

; 974  : 		}
; 975  : 		else if (strcmp (name, "Serpent") == 0)

  00e40	c7 85 b0 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv824[ebp], OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  00e4a	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  00e4d	89 8d ac f6 ff
	ff		 mov	 DWORD PTR tv822[ebp], ecx
$LL189@TestSector:
  00e53	8b 95 ac f6 ff
	ff		 mov	 edx, DWORD PTR tv822[ebp]
  00e59	8a 02		 mov	 al, BYTE PTR [edx]
  00e5b	88 85 ab f6 ff
	ff		 mov	 BYTE PTR tv827[ebp], al
  00e61	8b 8d b0 f6 ff
	ff		 mov	 ecx, DWORD PTR tv824[ebp]
  00e67	3a 01		 cmp	 al, BYTE PTR [ecx]
  00e69	75 46		 jne	 SHORT $LN190@TestSector
  00e6b	80 bd ab f6 ff
	ff 00		 cmp	 BYTE PTR tv827[ebp], 0
  00e72	74 31		 je	 SHORT $LN191@TestSector
  00e74	8b 95 ac f6 ff
	ff		 mov	 edx, DWORD PTR tv822[ebp]
  00e7a	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00e7d	88 85 aa f6 ff
	ff		 mov	 BYTE PTR tv834[ebp], al
  00e83	8b 8d b0 f6 ff
	ff		 mov	 ecx, DWORD PTR tv824[ebp]
  00e89	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00e8c	75 23		 jne	 SHORT $LN190@TestSector
  00e8e	83 85 ac f6 ff
	ff 02		 add	 DWORD PTR tv822[ebp], 2
  00e95	83 85 b0 f6 ff
	ff 02		 add	 DWORD PTR tv824[ebp], 2
  00e9c	80 bd aa f6 ff
	ff 00		 cmp	 BYTE PTR tv834[ebp], 0
  00ea3	75 ae		 jne	 SHORT $LL189@TestSector
$LN191@TestSector:
  00ea5	c7 85 a4 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv839[ebp], 0
  00eaf	eb 0b		 jmp	 SHORT $LN192@TestSector
$LN190@TestSector:
  00eb1	1b d2		 sbb	 edx, edx
  00eb3	83 da ff	 sbb	 edx, -1
  00eb6	89 95 a4 f6 ff
	ff		 mov	 DWORD PTR tv839[ebp], edx
$LN192@TestSector:
  00ebc	8b 85 a4 f6 ff
	ff		 mov	 eax, DWORD PTR tv839[ebp]
  00ec2	89 85 a0 f6 ff
	ff		 mov	 DWORD PTR tv352[ebp], eax
  00ec8	83 bd a0 f6 ff
	ff 00		 cmp	 DWORD PTR tv352[ebp], 0
  00ecf	75 24		 jne	 SHORT $LN22@TestSector

; 976  : 		{
; 977  : 			if (crc != 0x3494d480)

  00ed1	81 7d f8 80 d4
	94 34		 cmp	 DWORD PTR _crc$[ebp], 882168960 ; 3494d480H
  00ed8	74 07		 je	 SHORT $LN21@TestSector

; 978  : 				return FALSE;

  00eda	33 c0		 xor	 eax, eax
  00edc	e9 aa 04 00 00	 jmp	 $LN149@TestSector
$LN21@TestSector:

; 979  : 			nTestsPerformed++;

  00ee1	8b 8d 90 f7 ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  00ee7	83 c1 01	 add	 ecx, 1
  00eea	89 8d 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
  00ef0	e9 36 04 00 00	 jmp	 $LN23@TestSector
$LN22@TestSector:

; 980  : 		}
; 981  : 		else if (strcmp (name, "Twofish") == 0)

  00ef5	c7 85 9c f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv848[ebp], OFFSET ??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@
  00eff	8d 55 a0	 lea	 edx, DWORD PTR _name$[ebp]
  00f02	89 95 98 f6 ff
	ff		 mov	 DWORD PTR tv846[ebp], edx
$LL193@TestSector:
  00f08	8b 85 98 f6 ff
	ff		 mov	 eax, DWORD PTR tv846[ebp]
  00f0e	8a 08		 mov	 cl, BYTE PTR [eax]
  00f10	88 8d 97 f6 ff
	ff		 mov	 BYTE PTR tv851[ebp], cl
  00f16	8b 95 9c f6 ff
	ff		 mov	 edx, DWORD PTR tv848[ebp]
  00f1c	3a 0a		 cmp	 cl, BYTE PTR [edx]
  00f1e	75 46		 jne	 SHORT $LN194@TestSector
  00f20	80 bd 97 f6 ff
	ff 00		 cmp	 BYTE PTR tv851[ebp], 0
  00f27	74 31		 je	 SHORT $LN195@TestSector
  00f29	8b 85 98 f6 ff
	ff		 mov	 eax, DWORD PTR tv846[ebp]
  00f2f	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00f32	88 8d 96 f6 ff
	ff		 mov	 BYTE PTR tv858[ebp], cl
  00f38	8b 95 9c f6 ff
	ff		 mov	 edx, DWORD PTR tv848[ebp]
  00f3e	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  00f41	75 23		 jne	 SHORT $LN194@TestSector
  00f43	83 85 98 f6 ff
	ff 02		 add	 DWORD PTR tv846[ebp], 2
  00f4a	83 85 9c f6 ff
	ff 02		 add	 DWORD PTR tv848[ebp], 2
  00f51	80 bd 96 f6 ff
	ff 00		 cmp	 BYTE PTR tv858[ebp], 0
  00f58	75 ae		 jne	 SHORT $LL193@TestSector
$LN195@TestSector:
  00f5a	c7 85 90 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv863[ebp], 0
  00f64	eb 0b		 jmp	 SHORT $LN196@TestSector
$LN194@TestSector:
  00f66	1b c0		 sbb	 eax, eax
  00f68	83 d8 ff	 sbb	 eax, -1
  00f6b	89 85 90 f6 ff
	ff		 mov	 DWORD PTR tv863[ebp], eax
$LN196@TestSector:
  00f71	8b 8d 90 f6 ff
	ff		 mov	 ecx, DWORD PTR tv863[ebp]
  00f77	89 8d 8c f6 ff
	ff		 mov	 DWORD PTR tv359[ebp], ecx
  00f7d	83 bd 8c f6 ff
	ff 00		 cmp	 DWORD PTR tv359[ebp], 0
  00f84	75 24		 jne	 SHORT $LN19@TestSector

; 982  : 		{
; 983  : 			if (crc != 0xc4d65b46)

  00f86	81 7d f8 46 5b
	d6 c4		 cmp	 DWORD PTR _crc$[ebp], -992584890 ; c4d65b46H
  00f8d	74 07		 je	 SHORT $LN18@TestSector

; 984  : 				return FALSE;

  00f8f	33 c0		 xor	 eax, eax
  00f91	e9 f5 03 00 00	 jmp	 $LN149@TestSector
$LN18@TestSector:

; 985  : 			nTestsPerformed++;

  00f96	8b 95 90 f7 ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  00f9c	83 c2 01	 add	 edx, 1
  00f9f	89 95 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx
  00fa5	e9 81 03 00 00	 jmp	 $LN23@TestSector
$LN19@TestSector:

; 986  : 		}
; 987  : 		else if (strcmp (name, "AES-Twofish") == 0)

  00faa	c7 85 88 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv872[ebp], OFFSET ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  00fb4	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  00fb7	89 85 84 f6 ff
	ff		 mov	 DWORD PTR tv870[ebp], eax
$LL197@TestSector:
  00fbd	8b 8d 84 f6 ff
	ff		 mov	 ecx, DWORD PTR tv870[ebp]
  00fc3	8a 11		 mov	 dl, BYTE PTR [ecx]
  00fc5	88 95 83 f6 ff
	ff		 mov	 BYTE PTR tv875[ebp], dl
  00fcb	8b 85 88 f6 ff
	ff		 mov	 eax, DWORD PTR tv872[ebp]
  00fd1	3a 10		 cmp	 dl, BYTE PTR [eax]
  00fd3	75 46		 jne	 SHORT $LN198@TestSector
  00fd5	80 bd 83 f6 ff
	ff 00		 cmp	 BYTE PTR tv875[ebp], 0
  00fdc	74 31		 je	 SHORT $LN199@TestSector
  00fde	8b 8d 84 f6 ff
	ff		 mov	 ecx, DWORD PTR tv870[ebp]
  00fe4	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00fe7	88 95 82 f6 ff
	ff		 mov	 BYTE PTR tv882[ebp], dl
  00fed	8b 85 88 f6 ff
	ff		 mov	 eax, DWORD PTR tv872[ebp]
  00ff3	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00ff6	75 23		 jne	 SHORT $LN198@TestSector
  00ff8	83 85 84 f6 ff
	ff 02		 add	 DWORD PTR tv870[ebp], 2
  00fff	83 85 88 f6 ff
	ff 02		 add	 DWORD PTR tv872[ebp], 2
  01006	80 bd 82 f6 ff
	ff 00		 cmp	 BYTE PTR tv882[ebp], 0
  0100d	75 ae		 jne	 SHORT $LL197@TestSector
$LN199@TestSector:
  0100f	c7 85 7c f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv887[ebp], 0
  01019	eb 0b		 jmp	 SHORT $LN200@TestSector
$LN198@TestSector:
  0101b	1b c9		 sbb	 ecx, ecx
  0101d	83 d9 ff	 sbb	 ecx, -1
  01020	89 8d 7c f6 ff
	ff		 mov	 DWORD PTR tv887[ebp], ecx
$LN200@TestSector:
  01026	8b 95 7c f6 ff
	ff		 mov	 edx, DWORD PTR tv887[ebp]
  0102c	89 95 78 f6 ff
	ff		 mov	 DWORD PTR tv366[ebp], edx
  01032	83 bd 78 f6 ff
	ff 00		 cmp	 DWORD PTR tv366[ebp], 0
  01039	75 24		 jne	 SHORT $LN16@TestSector

; 988  : 		{
; 989  : 			if (crc != 0x14ce7385)

  0103b	81 7d f8 85 73
	ce 14		 cmp	 DWORD PTR _crc$[ebp], 349074309 ; 14ce7385H
  01042	74 07		 je	 SHORT $LN15@TestSector

; 990  : 				return FALSE;

  01044	33 c0		 xor	 eax, eax
  01046	e9 40 03 00 00	 jmp	 $LN149@TestSector
$LN15@TestSector:

; 991  : 			nTestsPerformed++;

  0104b	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  01051	83 c0 01	 add	 eax, 1
  01054	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
  0105a	e9 cc 02 00 00	 jmp	 $LN23@TestSector
$LN16@TestSector:

; 992  : 		}
; 993  : 		else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  0105f	c7 85 74 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv896[ebp], OFFSET ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  01069	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  0106c	89 8d 70 f6 ff
	ff		 mov	 DWORD PTR tv894[ebp], ecx
$LL201@TestSector:
  01072	8b 95 70 f6 ff
	ff		 mov	 edx, DWORD PTR tv894[ebp]
  01078	8a 02		 mov	 al, BYTE PTR [edx]
  0107a	88 85 6f f6 ff
	ff		 mov	 BYTE PTR tv899[ebp], al
  01080	8b 8d 74 f6 ff
	ff		 mov	 ecx, DWORD PTR tv896[ebp]
  01086	3a 01		 cmp	 al, BYTE PTR [ecx]
  01088	75 46		 jne	 SHORT $LN202@TestSector
  0108a	80 bd 6f f6 ff
	ff 00		 cmp	 BYTE PTR tv899[ebp], 0
  01091	74 31		 je	 SHORT $LN203@TestSector
  01093	8b 95 70 f6 ff
	ff		 mov	 edx, DWORD PTR tv894[ebp]
  01099	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  0109c	88 85 6e f6 ff
	ff		 mov	 BYTE PTR tv906[ebp], al
  010a2	8b 8d 74 f6 ff
	ff		 mov	 ecx, DWORD PTR tv896[ebp]
  010a8	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  010ab	75 23		 jne	 SHORT $LN202@TestSector
  010ad	83 85 70 f6 ff
	ff 02		 add	 DWORD PTR tv894[ebp], 2
  010b4	83 85 74 f6 ff
	ff 02		 add	 DWORD PTR tv896[ebp], 2
  010bb	80 bd 6e f6 ff
	ff 00		 cmp	 BYTE PTR tv906[ebp], 0
  010c2	75 ae		 jne	 SHORT $LL201@TestSector
$LN203@TestSector:
  010c4	c7 85 68 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv911[ebp], 0
  010ce	eb 0b		 jmp	 SHORT $LN204@TestSector
$LN202@TestSector:
  010d0	1b d2		 sbb	 edx, edx
  010d2	83 da ff	 sbb	 edx, -1
  010d5	89 95 68 f6 ff
	ff		 mov	 DWORD PTR tv911[ebp], edx
$LN204@TestSector:
  010db	8b 85 68 f6 ff
	ff		 mov	 eax, DWORD PTR tv911[ebp]
  010e1	89 85 64 f6 ff
	ff		 mov	 DWORD PTR tv373[ebp], eax
  010e7	83 bd 64 f6 ff
	ff 00		 cmp	 DWORD PTR tv373[ebp], 0
  010ee	75 24		 jne	 SHORT $LN13@TestSector

; 994  : 		{
; 995  : 			if (crc != 0x0ec81bf7)

  010f0	81 7d f8 f7 1b
	c8 0e		 cmp	 DWORD PTR _crc$[ebp], 247995383 ; 0ec81bf7H
  010f7	74 07		 je	 SHORT $LN12@TestSector

; 996  : 				return FALSE;

  010f9	33 c0		 xor	 eax, eax
  010fb	e9 8b 02 00 00	 jmp	 $LN149@TestSector
$LN12@TestSector:

; 997  : 			nTestsPerformed++;

  01100	8b 8d 90 f7 ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  01106	83 c1 01	 add	 ecx, 1
  01109	89 8d 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
  0110f	e9 17 02 00 00	 jmp	 $LN23@TestSector
$LN13@TestSector:

; 998  : 		}
; 999  : 		else if (strcmp (name, "Serpent-AES") == 0)

  01114	c7 85 60 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv920[ebp], OFFSET ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  0111e	8d 55 a0	 lea	 edx, DWORD PTR _name$[ebp]
  01121	89 95 5c f6 ff
	ff		 mov	 DWORD PTR tv918[ebp], edx
$LL205@TestSector:
  01127	8b 85 5c f6 ff
	ff		 mov	 eax, DWORD PTR tv918[ebp]
  0112d	8a 08		 mov	 cl, BYTE PTR [eax]
  0112f	88 8d 5b f6 ff
	ff		 mov	 BYTE PTR tv923[ebp], cl
  01135	8b 95 60 f6 ff
	ff		 mov	 edx, DWORD PTR tv920[ebp]
  0113b	3a 0a		 cmp	 cl, BYTE PTR [edx]
  0113d	75 46		 jne	 SHORT $LN206@TestSector
  0113f	80 bd 5b f6 ff
	ff 00		 cmp	 BYTE PTR tv923[ebp], 0
  01146	74 31		 je	 SHORT $LN207@TestSector
  01148	8b 85 5c f6 ff
	ff		 mov	 eax, DWORD PTR tv918[ebp]
  0114e	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  01151	88 8d 5a f6 ff
	ff		 mov	 BYTE PTR tv930[ebp], cl
  01157	8b 95 60 f6 ff
	ff		 mov	 edx, DWORD PTR tv920[ebp]
  0115d	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  01160	75 23		 jne	 SHORT $LN206@TestSector
  01162	83 85 5c f6 ff
	ff 02		 add	 DWORD PTR tv918[ebp], 2
  01169	83 85 60 f6 ff
	ff 02		 add	 DWORD PTR tv920[ebp], 2
  01170	80 bd 5a f6 ff
	ff 00		 cmp	 BYTE PTR tv930[ebp], 0
  01177	75 ae		 jne	 SHORT $LL205@TestSector
$LN207@TestSector:
  01179	c7 85 54 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv935[ebp], 0
  01183	eb 0b		 jmp	 SHORT $LN208@TestSector
$LN206@TestSector:
  01185	1b c0		 sbb	 eax, eax
  01187	83 d8 ff	 sbb	 eax, -1
  0118a	89 85 54 f6 ff
	ff		 mov	 DWORD PTR tv935[ebp], eax
$LN208@TestSector:
  01190	8b 8d 54 f6 ff
	ff		 mov	 ecx, DWORD PTR tv935[ebp]
  01196	89 8d 50 f6 ff
	ff		 mov	 DWORD PTR tv380[ebp], ecx
  0119c	83 bd 50 f6 ff
	ff 00		 cmp	 DWORD PTR tv380[ebp], 0
  011a3	75 24		 jne	 SHORT $LN10@TestSector

; 1000 : 		{
; 1001 : 			if (crc != 0x42f919ad)

  011a5	81 7d f8 ad 19
	f9 42		 cmp	 DWORD PTR _crc$[ebp], 1123621293 ; 42f919adH
  011ac	74 07		 je	 SHORT $LN9@TestSector

; 1002 : 				return FALSE;

  011ae	33 c0		 xor	 eax, eax
  011b0	e9 d6 01 00 00	 jmp	 $LN149@TestSector
$LN9@TestSector:

; 1003 : 			nTestsPerformed++;

  011b5	8b 95 90 f7 ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  011bb	83 c2 01	 add	 edx, 1
  011be	89 95 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx
  011c4	e9 62 01 00 00	 jmp	 $LN23@TestSector
$LN10@TestSector:

; 1004 : 		}
; 1005 : 		else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  011c9	c7 85 4c f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv944[ebp], OFFSET ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  011d3	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  011d6	89 85 48 f6 ff
	ff		 mov	 DWORD PTR tv942[ebp], eax
$LL209@TestSector:
  011dc	8b 8d 48 f6 ff
	ff		 mov	 ecx, DWORD PTR tv942[ebp]
  011e2	8a 11		 mov	 dl, BYTE PTR [ecx]
  011e4	88 95 47 f6 ff
	ff		 mov	 BYTE PTR tv947[ebp], dl
  011ea	8b 85 4c f6 ff
	ff		 mov	 eax, DWORD PTR tv944[ebp]
  011f0	3a 10		 cmp	 dl, BYTE PTR [eax]
  011f2	75 46		 jne	 SHORT $LN210@TestSector
  011f4	80 bd 47 f6 ff
	ff 00		 cmp	 BYTE PTR tv947[ebp], 0
  011fb	74 31		 je	 SHORT $LN211@TestSector
  011fd	8b 8d 48 f6 ff
	ff		 mov	 ecx, DWORD PTR tv942[ebp]
  01203	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  01206	88 95 46 f6 ff
	ff		 mov	 BYTE PTR tv954[ebp], dl
  0120c	8b 85 4c f6 ff
	ff		 mov	 eax, DWORD PTR tv944[ebp]
  01212	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  01215	75 23		 jne	 SHORT $LN210@TestSector
  01217	83 85 48 f6 ff
	ff 02		 add	 DWORD PTR tv942[ebp], 2
  0121e	83 85 4c f6 ff
	ff 02		 add	 DWORD PTR tv944[ebp], 2
  01225	80 bd 46 f6 ff
	ff 00		 cmp	 BYTE PTR tv954[ebp], 0
  0122c	75 ae		 jne	 SHORT $LL209@TestSector
$LN211@TestSector:
  0122e	c7 85 40 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv959[ebp], 0
  01238	eb 0b		 jmp	 SHORT $LN212@TestSector
$LN210@TestSector:
  0123a	1b c9		 sbb	 ecx, ecx
  0123c	83 d9 ff	 sbb	 ecx, -1
  0123f	89 8d 40 f6 ff
	ff		 mov	 DWORD PTR tv959[ebp], ecx
$LN212@TestSector:
  01245	8b 95 40 f6 ff
	ff		 mov	 edx, DWORD PTR tv959[ebp]
  0124b	89 95 3c f6 ff
	ff		 mov	 DWORD PTR tv387[ebp], edx
  01251	83 bd 3c f6 ff
	ff 00		 cmp	 DWORD PTR tv387[ebp], 0
  01258	75 24		 jne	 SHORT $LN7@TestSector

; 1006 : 		{
; 1007 : 			if (crc != 0x208d5c58)

  0125a	81 7d f8 58 5c
	8d 20		 cmp	 DWORD PTR _crc$[ebp], 546135128 ; 208d5c58H
  01261	74 07		 je	 SHORT $LN6@TestSector

; 1008 : 				return FALSE;

  01263	33 c0		 xor	 eax, eax
  01265	e9 21 01 00 00	 jmp	 $LN149@TestSector
$LN6@TestSector:

; 1009 : 			nTestsPerformed++;

  0126a	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  01270	83 c0 01	 add	 eax, 1
  01273	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
  01279	e9 ad 00 00 00	 jmp	 $LN23@TestSector
$LN7@TestSector:

; 1010 : 		}
; 1011 : 		else if (strcmp (name, "Twofish-Serpent") == 0)

  0127e	c7 85 38 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv968[ebp], OFFSET ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  01288	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  0128b	89 8d 34 f6 ff
	ff		 mov	 DWORD PTR tv966[ebp], ecx
$LL213@TestSector:
  01291	8b 95 34 f6 ff
	ff		 mov	 edx, DWORD PTR tv966[ebp]
  01297	8a 02		 mov	 al, BYTE PTR [edx]
  01299	88 85 33 f6 ff
	ff		 mov	 BYTE PTR tv971[ebp], al
  0129f	8b 8d 38 f6 ff
	ff		 mov	 ecx, DWORD PTR tv968[ebp]
  012a5	3a 01		 cmp	 al, BYTE PTR [ecx]
  012a7	75 46		 jne	 SHORT $LN214@TestSector
  012a9	80 bd 33 f6 ff
	ff 00		 cmp	 BYTE PTR tv971[ebp], 0
  012b0	74 31		 je	 SHORT $LN215@TestSector
  012b2	8b 95 34 f6 ff
	ff		 mov	 edx, DWORD PTR tv966[ebp]
  012b8	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  012bb	88 85 32 f6 ff
	ff		 mov	 BYTE PTR tv978[ebp], al
  012c1	8b 8d 38 f6 ff
	ff		 mov	 ecx, DWORD PTR tv968[ebp]
  012c7	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  012ca	75 23		 jne	 SHORT $LN214@TestSector
  012cc	83 85 34 f6 ff
	ff 02		 add	 DWORD PTR tv966[ebp], 2
  012d3	83 85 38 f6 ff
	ff 02		 add	 DWORD PTR tv968[ebp], 2
  012da	80 bd 32 f6 ff
	ff 00		 cmp	 BYTE PTR tv978[ebp], 0
  012e1	75 ae		 jne	 SHORT $LL213@TestSector
$LN215@TestSector:
  012e3	c7 85 2c f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv983[ebp], 0
  012ed	eb 0b		 jmp	 SHORT $LN216@TestSector
$LN214@TestSector:
  012ef	1b d2		 sbb	 edx, edx
  012f1	83 da ff	 sbb	 edx, -1
  012f4	89 95 2c f6 ff
	ff		 mov	 DWORD PTR tv983[ebp], edx
$LN216@TestSector:
  012fa	8b 85 2c f6 ff
	ff		 mov	 eax, DWORD PTR tv983[ebp]
  01300	89 85 28 f6 ff
	ff		 mov	 DWORD PTR tv394[ebp], eax
  01306	83 bd 28 f6 ff
	ff 00		 cmp	 DWORD PTR tv394[ebp], 0
  0130d	75 1c		 jne	 SHORT $LN23@TestSector

; 1012 : 		{
; 1013 : 			if (crc != 0xbe78cec1)

  0130f	81 7d f8 c1 ce
	78 be		 cmp	 DWORD PTR _crc$[ebp], -1099379007 ; be78cec1H
  01316	74 04		 je	 SHORT $LN3@TestSector

; 1014 : 				return FALSE;

  01318	33 c0		 xor	 eax, eax
  0131a	eb 6f		 jmp	 SHORT $LN149@TestSector
$LN3@TestSector:

; 1015 : 			nTestsPerformed++;

  0131c	8b 8d 90 f7 ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  01322	83 c1 01	 add	 ecx, 1
  01325	89 8d 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
$LN23@TestSector:

; 1016 : 		}
; 1017 : 
; 1018 : 		if (crc == 0x9f5edd58)

  0132b	81 7d f8 58 dd
	5e 9f		 cmp	 DWORD PTR _crc$[ebp], -1621172904 ; 9f5edd58H
  01332	75 04		 jne	 SHORT $LN2@TestSector

; 1019 : 			return FALSE;

  01334	33 c0		 xor	 eax, eax
  01336	eb 53		 jmp	 SHORT $LN149@TestSector
$LN2@TestSector:

; 1020 : 
; 1021 : 		DecryptBuffer (buf, sizeof (buf), ci);

  01338	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  0133b	52		 push	 edx
  0133c	6a 00		 push	 0
  0133e	68 00 08 00 00	 push	 2048			; 00000800H
  01343	8d 85 98 f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  01349	50		 push	 eax
  0134a	e8 00 00 00 00	 call	 _DecryptBuffer@16

; 1022 : 
; 1023 : 		if (GetCrc32 (buf, sizeof (buf)) != 0x9f5edd58)

  0134f	68 00 08 00 00	 push	 2048			; 00000800H
  01354	8d 8d 98 f7 ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  0135a	51		 push	 ecx
  0135b	e8 00 00 00 00	 call	 _GetCrc32@8
  01360	3d 58 dd 5e 9f	 cmp	 eax, -1621172904	; 9f5edd58H
  01365	74 04		 je	 SHORT $LN1@TestSector

; 1024 : 			return FALSE;

  01367	33 c0		 xor	 eax, eax
  01369	eb 20		 jmp	 SHORT $LN149@TestSector
$LN1@TestSector:

; 1025 : 
; 1026 : 		nTestsPerformed++;

  0136b	8b 95 90 f7 ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  01371	83 c2 01	 add	 edx, 1
  01374	89 95 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx

; 1027 : 	}

  0137a	e9 1b f9 ff ff	 jmp	 $LN33@TestSector
$LN32@TestSector:

; 1028 : 
; 1029 : 	return (nTestsPerformed == 80);

  0137f	33 c0		 xor	 eax, eax
  01381	83 bd 90 f7 ff
	ff 50		 cmp	 DWORD PTR _nTestsPerformed$[ebp], 80 ; 00000050H
  01388	0f 94 c0	 sete	 al
$LN149@TestSector:

; 1030 : }

  0138b	5f		 pop	 edi
  0138c	5e		 pop	 esi
  0138d	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01390	33 cd		 xor	 ecx, ebp
  01392	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01397	8b e5		 mov	 esp, ebp
  01399	5d		 pop	 ebp
  0139a	c2 04 00	 ret	 4
  0139d	8d 49 00	 npad	 3
$LN217@TestSector:
  013a0	00 00 00 00	 DD	 $LN128@TestSector
  013a4	00 00 00 00	 DD	 $LN126@TestSector
  013a8	00 00 00 00	 DD	 $LN124@TestSector
  013ac	00 00 00 00	 DD	 $LN122@TestSector
$LN218@TestSector:
  013b0	00 00 00 00	 DD	 $LN116@TestSector
  013b4	00 00 00 00	 DD	 $LN114@TestSector
  013b8	00 00 00 00	 DD	 $LN112@TestSector
  013bc	00 00 00 00	 DD	 $LN110@TestSector
$LN219@TestSector:
  013c0	00 00 00 00	 DD	 $LN104@TestSector
  013c4	00 00 00 00	 DD	 $LN102@TestSector
  013c8	00 00 00 00	 DD	 $LN100@TestSector
  013cc	00 00 00 00	 DD	 $LN98@TestSector
$LN220@TestSector:
  013d0	00 00 00 00	 DD	 $LN92@TestSector
  013d4	00 00 00 00	 DD	 $LN90@TestSector
  013d8	00 00 00 00	 DD	 $LN88@TestSector
  013dc	00 00 00 00	 DD	 $LN86@TestSector
$LN221@TestSector:
  013e0	00 00 00 00	 DD	 $LN80@TestSector
  013e4	00 00 00 00	 DD	 $LN78@TestSector
  013e8	00 00 00 00	 DD	 $LN76@TestSector
  013ec	00 00 00 00	 DD	 $LN74@TestSector
$LN222@TestSector:
  013f0	00 00 00 00	 DD	 $LN68@TestSector
  013f4	00 00 00 00	 DD	 $LN66@TestSector
  013f8	00 00 00 00	 DD	 $LN64@TestSector
  013fc	00 00 00 00	 DD	 $LN62@TestSector
$LN223@TestSector:
  01400	00 00 00 00	 DD	 $LN56@TestSector
  01404	00 00 00 00	 DD	 $LN54@TestSector
  01408	00 00 00 00	 DD	 $LN52@TestSector
  0140c	00 00 00 00	 DD	 $LN50@TestSector
$LN224@TestSector:
  01410	00 00 00 00	 DD	 $LN44@TestSector
  01414	00 00 00 00	 DD	 $LN42@TestSector
  01418	00 00 00 00	 DD	 $LN40@TestSector
  0141c	00 00 00 00	 DD	 $LN38@TestSector
_TestSectorBufEncryption@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	__$ArrayPad$
EXTRN	_EAGetNextMode@8:PROC
EXTRN	_EAGetFirstMode@4:PROC
EXTRN	_CipherGetBlockSize@4:PROC
EXTRN	_EAGetFirstCipher@4:PROC
;	COMDAT ??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@ DB 'AES-Blowfish-'
	DB	'Serpent', 00H				;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@ DB 'AES-Blowfish', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@ DB 'Triple DES', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@ DB 'CAST5', 00H	;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@ DB 'Blowfish', 00H ;  ?? ::FNODOBFM::`string'
; Function compile flags: /Odtp
text$s	ENDS
;	COMDAT _TestLegacySectorBufEncryption@4
_TEXT	SEGMENT
tv434 = -1904						; size = 4
tv1424 = -1900						; size = 4
tv1419 = -1894						; size = 1
tv1412 = -1893						; size = 1
tv1407 = -1892						; size = 4
tv1409 = -1888						; size = 4
tv427 = -1884						; size = 4
tv1400 = -1880						; size = 4
tv1395 = -1874						; size = 1
tv1388 = -1873						; size = 1
tv1383 = -1872						; size = 4
tv1385 = -1868						; size = 4
tv420 = -1864						; size = 4
tv1376 = -1860						; size = 4
tv1371 = -1854						; size = 1
tv1364 = -1853						; size = 1
tv1359 = -1852						; size = 4
tv1361 = -1848						; size = 4
tv413 = -1844						; size = 4
tv1352 = -1840						; size = 4
tv1347 = -1834						; size = 1
tv1340 = -1833						; size = 1
tv1335 = -1832						; size = 4
tv1337 = -1828						; size = 4
tv406 = -1824						; size = 4
tv1328 = -1820						; size = 4
tv1323 = -1814						; size = 1
tv1316 = -1813						; size = 1
tv1311 = -1812						; size = 4
tv1313 = -1808						; size = 4
tv399 = -1804						; size = 4
tv1304 = -1800						; size = 4
tv1299 = -1794						; size = 1
tv1292 = -1793						; size = 1
tv1287 = -1792						; size = 4
tv1289 = -1788						; size = 4
tv392 = -1784						; size = 4
tv1280 = -1780						; size = 4
tv1275 = -1774						; size = 1
tv1268 = -1773						; size = 1
tv1263 = -1772						; size = 4
tv1265 = -1768						; size = 4
tv385 = -1764						; size = 4
tv1256 = -1760						; size = 4
tv1251 = -1754						; size = 1
tv1244 = -1753						; size = 1
tv1239 = -1752						; size = 4
tv1241 = -1748						; size = 4
tv378 = -1744						; size = 4
tv1232 = -1740						; size = 4
tv1227 = -1734						; size = 1
tv1220 = -1733						; size = 1
tv1215 = -1732						; size = 4
tv1217 = -1728						; size = 4
tv371 = -1724						; size = 4
tv1208 = -1720						; size = 4
tv1203 = -1714						; size = 1
tv1196 = -1713						; size = 1
tv1191 = -1712						; size = 4
tv1193 = -1708						; size = 4
tv364 = -1704						; size = 4
tv1184 = -1700						; size = 4
tv1179 = -1694						; size = 1
tv1172 = -1693						; size = 1
tv1167 = -1692						; size = 4
tv1169 = -1688						; size = 4
tv357 = -1684						; size = 4
tv1160 = -1680						; size = 4
tv1155 = -1674						; size = 1
tv1148 = -1673						; size = 1
tv1143 = -1672						; size = 4
tv1145 = -1668						; size = 4
tv350 = -1664						; size = 4
tv1136 = -1660						; size = 4
tv1131 = -1654						; size = 1
tv1124 = -1653						; size = 1
tv1119 = -1652						; size = 4
tv1121 = -1648						; size = 4
tv343 = -1644						; size = 4
tv1112 = -1640						; size = 4
tv1107 = -1634						; size = 1
tv1100 = -1633						; size = 1
tv1095 = -1632						; size = 4
tv1097 = -1628						; size = 4
tv336 = -1624						; size = 4
tv1088 = -1620						; size = 4
tv1083 = -1614						; size = 1
tv1076 = -1613						; size = 1
tv1071 = -1612						; size = 4
tv1073 = -1608						; size = 4
tv332 = -1604						; size = 4
tv308 = -1600						; size = 4
tv1047 = -1596						; size = 4
tv1042 = -1590						; size = 1
tv1035 = -1589						; size = 1
tv1030 = -1588						; size = 4
tv1032 = -1584						; size = 4
tv301 = -1580						; size = 4
tv1023 = -1576						; size = 4
tv1018 = -1570						; size = 1
tv1011 = -1569						; size = 1
tv1006 = -1568						; size = 4
tv1008 = -1564						; size = 4
tv294 = -1560						; size = 4
tv999 = -1556						; size = 4
tv994 = -1550						; size = 1
tv987 = -1549						; size = 1
tv982 = -1548						; size = 4
tv984 = -1544						; size = 4
tv287 = -1540						; size = 4
tv975 = -1536						; size = 4
tv970 = -1530						; size = 1
tv963 = -1529						; size = 1
tv958 = -1528						; size = 4
tv960 = -1524						; size = 4
tv280 = -1520						; size = 4
tv951 = -1516						; size = 4
tv946 = -1510						; size = 1
tv939 = -1509						; size = 1
tv934 = -1508						; size = 4
tv936 = -1504						; size = 4
tv273 = -1500						; size = 4
tv927 = -1496						; size = 4
tv922 = -1490						; size = 1
tv915 = -1489						; size = 1
tv910 = -1488						; size = 4
tv912 = -1484						; size = 4
tv266 = -1480						; size = 4
tv903 = -1476						; size = 4
tv898 = -1470						; size = 1
tv891 = -1469						; size = 1
tv886 = -1468						; size = 4
tv888 = -1464						; size = 4
tv259 = -1460						; size = 4
tv879 = -1456						; size = 4
tv874 = -1450						; size = 1
tv867 = -1449						; size = 1
tv862 = -1448						; size = 4
tv864 = -1444						; size = 4
tv252 = -1440						; size = 4
tv855 = -1436						; size = 4
tv850 = -1430						; size = 1
tv843 = -1429						; size = 1
tv838 = -1428						; size = 4
tv840 = -1424						; size = 4
tv245 = -1420						; size = 4
tv831 = -1416						; size = 4
tv826 = -1410						; size = 1
tv819 = -1409						; size = 1
tv814 = -1408						; size = 4
tv816 = -1404						; size = 4
tv238 = -1400						; size = 4
tv807 = -1396						; size = 4
tv802 = -1390						; size = 1
tv795 = -1389						; size = 1
tv790 = -1388						; size = 4
tv792 = -1384						; size = 4
tv231 = -1380						; size = 4
tv783 = -1376						; size = 4
tv778 = -1370						; size = 1
tv771 = -1369						; size = 1
tv766 = -1368						; size = 4
tv768 = -1364						; size = 4
tv224 = -1360						; size = 4
tv759 = -1356						; size = 4
tv754 = -1350						; size = 1
tv747 = -1349						; size = 1
tv742 = -1348						; size = 4
tv744 = -1344						; size = 4
tv217 = -1340						; size = 4
tv735 = -1336						; size = 4
tv730 = -1330						; size = 1
tv723 = -1329						; size = 1
tv718 = -1328						; size = 4
tv720 = -1324						; size = 4
tv210 = -1320						; size = 4
tv711 = -1316						; size = 4
tv706 = -1310						; size = 1
tv699 = -1309						; size = 1
tv694 = -1308						; size = 4
tv696 = -1304						; size = 4
tv203 = -1300						; size = 4
tv687 = -1296						; size = 4
tv682 = -1290						; size = 1
tv675 = -1289						; size = 1
tv670 = -1288						; size = 4
tv672 = -1284						; size = 4
tv196 = -1280						; size = 4
tv663 = -1276						; size = 4
tv658 = -1270						; size = 1
tv651 = -1269						; size = 1
tv646 = -1268						; size = 4
tv648 = -1264						; size = 4
tv189 = -1260						; size = 4
tv639 = -1256						; size = 4
tv634 = -1250						; size = 1
tv627 = -1249						; size = 1
tv622 = -1248						; size = 4
tv624 = -1244						; size = 4
tv182 = -1240						; size = 4
tv615 = -1236						; size = 4
tv610 = -1230						; size = 1
tv603 = -1229						; size = 1
tv598 = -1228						; size = 4
tv600 = -1224						; size = 4
tv175 = -1220						; size = 4
tv591 = -1216						; size = 4
tv586 = -1210						; size = 1
tv579 = -1209						; size = 1
tv574 = -1208						; size = 4
tv576 = -1204						; size = 4
tv168 = -1200						; size = 4
tv567 = -1196						; size = 4
tv562 = -1190						; size = 1
tv555 = -1189						; size = 1
tv550 = -1188						; size = 4
tv552 = -1184						; size = 4
tv161 = -1180						; size = 4
tv543 = -1176						; size = 4
tv538 = -1170						; size = 1
tv531 = -1169						; size = 1
tv526 = -1168						; size = 4
tv528 = -1164						; size = 4
tv154 = -1160						; size = 4
tv519 = -1156						; size = 4
tv514 = -1150						; size = 1
tv507 = -1149						; size = 1
tv502 = -1148						; size = 4
tv504 = -1144						; size = 4
tv150 = -1140						; size = 4
_blockSize$ = -1136					; size = 4
_lrw64InitDone$ = -1132					; size = 4
_nTestsPerformed$ = -1128				; size = 4
_nbrUnits$ = -1124					; size = 4
_buf$ = -1120						; size = 1024
_name$ = -96						; size = 64
__$ArrayPad$ = -28					; size = 4
_unitNo$ = -24						; size = 8
_lrw128InitDone$ = -12					; size = 4
_i$ = -8						; size = 4
_crc$ = -4						; size = 4
_ci$ = 8						; size = 4
_TestLegacySectorBufEncryption@4 PROC			; COMDAT

; 1034 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 70 07 00
	00		 sub	 esp, 1904		; 00000770H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1035 : 	unsigned char buf [ENCRYPTION_DATA_UNIT_SIZE * 2];
; 1036 : 	unsigned int i;
; 1037 : 	char name[64];
; 1038 : 	unsigned __int32 crc;
; 1039 : 	UINT64_STRUCT unitNo;
; 1040 : 	uint32 nbrUnits;
; 1041 : 	int blockSize;
; 1042 : 	BOOL lrw64InitDone = FALSE;

  00015	c7 85 94 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _lrw64InitDone$[ebp], 0

; 1043 : 	BOOL lrw128InitDone = FALSE;

  0001f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _lrw128InitDone$[ebp], 0

; 1044 : 	int nTestsPerformed = 0;

  00026	c7 85 98 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _nTestsPerformed$[ebp], 0

; 1045 : 
; 1046 : 	unitNo.Value = 0x0234567890ABCDEFull;

  00030	c7 45 e8 ef cd
	ab 90		 mov	 DWORD PTR _unitNo$[ebp], -1867788817 ; 90abcdefH
  00037	c7 45 ec 78 56
	34 02		 mov	 DWORD PTR _unitNo$[ebp+4], 36984440 ; 02345678H

; 1047 : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;

  0003e	c7 85 9c fb ff
	ff 02 00 00 00	 mov	 DWORD PTR _nbrUnits$[ebp], 2

; 1048 : 
; 1049 : 	for (i = 0; i < sizeof (buf); i++)

  00048	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0004f	eb 09		 jmp	 SHORT $LN143@TestLegacy
$LN142@TestLegacy:
  00051	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00054	83 c0 01	 add	 eax, 1
  00057	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN143@TestLegacy:
  0005a	81 7d f8 00 04
	00 00		 cmp	 DWORD PTR _i$[ebp], 1024 ; 00000400H
  00061	73 0f		 jae	 SHORT $LN141@TestLegacy

; 1050 : 		buf[i] = (unsigned char) i;

  00063	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00066	8a 55 f8	 mov	 dl, BYTE PTR _i$[ebp]
  00069	88 94 0d a0 fb
	ff ff		 mov	 BYTE PTR _buf$[ebp+ecx], dl
  00070	eb df		 jmp	 SHORT $LN142@TestLegacy
$LN141@TestLegacy:

; 1051 : 
; 1052 : 	for (i = 0; i < sizeof (ci->k2); i++)

  00072	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00079	eb 09		 jmp	 SHORT $LN140@TestLegacy
$LN139@TestLegacy:
  0007b	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0007e	83 c0 01	 add	 eax, 1
  00081	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN140@TestLegacy:
  00084	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  0008b	73 11		 jae	 SHORT $LN138@TestLegacy

; 1053 : 		ci->k2[i] = (unsigned char) i;

  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00090	03 4d f8	 add	 ecx, DWORD PTR _i$[ebp]
  00093	8a 55 f8	 mov	 dl, BYTE PTR _i$[ebp]
  00096	88 91 a8 42 00
	00		 mov	 BYTE PTR [ecx+17064], dl
  0009c	eb dd		 jmp	 SHORT $LN139@TestLegacy
$LN138@TestLegacy:

; 1054 : 
; 1055 : 	// Test all EAs
; 1056 : 	for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  0009e	e8 00 00 00 00	 call	 _EAGetFirst@0
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  000a6	89 01		 mov	 DWORD PTR [ecx], eax
  000a8	eb 10		 jmp	 SHORT $LN137@TestLegacy
$LN136@TestLegacy:
  000aa	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  000ad	8b 02		 mov	 eax, DWORD PTR [edx]
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 _EAGetNext@4
  000b5	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  000b8	89 01		 mov	 DWORD PTR [ecx], eax
$LN137@TestLegacy:
  000ba	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  000bd	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000c0	0f 84 36 1d 00
	00		 je	 $LN135@TestLegacy

; 1057 : 	{
; 1058 : 		EAGetName (name, ci->ea);

  000c6	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  000c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cb	51		 push	 ecx
  000cc	8d 55 a0	 lea	 edx, DWORD PTR _name$[ebp]
  000cf	52		 push	 edx
  000d0	e8 00 00 00 00	 call	 _EAGetName@8

; 1059 : 		blockSize = CipherGetBlockSize (EAGetFirstCipher (ci->ea));

  000d5	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  000d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 _EAGetFirstCipher@4
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 _CipherGetBlockSize@4
  000e6	89 85 90 fb ff
	ff		 mov	 DWORD PTR _blockSize$[ebp], eax

; 1060 : 
; 1061 : 		if (EAInit (ci->ea, (unsigned char *)buf, ci->ks) == ERR_CIPHER_INIT_FAILURE)

  000ec	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  000ef	83 c2 08	 add	 edx, 8
  000f2	52		 push	 edx
  000f3	8d 85 a0 fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  000f9	50		 push	 eax
  000fa	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  000fd	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ff	52		 push	 edx
  00100	e8 00 00 00 00	 call	 _EAInit@12
  00105	83 f8 11	 cmp	 eax, 17			; 00000011H
  00108	75 07		 jne	 SHORT $LN134@TestLegacy

; 1062 : 			return FALSE;

  0010a	33 c0		 xor	 eax, eax
  0010c	e9 f7 1c 00 00	 jmp	 $LN144@TestLegacy
$LN134@TestLegacy:

; 1063 : 
; 1064 : 		// Test all deprecated modes of operation
; 1065 : 		for (ci->mode = EAGetFirstMode (ci->ea);
; 1066 : 			ci->mode != 0;
; 1067 : 			ci->mode = EAGetNextMode (ci->ea, ci->mode))

  00111	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  00114	8b 08		 mov	 ecx, DWORD PTR [eax]
  00116	51		 push	 ecx
  00117	e8 00 00 00 00	 call	 _EAGetFirstMode@4
  0011c	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  0011f	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00122	eb 18		 jmp	 SHORT $LN133@TestLegacy
$LN132@TestLegacy:
  00124	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  00127	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012a	51		 push	 ecx
  0012b	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  0012e	8b 02		 mov	 eax, DWORD PTR [edx]
  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 _EAGetNextMode@8
  00136	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00139	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN133@TestLegacy:
  0013c	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  0013f	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00143	0f 84 ae 1c 00
	00		 je	 $LN131@TestLegacy

; 1068 : 		{
; 1069 : 			// Skip modes that are not deprecated
; 1070 : 			if (ci->mode == XTS)

  00149	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  0014c	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  00150	75 02		 jne	 SHORT $LN130@TestLegacy

; 1071 : 				continue;

  00152	eb d0		 jmp	 SHORT $LN132@TestLegacy
$LN130@TestLegacy:

; 1072 : 
; 1073 : 			if (ci->mode == LRW
; 1074 : 				&& (blockSize == 8 && !lrw64InitDone || blockSize == 16 && !lrw128InitDone ))

  00154	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00157	83 79 04 02	 cmp	 DWORD PTR [ecx+4], 2
  0015b	75 5a		 jne	 SHORT $LN129@TestLegacy
  0015d	83 bd 90 fb ff
	ff 08		 cmp	 DWORD PTR _blockSize$[ebp], 8
  00164	75 09		 jne	 SHORT $LN127@TestLegacy
  00166	83 bd 94 fb ff
	ff 00		 cmp	 DWORD PTR _lrw64InitDone$[ebp], 0
  0016d	74 0f		 je	 SHORT $LN128@TestLegacy
$LN127@TestLegacy:
  0016f	83 bd 90 fb ff
	ff 10		 cmp	 DWORD PTR _blockSize$[ebp], 16 ; 00000010H
  00176	75 3f		 jne	 SHORT $LN129@TestLegacy
  00178	83 7d f4 00	 cmp	 DWORD PTR _lrw128InitDone$[ebp], 0
  0017c	75 39		 jne	 SHORT $LN129@TestLegacy
$LN128@TestLegacy:

; 1075 : 			{
; 1076 : 				if (!EAInitMode (ci))

  0017e	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00181	52		 push	 edx
  00182	e8 00 00 00 00	 call	 _EAInitMode@4
  00187	85 c0		 test	 eax, eax
  00189	75 07		 jne	 SHORT $LN126@TestLegacy

; 1077 : 					return FALSE;

  0018b	33 c0		 xor	 eax, eax
  0018d	e9 76 1c 00 00	 jmp	 $LN144@TestLegacy
$LN126@TestLegacy:

; 1078 : 
; 1079 : 				if (blockSize == 8)

  00192	83 bd 90 fb ff
	ff 08		 cmp	 DWORD PTR _blockSize$[ebp], 8
  00199	75 0c		 jne	 SHORT $LN125@TestLegacy

; 1080 : 					lrw64InitDone = TRUE;

  0019b	c7 85 94 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR _lrw64InitDone$[ebp], 1
  001a5	eb 10		 jmp	 SHORT $LN129@TestLegacy
$LN125@TestLegacy:

; 1081 : 				else if (blockSize == 16)

  001a7	83 bd 90 fb ff
	ff 10		 cmp	 DWORD PTR _blockSize$[ebp], 16 ; 00000010H
  001ae	75 07		 jne	 SHORT $LN129@TestLegacy

; 1082 : 					lrw128InitDone = TRUE;

  001b0	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _lrw128InitDone$[ebp], 1
$LN129@TestLegacy:

; 1083 : 			}
; 1084 : 
; 1085 : 			EncryptDataUnits (buf, &unitNo, nbrUnits, ci);

  001b7	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  001ba	50		 push	 eax
  001bb	8b 8d 9c fb ff
	ff		 mov	 ecx, DWORD PTR _nbrUnits$[ebp]
  001c1	51		 push	 ecx
  001c2	8d 55 e8	 lea	 edx, DWORD PTR _unitNo$[ebp]
  001c5	52		 push	 edx
  001c6	8d 85 a0 fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  001cc	50		 push	 eax
  001cd	e8 00 00 00 00	 call	 _EncryptDataUnits@16

; 1086 : 			crc = GetCrc32 (buf, sizeof (buf));

  001d2	68 00 04 00 00	 push	 1024			; 00000400H
  001d7	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  001dd	51		 push	 ecx
  001de	e8 00 00 00 00	 call	 _GetCrc32@8
  001e3	89 45 fc	 mov	 DWORD PTR _crc$[ebp], eax

; 1087 : 
; 1088 : 			switch (ci->mode)

  001e6	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  001e9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001ec	89 85 8c fb ff
	ff		 mov	 DWORD PTR tv150[ebp], eax
  001f2	83 bd 8c fb ff
	ff 02		 cmp	 DWORD PTR tv150[ebp], 2
  001f9	74 1f		 je	 SHORT $LN120@TestLegacy
  001fb	83 bd 8c fb ff
	ff 02		 cmp	 DWORD PTR tv150[ebp], 2
  00202	0f 8e 50 10 00
	00		 jle	 $LN121@TestLegacy
  00208	83 bd 8c fb ff
	ff 05		 cmp	 DWORD PTR tv150[ebp], 5
  0020f	0f 8e cc 07 00
	00		 jle	 $LN87@TestLegacy
  00215	e9 3e 10 00 00	 jmp	 $LN121@TestLegacy
$LN120@TestLegacy:

; 1089 : 			{
; 1090 : 			case LRW:		// Deprecated/legacy
; 1091 : 				if (strcmp (name, "AES") == 0)

  0021a	c7 85 88 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv504[ebp], OFFSET ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  00224	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  00227	89 8d 84 fb ff
	ff		 mov	 DWORD PTR tv502[ebp], ecx
$LL146@TestLegacy:
  0022d	8b 95 84 fb ff
	ff		 mov	 edx, DWORD PTR tv502[ebp]
  00233	8a 02		 mov	 al, BYTE PTR [edx]
  00235	88 85 83 fb ff
	ff		 mov	 BYTE PTR tv507[ebp], al
  0023b	8b 8d 88 fb ff
	ff		 mov	 ecx, DWORD PTR tv504[ebp]
  00241	3a 01		 cmp	 al, BYTE PTR [ecx]
  00243	75 46		 jne	 SHORT $LN147@TestLegacy
  00245	80 bd 83 fb ff
	ff 00		 cmp	 BYTE PTR tv507[ebp], 0
  0024c	74 31		 je	 SHORT $LN148@TestLegacy
  0024e	8b 95 84 fb ff
	ff		 mov	 edx, DWORD PTR tv502[ebp]
  00254	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00257	88 85 82 fb ff
	ff		 mov	 BYTE PTR tv514[ebp], al
  0025d	8b 8d 88 fb ff
	ff		 mov	 ecx, DWORD PTR tv504[ebp]
  00263	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00266	75 23		 jne	 SHORT $LN147@TestLegacy
  00268	83 85 84 fb ff
	ff 02		 add	 DWORD PTR tv502[ebp], 2
  0026f	83 85 88 fb ff
	ff 02		 add	 DWORD PTR tv504[ebp], 2
  00276	80 bd 82 fb ff
	ff 00		 cmp	 BYTE PTR tv514[ebp], 0
  0027d	75 ae		 jne	 SHORT $LL146@TestLegacy
$LN148@TestLegacy:
  0027f	c7 85 7c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv519[ebp], 0
  00289	eb 0b		 jmp	 SHORT $LN149@TestLegacy
$LN147@TestLegacy:
  0028b	1b d2		 sbb	 edx, edx
  0028d	83 da ff	 sbb	 edx, -1
  00290	89 95 7c fb ff
	ff		 mov	 DWORD PTR tv519[ebp], edx
$LN149@TestLegacy:
  00296	8b 85 7c fb ff
	ff		 mov	 eax, DWORD PTR tv519[ebp]
  0029c	89 85 78 fb ff
	ff		 mov	 DWORD PTR tv154[ebp], eax
  002a2	83 bd 78 fb ff
	ff 00		 cmp	 DWORD PTR tv154[ebp], 0
  002a9	75 24		 jne	 SHORT $LN119@TestLegacy

; 1092 : 				{
; 1093 : 					if (crc != 0x5237acf9)

  002ab	81 7d fc f9 ac
	37 52		 cmp	 DWORD PTR _crc$[ebp], 1379380473 ; 5237acf9H
  002b2	74 07		 je	 SHORT $LN118@TestLegacy

; 1094 : 						return FALSE;

  002b4	33 c0		 xor	 eax, eax
  002b6	e9 4d 1b 00 00	 jmp	 $LN144@TestLegacy
$LN118@TestLegacy:

; 1095 : 					nTestsPerformed++;

  002bb	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  002c1	83 c1 01	 add	 ecx, 1
  002c4	89 8d 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
  002ca	e9 0d 07 00 00	 jmp	 $LN117@TestLegacy
$LN119@TestLegacy:

; 1096 : 				}
; 1097 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  002cf	c7 85 74 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv528[ebp], OFFSET ??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
  002d9	8d 55 a0	 lea	 edx, DWORD PTR _name$[ebp]
  002dc	89 95 70 fb ff
	ff		 mov	 DWORD PTR tv526[ebp], edx
$LL150@TestLegacy:
  002e2	8b 85 70 fb ff
	ff		 mov	 eax, DWORD PTR tv526[ebp]
  002e8	8a 08		 mov	 cl, BYTE PTR [eax]
  002ea	88 8d 6f fb ff
	ff		 mov	 BYTE PTR tv531[ebp], cl
  002f0	8b 95 74 fb ff
	ff		 mov	 edx, DWORD PTR tv528[ebp]
  002f6	3a 0a		 cmp	 cl, BYTE PTR [edx]
  002f8	75 46		 jne	 SHORT $LN151@TestLegacy
  002fa	80 bd 6f fb ff
	ff 00		 cmp	 BYTE PTR tv531[ebp], 0
  00301	74 31		 je	 SHORT $LN152@TestLegacy
  00303	8b 85 70 fb ff
	ff		 mov	 eax, DWORD PTR tv526[ebp]
  00309	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0030c	88 8d 6e fb ff
	ff		 mov	 BYTE PTR tv538[ebp], cl
  00312	8b 95 74 fb ff
	ff		 mov	 edx, DWORD PTR tv528[ebp]
  00318	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  0031b	75 23		 jne	 SHORT $LN151@TestLegacy
  0031d	83 85 70 fb ff
	ff 02		 add	 DWORD PTR tv526[ebp], 2
  00324	83 85 74 fb ff
	ff 02		 add	 DWORD PTR tv528[ebp], 2
  0032b	80 bd 6e fb ff
	ff 00		 cmp	 BYTE PTR tv538[ebp], 0
  00332	75 ae		 jne	 SHORT $LL150@TestLegacy
$LN152@TestLegacy:
  00334	c7 85 68 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv543[ebp], 0
  0033e	eb 0b		 jmp	 SHORT $LN153@TestLegacy
$LN151@TestLegacy:
  00340	1b c0		 sbb	 eax, eax
  00342	83 d8 ff	 sbb	 eax, -1
  00345	89 85 68 fb ff
	ff		 mov	 DWORD PTR tv543[ebp], eax
$LN153@TestLegacy:
  0034b	8b 8d 68 fb ff
	ff		 mov	 ecx, DWORD PTR tv543[ebp]
  00351	89 8d 64 fb ff
	ff		 mov	 DWORD PTR tv161[ebp], ecx
  00357	83 bd 64 fb ff
	ff 00		 cmp	 DWORD PTR tv161[ebp], 0
  0035e	75 24		 jne	 SHORT $LN116@TestLegacy

; 1098 : 				{
; 1099 : 					if (crc != 0xf94d5300)

  00360	81 7d fc 00 53
	4d f9		 cmp	 DWORD PTR _crc$[ebp], -112372992 ; f94d5300H
  00367	74 07		 je	 SHORT $LN115@TestLegacy

; 1100 : 						return FALSE;

  00369	33 c0		 xor	 eax, eax
  0036b	e9 98 1a 00 00	 jmp	 $LN144@TestLegacy
$LN115@TestLegacy:

; 1101 : 					nTestsPerformed++;

  00370	8b 95 98 fb ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  00376	83 c2 01	 add	 edx, 1
  00379	89 95 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx
  0037f	e9 58 06 00 00	 jmp	 $LN117@TestLegacy
$LN116@TestLegacy:

; 1102 : 				}
; 1103 : 				else if (strcmp (name, "CAST5") == 0)		// Deprecated/legacy

  00384	c7 85 60 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv552[ebp], OFFSET ??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@
  0038e	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  00391	89 85 5c fb ff
	ff		 mov	 DWORD PTR tv550[ebp], eax
$LL154@TestLegacy:
  00397	8b 8d 5c fb ff
	ff		 mov	 ecx, DWORD PTR tv550[ebp]
  0039d	8a 11		 mov	 dl, BYTE PTR [ecx]
  0039f	88 95 5b fb ff
	ff		 mov	 BYTE PTR tv555[ebp], dl
  003a5	8b 85 60 fb ff
	ff		 mov	 eax, DWORD PTR tv552[ebp]
  003ab	3a 10		 cmp	 dl, BYTE PTR [eax]
  003ad	75 46		 jne	 SHORT $LN155@TestLegacy
  003af	80 bd 5b fb ff
	ff 00		 cmp	 BYTE PTR tv555[ebp], 0
  003b6	74 31		 je	 SHORT $LN156@TestLegacy
  003b8	8b 8d 5c fb ff
	ff		 mov	 ecx, DWORD PTR tv550[ebp]
  003be	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  003c1	88 95 5a fb ff
	ff		 mov	 BYTE PTR tv562[ebp], dl
  003c7	8b 85 60 fb ff
	ff		 mov	 eax, DWORD PTR tv552[ebp]
  003cd	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  003d0	75 23		 jne	 SHORT $LN155@TestLegacy
  003d2	83 85 5c fb ff
	ff 02		 add	 DWORD PTR tv550[ebp], 2
  003d9	83 85 60 fb ff
	ff 02		 add	 DWORD PTR tv552[ebp], 2
  003e0	80 bd 5a fb ff
	ff 00		 cmp	 BYTE PTR tv562[ebp], 0
  003e7	75 ae		 jne	 SHORT $LL154@TestLegacy
$LN156@TestLegacy:
  003e9	c7 85 54 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv567[ebp], 0
  003f3	eb 0b		 jmp	 SHORT $LN157@TestLegacy
$LN155@TestLegacy:
  003f5	1b c9		 sbb	 ecx, ecx
  003f7	83 d9 ff	 sbb	 ecx, -1
  003fa	89 8d 54 fb ff
	ff		 mov	 DWORD PTR tv567[ebp], ecx
$LN157@TestLegacy:
  00400	8b 95 54 fb ff
	ff		 mov	 edx, DWORD PTR tv567[ebp]
  00406	89 95 50 fb ff
	ff		 mov	 DWORD PTR tv168[ebp], edx
  0040c	83 bd 50 fb ff
	ff 00		 cmp	 DWORD PTR tv168[ebp], 0
  00413	75 24		 jne	 SHORT $LN113@TestLegacy

; 1104 : 				{
; 1105 : 					if (crc != 0x33971e82)

  00415	81 7d fc 82 1e
	97 33		 cmp	 DWORD PTR _crc$[ebp], 865541762 ; 33971e82H
  0041c	74 07		 je	 SHORT $LN112@TestLegacy

; 1106 : 						return FALSE;

  0041e	33 c0		 xor	 eax, eax
  00420	e9 e3 19 00 00	 jmp	 $LN144@TestLegacy
$LN112@TestLegacy:

; 1107 : 					nTestsPerformed++;

  00425	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  0042b	83 c0 01	 add	 eax, 1
  0042e	89 85 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
  00434	e9 a3 05 00 00	 jmp	 $LN117@TestLegacy
$LN113@TestLegacy:

; 1108 : 				}
; 1109 : 				else if (strcmp (name, "Serpent") == 0)

  00439	c7 85 4c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv576[ebp], OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  00443	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  00446	89 8d 48 fb ff
	ff		 mov	 DWORD PTR tv574[ebp], ecx
$LL158@TestLegacy:
  0044c	8b 95 48 fb ff
	ff		 mov	 edx, DWORD PTR tv574[ebp]
  00452	8a 02		 mov	 al, BYTE PTR [edx]
  00454	88 85 47 fb ff
	ff		 mov	 BYTE PTR tv579[ebp], al
  0045a	8b 8d 4c fb ff
	ff		 mov	 ecx, DWORD PTR tv576[ebp]
  00460	3a 01		 cmp	 al, BYTE PTR [ecx]
  00462	75 46		 jne	 SHORT $LN159@TestLegacy
  00464	80 bd 47 fb ff
	ff 00		 cmp	 BYTE PTR tv579[ebp], 0
  0046b	74 31		 je	 SHORT $LN160@TestLegacy
  0046d	8b 95 48 fb ff
	ff		 mov	 edx, DWORD PTR tv574[ebp]
  00473	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00476	88 85 46 fb ff
	ff		 mov	 BYTE PTR tv586[ebp], al
  0047c	8b 8d 4c fb ff
	ff		 mov	 ecx, DWORD PTR tv576[ebp]
  00482	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00485	75 23		 jne	 SHORT $LN159@TestLegacy
  00487	83 85 48 fb ff
	ff 02		 add	 DWORD PTR tv574[ebp], 2
  0048e	83 85 4c fb ff
	ff 02		 add	 DWORD PTR tv576[ebp], 2
  00495	80 bd 46 fb ff
	ff 00		 cmp	 BYTE PTR tv586[ebp], 0
  0049c	75 ae		 jne	 SHORT $LL158@TestLegacy
$LN160@TestLegacy:
  0049e	c7 85 40 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv591[ebp], 0
  004a8	eb 0b		 jmp	 SHORT $LN161@TestLegacy
$LN159@TestLegacy:
  004aa	1b d2		 sbb	 edx, edx
  004ac	83 da ff	 sbb	 edx, -1
  004af	89 95 40 fb ff
	ff		 mov	 DWORD PTR tv591[ebp], edx
$LN161@TestLegacy:
  004b5	8b 85 40 fb ff
	ff		 mov	 eax, DWORD PTR tv591[ebp]
  004bb	89 85 3c fb ff
	ff		 mov	 DWORD PTR tv175[ebp], eax
  004c1	83 bd 3c fb ff
	ff 00		 cmp	 DWORD PTR tv175[ebp], 0
  004c8	75 24		 jne	 SHORT $LN110@TestLegacy

; 1110 : 				{
; 1111 : 					if (crc != 0x7fb86805)

  004ca	81 7d fc 05 68
	b8 7f		 cmp	 DWORD PTR _crc$[ebp], 2142791685 ; 7fb86805H
  004d1	74 07		 je	 SHORT $LN109@TestLegacy

; 1112 : 						return FALSE;

  004d3	33 c0		 xor	 eax, eax
  004d5	e9 2e 19 00 00	 jmp	 $LN144@TestLegacy
$LN109@TestLegacy:

; 1113 : 					nTestsPerformed++;

  004da	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  004e0	83 c1 01	 add	 ecx, 1
  004e3	89 8d 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
  004e9	e9 ee 04 00 00	 jmp	 $LN117@TestLegacy
$LN110@TestLegacy:

; 1114 : 				}
; 1115 : 				else if (strcmp (name, "Triple DES") == 0)	// Deprecated/legacy

  004ee	c7 85 38 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv600[ebp], OFFSET ??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@
  004f8	8d 55 a0	 lea	 edx, DWORD PTR _name$[ebp]
  004fb	89 95 34 fb ff
	ff		 mov	 DWORD PTR tv598[ebp], edx
$LL162@TestLegacy:
  00501	8b 85 34 fb ff
	ff		 mov	 eax, DWORD PTR tv598[ebp]
  00507	8a 08		 mov	 cl, BYTE PTR [eax]
  00509	88 8d 33 fb ff
	ff		 mov	 BYTE PTR tv603[ebp], cl
  0050f	8b 95 38 fb ff
	ff		 mov	 edx, DWORD PTR tv600[ebp]
  00515	3a 0a		 cmp	 cl, BYTE PTR [edx]
  00517	75 46		 jne	 SHORT $LN163@TestLegacy
  00519	80 bd 33 fb ff
	ff 00		 cmp	 BYTE PTR tv603[ebp], 0
  00520	74 31		 je	 SHORT $LN164@TestLegacy
  00522	8b 85 34 fb ff
	ff		 mov	 eax, DWORD PTR tv598[ebp]
  00528	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0052b	88 8d 32 fb ff
	ff		 mov	 BYTE PTR tv610[ebp], cl
  00531	8b 95 38 fb ff
	ff		 mov	 edx, DWORD PTR tv600[ebp]
  00537	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  0053a	75 23		 jne	 SHORT $LN163@TestLegacy
  0053c	83 85 34 fb ff
	ff 02		 add	 DWORD PTR tv598[ebp], 2
  00543	83 85 38 fb ff
	ff 02		 add	 DWORD PTR tv600[ebp], 2
  0054a	80 bd 32 fb ff
	ff 00		 cmp	 BYTE PTR tv610[ebp], 0
  00551	75 ae		 jne	 SHORT $LL162@TestLegacy
$LN164@TestLegacy:
  00553	c7 85 2c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv615[ebp], 0
  0055d	eb 0b		 jmp	 SHORT $LN165@TestLegacy
$LN163@TestLegacy:
  0055f	1b c0		 sbb	 eax, eax
  00561	83 d8 ff	 sbb	 eax, -1
  00564	89 85 2c fb ff
	ff		 mov	 DWORD PTR tv615[ebp], eax
$LN165@TestLegacy:
  0056a	8b 8d 2c fb ff
	ff		 mov	 ecx, DWORD PTR tv615[ebp]
  00570	89 8d 28 fb ff
	ff		 mov	 DWORD PTR tv182[ebp], ecx
  00576	83 bd 28 fb ff
	ff 00		 cmp	 DWORD PTR tv182[ebp], 0
  0057d	75 24		 jne	 SHORT $LN107@TestLegacy

; 1116 : 				{
; 1117 : 					if (crc != 0x2b20bb84)

  0057f	81 7d fc 84 bb
	20 2b		 cmp	 DWORD PTR _crc$[ebp], 723565444 ; 2b20bb84H
  00586	74 07		 je	 SHORT $LN106@TestLegacy

; 1118 : 						return FALSE;

  00588	33 c0		 xor	 eax, eax
  0058a	e9 79 18 00 00	 jmp	 $LN144@TestLegacy
$LN106@TestLegacy:

; 1119 : 					nTestsPerformed++;

  0058f	8b 95 98 fb ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  00595	83 c2 01	 add	 edx, 1
  00598	89 95 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx
  0059e	e9 39 04 00 00	 jmp	 $LN117@TestLegacy
$LN107@TestLegacy:

; 1120 : 				}
; 1121 : 				else if (strcmp (name, "Twofish") == 0)

  005a3	c7 85 24 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv624[ebp], OFFSET ??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@
  005ad	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  005b0	89 85 20 fb ff
	ff		 mov	 DWORD PTR tv622[ebp], eax
$LL166@TestLegacy:
  005b6	8b 8d 20 fb ff
	ff		 mov	 ecx, DWORD PTR tv622[ebp]
  005bc	8a 11		 mov	 dl, BYTE PTR [ecx]
  005be	88 95 1f fb ff
	ff		 mov	 BYTE PTR tv627[ebp], dl
  005c4	8b 85 24 fb ff
	ff		 mov	 eax, DWORD PTR tv624[ebp]
  005ca	3a 10		 cmp	 dl, BYTE PTR [eax]
  005cc	75 46		 jne	 SHORT $LN167@TestLegacy
  005ce	80 bd 1f fb ff
	ff 00		 cmp	 BYTE PTR tv627[ebp], 0
  005d5	74 31		 je	 SHORT $LN168@TestLegacy
  005d7	8b 8d 20 fb ff
	ff		 mov	 ecx, DWORD PTR tv622[ebp]
  005dd	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  005e0	88 95 1e fb ff
	ff		 mov	 BYTE PTR tv634[ebp], dl
  005e6	8b 85 24 fb ff
	ff		 mov	 eax, DWORD PTR tv624[ebp]
  005ec	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  005ef	75 23		 jne	 SHORT $LN167@TestLegacy
  005f1	83 85 20 fb ff
	ff 02		 add	 DWORD PTR tv622[ebp], 2
  005f8	83 85 24 fb ff
	ff 02		 add	 DWORD PTR tv624[ebp], 2
  005ff	80 bd 1e fb ff
	ff 00		 cmp	 BYTE PTR tv634[ebp], 0
  00606	75 ae		 jne	 SHORT $LL166@TestLegacy
$LN168@TestLegacy:
  00608	c7 85 18 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv639[ebp], 0
  00612	eb 0b		 jmp	 SHORT $LN169@TestLegacy
$LN167@TestLegacy:
  00614	1b c9		 sbb	 ecx, ecx
  00616	83 d9 ff	 sbb	 ecx, -1
  00619	89 8d 18 fb ff
	ff		 mov	 DWORD PTR tv639[ebp], ecx
$LN169@TestLegacy:
  0061f	8b 95 18 fb ff
	ff		 mov	 edx, DWORD PTR tv639[ebp]
  00625	89 95 14 fb ff
	ff		 mov	 DWORD PTR tv189[ebp], edx
  0062b	83 bd 14 fb ff
	ff 00		 cmp	 DWORD PTR tv189[ebp], 0
  00632	75 24		 jne	 SHORT $LN104@TestLegacy

; 1122 : 				{
; 1123 : 					if (crc != 0xa9de0f0b)

  00634	81 7d fc 0b 0f
	de a9		 cmp	 DWORD PTR _crc$[ebp], -1445064949 ; a9de0f0bH
  0063b	74 07		 je	 SHORT $LN103@TestLegacy

; 1124 : 						return FALSE;

  0063d	33 c0		 xor	 eax, eax
  0063f	e9 c4 17 00 00	 jmp	 $LN144@TestLegacy
$LN103@TestLegacy:

; 1125 : 					nTestsPerformed++;

  00644	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  0064a	83 c0 01	 add	 eax, 1
  0064d	89 85 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
  00653	e9 84 03 00 00	 jmp	 $LN117@TestLegacy
$LN104@TestLegacy:

; 1126 : 				}
; 1127 : 				else if (strcmp (name, "AES-Twofish") == 0)

  00658	c7 85 10 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv648[ebp], OFFSET ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  00662	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  00665	89 8d 0c fb ff
	ff		 mov	 DWORD PTR tv646[ebp], ecx
$LL170@TestLegacy:
  0066b	8b 95 0c fb ff
	ff		 mov	 edx, DWORD PTR tv646[ebp]
  00671	8a 02		 mov	 al, BYTE PTR [edx]
  00673	88 85 0b fb ff
	ff		 mov	 BYTE PTR tv651[ebp], al
  00679	8b 8d 10 fb ff
	ff		 mov	 ecx, DWORD PTR tv648[ebp]
  0067f	3a 01		 cmp	 al, BYTE PTR [ecx]
  00681	75 46		 jne	 SHORT $LN171@TestLegacy
  00683	80 bd 0b fb ff
	ff 00		 cmp	 BYTE PTR tv651[ebp], 0
  0068a	74 31		 je	 SHORT $LN172@TestLegacy
  0068c	8b 95 0c fb ff
	ff		 mov	 edx, DWORD PTR tv646[ebp]
  00692	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00695	88 85 0a fb ff
	ff		 mov	 BYTE PTR tv658[ebp], al
  0069b	8b 8d 10 fb ff
	ff		 mov	 ecx, DWORD PTR tv648[ebp]
  006a1	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  006a4	75 23		 jne	 SHORT $LN171@TestLegacy
  006a6	83 85 0c fb ff
	ff 02		 add	 DWORD PTR tv646[ebp], 2
  006ad	83 85 10 fb ff
	ff 02		 add	 DWORD PTR tv648[ebp], 2
  006b4	80 bd 0a fb ff
	ff 00		 cmp	 BYTE PTR tv658[ebp], 0
  006bb	75 ae		 jne	 SHORT $LL170@TestLegacy
$LN172@TestLegacy:
  006bd	c7 85 04 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv663[ebp], 0
  006c7	eb 0b		 jmp	 SHORT $LN173@TestLegacy
$LN171@TestLegacy:
  006c9	1b d2		 sbb	 edx, edx
  006cb	83 da ff	 sbb	 edx, -1
  006ce	89 95 04 fb ff
	ff		 mov	 DWORD PTR tv663[ebp], edx
$LN173@TestLegacy:
  006d4	8b 85 04 fb ff
	ff		 mov	 eax, DWORD PTR tv663[ebp]
  006da	89 85 00 fb ff
	ff		 mov	 DWORD PTR tv196[ebp], eax
  006e0	83 bd 00 fb ff
	ff 00		 cmp	 DWORD PTR tv196[ebp], 0
  006e7	75 24		 jne	 SHORT $LN101@TestLegacy

; 1128 : 				{
; 1129 : 					if (crc != 0x4ed0fd80)

  006e9	81 7d fc 80 fd
	d0 4e		 cmp	 DWORD PTR _crc$[ebp], 1322319232 ; 4ed0fd80H
  006f0	74 07		 je	 SHORT $LN100@TestLegacy

; 1130 : 						return FALSE;

  006f2	33 c0		 xor	 eax, eax
  006f4	e9 0f 17 00 00	 jmp	 $LN144@TestLegacy
$LN100@TestLegacy:

; 1131 : 					nTestsPerformed++;

  006f9	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  006ff	83 c1 01	 add	 ecx, 1
  00702	89 8d 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
  00708	e9 cf 02 00 00	 jmp	 $LN117@TestLegacy
$LN101@TestLegacy:

; 1132 : 				}
; 1133 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  0070d	c7 85 fc fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv672[ebp], OFFSET ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  00717	8d 55 a0	 lea	 edx, DWORD PTR _name$[ebp]
  0071a	89 95 f8 fa ff
	ff		 mov	 DWORD PTR tv670[ebp], edx
$LL174@TestLegacy:
  00720	8b 85 f8 fa ff
	ff		 mov	 eax, DWORD PTR tv670[ebp]
  00726	8a 08		 mov	 cl, BYTE PTR [eax]
  00728	88 8d f7 fa ff
	ff		 mov	 BYTE PTR tv675[ebp], cl
  0072e	8b 95 fc fa ff
	ff		 mov	 edx, DWORD PTR tv672[ebp]
  00734	3a 0a		 cmp	 cl, BYTE PTR [edx]
  00736	75 46		 jne	 SHORT $LN175@TestLegacy
  00738	80 bd f7 fa ff
	ff 00		 cmp	 BYTE PTR tv675[ebp], 0
  0073f	74 31		 je	 SHORT $LN176@TestLegacy
  00741	8b 85 f8 fa ff
	ff		 mov	 eax, DWORD PTR tv670[ebp]
  00747	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0074a	88 8d f6 fa ff
	ff		 mov	 BYTE PTR tv682[ebp], cl
  00750	8b 95 fc fa ff
	ff		 mov	 edx, DWORD PTR tv672[ebp]
  00756	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  00759	75 23		 jne	 SHORT $LN175@TestLegacy
  0075b	83 85 f8 fa ff
	ff 02		 add	 DWORD PTR tv670[ebp], 2
  00762	83 85 fc fa ff
	ff 02		 add	 DWORD PTR tv672[ebp], 2
  00769	80 bd f6 fa ff
	ff 00		 cmp	 BYTE PTR tv682[ebp], 0
  00770	75 ae		 jne	 SHORT $LL174@TestLegacy
$LN176@TestLegacy:
  00772	c7 85 f0 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv687[ebp], 0
  0077c	eb 0b		 jmp	 SHORT $LN177@TestLegacy
$LN175@TestLegacy:
  0077e	1b c0		 sbb	 eax, eax
  00780	83 d8 ff	 sbb	 eax, -1
  00783	89 85 f0 fa ff
	ff		 mov	 DWORD PTR tv687[ebp], eax
$LN177@TestLegacy:
  00789	8b 8d f0 fa ff
	ff		 mov	 ecx, DWORD PTR tv687[ebp]
  0078f	89 8d ec fa ff
	ff		 mov	 DWORD PTR tv203[ebp], ecx
  00795	83 bd ec fa ff
	ff 00		 cmp	 DWORD PTR tv203[ebp], 0
  0079c	75 24		 jne	 SHORT $LN98@TestLegacy

; 1134 : 				{
; 1135 : 					if (crc != 0xea04b3cf)

  0079e	81 7d fc cf b3
	04 ea		 cmp	 DWORD PTR _crc$[ebp], -368790577 ; ea04b3cfH
  007a5	74 07		 je	 SHORT $LN97@TestLegacy

; 1136 : 						return FALSE;

  007a7	33 c0		 xor	 eax, eax
  007a9	e9 5a 16 00 00	 jmp	 $LN144@TestLegacy
$LN97@TestLegacy:

; 1137 : 					nTestsPerformed++;

  007ae	8b 95 98 fb ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  007b4	83 c2 01	 add	 edx, 1
  007b7	89 95 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx
  007bd	e9 1a 02 00 00	 jmp	 $LN117@TestLegacy
$LN98@TestLegacy:

; 1138 : 				}
; 1139 : 				else if (strcmp (name, "Serpent-AES") == 0)

  007c2	c7 85 e8 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv696[ebp], OFFSET ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  007cc	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  007cf	89 85 e4 fa ff
	ff		 mov	 DWORD PTR tv694[ebp], eax
$LL178@TestLegacy:
  007d5	8b 8d e4 fa ff
	ff		 mov	 ecx, DWORD PTR tv694[ebp]
  007db	8a 11		 mov	 dl, BYTE PTR [ecx]
  007dd	88 95 e3 fa ff
	ff		 mov	 BYTE PTR tv699[ebp], dl
  007e3	8b 85 e8 fa ff
	ff		 mov	 eax, DWORD PTR tv696[ebp]
  007e9	3a 10		 cmp	 dl, BYTE PTR [eax]
  007eb	75 46		 jne	 SHORT $LN179@TestLegacy
  007ed	80 bd e3 fa ff
	ff 00		 cmp	 BYTE PTR tv699[ebp], 0
  007f4	74 31		 je	 SHORT $LN180@TestLegacy
  007f6	8b 8d e4 fa ff
	ff		 mov	 ecx, DWORD PTR tv694[ebp]
  007fc	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  007ff	88 95 e2 fa ff
	ff		 mov	 BYTE PTR tv706[ebp], dl
  00805	8b 85 e8 fa ff
	ff		 mov	 eax, DWORD PTR tv696[ebp]
  0080b	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  0080e	75 23		 jne	 SHORT $LN179@TestLegacy
  00810	83 85 e4 fa ff
	ff 02		 add	 DWORD PTR tv694[ebp], 2
  00817	83 85 e8 fa ff
	ff 02		 add	 DWORD PTR tv696[ebp], 2
  0081e	80 bd e2 fa ff
	ff 00		 cmp	 BYTE PTR tv706[ebp], 0
  00825	75 ae		 jne	 SHORT $LL178@TestLegacy
$LN180@TestLegacy:
  00827	c7 85 dc fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv711[ebp], 0
  00831	eb 0b		 jmp	 SHORT $LN181@TestLegacy
$LN179@TestLegacy:
  00833	1b c9		 sbb	 ecx, ecx
  00835	83 d9 ff	 sbb	 ecx, -1
  00838	89 8d dc fa ff
	ff		 mov	 DWORD PTR tv711[ebp], ecx
$LN181@TestLegacy:
  0083e	8b 95 dc fa ff
	ff		 mov	 edx, DWORD PTR tv711[ebp]
  00844	89 95 d8 fa ff
	ff		 mov	 DWORD PTR tv210[ebp], edx
  0084a	83 bd d8 fa ff
	ff 00		 cmp	 DWORD PTR tv210[ebp], 0
  00851	75 24		 jne	 SHORT $LN95@TestLegacy

; 1140 : 				{
; 1141 : 					if (crc != 0x0d33596a)

  00853	81 7d fc 6a 59
	33 0d		 cmp	 DWORD PTR _crc$[ebp], 221469034 ; 0d33596aH
  0085a	74 07		 je	 SHORT $LN94@TestLegacy

; 1142 : 						return FALSE;

  0085c	33 c0		 xor	 eax, eax
  0085e	e9 a5 15 00 00	 jmp	 $LN144@TestLegacy
$LN94@TestLegacy:

; 1143 : 					nTestsPerformed++;

  00863	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  00869	83 c0 01	 add	 eax, 1
  0086c	89 85 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
  00872	e9 65 01 00 00	 jmp	 $LN117@TestLegacy
$LN95@TestLegacy:

; 1144 : 				}
; 1145 : 				else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  00877	c7 85 d4 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv720[ebp], OFFSET ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  00881	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  00884	89 8d d0 fa ff
	ff		 mov	 DWORD PTR tv718[ebp], ecx
$LL182@TestLegacy:
  0088a	8b 95 d0 fa ff
	ff		 mov	 edx, DWORD PTR tv718[ebp]
  00890	8a 02		 mov	 al, BYTE PTR [edx]
  00892	88 85 cf fa ff
	ff		 mov	 BYTE PTR tv723[ebp], al
  00898	8b 8d d4 fa ff
	ff		 mov	 ecx, DWORD PTR tv720[ebp]
  0089e	3a 01		 cmp	 al, BYTE PTR [ecx]
  008a0	75 46		 jne	 SHORT $LN183@TestLegacy
  008a2	80 bd cf fa ff
	ff 00		 cmp	 BYTE PTR tv723[ebp], 0
  008a9	74 31		 je	 SHORT $LN184@TestLegacy
  008ab	8b 95 d0 fa ff
	ff		 mov	 edx, DWORD PTR tv718[ebp]
  008b1	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  008b4	88 85 ce fa ff
	ff		 mov	 BYTE PTR tv730[ebp], al
  008ba	8b 8d d4 fa ff
	ff		 mov	 ecx, DWORD PTR tv720[ebp]
  008c0	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  008c3	75 23		 jne	 SHORT $LN183@TestLegacy
  008c5	83 85 d0 fa ff
	ff 02		 add	 DWORD PTR tv718[ebp], 2
  008cc	83 85 d4 fa ff
	ff 02		 add	 DWORD PTR tv720[ebp], 2
  008d3	80 bd ce fa ff
	ff 00		 cmp	 BYTE PTR tv730[ebp], 0
  008da	75 ae		 jne	 SHORT $LL182@TestLegacy
$LN184@TestLegacy:
  008dc	c7 85 c8 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv735[ebp], 0
  008e6	eb 0b		 jmp	 SHORT $LN185@TestLegacy
$LN183@TestLegacy:
  008e8	1b d2		 sbb	 edx, edx
  008ea	83 da ff	 sbb	 edx, -1
  008ed	89 95 c8 fa ff
	ff		 mov	 DWORD PTR tv735[ebp], edx
$LN185@TestLegacy:
  008f3	8b 85 c8 fa ff
	ff		 mov	 eax, DWORD PTR tv735[ebp]
  008f9	89 85 c4 fa ff
	ff		 mov	 DWORD PTR tv217[ebp], eax
  008ff	83 bd c4 fa ff
	ff 00		 cmp	 DWORD PTR tv217[ebp], 0
  00906	75 24		 jne	 SHORT $LN92@TestLegacy

; 1146 : 				{
; 1147 : 					if (crc != 0x2845d0e3)

  00908	81 7d fc e3 d0
	45 28		 cmp	 DWORD PTR _crc$[ebp], 675664099 ; 2845d0e3H
  0090f	74 07		 je	 SHORT $LN91@TestLegacy

; 1148 : 						return FALSE;

  00911	33 c0		 xor	 eax, eax
  00913	e9 f0 14 00 00	 jmp	 $LN144@TestLegacy
$LN91@TestLegacy:

; 1149 : 					nTestsPerformed++;

  00918	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  0091e	83 c1 01	 add	 ecx, 1
  00921	89 8d 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
  00927	e9 b0 00 00 00	 jmp	 $LN117@TestLegacy
$LN92@TestLegacy:

; 1150 : 				}
; 1151 : 				else if (strcmp (name, "Twofish-Serpent") == 0)

  0092c	c7 85 c0 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv744[ebp], OFFSET ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  00936	8d 55 a0	 lea	 edx, DWORD PTR _name$[ebp]
  00939	89 95 bc fa ff
	ff		 mov	 DWORD PTR tv742[ebp], edx
$LL186@TestLegacy:
  0093f	8b 85 bc fa ff
	ff		 mov	 eax, DWORD PTR tv742[ebp]
  00945	8a 08		 mov	 cl, BYTE PTR [eax]
  00947	88 8d bb fa ff
	ff		 mov	 BYTE PTR tv747[ebp], cl
  0094d	8b 95 c0 fa ff
	ff		 mov	 edx, DWORD PTR tv744[ebp]
  00953	3a 0a		 cmp	 cl, BYTE PTR [edx]
  00955	75 46		 jne	 SHORT $LN187@TestLegacy
  00957	80 bd bb fa ff
	ff 00		 cmp	 BYTE PTR tv747[ebp], 0
  0095e	74 31		 je	 SHORT $LN188@TestLegacy
  00960	8b 85 bc fa ff
	ff		 mov	 eax, DWORD PTR tv742[ebp]
  00966	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00969	88 8d ba fa ff
	ff		 mov	 BYTE PTR tv754[ebp], cl
  0096f	8b 95 c0 fa ff
	ff		 mov	 edx, DWORD PTR tv744[ebp]
  00975	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  00978	75 23		 jne	 SHORT $LN187@TestLegacy
  0097a	83 85 bc fa ff
	ff 02		 add	 DWORD PTR tv742[ebp], 2
  00981	83 85 c0 fa ff
	ff 02		 add	 DWORD PTR tv744[ebp], 2
  00988	80 bd ba fa ff
	ff 00		 cmp	 BYTE PTR tv754[ebp], 0
  0098f	75 ae		 jne	 SHORT $LL186@TestLegacy
$LN188@TestLegacy:
  00991	c7 85 b4 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv759[ebp], 0
  0099b	eb 0b		 jmp	 SHORT $LN189@TestLegacy
$LN187@TestLegacy:
  0099d	1b c0		 sbb	 eax, eax
  0099f	83 d8 ff	 sbb	 eax, -1
  009a2	89 85 b4 fa ff
	ff		 mov	 DWORD PTR tv759[ebp], eax
$LN189@TestLegacy:
  009a8	8b 8d b4 fa ff
	ff		 mov	 ecx, DWORD PTR tv759[ebp]
  009ae	89 8d b0 fa ff
	ff		 mov	 DWORD PTR tv224[ebp], ecx
  009b4	83 bd b0 fa ff
	ff 00		 cmp	 DWORD PTR tv224[ebp], 0
  009bb	75 1f		 jne	 SHORT $LN117@TestLegacy

; 1152 : 				{
; 1153 : 					if (crc != 0xca65c5cd)

  009bd	81 7d fc cd c5
	65 ca		 cmp	 DWORD PTR _crc$[ebp], -899299891 ; ca65c5cdH
  009c4	74 07		 je	 SHORT $LN88@TestLegacy

; 1154 : 						return FALSE;

  009c6	33 c0		 xor	 eax, eax
  009c8	e9 3b 14 00 00	 jmp	 $LN144@TestLegacy
$LN88@TestLegacy:

; 1155 : 					nTestsPerformed++;

  009cd	8b 95 98 fb ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  009d3	83 c2 01	 add	 edx, 1
  009d6	89 95 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx
$LN117@TestLegacy:

; 1156 : 				}
; 1157 : 				break;

  009dc	e9 77 08 00 00	 jmp	 $LN121@TestLegacy
$LN87@TestLegacy:

; 1158 : 
; 1159 : 			case CBC:		// Deprecated/legacy
; 1160 : 			case INNER_CBC:	// Deprecated/legacy
; 1161 : 			case OUTER_CBC:	// Deprecated/legacy
; 1162 : 				if (strcmp (name, "AES") == 0)

  009e1	c7 85 ac fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv768[ebp], OFFSET ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  009eb	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  009ee	89 85 a8 fa ff
	ff		 mov	 DWORD PTR tv766[ebp], eax
$LL190@TestLegacy:
  009f4	8b 8d a8 fa ff
	ff		 mov	 ecx, DWORD PTR tv766[ebp]
  009fa	8a 11		 mov	 dl, BYTE PTR [ecx]
  009fc	88 95 a7 fa ff
	ff		 mov	 BYTE PTR tv771[ebp], dl
  00a02	8b 85 ac fa ff
	ff		 mov	 eax, DWORD PTR tv768[ebp]
  00a08	3a 10		 cmp	 dl, BYTE PTR [eax]
  00a0a	75 46		 jne	 SHORT $LN191@TestLegacy
  00a0c	80 bd a7 fa ff
	ff 00		 cmp	 BYTE PTR tv771[ebp], 0
  00a13	74 31		 je	 SHORT $LN192@TestLegacy
  00a15	8b 8d a8 fa ff
	ff		 mov	 ecx, DWORD PTR tv766[ebp]
  00a1b	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00a1e	88 95 a6 fa ff
	ff		 mov	 BYTE PTR tv778[ebp], dl
  00a24	8b 85 ac fa ff
	ff		 mov	 eax, DWORD PTR tv768[ebp]
  00a2a	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00a2d	75 23		 jne	 SHORT $LN191@TestLegacy
  00a2f	83 85 a8 fa ff
	ff 02		 add	 DWORD PTR tv766[ebp], 2
  00a36	83 85 ac fa ff
	ff 02		 add	 DWORD PTR tv768[ebp], 2
  00a3d	80 bd a6 fa ff
	ff 00		 cmp	 BYTE PTR tv778[ebp], 0
  00a44	75 ae		 jne	 SHORT $LL190@TestLegacy
$LN192@TestLegacy:
  00a46	c7 85 a0 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv783[ebp], 0
  00a50	eb 0b		 jmp	 SHORT $LN193@TestLegacy
$LN191@TestLegacy:
  00a52	1b c9		 sbb	 ecx, ecx
  00a54	83 d9 ff	 sbb	 ecx, -1
  00a57	89 8d a0 fa ff
	ff		 mov	 DWORD PTR tv783[ebp], ecx
$LN193@TestLegacy:
  00a5d	8b 95 a0 fa ff
	ff		 mov	 edx, DWORD PTR tv783[ebp]
  00a63	89 95 9c fa ff
	ff		 mov	 DWORD PTR tv231[ebp], edx
  00a69	83 bd 9c fa ff
	ff 00		 cmp	 DWORD PTR tv231[ebp], 0
  00a70	75 24		 jne	 SHORT $LN86@TestLegacy

; 1163 : 				{
; 1164 : 					if (crc != 0x2274f53d)

  00a72	81 7d fc 3d f5
	74 22		 cmp	 DWORD PTR _crc$[ebp], 578090301 ; 2274f53dH
  00a79	74 07		 je	 SHORT $LN85@TestLegacy

; 1165 : 						return FALSE;

  00a7b	33 c0		 xor	 eax, eax
  00a7d	e9 86 13 00 00	 jmp	 $LN144@TestLegacy
$LN85@TestLegacy:

; 1166 : 					nTestsPerformed++;

  00a82	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  00a88	83 c0 01	 add	 eax, 1
  00a8b	89 85 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
  00a91	e9 c2 07 00 00	 jmp	 $LN121@TestLegacy
$LN86@TestLegacy:

; 1167 : 				}
; 1168 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  00a96	c7 85 98 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv792[ebp], OFFSET ??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
  00aa0	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  00aa3	89 8d 94 fa ff
	ff		 mov	 DWORD PTR tv790[ebp], ecx
$LL194@TestLegacy:
  00aa9	8b 95 94 fa ff
	ff		 mov	 edx, DWORD PTR tv790[ebp]
  00aaf	8a 02		 mov	 al, BYTE PTR [edx]
  00ab1	88 85 93 fa ff
	ff		 mov	 BYTE PTR tv795[ebp], al
  00ab7	8b 8d 98 fa ff
	ff		 mov	 ecx, DWORD PTR tv792[ebp]
  00abd	3a 01		 cmp	 al, BYTE PTR [ecx]
  00abf	75 46		 jne	 SHORT $LN195@TestLegacy
  00ac1	80 bd 93 fa ff
	ff 00		 cmp	 BYTE PTR tv795[ebp], 0
  00ac8	74 31		 je	 SHORT $LN196@TestLegacy
  00aca	8b 95 94 fa ff
	ff		 mov	 edx, DWORD PTR tv790[ebp]
  00ad0	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00ad3	88 85 92 fa ff
	ff		 mov	 BYTE PTR tv802[ebp], al
  00ad9	8b 8d 98 fa ff
	ff		 mov	 ecx, DWORD PTR tv792[ebp]
  00adf	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00ae2	75 23		 jne	 SHORT $LN195@TestLegacy
  00ae4	83 85 94 fa ff
	ff 02		 add	 DWORD PTR tv790[ebp], 2
  00aeb	83 85 98 fa ff
	ff 02		 add	 DWORD PTR tv792[ebp], 2
  00af2	80 bd 92 fa ff
	ff 00		 cmp	 BYTE PTR tv802[ebp], 0
  00af9	75 ae		 jne	 SHORT $LL194@TestLegacy
$LN196@TestLegacy:
  00afb	c7 85 8c fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv807[ebp], 0
  00b05	eb 0b		 jmp	 SHORT $LN197@TestLegacy
$LN195@TestLegacy:
  00b07	1b d2		 sbb	 edx, edx
  00b09	83 da ff	 sbb	 edx, -1
  00b0c	89 95 8c fa ff
	ff		 mov	 DWORD PTR tv807[ebp], edx
$LN197@TestLegacy:
  00b12	8b 85 8c fa ff
	ff		 mov	 eax, DWORD PTR tv807[ebp]
  00b18	89 85 88 fa ff
	ff		 mov	 DWORD PTR tv238[ebp], eax
  00b1e	83 bd 88 fa ff
	ff 00		 cmp	 DWORD PTR tv238[ebp], 0
  00b25	75 24		 jne	 SHORT $LN83@TestLegacy

; 1169 : 				{
; 1170 : 					if (crc != 0x033899a1)

  00b27	81 7d fc a1 99
	38 03		 cmp	 DWORD PTR _crc$[ebp], 54040993 ; 033899a1H
  00b2e	74 07		 je	 SHORT $LN82@TestLegacy

; 1171 : 						return FALSE;

  00b30	33 c0		 xor	 eax, eax
  00b32	e9 d1 12 00 00	 jmp	 $LN144@TestLegacy
$LN82@TestLegacy:

; 1172 : 					nTestsPerformed++;

  00b37	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  00b3d	83 c1 01	 add	 ecx, 1
  00b40	89 8d 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
  00b46	e9 0d 07 00 00	 jmp	 $LN121@TestLegacy
$LN83@TestLegacy:

; 1173 : 				}
; 1174 : 				else if (strcmp (name, "CAST5") == 0)		// Deprecated/legacy

  00b4b	c7 85 84 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv816[ebp], OFFSET ??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@
  00b55	8d 55 a0	 lea	 edx, DWORD PTR _name$[ebp]
  00b58	89 95 80 fa ff
	ff		 mov	 DWORD PTR tv814[ebp], edx
$LL198@TestLegacy:
  00b5e	8b 85 80 fa ff
	ff		 mov	 eax, DWORD PTR tv814[ebp]
  00b64	8a 08		 mov	 cl, BYTE PTR [eax]
  00b66	88 8d 7f fa ff
	ff		 mov	 BYTE PTR tv819[ebp], cl
  00b6c	8b 95 84 fa ff
	ff		 mov	 edx, DWORD PTR tv816[ebp]
  00b72	3a 0a		 cmp	 cl, BYTE PTR [edx]
  00b74	75 46		 jne	 SHORT $LN199@TestLegacy
  00b76	80 bd 7f fa ff
	ff 00		 cmp	 BYTE PTR tv819[ebp], 0
  00b7d	74 31		 je	 SHORT $LN200@TestLegacy
  00b7f	8b 85 80 fa ff
	ff		 mov	 eax, DWORD PTR tv814[ebp]
  00b85	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00b88	88 8d 7e fa ff
	ff		 mov	 BYTE PTR tv826[ebp], cl
  00b8e	8b 95 84 fa ff
	ff		 mov	 edx, DWORD PTR tv816[ebp]
  00b94	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  00b97	75 23		 jne	 SHORT $LN199@TestLegacy
  00b99	83 85 80 fa ff
	ff 02		 add	 DWORD PTR tv814[ebp], 2
  00ba0	83 85 84 fa ff
	ff 02		 add	 DWORD PTR tv816[ebp], 2
  00ba7	80 bd 7e fa ff
	ff 00		 cmp	 BYTE PTR tv826[ebp], 0
  00bae	75 ae		 jne	 SHORT $LL198@TestLegacy
$LN200@TestLegacy:
  00bb0	c7 85 78 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv831[ebp], 0
  00bba	eb 0b		 jmp	 SHORT $LN201@TestLegacy
$LN199@TestLegacy:
  00bbc	1b c0		 sbb	 eax, eax
  00bbe	83 d8 ff	 sbb	 eax, -1
  00bc1	89 85 78 fa ff
	ff		 mov	 DWORD PTR tv831[ebp], eax
$LN201@TestLegacy:
  00bc7	8b 8d 78 fa ff
	ff		 mov	 ecx, DWORD PTR tv831[ebp]
  00bcd	89 8d 74 fa ff
	ff		 mov	 DWORD PTR tv245[ebp], ecx
  00bd3	83 bd 74 fa ff
	ff 00		 cmp	 DWORD PTR tv245[ebp], 0
  00bda	75 24		 jne	 SHORT $LN80@TestLegacy

; 1175 : 				{
; 1176 : 					if (crc != 0x331cecc7)	

  00bdc	81 7d fc c7 ec
	1c 33		 cmp	 DWORD PTR _crc$[ebp], 857533639 ; 331cecc7H
  00be3	74 07		 je	 SHORT $LN79@TestLegacy

; 1177 : 						return FALSE;

  00be5	33 c0		 xor	 eax, eax
  00be7	e9 1c 12 00 00	 jmp	 $LN144@TestLegacy
$LN79@TestLegacy:

; 1178 : 					nTestsPerformed++;

  00bec	8b 95 98 fb ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  00bf2	83 c2 01	 add	 edx, 1
  00bf5	89 95 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx
  00bfb	e9 58 06 00 00	 jmp	 $LN121@TestLegacy
$LN80@TestLegacy:

; 1179 : 				}
; 1180 : 				else if (strcmp (name, "Serpent") == 0)

  00c00	c7 85 70 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv840[ebp], OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  00c0a	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  00c0d	89 85 6c fa ff
	ff		 mov	 DWORD PTR tv838[ebp], eax
$LL202@TestLegacy:
  00c13	8b 8d 6c fa ff
	ff		 mov	 ecx, DWORD PTR tv838[ebp]
  00c19	8a 11		 mov	 dl, BYTE PTR [ecx]
  00c1b	88 95 6b fa ff
	ff		 mov	 BYTE PTR tv843[ebp], dl
  00c21	8b 85 70 fa ff
	ff		 mov	 eax, DWORD PTR tv840[ebp]
  00c27	3a 10		 cmp	 dl, BYTE PTR [eax]
  00c29	75 46		 jne	 SHORT $LN203@TestLegacy
  00c2b	80 bd 6b fa ff
	ff 00		 cmp	 BYTE PTR tv843[ebp], 0
  00c32	74 31		 je	 SHORT $LN204@TestLegacy
  00c34	8b 8d 6c fa ff
	ff		 mov	 ecx, DWORD PTR tv838[ebp]
  00c3a	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00c3d	88 95 6a fa ff
	ff		 mov	 BYTE PTR tv850[ebp], dl
  00c43	8b 85 70 fa ff
	ff		 mov	 eax, DWORD PTR tv840[ebp]
  00c49	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00c4c	75 23		 jne	 SHORT $LN203@TestLegacy
  00c4e	83 85 6c fa ff
	ff 02		 add	 DWORD PTR tv838[ebp], 2
  00c55	83 85 70 fa ff
	ff 02		 add	 DWORD PTR tv840[ebp], 2
  00c5c	80 bd 6a fa ff
	ff 00		 cmp	 BYTE PTR tv850[ebp], 0
  00c63	75 ae		 jne	 SHORT $LL202@TestLegacy
$LN204@TestLegacy:
  00c65	c7 85 64 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv855[ebp], 0
  00c6f	eb 0b		 jmp	 SHORT $LN205@TestLegacy
$LN203@TestLegacy:
  00c71	1b c9		 sbb	 ecx, ecx
  00c73	83 d9 ff	 sbb	 ecx, -1
  00c76	89 8d 64 fa ff
	ff		 mov	 DWORD PTR tv855[ebp], ecx
$LN205@TestLegacy:
  00c7c	8b 95 64 fa ff
	ff		 mov	 edx, DWORD PTR tv855[ebp]
  00c82	89 95 60 fa ff
	ff		 mov	 DWORD PTR tv252[ebp], edx
  00c88	83 bd 60 fa ff
	ff 00		 cmp	 DWORD PTR tv252[ebp], 0
  00c8f	75 24		 jne	 SHORT $LN77@TestLegacy

; 1181 : 				{
; 1182 : 					if (crc != 0x42dff3d4)

  00c91	81 7d fc d4 f3
	df 42		 cmp	 DWORD PTR _crc$[ebp], 1121973204 ; 42dff3d4H
  00c98	74 07		 je	 SHORT $LN76@TestLegacy

; 1183 : 						return FALSE;

  00c9a	33 c0		 xor	 eax, eax
  00c9c	e9 67 11 00 00	 jmp	 $LN144@TestLegacy
$LN76@TestLegacy:

; 1184 : 					nTestsPerformed++;

  00ca1	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  00ca7	83 c0 01	 add	 eax, 1
  00caa	89 85 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
  00cb0	e9 a3 05 00 00	 jmp	 $LN121@TestLegacy
$LN77@TestLegacy:

; 1185 : 				}
; 1186 : 				else if (strcmp (name, "Triple DES") == 0)	// Deprecated/legacy

  00cb5	c7 85 5c fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv864[ebp], OFFSET ??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@
  00cbf	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  00cc2	89 8d 58 fa ff
	ff		 mov	 DWORD PTR tv862[ebp], ecx
$LL206@TestLegacy:
  00cc8	8b 95 58 fa ff
	ff		 mov	 edx, DWORD PTR tv862[ebp]
  00cce	8a 02		 mov	 al, BYTE PTR [edx]
  00cd0	88 85 57 fa ff
	ff		 mov	 BYTE PTR tv867[ebp], al
  00cd6	8b 8d 5c fa ff
	ff		 mov	 ecx, DWORD PTR tv864[ebp]
  00cdc	3a 01		 cmp	 al, BYTE PTR [ecx]
  00cde	75 46		 jne	 SHORT $LN207@TestLegacy
  00ce0	80 bd 57 fa ff
	ff 00		 cmp	 BYTE PTR tv867[ebp], 0
  00ce7	74 31		 je	 SHORT $LN208@TestLegacy
  00ce9	8b 95 58 fa ff
	ff		 mov	 edx, DWORD PTR tv862[ebp]
  00cef	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00cf2	88 85 56 fa ff
	ff		 mov	 BYTE PTR tv874[ebp], al
  00cf8	8b 8d 5c fa ff
	ff		 mov	 ecx, DWORD PTR tv864[ebp]
  00cfe	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00d01	75 23		 jne	 SHORT $LN207@TestLegacy
  00d03	83 85 58 fa ff
	ff 02		 add	 DWORD PTR tv862[ebp], 2
  00d0a	83 85 5c fa ff
	ff 02		 add	 DWORD PTR tv864[ebp], 2
  00d11	80 bd 56 fa ff
	ff 00		 cmp	 BYTE PTR tv874[ebp], 0
  00d18	75 ae		 jne	 SHORT $LL206@TestLegacy
$LN208@TestLegacy:
  00d1a	c7 85 50 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv879[ebp], 0
  00d24	eb 0b		 jmp	 SHORT $LN209@TestLegacy
$LN207@TestLegacy:
  00d26	1b d2		 sbb	 edx, edx
  00d28	83 da ff	 sbb	 edx, -1
  00d2b	89 95 50 fa ff
	ff		 mov	 DWORD PTR tv879[ebp], edx
$LN209@TestLegacy:
  00d31	8b 85 50 fa ff
	ff		 mov	 eax, DWORD PTR tv879[ebp]
  00d37	89 85 4c fa ff
	ff		 mov	 DWORD PTR tv259[ebp], eax
  00d3d	83 bd 4c fa ff
	ff 00		 cmp	 DWORD PTR tv259[ebp], 0
  00d44	75 24		 jne	 SHORT $LN74@TestLegacy

; 1187 : 				{
; 1188 : 					if (crc != 0xfe497d0c)

  00d46	81 7d fc 0c 7d
	49 fe		 cmp	 DWORD PTR _crc$[ebp], -28738292 ; fe497d0cH
  00d4d	74 07		 je	 SHORT $LN73@TestLegacy

; 1189 : 						return FALSE;

  00d4f	33 c0		 xor	 eax, eax
  00d51	e9 b2 10 00 00	 jmp	 $LN144@TestLegacy
$LN73@TestLegacy:

; 1190 : 					nTestsPerformed++;

  00d56	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  00d5c	83 c1 01	 add	 ecx, 1
  00d5f	89 8d 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
  00d65	e9 ee 04 00 00	 jmp	 $LN121@TestLegacy
$LN74@TestLegacy:

; 1191 : 				}
; 1192 : 				else if (strcmp (name, "AES-Blowfish") == 0)	// Deprecated/legacy

  00d6a	c7 85 48 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv888[ebp], OFFSET ??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@
  00d74	8d 55 a0	 lea	 edx, DWORD PTR _name$[ebp]
  00d77	89 95 44 fa ff
	ff		 mov	 DWORD PTR tv886[ebp], edx
$LL210@TestLegacy:
  00d7d	8b 85 44 fa ff
	ff		 mov	 eax, DWORD PTR tv886[ebp]
  00d83	8a 08		 mov	 cl, BYTE PTR [eax]
  00d85	88 8d 43 fa ff
	ff		 mov	 BYTE PTR tv891[ebp], cl
  00d8b	8b 95 48 fa ff
	ff		 mov	 edx, DWORD PTR tv888[ebp]
  00d91	3a 0a		 cmp	 cl, BYTE PTR [edx]
  00d93	75 46		 jne	 SHORT $LN211@TestLegacy
  00d95	80 bd 43 fa ff
	ff 00		 cmp	 BYTE PTR tv891[ebp], 0
  00d9c	74 31		 je	 SHORT $LN212@TestLegacy
  00d9e	8b 85 44 fa ff
	ff		 mov	 eax, DWORD PTR tv886[ebp]
  00da4	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00da7	88 8d 42 fa ff
	ff		 mov	 BYTE PTR tv898[ebp], cl
  00dad	8b 95 48 fa ff
	ff		 mov	 edx, DWORD PTR tv888[ebp]
  00db3	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  00db6	75 23		 jne	 SHORT $LN211@TestLegacy
  00db8	83 85 44 fa ff
	ff 02		 add	 DWORD PTR tv886[ebp], 2
  00dbf	83 85 48 fa ff
	ff 02		 add	 DWORD PTR tv888[ebp], 2
  00dc6	80 bd 42 fa ff
	ff 00		 cmp	 BYTE PTR tv898[ebp], 0
  00dcd	75 ae		 jne	 SHORT $LL210@TestLegacy
$LN212@TestLegacy:
  00dcf	c7 85 3c fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv903[ebp], 0
  00dd9	eb 0b		 jmp	 SHORT $LN213@TestLegacy
$LN211@TestLegacy:
  00ddb	1b c0		 sbb	 eax, eax
  00ddd	83 d8 ff	 sbb	 eax, -1
  00de0	89 85 3c fa ff
	ff		 mov	 DWORD PTR tv903[ebp], eax
$LN213@TestLegacy:
  00de6	8b 8d 3c fa ff
	ff		 mov	 ecx, DWORD PTR tv903[ebp]
  00dec	89 8d 38 fa ff
	ff		 mov	 DWORD PTR tv266[ebp], ecx
  00df2	83 bd 38 fa ff
	ff 00		 cmp	 DWORD PTR tv266[ebp], 0
  00df9	75 24		 jne	 SHORT $LN71@TestLegacy

; 1193 : 				{
; 1194 : 					if (crc != 0xa7a80c84)

  00dfb	81 7d fc 84 0c
	a8 a7		 cmp	 DWORD PTR _crc$[ebp], -1482158972 ; a7a80c84H
  00e02	74 07		 je	 SHORT $LN70@TestLegacy

; 1195 : 						return FALSE;

  00e04	33 c0		 xor	 eax, eax
  00e06	e9 fd 0f 00 00	 jmp	 $LN144@TestLegacy
$LN70@TestLegacy:

; 1196 : 					nTestsPerformed++;

  00e0b	8b 95 98 fb ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  00e11	83 c2 01	 add	 edx, 1
  00e14	89 95 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx
  00e1a	e9 39 04 00 00	 jmp	 $LN121@TestLegacy
$LN71@TestLegacy:

; 1197 : 				}
; 1198 : 				else if (strcmp (name, "AES-Blowfish-Serpent") == 0)	// Deprecated/legacy

  00e1f	c7 85 34 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv912[ebp], OFFSET ??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@
  00e29	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  00e2c	89 85 30 fa ff
	ff		 mov	 DWORD PTR tv910[ebp], eax
$LL214@TestLegacy:
  00e32	8b 8d 30 fa ff
	ff		 mov	 ecx, DWORD PTR tv910[ebp]
  00e38	8a 11		 mov	 dl, BYTE PTR [ecx]
  00e3a	88 95 2f fa ff
	ff		 mov	 BYTE PTR tv915[ebp], dl
  00e40	8b 85 34 fa ff
	ff		 mov	 eax, DWORD PTR tv912[ebp]
  00e46	3a 10		 cmp	 dl, BYTE PTR [eax]
  00e48	75 46		 jne	 SHORT $LN215@TestLegacy
  00e4a	80 bd 2f fa ff
	ff 00		 cmp	 BYTE PTR tv915[ebp], 0
  00e51	74 31		 je	 SHORT $LN216@TestLegacy
  00e53	8b 8d 30 fa ff
	ff		 mov	 ecx, DWORD PTR tv910[ebp]
  00e59	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00e5c	88 95 2e fa ff
	ff		 mov	 BYTE PTR tv922[ebp], dl
  00e62	8b 85 34 fa ff
	ff		 mov	 eax, DWORD PTR tv912[ebp]
  00e68	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00e6b	75 23		 jne	 SHORT $LN215@TestLegacy
  00e6d	83 85 30 fa ff
	ff 02		 add	 DWORD PTR tv910[ebp], 2
  00e74	83 85 34 fa ff
	ff 02		 add	 DWORD PTR tv912[ebp], 2
  00e7b	80 bd 2e fa ff
	ff 00		 cmp	 BYTE PTR tv922[ebp], 0
  00e82	75 ae		 jne	 SHORT $LL214@TestLegacy
$LN216@TestLegacy:
  00e84	c7 85 28 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv927[ebp], 0
  00e8e	eb 0b		 jmp	 SHORT $LN217@TestLegacy
$LN215@TestLegacy:
  00e90	1b c9		 sbb	 ecx, ecx
  00e92	83 d9 ff	 sbb	 ecx, -1
  00e95	89 8d 28 fa ff
	ff		 mov	 DWORD PTR tv927[ebp], ecx
$LN217@TestLegacy:
  00e9b	8b 95 28 fa ff
	ff		 mov	 edx, DWORD PTR tv927[ebp]
  00ea1	89 95 24 fa ff
	ff		 mov	 DWORD PTR tv273[ebp], edx
  00ea7	83 bd 24 fa ff
	ff 00		 cmp	 DWORD PTR tv273[ebp], 0
  00eae	75 24		 jne	 SHORT $LN68@TestLegacy

; 1199 : 				{
; 1200 : 					if (crc != 0xa0584562)

  00eb0	81 7d fc 62 45
	58 a0		 cmp	 DWORD PTR _crc$[ebp], -1604827806 ; a0584562H
  00eb7	74 07		 je	 SHORT $LN67@TestLegacy

; 1201 : 						return FALSE;

  00eb9	33 c0		 xor	 eax, eax
  00ebb	e9 48 0f 00 00	 jmp	 $LN144@TestLegacy
$LN67@TestLegacy:

; 1202 : 					nTestsPerformed++;

  00ec0	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  00ec6	83 c0 01	 add	 eax, 1
  00ec9	89 85 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
  00ecf	e9 84 03 00 00	 jmp	 $LN121@TestLegacy
$LN68@TestLegacy:

; 1203 : 				}
; 1204 : 				else if (strcmp (name, "AES-Twofish") == 0)

  00ed4	c7 85 20 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv936[ebp], OFFSET ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  00ede	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  00ee1	89 8d 1c fa ff
	ff		 mov	 DWORD PTR tv934[ebp], ecx
$LL218@TestLegacy:
  00ee7	8b 95 1c fa ff
	ff		 mov	 edx, DWORD PTR tv934[ebp]
  00eed	8a 02		 mov	 al, BYTE PTR [edx]
  00eef	88 85 1b fa ff
	ff		 mov	 BYTE PTR tv939[ebp], al
  00ef5	8b 8d 20 fa ff
	ff		 mov	 ecx, DWORD PTR tv936[ebp]
  00efb	3a 01		 cmp	 al, BYTE PTR [ecx]
  00efd	75 46		 jne	 SHORT $LN219@TestLegacy
  00eff	80 bd 1b fa ff
	ff 00		 cmp	 BYTE PTR tv939[ebp], 0
  00f06	74 31		 je	 SHORT $LN220@TestLegacy
  00f08	8b 95 1c fa ff
	ff		 mov	 edx, DWORD PTR tv934[ebp]
  00f0e	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00f11	88 85 1a fa ff
	ff		 mov	 BYTE PTR tv946[ebp], al
  00f17	8b 8d 20 fa ff
	ff		 mov	 ecx, DWORD PTR tv936[ebp]
  00f1d	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00f20	75 23		 jne	 SHORT $LN219@TestLegacy
  00f22	83 85 1c fa ff
	ff 02		 add	 DWORD PTR tv934[ebp], 2
  00f29	83 85 20 fa ff
	ff 02		 add	 DWORD PTR tv936[ebp], 2
  00f30	80 bd 1a fa ff
	ff 00		 cmp	 BYTE PTR tv946[ebp], 0
  00f37	75 ae		 jne	 SHORT $LL218@TestLegacy
$LN220@TestLegacy:
  00f39	c7 85 14 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv951[ebp], 0
  00f43	eb 0b		 jmp	 SHORT $LN221@TestLegacy
$LN219@TestLegacy:
  00f45	1b d2		 sbb	 edx, edx
  00f47	83 da ff	 sbb	 edx, -1
  00f4a	89 95 14 fa ff
	ff		 mov	 DWORD PTR tv951[ebp], edx
$LN221@TestLegacy:
  00f50	8b 85 14 fa ff
	ff		 mov	 eax, DWORD PTR tv951[ebp]
  00f56	89 85 10 fa ff
	ff		 mov	 DWORD PTR tv280[ebp], eax
  00f5c	83 bd 10 fa ff
	ff 00		 cmp	 DWORD PTR tv280[ebp], 0
  00f63	75 24		 jne	 SHORT $LN65@TestLegacy

; 1205 : 				{
; 1206 : 					if (crc != 0x3c226444)

  00f65	81 7d fc 44 64
	22 3c		 cmp	 DWORD PTR _crc$[ebp], 1008886852 ; 3c226444H
  00f6c	74 07		 je	 SHORT $LN64@TestLegacy

; 1207 : 						return FALSE;

  00f6e	33 c0		 xor	 eax, eax
  00f70	e9 93 0e 00 00	 jmp	 $LN144@TestLegacy
$LN64@TestLegacy:

; 1208 : 					nTestsPerformed++;

  00f75	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  00f7b	83 c1 01	 add	 ecx, 1
  00f7e	89 8d 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
  00f84	e9 cf 02 00 00	 jmp	 $LN121@TestLegacy
$LN65@TestLegacy:

; 1209 : 				}
; 1210 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  00f89	c7 85 0c fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv960[ebp], OFFSET ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  00f93	8d 55 a0	 lea	 edx, DWORD PTR _name$[ebp]
  00f96	89 95 08 fa ff
	ff		 mov	 DWORD PTR tv958[ebp], edx
$LL222@TestLegacy:
  00f9c	8b 85 08 fa ff
	ff		 mov	 eax, DWORD PTR tv958[ebp]
  00fa2	8a 08		 mov	 cl, BYTE PTR [eax]
  00fa4	88 8d 07 fa ff
	ff		 mov	 BYTE PTR tv963[ebp], cl
  00faa	8b 95 0c fa ff
	ff		 mov	 edx, DWORD PTR tv960[ebp]
  00fb0	3a 0a		 cmp	 cl, BYTE PTR [edx]
  00fb2	75 46		 jne	 SHORT $LN223@TestLegacy
  00fb4	80 bd 07 fa ff
	ff 00		 cmp	 BYTE PTR tv963[ebp], 0
  00fbb	74 31		 je	 SHORT $LN224@TestLegacy
  00fbd	8b 85 08 fa ff
	ff		 mov	 eax, DWORD PTR tv958[ebp]
  00fc3	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00fc6	88 8d 06 fa ff
	ff		 mov	 BYTE PTR tv970[ebp], cl
  00fcc	8b 95 0c fa ff
	ff		 mov	 edx, DWORD PTR tv960[ebp]
  00fd2	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  00fd5	75 23		 jne	 SHORT $LN223@TestLegacy
  00fd7	83 85 08 fa ff
	ff 02		 add	 DWORD PTR tv958[ebp], 2
  00fde	83 85 0c fa ff
	ff 02		 add	 DWORD PTR tv960[ebp], 2
  00fe5	80 bd 06 fa ff
	ff 00		 cmp	 BYTE PTR tv970[ebp], 0
  00fec	75 ae		 jne	 SHORT $LL222@TestLegacy
$LN224@TestLegacy:
  00fee	c7 85 00 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv975[ebp], 0
  00ff8	eb 0b		 jmp	 SHORT $LN225@TestLegacy
$LN223@TestLegacy:
  00ffa	1b c0		 sbb	 eax, eax
  00ffc	83 d8 ff	 sbb	 eax, -1
  00fff	89 85 00 fa ff
	ff		 mov	 DWORD PTR tv975[ebp], eax
$LN225@TestLegacy:
  01005	8b 8d 00 fa ff
	ff		 mov	 ecx, DWORD PTR tv975[ebp]
  0100b	89 8d fc f9 ff
	ff		 mov	 DWORD PTR tv287[ebp], ecx
  01011	83 bd fc f9 ff
	ff 00		 cmp	 DWORD PTR tv287[ebp], 0
  01018	75 24		 jne	 SHORT $LN62@TestLegacy

; 1211 : 				{
; 1212 : 					if (crc != 0x5e5e77fd)

  0101a	81 7d fc fd 77
	5e 5e		 cmp	 DWORD PTR _crc$[ebp], 1583249405 ; 5e5e77fdH
  01021	74 07		 je	 SHORT $LN61@TestLegacy

; 1213 : 						return FALSE;

  01023	33 c0		 xor	 eax, eax
  01025	e9 de 0d 00 00	 jmp	 $LN144@TestLegacy
$LN61@TestLegacy:

; 1214 : 					nTestsPerformed++;

  0102a	8b 95 98 fb ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  01030	83 c2 01	 add	 edx, 1
  01033	89 95 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx
  01039	e9 1a 02 00 00	 jmp	 $LN121@TestLegacy
$LN62@TestLegacy:

; 1215 : 				}
; 1216 : 				else if (strcmp (name, "Serpent-AES") == 0)

  0103e	c7 85 f8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv984[ebp], OFFSET ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  01048	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  0104b	89 85 f4 f9 ff
	ff		 mov	 DWORD PTR tv982[ebp], eax
$LL226@TestLegacy:
  01051	8b 8d f4 f9 ff
	ff		 mov	 ecx, DWORD PTR tv982[ebp]
  01057	8a 11		 mov	 dl, BYTE PTR [ecx]
  01059	88 95 f3 f9 ff
	ff		 mov	 BYTE PTR tv987[ebp], dl
  0105f	8b 85 f8 f9 ff
	ff		 mov	 eax, DWORD PTR tv984[ebp]
  01065	3a 10		 cmp	 dl, BYTE PTR [eax]
  01067	75 46		 jne	 SHORT $LN227@TestLegacy
  01069	80 bd f3 f9 ff
	ff 00		 cmp	 BYTE PTR tv987[ebp], 0
  01070	74 31		 je	 SHORT $LN228@TestLegacy
  01072	8b 8d f4 f9 ff
	ff		 mov	 ecx, DWORD PTR tv982[ebp]
  01078	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0107b	88 95 f2 f9 ff
	ff		 mov	 BYTE PTR tv994[ebp], dl
  01081	8b 85 f8 f9 ff
	ff		 mov	 eax, DWORD PTR tv984[ebp]
  01087	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  0108a	75 23		 jne	 SHORT $LN227@TestLegacy
  0108c	83 85 f4 f9 ff
	ff 02		 add	 DWORD PTR tv982[ebp], 2
  01093	83 85 f8 f9 ff
	ff 02		 add	 DWORD PTR tv984[ebp], 2
  0109a	80 bd f2 f9 ff
	ff 00		 cmp	 BYTE PTR tv994[ebp], 0
  010a1	75 ae		 jne	 SHORT $LL226@TestLegacy
$LN228@TestLegacy:
  010a3	c7 85 ec f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv999[ebp], 0
  010ad	eb 0b		 jmp	 SHORT $LN229@TestLegacy
$LN227@TestLegacy:
  010af	1b c9		 sbb	 ecx, ecx
  010b1	83 d9 ff	 sbb	 ecx, -1
  010b4	89 8d ec f9 ff
	ff		 mov	 DWORD PTR tv999[ebp], ecx
$LN229@TestLegacy:
  010ba	8b 95 ec f9 ff
	ff		 mov	 edx, DWORD PTR tv999[ebp]
  010c0	89 95 e8 f9 ff
	ff		 mov	 DWORD PTR tv294[ebp], edx
  010c6	83 bd e8 f9 ff
	ff 00		 cmp	 DWORD PTR tv294[ebp], 0
  010cd	75 24		 jne	 SHORT $LN59@TestLegacy

; 1217 : 				{
; 1218 : 					if (crc != 0x57c612d5)

  010cf	81 7d fc d5 12
	c6 57		 cmp	 DWORD PTR _crc$[ebp], 1472598741 ; 57c612d5H
  010d6	74 07		 je	 SHORT $LN58@TestLegacy

; 1219 : 						return FALSE;

  010d8	33 c0		 xor	 eax, eax
  010da	e9 29 0d 00 00	 jmp	 $LN144@TestLegacy
$LN58@TestLegacy:

; 1220 : 					nTestsPerformed++;

  010df	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  010e5	83 c0 01	 add	 eax, 1
  010e8	89 85 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
  010ee	e9 65 01 00 00	 jmp	 $LN121@TestLegacy
$LN59@TestLegacy:

; 1221 : 				}
; 1222 : 				else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  010f3	c7 85 e4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1008[ebp], OFFSET ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  010fd	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  01100	89 8d e0 f9 ff
	ff		 mov	 DWORD PTR tv1006[ebp], ecx
$LL230@TestLegacy:
  01106	8b 95 e0 f9 ff
	ff		 mov	 edx, DWORD PTR tv1006[ebp]
  0110c	8a 02		 mov	 al, BYTE PTR [edx]
  0110e	88 85 df f9 ff
	ff		 mov	 BYTE PTR tv1011[ebp], al
  01114	8b 8d e4 f9 ff
	ff		 mov	 ecx, DWORD PTR tv1008[ebp]
  0111a	3a 01		 cmp	 al, BYTE PTR [ecx]
  0111c	75 46		 jne	 SHORT $LN231@TestLegacy
  0111e	80 bd df f9 ff
	ff 00		 cmp	 BYTE PTR tv1011[ebp], 0
  01125	74 31		 je	 SHORT $LN232@TestLegacy
  01127	8b 95 e0 f9 ff
	ff		 mov	 edx, DWORD PTR tv1006[ebp]
  0112d	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  01130	88 85 de f9 ff
	ff		 mov	 BYTE PTR tv1018[ebp], al
  01136	8b 8d e4 f9 ff
	ff		 mov	 ecx, DWORD PTR tv1008[ebp]
  0113c	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  0113f	75 23		 jne	 SHORT $LN231@TestLegacy
  01141	83 85 e0 f9 ff
	ff 02		 add	 DWORD PTR tv1006[ebp], 2
  01148	83 85 e4 f9 ff
	ff 02		 add	 DWORD PTR tv1008[ebp], 2
  0114f	80 bd de f9 ff
	ff 00		 cmp	 BYTE PTR tv1018[ebp], 0
  01156	75 ae		 jne	 SHORT $LL230@TestLegacy
$LN232@TestLegacy:
  01158	c7 85 d8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1023[ebp], 0
  01162	eb 0b		 jmp	 SHORT $LN233@TestLegacy
$LN231@TestLegacy:
  01164	1b d2		 sbb	 edx, edx
  01166	83 da ff	 sbb	 edx, -1
  01169	89 95 d8 f9 ff
	ff		 mov	 DWORD PTR tv1023[ebp], edx
$LN233@TestLegacy:
  0116f	8b 85 d8 f9 ff
	ff		 mov	 eax, DWORD PTR tv1023[ebp]
  01175	89 85 d4 f9 ff
	ff		 mov	 DWORD PTR tv301[ebp], eax
  0117b	83 bd d4 f9 ff
	ff 00		 cmp	 DWORD PTR tv301[ebp], 0
  01182	75 24		 jne	 SHORT $LN56@TestLegacy

; 1223 : 				{
; 1224 : 					if (crc != 0x081e045a)

  01184	81 7d fc 5a 04
	1e 08		 cmp	 DWORD PTR _crc$[ebp], 136184922 ; 081e045aH
  0118b	74 07		 je	 SHORT $LN55@TestLegacy

; 1225 : 						return FALSE;

  0118d	33 c0		 xor	 eax, eax
  0118f	e9 74 0c 00 00	 jmp	 $LN144@TestLegacy
$LN55@TestLegacy:

; 1226 : 					nTestsPerformed++;

  01194	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  0119a	83 c1 01	 add	 ecx, 1
  0119d	89 8d 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
  011a3	e9 b0 00 00 00	 jmp	 $LN121@TestLegacy
$LN56@TestLegacy:

; 1227 : 				}
; 1228 : 				else if (strcmp (name, "Twofish-Serpent") == 0)

  011a8	c7 85 d0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1032[ebp], OFFSET ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  011b2	8d 55 a0	 lea	 edx, DWORD PTR _name$[ebp]
  011b5	89 95 cc f9 ff
	ff		 mov	 DWORD PTR tv1030[ebp], edx
$LL234@TestLegacy:
  011bb	8b 85 cc f9 ff
	ff		 mov	 eax, DWORD PTR tv1030[ebp]
  011c1	8a 08		 mov	 cl, BYTE PTR [eax]
  011c3	88 8d cb f9 ff
	ff		 mov	 BYTE PTR tv1035[ebp], cl
  011c9	8b 95 d0 f9 ff
	ff		 mov	 edx, DWORD PTR tv1032[ebp]
  011cf	3a 0a		 cmp	 cl, BYTE PTR [edx]
  011d1	75 46		 jne	 SHORT $LN235@TestLegacy
  011d3	80 bd cb f9 ff
	ff 00		 cmp	 BYTE PTR tv1035[ebp], 0
  011da	74 31		 je	 SHORT $LN236@TestLegacy
  011dc	8b 85 cc f9 ff
	ff		 mov	 eax, DWORD PTR tv1030[ebp]
  011e2	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  011e5	88 8d ca f9 ff
	ff		 mov	 BYTE PTR tv1042[ebp], cl
  011eb	8b 95 d0 f9 ff
	ff		 mov	 edx, DWORD PTR tv1032[ebp]
  011f1	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  011f4	75 23		 jne	 SHORT $LN235@TestLegacy
  011f6	83 85 cc f9 ff
	ff 02		 add	 DWORD PTR tv1030[ebp], 2
  011fd	83 85 d0 f9 ff
	ff 02		 add	 DWORD PTR tv1032[ebp], 2
  01204	80 bd ca f9 ff
	ff 00		 cmp	 BYTE PTR tv1042[ebp], 0
  0120b	75 ae		 jne	 SHORT $LL234@TestLegacy
$LN236@TestLegacy:
  0120d	c7 85 c4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1047[ebp], 0
  01217	eb 0b		 jmp	 SHORT $LN237@TestLegacy
$LN235@TestLegacy:
  01219	1b c0		 sbb	 eax, eax
  0121b	83 d8 ff	 sbb	 eax, -1
  0121e	89 85 c4 f9 ff
	ff		 mov	 DWORD PTR tv1047[ebp], eax
$LN237@TestLegacy:
  01224	8b 8d c4 f9 ff
	ff		 mov	 ecx, DWORD PTR tv1047[ebp]
  0122a	89 8d c0 f9 ff
	ff		 mov	 DWORD PTR tv308[ebp], ecx
  01230	83 bd c0 f9 ff
	ff 00		 cmp	 DWORD PTR tv308[ebp], 0
  01237	75 1f		 jne	 SHORT $LN121@TestLegacy

; 1229 : 				{
; 1230 : 					if (crc != 0xa7b659f3)

  01239	81 7d fc f3 59
	b6 a7		 cmp	 DWORD PTR _crc$[ebp], -1481221645 ; a7b659f3H
  01240	74 07		 je	 SHORT $LN52@TestLegacy

; 1231 : 						return FALSE;

  01242	33 c0		 xor	 eax, eax
  01244	e9 bf 0b 00 00	 jmp	 $LN144@TestLegacy
$LN52@TestLegacy:

; 1232 : 					nTestsPerformed++;

  01249	8b 95 98 fb ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  0124f	83 c2 01	 add	 edx, 1
  01252	89 95 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx
$LN121@TestLegacy:

; 1233 : 				}
; 1234 : 				break;
; 1235 : 			}
; 1236 : 
; 1237 : 			if (crc == 0xb70b4c26)

  01258	81 7d fc 26 4c
	0b b7		 cmp	 DWORD PTR _crc$[ebp], -1223996378 ; b70b4c26H
  0125f	75 07		 jne	 SHORT $LN51@TestLegacy

; 1238 : 				return FALSE;

  01261	33 c0		 xor	 eax, eax
  01263	e9 a0 0b 00 00	 jmp	 $LN144@TestLegacy
$LN51@TestLegacy:

; 1239 : 
; 1240 : 			DecryptDataUnits (buf, &unitNo, nbrUnits, ci);

  01268	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  0126b	50		 push	 eax
  0126c	8b 8d 9c fb ff
	ff		 mov	 ecx, DWORD PTR _nbrUnits$[ebp]
  01272	51		 push	 ecx
  01273	8d 55 e8	 lea	 edx, DWORD PTR _unitNo$[ebp]
  01276	52		 push	 edx
  01277	8d 85 a0 fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0127d	50		 push	 eax
  0127e	e8 00 00 00 00	 call	 _DecryptDataUnits@16

; 1241 : 
; 1242 : 			if (GetCrc32 (buf, sizeof (buf)) != 0xb70b4c26)

  01283	68 00 04 00 00	 push	 1024			; 00000400H
  01288	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  0128e	51		 push	 ecx
  0128f	e8 00 00 00 00	 call	 _GetCrc32@8
  01294	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  01299	74 07		 je	 SHORT $LN50@TestLegacy

; 1243 : 				return FALSE;

  0129b	33 c0		 xor	 eax, eax
  0129d	e9 66 0b 00 00	 jmp	 $LN144@TestLegacy
$LN50@TestLegacy:

; 1244 : 
; 1245 : 			nTestsPerformed++;

  012a2	8b 95 98 fb ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  012a8	83 c2 01	 add	 edx, 1
  012ab	89 95 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx

; 1246 : 
; 1247 : 			EncryptBuffer (buf, sizeof (buf), ci);

  012b1	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  012b4	50		 push	 eax
  012b5	6a 00		 push	 0
  012b7	68 00 04 00 00	 push	 1024			; 00000400H
  012bc	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  012c2	51		 push	 ecx
  012c3	e8 00 00 00 00	 call	 _EncryptBuffer@16

; 1248 : 			crc = GetCrc32 (buf, sizeof (buf));

  012c8	68 00 04 00 00	 push	 1024			; 00000400H
  012cd	8d 95 a0 fb ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  012d3	52		 push	 edx
  012d4	e8 00 00 00 00	 call	 _GetCrc32@8
  012d9	89 45 fc	 mov	 DWORD PTR _crc$[ebp], eax

; 1249 : 
; 1250 : 			switch (ci->mode)

  012dc	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  012df	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  012e2	89 8d bc f9 ff
	ff		 mov	 DWORD PTR tv332[ebp], ecx
  012e8	83 bd bc f9 ff
	ff 02		 cmp	 DWORD PTR tv332[ebp], 2
  012ef	74 1f		 je	 SHORT $LN47@TestLegacy
  012f1	83 bd bc f9 ff
	ff 02		 cmp	 DWORD PTR tv332[ebp], 2
  012f8	0f 8e a5 0a 00
	00		 jle	 $LN48@TestLegacy
  012fe	83 bd bc f9 ff
	ff 05		 cmp	 DWORD PTR tv332[ebp], 5
  01305	0f 8e 24 02 00
	00		 jle	 $LN38@TestLegacy
  0130b	e9 93 0a 00 00	 jmp	 $LN48@TestLegacy
$LN47@TestLegacy:

; 1251 : 			{
; 1252 : 			case LRW:		// Deprecated/legacy
; 1253 : 				if (strcmp (name, "AES") == 0)

  01310	c7 85 b8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1073[ebp], OFFSET ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  0131a	8d 55 a0	 lea	 edx, DWORD PTR _name$[ebp]
  0131d	89 95 b4 f9 ff
	ff		 mov	 DWORD PTR tv1071[ebp], edx
$LL238@TestLegacy:
  01323	8b 85 b4 f9 ff
	ff		 mov	 eax, DWORD PTR tv1071[ebp]
  01329	8a 08		 mov	 cl, BYTE PTR [eax]
  0132b	88 8d b3 f9 ff
	ff		 mov	 BYTE PTR tv1076[ebp], cl
  01331	8b 95 b8 f9 ff
	ff		 mov	 edx, DWORD PTR tv1073[ebp]
  01337	3a 0a		 cmp	 cl, BYTE PTR [edx]
  01339	75 46		 jne	 SHORT $LN239@TestLegacy
  0133b	80 bd b3 f9 ff
	ff 00		 cmp	 BYTE PTR tv1076[ebp], 0
  01342	74 31		 je	 SHORT $LN240@TestLegacy
  01344	8b 85 b4 f9 ff
	ff		 mov	 eax, DWORD PTR tv1071[ebp]
  0134a	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0134d	88 8d b2 f9 ff
	ff		 mov	 BYTE PTR tv1083[ebp], cl
  01353	8b 95 b8 f9 ff
	ff		 mov	 edx, DWORD PTR tv1073[ebp]
  01359	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  0135c	75 23		 jne	 SHORT $LN239@TestLegacy
  0135e	83 85 b4 f9 ff
	ff 02		 add	 DWORD PTR tv1071[ebp], 2
  01365	83 85 b8 f9 ff
	ff 02		 add	 DWORD PTR tv1073[ebp], 2
  0136c	80 bd b2 f9 ff
	ff 00		 cmp	 BYTE PTR tv1083[ebp], 0
  01373	75 ae		 jne	 SHORT $LL238@TestLegacy
$LN240@TestLegacy:
  01375	c7 85 ac f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1088[ebp], 0
  0137f	eb 0b		 jmp	 SHORT $LN241@TestLegacy
$LN239@TestLegacy:
  01381	1b c0		 sbb	 eax, eax
  01383	83 d8 ff	 sbb	 eax, -1
  01386	89 85 ac f9 ff
	ff		 mov	 DWORD PTR tv1088[ebp], eax
$LN241@TestLegacy:
  0138c	8b 8d ac f9 ff
	ff		 mov	 ecx, DWORD PTR tv1088[ebp]
  01392	89 8d a8 f9 ff
	ff		 mov	 DWORD PTR tv336[ebp], ecx
  01398	83 bd a8 f9 ff
	ff 00		 cmp	 DWORD PTR tv336[ebp], 0
  0139f	75 24		 jne	 SHORT $LN46@TestLegacy

; 1254 : 				{
; 1255 : 					if (crc != 0x5ae1e3d8)

  013a1	81 7d fc d8 e3
	e1 5a		 cmp	 DWORD PTR _crc$[ebp], 1524753368 ; 5ae1e3d8H
  013a8	74 07		 je	 SHORT $LN45@TestLegacy

; 1256 : 						return FALSE;

  013aa	33 c0		 xor	 eax, eax
  013ac	e9 57 0a 00 00	 jmp	 $LN144@TestLegacy
$LN45@TestLegacy:

; 1257 : 					nTestsPerformed++;

  013b1	8b 95 98 fb ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  013b7	83 c2 01	 add	 edx, 1
  013ba	89 95 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx
  013c0	e9 65 01 00 00	 jmp	 $LN44@TestLegacy
$LN46@TestLegacy:

; 1258 : 				}
; 1259 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  013c5	c7 85 a4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1097[ebp], OFFSET ??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
  013cf	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  013d2	89 85 a0 f9 ff
	ff		 mov	 DWORD PTR tv1095[ebp], eax
$LL242@TestLegacy:
  013d8	8b 8d a0 f9 ff
	ff		 mov	 ecx, DWORD PTR tv1095[ebp]
  013de	8a 11		 mov	 dl, BYTE PTR [ecx]
  013e0	88 95 9f f9 ff
	ff		 mov	 BYTE PTR tv1100[ebp], dl
  013e6	8b 85 a4 f9 ff
	ff		 mov	 eax, DWORD PTR tv1097[ebp]
  013ec	3a 10		 cmp	 dl, BYTE PTR [eax]
  013ee	75 46		 jne	 SHORT $LN243@TestLegacy
  013f0	80 bd 9f f9 ff
	ff 00		 cmp	 BYTE PTR tv1100[ebp], 0
  013f7	74 31		 je	 SHORT $LN244@TestLegacy
  013f9	8b 8d a0 f9 ff
	ff		 mov	 ecx, DWORD PTR tv1095[ebp]
  013ff	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  01402	88 95 9e f9 ff
	ff		 mov	 BYTE PTR tv1107[ebp], dl
  01408	8b 85 a4 f9 ff
	ff		 mov	 eax, DWORD PTR tv1097[ebp]
  0140e	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  01411	75 23		 jne	 SHORT $LN243@TestLegacy
  01413	83 85 a0 f9 ff
	ff 02		 add	 DWORD PTR tv1095[ebp], 2
  0141a	83 85 a4 f9 ff
	ff 02		 add	 DWORD PTR tv1097[ebp], 2
  01421	80 bd 9e f9 ff
	ff 00		 cmp	 BYTE PTR tv1107[ebp], 0
  01428	75 ae		 jne	 SHORT $LL242@TestLegacy
$LN244@TestLegacy:
  0142a	c7 85 98 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1112[ebp], 0
  01434	eb 0b		 jmp	 SHORT $LN245@TestLegacy
$LN243@TestLegacy:
  01436	1b c9		 sbb	 ecx, ecx
  01438	83 d9 ff	 sbb	 ecx, -1
  0143b	89 8d 98 f9 ff
	ff		 mov	 DWORD PTR tv1112[ebp], ecx
$LN245@TestLegacy:
  01441	8b 95 98 f9 ff
	ff		 mov	 edx, DWORD PTR tv1112[ebp]
  01447	89 95 94 f9 ff
	ff		 mov	 DWORD PTR tv343[ebp], edx
  0144d	83 bd 94 f9 ff
	ff 00		 cmp	 DWORD PTR tv343[ebp], 0
  01454	75 24		 jne	 SHORT $LN43@TestLegacy

; 1260 : 				{
; 1261 : 					if (crc != 0x2738426f)

  01456	81 7d fc 6f 42
	38 27		 cmp	 DWORD PTR _crc$[ebp], 657998447 ; 2738426fH
  0145d	74 07		 je	 SHORT $LN42@TestLegacy

; 1262 : 						return FALSE;

  0145f	33 c0		 xor	 eax, eax
  01461	e9 a2 09 00 00	 jmp	 $LN144@TestLegacy
$LN42@TestLegacy:

; 1263 : 					nTestsPerformed++;

  01466	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  0146c	83 c0 01	 add	 eax, 1
  0146f	89 85 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
  01475	e9 b0 00 00 00	 jmp	 $LN44@TestLegacy
$LN43@TestLegacy:

; 1264 : 				}
; 1265 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  0147a	c7 85 90 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1121[ebp], OFFSET ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  01484	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  01487	89 8d 8c f9 ff
	ff		 mov	 DWORD PTR tv1119[ebp], ecx
$LL246@TestLegacy:
  0148d	8b 95 8c f9 ff
	ff		 mov	 edx, DWORD PTR tv1119[ebp]
  01493	8a 02		 mov	 al, BYTE PTR [edx]
  01495	88 85 8b f9 ff
	ff		 mov	 BYTE PTR tv1124[ebp], al
  0149b	8b 8d 90 f9 ff
	ff		 mov	 ecx, DWORD PTR tv1121[ebp]
  014a1	3a 01		 cmp	 al, BYTE PTR [ecx]
  014a3	75 46		 jne	 SHORT $LN247@TestLegacy
  014a5	80 bd 8b f9 ff
	ff 00		 cmp	 BYTE PTR tv1124[ebp], 0
  014ac	74 31		 je	 SHORT $LN248@TestLegacy
  014ae	8b 95 8c f9 ff
	ff		 mov	 edx, DWORD PTR tv1119[ebp]
  014b4	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  014b7	88 85 8a f9 ff
	ff		 mov	 BYTE PTR tv1131[ebp], al
  014bd	8b 8d 90 f9 ff
	ff		 mov	 ecx, DWORD PTR tv1121[ebp]
  014c3	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  014c6	75 23		 jne	 SHORT $LN247@TestLegacy
  014c8	83 85 8c f9 ff
	ff 02		 add	 DWORD PTR tv1119[ebp], 2
  014cf	83 85 90 f9 ff
	ff 02		 add	 DWORD PTR tv1121[ebp], 2
  014d6	80 bd 8a f9 ff
	ff 00		 cmp	 BYTE PTR tv1131[ebp], 0
  014dd	75 ae		 jne	 SHORT $LL246@TestLegacy
$LN248@TestLegacy:
  014df	c7 85 84 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1136[ebp], 0
  014e9	eb 0b		 jmp	 SHORT $LN249@TestLegacy
$LN247@TestLegacy:
  014eb	1b d2		 sbb	 edx, edx
  014ed	83 da ff	 sbb	 edx, -1
  014f0	89 95 84 f9 ff
	ff		 mov	 DWORD PTR tv1136[ebp], edx
$LN249@TestLegacy:
  014f6	8b 85 84 f9 ff
	ff		 mov	 eax, DWORD PTR tv1136[ebp]
  014fc	89 85 80 f9 ff
	ff		 mov	 DWORD PTR tv350[ebp], eax
  01502	83 bd 80 f9 ff
	ff 00		 cmp	 DWORD PTR tv350[ebp], 0
  01509	75 1f		 jne	 SHORT $LN44@TestLegacy

; 1266 : 				{
; 1267 : 					if (crc != 0x14f2948a)

  0150b	81 7d fc 8a 94
	f2 14		 cmp	 DWORD PTR _crc$[ebp], 351442058 ; 14f2948aH
  01512	74 07		 je	 SHORT $LN39@TestLegacy

; 1268 : 						return FALSE;

  01514	33 c0		 xor	 eax, eax
  01516	e9 ed 08 00 00	 jmp	 $LN144@TestLegacy
$LN39@TestLegacy:

; 1269 : 					nTestsPerformed++;

  0151b	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  01521	83 c1 01	 add	 ecx, 1
  01524	89 8d 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
$LN44@TestLegacy:

; 1270 : 				}
; 1271 : 				break;

  0152a	e9 74 08 00 00	 jmp	 $LN48@TestLegacy
$LN38@TestLegacy:

; 1272 : 
; 1273 : 			case CBC:		// Deprecated/legacy
; 1274 : 			case INNER_CBC:	// Deprecated/legacy
; 1275 : 			case OUTER_CBC:	// Deprecated/legacy
; 1276 : 				if (strcmp (name, "AES") == 0)

  0152f	c7 85 7c f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1145[ebp], OFFSET ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  01539	8d 55 a0	 lea	 edx, DWORD PTR _name$[ebp]
  0153c	89 95 78 f9 ff
	ff		 mov	 DWORD PTR tv1143[ebp], edx
$LL250@TestLegacy:
  01542	8b 85 78 f9 ff
	ff		 mov	 eax, DWORD PTR tv1143[ebp]
  01548	8a 08		 mov	 cl, BYTE PTR [eax]
  0154a	88 8d 77 f9 ff
	ff		 mov	 BYTE PTR tv1148[ebp], cl
  01550	8b 95 7c f9 ff
	ff		 mov	 edx, DWORD PTR tv1145[ebp]
  01556	3a 0a		 cmp	 cl, BYTE PTR [edx]
  01558	75 46		 jne	 SHORT $LN251@TestLegacy
  0155a	80 bd 77 f9 ff
	ff 00		 cmp	 BYTE PTR tv1148[ebp], 0
  01561	74 31		 je	 SHORT $LN252@TestLegacy
  01563	8b 85 78 f9 ff
	ff		 mov	 eax, DWORD PTR tv1143[ebp]
  01569	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0156c	88 8d 76 f9 ff
	ff		 mov	 BYTE PTR tv1155[ebp], cl
  01572	8b 95 7c f9 ff
	ff		 mov	 edx, DWORD PTR tv1145[ebp]
  01578	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  0157b	75 23		 jne	 SHORT $LN251@TestLegacy
  0157d	83 85 78 f9 ff
	ff 02		 add	 DWORD PTR tv1143[ebp], 2
  01584	83 85 7c f9 ff
	ff 02		 add	 DWORD PTR tv1145[ebp], 2
  0158b	80 bd 76 f9 ff
	ff 00		 cmp	 BYTE PTR tv1155[ebp], 0
  01592	75 ae		 jne	 SHORT $LL250@TestLegacy
$LN252@TestLegacy:
  01594	c7 85 70 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1160[ebp], 0
  0159e	eb 0b		 jmp	 SHORT $LN253@TestLegacy
$LN251@TestLegacy:
  015a0	1b c0		 sbb	 eax, eax
  015a2	83 d8 ff	 sbb	 eax, -1
  015a5	89 85 70 f9 ff
	ff		 mov	 DWORD PTR tv1160[ebp], eax
$LN253@TestLegacy:
  015ab	8b 8d 70 f9 ff
	ff		 mov	 ecx, DWORD PTR tv1160[ebp]
  015b1	89 8d 6c f9 ff
	ff		 mov	 DWORD PTR tv357[ebp], ecx
  015b7	83 bd 6c f9 ff
	ff 00		 cmp	 DWORD PTR tv357[ebp], 0
  015be	75 24		 jne	 SHORT $LN37@TestLegacy

; 1277 : 				{
; 1278 : 					if (crc != 0x960f740e)

  015c0	81 7d fc 0e 74
	0f 96		 cmp	 DWORD PTR _crc$[ebp], -1777372146 ; 960f740eH
  015c7	74 07		 je	 SHORT $LN36@TestLegacy

; 1279 : 						return FALSE;

  015c9	33 c0		 xor	 eax, eax
  015cb	e9 38 08 00 00	 jmp	 $LN144@TestLegacy
$LN36@TestLegacy:

; 1280 : 					nTestsPerformed++;

  015d0	8b 95 98 fb ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  015d6	83 c2 01	 add	 edx, 1
  015d9	89 95 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx
  015df	e9 bf 07 00 00	 jmp	 $LN48@TestLegacy
$LN37@TestLegacy:

; 1281 : 				}
; 1282 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  015e4	c7 85 68 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1169[ebp], OFFSET ??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
  015ee	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  015f1	89 85 64 f9 ff
	ff		 mov	 DWORD PTR tv1167[ebp], eax
$LL254@TestLegacy:
  015f7	8b 8d 64 f9 ff
	ff		 mov	 ecx, DWORD PTR tv1167[ebp]
  015fd	8a 11		 mov	 dl, BYTE PTR [ecx]
  015ff	88 95 63 f9 ff
	ff		 mov	 BYTE PTR tv1172[ebp], dl
  01605	8b 85 68 f9 ff
	ff		 mov	 eax, DWORD PTR tv1169[ebp]
  0160b	3a 10		 cmp	 dl, BYTE PTR [eax]
  0160d	75 46		 jne	 SHORT $LN255@TestLegacy
  0160f	80 bd 63 f9 ff
	ff 00		 cmp	 BYTE PTR tv1172[ebp], 0
  01616	74 31		 je	 SHORT $LN256@TestLegacy
  01618	8b 8d 64 f9 ff
	ff		 mov	 ecx, DWORD PTR tv1167[ebp]
  0161e	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  01621	88 95 62 f9 ff
	ff		 mov	 BYTE PTR tv1179[ebp], dl
  01627	8b 85 68 f9 ff
	ff		 mov	 eax, DWORD PTR tv1169[ebp]
  0162d	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  01630	75 23		 jne	 SHORT $LN255@TestLegacy
  01632	83 85 64 f9 ff
	ff 02		 add	 DWORD PTR tv1167[ebp], 2
  01639	83 85 68 f9 ff
	ff 02		 add	 DWORD PTR tv1169[ebp], 2
  01640	80 bd 62 f9 ff
	ff 00		 cmp	 BYTE PTR tv1179[ebp], 0
  01647	75 ae		 jne	 SHORT $LL254@TestLegacy
$LN256@TestLegacy:
  01649	c7 85 5c f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1184[ebp], 0
  01653	eb 0b		 jmp	 SHORT $LN257@TestLegacy
$LN255@TestLegacy:
  01655	1b c9		 sbb	 ecx, ecx
  01657	83 d9 ff	 sbb	 ecx, -1
  0165a	89 8d 5c f9 ff
	ff		 mov	 DWORD PTR tv1184[ebp], ecx
$LN257@TestLegacy:
  01660	8b 95 5c f9 ff
	ff		 mov	 edx, DWORD PTR tv1184[ebp]
  01666	89 95 58 f9 ff
	ff		 mov	 DWORD PTR tv364[ebp], edx
  0166c	83 bd 58 f9 ff
	ff 00		 cmp	 DWORD PTR tv364[ebp], 0
  01673	75 24		 jne	 SHORT $LN34@TestLegacy

; 1283 : 				{
; 1284 : 					if (crc != 0x7e1cfabb)

  01675	81 7d fc bb fa
	1c 7e		 cmp	 DWORD PTR _crc$[ebp], 2115828411 ; 7e1cfabbH
  0167c	74 07		 je	 SHORT $LN33@TestLegacy

; 1285 : 						return FALSE;

  0167e	33 c0		 xor	 eax, eax
  01680	e9 83 07 00 00	 jmp	 $LN144@TestLegacy
$LN33@TestLegacy:

; 1286 : 					nTestsPerformed++;

  01685	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  0168b	83 c0 01	 add	 eax, 1
  0168e	89 85 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
  01694	e9 0a 07 00 00	 jmp	 $LN48@TestLegacy
$LN34@TestLegacy:

; 1287 : 				}
; 1288 : 				else if (strcmp (name, "CAST5") == 0)	// Deprecated/legacy

  01699	c7 85 54 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1193[ebp], OFFSET ??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@
  016a3	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  016a6	89 8d 50 f9 ff
	ff		 mov	 DWORD PTR tv1191[ebp], ecx
$LL258@TestLegacy:
  016ac	8b 95 50 f9 ff
	ff		 mov	 edx, DWORD PTR tv1191[ebp]
  016b2	8a 02		 mov	 al, BYTE PTR [edx]
  016b4	88 85 4f f9 ff
	ff		 mov	 BYTE PTR tv1196[ebp], al
  016ba	8b 8d 54 f9 ff
	ff		 mov	 ecx, DWORD PTR tv1193[ebp]
  016c0	3a 01		 cmp	 al, BYTE PTR [ecx]
  016c2	75 46		 jne	 SHORT $LN259@TestLegacy
  016c4	80 bd 4f f9 ff
	ff 00		 cmp	 BYTE PTR tv1196[ebp], 0
  016cb	74 31		 je	 SHORT $LN260@TestLegacy
  016cd	8b 95 50 f9 ff
	ff		 mov	 edx, DWORD PTR tv1191[ebp]
  016d3	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  016d6	88 85 4e f9 ff
	ff		 mov	 BYTE PTR tv1203[ebp], al
  016dc	8b 8d 54 f9 ff
	ff		 mov	 ecx, DWORD PTR tv1193[ebp]
  016e2	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  016e5	75 23		 jne	 SHORT $LN259@TestLegacy
  016e7	83 85 50 f9 ff
	ff 02		 add	 DWORD PTR tv1191[ebp], 2
  016ee	83 85 54 f9 ff
	ff 02		 add	 DWORD PTR tv1193[ebp], 2
  016f5	80 bd 4e f9 ff
	ff 00		 cmp	 BYTE PTR tv1203[ebp], 0
  016fc	75 ae		 jne	 SHORT $LL258@TestLegacy
$LN260@TestLegacy:
  016fe	c7 85 48 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1208[ebp], 0
  01708	eb 0b		 jmp	 SHORT $LN261@TestLegacy
$LN259@TestLegacy:
  0170a	1b d2		 sbb	 edx, edx
  0170c	83 da ff	 sbb	 edx, -1
  0170f	89 95 48 f9 ff
	ff		 mov	 DWORD PTR tv1208[ebp], edx
$LN261@TestLegacy:
  01715	8b 85 48 f9 ff
	ff		 mov	 eax, DWORD PTR tv1208[ebp]
  0171b	89 85 44 f9 ff
	ff		 mov	 DWORD PTR tv371[ebp], eax
  01721	83 bd 44 f9 ff
	ff 00		 cmp	 DWORD PTR tv371[ebp], 0
  01728	75 24		 jne	 SHORT $LN31@TestLegacy

; 1289 : 				{
; 1290 : 					if (crc != 0xeaae21c8)

  0172a	81 7d fc c8 21
	ae ea		 cmp	 DWORD PTR _crc$[ebp], -357686840 ; eaae21c8H
  01731	74 07		 je	 SHORT $LN30@TestLegacy

; 1291 : 						return FALSE;

  01733	33 c0		 xor	 eax, eax
  01735	e9 ce 06 00 00	 jmp	 $LN144@TestLegacy
$LN30@TestLegacy:

; 1292 : 					nTestsPerformed++;

  0173a	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  01740	83 c1 01	 add	 ecx, 1
  01743	89 8d 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
  01749	e9 55 06 00 00	 jmp	 $LN48@TestLegacy
$LN31@TestLegacy:

; 1293 : 				}
; 1294 : 				else if (strcmp (name, "Serpent") == 0)

  0174e	c7 85 40 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1217[ebp], OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  01758	8d 55 a0	 lea	 edx, DWORD PTR _name$[ebp]
  0175b	89 95 3c f9 ff
	ff		 mov	 DWORD PTR tv1215[ebp], edx
$LL262@TestLegacy:
  01761	8b 85 3c f9 ff
	ff		 mov	 eax, DWORD PTR tv1215[ebp]
  01767	8a 08		 mov	 cl, BYTE PTR [eax]
  01769	88 8d 3b f9 ff
	ff		 mov	 BYTE PTR tv1220[ebp], cl
  0176f	8b 95 40 f9 ff
	ff		 mov	 edx, DWORD PTR tv1217[ebp]
  01775	3a 0a		 cmp	 cl, BYTE PTR [edx]
  01777	75 46		 jne	 SHORT $LN263@TestLegacy
  01779	80 bd 3b f9 ff
	ff 00		 cmp	 BYTE PTR tv1220[ebp], 0
  01780	74 31		 je	 SHORT $LN264@TestLegacy
  01782	8b 85 3c f9 ff
	ff		 mov	 eax, DWORD PTR tv1215[ebp]
  01788	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0178b	88 8d 3a f9 ff
	ff		 mov	 BYTE PTR tv1227[ebp], cl
  01791	8b 95 40 f9 ff
	ff		 mov	 edx, DWORD PTR tv1217[ebp]
  01797	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  0179a	75 23		 jne	 SHORT $LN263@TestLegacy
  0179c	83 85 3c f9 ff
	ff 02		 add	 DWORD PTR tv1215[ebp], 2
  017a3	83 85 40 f9 ff
	ff 02		 add	 DWORD PTR tv1217[ebp], 2
  017aa	80 bd 3a f9 ff
	ff 00		 cmp	 BYTE PTR tv1227[ebp], 0
  017b1	75 ae		 jne	 SHORT $LL262@TestLegacy
$LN264@TestLegacy:
  017b3	c7 85 34 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1232[ebp], 0
  017bd	eb 0b		 jmp	 SHORT $LN265@TestLegacy
$LN263@TestLegacy:
  017bf	1b c0		 sbb	 eax, eax
  017c1	83 d8 ff	 sbb	 eax, -1
  017c4	89 85 34 f9 ff
	ff		 mov	 DWORD PTR tv1232[ebp], eax
$LN265@TestLegacy:
  017ca	8b 8d 34 f9 ff
	ff		 mov	 ecx, DWORD PTR tv1232[ebp]
  017d0	89 8d 30 f9 ff
	ff		 mov	 DWORD PTR tv378[ebp], ecx
  017d6	83 bd 30 f9 ff
	ff 00		 cmp	 DWORD PTR tv378[ebp], 0
  017dd	75 24		 jne	 SHORT $LN28@TestLegacy

; 1295 : 				{
; 1296 : 					if (crc != 0xa8139d62)

  017df	81 7d fc 62 9d
	13 a8		 cmp	 DWORD PTR _crc$[ebp], -1475109534 ; a8139d62H
  017e6	74 07		 je	 SHORT $LN27@TestLegacy

; 1297 : 						return FALSE;

  017e8	33 c0		 xor	 eax, eax
  017ea	e9 19 06 00 00	 jmp	 $LN144@TestLegacy
$LN27@TestLegacy:

; 1298 : 					nTestsPerformed++;

  017ef	8b 95 98 fb ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  017f5	83 c2 01	 add	 edx, 1
  017f8	89 95 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx
  017fe	e9 a0 05 00 00	 jmp	 $LN48@TestLegacy
$LN28@TestLegacy:

; 1299 : 				}
; 1300 : 				else if (strcmp (name, "Triple DES") == 0)	// Deprecated/legacy

  01803	c7 85 2c f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1241[ebp], OFFSET ??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@
  0180d	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  01810	89 85 28 f9 ff
	ff		 mov	 DWORD PTR tv1239[ebp], eax
$LL266@TestLegacy:
  01816	8b 8d 28 f9 ff
	ff		 mov	 ecx, DWORD PTR tv1239[ebp]
  0181c	8a 11		 mov	 dl, BYTE PTR [ecx]
  0181e	88 95 27 f9 ff
	ff		 mov	 BYTE PTR tv1244[ebp], dl
  01824	8b 85 2c f9 ff
	ff		 mov	 eax, DWORD PTR tv1241[ebp]
  0182a	3a 10		 cmp	 dl, BYTE PTR [eax]
  0182c	75 46		 jne	 SHORT $LN267@TestLegacy
  0182e	80 bd 27 f9 ff
	ff 00		 cmp	 BYTE PTR tv1244[ebp], 0
  01835	74 31		 je	 SHORT $LN268@TestLegacy
  01837	8b 8d 28 f9 ff
	ff		 mov	 ecx, DWORD PTR tv1239[ebp]
  0183d	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  01840	88 95 26 f9 ff
	ff		 mov	 BYTE PTR tv1251[ebp], dl
  01846	8b 85 2c f9 ff
	ff		 mov	 eax, DWORD PTR tv1241[ebp]
  0184c	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  0184f	75 23		 jne	 SHORT $LN267@TestLegacy
  01851	83 85 28 f9 ff
	ff 02		 add	 DWORD PTR tv1239[ebp], 2
  01858	83 85 2c f9 ff
	ff 02		 add	 DWORD PTR tv1241[ebp], 2
  0185f	80 bd 26 f9 ff
	ff 00		 cmp	 BYTE PTR tv1251[ebp], 0
  01866	75 ae		 jne	 SHORT $LL266@TestLegacy
$LN268@TestLegacy:
  01868	c7 85 20 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1256[ebp], 0
  01872	eb 0b		 jmp	 SHORT $LN269@TestLegacy
$LN267@TestLegacy:
  01874	1b c9		 sbb	 ecx, ecx
  01876	83 d9 ff	 sbb	 ecx, -1
  01879	89 8d 20 f9 ff
	ff		 mov	 DWORD PTR tv1256[ebp], ecx
$LN269@TestLegacy:
  0187f	8b 95 20 f9 ff
	ff		 mov	 edx, DWORD PTR tv1256[ebp]
  01885	89 95 1c f9 ff
	ff		 mov	 DWORD PTR tv385[ebp], edx
  0188b	83 bd 1c f9 ff
	ff 00		 cmp	 DWORD PTR tv385[ebp], 0
  01892	75 24		 jne	 SHORT $LN25@TestLegacy

; 1301 : 				{
; 1302 : 					if (crc != 0xecf5d7d0)

  01894	81 7d fc d0 d7
	f5 ec		 cmp	 DWORD PTR _crc$[ebp], -319432752 ; ecf5d7d0H
  0189b	74 07		 je	 SHORT $LN24@TestLegacy

; 1303 : 						return FALSE;

  0189d	33 c0		 xor	 eax, eax
  0189f	e9 64 05 00 00	 jmp	 $LN144@TestLegacy
$LN24@TestLegacy:

; 1304 : 					nTestsPerformed++;

  018a4	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  018aa	83 c0 01	 add	 eax, 1
  018ad	89 85 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
  018b3	e9 eb 04 00 00	 jmp	 $LN48@TestLegacy
$LN25@TestLegacy:

; 1305 : 				}
; 1306 : 				else if (strcmp (name, "AES-Blowfish") == 0)	// Deprecated/legacy

  018b8	c7 85 18 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1265[ebp], OFFSET ??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@
  018c2	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  018c5	89 8d 14 f9 ff
	ff		 mov	 DWORD PTR tv1263[ebp], ecx
$LL270@TestLegacy:
  018cb	8b 95 14 f9 ff
	ff		 mov	 edx, DWORD PTR tv1263[ebp]
  018d1	8a 02		 mov	 al, BYTE PTR [edx]
  018d3	88 85 13 f9 ff
	ff		 mov	 BYTE PTR tv1268[ebp], al
  018d9	8b 8d 18 f9 ff
	ff		 mov	 ecx, DWORD PTR tv1265[ebp]
  018df	3a 01		 cmp	 al, BYTE PTR [ecx]
  018e1	75 46		 jne	 SHORT $LN271@TestLegacy
  018e3	80 bd 13 f9 ff
	ff 00		 cmp	 BYTE PTR tv1268[ebp], 0
  018ea	74 31		 je	 SHORT $LN272@TestLegacy
  018ec	8b 95 14 f9 ff
	ff		 mov	 edx, DWORD PTR tv1263[ebp]
  018f2	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  018f5	88 85 12 f9 ff
	ff		 mov	 BYTE PTR tv1275[ebp], al
  018fb	8b 8d 18 f9 ff
	ff		 mov	 ecx, DWORD PTR tv1265[ebp]
  01901	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  01904	75 23		 jne	 SHORT $LN271@TestLegacy
  01906	83 85 14 f9 ff
	ff 02		 add	 DWORD PTR tv1263[ebp], 2
  0190d	83 85 18 f9 ff
	ff 02		 add	 DWORD PTR tv1265[ebp], 2
  01914	80 bd 12 f9 ff
	ff 00		 cmp	 BYTE PTR tv1275[ebp], 0
  0191b	75 ae		 jne	 SHORT $LL270@TestLegacy
$LN272@TestLegacy:
  0191d	c7 85 0c f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1280[ebp], 0
  01927	eb 0b		 jmp	 SHORT $LN273@TestLegacy
$LN271@TestLegacy:
  01929	1b d2		 sbb	 edx, edx
  0192b	83 da ff	 sbb	 edx, -1
  0192e	89 95 0c f9 ff
	ff		 mov	 DWORD PTR tv1280[ebp], edx
$LN273@TestLegacy:
  01934	8b 85 0c f9 ff
	ff		 mov	 eax, DWORD PTR tv1280[ebp]
  0193a	89 85 08 f9 ff
	ff		 mov	 DWORD PTR tv392[ebp], eax
  01940	83 bd 08 f9 ff
	ff 00		 cmp	 DWORD PTR tv392[ebp], 0
  01947	75 24		 jne	 SHORT $LN22@TestLegacy

; 1307 : 				{
; 1308 : 					if (crc != 0xb70171b6)

  01949	81 7d fc b6 71
	01 b7		 cmp	 DWORD PTR _crc$[ebp], -1224642122 ; b70171b6H
  01950	74 07		 je	 SHORT $LN21@TestLegacy

; 1309 : 						return FALSE;

  01952	33 c0		 xor	 eax, eax
  01954	e9 af 04 00 00	 jmp	 $LN144@TestLegacy
$LN21@TestLegacy:

; 1310 : 					nTestsPerformed++;

  01959	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  0195f	83 c1 01	 add	 ecx, 1
  01962	89 8d 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
  01968	e9 36 04 00 00	 jmp	 $LN48@TestLegacy
$LN22@TestLegacy:

; 1311 : 				}
; 1312 : 				else if (strcmp (name, "AES-Blowfish-Serpent") == 0)	// Deprecated/legacy

  0196d	c7 85 04 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1289[ebp], OFFSET ??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@
  01977	8d 55 a0	 lea	 edx, DWORD PTR _name$[ebp]
  0197a	89 95 00 f9 ff
	ff		 mov	 DWORD PTR tv1287[ebp], edx
$LL274@TestLegacy:
  01980	8b 85 00 f9 ff
	ff		 mov	 eax, DWORD PTR tv1287[ebp]
  01986	8a 08		 mov	 cl, BYTE PTR [eax]
  01988	88 8d ff f8 ff
	ff		 mov	 BYTE PTR tv1292[ebp], cl
  0198e	8b 95 04 f9 ff
	ff		 mov	 edx, DWORD PTR tv1289[ebp]
  01994	3a 0a		 cmp	 cl, BYTE PTR [edx]
  01996	75 46		 jne	 SHORT $LN275@TestLegacy
  01998	80 bd ff f8 ff
	ff 00		 cmp	 BYTE PTR tv1292[ebp], 0
  0199f	74 31		 je	 SHORT $LN276@TestLegacy
  019a1	8b 85 00 f9 ff
	ff		 mov	 eax, DWORD PTR tv1287[ebp]
  019a7	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  019aa	88 8d fe f8 ff
	ff		 mov	 BYTE PTR tv1299[ebp], cl
  019b0	8b 95 04 f9 ff
	ff		 mov	 edx, DWORD PTR tv1289[ebp]
  019b6	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  019b9	75 23		 jne	 SHORT $LN275@TestLegacy
  019bb	83 85 00 f9 ff
	ff 02		 add	 DWORD PTR tv1287[ebp], 2
  019c2	83 85 04 f9 ff
	ff 02		 add	 DWORD PTR tv1289[ebp], 2
  019c9	80 bd fe f8 ff
	ff 00		 cmp	 BYTE PTR tv1299[ebp], 0
  019d0	75 ae		 jne	 SHORT $LL274@TestLegacy
$LN276@TestLegacy:
  019d2	c7 85 f8 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1304[ebp], 0
  019dc	eb 0b		 jmp	 SHORT $LN277@TestLegacy
$LN275@TestLegacy:
  019de	1b c0		 sbb	 eax, eax
  019e0	83 d8 ff	 sbb	 eax, -1
  019e3	89 85 f8 f8 ff
	ff		 mov	 DWORD PTR tv1304[ebp], eax
$LN277@TestLegacy:
  019e9	8b 8d f8 f8 ff
	ff		 mov	 ecx, DWORD PTR tv1304[ebp]
  019ef	89 8d f4 f8 ff
	ff		 mov	 DWORD PTR tv399[ebp], ecx
  019f5	83 bd f4 f8 ff
	ff 00		 cmp	 DWORD PTR tv399[ebp], 0
  019fc	75 24		 jne	 SHORT $LN19@TestLegacy

; 1313 : 				{
; 1314 : 					if (crc != 0x1e749a87)

  019fe	81 7d fc 87 9a
	74 1e		 cmp	 DWORD PTR _crc$[ebp], 510958215 ; 1e749a87H
  01a05	74 07		 je	 SHORT $LN18@TestLegacy

; 1315 : 						return FALSE;

  01a07	33 c0		 xor	 eax, eax
  01a09	e9 fa 03 00 00	 jmp	 $LN144@TestLegacy
$LN18@TestLegacy:

; 1316 : 					nTestsPerformed++;

  01a0e	8b 95 98 fb ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  01a14	83 c2 01	 add	 edx, 1
  01a17	89 95 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx
  01a1d	e9 81 03 00 00	 jmp	 $LN48@TestLegacy
$LN19@TestLegacy:

; 1317 : 				}
; 1318 : 				else if (strcmp (name, "AES-Twofish") == 0)

  01a22	c7 85 f0 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1313[ebp], OFFSET ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  01a2c	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  01a2f	89 85 ec f8 ff
	ff		 mov	 DWORD PTR tv1311[ebp], eax
$LL278@TestLegacy:
  01a35	8b 8d ec f8 ff
	ff		 mov	 ecx, DWORD PTR tv1311[ebp]
  01a3b	8a 11		 mov	 dl, BYTE PTR [ecx]
  01a3d	88 95 eb f8 ff
	ff		 mov	 BYTE PTR tv1316[ebp], dl
  01a43	8b 85 f0 f8 ff
	ff		 mov	 eax, DWORD PTR tv1313[ebp]
  01a49	3a 10		 cmp	 dl, BYTE PTR [eax]
  01a4b	75 46		 jne	 SHORT $LN279@TestLegacy
  01a4d	80 bd eb f8 ff
	ff 00		 cmp	 BYTE PTR tv1316[ebp], 0
  01a54	74 31		 je	 SHORT $LN280@TestLegacy
  01a56	8b 8d ec f8 ff
	ff		 mov	 ecx, DWORD PTR tv1311[ebp]
  01a5c	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  01a5f	88 95 ea f8 ff
	ff		 mov	 BYTE PTR tv1323[ebp], dl
  01a65	8b 85 f0 f8 ff
	ff		 mov	 eax, DWORD PTR tv1313[ebp]
  01a6b	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  01a6e	75 23		 jne	 SHORT $LN279@TestLegacy
  01a70	83 85 ec f8 ff
	ff 02		 add	 DWORD PTR tv1311[ebp], 2
  01a77	83 85 f0 f8 ff
	ff 02		 add	 DWORD PTR tv1313[ebp], 2
  01a7e	80 bd ea f8 ff
	ff 00		 cmp	 BYTE PTR tv1323[ebp], 0
  01a85	75 ae		 jne	 SHORT $LL278@TestLegacy
$LN280@TestLegacy:
  01a87	c7 85 e4 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1328[ebp], 0
  01a91	eb 0b		 jmp	 SHORT $LN281@TestLegacy
$LN279@TestLegacy:
  01a93	1b c9		 sbb	 ecx, ecx
  01a95	83 d9 ff	 sbb	 ecx, -1
  01a98	89 8d e4 f8 ff
	ff		 mov	 DWORD PTR tv1328[ebp], ecx
$LN281@TestLegacy:
  01a9e	8b 95 e4 f8 ff
	ff		 mov	 edx, DWORD PTR tv1328[ebp]
  01aa4	89 95 e0 f8 ff
	ff		 mov	 DWORD PTR tv406[ebp], edx
  01aaa	83 bd e0 f8 ff
	ff 00		 cmp	 DWORD PTR tv406[ebp], 0
  01ab1	75 24		 jne	 SHORT $LN16@TestLegacy

; 1319 : 				{
; 1320 : 					if (crc != 0xb4b8bb9b)

  01ab3	81 7d fc 9b bb
	b8 b4		 cmp	 DWORD PTR _crc$[ebp], -1262961765 ; b4b8bb9bH
  01aba	74 07		 je	 SHORT $LN15@TestLegacy

; 1321 : 						return FALSE;

  01abc	33 c0		 xor	 eax, eax
  01abe	e9 45 03 00 00	 jmp	 $LN144@TestLegacy
$LN15@TestLegacy:

; 1322 : 					nTestsPerformed++;

  01ac3	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  01ac9	83 c0 01	 add	 eax, 1
  01acc	89 85 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
  01ad2	e9 cc 02 00 00	 jmp	 $LN48@TestLegacy
$LN16@TestLegacy:

; 1323 : 				}
; 1324 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  01ad7	c7 85 dc f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1337[ebp], OFFSET ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  01ae1	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  01ae4	89 8d d8 f8 ff
	ff		 mov	 DWORD PTR tv1335[ebp], ecx
$LL282@TestLegacy:
  01aea	8b 95 d8 f8 ff
	ff		 mov	 edx, DWORD PTR tv1335[ebp]
  01af0	8a 02		 mov	 al, BYTE PTR [edx]
  01af2	88 85 d7 f8 ff
	ff		 mov	 BYTE PTR tv1340[ebp], al
  01af8	8b 8d dc f8 ff
	ff		 mov	 ecx, DWORD PTR tv1337[ebp]
  01afe	3a 01		 cmp	 al, BYTE PTR [ecx]
  01b00	75 46		 jne	 SHORT $LN283@TestLegacy
  01b02	80 bd d7 f8 ff
	ff 00		 cmp	 BYTE PTR tv1340[ebp], 0
  01b09	74 31		 je	 SHORT $LN284@TestLegacy
  01b0b	8b 95 d8 f8 ff
	ff		 mov	 edx, DWORD PTR tv1335[ebp]
  01b11	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  01b14	88 85 d6 f8 ff
	ff		 mov	 BYTE PTR tv1347[ebp], al
  01b1a	8b 8d dc f8 ff
	ff		 mov	 ecx, DWORD PTR tv1337[ebp]
  01b20	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  01b23	75 23		 jne	 SHORT $LN283@TestLegacy
  01b25	83 85 d8 f8 ff
	ff 02		 add	 DWORD PTR tv1335[ebp], 2
  01b2c	83 85 dc f8 ff
	ff 02		 add	 DWORD PTR tv1337[ebp], 2
  01b33	80 bd d6 f8 ff
	ff 00		 cmp	 BYTE PTR tv1347[ebp], 0
  01b3a	75 ae		 jne	 SHORT $LL282@TestLegacy
$LN284@TestLegacy:
  01b3c	c7 85 d0 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1352[ebp], 0
  01b46	eb 0b		 jmp	 SHORT $LN285@TestLegacy
$LN283@TestLegacy:
  01b48	1b d2		 sbb	 edx, edx
  01b4a	83 da ff	 sbb	 edx, -1
  01b4d	89 95 d0 f8 ff
	ff		 mov	 DWORD PTR tv1352[ebp], edx
$LN285@TestLegacy:
  01b53	8b 85 d0 f8 ff
	ff		 mov	 eax, DWORD PTR tv1352[ebp]
  01b59	89 85 cc f8 ff
	ff		 mov	 DWORD PTR tv413[ebp], eax
  01b5f	83 bd cc f8 ff
	ff 00		 cmp	 DWORD PTR tv413[ebp], 0
  01b66	75 24		 jne	 SHORT $LN13@TestLegacy

; 1325 : 				{
; 1326 : 					if (crc != 0x76b6c1cb)

  01b68	81 7d fc cb c1
	b6 76		 cmp	 DWORD PTR _crc$[ebp], 1991688651 ; 76b6c1cbH
  01b6f	74 07		 je	 SHORT $LN12@TestLegacy

; 1327 : 						return FALSE;

  01b71	33 c0		 xor	 eax, eax
  01b73	e9 90 02 00 00	 jmp	 $LN144@TestLegacy
$LN12@TestLegacy:

; 1328 : 					nTestsPerformed++;

  01b78	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  01b7e	83 c1 01	 add	 ecx, 1
  01b81	89 8d 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
  01b87	e9 17 02 00 00	 jmp	 $LN48@TestLegacy
$LN13@TestLegacy:

; 1329 : 				}
; 1330 : 				else if (strcmp (name, "Serpent-AES") == 0)

  01b8c	c7 85 c8 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1361[ebp], OFFSET ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  01b96	8d 55 a0	 lea	 edx, DWORD PTR _name$[ebp]
  01b99	89 95 c4 f8 ff
	ff		 mov	 DWORD PTR tv1359[ebp], edx
$LL286@TestLegacy:
  01b9f	8b 85 c4 f8 ff
	ff		 mov	 eax, DWORD PTR tv1359[ebp]
  01ba5	8a 08		 mov	 cl, BYTE PTR [eax]
  01ba7	88 8d c3 f8 ff
	ff		 mov	 BYTE PTR tv1364[ebp], cl
  01bad	8b 95 c8 f8 ff
	ff		 mov	 edx, DWORD PTR tv1361[ebp]
  01bb3	3a 0a		 cmp	 cl, BYTE PTR [edx]
  01bb5	75 46		 jne	 SHORT $LN287@TestLegacy
  01bb7	80 bd c3 f8 ff
	ff 00		 cmp	 BYTE PTR tv1364[ebp], 0
  01bbe	74 31		 je	 SHORT $LN288@TestLegacy
  01bc0	8b 85 c4 f8 ff
	ff		 mov	 eax, DWORD PTR tv1359[ebp]
  01bc6	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  01bc9	88 8d c2 f8 ff
	ff		 mov	 BYTE PTR tv1371[ebp], cl
  01bcf	8b 95 c8 f8 ff
	ff		 mov	 edx, DWORD PTR tv1361[ebp]
  01bd5	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  01bd8	75 23		 jne	 SHORT $LN287@TestLegacy
  01bda	83 85 c4 f8 ff
	ff 02		 add	 DWORD PTR tv1359[ebp], 2
  01be1	83 85 c8 f8 ff
	ff 02		 add	 DWORD PTR tv1361[ebp], 2
  01be8	80 bd c2 f8 ff
	ff 00		 cmp	 BYTE PTR tv1371[ebp], 0
  01bef	75 ae		 jne	 SHORT $LL286@TestLegacy
$LN288@TestLegacy:
  01bf1	c7 85 bc f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1376[ebp], 0
  01bfb	eb 0b		 jmp	 SHORT $LN289@TestLegacy
$LN287@TestLegacy:
  01bfd	1b c0		 sbb	 eax, eax
  01bff	83 d8 ff	 sbb	 eax, -1
  01c02	89 85 bc f8 ff
	ff		 mov	 DWORD PTR tv1376[ebp], eax
$LN289@TestLegacy:
  01c08	8b 8d bc f8 ff
	ff		 mov	 ecx, DWORD PTR tv1376[ebp]
  01c0e	89 8d b8 f8 ff
	ff		 mov	 DWORD PTR tv420[ebp], ecx
  01c14	83 bd b8 f8 ff
	ff 00		 cmp	 DWORD PTR tv420[ebp], 0
  01c1b	75 24		 jne	 SHORT $LN10@TestLegacy

; 1331 : 				{
; 1332 : 					if (crc != 0x634f12ed)

  01c1d	81 7d fc ed 12
	4f 63		 cmp	 DWORD PTR _crc$[ebp], 1666126573 ; 634f12edH
  01c24	74 07		 je	 SHORT $LN9@TestLegacy

; 1333 : 						return FALSE;

  01c26	33 c0		 xor	 eax, eax
  01c28	e9 db 01 00 00	 jmp	 $LN144@TestLegacy
$LN9@TestLegacy:

; 1334 : 					nTestsPerformed++;

  01c2d	8b 95 98 fb ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  01c33	83 c2 01	 add	 edx, 1
  01c36	89 95 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx
  01c3c	e9 62 01 00 00	 jmp	 $LN48@TestLegacy
$LN10@TestLegacy:

; 1335 : 				}
; 1336 : 				else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  01c41	c7 85 b4 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1385[ebp], OFFSET ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  01c4b	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  01c4e	89 85 b0 f8 ff
	ff		 mov	 DWORD PTR tv1383[ebp], eax
$LL290@TestLegacy:
  01c54	8b 8d b0 f8 ff
	ff		 mov	 ecx, DWORD PTR tv1383[ebp]
  01c5a	8a 11		 mov	 dl, BYTE PTR [ecx]
  01c5c	88 95 af f8 ff
	ff		 mov	 BYTE PTR tv1388[ebp], dl
  01c62	8b 85 b4 f8 ff
	ff		 mov	 eax, DWORD PTR tv1385[ebp]
  01c68	3a 10		 cmp	 dl, BYTE PTR [eax]
  01c6a	75 46		 jne	 SHORT $LN291@TestLegacy
  01c6c	80 bd af f8 ff
	ff 00		 cmp	 BYTE PTR tv1388[ebp], 0
  01c73	74 31		 je	 SHORT $LN292@TestLegacy
  01c75	8b 8d b0 f8 ff
	ff		 mov	 ecx, DWORD PTR tv1383[ebp]
  01c7b	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  01c7e	88 95 ae f8 ff
	ff		 mov	 BYTE PTR tv1395[ebp], dl
  01c84	8b 85 b4 f8 ff
	ff		 mov	 eax, DWORD PTR tv1385[ebp]
  01c8a	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  01c8d	75 23		 jne	 SHORT $LN291@TestLegacy
  01c8f	83 85 b0 f8 ff
	ff 02		 add	 DWORD PTR tv1383[ebp], 2
  01c96	83 85 b4 f8 ff
	ff 02		 add	 DWORD PTR tv1385[ebp], 2
  01c9d	80 bd ae f8 ff
	ff 00		 cmp	 BYTE PTR tv1395[ebp], 0
  01ca4	75 ae		 jne	 SHORT $LL290@TestLegacy
$LN292@TestLegacy:
  01ca6	c7 85 a8 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1400[ebp], 0
  01cb0	eb 0b		 jmp	 SHORT $LN293@TestLegacy
$LN291@TestLegacy:
  01cb2	1b c9		 sbb	 ecx, ecx
  01cb4	83 d9 ff	 sbb	 ecx, -1
  01cb7	89 8d a8 f8 ff
	ff		 mov	 DWORD PTR tv1400[ebp], ecx
$LN293@TestLegacy:
  01cbd	8b 95 a8 f8 ff
	ff		 mov	 edx, DWORD PTR tv1400[ebp]
  01cc3	89 95 a4 f8 ff
	ff		 mov	 DWORD PTR tv427[ebp], edx
  01cc9	83 bd a4 f8 ff
	ff 00		 cmp	 DWORD PTR tv427[ebp], 0
  01cd0	75 24		 jne	 SHORT $LN7@TestLegacy

; 1337 : 				{
; 1338 : 					if (crc != 0xe54bc1b9)

  01cd2	81 7d fc b9 c1
	4b e5		 cmp	 DWORD PTR _crc$[ebp], -448020039 ; e54bc1b9H
  01cd9	74 07		 je	 SHORT $LN6@TestLegacy

; 1339 : 						return FALSE;

  01cdb	33 c0		 xor	 eax, eax
  01cdd	e9 26 01 00 00	 jmp	 $LN144@TestLegacy
$LN6@TestLegacy:

; 1340 : 					nTestsPerformed++;

  01ce2	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  01ce8	83 c0 01	 add	 eax, 1
  01ceb	89 85 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
  01cf1	e9 ad 00 00 00	 jmp	 $LN48@TestLegacy
$LN7@TestLegacy:

; 1341 : 				}
; 1342 : 				else if (strcmp (name, "Twofish-Serpent") == 0)

  01cf6	c7 85 a0 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1409[ebp], OFFSET ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  01d00	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  01d03	89 8d 9c f8 ff
	ff		 mov	 DWORD PTR tv1407[ebp], ecx
$LL294@TestLegacy:
  01d09	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv1407[ebp]
  01d0f	8a 02		 mov	 al, BYTE PTR [edx]
  01d11	88 85 9b f8 ff
	ff		 mov	 BYTE PTR tv1412[ebp], al
  01d17	8b 8d a0 f8 ff
	ff		 mov	 ecx, DWORD PTR tv1409[ebp]
  01d1d	3a 01		 cmp	 al, BYTE PTR [ecx]
  01d1f	75 46		 jne	 SHORT $LN295@TestLegacy
  01d21	80 bd 9b f8 ff
	ff 00		 cmp	 BYTE PTR tv1412[ebp], 0
  01d28	74 31		 je	 SHORT $LN296@TestLegacy
  01d2a	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv1407[ebp]
  01d30	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  01d33	88 85 9a f8 ff
	ff		 mov	 BYTE PTR tv1419[ebp], al
  01d39	8b 8d a0 f8 ff
	ff		 mov	 ecx, DWORD PTR tv1409[ebp]
  01d3f	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  01d42	75 23		 jne	 SHORT $LN295@TestLegacy
  01d44	83 85 9c f8 ff
	ff 02		 add	 DWORD PTR tv1407[ebp], 2
  01d4b	83 85 a0 f8 ff
	ff 02		 add	 DWORD PTR tv1409[ebp], 2
  01d52	80 bd 9a f8 ff
	ff 00		 cmp	 BYTE PTR tv1419[ebp], 0
  01d59	75 ae		 jne	 SHORT $LL294@TestLegacy
$LN296@TestLegacy:
  01d5b	c7 85 94 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1424[ebp], 0
  01d65	eb 0b		 jmp	 SHORT $LN297@TestLegacy
$LN295@TestLegacy:
  01d67	1b d2		 sbb	 edx, edx
  01d69	83 da ff	 sbb	 edx, -1
  01d6c	89 95 94 f8 ff
	ff		 mov	 DWORD PTR tv1424[ebp], edx
$LN297@TestLegacy:
  01d72	8b 85 94 f8 ff
	ff		 mov	 eax, DWORD PTR tv1424[ebp]
  01d78	89 85 90 f8 ff
	ff		 mov	 DWORD PTR tv434[ebp], eax
  01d7e	83 bd 90 f8 ff
	ff 00		 cmp	 DWORD PTR tv434[ebp], 0
  01d85	75 1c		 jne	 SHORT $LN48@TestLegacy

; 1343 : 				{
; 1344 : 					if (crc != 0x21cdb382)

  01d87	81 7d fc 82 b3
	cd 21		 cmp	 DWORD PTR _crc$[ebp], 567128962 ; 21cdb382H
  01d8e	74 04		 je	 SHORT $LN3@TestLegacy

; 1345 : 						return FALSE;

  01d90	33 c0		 xor	 eax, eax
  01d92	eb 74		 jmp	 SHORT $LN144@TestLegacy
$LN3@TestLegacy:

; 1346 : 					nTestsPerformed++;

  01d94	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  01d9a	83 c1 01	 add	 ecx, 1
  01d9d	89 8d 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
$LN48@TestLegacy:

; 1347 : 				}
; 1348 : 				break;
; 1349 : 			}
; 1350 : 
; 1351 : 			if (crc == 0xb70b4c26)

  01da3	81 7d fc 26 4c
	0b b7		 cmp	 DWORD PTR _crc$[ebp], -1223996378 ; b70b4c26H
  01daa	75 04		 jne	 SHORT $LN2@TestLegacy

; 1352 : 				return FALSE;

  01dac	33 c0		 xor	 eax, eax
  01dae	eb 58		 jmp	 SHORT $LN144@TestLegacy
$LN2@TestLegacy:

; 1353 : 
; 1354 : 			DecryptBuffer (buf, sizeof (buf), ci);

  01db0	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  01db3	52		 push	 edx
  01db4	6a 00		 push	 0
  01db6	68 00 04 00 00	 push	 1024			; 00000400H
  01dbb	8d 85 a0 fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  01dc1	50		 push	 eax
  01dc2	e8 00 00 00 00	 call	 _DecryptBuffer@16

; 1355 : 
; 1356 : 			if (GetCrc32 (buf, sizeof (buf)) != 0xb70b4c26)

  01dc7	68 00 04 00 00	 push	 1024			; 00000400H
  01dcc	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  01dd2	51		 push	 ecx
  01dd3	e8 00 00 00 00	 call	 _GetCrc32@8
  01dd8	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  01ddd	74 04		 je	 SHORT $LN1@TestLegacy

; 1357 : 				return FALSE;

  01ddf	33 c0		 xor	 eax, eax
  01de1	eb 25		 jmp	 SHORT $LN144@TestLegacy
$LN1@TestLegacy:

; 1358 : 
; 1359 : 			nTestsPerformed++;

  01de3	8b 95 98 fb ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  01de9	83 c2 01	 add	 edx, 1
  01dec	89 95 98 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx

; 1360 : 		}

  01df2	e9 2d e3 ff ff	 jmp	 $LN132@TestLegacy
$LN131@TestLegacy:

; 1361 : 	}

  01df7	e9 ae e2 ff ff	 jmp	 $LN136@TestLegacy
$LN135@TestLegacy:

; 1362 : 	return (nTestsPerformed == 86);

  01dfc	33 c0		 xor	 eax, eax
  01dfe	83 bd 98 fb ff
	ff 56		 cmp	 DWORD PTR _nTestsPerformed$[ebp], 86 ; 00000056H
  01e05	0f 94 c0	 sete	 al
$LN144@TestLegacy:

; 1363 : }

  01e08	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01e0b	33 cd		 xor	 ecx, ebp
  01e0d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01e12	8b e5		 mov	 esp, ebp
  01e14	5d		 pop	 ebp
  01e15	c2 04 00	 ret	 4
_TestLegacySectorBufEncryption@4 ENDP
_TEXT	ENDS
PUBLIC	_AutoTestAlgorithms@0
EXTRN	_EnableHwEncryption@4:PROC
EXTRN	_IsHwEncryptionEnabled@0:PROC
; Function compile flags: /Odtp
;	COMDAT _AutoTestAlgorithms@0
_TEXT	SEGMENT
_result$ = -8						; size = 4
_hwEncryptionEnabled$ = -4				; size = 4
_AutoTestAlgorithms@0 PROC				; COMDAT

; 1567 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 08	 sub	 esp, 8

; 1568 : 	BOOL result = TRUE;

  00008	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _result$[ebp], 1

; 1569 : 	BOOL hwEncryptionEnabled = IsHwEncryptionEnabled();

  0000f	e8 00 00 00 00	 call	 _IsHwEncryptionEnabled@0
  00014	89 45 fc	 mov	 DWORD PTR _hwEncryptionEnabled$[ebp], eax

; 1570 : 
; 1571 : 	EnableHwEncryption (FALSE);

  00017	6a 00		 push	 0
  00019	e8 00 00 00 00	 call	 _EnableHwEncryption@4

; 1572 : 
; 1573 : 	if (!DoAutoTestAlgorithms())

  0001e	e8 00 00 00 00	 call	 _DoAutoTestAlgorithms@0
  00023	85 c0		 test	 eax, eax
  00025	75 07		 jne	 SHORT $LN2@AutoTestAl

; 1574 : 		result = FALSE;

  00027	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
$LN2@AutoTestAl:

; 1575 : 
; 1576 : 	EnableHwEncryption (TRUE);

  0002e	6a 01		 push	 1
  00030	e8 00 00 00 00	 call	 _EnableHwEncryption@4

; 1577 : 
; 1578 : 	if (!DoAutoTestAlgorithms())

  00035	e8 00 00 00 00	 call	 _DoAutoTestAlgorithms@0
  0003a	85 c0		 test	 eax, eax
  0003c	75 07		 jne	 SHORT $LN1@AutoTestAl

; 1579 : 		result = FALSE;

  0003e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
$LN1@AutoTestAl:

; 1580 : 
; 1581 : 	EnableHwEncryption (hwEncryptionEnabled);

  00045	8b 45 fc	 mov	 eax, DWORD PTR _hwEncryptionEnabled$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _EnableHwEncryption@4

; 1582 : 	return result;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR _result$[ebp]

; 1583 : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_AutoTestAlgorithms@0 ENDP
_TEXT	ENDS
PUBLIC	_test_pkcs5@0
PUBLIC	__$ArrayPad$
EXTRN	_crypto_close@4:PROC
EXTRN	_crc32_selftests@0:PROC
EXTRN	_DecipherBlocks@16:PROC
EXTRN	_EncipherBlocks@16:PROC
EXTRN	_DecipherBlock@12:PROC
EXTRN	_EncipherBlock@12:PROC
EXTRN	_BlowfishEncryptLE@16:PROC
EXTRN	_MirrorBytes32@4:PROC
EXTRN	_crypto_open@0:PROC
EXTRN	_memset:PROC
; Function compile flags: /Odtp
;	COMDAT _DoAutoTestAlgorithms@0
_TEXT	SEGMENT
_cipher$27664 = -1120					; size = 4
_cipher$27657 = -1116					; size = 4
_origCrc$27646 = -1112					; size = 4
_i$27647 = -1108					; size = 4
_testData$27645 = -1104					; size = 1024
_cipher$27641 = -76					; size = 4
_cipher$27634 = -72					; size = 4
_cipher$27628 = -68					; size = 4
_key$ = -64						; size = 32
_tmp$ = -32						; size = 16
__$ArrayPad$ = -16					; size = 4
_bFailed$ = -12						; size = 4
_ci$ = -8						; size = 4
_i$ = -4						; size = 4
_DoAutoTestAlgorithms@0 PROC				; COMDAT

; 1367 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 60 04 00
	00		 sub	 esp, 1120		; 00000460H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	56		 push	 esi
  00016	57		 push	 edi

; 1368 : 	PCRYPTO_INFO ci;
; 1369 : 	char key[32];
; 1370 : 	unsigned char tmp[16];
; 1371 : 	BOOL bFailed = FALSE;

  00017	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 0

; 1372 : 	int i;
; 1373 : 
; 1374 : 	ci = crypto_open ();

  0001e	e8 00 00 00 00	 call	 _crypto_open@0
  00023	89 45 f8	 mov	 DWORD PTR _ci$[ebp], eax

; 1375 : 	if (!ci)

  00026	83 7d f8 00	 cmp	 DWORD PTR _ci$[ebp], 0
  0002a	75 07		 jne	 SHORT $LN45@DoAutoTest

; 1376 : 		return FALSE;

  0002c	33 c0		 xor	 eax, eax
  0002e	e9 d6 06 00 00	 jmp	 $LN46@DoAutoTest
$LN45@DoAutoTest:

; 1377 : 
; 1378 : 	memset (ci, 0, sizeof (*ci));

  00033	68 68 44 00 00	 push	 17512			; 00004468H
  00038	6a 00		 push	 0
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _ci$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _memset
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1379 : 
; 1380 : 	/* Blowfish (deprecated/legacy) */
; 1381 : 
; 1382 : 	for (i=0;i<BF_TEST_COUNT;i++)

  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0004d	eb 09		 jmp	 SHORT $LN44@DoAutoTest
$LN43@DoAutoTest:
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00052	83 c1 01	 add	 ecx, 1
  00055	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN44@DoAutoTest:
  00058	83 7d fc 22	 cmp	 DWORD PTR _i$[ebp], 34	; 00000022H
  0005c	0f 8d cf 00 00
	00		 jge	 $LN42@DoAutoTest

; 1383 : 	{		
; 1384 : 		memcpy(key, bf_ecb_vectors[i].key, 8);

  00062	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00065	6b d2 18	 imul	 edx, 24			; 00000018H
  00068	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _bf_ecb_vectors[edx]
  0006e	89 45 c0	 mov	 DWORD PTR _key$[ebp], eax
  00071	8b 8a 04 00 00
	00		 mov	 ecx, DWORD PTR _bf_ecb_vectors[edx+4]
  00077	89 4d c4	 mov	 DWORD PTR _key$[ebp+4], ecx

; 1385 : 		memcpy(tmp, bf_ecb_vectors[i].plaintext, 8);

  0007a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0007d	6b d2 18	 imul	 edx, 24			; 00000018H
  00080	8b 82 08 00 00
	00		 mov	 eax, DWORD PTR _bf_ecb_vectors[edx+8]
  00086	89 45 e0	 mov	 DWORD PTR _tmp$[ebp], eax
  00089	8b 8a 0c 00 00
	00		 mov	 ecx, DWORD PTR _bf_ecb_vectors[edx+12]
  0008f	89 4d e4	 mov	 DWORD PTR _tmp$[ebp+4], ecx

; 1386 : 		CipherInit2(BLOWFISH, key, ks_tmp, 8);

  00092	6a 08		 push	 8
  00094	68 00 00 00 00	 push	 OFFSET _ks_tmp
  00099	8d 55 c0	 lea	 edx, DWORD PTR _key$[ebp]
  0009c	52		 push	 edx
  0009d	6a 04		 push	 4
  0009f	e8 00 00 00 00	 call	 _CipherInit2@16

; 1387 : 
; 1388 : 		((uint32 *)tmp)[0] = BE32 (((uint32 *)tmp)[0]);

  000a4	8b 45 e0	 mov	 eax, DWORD PTR _tmp$[ebp]
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 _MirrorBytes32@4
  000ad	89 45 e0	 mov	 DWORD PTR _tmp$[ebp], eax

; 1389 : 		((uint32 *)tmp)[1] = BE32 (((uint32 *)tmp)[1]);

  000b0	8b 4d e4	 mov	 ecx, DWORD PTR _tmp$[ebp+4]
  000b3	51		 push	 ecx
  000b4	e8 00 00 00 00	 call	 _MirrorBytes32@4
  000b9	89 45 e4	 mov	 DWORD PTR _tmp$[ebp+4], eax

; 1390 : 
; 1391 : 		BlowfishEncryptLE (tmp,tmp,(BF_KEY *)ks_tmp,1);

  000bc	6a 01		 push	 1
  000be	68 00 00 00 00	 push	 OFFSET _ks_tmp
  000c3	8d 55 e0	 lea	 edx, DWORD PTR _tmp$[ebp]
  000c6	52		 push	 edx
  000c7	8d 45 e0	 lea	 eax, DWORD PTR _tmp$[ebp]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 _BlowfishEncryptLE@16

; 1392 : 		BlowfishEncryptLE (tmp,tmp,(BF_KEY *)ks_tmp,0);

  000d0	6a 00		 push	 0
  000d2	68 00 00 00 00	 push	 OFFSET _ks_tmp
  000d7	8d 4d e0	 lea	 ecx, DWORD PTR _tmp$[ebp]
  000da	51		 push	 ecx
  000db	8d 55 e0	 lea	 edx, DWORD PTR _tmp$[ebp]
  000de	52		 push	 edx
  000df	e8 00 00 00 00	 call	 _BlowfishEncryptLE@16

; 1393 : 		BlowfishEncryptLE (tmp,tmp,(BF_KEY *)ks_tmp,1);

  000e4	6a 01		 push	 1
  000e6	68 00 00 00 00	 push	 OFFSET _ks_tmp
  000eb	8d 45 e0	 lea	 eax, DWORD PTR _tmp$[ebp]
  000ee	50		 push	 eax
  000ef	8d 4d e0	 lea	 ecx, DWORD PTR _tmp$[ebp]
  000f2	51		 push	 ecx
  000f3	e8 00 00 00 00	 call	 _BlowfishEncryptLE@16

; 1394 : 
; 1395 : 		((uint32 *)tmp)[0] = BE32 (((uint32 *)tmp)[0]);

  000f8	8b 55 e0	 mov	 edx, DWORD PTR _tmp$[ebp]
  000fb	52		 push	 edx
  000fc	e8 00 00 00 00	 call	 _MirrorBytes32@4
  00101	89 45 e0	 mov	 DWORD PTR _tmp$[ebp], eax

; 1396 : 		((uint32 *)tmp)[1] = BE32 (((uint32 *)tmp)[1]);

  00104	8b 45 e4	 mov	 eax, DWORD PTR _tmp$[ebp+4]
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 _MirrorBytes32@4
  0010d	89 45 e4	 mov	 DWORD PTR _tmp$[ebp+4], eax

; 1397 : 
; 1398 : 		if (memcmp(bf_ecb_vectors[i].ciphertext,tmp,8)!=0)

  00110	b9 02 00 00 00	 mov	 ecx, 2
  00115	8d 7d e0	 lea	 edi, DWORD PTR _tmp$[ebp]
  00118	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
  0011b	6b f6 18	 imul	 esi, 24			; 00000018H
  0011e	81 c6 10 00 00
	00		 add	 esi, OFFSET _bf_ecb_vectors+16
  00124	33 d2		 xor	 edx, edx
  00126	f3 a7		 repe cmpsd
  00128	74 02		 je	 SHORT $LN41@DoAutoTest

; 1399 : 			break;

  0012a	eb 05		 jmp	 SHORT $LN42@DoAutoTest
$LN41@DoAutoTest:

; 1400 : 	}

  0012c	e9 1e ff ff ff	 jmp	 $LN43@DoAutoTest
$LN42@DoAutoTest:

; 1401 : 
; 1402 : 	if (i != BF_TEST_COUNT)

  00131	83 7d fc 22	 cmp	 DWORD PTR _i$[ebp], 34	; 00000022H
  00135	74 07		 je	 SHORT $LN40@DoAutoTest

; 1403 : 		bFailed = TRUE;

  00137	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$LN40@DoAutoTest:

; 1404 : 
; 1405 : 	/* CAST5 (deprecated/legacy) */
; 1406 : 
; 1407 : 	for (i=0;i<CAST_TEST_COUNT;i++)

  0013e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00145	eb 09		 jmp	 SHORT $LN39@DoAutoTest
$LN38@DoAutoTest:
  00147	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0014a	83 c0 01	 add	 eax, 1
  0014d	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN39@DoAutoTest:
  00150	83 7d fc 01	 cmp	 DWORD PTR _i$[ebp], 1
  00154	0f 8d ad 00 00
	00		 jge	 $LN37@DoAutoTest

; 1408 : 	{			
; 1409 : 		int cipher = CAST;

  0015a	c7 45 bc 05 00
	00 00		 mov	 DWORD PTR _cipher$27628[ebp], 5

; 1410 : 		memcpy(key, cast_ecb_vectors[i].key, 16);

  00161	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00164	c1 e1 05	 shl	 ecx, 5
  00167	81 c1 00 00 00
	00		 add	 ecx, OFFSET _cast_ecb_vectors
  0016d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0016f	89 55 c0	 mov	 DWORD PTR _key$[ebp], edx
  00172	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00175	89 45 c4	 mov	 DWORD PTR _key$[ebp+4], eax
  00178	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0017b	89 55 c8	 mov	 DWORD PTR _key$[ebp+8], edx
  0017e	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00181	89 45 cc	 mov	 DWORD PTR _key$[ebp+12], eax

; 1411 : 		memcpy(tmp, cast_ecb_vectors[i].plaintext, 8);

  00184	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00187	c1 e1 05	 shl	 ecx, 5
  0018a	8b 91 10 00 00
	00		 mov	 edx, DWORD PTR _cast_ecb_vectors[ecx+16]
  00190	89 55 e0	 mov	 DWORD PTR _tmp$[ebp], edx
  00193	8b 81 14 00 00
	00		 mov	 eax, DWORD PTR _cast_ecb_vectors[ecx+20]
  00199	89 45 e4	 mov	 DWORD PTR _tmp$[ebp+4], eax

; 1412 : 		CipherInit2(cipher, key, ks_tmp, 16);

  0019c	6a 10		 push	 16			; 00000010H
  0019e	68 00 00 00 00	 push	 OFFSET _ks_tmp
  001a3	8d 4d c0	 lea	 ecx, DWORD PTR _key$[ebp]
  001a6	51		 push	 ecx
  001a7	8b 55 bc	 mov	 edx, DWORD PTR _cipher$27628[ebp]
  001aa	52		 push	 edx
  001ab	e8 00 00 00 00	 call	 _CipherInit2@16

; 1413 : 
; 1414 : 		EncipherBlock(cipher, tmp, ks_tmp);

  001b0	68 00 00 00 00	 push	 OFFSET _ks_tmp
  001b5	8d 45 e0	 lea	 eax, DWORD PTR _tmp$[ebp]
  001b8	50		 push	 eax
  001b9	8b 4d bc	 mov	 ecx, DWORD PTR _cipher$27628[ebp]
  001bc	51		 push	 ecx
  001bd	e8 00 00 00 00	 call	 _EncipherBlock@12

; 1415 : 		DecipherBlock(cipher, tmp, ks_tmp);

  001c2	68 00 00 00 00	 push	 OFFSET _ks_tmp
  001c7	8d 55 e0	 lea	 edx, DWORD PTR _tmp$[ebp]
  001ca	52		 push	 edx
  001cb	8b 45 bc	 mov	 eax, DWORD PTR _cipher$27628[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 _DecipherBlock@12

; 1416 : 		EncipherBlock(cipher, tmp, ks_tmp);

  001d4	68 00 00 00 00	 push	 OFFSET _ks_tmp
  001d9	8d 4d e0	 lea	 ecx, DWORD PTR _tmp$[ebp]
  001dc	51		 push	 ecx
  001dd	8b 55 bc	 mov	 edx, DWORD PTR _cipher$27628[ebp]
  001e0	52		 push	 edx
  001e1	e8 00 00 00 00	 call	 _EncipherBlock@12

; 1417 : 
; 1418 : 		if (memcmp(cast_ecb_vectors[i].ciphertext, tmp,8)!=0)

  001e6	b9 02 00 00 00	 mov	 ecx, 2
  001eb	8d 7d e0	 lea	 edi, DWORD PTR _tmp$[ebp]
  001ee	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
  001f1	c1 e6 05	 shl	 esi, 5
  001f4	81 c6 18 00 00
	00		 add	 esi, OFFSET _cast_ecb_vectors+24
  001fa	33 c0		 xor	 eax, eax
  001fc	f3 a7		 repe cmpsd
  001fe	74 02		 je	 SHORT $LN36@DoAutoTest

; 1419 : 			break;

  00200	eb 05		 jmp	 SHORT $LN37@DoAutoTest
$LN36@DoAutoTest:

; 1420 : 	}

  00202	e9 40 ff ff ff	 jmp	 $LN38@DoAutoTest
$LN37@DoAutoTest:

; 1421 : 
; 1422 : 	if (i!=CAST_TEST_COUNT)

  00207	83 7d fc 01	 cmp	 DWORD PTR _i$[ebp], 1
  0020b	74 07		 je	 SHORT $LN35@DoAutoTest

; 1423 : 		bFailed = TRUE;

  0020d	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$LN35@DoAutoTest:

; 1424 : 
; 1425 : 
; 1426 : 	/* Triple DES (TECB, EDE) - deprecated/legacy */
; 1427 : 
; 1428 : 	for (i = 0; i < TRIPLEDES_TEST_COUNT; i++)

  00214	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0021b	eb 09		 jmp	 SHORT $LN34@DoAutoTest
$LN33@DoAutoTest:
  0021d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00220	83 c1 01	 add	 ecx, 1
  00223	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN34@DoAutoTest:
  00226	83 7d fc 01	 cmp	 DWORD PTR _i$[ebp], 1
  0022a	0f 8d c1 00 00
	00		 jge	 $LN32@DoAutoTest

; 1429 : 	{			
; 1430 : 		int cipher = TRIPLEDES;

  00230	c7 45 b8 06 00
	00 00		 mov	 DWORD PTR _cipher$27634[ebp], 6

; 1431 : 		memcpy(key, tripledes_vectors[i].key, sizeof(tripledes_vectors->key));

  00237	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0023a	6b d2 28	 imul	 edx, 40			; 00000028H
  0023d	81 c2 00 00 00
	00		 add	 edx, OFFSET _tripledes_vectors
  00243	8b 02		 mov	 eax, DWORD PTR [edx]
  00245	89 45 c0	 mov	 DWORD PTR _key$[ebp], eax
  00248	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0024b	89 4d c4	 mov	 DWORD PTR _key$[ebp+4], ecx
  0024e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00251	89 45 c8	 mov	 DWORD PTR _key$[ebp+8], eax
  00254	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00257	89 4d cc	 mov	 DWORD PTR _key$[ebp+12], ecx
  0025a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0025d	89 45 d0	 mov	 DWORD PTR _key$[ebp+16], eax
  00260	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00263	89 4d d4	 mov	 DWORD PTR _key$[ebp+20], ecx

; 1432 : 		memcpy(tmp, tripledes_vectors[i].plaintext, sizeof(tripledes_vectors->plaintext));

  00266	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00269	6b d2 28	 imul	 edx, 40			; 00000028H
  0026c	8b 82 18 00 00
	00		 mov	 eax, DWORD PTR _tripledes_vectors[edx+24]
  00272	89 45 e0	 mov	 DWORD PTR _tmp$[ebp], eax
  00275	8b 8a 1c 00 00
	00		 mov	 ecx, DWORD PTR _tripledes_vectors[edx+28]
  0027b	89 4d e4	 mov	 DWORD PTR _tmp$[ebp+4], ecx

; 1433 : 
; 1434 : 		CipherInit(cipher, key, ks_tmp);

  0027e	68 00 00 00 00	 push	 OFFSET _ks_tmp
  00283	8d 55 c0	 lea	 edx, DWORD PTR _key$[ebp]
  00286	52		 push	 edx
  00287	8b 45 b8	 mov	 eax, DWORD PTR _cipher$27634[ebp]
  0028a	50		 push	 eax
  0028b	e8 00 00 00 00	 call	 _CipherInit@12

; 1435 : 
; 1436 : 		EncipherBlock(cipher, tmp, ks_tmp);

  00290	68 00 00 00 00	 push	 OFFSET _ks_tmp
  00295	8d 4d e0	 lea	 ecx, DWORD PTR _tmp$[ebp]
  00298	51		 push	 ecx
  00299	8b 55 b8	 mov	 edx, DWORD PTR _cipher$27634[ebp]
  0029c	52		 push	 edx
  0029d	e8 00 00 00 00	 call	 _EncipherBlock@12

; 1437 : 		if (memcmp(tripledes_vectors[i].ciphertext, tmp, sizeof(tripledes_vectors->ciphertext)) != 0)

  002a2	b9 02 00 00 00	 mov	 ecx, 2
  002a7	8d 7d e0	 lea	 edi, DWORD PTR _tmp$[ebp]
  002aa	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
  002ad	6b f6 28	 imul	 esi, 40			; 00000028H
  002b0	81 c6 20 00 00
	00		 add	 esi, OFFSET _tripledes_vectors+32
  002b6	33 c0		 xor	 eax, eax
  002b8	f3 a7		 repe cmpsd
  002ba	74 02		 je	 SHORT $LN31@DoAutoTest

; 1438 : 			break;

  002bc	eb 33		 jmp	 SHORT $LN32@DoAutoTest
$LN31@DoAutoTest:

; 1439 : 
; 1440 : 		DecipherBlock(cipher, tmp, ks_tmp);

  002be	68 00 00 00 00	 push	 OFFSET _ks_tmp
  002c3	8d 4d e0	 lea	 ecx, DWORD PTR _tmp$[ebp]
  002c6	51		 push	 ecx
  002c7	8b 55 b8	 mov	 edx, DWORD PTR _cipher$27634[ebp]
  002ca	52		 push	 edx
  002cb	e8 00 00 00 00	 call	 _DecipherBlock@12

; 1441 : 		if (memcmp(tripledes_vectors[i].plaintext, tmp, sizeof(tripledes_vectors->plaintext)) != 0)

  002d0	b9 02 00 00 00	 mov	 ecx, 2
  002d5	8d 7d e0	 lea	 edi, DWORD PTR _tmp$[ebp]
  002d8	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
  002db	6b f6 28	 imul	 esi, 40			; 00000028H
  002de	81 c6 18 00 00
	00		 add	 esi, OFFSET _tripledes_vectors+24
  002e4	33 c0		 xor	 eax, eax
  002e6	f3 a7		 repe cmpsd
  002e8	74 02		 je	 SHORT $LN30@DoAutoTest

; 1442 : 			break;

  002ea	eb 05		 jmp	 SHORT $LN32@DoAutoTest
$LN30@DoAutoTest:

; 1443 : 	}

  002ec	e9 2c ff ff ff	 jmp	 $LN33@DoAutoTest
$LN32@DoAutoTest:

; 1444 : 	if (i != TRIPLEDES_TEST_COUNT)

  002f1	83 7d fc 01	 cmp	 DWORD PTR _i$[ebp], 1
  002f5	74 07		 je	 SHORT $LN29@DoAutoTest

; 1445 : 		bFailed = TRUE;

  002f7	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$LN29@DoAutoTest:

; 1446 : 
; 1447 : 
; 1448 : 	/* AES */
; 1449 : 
; 1450 : 	for (i = 0; i < AES_TEST_COUNT; i++)

  002fe	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00305	eb 09		 jmp	 SHORT $LN28@DoAutoTest
$LN27@DoAutoTest:
  00307	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0030a	83 c1 01	 add	 ecx, 1
  0030d	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN28@DoAutoTest:
  00310	83 7d fc 01	 cmp	 DWORD PTR _i$[ebp], 1
  00314	0f 8d b3 00 00
	00		 jge	 $LN26@DoAutoTest

; 1451 : 	{			
; 1452 : 		int cipher = AES;

  0031a	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR _cipher$27641[ebp], 1

; 1453 : 		memcpy(key, aes_ecb_vectors[i].key, 32);

  00321	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
  00324	c1 e6 06	 shl	 esi, 6
  00327	81 c6 00 00 00
	00		 add	 esi, OFFSET _aes_ecb_vectors
  0032d	b9 08 00 00 00	 mov	 ecx, 8
  00332	8d 7d c0	 lea	 edi, DWORD PTR _key$[ebp]
  00335	f3 a5		 rep movsd

; 1454 : 		memcpy(tmp, aes_ecb_vectors[i].plaintext, 16);

  00337	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0033a	c1 e2 06	 shl	 edx, 6
  0033d	81 c2 20 00 00
	00		 add	 edx, OFFSET _aes_ecb_vectors+32
  00343	8b 02		 mov	 eax, DWORD PTR [edx]
  00345	89 45 e0	 mov	 DWORD PTR _tmp$[ebp], eax
  00348	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0034b	89 4d e4	 mov	 DWORD PTR _tmp$[ebp+4], ecx
  0034e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00351	89 45 e8	 mov	 DWORD PTR _tmp$[ebp+8], eax
  00354	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00357	89 4d ec	 mov	 DWORD PTR _tmp$[ebp+12], ecx

; 1455 : 		CipherInit(cipher, key, ks_tmp);

  0035a	68 00 00 00 00	 push	 OFFSET _ks_tmp
  0035f	8d 55 c0	 lea	 edx, DWORD PTR _key$[ebp]
  00362	52		 push	 edx
  00363	8b 45 b4	 mov	 eax, DWORD PTR _cipher$27641[ebp]
  00366	50		 push	 eax
  00367	e8 00 00 00 00	 call	 _CipherInit@12

; 1456 : 
; 1457 : 		EncipherBlock(cipher, tmp, ks_tmp);

  0036c	68 00 00 00 00	 push	 OFFSET _ks_tmp
  00371	8d 4d e0	 lea	 ecx, DWORD PTR _tmp$[ebp]
  00374	51		 push	 ecx
  00375	8b 55 b4	 mov	 edx, DWORD PTR _cipher$27641[ebp]
  00378	52		 push	 edx
  00379	e8 00 00 00 00	 call	 _EncipherBlock@12

; 1458 : 		if (memcmp(aes_ecb_vectors[i].ciphertext, tmp, 16) != 0)

  0037e	b9 04 00 00 00	 mov	 ecx, 4
  00383	8d 7d e0	 lea	 edi, DWORD PTR _tmp$[ebp]
  00386	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
  00389	c1 e6 06	 shl	 esi, 6
  0038c	81 c6 30 00 00
	00		 add	 esi, OFFSET _aes_ecb_vectors+48
  00392	33 c0		 xor	 eax, eax
  00394	f3 a7		 repe cmpsd
  00396	74 02		 je	 SHORT $LN25@DoAutoTest

; 1459 : 			break;

  00398	eb 33		 jmp	 SHORT $LN26@DoAutoTest
$LN25@DoAutoTest:

; 1460 : 
; 1461 : 		DecipherBlock(cipher, tmp, ks_tmp);

  0039a	68 00 00 00 00	 push	 OFFSET _ks_tmp
  0039f	8d 4d e0	 lea	 ecx, DWORD PTR _tmp$[ebp]
  003a2	51		 push	 ecx
  003a3	8b 55 b4	 mov	 edx, DWORD PTR _cipher$27641[ebp]
  003a6	52		 push	 edx
  003a7	e8 00 00 00 00	 call	 _DecipherBlock@12

; 1462 : 		if (memcmp(aes_ecb_vectors[i].plaintext, tmp, 16) != 0)

  003ac	b9 04 00 00 00	 mov	 ecx, 4
  003b1	8d 7d e0	 lea	 edi, DWORD PTR _tmp$[ebp]
  003b4	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
  003b7	c1 e6 06	 shl	 esi, 6
  003ba	81 c6 20 00 00
	00		 add	 esi, OFFSET _aes_ecb_vectors+32
  003c0	33 c0		 xor	 eax, eax
  003c2	f3 a7		 repe cmpsd
  003c4	74 02		 je	 SHORT $LN24@DoAutoTest

; 1463 : 			break;

  003c6	eb 05		 jmp	 SHORT $LN26@DoAutoTest
$LN24@DoAutoTest:

; 1464 : 	}

  003c8	e9 3a ff ff ff	 jmp	 $LN27@DoAutoTest
$LN26@DoAutoTest:

; 1465 : 	if (i != AES_TEST_COUNT)

  003cd	83 7d fc 01	 cmp	 DWORD PTR _i$[ebp], 1
  003d1	74 07		 je	 SHORT $LN23@DoAutoTest

; 1466 : 		bFailed = TRUE;

  003d3	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$LN23@DoAutoTest:

; 1467 : 
; 1468 : 	// AES EncipherBlocks()/DecipherBlocks()
; 1469 : 	{
; 1470 : 		byte testData[1024];
; 1471 : 		uint32 origCrc;
; 1472 : 		size_t i;
; 1473 : 
; 1474 : 		for (i = 0; i < sizeof (testData); ++i)

  003da	c7 85 ac fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$27647[ebp], 0
  003e4	eb 0f		 jmp	 SHORT $LN22@DoAutoTest
$LN21@DoAutoTest:
  003e6	8b 8d ac fb ff
	ff		 mov	 ecx, DWORD PTR _i$27647[ebp]
  003ec	83 c1 01	 add	 ecx, 1
  003ef	89 8d ac fb ff
	ff		 mov	 DWORD PTR _i$27647[ebp], ecx
$LN22@DoAutoTest:
  003f5	81 bd ac fb ff
	ff 00 04 00 00	 cmp	 DWORD PTR _i$27647[ebp], 1024 ; 00000400H
  003ff	73 15		 jae	 SHORT $LN20@DoAutoTest

; 1475 : 		{
; 1476 : 			testData[i] = (byte) i;

  00401	8b 95 ac fb ff
	ff		 mov	 edx, DWORD PTR _i$27647[ebp]
  00407	8a 85 ac fb ff
	ff		 mov	 al, BYTE PTR _i$27647[ebp]
  0040d	88 84 15 b0 fb
	ff ff		 mov	 BYTE PTR _testData$27645[ebp+edx], al

; 1477 : 		}

  00414	eb d0		 jmp	 SHORT $LN21@DoAutoTest
$LN20@DoAutoTest:

; 1478 : 
; 1479 : 		origCrc = GetCrc32 (testData, sizeof (testData));

  00416	68 00 04 00 00	 push	 1024			; 00000400H
  0041b	8d 8d b0 fb ff
	ff		 lea	 ecx, DWORD PTR _testData$27645[ebp]
  00421	51		 push	 ecx
  00422	e8 00 00 00 00	 call	 _GetCrc32@8
  00427	89 85 a8 fb ff
	ff		 mov	 DWORD PTR _origCrc$27646[ebp], eax

; 1480 : 
; 1481 : 		CipherInit (AES, testData, ks_tmp);

  0042d	68 00 00 00 00	 push	 OFFSET _ks_tmp
  00432	8d 95 b0 fb ff
	ff		 lea	 edx, DWORD PTR _testData$27645[ebp]
  00438	52		 push	 edx
  00439	6a 01		 push	 1
  0043b	e8 00 00 00 00	 call	 _CipherInit@12

; 1482 : 		EncipherBlocks (AES, testData, ks_tmp, sizeof (testData) / CipherGetBlockSize (AES));

  00440	6a 01		 push	 1
  00442	e8 00 00 00 00	 call	 _CipherGetBlockSize@4
  00447	8b c8		 mov	 ecx, eax
  00449	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  0044e	33 d2		 xor	 edx, edx
  00450	f7 f1		 div	 ecx
  00452	50		 push	 eax
  00453	68 00 00 00 00	 push	 OFFSET _ks_tmp
  00458	8d 95 b0 fb ff
	ff		 lea	 edx, DWORD PTR _testData$27645[ebp]
  0045e	52		 push	 edx
  0045f	6a 01		 push	 1
  00461	e8 00 00 00 00	 call	 _EncipherBlocks@16

; 1483 : 
; 1484 : 		if (GetCrc32 (testData, sizeof (testData)) != 0xb5cd5631)

  00466	68 00 04 00 00	 push	 1024			; 00000400H
  0046b	8d 85 b0 fb ff
	ff		 lea	 eax, DWORD PTR _testData$27645[ebp]
  00471	50		 push	 eax
  00472	e8 00 00 00 00	 call	 _GetCrc32@8
  00477	3d 31 56 cd b5	 cmp	 eax, -1244834255	; b5cd5631H
  0047c	74 07		 je	 SHORT $LN19@DoAutoTest

; 1485 : 			bFailed = TRUE;

  0047e	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$LN19@DoAutoTest:

; 1486 : 
; 1487 : 		DecipherBlocks (AES, testData, ks_tmp, sizeof (testData) / CipherGetBlockSize (AES));

  00485	6a 01		 push	 1
  00487	e8 00 00 00 00	 call	 _CipherGetBlockSize@4
  0048c	8b c8		 mov	 ecx, eax
  0048e	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  00493	33 d2		 xor	 edx, edx
  00495	f7 f1		 div	 ecx
  00497	50		 push	 eax
  00498	68 00 00 00 00	 push	 OFFSET _ks_tmp
  0049d	8d 95 b0 fb ff
	ff		 lea	 edx, DWORD PTR _testData$27645[ebp]
  004a3	52		 push	 edx
  004a4	6a 01		 push	 1
  004a6	e8 00 00 00 00	 call	 _DecipherBlocks@16

; 1488 : 
; 1489 : 		if (origCrc != GetCrc32 (testData, sizeof (testData)))

  004ab	68 00 04 00 00	 push	 1024			; 00000400H
  004b0	8d 85 b0 fb ff
	ff		 lea	 eax, DWORD PTR _testData$27645[ebp]
  004b6	50		 push	 eax
  004b7	e8 00 00 00 00	 call	 _GetCrc32@8
  004bc	39 85 a8 fb ff
	ff		 cmp	 DWORD PTR _origCrc$27646[ebp], eax
  004c2	74 07		 je	 SHORT $LN18@DoAutoTest

; 1490 : 			bFailed = TRUE;

  004c4	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$LN18@DoAutoTest:

; 1491 : 	}
; 1492 : 
; 1493 : 	/* Serpent */
; 1494 : 
; 1495 : 	for (i = 0; i < SERPENT_TEST_COUNT; i++)

  004cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  004d2	eb 09		 jmp	 SHORT $LN17@DoAutoTest
$LN16@DoAutoTest:
  004d4	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  004d7	83 c1 01	 add	 ecx, 1
  004da	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN17@DoAutoTest:
  004dd	83 7d fc 01	 cmp	 DWORD PTR _i$[ebp], 1
  004e1	0f 8d bf 00 00
	00		 jge	 $LN15@DoAutoTest

; 1496 : 	{			
; 1497 : 		int cipher = SERPENT;

  004e7	c7 85 a4 fb ff
	ff 02 00 00 00	 mov	 DWORD PTR _cipher$27657[ebp], 2

; 1498 : 		memcpy(key, serpent_vectors[i].key, 32);

  004f1	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
  004f4	c1 e6 06	 shl	 esi, 6
  004f7	81 c6 00 00 00
	00		 add	 esi, OFFSET _serpent_vectors
  004fd	b9 08 00 00 00	 mov	 ecx, 8
  00502	8d 7d c0	 lea	 edi, DWORD PTR _key$[ebp]
  00505	f3 a5		 rep movsd

; 1499 : 		memcpy(tmp, serpent_vectors[i].plaintext, 16);

  00507	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0050a	c1 e2 06	 shl	 edx, 6
  0050d	81 c2 20 00 00
	00		 add	 edx, OFFSET _serpent_vectors+32
  00513	8b 02		 mov	 eax, DWORD PTR [edx]
  00515	89 45 e0	 mov	 DWORD PTR _tmp$[ebp], eax
  00518	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0051b	89 4d e4	 mov	 DWORD PTR _tmp$[ebp+4], ecx
  0051e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00521	89 45 e8	 mov	 DWORD PTR _tmp$[ebp+8], eax
  00524	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00527	89 4d ec	 mov	 DWORD PTR _tmp$[ebp+12], ecx

; 1500 : 		CipherInit(cipher, key, ks_tmp);

  0052a	68 00 00 00 00	 push	 OFFSET _ks_tmp
  0052f	8d 55 c0	 lea	 edx, DWORD PTR _key$[ebp]
  00532	52		 push	 edx
  00533	8b 85 a4 fb ff
	ff		 mov	 eax, DWORD PTR _cipher$27657[ebp]
  00539	50		 push	 eax
  0053a	e8 00 00 00 00	 call	 _CipherInit@12

; 1501 : 
; 1502 : 		EncipherBlock(cipher, tmp, ks_tmp);

  0053f	68 00 00 00 00	 push	 OFFSET _ks_tmp
  00544	8d 4d e0	 lea	 ecx, DWORD PTR _tmp$[ebp]
  00547	51		 push	 ecx
  00548	8b 95 a4 fb ff
	ff		 mov	 edx, DWORD PTR _cipher$27657[ebp]
  0054e	52		 push	 edx
  0054f	e8 00 00 00 00	 call	 _EncipherBlock@12

; 1503 : 		if (memcmp(serpent_vectors[i].ciphertext, tmp, 16) != 0)

  00554	b9 04 00 00 00	 mov	 ecx, 4
  00559	8d 7d e0	 lea	 edi, DWORD PTR _tmp$[ebp]
  0055c	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
  0055f	c1 e6 06	 shl	 esi, 6
  00562	81 c6 30 00 00
	00		 add	 esi, OFFSET _serpent_vectors+48
  00568	33 c0		 xor	 eax, eax
  0056a	f3 a7		 repe cmpsd
  0056c	74 02		 je	 SHORT $LN14@DoAutoTest

; 1504 : 			break;

  0056e	eb 36		 jmp	 SHORT $LN15@DoAutoTest
$LN14@DoAutoTest:

; 1505 : 
; 1506 : 		DecipherBlock(cipher, tmp, ks_tmp);

  00570	68 00 00 00 00	 push	 OFFSET _ks_tmp
  00575	8d 4d e0	 lea	 ecx, DWORD PTR _tmp$[ebp]
  00578	51		 push	 ecx
  00579	8b 95 a4 fb ff
	ff		 mov	 edx, DWORD PTR _cipher$27657[ebp]
  0057f	52		 push	 edx
  00580	e8 00 00 00 00	 call	 _DecipherBlock@12

; 1507 : 		if (memcmp(serpent_vectors[i].plaintext, tmp, 16) != 0)

  00585	b9 04 00 00 00	 mov	 ecx, 4
  0058a	8d 7d e0	 lea	 edi, DWORD PTR _tmp$[ebp]
  0058d	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
  00590	c1 e6 06	 shl	 esi, 6
  00593	81 c6 20 00 00
	00		 add	 esi, OFFSET _serpent_vectors+32
  00599	33 c0		 xor	 eax, eax
  0059b	f3 a7		 repe cmpsd
  0059d	74 02		 je	 SHORT $LN13@DoAutoTest

; 1508 : 			break;

  0059f	eb 05		 jmp	 SHORT $LN15@DoAutoTest
$LN13@DoAutoTest:

; 1509 : 	}

  005a1	e9 2e ff ff ff	 jmp	 $LN16@DoAutoTest
$LN15@DoAutoTest:

; 1510 : 	if (i != SERPENT_TEST_COUNT)

  005a6	83 7d fc 01	 cmp	 DWORD PTR _i$[ebp], 1
  005aa	74 07		 je	 SHORT $LN12@DoAutoTest

; 1511 : 		bFailed = TRUE;

  005ac	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$LN12@DoAutoTest:

; 1512 : 
; 1513 : 
; 1514 : 	/* Twofish */
; 1515 : 
; 1516 : 	for (i = 0; i < TWOFISH_TEST_COUNT; i++)

  005b3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  005ba	eb 09		 jmp	 SHORT $LN11@DoAutoTest
$LN10@DoAutoTest:
  005bc	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  005bf	83 c1 01	 add	 ecx, 1
  005c2	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN11@DoAutoTest:
  005c5	83 7d fc 01	 cmp	 DWORD PTR _i$[ebp], 1
  005c9	0f 8d bf 00 00
	00		 jge	 $LN9@DoAutoTest

; 1517 : 	{			
; 1518 : 		int cipher = TWOFISH;

  005cf	c7 85 a0 fb ff
	ff 03 00 00 00	 mov	 DWORD PTR _cipher$27664[ebp], 3

; 1519 : 		memcpy(key, twofish_vectors[i].key, 32);

  005d9	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
  005dc	c1 e6 06	 shl	 esi, 6
  005df	81 c6 00 00 00
	00		 add	 esi, OFFSET _twofish_vectors
  005e5	b9 08 00 00 00	 mov	 ecx, 8
  005ea	8d 7d c0	 lea	 edi, DWORD PTR _key$[ebp]
  005ed	f3 a5		 rep movsd

; 1520 : 		memcpy(tmp, twofish_vectors[i].plaintext, 16);

  005ef	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  005f2	c1 e2 06	 shl	 edx, 6
  005f5	81 c2 20 00 00
	00		 add	 edx, OFFSET _twofish_vectors+32
  005fb	8b 02		 mov	 eax, DWORD PTR [edx]
  005fd	89 45 e0	 mov	 DWORD PTR _tmp$[ebp], eax
  00600	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00603	89 4d e4	 mov	 DWORD PTR _tmp$[ebp+4], ecx
  00606	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00609	89 45 e8	 mov	 DWORD PTR _tmp$[ebp+8], eax
  0060c	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0060f	89 4d ec	 mov	 DWORD PTR _tmp$[ebp+12], ecx

; 1521 : 		CipherInit(cipher, key, ks_tmp);

  00612	68 00 00 00 00	 push	 OFFSET _ks_tmp
  00617	8d 55 c0	 lea	 edx, DWORD PTR _key$[ebp]
  0061a	52		 push	 edx
  0061b	8b 85 a0 fb ff
	ff		 mov	 eax, DWORD PTR _cipher$27664[ebp]
  00621	50		 push	 eax
  00622	e8 00 00 00 00	 call	 _CipherInit@12

; 1522 : 
; 1523 : 		EncipherBlock(cipher, tmp, ks_tmp);

  00627	68 00 00 00 00	 push	 OFFSET _ks_tmp
  0062c	8d 4d e0	 lea	 ecx, DWORD PTR _tmp$[ebp]
  0062f	51		 push	 ecx
  00630	8b 95 a0 fb ff
	ff		 mov	 edx, DWORD PTR _cipher$27664[ebp]
  00636	52		 push	 edx
  00637	e8 00 00 00 00	 call	 _EncipherBlock@12

; 1524 : 		if (memcmp(twofish_vectors[i].ciphertext, tmp, 16) != 0)

  0063c	b9 04 00 00 00	 mov	 ecx, 4
  00641	8d 7d e0	 lea	 edi, DWORD PTR _tmp$[ebp]
  00644	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
  00647	c1 e6 06	 shl	 esi, 6
  0064a	81 c6 30 00 00
	00		 add	 esi, OFFSET _twofish_vectors+48
  00650	33 c0		 xor	 eax, eax
  00652	f3 a7		 repe cmpsd
  00654	74 02		 je	 SHORT $LN8@DoAutoTest

; 1525 : 			break;

  00656	eb 36		 jmp	 SHORT $LN9@DoAutoTest
$LN8@DoAutoTest:

; 1526 : 
; 1527 : 		DecipherBlock(cipher, tmp, ks_tmp);

  00658	68 00 00 00 00	 push	 OFFSET _ks_tmp
  0065d	8d 4d e0	 lea	 ecx, DWORD PTR _tmp$[ebp]
  00660	51		 push	 ecx
  00661	8b 95 a0 fb ff
	ff		 mov	 edx, DWORD PTR _cipher$27664[ebp]
  00667	52		 push	 edx
  00668	e8 00 00 00 00	 call	 _DecipherBlock@12

; 1528 : 		if (memcmp(twofish_vectors[i].plaintext, tmp, 16) != 0)

  0066d	b9 04 00 00 00	 mov	 ecx, 4
  00672	8d 7d e0	 lea	 edi, DWORD PTR _tmp$[ebp]
  00675	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
  00678	c1 e6 06	 shl	 esi, 6
  0067b	81 c6 20 00 00
	00		 add	 esi, OFFSET _twofish_vectors+32
  00681	33 c0		 xor	 eax, eax
  00683	f3 a7		 repe cmpsd
  00685	74 02		 je	 SHORT $LN7@DoAutoTest

; 1529 : 			break;

  00687	eb 05		 jmp	 SHORT $LN9@DoAutoTest
$LN7@DoAutoTest:

; 1530 : 	}

  00689	e9 2e ff ff ff	 jmp	 $LN10@DoAutoTest
$LN9@DoAutoTest:

; 1531 : 	if (i != TWOFISH_TEST_COUNT)

  0068e	83 7d fc 01	 cmp	 DWORD PTR _i$[ebp], 1
  00692	74 07		 je	 SHORT $LN6@DoAutoTest

; 1532 : 		bFailed = TRUE;

  00694	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$LN6@DoAutoTest:

; 1533 : 
; 1534 : 	
; 1535 : 	/* PKCS #5 and HMACs */
; 1536 : 	if (!test_pkcs5 ())

  0069b	e8 00 00 00 00	 call	 _test_pkcs5@0
  006a0	85 c0		 test	 eax, eax
  006a2	75 07		 jne	 SHORT $LN5@DoAutoTest

; 1537 : 		bFailed = TRUE;

  006a4	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$LN5@DoAutoTest:

; 1538 : 
; 1539 : 	/* CRC-32 */
; 1540 : 	if (!crc32_selftests ())

  006ab	e8 00 00 00 00	 call	 _crc32_selftests@0
  006b0	85 c0		 test	 eax, eax
  006b2	75 07		 jne	 SHORT $LN4@DoAutoTest

; 1541 : 		bFailed = TRUE;

  006b4	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$LN4@DoAutoTest:

; 1542 : 
; 1543 : 	/* GF multiplicator */
; 1544 : #if 0
; 1545 : 	if (!GfMulSelfTest ())
; 1546 : 		bFailed = TRUE;
; 1547 : #endif
; 1548 : 
; 1549 : 	/* XTS-AES */
; 1550 : 	if (!XTSAesTest (ci))

  006bb	8b 4d f8	 mov	 ecx, DWORD PTR _ci$[ebp]
  006be	51		 push	 ecx
  006bf	e8 00 00 00 00	 call	 _XTSAesTest@4
  006c4	85 c0		 test	 eax, eax
  006c6	75 07		 jne	 SHORT $LN3@DoAutoTest

; 1551 : 		bFailed = TRUE;

  006c8	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$LN3@DoAutoTest:

; 1552 : 
; 1553 : 	/* LRW-AES (deprecated/legacy) */
; 1554 : 	if (!LRWAesTest (ci))

  006cf	8b 55 f8	 mov	 edx, DWORD PTR _ci$[ebp]
  006d2	52		 push	 edx
  006d3	e8 00 00 00 00	 call	 _LRWAesTest@4
  006d8	85 c0		 test	 eax, eax
  006da	75 07		 jne	 SHORT $LN2@DoAutoTest

; 1555 : 		bFailed = TRUE;

  006dc	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$LN2@DoAutoTest:

; 1556 : 
; 1557 : 	/* Sector and buffer related algorithms */
; 1558 : 	if (!TestSectorBufEncryption (ci))

  006e3	8b 45 f8	 mov	 eax, DWORD PTR _ci$[ebp]
  006e6	50		 push	 eax
  006e7	e8 00 00 00 00	 call	 _TestSectorBufEncryption@4
  006ec	85 c0		 test	 eax, eax
  006ee	75 07		 jne	 SHORT $LN1@DoAutoTest

; 1559 : 		bFailed = TRUE;

  006f0	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$LN1@DoAutoTest:

; 1560 : 	
; 1561 : 	crypto_close (ci);

  006f7	8b 4d f8	 mov	 ecx, DWORD PTR _ci$[ebp]
  006fa	51		 push	 ecx
  006fb	e8 00 00 00 00	 call	 _crypto_close@4

; 1562 : 	return !bFailed;

  00700	33 c0		 xor	 eax, eax
  00702	83 7d f4 00	 cmp	 DWORD PTR _bFailed$[ebp], 0
  00706	0f 94 c0	 sete	 al
$LN46@DoAutoTest:

; 1563 : }

  00709	5f		 pop	 edi
  0070a	5e		 pop	 esi
  0070b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0070e	33 cd		 xor	 ecx, ebp
  00710	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00715	8b e5		 mov	 esp, ebp
  00717	5d		 pop	 ebp
  00718	c3		 ret	 0
_DoAutoTestAlgorithms@0 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_test_hmac_sha512@0
EXTRN	_hmac_sha512@24:PROC
; Function compile flags: /Odtp
;	COMDAT _test_hmac_sha512@0
_TEXT	SEGMENT
tv81 = -112						; size = 4
tv150 = -105						; size = 1
tv147 = -104						; size = 4
tv144 = -100						; size = 4
tv72 = -96						; size = 4
tv138 = -89						; size = 1
tv135 = -88						; size = 4
tv132 = -84						; size = 4
_digest$27686 = -80					; size = 64
__$ArrayPad$ = -12					; size = 4
_nTestsPerformed$ = -8					; size = 4
_i$ = -4						; size = 4
_test_hmac_sha512@0 PROC				; COMDAT

; 1587 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 70	 sub	 esp, 112		; 00000070H
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 f4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00012	56		 push	 esi
  00013	57		 push	 edi

; 1588 : 	unsigned int i;
; 1589 : 	int nTestsPerformed = 0;

  00014	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nTestsPerformed$[ebp], 0

; 1590 : 
; 1591 : 	for (i = 0; i < sizeof (hmac_sha512_test_data) / sizeof(char *); i++)

  0001b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00022	eb 09		 jmp	 SHORT $LN5@test_hmac_
$LN4@test_hmac_:
  00024	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00027	83 c0 01	 add	 eax, 1
  0002a	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN5@test_hmac_:
  0002d	83 7d fc 06	 cmp	 DWORD PTR _i$[ebp], 6
  00031	0f 83 b7 00 00
	00		 jae	 $LN3@test_hmac_

; 1592 : 	{
; 1593 : 		char digest[SHA512_DIGESTSIZE];
; 1594 : 		hmac_sha512 (hmac_sha512_test_keys[i], (int) strlen (hmac_sha512_test_keys[i]), hmac_sha512_test_data[i], (int) strlen (hmac_sha512_test_data[i]), digest, SHA512_DIGESTSIZE);

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0003a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _hmac_sha512_test_data[ecx*4]
  00041	89 55 ac	 mov	 DWORD PTR tv132[ebp], edx
  00044	8b 45 ac	 mov	 eax, DWORD PTR tv132[ebp]
  00047	83 c0 01	 add	 eax, 1
  0004a	89 45 a8	 mov	 DWORD PTR tv135[ebp], eax
$LL8@test_hmac_:
  0004d	8b 4d ac	 mov	 ecx, DWORD PTR tv132[ebp]
  00050	8a 11		 mov	 dl, BYTE PTR [ecx]
  00052	88 55 a7	 mov	 BYTE PTR tv138[ebp], dl
  00055	83 45 ac 01	 add	 DWORD PTR tv132[ebp], 1
  00059	80 7d a7 00	 cmp	 BYTE PTR tv138[ebp], 0
  0005d	75 ee		 jne	 SHORT $LL8@test_hmac_
  0005f	8b 45 ac	 mov	 eax, DWORD PTR tv132[ebp]
  00062	2b 45 a8	 sub	 eax, DWORD PTR tv135[ebp]
  00065	89 45 a0	 mov	 DWORD PTR tv72[ebp], eax
  00068	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0006b	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _hmac_sha512_test_keys[ecx*4]
  00072	89 55 9c	 mov	 DWORD PTR tv144[ebp], edx
  00075	8b 45 9c	 mov	 eax, DWORD PTR tv144[ebp]
  00078	83 c0 01	 add	 eax, 1
  0007b	89 45 98	 mov	 DWORD PTR tv147[ebp], eax
$LL9@test_hmac_:
  0007e	8b 4d 9c	 mov	 ecx, DWORD PTR tv144[ebp]
  00081	8a 11		 mov	 dl, BYTE PTR [ecx]
  00083	88 55 97	 mov	 BYTE PTR tv150[ebp], dl
  00086	83 45 9c 01	 add	 DWORD PTR tv144[ebp], 1
  0008a	80 7d 97 00	 cmp	 BYTE PTR tv150[ebp], 0
  0008e	75 ee		 jne	 SHORT $LL9@test_hmac_
  00090	8b 45 9c	 mov	 eax, DWORD PTR tv144[ebp]
  00093	2b 45 98	 sub	 eax, DWORD PTR tv147[ebp]
  00096	89 45 90	 mov	 DWORD PTR tv81[ebp], eax
  00099	6a 40		 push	 64			; 00000040H
  0009b	8d 4d b0	 lea	 ecx, DWORD PTR _digest$27686[ebp]
  0009e	51		 push	 ecx
  0009f	8b 55 a0	 mov	 edx, DWORD PTR tv72[ebp]
  000a2	52		 push	 edx
  000a3	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000a6	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _hmac_sha512_test_data[eax*4]
  000ad	51		 push	 ecx
  000ae	8b 55 90	 mov	 edx, DWORD PTR tv81[ebp]
  000b1	52		 push	 edx
  000b2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000b5	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _hmac_sha512_test_keys[eax*4]
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 _hmac_sha512@24

; 1595 : 		if (memcmp (digest, hmac_sha512_test_vectors[i], SHA512_DIGESTSIZE) != 0)

  000c2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000c7	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000ca	8b 3c 95 00 00
	00 00		 mov	 edi, DWORD PTR _hmac_sha512_test_vectors[edx*4]
  000d1	8d 75 b0	 lea	 esi, DWORD PTR _digest$27686[ebp]
  000d4	33 c0		 xor	 eax, eax
  000d6	f3 a7		 repe cmpsd
  000d8	74 06		 je	 SHORT $LN2@test_hmac_

; 1596 : 			return FALSE;

  000da	33 c0		 xor	 eax, eax
  000dc	eb 19		 jmp	 SHORT $LN6@test_hmac_

; 1597 : 		else

  000de	eb 09		 jmp	 SHORT $LN1@test_hmac_
$LN2@test_hmac_:

; 1598 : 			nTestsPerformed++;

  000e0	8b 4d f8	 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  000e3	83 c1 01	 add	 ecx, 1
  000e6	89 4d f8	 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
$LN1@test_hmac_:

; 1599 : 	}

  000e9	e9 36 ff ff ff	 jmp	 $LN4@test_hmac_
$LN3@test_hmac_:

; 1600 : 
; 1601 : 	return (nTestsPerformed == 6);

  000ee	33 c0		 xor	 eax, eax
  000f0	83 7d f8 06	 cmp	 DWORD PTR _nTestsPerformed$[ebp], 6
  000f4	0f 94 c0	 sete	 al
$LN6@test_hmac_:

; 1602 : }

  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fc	33 cd		 xor	 ecx, ebp
  000fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
_test_hmac_sha512@0 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_test_hmac_sha1@0
EXTRN	_hmac_sha1@24:PROC
; Function compile flags: /Odtp
;	COMDAT _test_hmac_sha1@0
_TEXT	SEGMENT
tv81 = -64						; size = 4
tv150 = -57						; size = 1
tv147 = -56						; size = 4
tv144 = -52						; size = 4
tv72 = -48						; size = 4
tv138 = -41						; size = 1
tv135 = -40						; size = 4
tv132 = -36						; size = 4
_digest$27697 = -32					; size = 20
__$ArrayPad$ = -12					; size = 4
_nTestsPerformed$ = -8					; size = 4
_i$ = -4						; size = 4
_test_hmac_sha1@0 PROC					; COMDAT

; 1605 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 40	 sub	 esp, 64			; 00000040H
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 f4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00012	56		 push	 esi
  00013	57		 push	 edi

; 1606 : 	// Deprecated/legacy
; 1607 : 
; 1608 : 	int nTestsPerformed = 0;

  00014	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nTestsPerformed$[ebp], 0

; 1609 : 	int i;
; 1610 : 
; 1611 : 	for (i = 0; i < 3; i++)

  0001b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00022	eb 09		 jmp	 SHORT $LN5@test_hmac_@2
$LN4@test_hmac_@2:
  00024	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00027	83 c0 01	 add	 eax, 1
  0002a	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN5@test_hmac_@2:
  0002d	83 7d fc 03	 cmp	 DWORD PTR _i$[ebp], 3
  00031	0f 8d b7 00 00
	00		 jge	 $LN3@test_hmac_@2

; 1612 : 	{
; 1613 : 		char digest[SHA1_DIGESTSIZE];
; 1614 : 		hmac_sha1 (hmac_sha1_test_keys[i], (int) strlen (hmac_sha1_test_keys[i]), hmac_sha1_test_data[i], (int) strlen (hmac_sha1_test_data[i]), digest, SHA1_DIGESTSIZE);

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0003a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _hmac_sha1_test_data[ecx*4]
  00041	89 55 dc	 mov	 DWORD PTR tv132[ebp], edx
  00044	8b 45 dc	 mov	 eax, DWORD PTR tv132[ebp]
  00047	83 c0 01	 add	 eax, 1
  0004a	89 45 d8	 mov	 DWORD PTR tv135[ebp], eax
$LL8@test_hmac_@2:
  0004d	8b 4d dc	 mov	 ecx, DWORD PTR tv132[ebp]
  00050	8a 11		 mov	 dl, BYTE PTR [ecx]
  00052	88 55 d7	 mov	 BYTE PTR tv138[ebp], dl
  00055	83 45 dc 01	 add	 DWORD PTR tv132[ebp], 1
  00059	80 7d d7 00	 cmp	 BYTE PTR tv138[ebp], 0
  0005d	75 ee		 jne	 SHORT $LL8@test_hmac_@2
  0005f	8b 45 dc	 mov	 eax, DWORD PTR tv132[ebp]
  00062	2b 45 d8	 sub	 eax, DWORD PTR tv135[ebp]
  00065	89 45 d0	 mov	 DWORD PTR tv72[ebp], eax
  00068	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0006b	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _hmac_sha1_test_keys[ecx*4]
  00072	89 55 cc	 mov	 DWORD PTR tv144[ebp], edx
  00075	8b 45 cc	 mov	 eax, DWORD PTR tv144[ebp]
  00078	83 c0 01	 add	 eax, 1
  0007b	89 45 c8	 mov	 DWORD PTR tv147[ebp], eax
$LL9@test_hmac_@2:
  0007e	8b 4d cc	 mov	 ecx, DWORD PTR tv144[ebp]
  00081	8a 11		 mov	 dl, BYTE PTR [ecx]
  00083	88 55 c7	 mov	 BYTE PTR tv150[ebp], dl
  00086	83 45 cc 01	 add	 DWORD PTR tv144[ebp], 1
  0008a	80 7d c7 00	 cmp	 BYTE PTR tv150[ebp], 0
  0008e	75 ee		 jne	 SHORT $LL9@test_hmac_@2
  00090	8b 45 cc	 mov	 eax, DWORD PTR tv144[ebp]
  00093	2b 45 c8	 sub	 eax, DWORD PTR tv147[ebp]
  00096	89 45 c0	 mov	 DWORD PTR tv81[ebp], eax
  00099	6a 14		 push	 20			; 00000014H
  0009b	8d 4d e0	 lea	 ecx, DWORD PTR _digest$27697[ebp]
  0009e	51		 push	 ecx
  0009f	8b 55 d0	 mov	 edx, DWORD PTR tv72[ebp]
  000a2	52		 push	 edx
  000a3	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000a6	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _hmac_sha1_test_data[eax*4]
  000ad	51		 push	 ecx
  000ae	8b 55 c0	 mov	 edx, DWORD PTR tv81[ebp]
  000b1	52		 push	 edx
  000b2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000b5	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _hmac_sha1_test_keys[eax*4]
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 _hmac_sha1@24

; 1615 : 		if (memcmp (digest, hmac_sha1_test_vectors[i], SHA1_DIGESTSIZE) != 0)

  000c2	b9 05 00 00 00	 mov	 ecx, 5
  000c7	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000ca	8b 3c 95 00 00
	00 00		 mov	 edi, DWORD PTR _hmac_sha1_test_vectors[edx*4]
  000d1	8d 75 e0	 lea	 esi, DWORD PTR _digest$27697[ebp]
  000d4	33 c0		 xor	 eax, eax
  000d6	f3 a7		 repe cmpsd
  000d8	74 06		 je	 SHORT $LN2@test_hmac_@2

; 1616 : 			return FALSE;

  000da	33 c0		 xor	 eax, eax
  000dc	eb 19		 jmp	 SHORT $LN6@test_hmac_@2

; 1617 : 		else

  000de	eb 09		 jmp	 SHORT $LN1@test_hmac_@2
$LN2@test_hmac_@2:

; 1618 : 			nTestsPerformed++;

  000e0	8b 4d f8	 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  000e3	83 c1 01	 add	 ecx, 1
  000e6	89 4d f8	 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
$LN1@test_hmac_@2:

; 1619 : 	}

  000e9	e9 36 ff ff ff	 jmp	 $LN4@test_hmac_@2
$LN3@test_hmac_@2:

; 1620 : 
; 1621 : 	return (nTestsPerformed == 3);

  000ee	33 c0		 xor	 eax, eax
  000f0	83 7d f8 03	 cmp	 DWORD PTR _nTestsPerformed$[ebp], 3
  000f4	0f 94 c0	 sete	 al
$LN6@test_hmac_@2:

; 1622 : }

  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fc	33 cd		 xor	 ecx, ebp
  000fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
_test_hmac_sha1@0 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_test_hmac_ripemd160@0
EXTRN	_hmac_ripemd160@20:PROC
; Function compile flags: /Odtp
;	COMDAT _test_hmac_ripemd160@0
_TEXT	SEGMENT
tv71 = -48						; size = 4
tv132 = -41						; size = 1
tv129 = -40						; size = 4
tv94 = -36						; size = 4
_digest$27709 = -32					; size = 20
__$ArrayPad$ = -12					; size = 4
_nTestsPerformed$ = -8					; size = 4
_i$ = -4						; size = 4
_test_hmac_ripemd160@0 PROC				; COMDAT

; 1625 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 30	 sub	 esp, 48			; 00000030H
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 f4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00012	56		 push	 esi
  00013	57		 push	 edi

; 1626 : 	int nTestsPerformed = 0;

  00014	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nTestsPerformed$[ebp], 0

; 1627 : 	unsigned int i;
; 1628 : 
; 1629 : 	for (i = 0; i < sizeof (hmac_ripemd160_test_data) / sizeof(char *); i++)

  0001b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00022	eb 09		 jmp	 SHORT $LN5@test_hmac_@3
$LN4@test_hmac_@3:
  00024	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00027	83 c0 01	 add	 eax, 1
  0002a	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN5@test_hmac_@3:
  0002d	83 7d fc 02	 cmp	 DWORD PTR _i$[ebp], 2
  00031	0f 83 82 00 00
	00		 jae	 $LN3@test_hmac_@3

; 1630 : 	{
; 1631 : 		char digest[RIPEMD160_DIGESTSIZE];
; 1632 : 		hmac_ripemd160 (hmac_ripemd160_test_keys[i], RIPEMD160_DIGESTSIZE, hmac_ripemd160_test_data[i], (int) strlen (hmac_ripemd160_test_data[i]), digest);

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0003a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _hmac_ripemd160_test_data[ecx*4]
  00041	89 55 dc	 mov	 DWORD PTR tv94[ebp], edx
  00044	8b 45 dc	 mov	 eax, DWORD PTR tv94[ebp]
  00047	83 c0 01	 add	 eax, 1
  0004a	89 45 d8	 mov	 DWORD PTR tv129[ebp], eax
$LL8@test_hmac_@3:
  0004d	8b 4d dc	 mov	 ecx, DWORD PTR tv94[ebp]
  00050	8a 11		 mov	 dl, BYTE PTR [ecx]
  00052	88 55 d7	 mov	 BYTE PTR tv132[ebp], dl
  00055	83 45 dc 01	 add	 DWORD PTR tv94[ebp], 1
  00059	80 7d d7 00	 cmp	 BYTE PTR tv132[ebp], 0
  0005d	75 ee		 jne	 SHORT $LL8@test_hmac_@3
  0005f	8b 45 dc	 mov	 eax, DWORD PTR tv94[ebp]
  00062	2b 45 d8	 sub	 eax, DWORD PTR tv129[ebp]
  00065	89 45 d0	 mov	 DWORD PTR tv71[ebp], eax
  00068	8d 4d e0	 lea	 ecx, DWORD PTR _digest$27709[ebp]
  0006b	51		 push	 ecx
  0006c	8b 55 d0	 mov	 edx, DWORD PTR tv71[ebp]
  0006f	52		 push	 edx
  00070	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00073	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _hmac_ripemd160_test_data[eax*4]
  0007a	51		 push	 ecx
  0007b	6a 14		 push	 20			; 00000014H
  0007d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00080	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _hmac_ripemd160_test_keys[edx*4]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _hmac_ripemd160@20

; 1633 : 		if (memcmp (digest, hmac_ripemd160_test_vectors[i], RIPEMD160_DIGESTSIZE) != 0)

  0008d	b9 05 00 00 00	 mov	 ecx, 5
  00092	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00095	8b 3c 95 00 00
	00 00		 mov	 edi, DWORD PTR _hmac_ripemd160_test_vectors[edx*4]
  0009c	8d 75 e0	 lea	 esi, DWORD PTR _digest$27709[ebp]
  0009f	33 c0		 xor	 eax, eax
  000a1	f3 a7		 repe cmpsd
  000a3	74 06		 je	 SHORT $LN2@test_hmac_@3

; 1634 : 			return FALSE;

  000a5	33 c0		 xor	 eax, eax
  000a7	eb 19		 jmp	 SHORT $LN6@test_hmac_@3

; 1635 : 		else

  000a9	eb 09		 jmp	 SHORT $LN1@test_hmac_@3
$LN2@test_hmac_@3:

; 1636 : 			nTestsPerformed++;

  000ab	8b 4d f8	 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  000ae	83 c1 01	 add	 ecx, 1
  000b1	89 4d f8	 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
$LN1@test_hmac_@3:

; 1637 : 	}

  000b4	e9 6b ff ff ff	 jmp	 $LN4@test_hmac_@3
$LN3@test_hmac_@3:

; 1638 : 
; 1639 : 	return (nTestsPerformed == 2);

  000b9	33 c0		 xor	 eax, eax
  000bb	83 7d f8 02	 cmp	 DWORD PTR _nTestsPerformed$[ebp], 2
  000bf	0f 94 c0	 sete	 al
$LN6@test_hmac_@3:

; 1640 : }

  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	8b 4d f4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c7	33 cd		 xor	 ecx, ebp
  000c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
_test_hmac_ripemd160@0 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_test_hmac_whirlpool@0
EXTRN	_hmac_whirlpool@24:PROC
; Function compile flags: /Odtp
;	COMDAT _test_hmac_whirlpool@0
_TEXT	SEGMENT
tv68 = -88						; size = 4
tv86 = -81						; size = 1
tv83 = -80						; size = 4
tv80 = -76						; size = 4
_digest$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_test_hmac_whirlpool@0 PROC				; COMDAT

; 1643 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 58	 sub	 esp, 88			; 00000058H
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00012	56		 push	 esi
  00013	57		 push	 edi

; 1644 : 	unsigned char digest[WHIRLPOOL_DIGESTSIZE];
; 1645 : 
; 1646 : 	hmac_whirlpool (hmac_whirlpool_test_key, 64, hmac_whirlpool_test_data, (int) strlen (hmac_whirlpool_test_data), digest, WHIRLPOOL_DIGESTSIZE);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR _hmac_whirlpool_test_data
  00019	89 45 b4	 mov	 DWORD PTR tv80[ebp], eax
  0001c	8b 4d b4	 mov	 ecx, DWORD PTR tv80[ebp]
  0001f	83 c1 01	 add	 ecx, 1
  00022	89 4d b0	 mov	 DWORD PTR tv83[ebp], ecx
$LL4@test_hmac_@4:
  00025	8b 55 b4	 mov	 edx, DWORD PTR tv80[ebp]
  00028	8a 02		 mov	 al, BYTE PTR [edx]
  0002a	88 45 af	 mov	 BYTE PTR tv86[ebp], al
  0002d	83 45 b4 01	 add	 DWORD PTR tv80[ebp], 1
  00031	80 7d af 00	 cmp	 BYTE PTR tv86[ebp], 0
  00035	75 ee		 jne	 SHORT $LL4@test_hmac_@4
  00037	8b 4d b4	 mov	 ecx, DWORD PTR tv80[ebp]
  0003a	2b 4d b0	 sub	 ecx, DWORD PTR tv83[ebp]
  0003d	89 4d a8	 mov	 DWORD PTR tv68[ebp], ecx
  00040	6a 40		 push	 64			; 00000040H
  00042	8d 55 b8	 lea	 edx, DWORD PTR _digest$[ebp]
  00045	52		 push	 edx
  00046	8b 45 a8	 mov	 eax, DWORD PTR tv68[ebp]
  00049	50		 push	 eax
  0004a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hmac_whirlpool_test_data
  00050	51		 push	 ecx
  00051	6a 40		 push	 64			; 00000040H
  00053	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hmac_whirlpool_test_key
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 _hmac_whirlpool@24

; 1647 : 	if (memcmp (digest, hmac_whirlpool_test_vectors, WHIRLPOOL_DIGESTSIZE) != 0)

  0005f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00064	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _hmac_whirlpool_test_vectors
  0006a	8d 75 b8	 lea	 esi, DWORD PTR _digest$[ebp]
  0006d	33 c0		 xor	 eax, eax
  0006f	f3 a7		 repe cmpsd
  00071	74 04		 je	 SHORT $LN1@test_hmac_@4

; 1648 : 		return FALSE;

  00073	33 c0		 xor	 eax, eax
  00075	eb 05		 jmp	 SHORT $LN2@test_hmac_@4
$LN1@test_hmac_@4:

; 1649 : 
; 1650 : 	return TRUE;

  00077	b8 01 00 00 00	 mov	 eax, 1
$LN2@test_hmac_@4:

; 1651 : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00081	33 cd		 xor	 ecx, ebp
  00083	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
_test_hmac_whirlpool@0 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04PODIBCAH@z?$DN?$HM?$AD?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04BHFCCAHB@?2u?N?p?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04KFFKJODL@?$BDd?$KO?x?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_08NLHBPEGP@password?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	__$ArrayPad$
EXTRN	_derive_key_whirlpool@28:PROC
EXTRN	_derive_key_ripemd160@28:PROC
EXTRN	_derive_key_sha1@28:PROC
EXTRN	_derive_key_sha512@28:PROC
;	COMDAT ??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@
text$s	SEGMENT
??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@ DB 'P'
	DB	'|6o', 0eeH, 010H, '.', 09aH, 0e2H, 08aH, 0d5H, 082H, 'r}''', 0fH
	DB	0e8H, 'M', 07fH, 'hz', 0cfH, 0b5H, 0e7H, 'Cg', 0aaH, 098H, 093H
	DB	'R+', 09H, 'nB', 0dfH, ',YJ', 091H, 'm~', 010H, 0aeH, 0b2H, 01aH
	DB	089H, 08fH, 0b9H, 08fH, 0e6H, '1', 0a9H, 0d8H, 09fH, 098H, '&', 0f4H
	DB	0daH, 0cdH, '}ee', 0deH, 010H, 095H, 091H, 0b4H, 084H, '&', 0aeH
	DB	'C', 0a1H, 00H, '[', 01eH, 0b8H, '8', 097H, 0a4H, 01eH, 'K', 0d2H
	DB	'ed', 0bcH, 0faH, 01fH, '5', 085H, 0dbH, 'O', 097H, 'eo', 0bdH
	DB	'$', 00H					;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@ DB 'P|6o', 00H	;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@FNODOBFM@
text$s	SEGMENT
??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@FNODOBFM@ DB 'z'
	DB	'=|', 03H, 0e7H, '&k', 0f8H, '=x', 0fbH, ')', 0d2H, 'd', 01fH, 'V'
	DB	0eaH, 0f0H, 0e5H, 0f5H, 0ccH, 0c4H, ':1', 0a8H, 084H, 'p', 0bfH
	DB	0bdH, 'o', 08eH, 'x$Z', 0c0H, 0aH, 0f6H, 0faH, 0f0H, 0f6H, 0e9H
	DB	00H, 'G_s', 0ceH, 0e1H, 'C', 00H		;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04PODIBCAH@z?$DN?$HM?$AD?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04PODIBCAH@z?$DN?$HM?$AD?$AA@FNODOBFM@ DB 'z=|', 03H, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04BHFCCAHB@?2u?N?p?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04BHFCCAHB@?2u?N?p?$AA@FNODOBFM@ DB '\u', 0ceH, 0f0H, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@FNODOBFM@
text$s	SEGMENT
??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@FNODOBFM@ DB '\'
	DB	'u', 0ceH, 0f0H, 01aH, 096H, 0dH, 0f7H, 'L', 0b6H, 0b4H, 09bH, 09eH
	DB	'8', 0e6H, 0b5H, ';', 011H, 080H, 0e3H, '/', 0f7H, 0e0H, 0ddH, 0aaH
	DB	0caH, 08fH, 081H, '''', 0f6H, 09fH, 'O', 01dH, 0c8H, '/H-', 0dbH
	DB	01aH, 0aH, 0caH, 090H, 0cbH, 080H, 0b9H, '.', 090H, 09eH, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@FNODOBFM@
text$s	SEGMENT
??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@FNODOBFM@ DB 013H
	DB	'd', 0aeH, 0f8H, 0dH, 0f5H, 'Wl0', 0d5H, 'qL', 0a7H, 'u?', 0fdH
	DB	00H, 0e5H, '%', 08bH, '9', 0c7H, 'D', 07fH, 0ceH, '#=', 08H, 'u'
	DB	0e0H, '/H', 0d6H, '0', 0d7H, 00H, 0b6H, '$', 0dbH, 0e0H, 'Z', 0d7H
	DB	'G', 0efH, 'R', 0caH, 0a6H, '4', 083H, 'G', 0e5H, 0cbH, 0e9H, 087H
	DB	0f1H, ' Yj', 0e6H, 0a9H, 0cfH, 'Qx', 0c6H, 0b6H, '#', 0a6H, 't'
	DB	0dH, 0e8H, 091H, 0beH, 01aH, 0d0H, '(', 0ccH, 0ceH, 016H, 098H
	DB	09aH, 0beH, 0fbH, 0dcH, 'x', 0c9H, 0e1H, '}rg', 0ceH, 0e1H, 'a'
	DB	'V_', 096H, 'h', 0e6H, 0e1H, 0ddH, 0f4H, 0bfH, 01bH, 080H, 0e0H
	DB	019H, 01cH, 0f4H, 0c4H, 0d3H, 0ddH, 0d5H, 0d5H, 'W-', 083H, 0c7H
	DB	0a3H, '7', 087H, 0f4H, 'N', 0e0H, 0f6H, 0d8H, 'me', 0dcH, 0a0H
	DB	'R', 0a3H, 013H, 0beH, 081H, 0fcH, '0', 0beH, '}iX4', 0b6H, 0ddH
	DB	'A', 0c6H, 00H				;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04KFFKJODL@?$BDd?$KO?x?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04KFFKJODL@?$BDd?$KO?x?$AA@FNODOBFM@ DB 013H, 'd', 0aeH, 0f8H, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_08NLHBPEGP@password?$AA@FNODOBFM@ DB 'password', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@ DB 012H, '4Vx', 00H ;  ?? ::FNODOBFM::`string'
; Function compile flags: /Odtp
text$s	ENDS
;	COMDAT _test_pkcs5@0
_TEXT	SEGMENT
_dk$ = -152						; size = 144
__$ArrayPad$ = -4					; size = 4
_test_pkcs5@0 PROC					; COMDAT

; 1654 : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	56		 push	 esi
  00016	57		 push	 edi

; 1655 : 	char dk[144];
; 1656 : 
; 1657 : 	/* HMAC-SHA-512 tests */
; 1658 : 	if (!test_hmac_sha512())

  00017	e8 00 00 00 00	 call	 _test_hmac_sha512@0
  0001c	85 c0		 test	 eax, eax
  0001e	75 07		 jne	 SHORT $LN12@test_pkcs5

; 1659 : 		return FALSE;

  00020	33 c0		 xor	 eax, eax
  00022	e9 eb 01 00 00	 jmp	 $LN13@test_pkcs5
$LN12@test_pkcs5:

; 1660 : 
; 1661 : 	/* HMAC-SHA-1 tests (deprecated/legacy)  */
; 1662 : 	if (test_hmac_sha1() == FALSE)

  00027	e8 00 00 00 00	 call	 _test_hmac_sha1@0
  0002c	85 c0		 test	 eax, eax
  0002e	75 07		 jne	 SHORT $LN11@test_pkcs5

; 1663 : 		return FALSE;

  00030	33 c0		 xor	 eax, eax
  00032	e9 db 01 00 00	 jmp	 $LN13@test_pkcs5
$LN11@test_pkcs5:

; 1664 : 
; 1665 : 	/* HMAC-RIPEMD-160 tests */
; 1666 : 	if (test_hmac_ripemd160() == FALSE)

  00037	e8 00 00 00 00	 call	 _test_hmac_ripemd160@0
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN10@test_pkcs5

; 1667 : 		return FALSE;

  00040	33 c0		 xor	 eax, eax
  00042	e9 cb 01 00 00	 jmp	 $LN13@test_pkcs5
$LN10@test_pkcs5:

; 1668 : 
; 1669 : 	/* HMAC-Whirlpool tests */
; 1670 : 	if (test_hmac_whirlpool() == FALSE)

  00047	e8 00 00 00 00	 call	 _test_hmac_whirlpool@0
  0004c	85 c0		 test	 eax, eax
  0004e	75 07		 jne	 SHORT $LN9@test_pkcs5

; 1671 : 		return FALSE;

  00050	33 c0		 xor	 eax, eax
  00052	e9 bb 01 00 00	 jmp	 $LN13@test_pkcs5
$LN9@test_pkcs5:

; 1672 : 
; 1673 : 	/* PKCS-5 test 1 with HMAC-SHA-512 used as the PRF */
; 1674 : 	derive_key_sha512 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  00057	6a 04		 push	 4
  00059	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  0005f	50		 push	 eax
  00060	6a 05		 push	 5
  00062	6a 04		 push	 4
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  00069	6a 08		 push	 8
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  00070	e8 00 00 00 00	 call	 _derive_key_sha512@28

; 1675 : 	if (memcmp (dk, "\x13\x64\xae\xf8", 4) != 0)

  00075	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04KFFKJODL@?$BDd?$KO?x?$AA@FNODOBFM@
  0007a	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _dk$[ebp]
  00080	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00082	74 07		 je	 SHORT $LN8@test_pkcs5

; 1676 : 		return FALSE;

  00084	33 c0		 xor	 eax, eax
  00086	e9 87 01 00 00	 jmp	 $LN13@test_pkcs5
$LN8@test_pkcs5:

; 1677 : 
; 1678 : 	/* PKCS-5 test 2 with HMAC-SHA-512 used as the PRF (derives a key longer than the underlying
; 1679 : 	hash output size and block size) */
; 1680 : 	derive_key_sha512 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 144);

  0008b	68 90 00 00 00	 push	 144			; 00000090H
  00090	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  00096	50		 push	 eax
  00097	6a 05		 push	 5
  00099	6a 04		 push	 4
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  000a0	6a 08		 push	 8
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  000a7	e8 00 00 00 00	 call	 _derive_key_sha512@28

; 1681 : 	if (memcmp (dk, "\x13\x64\xae\xf8\x0d\xf5\x57\x6c\x30\xd5\x71\x4c\xa7\x75\x3f\xfd\x00\xe5\x25\x8b\x39\xc7\x44\x7f\xce\x23\x3d\x08\x75\xe0\x2f\x48\xd6\x30\xd7\x00\xb6\x24\xdb\xe0\x5a\xd7\x47\xef\x52\xca\xa6\x34\x83\x47\xe5\xcb\xe9\x87\xf1\x20\x59\x6a\xe6\xa9\xcf\x51\x78\xc6\xb6\x23\xa6\x74\x0d\xe8\x91\xbe\x1a\xd0\x28\xcc\xce\x16\x98\x9a\xbe\xfb\xdc\x78\xc9\xe1\x7d\x72\x67\xce\xe1\x61\x56\x5f\x96\x68\xe6\xe1\xdd\xf4\xbf\x1b\x80\xe0\x19\x1c\xf4\xc4\xd3\xdd\xd5\xd5\x57\x2d\x83\xc7\xa3\x37\x87\xf4\x4e\xe0\xf6\xd8\x6d\x65\xdc\xa0\x52\xa3\x13\xbe\x81\xfc\x30\xbe\x7d\x69\x58\x34\xb6\xdd\x41\xc6", 144) != 0)

  000ac	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  000b1	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@FNODOBFM@
  000b6	8d b5 68 ff ff
	ff		 lea	 esi, DWORD PTR _dk$[ebp]
  000bc	33 d2		 xor	 edx, edx
  000be	f3 a7		 repe cmpsd
  000c0	74 07		 je	 SHORT $LN7@test_pkcs5

; 1682 : 		return FALSE;

  000c2	33 c0		 xor	 eax, eax
  000c4	e9 49 01 00 00	 jmp	 $LN13@test_pkcs5
$LN7@test_pkcs5:

; 1683 : 
; 1684 : 	/* PKCS-5 test 1 with HMAC-SHA-1 (deprecated/legacy) used as the PRF (derives a key longer than the underlying hash) */
; 1685 : 	derive_key_sha1 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 48);

  000c9	6a 30		 push	 48			; 00000030H
  000cb	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  000d1	50		 push	 eax
  000d2	6a 05		 push	 5
  000d4	6a 04		 push	 4
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  000db	6a 08		 push	 8
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  000e2	e8 00 00 00 00	 call	 _derive_key_sha1@28

; 1686 : 	if (memcmp (dk, "\x5c\x75\xce\xf0\x1a\x96\x0d\xf7\x4c\xb6\xb4\x9b\x9e\x38\xe6\xb5\x3b\x11\x80\xe3\x2f\xf7\xe0\xdd\xaa\xca\x8f\x81\x27\xf6\x9f\x4f\x1d\xc8\x2f\x48\x2d\xdb\x1a\x0a\xca\x90\xcb\x80\xb9\x2e\x90\x9e", 48) != 0)

  000e7	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000ec	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@FNODOBFM@
  000f1	8d b5 68 ff ff
	ff		 lea	 esi, DWORD PTR _dk$[ebp]
  000f7	33 d2		 xor	 edx, edx
  000f9	f3 a7		 repe cmpsd
  000fb	74 07		 je	 SHORT $LN6@test_pkcs5

; 1687 : 		return FALSE;

  000fd	33 c0		 xor	 eax, eax
  000ff	e9 0e 01 00 00	 jmp	 $LN13@test_pkcs5
$LN6@test_pkcs5:

; 1688 : 
; 1689 : 	/* PKCS-5 test 2 with HMAC-SHA-1 (deprecated/legacy) used as the PRF */
; 1690 : 	derive_key_sha1 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  00104	6a 04		 push	 4
  00106	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  0010c	50		 push	 eax
  0010d	6a 05		 push	 5
  0010f	6a 04		 push	 4
  00111	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  00116	6a 08		 push	 8
  00118	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  0011d	e8 00 00 00 00	 call	 _derive_key_sha1@28

; 1691 : 	if (memcmp (dk, "\x5c\x75\xce\xf0", 4) != 0)

  00122	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04BHFCCAHB@?2u?N?p?$AA@FNODOBFM@
  00127	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _dk$[ebp]
  0012d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0012f	74 07		 je	 SHORT $LN5@test_pkcs5

; 1692 : 		return FALSE;

  00131	33 c0		 xor	 eax, eax
  00133	e9 da 00 00 00	 jmp	 $LN13@test_pkcs5
$LN5@test_pkcs5:

; 1693 : 
; 1694 : #if 0	// This test is disabled because it uses 1200 iterations (to prevent startup slowdown)
; 1695 : 	/* PKCS-5 test 3 with HMAC-SHA-1 (deprecated/legacy) used as the PRF */
; 1696 : 	derive_key_sha1 ("password", 8, "ATHENA.MIT.EDUraeburn", 21, 1200, dk, 16);
; 1697 : 	if (memcmp (dk, "\x5c\x08\xeb\x61\xfd\xf7\x1e\x4e\x4e\xc3\xcf\x6b\xa1\xf5\x51\x2b", 16) != 0)
; 1698 : 		return FALSE;
; 1699 : #endif
; 1700 : 
; 1701 : 	/* PKCS-5 test 1 with HMAC-RIPEMD-160 used as the PRF */
; 1702 : 	derive_key_ripemd160 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  00138	6a 04		 push	 4
  0013a	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  00140	50		 push	 eax
  00141	6a 05		 push	 5
  00143	6a 04		 push	 4
  00145	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  0014a	6a 08		 push	 8
  0014c	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  00151	e8 00 00 00 00	 call	 _derive_key_ripemd160@28

; 1703 : 	if (memcmp (dk, "\x7a\x3d\x7c\x03", 4) != 0)

  00156	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04PODIBCAH@z?$DN?$HM?$AD?$AA@FNODOBFM@
  0015b	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _dk$[ebp]
  00161	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00163	74 07		 je	 SHORT $LN4@test_pkcs5

; 1704 : 		return FALSE;

  00165	33 c0		 xor	 eax, eax
  00167	e9 a6 00 00 00	 jmp	 $LN13@test_pkcs5
$LN4@test_pkcs5:

; 1705 : 
; 1706 : 	/* PKCS-5 test 2 with HMAC-RIPEMD-160 used as the PRF (derives a key longer than the underlying hash) */
; 1707 : 	derive_key_ripemd160 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 48);

  0016c	6a 30		 push	 48			; 00000030H
  0016e	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  00174	50		 push	 eax
  00175	6a 05		 push	 5
  00177	6a 04		 push	 4
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  0017e	6a 08		 push	 8
  00180	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  00185	e8 00 00 00 00	 call	 _derive_key_ripemd160@28

; 1708 : 	if (memcmp (dk, "\x7a\x3d\x7c\x03\xe7\x26\x6b\xf8\x3d\x78\xfb\x29\xd2\x64\x1f\x56\xea\xf0\xe5\xf5\xcc\xc4\x3a\x31\xa8\x84\x70\xbf\xbd\x6f\x8e\x78\x24\x5a\xc0\x0a\xf6\xfa\xf0\xf6\xe9\x00\x47\x5f\x73\xce\xe1\x43", 48) != 0)

  0018a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0018f	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@FNODOBFM@
  00194	8d b5 68 ff ff
	ff		 lea	 esi, DWORD PTR _dk$[ebp]
  0019a	33 d2		 xor	 edx, edx
  0019c	f3 a7		 repe cmpsd
  0019e	74 04		 je	 SHORT $LN3@test_pkcs5

; 1709 : 		return FALSE;

  001a0	33 c0		 xor	 eax, eax
  001a2	eb 6e		 jmp	 SHORT $LN13@test_pkcs5
$LN3@test_pkcs5:

; 1710 : 
; 1711 : 	/* PKCS-5 test 1 with HMAC-Whirlpool used as the PRF */
; 1712 : 	derive_key_whirlpool ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  001a4	6a 04		 push	 4
  001a6	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  001ac	50		 push	 eax
  001ad	6a 05		 push	 5
  001af	6a 04		 push	 4
  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  001b6	6a 08		 push	 8
  001b8	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  001bd	e8 00 00 00 00	 call	 _derive_key_whirlpool@28

; 1713 : 	if (memcmp (dk, "\x50\x7c\x36\x6f", 4) != 0)

  001c2	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@
  001c7	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _dk$[ebp]
  001cd	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001cf	74 04		 je	 SHORT $LN2@test_pkcs5

; 1714 : 		return FALSE;

  001d1	33 c0		 xor	 eax, eax
  001d3	eb 3d		 jmp	 SHORT $LN13@test_pkcs5
$LN2@test_pkcs5:

; 1715 : 
; 1716 : 	/* PKCS-5 test 2 with HMAC-Whirlpool used as the PRF (derives a key longer than the underlying hash) */
; 1717 : 	derive_key_whirlpool ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 96);

  001d5	6a 60		 push	 96			; 00000060H
  001d7	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  001dd	50		 push	 eax
  001de	6a 05		 push	 5
  001e0	6a 04		 push	 4
  001e2	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  001e7	6a 08		 push	 8
  001e9	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  001ee	e8 00 00 00 00	 call	 _derive_key_whirlpool@28

; 1718 : 	if (memcmp (dk, "\x50\x7c\x36\x6f\xee\x10\x2e\x9a\xe2\x8a\xd5\x82\x72\x7d\x27\x0f\xe8\x4d\x7f\x68\x7a\xcf\xb5\xe7\x43\x67\xaa\x98\x93\x52\x2b\x09\x6e\x42\xdf\x2c\x59\x4a\x91\x6d\x7e\x10\xae\xb2\x1a\x89\x8f\xb9\x8f\xe6\x31\xa9\xd8\x9f\x98\x26\xf4\xda\xcd\x7d\x65\x65\xde\x10\x95\x91\xb4\x84\x26\xae\x43\xa1\x00\x5b\x1e\xb8\x38\x97\xa4\x1e\x4b\xd2\x65\x64\xbc\xfa\x1f\x35\x85\xdb\x4f\x97\x65\x6f\xbd\x24", 96) != 0)

  001f3	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  001f8	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@
  001fd	8d b5 68 ff ff
	ff		 lea	 esi, DWORD PTR _dk$[ebp]
  00203	33 d2		 xor	 edx, edx
  00205	f3 a7		 repe cmpsd
  00207	74 04		 je	 SHORT $LN1@test_pkcs5

; 1719 : 		return FALSE;

  00209	33 c0		 xor	 eax, eax
  0020b	eb 05		 jmp	 SHORT $LN13@test_pkcs5
$LN1@test_pkcs5:

; 1720 : 
; 1721 : 	return TRUE;

  0020d	b8 01 00 00 00	 mov	 eax, 1
$LN13@test_pkcs5:

; 1722 : }

  00212	5f		 pop	 edi
  00213	5e		 pop	 esi
  00214	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00217	33 cd		 xor	 ecx, ebp
  00219	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021e	8b e5		 mov	 esp, ebp
  00220	5d		 pop	 ebp
  00221	c3		 ret	 0
_test_pkcs5@0 ENDP
_TEXT	ENDS
END
