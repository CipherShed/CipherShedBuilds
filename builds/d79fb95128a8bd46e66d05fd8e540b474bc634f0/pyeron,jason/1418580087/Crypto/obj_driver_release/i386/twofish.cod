; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	c:\home\public\desktop\projects\ciphershed.build\src\crypto\twofish.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
_qt_gen	DD	01H DUP (?)
_mt_gen	DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_tab_5b	DB	00H
	DB	05aH
	DB	0b4H
	DB	0eeH
_tab_ef	DB	00H
	DB	0eeH
	DB	0b4H
	DB	05aH
_ror4	DB	00H
	DB	08H
	DB	01H
	DB	09H
	DB	02H
	DB	0aH
	DB	03H
	DB	0bH
	DB	04H
	DB	0cH
	DB	05H
	DB	0dH
	DB	06H
	DB	0eH
	DB	07H
	DB	0fH
_ashx	DB	00H
	DB	09H
	DB	02H
	DB	0bH
	DB	04H
	DB	0dH
	DB	06H
	DB	0fH
	DB	08H
	DB	01H
	DB	0aH
	DB	03H
	DB	0cH
	DB	05H
	DB	0eH
	DB	07H
_qt0	DB	08H
	DB	01H
	DB	07H
	DB	0dH
	DB	06H
	DB	0fH
	DB	03H
	DB	02H
	DB	00H
	DB	0bH
	DB	05H
	DB	09H
	DB	0eH
	DB	0cH
	DB	0aH
	DB	04H
	DB	02H
	DB	08H
	DB	0bH
	DB	0dH
	DB	0fH
	DB	07H
	DB	06H
	DB	0eH
	DB	03H
	DB	01H
	DB	09H
	DB	04H
	DB	00H
	DB	0aH
	DB	0cH
	DB	05H
_qt1	DB	0eH
	DB	0cH
	DB	0bH
	DB	08H
	DB	01H
	DB	02H
	DB	03H
	DB	05H
	DB	0fH
	DB	04H
	DB	0aH
	DB	06H
	DB	07H
	DB	00H
	DB	09H
	DB	0dH
	DB	01H
	DB	0eH
	DB	02H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	07H
	DB	06H
	DB	0dH
	DB	0aH
	DB	05H
	DB	0fH
	DB	09H
	DB	00H
	DB	08H
_qt2	DB	0bH
	DB	0aH
	DB	05H
	DB	0eH
	DB	06H
	DB	0dH
	DB	09H
	DB	00H
	DB	0cH
	DB	08H
	DB	0fH
	DB	03H
	DB	02H
	DB	04H
	DB	07H
	DB	01H
	DB	04H
	DB	0cH
	DB	07H
	DB	05H
	DB	01H
	DB	06H
	DB	09H
	DB	0aH
	DB	00H
	DB	0eH
	DB	0dH
	DB	08H
	DB	02H
	DB	0bH
	DB	03H
	DB	0fH
_qt3	DB	0dH
	DB	07H
	DB	0fH
	DB	04H
	DB	01H
	DB	02H
	DB	06H
	DB	0eH
	DB	09H
	DB	0bH
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	0cH
	DB	0aH
	DB	0bH
	DB	09H
	DB	05H
	DB	01H
	DB	0cH
	DB	03H
	DB	0dH
	DB	0eH
	DB	06H
	DB	04H
	DB	07H
	DB	0fH
	DB	02H
	DB	00H
	DB	08H
	DB	0aH
; Function compile flags: /Ogsp
; File c:\home\public\desktop\projects\ciphershed.build\src\crypto\twofish.c
_DATA	ENDS
;	COMDAT _qp@8
_TEXT	SEGMENT
_qp@8	PROC						; COMDAT
; _n$ = edx
; _x$ = eax

; 87   : 
; 88   :     a0 = x >> 4; b0 = x & 15;

  00000	8a c8		 mov	 cl, al
  00002	c0 e9 04	 shr	 cl, 4
  00005	56		 push	 esi
  00006	24 0f		 and	 al, 15			; 0000000fH
  00008	0f b6 f1	 movzx	 esi, cl
  0000b	0f b6 c0	 movzx	 eax, al

; 89   :     a1 = a0 ^ b0; b1 = ror4[b0] ^ ashx[a0];

  0000e	8b ce		 mov	 ecx, esi

; 90   :     a2 = qt0[n][a1]; b2 = qt1[n][b1];

  00010	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _ashx[esi]
  00017	33 c8		 xor	 ecx, eax
  00019	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _ror4[eax]
  00020	33 f0		 xor	 esi, eax
  00022	c1 e2 04	 shl	 edx, 4
  00025	8a 8c 11 00 00
	00 00		 mov	 cl, BYTE PTR _qt0[ecx+edx]
  0002c	0f b6 b4 16 00
	00 00 00	 movzx	 esi, BYTE PTR _qt1[esi+edx]

; 91   :     a3 = a2 ^ b2; b3 = ror4[b2] ^ ashx[a2];

  00034	0f b6 c9	 movzx	 ecx, cl

; 92   :     a4 = qt2[n][a3]; b4 = qt3[n][b3];
; 93   :     return (b4 << 4) | a4;

  00037	0f b6 81 00 00
	00 00		 movzx	 eax, BYTE PTR _ashx[ecx]
  0003e	57		 push	 edi
  0003f	0f b6 be 00 00
	00 00		 movzx	 edi, BYTE PTR _ror4[esi]
  00046	33 c7		 xor	 eax, edi
  00048	0f b6 84 10 00
	00 00 00	 movzx	 eax, BYTE PTR _qt3[eax+edx]
  00050	33 ce		 xor	 ecx, esi
  00052	0f b6 8c 11 00
	00 00 00	 movzx	 ecx, BYTE PTR _qt2[ecx+edx]
  0005a	c1 e0 04	 shl	 eax, 4
  0005d	5f		 pop	 edi
  0005e	0b c1		 or	 eax, ecx
  00060	5e		 pop	 esi

; 94   : };

  00061	c3		 ret	 0
_qp@8	ENDP
_TEXT	ENDS
_BSS	SEGMENT
_q_tab	DB	0200H DUP (?)
; Function compile flags: /Ogsp
_BSS	ENDS
;	COMDAT _gen_qtab@0
_TEXT	SEGMENT
_gen_qtab@0 PROC					; COMDAT

; 104  : {   u4byte  i;

  00000	8b ff		 npad	 2
  00002	53		 push	 ebx

; 105  : 
; 106  :     for(i = 0; i < 256; ++i)

  00003	33 db		 xor	 ebx, ebx
$LL3@gen_qtab:

; 107  :     {       
; 108  :         q(0,i) = qp(0, (u1byte)i);

  00005	8a c3		 mov	 al, bl
  00007	33 d2		 xor	 edx, edx
  00009	e8 00 00 00 00	 call	 _qp@8

; 109  :         q(1,i) = qp(1, (u1byte)i);

  0000e	33 d2		 xor	 edx, edx
  00010	88 83 00 00 00
	00		 mov	 BYTE PTR _q_tab[ebx], al
  00016	8a c3		 mov	 al, bl
  00018	42		 inc	 edx
  00019	e8 00 00 00 00	 call	 _qp@8
  0001e	88 83 00 01 00
	00		 mov	 BYTE PTR _q_tab[ebx+256], al
  00024	43		 inc	 ebx
  00025	81 fb 00 01 00
	00		 cmp	 ebx, 256		; 00000100H
  0002b	72 d8		 jb	 SHORT $LL3@gen_qtab
  0002d	5b		 pop	 ebx

; 110  :     }
; 111  : };

  0002e	c3		 ret	 0
_gen_qtab@0 ENDP
_TEXT	ENDS
_BSS	SEGMENT
_m_tab	DD	0400H DUP (?)
; Function compile flags: /Ogsp
_BSS	ENDS
;	COMDAT _gen_mtab@0
_TEXT	SEGMENT
_i$ = -4						; size = 4
_gen_mtab@0 PROC					; COMDAT

; 125  : {   u4byte  i, f01, f5b, fef;

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 126  :     
; 127  :     for(i = 0; i < 256; ++i)

  00009	33 ff		 xor	 edi, edi
  0000b	89 7d fc	 mov	 DWORD PTR _i$[ebp], edi
$LL8@gen_mtab:

; 128  :     {
; 129  :         f01 = q(1,i); f5b = ffm_5b(f01); fef = ffm_ef(f01);

  0000e	0f b6 87 00 01
	00 00		 movzx	 eax, BYTE PTR _q_tab[edi+256]
  00015	8b d0		 mov	 edx, eax
  00017	8b c8		 mov	 ecx, eax
  00019	c1 e9 02	 shr	 ecx, 2
  0001c	83 e2 03	 and	 edx, 3
  0001f	0f b6 b2 00 00
	00 00		 movzx	 esi, BYTE PTR _tab_5b[edx]
  00026	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _tab_ef[edx]
  0002d	33 f1		 xor	 esi, ecx
  0002f	8b c8		 mov	 ecx, eax
  00031	d1 e9		 shr	 ecx, 1
  00033	33 c8		 xor	 ecx, eax
  00035	d1 e9		 shr	 ecx, 1
  00037	33 ca		 xor	 ecx, edx
  00039	33 c8		 xor	 ecx, eax
  0003b	33 f0		 xor	 esi, eax

; 130  :         m_tab[0][i] = f01 + (f5b << 8) + (fef << 16) + (fef << 24);

  0003d	8b d9		 mov	 ebx, ecx

; 131  :         m_tab[2][i] = f5b + (fef << 8) + (f01 << 16) + (fef << 24);

  0003f	69 c9 00 01 00
	01		 imul	 ecx, 16777472		; 01000100H
  00045	69 db 00 01 01
	00		 imul	 ebx, 65792		; 00010100H
  0004b	03 de		 add	 ebx, esi
  0004d	03 ce		 add	 ecx, esi

; 132  : 
; 133  :         f01 = q(0,i); f5b = ffm_5b(f01); fef = ffm_ef(f01);

  0004f	0f b6 b7 00 00
	00 00		 movzx	 esi, BYTE PTR _q_tab[edi]
  00056	8b d7		 mov	 edx, edi
  00058	c1 e3 08	 shl	 ebx, 8
  0005b	03 d8		 add	 ebx, eax
  0005d	c1 e0 10	 shl	 eax, 16			; 00000010H
  00060	03 c1		 add	 eax, ecx
  00062	c1 e2 02	 shl	 edx, 2
  00065	89 82 00 08 00
	00		 mov	 DWORD PTR _m_tab[edx+2048], eax
  0006b	8b fe		 mov	 edi, esi
  0006d	83 e7 03	 and	 edi, 3
  00070	0f b6 8f 00 00
	00 00		 movzx	 ecx, BYTE PTR _tab_5b[edi]
  00077	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _tab_ef[edi]
  0007e	8b c6		 mov	 eax, esi
  00080	c1 e8 02	 shr	 eax, 2
  00083	33 c8		 xor	 ecx, eax
  00085	8b c6		 mov	 eax, esi
  00087	d1 e8		 shr	 eax, 1
  00089	33 c6		 xor	 eax, esi
  0008b	d1 e8		 shr	 eax, 1
  0008d	33 c7		 xor	 eax, edi
  0008f	33 c6		 xor	 eax, esi
  00091	89 9a 00 00 00
	00		 mov	 DWORD PTR _m_tab[edx], ebx

; 134  :         m_tab[1][i] = fef + (fef << 8) + (f5b << 16) + (f01 << 24);

  00097	8b d8		 mov	 ebx, eax
  00099	33 ce		 xor	 ecx, esi
  0009b	69 db 01 01 00
	00		 imul	 ebx, 257		; 00000101H
  000a1	8b fe		 mov	 edi, esi
  000a3	c1 e7 08	 shl	 edi, 8
  000a6	03 f9		 add	 edi, ecx

; 135  :         m_tab[3][i] = f5b + (f01 << 8) + (fef << 16) + (f5b << 24);

  000a8	69 c9 01 00 00
	01		 imul	 ecx, 16777217		; 01000001H
  000ae	c1 e0 08	 shl	 eax, 8
  000b1	c1 e7 10	 shl	 edi, 16			; 00000010H
  000b4	03 fb		 add	 edi, ebx
  000b6	03 c6		 add	 eax, esi
  000b8	c1 e0 08	 shl	 eax, 8
  000bb	89 ba 00 04 00
	00		 mov	 DWORD PTR _m_tab[edx+1024], edi
  000c1	8b 7d fc	 mov	 edi, DWORD PTR _i$[ebp]
  000c4	03 c1		 add	 eax, ecx
  000c6	47		 inc	 edi
  000c7	89 82 00 0c 00
	00		 mov	 DWORD PTR _m_tab[edx+3072], eax
  000cd	89 7d fc	 mov	 DWORD PTR _i$[ebp], edi
  000d0	81 ff 00 01 00
	00		 cmp	 edi, 256		; 00000100H
  000d6	0f 82 32 ff ff
	ff		 jb	 $LL8@gen_mtab
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi
  000de	5b		 pop	 ebx

; 136  :     }
; 137  : };

  000df	c9		 leave
  000e0	c3		 ret	 0
_gen_mtab@0 ENDP
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT _h_fun@12
_TEXT	SEGMENT
_b2$ = -12						; size = 4
_b3$ = -8						; size = 4
_b1$ = -4						; size = 4
tv157 = 8						; size = 4
tv153 = 8						; size = 4
_instance$ = 8						; size = 4
_h_fun@12 PROC						; COMDAT
; _x$ = ecx
; _key$ = eax

; 177  : {   u4byte  b0, b1, b2, b3;

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00008	53		 push	 ebx
  00009	56		 push	 esi

; 178  : 
; 179  : #ifndef M_TABLE
; 180  :     u4byte  m5b_b0, m5b_b1, m5b_b2, m5b_b3;
; 181  :     u4byte  mef_b0, mef_b1, mef_b2, mef_b3;
; 182  : #endif
; 183  : 
; 184  :     b0 = extract_byte(x, 0); b1 = extract_byte(x, 1); b2 = extract_byte(x, 2); b3 = extract_byte(x, 3);

  0000a	8b d9		 mov	 ebx, ecx
  0000c	c1 eb 08	 shr	 ebx, 8
  0000f	0f b6 f3	 movzx	 esi, bl
  00012	89 75 fc	 mov	 DWORD PTR _b1$[ebp], esi

; 185  : 
; 186  :     switch(instance->k_len)

  00015	8b 75 08	 mov	 esi, DWORD PTR _instance$[ebp]
  00018	8b b6 b0 10 00
	00		 mov	 esi, DWORD PTR [esi+4272]
  0001e	8b d9		 mov	 ebx, ecx
  00020	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00023	0f b6 d1	 movzx	 edx, cl
  00026	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00029	0f b6 db	 movzx	 ebx, bl
  0002c	4e		 dec	 esi
  0002d	4e		 dec	 esi
  0002e	57		 push	 edi
  0002f	89 5d f4	 mov	 DWORD PTR _b2$[ebp], ebx
  00032	89 4d f8	 mov	 DWORD PTR _b3$[ebp], ecx
  00035	0f 84 bd 00 00
	00		 je	 $LN9@h_fun
  0003b	4e		 dec	 esi
  0003c	74 5f		 je	 SHORT $LN8@h_fun
  0003e	4e		 dec	 esi
  0003f	0f 85 45 01 00
	00		 jne	 $LN4@h_fun

; 187  :     {
; 188  :     case 4: b0 = q(1, (u1byte) b0) ^ extract_byte(key[3],0);
; 189  :             b1 = q(0, (u1byte) b1) ^ extract_byte(key[3],1);

  00045	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  00048	0f b6 ca	 movzx	 ecx, dl
  0004b	0f b6 91 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[ecx+256]
  00052	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00056	33 d1		 xor	 edx, ecx
  00058	0f b6 4d fc	 movzx	 ecx, BYTE PTR _b1$[ebp]
  0005c	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _q_tab[ecx]
  00063	89 45 08	 mov	 DWORD PTR tv153[ebp], eax
  00066	8b c6		 mov	 eax, esi
  00068	c1 e8 08	 shr	 eax, 8
  0006b	0f b6 f8	 movzx	 edi, al
  0006e	33 cf		 xor	 ecx, edi

; 190  :             b2 = q(0, (u1byte) b2) ^ extract_byte(key[3],2);
; 191  :             b3 = q(1, (u1byte) b3) ^ extract_byte(key[3],3);

  00070	8b 45 08	 mov	 eax, DWORD PTR tv153[ebp]
  00073	89 4d fc	 mov	 DWORD PTR _b1$[ebp], ecx
  00076	0f b6 cb	 movzx	 ecx, bl
  00079	0f b6 99 00 00
	00 00		 movzx	 ebx, BYTE PTR _q_tab[ecx]
  00080	8b ce		 mov	 ecx, esi
  00082	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00085	0f b6 c9	 movzx	 ecx, cl
  00088	33 d9		 xor	 ebx, ecx
  0008a	0f b6 4d f8	 movzx	 ecx, BYTE PTR _b3$[ebp]
  0008e	0f b6 89 00 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[ecx+256]
  00095	c1 ee 18	 shr	 esi, 24			; 00000018H
  00098	33 ce		 xor	 ecx, esi
  0009a	89 4d f8	 mov	 DWORD PTR _b3$[ebp], ecx
$LN8@h_fun:

; 192  :     case 3: b0 = q(1, (u1byte) b0) ^ extract_byte(key[2],0);
; 193  :             b1 = q(1, (u1byte) b1) ^ extract_byte(key[2],1);

  0009d	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  000a0	0f b6 ca	 movzx	 ecx, dl
  000a3	0f b6 91 00 01
	00 00		 movzx	 edx, BYTE PTR _q_tab[ecx+256]
  000aa	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  000ae	33 d1		 xor	 edx, ecx
  000b0	0f b6 4d fc	 movzx	 ecx, BYTE PTR _b1$[ebp]
  000b4	0f b6 89 00 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[ecx+256]
  000bb	89 45 08	 mov	 DWORD PTR tv157[ebp], eax
  000be	8b c6		 mov	 eax, esi
  000c0	c1 e8 08	 shr	 eax, 8
  000c3	0f b6 f8	 movzx	 edi, al
  000c6	33 cf		 xor	 ecx, edi

; 194  :             b2 = q(0, (u1byte) b2) ^ extract_byte(key[2],2);
; 195  :             b3 = q(0, (u1byte) b3) ^ extract_byte(key[2],3);

  000c8	8b 45 08	 mov	 eax, DWORD PTR tv157[ebp]
  000cb	89 4d fc	 mov	 DWORD PTR _b1$[ebp], ecx
  000ce	0f b6 cb	 movzx	 ecx, bl
  000d1	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _q_tab[ecx]
  000d8	8b de		 mov	 ebx, esi
  000da	c1 eb 10	 shr	 ebx, 16			; 00000010H
  000dd	0f b6 fb	 movzx	 edi, bl
  000e0	33 cf		 xor	 ecx, edi
  000e2	89 4d f4	 mov	 DWORD PTR _b2$[ebp], ecx
  000e5	0f b6 4d f8	 movzx	 ecx, BYTE PTR _b3$[ebp]
  000e9	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _q_tab[ecx]
  000f0	c1 ee 18	 shr	 esi, 24			; 00000018H
  000f3	33 ce		 xor	 ecx, esi
  000f5	89 4d f8	 mov	 DWORD PTR _b3$[ebp], ecx
$LN9@h_fun:

; 196  :     case 2: b0 = q(0, (u1byte) (q(0, (u1byte) b0) ^ extract_byte(key[1],0))) ^ extract_byte(key[0],0);
; 197  :             b1 = q(0, (u1byte) (q(1, (u1byte) b1) ^ extract_byte(key[1],1))) ^ extract_byte(key[0],1);

  000f8	0f b6 75 fc	 movzx	 esi, BYTE PTR _b1$[ebp]
  000fc	0f b6 b6 00 01
	00 00		 movzx	 esi, BYTE PTR _q_tab[esi+256]
  00103	0f b6 ca	 movzx	 ecx, dl
  00106	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _q_tab[ecx]
  0010d	0f b6 50 04	 movzx	 edx, BYTE PTR [eax+4]
  00111	33 ca		 xor	 ecx, edx
  00113	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _q_tab[ecx]
  0011a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0011d	33 d1		 xor	 edx, ecx
  0011f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00122	8b 00		 mov	 eax, DWORD PTR [eax]
  00124	8b d9		 mov	 ebx, ecx
  00126	c1 eb 08	 shr	 ebx, 8
  00129	0f b6 fb	 movzx	 edi, bl
  0012c	33 f7		 xor	 esi, edi
  0012e	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _q_tab[esi]
  00135	8b d8		 mov	 ebx, eax
  00137	c1 eb 08	 shr	 ebx, 8
  0013a	0f b6 fb	 movzx	 edi, bl
  0013d	33 f7		 xor	 esi, edi
  0013f	89 75 fc	 mov	 DWORD PTR _b1$[ebp], esi

; 198  :             b2 = q(1, (u1byte) (q(0, (u1byte) b2) ^ extract_byte(key[1],2))) ^ extract_byte(key[0],2);

  00142	0f b6 75 f4	 movzx	 esi, BYTE PTR _b2$[ebp]
  00146	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _q_tab[esi]
  0014d	8b d9		 mov	 ebx, ecx
  0014f	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00152	0f b6 fb	 movzx	 edi, bl
  00155	33 f7		 xor	 esi, edi
  00157	0f b6 b6 00 01
	00 00		 movzx	 esi, BYTE PTR _q_tab[esi+256]
  0015e	8b d8		 mov	 ebx, eax
  00160	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00163	0f b6 fb	 movzx	 edi, bl
  00166	33 f7		 xor	 esi, edi
  00168	89 75 f4	 mov	 DWORD PTR _b2$[ebp], esi

; 199  :             b3 = q(1, (u1byte) (q(1, (u1byte) b3) ^ extract_byte(key[1],3))) ^ extract_byte(key[0],3);

  0016b	0f b6 75 f8	 movzx	 esi, BYTE PTR _b3$[ebp]
  0016f	0f b6 b6 00 01
	00 00		 movzx	 esi, BYTE PTR _q_tab[esi+256]
  00176	8b 5d f4	 mov	 ebx, DWORD PTR _b2$[ebp]
  00179	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0017c	33 f1		 xor	 esi, ecx
  0017e	0f b6 8e 00 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[esi+256]
  00185	c1 e8 18	 shr	 eax, 24			; 00000018H
  00188	33 c8		 xor	 ecx, eax
$LN4@h_fun:

; 200  :     }
; 201  : #ifdef  M_TABLE
; 202  : 
; 203  :     return  mds(0, b0) ^ mds(1, b1) ^ mds(2, b2) ^ mds(3, b3);

  0018a	8b 04 8d 00 0c
	00 00		 mov	 eax, DWORD PTR _m_tab[ecx*4+3072]
  00191	33 04 9d 00 08
	00 00		 xor	 eax, DWORD PTR _m_tab[ebx*4+2048]
  00198	8b 4d fc	 mov	 ecx, DWORD PTR _b1$[ebp]
  0019b	33 04 8d 00 04
	00 00		 xor	 eax, DWORD PTR _m_tab[ecx*4+1024]
  001a2	5f		 pop	 edi
  001a3	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR _m_tab[edx*4]
  001aa	5e		 pop	 esi
  001ab	5b		 pop	 ebx

; 204  : 
; 205  : #else
; 206  : 
; 207  :     b0 = q(1, (u1byte) b0); b1 = q(0, (u1byte) b1); b2 = q(1, (u1byte) b2); b3 = q(0, (u1byte) b3);
; 208  :     m5b_b0 = ffm_5b(b0); m5b_b1 = ffm_5b(b1); m5b_b2 = ffm_5b(b2); m5b_b3 = ffm_5b(b3);
; 209  :     mef_b0 = ffm_ef(b0); mef_b1 = ffm_ef(b1); mef_b2 = ffm_ef(b2); mef_b3 = ffm_ef(b3);
; 210  :     b0 ^= mef_b1 ^ m5b_b2 ^ m5b_b3; b3 ^= m5b_b0 ^ mef_b1 ^ mef_b2;
; 211  :     b2 ^= mef_b0 ^ m5b_b1 ^ mef_b3; b1 ^= mef_b0 ^ mef_b2 ^ m5b_b3;
; 212  : 
; 213  :     return b0 | (b3 << 8) | (b2 << 16) | (b1 << 24);
; 214  : 
; 215  : #endif
; 216  : };

  001ac	c9		 leave
  001ad	c2 04 00	 ret	 4
_h_fun@12 ENDP
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT _gen_mk_tab@8
_TEXT	SEGMENT
_gen_mk_tab@8 PROC					; COMDAT
; _instance$ = ecx
; _key$ = eax

; 243  :     u1byte  by;
; 244  : 
; 245  : 	u4byte *mk_tab = instance->mk_tab;
; 246  : 
; 247  :     switch(instance->k_len)

  00000	8b 91 b0 10 00
	00		 mov	 edx, DWORD PTR [ecx+4272]
  00006	53		 push	 ebx
  00007	4a		 dec	 edx
  00008	4a		 dec	 edx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	0f 84 25 02 00
	00		 je	 $LN12@gen_mk_tab
  00011	4a		 dec	 edx
  00012	0f 84 2e 01 00
	00		 je	 $LN8@gen_mk_tab
  00018	4a		 dec	 edx
  00019	0f 85 c9 02 00
	00		 jne	 $LN9@gen_mk_tab

; 274  :     
; 275  :     case 4: for(i = 0; i < 256; ++i)

  0001f	8d b1 b8 00 00
	00		 lea	 esi, DWORD PTR [ecx+184]
$LL3@gen_mk_tab:

; 276  :             {
; 277  :                 by = (u1byte)i;
; 278  : #ifdef ONE_STEP
; 279  :                 mk_tab[0 + 4*i] = mds(0, q40(by)); mk_tab[1 + 4*i] = mds(1, q41(by));

  00025	0f b6 78 0c	 movzx	 edi, BYTE PTR [eax+12]
  00029	0f b6 ca	 movzx	 ecx, dl
  0002c	0f b6 99 00 01
	00 00		 movzx	 ebx, BYTE PTR _q_tab[ecx+256]
  00033	33 fb		 xor	 edi, ebx
  00035	0f b6 bf 00 01
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi+256]
  0003c	0f b6 58 08	 movzx	 ebx, BYTE PTR [eax+8]
  00040	33 fb		 xor	 edi, ebx
  00042	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  00049	0f b6 58 04	 movzx	 ebx, BYTE PTR [eax+4]
  0004d	33 fb		 xor	 edi, ebx
  0004f	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  00056	0f b6 18	 movzx	 ebx, BYTE PTR [eax]
  00059	33 fb		 xor	 edi, ebx
  0005b	8b 3c bd 00 00
	00 00		 mov	 edi, DWORD PTR _m_tab[edi*4]
  00062	89 7e f8	 mov	 DWORD PTR [esi-8], edi
  00065	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  00068	c1 eb 08	 shr	 ebx, 8
  0006b	0f b6 fb	 movzx	 edi, bl
  0006e	0f b6 99 00 00
	00 00		 movzx	 ebx, BYTE PTR _q_tab[ecx]
  00075	33 fb		 xor	 edi, ebx
  00077	0f b6 bf 00 01
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi+256]
  0007e	8b 58 08	 mov	 ebx, DWORD PTR [eax+8]
  00081	c1 eb 08	 shr	 ebx, 8
  00084	0f b6 db	 movzx	 ebx, bl
  00087	33 fb		 xor	 edi, ebx
  00089	0f b6 bf 00 01
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi+256]
  00090	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  00093	c1 eb 08	 shr	 ebx, 8
  00096	0f b6 db	 movzx	 ebx, bl
  00099	33 fb		 xor	 edi, ebx
  0009b	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  000a2	8b 18		 mov	 ebx, DWORD PTR [eax]
  000a4	c1 eb 08	 shr	 ebx, 8
  000a7	0f b6 db	 movzx	 ebx, bl
  000aa	33 fb		 xor	 edi, ebx
  000ac	8b 3c bd 00 04
	00 00		 mov	 edi, DWORD PTR _m_tab[edi*4+1024]
  000b3	89 7e fc	 mov	 DWORD PTR [esi-4], edi

; 280  :                 mk_tab[2 + 4*i] = mds(2, q42(by)); mk_tab[3 + 4*i] = mds(3, q43(by));

  000b6	0f b6 99 00 00
	00 00		 movzx	 ebx, BYTE PTR _q_tab[ecx]
  000bd	0f b6 78 0e	 movzx	 edi, BYTE PTR [eax+14]
  000c1	33 fb		 xor	 edi, ebx
  000c3	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  000ca	0f b6 58 0a	 movzx	 ebx, BYTE PTR [eax+10]
  000ce	33 fb		 xor	 edi, ebx
  000d0	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  000d7	0f b6 58 06	 movzx	 ebx, BYTE PTR [eax+6]
  000db	33 fb		 xor	 edi, ebx
  000dd	0f b6 bf 00 01
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi+256]
  000e4	0f b6 58 02	 movzx	 ebx, BYTE PTR [eax+2]
  000e8	33 fb		 xor	 edi, ebx
  000ea	8b 3c bd 00 08
	00 00		 mov	 edi, DWORD PTR _m_tab[edi*4+2048]
  000f1	89 3e		 mov	 DWORD PTR [esi], edi
  000f3	0f b6 89 00 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[ecx+256]
  000fa	0f b6 78 0f	 movzx	 edi, BYTE PTR [eax+15]
  000fe	33 f9		 xor	 edi, ecx
  00100	0f b6 8f 00 00
	00 00		 movzx	 ecx, BYTE PTR _q_tab[edi]
  00107	0f b6 78 0b	 movzx	 edi, BYTE PTR [eax+11]
  0010b	33 cf		 xor	 ecx, edi
  0010d	0f b6 89 00 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[ecx+256]
  00114	0f b6 78 07	 movzx	 edi, BYTE PTR [eax+7]
  00118	33 cf		 xor	 ecx, edi
  0011a	0f b6 89 00 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[ecx+256]
  00121	0f b6 78 03	 movzx	 edi, BYTE PTR [eax+3]
  00125	33 cf		 xor	 ecx, edi
  00127	8b 0c 8d 00 0c
	00 00		 mov	 ecx, DWORD PTR _m_tab[ecx*4+3072]
  0012e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00131	42		 inc	 edx
  00132	83 c6 10	 add	 esi, 16			; 00000010H
  00135	81 fa 00 01 00
	00		 cmp	 edx, 256		; 00000100H
  0013b	0f 82 e4 fe ff
	ff		 jb	 $LL3@gen_mk_tab

; 274  :     
; 275  :     case 4: for(i = 0; i < 256; ++i)

  00141	e9 a2 01 00 00	 jmp	 $LN9@gen_mk_tab
$LN8@gen_mk_tab:

; 255  : #else
; 256  :                 sb[0][i] = q20(by); sb[1][i] = q21(by); 
; 257  :                 sb[2][i] = q22(by); sb[3][i] = q23(by);
; 258  : #endif
; 259  :             }
; 260  :             break;
; 261  :     
; 262  :     case 3: for(i = 0; i < 256; ++i)

  00146	33 d2		 xor	 edx, edx
  00148	8d b1 b8 00 00
	00		 lea	 esi, DWORD PTR [ecx+184]
$LL7@gen_mk_tab:

; 263  :             {
; 264  :                 by = (u1byte)i;
; 265  : #ifdef ONE_STEP
; 266  :                 mk_tab[0 + 4*i] = mds(0, q30(by)); mk_tab[1 + 4*i] = mds(1, q31(by));

  0014e	0f b6 78 08	 movzx	 edi, BYTE PTR [eax+8]
  00152	0f b6 ca	 movzx	 ecx, dl
  00155	0f b6 99 00 01
	00 00		 movzx	 ebx, BYTE PTR _q_tab[ecx+256]
  0015c	33 fb		 xor	 edi, ebx
  0015e	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  00165	0f b6 58 04	 movzx	 ebx, BYTE PTR [eax+4]
  00169	33 fb		 xor	 edi, ebx
  0016b	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  00172	0f b6 18	 movzx	 ebx, BYTE PTR [eax]
  00175	33 fb		 xor	 edi, ebx
  00177	8b 3c bd 00 00
	00 00		 mov	 edi, DWORD PTR _m_tab[edi*4]
  0017e	89 7e f8	 mov	 DWORD PTR [esi-8], edi
  00181	8b 58 08	 mov	 ebx, DWORD PTR [eax+8]
  00184	c1 eb 08	 shr	 ebx, 8
  00187	0f b6 fb	 movzx	 edi, bl
  0018a	0f b6 99 00 01
	00 00		 movzx	 ebx, BYTE PTR _q_tab[ecx+256]
  00191	33 fb		 xor	 edi, ebx
  00193	0f b6 bf 00 01
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi+256]
  0019a	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  0019d	c1 eb 08	 shr	 ebx, 8
  001a0	0f b6 db	 movzx	 ebx, bl
  001a3	33 fb		 xor	 edi, ebx
  001a5	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  001ac	8b 18		 mov	 ebx, DWORD PTR [eax]
  001ae	c1 eb 08	 shr	 ebx, 8
  001b1	0f b6 db	 movzx	 ebx, bl
  001b4	33 fb		 xor	 edi, ebx
  001b6	8b 3c bd 00 04
	00 00		 mov	 edi, DWORD PTR _m_tab[edi*4+1024]
  001bd	89 7e fc	 mov	 DWORD PTR [esi-4], edi

; 267  :                 mk_tab[2 + 4*i] = mds(2, q32(by)); mk_tab[3 + 4*i] = mds(3, q33(by));

  001c0	0f b6 99 00 00
	00 00		 movzx	 ebx, BYTE PTR _q_tab[ecx]
  001c7	0f b6 78 0a	 movzx	 edi, BYTE PTR [eax+10]
  001cb	33 fb		 xor	 edi, ebx
  001cd	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  001d4	0f b6 58 06	 movzx	 ebx, BYTE PTR [eax+6]
  001d8	33 fb		 xor	 edi, ebx
  001da	0f b6 bf 00 01
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi+256]
  001e1	0f b6 58 02	 movzx	 ebx, BYTE PTR [eax+2]
  001e5	33 fb		 xor	 edi, ebx
  001e7	8b 3c bd 00 08
	00 00		 mov	 edi, DWORD PTR _m_tab[edi*4+2048]
  001ee	89 3e		 mov	 DWORD PTR [esi], edi
  001f0	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _q_tab[ecx]
  001f7	0f b6 78 0b	 movzx	 edi, BYTE PTR [eax+11]
  001fb	33 f9		 xor	 edi, ecx
  001fd	0f b6 8f 00 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[edi+256]
  00204	0f b6 78 07	 movzx	 edi, BYTE PTR [eax+7]
  00208	33 cf		 xor	 ecx, edi
  0020a	0f b6 89 00 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[ecx+256]
  00211	0f b6 78 03	 movzx	 edi, BYTE PTR [eax+3]
  00215	33 cf		 xor	 ecx, edi
  00217	8b 0c 8d 00 0c
	00 00		 mov	 ecx, DWORD PTR _m_tab[ecx*4+3072]
  0021e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00221	42		 inc	 edx
  00222	83 c6 10	 add	 esi, 16			; 00000010H
  00225	81 fa 00 01 00
	00		 cmp	 edx, 256		; 00000100H
  0022b	0f 82 1d ff ff
	ff		 jb	 $LL7@gen_mk_tab

; 268  : #else
; 269  :                 sb[0][i] = q30(by); sb[1][i] = q31(by); 
; 270  :                 sb[2][i] = q32(by); sb[3][i] = q33(by);
; 271  : #endif
; 272  :             }
; 273  :             break;

  00231	e9 b2 00 00 00	 jmp	 $LN9@gen_mk_tab
$LN12@gen_mk_tab:

; 248  :     {
; 249  :     case 2: for(i = 0; i < 256; ++i)

  00236	33 d2		 xor	 edx, edx
  00238	8d b1 b8 00 00
	00		 lea	 esi, DWORD PTR [ecx+184]
$LL11@gen_mk_tab:

; 250  :             {
; 251  :                 by = (u1byte)i;
; 252  : #ifdef ONE_STEP
; 253  :                 mk_tab[0 + 4*i] = mds(0, q20(by)); mk_tab[1 + 4*i] = mds(1, q21(by));

  0023e	0f b6 58 04	 movzx	 ebx, BYTE PTR [eax+4]
  00242	0f b6 ca	 movzx	 ecx, dl
  00245	0f b6 b9 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[ecx]
  0024c	33 fb		 xor	 edi, ebx
  0024e	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  00255	0f b6 18	 movzx	 ebx, BYTE PTR [eax]
  00258	33 fb		 xor	 edi, ebx
  0025a	8b 3c bd 00 00
	00 00		 mov	 edi, DWORD PTR _m_tab[edi*4]
  00261	89 7e f8	 mov	 DWORD PTR [esi-8], edi
  00264	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  00267	c1 eb 08	 shr	 ebx, 8
  0026a	0f b6 fb	 movzx	 edi, bl
  0026d	0f b6 99 00 01
	00 00		 movzx	 ebx, BYTE PTR _q_tab[ecx+256]
  00274	33 fb		 xor	 edi, ebx
  00276	0f b6 bf 00 00
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi]
  0027d	8b 18		 mov	 ebx, DWORD PTR [eax]
  0027f	c1 eb 08	 shr	 ebx, 8
  00282	0f b6 db	 movzx	 ebx, bl
  00285	33 fb		 xor	 edi, ebx
  00287	8b 3c bd 00 04
	00 00		 mov	 edi, DWORD PTR _m_tab[edi*4+1024]
  0028e	89 7e fc	 mov	 DWORD PTR [esi-4], edi

; 254  :                 mk_tab[2 + 4*i] = mds(2, q22(by)); mk_tab[3 + 4*i] = mds(3, q23(by));

  00291	0f b6 99 00 00
	00 00		 movzx	 ebx, BYTE PTR _q_tab[ecx]
  00298	0f b6 78 06	 movzx	 edi, BYTE PTR [eax+6]
  0029c	33 fb		 xor	 edi, ebx
  0029e	0f b6 bf 00 01
	00 00		 movzx	 edi, BYTE PTR _q_tab[edi+256]
  002a5	0f b6 58 02	 movzx	 ebx, BYTE PTR [eax+2]
  002a9	33 fb		 xor	 edi, ebx
  002ab	8b 3c bd 00 08
	00 00		 mov	 edi, DWORD PTR _m_tab[edi*4+2048]
  002b2	89 3e		 mov	 DWORD PTR [esi], edi
  002b4	0f b6 89 00 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[ecx+256]
  002bb	0f b6 78 07	 movzx	 edi, BYTE PTR [eax+7]
  002bf	33 f9		 xor	 edi, ecx
  002c1	0f b6 8f 00 01
	00 00		 movzx	 ecx, BYTE PTR _q_tab[edi+256]
  002c8	0f b6 78 03	 movzx	 edi, BYTE PTR [eax+3]
  002cc	33 cf		 xor	 ecx, edi
  002ce	8b 0c 8d 00 0c
	00 00		 mov	 ecx, DWORD PTR _m_tab[ecx*4+3072]
  002d5	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  002d8	42		 inc	 edx
  002d9	83 c6 10	 add	 esi, 16			; 00000010H
  002dc	81 fa 00 01 00
	00		 cmp	 edx, 256		; 00000100H
  002e2	0f 82 56 ff ff
	ff		 jb	 $LL11@gen_mk_tab
$LN9@gen_mk_tab:
  002e8	5f		 pop	 edi
  002e9	5e		 pop	 esi
  002ea	5b		 pop	 ebx

; 281  : #else
; 282  :                 sb[0][i] = q40(by); sb[1][i] = q41(by); 
; 283  :                 sb[2][i] = q42(by); sb[3][i] = q43(by);
; 284  : #endif
; 285  :             }
; 286  :     }
; 287  : };

  002eb	c3		 ret	 0
_gen_mk_tab@8 ENDP
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT _mds_rem@8
_TEXT	SEGMENT
_p0$ = 8						; size = 4
_mds_rem@8 PROC						; COMDAT
; _p1$ = eax

; 340  : {   u4byte  i, t, u;

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	56		 push	 esi
  00006	57		 push	 edi

; 341  : 
; 342  :     for(i = 0; i < 8; ++i)

  00007	6a 08		 push	 8
  00009	5e		 pop	 esi
$LL5@mds_rem:

; 343  :     {
; 344  :         t = p1 >> 24;   // get most significant coefficient
; 345  :         
; 346  :         p1 = (p1 << 8) | (p0 >> 24); p0 <<= 8;  // shift others up

  0000a	8b 55 08	 mov	 edx, DWORD PTR _p0$[ebp]
  0000d	c1 65 08 08	 shl	 DWORD PTR _p0$[ebp], 8
  00011	8b c8		 mov	 ecx, eax
  00013	c1 ea 18	 shr	 edx, 24			; 00000018H
  00016	c1 e0 08	 shl	 eax, 8
  00019	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0001c	0b c2		 or	 eax, edx

; 347  :             
; 348  :         // multiply t by a (the primitive element - i.e. left shift)
; 349  : 
; 350  :         u = (t << 1); 

  0001e	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]

; 351  :         
; 352  :         if(t & 0x80)            // subtract modular polynomial on overflow

  00021	84 c9		 test	 cl, cl
  00023	79 06		 jns	 SHORT $LN2@mds_rem

; 353  :         
; 354  :             u ^= G_MOD; 

  00025	81 f2 4d 01 00
	00		 xor	 edx, 333		; 0000014dH
$LN2@mds_rem:

; 355  : 
; 356  :         p1 ^= t ^ (u << 16);    // remove t * (a * x^2 + 1)  

  0002b	8b fa		 mov	 edi, edx
  0002d	c1 e7 10	 shl	 edi, 16			; 00000010H
  00030	33 f9		 xor	 edi, ecx
  00032	33 c7		 xor	 eax, edi

; 357  : 
; 358  :         u ^= (t >> 1);          // form u = a * t + t / a = t * (a + 1 / a); 

  00034	8b f9		 mov	 edi, ecx
  00036	d1 ef		 shr	 edi, 1
  00038	33 d7		 xor	 edx, edi

; 359  :         
; 360  :         if(t & 0x01)            // add the modular polynomial on underflow

  0003a	f6 c1 01	 test	 cl, 1
  0003d	74 06		 je	 SHORT $LN1@mds_rem

; 361  :         
; 362  :             u ^= G_MOD >> 1;

  0003f	81 f2 a6 00 00
	00		 xor	 edx, 166		; 000000a6H
$LN1@mds_rem:

; 363  : 
; 364  :         p1 ^= (u << 24) | (u << 8); // remove t * (a + 1/a) * (x^3 + x)

  00045	8b ca		 mov	 ecx, edx
  00047	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0004a	0b ca		 or	 ecx, edx
  0004c	c1 e1 08	 shl	 ecx, 8
  0004f	33 c1		 xor	 eax, ecx
  00051	4e		 dec	 esi
  00052	75 b6		 jne	 SHORT $LL5@mds_rem
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi

; 365  :     }
; 366  : 
; 367  :     return p1;
; 368  : };

  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
_mds_rem@8 ENDP
_TEXT	ENDS
PUBLIC	_twofish_set_key@12
; Function compile flags: /Ogsp
;	COMDAT _twofish_set_key@12
_TEXT	SEGMENT
_mo_key$ = -32						; size = 16
_me_key$ = -16						; size = 16
_instance$ = 8						; size = 4
tv70 = 12						; size = 4
_in_key$ = 12						; size = 4
$T26566 = 16						; size = 4
_key_len$ = 16						; size = 4
_twofish_set_key@12 PROC				; COMDAT

; 373  : {   u4byte  i, a, b, me_key[4], mo_key[4];

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 20	 sub	 esp, 32			; 00000020H
  00008	53		 push	 ebx
  00009	56		 push	 esi

; 374  : 	u4byte *l_key, *s_key;
; 375  : 
; 376  : 	l_key = instance->l_key;
; 377  : 	s_key = instance->s_key;
; 378  : 
; 379  : #ifdef Q_TABLES
; 380  :     if(!qt_gen)

  0000a	33 f6		 xor	 esi, esi
  0000c	33 db		 xor	 ebx, ebx
  0000e	46		 inc	 esi
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR _instance$[ebp]
  00013	39 1d 00 00 00
	00		 cmp	 DWORD PTR _qt_gen, ebx
  00019	75 2d		 jne	 SHORT $LN8@twofish_se

; 381  :     {
; 382  :         gen_qtab(); qt_gen = 1;

$LL13@twofish_se:
  0001b	8a c3		 mov	 al, bl
  0001d	33 d2		 xor	 edx, edx
  0001f	e8 00 00 00 00	 call	 _qp@8
  00024	88 83 00 00 00
	00		 mov	 BYTE PTR _q_tab[ebx], al
  0002a	8a c3		 mov	 al, bl
  0002c	8b d6		 mov	 edx, esi
  0002e	e8 00 00 00 00	 call	 _qp@8
  00033	88 83 00 01 00
	00		 mov	 BYTE PTR _q_tab[ebx+256], al
  00039	43		 inc	 ebx
  0003a	81 fb 00 01 00
	00		 cmp	 ebx, 256		; 00000100H
  00040	72 d9		 jb	 SHORT $LL13@twofish_se
  00042	89 35 00 00 00
	00		 mov	 DWORD PTR _qt_gen, esi
$LN8@twofish_se:

; 383  :     }
; 384  : #endif
; 385  : 
; 386  : #ifdef M_TABLE
; 387  :     if(!mt_gen)

  00048	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _mt_gen, 0
  0004f	75 0b		 jne	 SHORT $LN7@twofish_se

; 388  :     {
; 389  :         gen_mtab(); mt_gen = 1;

  00051	e8 00 00 00 00	 call	 _gen_mtab@0
  00056	89 35 00 00 00
	00		 mov	 DWORD PTR _mt_gen, esi
$LN7@twofish_se:

; 390  :     }
; 391  : #endif
; 392  : 
; 393  :     instance->k_len = key_len / 64;   /* 2, 3 or 4 */

  0005c	8b 4d 10	 mov	 ecx, DWORD PTR _key_len$[ebp]
  0005f	c1 e9 06	 shr	 ecx, 6

; 394  : 
; 395  :     for(i = 0; i < instance->k_len; ++i)

  00062	33 c0		 xor	 eax, eax
  00064	89 8f b0 10 00
	00		 mov	 DWORD PTR [edi+4272], ecx
  0006a	85 c9		 test	 ecx, ecx
  0006c	0f 86 8a 00 00
	00		 jbe	 $LN4@twofish_se
  00072	8b 75 0c	 mov	 esi, DWORD PTR _in_key$[ebp]
$LL6@twofish_se:

; 396  :     {
; 397  :         a = LE32(in_key[i + i]);     me_key[i] = a;

  00075	8b 0c c6	 mov	 ecx, DWORD PTR [esi+eax*8]

; 398  :         b = LE32(in_key[i + i + 1]); mo_key[i] = b;

  00078	8b 54 c6 04	 mov	 edx, DWORD PTR [esi+eax*8+4]
  0007c	89 4c 85 f0	 mov	 DWORD PTR _me_key$[ebp+eax*4], ecx
  00080	89 54 85 e0	 mov	 DWORD PTR _mo_key$[ebp+eax*4], edx

; 399  :         s_key[instance->k_len - i - 1] = mds_rem(a, b);

  00084	89 4d 10	 mov	 DWORD PTR $T26566[ebp], ecx
  00087	c7 45 0c 08 00
	00 00		 mov	 DWORD PTR tv70[ebp], 8
$LL32@twofish_se:
  0008e	8b 7d 10	 mov	 edi, DWORD PTR $T26566[ebp]
  00091	c1 65 10 08	 shl	 DWORD PTR $T26566[ebp], 8
  00095	8b ca		 mov	 ecx, edx
  00097	c1 ef 18	 shr	 edi, 24			; 00000018H
  0009a	c1 e2 08	 shl	 edx, 8
  0009d	c1 e9 18	 shr	 ecx, 24			; 00000018H
  000a0	0b d7		 or	 edx, edi
  000a2	8d 3c 09	 lea	 edi, DWORD PTR [ecx+ecx]
  000a5	84 c9		 test	 cl, cl
  000a7	79 06		 jns	 SHORT $LN17@twofish_se
  000a9	81 f7 4d 01 00
	00		 xor	 edi, 333		; 0000014dH
$LN17@twofish_se:
  000af	8b df		 mov	 ebx, edi
  000b1	c1 e3 10	 shl	 ebx, 16			; 00000010H
  000b4	33 d9		 xor	 ebx, ecx
  000b6	33 d3		 xor	 edx, ebx
  000b8	8b d9		 mov	 ebx, ecx
  000ba	d1 eb		 shr	 ebx, 1
  000bc	33 fb		 xor	 edi, ebx
  000be	f6 c1 01	 test	 cl, 1
  000c1	74 06		 je	 SHORT $LN16@twofish_se
  000c3	81 f7 a6 00 00
	00		 xor	 edi, 166		; 000000a6H
$LN16@twofish_se:
  000c9	8b cf		 mov	 ecx, edi
  000cb	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000ce	0b cf		 or	 ecx, edi
  000d0	c1 e1 08	 shl	 ecx, 8
  000d3	33 d1		 xor	 edx, ecx
  000d5	ff 4d 0c	 dec	 DWORD PTR tv70[ebp]
  000d8	75 b4		 jne	 SHORT $LL32@twofish_se
  000da	8b 7d 08	 mov	 edi, DWORD PTR _instance$[ebp]
  000dd	8b 9f b0 10 00
	00		 mov	 ebx, DWORD PTR [edi+4272]
  000e3	2b d8		 sub	 ebx, eax
  000e5	8d 8f a0 00 00
	00		 lea	 ecx, DWORD PTR [edi+160]
  000eb	40		 inc	 eax
  000ec	89 54 99 fc	 mov	 DWORD PTR [ecx+ebx*4-4], edx
  000f0	3b 87 b0 10 00
	00		 cmp	 eax, DWORD PTR [edi+4272]
  000f6	0f 82 79 ff ff
	ff		 jb	 $LL6@twofish_se
$LN4@twofish_se:

; 400  :     }
; 401  : 
; 402  :     for(i = 0; i < 40; i += 2)

  000fc	33 db		 xor	 ebx, ebx
  000fe	8b f7		 mov	 esi, edi
  00100	eb 03		 jmp	 SHORT $LN3@twofish_se
$LL31@twofish_se:
  00102	8b 7d 08	 mov	 edi, DWORD PTR _instance$[ebp]
$LN3@twofish_se:

; 403  :     {
; 404  :         a = 0x01010101 * i; b = a + 0x01010101;
; 405  :         a = h_fun(instance, a, me_key);

  00105	57		 push	 edi
  00106	8d 45 f0	 lea	 eax, DWORD PTR _me_key$[ebp]
  00109	8b cb		 mov	 ecx, ebx
  0010b	e8 00 00 00 00	 call	 _h_fun@12

; 406  :         b = rotl(h_fun(instance, b, mo_key), 8);

  00110	ff 75 08	 push	 DWORD PTR _instance$[ebp]
  00113	8b f8		 mov	 edi, eax
  00115	8d 8b 01 01 01
	01		 lea	 ecx, DWORD PTR [ebx+16843009]
  0011b	8d 45 e0	 lea	 eax, DWORD PTR _mo_key$[ebp]
  0011e	e8 00 00 00 00	 call	 _h_fun@12
  00123	c1 c0 08	 rol	 eax, 8

; 407  :         l_key[i] = a + b;

  00126	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]

; 408  :         l_key[i + 1] = rotl(a + 2 * b, 9);

  00129	8d 04 47	 lea	 eax, DWORD PTR [edi+eax*2]
  0012c	c1 c0 09	 rol	 eax, 9
  0012f	89 0e		 mov	 DWORD PTR [esi], ecx
  00131	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00134	81 c3 02 02 02
	02		 add	 ebx, 33686018		; 02020202H
  0013a	83 c6 08	 add	 esi, 8
  0013d	81 fb 28 28 28
	28		 cmp	 ebx, 673720360		; 28282828H
  00143	72 bd		 jb	 SHORT $LL31@twofish_se

; 409  :     }
; 410  : 
; 411  : #ifdef MK_TABLE
; 412  :     gen_mk_tab(instance, s_key);

  00145	8b 45 08	 mov	 eax, DWORD PTR _instance$[ebp]
  00148	8b 4d 08	 mov	 ecx, DWORD PTR _instance$[ebp]
  0014b	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  00150	e8 00 00 00 00	 call	 _gen_mk_tab@8

; 413  : #endif
; 414  : 
; 415  :     return l_key;

  00155	8b 45 08	 mov	 eax, DWORD PTR _instance$[ebp]
  00158	5f		 pop	 edi
  00159	5e		 pop	 esi
  0015a	5b		 pop	 ebx

; 416  : };

  0015b	c9		 leave
  0015c	c2 0c 00	 ret	 12			; 0000000cH
_twofish_set_key@12 ENDP
_TEXT	ENDS
PUBLIC	_twofish_encrypt@12
; Function compile flags: /Ogsp
;	COMDAT _twofish_encrypt@12
_TEXT	SEGMENT
_blk$ = -16						; size = 16
tv2091 = 8						; size = 4
tv2090 = 8						; size = 4
tv2088 = 8						; size = 4
tv2086 = 8						; size = 4
tv2084 = 8						; size = 4
tv2082 = 8						; size = 4
tv2080 = 8						; size = 4
tv2078 = 8						; size = 4
tv2076 = 8						; size = 4
tv2074 = 8						; size = 4
tv1389 = 8						; size = 4
tv1229 = 8						; size = 4
tv1148 = 8						; size = 4
tv1069 = 8						; size = 4
tv988 = 8						; size = 4
tv909 = 8						; size = 4
tv828 = 8						; size = 4
tv749 = 8						; size = 4
tv668 = 8						; size = 4
tv589 = 8						; size = 4
tv508 = 8						; size = 4
tv429 = 8						; size = 4
tv348 = 8						; size = 4
tv180 = 8						; size = 4
_instance$ = 8						; size = 4
tv2089 = 12						; size = 4
tv2085 = 12						; size = 4
tv2081 = 12						; size = 4
tv2077 = 12						; size = 4
_in_blk$ = 12						; size = 4
_out_blk$ = 16						; size = 4
_twofish_encrypt@12 PROC				; COMDAT

; 431  : {   u4byte  t0, t1, blk[4];

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 10	 sub	 esp, 16			; 00000010H

; 435  : 
; 436  : 	blk[0] = LE32(in_blk[0]) ^ l_key[0];

  00008	53		 push	 ebx
  00009	56		 push	 esi

; 440  : 
; 441  :     f_rnd(0); f_rnd(1); f_rnd(2); f_rnd(3);

  0000a	57		 push	 edi

; 432  : 
; 433  : 	u4byte *l_key = instance->l_key;
; 434  : 	u4byte *mk_tab = instance->mk_tab;

  0000b	8b 45 08	 mov	 eax, DWORD PTR _instance$[ebp]

; 435  : 
; 436  : 	blk[0] = LE32(in_blk[0]) ^ l_key[0];

  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR _in_blk$[ebp]
  00011	8b 10		 mov	 edx, DWORD PTR [eax]
  00013	33 11		 xor	 edx, DWORD PTR [ecx]

; 437  :     blk[1] = LE32(in_blk[1]) ^ l_key[1];
; 438  :     blk[2] = LE32(in_blk[2]) ^ l_key[2];

  00015	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00018	33 71 08	 xor	 esi, DWORD PTR [ecx+8]
  0001b	89 55 f0	 mov	 DWORD PTR _blk$[ebp], edx
  0001e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00021	33 51 04	 xor	 edx, DWORD PTR [ecx+4]
  00024	89 75 f8	 mov	 DWORD PTR _blk$[ebp+8], esi

; 439  :     blk[3] = LE32(in_blk[3]) ^ l_key[3];

  00027	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  0002a	33 71 0c	 xor	 esi, DWORD PTR [ecx+12]

; 440  : 
; 441  :     f_rnd(0); f_rnd(1); f_rnd(2); f_rnd(3);

  0002d	8b ca		 mov	 ecx, edx
  0002f	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00032	89 75 fc	 mov	 DWORD PTR _blk$[ebp+12], esi
  00035	0f b6 c9	 movzx	 ecx, cl
  00038	c1 e1 04	 shl	 ecx, 4
  0003b	8b 8c 01 bc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+188]
  00042	8b f2		 mov	 esi, edx
  00044	c1 ee 18	 shr	 esi, 24			; 00000018H
  00047	c1 e6 04	 shl	 esi, 4
  0004a	33 8c 06 b0 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+176]
  00051	8b da		 mov	 ebx, edx
  00053	c1 eb 08	 shr	 ebx, 8
  00056	0f b6 f3	 movzx	 esi, bl
  00059	8b 5d f0	 mov	 ebx, DWORD PTR _blk$[ebp]
  0005c	c1 e6 04	 shl	 esi, 4
  0005f	33 8c 06 b8 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+184]
  00066	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00069	0f b6 f2	 movzx	 esi, dl
  0006c	c1 e6 04	 shl	 esi, 4
  0006f	33 8c 06 b4 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+180]
  00076	8b 75 f0	 mov	 esi, DWORD PTR _blk$[ebp]
  00079	c1 ee 18	 shr	 esi, 24			; 00000018H
  0007c	c1 e6 04	 shl	 esi, 4
  0007f	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  00086	0f b6 fb	 movzx	 edi, bl
  00089	8b 5d f0	 mov	 ebx, DWORD PTR _blk$[ebp]
  0008c	c1 e7 04	 shl	 edi, 4
  0008f	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  00096	c1 eb 08	 shr	 ebx, 8
  00099	0f b6 fb	 movzx	 edi, bl
  0009c	8b 58 20	 mov	 ebx, DWORD PTR [eax+32]
  0009f	c1 e7 04	 shl	 edi, 4
  000a2	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  000a9	0f b6 7d f0	 movzx	 edi, BYTE PTR _blk$[ebp]
  000ad	c1 e7 04	 shl	 edi, 4
  000b0	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  000b7	8b 7d fc	 mov	 edi, DWORD PTR _blk$[ebp+12]
  000ba	03 de		 add	 ebx, esi
  000bc	03 d9		 add	 ebx, ecx
  000be	33 5d f8	 xor	 ebx, DWORD PTR _blk$[ebp+8]
  000c1	d1 cb		 ror	 ebx, 1
  000c3	d1 c7		 rol	 edi, 1
  000c5	89 7d 08	 mov	 DWORD PTR tv180[ebp], edi
  000c8	8b 78 24	 mov	 edi, DWORD PTR [eax+36]
  000cb	8d 3c 4f	 lea	 edi, DWORD PTR [edi+ecx*2]
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR tv180[ebp]
  000d1	03 fe		 add	 edi, esi
  000d3	33 cf		 xor	 ecx, edi
  000d5	89 4d fc	 mov	 DWORD PTR _blk$[ebp+12], ecx
  000d8	8b 7d fc	 mov	 edi, DWORD PTR _blk$[ebp+12]
  000db	c1 e9 10	 shr	 ecx, 16			; 00000010H
  000de	0f b6 c9	 movzx	 ecx, cl
  000e1	c1 e1 04	 shl	 ecx, 4
  000e4	8b b4 01 bc 00
	00 00		 mov	 esi, DWORD PTR [ecx+eax+188]
  000eb	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  000ee	c1 e9 08	 shr	 ecx, 8
  000f1	c1 ef 18	 shr	 edi, 24			; 00000018H
  000f4	0f b6 c9	 movzx	 ecx, cl
  000f7	c1 e7 04	 shl	 edi, 4
  000fa	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00101	c1 e1 04	 shl	 ecx, 4
  00104	33 b4 01 b8 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+184]
  0010b	0f b6 4d fc	 movzx	 ecx, BYTE PTR _blk$[ebp+12]
  0010f	c1 e1 04	 shl	 ecx, 4
  00112	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  00119	89 5d f8	 mov	 DWORD PTR _blk$[ebp+8], ebx
  0011c	89 55 08	 mov	 DWORD PTR tv2091[ebp], edx
  0011f	8b cb		 mov	 ecx, ebx
  00121	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00124	c1 e1 04	 shl	 ecx, 4
  00127	8b bc 01 bc 00
	00 00		 mov	 edi, DWORD PTR [ecx+eax+188]
  0012e	8b d3		 mov	 edx, ebx
  00130	c1 ea 10	 shr	 edx, 16			; 00000010H
  00133	0f b6 d2	 movzx	 edx, dl
  00136	c1 e2 04	 shl	 edx, 4
  00139	33 bc 02 b8 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+184]
  00140	8b cb		 mov	 ecx, ebx
  00142	c1 e9 08	 shr	 ecx, 8
  00145	8b 55 08	 mov	 edx, DWORD PTR tv2091[ebp]
  00148	0f b6 c9	 movzx	 ecx, cl
  0014b	c1 e1 04	 shl	 ecx, 4
  0014e	33 bc 01 b4 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+180]
  00155	0f b6 cb	 movzx	 ecx, bl
  00158	8b 58 2c	 mov	 ebx, DWORD PTR [eax+44]
  0015b	c1 e1 04	 shl	 ecx, 4
  0015e	33 bc 01 b0 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+176]
  00165	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00168	03 cf		 add	 ecx, edi
  0016a	03 ce		 add	 ecx, esi
  0016c	33 4d f0	 xor	 ecx, DWORD PTR _blk$[ebp]
  0016f	8d 34 73	 lea	 esi, DWORD PTR [ebx+esi*2]
  00172	03 f7		 add	 esi, edi
  00174	d1 c9		 ror	 ecx, 1
  00176	d1 c2		 rol	 edx, 1
  00178	33 d6		 xor	 edx, esi
  0017a	8b da		 mov	 ebx, edx
  0017c	8b fa		 mov	 edi, edx
  0017e	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00181	0f b6 f3	 movzx	 esi, bl
  00184	8b da		 mov	 ebx, edx
  00186	89 55 f4	 mov	 DWORD PTR _blk$[ebp+4], edx
  00189	c1 ef 18	 shr	 edi, 24			; 00000018H
  0018c	0f b6 d2	 movzx	 edx, dl
  0018f	c1 e6 04	 shl	 esi, 4
  00192	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  00199	c1 eb 08	 shr	 ebx, 8
  0019c	c1 e7 04	 shl	 edi, 4
  0019f	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  001a6	c1 e2 04	 shl	 edx, 4
  001a9	0f b6 fb	 movzx	 edi, bl
  001ac	c1 e7 04	 shl	 edi, 4
  001af	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  001b6	8b d9		 mov	 ebx, ecx
  001b8	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  001bf	c1 eb 10	 shr	 ebx, 16			; 00000010H
  001c2	8b d1		 mov	 edx, ecx
  001c4	c1 ea 18	 shr	 edx, 24			; 00000018H
  001c7	c1 e2 04	 shl	 edx, 4
  001ca	8b bc 02 bc 00
	00 00		 mov	 edi, DWORD PTR [edx+eax+188]
  001d1	0f b6 db	 movzx	 ebx, bl
  001d4	c1 e3 04	 shl	 ebx, 4
  001d7	33 bc 03 b8 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+184]
  001de	8b 58 30	 mov	 ebx, DWORD PTR [eax+48]
  001e1	8b d1		 mov	 edx, ecx
  001e3	c1 ea 08	 shr	 edx, 8
  001e6	0f b6 d2	 movzx	 edx, dl
  001e9	c1 e2 04	 shl	 edx, 4
  001ec	33 bc 02 b4 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+180]
  001f3	0f b6 d1	 movzx	 edx, cl
  001f6	c1 e2 04	 shl	 edx, 4
  001f9	33 bc 02 b0 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+176]
  00200	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00203	03 df		 add	 ebx, edi
  00205	03 de		 add	 ebx, esi
  00207	33 5d f8	 xor	 ebx, DWORD PTR _blk$[ebp+8]
  0020a	d1 cb		 ror	 ebx, 1
  0020c	d1 c2		 rol	 edx, 1
  0020e	89 55 08	 mov	 DWORD PTR tv348[ebp], edx
  00211	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  00214	8d 34 72	 lea	 esi, DWORD PTR [edx+esi*2]
  00217	8b 55 08	 mov	 edx, DWORD PTR tv348[ebp]
  0021a	03 f7		 add	 esi, edi
  0021c	33 d6		 xor	 edx, esi
  0021e	89 55 fc	 mov	 DWORD PTR _blk$[ebp+12], edx
  00221	c1 ea 10	 shr	 edx, 16			; 00000010H
  00224	0f b6 d2	 movzx	 edx, dl
  00227	c1 e2 04	 shl	 edx, 4
  0022a	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  00231	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00234	8b 7d fc	 mov	 edi, DWORD PTR _blk$[ebp+12]
  00237	c1 ea 08	 shr	 edx, 8
  0023a	c1 ef 18	 shr	 edi, 24			; 00000018H
  0023d	0f b6 d2	 movzx	 edx, dl
  00240	c1 e7 04	 shl	 edi, 4
  00243	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  0024a	c1 e2 04	 shl	 edx, 4
  0024d	33 b4 02 b8 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+184]
  00254	0f b6 55 fc	 movzx	 edx, BYTE PTR _blk$[ebp+12]
  00258	89 4d 08	 mov	 DWORD PTR tv2090[ebp], ecx
  0025b	c1 e2 04	 shl	 edx, 4
  0025e	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  00265	8b d3		 mov	 edx, ebx
  00267	c1 ea 18	 shr	 edx, 24			; 00000018H
  0026a	c1 e2 04	 shl	 edx, 4
  0026d	8b bc 02 bc 00
	00 00		 mov	 edi, DWORD PTR [edx+eax+188]
  00274	8b cb		 mov	 ecx, ebx
  00276	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00279	0f b6 c9	 movzx	 ecx, cl
  0027c	c1 e1 04	 shl	 ecx, 4
  0027f	33 bc 01 b8 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+184]
  00286	8b 4d 08	 mov	 ecx, DWORD PTR tv2090[ebp]
  00289	8b d3		 mov	 edx, ebx
  0028b	c1 ea 08	 shr	 edx, 8
  0028e	0f b6 d2	 movzx	 edx, dl
  00291	c1 e2 04	 shl	 edx, 4
  00294	33 bc 02 b4 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+180]
  0029b	0f b6 d3	 movzx	 edx, bl
  0029e	c1 e2 04	 shl	 edx, 4
  002a1	33 bc 02 b0 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+176]
  002a8	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  002ab	03 d7		 add	 edx, edi
  002ad	03 d6		 add	 edx, esi
  002af	33 d1		 xor	 edx, ecx
  002b1	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  002b4	d1 ca		 ror	 edx, 1
  002b6	d1 c1		 rol	 ecx, 1
  002b8	89 4d 08	 mov	 DWORD PTR tv429[ebp], ecx
  002bb	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  002be	8d 34 71	 lea	 esi, DWORD PTR [ecx+esi*2]
  002c1	8b 4d 08	 mov	 ecx, DWORD PTR tv429[ebp]
  002c4	03 f7		 add	 esi, edi
  002c6	33 ce		 xor	 ecx, esi
  002c8	89 4d f4	 mov	 DWORD PTR _blk$[ebp+4], ecx
  002cb	8b 7d f4	 mov	 edi, DWORD PTR _blk$[ebp+4]
  002ce	c1 e9 10	 shr	 ecx, 16			; 00000010H
  002d1	0f b6 c9	 movzx	 ecx, cl
  002d4	c1 e1 04	 shl	 ecx, 4
  002d7	8b b4 01 bc 00
	00 00		 mov	 esi, DWORD PTR [ecx+eax+188]
  002de	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  002e1	c1 e9 08	 shr	 ecx, 8
  002e4	0f b6 c9	 movzx	 ecx, cl
  002e7	c1 e1 04	 shl	 ecx, 4
  002ea	c1 ef 18	 shr	 edi, 24			; 00000018H
  002ed	c1 e7 04	 shl	 edi, 4
  002f0	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  002f7	89 5d 0c	 mov	 DWORD PTR tv2089[ebp], ebx
  002fa	33 b4 01 b8 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+184]
  00301	0f b6 4d f4	 movzx	 ecx, BYTE PTR _blk$[ebp+4]
  00305	c1 e1 04	 shl	 ecx, 4
  00308	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  0030f	8b da		 mov	 ebx, edx
  00311	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00314	0f b6 fb	 movzx	 edi, bl
  00317	c1 e7 04	 shl	 edi, 4
  0031a	8b ca		 mov	 ecx, edx
  0031c	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0031f	c1 e1 04	 shl	 ecx, 4
  00322	89 7d 08	 mov	 DWORD PTR tv2088[ebp], edi
  00325	8b bc 01 bc 00
	00 00		 mov	 edi, DWORD PTR [ecx+eax+188]
  0032c	8b 4d 08	 mov	 ecx, DWORD PTR tv2088[ebp]
  0032f	33 bc 01 b8 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+184]
  00336	8b ca		 mov	 ecx, edx
  00338	c1 e9 08	 shr	 ecx, 8
  0033b	0f b6 c9	 movzx	 ecx, cl
  0033e	c1 e1 04	 shl	 ecx, 4
  00341	33 bc 01 b4 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+180]
  00348	0f b6 ca	 movzx	 ecx, dl
  0034b	c1 e1 04	 shl	 ecx, 4
  0034e	33 bc 01 b0 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+176]
  00355	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00358	8b 5d 0c	 mov	 ebx, DWORD PTR tv2089[ebp]
  0035b	03 cf		 add	 ecx, edi
  0035d	03 ce		 add	 ecx, esi
  0035f	33 cb		 xor	 ecx, ebx
  00361	8b 5d fc	 mov	 ebx, DWORD PTR _blk$[ebp+12]
  00364	d1 c9		 ror	 ecx, 1
  00366	d1 c3		 rol	 ebx, 1
  00368	89 5d 08	 mov	 DWORD PTR tv508[ebp], ebx
  0036b	8b 58 44	 mov	 ebx, DWORD PTR [eax+68]
  0036e	8d 1c 73	 lea	 ebx, DWORD PTR [ebx+esi*2]
  00371	03 df		 add	 ebx, edi
  00373	8b 75 08	 mov	 esi, DWORD PTR tv508[ebp]
  00376	33 f3		 xor	 esi, ebx
  00378	8b de		 mov	 ebx, esi
  0037a	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0037d	89 75 fc	 mov	 DWORD PTR _blk$[ebp+12], esi
  00380	8b 7d fc	 mov	 edi, DWORD PTR _blk$[ebp+12]
  00383	0f b6 f3	 movzx	 esi, bl
  00386	8b 5d fc	 mov	 ebx, DWORD PTR _blk$[ebp+12]
  00389	c1 ef 18	 shr	 edi, 24			; 00000018H
  0038c	c1 e7 04	 shl	 edi, 4
  0038f	c1 eb 08	 shr	 ebx, 8
  00392	c1 e6 04	 shl	 esi, 4
  00395	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  0039c	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  003a3	0f b6 fb	 movzx	 edi, bl
  003a6	c1 e7 04	 shl	 edi, 4
  003a9	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  003b0	0f b6 7d fc	 movzx	 edi, BYTE PTR _blk$[ebp+12]
  003b4	c1 e7 04	 shl	 edi, 4
  003b7	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  003be	8b d9		 mov	 ebx, ecx
  003c0	c1 eb 10	 shr	 ebx, 16			; 00000010H
  003c3	0f b6 db	 movzx	 ebx, bl
  003c6	c1 e3 04	 shl	 ebx, 4
  003c9	8b f9		 mov	 edi, ecx
  003cb	c1 ef 18	 shr	 edi, 24			; 00000018H
  003ce	c1 e7 04	 shl	 edi, 4
  003d1	8b bc 07 bc 00
	00 00		 mov	 edi, DWORD PTR [edi+eax+188]
  003d8	33 bc 03 b8 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+184]
  003df	8b d9		 mov	 ebx, ecx
  003e1	c1 eb 08	 shr	 ebx, 8
  003e4	0f b6 db	 movzx	 ebx, bl
  003e7	c1 e3 04	 shl	 ebx, 4
  003ea	33 bc 03 b4 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+180]
  003f1	0f b6 d9	 movzx	 ebx, cl
  003f4	c1 e3 04	 shl	 ebx, 4
  003f7	33 bc 03 b0 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+176]
  003fe	8b 58 48	 mov	 ebx, DWORD PTR [eax+72]
  00401	03 df		 add	 ebx, edi
  00403	03 de		 add	 ebx, esi
  00405	33 da		 xor	 ebx, edx
  00407	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  0040a	d1 cb		 ror	 ebx, 1
  0040c	d1 c2		 rol	 edx, 1
  0040e	89 55 08	 mov	 DWORD PTR tv589[ebp], edx
  00411	8b 50 4c	 mov	 edx, DWORD PTR [eax+76]
  00414	8d 34 72	 lea	 esi, DWORD PTR [edx+esi*2]
  00417	8b 55 08	 mov	 edx, DWORD PTR tv589[ebp]
  0041a	03 f7		 add	 esi, edi
  0041c	33 d6		 xor	 edx, esi
  0041e	89 55 f4	 mov	 DWORD PTR _blk$[ebp+4], edx
  00421	8b 7d f4	 mov	 edi, DWORD PTR _blk$[ebp+4]
  00424	c1 ea 10	 shr	 edx, 16			; 00000010H
  00427	0f b6 d2	 movzx	 edx, dl
  0042a	c1 e2 04	 shl	 edx, 4
  0042d	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  00434	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00437	c1 ea 08	 shr	 edx, 8
  0043a	0f b6 d2	 movzx	 edx, dl
  0043d	c1 ef 18	 shr	 edi, 24			; 00000018H
  00440	c1 e7 04	 shl	 edi, 4
  00443	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  0044a	c1 e2 04	 shl	 edx, 4
  0044d	33 b4 02 b8 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+184]
  00454	0f b6 55 f4	 movzx	 edx, BYTE PTR _blk$[ebp+4]
  00458	c1 e2 04	 shl	 edx, 4
  0045b	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  00462	8b d3		 mov	 edx, ebx
  00464	89 4d 08	 mov	 DWORD PTR tv2086[ebp], ecx
  00467	c1 ea 18	 shr	 edx, 24			; 00000018H
  0046a	c1 e2 04	 shl	 edx, 4
  0046d	8b bc 02 bc 00
	00 00		 mov	 edi, DWORD PTR [edx+eax+188]
  00474	8b cb		 mov	 ecx, ebx
  00476	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00479	0f b6 c9	 movzx	 ecx, cl
  0047c	c1 e1 04	 shl	 ecx, 4
  0047f	33 bc 01 b8 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+184]
  00486	8b 4d 08	 mov	 ecx, DWORD PTR tv2086[ebp]
  00489	8b d3		 mov	 edx, ebx
  0048b	c1 ea 08	 shr	 edx, 8
  0048e	0f b6 d2	 movzx	 edx, dl
  00491	c1 e2 04	 shl	 edx, 4
  00494	33 bc 02 b4 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+180]
  0049b	0f b6 d3	 movzx	 edx, bl
  0049e	c1 e2 04	 shl	 edx, 4
  004a1	33 bc 02 b0 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+176]
  004a8	8b 50 50	 mov	 edx, DWORD PTR [eax+80]
  004ab	03 d7		 add	 edx, edi
  004ad	03 d6		 add	 edx, esi
  004af	33 d1		 xor	 edx, ecx
  004b1	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  004b4	d1 ca		 ror	 edx, 1
  004b6	d1 c1		 rol	 ecx, 1
  004b8	89 4d 08	 mov	 DWORD PTR tv668[ebp], ecx
  004bb	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  004be	8d 34 71	 lea	 esi, DWORD PTR [ecx+esi*2]
  004c1	8b 4d 08	 mov	 ecx, DWORD PTR tv668[ebp]
  004c4	03 f7		 add	 esi, edi
  004c6	33 ce		 xor	 ecx, esi
  004c8	89 4d fc	 mov	 DWORD PTR _blk$[ebp+12], ecx
  004cb	c1 e9 10	 shr	 ecx, 16			; 00000010H
  004ce	8b 7d fc	 mov	 edi, DWORD PTR _blk$[ebp+12]
  004d1	0f b6 c9	 movzx	 ecx, cl
  004d4	c1 e1 04	 shl	 ecx, 4
  004d7	8b b4 01 bc 00
	00 00		 mov	 esi, DWORD PTR [ecx+eax+188]
  004de	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  004e1	c1 e9 08	 shr	 ecx, 8
  004e4	0f b6 c9	 movzx	 ecx, cl
  004e7	c1 e1 04	 shl	 ecx, 4
  004ea	c1 ef 18	 shr	 edi, 24			; 00000018H
  004ed	c1 e7 04	 shl	 edi, 4
  004f0	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  004f7	89 5d 0c	 mov	 DWORD PTR tv2085[ebp], ebx
  004fa	33 b4 01 b8 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+184]
  00501	0f b6 4d fc	 movzx	 ecx, BYTE PTR _blk$[ebp+12]
  00505	c1 e1 04	 shl	 ecx, 4
  00508	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  0050f	8b da		 mov	 ebx, edx
  00511	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00514	0f b6 fb	 movzx	 edi, bl
  00517	c1 e7 04	 shl	 edi, 4
  0051a	8b 5d 0c	 mov	 ebx, DWORD PTR tv2085[ebp]
  0051d	8b ca		 mov	 ecx, edx
  0051f	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00522	c1 e1 04	 shl	 ecx, 4
  00525	89 7d 08	 mov	 DWORD PTR tv2084[ebp], edi
  00528	8b bc 01 bc 00
	00 00		 mov	 edi, DWORD PTR [ecx+eax+188]
  0052f	8b 4d 08	 mov	 ecx, DWORD PTR tv2084[ebp]
  00532	33 bc 01 b8 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+184]
  00539	8b ca		 mov	 ecx, edx
  0053b	c1 e9 08	 shr	 ecx, 8
  0053e	0f b6 c9	 movzx	 ecx, cl
  00541	c1 e1 04	 shl	 ecx, 4
  00544	33 bc 01 b4 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+180]
  0054b	0f b6 ca	 movzx	 ecx, dl
  0054e	c1 e1 04	 shl	 ecx, 4
  00551	33 bc 01 b0 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+176]
  00558	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  0055b	03 cf		 add	 ecx, edi
  0055d	03 ce		 add	 ecx, esi
  0055f	33 cb		 xor	 ecx, ebx
  00561	8b 5d f4	 mov	 ebx, DWORD PTR _blk$[ebp+4]
  00564	d1 c9		 ror	 ecx, 1
  00566	d1 c3		 rol	 ebx, 1
  00568	89 5d 08	 mov	 DWORD PTR tv749[ebp], ebx
  0056b	8b 58 5c	 mov	 ebx, DWORD PTR [eax+92]
  0056e	8d 1c 73	 lea	 ebx, DWORD PTR [ebx+esi*2]
  00571	8b 75 08	 mov	 esi, DWORD PTR tv749[ebp]
  00574	03 df		 add	 ebx, edi
  00576	33 f3		 xor	 esi, ebx

; 442  :     f_rnd(4); f_rnd(5); f_rnd(6); f_rnd(7);

  00578	8b de		 mov	 ebx, esi
  0057a	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0057d	89 75 f4	 mov	 DWORD PTR _blk$[ebp+4], esi
  00580	8b 7d f4	 mov	 edi, DWORD PTR _blk$[ebp+4]
  00583	0f b6 f3	 movzx	 esi, bl
  00586	8b 5d f4	 mov	 ebx, DWORD PTR _blk$[ebp+4]
  00589	c1 ef 18	 shr	 edi, 24			; 00000018H
  0058c	c1 e7 04	 shl	 edi, 4
  0058f	c1 eb 08	 shr	 ebx, 8
  00592	c1 e6 04	 shl	 esi, 4
  00595	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  0059c	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  005a3	0f b6 fb	 movzx	 edi, bl
  005a6	c1 e7 04	 shl	 edi, 4
  005a9	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  005b0	0f b6 7d f4	 movzx	 edi, BYTE PTR _blk$[ebp+4]
  005b4	c1 e7 04	 shl	 edi, 4
  005b7	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  005be	8b d9		 mov	 ebx, ecx
  005c0	c1 eb 10	 shr	 ebx, 16			; 00000010H
  005c3	0f b6 db	 movzx	 ebx, bl
  005c6	c1 e3 04	 shl	 ebx, 4
  005c9	8b f9		 mov	 edi, ecx
  005cb	c1 ef 18	 shr	 edi, 24			; 00000018H
  005ce	c1 e7 04	 shl	 edi, 4
  005d1	8b bc 07 bc 00
	00 00		 mov	 edi, DWORD PTR [edi+eax+188]
  005d8	33 bc 03 b8 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+184]
  005df	8b d9		 mov	 ebx, ecx
  005e1	c1 eb 08	 shr	 ebx, 8
  005e4	0f b6 db	 movzx	 ebx, bl
  005e7	c1 e3 04	 shl	 ebx, 4
  005ea	33 bc 03 b4 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+180]
  005f1	0f b6 d9	 movzx	 ebx, cl
  005f4	c1 e3 04	 shl	 ebx, 4
  005f7	33 bc 03 b0 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+176]
  005fe	8b 58 60	 mov	 ebx, DWORD PTR [eax+96]
  00601	03 df		 add	 ebx, edi
  00603	03 de		 add	 ebx, esi
  00605	33 da		 xor	 ebx, edx
  00607	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  0060a	d1 cb		 ror	 ebx, 1
  0060c	d1 c2		 rol	 edx, 1
  0060e	89 55 08	 mov	 DWORD PTR tv828[ebp], edx
  00611	8b 50 64	 mov	 edx, DWORD PTR [eax+100]
  00614	8d 34 72	 lea	 esi, DWORD PTR [edx+esi*2]
  00617	8b 55 08	 mov	 edx, DWORD PTR tv828[ebp]
  0061a	03 f7		 add	 esi, edi
  0061c	33 d6		 xor	 edx, esi
  0061e	89 55 fc	 mov	 DWORD PTR _blk$[ebp+12], edx
  00621	8b 7d fc	 mov	 edi, DWORD PTR _blk$[ebp+12]
  00624	c1 ea 10	 shr	 edx, 16			; 00000010H
  00627	0f b6 d2	 movzx	 edx, dl
  0062a	c1 e2 04	 shl	 edx, 4
  0062d	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  00634	8b 55 fc	 mov	 edx, DWORD PTR _blk$[ebp+12]
  00637	c1 ea 08	 shr	 edx, 8
  0063a	0f b6 d2	 movzx	 edx, dl
  0063d	c1 e2 04	 shl	 edx, 4
  00640	c1 ef 18	 shr	 edi, 24			; 00000018H
  00643	c1 e7 04	 shl	 edi, 4
  00646	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  0064d	89 4d 08	 mov	 DWORD PTR tv2082[ebp], ecx
  00650	33 b4 02 b8 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+184]
  00657	0f b6 55 fc	 movzx	 edx, BYTE PTR _blk$[ebp+12]
  0065b	c1 e2 04	 shl	 edx, 4
  0065e	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  00665	8b d3		 mov	 edx, ebx
  00667	c1 ea 18	 shr	 edx, 24			; 00000018H
  0066a	c1 e2 04	 shl	 edx, 4
  0066d	8b bc 02 bc 00
	00 00		 mov	 edi, DWORD PTR [edx+eax+188]
  00674	8b cb		 mov	 ecx, ebx
  00676	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00679	8b d3		 mov	 edx, ebx
  0067b	c1 ea 08	 shr	 edx, 8
  0067e	0f b6 c9	 movzx	 ecx, cl
  00681	c1 e1 04	 shl	 ecx, 4
  00684	33 bc 01 b8 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+184]
  0068b	0f b6 d2	 movzx	 edx, dl
  0068e	c1 e2 04	 shl	 edx, 4
  00691	33 bc 02 b4 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+180]
  00698	8b 4d 08	 mov	 ecx, DWORD PTR tv2082[ebp]
  0069b	0f b6 d3	 movzx	 edx, bl
  0069e	c1 e2 04	 shl	 edx, 4
  006a1	33 bc 02 b0 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+176]
  006a8	8b 50 68	 mov	 edx, DWORD PTR [eax+104]
  006ab	03 d7		 add	 edx, edi
  006ad	03 d6		 add	 edx, esi
  006af	33 d1		 xor	 edx, ecx
  006b1	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  006b4	d1 ca		 ror	 edx, 1
  006b6	d1 c1		 rol	 ecx, 1
  006b8	89 4d 08	 mov	 DWORD PTR tv909[ebp], ecx
  006bb	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  006be	8d 34 71	 lea	 esi, DWORD PTR [ecx+esi*2]
  006c1	8b 4d 08	 mov	 ecx, DWORD PTR tv909[ebp]
  006c4	03 f7		 add	 esi, edi
  006c6	33 ce		 xor	 ecx, esi
  006c8	89 4d f4	 mov	 DWORD PTR _blk$[ebp+4], ecx
  006cb	c1 e9 10	 shr	 ecx, 16			; 00000010H
  006ce	8b 7d f4	 mov	 edi, DWORD PTR _blk$[ebp+4]
  006d1	0f b6 c9	 movzx	 ecx, cl
  006d4	c1 e1 04	 shl	 ecx, 4
  006d7	8b b4 01 bc 00
	00 00		 mov	 esi, DWORD PTR [ecx+eax+188]
  006de	8b 4d f4	 mov	 ecx, DWORD PTR _blk$[ebp+4]
  006e1	c1 e9 08	 shr	 ecx, 8
  006e4	0f b6 c9	 movzx	 ecx, cl
  006e7	c1 e1 04	 shl	 ecx, 4
  006ea	c1 ef 18	 shr	 edi, 24			; 00000018H
  006ed	c1 e7 04	 shl	 edi, 4
  006f0	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  006f7	89 5d 0c	 mov	 DWORD PTR tv2081[ebp], ebx
  006fa	33 b4 01 b8 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+184]
  00701	0f b6 4d f4	 movzx	 ecx, BYTE PTR _blk$[ebp+4]
  00705	c1 e1 04	 shl	 ecx, 4
  00708	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  0070f	8b da		 mov	 ebx, edx
  00711	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00714	0f b6 fb	 movzx	 edi, bl
  00717	c1 e7 04	 shl	 edi, 4
  0071a	89 7d 08	 mov	 DWORD PTR tv2080[ebp], edi
  0071d	8b 5d 0c	 mov	 ebx, DWORD PTR tv2081[ebp]
  00720	8b ca		 mov	 ecx, edx
  00722	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00725	c1 e1 04	 shl	 ecx, 4
  00728	8b bc 01 bc 00
	00 00		 mov	 edi, DWORD PTR [ecx+eax+188]
  0072f	8b 4d 08	 mov	 ecx, DWORD PTR tv2080[ebp]
  00732	33 bc 01 b8 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+184]
  00739	8b ca		 mov	 ecx, edx
  0073b	c1 e9 08	 shr	 ecx, 8
  0073e	0f b6 c9	 movzx	 ecx, cl
  00741	c1 e1 04	 shl	 ecx, 4
  00744	33 bc 01 b4 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+180]
  0074b	0f b6 ca	 movzx	 ecx, dl
  0074e	c1 e1 04	 shl	 ecx, 4
  00751	33 bc 01 b0 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+176]
  00758	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  0075b	03 cf		 add	 ecx, edi
  0075d	03 ce		 add	 ecx, esi
  0075f	33 cb		 xor	 ecx, ebx
  00761	8b 5d fc	 mov	 ebx, DWORD PTR _blk$[ebp+12]
  00764	d1 c9		 ror	 ecx, 1
  00766	d1 c3		 rol	 ebx, 1
  00768	89 5d 08	 mov	 DWORD PTR tv988[ebp], ebx
  0076b	8b 58 74	 mov	 ebx, DWORD PTR [eax+116]
  0076e	8d 1c 73	 lea	 ebx, DWORD PTR [ebx+esi*2]
  00771	8b 75 08	 mov	 esi, DWORD PTR tv988[ebp]
  00774	03 df		 add	 ebx, edi
  00776	33 f3		 xor	 esi, ebx
  00778	8b de		 mov	 ebx, esi
  0077a	89 75 fc	 mov	 DWORD PTR _blk$[ebp+12], esi
  0077d	8b 7d fc	 mov	 edi, DWORD PTR _blk$[ebp+12]
  00780	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00783	0f b6 f3	 movzx	 esi, bl
  00786	8b 5d fc	 mov	 ebx, DWORD PTR _blk$[ebp+12]
  00789	c1 e6 04	 shl	 esi, 4
  0078c	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  00793	c1 ef 18	 shr	 edi, 24			; 00000018H
  00796	c1 e7 04	 shl	 edi, 4
  00799	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  007a0	c1 eb 08	 shr	 ebx, 8
  007a3	0f b6 fb	 movzx	 edi, bl
  007a6	c1 e7 04	 shl	 edi, 4
  007a9	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  007b0	0f b6 7d fc	 movzx	 edi, BYTE PTR _blk$[ebp+12]
  007b4	c1 e7 04	 shl	 edi, 4
  007b7	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  007be	8b d9		 mov	 ebx, ecx
  007c0	c1 eb 10	 shr	 ebx, 16			; 00000010H
  007c3	0f b6 db	 movzx	 ebx, bl
  007c6	8b f9		 mov	 edi, ecx
  007c8	c1 ef 18	 shr	 edi, 24			; 00000018H
  007cb	c1 e7 04	 shl	 edi, 4
  007ce	8b bc 07 bc 00
	00 00		 mov	 edi, DWORD PTR [edi+eax+188]
  007d5	c1 e3 04	 shl	 ebx, 4
  007d8	33 bc 03 b8 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+184]
  007df	8b d9		 mov	 ebx, ecx
  007e1	c1 eb 08	 shr	 ebx, 8
  007e4	0f b6 db	 movzx	 ebx, bl
  007e7	c1 e3 04	 shl	 ebx, 4
  007ea	33 bc 03 b4 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+180]
  007f1	0f b6 d9	 movzx	 ebx, cl
  007f4	c1 e3 04	 shl	 ebx, 4
  007f7	33 bc 03 b0 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+176]
  007fe	8b 58 78	 mov	 ebx, DWORD PTR [eax+120]
  00801	03 df		 add	 ebx, edi
  00803	03 de		 add	 ebx, esi
  00805	33 da		 xor	 ebx, edx
  00807	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  0080a	d1 cb		 ror	 ebx, 1
  0080c	d1 c2		 rol	 edx, 1
  0080e	89 55 08	 mov	 DWORD PTR tv1069[ebp], edx
  00811	8b 50 7c	 mov	 edx, DWORD PTR [eax+124]
  00814	8d 34 72	 lea	 esi, DWORD PTR [edx+esi*2]
  00817	8b 55 08	 mov	 edx, DWORD PTR tv1069[ebp]
  0081a	03 f7		 add	 esi, edi
  0081c	33 d6		 xor	 edx, esi
  0081e	89 55 f4	 mov	 DWORD PTR _blk$[ebp+4], edx
  00821	c1 ea 10	 shr	 edx, 16			; 00000010H
  00824	8b 7d f4	 mov	 edi, DWORD PTR _blk$[ebp+4]
  00827	0f b6 d2	 movzx	 edx, dl
  0082a	c1 e2 04	 shl	 edx, 4
  0082d	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  00834	8b 55 f4	 mov	 edx, DWORD PTR _blk$[ebp+4]
  00837	c1 ea 08	 shr	 edx, 8
  0083a	0f b6 d2	 movzx	 edx, dl
  0083d	c1 e2 04	 shl	 edx, 4
  00840	c1 ef 18	 shr	 edi, 24			; 00000018H
  00843	c1 e7 04	 shl	 edi, 4
  00846	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  0084d	89 4d 08	 mov	 DWORD PTR tv2078[ebp], ecx
  00850	33 b4 02 b8 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+184]
  00857	0f b6 55 f4	 movzx	 edx, BYTE PTR _blk$[ebp+4]
  0085b	c1 e2 04	 shl	 edx, 4
  0085e	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  00865	8b d3		 mov	 edx, ebx
  00867	c1 ea 18	 shr	 edx, 24			; 00000018H
  0086a	c1 e2 04	 shl	 edx, 4
  0086d	8b bc 02 bc 00
	00 00		 mov	 edi, DWORD PTR [edx+eax+188]
  00874	8b cb		 mov	 ecx, ebx
  00876	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00879	0f b6 c9	 movzx	 ecx, cl
  0087c	c1 e1 04	 shl	 ecx, 4
  0087f	33 bc 01 b8 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+184]
  00886	8b 4d 08	 mov	 ecx, DWORD PTR tv2078[ebp]
  00889	8b d3		 mov	 edx, ebx
  0088b	c1 ea 08	 shr	 edx, 8
  0088e	0f b6 d2	 movzx	 edx, dl
  00891	c1 e2 04	 shl	 edx, 4
  00894	33 bc 02 b4 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+180]
  0089b	0f b6 d3	 movzx	 edx, bl
  0089e	c1 e2 04	 shl	 edx, 4
  008a1	33 bc 02 b0 00
	00 00		 xor	 edi, DWORD PTR [edx+eax+176]
  008a8	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  008ae	03 d7		 add	 edx, edi
  008b0	03 d6		 add	 edx, esi
  008b2	33 d1		 xor	 edx, ecx
  008b4	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  008b7	d1 ca		 ror	 edx, 1
  008b9	d1 c1		 rol	 ecx, 1
  008bb	89 4d 08	 mov	 DWORD PTR tv1148[ebp], ecx
  008be	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  008c4	8d 34 71	 lea	 esi, DWORD PTR [ecx+esi*2]
  008c7	03 f7		 add	 esi, edi
  008c9	8b 4d 08	 mov	 ecx, DWORD PTR tv1148[ebp]
  008cc	33 ce		 xor	 ecx, esi
  008ce	89 4d fc	 mov	 DWORD PTR _blk$[ebp+12], ecx
  008d1	c1 e9 10	 shr	 ecx, 16			; 00000010H
  008d4	8b 7d fc	 mov	 edi, DWORD PTR _blk$[ebp+12]
  008d7	0f b6 c9	 movzx	 ecx, cl
  008da	c1 e1 04	 shl	 ecx, 4
  008dd	8b b4 01 bc 00
	00 00		 mov	 esi, DWORD PTR [ecx+eax+188]
  008e4	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  008e7	c1 e9 08	 shr	 ecx, 8
  008ea	c1 ef 18	 shr	 edi, 24			; 00000018H
  008ed	c1 e7 04	 shl	 edi, 4
  008f0	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  008f7	0f b6 c9	 movzx	 ecx, cl
  008fa	c1 e1 04	 shl	 ecx, 4
  008fd	33 b4 01 b8 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+184]
  00904	0f b6 4d fc	 movzx	 ecx, BYTE PTR _blk$[ebp+12]
  00908	89 5d 0c	 mov	 DWORD PTR tv2077[ebp], ebx
  0090b	c1 e1 04	 shl	 ecx, 4
  0090e	33 b4 01 b4 00
	00 00		 xor	 esi, DWORD PTR [ecx+eax+180]
  00915	8b da		 mov	 ebx, edx
  00917	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0091a	0f b6 fb	 movzx	 edi, bl
  0091d	c1 e7 04	 shl	 edi, 4
  00920	89 7d 08	 mov	 DWORD PTR tv2076[ebp], edi
  00923	8b 5d 0c	 mov	 ebx, DWORD PTR tv2077[ebp]
  00926	8b ca		 mov	 ecx, edx
  00928	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0092b	c1 e1 04	 shl	 ecx, 4
  0092e	8b bc 01 bc 00
	00 00		 mov	 edi, DWORD PTR [ecx+eax+188]
  00935	8b 4d 08	 mov	 ecx, DWORD PTR tv2076[ebp]
  00938	33 bc 01 b8 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+184]
  0093f	8b ca		 mov	 ecx, edx
  00941	c1 e9 08	 shr	 ecx, 8
  00944	0f b6 c9	 movzx	 ecx, cl
  00947	c1 e1 04	 shl	 ecx, 4
  0094a	33 bc 01 b4 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+180]
  00951	0f b6 ca	 movzx	 ecx, dl
  00954	c1 e1 04	 shl	 ecx, 4
  00957	33 bc 01 b0 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+176]
  0095e	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00964	03 cf		 add	 ecx, edi
  00966	03 ce		 add	 ecx, esi
  00968	33 cb		 xor	 ecx, ebx
  0096a	8b 5d f4	 mov	 ebx, DWORD PTR _blk$[ebp+4]
  0096d	d1 c9		 ror	 ecx, 1
  0096f	d1 c3		 rol	 ebx, 1
  00971	89 5d 08	 mov	 DWORD PTR tv1229[ebp], ebx
  00974	8b 98 8c 00 00
	00		 mov	 ebx, DWORD PTR [eax+140]
  0097a	8d 1c 73	 lea	 ebx, DWORD PTR [ebx+esi*2]
  0097d	8b 75 08	 mov	 esi, DWORD PTR tv1229[ebp]
  00980	03 df		 add	 ebx, edi
  00982	33 f3		 xor	 esi, ebx
  00984	8b de		 mov	 ebx, esi
  00986	89 75 f4	 mov	 DWORD PTR _blk$[ebp+4], esi
  00989	8b 7d f4	 mov	 edi, DWORD PTR _blk$[ebp+4]
  0098c	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0098f	0f b6 f3	 movzx	 esi, bl
  00992	8b 5d f4	 mov	 ebx, DWORD PTR _blk$[ebp+4]
  00995	c1 ef 18	 shr	 edi, 24			; 00000018H
  00998	c1 e7 04	 shl	 edi, 4
  0099b	c1 e6 04	 shl	 esi, 4
  0099e	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  009a5	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  009ac	c1 eb 08	 shr	 ebx, 8
  009af	0f b6 fb	 movzx	 edi, bl
  009b2	c1 e7 04	 shl	 edi, 4
  009b5	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  009bc	0f b6 7d f4	 movzx	 edi, BYTE PTR _blk$[ebp+4]
  009c0	c1 e7 04	 shl	 edi, 4
  009c3	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  009ca	8b d9		 mov	 ebx, ecx
  009cc	c1 eb 10	 shr	 ebx, 16			; 00000010H
  009cf	8b f9		 mov	 edi, ecx
  009d1	c1 ef 18	 shr	 edi, 24			; 00000018H
  009d4	0f b6 db	 movzx	 ebx, bl
  009d7	c1 e7 04	 shl	 edi, 4
  009da	8b bc 07 bc 00
	00 00		 mov	 edi, DWORD PTR [edi+eax+188]
  009e1	89 4d f0	 mov	 DWORD PTR _blk$[ebp], ecx
  009e4	c1 e3 04	 shl	 ebx, 4
  009e7	33 bc 03 b8 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+184]
  009ee	8b d9		 mov	 ebx, ecx
  009f0	0f b6 c9	 movzx	 ecx, cl
  009f3	c1 e1 04	 shl	 ecx, 4
  009f6	c1 eb 08	 shr	 ebx, 8
  009f9	0f b6 db	 movzx	 ebx, bl
  009fc	c1 e3 04	 shl	 ebx, 4
  009ff	33 bc 03 b4 00
	00 00		 xor	 edi, DWORD PTR [ebx+eax+180]
  00a06	8b 98 90 00 00
	00		 mov	 ebx, DWORD PTR [eax+144]
  00a0c	33 bc 01 b0 00
	00 00		 xor	 edi, DWORD PTR [ecx+eax+176]
  00a13	8b 4d fc	 mov	 ecx, DWORD PTR _blk$[ebp+12]
  00a16	03 df		 add	 ebx, edi
  00a18	03 de		 add	 ebx, esi
  00a1a	33 da		 xor	 ebx, edx
  00a1c	8b 90 94 00 00
	00		 mov	 edx, DWORD PTR [eax+148]
  00a22	8d 14 72	 lea	 edx, DWORD PTR [edx+esi*2]
  00a25	03 d7		 add	 edx, edi
  00a27	d1 cb		 ror	 ebx, 1
  00a29	d1 c1		 rol	 ecx, 1
  00a2b	33 ca		 xor	 ecx, edx
  00a2d	8b f1		 mov	 esi, ecx
  00a2f	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00a32	0f b6 c9	 movzx	 ecx, cl
  00a35	c1 e1 04	 shl	 ecx, 4
  00a38	8b 8c 01 bc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+188]
  00a3f	8b d6		 mov	 edx, esi
  00a41	c1 ea 18	 shr	 edx, 24			; 00000018H
  00a44	c1 e2 04	 shl	 edx, 4
  00a47	33 8c 02 b0 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+176]
  00a4e	8b d6		 mov	 edx, esi
  00a50	c1 ea 08	 shr	 edx, 8
  00a53	0f b6 d2	 movzx	 edx, dl
  00a56	c1 e2 04	 shl	 edx, 4
  00a59	33 8c 02 b8 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+184]
  00a60	89 75 fc	 mov	 DWORD PTR _blk$[ebp+12], esi
  00a63	0f b6 55 fc	 movzx	 edx, BYTE PTR _blk$[ebp+12]
  00a67	c1 e2 04	 shl	 edx, 4
  00a6a	33 8c 02 b4 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+180]
  00a71	8b d3		 mov	 edx, ebx
  00a73	c1 ea 18	 shr	 edx, 24			; 00000018H
  00a76	c1 e2 04	 shl	 edx, 4
  00a79	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  00a80	89 4d 08	 mov	 DWORD PTR tv2074[ebp], ecx
  00a83	8b cb		 mov	 ecx, ebx
  00a85	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00a88	0f b6 f9	 movzx	 edi, cl
  00a8b	8b 4d 08	 mov	 ecx, DWORD PTR tv2074[ebp]
  00a8e	c1 e7 04	 shl	 edi, 4
  00a91	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  00a98	8b 7d f4	 mov	 edi, DWORD PTR _blk$[ebp+4]
  00a9b	8b d3		 mov	 edx, ebx
  00a9d	c1 ea 08	 shr	 edx, 8
  00aa0	0f b6 d2	 movzx	 edx, dl
  00aa3	c1 e2 04	 shl	 edx, 4
  00aa6	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  00aad	0f b6 d3	 movzx	 edx, bl
  00ab0	c1 e2 04	 shl	 edx, 4
  00ab3	33 b4 02 b0 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+176]
  00aba	8b 90 98 00 00
	00		 mov	 edx, DWORD PTR [eax+152]
  00ac0	03 d6		 add	 edx, esi
  00ac2	03 d1		 add	 edx, ecx
  00ac4	33 55 f0	 xor	 edx, DWORD PTR _blk$[ebp]
  00ac7	d1 ca		 ror	 edx, 1
  00ac9	d1 c7		 rol	 edi, 1
  00acb	89 7d 08	 mov	 DWORD PTR tv1389[ebp], edi
  00ace	8b b8 9c 00 00
	00		 mov	 edi, DWORD PTR [eax+156]
  00ad4	8d 0c 4f	 lea	 ecx, DWORD PTR [edi+ecx*2]

; 443  : 
; 444  :     out_blk[0] = LE32(blk[2] ^ l_key[4]);

  00ad7	8b 78 10	 mov	 edi, DWORD PTR [eax+16]
  00ada	03 ce		 add	 ecx, esi
  00adc	8b 75 08	 mov	 esi, DWORD PTR tv1389[ebp]
  00adf	33 fb		 xor	 edi, ebx
  00ae1	33 f1		 xor	 esi, ecx
  00ae3	8b 4d 10	 mov	 ecx, DWORD PTR _out_blk$[ebp]
  00ae6	89 39		 mov	 DWORD PTR [ecx], edi

; 445  :     out_blk[1] = LE32(blk[3] ^ l_key[5]);

  00ae8	8b 78 14	 mov	 edi, DWORD PTR [eax+20]
  00aeb	33 7d fc	 xor	 edi, DWORD PTR _blk$[ebp+12]
  00aee	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 446  :     out_blk[2] = LE32(blk[0] ^ l_key[6]);

  00af1	8b 78 18	 mov	 edi, DWORD PTR [eax+24]
  00af4	33 fa		 xor	 edi, edx
  00af6	89 79 08	 mov	 DWORD PTR [ecx+8], edi

; 447  :     out_blk[3] = LE32(blk[1] ^ l_key[7]); 

  00af9	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00afc	5f		 pop	 edi
  00afd	33 c6		 xor	 eax, esi
  00aff	5e		 pop	 esi
  00b00	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00b03	5b		 pop	 ebx

; 448  : };

  00b04	c9		 leave
  00b05	c2 0c 00	 ret	 12			; 0000000cH
_twofish_encrypt@12 ENDP
_TEXT	ENDS
PUBLIC	_twofish_decrypt@12
; Function compile flags: /Ogsp
;	COMDAT _twofish_decrypt@12
_TEXT	SEGMENT
_blk$ = -16						; size = 16
tv2133 = 8						; size = 4
tv2132 = 8						; size = 4
tv2131 = 8						; size = 4
tv2130 = 8						; size = 4
_instance$ = 8						; size = 4
_in_blk$ = 12						; size = 4
_out_blk$ = 16						; size = 4
_twofish_decrypt@12 PROC				; COMDAT

; 497  : {   u4byte  t0, t1, blk[4];

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 10	 sub	 esp, 16			; 00000010H

; 498  : 
; 499  : 	u4byte *l_key = instance->l_key;
; 500  : 	u4byte *mk_tab = instance->mk_tab;

  00008	8b 45 08	 mov	 eax, DWORD PTR _instance$[ebp]

; 501  : 
; 502  :     blk[0] = LE32(in_blk[0]) ^ l_key[4];

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _in_blk$[ebp]
  0000e	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00011	33 11		 xor	 edx, DWORD PTR [ecx]
  00013	53		 push	 ebx

; 503  :     blk[1] = LE32(in_blk[1]) ^ l_key[5];
; 504  :     blk[2] = LE32(in_blk[2]) ^ l_key[6];
; 505  :     blk[3] = LE32(in_blk[3]) ^ l_key[7];

  00014	8b 58 1c	 mov	 ebx, DWORD PTR [eax+28]
  00017	33 59 0c	 xor	 ebx, DWORD PTR [ecx+12]
  0001a	56		 push	 esi
  0001b	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0001e	33 71 04	 xor	 esi, DWORD PTR [ecx+4]
  00021	89 5d fc	 mov	 DWORD PTR _blk$[ebp+12], ebx

; 506  : 
; 507  :     i_rnd(7); i_rnd(6); i_rnd(5); i_rnd(4);

  00024	8b de		 mov	 ebx, esi
  00026	57		 push	 edi
  00027	8b 78 18	 mov	 edi, DWORD PTR [eax+24]
  0002a	33 79 08	 xor	 edi, DWORD PTR [ecx+8]
  0002d	8b ce		 mov	 ecx, esi
  0002f	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00032	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00035	c1 e3 04	 shl	 ebx, 4
  00038	0f b6 c9	 movzx	 ecx, cl
  0003b	c1 e1 04	 shl	 ecx, 4
  0003e	8b 8c 01 bc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+188]
  00045	33 8c 03 b0 00
	00 00		 xor	 ecx, DWORD PTR [ebx+eax+176]
  0004c	8b de		 mov	 ebx, esi
  0004e	89 75 f4	 mov	 DWORD PTR _blk$[ebp+4], esi
  00051	c1 eb 08	 shr	 ebx, 8
  00054	0f b6 f3	 movzx	 esi, bl
  00057	c1 e6 04	 shl	 esi, 4
  0005a	33 8c 06 b8 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+184]
  00061	0f b6 75 f4	 movzx	 esi, BYTE PTR _blk$[ebp+4]
  00065	c1 e6 04	 shl	 esi, 4
  00068	33 8c 06 b4 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+180]
  0006f	8b da		 mov	 ebx, edx
  00071	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00074	0f b6 db	 movzx	 ebx, bl
  00077	c1 e3 04	 shl	 ebx, 4
  0007a	8b f2		 mov	 esi, edx
  0007c	c1 ee 18	 shr	 esi, 24			; 00000018H
  0007f	c1 e6 04	 shl	 esi, 4
  00082	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  00089	33 b4 03 b8 00
	00 00		 xor	 esi, DWORD PTR [ebx+eax+184]
  00090	8b da		 mov	 ebx, edx
  00092	c1 eb 08	 shr	 ebx, 8
  00095	0f b6 db	 movzx	 ebx, bl
  00098	c1 e3 04	 shl	 ebx, 4
  0009b	33 b4 03 b4 00
	00 00		 xor	 esi, DWORD PTR [ebx+eax+180]
  000a2	0f b6 da	 movzx	 ebx, dl
  000a5	c1 e3 04	 shl	 ebx, 4
  000a8	33 b4 03 b0 00
	00 00		 xor	 esi, DWORD PTR [ebx+eax+176]
  000af	8b 98 98 00 00
	00		 mov	 ebx, DWORD PTR [eax+152]
  000b5	03 de		 add	 ebx, esi
  000b7	03 d9		 add	 ebx, ecx
  000b9	d1 c7		 rol	 edi, 1
  000bb	33 fb		 xor	 edi, ebx
  000bd	89 7d f8	 mov	 DWORD PTR _blk$[ebp+8], edi
  000c0	8b b8 9c 00 00
	00		 mov	 edi, DWORD PTR [eax+156]
  000c6	8d 3c 4f	 lea	 edi, DWORD PTR [edi+ecx*2]
  000c9	03 fe		 add	 edi, esi
  000cb	33 7d fc	 xor	 edi, DWORD PTR _blk$[ebp+12]
  000ce	d1 cf		 ror	 edi, 1
  000d0	8b cf		 mov	 ecx, edi
  000d2	c1 e9 10	 shr	 ecx, 16			; 00000010H
  000d5	0f b6 c9	 movzx	 ecx, cl
  000d8	c1 e1 04	 shl	 ecx, 4
  000db	8b 8c 01 bc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+188]
  000e2	8b f7		 mov	 esi, edi
  000e4	c1 ee 18	 shr	 esi, 24			; 00000018H
  000e7	c1 e6 04	 shl	 esi, 4
  000ea	33 8c 06 b0 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+176]
  000f1	8b df		 mov	 ebx, edi
  000f3	c1 eb 08	 shr	 ebx, 8
  000f6	0f b6 f3	 movzx	 esi, bl
  000f9	c1 e6 04	 shl	 esi, 4
  000fc	33 8c 06 b8 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+184]
  00103	89 7d fc	 mov	 DWORD PTR _blk$[ebp+12], edi
  00106	0f b6 75 fc	 movzx	 esi, BYTE PTR _blk$[ebp+12]
  0010a	c1 e6 04	 shl	 esi, 4
  0010d	33 8c 06 b4 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+180]
  00114	8b 75 f8	 mov	 esi, DWORD PTR _blk$[ebp+8]
  00117	c1 ee 18	 shr	 esi, 24			; 00000018H
  0011a	c1 e6 04	 shl	 esi, 4
  0011d	8b 5d f8	 mov	 ebx, DWORD PTR _blk$[ebp+8]
  00120	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  00127	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0012a	0f b6 fb	 movzx	 edi, bl
  0012d	8b 5d f8	 mov	 ebx, DWORD PTR _blk$[ebp+8]
  00130	c1 e7 04	 shl	 edi, 4
  00133	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  0013a	c1 eb 08	 shr	 ebx, 8
  0013d	0f b6 fb	 movzx	 edi, bl
  00140	c1 e7 04	 shl	 edi, 4
  00143	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  0014a	0f b6 7d f8	 movzx	 edi, BYTE PTR _blk$[ebp+8]
  0014e	c1 e7 04	 shl	 edi, 4
  00151	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00158	8b b8 90 00 00
	00		 mov	 edi, DWORD PTR [eax+144]
  0015e	d1 c2		 rol	 edx, 1
  00160	03 fe		 add	 edi, esi
  00162	03 f9		 add	 edi, ecx
  00164	33 d7		 xor	 edx, edi
  00166	89 55 f0	 mov	 DWORD PTR _blk$[ebp], edx
  00169	8b 90 94 00 00
	00		 mov	 edx, DWORD PTR [eax+148]
  0016f	8d 1c 4a	 lea	 ebx, DWORD PTR [edx+ecx*2]
  00172	03 de		 add	 ebx, esi
  00174	33 5d f4	 xor	 ebx, DWORD PTR _blk$[ebp+4]
  00177	d1 cb		 ror	 ebx, 1
  00179	8b cb		 mov	 ecx, ebx
  0017b	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0017e	0f b6 c9	 movzx	 ecx, cl
  00181	c1 e1 04	 shl	 ecx, 4
  00184	8b 8c 01 bc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+188]
  0018b	8b d3		 mov	 edx, ebx
  0018d	c1 ea 18	 shr	 edx, 24			; 00000018H
  00190	c1 e2 04	 shl	 edx, 4
  00193	33 8c 02 b0 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+176]
  0019a	8b d3		 mov	 edx, ebx
  0019c	c1 ea 08	 shr	 edx, 8
  0019f	0f b6 d2	 movzx	 edx, dl
  001a2	c1 e2 04	 shl	 edx, 4
  001a5	33 8c 02 b8 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+184]
  001ac	0f b6 d3	 movzx	 edx, bl
  001af	c1 e2 04	 shl	 edx, 4
  001b2	33 8c 02 b4 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+180]
  001b9	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  001bc	c1 ea 18	 shr	 edx, 24			; 00000018H
  001bf	c1 e2 04	 shl	 edx, 4
  001c2	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  001c9	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  001cc	c1 ea 08	 shr	 edx, 8
  001cf	89 5d 08	 mov	 DWORD PTR tv2133[ebp], ebx
  001d2	8b 5d f0	 mov	 ebx, DWORD PTR _blk$[ebp]
  001d5	0f b6 d2	 movzx	 edx, dl
  001d8	c1 eb 10	 shr	 ebx, 16			; 00000010H
  001db	c1 e2 04	 shl	 edx, 4
  001de	0f b6 fb	 movzx	 edi, bl
  001e1	c1 e7 04	 shl	 edi, 4
  001e4	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  001eb	8b 7d f8	 mov	 edi, DWORD PTR _blk$[ebp+8]
  001ee	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  001f5	0f b6 55 f0	 movzx	 edx, BYTE PTR _blk$[ebp]
  001f9	c1 e2 04	 shl	 edx, 4
  001fc	33 b4 02 b0 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+176]
  00203	8b 90 88 00 00
	00		 mov	 edx, DWORD PTR [eax+136]
  00209	03 d6		 add	 edx, esi
  0020b	03 d1		 add	 edx, ecx
  0020d	d1 c7		 rol	 edi, 1
  0020f	33 fa		 xor	 edi, edx
  00211	8b 90 8c 00 00
	00		 mov	 edx, DWORD PTR [eax+140]
  00217	89 7d f8	 mov	 DWORD PTR _blk$[ebp+8], edi
  0021a	8d 3c 4a	 lea	 edi, DWORD PTR [edx+ecx*2]
  0021d	03 fe		 add	 edi, esi
  0021f	33 7d fc	 xor	 edi, DWORD PTR _blk$[ebp+12]
  00222	d1 cf		 ror	 edi, 1
  00224	8b cf		 mov	 ecx, edi
  00226	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00229	0f b6 c9	 movzx	 ecx, cl
  0022c	8b d7		 mov	 edx, edi
  0022e	c1 e1 04	 shl	 ecx, 4
  00231	8b 8c 01 bc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+188]
  00238	c1 ea 18	 shr	 edx, 24			; 00000018H
  0023b	89 7d fc	 mov	 DWORD PTR _blk$[ebp+12], edi
  0023e	c1 e2 04	 shl	 edx, 4
  00241	33 8c 02 b0 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+176]
  00248	8b d7		 mov	 edx, edi
  0024a	c1 ea 08	 shr	 edx, 8
  0024d	0f b6 d2	 movzx	 edx, dl
  00250	c1 e2 04	 shl	 edx, 4
  00253	33 8c 02 b8 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+184]
  0025a	0f b6 55 fc	 movzx	 edx, BYTE PTR _blk$[ebp+12]
  0025e	8b 5d f8	 mov	 ebx, DWORD PTR _blk$[ebp+8]
  00261	c1 e2 04	 shl	 edx, 4
  00264	33 8c 02 b4 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+180]
  0026b	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  0026e	c1 ea 18	 shr	 edx, 24			; 00000018H
  00271	c1 e2 04	 shl	 edx, 4
  00274	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  0027b	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  0027e	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00281	c1 ea 08	 shr	 edx, 8
  00284	0f b6 fb	 movzx	 edi, bl
  00287	c1 e7 04	 shl	 edi, 4
  0028a	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  00291	8b 7d f0	 mov	 edi, DWORD PTR _blk$[ebp]
  00294	0f b6 d2	 movzx	 edx, dl
  00297	c1 e2 04	 shl	 edx, 4
  0029a	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  002a1	0f b6 55 f8	 movzx	 edx, BYTE PTR _blk$[ebp+8]
  002a5	8b 5d 08	 mov	 ebx, DWORD PTR tv2133[ebp]
  002a8	c1 e2 04	 shl	 edx, 4
  002ab	33 b4 02 b0 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+176]
  002b2	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  002b8	03 d6		 add	 edx, esi
  002ba	03 d1		 add	 edx, ecx
  002bc	d1 c7		 rol	 edi, 1
  002be	33 fa		 xor	 edi, edx
  002c0	8b 90 84 00 00
	00		 mov	 edx, DWORD PTR [eax+132]
  002c6	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  002c9	03 d6		 add	 edx, esi
  002cb	33 d3		 xor	 edx, ebx
  002cd	d1 ca		 ror	 edx, 1
  002cf	8b ca		 mov	 ecx, edx
  002d1	c1 e9 10	 shr	 ecx, 16			; 00000010H
  002d4	0f b6 c9	 movzx	 ecx, cl
  002d7	c1 e1 04	 shl	 ecx, 4
  002da	8b 8c 01 bc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+188]
  002e1	8b f2		 mov	 esi, edx
  002e3	c1 ee 18	 shr	 esi, 24			; 00000018H
  002e6	c1 e6 04	 shl	 esi, 4
  002e9	33 8c 06 b0 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+176]
  002f0	8b da		 mov	 ebx, edx
  002f2	c1 eb 08	 shr	 ebx, 8
  002f5	0f b6 f3	 movzx	 esi, bl
  002f8	c1 e6 04	 shl	 esi, 4
  002fb	33 8c 06 b8 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+184]
  00302	8b df		 mov	 ebx, edi
  00304	89 7d f0	 mov	 DWORD PTR _blk$[ebp], edi
  00307	0f b6 f2	 movzx	 esi, dl
  0030a	c1 e6 04	 shl	 esi, 4
  0030d	33 8c 06 b4 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+180]
  00314	8b f7		 mov	 esi, edi
  00316	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00319	c1 ee 18	 shr	 esi, 24			; 00000018H
  0031c	0f b6 fb	 movzx	 edi, bl
  0031f	8b 5d f0	 mov	 ebx, DWORD PTR _blk$[ebp]
  00322	c1 e7 04	 shl	 edi, 4
  00325	c1 e6 04	 shl	 esi, 4
  00328	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  0032f	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  00336	c1 eb 08	 shr	 ebx, 8
  00339	0f b6 fb	 movzx	 edi, bl
  0033c	8b 58 78	 mov	 ebx, DWORD PTR [eax+120]
  0033f	c1 e7 04	 shl	 edi, 4
  00342	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  00349	0f b6 7d f0	 movzx	 edi, BYTE PTR _blk$[ebp]
  0034d	c1 e7 04	 shl	 edi, 4
  00350	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00357	8b 7d f8	 mov	 edi, DWORD PTR _blk$[ebp+8]
  0035a	03 de		 add	 ebx, esi
  0035c	d1 c7		 rol	 edi, 1
  0035e	03 d9		 add	 ebx, ecx
  00360	33 fb		 xor	 edi, ebx
  00362	89 7d f8	 mov	 DWORD PTR _blk$[ebp+8], edi
  00365	8b 78 7c	 mov	 edi, DWORD PTR [eax+124]
  00368	8d 3c 4f	 lea	 edi, DWORD PTR [edi+ecx*2]
  0036b	03 fe		 add	 edi, esi
  0036d	33 7d fc	 xor	 edi, DWORD PTR _blk$[ebp+12]
  00370	d1 cf		 ror	 edi, 1
  00372	8b cf		 mov	 ecx, edi
  00374	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00377	0f b6 c9	 movzx	 ecx, cl
  0037a	c1 e1 04	 shl	 ecx, 4
  0037d	8b 8c 01 bc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+188]
  00384	8b f7		 mov	 esi, edi
  00386	c1 ee 18	 shr	 esi, 24			; 00000018H
  00389	c1 e6 04	 shl	 esi, 4
  0038c	33 8c 06 b0 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+176]
  00393	8b df		 mov	 ebx, edi
  00395	c1 eb 08	 shr	 ebx, 8
  00398	0f b6 f3	 movzx	 esi, bl
  0039b	8b 5d f8	 mov	 ebx, DWORD PTR _blk$[ebp+8]
  0039e	c1 e6 04	 shl	 esi, 4
  003a1	33 8c 06 b8 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+184]
  003a8	89 7d fc	 mov	 DWORD PTR _blk$[ebp+12], edi
  003ab	0f b6 75 fc	 movzx	 esi, BYTE PTR _blk$[ebp+12]
  003af	c1 e6 04	 shl	 esi, 4
  003b2	33 8c 06 b4 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+180]
  003b9	8b 75 f8	 mov	 esi, DWORD PTR _blk$[ebp+8]
  003bc	c1 eb 10	 shr	 ebx, 16			; 00000010H
  003bf	0f b6 fb	 movzx	 edi, bl
  003c2	8b 5d f8	 mov	 ebx, DWORD PTR _blk$[ebp+8]
  003c5	c1 ee 18	 shr	 esi, 24			; 00000018H
  003c8	c1 e7 04	 shl	 edi, 4
  003cb	c1 e6 04	 shl	 esi, 4
  003ce	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  003d5	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  003dc	c1 eb 08	 shr	 ebx, 8
  003df	0f b6 fb	 movzx	 edi, bl
  003e2	8b 58 70	 mov	 ebx, DWORD PTR [eax+112]
  003e5	c1 e7 04	 shl	 edi, 4
  003e8	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  003ef	0f b6 7d f8	 movzx	 edi, BYTE PTR _blk$[ebp+8]
  003f3	c1 e7 04	 shl	 edi, 4
  003f6	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  003fd	8b 7d f0	 mov	 edi, DWORD PTR _blk$[ebp]
  00400	03 de		 add	 ebx, esi
  00402	03 d9		 add	 ebx, ecx
  00404	d1 c7		 rol	 edi, 1
  00406	33 fb		 xor	 edi, ebx
  00408	89 7d f0	 mov	 DWORD PTR _blk$[ebp], edi
  0040b	8b 78 74	 mov	 edi, DWORD PTR [eax+116]
  0040e	8d 1c 4f	 lea	 ebx, DWORD PTR [edi+ecx*2]
  00411	03 de		 add	 ebx, esi
  00413	33 da		 xor	 ebx, edx
  00415	d1 cb		 ror	 ebx, 1
  00417	8b cb		 mov	 ecx, ebx
  00419	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0041c	0f b6 c9	 movzx	 ecx, cl
  0041f	c1 e1 04	 shl	 ecx, 4
  00422	8b 8c 01 bc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+188]
  00429	8b d3		 mov	 edx, ebx
  0042b	c1 ea 18	 shr	 edx, 24			; 00000018H
  0042e	c1 e2 04	 shl	 edx, 4
  00431	33 8c 02 b0 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+176]
  00438	8b d3		 mov	 edx, ebx
  0043a	c1 ea 08	 shr	 edx, 8
  0043d	0f b6 d2	 movzx	 edx, dl
  00440	c1 e2 04	 shl	 edx, 4
  00443	33 8c 02 b8 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+184]
  0044a	0f b6 d3	 movzx	 edx, bl
  0044d	c1 e2 04	 shl	 edx, 4
  00450	33 8c 02 b4 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+180]
  00457	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  0045a	89 5d 08	 mov	 DWORD PTR tv2132[ebp], ebx
  0045d	8b 5d f0	 mov	 ebx, DWORD PTR _blk$[ebp]
  00460	c1 ea 18	 shr	 edx, 24			; 00000018H
  00463	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00466	c1 e2 04	 shl	 edx, 4
  00469	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  00470	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  00473	0f b6 fb	 movzx	 edi, bl
  00476	c1 e7 04	 shl	 edi, 4
  00479	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  00480	c1 ea 08	 shr	 edx, 8
  00483	0f b6 d2	 movzx	 edx, dl
  00486	c1 e2 04	 shl	 edx, 4
  00489	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  00490	0f b6 55 f0	 movzx	 edx, BYTE PTR _blk$[ebp]
  00494	c1 e2 04	 shl	 edx, 4
  00497	33 b4 02 b0 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+176]
  0049e	8b 50 68	 mov	 edx, DWORD PTR [eax+104]
  004a1	03 d6		 add	 edx, esi
  004a3	03 d1		 add	 edx, ecx
  004a5	8b 7d f8	 mov	 edi, DWORD PTR _blk$[ebp+8]
  004a8	d1 c7		 rol	 edi, 1
  004aa	33 fa		 xor	 edi, edx
  004ac	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  004af	89 7d f8	 mov	 DWORD PTR _blk$[ebp+8], edi
  004b2	8d 3c 4a	 lea	 edi, DWORD PTR [edx+ecx*2]
  004b5	03 fe		 add	 edi, esi
  004b7	33 7d fc	 xor	 edi, DWORD PTR _blk$[ebp+12]
  004ba	8b 5d f8	 mov	 ebx, DWORD PTR _blk$[ebp+8]
  004bd	d1 cf		 ror	 edi, 1
  004bf	8b cf		 mov	 ecx, edi
  004c1	c1 e9 10	 shr	 ecx, 16			; 00000010H
  004c4	0f b6 c9	 movzx	 ecx, cl
  004c7	c1 e1 04	 shl	 ecx, 4
  004ca	8b 8c 01 bc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+188]
  004d1	8b d7		 mov	 edx, edi
  004d3	c1 ea 18	 shr	 edx, 24			; 00000018H
  004d6	c1 e2 04	 shl	 edx, 4
  004d9	33 8c 02 b0 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+176]
  004e0	8b d7		 mov	 edx, edi
  004e2	c1 ea 08	 shr	 edx, 8
  004e5	0f b6 d2	 movzx	 edx, dl
  004e8	c1 e2 04	 shl	 edx, 4
  004eb	33 8c 02 b8 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+184]
  004f2	89 7d fc	 mov	 DWORD PTR _blk$[ebp+12], edi
  004f5	0f b6 55 fc	 movzx	 edx, BYTE PTR _blk$[ebp+12]
  004f9	c1 e2 04	 shl	 edx, 4
  004fc	33 8c 02 b4 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+180]
  00503	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  00506	c1 ea 18	 shr	 edx, 24			; 00000018H
  00509	c1 e2 04	 shl	 edx, 4
  0050c	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  00513	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  00516	c1 ea 08	 shr	 edx, 8
  00519	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0051c	0f b6 d2	 movzx	 edx, dl
  0051f	c1 e2 04	 shl	 edx, 4
  00522	0f b6 fb	 movzx	 edi, bl
  00525	8b 5d 08	 mov	 ebx, DWORD PTR tv2132[ebp]
  00528	c1 e7 04	 shl	 edi, 4
  0052b	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  00532	8b 7d f0	 mov	 edi, DWORD PTR _blk$[ebp]
  00535	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  0053c	0f b6 55 f8	 movzx	 edx, BYTE PTR _blk$[ebp+8]
  00540	c1 e2 04	 shl	 edx, 4
  00543	33 b4 02 b0 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+176]
  0054a	8b 50 60	 mov	 edx, DWORD PTR [eax+96]
  0054d	03 d6		 add	 edx, esi
  0054f	03 d1		 add	 edx, ecx
  00551	d1 c7		 rol	 edi, 1
  00553	33 fa		 xor	 edi, edx
  00555	8b 50 64	 mov	 edx, DWORD PTR [eax+100]
  00558	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  0055b	03 d6		 add	 edx, esi
  0055d	33 d3		 xor	 edx, ebx
  0055f	d1 ca		 ror	 edx, 1

; 508  :     i_rnd(3); i_rnd(2); i_rnd(1); i_rnd(0);

  00561	8b ca		 mov	 ecx, edx
  00563	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00566	0f b6 c9	 movzx	 ecx, cl
  00569	c1 e1 04	 shl	 ecx, 4
  0056c	8b 8c 01 bc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+188]
  00573	8b f2		 mov	 esi, edx
  00575	c1 ee 18	 shr	 esi, 24			; 00000018H
  00578	c1 e6 04	 shl	 esi, 4
  0057b	33 8c 06 b0 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+176]
  00582	8b da		 mov	 ebx, edx
  00584	c1 eb 08	 shr	 ebx, 8
  00587	0f b6 f3	 movzx	 esi, bl
  0058a	c1 e6 04	 shl	 esi, 4
  0058d	33 8c 06 b8 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+184]
  00594	0f b6 f2	 movzx	 esi, dl
  00597	89 7d f0	 mov	 DWORD PTR _blk$[ebp], edi
  0059a	c1 e6 04	 shl	 esi, 4
  0059d	33 8c 06 b4 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+180]
  005a4	8b df		 mov	 ebx, edi
  005a6	8b f7		 mov	 esi, edi
  005a8	c1 eb 10	 shr	 ebx, 16			; 00000010H
  005ab	c1 ee 18	 shr	 esi, 24			; 00000018H
  005ae	c1 e6 04	 shl	 esi, 4
  005b1	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  005b8	0f b6 fb	 movzx	 edi, bl
  005bb	8b 5d f0	 mov	 ebx, DWORD PTR _blk$[ebp]
  005be	c1 e7 04	 shl	 edi, 4
  005c1	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  005c8	c1 eb 08	 shr	 ebx, 8
  005cb	0f b6 fb	 movzx	 edi, bl
  005ce	c1 e7 04	 shl	 edi, 4
  005d1	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  005d8	0f b6 7d f0	 movzx	 edi, BYTE PTR _blk$[ebp]
  005dc	8b 58 58	 mov	 ebx, DWORD PTR [eax+88]
  005df	c1 e7 04	 shl	 edi, 4
  005e2	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  005e9	8b 7d f8	 mov	 edi, DWORD PTR _blk$[ebp+8]
  005ec	03 de		 add	 ebx, esi
  005ee	03 d9		 add	 ebx, ecx
  005f0	d1 c7		 rol	 edi, 1
  005f2	33 fb		 xor	 edi, ebx
  005f4	89 7d f8	 mov	 DWORD PTR _blk$[ebp+8], edi
  005f7	8b 78 5c	 mov	 edi, DWORD PTR [eax+92]
  005fa	8d 3c 4f	 lea	 edi, DWORD PTR [edi+ecx*2]
  005fd	03 fe		 add	 edi, esi
  005ff	33 7d fc	 xor	 edi, DWORD PTR _blk$[ebp+12]
  00602	d1 cf		 ror	 edi, 1
  00604	8b cf		 mov	 ecx, edi
  00606	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00609	0f b6 c9	 movzx	 ecx, cl
  0060c	8b f7		 mov	 esi, edi
  0060e	c1 ee 18	 shr	 esi, 24			; 00000018H
  00611	c1 e6 04	 shl	 esi, 4
  00614	c1 e1 04	 shl	 ecx, 4
  00617	8b 8c 01 bc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+188]
  0061e	33 8c 06 b0 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+176]
  00625	8b df		 mov	 ebx, edi
  00627	c1 eb 08	 shr	 ebx, 8
  0062a	0f b6 f3	 movzx	 esi, bl
  0062d	8b 5d f8	 mov	 ebx, DWORD PTR _blk$[ebp+8]
  00630	c1 e6 04	 shl	 esi, 4
  00633	33 8c 06 b8 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+184]
  0063a	89 7d fc	 mov	 DWORD PTR _blk$[ebp+12], edi
  0063d	0f b6 75 fc	 movzx	 esi, BYTE PTR _blk$[ebp+12]
  00641	c1 e6 04	 shl	 esi, 4
  00644	33 8c 06 b4 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+180]
  0064b	8b 75 f8	 mov	 esi, DWORD PTR _blk$[ebp+8]
  0064e	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00651	0f b6 fb	 movzx	 edi, bl
  00654	8b 5d f8	 mov	 ebx, DWORD PTR _blk$[ebp+8]
  00657	c1 ee 18	 shr	 esi, 24			; 00000018H
  0065a	c1 e7 04	 shl	 edi, 4
  0065d	c1 e6 04	 shl	 esi, 4
  00660	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  00667	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  0066e	c1 eb 08	 shr	 ebx, 8
  00671	0f b6 fb	 movzx	 edi, bl
  00674	8b 58 50	 mov	 ebx, DWORD PTR [eax+80]
  00677	c1 e7 04	 shl	 edi, 4
  0067a	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  00681	0f b6 7d f8	 movzx	 edi, BYTE PTR _blk$[ebp+8]
  00685	c1 e7 04	 shl	 edi, 4
  00688	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  0068f	8b 7d f0	 mov	 edi, DWORD PTR _blk$[ebp]
  00692	03 de		 add	 ebx, esi
  00694	03 d9		 add	 ebx, ecx
  00696	d1 c7		 rol	 edi, 1
  00698	33 fb		 xor	 edi, ebx
  0069a	89 7d f0	 mov	 DWORD PTR _blk$[ebp], edi
  0069d	8b 78 54	 mov	 edi, DWORD PTR [eax+84]
  006a0	8d 1c 4f	 lea	 ebx, DWORD PTR [edi+ecx*2]
  006a3	03 de		 add	 ebx, esi
  006a5	33 da		 xor	 ebx, edx
  006a7	d1 cb		 ror	 ebx, 1
  006a9	8b cb		 mov	 ecx, ebx
  006ab	c1 e9 10	 shr	 ecx, 16			; 00000010H
  006ae	0f b6 c9	 movzx	 ecx, cl
  006b1	c1 e1 04	 shl	 ecx, 4
  006b4	8b 8c 01 bc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+188]
  006bb	8b d3		 mov	 edx, ebx
  006bd	c1 ea 18	 shr	 edx, 24			; 00000018H
  006c0	c1 e2 04	 shl	 edx, 4
  006c3	33 8c 02 b0 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+176]
  006ca	8b d3		 mov	 edx, ebx
  006cc	c1 ea 08	 shr	 edx, 8
  006cf	0f b6 d2	 movzx	 edx, dl
  006d2	c1 e2 04	 shl	 edx, 4
  006d5	33 8c 02 b8 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+184]
  006dc	0f b6 d3	 movzx	 edx, bl
  006df	c1 e2 04	 shl	 edx, 4
  006e2	33 8c 02 b4 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+180]
  006e9	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  006ec	c1 ea 18	 shr	 edx, 24			; 00000018H
  006ef	c1 e2 04	 shl	 edx, 4
  006f2	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  006f9	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  006fc	c1 ea 08	 shr	 edx, 8
  006ff	0f b6 d2	 movzx	 edx, dl
  00702	c1 e2 04	 shl	 edx, 4
  00705	89 5d 08	 mov	 DWORD PTR tv2131[ebp], ebx
  00708	8b 5d f0	 mov	 ebx, DWORD PTR _blk$[ebp]
  0070b	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0070e	0f b6 fb	 movzx	 edi, bl
  00711	c1 e7 04	 shl	 edi, 4
  00714	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  0071b	8b 7d f8	 mov	 edi, DWORD PTR _blk$[ebp+8]
  0071e	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  00725	0f b6 55 f0	 movzx	 edx, BYTE PTR _blk$[ebp]
  00729	c1 e2 04	 shl	 edx, 4
  0072c	33 b4 02 b0 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+176]
  00733	8b 50 48	 mov	 edx, DWORD PTR [eax+72]
  00736	03 d6		 add	 edx, esi
  00738	03 d1		 add	 edx, ecx
  0073a	d1 c7		 rol	 edi, 1
  0073c	33 fa		 xor	 edi, edx
  0073e	8b 50 4c	 mov	 edx, DWORD PTR [eax+76]
  00741	89 7d f8	 mov	 DWORD PTR _blk$[ebp+8], edi
  00744	8d 3c 4a	 lea	 edi, DWORD PTR [edx+ecx*2]
  00747	03 fe		 add	 edi, esi
  00749	33 7d fc	 xor	 edi, DWORD PTR _blk$[ebp+12]
  0074c	8b 5d f8	 mov	 ebx, DWORD PTR _blk$[ebp+8]
  0074f	d1 cf		 ror	 edi, 1
  00751	8b cf		 mov	 ecx, edi
  00753	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00756	0f b6 c9	 movzx	 ecx, cl
  00759	8b d7		 mov	 edx, edi
  0075b	c1 ea 18	 shr	 edx, 24			; 00000018H
  0075e	c1 e2 04	 shl	 edx, 4
  00761	c1 e1 04	 shl	 ecx, 4
  00764	8b 8c 01 bc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+188]
  0076b	33 8c 02 b0 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+176]
  00772	8b d7		 mov	 edx, edi
  00774	c1 ea 08	 shr	 edx, 8
  00777	0f b6 d2	 movzx	 edx, dl
  0077a	c1 e2 04	 shl	 edx, 4
  0077d	33 8c 02 b8 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+184]
  00784	89 7d fc	 mov	 DWORD PTR _blk$[ebp+12], edi
  00787	0f b6 55 fc	 movzx	 edx, BYTE PTR _blk$[ebp+12]
  0078b	c1 e2 04	 shl	 edx, 4
  0078e	33 8c 02 b4 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+180]
  00795	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  00798	c1 ea 18	 shr	 edx, 24			; 00000018H
  0079b	c1 e2 04	 shl	 edx, 4
  0079e	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  007a5	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  007a8	c1 ea 08	 shr	 edx, 8
  007ab	c1 eb 10	 shr	 ebx, 16			; 00000010H
  007ae	0f b6 fb	 movzx	 edi, bl
  007b1	0f b6 d2	 movzx	 edx, dl
  007b4	c1 e7 04	 shl	 edi, 4
  007b7	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  007be	8b 7d f0	 mov	 edi, DWORD PTR _blk$[ebp]
  007c1	c1 e2 04	 shl	 edx, 4
  007c4	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  007cb	0f b6 55 f8	 movzx	 edx, BYTE PTR _blk$[ebp+8]
  007cf	c1 e2 04	 shl	 edx, 4
  007d2	33 b4 02 b0 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+176]
  007d9	8b 50 40	 mov	 edx, DWORD PTR [eax+64]
  007dc	d1 c7		 rol	 edi, 1
  007de	03 d6		 add	 edx, esi
  007e0	8b 5d 08	 mov	 ebx, DWORD PTR tv2131[ebp]
  007e3	03 d1		 add	 edx, ecx
  007e5	33 fa		 xor	 edi, edx
  007e7	8b 50 44	 mov	 edx, DWORD PTR [eax+68]
  007ea	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  007ed	03 d6		 add	 edx, esi
  007ef	33 d3		 xor	 edx, ebx
  007f1	d1 ca		 ror	 edx, 1
  007f3	8b ca		 mov	 ecx, edx
  007f5	c1 e9 10	 shr	 ecx, 16			; 00000010H
  007f8	0f b6 c9	 movzx	 ecx, cl
  007fb	c1 e1 04	 shl	 ecx, 4
  007fe	8b 8c 01 bc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+188]
  00805	8b f2		 mov	 esi, edx
  00807	c1 ee 18	 shr	 esi, 24			; 00000018H
  0080a	c1 e6 04	 shl	 esi, 4
  0080d	33 8c 06 b0 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+176]
  00814	8b da		 mov	 ebx, edx
  00816	c1 eb 08	 shr	 ebx, 8
  00819	0f b6 f3	 movzx	 esi, bl
  0081c	c1 e6 04	 shl	 esi, 4
  0081f	33 8c 06 b8 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+184]
  00826	8b df		 mov	 ebx, edi
  00828	89 7d f0	 mov	 DWORD PTR _blk$[ebp], edi
  0082b	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0082e	0f b6 f2	 movzx	 esi, dl
  00831	c1 e6 04	 shl	 esi, 4
  00834	33 8c 06 b4 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+180]
  0083b	8b f7		 mov	 esi, edi
  0083d	c1 ee 18	 shr	 esi, 24			; 00000018H
  00840	c1 e6 04	 shl	 esi, 4
  00843	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  0084a	0f b6 fb	 movzx	 edi, bl
  0084d	8b 5d f0	 mov	 ebx, DWORD PTR _blk$[ebp]
  00850	c1 e7 04	 shl	 edi, 4
  00853	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  0085a	c1 eb 08	 shr	 ebx, 8
  0085d	0f b6 fb	 movzx	 edi, bl
  00860	8b 58 38	 mov	 ebx, DWORD PTR [eax+56]
  00863	c1 e7 04	 shl	 edi, 4
  00866	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  0086d	0f b6 7d f0	 movzx	 edi, BYTE PTR _blk$[ebp]
  00871	c1 e7 04	 shl	 edi, 4
  00874	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  0087b	8b 7d f8	 mov	 edi, DWORD PTR _blk$[ebp+8]
  0087e	03 de		 add	 ebx, esi
  00880	03 d9		 add	 ebx, ecx
  00882	d1 c7		 rol	 edi, 1
  00884	33 fb		 xor	 edi, ebx
  00886	89 7d f8	 mov	 DWORD PTR _blk$[ebp+8], edi
  00889	8b 78 3c	 mov	 edi, DWORD PTR [eax+60]
  0088c	8d 3c 4f	 lea	 edi, DWORD PTR [edi+ecx*2]
  0088f	03 fe		 add	 edi, esi
  00891	33 7d fc	 xor	 edi, DWORD PTR _blk$[ebp+12]
  00894	d1 cf		 ror	 edi, 1
  00896	8b cf		 mov	 ecx, edi
  00898	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0089b	0f b6 c9	 movzx	 ecx, cl
  0089e	c1 e1 04	 shl	 ecx, 4
  008a1	8b 8c 01 bc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+188]
  008a8	8b f7		 mov	 esi, edi
  008aa	c1 ee 18	 shr	 esi, 24			; 00000018H
  008ad	c1 e6 04	 shl	 esi, 4
  008b0	33 8c 06 b0 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+176]
  008b7	8b df		 mov	 ebx, edi
  008b9	c1 eb 08	 shr	 ebx, 8
  008bc	0f b6 f3	 movzx	 esi, bl
  008bf	8b 5d f8	 mov	 ebx, DWORD PTR _blk$[ebp+8]
  008c2	c1 e6 04	 shl	 esi, 4
  008c5	33 8c 06 b8 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+184]
  008cc	89 7d fc	 mov	 DWORD PTR _blk$[ebp+12], edi
  008cf	0f b6 75 fc	 movzx	 esi, BYTE PTR _blk$[ebp+12]
  008d3	c1 e6 04	 shl	 esi, 4
  008d6	33 8c 06 b4 00
	00 00		 xor	 ecx, DWORD PTR [esi+eax+180]
  008dd	8b 75 f8	 mov	 esi, DWORD PTR _blk$[ebp+8]
  008e0	c1 eb 10	 shr	 ebx, 16			; 00000010H
  008e3	c1 ee 18	 shr	 esi, 24			; 00000018H
  008e6	0f b6 fb	 movzx	 edi, bl
  008e9	c1 e6 04	 shl	 esi, 4
  008ec	c1 e7 04	 shl	 edi, 4
  008ef	8b b4 06 bc 00
	00 00		 mov	 esi, DWORD PTR [esi+eax+188]
  008f6	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  008fd	8b 5d f8	 mov	 ebx, DWORD PTR _blk$[ebp+8]
  00900	c1 eb 08	 shr	 ebx, 8
  00903	0f b6 fb	 movzx	 edi, bl
  00906	8b 58 30	 mov	 ebx, DWORD PTR [eax+48]
  00909	c1 e7 04	 shl	 edi, 4
  0090c	33 b4 07 b4 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+180]
  00913	0f b6 7d f8	 movzx	 edi, BYTE PTR _blk$[ebp+8]
  00917	c1 e7 04	 shl	 edi, 4
  0091a	33 b4 07 b0 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+176]
  00921	8b 7d f0	 mov	 edi, DWORD PTR _blk$[ebp]
  00924	03 de		 add	 ebx, esi
  00926	03 d9		 add	 ebx, ecx
  00928	d1 c7		 rol	 edi, 1
  0092a	33 fb		 xor	 edi, ebx
  0092c	89 7d f0	 mov	 DWORD PTR _blk$[ebp], edi
  0092f	8b 78 34	 mov	 edi, DWORD PTR [eax+52]
  00932	8d 1c 4f	 lea	 ebx, DWORD PTR [edi+ecx*2]
  00935	03 de		 add	 ebx, esi
  00937	33 da		 xor	 ebx, edx
  00939	d1 cb		 ror	 ebx, 1
  0093b	8b cb		 mov	 ecx, ebx
  0093d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00940	0f b6 c9	 movzx	 ecx, cl
  00943	c1 e1 04	 shl	 ecx, 4
  00946	8b 8c 01 bc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+188]
  0094d	8b d3		 mov	 edx, ebx
  0094f	c1 ea 18	 shr	 edx, 24			; 00000018H
  00952	c1 e2 04	 shl	 edx, 4
  00955	33 8c 02 b0 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+176]
  0095c	8b d3		 mov	 edx, ebx
  0095e	c1 ea 08	 shr	 edx, 8
  00961	0f b6 d2	 movzx	 edx, dl
  00964	c1 e2 04	 shl	 edx, 4
  00967	33 8c 02 b8 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+184]
  0096e	0f b6 d3	 movzx	 edx, bl
  00971	c1 e2 04	 shl	 edx, 4
  00974	33 8c 02 b4 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+180]
  0097b	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  0097e	c1 ea 18	 shr	 edx, 24			; 00000018H
  00981	c1 e2 04	 shl	 edx, 4
  00984	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  0098b	8b 55 f0	 mov	 edx, DWORD PTR _blk$[ebp]
  0098e	c1 ea 08	 shr	 edx, 8
  00991	0f b6 d2	 movzx	 edx, dl
  00994	89 5d 08	 mov	 DWORD PTR tv2130[ebp], ebx
  00997	8b 5d f0	 mov	 ebx, DWORD PTR _blk$[ebp]
  0099a	c1 e2 04	 shl	 edx, 4
  0099d	c1 eb 10	 shr	 ebx, 16			; 00000010H
  009a0	0f b6 fb	 movzx	 edi, bl
  009a3	c1 e7 04	 shl	 edi, 4
  009a6	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  009ad	8b 7d f8	 mov	 edi, DWORD PTR _blk$[ebp+8]
  009b0	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  009b7	0f b6 55 f0	 movzx	 edx, BYTE PTR _blk$[ebp]
  009bb	c1 e2 04	 shl	 edx, 4
  009be	33 b4 02 b0 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+176]
  009c5	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  009c8	03 d6		 add	 edx, esi
  009ca	03 d1		 add	 edx, ecx
  009cc	d1 c7		 rol	 edi, 1
  009ce	33 fa		 xor	 edi, edx
  009d0	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  009d3	89 7d f8	 mov	 DWORD PTR _blk$[ebp+8], edi
  009d6	8d 3c 4a	 lea	 edi, DWORD PTR [edx+ecx*2]
  009d9	03 fe		 add	 edi, esi
  009db	33 7d fc	 xor	 edi, DWORD PTR _blk$[ebp+12]
  009de	d1 cf		 ror	 edi, 1
  009e0	8b cf		 mov	 ecx, edi
  009e2	c1 e9 10	 shr	 ecx, 16			; 00000010H
  009e5	0f b6 c9	 movzx	 ecx, cl
  009e8	c1 e1 04	 shl	 ecx, 4
  009eb	8b 8c 01 bc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+188]
  009f2	8b d7		 mov	 edx, edi
  009f4	c1 ea 18	 shr	 edx, 24			; 00000018H
  009f7	c1 e2 04	 shl	 edx, 4
  009fa	33 8c 02 b0 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+176]
  00a01	8b d7		 mov	 edx, edi
  00a03	89 7d fc	 mov	 DWORD PTR _blk$[ebp+12], edi
  00a06	c1 ea 08	 shr	 edx, 8
  00a09	0f b6 d2	 movzx	 edx, dl
  00a0c	c1 e2 04	 shl	 edx, 4
  00a0f	33 8c 02 b8 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+184]
  00a16	0f b6 55 fc	 movzx	 edx, BYTE PTR _blk$[ebp+12]
  00a1a	8b 5d f8	 mov	 ebx, DWORD PTR _blk$[ebp+8]
  00a1d	c1 e2 04	 shl	 edx, 4
  00a20	33 8c 02 b4 00
	00 00		 xor	 ecx, DWORD PTR [edx+eax+180]
  00a27	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  00a2a	c1 ea 18	 shr	 edx, 24			; 00000018H
  00a2d	c1 e2 04	 shl	 edx, 4
  00a30	8b b4 02 bc 00
	00 00		 mov	 esi, DWORD PTR [edx+eax+188]
  00a37	8b 55 f8	 mov	 edx, DWORD PTR _blk$[ebp+8]
  00a3a	c1 ea 08	 shr	 edx, 8
  00a3d	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00a40	0f b6 d2	 movzx	 edx, dl
  00a43	c1 e2 04	 shl	 edx, 4
  00a46	0f b6 fb	 movzx	 edi, bl
  00a49	c1 e7 04	 shl	 edi, 4
  00a4c	33 b4 07 b8 00
	00 00		 xor	 esi, DWORD PTR [edi+eax+184]
  00a53	8b 7d f0	 mov	 edi, DWORD PTR _blk$[ebp]
  00a56	33 b4 02 b4 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+180]
  00a5d	0f b6 55 f8	 movzx	 edx, BYTE PTR _blk$[ebp+8]
  00a61	c1 e2 04	 shl	 edx, 4
  00a64	33 b4 02 b0 00
	00 00		 xor	 esi, DWORD PTR [edx+eax+176]
  00a6b	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  00a6e	03 d6		 add	 edx, esi
  00a70	8b 5d 08	 mov	 ebx, DWORD PTR tv2130[ebp]
  00a73	03 d1		 add	 edx, ecx
  00a75	d1 c7		 rol	 edi, 1
  00a77	33 fa		 xor	 edi, edx
  00a79	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00a7c	8d 0c 4a	 lea	 ecx, DWORD PTR [edx+ecx*2]

; 509  : 
; 510  :     out_blk[0] = LE32(blk[2] ^ l_key[0]);

  00a7f	8b 55 10	 mov	 edx, DWORD PTR _out_blk$[ebp]
  00a82	03 ce		 add	 ecx, esi
  00a84	8b 30		 mov	 esi, DWORD PTR [eax]
  00a86	33 75 f8	 xor	 esi, DWORD PTR _blk$[ebp+8]
  00a89	33 cb		 xor	 ecx, ebx
  00a8b	89 32		 mov	 DWORD PTR [edx], esi

; 511  :     out_blk[1] = LE32(blk[3] ^ l_key[1]);

  00a8d	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00a90	33 75 fc	 xor	 esi, DWORD PTR _blk$[ebp+12]
  00a93	d1 c9		 ror	 ecx, 1
  00a95	89 72 04	 mov	 DWORD PTR [edx+4], esi

; 512  :     out_blk[2] = LE32(blk[0] ^ l_key[2]);

  00a98	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00a9b	33 f7		 xor	 esi, edi
  00a9d	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 513  :     out_blk[3] = LE32(blk[1] ^ l_key[3]); 

  00aa0	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00aa3	5f		 pop	 edi
  00aa4	33 c1		 xor	 eax, ecx
  00aa6	5e		 pop	 esi
  00aa7	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00aaa	5b		 pop	 ebx

; 514  : };

  00aab	c9		 leave
  00aac	c2 0c 00	 ret	 12			; 0000000cH
_twofish_decrypt@12 ENDP
_TEXT	ENDS
END
