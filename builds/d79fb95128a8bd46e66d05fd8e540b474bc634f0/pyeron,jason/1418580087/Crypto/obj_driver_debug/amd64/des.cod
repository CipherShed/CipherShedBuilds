; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

pc1	DB	039H
	DB	031H
	DB	029H
	DB	021H
	DB	019H
	DB	011H
	DB	09H
	DB	01H
	DB	03aH
	DB	032H
	DB	02aH
	DB	022H
	DB	01aH
	DB	012H
	DB	0aH
	DB	02H
	DB	03bH
	DB	033H
	DB	02bH
	DB	023H
	DB	01bH
	DB	013H
	DB	0bH
	DB	03H
	DB	03cH
	DB	034H
	DB	02cH
	DB	024H
	DB	03fH
	DB	037H
	DB	02fH
	DB	027H
	DB	01fH
	DB	017H
	DB	0fH
	DB	07H
	DB	03eH
	DB	036H
	DB	02eH
	DB	026H
	DB	01eH
	DB	016H
	DB	0eH
	DB	06H
	DB	03dH
	DB	035H
	DB	02dH
	DB	025H
	DB	01dH
	DB	015H
	DB	0dH
	DB	05H
	DB	01cH
	DB	014H
	DB	0cH
	DB	04H
totrot	DB	01H
	DB	02H
	DB	04H
	DB	06H
	DB	08H
	DB	0aH
	DB	0cH
	DB	0eH
	DB	0fH
	DB	011H
	DB	013H
	DB	015H
	DB	017H
	DB	019H
	DB	01bH
	DB	01cH
pc2	DB	0eH
	DB	011H
	DB	0bH
	DB	018H
	DB	01H
	DB	05H
	DB	03H
	DB	01cH
	DB	0fH
	DB	06H
	DB	015H
	DB	0aH
	DB	017H
	DB	013H
	DB	0cH
	DB	04H
	DB	01aH
	DB	08H
	DB	010H
	DB	07H
	DB	01bH
	DB	014H
	DB	0dH
	DB	02H
	DB	029H
	DB	034H
	DB	01fH
	DB	025H
	DB	02fH
	DB	037H
	DB	01eH
	DB	028H
	DB	033H
	DB	02dH
	DB	021H
	DB	030H
	DB	02cH
	DB	031H
	DB	027H
	DB	038H
	DB	022H
	DB	035H
	DB	02eH
	DB	02aH
	DB	032H
	DB	024H
	DB	01dH
	DB	020H
bytebit	DD	080H
	DD	040H
	DD	020H
	DD	010H
	DD	08H
	DD	04H
	DD	02H
	DD	01H
Spbox	DD	01010400H
	DD	00H
	DD	010000H
	DD	01010404H
	DD	01010004H
	DD	010404H
	DD	04H
	DD	010000H
	DD	0400H
	DD	01010400H
	DD	01010404H
	DD	0400H
	DD	01000404H
	DD	01010004H
	DD	01000000H
	DD	04H
	DD	0404H
	DD	01000400H
	DD	01000400H
	DD	010400H
	DD	010400H
	DD	01010000H
	DD	01010000H
	DD	01000404H
	DD	010004H
	DD	01000004H
	DD	01000004H
	DD	010004H
	DD	00H
	DD	0404H
	DD	010404H
	DD	01000000H
	DD	010000H
	DD	01010404H
	DD	04H
	DD	01010000H
	DD	01010400H
	DD	01000000H
	DD	01000000H
	DD	0400H
	DD	01010004H
	DD	010000H
	DD	010400H
	DD	01000004H
	DD	0400H
	DD	04H
	DD	01000404H
	DD	010404H
	DD	01010404H
	DD	010004H
	DD	01010000H
	DD	01000404H
	DD	01000004H
	DD	0404H
	DD	010404H
	DD	01010400H
	DD	0404H
	DD	01000400H
	DD	01000400H
	DD	00H
	DD	010004H
	DD	010400H
	DD	00H
	DD	01010004H
	DD	080108020H
	DD	080008000H
	DD	08000H
	DD	0108020H
	DD	0100000H
	DD	020H
	DD	080100020H
	DD	080008020H
	DD	080000020H
	DD	080108020H
	DD	080108000H
	DD	080000000H
	DD	080008000H
	DD	0100000H
	DD	020H
	DD	080100020H
	DD	0108000H
	DD	0100020H
	DD	080008020H
	DD	00H
	DD	080000000H
	DD	08000H
	DD	0108020H
	DD	080100000H
	DD	0100020H
	DD	080000020H
	DD	00H
	DD	0108000H
	DD	08020H
	DD	080108000H
	DD	080100000H
	DD	08020H
	DD	00H
	DD	0108020H
	DD	080100020H
	DD	0100000H
	DD	080008020H
	DD	080100000H
	DD	080108000H
	DD	08000H
	DD	080100000H
	DD	080008000H
	DD	020H
	DD	080108020H
	DD	0108020H
	DD	020H
	DD	08000H
	DD	080000000H
	DD	08020H
	DD	080108000H
	DD	0100000H
	DD	080000020H
	DD	0100020H
	DD	080008020H
	DD	080000020H
	DD	0100020H
	DD	0108000H
	DD	00H
	DD	080008000H
	DD	08020H
	DD	080000000H
	DD	080100020H
	DD	080108020H
	DD	0108000H
	DD	0208H
	DD	08020200H
	DD	00H
	DD	08020008H
	DD	08000200H
	DD	00H
	DD	020208H
	DD	08000200H
	DD	020008H
	DD	08000008H
	DD	08000008H
	DD	020000H
	DD	08020208H
	DD	020008H
	DD	08020000H
	DD	0208H
	DD	08000000H
	DD	08H
	DD	08020200H
	DD	0200H
	DD	020200H
	DD	08020000H
	DD	08020008H
	DD	020208H
	DD	08000208H
	DD	020200H
	DD	020000H
	DD	08000208H
	DD	08H
	DD	08020208H
	DD	0200H
	DD	08000000H
	DD	08020200H
	DD	08000000H
	DD	020008H
	DD	0208H
	DD	020000H
	DD	08020200H
	DD	08000200H
	DD	00H
	DD	0200H
	DD	020008H
	DD	08020208H
	DD	08000200H
	DD	08000008H
	DD	0200H
	DD	00H
	DD	08020008H
	DD	08000208H
	DD	020000H
	DD	08000000H
	DD	08020208H
	DD	08H
	DD	020208H
	DD	020200H
	DD	08000008H
	DD	08020000H
	DD	08000208H
	DD	0208H
	DD	08020000H
	DD	020208H
	DD	08H
	DD	08020008H
	DD	020200H
	DD	0802001H
	DD	02081H
	DD	02081H
	DD	080H
	DD	0802080H
	DD	0800081H
	DD	0800001H
	DD	02001H
	DD	00H
	DD	0802000H
	DD	0802000H
	DD	0802081H
	DD	081H
	DD	00H
	DD	0800080H
	DD	0800001H
	DD	01H
	DD	02000H
	DD	0800000H
	DD	0802001H
	DD	080H
	DD	0800000H
	DD	02001H
	DD	02080H
	DD	0800081H
	DD	01H
	DD	02080H
	DD	0800080H
	DD	02000H
	DD	0802080H
	DD	0802081H
	DD	081H
	DD	0800080H
	DD	0800001H
	DD	0802000H
	DD	0802081H
	DD	081H
	DD	00H
	DD	00H
	DD	0802000H
	DD	02080H
	DD	0800080H
	DD	0800081H
	DD	01H
	DD	0802001H
	DD	02081H
	DD	02081H
	DD	080H
	DD	0802081H
	DD	081H
	DD	01H
	DD	02000H
	DD	0800001H
	DD	02001H
	DD	0802080H
	DD	0800081H
	DD	02001H
	DD	02080H
	DD	0800000H
	DD	0802001H
	DD	080H
	DD	0800000H
	DD	02000H
	DD	0802080H
	DD	0100H
	DD	02080100H
	DD	02080000H
	DD	042000100H
	DD	080000H
	DD	0100H
	DD	040000000H
	DD	02080000H
	DD	040080100H
	DD	080000H
	DD	02000100H
	DD	040080100H
	DD	042000100H
	DD	042080000H
	DD	080100H
	DD	040000000H
	DD	02000000H
	DD	040080000H
	DD	040080000H
	DD	00H
	DD	040000100H
	DD	042080100H
	DD	042080100H
	DD	02000100H
	DD	042080000H
	DD	040000100H
	DD	00H
	DD	042000000H
	DD	02080100H
	DD	02000000H
	DD	042000000H
	DD	080100H
	DD	080000H
	DD	042000100H
	DD	0100H
	DD	02000000H
	DD	040000000H
	DD	02080000H
	DD	042000100H
	DD	040080100H
	DD	02000100H
	DD	040000000H
	DD	042080000H
	DD	02080100H
	DD	040080100H
	DD	0100H
	DD	02000000H
	DD	042080000H
	DD	042080100H
	DD	080100H
	DD	042000000H
	DD	042080100H
	DD	02080000H
	DD	00H
	DD	040080000H
	DD	042000000H
	DD	080100H
	DD	02000100H
	DD	040000100H
	DD	080000H
	DD	00H
	DD	040080000H
	DD	02080100H
	DD	040000100H
	DD	020000010H
	DD	020400000H
	DD	04000H
	DD	020404010H
	DD	020400000H
	DD	010H
	DD	020404010H
	DD	0400000H
	DD	020004000H
	DD	0404010H
	DD	0400000H
	DD	020000010H
	DD	0400010H
	DD	020004000H
	DD	020000000H
	DD	04010H
	DD	00H
	DD	0400010H
	DD	020004010H
	DD	04000H
	DD	0404000H
	DD	020004010H
	DD	010H
	DD	020400010H
	DD	020400010H
	DD	00H
	DD	0404010H
	DD	020404000H
	DD	04010H
	DD	0404000H
	DD	020404000H
	DD	020000000H
	DD	020004000H
	DD	010H
	DD	020400010H
	DD	0404000H
	DD	020404010H
	DD	0400000H
	DD	04010H
	DD	020000010H
	DD	0400000H
	DD	020004000H
	DD	020000000H
	DD	04010H
	DD	020000010H
	DD	020404010H
	DD	0404000H
	DD	020400000H
	DD	0404010H
	DD	020404000H
	DD	00H
	DD	020400010H
	DD	010H
	DD	04000H
	DD	020400000H
	DD	0404010H
	DD	04000H
	DD	0400010H
	DD	020004010H
	DD	00H
	DD	020404000H
	DD	020000000H
	DD	0400010H
	DD	020004010H
	DD	0200000H
	DD	04200002H
	DD	04000802H
	DD	00H
	DD	0800H
	DD	04000802H
	DD	0200802H
	DD	04200800H
	DD	04200802H
	DD	0200000H
	DD	00H
	DD	04000002H
	DD	02H
	DD	04000000H
	DD	04200002H
	DD	0802H
	DD	04000800H
	DD	0200802H
	DD	0200002H
	DD	04000800H
	DD	04000002H
	DD	04200000H
	DD	04200800H
	DD	0200002H
	DD	04200000H
	DD	0800H
	DD	0802H
	DD	04200802H
	DD	0200800H
	DD	02H
	DD	04000000H
	DD	0200800H
	DD	04000000H
	DD	0200800H
	DD	0200000H
	DD	04000802H
	DD	04000802H
	DD	04200002H
	DD	04200002H
	DD	02H
	DD	0200002H
	DD	04000000H
	DD	04000800H
	DD	0200000H
	DD	04200800H
	DD	0802H
	DD	0200802H
	DD	04200800H
	DD	0802H
	DD	04000002H
	DD	04200802H
	DD	04200000H
	DD	0200800H
	DD	00H
	DD	02H
	DD	04200802H
	DD	00H
	DD	0200802H
	DD	04200000H
	DD	0800H
	DD	04000002H
	DD	04000800H
	DD	0800H
	DD	0200002H
	DD	010001040H
	DD	01000H
	DD	040000H
	DD	010041040H
	DD	010000000H
	DD	010001040H
	DD	040H
	DD	010000000H
	DD	040040H
	DD	010040000H
	DD	010041040H
	DD	041000H
	DD	010041000H
	DD	041040H
	DD	01000H
	DD	040H
	DD	010040000H
	DD	010000040H
	DD	010001000H
	DD	01040H
	DD	041000H
	DD	040040H
	DD	010040040H
	DD	010041000H
	DD	01040H
	DD	00H
	DD	00H
	DD	010040040H
	DD	010000040H
	DD	010001000H
	DD	041040H
	DD	040000H
	DD	041040H
	DD	040000H
	DD	010041000H
	DD	01000H
	DD	040H
	DD	010040040H
	DD	01000H
	DD	041040H
	DD	010001000H
	DD	040H
	DD	010000040H
	DD	010040000H
	DD	010040040H
	DD	010000000H
	DD	040000H
	DD	010001040H
	DD	00H
	DD	010041040H
	DD	040040H
	DD	010000040H
	DD	010040000H
	DD	010001000H
	DD	010001040H
	DD	00H
	DD	010041040H
	DD	041000H
	DD	041000H
	DD	01040H
	DD	01040H
	DD	040040H
	DD	010000000H
	DD	010041000H
; Function compile flags: /Odtp
; File c:\home\public\desktop\projects\ciphershed.build\src\crypto\des.c
;	COMDAT rotrFixed
_TEXT	SEGMENT
x$ = 8
y$ = 16
rotrFixed PROC						; COMDAT

; 36   : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 37   : 	return (word32)((x>>y) | (x<<(sizeof(word32)*8-y)));

  00008	8b 44 24 10	 mov	 eax, DWORD PTR y$[rsp]
  0000c	0f b6 c8	 movzx	 ecx, al
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR x$[rsp]
  00013	d3 ea		 shr	 edx, cl
  00015	8b 4c 24 10	 mov	 ecx, DWORD PTR y$[rsp]
  00019	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0001e	48 2b c1	 sub	 rax, rcx
  00021	0f b6 c8	 movzx	 ecx, al
  00024	8b 44 24 08	 mov	 eax, DWORD PTR x$[rsp]
  00028	d3 e0		 shl	 eax, cl
  0002a	8b c8		 mov	 ecx, eax
  0002c	8b c2		 mov	 eax, edx
  0002e	0b c1		 or	 eax, ecx

; 38   : }

  00030	c3		 ret	 0
rotrFixed ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT rotlFixed
_TEXT	SEGMENT
x$ = 8
y$ = 16
rotlFixed PROC						; COMDAT

; 31   : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 32   : 	return (word32)((x<<y) | (x>>(sizeof(word32)*8-y)));

  00008	8b 44 24 10	 mov	 eax, DWORD PTR y$[rsp]
  0000c	0f b6 c8	 movzx	 ecx, al
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR x$[rsp]
  00013	d3 e2		 shl	 edx, cl
  00015	8b 4c 24 10	 mov	 ecx, DWORD PTR y$[rsp]
  00019	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0001e	48 2b c1	 sub	 rax, rcx
  00021	0f b6 c8	 movzx	 ecx, al
  00024	8b 44 24 08	 mov	 eax, DWORD PTR x$[rsp]
  00028	d3 e8		 shr	 eax, cl
  0002a	8b c8		 mov	 ecx, eax
  0002c	8b c2		 mov	 eax, edx
  0002e	0b c1		 or	 eax, ecx

; 33   : }

  00030	c3		 ret	 0
rotlFixed ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$RawProcessBlock DD imagerel RawProcessBlock
	DD	imagerel RawProcessBlock+711
	DD	imagerel $unwind$RawProcessBlock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RawProcessBlock DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT RawProcessBlock
_TEXT	SEGMENT
i$ = 32
kptr$ = 40
l$ = 48
r$ = 52
work$26521 = 56
l_$ = 80
r_$ = 88
k$ = 96
RawProcessBlock PROC					; COMDAT

; 317  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 318  : 	word32 l = *l_, r = *r_;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR l_$[rsp]
  00018	8b 00		 mov	 eax, DWORD PTR [rax]
  0001a	89 44 24 30	 mov	 DWORD PTR l$[rsp], eax
  0001e	48 8b 44 24 58	 mov	 rax, QWORD PTR r_$[rsp]
  00023	8b 00		 mov	 eax, DWORD PTR [rax]
  00025	89 44 24 34	 mov	 DWORD PTR r$[rsp], eax

; 319  : 	const word32 *kptr=k;

  00029	48 8b 44 24 60	 mov	 rax, QWORD PTR k$[rsp]
  0002e	48 89 44 24 28	 mov	 QWORD PTR kptr$[rsp], rax

; 320  : 	unsigned i;
; 321  : 
; 322  : 	for (i=0; i<8; i++)

  00033	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0003b	eb 0b		 jmp	 SHORT $LN3@RawProcess
$LN2@RawProcess:
  0003d	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00041	83 c0 01	 add	 eax, 1
  00044	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN3@RawProcess:
  00048	83 7c 24 20 08	 cmp	 DWORD PTR i$[rsp], 8
  0004d	0f 83 59 02 00
	00		 jae	 $LN1@RawProcess

; 323  : 	{
; 324  : 		word32 work = rotrFixed(r, 4U) ^ kptr[4*i+0];

  00053	ba 04 00 00 00	 mov	 edx, 4
  00058	8b 4c 24 34	 mov	 ecx, DWORD PTR r$[rsp]
  0005c	e8 00 00 00 00	 call	 rotrFixed
  00061	44 8b d8	 mov	 r11d, eax
  00064	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00068	c1 e0 02	 shl	 eax, 2
  0006b	8b d0		 mov	 edx, eax
  0006d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR kptr$[rsp]
  00072	41 8b c3	 mov	 eax, r11d
  00075	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00078	89 44 24 38	 mov	 DWORD PTR work$26521[rsp], eax

; 325  : 		l ^= Spbox[6][(work) & 0x3f]
; 326  : 		  ^  Spbox[4][(work >> 8) & 0x3f]
; 327  : 		  ^  Spbox[2][(work >> 16) & 0x3f]
; 328  : 		  ^  Spbox[0][(work >> 24) & 0x3f];

  0007c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Spbox
  00083	8b 44 24 38	 mov	 eax, DWORD PTR work$26521[rsp]
  00087	83 e0 3f	 and	 eax, 63			; 0000003fH
  0008a	8b d0		 mov	 edx, eax
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Spbox
  00093	8b 44 24 38	 mov	 eax, DWORD PTR work$26521[rsp]
  00097	c1 e8 08	 shr	 eax, 8
  0009a	83 e0 3f	 and	 eax, 63			; 0000003fH
  0009d	8b c0		 mov	 eax, eax
  0009f	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  000a6	41 8b 8c 90 00
	06 00 00	 mov	 ecx, DWORD PTR [r8+rdx*4+1536]
  000ae	33 c8		 xor	 ecx, eax
  000b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Spbox
  000b7	8b 44 24 38	 mov	 eax, DWORD PTR work$26521[rsp]
  000bb	c1 e8 10	 shr	 eax, 16
  000be	83 e0 3f	 and	 eax, 63			; 0000003fH
  000c1	8b c0		 mov	 eax, eax
  000c3	33 8c 82 00 02
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+512]
  000ca	8b 44 24 38	 mov	 eax, DWORD PTR work$26521[rsp]
  000ce	c1 e8 18	 shr	 eax, 24
  000d1	83 e0 3f	 and	 eax, 63			; 0000003fH
  000d4	8b d0		 mov	 edx, eax
  000d6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Spbox
  000dd	33 0c 90	 xor	 ecx, DWORD PTR [rax+rdx*4]
  000e0	8b 44 24 30	 mov	 eax, DWORD PTR l$[rsp]
  000e4	33 c1		 xor	 eax, ecx
  000e6	89 44 24 30	 mov	 DWORD PTR l$[rsp], eax

; 329  : 		work = r ^ kptr[4*i+1];

  000ea	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000ee	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  000f5	8b c8		 mov	 ecx, eax
  000f7	48 8b 44 24 28	 mov	 rax, QWORD PTR kptr$[rsp]
  000fc	8b 0c 88	 mov	 ecx, DWORD PTR [rax+rcx*4]
  000ff	8b 44 24 34	 mov	 eax, DWORD PTR r$[rsp]
  00103	33 c1		 xor	 eax, ecx
  00105	89 44 24 38	 mov	 DWORD PTR work$26521[rsp], eax

; 330  : 		l ^= Spbox[7][(work) & 0x3f]
; 331  : 		  ^  Spbox[5][(work >> 8) & 0x3f]
; 332  : 		  ^  Spbox[3][(work >> 16) & 0x3f]
; 333  : 		  ^  Spbox[1][(work >> 24) & 0x3f];

  00109	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Spbox
  00110	8b 44 24 38	 mov	 eax, DWORD PTR work$26521[rsp]
  00114	83 e0 3f	 and	 eax, 63			; 0000003fH
  00117	8b d0		 mov	 edx, eax
  00119	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Spbox
  00120	8b 44 24 38	 mov	 eax, DWORD PTR work$26521[rsp]
  00124	c1 e8 08	 shr	 eax, 8
  00127	83 e0 3f	 and	 eax, 63			; 0000003fH
  0012a	8b c0		 mov	 eax, eax
  0012c	8b 84 81 00 05
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1280]
  00133	41 8b 8c 90 00
	07 00 00	 mov	 ecx, DWORD PTR [r8+rdx*4+1792]
  0013b	33 c8		 xor	 ecx, eax
  0013d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Spbox
  00144	8b 44 24 38	 mov	 eax, DWORD PTR work$26521[rsp]
  00148	c1 e8 10	 shr	 eax, 16
  0014b	83 e0 3f	 and	 eax, 63			; 0000003fH
  0014e	8b c0		 mov	 eax, eax
  00150	33 8c 82 00 03
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+768]
  00157	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Spbox
  0015e	8b 44 24 38	 mov	 eax, DWORD PTR work$26521[rsp]
  00162	c1 e8 18	 shr	 eax, 24
  00165	83 e0 3f	 and	 eax, 63			; 0000003fH
  00168	8b c0		 mov	 eax, eax
  0016a	33 8c 82 00 01
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+256]
  00171	8b 44 24 30	 mov	 eax, DWORD PTR l$[rsp]
  00175	33 c1		 xor	 eax, ecx
  00177	89 44 24 30	 mov	 DWORD PTR l$[rsp], eax

; 334  : 
; 335  : 		work = rotrFixed(l, 4U) ^ kptr[4*i+2];

  0017b	ba 04 00 00 00	 mov	 edx, 4
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR l$[rsp]
  00184	e8 00 00 00 00	 call	 rotrFixed
  00189	44 8b d8	 mov	 r11d, eax
  0018c	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00190	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00197	8b d0		 mov	 edx, eax
  00199	48 8b 4c 24 28	 mov	 rcx, QWORD PTR kptr$[rsp]
  0019e	41 8b c3	 mov	 eax, r11d
  001a1	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  001a4	89 44 24 38	 mov	 DWORD PTR work$26521[rsp], eax

; 336  : 		r ^= Spbox[6][(work) & 0x3f]
; 337  : 		  ^  Spbox[4][(work >> 8) & 0x3f]
; 338  : 		  ^  Spbox[2][(work >> 16) & 0x3f]
; 339  : 		  ^  Spbox[0][(work >> 24) & 0x3f];

  001a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Spbox
  001af	8b 44 24 38	 mov	 eax, DWORD PTR work$26521[rsp]
  001b3	83 e0 3f	 and	 eax, 63			; 0000003fH
  001b6	8b d0		 mov	 edx, eax
  001b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Spbox
  001bf	8b 44 24 38	 mov	 eax, DWORD PTR work$26521[rsp]
  001c3	c1 e8 08	 shr	 eax, 8
  001c6	83 e0 3f	 and	 eax, 63			; 0000003fH
  001c9	8b c0		 mov	 eax, eax
  001cb	8b 84 81 00 04
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1024]
  001d2	41 8b 8c 90 00
	06 00 00	 mov	 ecx, DWORD PTR [r8+rdx*4+1536]
  001da	33 c8		 xor	 ecx, eax
  001dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Spbox
  001e3	8b 44 24 38	 mov	 eax, DWORD PTR work$26521[rsp]
  001e7	c1 e8 10	 shr	 eax, 16
  001ea	83 e0 3f	 and	 eax, 63			; 0000003fH
  001ed	8b c0		 mov	 eax, eax
  001ef	33 8c 82 00 02
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+512]
  001f6	8b 44 24 38	 mov	 eax, DWORD PTR work$26521[rsp]
  001fa	c1 e8 18	 shr	 eax, 24
  001fd	83 e0 3f	 and	 eax, 63			; 0000003fH
  00200	8b d0		 mov	 edx, eax
  00202	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Spbox
  00209	33 0c 90	 xor	 ecx, DWORD PTR [rax+rdx*4]
  0020c	8b 44 24 34	 mov	 eax, DWORD PTR r$[rsp]
  00210	33 c1		 xor	 eax, ecx
  00212	89 44 24 34	 mov	 DWORD PTR r$[rsp], eax

; 340  : 		work = l ^ kptr[4*i+3];

  00216	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0021a	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00221	8b c8		 mov	 ecx, eax
  00223	48 8b 44 24 28	 mov	 rax, QWORD PTR kptr$[rsp]
  00228	8b 0c 88	 mov	 ecx, DWORD PTR [rax+rcx*4]
  0022b	8b 44 24 30	 mov	 eax, DWORD PTR l$[rsp]
  0022f	33 c1		 xor	 eax, ecx
  00231	89 44 24 38	 mov	 DWORD PTR work$26521[rsp], eax

; 341  : 		r ^= Spbox[7][(work) & 0x3f]
; 342  : 		  ^  Spbox[5][(work >> 8) & 0x3f]
; 343  : 		  ^  Spbox[3][(work >> 16) & 0x3f]
; 344  : 		  ^  Spbox[1][(work >> 24) & 0x3f];

  00235	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Spbox
  0023c	8b 44 24 38	 mov	 eax, DWORD PTR work$26521[rsp]
  00240	83 e0 3f	 and	 eax, 63			; 0000003fH
  00243	8b d0		 mov	 edx, eax
  00245	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Spbox
  0024c	8b 44 24 38	 mov	 eax, DWORD PTR work$26521[rsp]
  00250	c1 e8 08	 shr	 eax, 8
  00253	83 e0 3f	 and	 eax, 63			; 0000003fH
  00256	8b c0		 mov	 eax, eax
  00258	8b 84 81 00 05
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+1280]
  0025f	41 8b 8c 90 00
	07 00 00	 mov	 ecx, DWORD PTR [r8+rdx*4+1792]
  00267	33 c8		 xor	 ecx, eax
  00269	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Spbox
  00270	8b 44 24 38	 mov	 eax, DWORD PTR work$26521[rsp]
  00274	c1 e8 10	 shr	 eax, 16
  00277	83 e0 3f	 and	 eax, 63			; 0000003fH
  0027a	8b c0		 mov	 eax, eax
  0027c	33 8c 82 00 03
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+768]
  00283	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Spbox
  0028a	8b 44 24 38	 mov	 eax, DWORD PTR work$26521[rsp]
  0028e	c1 e8 18	 shr	 eax, 24
  00291	83 e0 3f	 and	 eax, 63			; 0000003fH
  00294	8b c0		 mov	 eax, eax
  00296	33 8c 82 00 01
	00 00		 xor	 ecx, DWORD PTR [rdx+rax*4+256]
  0029d	8b 44 24 34	 mov	 eax, DWORD PTR r$[rsp]
  002a1	33 c1		 xor	 eax, ecx
  002a3	89 44 24 34	 mov	 DWORD PTR r$[rsp], eax

; 345  : 	}

  002a7	e9 91 fd ff ff	 jmp	 $LN2@RawProcess
$LN1@RawProcess:

; 346  : 
; 347  : 	*l_ = l; *r_ = r;

  002ac	48 8b 4c 24 50	 mov	 rcx, QWORD PTR l_$[rsp]
  002b1	8b 44 24 30	 mov	 eax, DWORD PTR l$[rsp]
  002b5	89 01		 mov	 DWORD PTR [rcx], eax
  002b7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR r_$[rsp]
  002bc	8b 44 24 34	 mov	 eax, DWORD PTR r$[rsp]
  002c0	89 01		 mov	 DWORD PTR [rcx], eax

; 348  : }

  002c2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  002c6	c3		 ret	 0
RawProcessBlock ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
;	COMDAT pdata
pdata	SEGMENT
$pdata$RawSetKey DD imagerel RawSetKey
	DD	imagerel RawSetKey+1194
	DD	imagerel $unwind$RawSetKey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RawSetKey DD 032819H
	DD	0200116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0f8H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT RawSetKey
_TEXT	SEGMENT
pc1m$ = 32
i$ = 40
pcr$ = 48
l$ = 56
ks$ = 64
buffer$ = 80
m$ = 208
j$ = 212
b$26496 = 216
burnc$26502 = 220
burnm$26500 = 224
tv84 = 232
tv133 = 236
tv136 = 240
__$ArrayPad$ = 248
encryption$ = 272
key$ = 280
scheduledKey$ = 288
RawSetKey PROC						; COMDAT

; 262  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 81 ec 00 01
	00 00		 sub	 rsp, 256		; 00000100H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 263  : 	byte buffer[56+56+8];
; 264  : 	byte *const pc1m=buffer;                 /* place to modify pc1 into */

  00028	48 8d 44 24 50	 lea	 rax, QWORD PTR buffer$[rsp]
  0002d	48 89 44 24 20	 mov	 QWORD PTR pc1m$[rsp], rax

; 265  : 	byte *const pcr=pc1m+56;                 /* place to rotate pc1 into */

  00032	48 8b 44 24 20	 mov	 rax, QWORD PTR pc1m$[rsp]
  00037	48 83 c0 38	 add	 rax, 56			; 00000038H
  0003b	48 89 44 24 30	 mov	 QWORD PTR pcr$[rsp], rax

; 266  : 	byte *const ks=pcr+56;

  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR pcr$[rsp]
  00045	48 83 c0 38	 add	 rax, 56			; 00000038H
  00049	48 89 44 24 40	 mov	 QWORD PTR ks$[rsp], rax

; 267  : 	register int i,j,l;
; 268  : 	int m;
; 269  : 	
; 270  : 	for (j=0; j<56; j++) {          /* convert pc1 to bits of key */

  0004e	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR j$[rsp], 0
  00059	eb 11		 jmp	 SHORT $LN22@RawSetKey
$LN21@RawSetKey:
  0005b	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  00062	83 c0 01	 add	 eax, 1
  00065	89 84 24 d4 00
	00 00		 mov	 DWORD PTR j$[rsp], eax
$LN22@RawSetKey:
  0006c	83 bc 24 d4 00
	00 00 38	 cmp	 DWORD PTR j$[rsp], 56	; 00000038H
  00074	0f 8d 89 00 00
	00		 jge	 $LN20@RawSetKey

; 271  : 		l=pc1[j]-1;             /* integer bit location  */

  0007a	48 63 8c 24 d4
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  00082	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:pc1
  00089	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0008d	83 e8 01	 sub	 eax, 1
  00090	89 44 24 38	 mov	 DWORD PTR l$[rsp], eax

; 272  : 		m = l & 07;             /* find bit              */

  00094	8b 44 24 38	 mov	 eax, DWORD PTR l$[rsp]
  00098	83 e0 07	 and	 eax, 7
  0009b	89 84 24 d0 00
	00 00		 mov	 DWORD PTR m$[rsp], eax

; 273  : 		pc1m[j]=(key[l>>3] &    /* find which key byte l is in */
; 274  : 			bytebit[m])     /* and which bit of that byte */
; 275  : 			? 1 : 0;        /* and store 1-bit result */

  000a2	8b 44 24 38	 mov	 eax, DWORD PTR l$[rsp]
  000a6	c1 f8 03	 sar	 eax, 3
  000a9	48 63 c8	 movsxd	 rcx, eax
  000ac	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR key$[rsp]
  000b4	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  000b8	48 63 94 24 d0
	00 00 00	 movsxd	 rdx, DWORD PTR m$[rsp]
  000c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bytebit
  000c7	23 04 91	 and	 eax, DWORD PTR [rcx+rdx*4]
  000ca	85 c0		 test	 eax, eax
  000cc	74 0d		 je	 SHORT $LN25@RawSetKey
  000ce	c7 84 24 e8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv84[rsp], 1
  000d9	eb 0b		 jmp	 SHORT $LN26@RawSetKey
$LN25@RawSetKey:
  000db	c7 84 24 e8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv84[rsp], 0
$LN26@RawSetKey:
  000e6	48 63 94 24 d4
	00 00 00	 movsxd	 rdx, DWORD PTR j$[rsp]
  000ee	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pc1m$[rsp]
  000f3	0f b6 84 24 e8
	00 00 00	 movzx	 eax, BYTE PTR tv84[rsp]
  000fb	88 04 11	 mov	 BYTE PTR [rcx+rdx], al

; 276  : 	}

  000fe	e9 58 ff ff ff	 jmp	 $LN21@RawSetKey
$LN20@RawSetKey:

; 277  : 	for (i=0; i<16; i++) {          /* key chunk for each iteration */

  00103	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0010b	eb 0b		 jmp	 SHORT $LN19@RawSetKey
$LN18@RawSetKey:
  0010d	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  00111	83 c0 01	 add	 eax, 1
  00114	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
$LN19@RawSetKey:
  00118	83 7c 24 28 10	 cmp	 DWORD PTR i$[rsp], 16
  0011d	0f 8d 0f 02 00
	00		 jge	 $LN17@RawSetKey

; 278  : 		memset(ks,0,8);         /* Clear key schedule */

  00123	48 8b 7c 24 40	 mov	 rdi, QWORD PTR ks$[rsp]
  00128	33 c0		 xor	 eax, eax
  0012a	b9 08 00 00 00	 mov	 ecx, 8
  0012f	f3 aa		 rep stosb

; 279  : 		for (j=0; j<56; j++)    /* rotate pc1 the right amount */

  00131	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR j$[rsp], 0
  0013c	eb 11		 jmp	 SHORT $LN16@RawSetKey
$LN15@RawSetKey:
  0013e	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  00145	83 c0 01	 add	 eax, 1
  00148	89 84 24 d4 00
	00 00		 mov	 DWORD PTR j$[rsp], eax
$LN16@RawSetKey:
  0014f	83 bc 24 d4 00
	00 00 38	 cmp	 DWORD PTR j$[rsp], 56	; 00000038H
  00157	0f 8d 8d 00 00
	00		 jge	 $LN14@RawSetKey

; 280  : 			pcr[j] = pc1m[(l=j+totrot[i])<(j<28? 28 : 56) ? l: l-28];

  0015d	83 bc 24 d4 00
	00 00 1c	 cmp	 DWORD PTR j$[rsp], 28
  00165	7d 0d		 jge	 SHORT $LN27@RawSetKey
  00167	c7 84 24 ec 00
	00 00 1c 00 00
	00		 mov	 DWORD PTR tv133[rsp], 28
  00172	eb 0b		 jmp	 SHORT $LN28@RawSetKey
$LN27@RawSetKey:
  00174	c7 84 24 ec 00
	00 00 38 00 00
	00		 mov	 DWORD PTR tv133[rsp], 56 ; 00000038H
$LN28@RawSetKey:
  0017f	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR i$[rsp]
  00184	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:totrot
  0018b	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  0018f	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  00196	03 c1		 add	 eax, ecx
  00198	89 44 24 38	 mov	 DWORD PTR l$[rsp], eax
  0019c	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR tv133[rsp]
  001a3	39 44 24 38	 cmp	 DWORD PTR l$[rsp], eax
  001a7	7d 0d		 jge	 SHORT $LN29@RawSetKey
  001a9	8b 44 24 38	 mov	 eax, DWORD PTR l$[rsp]
  001ad	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv136[rsp], eax
  001b4	eb 0e		 jmp	 SHORT $LN30@RawSetKey
$LN29@RawSetKey:
  001b6	8b 44 24 38	 mov	 eax, DWORD PTR l$[rsp]
  001ba	83 e8 1c	 sub	 eax, 28
  001bd	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv136[rsp], eax
$LN30@RawSetKey:
  001c4	48 63 bc 24 f0
	00 00 00	 movsxd	 rdi, DWORD PTR tv136[rsp]
  001cc	48 63 94 24 d4
	00 00 00	 movsxd	 rdx, DWORD PTR j$[rsp]
  001d4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pcr$[rsp]
  001d9	48 8b 44 24 20	 mov	 rax, QWORD PTR pc1m$[rsp]
  001de	0f b6 04 38	 movzx	 eax, BYTE PTR [rax+rdi]
  001e2	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  001e5	e9 54 ff ff ff	 jmp	 $LN15@RawSetKey
$LN14@RawSetKey:

; 281  : 		/* rotate left and right halves independently */
; 282  : 		for (j=0; j<48; j++){   /* select bits individually */

  001ea	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR j$[rsp], 0
  001f5	eb 11		 jmp	 SHORT $LN13@RawSetKey
$LN12@RawSetKey:
  001f7	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  001fe	83 c0 01	 add	 eax, 1
  00201	89 84 24 d4 00
	00 00		 mov	 DWORD PTR j$[rsp], eax
$LN13@RawSetKey:
  00208	83 bc 24 d4 00
	00 00 30	 cmp	 DWORD PTR j$[rsp], 48	; 00000030H
  00210	0f 8d 88 00 00
	00		 jge	 $LN11@RawSetKey

; 283  : 			/* check bit that goes to ks[j] */
; 284  : 			if (pcr[pc2[j]-1]){

  00216	48 63 8c 24 d4
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  0021e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:pc2
  00225	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00229	83 e8 01	 sub	 eax, 1
  0022c	48 63 c8	 movsxd	 rcx, eax
  0022f	48 8b 44 24 30	 mov	 rax, QWORD PTR pcr$[rsp]
  00234	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00238	85 c0		 test	 eax, eax
  0023a	74 5d		 je	 SHORT $LN10@RawSetKey

; 285  : 				/* mask it in if it's there */
; 286  : 				l= j % 6;

  0023c	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  00243	99		 cdq
  00244	b9 06 00 00 00	 mov	 ecx, 6
  00249	f7 f9		 idiv	 ecx
  0024b	89 54 24 38	 mov	 DWORD PTR l$[rsp], edx

; 287  : 				ks[j/6] |= bytebit[l] >> 2;

  0024f	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  00256	99		 cdq
  00257	b9 06 00 00 00	 mov	 ecx, 6
  0025c	f7 f9		 idiv	 ecx
  0025e	48 63 d0	 movsxd	 rdx, eax
  00261	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR l$[rsp]
  00266	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:bytebit
  0026d	8b 0c 88	 mov	 ecx, DWORD PTR [rax+rcx*4]
  00270	c1 f9 02	 sar	 ecx, 2
  00273	48 8b 44 24 40	 mov	 rax, QWORD PTR ks$[rsp]
  00278	0f b6 3c 10	 movzx	 edi, BYTE PTR [rax+rdx]
  0027c	0b f9		 or	 edi, ecx
  0027e	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  00285	99		 cdq
  00286	b9 06 00 00 00	 mov	 ecx, 6
  0028b	f7 f9		 idiv	 ecx
  0028d	48 63 c8	 movsxd	 rcx, eax
  00290	48 8b 44 24 40	 mov	 rax, QWORD PTR ks$[rsp]
  00295	40 88 3c 08	 mov	 BYTE PTR [rax+rcx], dil
$LN10@RawSetKey:

; 288  : 			}
; 289  : 		}

  00299	e9 59 ff ff ff	 jmp	 $LN12@RawSetKey
$LN11@RawSetKey:

; 290  : 		/* Now convert to odd/even interleaved form for use in F */
; 291  : 		scheduledKey[2*i] = ((word32)ks[0] << 24)
; 292  : 			| ((word32)ks[2] << 16)
; 293  : 			| ((word32)ks[4] << 8)
; 294  : 			| ((word32)ks[6]);

  0029e	48 8b 44 24 40	 mov	 rax, QWORD PTR ks$[rsp]
  002a3	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  002a6	c1 e2 18	 shl	 edx, 24
  002a9	48 8b 44 24 40	 mov	 rax, QWORD PTR ks$[rsp]
  002ae	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  002b2	c1 e0 10	 shl	 eax, 16
  002b5	0b d0		 or	 edx, eax
  002b7	48 8b 44 24 40	 mov	 rax, QWORD PTR ks$[rsp]
  002bc	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  002c0	c1 e0 08	 shl	 eax, 8
  002c3	0b d0		 or	 edx, eax
  002c5	48 8b 44 24 40	 mov	 rax, QWORD PTR ks$[rsp]
  002ca	0f b6 40 06	 movzx	 eax, BYTE PTR [rax+6]
  002ce	0b d0		 or	 edx, eax
  002d0	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  002d4	03 c0		 add	 eax, eax
  002d6	48 63 c8	 movsxd	 rcx, eax
  002d9	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR scheduledKey$[rsp]
  002e1	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 295  : 		scheduledKey[2*i+1] = ((word32)ks[1] << 24)
; 296  : 			| ((word32)ks[3] << 16)
; 297  : 			| ((word32)ks[5] << 8)
; 298  : 			| ((word32)ks[7]);

  002e4	48 8b 44 24 40	 mov	 rax, QWORD PTR ks$[rsp]
  002e9	0f b6 50 01	 movzx	 edx, BYTE PTR [rax+1]
  002ed	c1 e2 18	 shl	 edx, 24
  002f0	48 8b 44 24 40	 mov	 rax, QWORD PTR ks$[rsp]
  002f5	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  002f9	c1 e0 10	 shl	 eax, 16
  002fc	0b d0		 or	 edx, eax
  002fe	48 8b 44 24 40	 mov	 rax, QWORD PTR ks$[rsp]
  00303	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  00307	c1 e0 08	 shl	 eax, 8
  0030a	0b d0		 or	 edx, eax
  0030c	48 8b 44 24 40	 mov	 rax, QWORD PTR ks$[rsp]
  00311	0f b6 40 07	 movzx	 eax, BYTE PTR [rax+7]
  00315	0b d0		 or	 edx, eax
  00317	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  0031b	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  0031f	48 63 c8	 movsxd	 rcx, eax
  00322	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR scheduledKey$[rsp]
  0032a	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 299  : 	}

  0032d	e9 db fd ff ff	 jmp	 $LN18@RawSetKey
$LN17@RawSetKey:

; 300  : 	
; 301  : 	if (!encryption)     // reverse key schedule order

  00332	83 bc 24 10 01
	00 00 00	 cmp	 DWORD PTR encryption$[rsp], 0
  0033a	0f 85 e7 00 00
	00		 jne	 $LN9@RawSetKey

; 302  : 		for (i=0; i<16; i+=2)

  00340	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00348	eb 0b		 jmp	 SHORT $LN8@RawSetKey
$LN7@RawSetKey:
  0034a	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  0034e	83 c0 02	 add	 eax, 2
  00351	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
$LN8@RawSetKey:
  00355	83 7c 24 28 10	 cmp	 DWORD PTR i$[rsp], 16
  0035a	0f 8d c7 00 00
	00		 jge	 $LN6@RawSetKey

; 303  : 		{
; 304  : 			word32 b = scheduledKey[i];

  00360	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR i$[rsp]
  00365	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR scheduledKey$[rsp]
  0036d	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00370	89 84 24 d8 00
	00 00		 mov	 DWORD PTR b$26496[rsp], eax

; 305  : 			scheduledKey[i] = scheduledKey[32-2-i];

  00377	b8 1e 00 00 00	 mov	 eax, 30
  0037c	2b 44 24 28	 sub	 eax, DWORD PTR i$[rsp]
  00380	48 63 f8	 movsxd	 rdi, eax
  00383	48 63 54 24 28	 movsxd	 rdx, DWORD PTR i$[rsp]
  00388	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR scheduledKey$[rsp]
  00390	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR scheduledKey$[rsp]
  00398	8b 04 b8	 mov	 eax, DWORD PTR [rax+rdi*4]
  0039b	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax

; 306  : 			scheduledKey[32-2-i] = b;

  0039e	b8 1e 00 00 00	 mov	 eax, 30
  003a3	2b 44 24 28	 sub	 eax, DWORD PTR i$[rsp]
  003a7	48 63 d0	 movsxd	 rdx, eax
  003aa	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR scheduledKey$[rsp]
  003b2	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR b$26496[rsp]
  003b9	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax

; 307  : 
; 308  : 			b = scheduledKey[i+1];

  003bc	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  003c0	83 c0 01	 add	 eax, 1
  003c3	48 63 c8	 movsxd	 rcx, eax
  003c6	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR scheduledKey$[rsp]
  003ce	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  003d1	89 84 24 d8 00
	00 00		 mov	 DWORD PTR b$26496[rsp], eax

; 309  : 			scheduledKey[i+1] = scheduledKey[32-1-i];

  003d8	b8 1f 00 00 00	 mov	 eax, 31
  003dd	2b 44 24 28	 sub	 eax, DWORD PTR i$[rsp]
  003e1	48 63 f8	 movsxd	 rdi, eax
  003e4	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  003e8	83 c0 01	 add	 eax, 1
  003eb	48 63 d0	 movsxd	 rdx, eax
  003ee	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR scheduledKey$[rsp]
  003f6	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR scheduledKey$[rsp]
  003fe	8b 04 b8	 mov	 eax, DWORD PTR [rax+rdi*4]
  00401	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax

; 310  : 			scheduledKey[32-1-i] = b;

  00404	b8 1f 00 00 00	 mov	 eax, 31
  00409	2b 44 24 28	 sub	 eax, DWORD PTR i$[rsp]
  0040d	48 63 d0	 movsxd	 rdx, eax
  00410	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR scheduledKey$[rsp]
  00418	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR b$26496[rsp]
  0041f	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax

; 311  : 		}

  00422	e9 23 ff ff ff	 jmp	 $LN7@RawSetKey
$LN6@RawSetKey:
$LN9@RawSetKey:
$LN5@RawSetKey:

; 312  : 
; 313  : 	burn (buffer, sizeof (buffer));

  00427	48 8d 44 24 50	 lea	 rax, QWORD PTR buffer$[rsp]
  0042c	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR burnm$26500[rsp], rax
  00434	c7 84 24 dc 00
	00 00 78 00 00
	00		 mov	 DWORD PTR burnc$26502[rsp], 120 ; 00000078H
  0043f	ba 78 00 00 00	 mov	 edx, 120		; 00000078H
  00444	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buffer$[rsp]
  00449	e8 00 00 00 00	 call	 RtlSecureZeroMemory
$LN2@RawSetKey:
  0044e	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR burnc$26502[rsp]
  00455	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR burnc$26502[rsp]
  0045c	83 e8 01	 sub	 eax, 1
  0045f	89 84 24 dc 00
	00 00		 mov	 DWORD PTR burnc$26502[rsp], eax
  00466	85 c9		 test	 ecx, ecx
  00468	74 21		 je	 SHORT $LN1@RawSetKey
  0046a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR burnm$26500[rsp]
  00472	c6 00 00	 mov	 BYTE PTR [rax], 0
  00475	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR burnm$26500[rsp]
  0047d	48 83 c0 01	 add	 rax, 1
  00481	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR burnm$26500[rsp], rax
  00489	eb c3		 jmp	 SHORT $LN2@RawSetKey
$LN1@RawSetKey:
  0048b	33 c0		 xor	 eax, eax
  0048d	85 c0		 test	 eax, eax
  0048f	75 96		 jne	 SHORT $LN5@RawSetKey

; 314  : }

  00491	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00499	48 33 cc	 xor	 rcx, rsp
  0049c	e8 00 00 00 00	 call	 __security_check_cookie
  004a1	48 81 c4 00 01
	00 00		 add	 rsp, 256		; 00000100H
  004a8	5f		 pop	 rdi
  004a9	c3		 ret	 0
RawSetKey ENDP
PUBLIC	TripleDesEncrypt
;	COMDAT pdata
pdata	SEGMENT
$pdata$TripleDesEncrypt DD imagerel $LN9
	DD	imagerel $LN9+886
	DD	imagerel $unwind$TripleDesEncrypt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TripleDesEncrypt DD 011801H
	DD	0a218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT TripleDesEncrypt
_TEXT	SEGMENT
work$ = 32
left$ = 36
right$ = 40
tv141 = 48
tv148 = 56
tv155 = 64
inBlock$ = 96
outBlock$ = 104
key$ = 112
encrypt$ = 120
TripleDesEncrypt PROC					; COMDAT

; 361  : {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 362  : 	word32 left = BE32 (((word32 *)inBlock)[0]);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR inBlock$[rsp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0001f	e8 00 00 00 00	 call	 MirrorBytes32
  00024	89 44 24 24	 mov	 DWORD PTR left$[rsp], eax

; 363  : 	word32 right = BE32 (((word32 *)inBlock)[1]);

  00028	48 8b 44 24 60	 mov	 rax, QWORD PTR inBlock$[rsp]
  0002d	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
  00030	e8 00 00 00 00	 call	 MirrorBytes32
  00035	89 44 24 28	 mov	 DWORD PTR right$[rsp], eax

; 364  : 	word32 work;
; 365  : 
; 366  : 	right = rotlFixed(right, 4U);

  00039	ba 04 00 00 00	 mov	 edx, 4
  0003e	8b 4c 24 28	 mov	 ecx, DWORD PTR right$[rsp]
  00042	e8 00 00 00 00	 call	 rotlFixed
  00047	89 44 24 28	 mov	 DWORD PTR right$[rsp], eax

; 367  : 	work = (left ^ right) & 0xf0f0f0f0;

  0004b	8b 4c 24 28	 mov	 ecx, DWORD PTR right$[rsp]
  0004f	8b 44 24 24	 mov	 eax, DWORD PTR left$[rsp]
  00053	33 c1		 xor	 eax, ecx
  00055	25 f0 f0 f0 f0	 and	 eax, -252645136		; f0f0f0f0H
  0005a	89 44 24 20	 mov	 DWORD PTR work$[rsp], eax

; 368  : 	left ^= work;

  0005e	8b 4c 24 20	 mov	 ecx, DWORD PTR work$[rsp]
  00062	8b 44 24 24	 mov	 eax, DWORD PTR left$[rsp]
  00066	33 c1		 xor	 eax, ecx
  00068	89 44 24 24	 mov	 DWORD PTR left$[rsp], eax

; 369  : 	right = rotrFixed(right^work, 20U);

  0006c	8b 44 24 20	 mov	 eax, DWORD PTR work$[rsp]
  00070	8b 4c 24 28	 mov	 ecx, DWORD PTR right$[rsp]
  00074	33 c8		 xor	 ecx, eax
  00076	ba 14 00 00 00	 mov	 edx, 20
  0007b	e8 00 00 00 00	 call	 rotrFixed
  00080	89 44 24 28	 mov	 DWORD PTR right$[rsp], eax

; 370  : 	work = (left ^ right) & 0xffff0000;

  00084	8b 4c 24 28	 mov	 ecx, DWORD PTR right$[rsp]
  00088	8b 44 24 24	 mov	 eax, DWORD PTR left$[rsp]
  0008c	33 c1		 xor	 eax, ecx
  0008e	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  00093	89 44 24 20	 mov	 DWORD PTR work$[rsp], eax

; 371  : 	left ^= work;

  00097	8b 4c 24 20	 mov	 ecx, DWORD PTR work$[rsp]
  0009b	8b 44 24 24	 mov	 eax, DWORD PTR left$[rsp]
  0009f	33 c1		 xor	 eax, ecx
  000a1	89 44 24 24	 mov	 DWORD PTR left$[rsp], eax

; 372  : 	right = rotrFixed(right^work, 18U);

  000a5	8b 44 24 20	 mov	 eax, DWORD PTR work$[rsp]
  000a9	8b 4c 24 28	 mov	 ecx, DWORD PTR right$[rsp]
  000ad	33 c8		 xor	 ecx, eax
  000af	ba 12 00 00 00	 mov	 edx, 18
  000b4	e8 00 00 00 00	 call	 rotrFixed
  000b9	89 44 24 28	 mov	 DWORD PTR right$[rsp], eax

; 373  : 	work = (left ^ right) & 0x33333333;

  000bd	8b 4c 24 28	 mov	 ecx, DWORD PTR right$[rsp]
  000c1	8b 44 24 24	 mov	 eax, DWORD PTR left$[rsp]
  000c5	33 c1		 xor	 eax, ecx
  000c7	25 33 33 33 33	 and	 eax, 858993459		; 33333333H
  000cc	89 44 24 20	 mov	 DWORD PTR work$[rsp], eax

; 374  : 	left ^= work;

  000d0	8b 4c 24 20	 mov	 ecx, DWORD PTR work$[rsp]
  000d4	8b 44 24 24	 mov	 eax, DWORD PTR left$[rsp]
  000d8	33 c1		 xor	 eax, ecx
  000da	89 44 24 24	 mov	 DWORD PTR left$[rsp], eax

; 375  : 	right = rotrFixed(right^work, 6U);

  000de	8b 44 24 20	 mov	 eax, DWORD PTR work$[rsp]
  000e2	8b 4c 24 28	 mov	 ecx, DWORD PTR right$[rsp]
  000e6	33 c8		 xor	 ecx, eax
  000e8	ba 06 00 00 00	 mov	 edx, 6
  000ed	e8 00 00 00 00	 call	 rotrFixed
  000f2	89 44 24 28	 mov	 DWORD PTR right$[rsp], eax

; 376  : 	work = (left ^ right) & 0x00ff00ff;

  000f6	8b 4c 24 28	 mov	 ecx, DWORD PTR right$[rsp]
  000fa	8b 44 24 24	 mov	 eax, DWORD PTR left$[rsp]
  000fe	33 c1		 xor	 eax, ecx
  00100	25 ff 00 ff 00	 and	 eax, 16711935		; 00ff00ffH
  00105	89 44 24 20	 mov	 DWORD PTR work$[rsp], eax

; 377  : 	left ^= work;

  00109	8b 4c 24 20	 mov	 ecx, DWORD PTR work$[rsp]
  0010d	8b 44 24 24	 mov	 eax, DWORD PTR left$[rsp]
  00111	33 c1		 xor	 eax, ecx
  00113	89 44 24 24	 mov	 DWORD PTR left$[rsp], eax

; 378  : 	right = rotlFixed(right^work, 9U);

  00117	8b 44 24 20	 mov	 eax, DWORD PTR work$[rsp]
  0011b	8b 4c 24 28	 mov	 ecx, DWORD PTR right$[rsp]
  0011f	33 c8		 xor	 ecx, eax
  00121	ba 09 00 00 00	 mov	 edx, 9
  00126	e8 00 00 00 00	 call	 rotlFixed
  0012b	89 44 24 28	 mov	 DWORD PTR right$[rsp], eax

; 379  : 	work = (left ^ right) & 0xaaaaaaaa;

  0012f	8b 4c 24 28	 mov	 ecx, DWORD PTR right$[rsp]
  00133	8b 44 24 24	 mov	 eax, DWORD PTR left$[rsp]
  00137	33 c1		 xor	 eax, ecx
  00139	25 aa aa aa aa	 and	 eax, -1431655766	; aaaaaaaaH
  0013e	89 44 24 20	 mov	 DWORD PTR work$[rsp], eax

; 380  : 	left = rotlFixed(left^work, 1U);

  00142	8b 44 24 20	 mov	 eax, DWORD PTR work$[rsp]
  00146	8b 4c 24 24	 mov	 ecx, DWORD PTR left$[rsp]
  0014a	33 c8		 xor	 ecx, eax
  0014c	ba 01 00 00 00	 mov	 edx, 1
  00151	e8 00 00 00 00	 call	 rotlFixed
  00156	89 44 24 24	 mov	 DWORD PTR left$[rsp], eax

; 381  : 	right ^= work;

  0015a	8b 4c 24 20	 mov	 ecx, DWORD PTR work$[rsp]
  0015e	8b 44 24 28	 mov	 eax, DWORD PTR right$[rsp]
  00162	33 c1		 xor	 eax, ecx
  00164	89 44 24 28	 mov	 DWORD PTR right$[rsp], eax

; 382  : 
; 383  : 	RawProcessBlock (&left, &right, encrypt ? key->k1 : key->k1d);

  00168	83 7c 24 78 00	 cmp	 DWORD PTR encrypt$[rsp], 0
  0016d	74 0c		 je	 SHORT $LN3@TripleDesE
  0016f	48 8b 44 24 70	 mov	 rax, QWORD PTR key$[rsp]
  00174	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00179	eb 10		 jmp	 SHORT $LN4@TripleDesE
$LN3@TripleDesE:
  0017b	48 8b 44 24 70	 mov	 rax, QWORD PTR key$[rsp]
  00180	48 05 80 01 00
	00		 add	 rax, 384		; 00000180H
  00186	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
$LN4@TripleDesE:
  0018b	4c 8b 44 24 30	 mov	 r8, QWORD PTR tv141[rsp]
  00190	48 8d 54 24 28	 lea	 rdx, QWORD PTR right$[rsp]
  00195	48 8d 4c 24 24	 lea	 rcx, QWORD PTR left$[rsp]
  0019a	e8 00 00 00 00	 call	 RawProcessBlock

; 384  : 	RawProcessBlock (&right, &left, !encrypt ? key->k2 : key->k2d);

  0019f	83 7c 24 78 00	 cmp	 DWORD PTR encrypt$[rsp], 0
  001a4	75 12		 jne	 SHORT $LN5@TripleDesE
  001a6	48 8b 44 24 70	 mov	 rax, QWORD PTR key$[rsp]
  001ab	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  001b1	48 89 44 24 38	 mov	 QWORD PTR tv148[rsp], rax
  001b6	eb 10		 jmp	 SHORT $LN6@TripleDesE
$LN5@TripleDesE:
  001b8	48 8b 44 24 70	 mov	 rax, QWORD PTR key$[rsp]
  001bd	48 05 00 02 00
	00		 add	 rax, 512		; 00000200H
  001c3	48 89 44 24 38	 mov	 QWORD PTR tv148[rsp], rax
$LN6@TripleDesE:
  001c8	4c 8b 44 24 38	 mov	 r8, QWORD PTR tv148[rsp]
  001cd	48 8d 54 24 24	 lea	 rdx, QWORD PTR left$[rsp]
  001d2	48 8d 4c 24 28	 lea	 rcx, QWORD PTR right$[rsp]
  001d7	e8 00 00 00 00	 call	 RawProcessBlock

; 385  : 	RawProcessBlock (&left, &right, encrypt ? key->k3 : key->k3d);

  001dc	83 7c 24 78 00	 cmp	 DWORD PTR encrypt$[rsp], 0
  001e1	74 12		 je	 SHORT $LN7@TripleDesE
  001e3	48 8b 44 24 70	 mov	 rax, QWORD PTR key$[rsp]
  001e8	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  001ee	48 89 44 24 40	 mov	 QWORD PTR tv155[rsp], rax
  001f3	eb 10		 jmp	 SHORT $LN8@TripleDesE
$LN7@TripleDesE:
  001f5	48 8b 44 24 70	 mov	 rax, QWORD PTR key$[rsp]
  001fa	48 05 80 02 00
	00		 add	 rax, 640		; 00000280H
  00200	48 89 44 24 40	 mov	 QWORD PTR tv155[rsp], rax
$LN8@TripleDesE:
  00205	4c 8b 44 24 40	 mov	 r8, QWORD PTR tv155[rsp]
  0020a	48 8d 54 24 28	 lea	 rdx, QWORD PTR right$[rsp]
  0020f	48 8d 4c 24 24	 lea	 rcx, QWORD PTR left$[rsp]
  00214	e8 00 00 00 00	 call	 RawProcessBlock

; 386  : 	
; 387  : 	right = rotrFixed(right, 1U);

  00219	ba 01 00 00 00	 mov	 edx, 1
  0021e	8b 4c 24 28	 mov	 ecx, DWORD PTR right$[rsp]
  00222	e8 00 00 00 00	 call	 rotrFixed
  00227	89 44 24 28	 mov	 DWORD PTR right$[rsp], eax

; 388  : 	work = (left ^ right) & 0xaaaaaaaa;

  0022b	8b 4c 24 28	 mov	 ecx, DWORD PTR right$[rsp]
  0022f	8b 44 24 24	 mov	 eax, DWORD PTR left$[rsp]
  00233	33 c1		 xor	 eax, ecx
  00235	25 aa aa aa aa	 and	 eax, -1431655766	; aaaaaaaaH
  0023a	89 44 24 20	 mov	 DWORD PTR work$[rsp], eax

; 389  : 	right ^= work;

  0023e	8b 4c 24 20	 mov	 ecx, DWORD PTR work$[rsp]
  00242	8b 44 24 28	 mov	 eax, DWORD PTR right$[rsp]
  00246	33 c1		 xor	 eax, ecx
  00248	89 44 24 28	 mov	 DWORD PTR right$[rsp], eax

; 390  : 	left = rotrFixed(left^work, 9U);

  0024c	8b 44 24 20	 mov	 eax, DWORD PTR work$[rsp]
  00250	8b 4c 24 24	 mov	 ecx, DWORD PTR left$[rsp]
  00254	33 c8		 xor	 ecx, eax
  00256	ba 09 00 00 00	 mov	 edx, 9
  0025b	e8 00 00 00 00	 call	 rotrFixed
  00260	89 44 24 24	 mov	 DWORD PTR left$[rsp], eax

; 391  : 	work = (left ^ right) & 0x00ff00ff;

  00264	8b 4c 24 28	 mov	 ecx, DWORD PTR right$[rsp]
  00268	8b 44 24 24	 mov	 eax, DWORD PTR left$[rsp]
  0026c	33 c1		 xor	 eax, ecx
  0026e	25 ff 00 ff 00	 and	 eax, 16711935		; 00ff00ffH
  00273	89 44 24 20	 mov	 DWORD PTR work$[rsp], eax

; 392  : 	right ^= work;

  00277	8b 4c 24 20	 mov	 ecx, DWORD PTR work$[rsp]
  0027b	8b 44 24 28	 mov	 eax, DWORD PTR right$[rsp]
  0027f	33 c1		 xor	 eax, ecx
  00281	89 44 24 28	 mov	 DWORD PTR right$[rsp], eax

; 393  : 	left = rotlFixed(left^work, 6U);

  00285	8b 44 24 20	 mov	 eax, DWORD PTR work$[rsp]
  00289	8b 4c 24 24	 mov	 ecx, DWORD PTR left$[rsp]
  0028d	33 c8		 xor	 ecx, eax
  0028f	ba 06 00 00 00	 mov	 edx, 6
  00294	e8 00 00 00 00	 call	 rotlFixed
  00299	89 44 24 24	 mov	 DWORD PTR left$[rsp], eax

; 394  : 	work = (left ^ right) & 0x33333333;

  0029d	8b 4c 24 28	 mov	 ecx, DWORD PTR right$[rsp]
  002a1	8b 44 24 24	 mov	 eax, DWORD PTR left$[rsp]
  002a5	33 c1		 xor	 eax, ecx
  002a7	25 33 33 33 33	 and	 eax, 858993459		; 33333333H
  002ac	89 44 24 20	 mov	 DWORD PTR work$[rsp], eax

; 395  : 	right ^= work;

  002b0	8b 4c 24 20	 mov	 ecx, DWORD PTR work$[rsp]
  002b4	8b 44 24 28	 mov	 eax, DWORD PTR right$[rsp]
  002b8	33 c1		 xor	 eax, ecx
  002ba	89 44 24 28	 mov	 DWORD PTR right$[rsp], eax

; 396  : 	left = rotlFixed(left^work, 18U);

  002be	8b 44 24 20	 mov	 eax, DWORD PTR work$[rsp]
  002c2	8b 4c 24 24	 mov	 ecx, DWORD PTR left$[rsp]
  002c6	33 c8		 xor	 ecx, eax
  002c8	ba 12 00 00 00	 mov	 edx, 18
  002cd	e8 00 00 00 00	 call	 rotlFixed
  002d2	89 44 24 24	 mov	 DWORD PTR left$[rsp], eax

; 397  : 	work = (left ^ right) & 0xffff0000;

  002d6	8b 4c 24 28	 mov	 ecx, DWORD PTR right$[rsp]
  002da	8b 44 24 24	 mov	 eax, DWORD PTR left$[rsp]
  002de	33 c1		 xor	 eax, ecx
  002e0	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  002e5	89 44 24 20	 mov	 DWORD PTR work$[rsp], eax

; 398  : 	right ^= work;

  002e9	8b 4c 24 20	 mov	 ecx, DWORD PTR work$[rsp]
  002ed	8b 44 24 28	 mov	 eax, DWORD PTR right$[rsp]
  002f1	33 c1		 xor	 eax, ecx
  002f3	89 44 24 28	 mov	 DWORD PTR right$[rsp], eax

; 399  : 	left = rotlFixed(left^work, 20U);

  002f7	8b 44 24 20	 mov	 eax, DWORD PTR work$[rsp]
  002fb	8b 4c 24 24	 mov	 ecx, DWORD PTR left$[rsp]
  002ff	33 c8		 xor	 ecx, eax
  00301	ba 14 00 00 00	 mov	 edx, 20
  00306	e8 00 00 00 00	 call	 rotlFixed
  0030b	89 44 24 24	 mov	 DWORD PTR left$[rsp], eax

; 400  : 	work = (left ^ right) & 0xf0f0f0f0;

  0030f	8b 4c 24 28	 mov	 ecx, DWORD PTR right$[rsp]
  00313	8b 44 24 24	 mov	 eax, DWORD PTR left$[rsp]
  00317	33 c1		 xor	 eax, ecx
  00319	25 f0 f0 f0 f0	 and	 eax, -252645136		; f0f0f0f0H
  0031e	89 44 24 20	 mov	 DWORD PTR work$[rsp], eax

; 401  : 	right ^= work;

  00322	8b 4c 24 20	 mov	 ecx, DWORD PTR work$[rsp]
  00326	8b 44 24 28	 mov	 eax, DWORD PTR right$[rsp]
  0032a	33 c1		 xor	 eax, ecx
  0032c	89 44 24 28	 mov	 DWORD PTR right$[rsp], eax

; 402  : 	left = rotrFixed(left^work, 4U);

  00330	8b 44 24 20	 mov	 eax, DWORD PTR work$[rsp]
  00334	8b 4c 24 24	 mov	 ecx, DWORD PTR left$[rsp]
  00338	33 c8		 xor	 ecx, eax
  0033a	ba 04 00 00 00	 mov	 edx, 4
  0033f	e8 00 00 00 00	 call	 rotrFixed
  00344	89 44 24 24	 mov	 DWORD PTR left$[rsp], eax

; 403  : 
; 404  : 	((word32 *)outBlock)[0] = BE32 (right);

  00348	8b 4c 24 28	 mov	 ecx, DWORD PTR right$[rsp]
  0034c	e8 00 00 00 00	 call	 MirrorBytes32
  00351	44 8b d8	 mov	 r11d, eax
  00354	48 8b 44 24 68	 mov	 rax, QWORD PTR outBlock$[rsp]
  00359	44 89 18	 mov	 DWORD PTR [rax], r11d

; 405  : 	((word32 *)outBlock)[1] = BE32 (left);

  0035c	8b 4c 24 24	 mov	 ecx, DWORD PTR left$[rsp]
  00360	e8 00 00 00 00	 call	 MirrorBytes32
  00365	44 8b d8	 mov	 r11d, eax
  00368	48 8b 44 24 68	 mov	 rax, QWORD PTR outBlock$[rsp]
  0036d	44 89 58 04	 mov	 DWORD PTR [rax+4], r11d

; 406  : }

  00371	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00375	c3		 ret	 0
TripleDesEncrypt ENDP
_TEXT	ENDS
PUBLIC	TripleDesSetKey
;	COMDAT pdata
pdata	SEGMENT
$pdata$TripleDesSetKey DD imagerel $LN3
	DD	imagerel $LN3+185
	DD	imagerel $unwind$TripleDesSetKey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TripleDesSetKey DD 011201H
	DD	04212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT TripleDesSetKey
_TEXT	SEGMENT
userKey$ = 48
length$ = 56
ks$ = 64
TripleDesSetKey PROC					; COMDAT

; 351  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 352  : 	RawSetKey (1, userKey + 0, ks->k1);

  00012	4c 8b 44 24 40	 mov	 r8, QWORD PTR ks$[rsp]
  00017	48 8b 54 24 30	 mov	 rdx, QWORD PTR userKey$[rsp]
  0001c	b9 01 00 00 00	 mov	 ecx, 1
  00021	e8 00 00 00 00	 call	 RawSetKey

; 353  : 	RawSetKey (1, userKey + 8, ks->k2);

  00026	4c 8b 44 24 40	 mov	 r8, QWORD PTR ks$[rsp]
  0002b	49 81 c0 80 00
	00 00		 add	 r8, 128			; 00000080H
  00032	48 8b 54 24 30	 mov	 rdx, QWORD PTR userKey$[rsp]
  00037	48 83 c2 08	 add	 rdx, 8
  0003b	b9 01 00 00 00	 mov	 ecx, 1
  00040	e8 00 00 00 00	 call	 RawSetKey

; 354  : 	RawSetKey (1, userKey + 16, ks->k3);

  00045	4c 8b 44 24 40	 mov	 r8, QWORD PTR ks$[rsp]
  0004a	49 81 c0 00 01
	00 00		 add	 r8, 256			; 00000100H
  00051	48 8b 54 24 30	 mov	 rdx, QWORD PTR userKey$[rsp]
  00056	48 83 c2 10	 add	 rdx, 16
  0005a	b9 01 00 00 00	 mov	 ecx, 1
  0005f	e8 00 00 00 00	 call	 RawSetKey

; 355  : 	RawSetKey (0, userKey + 16, ks->k1d);

  00064	4c 8b 44 24 40	 mov	 r8, QWORD PTR ks$[rsp]
  00069	49 81 c0 80 01
	00 00		 add	 r8, 384			; 00000180H
  00070	48 8b 54 24 30	 mov	 rdx, QWORD PTR userKey$[rsp]
  00075	48 83 c2 10	 add	 rdx, 16
  00079	33 c9		 xor	 ecx, ecx
  0007b	e8 00 00 00 00	 call	 RawSetKey

; 356  : 	RawSetKey (0, userKey + 8, ks->k2d);

  00080	4c 8b 44 24 40	 mov	 r8, QWORD PTR ks$[rsp]
  00085	49 81 c0 00 02
	00 00		 add	 r8, 512			; 00000200H
  0008c	48 8b 54 24 30	 mov	 rdx, QWORD PTR userKey$[rsp]
  00091	48 83 c2 08	 add	 rdx, 8
  00095	33 c9		 xor	 ecx, ecx
  00097	e8 00 00 00 00	 call	 RawSetKey

; 357  : 	RawSetKey (0, userKey + 0, ks->k3d);

  0009c	4c 8b 44 24 40	 mov	 r8, QWORD PTR ks$[rsp]
  000a1	49 81 c0 80 02
	00 00		 add	 r8, 640			; 00000280H
  000a8	48 8b 54 24 30	 mov	 rdx, QWORD PTR userKey$[rsp]
  000ad	33 c9		 xor	 ecx, ecx
  000af	e8 00 00 00 00	 call	 RawSetKey

; 358  : }

  000b4	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b8	c3		 ret	 0
TripleDesSetKey ENDP
END
