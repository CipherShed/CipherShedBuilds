; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@ ; `string'
PUBLIC	??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@ ; `string'
PUBLIC	??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@ ; `string'
PUBLIC	??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@ ; `string'
PUBLIC	??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@ ; `string'
PUBLIC	??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@ ; `string'
PUBLIC	??_C@_0P@ONGHGJEC@message?5digest?$AA@		; `string'
PUBLIC	??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@ ; `string'
PUBLIC	??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@ ; `string'
PUBLIC	??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@ ; `string'
PUBLIC	??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@ ; `string'
PUBLIC	??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@ ; `string'
PUBLIC	??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@		; `string'
PUBLIC	??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@ ; `string'
PUBLIC	??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@ ; `string'
PUBLIC	??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@ ; `string'
PUBLIC	??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@ ; `string'
PUBLIC	??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@ ; `string'
PUBLIC	??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@ ; `string'
PUBLIC	??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@ ; `string'
PUBLIC	??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@ ; `string'
PUBLIC	??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@ ; `string'
PUBLIC	??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@ ; `string'
PUBLIC	??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@ ; `string'
PUBLIC	??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@ ; `string'
PUBLIC	??_C@_08BPPJKMC@Hi?5There?$AA@			; `string'
PUBLIC	??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@ ; `string'
PUBLIC	??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@ ; `string'
PUBLIC	??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@ ; `string'
PUBLIC	??_C@_04HDLGGHEL@Jefe?$AA@			; `string'
PUBLIC	??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@ ; `string'
PUBLIC	XTS_vectors
PUBLIC	??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	bf_ecb_vectors
PUBLIC	tripledes_vectors
PUBLIC	cast_ecb_vectors
PUBLIC	aes_ecb_vectors
PUBLIC	serpent_vectors
PUBLIC	twofish_vectors
PUBLIC	hmac_sha512_test_keys
PUBLIC	hmac_sha512_test_data
PUBLIC	hmac_sha512_test_vectors
PUBLIC	hmac_sha1_test_keys
PUBLIC	hmac_sha1_test_data
PUBLIC	hmac_sha1_test_vectors
PUBLIC	hmac_ripemd160_test_keys
PUBLIC	hmac_ripemd160_test_data
PUBLIC	hmac_ripemd160_test_vectors
PUBLIC	hmac_whirlpool_test_key
PUBLIC	hmac_whirlpool_test_data
PUBLIC	hmac_whirlpool_test_vectors
PUBLIC	lrw_vectors
PUBLIC	??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_08NLHBPEGP@password?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04KFFKJODL@?$BDd?$KO?x?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04BHFCCAHB@?2u?N?p?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04PODIBCAH@z?$DN?$HM?$AD?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
COMM	ks_tmp:BYTE:014ccH
;	COMDAT ??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@
text$s	SEGMENT
??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@ DB 'P'
	DB	'|6o', 0eeH, 010H, '.', 09aH, 0e2H, 08aH, 0d5H, 082H, 'r}''', 0fH
	DB	0e8H, 'M', 07fH, 'hz', 0cfH, 0b5H, 0e7H, 'Cg', 0aaH, 098H, 093H
	DB	'R+', 09H, 'nB', 0dfH, ',YJ', 091H, 'm~', 010H, 0aeH, 0b2H, 01aH
	DB	089H, 08fH, 0b9H, 08fH, 0e6H, '1', 0a9H, 0d8H, 09fH, 098H, '&', 0f4H
	DB	0daH, 0cdH, '}ee', 0deH, 010H, 095H, 091H, 0b4H, 084H, '&', 0aeH
	DB	'C', 0a1H, 00H, '[', 01eH, 0b8H, '8', 097H, 0a4H, 01eH, 'K', 0d2H
	DB	'ed', 0bcH, 0faH, 01fH, '5', 085H, 0dbH, 'O', 097H, 'eo', 0bdH
	DB	'$', 00H					;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@ DB 'P|6o', 00H	;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@FNODOBFM@
text$s	SEGMENT
??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@FNODOBFM@ DB 'z'
	DB	'=|', 03H, 0e7H, '&k', 0f8H, '=x', 0fbH, ')', 0d2H, 'd', 01fH, 'V'
	DB	0eaH, 0f0H, 0e5H, 0f5H, 0ccH, 0c4H, ':1', 0a8H, 084H, 'p', 0bfH
	DB	0bdH, 'o', 08eH, 'x$Z', 0c0H, 0aH, 0f6H, 0faH, 0f0H, 0f6H, 0e9H
	DB	00H, 'G_s', 0ceH, 0e1H, 'C', 00H		;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04PODIBCAH@z?$DN?$HM?$AD?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04PODIBCAH@z?$DN?$HM?$AD?$AA@FNODOBFM@ DB 'z=|', 03H, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04BHFCCAHB@?2u?N?p?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04BHFCCAHB@?2u?N?p?$AA@FNODOBFM@ DB '\u', 0ceH, 0f0H, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@FNODOBFM@
text$s	SEGMENT
??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@FNODOBFM@ DB '\'
	DB	'u', 0ceH, 0f0H, 01aH, 096H, 0dH, 0f7H, 'L', 0b6H, 0b4H, 09bH, 09eH
	DB	'8', 0e6H, 0b5H, ';', 011H, 080H, 0e3H, '/', 0f7H, 0e0H, 0ddH, 0aaH
	DB	0caH, 08fH, 081H, '''', 0f6H, 09fH, 'O', 01dH, 0c8H, '/H-', 0dbH
	DB	01aH, 0aH, 0caH, 090H, 0cbH, 080H, 0b9H, '.', 090H, 09eH, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@FNODOBFM@
text$s	SEGMENT
??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@FNODOBFM@ DB 013H
	DB	'd', 0aeH, 0f8H, 0dH, 0f5H, 'Wl0', 0d5H, 'qL', 0a7H, 'u?', 0fdH
	DB	00H, 0e5H, '%', 08bH, '9', 0c7H, 'D', 07fH, 0ceH, '#=', 08H, 'u'
	DB	0e0H, '/H', 0d6H, '0', 0d7H, 00H, 0b6H, '$', 0dbH, 0e0H, 'Z', 0d7H
	DB	'G', 0efH, 'R', 0caH, 0a6H, '4', 083H, 'G', 0e5H, 0cbH, 0e9H, 087H
	DB	0f1H, ' Yj', 0e6H, 0a9H, 0cfH, 'Qx', 0c6H, 0b6H, '#', 0a6H, 't'
	DB	0dH, 0e8H, 091H, 0beH, 01aH, 0d0H, '(', 0ccH, 0ceH, 016H, 098H
	DB	09aH, 0beH, 0fbH, 0dcH, 'x', 0c9H, 0e1H, '}rg', 0ceH, 0e1H, 'a'
	DB	'V_', 096H, 'h', 0e6H, 0e1H, 0ddH, 0f4H, 0bfH, 01bH, 080H, 0e0H
	DB	019H, 01cH, 0f4H, 0c4H, 0d3H, 0ddH, 0d5H, 0d5H, 'W-', 083H, 0c7H
	DB	0a3H, '7', 087H, 0f4H, 'N', 0e0H, 0f6H, 0d8H, 'me', 0dcH, 0a0H
	DB	'R', 0a3H, 013H, 0beH, 081H, 0fcH, '0', 0beH, '}iX4', 0b6H, 0ddH
	DB	'A', 0c6H, 00H				;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04KFFKJODL@?$BDd?$KO?x?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04KFFKJODL@?$BDd?$KO?x?$AA@FNODOBFM@ DB 013H, 'd', 0aeH, 0f8H, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_08NLHBPEGP@password?$AA@FNODOBFM@ DB 'password', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@ DB 012H, '4Vx', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@ DB 'AES-Blowfish-'
	DB	'Serpent', 00H				;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@ DB 'AES-Blowfish', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@ DB 'CAST5', 00H	;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@ DB 'Blowfish', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@ DB 'Twofish-Serpent', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@ DB 'Serpent-Twofis'
	DB	'h-AES', 00H					;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@ DB 'Serpent-AES', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@ DB 'AES-Twofish-Se'
	DB	'rpent', 00H					;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@ DB 'AES-Twofish', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@ DB 'Twofish', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@ DB 'Serpent', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@
CONST	SEGMENT
??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@ DB 03H
	DB	091H, 0d2H, 080H, 00H, 0b6H, 'b', 0bbH, 0b8H, 0e6H, '#>', 0e8H
	DB	'l', 0f2H, 0b2H, 084H, 'tLs', 08bH, 'X', 00H, 0baH, '(', 012H, 0edH
	DB	'Ro', 0e3H, 015H, ':', 0b1H, 0baH, 0e7H, 0e2H, '6', 0beH, 096H
	DB	'TI?', 019H, 0faH, 0ceH, 0a6H, 'D', 01fH, '`', 0f5H, 0f0H, 018H
	DB	093H, 09H, 011H, 0a5H, 0e5H, 0ceH, 0d8H, 0f2H, 'j', 0bfH, 0a4H
	DB	02H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
CONST	SEGMENT
??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@ DB 'abcdbcdecdefdefg'
	DB	'efghfghighijhijkijkljklmklmnlmnomnopnopq', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
CONST	SEGMENT
??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@ DB 00H
	DB	011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH, 00H, 011H, '"3DUfw', 088H, 099H
	DB	0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH, 01H, '#Eg', 089H, 0abH, 0cdH
	DB	0efH, 00H, 011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH
	DB	0ffH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@
CONST	SEGMENT
??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@ DB 085H
	DB	0f1H, 'dp>a', 0a6H, '11', 0beH, '~E', 095H, 08eH, 07H, 094H, 012H
	DB	'9', 04H, 0f9H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@
CONST	SEGMENT
??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@ DB 0f8H
	DB	'6b', 0ccH, 08dH, '3', 09cH, '"~`', 0fH, 0cdH, 'clW', 0d2H, 'W'
	DB	01bH, 01cH, '4', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@
CONST	SEGMENT
??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@ DB '1234567890123456'
	DB	'7890123456789012345678901234567890123456789012345678901234567'
	DB	'890', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ONGHGJEC@message?5digest?$AA@
CONST	SEGMENT
??_C@_0P@ONGHGJEC@message?5digest?$AA@ DB 'message digest', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@
CONST	SEGMENT
??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@ DB 01H
	DB	'#Eg', 089H, 0abH, 0cdH, 0efH, 0feH, 0dcH, 0baH, 098H, 'vT2', 010H
	DB	00H, 011H, '"3', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@
CONST	SEGMENT
??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@ DB 00H
	DB	011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH
	DB	01H, '#Eg', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@
CONST	SEGMENT
??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@ DB 012H
	DB	']sB', 0b9H, 0acH, 011H, 0cdH, 091H, 0a3H, 09aH, 0f4H, 08aH, 0a1H
	DB	'{Oc', 0f1H, 'u', 0d3H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@
CONST	SEGMENT
??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@ DB 0efH
	DB	0fcH, 0dfH, 'j', 0e5H, 0ebH, '/', 0a2H, 0d2H, 't', 016H, 0d5H, 0f1H
	DB	084H, 0dfH, 09cH, '%', 09aH, '|y', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@
CONST	SEGMENT
??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@ DB 0b6H
	DB	017H, '1', 086H, 'U', 05H, 'rd', 0e2H, 08bH, 0c0H, 0b6H, 0fbH, '7'
	DB	08cH, 08eH, 0f1H, 'F', 0beH, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@
CONST	SEGMENT
??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@ DB 0bcH
	DB	0f4H, 01eH, 0abH, 08bH, 0b2H, 0d8H, 02H, 0f3H, 0d0H, '\', 0afH
	DB	'|', 0b0H, 092H, 0ecH, 0f8H, 0d1H, 0a3H, 0aaH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@
CONST	SEGMENT
??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@ DB 'Sample #3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@
CONST	SEGMENT
??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@ DB 'PQR'
	DB	'STUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~', 07fH, 080H, 081H
	DB	082H, 083H, 084H, 085H, 086H, 087H, 088H, 089H, 08aH, 08bH, 08cH
	DB	08dH, 08eH, 08fH, 090H, 091H, 092H, 093H, 094H, 095H, 096H, 097H
	DB	098H, 099H, 09aH, 09bH, 09cH, 09dH, 09eH, 09fH, 0a0H, 0a1H, 0a2H
	DB	0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H, 0aaH, 0abH, 0acH, 0adH
	DB	0aeH, 0afH, 0b0H, 0b1H, 0b2H, 0b3H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@
CONST	SEGMENT
??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@ DB 0e3H
	DB	'{jw]', 0c8H, '}', 0baH, 0a4H, 0dfH, 0a9H, 0f9H, 'n^?', 0fdH, 0deH
	DB	0bdH, 'q', 0f8H, 086H, 'r', 089H, 086H, ']', 0f5H, 0a3H, '- ', 0cdH
	DB	0c9H, 'D', 0b6H, 02H, ',', 0acH, '<I', 082H, 0b1H, 0dH, '^', 0ebH
	DB	'U', 0c3H, 0e4H, 0deH, 015H, 013H, 'Fv', 0fbH, 'm', 0e0H, 'D`e'
	DB	0c9H, 't@', 0faH, 08cH, 'jX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@
CONST	SEGMENT
??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@ DB 080H
	DB	0b2H, 'Bc', 0c7H, 0c1H, 0a3H, 0ebH, 0b7H, 014H, 093H, 0c1H, 0ddH
	DB	'{', 0e8H, 0b4H, 09bH, 'F', 0d1H, 0f4H, 01bH, 'J', 0eeH, 0c1H, 012H
	DB	01bH, 01H, '7', 083H, 0f8H, 0f3H, 'RkV', 0d0H, '7', 0e0H, '_%', 098H
	DB	0bdH, 0fH, 0d2H, '!]j', 01eH, 'R', 095H, 0e6H, 'Os', 0f6H, '?', 0aH
	DB	0ecH, 08bH, 091H, 'Z', 098H, ']xe', 098H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@
CONST	SEGMENT
??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@ DB 0b0H
	DB	0baH, 'FV7E', 08cH, 'i', 090H, 0e5H, 0a8H, 0c5H, 0f6H, 01dH, 'J'
	DB	0f7H, 0e5H, 'v', 0d9H, 07fH, 0f9H, 'K', 087H, '-', 0e7H, 'o', 080H
	DB	'P6', 01eH, 0e3H, 0dbH, 0a9H, 01cH, 0a5H, 0c1H, 01aH, 0a2H, '^'
	DB	0b4H, 0d6H, 'y''\', 0c5H, 'x', 080H, 'c', 0a5H, 0f1H, 097H, 'A'
	DB	012H, 0cH, 'O-', 0e2H, 0adH, 0ebH, 0ebH, 010H, 0a2H, 098H, 0ddH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@
CONST	SEGMENT
??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@ DB 0faH
	DB	's', 0b0H, 08H, 09dH, 'V', 0a2H, 084H, 0efH, 0b0H, 0f0H, 'ul', 089H
	DB	0bH, 0e9H, 0b1H, 0b5H, 0dbH, 0ddH, 08eH, 0e8H, 01aH, '6U', 0f8H
	DB	'>3', 0b2H, '''', 09dH, '9', 0bfH, '>', 084H, 082H, 'y', 0a7H, '"'
	DB	0c8H, 06H, 0b4H, 085H, 0a4H, '~g', 0c8H, 07H, 0b9H, 'F', 0a3H, '7'
	DB	0beH, 0e8H, 094H, '&t''', 088H, 'Y', 0e1H, '2', 092H, 0fbH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@
CONST	SEGMENT
??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@ DB 016H
	DB	'Kz{', 0fcH, 0f8H, 019H, 0e2H, 0e3H, 095H, 0fbH, 0e7H, ';V', 0e0H
	DB	0a3H, 087H, 0bdH, 'd".', 083H, 01fH, 0d6H, 010H, '''', 0cH, 0d7H
	DB	0eaH, '%', 05H, 'T', 097H, 'X', 0bfH, 'u', 0c0H, 'Z', 099H, 'J'
	DB	'm', 03H, 'Oe', 0f8H, 0f0H, 0e6H, 0fdH, 0caH, 0eaH, 0b1H, 0a3H
	DB	'MJkKcn', 07H, 0aH, '8', 0bcH, 0e7H, '7', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@
CONST	SEGMENT
??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@ DB 087H
	DB	0aaH, '|', 0deH, 0a5H, 0efH, 'a', 09dH, 'O', 0f0H, 0b4H, '$', 01aH
	DB	01dH, 'l', 0b0H, '#y', 0f4H, 0e2H, 0ceH, 'N', 0c2H, 'xz', 0d0H
	DB	0b3H, 05H, 'E', 0e1H, '|', 0deH, 0daH, 0a8H, '3', 0b7H, 0d6H, 0b8H
	DB	0a7H, 02H, 03H, 08bH, '''N', 0aeH, 0a3H, 0f4H, 0e4H, 0beH, 09dH
	DB	091H, 'N', 0ebH, 'a', 0f1H, 'p.il :', 012H, 'hT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@
CONST	SEGMENT
??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@ DB 'This is a '
	DB	'test using a larger than block-size key and a larger than blo'
	DB	'ck-size data. The key needs to be hashed before being used by'
	DB	' the HMAC algorithm.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@
CONST	SEGMENT
??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@ DB 'Test Using '
	DB	'Larger Than Block-Size Key - Hash Key First', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@
CONST	SEGMENT
??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@ DB 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@
CONST	SEGMENT
??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@ DB 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@
CONST	SEGMENT
??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@ DB 'what do '
	DB	'ya want for nothing?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08BPPJKMC@Hi?5There?$AA@
CONST	SEGMENT
??_C@_08BPPJKMC@Hi?5There?$AA@ DB 'Hi There', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@
CONST	SEGMENT
??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@ DB 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@
CONST	SEGMENT
??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@ DB 01H
	DB	02H, 03H, 04H, 05H, 06H, 07H, 08H, 09H, 0aH, 0bH, 0cH, 0dH, 0eH
	DB	0fH, 010H, 011H, 012H, 013H, 014H, 015H, 016H, 017H, 018H, 019H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@
CONST	SEGMENT
??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@ DB 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDLGGHEL@Jefe?$AA@
CONST	SEGMENT
??_C@_04HDLGGHEL@Jefe?$AA@ DB 'Jefe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@
CONST	SEGMENT
??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@ DB 0bH
	DB	0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH
	DB	0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@ DB 'AES', 00H	;  ?? ::FNODOBFM::`string'
tripledes_vectors DB 01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	0feH
	DB	0dcH
	DB	0baH
	DB	098H
	DB	076H
	DB	054H
	DB	032H
	DB	010H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0e7H
	DB	0deH
	DB	0bH
	DB	07cH
	DB	06H
	DB	0aeH
	DB	05eH
	DB	0eH
	DB	0d5H
XTS_vectors DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	01cH
	DB	03bH
	DB	03aH
	DB	010H
	DB	02fH
	DB	077H
	DB	03H
	DB	086H
	DB	0e4H
	DB	083H
	DB	06cH
	DB	099H
	DB	0e3H
	DB	070H
	DB	0cfH
	DB	09bH
	DB	0eaH
	DB	00H
	DB	080H
	DB	03fH
	DB	05eH
	DB	048H
	DB	023H
	DB	057H
	DB	0a4H
	DB	0aeH
	DB	012H
	DB	0d4H
	DB	014H
	DB	0a3H
	DB	0e6H
	DB	03bH
	DB	05dH
	DB	031H
	DB	0e2H
	DB	076H
	DB	0f8H
	DB	0feH
	DB	04aH
	DB	08dH
	DB	066H
	DB	0b3H
	DB	017H
	DB	0f9H
	DB	0acH
	DB	068H
	DB	03fH
	DB	044H
	DB	068H
	DB	0aH
	DB	086H
	DB	0acH
	DB	035H
	DB	0adH
	DB	0fcH
	DB	033H
	DB	045H
	DB	0beH
	DB	0feH
	DB	0cbH
	DB	04bH
	DB	0b1H
	DB	088H
	DB	0fdH
	DB	057H
	DB	076H
	DB	092H
	DB	06cH
	DB	049H
	DB	0a3H
	DB	09H
	DB	05eH
	DB	0b1H
	DB	08H
	DB	0fdH
	DB	010H
	DB	098H
	DB	0baH
	DB	0ecH
	DB	070H
	DB	0aaH
	DB	0a6H
	DB	069H
	DB	099H
	DB	0a7H
	DB	02aH
	DB	082H
	DB	0f2H
	DB	07dH
	DB	084H
	DB	08bH
	DB	021H
	DB	0d4H
	DB	0a7H
	DB	041H
	DB	0b0H
	DB	0c5H
	DB	0cdH
	DB	04dH
	DB	05fH
	DB	0ffH
	DB	09dH
	DB	0acH
	DB	089H
	DB	0aeH
	DB	0baH
	DB	012H
	DB	029H
	DB	061H
	DB	0d0H
	DB	03aH
	DB	075H
	DB	071H
	DB	023H
	DB	0e9H
	DB	087H
	DB	0fH
	DB	08aH
	DB	0cfH
	DB	010H
	DB	00H
	DB	02H
	DB	08H
	DB	087H
	DB	089H
	DB	014H
	DB	029H
	DB	0caH
	DB	02aH
	DB	03eH
	DB	07aH
	DB	07dH
	DB	07dH
	DB	0f7H
	DB	0b1H
	DB	03H
	DB	055H
	DB	016H
	DB	05cH
	DB	08bH
	DB	09aH
	DB	06dH
	DB	0aH
	DB	07dH
	DB	0e8H
	DB	0b0H
	DB	062H
	DB	0c4H
	DB	050H
	DB	0dH
	DB	0c4H
	DB	0cdH
	DB	012H
	DB	0cH
	DB	0fH
	DB	074H
	DB	018H
	DB	0daH
	DB	0e3H
	DB	0d0H
	DB	0b5H
	DB	078H
	DB	01cH
	DB	034H
	DB	080H
	DB	03fH
	DB	0a7H
	DB	054H
	DB	021H
	DB	0c7H
	DB	090H
	DB	0dfH
	DB	0e1H
	DB	0deH
	DB	018H
	DB	034H
	DB	0f2H
	DB	080H
	DB	0d7H
	DB	066H
	DB	07bH
	DB	032H
	DB	07fH
	DB	06cH
	DB	08cH
	DB	0d7H
	DB	055H
	DB	07eH
	DB	012H
	DB	0acH
	DB	03aH
	DB	0fH
	DB	093H
	DB	0ecH
	DB	05H
	DB	0c5H
	DB	02eH
	DB	04H
	DB	093H
	DB	0efH
	DB	031H
	DB	0a1H
	DB	02dH
	DB	03dH
	DB	092H
	DB	060H
	DB	0f7H
	DB	09aH
	DB	028H
	DB	09dH
	DB	06aH
	DB	037H
	DB	09bH
	DB	0c7H
	DB	0cH
	DB	050H
	DB	084H
	DB	014H
	DB	073H
	DB	0d1H
	DB	0a8H
	DB	0ccH
	DB	081H
	DB	0ecH
	DB	058H
	DB	03eH
	DB	096H
	DB	045H
	DB	0e0H
	DB	07bH
	DB	08dH
	DB	096H
	DB	070H
	DB	065H
	DB	05bH
	DB	0a5H
	DB	0bbH
	DB	0cfH
	DB	0ecH
	DB	0c6H
	DB	0dcH
	DB	039H
	DB	066H
	DB	038H
	DB	0aH
	DB	0d8H
	DB	0feH
	DB	0cbH
	DB	017H
	DB	0b6H
	DB	0baH
	DB	02H
	DB	046H
	DB	09aH
	DB	02H
	DB	0aH
	DB	084H
	DB	0e1H
	DB	08eH
	DB	08fH
	DB	084H
	DB	025H
	DB	020H
	DB	070H
	DB	0c1H
	DB	03eH
	DB	09fH
	DB	01fH
	DB	028H
	DB	09bH
	DB	0e5H
	DB	04fH
	DB	0bcH
	DB	048H
	DB	014H
	DB	057H
	DB	077H
	DB	08fH
	DB	061H
	DB	060H
	DB	015H
	DB	0e1H
	DB	032H
	DB	07aH
	DB	02H
	DB	0b1H
	DB	040H
	DB	0f1H
	DB	050H
	DB	05eH
	DB	0b3H
	DB	09H
	DB	032H
	DB	06dH
	DB	068H
	DB	037H
	DB	08fH
	DB	083H
	DB	074H
	DB	059H
	DB	05cH
	DB	084H
	DB	09dH
	DB	084H
	DB	0f4H
	DB	0c3H
	DB	033H
	DB	0ecH
	DB	044H
	DB	023H
	DB	088H
	DB	051H
	DB	043H
	DB	0cbH
	DB	047H
	DB	0bdH
	DB	071H
	DB	0c5H
	DB	0edH
	DB	0aeH
	DB	09bH
	DB	0e6H
	DB	09aH
	DB	02fH
	DB	0feH
	DB	0ceH
	DB	0b1H
	DB	0beH
	DB	0c9H
	DB	0deH
	DB	024H
	DB	04fH
	DB	0beH
	DB	015H
	DB	099H
	DB	02bH
	DB	011H
	DB	0b7H
	DB	07cH
	DB	04H
	DB	0fH
	DB	012H
	DB	0bdH
	DB	08fH
	DB	06aH
	DB	097H
	DB	05aH
	DB	044H
	DB	0a0H
	DB	0f9H
	DB	0cH
	DB	029H
	DB	0a9H
	DB	0abH
	DB	0c3H
	DB	0d4H
	DB	0d8H
	DB	093H
	DB	092H
	DB	072H
	DB	084H
	DB	0c5H
	DB	087H
	DB	054H
	DB	0ccH
	DB	0e2H
	DB	094H
	DB	052H
	DB	09fH
	DB	086H
	DB	014H
	DB	0dcH
	DB	0d2H
	DB	0abH
	DB	0a9H
	DB	091H
	DB	092H
	DB	05fH
	DB	0edH
	DB	0c4H
	DB	0aeH
	DB	074H
	DB	0ffH
	DB	0acH
	DB	06eH
	DB	033H
	DB	03bH
	DB	093H
	DB	0ebH
	DB	04aH
	DB	0ffH
	DB	04H
	DB	079H
	DB	0daH
	DB	09aH
	DB	041H
	DB	0eH
	DB	044H
	DB	050H
	DB	0e0H
	DB	0ddH
	DB	07aH
	DB	0e4H
	DB	0c6H
	DB	0e2H
	DB	091H
	DB	09H
	DB	00H
	DB	057H
	DB	05dH
	DB	0a4H
	DB	01H
	DB	0fcH
	DB	07H
	DB	05H
	DB	09fH
	DB	064H
	DB	05eH
	DB	08bH
	DB	07eH
	DB	09bH
	DB	0fdH
	DB	0efH
	DB	033H
	DB	094H
	DB	030H
	DB	054H
	DB	0ffH
	DB	084H
	DB	01H
	DB	014H
	DB	093H
	DB	0c2H
	DB	07bH
	DB	034H
	DB	029H
	DB	0eaH
	DB	0edH
	DB	0b4H
	DB	0edH
	DB	053H
	DB	076H
	DB	044H
	DB	01aH
	DB	077H
	DB	0edH
	DB	043H
	DB	085H
	DB	01aH
	DB	0d7H
	DB	07fH
	DB	016H
	DB	0f5H
	DB	041H
	DB	0dfH
	DB	0d2H
	DB	069H
	DB	0d5H
	DB	0dH
	DB	06aH
	DB	05fH
	DB	014H
	DB	0fbH
	DB	0aH
	DB	0abH
	DB	01cH
	DB	0bbH
	DB	04cH
	DB	015H
	DB	050H
	DB	0beH
	DB	097H
	DB	0f7H
	DB	0abH
	DB	040H
	DB	066H
	DB	019H
	DB	03cH
	DB	04cH
	DB	0aaH
	DB	077H
	DB	03dH
	DB	0adH
	DB	038H
	DB	01H
	DB	04bH
	DB	0d2H
	DB	09H
	DB	02fH
	DB	0a7H
	DB	055H
	DB	0c8H
	DB	024H
	DB	0bbH
	DB	05eH
	DB	054H
	DB	0c4H
	DB	0f3H
	DB	06fH
	DB	0fdH
	DB	0a9H
	DB	0fcH
	DB	0eaH
	DB	070H
	DB	0b9H
	DB	0c6H
	DB	0e6H
	DB	093H
	DB	0e1H
	DB	048H
	DB	0c1H
	DB	051H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	077H
	DB	0a3H
	DB	012H
	DB	051H
	DB	061H
	DB	08aH
	DB	015H
	DB	0e6H
	DB	0b9H
	DB	02dH
	DB	01dH
	DB	066H
	DB	0dfH
	DB	0feH
	DB	07bH
	DB	050H
	DB	0b5H
	DB	0bH
	DB	0adH
	DB	055H
	DB	023H
	DB	05H
	DB	0baH
	DB	02H
	DB	017H
	DB	0a6H
	DB	010H
	DB	068H
	DB	08eH
	DB	0ffH
	DB	07eH
	DB	011H
	DB	0e1H
	DB	0d0H
	DB	022H
	DB	054H
	DB	038H
	DB	0e0H
	DB	093H
	DB	024H
	DB	02dH
	DB	06dH
	DB	0b2H
	DB	074H
	DB	0fdH
	DB	0e8H
	DB	01H
	DB	0d4H
	DB	0caH
	DB	0e0H
	DB	06fH
	DB	020H
	DB	092H
	DB	0c7H
	DB	028H
	DB	0b2H
	DB	047H
	DB	085H
	DB	059H
	DB	0dfH
	DB	058H
	DB	0e8H
	DB	037H
	DB	0c2H
	DB	046H
	DB	09eH
	DB	0e4H
	DB	0a4H
	DB	0faH
	DB	079H
	DB	04eH
	DB	04bH
	DB	0bcH
	DB	07fH
	DB	039H
	DB	0bcH
	DB	02H
	DB	06eH
	DB	03cH
	DB	0b7H
	DB	02cH
	DB	033H
	DB	0b0H
	DB	088H
	DB	08fH
	DB	025H
	DB	0b4H
	DB	0acH
	DB	0f5H
	DB	06aH
	DB	02aH
	DB	098H
	DB	04H
	DB	0f1H
	DB	0ceH
	DB	06dH
	DB	03dH
	DB	06eH
	DB	01dH
	DB	0c6H
	DB	0caH
	DB	018H
	DB	01dH
	DB	04bH
	DB	054H
	DB	061H
	DB	079H
	DB	0d5H
	DB	055H
	DB	044H
	DB	0aaH
	DB	077H
	DB	060H
	DB	0c4H
	DB	0dH
	DB	06H
	DB	074H
	DB	015H
	DB	039H
	DB	0c7H
	DB	0e3H
	DB	0cdH
	DB	09dH
	DB	02fH
	DB	066H
	DB	050H
	DB	0b2H
	DB	01H
	DB	03fH
	DB	0d0H
	DB	0eeH
	DB	0b8H
	DB	0c2H
	DB	0b8H
	DB	0e3H
	DB	0d8H
	DB	0d2H
	DB	040H
	DB	0ccH
	DB	0aeH
	DB	02dH
	DB	04cH
	DB	098H
	DB	032H
	DB	0aH
	DB	074H
	DB	042H
	DB	0e1H
	DB	0c8H
	DB	0d7H
	DB	05aH
	DB	042H
	DB	0d6H
	DB	0e6H
	DB	0cfH
	DB	0a4H
	DB	0c2H
	DB	0ecH
	DB	0a1H
	DB	079H
	DB	08dH
	DB	015H
	DB	08cH
	DB	07aH
	DB	0ecH
	DB	0dfH
	DB	082H
	DB	049H
	DB	0fH
	DB	024H
	DB	0bbH
	DB	09bH
	DB	038H
	DB	0e1H
	DB	08H
	DB	0bcH
	DB	0daH
	DB	012H
	DB	0c3H
	DB	0faH
	DB	0f9H
	DB	0a2H
	DB	011H
	DB	041H
	DB	0c3H
	DB	061H
	DB	03bH
	DB	058H
	DB	036H
	DB	07fH
	DB	092H
	DB	02aH
	DB	0aaH
	DB	026H
	DB	0cdH
	DB	022H
	DB	0f2H
	DB	03dH
	DB	070H
	DB	08dH
	DB	0aeH
	DB	069H
	DB	09aH
	DB	0d7H
	DB	0cbH
	DB	040H
	DB	0a8H
	DB	0adH
	DB	0bH
	DB	06eH
	DB	027H
	DB	084H
	DB	097H
	DB	03dH
	DB	0cbH
	DB	060H
	DB	056H
	DB	084H
	DB	0c0H
	DB	08bH
	DB	08dH
	DB	069H
	DB	098H
	DB	0c6H
	DB	09aH
	DB	0acH
	DB	04H
	DB	099H
	DB	021H
	DB	087H
	DB	01eH
	DB	0bbH
	DB	065H
	DB	030H
	DB	01aH
	DB	046H
	DB	019H
	DB	0caH
	DB	080H
	DB	0ecH
	DB	0b4H
	DB	085H
	DB	0a3H
	DB	01dH
	DB	074H
	DB	042H
	DB	023H
	DB	0ceH
	DB	08dH
	DB	0dcH
	DB	023H
	DB	094H
	DB	082H
	DB	08dH
	DB	06aH
	DB	080H
	DB	047H
	DB	0cH
	DB	09H
	DB	02fH
	DB	05bH
	DB	0a4H
	DB	013H
	DB	0c3H
	DB	037H
	DB	08fH
	DB	0a6H
	DB	05H
	DB	042H
	DB	055H
	DB	0c6H
	DB	0f9H
	DB	0dfH
	DB	044H
	DB	095H
	DB	086H
	DB	02bH
	DB	0bbH
	DB	032H
	DB	087H
	DB	068H
	DB	01fH
	DB	093H
	DB	01bH
	DB	068H
	DB	07cH
	DB	088H
	DB	08aH
	DB	0bfH
	DB	084H
	DB	04dH
	DB	0fcH
	DB	08fH
	DB	0c2H
	DB	083H
	DB	031H
	DB	0e5H
	DB	079H
	DB	092H
	DB	08cH
	DB	0d1H
	DB	02bH
	DB	0d2H
	DB	039H
	DB	0aH
	DB	0e1H
	DB	023H
	DB	0cfH
	DB	03H
	DB	081H
	DB	08dH
	DB	014H
	DB	0deH
	DB	0ddH
	DB	0e5H
	DB	0c0H
	DB	0c2H
	DB	04cH
	DB	08aH
	DB	0b0H
	DB	018H
	DB	0bfH
	DB	0caH
	DB	075H
	DB	0caH
	DB	09H
	DB	06fH
	DB	02dH
	DB	053H
	DB	01fH
	DB	03dH
	DB	016H
	DB	019H
	DB	0e7H
	DB	085H
	DB	0f1H
	DB	0adH
	DB	0a4H
	DB	037H
	DB	0caH
	DB	0b9H
	DB	02eH
	DB	098H
	DB	05H
	DB	058H
	DB	0b3H
	DB	0dcH
	DB	0e1H
	DB	047H
	DB	04aH
	DB	0fbH
	DB	075H
	DB	0bfH
	DB	0edH
	DB	0bfH
	DB	08fH
	DB	0f5H
	DB	04cH
	DB	0b2H
	DB	061H
	DB	08eH
	DB	02H
	DB	044H
	DB	0c9H
	DB	0acH
	DB	0dH
	DB	03cH
	DB	066H
	DB	0fbH
	DB	051H
	DB	059H
	DB	08cH
	DB	0d2H
	DB	0dbH
	DB	011H
	DB	0f9H
	DB	0beH
	DB	039H
	DB	079H
	DB	01aH
	DB	0beH
	DB	044H
	DB	07cH
	DB	063H
	DB	09H
	DB	04fH
	DB	07cH
	DB	045H
	DB	03bH
	DB	07fH
	DB	0f8H
	DB	07cH
	DB	0b5H
	DB	0bbH
	DB	036H
	DB	0b7H
	DB	0c7H
	DB	09eH
	DB	0fbH
	DB	08H
	DB	072H
	DB	0d1H
	DB	070H
	DB	058H
	DB	0b8H
	DB	03bH
	DB	015H
	DB	0abH
	DB	08H
	DB	066H
	DB	0adH
	DB	08aH
	DB	058H
	DB	065H
	DB	06cH
	DB	05aH
	DB	07eH
	DB	020H
	DB	0dbH
	DB	0dfH
	DB	030H
	DB	08bH
	DB	024H
	DB	061H
	DB	0d9H
	DB	07cH
	DB	0eH
	DB	0c0H
	DB	02H
	DB	04aH
	DB	027H
	DB	015H
	DB	05H
	DB	052H
	DB	049H
	DB	0cfH
	DB	03bH
	DB	047H
	DB	08dH
	DB	0ddH
	DB	047H
	DB	040H
	DB	0deH
	DB	065H
	DB	04fH
	DB	075H
	DB	0caH
	DB	068H
	DB	06eH
	DB	0dH
	DB	073H
	DB	045H
	DB	0c6H
	DB	09eH
	DB	0d5H
	DB	0cH
	DB	0dcH
	DB	02aH
	DB	08bH
	DB	033H
	DB	02bH
	DB	01fH
	DB	088H
	DB	024H
	DB	010H
	DB	08aH
	DB	0c9H
	DB	037H
	DB	0ebH
	DB	05H
	DB	05H
	DB	085H
	DB	060H
	DB	08eH
	DB	0e7H
	DB	034H
	DB	09H
	DB	07fH
	DB	0c0H
	DB	090H
	DB	054H
	DB	0fbH
	DB	0ffH
	DB	089H
	DB	0eeH
	DB	0aeH
	DB	0eaH
	DB	079H
	DB	01fH
	DB	04aH
	DB	07aH
	DB	0b1H
	DB	0f9H
	DB	086H
	DB	082H
	DB	094H
	DB	0a4H
	DB	0f9H
	DB	0e2H
	DB	07bH
	DB	042H
	DB	0afH
	DB	081H
	DB	00H
	DB	0cbH
	DB	09dH
	DB	059H
	DB	0ceH
	DB	0f9H
	DB	064H
	DB	058H
	DB	03H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	0e3H
	DB	087H
	DB	0aaH
	DB	0a5H
	DB	08bH
	DB	0a4H
	DB	083H
	DB	0afH
	DB	0a7H
	DB	0e8H
	DB	0ebH
	DB	046H
	DB	097H
	DB	078H
	DB	031H
	DB	07eH
	DB	0cfH
	DB	04cH
	DB	0f5H
	DB	073H
	DB	0aaH
	DB	09dH
	DB	04eH
	DB	0acH
	DB	023H
	DB	0f2H
	DB	0cdH
	DB	0f9H
	DB	014H
	DB	0e4H
	DB	0e2H
	DB	00H
	DB	0a8H
	DB	0b4H
	DB	090H
	DB	0e4H
	DB	02eH
	DB	0e6H
	DB	046H
	DB	080H
	DB	02dH
	DB	0c6H
	DB	0eeH
	DB	02bH
	DB	047H
	DB	01bH
	DB	027H
	DB	081H
	DB	095H
	DB	0d6H
	DB	09H
	DB	018H
	DB	0ecH
	DB	0ecH
	DB	0b4H
	DB	04bH
	DB	0f7H
	DB	099H
	DB	066H
	DB	0f8H
	DB	03fH
	DB	0abH
	DB	0a0H
	DB	049H
	DB	092H
	DB	098H
	DB	0ebH
	DB	0c6H
	DB	099H
	DB	0c0H
	DB	0c8H
	DB	063H
	DB	047H
	DB	015H
	DB	0a3H
	DB	020H
	DB	0bbH
	DB	04fH
	DB	07H
	DB	05dH
	DB	062H
	DB	02eH
	DB	074H
	DB	0c8H
	DB	0c9H
	DB	032H
	DB	00H
	DB	04fH
	DB	025H
	DB	0b4H
	DB	01eH
	DB	036H
	DB	010H
	DB	025H
	DB	0b5H
	DB	0a8H
	DB	078H
	DB	015H
	DB	039H
	DB	01fH
	DB	061H
	DB	08H
	DB	0fcH
	DB	04aH
	DB	0faH
	DB	06aH
	DB	05H
	DB	0d9H
	DB	030H
	DB	03cH
	DB	06bH
	DB	0a6H
	DB	08aH
	DB	012H
	DB	08aH
	DB	055H
	DB	070H
	DB	05dH
	DB	041H
	DB	059H
	DB	085H
	DB	083H
	DB	02fH
	DB	0deH
	DB	0aaH
	DB	0e6H
	DB	0c8H
	DB	0e1H
	DB	091H
	DB	010H
	DB	0e8H
	DB	04dH
	DB	01bH
	DB	01fH
	DB	019H
	DB	09aH
	DB	026H
	DB	092H
	DB	011H
	DB	09eH
	DB	0dcH
	DB	096H
	DB	013H
	DB	026H
	DB	058H
	DB	0f0H
	DB	09dH
	DB	0a7H
	DB	0c6H
	DB	023H
	DB	0efH
	DB	0ceH
	DB	0c7H
	DB	012H
	DB	053H
	DB	07aH
	DB	03dH
	DB	094H
	DB	0c0H
	DB	0bfH
	DB	05dH
	DB	07eH
	DB	035H
	DB	02eH
	DB	0c9H
	DB	04aH
	DB	0e5H
	DB	079H
	DB	07fH
	DB	0dbH
	DB	037H
	DB	07dH
	DB	0c1H
	DB	055H
	DB	011H
	DB	050H
	DB	072H
	DB	01aH
	DB	0dfH
	DB	015H
	DB	0bdH
	DB	026H
	DB	0a8H
	DB	0efH
	DB	0c2H
	DB	0fcH
	DB	0aaH
	DB	0d5H
	DB	068H
	DB	081H
	DB	0faH
	DB	09eH
	DB	062H
	DB	046H
	DB	02cH
	DB	028H
	DB	0f3H
	DB	0aH
	DB	0e1H
	DB	0ceH
	DB	0acH
	DB	0a9H
	DB	03cH
	DB	034H
	DB	05cH
	DB	0f2H
	DB	043H
	DB	0b7H
	DB	03fH
	DB	054H
	DB	02eH
	DB	020H
	DB	074H
	DB	0a7H
	DB	05H
	DB	0bdH
	DB	026H
	DB	043H
	DB	0bbH
	DB	09fH
	DB	07cH
	DB	0c7H
	DB	09bH
	DB	0b6H
	DB	0e7H
	DB	09H
	DB	01eH
	DB	0a6H
	DB	0e2H
	DB	032H
	DB	0dfH
	DB	0fH
	DB	09aH
	DB	0d0H
	DB	0d6H
	DB	0cfH
	DB	050H
	DB	023H
	DB	027H
	DB	087H
	DB	06dH
	DB	082H
	DB	020H
	DB	07aH
	DB	0bfH
	DB	021H
	DB	015H
	DB	0cdH
	DB	0acH
	DB	0f6H
	DB	0d5H
	DB	0a4H
	DB	08fH
	DB	06cH
	DB	018H
	DB	079H
	DB	0a6H
	DB	05bH
	DB	011H
	DB	05fH
	DB	0fH
	DB	08bH
	DB	03cH
	DB	0b3H
	DB	0c5H
	DB	09dH
	DB	015H
	DB	0ddH
	DB	08cH
	DB	076H
	DB	09bH
	DB	0c0H
	DB	014H
	DB	079H
	DB	05aH
	DB	018H
	DB	037H
	DB	0f3H
	DB	090H
	DB	01bH
	DB	058H
	DB	045H
	DB	0ebH
	DB	049H
	DB	01aH
	DB	0dfH
	DB	0efH
	DB	0e0H
	DB	097H
	DB	0b1H
	DB	0faH
	DB	030H
	DB	0a1H
	DB	02fH
	DB	0c1H
	DB	0f6H
	DB	05bH
	DB	0a2H
	DB	029H
	DB	05H
	DB	03H
	DB	015H
	DB	039H
	DB	097H
	DB	01aH
	DB	010H
	DB	0f2H
	DB	0f3H
	DB	06cH
	DB	032H
	DB	01bH
	DB	0b5H
	DB	013H
	DB	031H
	DB	0cdH
	DB	0efH
	DB	0b3H
	DB	09eH
	DB	039H
	DB	064H
	DB	0c7H
	DB	0efH
	DB	07H
	DB	099H
	DB	094H
	DB	0f5H
	DB	0b6H
	DB	09bH
	DB	02eH
	DB	0ddH
	DB	083H
	DB	0a7H
	DB	01eH
	DB	0f5H
	DB	049H
	DB	097H
	DB	01eH
	DB	0e9H
	DB	03fH
	DB	044H
	DB	0eaH
	DB	0c3H
	DB	093H
	DB	08fH
	DB	0cdH
	DB	0d6H
	DB	01dH
	DB	01H
	DB	0faH
	DB	071H
	DB	079H
	DB	09dH
	DB	0a3H
	DB	0a8H
	DB	09H
	DB	01cH
	DB	04cH
	DB	048H
	DB	0aaH
	DB	09eH
	DB	0d2H
	DB	063H
	DB	0ffH
	DB	07H
	DB	049H
	DB	0dfH
	DB	095H
	DB	0d4H
	DB	04fH
	DB	0efH
	DB	06aH
	DB	0bH
	DB	0b5H
	DB	078H
	DB	0ecH
	DB	069H
	DB	045H
	DB	06aH
	DB	0a5H
	DB	040H
	DB	08aH
	DB	0e3H
	DB	02cH
	DB	07aH
	DB	0f0H
	DB	08aH
	DB	0d7H
	DB	0baH
	DB	089H
	DB	021H
	DB	028H
	DB	07eH
	DB	03bH
	DB	0beH
	DB	0e3H
	DB	01bH
	DB	076H
	DB	07bH
	DB	0e0H
	DB	06aH
	DB	0eH
	DB	070H
	DB	05cH
	DB	086H
	DB	04aH
	DB	076H
	DB	091H
	DB	037H
	DB	0dfH
	DB	028H
	DB	029H
	DB	022H
	DB	083H
	DB	0eaH
	DB	081H
	DB	0a2H
	DB	048H
	DB	02H
	DB	041H
	DB	0b4H
	DB	04dH
	DB	099H
	DB	021H
	DB	0cdH
	DB	0beH
	DB	0c1H
	DB	0bcH
	DB	028H
	DB	0dcH
	DB	01fH
	DB	0daH
	DB	011H
	DB	04bH
	DB	0d8H
	DB	0e5H
	DB	021H
	DB	07aH
	DB	0c9H
	DB	0d8H
	DB	0ebH
	DB	0afH
	DB	0a7H
	DB	020H
	DB	0e9H
	DB	0daH
	DB	04fH
	DB	09aH
	DB	0ceH
	DB	023H
	DB	01cH
	DB	0c9H
	DB	049H
	DB	0e5H
	DB	0b9H
	DB	06fH
	DB	0e7H
	DB	06fH
	DB	0fcH
	DB	021H
	DB	06H
	DB	03fH
	DB	0ddH
	DB	0c8H
	DB	03aH
	DB	06bH
	DB	086H
	DB	079H
	DB	0c0H
	DB	0dH
	DB	035H
	DB	0e0H
	DB	095H
	DB	076H
	DB	0a8H
	DB	075H
	DB	030H
	DB	05bH
	DB	0edH
	DB	05fH
	DB	036H
	DB	0edH
	DB	024H
	DB	02cH
	DB	089H
	DB	00H
	DB	0ddH
	DB	01fH
	DB	0a9H
	DB	065H
	DB	0bcH
	DB	095H
	DB	0dH
	DB	0fcH
	DB	0e0H
	DB	09bH
	DB	013H
	DB	022H
	DB	063H
	DB	0a1H
	DB	0eeH
	DB	0f5H
	DB	02dH
	DB	0d6H
	DB	088H
	DB	08cH
	DB	030H
	DB	09fH
	DB	05aH
	DB	07dH
	DB	071H
	DB	028H
	DB	026H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	0bfH
	DB	053H
	DB	0d2H
	DB	0daH
	DB	0deH
	DB	078H
	DB	0e8H
	DB	022H
	DB	0a4H
	DB	0d9H
	DB	049H
	DB	0a9H
	DB	0bcH
	DB	067H
	DB	066H
	DB	0b0H
	DB	01bH
	DB	06H
	DB	0a8H
	DB	0efH
	DB	070H
	DB	0d2H
	DB	067H
	DB	048H
	DB	0c6H
	DB	0a7H
	DB	0fcH
	DB	036H
	DB	0d8H
	DB	0aH
	DB	0e4H
	DB	0c5H
	DB	052H
	DB	0fH
	DB	07cH
	DB	04aH
	DB	0b0H
	DB	0acH
	DB	085H
	DB	044H
	DB	042H
	DB	04fH
	DB	0a4H
	DB	05H
	DB	016H
	DB	02fH
	DB	0efH
	DB	05aH
	DB	06bH
	DB	07fH
	DB	022H
	DB	094H
	DB	098H
	DB	06H
	DB	036H
	DB	018H
	DB	0d3H
	DB	09fH
	DB	00H
	DB	03H
	DB	0cbH
	DB	05fH
	DB	0b8H
	DB	0d1H
	DB	0c8H
	DB	06bH
	DB	064H
	DB	034H
	DB	097H
	DB	0daH
	DB	01fH
	DB	0f9H
	DB	045H
	DB	0c8H
	DB	0d3H
	DB	0beH
	DB	0deH
	DB	0caH
	DB	04fH
	DB	047H
	DB	097H
	DB	02H
	DB	0a7H
	DB	0a7H
	DB	035H
	DB	0f0H
	DB	043H
	DB	0ddH
	DB	0b1H
	DB	0d6H
	DB	0aaH
	DB	0adH
	DB	0e3H
	DB	0c4H
	DB	0a0H
	DB	0acH
	DB	07cH
	DB	0a7H
	DB	0f3H
	DB	0faH
	DB	052H
	DB	079H
	DB	0beH
	DB	0f5H
	DB	06fH
	DB	082H
	DB	0cdH
	DB	07aH
	DB	02fH
	DB	038H
	DB	067H
	DB	02eH
	DB	082H
	DB	048H
	DB	014H
	DB	0e1H
	DB	07H
	DB	00H
	DB	030H
	DB	0aH
	DB	05H
	DB	05eH
	DB	016H
	DB	030H
	DB	0b8H
	DB	0f1H
	DB	0cbH
	DB	0eH
	DB	091H
	DB	09fH
	DB	05eH
	DB	094H
	DB	020H
	DB	010H
	DB	0a4H
	DB	016H
	DB	0e2H
	DB	0bfH
	DB	048H
	DB	0cbH
	DB	046H
	DB	099H
	DB	03dH
	DB	03cH
	DB	0b6H
	DB	0a5H
	DB	01cH
	DB	019H
	DB	0baH
	DB	0cfH
	DB	086H
	DB	047H
	DB	085H
	DB	0a0H
	DB	0bH
	DB	0c2H
	DB	0ecH
	DB	0ffH
	DB	015H
	DB	0d3H
	DB	050H
	DB	087H
	DB	05bH
	DB	024H
	DB	06eH
	DB	0d5H
	DB	03eH
	DB	068H
	DB	0beH
	DB	06fH
	DB	055H
	DB	0bdH
	DB	07eH
	DB	05H
	DB	0cfH
	DB	0c2H
	DB	0b2H
	DB	0edH
	DB	064H
	DB	032H
	DB	019H
	DB	08aH
	DB	064H
	DB	044H
	DB	0b6H
	DB	0d8H
	DB	0c2H
	DB	047H
	DB	0faH
	DB	0b9H
	DB	041H
	DB	0f5H
	DB	069H
	DB	076H
	DB	08bH
	DB	05cH
	DB	042H
	DB	093H
	DB	066H
	DB	0f1H
	DB	0d3H
	DB	0f0H
	DB	0fH
	DB	03H
	DB	045H
	DB	0b9H
	DB	061H
	DB	023H
	DB	0d5H
	DB	062H
	DB	04H
	DB	0c0H
	DB	01cH
	DB	063H
	DB	0b2H
	DB	02cH
	DB	0e7H
	DB	08bH
	DB	0afH
	DB	011H
	DB	06eH
	DB	052H
	DB	05eH
	DB	0d9H
	DB	0fH
	DB	0deH
	DB	0a3H
	DB	09fH
	DB	0a4H
	DB	069H
	DB	049H
	DB	04dH
	DB	038H
	DB	066H
	DB	0c3H
	DB	01eH
	DB	05H
	DB	0f2H
	DB	095H
	DB	0ffH
	DB	021H
	DB	0feH
	DB	0a8H
	DB	0d4H
	DB	0e6H
	DB	0e1H
	DB	03dH
	DB	067H
	DB	0e4H
	DB	07cH
	DB	0e7H
	DB	022H
	DB	0e9H
	DB	069H
	DB	08aH
	DB	01cH
	DB	010H
	DB	048H
	DB	0d6H
	DB	08eH
	DB	0bcH
	DB	0deH
	DB	076H
	DB	0b8H
	DB	06fH
	DB	0cfH
	DB	097H
	DB	06eH
	DB	0abH
	DB	08aH
	DB	0a9H
	DB	079H
	DB	02H
	DB	068H
	DB	0b7H
	DB	06H
	DB	08eH
	DB	01H
	DB	07aH
	DB	08bH
	DB	09bH
	DB	074H
	DB	094H
	DB	09H
	DB	051H
	DB	04fH
	DB	010H
	DB	053H
	DB	02H
	DB	07fH
	DB	0d1H
	DB	06cH
	DB	037H
	DB	086H
	DB	0eaH
	DB	01bH
	DB	0acH
	DB	05fH
	DB	015H
	DB	0cbH
	DB	079H
	DB	071H
	DB	01eH
	DB	0e2H
	DB	0abH
	DB	0e8H
	DB	02fH
	DB	05cH
	DB	0f8H
	DB	0b1H
	DB	03aH
	DB	0e7H
	DB	030H
	DB	030H
	DB	0efH
	DB	05bH
	DB	09eH
	DB	044H
	DB	057H
	DB	0e7H
	DB	05dH
	DB	013H
	DB	04H
	DB	0f9H
	DB	088H
	DB	0d6H
	DB	02dH
	DB	0d6H
	DB	0fcH
	DB	04bH
	DB	094H
	DB	0edH
	DB	038H
	DB	0baH
	DB	083H
	DB	01dH
	DB	0a4H
	DB	0b7H
	DB	063H
	DB	049H
	DB	071H
	DB	0b6H
	DB	0cdH
	DB	08eH
	DB	0c3H
	DB	025H
	DB	0d9H
	DB	0c6H
	DB	01cH
	DB	00H
	DB	0f1H
	DB	0dfH
	DB	073H
	DB	062H
	DB	07eH
	DB	0d3H
	DB	074H
	DB	05aH
	DB	05eH
	DB	084H
	DB	089H
	DB	0f3H
	DB	0a9H
	DB	05cH
	DB	069H
	DB	063H
	DB	09cH
	DB	032H
	DB	0cdH
	DB	06eH
	DB	01dH
	DB	053H
	DB	07aH
	DB	085H
	DB	0f7H
	DB	05cH
	DB	0c8H
	DB	044H
	DB	072H
	DB	06eH
	DB	08aH
	DB	072H
	DB	0fcH
	DB	00H
	DB	077H
	DB	0adH
	DB	022H
	DB	00H
	DB	0fH
	DB	01dH
	DB	050H
	DB	078H
	DB	0f6H
	DB	0b8H
	DB	066H
	DB	031H
	DB	08cH
	DB	066H
	DB	08fH
	DB	01aH
	DB	0d0H
	DB	03dH
	DB	05aH
	DB	05fH
	DB	0ceH
	DB	0d5H
	DB	021H
	DB	09fH
	DB	02eH
	DB	0abH
	DB	0bdH
	DB	0aH
	DB	0a5H
	DB	0c0H
	DB	0f4H
	DB	060H
	DB	0d1H
	DB	083H
	DB	0f0H
	DB	044H
	DB	04H
	DB	0a0H
	DB	0d6H
	DB	0f4H
	DB	069H
	DB	055H
	DB	08eH
	DB	081H
	DB	0faH
	DB	0b2H
	DB	04aH
	DB	016H
	DB	079H
	DB	05H
	DB	0abH
	DB	04cH
	DB	078H
	DB	078H
	DB	050H
	DB	02aH
	DB	0d3H
	DB	0e3H
	DB	08fH
	DB	0dbH
	DB	0e6H
	DB	02aH
	DB	041H
	DB	055H
	DB	06cH
	DB	0ecH
	DB	037H
	DB	032H
	DB	057H
	DB	059H
	DB	053H
	DB	03cH
	DB	0e8H
	DB	0f2H
	DB	05fH
	DB	036H
	DB	07cH
	DB	087H
	DB	0bbH
	DB	055H
	DB	078H
	DB	0d6H
	DB	067H
	DB	0aeH
	DB	093H
	DB	0f9H
	DB	0e2H
	DB	0fdH
	DB	099H
	DB	0bcH
	DB	0bcH
	DB	05fH
	DB	02fH
	DB	0bbH
	DB	0a8H
	DB	08cH
	DB	0f6H
	DB	051H
	DB	061H
	DB	039H
	DB	042H
	DB	0fH
	DB	0cfH
	DB	0f3H
	DB	0b7H
	DB	036H
	DB	01dH
	DB	086H
	DB	032H
	DB	02cH
	DB	04bH
	DB	0d8H
	DB	04cH
	DB	082H
	DB	0f3H
	DB	035H
	DB	0abH
	DB	0b1H
	DB	052H
	DB	0c4H
	DB	0a9H
	DB	034H
	DB	011H
	DB	037H
	DB	03aH
	DB	0aaH
	DB	082H
	DB	020H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	064H
	DB	049H
	DB	07eH
	DB	05aH
	DB	083H
	DB	01eH
	DB	04aH
	DB	093H
	DB	02cH
	DB	09H
	DB	0beH
	DB	03eH
	DB	053H
	DB	093H
	DB	037H
	DB	06dH
	DB	0aaH
	DB	059H
	DB	095H
	DB	048H
	DB	0b8H
	DB	016H
	DB	03H
	DB	01dH
	DB	022H
	DB	04bH
	DB	0bfH
	DB	050H
	DB	0a8H
	DB	018H
	DB	0edH
	DB	023H
	DB	050H
	DB	0eaH
	DB	0e7H
	DB	0e9H
	DB	060H
	DB	087H
	DB	0c8H
	DB	0a0H
	DB	0dbH
	DB	051H
	DB	0adH
	DB	029H
	DB	0bH
	DB	0d0H
	DB	0cH
	DB	01aH
	DB	0c1H
	DB	062H
	DB	08H
	DB	057H
	DB	063H
	DB	05bH
	DB	0f2H
	DB	046H
	DB	0c1H
	DB	076H
	DB	0abH
	DB	046H
	DB	03bH
	DB	0e3H
	DB	0bH
	DB	080H
	DB	08dH
	DB	0a5H
	DB	048H
	DB	08H
	DB	01aH
	DB	0c8H
	DB	047H
	DB	0b1H
	DB	058H
	DB	0e1H
	DB	026H
	DB	04bH
	DB	0e2H
	DB	05bH
	DB	0b0H
	DB	091H
	DB	0bH
	DB	0bcH
	DB	092H
	DB	064H
	DB	071H
	DB	08H
	DB	08H
	DB	094H
	DB	015H
	DB	0d4H
	DB	05fH
	DB	0abH
	DB	01bH
	DB	03dH
	DB	026H
	DB	04H
	DB	0e8H
	DB	0a8H
	DB	0efH
	DB	0f1H
	DB	0aeH
	DB	040H
	DB	020H
	DB	0cfH
	DB	0a3H
	DB	099H
	DB	036H
	DB	0b6H
	DB	068H
	DB	027H
	DB	0b2H
	DB	03fH
	DB	037H
	DB	01bH
	DB	092H
	DB	020H
	DB	0bH
	DB	0e9H
	DB	02H
	DB	051H
	DB	0e6H
	DB	0d7H
	DB	03cH
	DB	05fH
	DB	086H
	DB	0deH
	DB	05fH
	DB	0d4H
	DB	0a9H
	DB	050H
	DB	078H
	DB	019H
	DB	033H
	DB	0d7H
	DB	09aH
	DB	028H
	DB	027H
	DB	02bH
	DB	078H
	DB	02aH
	DB	02eH
	DB	0c3H
	DB	013H
	DB	0efH
	DB	0dfH
	DB	0ccH
	DB	06H
	DB	028H
	DB	0f4H
	DB	03dH
	DB	074H
	DB	04cH
	DB	02dH
	DB	0c2H
	DB	0ffH
	DB	03dH
	DB	0cbH
	DB	066H
	DB	099H
	DB	09bH
	DB	050H
	DB	0c7H
	DB	0caH
	DB	089H
	DB	05bH
	DB	0cH
	DB	064H
	DB	079H
	DB	01eH
	DB	0eaH
	DB	0a5H
	DB	0f2H
	DB	094H
	DB	099H
	DB	0fbH
	DB	01cH
	DB	02H
	DB	06fH
	DB	084H
	DB	0ceH
	DB	05bH
	DB	05cH
	DB	072H
	DB	0baH
	DB	010H
	DB	083H
	DB	0cdH
	DB	0dbH
	DB	05cH
	DB	0e4H
	DB	054H
	DB	034H
	DB	063H
	DB	016H
	DB	065H
	DB	0c3H
	DB	033H
	DB	0b6H
	DB	0bH
	DB	011H
	DB	059H
	DB	03fH
	DB	0b2H
	DB	053H
	DB	0c5H
	DB	017H
	DB	09aH
	DB	02cH
	DB	08dH
	DB	0b8H
	DB	013H
	DB	078H
	DB	02aH
	DB	00H
	DB	048H
	DB	056H
	DB	0a1H
	DB	065H
	DB	030H
	DB	011H
	DB	0e9H
	DB	03fH
	DB	0b6H
	DB	0d8H
	DB	076H
	DB	0c1H
	DB	083H
	DB	066H
	DB	0ddH
	DB	086H
	DB	083H
	DB	0f5H
	DB	034H
	DB	012H
	DB	0c0H
	DB	0c1H
	DB	080H
	DB	0f9H
	DB	0c8H
	DB	048H
	DB	059H
	DB	02dH
	DB	059H
	DB	03fH
	DB	086H
	DB	09H
	DB	0caH
	DB	073H
	DB	063H
	DB	017H
	DB	0d3H
	DB	056H
	DB	0e1H
	DB	03eH
	DB	02bH
	DB	0ffH
	DB	03aH
	DB	09fH
	DB	059H
	DB	0cdH
	DB	09aH
	DB	0ebH
	DB	019H
	DB	0cdH
	DB	048H
	DB	025H
	DB	093H
	DB	0d8H
	DB	0c4H
	DB	061H
	DB	028H
	DB	0bbH
	DB	032H
	DB	042H
	DB	03bH
	DB	037H
	DB	0a9H
	DB	0adH
	DB	0fbH
	DB	048H
	DB	02bH
	DB	099H
	DB	045H
	DB	03fH
	DB	0beH
	DB	025H
	DB	0a4H
	DB	01bH
	DB	0f6H
	DB	0feH
	DB	0b4H
	DB	0aaH
	DB	0bH
	DB	0efH
	DB	05eH
	DB	0d2H
	DB	04bH
	DB	0f7H
	DB	03cH
	DB	076H
	DB	029H
	DB	078H
	DB	02H
	DB	054H
	DB	082H
	DB	0c1H
	DB	031H
	DB	015H
	DB	0e4H
	DB	01H
	DB	05aH
	DB	0acH
	DB	099H
	DB	02eH
	DB	056H
	DB	013H
	DB	0a3H
	DB	0b5H
	DB	0c2H
	DB	0f6H
	DB	085H
	DB	0b8H
	DB	047H
	DB	095H
	DB	0cbH
	DB	06eH
	DB	09bH
	DB	026H
	DB	056H
	DB	0d8H
	DB	0c8H
	DB	081H
	DB	057H
	DB	0e5H
	DB	02cH
	DB	042H
	DB	0f9H
	DB	078H
	DB	0d8H
	DB	063H
	DB	04cH
	DB	043H
	DB	0d0H
	DB	06fH
	DB	0eaH
	DB	092H
	DB	08fH
	DB	028H
	DB	022H
	DB	0e4H
	DB	065H
	DB	0aaH
	DB	065H
	DB	076H
	DB	0e9H
	DB	0bfH
	DB	041H
	DB	093H
	DB	084H
	DB	050H
	DB	06cH
	DB	0c3H
	DB	0ceH
	DB	03cH
	DB	054H
	DB	0acH
	DB	01aH
	DB	06fH
	DB	067H
	DB	0dcH
	DB	066H
	DB	0f3H
	DB	0b3H
	DB	01H
	DB	091H
	DB	0e6H
	DB	098H
	DB	038H
	DB	0bH
	DB	0c9H
	DB	099H
	DB	0b0H
	DB	05aH
	DB	0bcH
	DB	0e1H
	DB	09dH
	DB	0c0H
	DB	0c6H
	DB	0dcH
	DB	0c2H
	DB	0ddH
	DB	00H
	DB	01eH
	DB	0c5H
	DB	035H
	DB	0baH
	DB	018H
	DB	0deH
	DB	0b2H
	DB	0dfH
	DB	01aH
	DB	010H
	DB	010H
	DB	023H
	DB	010H
	DB	083H
	DB	018H
	DB	0c7H
	DB	05dH
	DB	0c9H
	DB	086H
	DB	011H
	DB	0a0H
	DB	09dH
	DB	0c4H
	DB	08aH
	DB	0aH
	DB	0cdH
	DB	0ecH
	DB	067H
	DB	06fH
	DB	0abH
	DB	0dfH
	DB	022H
	DB	02fH
	DB	07H
	DB	0e0H
	DB	026H
	DB	0f0H
	DB	059H
	DB	0b6H
	DB	072H
	DB	0b5H
	DB	06eH
	DB	05cH
	DB	0bcH
	DB	08eH
	DB	01dH
	DB	021H
	DB	0bbH
	DB	0d8H
	DB	067H
	DB	0ddH
	DB	092H
	DB	072H
	DB	012H
	DB	05H
	DB	046H
	DB	081H
	DB	0d7H
	DB	0eH
	DB	0a7H
	DB	037H
	DB	013H
	DB	04cH
	DB	0dfH
	DB	0ceH
	DB	093H
	DB	0b6H
	DB	0f8H
	DB	02aH
	DB	0e2H
	DB	024H
	DB	023H
	DB	027H
	DB	04eH
	DB	058H
	DB	0a0H
	DB	082H
	DB	01cH
	DB	0c5H
	DB	050H
	DB	02eH
	DB	02dH
	DB	0aH
	DB	0b4H
	DB	058H
	DB	05eH
	DB	094H
	DB	0deH
	DB	069H
	DB	075H
	DB	0beH
	DB	05eH
	DB	0bH
	DB	04eH
	DB	0fcH
	DB	0e5H
	DB	01cH
	DB	0d3H
	DB	0e7H
	DB	0cH
	DB	025H
	DB	0a1H
	DB	0fbH
	DB	0bbH
	DB	0d6H
	DB	09H
	DB	0d2H
	DB	073H
	DB	0adH
	DB	05bH
	DB	0dH
	DB	059H
	DB	063H
	DB	01cH
	DB	053H
	DB	01fH
	DB	06aH
	DB	0aH
	DB	057H
	DB	0b9H
bf_ecb_vectors DB 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	'N', 0f9H, 097H, 'Ea', 098H, 0ddH, 'x'
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	'Q', 086H, 'o', 0d5H, 0b8H, '^', 0cbH, 08aH
	DB	'0', 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	010H, 00H, 00H, 00H, 00H, 00H, 00H, 01H
	DB	'}', 085H, 'o', 09aH, 'a0c', 0f2H
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	'$f', 0ddH, 087H, 08bH, 096H, '<', 09dH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	'a', 0f9H, 0c3H, 080H, '"', 081H, 0b0H, 096H
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	'}', 0cH, 0c6H, '0', 0afH, 0daH, 01eH, 0c7H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	'N', 0f9H, 097H, 'Ea', 098H, 0ddH, 'x'
	DB	0feH, 0dcH, 0baH, 098H, 'vT2', 010H
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0aH, 0ceH, 0abH, 0fH, 0c6H, 0a0H, 0a2H, 08dH
	DB	'|', 0a1H, 010H, 'EJ', 01aH, 'nW'
	DB	01H, 0a1H, 0d6H, 0d0H, '9wgB'
	DB	'Y', 0c6H, 082H, 'E', 0ebH, 05H, '(+'
	DB	01H, '1', 0d9H, 'a', 09dH, 0c1H, '7n'
	DB	'\', 0d5H, 'L', 0a8H, '=', 0efH, 'W', 0daH
	DB	0b1H, 0b8H, 0ccH, 0bH, '%', 0fH, 09H, 0a0H
	DB	07H, 0a1H, 013H, '>J', 0bH, '&', 086H
	DB	02H, 'H', 0d4H, '8', 06H, 0f6H, 'qr'
	DB	017H, '0', 0e5H, 'w', 08bH, 0eaH, 01dH, 0a4H
	DB	'8IgL&', 02H, '1', 09eH
	DB	'QEKX-', 0dfH, 'D', 0aH
	DB	0a2H, '^xV', 0cfH, '&Q', 0ebH
	DB	04H, 0b9H, 015H, 0baH, 'C', 0feH, 0b5H, 0b6H
	DB	'B', 0fdH, 'D0YW', 07fH, 0a2H
	DB	'58', 082H, 0b1H, 09H, 0ceH, 08fH, 01aH
	DB	01H, 013H, 0b9H, 'p', 0fdH, '4', 0f2H, 0ceH
	DB	05H, 09bH, '^', 08H, 'Q', 0cfH, 014H, ':'
	DB	'H', 0f4H, 0d0H, 088H, 'L7', 099H, 018H
	DB	01H, 'p', 0f1H, 'uF', 08fH, 0b5H, 0e6H
	DB	07H, 'V', 0d8H, 0e0H, 'wGa', 0d2H
	DB	'C!', 093H, 0b7H, 089H, 'Q', 0fcH, 098H
	DB	'C)', 07fH, 0adH, '8', 0e3H, 's', 0feH
	DB	'v%', 014H, 0b8H, ')', 0bfH, 'Hj'
	DB	013H, 0f0H, 'AT', 0d6H, 09dH, 01aH, 0e5H
	DB	07H, 0a7H, 013H, 'pE', 0daH, '*', 016H
	DB	';', 0ddH, 011H, 090H, 'I7(', 02H
	DB	'.', 0edH, 0daH, 093H, 0ffH, 0d3H, 09cH, 'y'
	DB	04H, 'h', 091H, 04H, 0c2H, 0fdH, ';/'
	DB	'&', 095H, '_h5', 0afH, '`', 09aH
	DB	0d8H, 087H, 0e0H, '9<-', 0a6H, 0e3H
	DB	'7', 0d0H, 'k', 0b5H, 016H, 0cbH, 'uF'
	DB	016H, 'M^@O''R2'
	DB	'_', 099H, 0d0H, 'O[', 016H, '9i'
	DB	01fH, 08H, '&', 0dH, 01aH, 0c2H, 'F^'
	DB	'k', 05H, 'n', 018H, 'u', 09fH, '\', 0caH
	DB	'J', 05H, 'z;$', 0d3H, 097H, '{'
	DB	'X@#d', 01aH, 0baH, 'av'
	DB	00H, 'K', 0d6H, 0efH, 09H, 017H, '`b'
	DB	'E 1', 0c1H, 0e4H, 0faH, 0daH, 08eH
	DB	02H, 'X', 016H, 016H, 'F)', 0b0H, 07H
	DB	'H', 0dH, '9', 00H, 'n', 0e7H, 'b', 0f2H
	DB	'uU', 0aeH, '9', 0f5H, 09bH, 087H, 0bdH
	DB	'Iy>', 0bcH, 'y', 0b3H, '%', 08fH
	DB	'Cu@', 0c8H, 'i', 08fH, '<', 0faH
	DB	'S', 0c5H, '_', 09cH, 0b4H, 09fH, 0c0H, 019H
	DB	'O', 0b0H, '^', 015H, 015H, 0abH, 's', 0a7H
	DB	07H, '-C', 0a0H, 'w', 07H, 'R', 092H
	DB	'z', 08eH, '{', 0faH, 093H, '~', 089H, 0a3H
	DB	'I', 0e9H, ']mL', 0a2H, ')', 0bfH
	DB	02H, 0feH, 'Uw', 081H, 017H, 0f1H, '*'
	DB	0cfH, 09cH, ']zI', 086H, 0adH, 0b5H
	DB	01H, 083H, 010H, 0dcH, '@', 09bH, '&', 0d6H
	DB	01dH, 09dH, '\P', 018H, 0f7H, '(', 0c2H
	DB	0d1H, 0abH, 0b2H, 090H, 'e', 08bH, 0c7H, 'x'
	DB	01cH, 'X', 07fH, 01cH, 013H, 092H, 'O', 0efH
	DB	'0U2(mo)Z'
	DB	'U', 0cbH, '7t', 0d1H, '>', 0f2H, 01H
	DB	01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0faH, '4', 0ecH, 'HG', 0b2H, 'h', 0b2H
	DB	01fH, 01fH, 01fH, 01fH, 0eH, 0eH, 0eH, 0eH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0a7H, 090H, 'yQ', 08H, 0eaH, '<', 0aeH
	DB	0e0H, 0feH, 0e0H, 0feH, 0f1H, 0feH, 0f1H, 0feH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0c3H, 09eH, 07H, '-', 09fH, 0acH, 'c', 01dH
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	01H, 'I3', 0e0H, 0cdH, 0afH, 0f6H, 0e4H
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	0f2H, 01eH, 09aH, 'w', 0b7H, 01cH, 'I', 0bcH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	'$YF', 088H, 'WT6', 09aH
	DB	0feH, 0dcH, 0baH, 098H, 'vT2', 010H
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	'k\Z', 09cH, ']', 09eH, 0aH, 'Z'
cast_ecb_vectors DB 01H, '#Eg', 012H, '4Vx#Eg', 089H, '4Vx', 09aH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	'#', 08bH, 'O', 0e5H, 084H, '~D', 0b2H
aes_ecb_vectors DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	00H
	DB	011H
	DB	022H
	DB	033H
	DB	044H
	DB	055H
	DB	066H
	DB	077H
	DB	088H
	DB	099H
	DB	0aaH
	DB	0bbH
	DB	0ccH
	DB	0ddH
	DB	0eeH
	DB	0ffH
	DB	08eH
	DB	0a2H
	DB	0b7H
	DB	0caH
	DB	051H
	DB	067H
	DB	045H
	DB	0bfH
	DB	0eaH
	DB	0fcH
	DB	049H
	DB	090H
	DB	04bH
	DB	049H
	DB	060H
	DB	089H
serpent_vectors DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	0deH
	DB	026H
	DB	09fH
	DB	0f8H
	DB	033H
	DB	0e4H
	DB	032H
	DB	0b8H
	DB	05bH
	DB	02eH
	DB	088H
	DB	0d2H
	DB	070H
	DB	01cH
	DB	0e7H
	DB	05cH
twofish_vectors DB 0d4H
	DB	03bH
	DB	0b7H
	DB	055H
	DB	06eH
	DB	0a3H
	DB	02eH
	DB	046H
	DB	0f2H
	DB	0a2H
	DB	082H
	DB	0b7H
	DB	0d4H
	DB	05bH
	DB	04eH
	DB	0dH
	DB	057H
	DB	0ffH
	DB	073H
	DB	09dH
	DB	04dH
	DB	0c9H
	DB	02cH
	DB	01bH
	DB	0d7H
	DB	0fcH
	DB	01H
	DB	070H
	DB	0cH
	DB	0c8H
	DB	021H
	DB	06fH
	DB	090H
	DB	0afH
	DB	0e9H
	DB	01bH
	DB	0b2H
	DB	088H
	DB	054H
	DB	04fH
	DB	02cH
	DB	032H
	DB	0dcH
	DB	023H
	DB	09bH
	DB	026H
	DB	035H
	DB	0e6H
	DB	06cH
	DB	0b4H
	DB	056H
	DB	01cH
	DB	040H
	DB	0bfH
	DB	0aH
	DB	097H
	DB	05H
	DB	093H
	DB	01cH
	DB	0b6H
	DB	0d4H
	DB	08H
	DB	0e7H
	DB	0faH
hmac_sha512_test_keys DQ FLAT:??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@
	DQ	FLAT:??_C@_04HDLGGHEL@Jefe?$AA@
	DQ	FLAT:??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@
	DQ	FLAT:??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@
	DQ	FLAT:??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@
	DQ	FLAT:??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@
hmac_sha512_test_data DQ FLAT:??_C@_08BPPJKMC@Hi?5There?$AA@
	DQ	FLAT:??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@
	DQ	FLAT:??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@
	DQ	FLAT:??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@
	DQ	FLAT:??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@
	DQ	FLAT:??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@
hmac_sha512_test_vectors DQ FLAT:??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@
	DQ	FLAT:??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@
	DQ	FLAT:??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@
	DQ	FLAT:??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@
	DQ	FLAT:??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@
	DQ	FLAT:??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@
hmac_sha1_test_keys DQ FLAT:??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@
	DQ	FLAT:??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@
	DQ	FLAT:??_C@_04HDLGGHEL@Jefe?$AA@
	DQ	FLAT:??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@
hmac_sha1_test_data DQ FLAT:??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@
	DQ	FLAT:??_C@_08BPPJKMC@Hi?5There?$AA@
	DQ	FLAT:??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@
	DQ	FLAT:??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@
hmac_sha1_test_vectors DQ FLAT:??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@
	DQ	FLAT:??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@
	DQ	FLAT:??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@
	DQ	FLAT:??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@
hmac_ripemd160_test_keys DQ FLAT:??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@
	DQ	FLAT:??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@
hmac_ripemd160_test_data DQ FLAT:??_C@_0P@ONGHGJEC@message?5digest?$AA@
	DQ	FLAT:??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@
hmac_ripemd160_test_vectors DQ FLAT:??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@
	DQ	FLAT:??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@
hmac_whirlpool_test_key DQ FLAT:??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
hmac_whirlpool_test_data DQ FLAT:??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
hmac_whirlpool_test_vectors DQ FLAT:??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@
	ORG $+8
lrw_vectors DB	0f8H
	DB	0d4H
	DB	076H
	DB	0ffH
	DB	0d6H
	DB	046H
	DB	0eeH
	DB	06cH
	DB	023H
	DB	084H
	DB	0cbH
	DB	01cH
	DB	077H
	DB	0d6H
	DB	019H
	DB	05dH
	DB	0feH
	DB	0f1H
	DB	0a9H
	DB	0f3H
	DB	07bH
	DB	0bcH
	DB	08dH
	DB	021H
	DB	0a7H
	DB	09cH
	DB	021H
	DB	0f8H
	DB	0cbH
	DB	090H
	DB	02H
	DB	089H
	DB	0a8H
	DB	045H
	DB	034H
	DB	08eH
	DB	0c8H
	DB	0c5H
	DB	0b5H
	DB	0f1H
	DB	026H
	DB	0f5H
	DB	0eH
	DB	076H
	DB	0feH
	DB	0fdH
	DB	01bH
	DB	01eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	0bdH
	DB	06H
	DB	0b8H
	DB	0e1H
	DB	0dbH
	DB	098H
	DB	089H
	DB	09eH
	DB	0c4H
	DB	098H
	DB	0e4H
	DB	091H
	DB	0cfH
	DB	01cH
	DB	070H
	DB	02bH
	DB	0fbH
	DB	076H
	DB	015H
	DB	0b2H
	DB	03dH
	DB	080H
	DB	089H
	DB	01dH
	DB	0d4H
	DB	070H
	DB	098H
	DB	0bH
	DB	0c7H
	DB	095H
	DB	084H
	DB	0c8H
	DB	0b2H
	DB	0fbH
	DB	064H
	DB	0ceH
	DB	060H
	DB	097H
	DB	087H
	DB	08dH
	DB	017H
	DB	0fcH
	DB	0e4H
	DB	05aH
	DB	049H
	DB	0e8H
	DB	030H
	DB	0b7H
	DB	06eH
	DB	078H
	DB	017H
	DB	0e7H
	DB	02dH
	DB	05eH
	DB	012H
	DB	0d4H
	DB	060H
	DB	064H
	DB	04H
	DB	07aH
	DB	0f1H
	DB	02fH
	DB	09eH
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	05bH
	DB	090H
	DB	08eH
	DB	0c1H
	DB	0abH
	DB	0ddH
	DB	067H
	DB	05fH
	DB	03dH
	DB	069H
	DB	08aH
	DB	095H
	DB	053H
	DB	0c8H
	DB	09cH
	DB	0e5H
?key1@?1??TestSectorBufEncryption@@9@9 DB 027H		; `TestSectorBufEncryption'::`2'::key1
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
PUBLIC	__$ArrayPad$
PUBLIC	test_hmac_whirlpool
;	COMDAT pdata
; File c:\users\public\desktop\projects\ciphershed\src\common\tests.c
pdata	SEGMENT
$pdata$test_hmac_whirlpool DD imagerel $LN4
	DD	imagerel $LN4+158
	DD	imagerel $unwind$test_hmac_whirlpool
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$test_hmac_whirlpool DD 031b19H
	DD	0120109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	080H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT test_hmac_whirlpool
_TEXT	SEGMENT
digest$ = 64
__$ArrayPad$ = 128
test_hmac_whirlpool PROC				; COMDAT

; 1643 : {

$LN4:
  00000	40 57		 push	 rdi
  00002	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1644 : 	unsigned char digest[WHIRLPOOL_DIGESTSIZE];
; 1645 : 
; 1646 : 	hmac_whirlpool (hmac_whirlpool_test_key, 64, hmac_whirlpool_test_data, (int) strlen (hmac_whirlpool_test_data), digest, WHIRLPOOL_DIGESTSIZE);

  0001b	33 c0		 xor	 eax, eax
  0001d	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00024	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR hmac_whirlpool_test_data
  0002b	f2 ae		 repne scasb
  0002d	48 f7 d1	 not	 rcx
  00030	48 83 e9 01	 sub	 rcx, 1
  00034	c7 44 24 28 40
	00 00 00	 mov	 DWORD PTR [rsp+40], 64	; 00000040H
  0003c	48 8d 44 24 40	 lea	 rax, QWORD PTR digest$[rsp]
  00041	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00046	44 8b c9	 mov	 r9d, ecx
  00049	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR hmac_whirlpool_test_data
  00050	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00055	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR hmac_whirlpool_test_key
  0005c	e8 00 00 00 00	 call	 hmac_whirlpool

; 1647 : 	if (memcmp (digest, hmac_whirlpool_test_vectors, WHIRLPOOL_DIGESTSIZE) != 0)

  00061	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00067	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR hmac_whirlpool_test_vectors
  0006e	48 8d 4c 24 40	 lea	 rcx, QWORD PTR digest$[rsp]
  00073	e8 00 00 00 00	 call	 memcmp
  00078	85 c0		 test	 eax, eax
  0007a	74 04		 je	 SHORT $LN1@test_hmac_

; 1648 : 		return FALSE;

  0007c	33 c0		 xor	 eax, eax
  0007e	eb 05		 jmp	 SHORT $LN2@test_hmac_
$LN1@test_hmac_:

; 1649 : 
; 1650 : 	return TRUE;

  00080	b8 01 00 00 00	 mov	 eax, 1
$LN2@test_hmac_:

; 1651 : }

  00085	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0008d	48 33 cc	 xor	 rcx, rsp
  00090	e8 00 00 00 00	 call	 __security_check_cookie
  00095	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  0009c	5f		 pop	 rdi
  0009d	c3		 ret	 0
test_hmac_whirlpool ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	test_hmac_sha1
;	COMDAT pdata
pdata	SEGMENT
$pdata$test_hmac_sha1 DD imagerel $LN10
	DD	imagerel $LN10+296
	DD	imagerel $unwind$test_hmac_sha1
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$test_hmac_sha1 DD 021519H
	DD	07002d206H
	DD	imagerel __GSHandlerCheck
	DD	060H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT test_hmac_sha1
_TEXT	SEGMENT
i$ = 48
nTestsPerformed$ = 52
digest$29349 = 64
tv134 = 88
__$ArrayPad$ = 96
test_hmac_sha1 PROC					; COMDAT

; 1605 : {

$LN10:
  00000	40 57		 push	 rdi
  00002	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00006	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000d	48 33 c4	 xor	 rax, rsp
  00010	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1606 : 	// Deprecated/legacy
; 1607 : 
; 1608 : 	int nTestsPerformed = 0;

  00015	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR nTestsPerformed$[rsp], 0

; 1609 : 	int i;
; 1610 : 
; 1611 : 	for (i = 0; i < 3; i++)

  0001d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00025	eb 0b		 jmp	 SHORT $LN5@test_hmac_@2
$LN4@test_hmac_@2:
  00027	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0002b	83 c0 01	 add	 eax, 1
  0002e	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN5@test_hmac_@2:
  00032	83 7c 24 30 03	 cmp	 DWORD PTR i$[rsp], 3
  00037	0f 8d bb 00 00
	00		 jge	 $LN3@test_hmac_@2

; 1612 : 	{
; 1613 : 		char digest[SHA1_DIGESTSIZE];
; 1614 : 		hmac_sha1 (hmac_sha1_test_keys[i], (int) strlen (hmac_sha1_test_keys[i]), hmac_sha1_test_data[i], (int) strlen (hmac_sha1_test_data[i]), digest, SHA1_DIGESTSIZE);

  0003d	48 63 54 24 30	 movsxd	 rdx, DWORD PTR i$[rsp]
  00042	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:hmac_sha1_test_data
  00049	33 c0		 xor	 eax, eax
  0004b	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00052	48 8b 3c d7	 mov	 rdi, QWORD PTR [rdi+rdx*8]
  00056	f2 ae		 repne scasb
  00058	48 f7 d1	 not	 rcx
  0005b	48 83 e9 01	 sub	 rcx, 1
  0005f	4c 8b c9	 mov	 r9, rcx
  00062	4c 63 54 24 30	 movsxd	 r10, DWORD PTR i$[rsp]
  00067	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:hmac_sha1_test_data
  0006e	48 63 54 24 30	 movsxd	 rdx, DWORD PTR i$[rsp]
  00073	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:hmac_sha1_test_keys
  0007a	33 c0		 xor	 eax, eax
  0007c	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00083	48 8b 3c d7	 mov	 rdi, QWORD PTR [rdi+rdx*8]
  00087	f2 ae		 repne scasb
  00089	48 f7 d1	 not	 rcx
  0008c	48 83 e9 01	 sub	 rcx, 1
  00090	48 8b d1	 mov	 rdx, rcx
  00093	48 63 7c 24 30	 movsxd	 rdi, DWORD PTR i$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:hmac_sha1_test_keys
  0009f	c7 44 24 28 14
	00 00 00	 mov	 DWORD PTR [rsp+40], 20
  000a7	48 8d 44 24 40	 lea	 rax, QWORD PTR digest$29349[rsp]
  000ac	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b1	4f 8b 04 d0	 mov	 r8, QWORD PTR [r8+r10*8]
  000b5	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  000b9	e8 00 00 00 00	 call	 hmac_sha1

; 1615 : 		if (memcmp (digest, hmac_sha1_test_vectors[i], SHA1_DIGESTSIZE) != 0)

  000be	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:hmac_sha1_test_vectors
  000ca	41 b8 14 00 00
	00		 mov	 r8d, 20
  000d0	48 8b 14 ca	 mov	 rdx, QWORD PTR [rdx+rcx*8]
  000d4	48 8d 4c 24 40	 lea	 rcx, QWORD PTR digest$29349[rsp]
  000d9	e8 00 00 00 00	 call	 memcmp
  000de	85 c0		 test	 eax, eax
  000e0	74 06		 je	 SHORT $LN2@test_hmac_@2

; 1616 : 			return FALSE;

  000e2	33 c0		 xor	 eax, eax
  000e4	eb 2f		 jmp	 SHORT $LN6@test_hmac_@2

; 1617 : 		else

  000e6	eb 0b		 jmp	 SHORT $LN1@test_hmac_@2
$LN2@test_hmac_@2:

; 1618 : 			nTestsPerformed++;

  000e8	8b 44 24 34	 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  000ec	83 c0 01	 add	 eax, 1
  000ef	89 44 24 34	 mov	 DWORD PTR nTestsPerformed$[rsp], eax
$LN1@test_hmac_@2:

; 1619 : 	}

  000f3	e9 2f ff ff ff	 jmp	 $LN4@test_hmac_@2
$LN3@test_hmac_@2:

; 1620 : 
; 1621 : 	return (nTestsPerformed == 3);

  000f8	83 7c 24 34 03	 cmp	 DWORD PTR nTestsPerformed$[rsp], 3
  000fd	75 0a		 jne	 SHORT $LN8@test_hmac_@2
  000ff	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv134[rsp], 1
  00107	eb 08		 jmp	 SHORT $LN9@test_hmac_@2
$LN8@test_hmac_@2:
  00109	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv134[rsp], 0
$LN9@test_hmac_@2:
  00111	8b 44 24 58	 mov	 eax, DWORD PTR tv134[rsp]
$LN6@test_hmac_@2:

; 1622 : }

  00115	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0011a	48 33 cc	 xor	 rcx, rsp
  0011d	e8 00 00 00 00	 call	 __security_check_cookie
  00122	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00126	5f		 pop	 rdi
  00127	c3		 ret	 0
test_hmac_sha1 ENDP
PUBLIC	__$ArrayPad$
PUBLIC	test_hmac_sha512
;	COMDAT pdata
pdata	SEGMENT
$pdata$test_hmac_sha512 DD imagerel $LN10
	DD	imagerel $LN10+316
	DD	imagerel $unwind$test_hmac_sha512
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$test_hmac_sha512 DD 031b19H
	DD	0120109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	088H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT test_hmac_sha512
_TEXT	SEGMENT
i$ = 48
nTestsPerformed$ = 52
digest$29338 = 64
tv135 = 128
__$ArrayPad$ = 136
test_hmac_sha512 PROC					; COMDAT

; 1587 : {

$LN10:
  00000	40 57		 push	 rdi
  00002	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1588 : 	unsigned int i;
; 1589 : 	int nTestsPerformed = 0;

  0001b	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR nTestsPerformed$[rsp], 0

; 1590 : 
; 1591 : 	for (i = 0; i < sizeof (hmac_sha512_test_data) / sizeof(char *); i++)

  00023	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0002b	eb 0b		 jmp	 SHORT $LN5@test_hmac_@3
$LN4@test_hmac_@3:
  0002d	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN5@test_hmac_@3:
  00038	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0003c	48 83 f8 06	 cmp	 rax, 6
  00040	0f 83 b7 00 00
	00		 jae	 $LN3@test_hmac_@3

; 1592 : 	{
; 1593 : 		char digest[SHA512_DIGESTSIZE];
; 1594 : 		hmac_sha512 (hmac_sha512_test_keys[i], (int) strlen (hmac_sha512_test_keys[i]), hmac_sha512_test_data[i], (int) strlen (hmac_sha512_test_data[i]), digest, SHA512_DIGESTSIZE);

  00046	8b 54 24 30	 mov	 edx, DWORD PTR i$[rsp]
  0004a	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:hmac_sha512_test_data
  00051	33 c0		 xor	 eax, eax
  00053	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  0005a	48 8b 3c d7	 mov	 rdi, QWORD PTR [rdi+rdx*8]
  0005e	f2 ae		 repne scasb
  00060	48 f7 d1	 not	 rcx
  00063	48 83 e9 01	 sub	 rcx, 1
  00067	4c 8b c9	 mov	 r9, rcx
  0006a	44 8b 54 24 30	 mov	 r10d, DWORD PTR i$[rsp]
  0006f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:hmac_sha512_test_data
  00076	8b 54 24 30	 mov	 edx, DWORD PTR i$[rsp]
  0007a	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:hmac_sha512_test_keys
  00081	33 c0		 xor	 eax, eax
  00083	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  0008a	48 8b 3c d7	 mov	 rdi, QWORD PTR [rdi+rdx*8]
  0008e	f2 ae		 repne scasb
  00090	48 f7 d1	 not	 rcx
  00093	48 83 e9 01	 sub	 rcx, 1
  00097	48 8b d1	 mov	 rdx, rcx
  0009a	8b 7c 24 30	 mov	 edi, DWORD PTR i$[rsp]
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:hmac_sha512_test_keys
  000a5	c7 44 24 28 40
	00 00 00	 mov	 DWORD PTR [rsp+40], 64	; 00000040H
  000ad	48 8d 44 24 40	 lea	 rax, QWORD PTR digest$29338[rsp]
  000b2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b7	4f 8b 04 d0	 mov	 r8, QWORD PTR [r8+r10*8]
  000bb	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  000bf	e8 00 00 00 00	 call	 hmac_sha512

; 1595 : 		if (memcmp (digest, hmac_sha512_test_vectors[i], SHA512_DIGESTSIZE) != 0)

  000c4	8b 4c 24 30	 mov	 ecx, DWORD PTR i$[rsp]
  000c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:hmac_sha512_test_vectors
  000cf	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  000d5	48 8b 14 ca	 mov	 rdx, QWORD PTR [rdx+rcx*8]
  000d9	48 8d 4c 24 40	 lea	 rcx, QWORD PTR digest$29338[rsp]
  000de	e8 00 00 00 00	 call	 memcmp
  000e3	85 c0		 test	 eax, eax
  000e5	74 06		 je	 SHORT $LN2@test_hmac_@3

; 1596 : 			return FALSE;

  000e7	33 c0		 xor	 eax, eax
  000e9	eb 38		 jmp	 SHORT $LN6@test_hmac_@3

; 1597 : 		else

  000eb	eb 0b		 jmp	 SHORT $LN1@test_hmac_@3
$LN2@test_hmac_@3:

; 1598 : 			nTestsPerformed++;

  000ed	8b 44 24 34	 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  000f1	83 c0 01	 add	 eax, 1
  000f4	89 44 24 34	 mov	 DWORD PTR nTestsPerformed$[rsp], eax
$LN1@test_hmac_@3:

; 1599 : 	}

  000f8	e9 30 ff ff ff	 jmp	 $LN4@test_hmac_@3
$LN3@test_hmac_@3:

; 1600 : 
; 1601 : 	return (nTestsPerformed == 6);

  000fd	83 7c 24 34 06	 cmp	 DWORD PTR nTestsPerformed$[rsp], 6
  00102	75 0d		 jne	 SHORT $LN8@test_hmac_@3
  00104	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv135[rsp], 1
  0010f	eb 0b		 jmp	 SHORT $LN9@test_hmac_@3
$LN8@test_hmac_@3:
  00111	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv135[rsp], 0
$LN9@test_hmac_@3:
  0011c	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv135[rsp]
$LN6@test_hmac_@3:

; 1602 : }

  00123	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0012b	48 33 cc	 xor	 rcx, rsp
  0012e	e8 00 00 00 00	 call	 __security_check_cookie
  00133	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  0013a	5f		 pop	 rdi
  0013b	c3		 ret	 0
test_hmac_sha512 ENDP
PUBLIC	__$ArrayPad$
PUBLIC	test_hmac_ripemd160
;	COMDAT pdata
pdata	SEGMENT
$pdata$test_hmac_ripemd160 DD imagerel $LN10
	DD	imagerel $LN10+255
	DD	imagerel $unwind$test_hmac_ripemd160
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$test_hmac_ripemd160 DD 021519H
	DD	07002d206H
	DD	imagerel __GSHandlerCheck
	DD	060H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT test_hmac_ripemd160
_TEXT	SEGMENT
i$ = 48
nTestsPerformed$ = 52
digest$29361 = 64
tv128 = 88
__$ArrayPad$ = 96
test_hmac_ripemd160 PROC				; COMDAT

; 1625 : {

$LN10:
  00000	40 57		 push	 rdi
  00002	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00006	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000d	48 33 c4	 xor	 rax, rsp
  00010	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1626 : 	int nTestsPerformed = 0;

  00015	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR nTestsPerformed$[rsp], 0

; 1627 : 	unsigned int i;
; 1628 : 
; 1629 : 	for (i = 0; i < sizeof (hmac_ripemd160_test_data) / sizeof(char *); i++)

  0001d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00025	eb 0b		 jmp	 SHORT $LN5@test_hmac_@4
$LN4@test_hmac_@4:
  00027	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0002b	83 c0 01	 add	 eax, 1
  0002e	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN5@test_hmac_@4:
  00032	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00036	48 83 f8 02	 cmp	 rax, 2
  0003a	0f 83 8f 00 00
	00		 jae	 $LN3@test_hmac_@4

; 1630 : 	{
; 1631 : 		char digest[RIPEMD160_DIGESTSIZE];
; 1632 : 		hmac_ripemd160 (hmac_ripemd160_test_keys[i], RIPEMD160_DIGESTSIZE, hmac_ripemd160_test_data[i], (int) strlen (hmac_ripemd160_test_data[i]), digest);

  00040	8b 54 24 30	 mov	 edx, DWORD PTR i$[rsp]
  00044	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:hmac_ripemd160_test_data
  0004b	33 c0		 xor	 eax, eax
  0004d	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00054	48 8b 3c d7	 mov	 rdi, QWORD PTR [rdi+rdx*8]
  00058	f2 ae		 repne scasb
  0005a	48 f7 d1	 not	 rcx
  0005d	48 83 e9 01	 sub	 rcx, 1
  00061	4c 8b c9	 mov	 r9, rcx
  00064	8b 54 24 30	 mov	 edx, DWORD PTR i$[rsp]
  00068	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:hmac_ripemd160_test_data
  0006f	8b 7c 24 30	 mov	 edi, DWORD PTR i$[rsp]
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:hmac_ripemd160_test_keys
  0007a	48 8d 44 24 40	 lea	 rax, QWORD PTR digest$29361[rsp]
  0007f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00084	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  00088	ba 14 00 00 00	 mov	 edx, 20
  0008d	48 8b 0c f9	 mov	 rcx, QWORD PTR [rcx+rdi*8]
  00091	e8 00 00 00 00	 call	 hmac_ripemd160

; 1633 : 		if (memcmp (digest, hmac_ripemd160_test_vectors[i], RIPEMD160_DIGESTSIZE) != 0)

  00096	8b 4c 24 30	 mov	 ecx, DWORD PTR i$[rsp]
  0009a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:hmac_ripemd160_test_vectors
  000a1	41 b8 14 00 00
	00		 mov	 r8d, 20
  000a7	48 8b 14 ca	 mov	 rdx, QWORD PTR [rdx+rcx*8]
  000ab	48 8d 4c 24 40	 lea	 rcx, QWORD PTR digest$29361[rsp]
  000b0	e8 00 00 00 00	 call	 memcmp
  000b5	85 c0		 test	 eax, eax
  000b7	74 06		 je	 SHORT $LN2@test_hmac_@4

; 1634 : 			return FALSE;

  000b9	33 c0		 xor	 eax, eax
  000bb	eb 2f		 jmp	 SHORT $LN6@test_hmac_@4

; 1635 : 		else

  000bd	eb 0b		 jmp	 SHORT $LN1@test_hmac_@4
$LN2@test_hmac_@4:

; 1636 : 			nTestsPerformed++;

  000bf	8b 44 24 34	 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  000c3	83 c0 01	 add	 eax, 1
  000c6	89 44 24 34	 mov	 DWORD PTR nTestsPerformed$[rsp], eax
$LN1@test_hmac_@4:

; 1637 : 	}

  000ca	e9 58 ff ff ff	 jmp	 $LN4@test_hmac_@4
$LN3@test_hmac_@4:

; 1638 : 
; 1639 : 	return (nTestsPerformed == 2);

  000cf	83 7c 24 34 02	 cmp	 DWORD PTR nTestsPerformed$[rsp], 2
  000d4	75 0a		 jne	 SHORT $LN8@test_hmac_@4
  000d6	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv128[rsp], 1
  000de	eb 08		 jmp	 SHORT $LN9@test_hmac_@4
$LN8@test_hmac_@4:
  000e0	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv128[rsp], 0
$LN9@test_hmac_@4:
  000e8	8b 44 24 58	 mov	 eax, DWORD PTR tv128[rsp]
$LN6@test_hmac_@4:

; 1640 : }

  000ec	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f1	48 33 cc	 xor	 rcx, rsp
  000f4	e8 00 00 00 00	 call	 __security_check_cookie
  000f9	48 83 c4 70	 add	 rsp, 112		; 00000070H
  000fd	5f		 pop	 rdi
  000fe	c3		 ret	 0
test_hmac_ripemd160 ENDP
_TEXT	ENDS
PUBLIC	CipherInit2
;	COMDAT pdata
pdata	SEGMENT
$pdata$CipherInit2 DD imagerel $LN13
	DD	imagerel $LN13+268
	DD	imagerel $unwind$CipherInit2
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CipherInit2 DD 011701H
	DD	08217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT CipherInit2
_TEXT	SEGMENT
tv64 = 48
cipher$ = 80
key$ = 88
ks$ = 96
key_len$ = 104
CipherInit2 PROC					; COMDAT

; 534  : {

$LN13:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 535  : 	switch (cipher)

  00017	8b 44 24 50	 mov	 eax, DWORD PTR cipher$[rsp]
  0001b	89 44 24 30	 mov	 DWORD PTR tv64[rsp], eax
  0001f	8b 44 24 30	 mov	 eax, DWORD PTR tv64[rsp]
  00023	83 e8 01	 sub	 eax, 1
  00026	89 44 24 30	 mov	 DWORD PTR tv64[rsp], eax
  0002a	83 7c 24 30 05	 cmp	 DWORD PTR tv64[rsp], 5
  0002f	0f 87 99 00 00
	00		 ja	 $LN1@CipherInit@2
  00035	48 63 44 24 30	 movsxd	 rax, DWORD PTR tv64[rsp]
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00041	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN12@CipherInit@2[rcx+rax*4]
  00048	48 03 c1	 add	 rax, rcx
  0004b	ff e0		 jmp	 rax
$LN7@CipherInit@2:

; 536  : 	{
; 537  : 	case BLOWFISH:
; 538  : 		/* Deprecated/legacy */
; 539  : 		BlowfishSetKey (ks, key_len,  key); 

  0004d	4c 8b 44 24 58	 mov	 r8, QWORD PTR key$[rsp]
  00052	8b 54 24 68	 mov	 edx, DWORD PTR key_len$[rsp]
  00056	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ks$[rsp]
  0005b	e8 00 00 00 00	 call	 BlowfishSetKey

; 540  : 		break;

  00060	e9 88 00 00 00	 jmp	 $LN8@CipherInit@2
$LN6@CipherInit@2:

; 541  : 
; 542  : 	case AES:
; 543  : 		CipherInit(cipher,key,ks);

  00065	4c 8b 44 24 60	 mov	 r8, QWORD PTR ks$[rsp]
  0006a	48 8b 54 24 58	 mov	 rdx, QWORD PTR key$[rsp]
  0006f	8b 4c 24 50	 mov	 ecx, DWORD PTR cipher$[rsp]
  00073	e8 00 00 00 00	 call	 CipherInit

; 544  : 		break;

  00078	eb 73		 jmp	 SHORT $LN8@CipherInit@2
$LN5@CipherInit@2:

; 545  : 
; 546  : 	case CAST:
; 547  : 		/* Deprecated/legacy */
; 548  : 		CipherInit(cipher,key,ks);

  0007a	4c 8b 44 24 60	 mov	 r8, QWORD PTR ks$[rsp]
  0007f	48 8b 54 24 58	 mov	 rdx, QWORD PTR key$[rsp]
  00084	8b 4c 24 50	 mov	 ecx, DWORD PTR cipher$[rsp]
  00088	e8 00 00 00 00	 call	 CipherInit

; 549  : 		break;

  0008d	eb 5e		 jmp	 SHORT $LN8@CipherInit@2
$LN4@CipherInit@2:

; 550  : 
; 551  : 	case SERPENT:
; 552  : 		CipherInit(cipher,key,ks);

  0008f	4c 8b 44 24 60	 mov	 r8, QWORD PTR ks$[rsp]
  00094	48 8b 54 24 58	 mov	 rdx, QWORD PTR key$[rsp]
  00099	8b 4c 24 50	 mov	 ecx, DWORD PTR cipher$[rsp]
  0009d	e8 00 00 00 00	 call	 CipherInit

; 553  : 		break;

  000a2	eb 49		 jmp	 SHORT $LN8@CipherInit@2
$LN3@CipherInit@2:

; 554  : 
; 555  : 	case TRIPLEDES:
; 556  : 		/* Deprecated/legacy */
; 557  : 		CipherInit(cipher,key,ks);

  000a4	4c 8b 44 24 60	 mov	 r8, QWORD PTR ks$[rsp]
  000a9	48 8b 54 24 58	 mov	 rdx, QWORD PTR key$[rsp]
  000ae	8b 4c 24 50	 mov	 ecx, DWORD PTR cipher$[rsp]
  000b2	e8 00 00 00 00	 call	 CipherInit

; 558  : 		break;

  000b7	eb 34		 jmp	 SHORT $LN8@CipherInit@2
$LN2@CipherInit@2:

; 559  : 
; 560  : 	case TWOFISH:
; 561  : 		CipherInit(cipher,key,ks);

  000b9	4c 8b 44 24 60	 mov	 r8, QWORD PTR ks$[rsp]
  000be	48 8b 54 24 58	 mov	 rdx, QWORD PTR key$[rsp]
  000c3	8b 4c 24 50	 mov	 ecx, DWORD PTR cipher$[rsp]
  000c7	e8 00 00 00 00	 call	 CipherInit

; 562  : 		break;

  000cc	eb 1f		 jmp	 SHORT $LN8@CipherInit@2
$LN1@CipherInit@2:

; 563  : 
; 564  : 	default:			
; 565  : 		/* Unknown/wrong ID */
; 566  : 		TC_THROW_FATAL_EXCEPTION;

  000ce	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  000d7	45 33 c9	 xor	 r9d, r9d
  000da	45 33 c0	 xor	 r8d, r8d
  000dd	ba 36 02 00 00	 mov	 edx, 566		; 00000236H
  000e2	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN8@CipherInit@2:
$LN11@CipherInit@2:

; 567  : 	}
; 568  : }

  000ed	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f1	c3		 ret	 0
  000f2	66 90		 npad	 2
$LN12@CipherInit@2:
  000f4	00 00 00 00	 DD	 $LN6@CipherInit@2
  000f8	00 00 00 00	 DD	 $LN4@CipherInit@2
  000fc	00 00 00 00	 DD	 $LN2@CipherInit@2
  00100	00 00 00 00	 DD	 $LN7@CipherInit@2
  00104	00 00 00 00	 DD	 $LN5@CipherInit@2
  00108	00 00 00 00	 DD	 $LN3@CipherInit@2
CipherInit2 ENDP
PUBLIC	__$ArrayPad$
PUBLIC	test_pkcs5
;	COMDAT pdata
pdata	SEGMENT
$pdata$test_pkcs5 DD imagerel $LN15
	DD	imagerel $LN15+832
	DD	imagerel $unwind$test_pkcs5
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$test_pkcs5 DD 021919H
	DD	01f0107H
	DD	imagerel __GSHandlerCheck
	DD	0e0H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT test_pkcs5
_TEXT	SEGMENT
dk$ = 80
__$ArrayPad$ = 224
test_pkcs5 PROC						; COMDAT

; 1654 : {

$LN15:
  00000	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00007	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000e	48 33 c4	 xor	 rax, rsp
  00011	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1655 : 	char dk[144];
; 1656 : 
; 1657 : 	/* HMAC-SHA-512 tests */
; 1658 : 	if (!test_hmac_sha512())

  00019	e8 00 00 00 00	 call	 test_hmac_sha512
  0001e	85 c0		 test	 eax, eax
  00020	75 07		 jne	 SHORT $LN12@test_pkcs5

; 1659 : 		return FALSE;

  00022	33 c0		 xor	 eax, eax
  00024	e9 ff 02 00 00	 jmp	 $LN13@test_pkcs5
$LN12@test_pkcs5:

; 1660 : 
; 1661 : 	/* HMAC-SHA-1 tests (deprecated/legacy)  */
; 1662 : 	if (test_hmac_sha1() == FALSE)

  00029	e8 00 00 00 00	 call	 test_hmac_sha1
  0002e	85 c0		 test	 eax, eax
  00030	75 07		 jne	 SHORT $LN11@test_pkcs5

; 1663 : 		return FALSE;

  00032	33 c0		 xor	 eax, eax
  00034	e9 ef 02 00 00	 jmp	 $LN13@test_pkcs5
$LN11@test_pkcs5:

; 1664 : 
; 1665 : 	/* HMAC-RIPEMD-160 tests */
; 1666 : 	if (test_hmac_ripemd160() == FALSE)

  00039	e8 00 00 00 00	 call	 test_hmac_ripemd160
  0003e	85 c0		 test	 eax, eax
  00040	75 07		 jne	 SHORT $LN10@test_pkcs5

; 1667 : 		return FALSE;

  00042	33 c0		 xor	 eax, eax
  00044	e9 df 02 00 00	 jmp	 $LN13@test_pkcs5
$LN10@test_pkcs5:

; 1668 : 
; 1669 : 	/* HMAC-Whirlpool tests */
; 1670 : 	if (test_hmac_whirlpool() == FALSE)

  00049	e8 00 00 00 00	 call	 test_hmac_whirlpool
  0004e	85 c0		 test	 eax, eax
  00050	75 07		 jne	 SHORT $LN9@test_pkcs5

; 1671 : 		return FALSE;

  00052	33 c0		 xor	 eax, eax
  00054	e9 cf 02 00 00	 jmp	 $LN13@test_pkcs5
$LN9@test_pkcs5:

; 1672 : 
; 1673 : 	/* PKCS-5 test 1 with HMAC-SHA-512 used as the PRF */
; 1674 : 	derive_key_sha512 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  00059	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR [rsp+48], 4
  00061	48 8d 44 24 50	 lea	 rax, QWORD PTR dk$[rsp]
  00066	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0006b	c7 44 24 20 05
	00 00 00	 mov	 DWORD PTR [rsp+32], 5
  00073	41 b9 04 00 00
	00		 mov	 r9d, 4
  00079	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  00080	ba 08 00 00 00	 mov	 edx, 8
  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  0008c	e8 00 00 00 00	 call	 derive_key_sha512

; 1675 : 	if (memcmp (dk, "\x13\x64\xae\xf8", 4) != 0)

  00091	41 b8 04 00 00
	00		 mov	 r8d, 4
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KFFKJODL@?$BDd?$KO?x?$AA@FNODOBFM@
  0009e	48 8d 4c 24 50	 lea	 rcx, QWORD PTR dk$[rsp]
  000a3	e8 00 00 00 00	 call	 memcmp
  000a8	85 c0		 test	 eax, eax
  000aa	74 07		 je	 SHORT $LN8@test_pkcs5

; 1676 : 		return FALSE;

  000ac	33 c0		 xor	 eax, eax
  000ae	e9 75 02 00 00	 jmp	 $LN13@test_pkcs5
$LN8@test_pkcs5:

; 1677 : 
; 1678 : 	/* PKCS-5 test 2 with HMAC-SHA-512 used as the PRF (derives a key longer than the underlying
; 1679 : 	hash output size and block size) */
; 1680 : 	derive_key_sha512 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 144);

  000b3	c7 44 24 30 90
	00 00 00	 mov	 DWORD PTR [rsp+48], 144	; 00000090H
  000bb	48 8d 44 24 50	 lea	 rax, QWORD PTR dk$[rsp]
  000c0	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000c5	c7 44 24 20 05
	00 00 00	 mov	 DWORD PTR [rsp+32], 5
  000cd	41 b9 04 00 00
	00		 mov	 r9d, 4
  000d3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  000da	ba 08 00 00 00	 mov	 edx, 8
  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  000e6	e8 00 00 00 00	 call	 derive_key_sha512

; 1681 : 	if (memcmp (dk, "\x13\x64\xae\xf8\x0d\xf5\x57\x6c\x30\xd5\x71\x4c\xa7\x75\x3f\xfd\x00\xe5\x25\x8b\x39\xc7\x44\x7f\xce\x23\x3d\x08\x75\xe0\x2f\x48\xd6\x30\xd7\x00\xb6\x24\xdb\xe0\x5a\xd7\x47\xef\x52\xca\xa6\x34\x83\x47\xe5\xcb\xe9\x87\xf1\x20\x59\x6a\xe6\xa9\xcf\x51\x78\xc6\xb6\x23\xa6\x74\x0d\xe8\x91\xbe\x1a\xd0\x28\xcc\xce\x16\x98\x9a\xbe\xfb\xdc\x78\xc9\xe1\x7d\x72\x67\xce\xe1\x61\x56\x5f\x96\x68\xe6\xe1\xdd\xf4\xbf\x1b\x80\xe0\x19\x1c\xf4\xc4\xd3\xdd\xd5\xd5\x57\x2d\x83\xc7\xa3\x37\x87\xf4\x4e\xe0\xf6\xd8\x6d\x65\xdc\xa0\x52\xa3\x13\xbe\x81\xfc\x30\xbe\x7d\x69\x58\x34\xb6\xdd\x41\xc6", 144) != 0)

  000eb	41 b8 90 00 00
	00		 mov	 r8d, 144		; 00000090H
  000f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@FNODOBFM@
  000f8	48 8d 4c 24 50	 lea	 rcx, QWORD PTR dk$[rsp]
  000fd	e8 00 00 00 00	 call	 memcmp
  00102	85 c0		 test	 eax, eax
  00104	74 07		 je	 SHORT $LN7@test_pkcs5

; 1682 : 		return FALSE;

  00106	33 c0		 xor	 eax, eax
  00108	e9 1b 02 00 00	 jmp	 $LN13@test_pkcs5
$LN7@test_pkcs5:

; 1683 : 
; 1684 : 	/* PKCS-5 test 1 with HMAC-SHA-1 (deprecated/legacy) used as the PRF (derives a key longer than the underlying hash) */
; 1685 : 	derive_key_sha1 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 48);

  0010d	c7 44 24 30 30
	00 00 00	 mov	 DWORD PTR [rsp+48], 48	; 00000030H
  00115	48 8d 44 24 50	 lea	 rax, QWORD PTR dk$[rsp]
  0011a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0011f	c7 44 24 20 05
	00 00 00	 mov	 DWORD PTR [rsp+32], 5
  00127	41 b9 04 00 00
	00		 mov	 r9d, 4
  0012d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  00134	ba 08 00 00 00	 mov	 edx, 8
  00139	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  00140	e8 00 00 00 00	 call	 derive_key_sha1

; 1686 : 	if (memcmp (dk, "\x5c\x75\xce\xf0\x1a\x96\x0d\xf7\x4c\xb6\xb4\x9b\x9e\x38\xe6\xb5\x3b\x11\x80\xe3\x2f\xf7\xe0\xdd\xaa\xca\x8f\x81\x27\xf6\x9f\x4f\x1d\xc8\x2f\x48\x2d\xdb\x1a\x0a\xca\x90\xcb\x80\xb9\x2e\x90\x9e", 48) != 0)

  00145	41 b8 30 00 00
	00		 mov	 r8d, 48			; 00000030H
  0014b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@FNODOBFM@
  00152	48 8d 4c 24 50	 lea	 rcx, QWORD PTR dk$[rsp]
  00157	e8 00 00 00 00	 call	 memcmp
  0015c	85 c0		 test	 eax, eax
  0015e	74 07		 je	 SHORT $LN6@test_pkcs5

; 1687 : 		return FALSE;

  00160	33 c0		 xor	 eax, eax
  00162	e9 c1 01 00 00	 jmp	 $LN13@test_pkcs5
$LN6@test_pkcs5:

; 1688 : 
; 1689 : 	/* PKCS-5 test 2 with HMAC-SHA-1 (deprecated/legacy) used as the PRF */
; 1690 : 	derive_key_sha1 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  00167	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR [rsp+48], 4
  0016f	48 8d 44 24 50	 lea	 rax, QWORD PTR dk$[rsp]
  00174	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00179	c7 44 24 20 05
	00 00 00	 mov	 DWORD PTR [rsp+32], 5
  00181	41 b9 04 00 00
	00		 mov	 r9d, 4
  00187	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  0018e	ba 08 00 00 00	 mov	 edx, 8
  00193	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  0019a	e8 00 00 00 00	 call	 derive_key_sha1

; 1691 : 	if (memcmp (dk, "\x5c\x75\xce\xf0", 4) != 0)

  0019f	41 b8 04 00 00
	00		 mov	 r8d, 4
  001a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04BHFCCAHB@?2u?N?p?$AA@FNODOBFM@
  001ac	48 8d 4c 24 50	 lea	 rcx, QWORD PTR dk$[rsp]
  001b1	e8 00 00 00 00	 call	 memcmp
  001b6	85 c0		 test	 eax, eax
  001b8	74 07		 je	 SHORT $LN5@test_pkcs5

; 1692 : 		return FALSE;

  001ba	33 c0		 xor	 eax, eax
  001bc	e9 67 01 00 00	 jmp	 $LN13@test_pkcs5
$LN5@test_pkcs5:

; 1693 : 
; 1694 : #if 0	// This test is disabled because it uses 1200 iterations (to prevent startup slowdown)
; 1695 : 	/* PKCS-5 test 3 with HMAC-SHA-1 (deprecated/legacy) used as the PRF */
; 1696 : 	derive_key_sha1 ("password", 8, "ATHENA.MIT.EDUraeburn", 21, 1200, dk, 16);
; 1697 : 	if (memcmp (dk, "\x5c\x08\xeb\x61\xfd\xf7\x1e\x4e\x4e\xc3\xcf\x6b\xa1\xf5\x51\x2b", 16) != 0)
; 1698 : 		return FALSE;
; 1699 : #endif
; 1700 : 
; 1701 : 	/* PKCS-5 test 1 with HMAC-RIPEMD-160 used as the PRF */
; 1702 : 	derive_key_ripemd160 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  001c1	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR [rsp+48], 4
  001c9	48 8d 44 24 50	 lea	 rax, QWORD PTR dk$[rsp]
  001ce	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001d3	c7 44 24 20 05
	00 00 00	 mov	 DWORD PTR [rsp+32], 5
  001db	41 b9 04 00 00
	00		 mov	 r9d, 4
  001e1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  001e8	ba 08 00 00 00	 mov	 edx, 8
  001ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  001f4	e8 00 00 00 00	 call	 derive_key_ripemd160

; 1703 : 	if (memcmp (dk, "\x7a\x3d\x7c\x03", 4) != 0)

  001f9	41 b8 04 00 00
	00		 mov	 r8d, 4
  001ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04PODIBCAH@z?$DN?$HM?$AD?$AA@FNODOBFM@
  00206	48 8d 4c 24 50	 lea	 rcx, QWORD PTR dk$[rsp]
  0020b	e8 00 00 00 00	 call	 memcmp
  00210	85 c0		 test	 eax, eax
  00212	74 07		 je	 SHORT $LN4@test_pkcs5

; 1704 : 		return FALSE;

  00214	33 c0		 xor	 eax, eax
  00216	e9 0d 01 00 00	 jmp	 $LN13@test_pkcs5
$LN4@test_pkcs5:

; 1705 : 
; 1706 : 	/* PKCS-5 test 2 with HMAC-RIPEMD-160 used as the PRF (derives a key longer than the underlying hash) */
; 1707 : 	derive_key_ripemd160 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 48);

  0021b	c7 44 24 30 30
	00 00 00	 mov	 DWORD PTR [rsp+48], 48	; 00000030H
  00223	48 8d 44 24 50	 lea	 rax, QWORD PTR dk$[rsp]
  00228	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0022d	c7 44 24 20 05
	00 00 00	 mov	 DWORD PTR [rsp+32], 5
  00235	41 b9 04 00 00
	00		 mov	 r9d, 4
  0023b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  00242	ba 08 00 00 00	 mov	 edx, 8
  00247	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  0024e	e8 00 00 00 00	 call	 derive_key_ripemd160

; 1708 : 	if (memcmp (dk, "\x7a\x3d\x7c\x03\xe7\x26\x6b\xf8\x3d\x78\xfb\x29\xd2\x64\x1f\x56\xea\xf0\xe5\xf5\xcc\xc4\x3a\x31\xa8\x84\x70\xbf\xbd\x6f\x8e\x78\x24\x5a\xc0\x0a\xf6\xfa\xf0\xf6\xe9\x00\x47\x5f\x73\xce\xe1\x43", 48) != 0)

  00253	41 b8 30 00 00
	00		 mov	 r8d, 48			; 00000030H
  00259	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@FNODOBFM@
  00260	48 8d 4c 24 50	 lea	 rcx, QWORD PTR dk$[rsp]
  00265	e8 00 00 00 00	 call	 memcmp
  0026a	85 c0		 test	 eax, eax
  0026c	74 07		 je	 SHORT $LN3@test_pkcs5

; 1709 : 		return FALSE;

  0026e	33 c0		 xor	 eax, eax
  00270	e9 b3 00 00 00	 jmp	 $LN13@test_pkcs5
$LN3@test_pkcs5:

; 1710 : 
; 1711 : 	/* PKCS-5 test 1 with HMAC-Whirlpool used as the PRF */
; 1712 : 	derive_key_whirlpool ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  00275	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR [rsp+48], 4
  0027d	48 8d 44 24 50	 lea	 rax, QWORD PTR dk$[rsp]
  00282	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00287	c7 44 24 20 05
	00 00 00	 mov	 DWORD PTR [rsp+32], 5
  0028f	41 b9 04 00 00
	00		 mov	 r9d, 4
  00295	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  0029c	ba 08 00 00 00	 mov	 edx, 8
  002a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  002a8	e8 00 00 00 00	 call	 derive_key_whirlpool

; 1713 : 	if (memcmp (dk, "\x50\x7c\x36\x6f", 4) != 0)

  002ad	41 b8 04 00 00
	00		 mov	 r8d, 4
  002b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@
  002ba	48 8d 4c 24 50	 lea	 rcx, QWORD PTR dk$[rsp]
  002bf	e8 00 00 00 00	 call	 memcmp
  002c4	85 c0		 test	 eax, eax
  002c6	74 04		 je	 SHORT $LN2@test_pkcs5

; 1714 : 		return FALSE;

  002c8	33 c0		 xor	 eax, eax
  002ca	eb 5c		 jmp	 SHORT $LN13@test_pkcs5
$LN2@test_pkcs5:

; 1715 : 
; 1716 : 	/* PKCS-5 test 2 with HMAC-Whirlpool used as the PRF (derives a key longer than the underlying hash) */
; 1717 : 	derive_key_whirlpool ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 96);

  002cc	c7 44 24 30 60
	00 00 00	 mov	 DWORD PTR [rsp+48], 96	; 00000060H
  002d4	48 8d 44 24 50	 lea	 rax, QWORD PTR dk$[rsp]
  002d9	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  002de	c7 44 24 20 05
	00 00 00	 mov	 DWORD PTR [rsp+32], 5
  002e6	41 b9 04 00 00
	00		 mov	 r9d, 4
  002ec	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  002f3	ba 08 00 00 00	 mov	 edx, 8
  002f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  002ff	e8 00 00 00 00	 call	 derive_key_whirlpool

; 1718 : 	if (memcmp (dk, "\x50\x7c\x36\x6f\xee\x10\x2e\x9a\xe2\x8a\xd5\x82\x72\x7d\x27\x0f\xe8\x4d\x7f\x68\x7a\xcf\xb5\xe7\x43\x67\xaa\x98\x93\x52\x2b\x09\x6e\x42\xdf\x2c\x59\x4a\x91\x6d\x7e\x10\xae\xb2\x1a\x89\x8f\xb9\x8f\xe6\x31\xa9\xd8\x9f\x98\x26\xf4\xda\xcd\x7d\x65\x65\xde\x10\x95\x91\xb4\x84\x26\xae\x43\xa1\x00\x5b\x1e\xb8\x38\x97\xa4\x1e\x4b\xd2\x65\x64\xbc\xfa\x1f\x35\x85\xdb\x4f\x97\x65\x6f\xbd\x24", 96) != 0)

  00304	41 b8 60 00 00
	00		 mov	 r8d, 96			; 00000060H
  0030a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@
  00311	48 8d 4c 24 50	 lea	 rcx, QWORD PTR dk$[rsp]
  00316	e8 00 00 00 00	 call	 memcmp
  0031b	85 c0		 test	 eax, eax
  0031d	74 04		 je	 SHORT $LN1@test_pkcs5

; 1719 : 		return FALSE;

  0031f	33 c0		 xor	 eax, eax
  00321	eb 05		 jmp	 SHORT $LN13@test_pkcs5
$LN1@test_pkcs5:

; 1720 : 
; 1721 : 	return TRUE;

  00323	b8 01 00 00 00	 mov	 eax, 1
$LN13@test_pkcs5:

; 1722 : }

  00328	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00330	48 33 cc	 xor	 rcx, rsp
  00333	e8 00 00 00 00	 call	 __security_check_cookie
  00338	48 81 c4 f8 00
	00 00		 add	 rsp, 248		; 000000f8H
  0033f	c3		 ret	 0
test_pkcs5 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	LRWAesTest
;	COMDAT pdata
pdata	SEGMENT
$pdata$LRWAesTest DD imagerel $LN10
	DD	imagerel $LN10+377
	DD	imagerel $unwind$LRWAesTest
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$LRWAesTest DD 031a19H
	DD	07007a20bH
	DD	06006H
	DD	imagerel __GSHandlerCheck
	DD	040H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT LRWAesTest
_TEXT	SEGMENT
p$ = 40
i$ = 56
__$ArrayPad$ = 64
ci$ = 112
LRWAesTest PROC						; COMDAT

; 604  : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0000b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00012	48 33 c4	 xor	 rax, rsp
  00015	48 89 44 24 40	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 605  : 	/* Deprecated/legacy */
; 606  : 
; 607  : 	unsigned __int8 p[16];
; 608  : 	int i;
; 609  : 
; 610  : 	for (i = 0; i < LRW_TEST_COUNT; i++)

  0001a	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00022	eb 0b		 jmp	 SHORT $LN7@LRWAesTest
$LN6@LRWAesTest:
  00024	8b 44 24 38	 mov	 eax, DWORD PTR i$[rsp]
  00028	83 c0 01	 add	 eax, 1
  0002b	89 44 24 38	 mov	 DWORD PTR i$[rsp], eax
$LN7@LRWAesTest:
  0002f	83 7c 24 38 02	 cmp	 DWORD PTR i$[rsp], 2
  00034	0f 8d 26 01 00
	00		 jge	 $LN5@LRWAesTest

; 611  : 	{
; 612  : 		ci->ea = EAGetByName ("AES");

  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  00041	e8 00 00 00 00	 call	 EAGetByName
  00046	8b d0		 mov	 edx, eax
  00048	48 8b 44 24 70	 mov	 rax, QWORD PTR ci$[rsp]
  0004d	89 10		 mov	 DWORD PTR [rax], edx

; 613  : 		if (ci->ea == 0)

  0004f	48 8b 44 24 70	 mov	 rax, QWORD PTR ci$[rsp]
  00054	83 38 00	 cmp	 DWORD PTR [rax], 0
  00057	75 07		 jne	 SHORT $LN4@LRWAesTest

; 614  : 			return FALSE;

  00059	33 c0		 xor	 eax, eax
  0005b	e9 05 01 00 00	 jmp	 $LN8@LRWAesTest
$LN4@LRWAesTest:

; 615  : 
; 616  : 		ci->mode = LRW;

  00060	48 8b 44 24 70	 mov	 rax, QWORD PTR ci$[rsp]
  00065	c7 40 04 02 00
	00 00		 mov	 DWORD PTR [rax+4], 2

; 617  : 
; 618  : 		if (EAInit (ci->ea, lrw_vectors[i].key1, ci->ks) != ERR_SUCCESS)

  0006c	4c 8b 44 24 70	 mov	 r8, QWORD PTR ci$[rsp]
  00071	49 83 c0 08	 add	 r8, 8
  00075	48 63 44 24 38	 movsxd	 rax, DWORD PTR i$[rsp]
  0007a	48 6b c0 60	 imul	 rax, 96			; 00000060H
  0007e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:lrw_vectors
  00085	48 03 d0	 add	 rdx, rax
  00088	48 8b 44 24 70	 mov	 rax, QWORD PTR ci$[rsp]
  0008d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0008f	e8 00 00 00 00	 call	 EAInit
  00094	85 c0		 test	 eax, eax
  00096	74 07		 je	 SHORT $LN3@LRWAesTest

; 619  : 			return FALSE;

  00098	33 c0		 xor	 eax, eax
  0009a	e9 c6 00 00 00	 jmp	 $LN8@LRWAesTest
$LN3@LRWAesTest:

; 620  : 
; 621  : 		memcpy (&ci->k2, lrw_vectors[i].key2, sizeof (lrw_vectors[i].key2));

  0009f	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR i$[rsp]
  000a4	48 6b c9 60	 imul	 rcx, 96			; 00000060H
  000a8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:lrw_vectors
  000af	48 8b 7c 24 70	 mov	 rdi, QWORD PTR ci$[rsp]
  000b4	48 81 c7 a8 42
	00 00		 add	 rdi, 17064		; 000042a8H
  000bb	48 8d 74 08 20	 lea	 rsi, QWORD PTR [rax+rcx+32]
  000c0	b9 10 00 00 00	 mov	 ecx, 16
  000c5	f3 a4		 rep movsb

; 622  : 		if (!EAInitMode (ci))

  000c7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ci$[rsp]
  000cc	e8 00 00 00 00	 call	 EAInitMode
  000d1	85 c0		 test	 eax, eax
  000d3	75 07		 jne	 SHORT $LN2@LRWAesTest

; 623  : 			return FALSE;

  000d5	33 c0		 xor	 eax, eax
  000d7	e9 89 00 00 00	 jmp	 $LN8@LRWAesTest
$LN2@LRWAesTest:

; 624  : 
; 625  : 		memcpy (p, lrw_vectors[i].plaintext, sizeof (p));

  000dc	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR i$[rsp]
  000e1	48 6b c9 60	 imul	 rcx, 96			; 00000060H
  000e5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:lrw_vectors
  000ec	48 8d 7c 24 28	 lea	 rdi, QWORD PTR p$[rsp]
  000f1	48 8d 74 08 40	 lea	 rsi, QWORD PTR [rax+rcx+64]
  000f6	b9 10 00 00 00	 mov	 ecx, 16
  000fb	f3 a4		 rep movsb

; 626  : 
; 627  : 		EncryptBufferLRW128 (p, sizeof (p), BE64(((unsigned __int64 *)(lrw_vectors[i].index))[1]), ci);

  000fd	48 63 44 24 38	 movsxd	 rax, DWORD PTR i$[rsp]
  00102	48 6b c0 60	 imul	 rax, 96			; 00000060H
  00106	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lrw_vectors
  0010d	48 8b 4c 01 38	 mov	 rcx, QWORD PTR [rcx+rax+56]
  00112	e8 00 00 00 00	 call	 MirrorBytes64
  00117	4c 8b 4c 24 70	 mov	 r9, QWORD PTR ci$[rsp]
  0011c	4c 8b c0	 mov	 r8, rax
  0011f	ba 10 00 00 00	 mov	 edx, 16
  00124	48 8d 4c 24 28	 lea	 rcx, QWORD PTR p$[rsp]
  00129	e8 00 00 00 00	 call	 EncryptBufferLRW128

; 628  : 
; 629  : 		if (memcmp (lrw_vectors[i].ciphertext, p, sizeof (p)) != 0)

  0012e	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR i$[rsp]
  00133	48 6b c9 60	 imul	 rcx, 96			; 00000060H
  00137	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:lrw_vectors
  0013e	48 8d 4c 08 50	 lea	 rcx, QWORD PTR [rax+rcx+80]
  00143	41 b8 10 00 00
	00		 mov	 r8d, 16
  00149	48 8d 54 24 28	 lea	 rdx, QWORD PTR p$[rsp]
  0014e	e8 00 00 00 00	 call	 memcmp
  00153	85 c0		 test	 eax, eax
  00155	74 04		 je	 SHORT $LN1@LRWAesTest

; 630  : 			return FALSE;

  00157	33 c0		 xor	 eax, eax
  00159	eb 0a		 jmp	 SHORT $LN8@LRWAesTest
$LN1@LRWAesTest:

; 631  : 	}

  0015b	e9 c4 fe ff ff	 jmp	 $LN6@LRWAesTest
$LN5@LRWAesTest:

; 632  : 
; 633  : 	return TRUE;

  00160	b8 01 00 00 00	 mov	 eax, 1
$LN8@LRWAesTest:

; 634  : }

  00165	48 8b 4c 24 40	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0016a	48 33 cc	 xor	 rcx, rsp
  0016d	e8 00 00 00 00	 call	 __security_check_cookie
  00172	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00176	5f		 pop	 rdi
  00177	5e		 pop	 rsi
  00178	c3		 ret	 0
LRWAesTest ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	XTSAesTest
;	COMDAT pdata
pdata	SEGMENT
$pdata$XTSAesTest DD imagerel $LN10
	DD	imagerel $LN10+535
	DD	imagerel $unwind$XTSAesTest
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$XTSAesTest DD 042019H
	DD	04f010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	0260H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT XTSAesTest
_TEXT	SEGMENT
p$ = 80
i$ = 592
dataUnitNo$ = 600
__$ArrayPad$ = 608
ci$ = 656
XTSAesTest PROC						; COMDAT

; 259  : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 81 ec 78 02
	00 00		 sub	 rsp, 632		; 00000278H
  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00015	48 33 c4	 xor	 rax, rsp
  00018	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 260  : 	unsigned __int8 p[ENCRYPTION_DATA_UNIT_SIZE];
; 261  : 	UINT64_STRUCT dataUnitNo;
; 262  : 	int i;
; 263  : 
; 264  : 	for (i = 0; i < XTS_TEST_COUNT; i++)

  00020	c7 84 24 50 02
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  0002b	eb 11		 jmp	 SHORT $LN7@XTSAesTest
$LN6@XTSAesTest:
  0002d	8b 84 24 50 02
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 84 24 50 02
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN7@XTSAesTest:
  0003e	83 bc 24 50 02
	00 00 05	 cmp	 DWORD PTR i$[rsp], 5
  00046	0f 8d ac 01 00
	00		 jge	 $LN5@XTSAesTest

; 265  : 	{
; 266  : 		ci->ea = EAGetByName ("AES");

  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  00053	e8 00 00 00 00	 call	 EAGetByName
  00058	8b d0		 mov	 edx, eax
  0005a	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00062	89 10		 mov	 DWORD PTR [rax], edx

; 267  : 		if (ci->ea == 0)

  00064	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  0006c	83 38 00	 cmp	 DWORD PTR [rax], 0
  0006f	75 07		 jne	 SHORT $LN4@XTSAesTest

; 268  : 			return FALSE;

  00071	33 c0		 xor	 eax, eax
  00073	e9 85 01 00 00	 jmp	 $LN8@XTSAesTest
$LN4@XTSAesTest:

; 269  : 
; 270  : 		ci->mode = XTS;

  00078	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00080	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [rax+4], 1

; 271  : 
; 272  : 		if (EAInit (ci->ea, XTS_vectors[i].key1, ci->ks) != ERR_SUCCESS)

  00087	4c 8b 84 24 90
	02 00 00	 mov	 r8, QWORD PTR ci$[rsp]
  0008f	49 83 c0 08	 add	 r8, 8
  00093	48 63 84 24 50
	02 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0009b	48 69 c0 4c 04
	00 00		 imul	 rax, 1100		; 0000044cH
  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:XTS_vectors
  000a9	48 03 d0	 add	 rdx, rax
  000ac	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  000b4	8b 08		 mov	 ecx, DWORD PTR [rax]
  000b6	e8 00 00 00 00	 call	 EAInit
  000bb	85 c0		 test	 eax, eax
  000bd	74 07		 je	 SHORT $LN3@XTSAesTest

; 273  : 			return FALSE;

  000bf	33 c0		 xor	 eax, eax
  000c1	e9 37 01 00 00	 jmp	 $LN8@XTSAesTest
$LN3@XTSAesTest:

; 274  : 
; 275  : 		memcpy (&ci->k2, XTS_vectors[i].key2, sizeof (XTS_vectors[i].key2));

  000c6	48 63 8c 24 50
	02 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  000ce	48 69 c9 4c 04
	00 00		 imul	 rcx, 1100		; 0000044cH
  000d5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:XTS_vectors
  000dc	48 8b bc 24 90
	02 00 00	 mov	 rdi, QWORD PTR ci$[rsp]
  000e4	48 81 c7 a8 42
	00 00		 add	 rdi, 17064		; 000042a8H
  000eb	48 8d 74 08 20	 lea	 rsi, QWORD PTR [rax+rcx+32]
  000f0	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000f5	f3 a4		 rep movsb

; 276  : 
; 277  : 		if (!EAInitMode (ci))

  000f7	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR ci$[rsp]
  000ff	e8 00 00 00 00	 call	 EAInitMode
  00104	85 c0		 test	 eax, eax
  00106	75 07		 jne	 SHORT $LN2@XTSAesTest

; 278  : 			return FALSE;

  00108	33 c0		 xor	 eax, eax
  0010a	e9 ee 00 00 00	 jmp	 $LN8@XTSAesTest
$LN2@XTSAesTest:

; 279  : 
; 280  : 		memcpy (p, XTS_vectors[i].plaintext, sizeof (p));

  0010f	48 63 8c 24 50
	02 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  00117	48 69 c9 4c 04
	00 00		 imul	 rcx, 1100		; 0000044cH
  0011e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:XTS_vectors
  00125	48 8d 7c 24 50	 lea	 rdi, QWORD PTR p$[rsp]
  0012a	48 8d 74 08 4c	 lea	 rsi, QWORD PTR [rax+rcx+76]
  0012f	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00134	f3 a4		 rep movsb

; 281  : 
; 282  : 		dataUnitNo.Value = BE64 (*((unsigned __int64 *) XTS_vectors[i].dataUnitNo));

  00136	48 63 84 24 50
	02 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0013e	48 69 c0 4c 04
	00 00		 imul	 rax, 1100		; 0000044cH
  00145	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:XTS_vectors
  0014c	48 8b 4c 01 40	 mov	 rcx, QWORD PTR [rcx+rax+64]
  00151	e8 00 00 00 00	 call	 MirrorBytes64
  00156	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR dataUnitNo$[rsp], rax

; 283  : 
; 284  : 		EncryptBufferXTS (p, sizeof (p), &dataUnitNo, XTS_vectors[i].blockNo, (unsigned char *) (ci->ks), (unsigned char *) ci->ks2, AES);

  0015e	48 8b bc 24 90
	02 00 00	 mov	 rdi, QWORD PTR ci$[rsp]
  00166	48 81 c7 d4 14
	00 00		 add	 rdi, 5332		; 000014d4H
  0016d	48 8b 94 24 90
	02 00 00	 mov	 rdx, QWORD PTR ci$[rsp]
  00175	48 83 c2 08	 add	 rdx, 8
  00179	48 63 8c 24 50
	02 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  00181	48 69 c9 4c 04
	00 00		 imul	 rcx, 1100		; 0000044cH
  00188	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:XTS_vectors
  0018f	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR [rsp+48], 1
  00197	48 89 7c 24 28	 mov	 QWORD PTR [rsp+40], rdi
  0019c	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  001a1	44 8b 4c 08 48	 mov	 r9d, DWORD PTR [rax+rcx+72]
  001a6	4c 8d 84 24 58
	02 00 00	 lea	 r8, QWORD PTR dataUnitNo$[rsp]
  001ae	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  001b3	48 8d 4c 24 50	 lea	 rcx, QWORD PTR p$[rsp]
  001b8	e8 00 00 00 00	 call	 EncryptBufferXTS

; 285  : 
; 286  : 		if (memcmp (XTS_vectors[i].ciphertext, p, sizeof (p)) != 0)

  001bd	48 63 8c 24 50
	02 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  001c5	48 69 c9 4c 04
	00 00		 imul	 rcx, 1100		; 0000044cH
  001cc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:XTS_vectors
  001d3	48 8d 8c 08 4c
	02 00 00	 lea	 rcx, QWORD PTR [rax+rcx+588]
  001db	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  001e1	48 8d 54 24 50	 lea	 rdx, QWORD PTR p$[rsp]
  001e6	e8 00 00 00 00	 call	 memcmp
  001eb	85 c0		 test	 eax, eax
  001ed	74 04		 je	 SHORT $LN1@XTSAesTest

; 287  : 			return FALSE;

  001ef	33 c0		 xor	 eax, eax
  001f1	eb 0a		 jmp	 SHORT $LN8@XTSAesTest
$LN1@XTSAesTest:

; 288  : 	}

  001f3	e9 35 fe ff ff	 jmp	 $LN6@XTSAesTest
$LN5@XTSAesTest:

; 289  : 
; 290  : 	return TRUE;

  001f8	b8 01 00 00 00	 mov	 eax, 1
$LN8@XTSAesTest:

; 291  : }

  001fd	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00205	48 33 cc	 xor	 rcx, rsp
  00208	e8 00 00 00 00	 call	 __security_check_cookie
  0020d	48 81 c4 78 02
	00 00		 add	 rsp, 632		; 00000278H
  00214	5f		 pop	 rdi
  00215	5e		 pop	 rsi
  00216	c3		 ret	 0
XTSAesTest ENDP
PUBLIC	__$ArrayPad$
PUBLIC	TestLegacySectorBufEncryption
;	COMDAT pdata
pdata	SEGMENT
$pdata$TestLegacySectorBufEncryption DD imagerel $LN262
	DD	imagerel $LN262+4202
	DD	imagerel $unwind$TestLegacySectorBufEncryption
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TestLegacySectorBufEncryption DD 021e19H
	DD	097010cH
	DD	imagerel __GSHandlerCheck
	DD	04a0H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT TestLegacySectorBufEncryption
_TEXT	SEGMENT
crc$ = 32
i$ = 36
lrw128InitDone$ = 40
unitNo$ = 48
name$ = 64
buf$ = 128
nbrUnits$ = 1152
nTestsPerformed$ = 1156
lrw64InitDone$ = 1160
blockSize$ = 1164
tv154 = 1168
tv313 = 1172
tv417 = 1176
__$ArrayPad$ = 1184
ci$ = 1216
TestLegacySectorBufEncryption PROC			; COMDAT

; 1034 : {

$LN262:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec b8 04
	00 00		 sub	 rsp, 1208		; 000004b8H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 a0
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1035 : 	unsigned char buf [ENCRYPTION_DATA_UNIT_SIZE * 2];
; 1036 : 	unsigned int i;
; 1037 : 	char name[64];
; 1038 : 	unsigned __int32 crc;
; 1039 : 	UINT64_STRUCT unitNo;
; 1040 : 	uint32 nbrUnits;
; 1041 : 	int blockSize;
; 1042 : 	BOOL lrw64InitDone = FALSE;

  0001e	c7 84 24 88 04
	00 00 00 00 00
	00		 mov	 DWORD PTR lrw64InitDone$[rsp], 0

; 1043 : 	BOOL lrw128InitDone = FALSE;

  00029	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR lrw128InitDone$[rsp], 0

; 1044 : 	int nTestsPerformed = 0;

  00031	c7 84 24 84 04
	00 00 00 00 00
	00		 mov	 DWORD PTR nTestsPerformed$[rsp], 0

; 1045 : 
; 1046 : 	unitNo.Value = 0x0234567890ABCDEFull;

  0003c	48 b8 ef cd ab
	90 78 56 34 02	 mov	 rax, 158846962688052719	; 0234567890abcdefH
  00046	48 89 44 24 30	 mov	 QWORD PTR unitNo$[rsp], rax

; 1047 : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;

  0004b	c7 84 24 80 04
	00 00 02 00 00
	00		 mov	 DWORD PTR nbrUnits$[rsp], 2

; 1048 : 
; 1049 : 	for (i = 0; i < sizeof (buf); i++)

  00056	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0005e	eb 0b		 jmp	 SHORT $LN143@TestLegacy
$LN142@TestLegacy:
  00060	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00064	83 c0 01	 add	 eax, 1
  00067	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN143@TestLegacy:
  0006b	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0006f	48 3d 00 04 00
	00		 cmp	 rax, 1024		; 00000400H
  00075	73 12		 jae	 SHORT $LN141@TestLegacy

; 1050 : 		buf[i] = (unsigned char) i;

  00077	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  0007b	0f b6 44 24 24	 movzx	 eax, BYTE PTR i$[rsp]
  00080	88 84 0c 80 00
	00 00		 mov	 BYTE PTR buf$[rsp+rcx], al
  00087	eb d7		 jmp	 SHORT $LN142@TestLegacy
$LN141@TestLegacy:

; 1051 : 
; 1052 : 	for (i = 0; i < sizeof (ci->k2); i++)

  00089	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00091	eb 0b		 jmp	 SHORT $LN140@TestLegacy
$LN139@TestLegacy:
  00093	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00097	83 c0 01	 add	 eax, 1
  0009a	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN140@TestLegacy:
  0009e	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  000a2	48 3d 00 01 00
	00		 cmp	 rax, 256		; 00000100H
  000a8	73 1a		 jae	 SHORT $LN138@TestLegacy

; 1053 : 		ci->k2[i] = (unsigned char) i;

  000aa	8b 54 24 24	 mov	 edx, DWORD PTR i$[rsp]
  000ae	48 8b 8c 24 c0
	04 00 00	 mov	 rcx, QWORD PTR ci$[rsp]
  000b6	0f b6 44 24 24	 movzx	 eax, BYTE PTR i$[rsp]
  000bb	88 84 11 a8 42
	00 00		 mov	 BYTE PTR [rcx+rdx+17064], al
  000c2	eb cf		 jmp	 SHORT $LN139@TestLegacy
$LN138@TestLegacy:

; 1054 : 
; 1055 : 	// Test all EAs
; 1056 : 	for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  000c4	e8 00 00 00 00	 call	 EAGetFirst
  000c9	44 8b d8	 mov	 r11d, eax
  000cc	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  000d4	44 89 18	 mov	 DWORD PTR [rax], r11d
  000d7	eb 1d		 jmp	 SHORT $LN137@TestLegacy
$LN136@TestLegacy:
  000d9	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  000e1	8b 08		 mov	 ecx, DWORD PTR [rax]
  000e3	e8 00 00 00 00	 call	 EAGetNext
  000e8	44 8b d8	 mov	 r11d, eax
  000eb	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  000f3	44 89 18	 mov	 DWORD PTR [rax], r11d
$LN137@TestLegacy:
  000f6	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  000fe	83 38 00	 cmp	 DWORD PTR [rax], 0
  00101	0f 84 22 0f 00
	00		 je	 $LN135@TestLegacy

; 1057 : 	{
; 1058 : 		EAGetName (name, ci->ea);

  00107	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  0010f	8b 10		 mov	 edx, DWORD PTR [rax]
  00111	48 8d 4c 24 40	 lea	 rcx, QWORD PTR name$[rsp]
  00116	e8 00 00 00 00	 call	 EAGetName

; 1059 : 		blockSize = CipherGetBlockSize (EAGetFirstCipher (ci->ea));

  0011b	4c 8b 9c 24 c0
	04 00 00	 mov	 r11, QWORD PTR ci$[rsp]
  00123	41 8b 0b	 mov	 ecx, DWORD PTR [r11]
  00126	e8 00 00 00 00	 call	 EAGetFirstCipher
  0012b	8b c8		 mov	 ecx, eax
  0012d	e8 00 00 00 00	 call	 CipherGetBlockSize
  00132	89 84 24 8c 04
	00 00		 mov	 DWORD PTR blockSize$[rsp], eax

; 1060 : 
; 1061 : 		if (EAInit (ci->ea, (unsigned char *)buf, ci->ks) == ERR_CIPHER_INIT_FAILURE)

  00139	4c 8b 84 24 c0
	04 00 00	 mov	 r8, QWORD PTR ci$[rsp]
  00141	49 83 c0 08	 add	 r8, 8
  00145	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  0014d	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00155	8b 08		 mov	 ecx, DWORD PTR [rax]
  00157	e8 00 00 00 00	 call	 EAInit
  0015c	83 f8 11	 cmp	 eax, 17
  0015f	75 07		 jne	 SHORT $LN134@TestLegacy

; 1062 : 			return FALSE;

  00161	33 c0		 xor	 eax, eax
  00163	e9 ea 0e 00 00	 jmp	 $LN144@TestLegacy
$LN134@TestLegacy:

; 1063 : 
; 1064 : 		// Test all deprecated modes of operation
; 1065 : 		for (ci->mode = EAGetFirstMode (ci->ea);
; 1066 : 			ci->mode != 0;
; 1067 : 			ci->mode = EAGetNextMode (ci->ea, ci->mode))

  00168	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00170	8b 08		 mov	 ecx, DWORD PTR [rax]
  00172	e8 00 00 00 00	 call	 EAGetFirstMode
  00177	44 8b d8	 mov	 r11d, eax
  0017a	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00182	44 89 58 04	 mov	 DWORD PTR [rax+4], r11d
  00186	eb 29		 jmp	 SHORT $LN133@TestLegacy
$LN132@TestLegacy:
  00188	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00190	8b 50 04	 mov	 edx, DWORD PTR [rax+4]
  00193	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  0019b	8b 08		 mov	 ecx, DWORD PTR [rax]
  0019d	e8 00 00 00 00	 call	 EAGetNextMode
  001a2	44 8b d8	 mov	 r11d, eax
  001a5	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  001ad	44 89 58 04	 mov	 DWORD PTR [rax+4], r11d
$LN133@TestLegacy:
  001b1	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  001b9	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  001bd	0f 84 61 0e 00
	00		 je	 $LN131@TestLegacy

; 1068 : 		{
; 1069 : 			// Skip modes that are not deprecated
; 1070 : 			if (ci->mode == XTS)

  001c3	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  001cb	83 78 04 01	 cmp	 DWORD PTR [rax+4], 1
  001cf	75 02		 jne	 SHORT $LN130@TestLegacy

; 1071 : 				continue;

  001d1	eb b5		 jmp	 SHORT $LN132@TestLegacy
$LN130@TestLegacy:

; 1072 : 
; 1073 : 			if (ci->mode == LRW
; 1074 : 				&& (blockSize == 8 && !lrw64InitDone || blockSize == 16 && !lrw128InitDone ))

  001d3	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  001db	83 78 04 02	 cmp	 DWORD PTR [rax+4], 2
  001df	75 66		 jne	 SHORT $LN129@TestLegacy
  001e1	83 bc 24 8c 04
	00 00 08	 cmp	 DWORD PTR blockSize$[rsp], 8
  001e9	75 0a		 jne	 SHORT $LN127@TestLegacy
  001eb	83 bc 24 88 04
	00 00 00	 cmp	 DWORD PTR lrw64InitDone$[rsp], 0
  001f3	74 11		 je	 SHORT $LN128@TestLegacy
$LN127@TestLegacy:
  001f5	83 bc 24 8c 04
	00 00 10	 cmp	 DWORD PTR blockSize$[rsp], 16
  001fd	75 48		 jne	 SHORT $LN129@TestLegacy
  001ff	83 7c 24 28 00	 cmp	 DWORD PTR lrw128InitDone$[rsp], 0
  00204	75 41		 jne	 SHORT $LN129@TestLegacy
$LN128@TestLegacy:

; 1075 : 			{
; 1076 : 				if (!EAInitMode (ci))

  00206	48 8b 8c 24 c0
	04 00 00	 mov	 rcx, QWORD PTR ci$[rsp]
  0020e	e8 00 00 00 00	 call	 EAInitMode
  00213	85 c0		 test	 eax, eax
  00215	75 07		 jne	 SHORT $LN126@TestLegacy

; 1077 : 					return FALSE;

  00217	33 c0		 xor	 eax, eax
  00219	e9 34 0e 00 00	 jmp	 $LN144@TestLegacy
$LN126@TestLegacy:

; 1078 : 
; 1079 : 				if (blockSize == 8)

  0021e	83 bc 24 8c 04
	00 00 08	 cmp	 DWORD PTR blockSize$[rsp], 8
  00226	75 0d		 jne	 SHORT $LN125@TestLegacy

; 1080 : 					lrw64InitDone = TRUE;

  00228	c7 84 24 88 04
	00 00 01 00 00
	00		 mov	 DWORD PTR lrw64InitDone$[rsp], 1
  00233	eb 12		 jmp	 SHORT $LN124@TestLegacy
$LN125@TestLegacy:

; 1081 : 				else if (blockSize == 16)

  00235	83 bc 24 8c 04
	00 00 10	 cmp	 DWORD PTR blockSize$[rsp], 16
  0023d	75 08		 jne	 SHORT $LN123@TestLegacy

; 1082 : 					lrw128InitDone = TRUE;

  0023f	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR lrw128InitDone$[rsp], 1
$LN123@TestLegacy:
$LN124@TestLegacy:
$LN129@TestLegacy:

; 1083 : 			}
; 1084 : 
; 1085 : 			EncryptDataUnits (buf, &unitNo, nbrUnits, ci);

  00247	4c 8b 8c 24 c0
	04 00 00	 mov	 r9, QWORD PTR ci$[rsp]
  0024f	44 8b 84 24 80
	04 00 00	 mov	 r8d, DWORD PTR nbrUnits$[rsp]
  00257	48 8d 54 24 30	 lea	 rdx, QWORD PTR unitNo$[rsp]
  0025c	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00264	e8 00 00 00 00	 call	 EncryptDataUnits

; 1086 : 			crc = GetCrc32 (buf, sizeof (buf));

  00269	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  0026e	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00276	e8 00 00 00 00	 call	 GetCrc32
  0027b	89 44 24 20	 mov	 DWORD PTR crc$[rsp], eax

; 1087 : 
; 1088 : 			switch (ci->mode)

  0027f	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00287	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0028a	89 84 24 90 04
	00 00		 mov	 DWORD PTR tv154[rsp], eax
  00291	83 bc 24 90 04
	00 00 02	 cmp	 DWORD PTR tv154[rsp], 2
  00299	74 21		 je	 SHORT $LN120@TestLegacy
  0029b	83 bc 24 90 04
	00 00 02	 cmp	 DWORD PTR tv154[rsp], 2
  002a3	0f 8e 7d 07 00
	00		 jle	 $LN121@TestLegacy
  002a9	83 bc 24 90 04
	00 00 05	 cmp	 DWORD PTR tv154[rsp], 5
  002b1	0f 8e 93 03 00
	00		 jle	 $LN87@TestLegacy
  002b7	e9 6a 07 00 00	 jmp	 $LN121@TestLegacy
$LN120@TestLegacy:

; 1089 : 			{
; 1090 : 			case LRW:		// Deprecated/legacy
; 1091 : 				if (strcmp (name, "AES") == 0)

  002bc	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  002c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  002c8	48 2b ca	 sub	 rcx, rdx
$LL259@TestLegacy:
  002cb	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  002ce	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  002d1	75 0c		 jne	 SHORT $LN261@TestLegacy
  002d3	48 83 c2 01	 add	 rdx, 1
  002d7	84 c0		 test	 al, al
  002d9	75 f0		 jne	 SHORT $LL259@TestLegacy
  002db	33 c0		 xor	 eax, eax
  002dd	eb 05		 jmp	 SHORT $LN260@TestLegacy
$LN261@TestLegacy:
  002df	1b c0		 sbb	 eax, eax
  002e1	83 d8 ff	 sbb	 eax, -1
$LN260@TestLegacy:
  002e4	85 c0		 test	 eax, eax
  002e6	75 27		 jne	 SHORT $LN119@TestLegacy

; 1092 : 				{
; 1093 : 					if (crc != 0x5237acf9)

  002e8	81 7c 24 20 f9
	ac 37 52	 cmp	 DWORD PTR crc$[rsp], 1379380473 ; 5237acf9H
  002f0	74 07		 je	 SHORT $LN118@TestLegacy

; 1094 : 						return FALSE;

  002f2	33 c0		 xor	 eax, eax
  002f4	e9 59 0d 00 00	 jmp	 $LN144@TestLegacy
$LN118@TestLegacy:

; 1095 : 					nTestsPerformed++;

  002f9	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00300	83 c0 01	 add	 eax, 1
  00303	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  0030a	e9 36 03 00 00	 jmp	 $LN117@TestLegacy
$LN119@TestLegacy:

; 1096 : 				}
; 1097 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  0030f	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00314	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
  0031b	48 2b ca	 sub	 rcx, rdx
$LL256@TestLegacy:
  0031e	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00321	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00324	75 0c		 jne	 SHORT $LN258@TestLegacy
  00326	48 83 c2 01	 add	 rdx, 1
  0032a	84 c0		 test	 al, al
  0032c	75 f0		 jne	 SHORT $LL256@TestLegacy
  0032e	33 c0		 xor	 eax, eax
  00330	eb 05		 jmp	 SHORT $LN257@TestLegacy
$LN258@TestLegacy:
  00332	1b c0		 sbb	 eax, eax
  00334	83 d8 ff	 sbb	 eax, -1
$LN257@TestLegacy:
  00337	85 c0		 test	 eax, eax
  00339	75 27		 jne	 SHORT $LN116@TestLegacy

; 1098 : 				{
; 1099 : 					if (crc != 0xf94d5300)

  0033b	81 7c 24 20 00
	53 4d f9	 cmp	 DWORD PTR crc$[rsp], -112372992 ; f94d5300H
  00343	74 07		 je	 SHORT $LN115@TestLegacy

; 1100 : 						return FALSE;

  00345	33 c0		 xor	 eax, eax
  00347	e9 06 0d 00 00	 jmp	 $LN144@TestLegacy
$LN115@TestLegacy:

; 1101 : 					nTestsPerformed++;

  0034c	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00353	83 c0 01	 add	 eax, 1
  00356	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  0035d	e9 e3 02 00 00	 jmp	 $LN114@TestLegacy
$LN116@TestLegacy:

; 1102 : 				}
; 1103 : 				else if (strcmp (name, "CAST5") == 0)		// Deprecated/legacy

  00362	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00367	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@
  0036e	48 2b ca	 sub	 rcx, rdx
$LL253@TestLegacy:
  00371	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00374	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00377	75 0c		 jne	 SHORT $LN255@TestLegacy
  00379	48 83 c2 01	 add	 rdx, 1
  0037d	84 c0		 test	 al, al
  0037f	75 f0		 jne	 SHORT $LL253@TestLegacy
  00381	33 c0		 xor	 eax, eax
  00383	eb 05		 jmp	 SHORT $LN254@TestLegacy
$LN255@TestLegacy:
  00385	1b c0		 sbb	 eax, eax
  00387	83 d8 ff	 sbb	 eax, -1
$LN254@TestLegacy:
  0038a	85 c0		 test	 eax, eax
  0038c	75 27		 jne	 SHORT $LN113@TestLegacy

; 1104 : 				{
; 1105 : 					if (crc != 0x33971e82)

  0038e	81 7c 24 20 82
	1e 97 33	 cmp	 DWORD PTR crc$[rsp], 865541762 ; 33971e82H
  00396	74 07		 je	 SHORT $LN112@TestLegacy

; 1106 : 						return FALSE;

  00398	33 c0		 xor	 eax, eax
  0039a	e9 b3 0c 00 00	 jmp	 $LN144@TestLegacy
$LN112@TestLegacy:

; 1107 : 					nTestsPerformed++;

  0039f	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  003a6	83 c0 01	 add	 eax, 1
  003a9	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  003b0	e9 90 02 00 00	 jmp	 $LN111@TestLegacy
$LN113@TestLegacy:

; 1108 : 				}
; 1109 : 				else if (strcmp (name, "Serpent") == 0)

  003b5	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  003ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  003c1	48 2b ca	 sub	 rcx, rdx
$LL250@TestLegacy:
  003c4	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  003c7	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  003ca	75 0c		 jne	 SHORT $LN252@TestLegacy
  003cc	48 83 c2 01	 add	 rdx, 1
  003d0	84 c0		 test	 al, al
  003d2	75 f0		 jne	 SHORT $LL250@TestLegacy
  003d4	33 c0		 xor	 eax, eax
  003d6	eb 05		 jmp	 SHORT $LN251@TestLegacy
$LN252@TestLegacy:
  003d8	1b c0		 sbb	 eax, eax
  003da	83 d8 ff	 sbb	 eax, -1
$LN251@TestLegacy:
  003dd	85 c0		 test	 eax, eax
  003df	75 27		 jne	 SHORT $LN110@TestLegacy

; 1110 : 				{
; 1111 : 					if (crc != 0x7fb86805)

  003e1	81 7c 24 20 05
	68 b8 7f	 cmp	 DWORD PTR crc$[rsp], 2142791685 ; 7fb86805H
  003e9	74 07		 je	 SHORT $LN109@TestLegacy

; 1112 : 						return FALSE;

  003eb	33 c0		 xor	 eax, eax
  003ed	e9 60 0c 00 00	 jmp	 $LN144@TestLegacy
$LN109@TestLegacy:

; 1113 : 					nTestsPerformed++;

  003f2	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  003f9	83 c0 01	 add	 eax, 1
  003fc	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00403	e9 3d 02 00 00	 jmp	 $LN108@TestLegacy
$LN110@TestLegacy:

; 1114 : 				}
; 1115 : 				else if (strcmp (name, "Triple DES") == 0)	// Deprecated/legacy

  00408	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  0040d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@
  00414	48 2b ca	 sub	 rcx, rdx
$LL247@TestLegacy:
  00417	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  0041a	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  0041d	75 0c		 jne	 SHORT $LN249@TestLegacy
  0041f	48 83 c2 01	 add	 rdx, 1
  00423	84 c0		 test	 al, al
  00425	75 f0		 jne	 SHORT $LL247@TestLegacy
  00427	33 c0		 xor	 eax, eax
  00429	eb 05		 jmp	 SHORT $LN248@TestLegacy
$LN249@TestLegacy:
  0042b	1b c0		 sbb	 eax, eax
  0042d	83 d8 ff	 sbb	 eax, -1
$LN248@TestLegacy:
  00430	85 c0		 test	 eax, eax
  00432	75 27		 jne	 SHORT $LN107@TestLegacy

; 1116 : 				{
; 1117 : 					if (crc != 0x2b20bb84)

  00434	81 7c 24 20 84
	bb 20 2b	 cmp	 DWORD PTR crc$[rsp], 723565444 ; 2b20bb84H
  0043c	74 07		 je	 SHORT $LN106@TestLegacy

; 1118 : 						return FALSE;

  0043e	33 c0		 xor	 eax, eax
  00440	e9 0d 0c 00 00	 jmp	 $LN144@TestLegacy
$LN106@TestLegacy:

; 1119 : 					nTestsPerformed++;

  00445	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  0044c	83 c0 01	 add	 eax, 1
  0044f	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00456	e9 ea 01 00 00	 jmp	 $LN105@TestLegacy
$LN107@TestLegacy:

; 1120 : 				}
; 1121 : 				else if (strcmp (name, "Twofish") == 0)

  0045b	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00460	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@
  00467	48 2b ca	 sub	 rcx, rdx
$LL244@TestLegacy:
  0046a	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  0046d	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00470	75 0c		 jne	 SHORT $LN246@TestLegacy
  00472	48 83 c2 01	 add	 rdx, 1
  00476	84 c0		 test	 al, al
  00478	75 f0		 jne	 SHORT $LL244@TestLegacy
  0047a	33 c0		 xor	 eax, eax
  0047c	eb 05		 jmp	 SHORT $LN245@TestLegacy
$LN246@TestLegacy:
  0047e	1b c0		 sbb	 eax, eax
  00480	83 d8 ff	 sbb	 eax, -1
$LN245@TestLegacy:
  00483	85 c0		 test	 eax, eax
  00485	75 27		 jne	 SHORT $LN104@TestLegacy

; 1122 : 				{
; 1123 : 					if (crc != 0xa9de0f0b)

  00487	81 7c 24 20 0b
	0f de a9	 cmp	 DWORD PTR crc$[rsp], -1445064949 ; a9de0f0bH
  0048f	74 07		 je	 SHORT $LN103@TestLegacy

; 1124 : 						return FALSE;

  00491	33 c0		 xor	 eax, eax
  00493	e9 ba 0b 00 00	 jmp	 $LN144@TestLegacy
$LN103@TestLegacy:

; 1125 : 					nTestsPerformed++;

  00498	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  0049f	83 c0 01	 add	 eax, 1
  004a2	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  004a9	e9 97 01 00 00	 jmp	 $LN102@TestLegacy
$LN104@TestLegacy:

; 1126 : 				}
; 1127 : 				else if (strcmp (name, "AES-Twofish") == 0)

  004ae	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  004b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  004ba	48 2b ca	 sub	 rcx, rdx
$LL241@TestLegacy:
  004bd	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  004c0	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  004c3	75 0c		 jne	 SHORT $LN243@TestLegacy
  004c5	48 83 c2 01	 add	 rdx, 1
  004c9	84 c0		 test	 al, al
  004cb	75 f0		 jne	 SHORT $LL241@TestLegacy
  004cd	33 c0		 xor	 eax, eax
  004cf	eb 05		 jmp	 SHORT $LN242@TestLegacy
$LN243@TestLegacy:
  004d1	1b c0		 sbb	 eax, eax
  004d3	83 d8 ff	 sbb	 eax, -1
$LN242@TestLegacy:
  004d6	85 c0		 test	 eax, eax
  004d8	75 27		 jne	 SHORT $LN101@TestLegacy

; 1128 : 				{
; 1129 : 					if (crc != 0x4ed0fd80)

  004da	81 7c 24 20 80
	fd d0 4e	 cmp	 DWORD PTR crc$[rsp], 1322319232 ; 4ed0fd80H
  004e2	74 07		 je	 SHORT $LN100@TestLegacy

; 1130 : 						return FALSE;

  004e4	33 c0		 xor	 eax, eax
  004e6	e9 67 0b 00 00	 jmp	 $LN144@TestLegacy
$LN100@TestLegacy:

; 1131 : 					nTestsPerformed++;

  004eb	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  004f2	83 c0 01	 add	 eax, 1
  004f5	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  004fc	e9 44 01 00 00	 jmp	 $LN99@TestLegacy
$LN101@TestLegacy:

; 1132 : 				}
; 1133 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  00501	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00506	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  0050d	48 2b ca	 sub	 rcx, rdx
$LL238@TestLegacy:
  00510	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00513	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00516	75 0c		 jne	 SHORT $LN240@TestLegacy
  00518	48 83 c2 01	 add	 rdx, 1
  0051c	84 c0		 test	 al, al
  0051e	75 f0		 jne	 SHORT $LL238@TestLegacy
  00520	33 c0		 xor	 eax, eax
  00522	eb 05		 jmp	 SHORT $LN239@TestLegacy
$LN240@TestLegacy:
  00524	1b c0		 sbb	 eax, eax
  00526	83 d8 ff	 sbb	 eax, -1
$LN239@TestLegacy:
  00529	85 c0		 test	 eax, eax
  0052b	75 27		 jne	 SHORT $LN98@TestLegacy

; 1134 : 				{
; 1135 : 					if (crc != 0xea04b3cf)

  0052d	81 7c 24 20 cf
	b3 04 ea	 cmp	 DWORD PTR crc$[rsp], -368790577 ; ea04b3cfH
  00535	74 07		 je	 SHORT $LN97@TestLegacy

; 1136 : 						return FALSE;

  00537	33 c0		 xor	 eax, eax
  00539	e9 14 0b 00 00	 jmp	 $LN144@TestLegacy
$LN97@TestLegacy:

; 1137 : 					nTestsPerformed++;

  0053e	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00545	83 c0 01	 add	 eax, 1
  00548	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  0054f	e9 f1 00 00 00	 jmp	 $LN96@TestLegacy
$LN98@TestLegacy:

; 1138 : 				}
; 1139 : 				else if (strcmp (name, "Serpent-AES") == 0)

  00554	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00559	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  00560	48 2b ca	 sub	 rcx, rdx
$LL235@TestLegacy:
  00563	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00566	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00569	75 0c		 jne	 SHORT $LN237@TestLegacy
  0056b	48 83 c2 01	 add	 rdx, 1
  0056f	84 c0		 test	 al, al
  00571	75 f0		 jne	 SHORT $LL235@TestLegacy
  00573	33 c0		 xor	 eax, eax
  00575	eb 05		 jmp	 SHORT $LN236@TestLegacy
$LN237@TestLegacy:
  00577	1b c0		 sbb	 eax, eax
  00579	83 d8 ff	 sbb	 eax, -1
$LN236@TestLegacy:
  0057c	85 c0		 test	 eax, eax
  0057e	75 27		 jne	 SHORT $LN95@TestLegacy

; 1140 : 				{
; 1141 : 					if (crc != 0x0d33596a)

  00580	81 7c 24 20 6a
	59 33 0d	 cmp	 DWORD PTR crc$[rsp], 221469034 ; 0d33596aH
  00588	74 07		 je	 SHORT $LN94@TestLegacy

; 1142 : 						return FALSE;

  0058a	33 c0		 xor	 eax, eax
  0058c	e9 c1 0a 00 00	 jmp	 $LN144@TestLegacy
$LN94@TestLegacy:

; 1143 : 					nTestsPerformed++;

  00591	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00598	83 c0 01	 add	 eax, 1
  0059b	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  005a2	e9 9e 00 00 00	 jmp	 $LN93@TestLegacy
$LN95@TestLegacy:

; 1144 : 				}
; 1145 : 				else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  005a7	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  005ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  005b3	48 2b ca	 sub	 rcx, rdx
$LL232@TestLegacy:
  005b6	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  005b9	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  005bc	75 0c		 jne	 SHORT $LN234@TestLegacy
  005be	48 83 c2 01	 add	 rdx, 1
  005c2	84 c0		 test	 al, al
  005c4	75 f0		 jne	 SHORT $LL232@TestLegacy
  005c6	33 c0		 xor	 eax, eax
  005c8	eb 05		 jmp	 SHORT $LN233@TestLegacy
$LN234@TestLegacy:
  005ca	1b c0		 sbb	 eax, eax
  005cc	83 d8 ff	 sbb	 eax, -1
$LN233@TestLegacy:
  005cf	85 c0		 test	 eax, eax
  005d1	75 24		 jne	 SHORT $LN92@TestLegacy

; 1146 : 				{
; 1147 : 					if (crc != 0x2845d0e3)

  005d3	81 7c 24 20 e3
	d0 45 28	 cmp	 DWORD PTR crc$[rsp], 675664099 ; 2845d0e3H
  005db	74 07		 je	 SHORT $LN91@TestLegacy

; 1148 : 						return FALSE;

  005dd	33 c0		 xor	 eax, eax
  005df	e9 6e 0a 00 00	 jmp	 $LN144@TestLegacy
$LN91@TestLegacy:

; 1149 : 					nTestsPerformed++;

  005e4	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  005eb	83 c0 01	 add	 eax, 1
  005ee	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  005f5	eb 4e		 jmp	 SHORT $LN90@TestLegacy
$LN92@TestLegacy:

; 1150 : 				}
; 1151 : 				else if (strcmp (name, "Twofish-Serpent") == 0)

  005f7	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  005fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  00603	48 2b ca	 sub	 rcx, rdx
$LL229@TestLegacy:
  00606	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00609	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  0060c	75 0c		 jne	 SHORT $LN231@TestLegacy
  0060e	48 83 c2 01	 add	 rdx, 1
  00612	84 c0		 test	 al, al
  00614	75 f0		 jne	 SHORT $LL229@TestLegacy
  00616	33 c0		 xor	 eax, eax
  00618	eb 05		 jmp	 SHORT $LN230@TestLegacy
$LN231@TestLegacy:
  0061a	1b c0		 sbb	 eax, eax
  0061c	83 d8 ff	 sbb	 eax, -1
$LN230@TestLegacy:
  0061f	85 c0		 test	 eax, eax
  00621	75 22		 jne	 SHORT $LN89@TestLegacy

; 1152 : 				{
; 1153 : 					if (crc != 0xca65c5cd)

  00623	81 7c 24 20 cd
	c5 65 ca	 cmp	 DWORD PTR crc$[rsp], -899299891 ; ca65c5cdH
  0062b	74 07		 je	 SHORT $LN88@TestLegacy

; 1154 : 						return FALSE;

  0062d	33 c0		 xor	 eax, eax
  0062f	e9 1e 0a 00 00	 jmp	 $LN144@TestLegacy
$LN88@TestLegacy:

; 1155 : 					nTestsPerformed++;

  00634	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  0063b	83 c0 01	 add	 eax, 1
  0063e	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
$LN89@TestLegacy:
$LN90@TestLegacy:
$LN93@TestLegacy:
$LN96@TestLegacy:
$LN99@TestLegacy:
$LN102@TestLegacy:
$LN105@TestLegacy:
$LN108@TestLegacy:
$LN111@TestLegacy:
$LN114@TestLegacy:
$LN117@TestLegacy:

; 1156 : 				}
; 1157 : 				break;

  00645	e9 dc 03 00 00	 jmp	 $LN121@TestLegacy
$LN87@TestLegacy:

; 1158 : 
; 1159 : 			case CBC:		// Deprecated/legacy
; 1160 : 			case INNER_CBC:	// Deprecated/legacy
; 1161 : 			case OUTER_CBC:	// Deprecated/legacy
; 1162 : 				if (strcmp (name, "AES") == 0)

  0064a	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  0064f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  00656	48 2b ca	 sub	 rcx, rdx
$LL226@TestLegacy:
  00659	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  0065c	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  0065f	75 0c		 jne	 SHORT $LN228@TestLegacy
  00661	48 83 c2 01	 add	 rdx, 1
  00665	84 c0		 test	 al, al
  00667	75 f0		 jne	 SHORT $LL226@TestLegacy
  00669	33 c0		 xor	 eax, eax
  0066b	eb 05		 jmp	 SHORT $LN227@TestLegacy
$LN228@TestLegacy:
  0066d	1b c0		 sbb	 eax, eax
  0066f	83 d8 ff	 sbb	 eax, -1
$LN227@TestLegacy:
  00672	85 c0		 test	 eax, eax
  00674	75 27		 jne	 SHORT $LN86@TestLegacy

; 1163 : 				{
; 1164 : 					if (crc != 0x2274f53d)

  00676	81 7c 24 20 3d
	f5 74 22	 cmp	 DWORD PTR crc$[rsp], 578090301 ; 2274f53dH
  0067e	74 07		 je	 SHORT $LN85@TestLegacy

; 1165 : 						return FALSE;

  00680	33 c0		 xor	 eax, eax
  00682	e9 cb 09 00 00	 jmp	 $LN144@TestLegacy
$LN85@TestLegacy:

; 1166 : 					nTestsPerformed++;

  00687	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  0068e	83 c0 01	 add	 eax, 1
  00691	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00698	e9 89 03 00 00	 jmp	 $LN84@TestLegacy
$LN86@TestLegacy:

; 1167 : 				}
; 1168 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  0069d	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  006a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
  006a9	48 2b ca	 sub	 rcx, rdx
$LL223@TestLegacy:
  006ac	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  006af	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  006b2	75 0c		 jne	 SHORT $LN225@TestLegacy
  006b4	48 83 c2 01	 add	 rdx, 1
  006b8	84 c0		 test	 al, al
  006ba	75 f0		 jne	 SHORT $LL223@TestLegacy
  006bc	33 c0		 xor	 eax, eax
  006be	eb 05		 jmp	 SHORT $LN224@TestLegacy
$LN225@TestLegacy:
  006c0	1b c0		 sbb	 eax, eax
  006c2	83 d8 ff	 sbb	 eax, -1
$LN224@TestLegacy:
  006c5	85 c0		 test	 eax, eax
  006c7	75 27		 jne	 SHORT $LN83@TestLegacy

; 1169 : 				{
; 1170 : 					if (crc != 0x033899a1)

  006c9	81 7c 24 20 a1
	99 38 03	 cmp	 DWORD PTR crc$[rsp], 54040993 ; 033899a1H
  006d1	74 07		 je	 SHORT $LN82@TestLegacy

; 1171 : 						return FALSE;

  006d3	33 c0		 xor	 eax, eax
  006d5	e9 78 09 00 00	 jmp	 $LN144@TestLegacy
$LN82@TestLegacy:

; 1172 : 					nTestsPerformed++;

  006da	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  006e1	83 c0 01	 add	 eax, 1
  006e4	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  006eb	e9 36 03 00 00	 jmp	 $LN81@TestLegacy
$LN83@TestLegacy:

; 1173 : 				}
; 1174 : 				else if (strcmp (name, "CAST5") == 0)		// Deprecated/legacy

  006f0	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  006f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@
  006fc	48 2b ca	 sub	 rcx, rdx
$LL220@TestLegacy:
  006ff	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00702	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00705	75 0c		 jne	 SHORT $LN222@TestLegacy
  00707	48 83 c2 01	 add	 rdx, 1
  0070b	84 c0		 test	 al, al
  0070d	75 f0		 jne	 SHORT $LL220@TestLegacy
  0070f	33 c0		 xor	 eax, eax
  00711	eb 05		 jmp	 SHORT $LN221@TestLegacy
$LN222@TestLegacy:
  00713	1b c0		 sbb	 eax, eax
  00715	83 d8 ff	 sbb	 eax, -1
$LN221@TestLegacy:
  00718	85 c0		 test	 eax, eax
  0071a	75 27		 jne	 SHORT $LN80@TestLegacy

; 1175 : 				{
; 1176 : 					if (crc != 0x331cecc7)	

  0071c	81 7c 24 20 c7
	ec 1c 33	 cmp	 DWORD PTR crc$[rsp], 857533639 ; 331cecc7H
  00724	74 07		 je	 SHORT $LN79@TestLegacy

; 1177 : 						return FALSE;

  00726	33 c0		 xor	 eax, eax
  00728	e9 25 09 00 00	 jmp	 $LN144@TestLegacy
$LN79@TestLegacy:

; 1178 : 					nTestsPerformed++;

  0072d	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00734	83 c0 01	 add	 eax, 1
  00737	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  0073e	e9 e3 02 00 00	 jmp	 $LN78@TestLegacy
$LN80@TestLegacy:

; 1179 : 				}
; 1180 : 				else if (strcmp (name, "Serpent") == 0)

  00743	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00748	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  0074f	48 2b ca	 sub	 rcx, rdx
$LL217@TestLegacy:
  00752	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00755	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00758	75 0c		 jne	 SHORT $LN219@TestLegacy
  0075a	48 83 c2 01	 add	 rdx, 1
  0075e	84 c0		 test	 al, al
  00760	75 f0		 jne	 SHORT $LL217@TestLegacy
  00762	33 c0		 xor	 eax, eax
  00764	eb 05		 jmp	 SHORT $LN218@TestLegacy
$LN219@TestLegacy:
  00766	1b c0		 sbb	 eax, eax
  00768	83 d8 ff	 sbb	 eax, -1
$LN218@TestLegacy:
  0076b	85 c0		 test	 eax, eax
  0076d	75 27		 jne	 SHORT $LN77@TestLegacy

; 1181 : 				{
; 1182 : 					if (crc != 0x42dff3d4)

  0076f	81 7c 24 20 d4
	f3 df 42	 cmp	 DWORD PTR crc$[rsp], 1121973204 ; 42dff3d4H
  00777	74 07		 je	 SHORT $LN76@TestLegacy

; 1183 : 						return FALSE;

  00779	33 c0		 xor	 eax, eax
  0077b	e9 d2 08 00 00	 jmp	 $LN144@TestLegacy
$LN76@TestLegacy:

; 1184 : 					nTestsPerformed++;

  00780	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00787	83 c0 01	 add	 eax, 1
  0078a	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00791	e9 90 02 00 00	 jmp	 $LN75@TestLegacy
$LN77@TestLegacy:

; 1185 : 				}
; 1186 : 				else if (strcmp (name, "Triple DES") == 0)	// Deprecated/legacy

  00796	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  0079b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@
  007a2	48 2b ca	 sub	 rcx, rdx
$LL214@TestLegacy:
  007a5	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  007a8	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  007ab	75 0c		 jne	 SHORT $LN216@TestLegacy
  007ad	48 83 c2 01	 add	 rdx, 1
  007b1	84 c0		 test	 al, al
  007b3	75 f0		 jne	 SHORT $LL214@TestLegacy
  007b5	33 c0		 xor	 eax, eax
  007b7	eb 05		 jmp	 SHORT $LN215@TestLegacy
$LN216@TestLegacy:
  007b9	1b c0		 sbb	 eax, eax
  007bb	83 d8 ff	 sbb	 eax, -1
$LN215@TestLegacy:
  007be	85 c0		 test	 eax, eax
  007c0	75 27		 jne	 SHORT $LN74@TestLegacy

; 1187 : 				{
; 1188 : 					if (crc != 0xfe497d0c)

  007c2	81 7c 24 20 0c
	7d 49 fe	 cmp	 DWORD PTR crc$[rsp], -28738292 ; fe497d0cH
  007ca	74 07		 je	 SHORT $LN73@TestLegacy

; 1189 : 						return FALSE;

  007cc	33 c0		 xor	 eax, eax
  007ce	e9 7f 08 00 00	 jmp	 $LN144@TestLegacy
$LN73@TestLegacy:

; 1190 : 					nTestsPerformed++;

  007d3	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  007da	83 c0 01	 add	 eax, 1
  007dd	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  007e4	e9 3d 02 00 00	 jmp	 $LN72@TestLegacy
$LN74@TestLegacy:

; 1191 : 				}
; 1192 : 				else if (strcmp (name, "AES-Blowfish") == 0)	// Deprecated/legacy

  007e9	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  007ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@
  007f5	48 2b ca	 sub	 rcx, rdx
$LL211@TestLegacy:
  007f8	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  007fb	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  007fe	75 0c		 jne	 SHORT $LN213@TestLegacy
  00800	48 83 c2 01	 add	 rdx, 1
  00804	84 c0		 test	 al, al
  00806	75 f0		 jne	 SHORT $LL211@TestLegacy
  00808	33 c0		 xor	 eax, eax
  0080a	eb 05		 jmp	 SHORT $LN212@TestLegacy
$LN213@TestLegacy:
  0080c	1b c0		 sbb	 eax, eax
  0080e	83 d8 ff	 sbb	 eax, -1
$LN212@TestLegacy:
  00811	85 c0		 test	 eax, eax
  00813	75 27		 jne	 SHORT $LN71@TestLegacy

; 1193 : 				{
; 1194 : 					if (crc != 0xa7a80c84)

  00815	81 7c 24 20 84
	0c a8 a7	 cmp	 DWORD PTR crc$[rsp], -1482158972 ; a7a80c84H
  0081d	74 07		 je	 SHORT $LN70@TestLegacy

; 1195 : 						return FALSE;

  0081f	33 c0		 xor	 eax, eax
  00821	e9 2c 08 00 00	 jmp	 $LN144@TestLegacy
$LN70@TestLegacy:

; 1196 : 					nTestsPerformed++;

  00826	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  0082d	83 c0 01	 add	 eax, 1
  00830	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00837	e9 ea 01 00 00	 jmp	 $LN69@TestLegacy
$LN71@TestLegacy:

; 1197 : 				}
; 1198 : 				else if (strcmp (name, "AES-Blowfish-Serpent") == 0)	// Deprecated/legacy

  0083c	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00841	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@
  00848	48 2b ca	 sub	 rcx, rdx
$LL208@TestLegacy:
  0084b	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  0084e	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00851	75 0c		 jne	 SHORT $LN210@TestLegacy
  00853	48 83 c2 01	 add	 rdx, 1
  00857	84 c0		 test	 al, al
  00859	75 f0		 jne	 SHORT $LL208@TestLegacy
  0085b	33 c0		 xor	 eax, eax
  0085d	eb 05		 jmp	 SHORT $LN209@TestLegacy
$LN210@TestLegacy:
  0085f	1b c0		 sbb	 eax, eax
  00861	83 d8 ff	 sbb	 eax, -1
$LN209@TestLegacy:
  00864	85 c0		 test	 eax, eax
  00866	75 27		 jne	 SHORT $LN68@TestLegacy

; 1199 : 				{
; 1200 : 					if (crc != 0xa0584562)

  00868	81 7c 24 20 62
	45 58 a0	 cmp	 DWORD PTR crc$[rsp], -1604827806 ; a0584562H
  00870	74 07		 je	 SHORT $LN67@TestLegacy

; 1201 : 						return FALSE;

  00872	33 c0		 xor	 eax, eax
  00874	e9 d9 07 00 00	 jmp	 $LN144@TestLegacy
$LN67@TestLegacy:

; 1202 : 					nTestsPerformed++;

  00879	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00880	83 c0 01	 add	 eax, 1
  00883	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  0088a	e9 97 01 00 00	 jmp	 $LN66@TestLegacy
$LN68@TestLegacy:

; 1203 : 				}
; 1204 : 				else if (strcmp (name, "AES-Twofish") == 0)

  0088f	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00894	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  0089b	48 2b ca	 sub	 rcx, rdx
$LL205@TestLegacy:
  0089e	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  008a1	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  008a4	75 0c		 jne	 SHORT $LN207@TestLegacy
  008a6	48 83 c2 01	 add	 rdx, 1
  008aa	84 c0		 test	 al, al
  008ac	75 f0		 jne	 SHORT $LL205@TestLegacy
  008ae	33 c0		 xor	 eax, eax
  008b0	eb 05		 jmp	 SHORT $LN206@TestLegacy
$LN207@TestLegacy:
  008b2	1b c0		 sbb	 eax, eax
  008b4	83 d8 ff	 sbb	 eax, -1
$LN206@TestLegacy:
  008b7	85 c0		 test	 eax, eax
  008b9	75 27		 jne	 SHORT $LN65@TestLegacy

; 1205 : 				{
; 1206 : 					if (crc != 0x3c226444)

  008bb	81 7c 24 20 44
	64 22 3c	 cmp	 DWORD PTR crc$[rsp], 1008886852 ; 3c226444H
  008c3	74 07		 je	 SHORT $LN64@TestLegacy

; 1207 : 						return FALSE;

  008c5	33 c0		 xor	 eax, eax
  008c7	e9 86 07 00 00	 jmp	 $LN144@TestLegacy
$LN64@TestLegacy:

; 1208 : 					nTestsPerformed++;

  008cc	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  008d3	83 c0 01	 add	 eax, 1
  008d6	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  008dd	e9 44 01 00 00	 jmp	 $LN63@TestLegacy
$LN65@TestLegacy:

; 1209 : 				}
; 1210 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  008e2	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  008e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  008ee	48 2b ca	 sub	 rcx, rdx
$LL202@TestLegacy:
  008f1	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  008f4	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  008f7	75 0c		 jne	 SHORT $LN204@TestLegacy
  008f9	48 83 c2 01	 add	 rdx, 1
  008fd	84 c0		 test	 al, al
  008ff	75 f0		 jne	 SHORT $LL202@TestLegacy
  00901	33 c0		 xor	 eax, eax
  00903	eb 05		 jmp	 SHORT $LN203@TestLegacy
$LN204@TestLegacy:
  00905	1b c0		 sbb	 eax, eax
  00907	83 d8 ff	 sbb	 eax, -1
$LN203@TestLegacy:
  0090a	85 c0		 test	 eax, eax
  0090c	75 27		 jne	 SHORT $LN62@TestLegacy

; 1211 : 				{
; 1212 : 					if (crc != 0x5e5e77fd)

  0090e	81 7c 24 20 fd
	77 5e 5e	 cmp	 DWORD PTR crc$[rsp], 1583249405 ; 5e5e77fdH
  00916	74 07		 je	 SHORT $LN61@TestLegacy

; 1213 : 						return FALSE;

  00918	33 c0		 xor	 eax, eax
  0091a	e9 33 07 00 00	 jmp	 $LN144@TestLegacy
$LN61@TestLegacy:

; 1214 : 					nTestsPerformed++;

  0091f	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00926	83 c0 01	 add	 eax, 1
  00929	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00930	e9 f1 00 00 00	 jmp	 $LN60@TestLegacy
$LN62@TestLegacy:

; 1215 : 				}
; 1216 : 				else if (strcmp (name, "Serpent-AES") == 0)

  00935	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  0093a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  00941	48 2b ca	 sub	 rcx, rdx
$LL199@TestLegacy:
  00944	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00947	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  0094a	75 0c		 jne	 SHORT $LN201@TestLegacy
  0094c	48 83 c2 01	 add	 rdx, 1
  00950	84 c0		 test	 al, al
  00952	75 f0		 jne	 SHORT $LL199@TestLegacy
  00954	33 c0		 xor	 eax, eax
  00956	eb 05		 jmp	 SHORT $LN200@TestLegacy
$LN201@TestLegacy:
  00958	1b c0		 sbb	 eax, eax
  0095a	83 d8 ff	 sbb	 eax, -1
$LN200@TestLegacy:
  0095d	85 c0		 test	 eax, eax
  0095f	75 27		 jne	 SHORT $LN59@TestLegacy

; 1217 : 				{
; 1218 : 					if (crc != 0x57c612d5)

  00961	81 7c 24 20 d5
	12 c6 57	 cmp	 DWORD PTR crc$[rsp], 1472598741 ; 57c612d5H
  00969	74 07		 je	 SHORT $LN58@TestLegacy

; 1219 : 						return FALSE;

  0096b	33 c0		 xor	 eax, eax
  0096d	e9 e0 06 00 00	 jmp	 $LN144@TestLegacy
$LN58@TestLegacy:

; 1220 : 					nTestsPerformed++;

  00972	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00979	83 c0 01	 add	 eax, 1
  0097c	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00983	e9 9e 00 00 00	 jmp	 $LN57@TestLegacy
$LN59@TestLegacy:

; 1221 : 				}
; 1222 : 				else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  00988	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  0098d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  00994	48 2b ca	 sub	 rcx, rdx
$LL196@TestLegacy:
  00997	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  0099a	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  0099d	75 0c		 jne	 SHORT $LN198@TestLegacy
  0099f	48 83 c2 01	 add	 rdx, 1
  009a3	84 c0		 test	 al, al
  009a5	75 f0		 jne	 SHORT $LL196@TestLegacy
  009a7	33 c0		 xor	 eax, eax
  009a9	eb 05		 jmp	 SHORT $LN197@TestLegacy
$LN198@TestLegacy:
  009ab	1b c0		 sbb	 eax, eax
  009ad	83 d8 ff	 sbb	 eax, -1
$LN197@TestLegacy:
  009b0	85 c0		 test	 eax, eax
  009b2	75 24		 jne	 SHORT $LN56@TestLegacy

; 1223 : 				{
; 1224 : 					if (crc != 0x081e045a)

  009b4	81 7c 24 20 5a
	04 1e 08	 cmp	 DWORD PTR crc$[rsp], 136184922 ; 081e045aH
  009bc	74 07		 je	 SHORT $LN55@TestLegacy

; 1225 : 						return FALSE;

  009be	33 c0		 xor	 eax, eax
  009c0	e9 8d 06 00 00	 jmp	 $LN144@TestLegacy
$LN55@TestLegacy:

; 1226 : 					nTestsPerformed++;

  009c5	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  009cc	83 c0 01	 add	 eax, 1
  009cf	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  009d6	eb 4e		 jmp	 SHORT $LN54@TestLegacy
$LN56@TestLegacy:

; 1227 : 				}
; 1228 : 				else if (strcmp (name, "Twofish-Serpent") == 0)

  009d8	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  009dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  009e4	48 2b ca	 sub	 rcx, rdx
$LL193@TestLegacy:
  009e7	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  009ea	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  009ed	75 0c		 jne	 SHORT $LN195@TestLegacy
  009ef	48 83 c2 01	 add	 rdx, 1
  009f3	84 c0		 test	 al, al
  009f5	75 f0		 jne	 SHORT $LL193@TestLegacy
  009f7	33 c0		 xor	 eax, eax
  009f9	eb 05		 jmp	 SHORT $LN194@TestLegacy
$LN195@TestLegacy:
  009fb	1b c0		 sbb	 eax, eax
  009fd	83 d8 ff	 sbb	 eax, -1
$LN194@TestLegacy:
  00a00	85 c0		 test	 eax, eax
  00a02	75 22		 jne	 SHORT $LN53@TestLegacy

; 1229 : 				{
; 1230 : 					if (crc != 0xa7b659f3)

  00a04	81 7c 24 20 f3
	59 b6 a7	 cmp	 DWORD PTR crc$[rsp], -1481221645 ; a7b659f3H
  00a0c	74 07		 je	 SHORT $LN52@TestLegacy

; 1231 : 						return FALSE;

  00a0e	33 c0		 xor	 eax, eax
  00a10	e9 3d 06 00 00	 jmp	 $LN144@TestLegacy
$LN52@TestLegacy:

; 1232 : 					nTestsPerformed++;

  00a15	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00a1c	83 c0 01	 add	 eax, 1
  00a1f	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
$LN53@TestLegacy:
$LN54@TestLegacy:
$LN57@TestLegacy:
$LN60@TestLegacy:
$LN63@TestLegacy:
$LN66@TestLegacy:
$LN69@TestLegacy:
$LN72@TestLegacy:
$LN75@TestLegacy:
$LN78@TestLegacy:
$LN81@TestLegacy:
$LN84@TestLegacy:
$LN121@TestLegacy:

; 1233 : 				}
; 1234 : 				break;
; 1235 : 			}
; 1236 : 
; 1237 : 			if (crc == 0xb70b4c26)

  00a26	81 7c 24 20 26
	4c 0b b7	 cmp	 DWORD PTR crc$[rsp], -1223996378 ; b70b4c26H
  00a2e	75 07		 jne	 SHORT $LN51@TestLegacy

; 1238 : 				return FALSE;

  00a30	33 c0		 xor	 eax, eax
  00a32	e9 1b 06 00 00	 jmp	 $LN144@TestLegacy
$LN51@TestLegacy:

; 1239 : 
; 1240 : 			DecryptDataUnits (buf, &unitNo, nbrUnits, ci);

  00a37	4c 8b 8c 24 c0
	04 00 00	 mov	 r9, QWORD PTR ci$[rsp]
  00a3f	44 8b 84 24 80
	04 00 00	 mov	 r8d, DWORD PTR nbrUnits$[rsp]
  00a47	48 8d 54 24 30	 lea	 rdx, QWORD PTR unitNo$[rsp]
  00a4c	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00a54	e8 00 00 00 00	 call	 DecryptDataUnits

; 1241 : 
; 1242 : 			if (GetCrc32 (buf, sizeof (buf)) != 0xb70b4c26)

  00a59	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00a5e	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00a66	e8 00 00 00 00	 call	 GetCrc32
  00a6b	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  00a70	74 07		 je	 SHORT $LN50@TestLegacy

; 1243 : 				return FALSE;

  00a72	33 c0		 xor	 eax, eax
  00a74	e9 d9 05 00 00	 jmp	 $LN144@TestLegacy
$LN50@TestLegacy:

; 1244 : 
; 1245 : 			nTestsPerformed++;

  00a79	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00a80	83 c0 01	 add	 eax, 1
  00a83	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 1246 : 
; 1247 : 			EncryptBuffer (buf, sizeof (buf), ci);

  00a8a	4c 8b 84 24 c0
	04 00 00	 mov	 r8, QWORD PTR ci$[rsp]
  00a92	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00a97	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00a9f	e8 00 00 00 00	 call	 EncryptBuffer

; 1248 : 			crc = GetCrc32 (buf, sizeof (buf));

  00aa4	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00aa9	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00ab1	e8 00 00 00 00	 call	 GetCrc32
  00ab6	89 44 24 20	 mov	 DWORD PTR crc$[rsp], eax

; 1249 : 
; 1250 : 			switch (ci->mode)

  00aba	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00ac2	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00ac5	89 84 24 94 04
	00 00		 mov	 DWORD PTR tv313[rsp], eax
  00acc	83 bc 24 94 04
	00 00 02	 cmp	 DWORD PTR tv313[rsp], 2
  00ad4	74 21		 je	 SHORT $LN47@TestLegacy
  00ad6	83 bc 24 94 04
	00 00 02	 cmp	 DWORD PTR tv313[rsp], 2
  00ade	0f 8e e5 04 00
	00		 jle	 $LN48@TestLegacy
  00ae4	83 bc 24 94 04
	00 00 05	 cmp	 DWORD PTR tv313[rsp], 5
  00aec	0f 8e fb 00 00
	00		 jle	 $LN38@TestLegacy
  00af2	e9 d2 04 00 00	 jmp	 $LN48@TestLegacy
$LN47@TestLegacy:

; 1251 : 			{
; 1252 : 			case LRW:		// Deprecated/legacy
; 1253 : 				if (strcmp (name, "AES") == 0)

  00af7	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00afc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  00b03	48 2b ca	 sub	 rcx, rdx
$LL190@TestLegacy:
  00b06	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00b09	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00b0c	75 0c		 jne	 SHORT $LN192@TestLegacy
  00b0e	48 83 c2 01	 add	 rdx, 1
  00b12	84 c0		 test	 al, al
  00b14	75 f0		 jne	 SHORT $LL190@TestLegacy
  00b16	33 c0		 xor	 eax, eax
  00b18	eb 05		 jmp	 SHORT $LN191@TestLegacy
$LN192@TestLegacy:
  00b1a	1b c0		 sbb	 eax, eax
  00b1c	83 d8 ff	 sbb	 eax, -1
$LN191@TestLegacy:
  00b1f	85 c0		 test	 eax, eax
  00b21	75 27		 jne	 SHORT $LN46@TestLegacy

; 1254 : 				{
; 1255 : 					if (crc != 0x5ae1e3d8)

  00b23	81 7c 24 20 d8
	e3 e1 5a	 cmp	 DWORD PTR crc$[rsp], 1524753368 ; 5ae1e3d8H
  00b2b	74 07		 je	 SHORT $LN45@TestLegacy

; 1256 : 						return FALSE;

  00b2d	33 c0		 xor	 eax, eax
  00b2f	e9 1e 05 00 00	 jmp	 $LN144@TestLegacy
$LN45@TestLegacy:

; 1257 : 					nTestsPerformed++;

  00b34	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00b3b	83 c0 01	 add	 eax, 1
  00b3e	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00b45	e9 9e 00 00 00	 jmp	 $LN44@TestLegacy
$LN46@TestLegacy:

; 1258 : 				}
; 1259 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  00b4a	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00b4f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
  00b56	48 2b ca	 sub	 rcx, rdx
$LL187@TestLegacy:
  00b59	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00b5c	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00b5f	75 0c		 jne	 SHORT $LN189@TestLegacy
  00b61	48 83 c2 01	 add	 rdx, 1
  00b65	84 c0		 test	 al, al
  00b67	75 f0		 jne	 SHORT $LL187@TestLegacy
  00b69	33 c0		 xor	 eax, eax
  00b6b	eb 05		 jmp	 SHORT $LN188@TestLegacy
$LN189@TestLegacy:
  00b6d	1b c0		 sbb	 eax, eax
  00b6f	83 d8 ff	 sbb	 eax, -1
$LN188@TestLegacy:
  00b72	85 c0		 test	 eax, eax
  00b74	75 24		 jne	 SHORT $LN43@TestLegacy

; 1260 : 				{
; 1261 : 					if (crc != 0x2738426f)

  00b76	81 7c 24 20 6f
	42 38 27	 cmp	 DWORD PTR crc$[rsp], 657998447 ; 2738426fH
  00b7e	74 07		 je	 SHORT $LN42@TestLegacy

; 1262 : 						return FALSE;

  00b80	33 c0		 xor	 eax, eax
  00b82	e9 cb 04 00 00	 jmp	 $LN144@TestLegacy
$LN42@TestLegacy:

; 1263 : 					nTestsPerformed++;

  00b87	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00b8e	83 c0 01	 add	 eax, 1
  00b91	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00b98	eb 4e		 jmp	 SHORT $LN41@TestLegacy
$LN43@TestLegacy:

; 1264 : 				}
; 1265 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  00b9a	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00b9f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  00ba6	48 2b ca	 sub	 rcx, rdx
$LL184@TestLegacy:
  00ba9	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00bac	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00baf	75 0c		 jne	 SHORT $LN186@TestLegacy
  00bb1	48 83 c2 01	 add	 rdx, 1
  00bb5	84 c0		 test	 al, al
  00bb7	75 f0		 jne	 SHORT $LL184@TestLegacy
  00bb9	33 c0		 xor	 eax, eax
  00bbb	eb 05		 jmp	 SHORT $LN185@TestLegacy
$LN186@TestLegacy:
  00bbd	1b c0		 sbb	 eax, eax
  00bbf	83 d8 ff	 sbb	 eax, -1
$LN185@TestLegacy:
  00bc2	85 c0		 test	 eax, eax
  00bc4	75 22		 jne	 SHORT $LN40@TestLegacy

; 1266 : 				{
; 1267 : 					if (crc != 0x14f2948a)

  00bc6	81 7c 24 20 8a
	94 f2 14	 cmp	 DWORD PTR crc$[rsp], 351442058 ; 14f2948aH
  00bce	74 07		 je	 SHORT $LN39@TestLegacy

; 1268 : 						return FALSE;

  00bd0	33 c0		 xor	 eax, eax
  00bd2	e9 7b 04 00 00	 jmp	 $LN144@TestLegacy
$LN39@TestLegacy:

; 1269 : 					nTestsPerformed++;

  00bd7	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00bde	83 c0 01	 add	 eax, 1
  00be1	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
$LN40@TestLegacy:
$LN41@TestLegacy:
$LN44@TestLegacy:

; 1270 : 				}
; 1271 : 				break;

  00be8	e9 dc 03 00 00	 jmp	 $LN48@TestLegacy
$LN38@TestLegacy:

; 1272 : 
; 1273 : 			case CBC:		// Deprecated/legacy
; 1274 : 			case INNER_CBC:	// Deprecated/legacy
; 1275 : 			case OUTER_CBC:	// Deprecated/legacy
; 1276 : 				if (strcmp (name, "AES") == 0)

  00bed	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00bf2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  00bf9	48 2b ca	 sub	 rcx, rdx
$LL181@TestLegacy:
  00bfc	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00bff	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00c02	75 0c		 jne	 SHORT $LN183@TestLegacy
  00c04	48 83 c2 01	 add	 rdx, 1
  00c08	84 c0		 test	 al, al
  00c0a	75 f0		 jne	 SHORT $LL181@TestLegacy
  00c0c	33 c0		 xor	 eax, eax
  00c0e	eb 05		 jmp	 SHORT $LN182@TestLegacy
$LN183@TestLegacy:
  00c10	1b c0		 sbb	 eax, eax
  00c12	83 d8 ff	 sbb	 eax, -1
$LN182@TestLegacy:
  00c15	85 c0		 test	 eax, eax
  00c17	75 27		 jne	 SHORT $LN37@TestLegacy

; 1277 : 				{
; 1278 : 					if (crc != 0x960f740e)

  00c19	81 7c 24 20 0e
	74 0f 96	 cmp	 DWORD PTR crc$[rsp], -1777372146 ; 960f740eH
  00c21	74 07		 je	 SHORT $LN36@TestLegacy

; 1279 : 						return FALSE;

  00c23	33 c0		 xor	 eax, eax
  00c25	e9 28 04 00 00	 jmp	 $LN144@TestLegacy
$LN36@TestLegacy:

; 1280 : 					nTestsPerformed++;

  00c2a	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00c31	83 c0 01	 add	 eax, 1
  00c34	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00c3b	e9 89 03 00 00	 jmp	 $LN35@TestLegacy
$LN37@TestLegacy:

; 1281 : 				}
; 1282 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  00c40	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00c45	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
  00c4c	48 2b ca	 sub	 rcx, rdx
$LL178@TestLegacy:
  00c4f	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00c52	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00c55	75 0c		 jne	 SHORT $LN180@TestLegacy
  00c57	48 83 c2 01	 add	 rdx, 1
  00c5b	84 c0		 test	 al, al
  00c5d	75 f0		 jne	 SHORT $LL178@TestLegacy
  00c5f	33 c0		 xor	 eax, eax
  00c61	eb 05		 jmp	 SHORT $LN179@TestLegacy
$LN180@TestLegacy:
  00c63	1b c0		 sbb	 eax, eax
  00c65	83 d8 ff	 sbb	 eax, -1
$LN179@TestLegacy:
  00c68	85 c0		 test	 eax, eax
  00c6a	75 27		 jne	 SHORT $LN34@TestLegacy

; 1283 : 				{
; 1284 : 					if (crc != 0x7e1cfabb)

  00c6c	81 7c 24 20 bb
	fa 1c 7e	 cmp	 DWORD PTR crc$[rsp], 2115828411 ; 7e1cfabbH
  00c74	74 07		 je	 SHORT $LN33@TestLegacy

; 1285 : 						return FALSE;

  00c76	33 c0		 xor	 eax, eax
  00c78	e9 d5 03 00 00	 jmp	 $LN144@TestLegacy
$LN33@TestLegacy:

; 1286 : 					nTestsPerformed++;

  00c7d	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00c84	83 c0 01	 add	 eax, 1
  00c87	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00c8e	e9 36 03 00 00	 jmp	 $LN32@TestLegacy
$LN34@TestLegacy:

; 1287 : 				}
; 1288 : 				else if (strcmp (name, "CAST5") == 0)	// Deprecated/legacy

  00c93	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00c98	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@
  00c9f	48 2b ca	 sub	 rcx, rdx
$LL175@TestLegacy:
  00ca2	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00ca5	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00ca8	75 0c		 jne	 SHORT $LN177@TestLegacy
  00caa	48 83 c2 01	 add	 rdx, 1
  00cae	84 c0		 test	 al, al
  00cb0	75 f0		 jne	 SHORT $LL175@TestLegacy
  00cb2	33 c0		 xor	 eax, eax
  00cb4	eb 05		 jmp	 SHORT $LN176@TestLegacy
$LN177@TestLegacy:
  00cb6	1b c0		 sbb	 eax, eax
  00cb8	83 d8 ff	 sbb	 eax, -1
$LN176@TestLegacy:
  00cbb	85 c0		 test	 eax, eax
  00cbd	75 27		 jne	 SHORT $LN31@TestLegacy

; 1289 : 				{
; 1290 : 					if (crc != 0xeaae21c8)

  00cbf	81 7c 24 20 c8
	21 ae ea	 cmp	 DWORD PTR crc$[rsp], -357686840 ; eaae21c8H
  00cc7	74 07		 je	 SHORT $LN30@TestLegacy

; 1291 : 						return FALSE;

  00cc9	33 c0		 xor	 eax, eax
  00ccb	e9 82 03 00 00	 jmp	 $LN144@TestLegacy
$LN30@TestLegacy:

; 1292 : 					nTestsPerformed++;

  00cd0	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00cd7	83 c0 01	 add	 eax, 1
  00cda	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00ce1	e9 e3 02 00 00	 jmp	 $LN29@TestLegacy
$LN31@TestLegacy:

; 1293 : 				}
; 1294 : 				else if (strcmp (name, "Serpent") == 0)

  00ce6	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00ceb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  00cf2	48 2b ca	 sub	 rcx, rdx
$LL172@TestLegacy:
  00cf5	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00cf8	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00cfb	75 0c		 jne	 SHORT $LN174@TestLegacy
  00cfd	48 83 c2 01	 add	 rdx, 1
  00d01	84 c0		 test	 al, al
  00d03	75 f0		 jne	 SHORT $LL172@TestLegacy
  00d05	33 c0		 xor	 eax, eax
  00d07	eb 05		 jmp	 SHORT $LN173@TestLegacy
$LN174@TestLegacy:
  00d09	1b c0		 sbb	 eax, eax
  00d0b	83 d8 ff	 sbb	 eax, -1
$LN173@TestLegacy:
  00d0e	85 c0		 test	 eax, eax
  00d10	75 27		 jne	 SHORT $LN28@TestLegacy

; 1295 : 				{
; 1296 : 					if (crc != 0xa8139d62)

  00d12	81 7c 24 20 62
	9d 13 a8	 cmp	 DWORD PTR crc$[rsp], -1475109534 ; a8139d62H
  00d1a	74 07		 je	 SHORT $LN27@TestLegacy

; 1297 : 						return FALSE;

  00d1c	33 c0		 xor	 eax, eax
  00d1e	e9 2f 03 00 00	 jmp	 $LN144@TestLegacy
$LN27@TestLegacy:

; 1298 : 					nTestsPerformed++;

  00d23	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00d2a	83 c0 01	 add	 eax, 1
  00d2d	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00d34	e9 90 02 00 00	 jmp	 $LN26@TestLegacy
$LN28@TestLegacy:

; 1299 : 				}
; 1300 : 				else if (strcmp (name, "Triple DES") == 0)	// Deprecated/legacy

  00d39	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00d3e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@
  00d45	48 2b ca	 sub	 rcx, rdx
$LL169@TestLegacy:
  00d48	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00d4b	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00d4e	75 0c		 jne	 SHORT $LN171@TestLegacy
  00d50	48 83 c2 01	 add	 rdx, 1
  00d54	84 c0		 test	 al, al
  00d56	75 f0		 jne	 SHORT $LL169@TestLegacy
  00d58	33 c0		 xor	 eax, eax
  00d5a	eb 05		 jmp	 SHORT $LN170@TestLegacy
$LN171@TestLegacy:
  00d5c	1b c0		 sbb	 eax, eax
  00d5e	83 d8 ff	 sbb	 eax, -1
$LN170@TestLegacy:
  00d61	85 c0		 test	 eax, eax
  00d63	75 27		 jne	 SHORT $LN25@TestLegacy

; 1301 : 				{
; 1302 : 					if (crc != 0xecf5d7d0)

  00d65	81 7c 24 20 d0
	d7 f5 ec	 cmp	 DWORD PTR crc$[rsp], -319432752 ; ecf5d7d0H
  00d6d	74 07		 je	 SHORT $LN24@TestLegacy

; 1303 : 						return FALSE;

  00d6f	33 c0		 xor	 eax, eax
  00d71	e9 dc 02 00 00	 jmp	 $LN144@TestLegacy
$LN24@TestLegacy:

; 1304 : 					nTestsPerformed++;

  00d76	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00d7d	83 c0 01	 add	 eax, 1
  00d80	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00d87	e9 3d 02 00 00	 jmp	 $LN23@TestLegacy
$LN25@TestLegacy:

; 1305 : 				}
; 1306 : 				else if (strcmp (name, "AES-Blowfish") == 0)	// Deprecated/legacy

  00d8c	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00d91	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@
  00d98	48 2b ca	 sub	 rcx, rdx
$LL166@TestLegacy:
  00d9b	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00d9e	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00da1	75 0c		 jne	 SHORT $LN168@TestLegacy
  00da3	48 83 c2 01	 add	 rdx, 1
  00da7	84 c0		 test	 al, al
  00da9	75 f0		 jne	 SHORT $LL166@TestLegacy
  00dab	33 c0		 xor	 eax, eax
  00dad	eb 05		 jmp	 SHORT $LN167@TestLegacy
$LN168@TestLegacy:
  00daf	1b c0		 sbb	 eax, eax
  00db1	83 d8 ff	 sbb	 eax, -1
$LN167@TestLegacy:
  00db4	85 c0		 test	 eax, eax
  00db6	75 27		 jne	 SHORT $LN22@TestLegacy

; 1307 : 				{
; 1308 : 					if (crc != 0xb70171b6)

  00db8	81 7c 24 20 b6
	71 01 b7	 cmp	 DWORD PTR crc$[rsp], -1224642122 ; b70171b6H
  00dc0	74 07		 je	 SHORT $LN21@TestLegacy

; 1309 : 						return FALSE;

  00dc2	33 c0		 xor	 eax, eax
  00dc4	e9 89 02 00 00	 jmp	 $LN144@TestLegacy
$LN21@TestLegacy:

; 1310 : 					nTestsPerformed++;

  00dc9	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00dd0	83 c0 01	 add	 eax, 1
  00dd3	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00dda	e9 ea 01 00 00	 jmp	 $LN20@TestLegacy
$LN22@TestLegacy:

; 1311 : 				}
; 1312 : 				else if (strcmp (name, "AES-Blowfish-Serpent") == 0)	// Deprecated/legacy

  00ddf	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00de4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@
  00deb	48 2b ca	 sub	 rcx, rdx
$LL163@TestLegacy:
  00dee	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00df1	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00df4	75 0c		 jne	 SHORT $LN165@TestLegacy
  00df6	48 83 c2 01	 add	 rdx, 1
  00dfa	84 c0		 test	 al, al
  00dfc	75 f0		 jne	 SHORT $LL163@TestLegacy
  00dfe	33 c0		 xor	 eax, eax
  00e00	eb 05		 jmp	 SHORT $LN164@TestLegacy
$LN165@TestLegacy:
  00e02	1b c0		 sbb	 eax, eax
  00e04	83 d8 ff	 sbb	 eax, -1
$LN164@TestLegacy:
  00e07	85 c0		 test	 eax, eax
  00e09	75 27		 jne	 SHORT $LN19@TestLegacy

; 1313 : 				{
; 1314 : 					if (crc != 0x1e749a87)

  00e0b	81 7c 24 20 87
	9a 74 1e	 cmp	 DWORD PTR crc$[rsp], 510958215 ; 1e749a87H
  00e13	74 07		 je	 SHORT $LN18@TestLegacy

; 1315 : 						return FALSE;

  00e15	33 c0		 xor	 eax, eax
  00e17	e9 36 02 00 00	 jmp	 $LN144@TestLegacy
$LN18@TestLegacy:

; 1316 : 					nTestsPerformed++;

  00e1c	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00e23	83 c0 01	 add	 eax, 1
  00e26	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00e2d	e9 97 01 00 00	 jmp	 $LN17@TestLegacy
$LN19@TestLegacy:

; 1317 : 				}
; 1318 : 				else if (strcmp (name, "AES-Twofish") == 0)

  00e32	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00e37	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  00e3e	48 2b ca	 sub	 rcx, rdx
$LL160@TestLegacy:
  00e41	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00e44	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00e47	75 0c		 jne	 SHORT $LN162@TestLegacy
  00e49	48 83 c2 01	 add	 rdx, 1
  00e4d	84 c0		 test	 al, al
  00e4f	75 f0		 jne	 SHORT $LL160@TestLegacy
  00e51	33 c0		 xor	 eax, eax
  00e53	eb 05		 jmp	 SHORT $LN161@TestLegacy
$LN162@TestLegacy:
  00e55	1b c0		 sbb	 eax, eax
  00e57	83 d8 ff	 sbb	 eax, -1
$LN161@TestLegacy:
  00e5a	85 c0		 test	 eax, eax
  00e5c	75 27		 jne	 SHORT $LN16@TestLegacy

; 1319 : 				{
; 1320 : 					if (crc != 0xb4b8bb9b)

  00e5e	81 7c 24 20 9b
	bb b8 b4	 cmp	 DWORD PTR crc$[rsp], -1262961765 ; b4b8bb9bH
  00e66	74 07		 je	 SHORT $LN15@TestLegacy

; 1321 : 						return FALSE;

  00e68	33 c0		 xor	 eax, eax
  00e6a	e9 e3 01 00 00	 jmp	 $LN144@TestLegacy
$LN15@TestLegacy:

; 1322 : 					nTestsPerformed++;

  00e6f	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00e76	83 c0 01	 add	 eax, 1
  00e79	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00e80	e9 44 01 00 00	 jmp	 $LN14@TestLegacy
$LN16@TestLegacy:

; 1323 : 				}
; 1324 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  00e85	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00e8a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  00e91	48 2b ca	 sub	 rcx, rdx
$LL157@TestLegacy:
  00e94	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00e97	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00e9a	75 0c		 jne	 SHORT $LN159@TestLegacy
  00e9c	48 83 c2 01	 add	 rdx, 1
  00ea0	84 c0		 test	 al, al
  00ea2	75 f0		 jne	 SHORT $LL157@TestLegacy
  00ea4	33 c0		 xor	 eax, eax
  00ea6	eb 05		 jmp	 SHORT $LN158@TestLegacy
$LN159@TestLegacy:
  00ea8	1b c0		 sbb	 eax, eax
  00eaa	83 d8 ff	 sbb	 eax, -1
$LN158@TestLegacy:
  00ead	85 c0		 test	 eax, eax
  00eaf	75 27		 jne	 SHORT $LN13@TestLegacy

; 1325 : 				{
; 1326 : 					if (crc != 0x76b6c1cb)

  00eb1	81 7c 24 20 cb
	c1 b6 76	 cmp	 DWORD PTR crc$[rsp], 1991688651 ; 76b6c1cbH
  00eb9	74 07		 je	 SHORT $LN12@TestLegacy

; 1327 : 						return FALSE;

  00ebb	33 c0		 xor	 eax, eax
  00ebd	e9 90 01 00 00	 jmp	 $LN144@TestLegacy
$LN12@TestLegacy:

; 1328 : 					nTestsPerformed++;

  00ec2	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00ec9	83 c0 01	 add	 eax, 1
  00ecc	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00ed3	e9 f1 00 00 00	 jmp	 $LN11@TestLegacy
$LN13@TestLegacy:

; 1329 : 				}
; 1330 : 				else if (strcmp (name, "Serpent-AES") == 0)

  00ed8	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00edd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  00ee4	48 2b ca	 sub	 rcx, rdx
$LL154@TestLegacy:
  00ee7	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00eea	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00eed	75 0c		 jne	 SHORT $LN156@TestLegacy
  00eef	48 83 c2 01	 add	 rdx, 1
  00ef3	84 c0		 test	 al, al
  00ef5	75 f0		 jne	 SHORT $LL154@TestLegacy
  00ef7	33 c0		 xor	 eax, eax
  00ef9	eb 05		 jmp	 SHORT $LN155@TestLegacy
$LN156@TestLegacy:
  00efb	1b c0		 sbb	 eax, eax
  00efd	83 d8 ff	 sbb	 eax, -1
$LN155@TestLegacy:
  00f00	85 c0		 test	 eax, eax
  00f02	75 27		 jne	 SHORT $LN10@TestLegacy

; 1331 : 				{
; 1332 : 					if (crc != 0x634f12ed)

  00f04	81 7c 24 20 ed
	12 4f 63	 cmp	 DWORD PTR crc$[rsp], 1666126573 ; 634f12edH
  00f0c	74 07		 je	 SHORT $LN9@TestLegacy

; 1333 : 						return FALSE;

  00f0e	33 c0		 xor	 eax, eax
  00f10	e9 3d 01 00 00	 jmp	 $LN144@TestLegacy
$LN9@TestLegacy:

; 1334 : 					nTestsPerformed++;

  00f15	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00f1c	83 c0 01	 add	 eax, 1
  00f1f	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00f26	e9 9e 00 00 00	 jmp	 $LN8@TestLegacy
$LN10@TestLegacy:

; 1335 : 				}
; 1336 : 				else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  00f2b	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00f30	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  00f37	48 2b ca	 sub	 rcx, rdx
$LL151@TestLegacy:
  00f3a	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00f3d	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00f40	75 0c		 jne	 SHORT $LN153@TestLegacy
  00f42	48 83 c2 01	 add	 rdx, 1
  00f46	84 c0		 test	 al, al
  00f48	75 f0		 jne	 SHORT $LL151@TestLegacy
  00f4a	33 c0		 xor	 eax, eax
  00f4c	eb 05		 jmp	 SHORT $LN152@TestLegacy
$LN153@TestLegacy:
  00f4e	1b c0		 sbb	 eax, eax
  00f50	83 d8 ff	 sbb	 eax, -1
$LN152@TestLegacy:
  00f53	85 c0		 test	 eax, eax
  00f55	75 24		 jne	 SHORT $LN7@TestLegacy

; 1337 : 				{
; 1338 : 					if (crc != 0xe54bc1b9)

  00f57	81 7c 24 20 b9
	c1 4b e5	 cmp	 DWORD PTR crc$[rsp], -448020039 ; e54bc1b9H
  00f5f	74 07		 je	 SHORT $LN6@TestLegacy

; 1339 : 						return FALSE;

  00f61	33 c0		 xor	 eax, eax
  00f63	e9 ea 00 00 00	 jmp	 $LN144@TestLegacy
$LN6@TestLegacy:

; 1340 : 					nTestsPerformed++;

  00f68	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00f6f	83 c0 01	 add	 eax, 1
  00f72	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00f79	eb 4e		 jmp	 SHORT $LN5@TestLegacy
$LN7@TestLegacy:

; 1341 : 				}
; 1342 : 				else if (strcmp (name, "Twofish-Serpent") == 0)

  00f7b	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00f80	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  00f87	48 2b ca	 sub	 rcx, rdx
$LL148@TestLegacy:
  00f8a	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00f8d	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00f90	75 0c		 jne	 SHORT $LN150@TestLegacy
  00f92	48 83 c2 01	 add	 rdx, 1
  00f96	84 c0		 test	 al, al
  00f98	75 f0		 jne	 SHORT $LL148@TestLegacy
  00f9a	33 c0		 xor	 eax, eax
  00f9c	eb 05		 jmp	 SHORT $LN149@TestLegacy
$LN150@TestLegacy:
  00f9e	1b c0		 sbb	 eax, eax
  00fa0	83 d8 ff	 sbb	 eax, -1
$LN149@TestLegacy:
  00fa3	85 c0		 test	 eax, eax
  00fa5	75 22		 jne	 SHORT $LN4@TestLegacy

; 1343 : 				{
; 1344 : 					if (crc != 0x21cdb382)

  00fa7	81 7c 24 20 82
	b3 cd 21	 cmp	 DWORD PTR crc$[rsp], 567128962 ; 21cdb382H
  00faf	74 07		 je	 SHORT $LN3@TestLegacy

; 1345 : 						return FALSE;

  00fb1	33 c0		 xor	 eax, eax
  00fb3	e9 9a 00 00 00	 jmp	 $LN144@TestLegacy
$LN3@TestLegacy:

; 1346 : 					nTestsPerformed++;

  00fb8	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00fbf	83 c0 01	 add	 eax, 1
  00fc2	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
$LN4@TestLegacy:
$LN5@TestLegacy:
$LN8@TestLegacy:
$LN11@TestLegacy:
$LN14@TestLegacy:
$LN17@TestLegacy:
$LN20@TestLegacy:
$LN23@TestLegacy:
$LN26@TestLegacy:
$LN29@TestLegacy:
$LN32@TestLegacy:
$LN35@TestLegacy:
$LN48@TestLegacy:

; 1347 : 				}
; 1348 : 				break;
; 1349 : 			}
; 1350 : 
; 1351 : 			if (crc == 0xb70b4c26)

  00fc9	81 7c 24 20 26
	4c 0b b7	 cmp	 DWORD PTR crc$[rsp], -1223996378 ; b70b4c26H
  00fd1	75 04		 jne	 SHORT $LN2@TestLegacy

; 1352 : 				return FALSE;

  00fd3	33 c0		 xor	 eax, eax
  00fd5	eb 7b		 jmp	 SHORT $LN144@TestLegacy
$LN2@TestLegacy:

; 1353 : 
; 1354 : 			DecryptBuffer (buf, sizeof (buf), ci);

  00fd7	4c 8b 84 24 c0
	04 00 00	 mov	 r8, QWORD PTR ci$[rsp]
  00fdf	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00fe4	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00fec	e8 00 00 00 00	 call	 DecryptBuffer

; 1355 : 
; 1356 : 			if (GetCrc32 (buf, sizeof (buf)) != 0xb70b4c26)

  00ff1	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00ff6	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00ffe	e8 00 00 00 00	 call	 GetCrc32
  01003	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  01008	74 04		 je	 SHORT $LN1@TestLegacy

; 1357 : 				return FALSE;

  0100a	33 c0		 xor	 eax, eax
  0100c	eb 44		 jmp	 SHORT $LN144@TestLegacy
$LN1@TestLegacy:

; 1358 : 
; 1359 : 			nTestsPerformed++;

  0100e	8b 84 24 84 04
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  01015	83 c0 01	 add	 eax, 1
  01018	89 84 24 84 04
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 1360 : 		}

  0101f	e9 64 f1 ff ff	 jmp	 $LN132@TestLegacy
$LN131@TestLegacy:

; 1361 : 	}

  01024	e9 b0 f0 ff ff	 jmp	 $LN136@TestLegacy
$LN135@TestLegacy:

; 1362 : 	return (nTestsPerformed == 86);

  01029	83 bc 24 84 04
	00 00 56	 cmp	 DWORD PTR nTestsPerformed$[rsp], 86 ; 00000056H
  01031	75 0d		 jne	 SHORT $LN146@TestLegacy
  01033	c7 84 24 98 04
	00 00 01 00 00
	00		 mov	 DWORD PTR tv417[rsp], 1
  0103e	eb 0b		 jmp	 SHORT $LN147@TestLegacy
$LN146@TestLegacy:
  01040	c7 84 24 98 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv417[rsp], 0
$LN147@TestLegacy:
  0104b	8b 84 24 98 04
	00 00		 mov	 eax, DWORD PTR tv417[rsp]
$LN144@TestLegacy:

; 1363 : }

  01052	48 8b 8c 24 a0
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0105a	48 33 cc	 xor	 rcx, rsp
  0105d	e8 00 00 00 00	 call	 __security_check_cookie
  01062	48 81 c4 b8 04
	00 00		 add	 rsp, 1208		; 000004b8H
  01069	c3		 ret	 0
TestLegacySectorBufEncryption ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	TestSectorBufEncryption
;	COMDAT pdata
pdata	SEGMENT
$pdata$TestSectorBufEncryption DD imagerel $LN201
	DD	imagerel $LN201+3970
	DD	imagerel $unwind$TestSectorBufEncryption
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TestSectorBufEncryption DD 042019H
	DD	011b010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	08c0H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT TestSectorBufEncryption
_TEXT	SEGMENT
testCase$ = 32
crc$ = 36
i$ = 40
unitNo$ = 48
name$ = 64
writeOffset$ = 128
buf$ = 144
nbrUnits$ = 2192
nTestsPerformed$ = 2196
tv179 = 2200
tv196 = 2204
tv213 = 2208
tv230 = 2212
tv247 = 2216
tv264 = 2220
tv281 = 2224
tv298 = 2228
tv430 = 2232
__$ArrayPad$ = 2240
ci$ = 2288
TestSectorBufEncryption PROC				; COMDAT

; 638  : {

$LN201:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 81 ec d8 08
	00 00		 sub	 rsp, 2264		; 000008d8H
  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00015	48 33 c4	 xor	 rax, rsp
  00018	48 89 84 24 c0
	08 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 639  : 	unsigned char buf [ENCRYPTION_DATA_UNIT_SIZE * 4];
; 640  : 	unsigned int i;
; 641  : 	char name[64];
; 642  : 	unsigned __int32 crc;
; 643  : 	UINT64_STRUCT unitNo;
; 644  : 	uint32 nbrUnits;
; 645  : 	unsigned __int64 writeOffset;
; 646  : 	int testCase = 0;

  00020	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR testCase$[rsp], 0

; 647  : 	int nTestsPerformed = 0;

  00028	c7 84 24 94 08
	00 00 00 00 00
	00		 mov	 DWORD PTR nTestsPerformed$[rsp], 0

; 648  : 
; 649  : 	static unsigned char key1[] =
; 650  : 	{ 
; 651  : 		0x27, 0x18, 0x28, 0x18, 0x28, 0x45, 0x90, 0x45, 0x23, 0x53, 0x60, 0x28, 0x74, 0x71, 0x35, 0x26, 0x62, 0x49, 0x77, 0x57, 0x24, 0x70, 0x93, 0x69, 0x99, 0x59, 0x57, 0x49, 0x66, 0x96, 0x76, 0x27,
; 652  : 		0x31, 0x41, 0x59, 0x26, 0x53, 0x58, 0x97, 0x93, 0x23, 0x84, 0x62, 0x64, 0x33, 0x83, 0x27, 0x95, 0x02, 0x88, 0x41, 0x97, 0x16, 0x93, 0x99, 0x37, 0x51, 0x05, 0x82, 0x09, 0x74, 0x94, 0x45, 0x92,
; 653  : 		0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13
; 654  : 	};
; 655  : 
; 656  : 	if (!TestLegacySectorBufEncryption (ci))

  00033	48 8b 8c 24 f0
	08 00 00	 mov	 rcx, QWORD PTR ci$[rsp]
  0003b	e8 00 00 00 00	 call	 TestLegacySectorBufEncryption
  00040	85 c0		 test	 eax, eax
  00042	75 07		 jne	 SHORT $LN148@TestSector

; 657  : 		return FALSE;

  00044	33 c0		 xor	 eax, eax
  00046	e9 1d 0f 00 00	 jmp	 $LN149@TestSector
$LN148@TestSector:

; 658  : 
; 659  : 
; 660  : 	/* Encryption/decryption of data units (typically, volume data sectors) */
; 661  : 
; 662  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;

  0004b	c7 84 24 90 08
	00 00 04 00 00
	00		 mov	 DWORD PTR nbrUnits$[rsp], 4

; 663  : 
; 664  : 	ci->mode = XTS;	// Other modes of operation are tested in TestLegacySectorBufEncryption()

  00056	48 8b 84 24 f0
	08 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  0005e	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [rax+4], 1

; 665  : 
; 666  : 	/* The buffer can accommodate 4 data units and we'll test 4 cases by "scrolling". The data unit 0xFFFFFFFFFF
; 667  : 	will "move" from the start of the buffer to its end. For a 512-byte data unit, the byte offset 562949953420800
; 668  : 	corresponds to the data unit 0xFFFFFFFFFF. */
; 669  : 	for (writeOffset = 562949953420800ULL; 
; 670  : 		writeOffset > 562949953420800ULL - nbrUnits * ENCRYPTION_DATA_UNIT_SIZE; 
; 671  : 		writeOffset -= ENCRYPTION_DATA_UNIT_SIZE)

  00065	48 b8 00 fe ff
	ff ff ff 01 00	 mov	 rax, 562949953420800	; 0001fffffffffe00H
  0006f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR writeOffset$[rsp], rax
  00077	eb 16		 jmp	 SHORT $LN147@TestSector
$LN146@TestSector:
  00079	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR writeOffset$[rsp]
  00081	48 2d 00 02 00
	00		 sub	 rax, 512		; 00000200H
  00087	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR writeOffset$[rsp], rax
$LN147@TestSector:
  0008f	8b 84 24 90 08
	00 00		 mov	 eax, DWORD PTR nbrUnits$[rsp]
  00096	69 c0 00 02 00
	00		 imul	 eax, 512		; 00000200H
  0009c	8b c8		 mov	 ecx, eax
  0009e	48 b8 00 fe ff
	ff ff ff 01 00	 mov	 rax, 562949953420800	; 0001fffffffffe00H
  000a8	48 2b c1	 sub	 rax, rcx
  000ab	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR writeOffset$[rsp], rax
  000b3	0f 86 37 0a 00
	00		 jbe	 $LN145@TestSector

; 672  : 	{
; 673  : 		unitNo.Value = writeOffset / ENCRYPTION_DATA_UNIT_SIZE;

  000b9	33 d2		 xor	 edx, edx
  000bb	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR writeOffset$[rsp]
  000c3	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  000c8	48 f7 f1	 div	 rcx
  000cb	48 89 44 24 30	 mov	 QWORD PTR unitNo$[rsp], rax

; 674  : 
; 675  : 		// Test all EAs that support this mode of operation
; 676  : 		for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  000d0	e8 00 00 00 00	 call	 EAGetFirst
  000d5	8b d0		 mov	 edx, eax
  000d7	48 8b 84 24 f0
	08 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  000df	89 10		 mov	 DWORD PTR [rax], edx
  000e1	eb 1b		 jmp	 SHORT $LN144@TestSector
$LN143@TestSector:
  000e3	48 8b 84 24 f0
	08 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  000eb	8b 08		 mov	 ecx, DWORD PTR [rax]
  000ed	e8 00 00 00 00	 call	 EAGetNext
  000f2	8b d0		 mov	 edx, eax
  000f4	48 8b 84 24 f0
	08 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  000fc	89 10		 mov	 DWORD PTR [rax], edx
$LN144@TestSector:
  000fe	48 8b 84 24 f0
	08 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00106	83 38 00	 cmp	 DWORD PTR [rax], 0
  00109	0f 84 d1 09 00
	00		 je	 $LN142@TestSector

; 677  : 		{
; 678  : 			if (!EAIsModeSupported (ci->ea, ci->mode))

  0010f	48 8b 84 24 f0
	08 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00117	8b 50 04	 mov	 edx, DWORD PTR [rax+4]
  0011a	48 8b 84 24 f0
	08 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00122	8b 08		 mov	 ecx, DWORD PTR [rax]
  00124	e8 00 00 00 00	 call	 EAIsModeSupported
  00129	85 c0		 test	 eax, eax
  0012b	75 02		 jne	 SHORT $LN141@TestSector

; 679  : 				continue;

  0012d	eb b4		 jmp	 SHORT $LN143@TestSector
$LN141@TestSector:

; 680  : 
; 681  : 			EAGetName (name, ci->ea);

  0012f	48 8b 84 24 f0
	08 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00137	8b 10		 mov	 edx, DWORD PTR [rax]
  00139	48 8d 4c 24 40	 lea	 rcx, QWORD PTR name$[rsp]
  0013e	e8 00 00 00 00	 call	 EAGetName

; 682  : 
; 683  : 			if (EAInit (ci->ea, key1, ci->ks) != ERR_SUCCESS)

  00143	4c 8b 84 24 f0
	08 00 00	 mov	 r8, QWORD PTR ci$[rsp]
  0014b	49 83 c0 08	 add	 r8, 8
  0014f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?key1@?1??TestSectorBufEncryption@@9@9
  00156	48 8b 84 24 f0
	08 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  0015e	8b 08		 mov	 ecx, DWORD PTR [rax]
  00160	e8 00 00 00 00	 call	 EAInit
  00165	85 c0		 test	 eax, eax
  00167	74 07		 je	 SHORT $LN140@TestSector

; 684  : 				return FALSE;

  00169	33 c0		 xor	 eax, eax
  0016b	e9 f8 0d 00 00	 jmp	 $LN149@TestSector
$LN140@TestSector:

; 685  : 
; 686  : 			for (i = 0; i < sizeof (ci->k2); i++)

  00170	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00178	eb 0b		 jmp	 SHORT $LN139@TestSector
$LN138@TestSector:
  0017a	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  0017e	83 c0 01	 add	 eax, 1
  00181	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
$LN139@TestSector:
  00185	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  00189	48 3d 00 01 00
	00		 cmp	 rax, 256		; 00000100H
  0018f	73 1a		 jae	 SHORT $LN137@TestSector

; 687  : 				ci->k2[i] = (unsigned char) i;

  00191	8b 54 24 28	 mov	 edx, DWORD PTR i$[rsp]
  00195	48 8b 8c 24 f0
	08 00 00	 mov	 rcx, QWORD PTR ci$[rsp]
  0019d	0f b6 44 24 28	 movzx	 eax, BYTE PTR i$[rsp]
  001a2	88 84 11 a8 42
	00 00		 mov	 BYTE PTR [rcx+rdx+17064], al
  001a9	eb cf		 jmp	 SHORT $LN138@TestSector
$LN137@TestSector:

; 688  : 
; 689  : 			memcpy (&ci->k2, XTS_vectors[XTS_TEST_COUNT-1].key2, sizeof (XTS_vectors[XTS_TEST_COUNT-1].key2));

  001ab	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:XTS_vectors
  001b2	48 8b bc 24 f0
	08 00 00	 mov	 rdi, QWORD PTR ci$[rsp]
  001ba	48 81 c7 a8 42
	00 00		 add	 rdi, 17064		; 000042a8H
  001c1	48 81 c6 50 11
	00 00		 add	 rsi, 4432		; 00001150H
  001c8	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  001cd	f3 a4		 rep movsb

; 690  : 
; 691  : 			if (!EAInitMode (ci))

  001cf	48 8b 8c 24 f0
	08 00 00	 mov	 rcx, QWORD PTR ci$[rsp]
  001d7	e8 00 00 00 00	 call	 EAInitMode
  001dc	85 c0		 test	 eax, eax
  001de	75 07		 jne	 SHORT $LN136@TestSector

; 692  : 				return FALSE;

  001e0	33 c0		 xor	 eax, eax
  001e2	e9 81 0d 00 00	 jmp	 $LN149@TestSector
$LN136@TestSector:

; 693  : 
; 694  : 			// Each data unit will contain the same plaintext
; 695  : 			for (i = 0; i < nbrUnits; i++)

  001e7	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  001ef	eb 0b		 jmp	 SHORT $LN135@TestSector
$LN134@TestSector:
  001f1	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  001f5	83 c0 01	 add	 eax, 1
  001f8	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
$LN135@TestSector:
  001fc	8b 84 24 90 08
	00 00		 mov	 eax, DWORD PTR nbrUnits$[rsp]
  00203	39 44 24 28	 cmp	 DWORD PTR i$[rsp], eax
  00207	73 2b		 jae	 SHORT $LN133@TestSector

; 696  : 			{
; 697  : 				memcpy ((unsigned char *) buf + i * ENCRYPTION_DATA_UNIT_SIZE, 
; 698  : 					XTS_vectors[XTS_TEST_COUNT-1].plaintext, 
; 699  : 					ENCRYPTION_DATA_UNIT_SIZE);

  00209	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:XTS_vectors
  00210	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  00214	69 c0 00 02 00
	00		 imul	 eax, 512		; 00000200H
  0021a	8b c0		 mov	 eax, eax
  0021c	48 8d bc 04 90
	00 00 00	 lea	 rdi, QWORD PTR buf$[rsp+rax]
  00224	48 81 c6 7c 11
	00 00		 add	 rsi, 4476		; 0000117cH
  0022b	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00230	f3 a4		 rep movsb

; 700  : 			}

  00232	eb bd		 jmp	 SHORT $LN134@TestSector
$LN133@TestSector:

; 701  : 
; 702  : 			EncryptDataUnits (buf, &unitNo, nbrUnits, ci);

  00234	4c 8b 8c 24 f0
	08 00 00	 mov	 r9, QWORD PTR ci$[rsp]
  0023c	44 8b 84 24 90
	08 00 00	 mov	 r8d, DWORD PTR nbrUnits$[rsp]
  00244	48 8d 54 24 30	 lea	 rdx, QWORD PTR unitNo$[rsp]
  00249	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00251	e8 00 00 00 00	 call	 EncryptDataUnits

; 703  : 
; 704  : 			crc = GetCrc32 (buf, sizeof (buf));

  00256	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  0025b	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00263	e8 00 00 00 00	 call	 GetCrc32
  00268	89 44 24 24	 mov	 DWORD PTR crc$[rsp], eax

; 705  : 
; 706  : 			if (strcmp (name, "AES") == 0)

  0026c	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00271	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  00278	48 2b ca	 sub	 rcx, rdx
$LL198@TestSector:
  0027b	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  0027e	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00281	75 0c		 jne	 SHORT $LN200@TestSector
  00283	48 83 c2 01	 add	 rdx, 1
  00287	84 c0		 test	 al, al
  00289	75 f0		 jne	 SHORT $LL198@TestSector
  0028b	33 c0		 xor	 eax, eax
  0028d	eb 05		 jmp	 SHORT $LN199@TestSector
$LN200@TestSector:
  0028f	1b c0		 sbb	 eax, eax
  00291	83 d8 ff	 sbb	 eax, -1
$LN199@TestSector:
  00294	85 c0		 test	 eax, eax
  00296	0f 85 03 01 00
	00		 jne	 $LN132@TestSector

; 707  : 			{
; 708  : 				// Verify the ciphertext of the "moving" data unit using the IEEE test vector #14
; 709  : 				if (memcmp (XTS_vectors[XTS_TEST_COUNT-1].ciphertext,
; 710  : 					(unsigned char *) buf + testCase * ENCRYPTION_DATA_UNIT_SIZE,
; 711  : 					ENCRYPTION_DATA_UNIT_SIZE) != 0)

  0029c	8b 44 24 20	 mov	 eax, DWORD PTR testCase$[rsp]
  002a0	69 c0 00 02 00
	00		 imul	 eax, 512		; 00000200H
  002a6	48 98		 cdqe
  002a8	48 8d 94 04 90
	00 00 00	 lea	 rdx, QWORD PTR buf$[rsp+rax]
  002b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:XTS_vectors
  002b7	48 81 c1 7c 13
	00 00		 add	 rcx, 4988		; 0000137cH
  002be	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  002c4	e8 00 00 00 00	 call	 memcmp
  002c9	85 c0		 test	 eax, eax
  002cb	74 07		 je	 SHORT $LN131@TestSector

; 712  : 				{
; 713  : 					return FALSE;

  002cd	33 c0		 xor	 eax, eax
  002cf	e9 94 0c 00 00	 jmp	 $LN149@TestSector
$LN131@TestSector:

; 714  : 				}
; 715  : 
; 716  : 				// CRC of all data units in the buffer for each test case
; 717  : 				switch (testCase)

  002d4	8b 44 24 20	 mov	 eax, DWORD PTR testCase$[rsp]
  002d8	89 84 24 98 08
	00 00		 mov	 DWORD PTR tv179[rsp], eax
  002df	83 bc 24 98 08
	00 00 00	 cmp	 DWORD PTR tv179[rsp], 0
  002e7	74 23		 je	 SHORT $LN128@TestSector
  002e9	83 bc 24 98 08
	00 00 01	 cmp	 DWORD PTR tv179[rsp], 1
  002f1	74 3d		 je	 SHORT $LN126@TestSector
  002f3	83 bc 24 98 08
	00 00 02	 cmp	 DWORD PTR tv179[rsp], 2
  002fb	74 57		 je	 SHORT $LN124@TestSector
  002fd	83 bc 24 98 08
	00 00 03	 cmp	 DWORD PTR tv179[rsp], 3
  00305	74 71		 je	 SHORT $LN122@TestSector
  00307	e9 8e 00 00 00	 jmp	 $LN129@TestSector
$LN128@TestSector:

; 718  : 				{
; 719  : 				case 0: 
; 720  : 					if (crc != 0x888f2990)

  0030c	81 7c 24 24 90
	29 8f 88	 cmp	 DWORD PTR crc$[rsp], -2003883632 ; 888f2990H
  00314	74 07		 je	 SHORT $LN127@TestSector

; 721  : 						return FALSE;

  00316	33 c0		 xor	 eax, eax
  00318	e9 4b 0c 00 00	 jmp	 $LN149@TestSector
$LN127@TestSector:

; 722  : 					nTestsPerformed++;

  0031d	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00324	83 c0 01	 add	 eax, 1
  00327	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 723  : 					break;

  0032e	eb 6a		 jmp	 SHORT $LN129@TestSector
$LN126@TestSector:

; 724  : 				case 1:
; 725  : 					if (crc != 0xea28ea34)

  00330	81 7c 24 24 34
	ea 28 ea	 cmp	 DWORD PTR crc$[rsp], -366417356 ; ea28ea34H
  00338	74 07		 je	 SHORT $LN125@TestSector

; 726  : 						return FALSE;

  0033a	33 c0		 xor	 eax, eax
  0033c	e9 27 0c 00 00	 jmp	 $LN149@TestSector
$LN125@TestSector:

; 727  : 					nTestsPerformed++;

  00341	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00348	83 c0 01	 add	 eax, 1
  0034b	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 728  : 					break;

  00352	eb 46		 jmp	 SHORT $LN129@TestSector
$LN124@TestSector:

; 729  : 				case 2:
; 730  : 					if (crc != 0xe058f5a2)

  00354	81 7c 24 24 a2
	f5 58 e0	 cmp	 DWORD PTR crc$[rsp], -531040862 ; e058f5a2H
  0035c	74 07		 je	 SHORT $LN123@TestSector

; 731  : 						return FALSE;

  0035e	33 c0		 xor	 eax, eax
  00360	e9 03 0c 00 00	 jmp	 $LN149@TestSector
$LN123@TestSector:

; 732  : 					nTestsPerformed++;

  00365	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  0036c	83 c0 01	 add	 eax, 1
  0036f	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 733  : 					break;

  00376	eb 22		 jmp	 SHORT $LN129@TestSector
$LN122@TestSector:

; 734  : 				case 3:
; 735  : 					if (crc != 0x10473dc9)

  00378	81 7c 24 24 c9
	3d 47 10	 cmp	 DWORD PTR crc$[rsp], 273104329 ; 10473dc9H
  00380	74 07		 je	 SHORT $LN121@TestSector

; 736  : 						return FALSE;

  00382	33 c0		 xor	 eax, eax
  00384	e9 df 0b 00 00	 jmp	 $LN149@TestSector
$LN121@TestSector:

; 737  : 					nTestsPerformed++;

  00389	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00390	83 c0 01	 add	 eax, 1
  00393	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
$LN129@TestSector:

; 738  : 					break;
; 739  : 				}
; 740  : 			}
; 741  : 			else if (strcmp (name, "Serpent") == 0)

  0039a	e9 d8 06 00 00	 jmp	 $LN120@TestSector
$LN132@TestSector:
  0039f	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  003a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  003ab	48 2b ca	 sub	 rcx, rdx
$LL195@TestSector:
  003ae	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  003b1	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  003b4	75 0c		 jne	 SHORT $LN197@TestSector
  003b6	48 83 c2 01	 add	 rdx, 1
  003ba	84 c0		 test	 al, al
  003bc	75 f0		 jne	 SHORT $LL195@TestSector
  003be	33 c0		 xor	 eax, eax
  003c0	eb 05		 jmp	 SHORT $LN196@TestSector
$LN197@TestSector:
  003c2	1b c0		 sbb	 eax, eax
  003c4	83 d8 ff	 sbb	 eax, -1
$LN196@TestSector:
  003c7	85 c0		 test	 eax, eax
  003c9	0f 85 cb 00 00
	00		 jne	 $LN119@TestSector

; 742  : 			{
; 743  : 				switch (testCase)

  003cf	8b 44 24 20	 mov	 eax, DWORD PTR testCase$[rsp]
  003d3	89 84 24 9c 08
	00 00		 mov	 DWORD PTR tv196[rsp], eax
  003da	83 bc 24 9c 08
	00 00 00	 cmp	 DWORD PTR tv196[rsp], 0
  003e2	74 23		 je	 SHORT $LN116@TestSector
  003e4	83 bc 24 9c 08
	00 00 01	 cmp	 DWORD PTR tv196[rsp], 1
  003ec	74 3d		 je	 SHORT $LN114@TestSector
  003ee	83 bc 24 9c 08
	00 00 02	 cmp	 DWORD PTR tv196[rsp], 2
  003f6	74 57		 je	 SHORT $LN112@TestSector
  003f8	83 bc 24 9c 08
	00 00 03	 cmp	 DWORD PTR tv196[rsp], 3
  00400	74 71		 je	 SHORT $LN110@TestSector
  00402	e9 8e 00 00 00	 jmp	 $LN117@TestSector
$LN116@TestSector:

; 744  : 				{
; 745  : 				case 0:
; 746  : 					if (crc != 0x7edfecb3)

  00407	81 7c 24 24 b3
	ec df 7e	 cmp	 DWORD PTR crc$[rsp], 2128604339 ; 7edfecb3H
  0040f	74 07		 je	 SHORT $LN115@TestSector

; 747  : 						return FALSE;

  00411	33 c0		 xor	 eax, eax
  00413	e9 50 0b 00 00	 jmp	 $LN149@TestSector
$LN115@TestSector:

; 748  : 					nTestsPerformed++;

  00418	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  0041f	83 c0 01	 add	 eax, 1
  00422	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 749  : 					break;

  00429	eb 6a		 jmp	 SHORT $LN117@TestSector
$LN114@TestSector:

; 750  : 				case 1:
; 751  : 					if (crc != 0x357baaaa)

  0042b	81 7c 24 24 aa
	aa 7b 35	 cmp	 DWORD PTR crc$[rsp], 897297066 ; 357baaaaH
  00433	74 07		 je	 SHORT $LN113@TestSector

; 752  : 						return FALSE;

  00435	33 c0		 xor	 eax, eax
  00437	e9 2c 0b 00 00	 jmp	 $LN149@TestSector
$LN113@TestSector:

; 753  : 					nTestsPerformed++;

  0043c	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00443	83 c0 01	 add	 eax, 1
  00446	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 754  : 					break;

  0044d	eb 46		 jmp	 SHORT $LN117@TestSector
$LN112@TestSector:

; 755  : 				case 2:
; 756  : 					if (crc != 0xc7b9fca5)

  0044f	81 7c 24 24 a5
	fc b9 c7	 cmp	 DWORD PTR crc$[rsp], -944112475 ; c7b9fca5H
  00457	74 07		 je	 SHORT $LN111@TestSector

; 757  : 						return FALSE;

  00459	33 c0		 xor	 eax, eax
  0045b	e9 08 0b 00 00	 jmp	 $LN149@TestSector
$LN111@TestSector:

; 758  : 					nTestsPerformed++;

  00460	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00467	83 c0 01	 add	 eax, 1
  0046a	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 759  : 					break;

  00471	eb 22		 jmp	 SHORT $LN117@TestSector
$LN110@TestSector:

; 760  : 				case 3:
; 761  : 					if (crc != 0xb5263e0c)

  00473	81 7c 24 24 0c
	3e 26 b5	 cmp	 DWORD PTR crc$[rsp], -1255784948 ; b5263e0cH
  0047b	74 07		 je	 SHORT $LN109@TestSector

; 762  : 						return FALSE;

  0047d	33 c0		 xor	 eax, eax
  0047f	e9 e4 0a 00 00	 jmp	 $LN149@TestSector
$LN109@TestSector:

; 763  : 					nTestsPerformed++;

  00484	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  0048b	83 c0 01	 add	 eax, 1
  0048e	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
$LN117@TestSector:

; 764  : 					break;
; 765  : 				}
; 766  : 			}
; 767  : 			else if (strcmp (name, "Twofish") == 0)

  00495	e9 dd 05 00 00	 jmp	 $LN108@TestSector
$LN119@TestSector:
  0049a	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  0049f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@
  004a6	48 2b ca	 sub	 rcx, rdx
$LL192@TestSector:
  004a9	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  004ac	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  004af	75 0c		 jne	 SHORT $LN194@TestSector
  004b1	48 83 c2 01	 add	 rdx, 1
  004b5	84 c0		 test	 al, al
  004b7	75 f0		 jne	 SHORT $LL192@TestSector
  004b9	33 c0		 xor	 eax, eax
  004bb	eb 05		 jmp	 SHORT $LN193@TestSector
$LN194@TestSector:
  004bd	1b c0		 sbb	 eax, eax
  004bf	83 d8 ff	 sbb	 eax, -1
$LN193@TestSector:
  004c2	85 c0		 test	 eax, eax
  004c4	0f 85 cb 00 00
	00		 jne	 $LN107@TestSector

; 768  : 			{
; 769  : 				switch (testCase)

  004ca	8b 44 24 20	 mov	 eax, DWORD PTR testCase$[rsp]
  004ce	89 84 24 a0 08
	00 00		 mov	 DWORD PTR tv213[rsp], eax
  004d5	83 bc 24 a0 08
	00 00 00	 cmp	 DWORD PTR tv213[rsp], 0
  004dd	74 23		 je	 SHORT $LN104@TestSector
  004df	83 bc 24 a0 08
	00 00 01	 cmp	 DWORD PTR tv213[rsp], 1
  004e7	74 3d		 je	 SHORT $LN102@TestSector
  004e9	83 bc 24 a0 08
	00 00 02	 cmp	 DWORD PTR tv213[rsp], 2
  004f1	74 57		 je	 SHORT $LN100@TestSector
  004f3	83 bc 24 a0 08
	00 00 03	 cmp	 DWORD PTR tv213[rsp], 3
  004fb	74 71		 je	 SHORT $LN98@TestSector
  004fd	e9 8e 00 00 00	 jmp	 $LN105@TestSector
$LN104@TestSector:

; 770  : 				{
; 771  : 				case 0:
; 772  : 					if (crc != 0x91525124)

  00502	81 7c 24 24 24
	51 52 91	 cmp	 DWORD PTR crc$[rsp], -1856876252 ; 91525124H
  0050a	74 07		 je	 SHORT $LN103@TestSector

; 773  : 						return FALSE;

  0050c	33 c0		 xor	 eax, eax
  0050e	e9 55 0a 00 00	 jmp	 $LN149@TestSector
$LN103@TestSector:

; 774  : 					nTestsPerformed++;

  00513	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  0051a	83 c0 01	 add	 eax, 1
  0051d	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 775  : 					break;

  00524	eb 6a		 jmp	 SHORT $LN105@TestSector
$LN102@TestSector:

; 776  : 				case 1:
; 777  : 					if (crc != 0x2895cc47)

  00526	81 7c 24 24 47
	cc 95 28	 cmp	 DWORD PTR crc$[rsp], 680905799 ; 2895cc47H
  0052e	74 07		 je	 SHORT $LN101@TestSector

; 778  : 						return FALSE;

  00530	33 c0		 xor	 eax, eax
  00532	e9 31 0a 00 00	 jmp	 $LN149@TestSector
$LN101@TestSector:

; 779  : 					nTestsPerformed++;

  00537	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  0053e	83 c0 01	 add	 eax, 1
  00541	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 780  : 					break;

  00548	eb 46		 jmp	 SHORT $LN105@TestSector
$LN100@TestSector:

; 781  : 				case 2:
; 782  : 					if (crc != 0x6bee346d)

  0054a	81 7c 24 24 6d
	34 ee 6b	 cmp	 DWORD PTR crc$[rsp], 1810773101 ; 6bee346dH
  00552	74 07		 je	 SHORT $LN99@TestSector

; 783  : 						return FALSE;

  00554	33 c0		 xor	 eax, eax
  00556	e9 0d 0a 00 00	 jmp	 $LN149@TestSector
$LN99@TestSector:

; 784  : 					nTestsPerformed++;

  0055b	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00562	83 c0 01	 add	 eax, 1
  00565	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 785  : 					break;

  0056c	eb 22		 jmp	 SHORT $LN105@TestSector
$LN98@TestSector:

; 786  : 				case 3:
; 787  : 					if (crc != 0xb1c45759)

  0056e	81 7c 24 24 59
	57 c4 b1	 cmp	 DWORD PTR crc$[rsp], -1312532647 ; b1c45759H
  00576	74 07		 je	 SHORT $LN97@TestSector

; 788  : 						return FALSE;

  00578	33 c0		 xor	 eax, eax
  0057a	e9 e9 09 00 00	 jmp	 $LN149@TestSector
$LN97@TestSector:

; 789  : 					nTestsPerformed++;

  0057f	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00586	83 c0 01	 add	 eax, 1
  00589	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
$LN105@TestSector:

; 790  : 					break;
; 791  : 				}
; 792  : 			}
; 793  : 			else if (strcmp (name, "AES-Twofish") == 0)

  00590	e9 e2 04 00 00	 jmp	 $LN96@TestSector
$LN107@TestSector:
  00595	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  0059a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  005a1	48 2b ca	 sub	 rcx, rdx
$LL189@TestSector:
  005a4	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  005a7	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  005aa	75 0c		 jne	 SHORT $LN191@TestSector
  005ac	48 83 c2 01	 add	 rdx, 1
  005b0	84 c0		 test	 al, al
  005b2	75 f0		 jne	 SHORT $LL189@TestSector
  005b4	33 c0		 xor	 eax, eax
  005b6	eb 05		 jmp	 SHORT $LN190@TestSector
$LN191@TestSector:
  005b8	1b c0		 sbb	 eax, eax
  005ba	83 d8 ff	 sbb	 eax, -1
$LN190@TestSector:
  005bd	85 c0		 test	 eax, eax
  005bf	0f 85 cb 00 00
	00		 jne	 $LN95@TestSector

; 794  : 			{
; 795  : 				switch (testCase)

  005c5	8b 44 24 20	 mov	 eax, DWORD PTR testCase$[rsp]
  005c9	89 84 24 a4 08
	00 00		 mov	 DWORD PTR tv230[rsp], eax
  005d0	83 bc 24 a4 08
	00 00 00	 cmp	 DWORD PTR tv230[rsp], 0
  005d8	74 23		 je	 SHORT $LN92@TestSector
  005da	83 bc 24 a4 08
	00 00 01	 cmp	 DWORD PTR tv230[rsp], 1
  005e2	74 3d		 je	 SHORT $LN90@TestSector
  005e4	83 bc 24 a4 08
	00 00 02	 cmp	 DWORD PTR tv230[rsp], 2
  005ec	74 57		 je	 SHORT $LN88@TestSector
  005ee	83 bc 24 a4 08
	00 00 03	 cmp	 DWORD PTR tv230[rsp], 3
  005f6	74 71		 je	 SHORT $LN86@TestSector
  005f8	e9 8e 00 00 00	 jmp	 $LN93@TestSector
$LN92@TestSector:

; 796  : 				{
; 797  : 				case 0:
; 798  : 					if (crc != 0x6cea7fa2)

  005fd	81 7c 24 24 a2
	7f ea 6c	 cmp	 DWORD PTR crc$[rsp], 1827307426 ; 6cea7fa2H
  00605	74 07		 je	 SHORT $LN91@TestSector

; 799  : 						return FALSE;

  00607	33 c0		 xor	 eax, eax
  00609	e9 5a 09 00 00	 jmp	 $LN149@TestSector
$LN91@TestSector:

; 800  : 					nTestsPerformed++;

  0060e	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00615	83 c0 01	 add	 eax, 1
  00618	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 801  : 					break;

  0061f	eb 6a		 jmp	 SHORT $LN93@TestSector
$LN90@TestSector:

; 802  : 				case 1:
; 803  : 					if (crc != 0x69052c4c)

  00621	81 7c 24 24 4c
	2c 05 69	 cmp	 DWORD PTR crc$[rsp], 1761946700 ; 69052c4cH
  00629	74 07		 je	 SHORT $LN89@TestSector

; 804  : 						return FALSE;

  0062b	33 c0		 xor	 eax, eax
  0062d	e9 36 09 00 00	 jmp	 $LN149@TestSector
$LN89@TestSector:

; 805  : 					nTestsPerformed++;

  00632	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00639	83 c0 01	 add	 eax, 1
  0063c	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 806  : 					break;

  00643	eb 46		 jmp	 SHORT $LN93@TestSector
$LN88@TestSector:

; 807  : 				case 2:
; 808  : 					if (crc != 0x88db8de5)

  00645	81 7c 24 24 e5
	8d db 88	 cmp	 DWORD PTR crc$[rsp], -1998877211 ; 88db8de5H
  0064d	74 07		 je	 SHORT $LN87@TestSector

; 809  : 						return FALSE;

  0064f	33 c0		 xor	 eax, eax
  00651	e9 12 09 00 00	 jmp	 $LN149@TestSector
$LN87@TestSector:

; 810  : 					nTestsPerformed++;

  00656	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  0065d	83 c0 01	 add	 eax, 1
  00660	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 811  : 					break;

  00667	eb 22		 jmp	 SHORT $LN93@TestSector
$LN86@TestSector:

; 812  : 				case 3:
; 813  : 					if (crc != 0xf16fd8c5)

  00669	81 7c 24 24 c5
	d8 6f f1	 cmp	 DWORD PTR crc$[rsp], -244328251 ; f16fd8c5H
  00671	74 07		 je	 SHORT $LN85@TestSector

; 814  : 						return FALSE;

  00673	33 c0		 xor	 eax, eax
  00675	e9 ee 08 00 00	 jmp	 $LN149@TestSector
$LN85@TestSector:

; 815  : 					nTestsPerformed++;

  0067a	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00681	83 c0 01	 add	 eax, 1
  00684	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
$LN93@TestSector:

; 816  : 					break;
; 817  : 				}
; 818  : 			}
; 819  : 			else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  0068b	e9 e7 03 00 00	 jmp	 $LN84@TestSector
$LN95@TestSector:
  00690	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00695	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  0069c	48 2b ca	 sub	 rcx, rdx
$LL186@TestSector:
  0069f	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  006a2	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  006a5	75 0c		 jne	 SHORT $LN188@TestSector
  006a7	48 83 c2 01	 add	 rdx, 1
  006ab	84 c0		 test	 al, al
  006ad	75 f0		 jne	 SHORT $LL186@TestSector
  006af	33 c0		 xor	 eax, eax
  006b1	eb 05		 jmp	 SHORT $LN187@TestSector
$LN188@TestSector:
  006b3	1b c0		 sbb	 eax, eax
  006b5	83 d8 ff	 sbb	 eax, -1
$LN187@TestSector:
  006b8	85 c0		 test	 eax, eax
  006ba	0f 85 cb 00 00
	00		 jne	 $LN83@TestSector

; 820  : 			{
; 821  : 				switch (testCase)

  006c0	8b 44 24 20	 mov	 eax, DWORD PTR testCase$[rsp]
  006c4	89 84 24 a8 08
	00 00		 mov	 DWORD PTR tv247[rsp], eax
  006cb	83 bc 24 a8 08
	00 00 00	 cmp	 DWORD PTR tv247[rsp], 0
  006d3	74 23		 je	 SHORT $LN80@TestSector
  006d5	83 bc 24 a8 08
	00 00 01	 cmp	 DWORD PTR tv247[rsp], 1
  006dd	74 3d		 je	 SHORT $LN78@TestSector
  006df	83 bc 24 a8 08
	00 00 02	 cmp	 DWORD PTR tv247[rsp], 2
  006e7	74 57		 je	 SHORT $LN76@TestSector
  006e9	83 bc 24 a8 08
	00 00 03	 cmp	 DWORD PTR tv247[rsp], 3
  006f1	74 71		 je	 SHORT $LN74@TestSector
  006f3	e9 8e 00 00 00	 jmp	 $LN81@TestSector
$LN80@TestSector:

; 822  : 				{
; 823  : 				case 0:
; 824  : 					if (crc != 0xa2d7d82a)

  006f8	81 7c 24 24 2a
	d8 d7 a2	 cmp	 DWORD PTR crc$[rsp], -1562912726 ; a2d7d82aH
  00700	74 07		 je	 SHORT $LN79@TestSector

; 825  : 						return FALSE;

  00702	33 c0		 xor	 eax, eax
  00704	e9 5f 08 00 00	 jmp	 $LN149@TestSector
$LN79@TestSector:

; 826  : 					nTestsPerformed++;

  00709	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00710	83 c0 01	 add	 eax, 1
  00713	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 827  : 					break;

  0071a	eb 6a		 jmp	 SHORT $LN81@TestSector
$LN78@TestSector:

; 828  : 				case 1:
; 829  : 					if (crc != 0xdbf76412)

  0071c	81 7c 24 24 12
	64 f7 db	 cmp	 DWORD PTR crc$[rsp], -604543982 ; dbf76412H
  00724	74 07		 je	 SHORT $LN77@TestSector

; 830  : 						return FALSE;

  00726	33 c0		 xor	 eax, eax
  00728	e9 3b 08 00 00	 jmp	 $LN149@TestSector
$LN77@TestSector:

; 831  : 					nTestsPerformed++;

  0072d	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00734	83 c0 01	 add	 eax, 1
  00737	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 832  : 					break;

  0073e	eb 46		 jmp	 SHORT $LN81@TestSector
$LN76@TestSector:

; 833  : 				case 2:
; 834  : 					if (crc != 0xdf0ea03e)

  00740	81 7c 24 24 3e
	a0 0e df	 cmp	 DWORD PTR crc$[rsp], -552689602 ; df0ea03eH
  00748	74 07		 je	 SHORT $LN75@TestSector

; 835  : 						return FALSE;

  0074a	33 c0		 xor	 eax, eax
  0074c	e9 17 08 00 00	 jmp	 $LN149@TestSector
$LN75@TestSector:

; 836  : 					nTestsPerformed++;

  00751	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00758	83 c0 01	 add	 eax, 1
  0075b	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 837  : 					break;

  00762	eb 22		 jmp	 SHORT $LN81@TestSector
$LN74@TestSector:

; 838  : 				case 3:
; 839  : 					if (crc != 0xdadedff7)

  00764	81 7c 24 24 f7
	df de da	 cmp	 DWORD PTR crc$[rsp], -622927881 ; dadedff7H
  0076c	74 07		 je	 SHORT $LN73@TestSector

; 840  : 						return FALSE;

  0076e	33 c0		 xor	 eax, eax
  00770	e9 f3 07 00 00	 jmp	 $LN149@TestSector
$LN73@TestSector:

; 841  : 					nTestsPerformed++;

  00775	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  0077c	83 c0 01	 add	 eax, 1
  0077f	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
$LN81@TestSector:

; 842  : 					break;
; 843  : 				}
; 844  : 			}
; 845  : 			else if (strcmp (name, "Serpent-AES") == 0)

  00786	e9 ec 02 00 00	 jmp	 $LN72@TestSector
$LN83@TestSector:
  0078b	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00790	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  00797	48 2b ca	 sub	 rcx, rdx
$LL183@TestSector:
  0079a	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  0079d	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  007a0	75 0c		 jne	 SHORT $LN185@TestSector
  007a2	48 83 c2 01	 add	 rdx, 1
  007a6	84 c0		 test	 al, al
  007a8	75 f0		 jne	 SHORT $LL183@TestSector
  007aa	33 c0		 xor	 eax, eax
  007ac	eb 05		 jmp	 SHORT $LN184@TestSector
$LN185@TestSector:
  007ae	1b c0		 sbb	 eax, eax
  007b0	83 d8 ff	 sbb	 eax, -1
$LN184@TestSector:
  007b3	85 c0		 test	 eax, eax
  007b5	0f 85 cb 00 00
	00		 jne	 $LN71@TestSector

; 846  : 			{
; 847  : 				switch (testCase)

  007bb	8b 44 24 20	 mov	 eax, DWORD PTR testCase$[rsp]
  007bf	89 84 24 ac 08
	00 00		 mov	 DWORD PTR tv264[rsp], eax
  007c6	83 bc 24 ac 08
	00 00 00	 cmp	 DWORD PTR tv264[rsp], 0
  007ce	74 23		 je	 SHORT $LN68@TestSector
  007d0	83 bc 24 ac 08
	00 00 01	 cmp	 DWORD PTR tv264[rsp], 1
  007d8	74 3d		 je	 SHORT $LN66@TestSector
  007da	83 bc 24 ac 08
	00 00 02	 cmp	 DWORD PTR tv264[rsp], 2
  007e2	74 57		 je	 SHORT $LN64@TestSector
  007e4	83 bc 24 ac 08
	00 00 03	 cmp	 DWORD PTR tv264[rsp], 3
  007ec	74 71		 je	 SHORT $LN62@TestSector
  007ee	e9 8e 00 00 00	 jmp	 $LN69@TestSector
$LN68@TestSector:

; 848  : 				{
; 849  : 				case 0:
; 850  : 					if (crc != 0x6dd133b3)

  007f3	81 7c 24 24 b3
	33 d1 6d	 cmp	 DWORD PTR crc$[rsp], 1842426803 ; 6dd133b3H
  007fb	74 07		 je	 SHORT $LN67@TestSector

; 851  : 						return FALSE;

  007fd	33 c0		 xor	 eax, eax
  007ff	e9 64 07 00 00	 jmp	 $LN149@TestSector
$LN67@TestSector:

; 852  : 					nTestsPerformed++;

  00804	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  0080b	83 c0 01	 add	 eax, 1
  0080e	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 853  : 					break;

  00815	eb 6a		 jmp	 SHORT $LN69@TestSector
$LN66@TestSector:

; 854  : 				case 1:
; 855  : 					if (crc != 0x0e5717d2)

  00817	81 7c 24 24 d2
	17 57 0e	 cmp	 DWORD PTR crc$[rsp], 240588754 ; 0e5717d2H
  0081f	74 07		 je	 SHORT $LN65@TestSector

; 856  : 						return FALSE;

  00821	33 c0		 xor	 eax, eax
  00823	e9 40 07 00 00	 jmp	 $LN149@TestSector
$LN65@TestSector:

; 857  : 					nTestsPerformed++;

  00828	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  0082f	83 c0 01	 add	 eax, 1
  00832	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 858  : 					break;

  00839	eb 46		 jmp	 SHORT $LN69@TestSector
$LN64@TestSector:

; 859  : 				case 2:
; 860  : 					if (crc != 0x39f83cd9)

  0083b	81 7c 24 24 d9
	3c f8 39	 cmp	 DWORD PTR crc$[rsp], 972569817 ; 39f83cd9H
  00843	74 07		 je	 SHORT $LN63@TestSector

; 861  : 						return FALSE;

  00845	33 c0		 xor	 eax, eax
  00847	e9 1c 07 00 00	 jmp	 $LN149@TestSector
$LN63@TestSector:

; 862  : 					nTestsPerformed++;

  0084c	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00853	83 c0 01	 add	 eax, 1
  00856	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 863  : 					break;

  0085d	eb 22		 jmp	 SHORT $LN69@TestSector
$LN62@TestSector:

; 864  : 				case 3:
; 865  : 					if (crc != 0x8a79fa2c)

  0085f	81 7c 24 24 2c
	fa 79 8a	 cmp	 DWORD PTR crc$[rsp], -1971717588 ; 8a79fa2cH
  00867	74 07		 je	 SHORT $LN61@TestSector

; 866  : 						return FALSE;

  00869	33 c0		 xor	 eax, eax
  0086b	e9 f8 06 00 00	 jmp	 $LN149@TestSector
$LN61@TestSector:

; 867  : 					nTestsPerformed++;

  00870	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00877	83 c0 01	 add	 eax, 1
  0087a	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
$LN69@TestSector:

; 868  : 					break;
; 869  : 				}
; 870  : 			}
; 871  : 			else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  00881	e9 f1 01 00 00	 jmp	 $LN60@TestSector
$LN71@TestSector:
  00886	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  0088b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  00892	48 2b ca	 sub	 rcx, rdx
$LL180@TestSector:
  00895	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00898	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  0089b	75 0c		 jne	 SHORT $LN182@TestSector
  0089d	48 83 c2 01	 add	 rdx, 1
  008a1	84 c0		 test	 al, al
  008a3	75 f0		 jne	 SHORT $LL180@TestSector
  008a5	33 c0		 xor	 eax, eax
  008a7	eb 05		 jmp	 SHORT $LN181@TestSector
$LN182@TestSector:
  008a9	1b c0		 sbb	 eax, eax
  008ab	83 d8 ff	 sbb	 eax, -1
$LN181@TestSector:
  008ae	85 c0		 test	 eax, eax
  008b0	0f 85 cb 00 00
	00		 jne	 $LN59@TestSector

; 872  : 			{
; 873  : 				switch (testCase)

  008b6	8b 44 24 20	 mov	 eax, DWORD PTR testCase$[rsp]
  008ba	89 84 24 b0 08
	00 00		 mov	 DWORD PTR tv281[rsp], eax
  008c1	83 bc 24 b0 08
	00 00 00	 cmp	 DWORD PTR tv281[rsp], 0
  008c9	74 23		 je	 SHORT $LN56@TestSector
  008cb	83 bc 24 b0 08
	00 00 01	 cmp	 DWORD PTR tv281[rsp], 1
  008d3	74 3d		 je	 SHORT $LN54@TestSector
  008d5	83 bc 24 b0 08
	00 00 02	 cmp	 DWORD PTR tv281[rsp], 2
  008dd	74 57		 je	 SHORT $LN52@TestSector
  008df	83 bc 24 b0 08
	00 00 03	 cmp	 DWORD PTR tv281[rsp], 3
  008e7	74 71		 je	 SHORT $LN50@TestSector
  008e9	e9 8e 00 00 00	 jmp	 $LN57@TestSector
$LN56@TestSector:

; 874  : 				{
; 875  : 				case 0:
; 876  : 					if (crc != 0xe536daf8)

  008ee	81 7c 24 24 f8
	da 36 e5	 cmp	 DWORD PTR crc$[rsp], -449389832 ; e536daf8H
  008f6	74 07		 je	 SHORT $LN55@TestSector

; 877  : 						return FALSE;

  008f8	33 c0		 xor	 eax, eax
  008fa	e9 69 06 00 00	 jmp	 $LN149@TestSector
$LN55@TestSector:

; 878  : 					nTestsPerformed++;

  008ff	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00906	83 c0 01	 add	 eax, 1
  00909	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 879  : 					break;

  00910	eb 6a		 jmp	 SHORT $LN57@TestSector
$LN54@TestSector:

; 880  : 				case 1:
; 881  : 					if (crc != 0x3ae89e7f)

  00912	81 7c 24 24 7f
	9e e8 3a	 cmp	 DWORD PTR crc$[rsp], 988323455 ; 3ae89e7fH
  0091a	74 07		 je	 SHORT $LN53@TestSector

; 882  : 						return FALSE;

  0091c	33 c0		 xor	 eax, eax
  0091e	e9 45 06 00 00	 jmp	 $LN149@TestSector
$LN53@TestSector:

; 883  : 					nTestsPerformed++;

  00923	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  0092a	83 c0 01	 add	 eax, 1
  0092d	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 884  : 					break;

  00934	eb 46		 jmp	 SHORT $LN57@TestSector
$LN52@TestSector:

; 885  : 				case 2:
; 886  : 					if (crc != 0x2cc1301a)

  00936	81 7c 24 24 1a
	30 c1 2c	 cmp	 DWORD PTR crc$[rsp], 750858266 ; 2cc1301aH
  0093e	74 07		 je	 SHORT $LN51@TestSector

; 887  : 						return FALSE;

  00940	33 c0		 xor	 eax, eax
  00942	e9 21 06 00 00	 jmp	 $LN149@TestSector
$LN51@TestSector:

; 888  : 					nTestsPerformed++;

  00947	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  0094e	83 c0 01	 add	 eax, 1
  00951	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 889  : 					break;

  00958	eb 22		 jmp	 SHORT $LN57@TestSector
$LN50@TestSector:

; 890  : 				case 3:
; 891  : 					if (crc != 0xcac7bdc7)

  0095a	81 7c 24 24 c7
	bd c7 ca	 cmp	 DWORD PTR crc$[rsp], -892879417 ; cac7bdc7H
  00962	74 07		 je	 SHORT $LN49@TestSector

; 892  : 						return FALSE;

  00964	33 c0		 xor	 eax, eax
  00966	e9 fd 05 00 00	 jmp	 $LN149@TestSector
$LN49@TestSector:

; 893  : 					nTestsPerformed++;

  0096b	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00972	83 c0 01	 add	 eax, 1
  00975	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
$LN57@TestSector:

; 894  : 					break;
; 895  : 				}
; 896  : 			}
; 897  : 			else if (strcmp (name, "Twofish-Serpent") == 0)

  0097c	e9 f6 00 00 00	 jmp	 $LN48@TestSector
$LN59@TestSector:
  00981	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00986	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  0098d	48 2b ca	 sub	 rcx, rdx
$LL177@TestSector:
  00990	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00993	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00996	75 0c		 jne	 SHORT $LN179@TestSector
  00998	48 83 c2 01	 add	 rdx, 1
  0099c	84 c0		 test	 al, al
  0099e	75 f0		 jne	 SHORT $LL177@TestSector
  009a0	33 c0		 xor	 eax, eax
  009a2	eb 05		 jmp	 SHORT $LN178@TestSector
$LN179@TestSector:
  009a4	1b c0		 sbb	 eax, eax
  009a6	83 d8 ff	 sbb	 eax, -1
$LN178@TestSector:
  009a9	85 c0		 test	 eax, eax
  009ab	0f 85 c6 00 00
	00		 jne	 $LN47@TestSector

; 898  : 			{
; 899  : 				switch (testCase)

  009b1	8b 44 24 20	 mov	 eax, DWORD PTR testCase$[rsp]
  009b5	89 84 24 b4 08
	00 00		 mov	 DWORD PTR tv298[rsp], eax
  009bc	83 bc 24 b4 08
	00 00 00	 cmp	 DWORD PTR tv298[rsp], 0
  009c4	74 23		 je	 SHORT $LN44@TestSector
  009c6	83 bc 24 b4 08
	00 00 01	 cmp	 DWORD PTR tv298[rsp], 1
  009ce	74 3d		 je	 SHORT $LN42@TestSector
  009d0	83 bc 24 b4 08
	00 00 02	 cmp	 DWORD PTR tv298[rsp], 2
  009d8	74 57		 je	 SHORT $LN40@TestSector
  009da	83 bc 24 b4 08
	00 00 03	 cmp	 DWORD PTR tv298[rsp], 3
  009e2	74 71		 je	 SHORT $LN38@TestSector
  009e4	e9 8e 00 00 00	 jmp	 $LN45@TestSector
$LN44@TestSector:

; 900  : 				{
; 901  : 				case 0:
; 902  : 					if (crc != 0x2686c859)

  009e9	81 7c 24 24 59
	c8 86 26	 cmp	 DWORD PTR crc$[rsp], 646367321 ; 2686c859H
  009f1	74 07		 je	 SHORT $LN43@TestSector

; 903  : 						return FALSE;

  009f3	33 c0		 xor	 eax, eax
  009f5	e9 6e 05 00 00	 jmp	 $LN149@TestSector
$LN43@TestSector:

; 904  : 					nTestsPerformed++;

  009fa	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00a01	83 c0 01	 add	 eax, 1
  00a04	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 905  : 					break;

  00a0b	eb 6a		 jmp	 SHORT $LN45@TestSector
$LN42@TestSector:

; 906  : 				case 1:
; 907  : 					if (crc != 0x8a201780)

  00a0d	81 7c 24 24 80
	17 20 8a	 cmp	 DWORD PTR crc$[rsp], -1977608320 ; 8a201780H
  00a15	74 07		 je	 SHORT $LN41@TestSector

; 908  : 						return FALSE;

  00a17	33 c0		 xor	 eax, eax
  00a19	e9 4a 05 00 00	 jmp	 $LN149@TestSector
$LN41@TestSector:

; 909  : 					nTestsPerformed++;

  00a1e	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00a25	83 c0 01	 add	 eax, 1
  00a28	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 910  : 					break;

  00a2f	eb 46		 jmp	 SHORT $LN45@TestSector
$LN40@TestSector:

; 911  : 				case 2:
; 912  : 					if (crc != 0x8dd13796)

  00a31	81 7c 24 24 96
	37 d1 8d	 cmp	 DWORD PTR crc$[rsp], -1915668586 ; 8dd13796H
  00a39	74 07		 je	 SHORT $LN39@TestSector

; 913  : 						return FALSE;

  00a3b	33 c0		 xor	 eax, eax
  00a3d	e9 26 05 00 00	 jmp	 $LN149@TestSector
$LN39@TestSector:

; 914  : 					nTestsPerformed++;

  00a42	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00a49	83 c0 01	 add	 eax, 1
  00a4c	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 915  : 					break;

  00a53	eb 22		 jmp	 SHORT $LN45@TestSector
$LN38@TestSector:

; 916  : 				case 3:
; 917  : 					if (crc != 0xe95196cb)

  00a55	81 7c 24 24 cb
	96 51 e9	 cmp	 DWORD PTR crc$[rsp], -380528949 ; e95196cbH
  00a5d	74 07		 je	 SHORT $LN37@TestSector

; 918  : 						return FALSE;

  00a5f	33 c0		 xor	 eax, eax
  00a61	e9 02 05 00 00	 jmp	 $LN149@TestSector
$LN37@TestSector:

; 919  : 					nTestsPerformed++;

  00a66	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00a6d	83 c0 01	 add	 eax, 1
  00a70	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
$LN45@TestSector:
$LN47@TestSector:
$LN48@TestSector:
$LN60@TestSector:
$LN72@TestSector:
$LN84@TestSector:
$LN96@TestSector:
$LN108@TestSector:
$LN120@TestSector:

; 920  : 					break;
; 921  : 				}
; 922  : 			}
; 923  : 
; 924  : 			if (crc == 0x9f5edd58)

  00a77	81 7c 24 24 58
	dd 5e 9f	 cmp	 DWORD PTR crc$[rsp], -1621172904 ; 9f5edd58H
  00a7f	75 07		 jne	 SHORT $LN36@TestSector

; 925  : 				return FALSE;

  00a81	33 c0		 xor	 eax, eax
  00a83	e9 e0 04 00 00	 jmp	 $LN149@TestSector
$LN36@TestSector:

; 926  : 
; 927  : 			DecryptDataUnits (buf, &unitNo, nbrUnits, ci);

  00a88	4c 8b 8c 24 f0
	08 00 00	 mov	 r9, QWORD PTR ci$[rsp]
  00a90	44 8b 84 24 90
	08 00 00	 mov	 r8d, DWORD PTR nbrUnits$[rsp]
  00a98	48 8d 54 24 30	 lea	 rdx, QWORD PTR unitNo$[rsp]
  00a9d	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00aa5	e8 00 00 00 00	 call	 DecryptDataUnits

; 928  : 
; 929  : 			if (GetCrc32 (buf, sizeof (buf)) != 0x9f5edd58)

  00aaa	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  00aaf	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00ab7	e8 00 00 00 00	 call	 GetCrc32
  00abc	3d 58 dd 5e 9f	 cmp	 eax, -1621172904	; 9f5edd58H
  00ac1	74 07		 je	 SHORT $LN35@TestSector

; 930  : 				return FALSE;

  00ac3	33 c0		 xor	 eax, eax
  00ac5	e9 9e 04 00 00	 jmp	 $LN149@TestSector
$LN35@TestSector:

; 931  : 
; 932  : 			nTestsPerformed++;

  00aca	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00ad1	83 c0 01	 add	 eax, 1
  00ad4	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 933  : 		}

  00adb	e9 03 f6 ff ff	 jmp	 $LN143@TestSector
$LN142@TestSector:

; 934  : 		testCase++;

  00ae0	8b 44 24 20	 mov	 eax, DWORD PTR testCase$[rsp]
  00ae4	83 c0 01	 add	 eax, 1
  00ae7	89 44 24 20	 mov	 DWORD PTR testCase$[rsp], eax

; 935  : 	}

  00aeb	e9 89 f5 ff ff	 jmp	 $LN146@TestSector
$LN145@TestSector:

; 936  : 
; 937  : 	/* Encryption/decryption of a buffer (typically, a volume header) */
; 938  : 
; 939  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;

  00af0	c7 84 24 90 08
	00 00 04 00 00
	00		 mov	 DWORD PTR nbrUnits$[rsp], 4

; 940  : 
; 941  : 	// Test all EAs that support this mode of operation
; 942  : 	for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  00afb	e8 00 00 00 00	 call	 EAGetFirst
  00b00	8b d0		 mov	 edx, eax
  00b02	48 8b 84 24 f0
	08 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00b0a	89 10		 mov	 DWORD PTR [rax], edx
  00b0c	eb 1b		 jmp	 SHORT $LN34@TestSector
$LN33@TestSector:
  00b0e	48 8b 84 24 f0
	08 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00b16	8b 08		 mov	 ecx, DWORD PTR [rax]
  00b18	e8 00 00 00 00	 call	 EAGetNext
  00b1d	8b d0		 mov	 edx, eax
  00b1f	48 8b 84 24 f0
	08 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00b27	89 10		 mov	 DWORD PTR [rax], edx
$LN34@TestSector:
  00b29	48 8b 84 24 f0
	08 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00b31	83 38 00	 cmp	 DWORD PTR [rax], 0
  00b34	0f 84 05 04 00
	00		 je	 $LN32@TestSector

; 943  : 	{
; 944  : 		if (!EAIsModeSupported (ci->ea, ci->mode))

  00b3a	48 8b 84 24 f0
	08 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00b42	8b 50 04	 mov	 edx, DWORD PTR [rax+4]
  00b45	48 8b 84 24 f0
	08 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00b4d	8b 08		 mov	 ecx, DWORD PTR [rax]
  00b4f	e8 00 00 00 00	 call	 EAIsModeSupported
  00b54	85 c0		 test	 eax, eax
  00b56	75 02		 jne	 SHORT $LN31@TestSector

; 945  : 			continue;

  00b58	eb b4		 jmp	 SHORT $LN33@TestSector
$LN31@TestSector:

; 946  : 
; 947  : 		EAGetName (name, ci->ea);

  00b5a	48 8b 84 24 f0
	08 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00b62	8b 10		 mov	 edx, DWORD PTR [rax]
  00b64	48 8d 4c 24 40	 lea	 rcx, QWORD PTR name$[rsp]
  00b69	e8 00 00 00 00	 call	 EAGetName

; 948  : 
; 949  : 		if (EAInit (ci->ea, key1, ci->ks) != ERR_SUCCESS)

  00b6e	4c 8b 84 24 f0
	08 00 00	 mov	 r8, QWORD PTR ci$[rsp]
  00b76	49 83 c0 08	 add	 r8, 8
  00b7a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?key1@?1??TestSectorBufEncryption@@9@9
  00b81	48 8b 84 24 f0
	08 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00b89	8b 08		 mov	 ecx, DWORD PTR [rax]
  00b8b	e8 00 00 00 00	 call	 EAInit
  00b90	85 c0		 test	 eax, eax
  00b92	74 07		 je	 SHORT $LN30@TestSector

; 950  : 			return FALSE;

  00b94	33 c0		 xor	 eax, eax
  00b96	e9 cd 03 00 00	 jmp	 $LN149@TestSector
$LN30@TestSector:

; 951  : 
; 952  : 		memcpy (&ci->k2, XTS_vectors[XTS_TEST_COUNT-1].key2, sizeof (XTS_vectors[XTS_TEST_COUNT-1].key2));

  00b9b	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:XTS_vectors
  00ba2	48 8b bc 24 f0
	08 00 00	 mov	 rdi, QWORD PTR ci$[rsp]
  00baa	48 81 c7 a8 42
	00 00		 add	 rdi, 17064		; 000042a8H
  00bb1	48 81 c6 50 11
	00 00		 add	 rsi, 4432		; 00001150H
  00bb8	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00bbd	f3 a4		 rep movsb

; 953  : 
; 954  : 		if (!EAInitMode (ci))

  00bbf	48 8b 8c 24 f0
	08 00 00	 mov	 rcx, QWORD PTR ci$[rsp]
  00bc7	e8 00 00 00 00	 call	 EAInitMode
  00bcc	85 c0		 test	 eax, eax
  00bce	75 07		 jne	 SHORT $LN29@TestSector

; 955  : 			return FALSE;

  00bd0	33 c0		 xor	 eax, eax
  00bd2	e9 91 03 00 00	 jmp	 $LN149@TestSector
$LN29@TestSector:

; 956  : 
; 957  : 		// Each data unit will contain the same plaintext
; 958  : 		for (i = 0; i < nbrUnits; i++)

  00bd7	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00bdf	eb 0b		 jmp	 SHORT $LN28@TestSector
$LN27@TestSector:
  00be1	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  00be5	83 c0 01	 add	 eax, 1
  00be8	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
$LN28@TestSector:
  00bec	8b 84 24 90 08
	00 00		 mov	 eax, DWORD PTR nbrUnits$[rsp]
  00bf3	39 44 24 28	 cmp	 DWORD PTR i$[rsp], eax
  00bf7	73 2b		 jae	 SHORT $LN26@TestSector

; 959  : 		{
; 960  : 			memcpy ((unsigned char *) buf + i * ENCRYPTION_DATA_UNIT_SIZE, 
; 961  : 				XTS_vectors[XTS_TEST_COUNT-1].plaintext, 
; 962  : 				ENCRYPTION_DATA_UNIT_SIZE);

  00bf9	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:XTS_vectors
  00c00	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  00c04	69 c0 00 02 00
	00		 imul	 eax, 512		; 00000200H
  00c0a	8b c0		 mov	 eax, eax
  00c0c	48 8d bc 04 90
	00 00 00	 lea	 rdi, QWORD PTR buf$[rsp+rax]
  00c14	48 81 c6 7c 11
	00 00		 add	 rsi, 4476		; 0000117cH
  00c1b	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00c20	f3 a4		 rep movsb

; 963  : 		}

  00c22	eb bd		 jmp	 SHORT $LN27@TestSector
$LN26@TestSector:

; 964  : 
; 965  : 		EncryptBuffer (buf, sizeof (buf), ci);

  00c24	4c 8b 84 24 f0
	08 00 00	 mov	 r8, QWORD PTR ci$[rsp]
  00c2c	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  00c31	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00c39	e8 00 00 00 00	 call	 EncryptBuffer

; 966  : 
; 967  : 		crc = GetCrc32 (buf, sizeof (buf));

  00c3e	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  00c43	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00c4b	e8 00 00 00 00	 call	 GetCrc32
  00c50	89 44 24 24	 mov	 DWORD PTR crc$[rsp], eax

; 968  : 
; 969  : 		if (strcmp (name, "AES") == 0)

  00c54	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00c59	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  00c60	48 2b ca	 sub	 rcx, rdx
$LL174@TestSector:
  00c63	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00c66	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00c69	75 0c		 jne	 SHORT $LN176@TestSector
  00c6b	48 83 c2 01	 add	 rdx, 1
  00c6f	84 c0		 test	 al, al
  00c71	75 f0		 jne	 SHORT $LL174@TestSector
  00c73	33 c0		 xor	 eax, eax
  00c75	eb 05		 jmp	 SHORT $LN175@TestSector
$LN176@TestSector:
  00c77	1b c0		 sbb	 eax, eax
  00c79	83 d8 ff	 sbb	 eax, -1
$LN175@TestSector:
  00c7c	85 c0		 test	 eax, eax
  00c7e	75 27		 jne	 SHORT $LN25@TestSector

; 970  : 		{
; 971  : 			if (crc != 0x33b91fab)

  00c80	81 7c 24 24 ab
	1f b9 33	 cmp	 DWORD PTR crc$[rsp], 867770283 ; 33b91fabH
  00c88	74 07		 je	 SHORT $LN24@TestSector

; 972  : 				return FALSE;

  00c8a	33 c0		 xor	 eax, eax
  00c8c	e9 d7 02 00 00	 jmp	 $LN149@TestSector
$LN24@TestSector:

; 973  : 			nTestsPerformed++;

  00c91	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00c98	83 c0 01	 add	 eax, 1
  00c9b	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00ca2	e9 3d 02 00 00	 jmp	 $LN23@TestSector
$LN25@TestSector:

; 974  : 		}
; 975  : 		else if (strcmp (name, "Serpent") == 0)

  00ca7	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00cac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  00cb3	48 2b ca	 sub	 rcx, rdx
$LL171@TestSector:
  00cb6	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00cb9	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00cbc	75 0c		 jne	 SHORT $LN173@TestSector
  00cbe	48 83 c2 01	 add	 rdx, 1
  00cc2	84 c0		 test	 al, al
  00cc4	75 f0		 jne	 SHORT $LL171@TestSector
  00cc6	33 c0		 xor	 eax, eax
  00cc8	eb 05		 jmp	 SHORT $LN172@TestSector
$LN173@TestSector:
  00cca	1b c0		 sbb	 eax, eax
  00ccc	83 d8 ff	 sbb	 eax, -1
$LN172@TestSector:
  00ccf	85 c0		 test	 eax, eax
  00cd1	75 27		 jne	 SHORT $LN22@TestSector

; 976  : 		{
; 977  : 			if (crc != 0x3494d480)

  00cd3	81 7c 24 24 80
	d4 94 34	 cmp	 DWORD PTR crc$[rsp], 882168960 ; 3494d480H
  00cdb	74 07		 je	 SHORT $LN21@TestSector

; 978  : 				return FALSE;

  00cdd	33 c0		 xor	 eax, eax
  00cdf	e9 84 02 00 00	 jmp	 $LN149@TestSector
$LN21@TestSector:

; 979  : 			nTestsPerformed++;

  00ce4	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00ceb	83 c0 01	 add	 eax, 1
  00cee	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00cf5	e9 ea 01 00 00	 jmp	 $LN20@TestSector
$LN22@TestSector:

; 980  : 		}
; 981  : 		else if (strcmp (name, "Twofish") == 0)

  00cfa	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00cff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@
  00d06	48 2b ca	 sub	 rcx, rdx
$LL168@TestSector:
  00d09	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00d0c	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00d0f	75 0c		 jne	 SHORT $LN170@TestSector
  00d11	48 83 c2 01	 add	 rdx, 1
  00d15	84 c0		 test	 al, al
  00d17	75 f0		 jne	 SHORT $LL168@TestSector
  00d19	33 c0		 xor	 eax, eax
  00d1b	eb 05		 jmp	 SHORT $LN169@TestSector
$LN170@TestSector:
  00d1d	1b c0		 sbb	 eax, eax
  00d1f	83 d8 ff	 sbb	 eax, -1
$LN169@TestSector:
  00d22	85 c0		 test	 eax, eax
  00d24	75 27		 jne	 SHORT $LN19@TestSector

; 982  : 		{
; 983  : 			if (crc != 0xc4d65b46)

  00d26	81 7c 24 24 46
	5b d6 c4	 cmp	 DWORD PTR crc$[rsp], -992584890 ; c4d65b46H
  00d2e	74 07		 je	 SHORT $LN18@TestSector

; 984  : 				return FALSE;

  00d30	33 c0		 xor	 eax, eax
  00d32	e9 31 02 00 00	 jmp	 $LN149@TestSector
$LN18@TestSector:

; 985  : 			nTestsPerformed++;

  00d37	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00d3e	83 c0 01	 add	 eax, 1
  00d41	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00d48	e9 97 01 00 00	 jmp	 $LN17@TestSector
$LN19@TestSector:

; 986  : 		}
; 987  : 		else if (strcmp (name, "AES-Twofish") == 0)

  00d4d	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00d52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  00d59	48 2b ca	 sub	 rcx, rdx
$LL165@TestSector:
  00d5c	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00d5f	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00d62	75 0c		 jne	 SHORT $LN167@TestSector
  00d64	48 83 c2 01	 add	 rdx, 1
  00d68	84 c0		 test	 al, al
  00d6a	75 f0		 jne	 SHORT $LL165@TestSector
  00d6c	33 c0		 xor	 eax, eax
  00d6e	eb 05		 jmp	 SHORT $LN166@TestSector
$LN167@TestSector:
  00d70	1b c0		 sbb	 eax, eax
  00d72	83 d8 ff	 sbb	 eax, -1
$LN166@TestSector:
  00d75	85 c0		 test	 eax, eax
  00d77	75 27		 jne	 SHORT $LN16@TestSector

; 988  : 		{
; 989  : 			if (crc != 0x14ce7385)

  00d79	81 7c 24 24 85
	73 ce 14	 cmp	 DWORD PTR crc$[rsp], 349074309 ; 14ce7385H
  00d81	74 07		 je	 SHORT $LN15@TestSector

; 990  : 				return FALSE;

  00d83	33 c0		 xor	 eax, eax
  00d85	e9 de 01 00 00	 jmp	 $LN149@TestSector
$LN15@TestSector:

; 991  : 			nTestsPerformed++;

  00d8a	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00d91	83 c0 01	 add	 eax, 1
  00d94	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00d9b	e9 44 01 00 00	 jmp	 $LN14@TestSector
$LN16@TestSector:

; 992  : 		}
; 993  : 		else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  00da0	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00da5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  00dac	48 2b ca	 sub	 rcx, rdx
$LL162@TestSector:
  00daf	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00db2	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00db5	75 0c		 jne	 SHORT $LN164@TestSector
  00db7	48 83 c2 01	 add	 rdx, 1
  00dbb	84 c0		 test	 al, al
  00dbd	75 f0		 jne	 SHORT $LL162@TestSector
  00dbf	33 c0		 xor	 eax, eax
  00dc1	eb 05		 jmp	 SHORT $LN163@TestSector
$LN164@TestSector:
  00dc3	1b c0		 sbb	 eax, eax
  00dc5	83 d8 ff	 sbb	 eax, -1
$LN163@TestSector:
  00dc8	85 c0		 test	 eax, eax
  00dca	75 27		 jne	 SHORT $LN13@TestSector

; 994  : 		{
; 995  : 			if (crc != 0x0ec81bf7)

  00dcc	81 7c 24 24 f7
	1b c8 0e	 cmp	 DWORD PTR crc$[rsp], 247995383 ; 0ec81bf7H
  00dd4	74 07		 je	 SHORT $LN12@TestSector

; 996  : 				return FALSE;

  00dd6	33 c0		 xor	 eax, eax
  00dd8	e9 8b 01 00 00	 jmp	 $LN149@TestSector
$LN12@TestSector:

; 997  : 			nTestsPerformed++;

  00ddd	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00de4	83 c0 01	 add	 eax, 1
  00de7	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00dee	e9 f1 00 00 00	 jmp	 $LN11@TestSector
$LN13@TestSector:

; 998  : 		}
; 999  : 		else if (strcmp (name, "Serpent-AES") == 0)

  00df3	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00df8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  00dff	48 2b ca	 sub	 rcx, rdx
$LL159@TestSector:
  00e02	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00e05	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00e08	75 0c		 jne	 SHORT $LN161@TestSector
  00e0a	48 83 c2 01	 add	 rdx, 1
  00e0e	84 c0		 test	 al, al
  00e10	75 f0		 jne	 SHORT $LL159@TestSector
  00e12	33 c0		 xor	 eax, eax
  00e14	eb 05		 jmp	 SHORT $LN160@TestSector
$LN161@TestSector:
  00e16	1b c0		 sbb	 eax, eax
  00e18	83 d8 ff	 sbb	 eax, -1
$LN160@TestSector:
  00e1b	85 c0		 test	 eax, eax
  00e1d	75 27		 jne	 SHORT $LN10@TestSector

; 1000 : 		{
; 1001 : 			if (crc != 0x42f919ad)

  00e1f	81 7c 24 24 ad
	19 f9 42	 cmp	 DWORD PTR crc$[rsp], 1123621293 ; 42f919adH
  00e27	74 07		 je	 SHORT $LN9@TestSector

; 1002 : 				return FALSE;

  00e29	33 c0		 xor	 eax, eax
  00e2b	e9 38 01 00 00	 jmp	 $LN149@TestSector
$LN9@TestSector:

; 1003 : 			nTestsPerformed++;

  00e30	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00e37	83 c0 01	 add	 eax, 1
  00e3a	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00e41	e9 9e 00 00 00	 jmp	 $LN8@TestSector
$LN10@TestSector:

; 1004 : 		}
; 1005 : 		else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  00e46	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00e4b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  00e52	48 2b ca	 sub	 rcx, rdx
$LL156@TestSector:
  00e55	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00e58	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00e5b	75 0c		 jne	 SHORT $LN158@TestSector
  00e5d	48 83 c2 01	 add	 rdx, 1
  00e61	84 c0		 test	 al, al
  00e63	75 f0		 jne	 SHORT $LL156@TestSector
  00e65	33 c0		 xor	 eax, eax
  00e67	eb 05		 jmp	 SHORT $LN157@TestSector
$LN158@TestSector:
  00e69	1b c0		 sbb	 eax, eax
  00e6b	83 d8 ff	 sbb	 eax, -1
$LN157@TestSector:
  00e6e	85 c0		 test	 eax, eax
  00e70	75 24		 jne	 SHORT $LN7@TestSector

; 1006 : 		{
; 1007 : 			if (crc != 0x208d5c58)

  00e72	81 7c 24 24 58
	5c 8d 20	 cmp	 DWORD PTR crc$[rsp], 546135128 ; 208d5c58H
  00e7a	74 07		 je	 SHORT $LN6@TestSector

; 1008 : 				return FALSE;

  00e7c	33 c0		 xor	 eax, eax
  00e7e	e9 e5 00 00 00	 jmp	 $LN149@TestSector
$LN6@TestSector:

; 1009 : 			nTestsPerformed++;

  00e83	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00e8a	83 c0 01	 add	 eax, 1
  00e8d	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
  00e94	eb 4e		 jmp	 SHORT $LN5@TestSector
$LN7@TestSector:

; 1010 : 		}
; 1011 : 		else if (strcmp (name, "Twofish-Serpent") == 0)

  00e96	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00e9b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  00ea2	48 2b ca	 sub	 rcx, rdx
$LL153@TestSector:
  00ea5	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00ea8	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00eab	75 0c		 jne	 SHORT $LN155@TestSector
  00ead	48 83 c2 01	 add	 rdx, 1
  00eb1	84 c0		 test	 al, al
  00eb3	75 f0		 jne	 SHORT $LL153@TestSector
  00eb5	33 c0		 xor	 eax, eax
  00eb7	eb 05		 jmp	 SHORT $LN154@TestSector
$LN155@TestSector:
  00eb9	1b c0		 sbb	 eax, eax
  00ebb	83 d8 ff	 sbb	 eax, -1
$LN154@TestSector:
  00ebe	85 c0		 test	 eax, eax
  00ec0	75 22		 jne	 SHORT $LN4@TestSector

; 1012 : 		{
; 1013 : 			if (crc != 0xbe78cec1)

  00ec2	81 7c 24 24 c1
	ce 78 be	 cmp	 DWORD PTR crc$[rsp], -1099379007 ; be78cec1H
  00eca	74 07		 je	 SHORT $LN3@TestSector

; 1014 : 				return FALSE;

  00ecc	33 c0		 xor	 eax, eax
  00ece	e9 95 00 00 00	 jmp	 $LN149@TestSector
$LN3@TestSector:

; 1015 : 			nTestsPerformed++;

  00ed3	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00eda	83 c0 01	 add	 eax, 1
  00edd	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax
$LN4@TestSector:
$LN5@TestSector:
$LN8@TestSector:
$LN11@TestSector:
$LN14@TestSector:
$LN17@TestSector:
$LN20@TestSector:
$LN23@TestSector:

; 1016 : 		}
; 1017 : 
; 1018 : 		if (crc == 0x9f5edd58)

  00ee4	81 7c 24 24 58
	dd 5e 9f	 cmp	 DWORD PTR crc$[rsp], -1621172904 ; 9f5edd58H
  00eec	75 04		 jne	 SHORT $LN2@TestSector

; 1019 : 			return FALSE;

  00eee	33 c0		 xor	 eax, eax
  00ef0	eb 76		 jmp	 SHORT $LN149@TestSector
$LN2@TestSector:

; 1020 : 
; 1021 : 		DecryptBuffer (buf, sizeof (buf), ci);

  00ef2	4c 8b 84 24 f0
	08 00 00	 mov	 r8, QWORD PTR ci$[rsp]
  00efa	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  00eff	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00f07	e8 00 00 00 00	 call	 DecryptBuffer

; 1022 : 
; 1023 : 		if (GetCrc32 (buf, sizeof (buf)) != 0x9f5edd58)

  00f0c	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  00f11	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00f19	e8 00 00 00 00	 call	 GetCrc32
  00f1e	3d 58 dd 5e 9f	 cmp	 eax, -1621172904	; 9f5edd58H
  00f23	74 04		 je	 SHORT $LN1@TestSector

; 1024 : 			return FALSE;

  00f25	33 c0		 xor	 eax, eax
  00f27	eb 3f		 jmp	 SHORT $LN149@TestSector
$LN1@TestSector:

; 1025 : 
; 1026 : 		nTestsPerformed++;

  00f29	8b 84 24 94 08
	00 00		 mov	 eax, DWORD PTR nTestsPerformed$[rsp]
  00f30	83 c0 01	 add	 eax, 1
  00f33	89 84 24 94 08
	00 00		 mov	 DWORD PTR nTestsPerformed$[rsp], eax

; 1027 : 	}

  00f3a	e9 cf fb ff ff	 jmp	 $LN33@TestSector
$LN32@TestSector:

; 1028 : 
; 1029 : 	return (nTestsPerformed == 80);

  00f3f	83 bc 24 94 08
	00 00 50	 cmp	 DWORD PTR nTestsPerformed$[rsp], 80 ; 00000050H
  00f47	75 0d		 jne	 SHORT $LN151@TestSector
  00f49	c7 84 24 b8 08
	00 00 01 00 00
	00		 mov	 DWORD PTR tv430[rsp], 1
  00f54	eb 0b		 jmp	 SHORT $LN152@TestSector
$LN151@TestSector:
  00f56	c7 84 24 b8 08
	00 00 00 00 00
	00		 mov	 DWORD PTR tv430[rsp], 0
$LN152@TestSector:
  00f61	8b 84 24 b8 08
	00 00		 mov	 eax, DWORD PTR tv430[rsp]
$LN149@TestSector:

; 1030 : }

  00f68	48 8b 8c 24 c0
	08 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00f70	48 33 cc	 xor	 rcx, rsp
  00f73	e8 00 00 00 00	 call	 __security_check_cookie
  00f78	48 81 c4 d8 08
	00 00		 add	 rsp, 2264		; 000008d8H
  00f7f	5f		 pop	 rdi
  00f80	5e		 pop	 rsi
  00f81	c3		 ret	 0
TestSectorBufEncryption ENDP
PUBLIC	__$ArrayPad$
;	COMDAT pdata
pdata	SEGMENT
$pdata$DoAutoTestAlgorithms DD imagerel DoAutoTestAlgorithms
	DD	imagerel DoAutoTestAlgorithms+2213
	DD	imagerel $unwind$DoAutoTestAlgorithms
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DoAutoTestAlgorithms DD 041c19H
	DD	095010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0498H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT DoAutoTestAlgorithms
_TEXT	SEGMENT
i$ = 32
ci$ = 40
bFailed$ = 48
tmp$ = 64
key$ = 80
cipher$29280 = 112
cipher$29286 = 116
cipher$29293 = 120
testData$29297 = 128
i$29299 = 1152
origCrc$29298 = 1160
cipher$29309 = 1164
cipher$29316 = 1168
tv481 = 1172
__$ArrayPad$ = 1176
DoAutoTestAlgorithms PROC				; COMDAT

; 1367 : {

  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 81 ec a8 04
	00 00		 sub	 rsp, 1192		; 000004a8H
  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00011	48 33 c4	 xor	 rax, rsp
  00014	48 89 84 24 98
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1368 : 	PCRYPTO_INFO ci;
; 1369 : 	char key[32];
; 1370 : 	unsigned char tmp[16];
; 1371 : 	BOOL bFailed = FALSE;

  0001c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR bFailed$[rsp], 0

; 1372 : 	int i;
; 1373 : 
; 1374 : 	ci = crypto_open ();

  00024	e8 00 00 00 00	 call	 crypto_open
  00029	48 89 44 24 28	 mov	 QWORD PTR ci$[rsp], rax

; 1375 : 	if (!ci)

  0002e	48 83 7c 24 28
	00		 cmp	 QWORD PTR ci$[rsp], 0
  00034	75 07		 jne	 SHORT $LN45@DoAutoTest

; 1376 : 		return FALSE;

  00036	33 c0		 xor	 eax, eax
  00038	e9 4e 08 00 00	 jmp	 $LN46@DoAutoTest
$LN45@DoAutoTest:

; 1377 : 
; 1378 : 	memset (ci, 0, sizeof (*ci));

  0003d	48 8b 7c 24 28	 mov	 rdi, QWORD PTR ci$[rsp]
  00042	33 c0		 xor	 eax, eax
  00044	b9 68 44 00 00	 mov	 ecx, 17512		; 00004468H
  00049	f3 aa		 rep stosb

; 1379 : 
; 1380 : 	/* Blowfish (deprecated/legacy) */
; 1381 : 
; 1382 : 	for (i=0;i<BF_TEST_COUNT;i++)

  0004b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00053	eb 0b		 jmp	 SHORT $LN44@DoAutoTest
$LN43@DoAutoTest:
  00055	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00059	83 c0 01	 add	 eax, 1
  0005c	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN44@DoAutoTest:
  00060	83 7c 24 20 22	 cmp	 DWORD PTR i$[rsp], 34	; 00000022H
  00065	0f 8d 04 01 00
	00		 jge	 $LN42@DoAutoTest

; 1383 : 	{		
; 1384 : 		memcpy(key, bf_ecb_vectors[i].key, 8);

  0006b	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00070	48 6b c9 18	 imul	 rcx, 24
  00074	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:bf_ecb_vectors
  0007b	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0007f	48 89 44 24 50	 mov	 QWORD PTR key$[rsp], rax

; 1385 : 		memcpy(tmp, bf_ecb_vectors[i].plaintext, 8);

  00084	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00089	48 6b c9 18	 imul	 rcx, 24
  0008d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:bf_ecb_vectors
  00094	48 8b 44 08 08	 mov	 rax, QWORD PTR [rax+rcx+8]
  00099	48 89 44 24 40	 mov	 QWORD PTR tmp$[rsp], rax

; 1386 : 		CipherInit2(BLOWFISH, key, ks_tmp, 8);

  0009e	41 b9 08 00 00
	00		 mov	 r9d, 8
  000a4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  000ab	48 8d 54 24 50	 lea	 rdx, QWORD PTR key$[rsp]
  000b0	b9 04 00 00 00	 mov	 ecx, 4
  000b5	e8 00 00 00 00	 call	 CipherInit2

; 1387 : 
; 1388 : 		((uint32 *)tmp)[0] = BE32 (((uint32 *)tmp)[0]);

  000ba	8b 4c 24 40	 mov	 ecx, DWORD PTR tmp$[rsp]
  000be	e8 00 00 00 00	 call	 MirrorBytes32
  000c3	89 44 24 40	 mov	 DWORD PTR tmp$[rsp], eax

; 1389 : 		((uint32 *)tmp)[1] = BE32 (((uint32 *)tmp)[1]);

  000c7	8b 4c 24 44	 mov	 ecx, DWORD PTR tmp$[rsp+4]
  000cb	e8 00 00 00 00	 call	 MirrorBytes32
  000d0	89 44 24 44	 mov	 DWORD PTR tmp$[rsp+4], eax

; 1390 : 
; 1391 : 		BlowfishEncryptLE (tmp,tmp,(BF_KEY *)ks_tmp,1);

  000d4	41 b9 01 00 00
	00		 mov	 r9d, 1
  000da	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  000e1	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  000e6	48 8d 4c 24 40	 lea	 rcx, QWORD PTR tmp$[rsp]
  000eb	e8 00 00 00 00	 call	 BlowfishEncryptLE

; 1392 : 		BlowfishEncryptLE (tmp,tmp,(BF_KEY *)ks_tmp,0);

  000f0	45 33 c9	 xor	 r9d, r9d
  000f3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  000fa	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  000ff	48 8d 4c 24 40	 lea	 rcx, QWORD PTR tmp$[rsp]
  00104	e8 00 00 00 00	 call	 BlowfishEncryptLE

; 1393 : 		BlowfishEncryptLE (tmp,tmp,(BF_KEY *)ks_tmp,1);

  00109	41 b9 01 00 00
	00		 mov	 r9d, 1
  0010f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  00116	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  0011b	48 8d 4c 24 40	 lea	 rcx, QWORD PTR tmp$[rsp]
  00120	e8 00 00 00 00	 call	 BlowfishEncryptLE

; 1394 : 
; 1395 : 		((uint32 *)tmp)[0] = BE32 (((uint32 *)tmp)[0]);

  00125	8b 4c 24 40	 mov	 ecx, DWORD PTR tmp$[rsp]
  00129	e8 00 00 00 00	 call	 MirrorBytes32
  0012e	89 44 24 40	 mov	 DWORD PTR tmp$[rsp], eax

; 1396 : 		((uint32 *)tmp)[1] = BE32 (((uint32 *)tmp)[1]);

  00132	8b 4c 24 44	 mov	 ecx, DWORD PTR tmp$[rsp+4]
  00136	e8 00 00 00 00	 call	 MirrorBytes32
  0013b	89 44 24 44	 mov	 DWORD PTR tmp$[rsp+4], eax

; 1397 : 
; 1398 : 		if (memcmp(bf_ecb_vectors[i].ciphertext,tmp,8)!=0)

  0013f	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00144	48 6b c9 18	 imul	 rcx, 24
  00148	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:bf_ecb_vectors
  0014f	48 8d 4c 08 10	 lea	 rcx, QWORD PTR [rax+rcx+16]
  00154	41 b8 08 00 00
	00		 mov	 r8d, 8
  0015a	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  0015f	e8 00 00 00 00	 call	 memcmp
  00164	85 c0		 test	 eax, eax
  00166	74 02		 je	 SHORT $LN41@DoAutoTest

; 1399 : 			break;

  00168	eb 05		 jmp	 SHORT $LN42@DoAutoTest
$LN41@DoAutoTest:

; 1400 : 	}

  0016a	e9 e6 fe ff ff	 jmp	 $LN43@DoAutoTest
$LN42@DoAutoTest:

; 1401 : 
; 1402 : 	if (i != BF_TEST_COUNT)

  0016f	83 7c 24 20 22	 cmp	 DWORD PTR i$[rsp], 34	; 00000022H
  00174	74 08		 je	 SHORT $LN40@DoAutoTest

; 1403 : 		bFailed = TRUE;

  00176	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR bFailed$[rsp], 1
$LN40@DoAutoTest:

; 1404 : 
; 1405 : 	/* CAST5 (deprecated/legacy) */
; 1406 : 
; 1407 : 	for (i=0;i<CAST_TEST_COUNT;i++)

  0017e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00186	eb 0b		 jmp	 SHORT $LN39@DoAutoTest
$LN38@DoAutoTest:
  00188	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0018c	83 c0 01	 add	 eax, 1
  0018f	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN39@DoAutoTest:
  00193	83 7c 24 20 01	 cmp	 DWORD PTR i$[rsp], 1
  00198	0f 8d cc 00 00
	00		 jge	 $LN37@DoAutoTest

; 1408 : 	{			
; 1409 : 		int cipher = CAST;

  0019e	c7 44 24 70 05
	00 00 00	 mov	 DWORD PTR cipher$29280[rsp], 5

; 1410 : 		memcpy(key, cast_ecb_vectors[i].key, 16);

  001a6	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  001ab	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  001af	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:cast_ecb_vectors
  001b6	48 8d 7c 24 50	 lea	 rdi, QWORD PTR key$[rsp]
  001bb	48 8d 34 08	 lea	 rsi, QWORD PTR [rax+rcx]
  001bf	b9 10 00 00 00	 mov	 ecx, 16
  001c4	f3 a4		 rep movsb

; 1411 : 		memcpy(tmp, cast_ecb_vectors[i].plaintext, 8);

  001c6	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  001cb	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  001cf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:cast_ecb_vectors
  001d6	48 8b 44 08 10	 mov	 rax, QWORD PTR [rax+rcx+16]
  001db	48 89 44 24 40	 mov	 QWORD PTR tmp$[rsp], rax

; 1412 : 		CipherInit2(cipher, key, ks_tmp, 16);

  001e0	41 b9 10 00 00
	00		 mov	 r9d, 16
  001e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  001ed	48 8d 54 24 50	 lea	 rdx, QWORD PTR key$[rsp]
  001f2	8b 4c 24 70	 mov	 ecx, DWORD PTR cipher$29280[rsp]
  001f6	e8 00 00 00 00	 call	 CipherInit2

; 1413 : 
; 1414 : 		EncipherBlock(cipher, tmp, ks_tmp);

  001fb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  00202	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  00207	8b 4c 24 70	 mov	 ecx, DWORD PTR cipher$29280[rsp]
  0020b	e8 00 00 00 00	 call	 EncipherBlock

; 1415 : 		DecipherBlock(cipher, tmp, ks_tmp);

  00210	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  00217	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  0021c	8b 4c 24 70	 mov	 ecx, DWORD PTR cipher$29280[rsp]
  00220	e8 00 00 00 00	 call	 DecipherBlock

; 1416 : 		EncipherBlock(cipher, tmp, ks_tmp);

  00225	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  0022c	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  00231	8b 4c 24 70	 mov	 ecx, DWORD PTR cipher$29280[rsp]
  00235	e8 00 00 00 00	 call	 EncipherBlock

; 1417 : 
; 1418 : 		if (memcmp(cast_ecb_vectors[i].ciphertext, tmp,8)!=0)

  0023a	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  0023f	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  00243	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:cast_ecb_vectors
  0024a	48 8d 4c 08 18	 lea	 rcx, QWORD PTR [rax+rcx+24]
  0024f	41 b8 08 00 00
	00		 mov	 r8d, 8
  00255	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  0025a	e8 00 00 00 00	 call	 memcmp
  0025f	85 c0		 test	 eax, eax
  00261	74 02		 je	 SHORT $LN36@DoAutoTest

; 1419 : 			break;

  00263	eb 05		 jmp	 SHORT $LN37@DoAutoTest
$LN36@DoAutoTest:

; 1420 : 	}

  00265	e9 1e ff ff ff	 jmp	 $LN38@DoAutoTest
$LN37@DoAutoTest:

; 1421 : 
; 1422 : 	if (i!=CAST_TEST_COUNT)

  0026a	83 7c 24 20 01	 cmp	 DWORD PTR i$[rsp], 1
  0026f	74 08		 je	 SHORT $LN35@DoAutoTest

; 1423 : 		bFailed = TRUE;

  00271	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR bFailed$[rsp], 1
$LN35@DoAutoTest:

; 1424 : 
; 1425 : 
; 1426 : 	/* Triple DES (TECB, EDE) - deprecated/legacy */
; 1427 : 
; 1428 : 	for (i = 0; i < TRIPLEDES_TEST_COUNT; i++)

  00279	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00281	eb 0b		 jmp	 SHORT $LN34@DoAutoTest
$LN33@DoAutoTest:
  00283	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00287	83 c0 01	 add	 eax, 1
  0028a	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN34@DoAutoTest:
  0028e	83 7c 24 20 01	 cmp	 DWORD PTR i$[rsp], 1
  00293	0f 8d dc 00 00
	00		 jge	 $LN32@DoAutoTest

; 1429 : 	{			
; 1430 : 		int cipher = TRIPLEDES;

  00299	c7 44 24 74 06
	00 00 00	 mov	 DWORD PTR cipher$29286[rsp], 6

; 1431 : 		memcpy(key, tripledes_vectors[i].key, sizeof(tripledes_vectors->key));

  002a1	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  002a6	48 6b c9 28	 imul	 rcx, 40			; 00000028H
  002aa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:tripledes_vectors
  002b1	48 8d 7c 24 50	 lea	 rdi, QWORD PTR key$[rsp]
  002b6	48 8d 34 08	 lea	 rsi, QWORD PTR [rax+rcx]
  002ba	b9 18 00 00 00	 mov	 ecx, 24
  002bf	f3 a4		 rep movsb

; 1432 : 		memcpy(tmp, tripledes_vectors[i].plaintext, sizeof(tripledes_vectors->plaintext));

  002c1	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  002c6	48 6b c9 28	 imul	 rcx, 40			; 00000028H
  002ca	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:tripledes_vectors
  002d1	48 8b 44 08 18	 mov	 rax, QWORD PTR [rax+rcx+24]
  002d6	48 89 44 24 40	 mov	 QWORD PTR tmp$[rsp], rax

; 1433 : 
; 1434 : 		CipherInit(cipher, key, ks_tmp);

  002db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  002e2	48 8d 54 24 50	 lea	 rdx, QWORD PTR key$[rsp]
  002e7	8b 4c 24 74	 mov	 ecx, DWORD PTR cipher$29286[rsp]
  002eb	e8 00 00 00 00	 call	 CipherInit

; 1435 : 
; 1436 : 		EncipherBlock(cipher, tmp, ks_tmp);

  002f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  002f7	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  002fc	8b 4c 24 74	 mov	 ecx, DWORD PTR cipher$29286[rsp]
  00300	e8 00 00 00 00	 call	 EncipherBlock

; 1437 : 		if (memcmp(tripledes_vectors[i].ciphertext, tmp, sizeof(tripledes_vectors->ciphertext)) != 0)

  00305	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  0030a	48 6b c9 28	 imul	 rcx, 40			; 00000028H
  0030e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:tripledes_vectors
  00315	48 8d 4c 08 20	 lea	 rcx, QWORD PTR [rax+rcx+32]
  0031a	41 b8 08 00 00
	00		 mov	 r8d, 8
  00320	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  00325	e8 00 00 00 00	 call	 memcmp
  0032a	85 c0		 test	 eax, eax
  0032c	74 02		 je	 SHORT $LN31@DoAutoTest

; 1438 : 			break;

  0032e	eb 45		 jmp	 SHORT $LN32@DoAutoTest
$LN31@DoAutoTest:

; 1439 : 
; 1440 : 		DecipherBlock(cipher, tmp, ks_tmp);

  00330	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  00337	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  0033c	8b 4c 24 74	 mov	 ecx, DWORD PTR cipher$29286[rsp]
  00340	e8 00 00 00 00	 call	 DecipherBlock

; 1441 : 		if (memcmp(tripledes_vectors[i].plaintext, tmp, sizeof(tripledes_vectors->plaintext)) != 0)

  00345	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  0034a	48 6b c9 28	 imul	 rcx, 40			; 00000028H
  0034e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:tripledes_vectors
  00355	48 8d 4c 08 18	 lea	 rcx, QWORD PTR [rax+rcx+24]
  0035a	41 b8 08 00 00
	00		 mov	 r8d, 8
  00360	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  00365	e8 00 00 00 00	 call	 memcmp
  0036a	85 c0		 test	 eax, eax
  0036c	74 02		 je	 SHORT $LN30@DoAutoTest

; 1442 : 			break;

  0036e	eb 05		 jmp	 SHORT $LN32@DoAutoTest
$LN30@DoAutoTest:

; 1443 : 	}

  00370	e9 0e ff ff ff	 jmp	 $LN33@DoAutoTest
$LN32@DoAutoTest:

; 1444 : 	if (i != TRIPLEDES_TEST_COUNT)

  00375	83 7c 24 20 01	 cmp	 DWORD PTR i$[rsp], 1
  0037a	74 08		 je	 SHORT $LN29@DoAutoTest

; 1445 : 		bFailed = TRUE;

  0037c	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR bFailed$[rsp], 1
$LN29@DoAutoTest:

; 1446 : 
; 1447 : 
; 1448 : 	/* AES */
; 1449 : 
; 1450 : 	for (i = 0; i < AES_TEST_COUNT; i++)

  00384	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0038c	eb 0b		 jmp	 SHORT $LN28@DoAutoTest
$LN27@DoAutoTest:
  0038e	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00392	83 c0 01	 add	 eax, 1
  00395	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN28@DoAutoTest:
  00399	83 7c 24 20 01	 cmp	 DWORD PTR i$[rsp], 1
  0039e	0f 8d e3 00 00
	00		 jge	 $LN26@DoAutoTest

; 1451 : 	{			
; 1452 : 		int cipher = AES;

  003a4	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR cipher$29293[rsp], 1

; 1453 : 		memcpy(key, aes_ecb_vectors[i].key, 32);

  003ac	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  003b1	48 6b c9 40	 imul	 rcx, 64			; 00000040H
  003b5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:aes_ecb_vectors
  003bc	48 8d 7c 24 50	 lea	 rdi, QWORD PTR key$[rsp]
  003c1	48 8d 34 08	 lea	 rsi, QWORD PTR [rax+rcx]
  003c5	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  003ca	f3 a4		 rep movsb

; 1454 : 		memcpy(tmp, aes_ecb_vectors[i].plaintext, 16);

  003cc	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  003d1	48 6b c9 40	 imul	 rcx, 64			; 00000040H
  003d5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:aes_ecb_vectors
  003dc	48 8d 7c 24 40	 lea	 rdi, QWORD PTR tmp$[rsp]
  003e1	48 8d 74 08 20	 lea	 rsi, QWORD PTR [rax+rcx+32]
  003e6	b9 10 00 00 00	 mov	 ecx, 16
  003eb	f3 a4		 rep movsb

; 1455 : 		CipherInit(cipher, key, ks_tmp);

  003ed	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  003f4	48 8d 54 24 50	 lea	 rdx, QWORD PTR key$[rsp]
  003f9	8b 4c 24 78	 mov	 ecx, DWORD PTR cipher$29293[rsp]
  003fd	e8 00 00 00 00	 call	 CipherInit

; 1456 : 
; 1457 : 		EncipherBlock(cipher, tmp, ks_tmp);

  00402	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  00409	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  0040e	8b 4c 24 78	 mov	 ecx, DWORD PTR cipher$29293[rsp]
  00412	e8 00 00 00 00	 call	 EncipherBlock

; 1458 : 		if (memcmp(aes_ecb_vectors[i].ciphertext, tmp, 16) != 0)

  00417	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  0041c	48 6b c9 40	 imul	 rcx, 64			; 00000040H
  00420	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:aes_ecb_vectors
  00427	48 8d 4c 08 30	 lea	 rcx, QWORD PTR [rax+rcx+48]
  0042c	41 b8 10 00 00
	00		 mov	 r8d, 16
  00432	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  00437	e8 00 00 00 00	 call	 memcmp
  0043c	85 c0		 test	 eax, eax
  0043e	74 02		 je	 SHORT $LN25@DoAutoTest

; 1459 : 			break;

  00440	eb 45		 jmp	 SHORT $LN26@DoAutoTest
$LN25@DoAutoTest:

; 1460 : 
; 1461 : 		DecipherBlock(cipher, tmp, ks_tmp);

  00442	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  00449	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  0044e	8b 4c 24 78	 mov	 ecx, DWORD PTR cipher$29293[rsp]
  00452	e8 00 00 00 00	 call	 DecipherBlock

; 1462 : 		if (memcmp(aes_ecb_vectors[i].plaintext, tmp, 16) != 0)

  00457	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  0045c	48 6b c9 40	 imul	 rcx, 64			; 00000040H
  00460	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:aes_ecb_vectors
  00467	48 8d 4c 08 20	 lea	 rcx, QWORD PTR [rax+rcx+32]
  0046c	41 b8 10 00 00
	00		 mov	 r8d, 16
  00472	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  00477	e8 00 00 00 00	 call	 memcmp
  0047c	85 c0		 test	 eax, eax
  0047e	74 02		 je	 SHORT $LN24@DoAutoTest

; 1463 : 			break;

  00480	eb 05		 jmp	 SHORT $LN26@DoAutoTest
$LN24@DoAutoTest:

; 1464 : 	}

  00482	e9 07 ff ff ff	 jmp	 $LN27@DoAutoTest
$LN26@DoAutoTest:

; 1465 : 	if (i != AES_TEST_COUNT)

  00487	83 7c 24 20 01	 cmp	 DWORD PTR i$[rsp], 1
  0048c	74 08		 je	 SHORT $LN23@DoAutoTest

; 1466 : 		bFailed = TRUE;

  0048e	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR bFailed$[rsp], 1
$LN23@DoAutoTest:

; 1467 : 
; 1468 : 	// AES EncipherBlocks()/DecipherBlocks()
; 1469 : 	{
; 1470 : 		byte testData[1024];
; 1471 : 		uint32 origCrc;
; 1472 : 		size_t i;
; 1473 : 
; 1474 : 		for (i = 0; i < sizeof (testData); ++i)

  00496	48 c7 84 24 80
	04 00 00 00 00
	00 00		 mov	 QWORD PTR i$29299[rsp], 0
  004a2	eb 14		 jmp	 SHORT $LN22@DoAutoTest
$LN21@DoAutoTest:
  004a4	48 8b 84 24 80
	04 00 00	 mov	 rax, QWORD PTR i$29299[rsp]
  004ac	48 83 c0 01	 add	 rax, 1
  004b0	48 89 84 24 80
	04 00 00	 mov	 QWORD PTR i$29299[rsp], rax
$LN22@DoAutoTest:
  004b8	48 81 bc 24 80
	04 00 00 00 04
	00 00		 cmp	 QWORD PTR i$29299[rsp], 1024 ; 00000400H
  004c4	73 19		 jae	 SHORT $LN20@DoAutoTest

; 1475 : 		{
; 1476 : 			testData[i] = (byte) i;

  004c6	48 8b 8c 24 80
	04 00 00	 mov	 rcx, QWORD PTR i$29299[rsp]
  004ce	0f b6 84 24 80
	04 00 00	 movzx	 eax, BYTE PTR i$29299[rsp]
  004d6	88 84 0c 80 00
	00 00		 mov	 BYTE PTR testData$29297[rsp+rcx], al

; 1477 : 		}

  004dd	eb c5		 jmp	 SHORT $LN21@DoAutoTest
$LN20@DoAutoTest:

; 1478 : 
; 1479 : 		origCrc = GetCrc32 (testData, sizeof (testData));

  004df	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  004e4	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR testData$29297[rsp]
  004ec	e8 00 00 00 00	 call	 GetCrc32
  004f1	89 84 24 88 04
	00 00		 mov	 DWORD PTR origCrc$29298[rsp], eax

; 1480 : 
; 1481 : 		CipherInit (AES, testData, ks_tmp);

  004f8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  004ff	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR testData$29297[rsp]
  00507	b9 01 00 00 00	 mov	 ecx, 1
  0050c	e8 00 00 00 00	 call	 CipherInit

; 1482 : 		EncipherBlocks (AES, testData, ks_tmp, sizeof (testData) / CipherGetBlockSize (AES));

  00511	b9 01 00 00 00	 mov	 ecx, 1
  00516	e8 00 00 00 00	 call	 CipherGetBlockSize
  0051b	48 63 c8	 movsxd	 rcx, eax
  0051e	33 d2		 xor	 edx, edx
  00520	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  00525	48 f7 f1	 div	 rcx
  00528	4c 8b c8	 mov	 r9, rax
  0052b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  00532	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR testData$29297[rsp]
  0053a	b9 01 00 00 00	 mov	 ecx, 1
  0053f	e8 00 00 00 00	 call	 EncipherBlocks

; 1483 : 
; 1484 : 		if (GetCrc32 (testData, sizeof (testData)) != 0xb5cd5631)

  00544	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00549	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR testData$29297[rsp]
  00551	e8 00 00 00 00	 call	 GetCrc32
  00556	3d 31 56 cd b5	 cmp	 eax, -1244834255	; b5cd5631H
  0055b	74 08		 je	 SHORT $LN19@DoAutoTest

; 1485 : 			bFailed = TRUE;

  0055d	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR bFailed$[rsp], 1
$LN19@DoAutoTest:

; 1486 : 
; 1487 : 		DecipherBlocks (AES, testData, ks_tmp, sizeof (testData) / CipherGetBlockSize (AES));

  00565	b9 01 00 00 00	 mov	 ecx, 1
  0056a	e8 00 00 00 00	 call	 CipherGetBlockSize
  0056f	48 63 c8	 movsxd	 rcx, eax
  00572	33 d2		 xor	 edx, edx
  00574	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  00579	48 f7 f1	 div	 rcx
  0057c	4c 8b c8	 mov	 r9, rax
  0057f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  00586	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR testData$29297[rsp]
  0058e	b9 01 00 00 00	 mov	 ecx, 1
  00593	e8 00 00 00 00	 call	 DecipherBlocks

; 1488 : 
; 1489 : 		if (origCrc != GetCrc32 (testData, sizeof (testData)))

  00598	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  0059d	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR testData$29297[rsp]
  005a5	e8 00 00 00 00	 call	 GetCrc32
  005aa	39 84 24 88 04
	00 00		 cmp	 DWORD PTR origCrc$29298[rsp], eax
  005b1	74 08		 je	 SHORT $LN18@DoAutoTest

; 1490 : 			bFailed = TRUE;

  005b3	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR bFailed$[rsp], 1
$LN18@DoAutoTest:

; 1491 : 	}
; 1492 : 
; 1493 : 	/* Serpent */
; 1494 : 
; 1495 : 	for (i = 0; i < SERPENT_TEST_COUNT; i++)

  005bb	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  005c3	eb 0b		 jmp	 SHORT $LN17@DoAutoTest
$LN16@DoAutoTest:
  005c5	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  005c9	83 c0 01	 add	 eax, 1
  005cc	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN17@DoAutoTest:
  005d0	83 7c 24 20 01	 cmp	 DWORD PTR i$[rsp], 1
  005d5	0f 8d ef 00 00
	00		 jge	 $LN15@DoAutoTest

; 1496 : 	{			
; 1497 : 		int cipher = SERPENT;

  005db	c7 84 24 8c 04
	00 00 02 00 00
	00		 mov	 DWORD PTR cipher$29309[rsp], 2

; 1498 : 		memcpy(key, serpent_vectors[i].key, 32);

  005e6	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  005eb	48 6b c9 40	 imul	 rcx, 64			; 00000040H
  005ef	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:serpent_vectors
  005f6	48 8d 7c 24 50	 lea	 rdi, QWORD PTR key$[rsp]
  005fb	48 8d 34 08	 lea	 rsi, QWORD PTR [rax+rcx]
  005ff	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00604	f3 a4		 rep movsb

; 1499 : 		memcpy(tmp, serpent_vectors[i].plaintext, 16);

  00606	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  0060b	48 6b c9 40	 imul	 rcx, 64			; 00000040H
  0060f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:serpent_vectors
  00616	48 8d 7c 24 40	 lea	 rdi, QWORD PTR tmp$[rsp]
  0061b	48 8d 74 08 20	 lea	 rsi, QWORD PTR [rax+rcx+32]
  00620	b9 10 00 00 00	 mov	 ecx, 16
  00625	f3 a4		 rep movsb

; 1500 : 		CipherInit(cipher, key, ks_tmp);

  00627	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  0062e	48 8d 54 24 50	 lea	 rdx, QWORD PTR key$[rsp]
  00633	8b 8c 24 8c 04
	00 00		 mov	 ecx, DWORD PTR cipher$29309[rsp]
  0063a	e8 00 00 00 00	 call	 CipherInit

; 1501 : 
; 1502 : 		EncipherBlock(cipher, tmp, ks_tmp);

  0063f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  00646	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  0064b	8b 8c 24 8c 04
	00 00		 mov	 ecx, DWORD PTR cipher$29309[rsp]
  00652	e8 00 00 00 00	 call	 EncipherBlock

; 1503 : 		if (memcmp(serpent_vectors[i].ciphertext, tmp, 16) != 0)

  00657	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  0065c	48 6b c9 40	 imul	 rcx, 64			; 00000040H
  00660	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:serpent_vectors
  00667	48 8d 4c 08 30	 lea	 rcx, QWORD PTR [rax+rcx+48]
  0066c	41 b8 10 00 00
	00		 mov	 r8d, 16
  00672	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  00677	e8 00 00 00 00	 call	 memcmp
  0067c	85 c0		 test	 eax, eax
  0067e	74 02		 je	 SHORT $LN14@DoAutoTest

; 1504 : 			break;

  00680	eb 48		 jmp	 SHORT $LN15@DoAutoTest
$LN14@DoAutoTest:

; 1505 : 
; 1506 : 		DecipherBlock(cipher, tmp, ks_tmp);

  00682	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  00689	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  0068e	8b 8c 24 8c 04
	00 00		 mov	 ecx, DWORD PTR cipher$29309[rsp]
  00695	e8 00 00 00 00	 call	 DecipherBlock

; 1507 : 		if (memcmp(serpent_vectors[i].plaintext, tmp, 16) != 0)

  0069a	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  0069f	48 6b c9 40	 imul	 rcx, 64			; 00000040H
  006a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:serpent_vectors
  006aa	48 8d 4c 08 20	 lea	 rcx, QWORD PTR [rax+rcx+32]
  006af	41 b8 10 00 00
	00		 mov	 r8d, 16
  006b5	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  006ba	e8 00 00 00 00	 call	 memcmp
  006bf	85 c0		 test	 eax, eax
  006c1	74 02		 je	 SHORT $LN13@DoAutoTest

; 1508 : 			break;

  006c3	eb 05		 jmp	 SHORT $LN15@DoAutoTest
$LN13@DoAutoTest:

; 1509 : 	}

  006c5	e9 fb fe ff ff	 jmp	 $LN16@DoAutoTest
$LN15@DoAutoTest:

; 1510 : 	if (i != SERPENT_TEST_COUNT)

  006ca	83 7c 24 20 01	 cmp	 DWORD PTR i$[rsp], 1
  006cf	74 08		 je	 SHORT $LN12@DoAutoTest

; 1511 : 		bFailed = TRUE;

  006d1	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR bFailed$[rsp], 1
$LN12@DoAutoTest:

; 1512 : 
; 1513 : 
; 1514 : 	/* Twofish */
; 1515 : 
; 1516 : 	for (i = 0; i < TWOFISH_TEST_COUNT; i++)

  006d9	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  006e1	eb 0b		 jmp	 SHORT $LN11@DoAutoTest
$LN10@DoAutoTest:
  006e3	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  006e7	83 c0 01	 add	 eax, 1
  006ea	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN11@DoAutoTest:
  006ee	83 7c 24 20 01	 cmp	 DWORD PTR i$[rsp], 1
  006f3	0f 8d ef 00 00
	00		 jge	 $LN9@DoAutoTest

; 1517 : 	{			
; 1518 : 		int cipher = TWOFISH;

  006f9	c7 84 24 90 04
	00 00 03 00 00
	00		 mov	 DWORD PTR cipher$29316[rsp], 3

; 1519 : 		memcpy(key, twofish_vectors[i].key, 32);

  00704	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00709	48 6b c9 40	 imul	 rcx, 64			; 00000040H
  0070d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:twofish_vectors
  00714	48 8d 7c 24 50	 lea	 rdi, QWORD PTR key$[rsp]
  00719	48 8d 34 08	 lea	 rsi, QWORD PTR [rax+rcx]
  0071d	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00722	f3 a4		 rep movsb

; 1520 : 		memcpy(tmp, twofish_vectors[i].plaintext, 16);

  00724	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00729	48 6b c9 40	 imul	 rcx, 64			; 00000040H
  0072d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:twofish_vectors
  00734	48 8d 7c 24 40	 lea	 rdi, QWORD PTR tmp$[rsp]
  00739	48 8d 74 08 20	 lea	 rsi, QWORD PTR [rax+rcx+32]
  0073e	b9 10 00 00 00	 mov	 ecx, 16
  00743	f3 a4		 rep movsb

; 1521 : 		CipherInit(cipher, key, ks_tmp);

  00745	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  0074c	48 8d 54 24 50	 lea	 rdx, QWORD PTR key$[rsp]
  00751	8b 8c 24 90 04
	00 00		 mov	 ecx, DWORD PTR cipher$29316[rsp]
  00758	e8 00 00 00 00	 call	 CipherInit

; 1522 : 
; 1523 : 		EncipherBlock(cipher, tmp, ks_tmp);

  0075d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  00764	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  00769	8b 8c 24 90 04
	00 00		 mov	 ecx, DWORD PTR cipher$29316[rsp]
  00770	e8 00 00 00 00	 call	 EncipherBlock

; 1524 : 		if (memcmp(twofish_vectors[i].ciphertext, tmp, 16) != 0)

  00775	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  0077a	48 6b c9 40	 imul	 rcx, 64			; 00000040H
  0077e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:twofish_vectors
  00785	48 8d 4c 08 30	 lea	 rcx, QWORD PTR [rax+rcx+48]
  0078a	41 b8 10 00 00
	00		 mov	 r8d, 16
  00790	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  00795	e8 00 00 00 00	 call	 memcmp
  0079a	85 c0		 test	 eax, eax
  0079c	74 02		 je	 SHORT $LN8@DoAutoTest

; 1525 : 			break;

  0079e	eb 48		 jmp	 SHORT $LN9@DoAutoTest
$LN8@DoAutoTest:

; 1526 : 
; 1527 : 		DecipherBlock(cipher, tmp, ks_tmp);

  007a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  007a7	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  007ac	8b 8c 24 90 04
	00 00		 mov	 ecx, DWORD PTR cipher$29316[rsp]
  007b3	e8 00 00 00 00	 call	 DecipherBlock

; 1528 : 		if (memcmp(twofish_vectors[i].plaintext, tmp, 16) != 0)

  007b8	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  007bd	48 6b c9 40	 imul	 rcx, 64			; 00000040H
  007c1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:twofish_vectors
  007c8	48 8d 4c 08 20	 lea	 rcx, QWORD PTR [rax+rcx+32]
  007cd	41 b8 10 00 00
	00		 mov	 r8d, 16
  007d3	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  007d8	e8 00 00 00 00	 call	 memcmp
  007dd	85 c0		 test	 eax, eax
  007df	74 02		 je	 SHORT $LN7@DoAutoTest

; 1529 : 			break;

  007e1	eb 05		 jmp	 SHORT $LN9@DoAutoTest
$LN7@DoAutoTest:

; 1530 : 	}

  007e3	e9 fb fe ff ff	 jmp	 $LN10@DoAutoTest
$LN9@DoAutoTest:

; 1531 : 	if (i != TWOFISH_TEST_COUNT)

  007e8	83 7c 24 20 01	 cmp	 DWORD PTR i$[rsp], 1
  007ed	74 08		 je	 SHORT $LN6@DoAutoTest

; 1532 : 		bFailed = TRUE;

  007ef	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR bFailed$[rsp], 1
$LN6@DoAutoTest:

; 1533 : 
; 1534 : 	
; 1535 : 	/* PKCS #5 and HMACs */
; 1536 : 	if (!test_pkcs5 ())

  007f7	e8 00 00 00 00	 call	 test_pkcs5
  007fc	85 c0		 test	 eax, eax
  007fe	75 08		 jne	 SHORT $LN5@DoAutoTest

; 1537 : 		bFailed = TRUE;

  00800	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR bFailed$[rsp], 1
$LN5@DoAutoTest:

; 1538 : 
; 1539 : 	/* CRC-32 */
; 1540 : 	if (!crc32_selftests ())

  00808	e8 00 00 00 00	 call	 crc32_selftests
  0080d	85 c0		 test	 eax, eax
  0080f	75 08		 jne	 SHORT $LN4@DoAutoTest

; 1541 : 		bFailed = TRUE;

  00811	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR bFailed$[rsp], 1
$LN4@DoAutoTest:

; 1542 : 
; 1543 : 	/* GF multiplicator */
; 1544 : #if 0
; 1545 : 	if (!GfMulSelfTest ())
; 1546 : 		bFailed = TRUE;
; 1547 : #endif
; 1548 : 
; 1549 : 	/* XTS-AES */
; 1550 : 	if (!XTSAesTest (ci))

  00819	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ci$[rsp]
  0081e	e8 00 00 00 00	 call	 XTSAesTest
  00823	85 c0		 test	 eax, eax
  00825	75 08		 jne	 SHORT $LN3@DoAutoTest

; 1551 : 		bFailed = TRUE;

  00827	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR bFailed$[rsp], 1
$LN3@DoAutoTest:

; 1552 : 
; 1553 : 	/* LRW-AES (deprecated/legacy) */
; 1554 : 	if (!LRWAesTest (ci))

  0082f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ci$[rsp]
  00834	e8 00 00 00 00	 call	 LRWAesTest
  00839	85 c0		 test	 eax, eax
  0083b	75 08		 jne	 SHORT $LN2@DoAutoTest

; 1555 : 		bFailed = TRUE;

  0083d	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR bFailed$[rsp], 1
$LN2@DoAutoTest:

; 1556 : 
; 1557 : 	/* Sector and buffer related algorithms */
; 1558 : 	if (!TestSectorBufEncryption (ci))

  00845	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ci$[rsp]
  0084a	e8 00 00 00 00	 call	 TestSectorBufEncryption
  0084f	85 c0		 test	 eax, eax
  00851	75 08		 jne	 SHORT $LN1@DoAutoTest

; 1559 : 		bFailed = TRUE;

  00853	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR bFailed$[rsp], 1
$LN1@DoAutoTest:

; 1560 : 	
; 1561 : 	crypto_close (ci);

  0085b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ci$[rsp]
  00860	e8 00 00 00 00	 call	 crypto_close

; 1562 : 	return !bFailed;

  00865	83 7c 24 30 00	 cmp	 DWORD PTR bFailed$[rsp], 0
  0086a	75 0d		 jne	 SHORT $LN48@DoAutoTest
  0086c	c7 84 24 94 04
	00 00 01 00 00
	00		 mov	 DWORD PTR tv481[rsp], 1
  00877	eb 0b		 jmp	 SHORT $LN49@DoAutoTest
$LN48@DoAutoTest:
  00879	c7 84 24 94 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv481[rsp], 0
$LN49@DoAutoTest:
  00884	8b 84 24 94 04
	00 00		 mov	 eax, DWORD PTR tv481[rsp]
$LN46@DoAutoTest:

; 1563 : }

  0088b	48 8b 8c 24 98
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00893	48 33 cc	 xor	 rcx, rsp
  00896	e8 00 00 00 00	 call	 __security_check_cookie
  0089b	48 81 c4 a8 04
	00 00		 add	 rsp, 1192		; 000004a8H
  008a2	5f		 pop	 rdi
  008a3	5e		 pop	 rsi
  008a4	c3		 ret	 0
DoAutoTestAlgorithms ENDP
PUBLIC	AutoTestAlgorithms
;	COMDAT pdata
pdata	SEGMENT
$pdata$AutoTestAlgorithms DD imagerel $LN5
	DD	imagerel $LN5+90
	DD	imagerel $unwind$AutoTestAlgorithms
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AutoTestAlgorithms DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT AutoTestAlgorithms
_TEXT	SEGMENT
hwEncryptionEnabled$ = 32
result$ = 36
AutoTestAlgorithms PROC					; COMDAT

; 1567 : {

$LN5:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1568 : 	BOOL result = TRUE;

  00004	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1

; 1569 : 	BOOL hwEncryptionEnabled = IsHwEncryptionEnabled();

  0000c	e8 00 00 00 00	 call	 IsHwEncryptionEnabled
  00011	89 44 24 20	 mov	 DWORD PTR hwEncryptionEnabled$[rsp], eax

; 1570 : 
; 1571 : 	EnableHwEncryption (FALSE);

  00015	33 c9		 xor	 ecx, ecx
  00017	e8 00 00 00 00	 call	 EnableHwEncryption

; 1572 : 
; 1573 : 	if (!DoAutoTestAlgorithms())

  0001c	e8 00 00 00 00	 call	 DoAutoTestAlgorithms
  00021	85 c0		 test	 eax, eax
  00023	75 08		 jne	 SHORT $LN2@AutoTestAl

; 1574 : 		result = FALSE;

  00025	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0
$LN2@AutoTestAl:

; 1575 : 
; 1576 : 	EnableHwEncryption (TRUE);

  0002d	b9 01 00 00 00	 mov	 ecx, 1
  00032	e8 00 00 00 00	 call	 EnableHwEncryption

; 1577 : 
; 1578 : 	if (!DoAutoTestAlgorithms())

  00037	e8 00 00 00 00	 call	 DoAutoTestAlgorithms
  0003c	85 c0		 test	 eax, eax
  0003e	75 08		 jne	 SHORT $LN1@AutoTestAl

; 1579 : 		result = FALSE;

  00040	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0
$LN1@AutoTestAl:

; 1580 : 
; 1581 : 	EnableHwEncryption (hwEncryptionEnabled);

  00048	8b 4c 24 20	 mov	 ecx, DWORD PTR hwEncryptionEnabled$[rsp]
  0004c	e8 00 00 00 00	 call	 EnableHwEncryption

; 1582 : 	return result;

  00051	8b 44 24 24	 mov	 eax, DWORD PTR result$[rsp]

; 1583 : }

  00055	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00059	c3		 ret	 0
AutoTestAlgorithms ENDP
END
