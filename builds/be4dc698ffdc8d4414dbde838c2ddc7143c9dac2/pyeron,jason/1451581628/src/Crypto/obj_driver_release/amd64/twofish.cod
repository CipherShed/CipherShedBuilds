; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

qt_gen	DD	01H DUP (?)
mt_gen	DD	01H DUP (?)
tab_5b	DB	00H
	DB	05aH
	DB	0b4H
	DB	0eeH
tab_ef	DB	00H
	DB	0eeH
	DB	0b4H
	DB	05aH
ror4	DB	00H
	DB	08H
	DB	01H
	DB	09H
	DB	02H
	DB	0aH
	DB	03H
	DB	0bH
	DB	04H
	DB	0cH
	DB	05H
	DB	0dH
	DB	06H
	DB	0eH
	DB	07H
	DB	0fH
ashx	DB	00H
	DB	09H
	DB	02H
	DB	0bH
	DB	04H
	DB	0dH
	DB	06H
	DB	0fH
	DB	08H
	DB	01H
	DB	0aH
	DB	03H
	DB	0cH
	DB	05H
	DB	0eH
	DB	07H
qt0	DB	08H
	DB	01H
	DB	07H
	DB	0dH
	DB	06H
	DB	0fH
	DB	03H
	DB	02H
	DB	00H
	DB	0bH
	DB	05H
	DB	09H
	DB	0eH
	DB	0cH
	DB	0aH
	DB	04H
	DB	02H
	DB	08H
	DB	0bH
	DB	0dH
	DB	0fH
	DB	07H
	DB	06H
	DB	0eH
	DB	03H
	DB	01H
	DB	09H
	DB	04H
	DB	00H
	DB	0aH
	DB	0cH
	DB	05H
qt1	DB	0eH
	DB	0cH
	DB	0bH
	DB	08H
	DB	01H
	DB	02H
	DB	03H
	DB	05H
	DB	0fH
	DB	04H
	DB	0aH
	DB	06H
	DB	07H
	DB	00H
	DB	09H
	DB	0dH
	DB	01H
	DB	0eH
	DB	02H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	07H
	DB	06H
	DB	0dH
	DB	0aH
	DB	05H
	DB	0fH
	DB	09H
	DB	00H
	DB	08H
qt2	DB	0bH
	DB	0aH
	DB	05H
	DB	0eH
	DB	06H
	DB	0dH
	DB	09H
	DB	00H
	DB	0cH
	DB	08H
	DB	0fH
	DB	03H
	DB	02H
	DB	04H
	DB	07H
	DB	01H
	DB	04H
	DB	0cH
	DB	07H
	DB	05H
	DB	01H
	DB	06H
	DB	09H
	DB	0aH
	DB	00H
	DB	0eH
	DB	0dH
	DB	08H
	DB	02H
	DB	0bH
	DB	03H
	DB	0fH
qt3	DB	0dH
	DB	07H
	DB	0fH
	DB	04H
	DB	01H
	DB	02H
	DB	06H
	DB	0eH
	DB	09H
	DB	0bH
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	0cH
	DB	0aH
	DB	0bH
	DB	09H
	DB	05H
	DB	01H
	DB	0cH
	DB	03H
	DB	0dH
	DB	0eH
	DB	06H
	DB	04H
	DB	07H
	DB	0fH
	DB	02H
	DB	00H
	DB	08H
	DB	0aH
PUBLIC	twofish_decrypt
;	COMDAT pdata
; File c:\users\public\desktop\projects\ciphershed\src\crypto\twofish.c
pdata	SEGMENT
$pdata$twofish_decrypt DD imagerel $LN3
	DD	imagerel $LN3+3129
	DD	imagerel $unwind$twofish_decrypt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$twofish_decrypt DD 0a1801H
	DD	086418H
	DD	075418H
	DD	063418H
	DD	0d0141218H
	DD	07010c012H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT twofish_decrypt
_TEXT	SEGMENT
blk$ = 0
instance$ = 48
in_blk$ = 56
out_blk$ = 64
twofish_decrypt PROC					; COMDAT

; 497  : {   u4byte  t0, t1, blk[4];

$LN3:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 10	 sub	 rsp, 16

; 498  : 
; 499  : 	u4byte *l_key = instance->l_key;
; 500  : 	u4byte *mk_tab = instance->mk_tab;
; 501  : 
; 502  :     blk[0] = LE32(in_blk[0]) ^ l_key[4];
; 503  :     blk[1] = LE32(in_blk[1]) ^ l_key[5];

  00018	8b 59 14	 mov	 ebx, DWORD PTR [rcx+20]
  0001b	8b 69 10	 mov	 ebp, DWORD PTR [rcx+16]

; 504  :     blk[2] = LE32(in_blk[2]) ^ l_key[6];

  0001e	8b 71 18	 mov	 esi, DWORD PTR [rcx+24]
  00021	33 5a 04	 xor	 ebx, DWORD PTR [rdx+4]
  00024	33 2a		 xor	 ebp, DWORD PTR [rdx]

; 505  :     blk[3] = LE32(in_blk[3]) ^ l_key[7];

  00026	44 8b 51 1c	 mov	 r10d, DWORD PTR [rcx+28]
  0002a	33 72 08	 xor	 esi, DWORD PTR [rdx+8]
  0002d	44 33 52 0c	 xor	 r10d, DWORD PTR [rdx+12]
  00031	4c 8b e1	 mov	 r12, rcx
  00034	4d 8b e8	 mov	 r13, r8

; 506  : 
; 507  :     i_rnd(7); i_rnd(6); i_rnd(5); i_rnd(4);

  00037	8b c3		 mov	 eax, ebx
  00039	89 2c 24	 mov	 DWORD PTR blk$[rsp], ebp
  0003c	c1 e8 10	 shr	 eax, 16
  0003f	89 5c 24 04	 mov	 DWORD PTR blk$[rsp+4], ebx
  00043	0f b6 d0	 movzx	 edx, al
  00046	8b c3		 mov	 eax, ebx
  00048	c1 e8 08	 shr	 eax, 8
  0004b	48 03 d2	 add	 rdx, rdx
  0004e	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  00056	0f b6 c8	 movzx	 ecx, al
  00059	8b c3		 mov	 eax, ebx
  0005b	c1 e8 18	 shr	 eax, 24
  0005e	48 03 c9	 add	 rcx, rcx
  00061	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  00069	0f b6 c8	 movzx	 ecx, al
  0006c	0f b6 c3	 movzx	 eax, bl
  0006f	48 03 c0	 add	 rax, rax
  00072	48 03 c9	 add	 rcx, rcx
  00075	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  0007d	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  00085	8b c5		 mov	 eax, ebp
  00087	c1 e8 18	 shr	 eax, 24
  0008a	0f b6 d0	 movzx	 edx, al
  0008d	8b c5		 mov	 eax, ebp
  0008f	c1 e8 10	 shr	 eax, 16
  00092	48 03 d2	 add	 rdx, rdx
  00095	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  0009d	0f b6 c8	 movzx	 ecx, al
  000a0	8b c5		 mov	 eax, ebp
  000a2	c1 e8 08	 shr	 eax, 8
  000a5	48 03 c9	 add	 rcx, rcx
  000a8	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  000b0	0f b6 c8	 movzx	 ecx, al
  000b3	40 0f b6 c5	 movzx	 eax, bpl
  000b7	48 03 c0	 add	 rax, rax
  000ba	48 03 c9	 add	 rcx, rcx
  000bd	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  000c5	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  000cd	41 8b 84 24 98
	00 00 00	 mov	 eax, DWORD PTR [r12+152]
  000d5	d1 c6		 rol	 esi, 1
  000d7	41 03 c0	 add	 eax, r8d
  000da	41 03 c1	 add	 eax, r9d
  000dd	33 f0		 xor	 esi, eax
  000df	41 8b 84 24 9c
	00 00 00	 mov	 eax, DWORD PTR [r12+156]
  000e7	46 8d 1c 48	 lea	 r11d, DWORD PTR [rax+r9*2]
  000eb	89 74 24 08	 mov	 DWORD PTR blk$[rsp+8], esi
  000ef	45 03 d8	 add	 r11d, r8d
  000f2	45 33 da	 xor	 r11d, r10d
  000f5	41 d1 cb	 ror	 r11d, 1
  000f8	41 8b c3	 mov	 eax, r11d
  000fb	44 89 5c 24 0c	 mov	 DWORD PTR blk$[rsp+12], r11d
  00100	c1 e8 10	 shr	 eax, 16
  00103	0f b6 d0	 movzx	 edx, al
  00106	41 8b c3	 mov	 eax, r11d
  00109	c1 e8 08	 shr	 eax, 8
  0010c	48 03 d2	 add	 rdx, rdx
  0010f	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  00117	0f b6 c8	 movzx	 ecx, al
  0011a	41 8b c3	 mov	 eax, r11d
  0011d	c1 e8 18	 shr	 eax, 24
  00120	48 03 c9	 add	 rcx, rcx
  00123	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  0012b	0f b6 c8	 movzx	 ecx, al
  0012e	41 0f b6 c3	 movzx	 eax, r11b
  00132	48 03 c0	 add	 rax, rax
  00135	48 03 c9	 add	 rcx, rcx
  00138	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  00140	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  00148	8b c6		 mov	 eax, esi
  0014a	c1 e8 18	 shr	 eax, 24
  0014d	0f b6 d0	 movzx	 edx, al
  00150	48 03 d2	 add	 rdx, rdx
  00153	8b c6		 mov	 eax, esi
  00155	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  0015d	c1 e8 10	 shr	 eax, 16
  00160	0f b6 c8	 movzx	 ecx, al
  00163	8b c6		 mov	 eax, esi
  00165	c1 e8 08	 shr	 eax, 8
  00168	48 03 c9	 add	 rcx, rcx
  0016b	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  00173	0f b6 c8	 movzx	 ecx, al
  00176	40 0f b6 c6	 movzx	 eax, sil
  0017a	48 03 c0	 add	 rax, rax
  0017d	48 03 c9	 add	 rcx, rcx
  00180	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  00188	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  00190	41 8b 84 24 90
	00 00 00	 mov	 eax, DWORD PTR [r12+144]
  00198	d1 c5		 rol	 ebp, 1
  0019a	41 03 c0	 add	 eax, r8d
  0019d	41 03 c1	 add	 eax, r9d
  001a0	33 e8		 xor	 ebp, eax
  001a2	41 8b 84 24 94
	00 00 00	 mov	 eax, DWORD PTR [r12+148]
  001aa	46 8d 14 48	 lea	 r10d, DWORD PTR [rax+r9*2]
  001ae	89 2c 24	 mov	 DWORD PTR blk$[rsp], ebp
  001b1	45 03 d0	 add	 r10d, r8d
  001b4	44 33 d3	 xor	 r10d, ebx
  001b7	41 d1 ca	 ror	 r10d, 1
  001ba	41 8b c2	 mov	 eax, r10d
  001bd	44 89 54 24 04	 mov	 DWORD PTR blk$[rsp+4], r10d
  001c2	c1 e8 10	 shr	 eax, 16
  001c5	0f b6 d0	 movzx	 edx, al
  001c8	41 8b c2	 mov	 eax, r10d
  001cb	c1 e8 08	 shr	 eax, 8
  001ce	48 03 d2	 add	 rdx, rdx
  001d1	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  001d9	0f b6 c8	 movzx	 ecx, al
  001dc	41 8b c2	 mov	 eax, r10d
  001df	c1 e8 18	 shr	 eax, 24
  001e2	48 03 c9	 add	 rcx, rcx
  001e5	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  001ed	0f b6 c8	 movzx	 ecx, al
  001f0	41 0f b6 c2	 movzx	 eax, r10b
  001f4	48 03 c0	 add	 rax, rax
  001f7	48 03 c9	 add	 rcx, rcx
  001fa	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  00202	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  0020a	8b c5		 mov	 eax, ebp
  0020c	c1 e8 18	 shr	 eax, 24
  0020f	0f b6 d0	 movzx	 edx, al
  00212	8b c5		 mov	 eax, ebp
  00214	c1 e8 10	 shr	 eax, 16
  00217	48 03 d2	 add	 rdx, rdx
  0021a	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  00222	0f b6 c8	 movzx	 ecx, al
  00225	8b c5		 mov	 eax, ebp
  00227	c1 e8 08	 shr	 eax, 8
  0022a	48 03 c9	 add	 rcx, rcx
  0022d	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  00235	0f b6 c8	 movzx	 ecx, al
  00238	40 0f b6 c5	 movzx	 eax, bpl
  0023c	48 03 c0	 add	 rax, rax
  0023f	48 03 c9	 add	 rcx, rcx
  00242	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  0024a	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  00252	41 8b 84 24 88
	00 00 00	 mov	 eax, DWORD PTR [r12+136]
  0025a	d1 c6		 rol	 esi, 1
  0025c	41 03 c0	 add	 eax, r8d
  0025f	41 03 c1	 add	 eax, r9d
  00262	33 f0		 xor	 esi, eax
  00264	41 8b 84 24 8c
	00 00 00	 mov	 eax, DWORD PTR [r12+140]
  0026c	42 8d 1c 48	 lea	 ebx, DWORD PTR [rax+r9*2]
  00270	89 74 24 08	 mov	 DWORD PTR blk$[rsp+8], esi
  00274	41 03 d8	 add	 ebx, r8d
  00277	41 33 db	 xor	 ebx, r11d
  0027a	d1 cb		 ror	 ebx, 1
  0027c	8b c3		 mov	 eax, ebx
  0027e	89 5c 24 0c	 mov	 DWORD PTR blk$[rsp+12], ebx
  00282	c1 e8 10	 shr	 eax, 16
  00285	0f b6 d0	 movzx	 edx, al
  00288	8b c3		 mov	 eax, ebx
  0028a	48 03 d2	 add	 rdx, rdx
  0028d	c1 e8 08	 shr	 eax, 8
  00290	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  00298	0f b6 c8	 movzx	 ecx, al
  0029b	8b c3		 mov	 eax, ebx
  0029d	c1 e8 18	 shr	 eax, 24
  002a0	48 03 c9	 add	 rcx, rcx
  002a3	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  002ab	0f b6 c8	 movzx	 ecx, al
  002ae	0f b6 c3	 movzx	 eax, bl
  002b1	48 03 c0	 add	 rax, rax
  002b4	48 03 c9	 add	 rcx, rcx
  002b7	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  002bf	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  002c7	8b c6		 mov	 eax, esi
  002c9	c1 e8 18	 shr	 eax, 24
  002cc	0f b6 d0	 movzx	 edx, al
  002cf	8b c6		 mov	 eax, esi
  002d1	c1 e8 10	 shr	 eax, 16
  002d4	48 03 d2	 add	 rdx, rdx
  002d7	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  002df	0f b6 c8	 movzx	 ecx, al
  002e2	8b c6		 mov	 eax, esi
  002e4	c1 e8 08	 shr	 eax, 8
  002e7	48 03 c9	 add	 rcx, rcx
  002ea	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  002f2	0f b6 c8	 movzx	 ecx, al
  002f5	40 0f b6 c6	 movzx	 eax, sil
  002f9	48 03 c0	 add	 rax, rax
  002fc	48 03 c9	 add	 rcx, rcx
  002ff	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  00307	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  0030f	41 8b 84 24 80
	00 00 00	 mov	 eax, DWORD PTR [r12+128]
  00317	d1 c5		 rol	 ebp, 1
  00319	41 03 c0	 add	 eax, r8d
  0031c	41 03 c1	 add	 eax, r9d
  0031f	33 e8		 xor	 ebp, eax
  00321	41 8b 84 24 84
	00 00 00	 mov	 eax, DWORD PTR [r12+132]
  00329	46 8d 1c 48	 lea	 r11d, DWORD PTR [rax+r9*2]
  0032d	89 2c 24	 mov	 DWORD PTR blk$[rsp], ebp
  00330	45 03 d8	 add	 r11d, r8d
  00333	45 33 da	 xor	 r11d, r10d
  00336	41 d1 cb	 ror	 r11d, 1
  00339	41 8b c3	 mov	 eax, r11d
  0033c	44 89 5c 24 04	 mov	 DWORD PTR blk$[rsp+4], r11d
  00341	c1 e8 10	 shr	 eax, 16
  00344	0f b6 d0	 movzx	 edx, al
  00347	41 8b c3	 mov	 eax, r11d
  0034a	c1 e8 08	 shr	 eax, 8
  0034d	48 03 d2	 add	 rdx, rdx
  00350	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  00358	0f b6 c8	 movzx	 ecx, al
  0035b	41 8b c3	 mov	 eax, r11d
  0035e	c1 e8 18	 shr	 eax, 24
  00361	48 03 c9	 add	 rcx, rcx
  00364	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  0036c	0f b6 c8	 movzx	 ecx, al
  0036f	41 0f b6 c3	 movzx	 eax, r11b
  00373	48 03 c0	 add	 rax, rax
  00376	48 03 c9	 add	 rcx, rcx
  00379	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  00381	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  00389	8b c5		 mov	 eax, ebp
  0038b	c1 e8 18	 shr	 eax, 24
  0038e	0f b6 d0	 movzx	 edx, al
  00391	8b c5		 mov	 eax, ebp
  00393	c1 e8 10	 shr	 eax, 16
  00396	48 03 d2	 add	 rdx, rdx
  00399	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  003a1	0f b6 c8	 movzx	 ecx, al
  003a4	8b c5		 mov	 eax, ebp
  003a6	c1 e8 08	 shr	 eax, 8
  003a9	48 03 c9	 add	 rcx, rcx
  003ac	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  003b4	0f b6 c8	 movzx	 ecx, al
  003b7	40 0f b6 c5	 movzx	 eax, bpl
  003bb	48 03 c0	 add	 rax, rax
  003be	48 03 c9	 add	 rcx, rcx
  003c1	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  003c9	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  003d1	41 8b 44 24 78	 mov	 eax, DWORD PTR [r12+120]
  003d6	d1 c6		 rol	 esi, 1
  003d8	41 03 c0	 add	 eax, r8d
  003db	41 03 c1	 add	 eax, r9d
  003de	33 f0		 xor	 esi, eax
  003e0	41 8b 44 24 7c	 mov	 eax, DWORD PTR [r12+124]
  003e5	46 8d 14 48	 lea	 r10d, DWORD PTR [rax+r9*2]
  003e9	89 74 24 08	 mov	 DWORD PTR blk$[rsp+8], esi
  003ed	45 03 d0	 add	 r10d, r8d
  003f0	44 33 d3	 xor	 r10d, ebx
  003f3	41 d1 ca	 ror	 r10d, 1
  003f6	41 8b c2	 mov	 eax, r10d
  003f9	44 89 54 24 0c	 mov	 DWORD PTR blk$[rsp+12], r10d
  003fe	c1 e8 10	 shr	 eax, 16
  00401	0f b6 d0	 movzx	 edx, al
  00404	41 8b c2	 mov	 eax, r10d
  00407	c1 e8 08	 shr	 eax, 8
  0040a	48 03 d2	 add	 rdx, rdx
  0040d	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  00415	0f b6 c8	 movzx	 ecx, al
  00418	41 8b c2	 mov	 eax, r10d
  0041b	c1 e8 18	 shr	 eax, 24
  0041e	48 03 c9	 add	 rcx, rcx
  00421	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  00429	0f b6 c8	 movzx	 ecx, al
  0042c	41 0f b6 c2	 movzx	 eax, r10b
  00430	48 03 c0	 add	 rax, rax
  00433	48 03 c9	 add	 rcx, rcx
  00436	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  0043e	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  00446	8b c6		 mov	 eax, esi
  00448	c1 e8 18	 shr	 eax, 24
  0044b	0f b6 d0	 movzx	 edx, al
  0044e	8b c6		 mov	 eax, esi
  00450	c1 e8 10	 shr	 eax, 16
  00453	48 03 d2	 add	 rdx, rdx
  00456	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  0045e	0f b6 c8	 movzx	 ecx, al
  00461	8b c6		 mov	 eax, esi
  00463	c1 e8 08	 shr	 eax, 8
  00466	48 03 c9	 add	 rcx, rcx
  00469	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  00471	0f b6 c8	 movzx	 ecx, al
  00474	40 0f b6 c6	 movzx	 eax, sil
  00478	48 03 c0	 add	 rax, rax
  0047b	48 03 c9	 add	 rcx, rcx
  0047e	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  00486	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  0048e	41 8b 44 24 70	 mov	 eax, DWORD PTR [r12+112]
  00493	d1 c5		 rol	 ebp, 1
  00495	41 03 c0	 add	 eax, r8d
  00498	41 03 c1	 add	 eax, r9d
  0049b	33 e8		 xor	 ebp, eax
  0049d	41 8b 44 24 74	 mov	 eax, DWORD PTR [r12+116]
  004a2	42 8d 1c 48	 lea	 ebx, DWORD PTR [rax+r9*2]
  004a6	89 2c 24	 mov	 DWORD PTR blk$[rsp], ebp
  004a9	41 03 d8	 add	 ebx, r8d
  004ac	41 33 db	 xor	 ebx, r11d
  004af	d1 cb		 ror	 ebx, 1
  004b1	8b c3		 mov	 eax, ebx
  004b3	89 5c 24 04	 mov	 DWORD PTR blk$[rsp+4], ebx
  004b7	c1 e8 10	 shr	 eax, 16
  004ba	0f b6 d0	 movzx	 edx, al
  004bd	8b c3		 mov	 eax, ebx
  004bf	c1 e8 08	 shr	 eax, 8
  004c2	48 03 d2	 add	 rdx, rdx
  004c5	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  004cd	0f b6 c8	 movzx	 ecx, al
  004d0	8b c3		 mov	 eax, ebx
  004d2	c1 e8 18	 shr	 eax, 24
  004d5	48 03 c9	 add	 rcx, rcx
  004d8	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  004e0	0f b6 c8	 movzx	 ecx, al
  004e3	0f b6 c3	 movzx	 eax, bl
  004e6	48 03 c0	 add	 rax, rax
  004e9	48 03 c9	 add	 rcx, rcx
  004ec	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  004f4	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  004fc	8b c5		 mov	 eax, ebp
  004fe	c1 e8 18	 shr	 eax, 24
  00501	0f b6 d0	 movzx	 edx, al
  00504	8b c5		 mov	 eax, ebp
  00506	48 03 d2	 add	 rdx, rdx
  00509	c1 e8 10	 shr	 eax, 16
  0050c	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  00514	0f b6 c8	 movzx	 ecx, al
  00517	8b c5		 mov	 eax, ebp
  00519	c1 e8 08	 shr	 eax, 8
  0051c	48 03 c9	 add	 rcx, rcx
  0051f	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  00527	0f b6 c8	 movzx	 ecx, al
  0052a	40 0f b6 c5	 movzx	 eax, bpl
  0052e	48 03 c0	 add	 rax, rax
  00531	48 03 c9	 add	 rcx, rcx
  00534	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  0053c	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  00544	41 8b 44 24 68	 mov	 eax, DWORD PTR [r12+104]
  00549	d1 c6		 rol	 esi, 1
  0054b	41 03 c0	 add	 eax, r8d
  0054e	41 03 c1	 add	 eax, r9d
  00551	33 f0		 xor	 esi, eax
  00553	41 8b 44 24 6c	 mov	 eax, DWORD PTR [r12+108]
  00558	46 8d 1c 48	 lea	 r11d, DWORD PTR [rax+r9*2]
  0055c	89 74 24 08	 mov	 DWORD PTR blk$[rsp+8], esi
  00560	45 03 d8	 add	 r11d, r8d
  00563	45 33 da	 xor	 r11d, r10d
  00566	41 d1 cb	 ror	 r11d, 1
  00569	41 8b c3	 mov	 eax, r11d
  0056c	44 89 5c 24 0c	 mov	 DWORD PTR blk$[rsp+12], r11d
  00571	c1 e8 10	 shr	 eax, 16
  00574	0f b6 d0	 movzx	 edx, al
  00577	41 8b c3	 mov	 eax, r11d
  0057a	c1 e8 08	 shr	 eax, 8
  0057d	48 03 d2	 add	 rdx, rdx
  00580	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  00588	0f b6 c8	 movzx	 ecx, al
  0058b	41 8b c3	 mov	 eax, r11d
  0058e	c1 e8 18	 shr	 eax, 24
  00591	48 03 c9	 add	 rcx, rcx
  00594	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  0059c	0f b6 c8	 movzx	 ecx, al
  0059f	41 0f b6 c3	 movzx	 eax, r11b
  005a3	48 03 c0	 add	 rax, rax
  005a6	48 03 c9	 add	 rcx, rcx
  005a9	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  005b1	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  005b9	8b c6		 mov	 eax, esi
  005bb	c1 e8 18	 shr	 eax, 24
  005be	0f b6 d0	 movzx	 edx, al
  005c1	8b c6		 mov	 eax, esi
  005c3	c1 e8 10	 shr	 eax, 16
  005c6	48 03 d2	 add	 rdx, rdx
  005c9	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  005d1	0f b6 c8	 movzx	 ecx, al
  005d4	8b c6		 mov	 eax, esi
  005d6	c1 e8 08	 shr	 eax, 8
  005d9	48 03 c9	 add	 rcx, rcx
  005dc	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  005e4	0f b6 c8	 movzx	 ecx, al
  005e7	40 0f b6 c6	 movzx	 eax, sil
  005eb	48 03 c0	 add	 rax, rax
  005ee	48 03 c9	 add	 rcx, rcx
  005f1	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  005f9	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  00601	41 8b 44 24 60	 mov	 eax, DWORD PTR [r12+96]
  00606	d1 c5		 rol	 ebp, 1
  00608	41 03 c0	 add	 eax, r8d
  0060b	41 03 c1	 add	 eax, r9d
  0060e	33 e8		 xor	 ebp, eax
  00610	41 8b 44 24 64	 mov	 eax, DWORD PTR [r12+100]
  00615	46 8d 14 48	 lea	 r10d, DWORD PTR [rax+r9*2]
  00619	89 2c 24	 mov	 DWORD PTR blk$[rsp], ebp
  0061c	45 03 d0	 add	 r10d, r8d
  0061f	44 33 d3	 xor	 r10d, ebx
  00622	41 d1 ca	 ror	 r10d, 1

; 508  :     i_rnd(3); i_rnd(2); i_rnd(1); i_rnd(0);

  00625	41 8b c2	 mov	 eax, r10d
  00628	44 89 54 24 04	 mov	 DWORD PTR blk$[rsp+4], r10d
  0062d	c1 e8 10	 shr	 eax, 16
  00630	0f b6 d0	 movzx	 edx, al
  00633	41 8b c2	 mov	 eax, r10d
  00636	c1 e8 08	 shr	 eax, 8
  00639	48 03 d2	 add	 rdx, rdx
  0063c	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  00644	0f b6 c8	 movzx	 ecx, al
  00647	48 03 c9	 add	 rcx, rcx
  0064a	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  00652	41 8b c2	 mov	 eax, r10d
  00655	c1 e8 18	 shr	 eax, 24
  00658	0f b6 c8	 movzx	 ecx, al
  0065b	41 0f b6 c2	 movzx	 eax, r10b
  0065f	48 03 c0	 add	 rax, rax
  00662	48 03 c9	 add	 rcx, rcx
  00665	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  0066d	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  00675	8b c5		 mov	 eax, ebp
  00677	c1 e8 18	 shr	 eax, 24
  0067a	0f b6 d0	 movzx	 edx, al
  0067d	8b c5		 mov	 eax, ebp
  0067f	c1 e8 10	 shr	 eax, 16
  00682	48 03 d2	 add	 rdx, rdx
  00685	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  0068d	0f b6 c8	 movzx	 ecx, al
  00690	8b c5		 mov	 eax, ebp
  00692	c1 e8 08	 shr	 eax, 8
  00695	48 03 c9	 add	 rcx, rcx
  00698	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  006a0	0f b6 c8	 movzx	 ecx, al
  006a3	40 0f b6 c5	 movzx	 eax, bpl
  006a7	48 03 c0	 add	 rax, rax
  006aa	48 03 c9	 add	 rcx, rcx
  006ad	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  006b5	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  006bd	41 8b 44 24 58	 mov	 eax, DWORD PTR [r12+88]
  006c2	d1 c6		 rol	 esi, 1
  006c4	41 03 c0	 add	 eax, r8d
  006c7	41 03 c1	 add	 eax, r9d
  006ca	33 f0		 xor	 esi, eax
  006cc	41 8b 44 24 5c	 mov	 eax, DWORD PTR [r12+92]
  006d1	42 8d 1c 48	 lea	 ebx, DWORD PTR [rax+r9*2]
  006d5	89 74 24 08	 mov	 DWORD PTR blk$[rsp+8], esi
  006d9	41 03 d8	 add	 ebx, r8d
  006dc	41 33 db	 xor	 ebx, r11d
  006df	d1 cb		 ror	 ebx, 1
  006e1	8b c3		 mov	 eax, ebx
  006e3	89 5c 24 0c	 mov	 DWORD PTR blk$[rsp+12], ebx
  006e7	c1 e8 10	 shr	 eax, 16
  006ea	0f b6 d0	 movzx	 edx, al
  006ed	8b c3		 mov	 eax, ebx
  006ef	c1 e8 08	 shr	 eax, 8
  006f2	48 03 d2	 add	 rdx, rdx
  006f5	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  006fd	0f b6 c8	 movzx	 ecx, al
  00700	8b c3		 mov	 eax, ebx
  00702	c1 e8 18	 shr	 eax, 24
  00705	48 03 c9	 add	 rcx, rcx
  00708	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  00710	0f b6 c8	 movzx	 ecx, al
  00713	0f b6 c3	 movzx	 eax, bl
  00716	48 03 c0	 add	 rax, rax
  00719	48 03 c9	 add	 rcx, rcx
  0071c	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  00724	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  0072c	8b c6		 mov	 eax, esi
  0072e	c1 e8 18	 shr	 eax, 24
  00731	0f b6 d0	 movzx	 edx, al
  00734	8b c6		 mov	 eax, esi
  00736	c1 e8 10	 shr	 eax, 16
  00739	48 03 d2	 add	 rdx, rdx
  0073c	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  00744	0f b6 c8	 movzx	 ecx, al
  00747	8b c6		 mov	 eax, esi
  00749	c1 e8 08	 shr	 eax, 8
  0074c	48 03 c9	 add	 rcx, rcx
  0074f	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  00757	0f b6 c8	 movzx	 ecx, al
  0075a	40 0f b6 c6	 movzx	 eax, sil
  0075e	48 03 c0	 add	 rax, rax
  00761	48 03 c9	 add	 rcx, rcx
  00764	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  0076c	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  00774	41 8b 44 24 50	 mov	 eax, DWORD PTR [r12+80]
  00779	d1 c5		 rol	 ebp, 1
  0077b	41 03 c0	 add	 eax, r8d
  0077e	41 03 c1	 add	 eax, r9d
  00781	33 e8		 xor	 ebp, eax
  00783	89 2c 24	 mov	 DWORD PTR blk$[rsp], ebp
  00786	41 8b 44 24 54	 mov	 eax, DWORD PTR [r12+84]
  0078b	46 8d 1c 48	 lea	 r11d, DWORD PTR [rax+r9*2]
  0078f	45 03 d8	 add	 r11d, r8d
  00792	45 33 da	 xor	 r11d, r10d
  00795	41 d1 cb	 ror	 r11d, 1
  00798	41 8b c3	 mov	 eax, r11d
  0079b	44 89 5c 24 04	 mov	 DWORD PTR blk$[rsp+4], r11d
  007a0	c1 e8 10	 shr	 eax, 16
  007a3	0f b6 d0	 movzx	 edx, al
  007a6	41 8b c3	 mov	 eax, r11d
  007a9	c1 e8 08	 shr	 eax, 8
  007ac	48 03 d2	 add	 rdx, rdx
  007af	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  007b7	0f b6 c8	 movzx	 ecx, al
  007ba	41 8b c3	 mov	 eax, r11d
  007bd	c1 e8 18	 shr	 eax, 24
  007c0	48 03 c9	 add	 rcx, rcx
  007c3	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  007cb	0f b6 c8	 movzx	 ecx, al
  007ce	41 0f b6 c3	 movzx	 eax, r11b
  007d2	48 03 c0	 add	 rax, rax
  007d5	48 03 c9	 add	 rcx, rcx
  007d8	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  007e0	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  007e8	8b c5		 mov	 eax, ebp
  007ea	c1 e8 18	 shr	 eax, 24
  007ed	0f b6 d0	 movzx	 edx, al
  007f0	8b c5		 mov	 eax, ebp
  007f2	c1 e8 10	 shr	 eax, 16
  007f5	48 03 d2	 add	 rdx, rdx
  007f8	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  00800	0f b6 c8	 movzx	 ecx, al
  00803	8b c5		 mov	 eax, ebp
  00805	c1 e8 08	 shr	 eax, 8
  00808	48 03 c9	 add	 rcx, rcx
  0080b	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  00813	0f b6 c8	 movzx	 ecx, al
  00816	40 0f b6 c5	 movzx	 eax, bpl
  0081a	48 03 c0	 add	 rax, rax
  0081d	48 03 c9	 add	 rcx, rcx
  00820	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  00828	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  00830	41 8b 44 24 48	 mov	 eax, DWORD PTR [r12+72]
  00835	d1 c6		 rol	 esi, 1
  00837	41 03 c0	 add	 eax, r8d
  0083a	41 03 c1	 add	 eax, r9d
  0083d	33 f0		 xor	 esi, eax
  0083f	41 8b 44 24 4c	 mov	 eax, DWORD PTR [r12+76]
  00844	46 8d 14 48	 lea	 r10d, DWORD PTR [rax+r9*2]
  00848	89 74 24 08	 mov	 DWORD PTR blk$[rsp+8], esi
  0084c	45 03 d0	 add	 r10d, r8d
  0084f	44 33 d3	 xor	 r10d, ebx
  00852	41 d1 ca	 ror	 r10d, 1
  00855	41 8b c2	 mov	 eax, r10d
  00858	44 89 54 24 0c	 mov	 DWORD PTR blk$[rsp+12], r10d
  0085d	c1 e8 10	 shr	 eax, 16
  00860	0f b6 d0	 movzx	 edx, al
  00863	41 8b c2	 mov	 eax, r10d
  00866	c1 e8 08	 shr	 eax, 8
  00869	48 03 d2	 add	 rdx, rdx
  0086c	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  00874	0f b6 c8	 movzx	 ecx, al
  00877	41 8b c2	 mov	 eax, r10d
  0087a	c1 e8 18	 shr	 eax, 24
  0087d	48 03 c9	 add	 rcx, rcx
  00880	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  00888	0f b6 c8	 movzx	 ecx, al
  0088b	41 0f b6 c2	 movzx	 eax, r10b
  0088f	48 03 c0	 add	 rax, rax
  00892	48 03 c9	 add	 rcx, rcx
  00895	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  0089d	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  008a5	8b c6		 mov	 eax, esi
  008a7	c1 e8 18	 shr	 eax, 24
  008aa	0f b6 d0	 movzx	 edx, al
  008ad	8b c6		 mov	 eax, esi
  008af	c1 e8 10	 shr	 eax, 16
  008b2	48 03 d2	 add	 rdx, rdx
  008b5	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  008bd	0f b6 c8	 movzx	 ecx, al
  008c0	48 03 c9	 add	 rcx, rcx
  008c3	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  008cb	8b c6		 mov	 eax, esi
  008cd	c1 e8 08	 shr	 eax, 8
  008d0	0f b6 c8	 movzx	 ecx, al
  008d3	40 0f b6 c6	 movzx	 eax, sil
  008d7	48 03 c0	 add	 rax, rax
  008da	48 03 c9	 add	 rcx, rcx
  008dd	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  008e5	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  008ed	41 8b 44 24 40	 mov	 eax, DWORD PTR [r12+64]
  008f2	d1 c5		 rol	 ebp, 1
  008f4	41 03 c0	 add	 eax, r8d
  008f7	41 03 c1	 add	 eax, r9d
  008fa	33 e8		 xor	 ebp, eax
  008fc	41 8b 44 24 44	 mov	 eax, DWORD PTR [r12+68]
  00901	42 8d 1c 48	 lea	 ebx, DWORD PTR [rax+r9*2]
  00905	89 2c 24	 mov	 DWORD PTR blk$[rsp], ebp
  00908	41 03 d8	 add	 ebx, r8d
  0090b	41 33 db	 xor	 ebx, r11d
  0090e	d1 cb		 ror	 ebx, 1
  00910	8b c3		 mov	 eax, ebx
  00912	89 5c 24 04	 mov	 DWORD PTR blk$[rsp+4], ebx
  00916	c1 e8 10	 shr	 eax, 16
  00919	0f b6 d0	 movzx	 edx, al
  0091c	8b c3		 mov	 eax, ebx
  0091e	c1 e8 08	 shr	 eax, 8
  00921	48 03 d2	 add	 rdx, rdx
  00924	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  0092c	0f b6 c8	 movzx	 ecx, al
  0092f	8b c3		 mov	 eax, ebx
  00931	c1 e8 18	 shr	 eax, 24
  00934	48 03 c9	 add	 rcx, rcx
  00937	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  0093f	0f b6 c8	 movzx	 ecx, al
  00942	0f b6 c3	 movzx	 eax, bl
  00945	48 03 c0	 add	 rax, rax
  00948	48 03 c9	 add	 rcx, rcx
  0094b	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  00953	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  0095b	8b c5		 mov	 eax, ebp
  0095d	c1 e8 18	 shr	 eax, 24
  00960	0f b6 d0	 movzx	 edx, al
  00963	8b c5		 mov	 eax, ebp
  00965	c1 e8 10	 shr	 eax, 16
  00968	48 03 d2	 add	 rdx, rdx
  0096b	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  00973	0f b6 c8	 movzx	 ecx, al
  00976	8b c5		 mov	 eax, ebp
  00978	c1 e8 08	 shr	 eax, 8
  0097b	48 03 c9	 add	 rcx, rcx
  0097e	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  00986	0f b6 c8	 movzx	 ecx, al
  00989	40 0f b6 c5	 movzx	 eax, bpl
  0098d	48 03 c0	 add	 rax, rax
  00990	48 03 c9	 add	 rcx, rcx
  00993	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  0099b	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  009a3	41 8b 44 24 38	 mov	 eax, DWORD PTR [r12+56]
  009a8	d1 c6		 rol	 esi, 1
  009aa	41 03 c0	 add	 eax, r8d
  009ad	41 03 c1	 add	 eax, r9d
  009b0	33 f0		 xor	 esi, eax
  009b2	41 8b 44 24 3c	 mov	 eax, DWORD PTR [r12+60]
  009b7	42 8d 3c 48	 lea	 edi, DWORD PTR [rax+r9*2]
  009bb	89 74 24 08	 mov	 DWORD PTR blk$[rsp+8], esi
  009bf	41 03 f8	 add	 edi, r8d
  009c2	41 33 fa	 xor	 edi, r10d
  009c5	d1 cf		 ror	 edi, 1
  009c7	8b c7		 mov	 eax, edi
  009c9	89 7c 24 0c	 mov	 DWORD PTR blk$[rsp+12], edi
  009cd	c1 e8 10	 shr	 eax, 16
  009d0	0f b6 d0	 movzx	 edx, al
  009d3	8b c7		 mov	 eax, edi
  009d5	c1 e8 08	 shr	 eax, 8
  009d8	48 03 d2	 add	 rdx, rdx
  009db	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  009e3	0f b6 c8	 movzx	 ecx, al
  009e6	8b c7		 mov	 eax, edi
  009e8	48 03 c9	 add	 rcx, rcx
  009eb	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  009f3	c1 e8 18	 shr	 eax, 24
  009f6	0f b6 c8	 movzx	 ecx, al
  009f9	40 0f b6 c7	 movzx	 eax, dil
  009fd	48 03 c0	 add	 rax, rax
  00a00	48 03 c9	 add	 rcx, rcx
  00a03	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  00a0b	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  00a13	8b c6		 mov	 eax, esi
  00a15	c1 e8 18	 shr	 eax, 24
  00a18	0f b6 d0	 movzx	 edx, al
  00a1b	8b c6		 mov	 eax, esi
  00a1d	c1 e8 10	 shr	 eax, 16
  00a20	48 03 d2	 add	 rdx, rdx
  00a23	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  00a2b	0f b6 c8	 movzx	 ecx, al
  00a2e	8b c6		 mov	 eax, esi
  00a30	c1 e8 08	 shr	 eax, 8
  00a33	48 03 c9	 add	 rcx, rcx
  00a36	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  00a3e	0f b6 c8	 movzx	 ecx, al
  00a41	40 0f b6 c6	 movzx	 eax, sil
  00a45	48 03 c0	 add	 rax, rax
  00a48	48 03 c9	 add	 rcx, rcx
  00a4b	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  00a53	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  00a5b	41 8b 44 24 30	 mov	 eax, DWORD PTR [r12+48]
  00a60	d1 c5		 rol	 ebp, 1
  00a62	41 03 c0	 add	 eax, r8d
  00a65	41 03 c1	 add	 eax, r9d
  00a68	33 e8		 xor	 ebp, eax
  00a6a	41 8b 44 24 34	 mov	 eax, DWORD PTR [r12+52]
  00a6f	46 8d 1c 48	 lea	 r11d, DWORD PTR [rax+r9*2]
  00a73	89 2c 24	 mov	 DWORD PTR blk$[rsp], ebp
  00a76	45 03 d8	 add	 r11d, r8d
  00a79	44 33 db	 xor	 r11d, ebx
  00a7c	41 d1 cb	 ror	 r11d, 1
  00a7f	41 8b c3	 mov	 eax, r11d
  00a82	44 89 5c 24 04	 mov	 DWORD PTR blk$[rsp+4], r11d
  00a87	c1 e8 10	 shr	 eax, 16
  00a8a	0f b6 d0	 movzx	 edx, al
  00a8d	41 8b c3	 mov	 eax, r11d
  00a90	c1 e8 08	 shr	 eax, 8
  00a93	48 03 d2	 add	 rdx, rdx
  00a96	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  00a9e	0f b6 c8	 movzx	 ecx, al
  00aa1	41 8b c3	 mov	 eax, r11d
  00aa4	c1 e8 18	 shr	 eax, 24
  00aa7	48 03 c9	 add	 rcx, rcx
  00aaa	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  00ab2	0f b6 c8	 movzx	 ecx, al
  00ab5	41 0f b6 c3	 movzx	 eax, r11b
  00ab9	48 03 c0	 add	 rax, rax
  00abc	48 03 c9	 add	 rcx, rcx
  00abf	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  00ac7	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  00acf	8b c5		 mov	 eax, ebp
  00ad1	c1 e8 18	 shr	 eax, 24
  00ad4	0f b6 d0	 movzx	 edx, al
  00ad7	8b c5		 mov	 eax, ebp
  00ad9	c1 e8 10	 shr	 eax, 16
  00adc	48 03 d2	 add	 rdx, rdx
  00adf	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  00ae7	0f b6 c8	 movzx	 ecx, al
  00aea	8b c5		 mov	 eax, ebp
  00aec	c1 e8 08	 shr	 eax, 8
  00aef	48 03 c9	 add	 rcx, rcx
  00af2	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  00afa	0f b6 c8	 movzx	 ecx, al
  00afd	40 0f b6 c5	 movzx	 eax, bpl
  00b01	48 03 c0	 add	 rax, rax
  00b04	48 03 c9	 add	 rcx, rcx
  00b07	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  00b0f	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  00b17	41 8b 44 24 28	 mov	 eax, DWORD PTR [r12+40]
  00b1c	d1 c6		 rol	 esi, 1
  00b1e	41 03 c0	 add	 eax, r8d
  00b21	41 03 c1	 add	 eax, r9d
  00b24	33 f0		 xor	 esi, eax
  00b26	41 8b 44 24 2c	 mov	 eax, DWORD PTR [r12+44]
  00b2b	46 8d 14 48	 lea	 r10d, DWORD PTR [rax+r9*2]
  00b2f	89 74 24 08	 mov	 DWORD PTR blk$[rsp+8], esi
  00b33	45 03 d0	 add	 r10d, r8d

; 509  : 
; 510  :     out_blk[0] = LE32(blk[2] ^ l_key[0]);
; 511  :     out_blk[1] = LE32(blk[3] ^ l_key[1]);
; 512  :     out_blk[2] = LE32(blk[0] ^ l_key[2]);
; 513  :     out_blk[3] = LE32(blk[1] ^ l_key[3]); 
; 514  : };

  00b36	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00b3b	44 33 d7	 xor	 r10d, edi
  00b3e	41 d1 ca	 ror	 r10d, 1
  00b41	41 8b c2	 mov	 eax, r10d
  00b44	44 89 54 24 0c	 mov	 DWORD PTR blk$[rsp+12], r10d
  00b49	c1 e8 10	 shr	 eax, 16
  00b4c	0f b6 d0	 movzx	 edx, al
  00b4f	41 8b c2	 mov	 eax, r10d
  00b52	c1 e8 08	 shr	 eax, 8
  00b55	48 03 d2	 add	 rdx, rdx
  00b58	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  00b60	0f b6 c8	 movzx	 ecx, al
  00b63	41 8b c2	 mov	 eax, r10d
  00b66	c1 e8 18	 shr	 eax, 24
  00b69	48 03 c9	 add	 rcx, rcx
  00b6c	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  00b74	0f b6 c8	 movzx	 ecx, al
  00b77	41 0f b6 c2	 movzx	 eax, r10b
  00b7b	48 03 c0	 add	 rax, rax
  00b7e	48 03 c9	 add	 rcx, rcx
  00b81	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  00b89	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  00b91	8b c6		 mov	 eax, esi
  00b93	c1 e8 18	 shr	 eax, 24
  00b96	0f b6 d0	 movzx	 edx, al
  00b99	8b c6		 mov	 eax, esi
  00b9b	c1 e8 10	 shr	 eax, 16
  00b9e	48 03 d2	 add	 rdx, rdx
  00ba1	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  00ba9	0f b6 c8	 movzx	 ecx, al
  00bac	8b c6		 mov	 eax, esi
  00bae	c1 e8 08	 shr	 eax, 8
  00bb1	48 03 c9	 add	 rcx, rcx
  00bb4	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  00bbc	0f b6 c8	 movzx	 ecx, al
  00bbf	40 0f b6 c6	 movzx	 eax, sil
  00bc3	48 03 c0	 add	 rax, rax
  00bc6	48 03 c9	 add	 rcx, rcx
  00bc9	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  00bd1	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  00bd9	41 8b 44 24 20	 mov	 eax, DWORD PTR [r12+32]
  00bde	d1 c5		 rol	 ebp, 1
  00be0	41 03 c0	 add	 eax, r8d
  00be3	41 03 c1	 add	 eax, r9d
  00be6	33 e8		 xor	 ebp, eax
  00be8	41 8b 44 24 24	 mov	 eax, DWORD PTR [r12+36]
  00bed	42 8d 0c 48	 lea	 ecx, DWORD PTR [rax+r9*2]
  00bf1	41 8b 04 24	 mov	 eax, DWORD PTR [r12]
  00bf5	33 c6		 xor	 eax, esi
  00bf7	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00bfc	41 03 c8	 add	 ecx, r8d
  00bff	41 89 45 00	 mov	 DWORD PTR [r13], eax
  00c03	41 8b 44 24 04	 mov	 eax, DWORD PTR [r12+4]
  00c08	41 33 cb	 xor	 ecx, r11d
  00c0b	41 33 c2	 xor	 eax, r10d
  00c0e	d1 c9		 ror	 ecx, 1
  00c10	41 89 45 04	 mov	 DWORD PTR [r13+4], eax
  00c14	41 8b 44 24 08	 mov	 eax, DWORD PTR [r12+8]
  00c19	33 c5		 xor	 eax, ebp
  00c1b	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00c20	41 89 45 08	 mov	 DWORD PTR [r13+8], eax
  00c24	41 8b 44 24 0c	 mov	 eax, DWORD PTR [r12+12]
  00c29	33 c1		 xor	 eax, ecx
  00c2b	41 89 45 0c	 mov	 DWORD PTR [r13+12], eax
  00c2f	48 83 c4 10	 add	 rsp, 16
  00c33	41 5d		 pop	 r13
  00c35	41 5c		 pop	 r12
  00c37	5f		 pop	 rdi
  00c38	c3		 ret	 0
twofish_decrypt ENDP
_TEXT	ENDS
PUBLIC	twofish_encrypt
;	COMDAT pdata
pdata	SEGMENT
$pdata$twofish_encrypt DD imagerel $LN3
	DD	imagerel $LN3+3129
	DD	imagerel $unwind$twofish_encrypt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$twofish_encrypt DD 0a1801H
	DD	086418H
	DD	075418H
	DD	063418H
	DD	0d0141218H
	DD	07010c012H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT twofish_encrypt
_TEXT	SEGMENT
blk$ = 0
instance$ = 48
in_blk$ = 56
out_blk$ = 64
twofish_encrypt PROC					; COMDAT

; 431  : {   u4byte  t0, t1, blk[4];

$LN3:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 10	 sub	 rsp, 16

; 432  : 
; 433  : 	u4byte *l_key = instance->l_key;
; 434  : 	u4byte *mk_tab = instance->mk_tab;
; 435  : 
; 436  : 	blk[0] = LE32(in_blk[0]) ^ l_key[0];
; 437  :     blk[1] = LE32(in_blk[1]) ^ l_key[1];

  00018	8b 69 04	 mov	 ebp, DWORD PTR [rcx+4]
  0001b	44 8b 19	 mov	 r11d, DWORD PTR [rcx]

; 438  :     blk[2] = LE32(in_blk[2]) ^ l_key[2];

  0001e	44 8b 51 08	 mov	 r10d, DWORD PTR [rcx+8]
  00022	33 6a 04	 xor	 ebp, DWORD PTR [rdx+4]

; 439  :     blk[3] = LE32(in_blk[3]) ^ l_key[3];

  00025	8b 71 0c	 mov	 esi, DWORD PTR [rcx+12]
  00028	44 33 1a	 xor	 r11d, DWORD PTR [rdx]
  0002b	44 33 52 08	 xor	 r10d, DWORD PTR [rdx+8]
  0002f	33 72 0c	 xor	 esi, DWORD PTR [rdx+12]
  00032	4c 8b e1	 mov	 r12, rcx

; 440  : 
; 441  :     f_rnd(0); f_rnd(1); f_rnd(2); f_rnd(3);

  00035	41 8b 5c 24 20	 mov	 ebx, DWORD PTR [r12+32]
  0003a	4d 8b e8	 mov	 r13, r8
  0003d	8b c5		 mov	 eax, ebp
  0003f	c1 e8 10	 shr	 eax, 16
  00042	44 89 1c 24	 mov	 DWORD PTR blk$[rsp], r11d
  00046	89 6c 24 04	 mov	 DWORD PTR blk$[rsp+4], ebp
  0004a	0f b6 d0	 movzx	 edx, al
  0004d	8b c5		 mov	 eax, ebp
  0004f	c1 e8 08	 shr	 eax, 8
  00052	48 03 d2	 add	 rdx, rdx
  00055	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  0005d	0f b6 c8	 movzx	 ecx, al
  00060	8b c5		 mov	 eax, ebp
  00062	c1 e8 18	 shr	 eax, 24
  00065	48 03 c9	 add	 rcx, rcx
  00068	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  00070	0f b6 c8	 movzx	 ecx, al
  00073	40 0f b6 c5	 movzx	 eax, bpl
  00077	48 03 c0	 add	 rax, rax
  0007a	48 03 c9	 add	 rcx, rcx
  0007d	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  00085	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  0008d	41 8b c3	 mov	 eax, r11d
  00090	c1 e8 18	 shr	 eax, 24
  00093	0f b6 d0	 movzx	 edx, al
  00096	41 8b c3	 mov	 eax, r11d
  00099	c1 e8 10	 shr	 eax, 16
  0009c	48 03 d2	 add	 rdx, rdx
  0009f	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  000a7	0f b6 c8	 movzx	 ecx, al
  000aa	41 8b c3	 mov	 eax, r11d
  000ad	c1 e8 08	 shr	 eax, 8
  000b0	48 03 c9	 add	 rcx, rcx
  000b3	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  000bb	0f b6 c8	 movzx	 ecx, al
  000be	41 0f b6 c3	 movzx	 eax, r11b
  000c2	48 03 c0	 add	 rax, rax
  000c5	48 03 c9	 add	 rcx, rcx
  000c8	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  000d0	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  000d8	41 8b 44 24 24	 mov	 eax, DWORD PTR [r12+36]
  000dd	42 8d 0c 48	 lea	 ecx, DWORD PTR [rax+r9*2]
  000e1	41 03 d8	 add	 ebx, r8d
  000e4	41 03 d9	 add	 ebx, r9d
  000e7	41 03 c8	 add	 ecx, r8d
  000ea	41 33 da	 xor	 ebx, r10d
  000ed	d1 cb		 ror	 ebx, 1
  000ef	d1 c6		 rol	 esi, 1
  000f1	33 f1		 xor	 esi, ecx
  000f3	89 5c 24 08	 mov	 DWORD PTR blk$[rsp+8], ebx
  000f7	8b c6		 mov	 eax, esi
  000f9	89 74 24 0c	 mov	 DWORD PTR blk$[rsp+12], esi
  000fd	c1 e8 10	 shr	 eax, 16
  00100	0f b6 d0	 movzx	 edx, al
  00103	8b c6		 mov	 eax, esi
  00105	c1 e8 08	 shr	 eax, 8
  00108	48 03 d2	 add	 rdx, rdx
  0010b	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  00113	0f b6 c8	 movzx	 ecx, al
  00116	8b c6		 mov	 eax, esi
  00118	c1 e8 18	 shr	 eax, 24
  0011b	48 03 c9	 add	 rcx, rcx
  0011e	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  00126	0f b6 c8	 movzx	 ecx, al
  00129	40 0f b6 c6	 movzx	 eax, sil
  0012d	48 03 c0	 add	 rax, rax
  00130	48 03 c9	 add	 rcx, rcx
  00133	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  0013b	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  00143	8b c3		 mov	 eax, ebx
  00145	c1 e8 18	 shr	 eax, 24
  00148	0f b6 d0	 movzx	 edx, al
  0014b	45 8b 54 24 28	 mov	 r10d, DWORD PTR [r12+40]
  00150	48 03 d2	 add	 rdx, rdx
  00153	8b c3		 mov	 eax, ebx
  00155	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  0015d	c1 e8 10	 shr	 eax, 16
  00160	0f b6 c8	 movzx	 ecx, al
  00163	8b c3		 mov	 eax, ebx
  00165	c1 e8 08	 shr	 eax, 8
  00168	48 03 c9	 add	 rcx, rcx
  0016b	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  00173	0f b6 c8	 movzx	 ecx, al
  00176	0f b6 c3	 movzx	 eax, bl
  00179	48 03 c0	 add	 rax, rax
  0017c	48 03 c9	 add	 rcx, rcx
  0017f	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  00187	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  0018f	41 8b 44 24 2c	 mov	 eax, DWORD PTR [r12+44]
  00194	42 8d 0c 48	 lea	 ecx, DWORD PTR [rax+r9*2]
  00198	45 03 d0	 add	 r10d, r8d
  0019b	41 03 c8	 add	 ecx, r8d
  0019e	45 03 d1	 add	 r10d, r9d
  001a1	45 33 d3	 xor	 r10d, r11d
  001a4	45 8b 5c 24 30	 mov	 r11d, DWORD PTR [r12+48]
  001a9	41 d1 ca	 ror	 r10d, 1
  001ac	d1 c5		 rol	 ebp, 1
  001ae	33 e9		 xor	 ebp, ecx
  001b0	44 89 14 24	 mov	 DWORD PTR blk$[rsp], r10d
  001b4	8b c5		 mov	 eax, ebp
  001b6	89 6c 24 04	 mov	 DWORD PTR blk$[rsp+4], ebp
  001ba	c1 e8 10	 shr	 eax, 16
  001bd	0f b6 d0	 movzx	 edx, al
  001c0	8b c5		 mov	 eax, ebp
  001c2	c1 e8 08	 shr	 eax, 8
  001c5	48 03 d2	 add	 rdx, rdx
  001c8	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  001d0	0f b6 c8	 movzx	 ecx, al
  001d3	8b c5		 mov	 eax, ebp
  001d5	c1 e8 18	 shr	 eax, 24
  001d8	48 03 c9	 add	 rcx, rcx
  001db	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  001e3	0f b6 c8	 movzx	 ecx, al
  001e6	40 0f b6 c5	 movzx	 eax, bpl
  001ea	48 03 c0	 add	 rax, rax
  001ed	48 03 c9	 add	 rcx, rcx
  001f0	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  001f8	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  00200	41 8b c2	 mov	 eax, r10d
  00203	c1 e8 18	 shr	 eax, 24
  00206	0f b6 d0	 movzx	 edx, al
  00209	41 8b c2	 mov	 eax, r10d
  0020c	c1 e8 10	 shr	 eax, 16
  0020f	48 03 d2	 add	 rdx, rdx
  00212	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  0021a	0f b6 c8	 movzx	 ecx, al
  0021d	41 8b c2	 mov	 eax, r10d
  00220	c1 e8 08	 shr	 eax, 8
  00223	48 03 c9	 add	 rcx, rcx
  00226	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  0022e	0f b6 c8	 movzx	 ecx, al
  00231	41 0f b6 c2	 movzx	 eax, r10b
  00235	48 03 c0	 add	 rax, rax
  00238	48 03 c9	 add	 rcx, rcx
  0023b	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  00243	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  0024b	41 8b 44 24 34	 mov	 eax, DWORD PTR [r12+52]
  00250	45 03 d8	 add	 r11d, r8d
  00253	42 8d 0c 48	 lea	 ecx, DWORD PTR [rax+r9*2]
  00257	45 03 d9	 add	 r11d, r9d
  0025a	41 03 c8	 add	 ecx, r8d
  0025d	44 33 db	 xor	 r11d, ebx
  00260	41 d1 cb	 ror	 r11d, 1
  00263	d1 c6		 rol	 esi, 1
  00265	33 f1		 xor	 esi, ecx
  00267	44 89 5c 24 08	 mov	 DWORD PTR blk$[rsp+8], r11d
  0026c	8b c6		 mov	 eax, esi
  0026e	89 74 24 0c	 mov	 DWORD PTR blk$[rsp+12], esi
  00272	c1 e8 10	 shr	 eax, 16
  00275	0f b6 d0	 movzx	 edx, al
  00278	8b c6		 mov	 eax, esi
  0027a	48 03 d2	 add	 rdx, rdx
  0027d	c1 e8 08	 shr	 eax, 8
  00280	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  00288	41 8b 5c 24 38	 mov	 ebx, DWORD PTR [r12+56]
  0028d	0f b6 c8	 movzx	 ecx, al
  00290	48 03 c9	 add	 rcx, rcx
  00293	8b c6		 mov	 eax, esi
  00295	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  0029d	c1 e8 18	 shr	 eax, 24
  002a0	0f b6 c8	 movzx	 ecx, al
  002a3	40 0f b6 c6	 movzx	 eax, sil
  002a7	48 03 c0	 add	 rax, rax
  002aa	48 03 c9	 add	 rcx, rcx
  002ad	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  002b5	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  002bd	41 8b c3	 mov	 eax, r11d
  002c0	c1 e8 18	 shr	 eax, 24
  002c3	0f b6 d0	 movzx	 edx, al
  002c6	41 8b c3	 mov	 eax, r11d
  002c9	c1 e8 10	 shr	 eax, 16
  002cc	48 03 d2	 add	 rdx, rdx
  002cf	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  002d7	0f b6 c8	 movzx	 ecx, al
  002da	41 8b c3	 mov	 eax, r11d
  002dd	c1 e8 08	 shr	 eax, 8
  002e0	48 03 c9	 add	 rcx, rcx
  002e3	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  002eb	0f b6 c8	 movzx	 ecx, al
  002ee	41 0f b6 c3	 movzx	 eax, r11b
  002f2	48 03 c0	 add	 rax, rax
  002f5	48 03 c9	 add	 rcx, rcx
  002f8	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  00300	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  00308	41 8b 44 24 3c	 mov	 eax, DWORD PTR [r12+60]
  0030d	42 8d 0c 48	 lea	 ecx, DWORD PTR [rax+r9*2]
  00311	41 03 d8	 add	 ebx, r8d
  00314	41 03 c8	 add	 ecx, r8d
  00317	41 03 d9	 add	 ebx, r9d
  0031a	41 33 da	 xor	 ebx, r10d
  0031d	45 8b 54 24 40	 mov	 r10d, DWORD PTR [r12+64]
  00322	d1 cb		 ror	 ebx, 1
  00324	d1 c5		 rol	 ebp, 1
  00326	33 e9		 xor	 ebp, ecx
  00328	89 1c 24	 mov	 DWORD PTR blk$[rsp], ebx
  0032b	8b c5		 mov	 eax, ebp
  0032d	89 6c 24 04	 mov	 DWORD PTR blk$[rsp+4], ebp
  00331	c1 e8 10	 shr	 eax, 16
  00334	0f b6 d0	 movzx	 edx, al
  00337	8b c5		 mov	 eax, ebp
  00339	c1 e8 08	 shr	 eax, 8
  0033c	48 03 d2	 add	 rdx, rdx
  0033f	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  00347	0f b6 c8	 movzx	 ecx, al
  0034a	8b c5		 mov	 eax, ebp
  0034c	c1 e8 18	 shr	 eax, 24
  0034f	48 03 c9	 add	 rcx, rcx
  00352	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  0035a	0f b6 c8	 movzx	 ecx, al
  0035d	40 0f b6 c5	 movzx	 eax, bpl
  00361	48 03 c0	 add	 rax, rax
  00364	48 03 c9	 add	 rcx, rcx
  00367	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  0036f	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  00377	8b c3		 mov	 eax, ebx
  00379	c1 e8 18	 shr	 eax, 24
  0037c	0f b6 d0	 movzx	 edx, al
  0037f	8b c3		 mov	 eax, ebx
  00381	c1 e8 10	 shr	 eax, 16
  00384	48 03 d2	 add	 rdx, rdx
  00387	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  0038f	0f b6 c8	 movzx	 ecx, al
  00392	8b c3		 mov	 eax, ebx
  00394	48 03 c9	 add	 rcx, rcx
  00397	c1 e8 08	 shr	 eax, 8
  0039a	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  003a2	0f b6 c8	 movzx	 ecx, al
  003a5	0f b6 c3	 movzx	 eax, bl
  003a8	48 03 c9	 add	 rcx, rcx
  003ab	48 03 c0	 add	 rax, rax
  003ae	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  003b6	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  003be	45 03 d0	 add	 r10d, r8d
  003c1	45 03 d1	 add	 r10d, r9d
  003c4	41 8b 44 24 44	 mov	 eax, DWORD PTR [r12+68]
  003c9	45 33 d3	 xor	 r10d, r11d
  003cc	45 8b 5c 24 48	 mov	 r11d, DWORD PTR [r12+72]
  003d1	42 8d 0c 48	 lea	 ecx, DWORD PTR [rax+r9*2]
  003d5	41 d1 ca	 ror	 r10d, 1
  003d8	d1 c6		 rol	 esi, 1
  003da	41 03 c8	 add	 ecx, r8d
  003dd	44 89 54 24 08	 mov	 DWORD PTR blk$[rsp+8], r10d
  003e2	33 f1		 xor	 esi, ecx
  003e4	8b c6		 mov	 eax, esi
  003e6	89 74 24 0c	 mov	 DWORD PTR blk$[rsp+12], esi
  003ea	c1 e8 10	 shr	 eax, 16
  003ed	0f b6 d0	 movzx	 edx, al
  003f0	8b c6		 mov	 eax, esi
  003f2	c1 e8 08	 shr	 eax, 8
  003f5	48 03 d2	 add	 rdx, rdx
  003f8	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  00400	0f b6 c8	 movzx	 ecx, al
  00403	8b c6		 mov	 eax, esi
  00405	c1 e8 18	 shr	 eax, 24
  00408	48 03 c9	 add	 rcx, rcx
  0040b	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  00413	0f b6 c8	 movzx	 ecx, al
  00416	40 0f b6 c6	 movzx	 eax, sil
  0041a	48 03 c0	 add	 rax, rax
  0041d	48 03 c9	 add	 rcx, rcx
  00420	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  00428	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  00430	41 8b c2	 mov	 eax, r10d
  00433	c1 e8 18	 shr	 eax, 24
  00436	0f b6 d0	 movzx	 edx, al
  00439	41 8b c2	 mov	 eax, r10d
  0043c	c1 e8 10	 shr	 eax, 16
  0043f	48 03 d2	 add	 rdx, rdx
  00442	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  0044a	0f b6 c8	 movzx	 ecx, al
  0044d	41 8b c2	 mov	 eax, r10d
  00450	c1 e8 08	 shr	 eax, 8
  00453	48 03 c9	 add	 rcx, rcx
  00456	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  0045e	0f b6 c8	 movzx	 ecx, al
  00461	41 0f b6 c2	 movzx	 eax, r10b
  00465	48 03 c0	 add	 rax, rax
  00468	48 03 c9	 add	 rcx, rcx
  0046b	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  00473	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  0047b	41 8b 44 24 4c	 mov	 eax, DWORD PTR [r12+76]
  00480	42 8d 0c 48	 lea	 ecx, DWORD PTR [rax+r9*2]
  00484	45 03 d8	 add	 r11d, r8d
  00487	45 03 d9	 add	 r11d, r9d
  0048a	41 03 c8	 add	 ecx, r8d
  0048d	44 33 db	 xor	 r11d, ebx
  00490	41 d1 cb	 ror	 r11d, 1
  00493	d1 c5		 rol	 ebp, 1
  00495	33 e9		 xor	 ebp, ecx
  00497	44 89 1c 24	 mov	 DWORD PTR blk$[rsp], r11d
  0049b	8b c5		 mov	 eax, ebp
  0049d	89 6c 24 04	 mov	 DWORD PTR blk$[rsp+4], ebp
  004a1	c1 e8 10	 shr	 eax, 16
  004a4	0f b6 d0	 movzx	 edx, al
  004a7	8b c5		 mov	 eax, ebp
  004a9	c1 e8 08	 shr	 eax, 8
  004ac	48 03 d2	 add	 rdx, rdx
  004af	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  004b7	0f b6 c8	 movzx	 ecx, al
  004ba	8b c5		 mov	 eax, ebp
  004bc	c1 e8 18	 shr	 eax, 24
  004bf	48 03 c9	 add	 rcx, rcx
  004c2	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  004ca	0f b6 c8	 movzx	 ecx, al
  004cd	40 0f b6 c5	 movzx	 eax, bpl
  004d1	48 03 c0	 add	 rax, rax
  004d4	48 03 c9	 add	 rcx, rcx
  004d7	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  004df	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  004e7	41 8b c3	 mov	 eax, r11d
  004ea	c1 e8 18	 shr	 eax, 24
  004ed	0f b6 d0	 movzx	 edx, al
  004f0	41 8b c3	 mov	 eax, r11d
  004f3	48 03 d2	 add	 rdx, rdx
  004f6	c1 e8 10	 shr	 eax, 16
  004f9	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  00501	41 8b 5c 24 50	 mov	 ebx, DWORD PTR [r12+80]
  00506	0f b6 c8	 movzx	 ecx, al
  00509	48 03 c9	 add	 rcx, rcx
  0050c	41 8b c3	 mov	 eax, r11d
  0050f	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  00517	c1 e8 08	 shr	 eax, 8
  0051a	0f b6 c8	 movzx	 ecx, al
  0051d	41 0f b6 c3	 movzx	 eax, r11b
  00521	48 03 c0	 add	 rax, rax
  00524	48 03 c9	 add	 rcx, rcx
  00527	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  0052f	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  00537	41 8b 44 24 54	 mov	 eax, DWORD PTR [r12+84]
  0053c	42 8d 0c 48	 lea	 ecx, DWORD PTR [rax+r9*2]
  00540	41 03 d8	 add	 ebx, r8d
  00543	41 03 c8	 add	 ecx, r8d
  00546	41 03 d9	 add	 ebx, r9d
  00549	41 33 da	 xor	 ebx, r10d
  0054c	45 8b 54 24 58	 mov	 r10d, DWORD PTR [r12+88]
  00551	d1 cb		 ror	 ebx, 1
  00553	d1 c6		 rol	 esi, 1
  00555	33 f1		 xor	 esi, ecx
  00557	89 5c 24 08	 mov	 DWORD PTR blk$[rsp+8], ebx
  0055b	8b c6		 mov	 eax, esi
  0055d	89 74 24 0c	 mov	 DWORD PTR blk$[rsp+12], esi
  00561	c1 e8 10	 shr	 eax, 16
  00564	0f b6 d0	 movzx	 edx, al
  00567	8b c6		 mov	 eax, esi
  00569	c1 e8 08	 shr	 eax, 8
  0056c	48 03 d2	 add	 rdx, rdx
  0056f	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  00577	0f b6 c8	 movzx	 ecx, al
  0057a	8b c6		 mov	 eax, esi
  0057c	c1 e8 18	 shr	 eax, 24
  0057f	48 03 c9	 add	 rcx, rcx
  00582	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  0058a	0f b6 c8	 movzx	 ecx, al
  0058d	40 0f b6 c6	 movzx	 eax, sil
  00591	48 03 c0	 add	 rax, rax
  00594	48 03 c9	 add	 rcx, rcx
  00597	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  0059f	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  005a7	8b c3		 mov	 eax, ebx
  005a9	c1 e8 18	 shr	 eax, 24
  005ac	0f b6 d0	 movzx	 edx, al
  005af	8b c3		 mov	 eax, ebx
  005b1	c1 e8 10	 shr	 eax, 16
  005b4	48 03 d2	 add	 rdx, rdx
  005b7	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  005bf	0f b6 c8	 movzx	 ecx, al
  005c2	8b c3		 mov	 eax, ebx
  005c4	c1 e8 08	 shr	 eax, 8
  005c7	48 03 c9	 add	 rcx, rcx
  005ca	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  005d2	0f b6 c8	 movzx	 ecx, al
  005d5	0f b6 c3	 movzx	 eax, bl
  005d8	48 03 c0	 add	 rax, rax
  005db	48 03 c9	 add	 rcx, rcx
  005de	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  005e6	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  005ee	41 8b 44 24 5c	 mov	 eax, DWORD PTR [r12+92]
  005f3	42 8d 0c 48	 lea	 ecx, DWORD PTR [rax+r9*2]
  005f7	45 03 d0	 add	 r10d, r8d
  005fa	45 03 d1	 add	 r10d, r9d
  005fd	41 03 c8	 add	 ecx, r8d
  00600	45 33 d3	 xor	 r10d, r11d
  00603	41 d1 ca	 ror	 r10d, 1
  00606	d1 c5		 rol	 ebp, 1
  00608	33 e9		 xor	 ebp, ecx
  0060a	44 89 14 24	 mov	 DWORD PTR blk$[rsp], r10d

; 442  :     f_rnd(4); f_rnd(5); f_rnd(6); f_rnd(7);

  0060e	8b c5		 mov	 eax, ebp
  00610	89 6c 24 04	 mov	 DWORD PTR blk$[rsp+4], ebp
  00614	c1 e8 10	 shr	 eax, 16
  00617	0f b6 d0	 movzx	 edx, al
  0061a	8b c5		 mov	 eax, ebp
  0061c	c1 e8 08	 shr	 eax, 8
  0061f	48 03 d2	 add	 rdx, rdx
  00622	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  0062a	0f b6 c8	 movzx	 ecx, al
  0062d	48 03 c9	 add	 rcx, rcx
  00630	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  00638	45 8b 5c 24 60	 mov	 r11d, DWORD PTR [r12+96]
  0063d	8b c5		 mov	 eax, ebp
  0063f	c1 e8 18	 shr	 eax, 24
  00642	0f b6 c8	 movzx	 ecx, al
  00645	40 0f b6 c5	 movzx	 eax, bpl
  00649	48 03 c0	 add	 rax, rax
  0064c	48 03 c9	 add	 rcx, rcx
  0064f	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  00657	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  0065f	41 8b c2	 mov	 eax, r10d
  00662	c1 e8 18	 shr	 eax, 24
  00665	0f b6 d0	 movzx	 edx, al
  00668	41 8b c2	 mov	 eax, r10d
  0066b	c1 e8 10	 shr	 eax, 16
  0066e	48 03 d2	 add	 rdx, rdx
  00671	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  00679	0f b6 c8	 movzx	 ecx, al
  0067c	41 8b c2	 mov	 eax, r10d
  0067f	c1 e8 08	 shr	 eax, 8
  00682	48 03 c9	 add	 rcx, rcx
  00685	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  0068d	0f b6 c8	 movzx	 ecx, al
  00690	41 0f b6 c2	 movzx	 eax, r10b
  00694	48 03 c0	 add	 rax, rax
  00697	48 03 c9	 add	 rcx, rcx
  0069a	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  006a2	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  006aa	41 8b 44 24 64	 mov	 eax, DWORD PTR [r12+100]
  006af	42 8d 0c 48	 lea	 ecx, DWORD PTR [rax+r9*2]
  006b3	45 03 d8	 add	 r11d, r8d
  006b6	41 03 c8	 add	 ecx, r8d
  006b9	45 03 d9	 add	 r11d, r9d
  006bc	44 33 db	 xor	 r11d, ebx
  006bf	41 8b 5c 24 68	 mov	 ebx, DWORD PTR [r12+104]
  006c4	41 d1 cb	 ror	 r11d, 1
  006c7	d1 c6		 rol	 esi, 1
  006c9	33 f1		 xor	 esi, ecx
  006cb	44 89 5c 24 08	 mov	 DWORD PTR blk$[rsp+8], r11d
  006d0	8b c6		 mov	 eax, esi
  006d2	89 74 24 0c	 mov	 DWORD PTR blk$[rsp+12], esi
  006d6	c1 e8 10	 shr	 eax, 16
  006d9	0f b6 d0	 movzx	 edx, al
  006dc	8b c6		 mov	 eax, esi
  006de	c1 e8 08	 shr	 eax, 8
  006e1	48 03 d2	 add	 rdx, rdx
  006e4	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  006ec	0f b6 c8	 movzx	 ecx, al
  006ef	8b c6		 mov	 eax, esi
  006f1	c1 e8 18	 shr	 eax, 24
  006f4	48 03 c9	 add	 rcx, rcx
  006f7	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  006ff	0f b6 c8	 movzx	 ecx, al
  00702	40 0f b6 c6	 movzx	 eax, sil
  00706	48 03 c0	 add	 rax, rax
  00709	48 03 c9	 add	 rcx, rcx
  0070c	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  00714	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  0071c	41 8b c3	 mov	 eax, r11d
  0071f	c1 e8 18	 shr	 eax, 24
  00722	0f b6 d0	 movzx	 edx, al
  00725	41 8b c3	 mov	 eax, r11d
  00728	c1 e8 10	 shr	 eax, 16
  0072b	48 03 d2	 add	 rdx, rdx
  0072e	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  00736	0f b6 c8	 movzx	 ecx, al
  00739	41 8b c3	 mov	 eax, r11d
  0073c	48 03 c9	 add	 rcx, rcx
  0073f	c1 e8 08	 shr	 eax, 8
  00742	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  0074a	0f b6 c8	 movzx	 ecx, al
  0074d	41 0f b6 c3	 movzx	 eax, r11b
  00751	48 03 c9	 add	 rcx, rcx
  00754	48 03 c0	 add	 rax, rax
  00757	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  0075f	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  00767	41 03 d8	 add	 ebx, r8d
  0076a	41 03 d9	 add	 ebx, r9d
  0076d	41 33 da	 xor	 ebx, r10d
  00770	d1 cb		 ror	 ebx, 1
  00772	89 1c 24	 mov	 DWORD PTR blk$[rsp], ebx
  00775	41 8b 44 24 6c	 mov	 eax, DWORD PTR [r12+108]
  0077a	45 8b 54 24 70	 mov	 r10d, DWORD PTR [r12+112]
  0077f	d1 c5		 rol	 ebp, 1
  00781	42 8d 0c 48	 lea	 ecx, DWORD PTR [rax+r9*2]
  00785	41 03 c8	 add	 ecx, r8d
  00788	33 e9		 xor	 ebp, ecx
  0078a	8b c5		 mov	 eax, ebp
  0078c	89 6c 24 04	 mov	 DWORD PTR blk$[rsp+4], ebp
  00790	c1 e8 10	 shr	 eax, 16
  00793	0f b6 d0	 movzx	 edx, al
  00796	8b c5		 mov	 eax, ebp
  00798	c1 e8 08	 shr	 eax, 8
  0079b	48 03 d2	 add	 rdx, rdx
  0079e	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  007a6	0f b6 c8	 movzx	 ecx, al
  007a9	8b c5		 mov	 eax, ebp
  007ab	c1 e8 18	 shr	 eax, 24
  007ae	48 03 c9	 add	 rcx, rcx
  007b1	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  007b9	0f b6 c8	 movzx	 ecx, al
  007bc	40 0f b6 c5	 movzx	 eax, bpl
  007c0	48 03 c0	 add	 rax, rax
  007c3	48 03 c9	 add	 rcx, rcx
  007c6	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  007ce	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  007d6	8b c3		 mov	 eax, ebx
  007d8	c1 e8 18	 shr	 eax, 24
  007db	0f b6 d0	 movzx	 edx, al
  007de	8b c3		 mov	 eax, ebx
  007e0	c1 e8 10	 shr	 eax, 16
  007e3	48 03 d2	 add	 rdx, rdx
  007e6	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  007ee	0f b6 c8	 movzx	 ecx, al
  007f1	8b c3		 mov	 eax, ebx
  007f3	c1 e8 08	 shr	 eax, 8
  007f6	48 03 c9	 add	 rcx, rcx
  007f9	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  00801	0f b6 c8	 movzx	 ecx, al
  00804	0f b6 c3	 movzx	 eax, bl
  00807	48 03 c0	 add	 rax, rax
  0080a	48 03 c9	 add	 rcx, rcx
  0080d	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  00815	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  0081d	41 8b 44 24 74	 mov	 eax, DWORD PTR [r12+116]
  00822	42 8d 0c 48	 lea	 ecx, DWORD PTR [rax+r9*2]
  00826	45 03 d0	 add	 r10d, r8d
  00829	45 03 d1	 add	 r10d, r9d
  0082c	41 03 c8	 add	 ecx, r8d
  0082f	45 33 d3	 xor	 r10d, r11d
  00832	41 d1 ca	 ror	 r10d, 1
  00835	d1 c6		 rol	 esi, 1
  00837	33 f1		 xor	 esi, ecx
  00839	44 89 54 24 08	 mov	 DWORD PTR blk$[rsp+8], r10d
  0083e	8b c6		 mov	 eax, esi
  00840	89 74 24 0c	 mov	 DWORD PTR blk$[rsp+12], esi
  00844	c1 e8 10	 shr	 eax, 16
  00847	0f b6 d0	 movzx	 edx, al
  0084a	8b c6		 mov	 eax, esi
  0084c	c1 e8 08	 shr	 eax, 8
  0084f	48 03 d2	 add	 rdx, rdx
  00852	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  0085a	0f b6 c8	 movzx	 ecx, al
  0085d	8b c6		 mov	 eax, esi
  0085f	c1 e8 18	 shr	 eax, 24
  00862	48 03 c9	 add	 rcx, rcx
  00865	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  0086d	0f b6 c8	 movzx	 ecx, al
  00870	40 0f b6 c6	 movzx	 eax, sil
  00874	48 03 c0	 add	 rax, rax
  00877	48 03 c9	 add	 rcx, rcx
  0087a	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  00882	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  0088a	41 8b c2	 mov	 eax, r10d
  0088d	c1 e8 18	 shr	 eax, 24
  00890	0f b6 d0	 movzx	 edx, al
  00893	41 8b c2	 mov	 eax, r10d
  00896	c1 e8 10	 shr	 eax, 16
  00899	48 03 d2	 add	 rdx, rdx
  0089c	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  008a4	0f b6 c8	 movzx	 ecx, al
  008a7	48 03 c9	 add	 rcx, rcx
  008aa	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  008b2	45 8b 5c 24 78	 mov	 r11d, DWORD PTR [r12+120]
  008b7	41 8b c2	 mov	 eax, r10d
  008ba	c1 e8 08	 shr	 eax, 8
  008bd	0f b6 c8	 movzx	 ecx, al
  008c0	41 0f b6 c2	 movzx	 eax, r10b
  008c4	48 03 c0	 add	 rax, rax
  008c7	48 03 c9	 add	 rcx, rcx
  008ca	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  008d2	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  008da	41 8b 44 24 7c	 mov	 eax, DWORD PTR [r12+124]
  008df	42 8d 0c 48	 lea	 ecx, DWORD PTR [rax+r9*2]
  008e3	45 03 d8	 add	 r11d, r8d
  008e6	41 03 c8	 add	 ecx, r8d
  008e9	45 03 d9	 add	 r11d, r9d
  008ec	44 33 db	 xor	 r11d, ebx
  008ef	41 8b 9c 24 80
	00 00 00	 mov	 ebx, DWORD PTR [r12+128]
  008f7	41 d1 cb	 ror	 r11d, 1
  008fa	d1 c5		 rol	 ebp, 1
  008fc	33 e9		 xor	 ebp, ecx
  008fe	44 89 1c 24	 mov	 DWORD PTR blk$[rsp], r11d
  00902	8b c5		 mov	 eax, ebp
  00904	89 6c 24 04	 mov	 DWORD PTR blk$[rsp+4], ebp
  00908	c1 e8 10	 shr	 eax, 16
  0090b	0f b6 d0	 movzx	 edx, al
  0090e	8b c5		 mov	 eax, ebp
  00910	c1 e8 08	 shr	 eax, 8
  00913	48 03 d2	 add	 rdx, rdx
  00916	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  0091e	0f b6 c8	 movzx	 ecx, al
  00921	8b c5		 mov	 eax, ebp
  00923	c1 e8 18	 shr	 eax, 24
  00926	48 03 c9	 add	 rcx, rcx
  00929	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  00931	0f b6 c8	 movzx	 ecx, al
  00934	40 0f b6 c5	 movzx	 eax, bpl
  00938	48 03 c0	 add	 rax, rax
  0093b	48 03 c9	 add	 rcx, rcx
  0093e	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  00946	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  0094e	41 8b c3	 mov	 eax, r11d
  00951	c1 e8 18	 shr	 eax, 24
  00954	0f b6 d0	 movzx	 edx, al
  00957	41 8b c3	 mov	 eax, r11d
  0095a	c1 e8 10	 shr	 eax, 16
  0095d	48 03 d2	 add	 rdx, rdx
  00960	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  00968	0f b6 c8	 movzx	 ecx, al
  0096b	41 8b c3	 mov	 eax, r11d
  0096e	c1 e8 08	 shr	 eax, 8
  00971	48 03 c9	 add	 rcx, rcx
  00974	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  0097c	0f b6 c8	 movzx	 ecx, al
  0097f	41 0f b6 c3	 movzx	 eax, r11b
  00983	48 03 c0	 add	 rax, rax
  00986	48 03 c9	 add	 rcx, rcx
  00989	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  00991	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  00999	41 8b 84 24 84
	00 00 00	 mov	 eax, DWORD PTR [r12+132]
  009a1	42 8d 0c 48	 lea	 ecx, DWORD PTR [rax+r9*2]
  009a5	41 03 d8	 add	 ebx, r8d
  009a8	41 03 d9	 add	 ebx, r9d
  009ab	41 03 c8	 add	 ecx, r8d
  009ae	41 33 da	 xor	 ebx, r10d
  009b1	d1 cb		 ror	 ebx, 1
  009b3	d1 c6		 rol	 esi, 1
  009b5	33 f1		 xor	 esi, ecx
  009b7	89 5c 24 08	 mov	 DWORD PTR blk$[rsp+8], ebx
  009bb	8b c6		 mov	 eax, esi
  009bd	89 74 24 0c	 mov	 DWORD PTR blk$[rsp+12], esi
  009c1	c1 e8 10	 shr	 eax, 16
  009c4	0f b6 d0	 movzx	 edx, al
  009c7	8b c6		 mov	 eax, esi
  009c9	c1 e8 08	 shr	 eax, 8
  009cc	48 03 d2	 add	 rdx, rdx
  009cf	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  009d7	0f b6 c8	 movzx	 ecx, al
  009da	8b c6		 mov	 eax, esi
  009dc	48 03 c9	 add	 rcx, rcx
  009df	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  009e7	c1 e8 18	 shr	 eax, 24
  009ea	41 8b bc 24 88
	00 00 00	 mov	 edi, DWORD PTR [r12+136]
  009f2	0f b6 c8	 movzx	 ecx, al
  009f5	45 8b 94 24 90
	00 00 00	 mov	 r10d, DWORD PTR [r12+144]
  009fd	48 03 c9	 add	 rcx, rcx
  00a00	40 0f b6 c6	 movzx	 eax, sil
  00a04	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  00a0c	48 03 c0	 add	 rax, rax
  00a0f	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  00a17	8b c3		 mov	 eax, ebx
  00a19	c1 e8 18	 shr	 eax, 24
  00a1c	0f b6 d0	 movzx	 edx, al
  00a1f	8b c3		 mov	 eax, ebx
  00a21	c1 e8 10	 shr	 eax, 16
  00a24	48 03 d2	 add	 rdx, rdx
  00a27	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  00a2f	0f b6 c8	 movzx	 ecx, al
  00a32	8b c3		 mov	 eax, ebx
  00a34	c1 e8 08	 shr	 eax, 8
  00a37	48 03 c9	 add	 rcx, rcx
  00a3a	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  00a42	0f b6 c8	 movzx	 ecx, al
  00a45	0f b6 c3	 movzx	 eax, bl
  00a48	48 03 c0	 add	 rax, rax
  00a4b	48 03 c9	 add	 rcx, rcx
  00a4e	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  00a56	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  00a5e	41 8b 84 24 8c
	00 00 00	 mov	 eax, DWORD PTR [r12+140]
  00a66	42 8d 0c 48	 lea	 ecx, DWORD PTR [rax+r9*2]
  00a6a	41 03 f8	 add	 edi, r8d
  00a6d	41 03 c8	 add	 ecx, r8d
  00a70	41 03 f9	 add	 edi, r9d
  00a73	41 33 fb	 xor	 edi, r11d
  00a76	d1 cf		 ror	 edi, 1
  00a78	d1 c5		 rol	 ebp, 1
  00a7a	33 e9		 xor	 ebp, ecx
  00a7c	89 3c 24	 mov	 DWORD PTR blk$[rsp], edi
  00a7f	8b c5		 mov	 eax, ebp
  00a81	89 6c 24 04	 mov	 DWORD PTR blk$[rsp+4], ebp
  00a85	c1 e8 10	 shr	 eax, 16
  00a88	0f b6 d0	 movzx	 edx, al
  00a8b	8b c5		 mov	 eax, ebp
  00a8d	c1 e8 08	 shr	 eax, 8
  00a90	48 03 d2	 add	 rdx, rdx
  00a93	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  00a9b	0f b6 c8	 movzx	 ecx, al
  00a9e	8b c5		 mov	 eax, ebp
  00aa0	c1 e8 18	 shr	 eax, 24
  00aa3	48 03 c9	 add	 rcx, rcx
  00aa6	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  00aae	0f b6 c8	 movzx	 ecx, al
  00ab1	40 0f b6 c5	 movzx	 eax, bpl
  00ab5	48 03 c0	 add	 rax, rax
  00ab8	48 03 c9	 add	 rcx, rcx
  00abb	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  00ac3	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  00acb	8b c7		 mov	 eax, edi
  00acd	c1 e8 18	 shr	 eax, 24
  00ad0	0f b6 d0	 movzx	 edx, al
  00ad3	8b c7		 mov	 eax, edi
  00ad5	c1 e8 10	 shr	 eax, 16
  00ad8	48 03 d2	 add	 rdx, rdx
  00adb	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  00ae3	0f b6 c8	 movzx	 ecx, al
  00ae6	8b c7		 mov	 eax, edi
  00ae8	48 03 c9	 add	 rcx, rcx
  00aeb	c1 e8 08	 shr	 eax, 8
  00aee	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  00af6	0f b6 c8	 movzx	 ecx, al
  00af9	40 0f b6 c7	 movzx	 eax, dil
  00afd	48 03 c9	 add	 rcx, rcx
  00b00	48 03 c0	 add	 rax, rax
  00b03	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  00b0b	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  00b13	41 8b 84 24 94
	00 00 00	 mov	 eax, DWORD PTR [r12+148]
  00b1b	45 03 d0	 add	 r10d, r8d
  00b1e	42 8d 0c 48	 lea	 ecx, DWORD PTR [rax+r9*2]
  00b22	45 03 d1	 add	 r10d, r9d
  00b25	44 33 d3	 xor	 r10d, ebx
  00b28	41 d1 ca	 ror	 r10d, 1
  00b2b	d1 c6		 rol	 esi, 1
  00b2d	44 89 54 24 08	 mov	 DWORD PTR blk$[rsp+8], r10d

; 443  : 
; 444  :     out_blk[0] = LE32(blk[2] ^ l_key[4]);
; 445  :     out_blk[1] = LE32(blk[3] ^ l_key[5]);
; 446  :     out_blk[2] = LE32(blk[0] ^ l_key[6]);
; 447  :     out_blk[3] = LE32(blk[1] ^ l_key[7]); 
; 448  : };

  00b32	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00b37	41 03 c8	 add	 ecx, r8d
  00b3a	33 f1		 xor	 esi, ecx
  00b3c	8b c6		 mov	 eax, esi
  00b3e	89 74 24 0c	 mov	 DWORD PTR blk$[rsp+12], esi
  00b42	c1 e8 10	 shr	 eax, 16
  00b45	0f b6 d0	 movzx	 edx, al
  00b48	8b c6		 mov	 eax, esi
  00b4a	c1 e8 08	 shr	 eax, 8
  00b4d	48 03 d2	 add	 rdx, rdx
  00b50	45 8b 8c d4 bc
	00 00 00	 mov	 r9d, DWORD PTR [r12+rdx*8+188]
  00b58	0f b6 c8	 movzx	 ecx, al
  00b5b	8b c6		 mov	 eax, esi
  00b5d	c1 e8 18	 shr	 eax, 24
  00b60	48 03 c9	 add	 rcx, rcx
  00b63	45 33 8c cc b8
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+184]
  00b6b	0f b6 c8	 movzx	 ecx, al
  00b6e	40 0f b6 c6	 movzx	 eax, sil
  00b72	48 03 c0	 add	 rax, rax
  00b75	48 03 c9	 add	 rcx, rcx
  00b78	45 33 8c cc b0
	00 00 00	 xor	 r9d, DWORD PTR [r12+rcx*8+176]
  00b80	45 33 8c c4 b4
	00 00 00	 xor	 r9d, DWORD PTR [r12+rax*8+180]
  00b88	41 8b c2	 mov	 eax, r10d
  00b8b	c1 e8 18	 shr	 eax, 24
  00b8e	0f b6 d0	 movzx	 edx, al
  00b91	41 8b c2	 mov	 eax, r10d
  00b94	c1 e8 10	 shr	 eax, 16
  00b97	48 03 d2	 add	 rdx, rdx
  00b9a	45 8b 84 d4 bc
	00 00 00	 mov	 r8d, DWORD PTR [r12+rdx*8+188]
  00ba2	41 8b 94 24 98
	00 00 00	 mov	 edx, DWORD PTR [r12+152]
  00baa	0f b6 c8	 movzx	 ecx, al
  00bad	48 03 c9	 add	 rcx, rcx
  00bb0	41 8b c2	 mov	 eax, r10d
  00bb3	45 33 84 cc b8
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+184]
  00bbb	c1 e8 08	 shr	 eax, 8
  00bbe	0f b6 c8	 movzx	 ecx, al
  00bc1	41 0f b6 c2	 movzx	 eax, r10b
  00bc5	48 03 c0	 add	 rax, rax
  00bc8	48 03 c9	 add	 rcx, rcx
  00bcb	45 33 84 cc b4
	00 00 00	 xor	 r8d, DWORD PTR [r12+rcx*8+180]
  00bd3	45 33 84 c4 b0
	00 00 00	 xor	 r8d, DWORD PTR [r12+rax*8+176]
  00bdb	41 8b 84 24 9c
	00 00 00	 mov	 eax, DWORD PTR [r12+156]
  00be3	42 8d 0c 48	 lea	 ecx, DWORD PTR [rax+r9*2]
  00be7	41 8b 44 24 10	 mov	 eax, DWORD PTR [r12+16]
  00bec	41 03 d0	 add	 edx, r8d
  00bef	41 33 c2	 xor	 eax, r10d
  00bf2	41 03 d1	 add	 edx, r9d
  00bf5	41 03 c8	 add	 ecx, r8d
  00bf8	41 89 45 00	 mov	 DWORD PTR [r13], eax
  00bfc	41 8b 44 24 14	 mov	 eax, DWORD PTR [r12+20]
  00c01	33 d7		 xor	 edx, edi
  00c03	33 c6		 xor	 eax, esi
  00c05	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00c0a	d1 ca		 ror	 edx, 1
  00c0c	41 89 45 04	 mov	 DWORD PTR [r13+4], eax
  00c10	41 8b 44 24 18	 mov	 eax, DWORD PTR [r12+24]
  00c15	d1 c5		 rol	 ebp, 1
  00c17	33 c2		 xor	 eax, edx
  00c19	33 e9		 xor	 ebp, ecx
  00c1b	41 89 45 08	 mov	 DWORD PTR [r13+8], eax
  00c1f	41 8b 44 24 1c	 mov	 eax, DWORD PTR [r12+28]
  00c24	33 c5		 xor	 eax, ebp
  00c26	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00c2b	41 89 45 0c	 mov	 DWORD PTR [r13+12], eax
  00c2f	48 83 c4 10	 add	 rsp, 16
  00c33	41 5d		 pop	 r13
  00c35	41 5c		 pop	 r12
  00c37	5f		 pop	 rdi
  00c38	c3		 ret	 0
twofish_encrypt ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT mds_rem
_TEXT	SEGMENT
p0$ = 8
p1$ = 16
mds_rem	PROC						; COMDAT

; 340  : {   u4byte  i, t, u;

  00000	44 8b d9	 mov	 r11d, ecx

; 341  : 
; 342  :     for(i = 0; i < 8; ++i)

  00003	41 ba 08 00 00
	00		 mov	 r10d, 8
$LL5@mds_rem:

; 343  :     {
; 344  :         t = p1 >> 24;   // get most significant coefficient
; 345  :         
; 346  :         p1 = (p1 << 8) | (p0 >> 24); p0 <<= 8;  // shift others up

  00009	8b c2		 mov	 eax, edx
  0000b	44 8b ca	 mov	 r9d, edx
  0000e	45 8b c3	 mov	 r8d, r11d
  00011	41 c1 e8 18	 shr	 r8d, 24
  00015	c1 e0 08	 shl	 eax, 8
  00018	41 c1 e9 18	 shr	 r9d, 24
  0001c	41 8b d0	 mov	 edx, r8d
  0001f	41 c1 e3 08	 shl	 r11d, 8

; 347  :             
; 348  :         // multiply t by a (the primitive element - i.e. left shift)
; 349  : 
; 350  :         u = (t << 1); 

  00023	43 8d 0c 09	 lea	 ecx, DWORD PTR [r9+r9]
  00027	0b d0		 or	 edx, eax

; 351  :         
; 352  :         if(t & 0x80)            // subtract modular polynomial on overflow

  00029	45 84 c9	 test	 r9b, r9b
  0002c	79 06		 jns	 SHORT $LN2@mds_rem

; 353  :         
; 354  :             u ^= G_MOD; 

  0002e	81 f1 4d 01 00
	00		 xor	 ecx, 333		; 0000014dH
$LN2@mds_rem:

; 355  : 
; 356  :         p1 ^= t ^ (u << 16);    // remove t * (a * x^2 + 1)  

  00034	8b c1		 mov	 eax, ecx
  00036	c1 e0 10	 shl	 eax, 16
  00039	41 33 c1	 xor	 eax, r9d
  0003c	33 d0		 xor	 edx, eax

; 357  : 
; 358  :         u ^= (t >> 1);          // form u = a * t + t / a = t * (a + 1 / a); 

  0003e	41 8b c1	 mov	 eax, r9d
  00041	d1 e8		 shr	 eax, 1
  00043	33 c8		 xor	 ecx, eax

; 359  :         
; 360  :         if(t & 0x01)            // add the modular polynomial on underflow

  00045	41 f6 c1 01	 test	 r9b, 1
  00049	74 06		 je	 SHORT $LN1@mds_rem

; 361  :         
; 362  :             u ^= G_MOD >> 1;

  0004b	81 f1 a6 00 00
	00		 xor	 ecx, 166		; 000000a6H
$LN1@mds_rem:

; 363  : 
; 364  :         p1 ^= (u << 24) | (u << 8); // remove t * (a + 1/a) * (x^3 + x)

  00051	8b c1		 mov	 eax, ecx
  00053	c1 e0 10	 shl	 eax, 16
  00056	0b c1		 or	 eax, ecx
  00058	c1 e0 08	 shl	 eax, 8
  0005b	33 d0		 xor	 edx, eax
  0005d	49 83 ea 01	 sub	 r10, 1
  00061	75 a6		 jne	 SHORT $LL5@mds_rem

; 365  :     }
; 366  : 
; 367  :     return p1;

  00063	8b c2		 mov	 eax, edx

; 368  : };

  00065	c3		 ret	 0
mds_rem	ENDP
m_tab	DD	0400H DUP (?)
q_tab	DB	0200H DUP (?)
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_mk_tab DD imagerel gen_mk_tab
	DD	imagerel gen_mk_tab+960
	DD	imagerel $unwind$gen_mk_tab
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_mk_tab DD 020501H
	DD	013405H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT gen_mk_tab
_TEXT	SEGMENT
instance$ = 8
key$ = 16
gen_mk_tab PROC						; COMDAT

; 242  : {   u4byte  i;

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx

; 243  :     u1byte  by;
; 244  : 
; 245  : 	u4byte *mk_tab = instance->mk_tab;
; 246  : 
; 247  :     switch(instance->k_len)

  00005	8b 81 b0 10 00
	00		 mov	 eax, DWORD PTR [rcx+4272]
  0000b	4c 8b d2	 mov	 r10, rdx
  0000e	83 e8 02	 sub	 eax, 2
  00011	0f 84 bf 02 00
	00		 je	 $LN12@gen_mk_tab
  00017	83 e8 01	 sub	 eax, 1
  0001a	0f 84 84 01 00
	00		 je	 $LN8@gen_mk_tab
  00020	83 f8 01	 cmp	 eax, 1
  00023	0f 85 91 03 00
	00		 jne	 $LN9@gen_mk_tab

; 274  :     
; 275  :     case 4: for(i = 0; i < 256; ++i)

  00029	45 33 db	 xor	 r11d, r11d
  0002c	48 8d 99 b8 00
	00 00		 lea	 rbx, QWORD PTR [rcx+184]
  00033	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:__ImageBase
$LL3@gen_mk_tab:

; 276  :             {
; 277  :                 by = (u1byte)i;
; 278  : #ifdef ONE_STEP
; 279  :                 mk_tab[0 + 4*i] = mds(0, q40(by)); mk_tab[1 + 4*i] = mds(1, q41(by));

  0003a	41 0f b6 4a 0c	 movzx	 ecx, BYTE PTR [r10+12]
  0003f	45 0f b6 c3	 movzx	 r8d, r11b
  00043	41 ff c3	 inc	 r11d
  00046	43 0f b6 84 08
	00 01 00 00	 movzx	 eax, BYTE PTR q_tab[r8+r9+256]
  0004f	48 33 c8	 xor	 rcx, rax
  00052	41 0f b6 42 08	 movzx	 eax, BYTE PTR [r10+8]
  00057	42 0f b6 8c 09
	00 01 00 00	 movzx	 ecx, BYTE PTR q_tab[rcx+r9+256]
  00060	48 33 c8	 xor	 rcx, rax
  00063	41 0f b6 42 04	 movzx	 eax, BYTE PTR [r10+4]
  00068	42 0f b6 94 09
	00 00 00 00	 movzx	 edx, BYTE PTR q_tab[rcx+r9]
  00071	48 33 d0	 xor	 rdx, rax
  00074	41 0f b6 02	 movzx	 eax, BYTE PTR [r10]
  00078	42 0f b6 8c 0a
	00 00 00 00	 movzx	 ecx, BYTE PTR q_tab[rdx+r9]
  00081	48 33 c8	 xor	 rcx, rax
  00084	41 8b 84 89 00
	00 00 00	 mov	 eax, DWORD PTR m_tab[r9+rcx*4]
  0008c	89 43 f8	 mov	 DWORD PTR [rbx-8], eax
  0008f	41 8b 42 0c	 mov	 eax, DWORD PTR [r10+12]
  00093	c1 e8 08	 shr	 eax, 8
  00096	0f b6 c8	 movzx	 ecx, al
  00099	43 0f b6 84 08
	00 00 00 00	 movzx	 eax, BYTE PTR q_tab[r8+r9]
  000a2	48 33 c8	 xor	 rcx, rax
  000a5	41 8b 42 08	 mov	 eax, DWORD PTR [r10+8]
  000a9	42 0f b6 94 09
	00 01 00 00	 movzx	 edx, BYTE PTR q_tab[rcx+r9+256]
  000b2	c1 e8 08	 shr	 eax, 8
  000b5	0f b6 c0	 movzx	 eax, al
  000b8	48 33 d0	 xor	 rdx, rax
  000bb	41 8b 42 04	 mov	 eax, DWORD PTR [r10+4]
  000bf	42 0f b6 8c 0a
	00 01 00 00	 movzx	 ecx, BYTE PTR q_tab[rdx+r9+256]
  000c8	c1 e8 08	 shr	 eax, 8
  000cb	0f b6 c0	 movzx	 eax, al
  000ce	48 33 c8	 xor	 rcx, rax
  000d1	41 8b 02	 mov	 eax, DWORD PTR [r10]
  000d4	42 0f b6 94 09
	00 00 00 00	 movzx	 edx, BYTE PTR q_tab[rcx+r9]
  000dd	c1 e8 08	 shr	 eax, 8
  000e0	0f b6 c0	 movzx	 eax, al
  000e3	48 33 d0	 xor	 rdx, rax
  000e6	41 8b 84 91 00
	04 00 00	 mov	 eax, DWORD PTR m_tab[r9+rdx*4+1024]
  000ee	89 43 fc	 mov	 DWORD PTR [rbx-4], eax

; 280  :                 mk_tab[2 + 4*i] = mds(2, q42(by)); mk_tab[3 + 4*i] = mds(3, q43(by));

  000f1	43 0f b6 84 08
	00 00 00 00	 movzx	 eax, BYTE PTR q_tab[r8+r9]
  000fa	41 0f b6 4a 0e	 movzx	 ecx, BYTE PTR [r10+14]
  000ff	48 33 c8	 xor	 rcx, rax
  00102	41 0f b6 42 0a	 movzx	 eax, BYTE PTR [r10+10]
  00107	42 0f b6 94 09
	00 00 00 00	 movzx	 edx, BYTE PTR q_tab[rcx+r9]
  00110	48 33 d0	 xor	 rdx, rax
  00113	41 0f b6 42 06	 movzx	 eax, BYTE PTR [r10+6]
  00118	42 0f b6 8c 0a
	00 00 00 00	 movzx	 ecx, BYTE PTR q_tab[rdx+r9]
  00121	48 33 c8	 xor	 rcx, rax
  00124	41 0f b6 42 02	 movzx	 eax, BYTE PTR [r10+2]
  00129	42 0f b6 94 09
	00 01 00 00	 movzx	 edx, BYTE PTR q_tab[rcx+r9+256]
  00132	48 33 d0	 xor	 rdx, rax
  00135	41 8b 84 91 00
	08 00 00	 mov	 eax, DWORD PTR m_tab[r9+rdx*4+2048]
  0013d	89 03		 mov	 DWORD PTR [rbx], eax
  0013f	43 0f b6 84 08
	00 01 00 00	 movzx	 eax, BYTE PTR q_tab[r8+r9+256]
  00148	41 0f b6 4a 0f	 movzx	 ecx, BYTE PTR [r10+15]
  0014d	48 33 c8	 xor	 rcx, rax
  00150	41 0f b6 42 0b	 movzx	 eax, BYTE PTR [r10+11]
  00155	48 83 c3 10	 add	 rbx, 16
  00159	42 0f b6 94 09
	00 00 00 00	 movzx	 edx, BYTE PTR q_tab[rcx+r9]
  00162	48 33 d0	 xor	 rdx, rax
  00165	41 0f b6 42 07	 movzx	 eax, BYTE PTR [r10+7]
  0016a	42 0f b6 8c 0a
	00 01 00 00	 movzx	 ecx, BYTE PTR q_tab[rdx+r9+256]
  00173	48 33 c8	 xor	 rcx, rax
  00176	41 0f b6 42 03	 movzx	 eax, BYTE PTR [r10+3]
  0017b	42 0f b6 94 09
	00 01 00 00	 movzx	 edx, BYTE PTR q_tab[rcx+r9+256]
  00184	48 33 d0	 xor	 rdx, rax
  00187	41 8b 84 91 00
	0c 00 00	 mov	 eax, DWORD PTR m_tab[r9+rdx*4+3072]
  0018f	89 43 f4	 mov	 DWORD PTR [rbx-12], eax
  00192	41 81 fb 00 01
	00 00		 cmp	 r11d, 256		; 00000100H
  00199	0f 82 9b fe ff
	ff		 jb	 $LL3@gen_mk_tab

; 274  :     
; 275  :     case 4: for(i = 0; i < 256; ++i)

  0019f	e9 16 02 00 00	 jmp	 $LN9@gen_mk_tab
$LN8@gen_mk_tab:

; 255  : #else
; 256  :                 sb[0][i] = q20(by); sb[1][i] = q21(by); 
; 257  :                 sb[2][i] = q22(by); sb[3][i] = q23(by);
; 258  : #endif
; 259  :             }
; 260  :             break;
; 261  :     
; 262  :     case 3: for(i = 0; i < 256; ++i)

  001a4	45 33 db	 xor	 r11d, r11d
  001a7	48 8d 99 b8 00
	00 00		 lea	 rbx, QWORD PTR [rcx+184]
  001ae	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:__ImageBase
$LL7@gen_mk_tab:

; 263  :             {
; 264  :                 by = (u1byte)i;
; 265  : #ifdef ONE_STEP
; 266  :                 mk_tab[0 + 4*i] = mds(0, q30(by)); mk_tab[1 + 4*i] = mds(1, q31(by));

  001b5	41 0f b6 4a 08	 movzx	 ecx, BYTE PTR [r10+8]
  001ba	45 0f b6 c3	 movzx	 r8d, r11b
  001be	41 ff c3	 inc	 r11d
  001c1	43 0f b6 84 08
	00 01 00 00	 movzx	 eax, BYTE PTR q_tab[r8+r9+256]
  001ca	48 33 c8	 xor	 rcx, rax
  001cd	41 0f b6 42 04	 movzx	 eax, BYTE PTR [r10+4]
  001d2	42 0f b6 94 09
	00 00 00 00	 movzx	 edx, BYTE PTR q_tab[rcx+r9]
  001db	48 33 d0	 xor	 rdx, rax
  001de	41 0f b6 02	 movzx	 eax, BYTE PTR [r10]
  001e2	42 0f b6 8c 0a
	00 00 00 00	 movzx	 ecx, BYTE PTR q_tab[rdx+r9]
  001eb	48 33 c8	 xor	 rcx, rax
  001ee	41 8b 84 89 00
	00 00 00	 mov	 eax, DWORD PTR m_tab[r9+rcx*4]
  001f6	89 43 f8	 mov	 DWORD PTR [rbx-8], eax
  001f9	41 8b 42 08	 mov	 eax, DWORD PTR [r10+8]
  001fd	c1 e8 08	 shr	 eax, 8
  00200	0f b6 c8	 movzx	 ecx, al
  00203	43 0f b6 84 08
	00 01 00 00	 movzx	 eax, BYTE PTR q_tab[r8+r9+256]
  0020c	48 33 c8	 xor	 rcx, rax
  0020f	41 8b 42 04	 mov	 eax, DWORD PTR [r10+4]
  00213	42 0f b6 94 09
	00 01 00 00	 movzx	 edx, BYTE PTR q_tab[rcx+r9+256]
  0021c	c1 e8 08	 shr	 eax, 8
  0021f	0f b6 c0	 movzx	 eax, al
  00222	48 33 d0	 xor	 rdx, rax
  00225	41 8b 02	 mov	 eax, DWORD PTR [r10]
  00228	42 0f b6 8c 0a
	00 00 00 00	 movzx	 ecx, BYTE PTR q_tab[rdx+r9]
  00231	c1 e8 08	 shr	 eax, 8
  00234	0f b6 c0	 movzx	 eax, al
  00237	48 33 c8	 xor	 rcx, rax
  0023a	41 8b 84 89 00
	04 00 00	 mov	 eax, DWORD PTR m_tab[r9+rcx*4+1024]
  00242	89 43 fc	 mov	 DWORD PTR [rbx-4], eax

; 267  :                 mk_tab[2 + 4*i] = mds(2, q32(by)); mk_tab[3 + 4*i] = mds(3, q33(by));

  00245	43 0f b6 84 08
	00 00 00 00	 movzx	 eax, BYTE PTR q_tab[r8+r9]
  0024e	41 0f b6 4a 0a	 movzx	 ecx, BYTE PTR [r10+10]
  00253	48 33 c8	 xor	 rcx, rax
  00256	41 0f b6 42 06	 movzx	 eax, BYTE PTR [r10+6]
  0025b	42 0f b6 94 09
	00 00 00 00	 movzx	 edx, BYTE PTR q_tab[rcx+r9]
  00264	48 33 d0	 xor	 rdx, rax
  00267	41 0f b6 42 02	 movzx	 eax, BYTE PTR [r10+2]
  0026c	42 0f b6 8c 0a
	00 01 00 00	 movzx	 ecx, BYTE PTR q_tab[rdx+r9+256]
  00275	48 33 c8	 xor	 rcx, rax
  00278	41 8b 84 89 00
	08 00 00	 mov	 eax, DWORD PTR m_tab[r9+rcx*4+2048]
  00280	89 03		 mov	 DWORD PTR [rbx], eax
  00282	43 0f b6 84 08
	00 00 00 00	 movzx	 eax, BYTE PTR q_tab[r8+r9]
  0028b	41 0f b6 4a 0b	 movzx	 ecx, BYTE PTR [r10+11]
  00290	48 33 c8	 xor	 rcx, rax
  00293	41 0f b6 42 07	 movzx	 eax, BYTE PTR [r10+7]
  00298	48 83 c3 10	 add	 rbx, 16
  0029c	42 0f b6 94 09
	00 01 00 00	 movzx	 edx, BYTE PTR q_tab[rcx+r9+256]
  002a5	48 33 d0	 xor	 rdx, rax
  002a8	41 0f b6 42 03	 movzx	 eax, BYTE PTR [r10+3]
  002ad	42 0f b6 8c 0a
	00 01 00 00	 movzx	 ecx, BYTE PTR q_tab[rdx+r9+256]
  002b6	48 33 c8	 xor	 rcx, rax
  002b9	41 8b 84 89 00
	0c 00 00	 mov	 eax, DWORD PTR m_tab[r9+rcx*4+3072]
  002c1	89 43 f4	 mov	 DWORD PTR [rbx-12], eax
  002c4	41 81 fb 00 01
	00 00		 cmp	 r11d, 256		; 00000100H
  002cb	0f 82 e4 fe ff
	ff		 jb	 $LL7@gen_mk_tab

; 268  : #else
; 269  :                 sb[0][i] = q30(by); sb[1][i] = q31(by); 
; 270  :                 sb[2][i] = q32(by); sb[3][i] = q33(by);
; 271  : #endif
; 272  :             }
; 273  :             break;

  002d1	e9 e4 00 00 00	 jmp	 $LN9@gen_mk_tab
$LN12@gen_mk_tab:

; 248  :     {
; 249  :     case 2: for(i = 0; i < 256; ++i)

  002d6	45 33 db	 xor	 r11d, r11d
  002d9	48 8d 99 b8 00
	00 00		 lea	 rbx, QWORD PTR [rcx+184]
  002e0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:__ImageBase
$LL11@gen_mk_tab:

; 250  :             {
; 251  :                 by = (u1byte)i;
; 252  : #ifdef ONE_STEP
; 253  :                 mk_tab[0 + 4*i] = mds(0, q20(by)); mk_tab[1 + 4*i] = mds(1, q21(by));

  002e7	41 0f b6 42 04	 movzx	 eax, BYTE PTR [r10+4]
  002ec	45 0f b6 c3	 movzx	 r8d, r11b
  002f0	41 ff c3	 inc	 r11d
  002f3	43 0f b6 8c 08
	00 00 00 00	 movzx	 ecx, BYTE PTR q_tab[r8+r9]
  002fc	48 33 c8	 xor	 rcx, rax
  002ff	41 0f b6 02	 movzx	 eax, BYTE PTR [r10]
  00303	42 0f b6 94 09
	00 00 00 00	 movzx	 edx, BYTE PTR q_tab[rcx+r9]
  0030c	48 33 d0	 xor	 rdx, rax
  0030f	41 8b 84 91 00
	00 00 00	 mov	 eax, DWORD PTR m_tab[r9+rdx*4]
  00317	89 43 f8	 mov	 DWORD PTR [rbx-8], eax
  0031a	41 8b 42 04	 mov	 eax, DWORD PTR [r10+4]
  0031e	c1 e8 08	 shr	 eax, 8
  00321	0f b6 c8	 movzx	 ecx, al
  00324	43 0f b6 84 08
	00 01 00 00	 movzx	 eax, BYTE PTR q_tab[r8+r9+256]
  0032d	48 33 c8	 xor	 rcx, rax
  00330	41 8b 02	 mov	 eax, DWORD PTR [r10]
  00333	42 0f b6 94 09
	00 00 00 00	 movzx	 edx, BYTE PTR q_tab[rcx+r9]
  0033c	c1 e8 08	 shr	 eax, 8
  0033f	0f b6 c0	 movzx	 eax, al
  00342	48 33 d0	 xor	 rdx, rax
  00345	41 8b 84 91 00
	04 00 00	 mov	 eax, DWORD PTR m_tab[r9+rdx*4+1024]
  0034d	89 43 fc	 mov	 DWORD PTR [rbx-4], eax

; 254  :                 mk_tab[2 + 4*i] = mds(2, q22(by)); mk_tab[3 + 4*i] = mds(3, q23(by));

  00350	43 0f b6 84 08
	00 00 00 00	 movzx	 eax, BYTE PTR q_tab[r8+r9]
  00359	41 0f b6 4a 06	 movzx	 ecx, BYTE PTR [r10+6]
  0035e	48 33 c8	 xor	 rcx, rax
  00361	41 0f b6 42 02	 movzx	 eax, BYTE PTR [r10+2]
  00366	42 0f b6 94 09
	00 01 00 00	 movzx	 edx, BYTE PTR q_tab[rcx+r9+256]
  0036f	48 33 d0	 xor	 rdx, rax
  00372	41 8b 84 91 00
	08 00 00	 mov	 eax, DWORD PTR m_tab[r9+rdx*4+2048]
  0037a	89 03		 mov	 DWORD PTR [rbx], eax
  0037c	43 0f b6 84 08
	00 01 00 00	 movzx	 eax, BYTE PTR q_tab[r8+r9+256]
  00385	41 0f b6 4a 07	 movzx	 ecx, BYTE PTR [r10+7]
  0038a	48 33 c8	 xor	 rcx, rax
  0038d	41 0f b6 42 03	 movzx	 eax, BYTE PTR [r10+3]
  00392	48 83 c3 10	 add	 rbx, 16
  00396	42 0f b6 94 09
	00 01 00 00	 movzx	 edx, BYTE PTR q_tab[rcx+r9+256]
  0039f	48 33 d0	 xor	 rdx, rax
  003a2	41 8b 84 91 00
	0c 00 00	 mov	 eax, DWORD PTR m_tab[r9+rdx*4+3072]
  003aa	89 43 f4	 mov	 DWORD PTR [rbx-12], eax
  003ad	41 81 fb 00 01
	00 00		 cmp	 r11d, 256		; 00000100H
  003b4	0f 82 2d ff ff
	ff		 jb	 $LL11@gen_mk_tab
$LN9@gen_mk_tab:

; 281  : #else
; 282  :                 sb[0][i] = q40(by); sb[1][i] = q41(by); 
; 283  :                 sb[2][i] = q42(by); sb[3][i] = q43(by);
; 284  : #endif
; 285  :             }
; 286  :     }
; 287  : };

  003ba	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  003bf	c3		 ret	 0
gen_mk_tab ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$h_fun DD	imagerel h_fun
	DD	imagerel h_fun+448
	DD	imagerel $unwind$h_fun
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$h_fun DD 040a01H
	DD	02740aH
	DD	013405H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT h_fun
_TEXT	SEGMENT
instance$ = 8
x$ = 16
key$ = 24
h_fun	PROC						; COMDAT

; 177  : {   u4byte  b0, b1, b2, b3;

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 7c 24 10	 mov	 QWORD PTR [rsp+16], rdi

; 178  : 
; 179  : #ifndef M_TABLE
; 180  :     u4byte  m5b_b0, m5b_b1, m5b_b2, m5b_b3;
; 181  :     u4byte  mef_b0, mef_b1, mef_b2, mef_b3;
; 182  : #endif
; 183  : 
; 184  :     b0 = extract_byte(x, 0); b1 = extract_byte(x, 1); b2 = extract_byte(x, 2); b3 = extract_byte(x, 3);

  0000a	8b c2		 mov	 eax, edx
  0000c	44 8b ca	 mov	 r9d, edx
  0000f	44 0f b6 d2	 movzx	 r10d, dl
  00013	c1 e8 08	 shr	 eax, 8
  00016	41 c1 e9 18	 shr	 r9d, 24

; 185  : 
; 186  :     switch(instance->k_len)

  0001a	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:__ImageBase
  00021	44 0f b6 d8	 movzx	 r11d, al
  00025	8b c2		 mov	 eax, edx
  00027	c1 e8 10	 shr	 eax, 16
  0002a	0f b6 d8	 movzx	 ebx, al
  0002d	8b 81 b0 10 00
	00		 mov	 eax, DWORD PTR [rcx+4272]
  00033	83 e8 02	 sub	 eax, 2
  00036	0f 84 b5 00 00
	00		 je	 $LN1@h_fun
  0003c	83 e8 01	 sub	 eax, 1
  0003f	74 57		 je	 SHORT $LN2@h_fun
  00041	83 f8 01	 cmp	 eax, 1
  00044	0f 85 4c 01 00
	00		 jne	 $LN4@h_fun

; 187  :     {
; 188  :     case 4: b0 = q(1, (u1byte) b0) ^ extract_byte(key[3],0);

  0004a	41 0f b6 40 0c	 movzx	 eax, BYTE PTR [r8+12]

; 189  :             b1 = q(0, (u1byte) b1) ^ extract_byte(key[3],1);

  0004f	41 8b 48 0c	 mov	 ecx, DWORD PTR [r8+12]
  00053	45 0f b6 94 3a
	00 01 00 00	 movzx	 r10d, BYTE PTR q_tab[r10+rdi+256]
  0005c	45 0f b6 9c 3b
	00 00 00 00	 movzx	 r11d, BYTE PTR q_tab[r11+rdi]

; 190  :             b2 = q(0, (u1byte) b2) ^ extract_byte(key[3],2);

  00065	0f b6 9c 3b 00
	00 00 00	 movzx	 ebx, BYTE PTR q_tab[rbx+rdi]
  0006d	44 33 d0	 xor	 r10d, eax
  00070	8b c1		 mov	 eax, ecx
  00072	c1 e8 08	 shr	 eax, 8
  00075	0f b6 c0	 movzx	 eax, al
  00078	44 33 d8	 xor	 r11d, eax
  0007b	8b c1		 mov	 eax, ecx

; 191  :             b3 = q(1, (u1byte) b3) ^ extract_byte(key[3],3);

  0007d	c1 e9 18	 shr	 ecx, 24
  00080	c1 e8 10	 shr	 eax, 16
  00083	0f b6 c0	 movzx	 eax, al
  00086	33 d8		 xor	 ebx, eax
  00088	41 0f b6 c1	 movzx	 eax, r9b
  0008c	44 0f b6 8c 38
	00 01 00 00	 movzx	 r9d, BYTE PTR q_tab[rax+rdi+256]
  00095	44 33 c9	 xor	 r9d, ecx
$LN2@h_fun:

; 192  :     case 3: b0 = q(1, (u1byte) b0) ^ extract_byte(key[2],0);
; 193  :             b1 = q(1, (u1byte) b1) ^ extract_byte(key[2],1);

  00098	41 8b 48 08	 mov	 ecx, DWORD PTR [r8+8]
  0009c	41 0f b6 c2	 movzx	 eax, r10b
  000a0	44 0f b6 94 38
	00 01 00 00	 movzx	 r10d, BYTE PTR q_tab[rax+rdi+256]
  000a9	41 0f b6 40 08	 movzx	 eax, BYTE PTR [r8+8]
  000ae	44 33 d0	 xor	 r10d, eax
  000b1	41 0f b6 c3	 movzx	 eax, r11b
  000b5	44 0f b6 9c 38
	00 01 00 00	 movzx	 r11d, BYTE PTR q_tab[rax+rdi+256]
  000be	8b c1		 mov	 eax, ecx
  000c0	c1 e8 08	 shr	 eax, 8
  000c3	0f b6 c0	 movzx	 eax, al
  000c6	44 33 d8	 xor	 r11d, eax

; 194  :             b2 = q(0, (u1byte) b2) ^ extract_byte(key[2],2);

  000c9	0f b6 c3	 movzx	 eax, bl
  000cc	0f b6 9c 38 00
	00 00 00	 movzx	 ebx, BYTE PTR q_tab[rax+rdi]
  000d4	8b c1		 mov	 eax, ecx

; 195  :             b3 = q(0, (u1byte) b3) ^ extract_byte(key[2],3);

  000d6	c1 e9 18	 shr	 ecx, 24
  000d9	c1 e8 10	 shr	 eax, 16
  000dc	0f b6 c0	 movzx	 eax, al
  000df	33 d8		 xor	 ebx, eax
  000e1	41 0f b6 c1	 movzx	 eax, r9b
  000e5	44 0f b6 8c 38
	00 00 00 00	 movzx	 r9d, BYTE PTR q_tab[rax+rdi]
  000ee	44 33 c9	 xor	 r9d, ecx
$LN1@h_fun:

; 196  :     case 2: b0 = q(0, (u1byte) (q(0, (u1byte) b0) ^ extract_byte(key[1],0))) ^ extract_byte(key[0],0);
; 197  :             b1 = q(0, (u1byte) (q(1, (u1byte) b1) ^ extract_byte(key[1],1))) ^ extract_byte(key[0],1);

  000f1	41 8b 50 04	 mov	 edx, DWORD PTR [r8+4]
  000f5	41 0f b6 c2	 movzx	 eax, r10b
  000f9	0f b6 8c 38 00
	00 00 00	 movzx	 ecx, BYTE PTR q_tab[rax+rdi]
  00101	41 0f b6 40 04	 movzx	 eax, BYTE PTR [r8+4]
  00106	48 33 c8	 xor	 rcx, rax
  00109	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
  0010d	45 8b 00	 mov	 r8d, DWORD PTR [r8]
  00110	44 0f b6 94 39
	00 00 00 00	 movzx	 r10d, BYTE PTR q_tab[rcx+rdi]
  00119	44 33 d0	 xor	 r10d, eax
  0011c	41 0f b6 c3	 movzx	 eax, r11b
  00120	0f b6 8c 38 00
	01 00 00	 movzx	 ecx, BYTE PTR q_tab[rax+rdi+256]
  00128	8b c2		 mov	 eax, edx
  0012a	c1 e8 08	 shr	 eax, 8
  0012d	0f b6 c0	 movzx	 eax, al
  00130	48 33 c8	 xor	 rcx, rax
  00133	41 8b c0	 mov	 eax, r8d
  00136	44 0f b6 9c 39
	00 00 00 00	 movzx	 r11d, BYTE PTR q_tab[rcx+rdi]
  0013f	c1 e8 08	 shr	 eax, 8
  00142	0f b6 c0	 movzx	 eax, al
  00145	44 33 d8	 xor	 r11d, eax

; 198  :             b2 = q(1, (u1byte) (q(0, (u1byte) b2) ^ extract_byte(key[1],2))) ^ extract_byte(key[0],2);

  00148	0f b6 c3	 movzx	 eax, bl
  0014b	0f b6 8c 38 00
	00 00 00	 movzx	 ecx, BYTE PTR q_tab[rax+rdi]
  00153	8b c2		 mov	 eax, edx

; 199  :             b3 = q(1, (u1byte) (q(1, (u1byte) b3) ^ extract_byte(key[1],3))) ^ extract_byte(key[0],3);

  00155	c1 ea 18	 shr	 edx, 24
  00158	c1 e8 10	 shr	 eax, 16
  0015b	0f b6 c0	 movzx	 eax, al
  0015e	48 33 c8	 xor	 rcx, rax
  00161	41 8b c0	 mov	 eax, r8d
  00164	41 c1 e8 18	 shr	 r8d, 24
  00168	0f b6 9c 39 00
	01 00 00	 movzx	 ebx, BYTE PTR q_tab[rcx+rdi+256]
  00170	c1 e8 10	 shr	 eax, 16
  00173	0f b6 c0	 movzx	 eax, al
  00176	33 d8		 xor	 ebx, eax
  00178	41 0f b6 c1	 movzx	 eax, r9b
  0017c	0f b6 8c 38 00
	01 00 00	 movzx	 ecx, BYTE PTR q_tab[rax+rdi+256]
  00184	0f b6 c2	 movzx	 eax, dl
  00187	48 33 c8	 xor	 rcx, rax
  0018a	44 0f b6 8c 39
	00 01 00 00	 movzx	 r9d, BYTE PTR q_tab[rcx+rdi+256]
  00193	45 33 c8	 xor	 r9d, r8d
$LN4@h_fun:

; 200  :     }
; 201  : #ifdef  M_TABLE
; 202  : 
; 203  :     return  mds(0, b0) ^ mds(1, b1) ^ mds(2, b2) ^ mds(3, b3);

  00196	42 8b 84 8f 00
	0c 00 00	 mov	 eax, DWORD PTR m_tab[rdi+r9*4+3072]
  0019e	33 84 9f 00 08
	00 00		 xor	 eax, DWORD PTR m_tab[rdi+rbx*4+2048]

; 204  : 
; 205  : #else
; 206  : 
; 207  :     b0 = q(1, (u1byte) b0); b1 = q(0, (u1byte) b1); b2 = q(1, (u1byte) b2); b3 = q(0, (u1byte) b3);
; 208  :     m5b_b0 = ffm_5b(b0); m5b_b1 = ffm_5b(b1); m5b_b2 = ffm_5b(b2); m5b_b3 = ffm_5b(b3);
; 209  :     mef_b0 = ffm_ef(b0); mef_b1 = ffm_ef(b1); mef_b2 = ffm_ef(b2); mef_b3 = ffm_ef(b3);
; 210  :     b0 ^= mef_b1 ^ m5b_b2 ^ m5b_b3; b3 ^= m5b_b0 ^ mef_b1 ^ mef_b2;
; 211  :     b2 ^= mef_b0 ^ m5b_b1 ^ mef_b3; b1 ^= mef_b0 ^ mef_b2 ^ m5b_b3;
; 212  : 
; 213  :     return b0 | (b3 << 8) | (b2 << 16) | (b1 << 24);
; 214  : 
; 215  : #endif
; 216  : };

  001a5	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  001aa	42 33 84 9f 00
	04 00 00	 xor	 eax, DWORD PTR m_tab[rdi+r11*4+1024]
  001b2	42 33 84 97 00
	00 00 00	 xor	 eax, DWORD PTR m_tab[rdi+r10*4]
  001ba	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
  001bf	c3		 ret	 0
h_fun	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_mtab DD imagerel gen_mtab
	DD	imagerel gen_mtab+275
	DD	imagerel $unwind$gen_mtab
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_mtab DD 040a01H
	DD	02740aH
	DD	013405H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT gen_mtab
_TEXT	SEGMENT
gen_mtab PROC						; COMDAT

; 125  : {   u4byte  i, f01, f5b, fef;

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 7c 24 10	 mov	 QWORD PTR [rsp+16], rdi

; 126  :     
; 127  :     for(i = 0; i < 256; ++i)

  0000a	4c 8d 1d 00 00
	00 00		 lea	 r11, OFFSET FLAT:q_tab
  00011	4c 8d 15 00 08
	00 00		 lea	 r10, OFFSET FLAT:m_tab+2048
  00018	bb 00 01 00 00	 mov	 ebx, 256		; 00000100H
  0001d	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:__ImageBase
$LL3@gen_mtab:

; 128  :     {
; 129  :         f01 = q(1,i); f5b = ffm_5b(f01); fef = ffm_ef(f01);

  00024	45 0f b6 8b 00
	01 00 00	 movzx	 r9d, BYTE PTR [r11+256]
  0002c	41 8b c9	 mov	 ecx, r9d
  0002f	41 8b c1	 mov	 eax, r9d
  00032	41 8b d1	 mov	 edx, r9d
  00035	d1 ea		 shr	 edx, 1
  00037	c1 e8 02	 shr	 eax, 2
  0003a	83 e1 03	 and	 ecx, 3
  0003d	44 0f b6 84 39
	00 00 00 00	 movzx	 r8d, BYTE PTR tab_5b[rcx+rdi]
  00046	41 33 d1	 xor	 edx, r9d
  00049	44 33 c0	 xor	 r8d, eax
  0004c	0f b6 84 39 00
	00 00 00	 movzx	 eax, BYTE PTR tab_ef[rcx+rdi]
  00054	d1 ea		 shr	 edx, 1
  00056	33 d0		 xor	 edx, eax
  00058	45 33 c1	 xor	 r8d, r9d
  0005b	41 33 d1	 xor	 edx, r9d

; 130  :         m_tab[0][i] = f01 + (f5b << 8) + (fef << 16) + (fef << 24);

  0005e	8b c2		 mov	 eax, edx

; 131  :         m_tab[2][i] = f5b + (fef << 8) + (f01 << 16) + (fef << 24);

  00060	69 d2 00 01 00
	01		 imul	 edx, 16777472		; 01000100H
  00066	69 c0 00 01 01
	00		 imul	 eax, 65792		; 00010100H
  0006c	41 03 c0	 add	 eax, r8d
  0006f	c1 e0 08	 shl	 eax, 8
  00072	41 03 c1	 add	 eax, r9d
  00075	41 c1 e1 10	 shl	 r9d, 16
  00079	41 89 82 00 f8
	ff ff		 mov	 DWORD PTR [r10-2048], eax
  00080	41 8d 04 10	 lea	 eax, DWORD PTR [r8+rdx]

; 132  : 
; 133  :         f01 = q(0,i); f5b = ffm_5b(f01); fef = ffm_ef(f01);

  00084	45 0f b6 03	 movzx	 r8d, BYTE PTR [r11]
  00088	44 03 c8	 add	 r9d, eax
  0008b	41 8b c8	 mov	 ecx, r8d
  0008e	41 8b c0	 mov	 eax, r8d
  00091	83 e1 03	 and	 ecx, 3
  00094	45 89 0a	 mov	 DWORD PTR [r10], r9d
  00097	c1 e8 02	 shr	 eax, 2
  0009a	44 0f b6 8c 39
	00 00 00 00	 movzx	 r9d, BYTE PTR tab_5b[rcx+rdi]
  000a3	41 8b d0	 mov	 edx, r8d
  000a6	49 ff c3	 inc	 r11
  000a9	d1 ea		 shr	 edx, 1
  000ab	44 33 c8	 xor	 r9d, eax
  000ae	0f b6 84 39 00
	00 00 00	 movzx	 eax, BYTE PTR tab_ef[rcx+rdi]
  000b6	41 33 d0	 xor	 edx, r8d
  000b9	45 33 c8	 xor	 r9d, r8d

; 134  :         m_tab[1][i] = fef + (fef << 8) + (f5b << 16) + (f01 << 24);

  000bc	41 8b c8	 mov	 ecx, r8d
  000bf	d1 ea		 shr	 edx, 1
  000c1	c1 e1 08	 shl	 ecx, 8
  000c4	49 83 c2 04	 add	 r10, 4
  000c8	33 d0		 xor	 edx, eax
  000ca	41 03 c9	 add	 ecx, r9d
  000cd	41 33 d0	 xor	 edx, r8d
  000d0	c1 e1 10	 shl	 ecx, 16
  000d3	8b c2		 mov	 eax, edx

; 135  :         m_tab[3][i] = f5b + (f01 << 8) + (fef << 16) + (f5b << 24);

  000d5	c1 e2 08	 shl	 edx, 8
  000d8	45 69 c9 01 00
	00 01		 imul	 r9d, 16777217		; 01000001H
  000df	41 03 d0	 add	 edx, r8d
  000e2	c1 e2 08	 shl	 edx, 8
  000e5	41 03 d1	 add	 edx, r9d
  000e8	41 89 92 fc 03
	00 00		 mov	 DWORD PTR [r10+1020], edx
  000ef	69 c0 01 01 00
	00		 imul	 eax, 257		; 00000101H
  000f5	03 c8		 add	 ecx, eax
  000f7	48 83 eb 01	 sub	 rbx, 1
  000fb	41 89 8a fc fb
	ff ff		 mov	 DWORD PTR [r10-1028], ecx
  00102	0f 85 1c ff ff
	ff		 jne	 $LL3@gen_mtab

; 136  :     }
; 137  : };

  00108	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  0010d	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
  00112	c3		 ret	 0
gen_mtab ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT qp
_TEXT	SEGMENT
n$ = 8
x$ = 16
qp	PROC						; COMDAT

; 87   : 
; 88   :     a0 = x >> 4; b0 = x & 15;
; 89   :     a1 = a0 ^ b0; b1 = ror4[b0] ^ ashx[a0];
; 90   :     a2 = qt0[n][a1]; b2 = qt1[n][b1];

  00000	44 8b d1	 mov	 r10d, ecx
  00003	4c 8d 1d 00 00
	00 00		 lea	 r11, OFFSET FLAT:__ImageBase
  0000a	8a c2		 mov	 al, dl
  0000c	c0 e8 04	 shr	 al, 4
  0000f	49 c1 e2 04	 shl	 r10, 4
  00013	80 e2 0f	 and	 dl, 15
  00016	44 0f b6 ca	 movzx	 r9d, dl
  0001a	0f b6 d0	 movzx	 edx, al
  0001d	42 0f b6 8c 1a
	00 00 00 00	 movzx	 ecx, BYTE PTR ashx[rdx+r11]
  00026	48 8b c2	 mov	 rax, rdx
  00029	49 33 c1	 xor	 rax, r9
  0002c	49 03 c2	 add	 rax, r10
  0002f	46 0f b6 84 18
	00 00 00 00	 movzx	 r8d, BYTE PTR qt0[rax+r11]
  00038	43 0f b6 84 19
	00 00 00 00	 movzx	 eax, BYTE PTR ror4[r9+r11]
  00041	48 33 c8	 xor	 rcx, rax

; 91   :     a3 = a2 ^ b2; b3 = ror4[b2] ^ ashx[a2];

  00044	4d 8b c8	 mov	 r9, r8
  00047	49 03 ca	 add	 rcx, r10
  0004a	42 0f b6 94 19
	00 00 00 00	 movzx	 edx, BYTE PTR qt1[rcx+r11]

; 92   :     a4 = qt2[n][a3]; b4 = qt3[n][b3];
; 93   :     return (b4 << 4) | a4;

  00053	43 0f b6 8c 18
	00 00 00 00	 movzx	 ecx, BYTE PTR ashx[r8+r11]
  0005c	42 0f b6 84 1a
	00 00 00 00	 movzx	 eax, BYTE PTR ror4[rdx+r11]
  00065	4c 33 ca	 xor	 r9, rdx
  00068	48 33 c8	 xor	 rcx, rax
  0006b	4d 03 ca	 add	 r9, r10
  0006e	49 03 ca	 add	 rcx, r10
  00071	42 0f b6 84 19
	00 00 00 00	 movzx	 eax, BYTE PTR qt3[rcx+r11]
  0007a	43 0f b6 8c 19
	00 00 00 00	 movzx	 ecx, BYTE PTR qt2[r9+r11]
  00083	c1 e0 04	 shl	 eax, 4
  00086	0b c1		 or	 eax, ecx

; 94   : };

  00088	c3		 ret	 0
qp	ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_qtab DD imagerel gen_qtab
	DD	imagerel gen_qtab+274
	DD	imagerel $unwind$gen_qtab
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_qtab DD 060f01H
	DD	03740fH
	DD	02640aH
	DD	013405H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT gen_qtab
_TEXT	SEGMENT
gen_qtab PROC						; COMDAT

; 104  : {   u4byte  i;

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi

; 105  : 
; 106  :     for(i = 0; i < 256; ++i)

  0000f	33 db		 xor	 ebx, ebx
  00011	48 8d 3d 00 01
	00 00		 lea	 rdi, OFFSET FLAT:q_tab+256
  00018	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:__ImageBase
$LL3@gen_qtab:

; 107  :     {       
; 108  :         q(0,i) = qp(0, (u1byte)i);

  0001f	44 8a db	 mov	 r11b, bl
  00022	44 8a d3	 mov	 r10b, bl
  00025	ff c3		 inc	 ebx
  00027	41 c0 eb 04	 shr	 r11b, 4
  0002b	41 80 e2 0f	 and	 r10b, 15
  0002f	41 0f b6 d2	 movzx	 edx, r10b
  00033	41 0f b6 cb	 movzx	 ecx, r11b
  00037	48 8b c1	 mov	 rax, rcx
  0003a	0f b6 8c 31 00
	00 00 00	 movzx	 ecx, BYTE PTR ashx[rcx+rsi]
  00042	48 33 c2	 xor	 rax, rdx
  00045	44 0f b6 84 30
	00 00 00 00	 movzx	 r8d, BYTE PTR qt0[rax+rsi]
  0004e	0f b6 84 32 00
	00 00 00	 movzx	 eax, BYTE PTR ror4[rdx+rsi]
  00056	48 33 c8	 xor	 rcx, rax
  00059	4d 8b c8	 mov	 r9, r8
  0005c	0f b6 94 31 00
	00 00 00	 movzx	 edx, BYTE PTR qt1[rcx+rsi]
  00064	41 0f b6 8c 30
	00 00 00 00	 movzx	 ecx, BYTE PTR ashx[r8+rsi]
  0006d	0f b6 84 32 00
	00 00 00	 movzx	 eax, BYTE PTR ror4[rdx+rsi]
  00075	4c 33 ca	 xor	 r9, rdx

; 109  :         q(1,i) = qp(1, (u1byte)i);

  00078	41 0f b6 d2	 movzx	 edx, r10b
  0007c	48 33 c8	 xor	 rcx, rax
  0007f	8a 84 31 00 00
	00 00		 mov	 al, BYTE PTR qt3[rcx+rsi]
  00086	41 0f b6 cb	 movzx	 ecx, r11b
  0008a	c0 e0 04	 shl	 al, 4
  0008d	41 0a 84 31 00
	00 00 00	 or	 al, BYTE PTR qt2[r9+rsi]
  00095	88 87 00 ff ff
	ff		 mov	 BYTE PTR [rdi-256], al
  0009b	48 8b c1	 mov	 rax, rcx
  0009e	0f b6 8c 31 00
	00 00 00	 movzx	 ecx, BYTE PTR ashx[rcx+rsi]
  000a6	48 33 c2	 xor	 rax, rdx
  000a9	44 0f b6 84 30
	10 00 00 00	 movzx	 r8d, BYTE PTR qt0[rax+rsi+16]
  000b2	0f b6 84 32 00
	00 00 00	 movzx	 eax, BYTE PTR ror4[rdx+rsi]
  000ba	48 33 c8	 xor	 rcx, rax
  000bd	4d 8b c8	 mov	 r9, r8
  000c0	0f b6 94 31 10
	00 00 00	 movzx	 edx, BYTE PTR qt1[rcx+rsi+16]
  000c8	41 0f b6 8c 30
	00 00 00 00	 movzx	 ecx, BYTE PTR ashx[r8+rsi]
  000d1	0f b6 84 32 00
	00 00 00	 movzx	 eax, BYTE PTR ror4[rdx+rsi]
  000d9	4c 33 ca	 xor	 r9, rdx
  000dc	48 33 c8	 xor	 rcx, rax
  000df	8a 84 31 10 00
	00 00		 mov	 al, BYTE PTR qt3[rcx+rsi+16]
  000e6	c0 e0 04	 shl	 al, 4
  000e9	41 0a 84 31 10
	00 00 00	 or	 al, BYTE PTR qt2[r9+rsi+16]
  000f1	88 07		 mov	 BYTE PTR [rdi], al
  000f3	48 ff c7	 inc	 rdi
  000f6	81 fb 00 01 00
	00		 cmp	 ebx, 256		; 00000100H
  000fc	0f 82 1d ff ff
	ff		 jb	 $LL3@gen_qtab

; 110  :     }
; 111  : };

  00102	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00107	48 8b 74 24 10	 mov	 rsi, QWORD PTR [rsp+16]
  0010c	48 8b 7c 24 18	 mov	 rdi, QWORD PTR [rsp+24]
  00111	c3		 ret	 0
gen_qtab ENDP
PUBLIC	twofish_set_key
;	COMDAT pdata
pdata	SEGMENT
$pdata$twofish_set_key DD imagerel $LN24
	DD	imagerel $LN24+377
	DD	imagerel $unwind$twofish_set_key
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$twofish_set_key DD 0a1901H
	DD	0d7419H
	DD	0c6419H
	DD	0b5419H
	DD	0a3419H
	DD	0c0157219H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT twofish_set_key
_TEXT	SEGMENT
me_key$ = 32
mo_key$ = 48
instance$ = 80
in_key$ = 88
key_len$ = 96
twofish_set_key PROC					; COMDAT

; 373  : {   u4byte  i, a, b, me_key[4], mo_key[4];

$LN24:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  00013	41 54		 push	 r12
  00015	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 374  : 	u4byte *l_key, *s_key;
; 375  : 
; 376  : 	l_key = instance->l_key;
; 377  : 	s_key = instance->s_key;
; 378  : 
; 379  : #ifdef Q_TABLES
; 380  :     if(!qt_gen)

  00019	33 f6		 xor	 esi, esi
  0001b	41 8b d8	 mov	 ebx, r8d
  0001e	48 8b ea	 mov	 rbp, rdx
  00021	48 8b f9	 mov	 rdi, rcx
  00024	39 35 00 00 00
	00		 cmp	 DWORD PTR qt_gen, esi
  0002a	75 0f		 jne	 SHORT $LN8@twofish_se

; 381  :     {
; 382  :         gen_qtab(); qt_gen = 1;

  0002c	e8 00 00 00 00	 call	 gen_qtab
  00031	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR qt_gen, 1
$LN8@twofish_se:

; 383  :     }
; 384  : #endif
; 385  : 
; 386  : #ifdef M_TABLE
; 387  :     if(!mt_gen)

  0003b	39 35 00 00 00
	00		 cmp	 DWORD PTR mt_gen, esi
  00041	75 0f		 jne	 SHORT $LN7@twofish_se

; 388  :     {
; 389  :         gen_mtab(); mt_gen = 1;

  00043	e8 00 00 00 00	 call	 gen_mtab
  00048	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR mt_gen, 1
$LN7@twofish_se:

; 390  :     }
; 391  : #endif
; 392  : 
; 393  :     instance->k_len = key_len / 64;   /* 2, 3 or 4 */

  00052	c1 eb 06	 shr	 ebx, 6

; 394  : 
; 395  :     for(i = 0; i < instance->k_len; ++i)

  00055	44 8b ce	 mov	 r9d, esi
  00058	89 9f b0 10 00
	00		 mov	 DWORD PTR [rdi+4272], ebx
  0005e	3b de		 cmp	 ebx, esi
  00060	0f 86 9b 00 00
	00		 jbe	 $LN4@twofish_se
  00066	4c 8b c6	 mov	 r8, rsi
$LL6@twofish_se:

; 396  :     {
; 397  :         a = LE32(in_key[i + i]);     me_key[i] = a;

  00069	44 8b 5d 00	 mov	 r11d, DWORD PTR [rbp]

; 398  :         b = LE32(in_key[i + i + 1]); mo_key[i] = b;

  0006d	8b 55 04	 mov	 edx, DWORD PTR [rbp+4]
  00070	bb 08 00 00 00	 mov	 ebx, 8
  00075	46 89 5c 04 20	 mov	 DWORD PTR me_key$[rsp+r8], r11d
  0007a	42 89 54 04 30	 mov	 DWORD PTR mo_key$[rsp+r8], edx

; 399  :         s_key[instance->k_len - i - 1] = mds_rem(a, b);

$LL15@twofish_se:
  0007f	8b c2		 mov	 eax, edx
  00081	44 8b d2	 mov	 r10d, edx
  00084	41 8b cb	 mov	 ecx, r11d
  00087	c1 e9 18	 shr	 ecx, 24
  0008a	c1 e0 08	 shl	 eax, 8
  0008d	41 c1 ea 18	 shr	 r10d, 24
  00091	8b d1		 mov	 edx, ecx
  00093	41 c1 e3 08	 shl	 r11d, 8
  00097	43 8d 0c 12	 lea	 ecx, DWORD PTR [r10+r10]
  0009b	0b d0		 or	 edx, eax
  0009d	45 84 d2	 test	 r10b, r10b
  000a0	79 06		 jns	 SHORT $LN12@twofish_se
  000a2	81 f1 4d 01 00
	00		 xor	 ecx, 333		; 0000014dH
$LN12@twofish_se:
  000a8	8b c1		 mov	 eax, ecx
  000aa	c1 e0 10	 shl	 eax, 16
  000ad	41 33 c2	 xor	 eax, r10d
  000b0	33 d0		 xor	 edx, eax
  000b2	41 8b c2	 mov	 eax, r10d
  000b5	d1 e8		 shr	 eax, 1
  000b7	33 c8		 xor	 ecx, eax
  000b9	41 f6 c2 01	 test	 r10b, 1
  000bd	74 06		 je	 SHORT $LN11@twofish_se
  000bf	81 f1 a6 00 00
	00		 xor	 ecx, 166		; 000000a6H
$LN11@twofish_se:
  000c5	8b c1		 mov	 eax, ecx
  000c7	c1 e0 10	 shl	 eax, 16
  000ca	0b c1		 or	 eax, ecx
  000cc	c1 e0 08	 shl	 eax, 8
  000cf	33 d0		 xor	 edx, eax
  000d1	48 83 eb 01	 sub	 rbx, 1
  000d5	75 a8		 jne	 SHORT $LL15@twofish_se
  000d7	8b 87 b0 10 00
	00		 mov	 eax, DWORD PTR [rdi+4272]
  000dd	48 83 c5 08	 add	 rbp, 8
  000e1	49 83 c0 04	 add	 r8, 4
  000e5	41 2b c1	 sub	 eax, r9d
  000e8	41 ff c1	 inc	 r9d
  000eb	ff c8		 dec	 eax
  000ed	89 94 87 a0 00
	00 00		 mov	 DWORD PTR [rdi+rax*4+160], edx
  000f4	44 3b 8f b0 10
	00 00		 cmp	 r9d, DWORD PTR [rdi+4272]
  000fb	0f 82 68 ff ff
	ff		 jb	 $LL6@twofish_se
$LN4@twofish_se:

; 400  :     }
; 401  : 
; 402  :     for(i = 0; i < 40; i += 2)

  00101	48 8b ef	 mov	 rbp, rdi
$LL3@twofish_se:

; 403  :     {
; 404  :         a = 0x01010101 * i; b = a + 0x01010101;
; 405  :         a = h_fun(instance, a, me_key);

  00104	4c 8d 44 24 20	 lea	 r8, QWORD PTR me_key$[rsp]
  00109	8b d6		 mov	 edx, esi
  0010b	48 8b cf	 mov	 rcx, rdi
  0010e	e8 00 00 00 00	 call	 h_fun

; 406  :         b = rotl(h_fun(instance, b, mo_key), 8);

  00113	8d 96 01 01 01
	01		 lea	 edx, DWORD PTR [rsi+16843009]
  00119	4c 8d 44 24 30	 lea	 r8, QWORD PTR mo_key$[rsp]
  0011e	48 8b cf	 mov	 rcx, rdi
  00121	8b d8		 mov	 ebx, eax
  00123	e8 00 00 00 00	 call	 h_fun
  00128	81 c6 02 02 02
	02		 add	 esi, 33686018		; 02020202H
  0012e	c1 c0 08	 rol	 eax, 8

; 407  :         l_key[i] = a + b;

  00131	8d 0c 18	 lea	 ecx, DWORD PTR [rax+rbx]

; 408  :         l_key[i + 1] = rotl(a + 2 * b, 9);

  00134	8d 04 43	 lea	 eax, DWORD PTR [rbx+rax*2]
  00137	c1 c0 09	 rol	 eax, 9
  0013a	89 4d 00	 mov	 DWORD PTR [rbp], ecx
  0013d	48 83 c5 08	 add	 rbp, 8
  00141	89 45 fc	 mov	 DWORD PTR [rbp-4], eax
  00144	81 fe 28 28 28
	28		 cmp	 esi, 673720360		; 28282828H
  0014a	72 b8		 jb	 SHORT $LL3@twofish_se

; 409  :     }
; 410  : 
; 411  : #ifdef MK_TABLE
; 412  :     gen_mk_tab(instance, s_key);

  0014c	48 8d 97 a0 00
	00 00		 lea	 rdx, QWORD PTR [rdi+160]
  00153	48 8b cf	 mov	 rcx, rdi
  00156	e8 00 00 00 00	 call	 gen_mk_tab

; 413  : #endif
; 414  : 
; 415  :     return l_key;
; 416  : };

  0015b	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00160	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00165	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  0016a	48 8b c7	 mov	 rax, rdi
  0016d	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  00172	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00176	41 5c		 pop	 r12
  00178	c3		 ret	 0
twofish_set_key ENDP
END
