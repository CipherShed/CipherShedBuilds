     1                                  
     2                                  ; ---------------------------------------------------------------------------
     3                                  ; Copyright (c) 1998-2007, Brian Gladman, Worcester, UK. All rights reserved.
     4                                  ; 
     5                                  ; LICENSE TERMS
     6                                  ; 
     7                                  ; The free distribution and use of this software is allowed (with or without
     8                                  ; changes) provided that:
     9                                  ; 
    10                                  ;  1. source code distributions include the above copyright notice, this
    11                                  ;     list of conditions and the following disclaimer;
    12                                  ; 
    13                                  ;  2. binary distributions include the above copyright notice, this list
    14                                  ;     of conditions and the following disclaimer in their documentation;
    15                                  ; 
    16                                  ;  3. the name of the copyright holder is not used to endorse products
    17                                  ;     built using this software without specific written permission.
    18                                  ; 
    19                                  ; DISCLAIMER
    20                                  ; 
    21                                  ; This software is provided 'as is' with no explicit or implied warranties
    22                                  ; in respect of its properties, including, but not limited to, correctness
    23                                  ; and/or fitness for purpose.
    24                                  ; ---------------------------------------------------------------------------
    25                                  ; Issue 20/12/2007
    26                                  ;
    27                                  ; This code requires ASM_X86_V1C to be set in aesopt.h. It requires the C files
    28                                  ; aeskey.c and aestab.c for support.
    29                                  
    30                                  ;
    31                                  ; Adapted for CipherShed:
    32                                  ; - Compatibility with NASM and GCC
    33                                  ;
    34                                  
    35                                  ; An AES implementation for x86 processors using the YASM (or NASM) assembler.
    36                                  ; This is an assembler implementation that covers encryption and decryption
    37                                  ; only and is intended as a replacement of the C file aescrypt.c. It hence
    38                                  ; requires the file aeskey.c for keying and aestab.c for the AES tables. It
    39                                  ; employs full tables rather than compressed tables.
    40                                  
    41                                  ; This code provides the standard AES block size (128 bits, 16 bytes) and the
    42                                  ; three standard AES key sizes (128, 192 and 256 bits). It has the same call
    43                                  ; interface as my C implementation. The ebx, esi, edi and ebp registers are
    44                                  ; preserved across calls but eax, ecx and edx and the artihmetic status flags
    45                                  ; are not.  It is also important that the defines below match those used in the
    46                                  ; C code.  This code uses the VC++ register saving conentions; if it is used
    47                                  ; with another compiler, conventions for using and saving registers may need to
    48                                  ; be checked (and calling conventions).  The YASM command line for the VC++
    49                                  ; custom build step is:
    50                                  ;
    51                                  ;    yasm -Xvc -f win32 -o "$(TargetDir)\$(InputName).obj" "$(InputPath)"
    52                                  ;
    53                                  ;  The calling intefaces are:
    54                                  ;
    55                                  ;     AES_RETURN aes_encrypt(const unsigned char in_blk[],
    56                                  ;                   unsigned char out_blk[], const aes_encrypt_ctx cx[1]);
    57                                  ;
    58                                  ;     AES_RETURN aes_decrypt(const unsigned char in_blk[],
    59                                  ;                   unsigned char out_blk[], const aes_decrypt_ctx cx[1]);
    60                                  ;
    61                                  ;     AES_RETURN aes_encrypt_key<NNN>(const unsigned char key[],
    62                                  ;                                            const aes_encrypt_ctx cx[1]);
    63                                  ;
    64                                  ;     AES_RETURN aes_decrypt_key<NNN>(const unsigned char key[],
    65                                  ;                                            const aes_decrypt_ctx cx[1]);
    66                                  ;
    67                                  ;     AES_RETURN aes_encrypt_key(const unsigned char key[],
    68                                  ;                           unsigned int len, const aes_decrypt_ctx cx[1]);
    69                                  ;
    70                                  ;     AES_RETURN aes_decrypt_key(const unsigned char key[],
    71                                  ;                           unsigned int len, const aes_decrypt_ctx cx[1]);
    72                                  ;
    73                                  ; where <NNN> is 128, 102 or 256.  In the last two calls the length can be in
    74                                  ; either bits or bytes.
    75                                  ;
    76                                  ; Comment in/out the following lines to obtain the desired subroutines. These
    77                                  ; selections MUST match those in the C header file aes.h
    78                                  
    79                                  ; %define AES_128                 ; define if AES with 128 bit keys is needed
    80                                  ; %define AES_192                 ; define if AES with 192 bit keys is needed
    81                                  %define AES_256                 ; define if AES with 256 bit keys is needed
    82                                  ; %define AES_VAR                 ; define if a variable key size is needed
    83                                  %define ENCRYPTION              ; define if encryption is needed
    84                                  %define DECRYPTION              ; define if decryption is needed
    85                                  %define AES_REV_DKS             ; define if key decryption schedule is reversed
    86                                  %define LAST_ROUND_TABLES       ; define if tables are to be used for last round
    87                                  
    88                                  ; offsets to parameters
    89                                  
    90                                  in_blk  equ     4   ; input byte array address parameter
    91                                  out_blk equ     8   ; output byte array address parameter
    92                                  ctx     equ    12   ; AES context structure
    93                                  stk_spc equ    20   ; stack space
    94                                  %define parms  12   ; parameter space on stack
    95                                  
    96                                  ; The encryption key schedule has the following in memory layout where N is the
    97                                  ; number of rounds (10, 12 or 14):
    98                                  ;
    99                                  ; lo: | input key (round 0)  |  ; each round is four 32-bit words
   100                                  ;     | encryption round 1   |
   101                                  ;     | encryption round 2   |
   102                                  ;     ....
   103                                  ;     | encryption round N-1 |
   104                                  ; hi: | encryption round N   |
   105                                  ;
   106                                  ; The decryption key schedule is normally set up so that it has the same
   107                                  ; layout as above by actually reversing the order of the encryption key
   108                                  ; schedule in memory (this happens when AES_REV_DKS is set):
   109                                  ;
   110                                  ; lo: | decryption round 0   | =              | encryption round N   |
   111                                  ;     | decryption round 1   | = INV_MIX_COL[ | encryption round N-1 | ]
   112                                  ;     | decryption round 2   | = INV_MIX_COL[ | encryption round N-2 | ]
   113                                  ;     ....                       ....
   114                                  ;     | decryption round N-1 | = INV_MIX_COL[ | encryption round 1   | ]
   115                                  ; hi: | decryption round N   | =              | input key (round 0)  |
   116                                  ;
   117                                  ; with rounds except the first and last modified using inv_mix_column()
   118                                  ; But if AES_REV_DKS is NOT set the order of keys is left as it is for
   119                                  ; encryption so that it has to be accessed in reverse when used for
   120                                  ; decryption (although the inverse mix column modifications are done)
   121                                  ;
   122                                  ; lo: | decryption round 0   | =              | input key (round 0)  |
   123                                  ;     | decryption round 1   | = INV_MIX_COL[ | encryption round 1   | ]
   124                                  ;     | decryption round 2   | = INV_MIX_COL[ | encryption round 2   | ]
   125                                  ;     ....                       ....
   126                                  ;     | decryption round N-1 | = INV_MIX_COL[ | encryption round N-1 | ]
   127                                  ; hi: | decryption round N   | =              | encryption round N   |
   128                                  ;
   129                                  ; This layout is faster when the assembler key scheduling provided here
   130                                  ; is used.
   131                                  ;
   132                                  ; The DLL interface must use the _stdcall convention in which the number
   133                                  ; of bytes of parameter space is added after an @ to the sutine's name.
   134                                  ; We must also remove our parameters from the stack before return (see
   135                                  ; the do_exit macro). Define DLL_EXPORT for the Dynamic Link Library version.
   136                                  
   137                                  ;%define DLL_EXPORT
   138                                  
   139                                  ; End of user defines
   140                                  
   141                                  %ifdef AES_VAR
   142                                  %ifndef AES_128
   143                                  %define AES_128
   144                                  %endif
   145                                  %ifndef AES_192
   146                                  %define AES_192
   147                                  %endif
   148                                  %ifndef AES_256
   149                                  %define AES_256
   150                                  %endif
   151                                  %endif
   152                                  
   153                                  %ifdef AES_VAR
   154                                  %define KS_LENGTH       60
   155                                  %elifdef AES_256
   156                                  %define KS_LENGTH       60
   157                                  %elifdef AES_192
   158                                  %define KS_LENGTH       52
   159                                  %else
   160                                  %define KS_LENGTH       44
   161                                  %endif
   162                                  
   163                                  ; These macros implement stack based local variables
   164                                  
   165                                  %macro  save 2
   166                                      mov     [esp+4*%1],%2
   167                                  %endmacro
   168                                  
   169                                  %macro  restore 2
   170                                      mov     %1,[esp+4*%2]
   171                                  %endmacro
   172                                  
   173                                  ; the DLL has to implement the _stdcall calling interface on return
   174                                  ; In this case we have to take our parameters (3 4-byte pointers)
   175                                  ; off the stack
   176                                  
   177                                  %macro  do_name 1-2 parms
   178                                  %ifndef DLL_EXPORT
   179                                      align 32
   180                                      global  %1
   181                                  %1:
   182                                  %else
   183                                      align 32
   184                                      global  %1@%2
   185                                      export  _%1@%2
   186                                  %1@%2:
   187                                  %endif
   188                                  %endmacro
   189                                  
   190                                  %macro  do_call 1-2 parms
   191                                  %ifndef DLL_EXPORT
   192                                      call    %1
   193                                      add     esp,%2
   194                                  %else
   195                                      call    %1@%2
   196                                  %endif
   197                                  %endmacro
   198                                  
   199                                  %macro  do_exit  0-1 parms
   200                                  %ifdef DLL_EXPORT
   201                                      ret %1
   202                                  %else
   203                                      ret
   204                                  %endif
   205                                  %endmacro
   206                                  
   207                                  %ifdef  ENCRYPTION
   208                                  
   209                                      extern  t_fn
   210                                  
   211                                  %define etab_0(x)   [t_fn+4*x]
   212                                  %define etab_1(x)   [t_fn+1024+4*x]
   213                                  %define etab_2(x)   [t_fn+2048+4*x]
   214                                  %define etab_3(x)   [t_fn+3072+4*x]
   215                                  
   216                                  %ifdef LAST_ROUND_TABLES
   217                                  
   218                                      extern  t_fl
   219                                  
   220                                  %define eltab_0(x)  [t_fl+4*x]
   221                                  %define eltab_1(x)  [t_fl+1024+4*x]
   222                                  %define eltab_2(x)  [t_fl+2048+4*x]
   223                                  %define eltab_3(x)  [t_fl+3072+4*x]
   224                                  
   225                                  %else
   226                                  
   227                                  %define etab_b(x)   byte [t_fn+3072+4*x]
   228                                  
   229                                  %endif
   230                                  
   231                                  ; ROUND FUNCTION.  Build column[2] on ESI and column[3] on EDI that have the
   232                                  ; round keys pre-loaded. Build column[0] in EBP and column[1] in EBX.
   233                                  ;
   234                                  ; Input:
   235                                  ;
   236                                  ;   EAX     column[0]
   237                                  ;   EBX     column[1]
   238                                  ;   ECX     column[2]
   239                                  ;   EDX     column[3]
   240                                  ;   ESI     column key[round][2]
   241                                  ;   EDI     column key[round][3]
   242                                  ;   EBP     scratch
   243                                  ;
   244                                  ; Output:
   245                                  ;
   246                                  ;   EBP     column[0]   unkeyed
   247                                  ;   EBX     column[1]   unkeyed
   248                                  ;   ESI     column[2]   keyed
   249                                  ;   EDI     column[3]   keyed
   250                                  ;   EAX     scratch
   251                                  ;   ECX     scratch
   252                                  ;   EDX     scratch
   253                                  
   254                                  %macro rnd_fun 2
   255                                  
   256                                      rol     ebx,16
   257                                      %1      esi, cl, 0, ebp
   258                                      %1      esi, dh, 1, ebp
   259                                      %1      esi, bh, 3, ebp
   260                                      %1      edi, dl, 0, ebp
   261                                      %1      edi, ah, 1, ebp
   262                                      %1      edi, bl, 2, ebp
   263                                      %2      ebp, al, 0, ebp
   264                                      shr     ebx,16
   265                                      and     eax,0xffff0000
   266                                      or      eax,ebx
   267                                      shr     edx,16
   268                                      %1      ebp, ah, 1, ebx
   269                                      %1      ebp, dh, 3, ebx
   270                                      %2      ebx, dl, 2, ebx
   271                                      %1      ebx, ch, 1, edx
   272                                      %1      ebx, al, 0, edx
   273                                      shr     eax,16
   274                                      shr     ecx,16
   275                                      %1      ebp, cl, 2, edx
   276                                      %1      edi, ch, 3, edx
   277                                      %1      esi, al, 2, edx
   278                                      %1      ebx, ah, 3, edx
   279                                  
   280                                  %endmacro
   281                                  
   282                                  ; Basic MOV and XOR Operations for normal rounds
   283                                  
   284                                  %macro  nr_xor  4
   285                                      movzx   %4,%2
   286                                      xor     %1,etab_%3(%4)
   287                                  %endmacro
   288                                  
   289                                  %macro  nr_mov  4
   290                                      movzx   %4,%2
   291                                      mov     %1,etab_%3(%4)
   292                                  %endmacro
   293                                  
   294                                  ; Basic MOV and XOR Operations for last round
   295                                  
   296                                  %ifdef LAST_ROUND_TABLES
   297                                  
   298                                      %macro  lr_xor  4
   299                                          movzx   %4,%2
   300                                          xor     %1,eltab_%3(%4)
   301                                      %endmacro
   302                                  
   303                                      %macro  lr_mov  4
   304                                          movzx   %4,%2
   305                                          mov     %1,eltab_%3(%4)
   306                                      %endmacro
   307                                  
   308                                  %else
   309                                  
   310                                      %macro  lr_xor  4
   311                                          movzx   %4,%2
   312                                          movzx   %4,etab_b(%4)
   313                                      %if %3 != 0
   314                                          shl     %4,8*%3
   315                                      %endif
   316                                          xor     %1,%4
   317                                      %endmacro
   318                                  
   319                                      %macro  lr_mov  4
   320                                          movzx   %4,%2
   321                                          movzx   %1,etab_b(%4)
   322                                      %if %3 != 0
   323                                          shl     %1,8*%3
   324                                      %endif
   325                                      %endmacro
   326                                  
   327                                  %endif
   328                                  
   329                                  %macro enc_round 0
   330                                  
   331                                      add     ebp,16
   332                                      save    0,ebp
   333                                      mov     esi,[ebp+8]
   334                                      mov     edi,[ebp+12]
   335                                  
   336                                      rnd_fun nr_xor, nr_mov
   337                                  
   338                                      mov     eax,ebp
   339                                      mov     ecx,esi
   340                                      mov     edx,edi
   341                                      restore ebp,0
   342                                      xor     eax,[ebp]
   343                                      xor     ebx,[ebp+4]
   344                                  
   345                                  %endmacro
   346                                  
   347                                  %macro enc_last_round 0
   348                                  
   349                                      add     ebp,16
   350                                      save    0,ebp
   351                                      mov     esi,[ebp+8]
   352                                      mov     edi,[ebp+12]
   353                                  
   354                                      rnd_fun lr_xor, lr_mov
   355                                  
   356                                      mov     eax,ebp
   357                                      restore ebp,0
   358                                      xor     eax,[ebp]
   359                                      xor     ebx,[ebp+4]
   360                                  
   361                                  %endmacro
   362                                  
   363                                      section .text align=32
   364                                  
   365                                  ; AES Encryption Subroutine
   366                                  
   367                                      do_name aes_encrypt
   368                              <1> %ifndef DLL_EXPORT
   369                              <1>  align 32
   370                              <1>  global %1
   371                              <1> %1:
   372                              <1> %else
   373                              <1>  align 32
   374                              <1>  global %1@%2
   375                              <1>  export _%1@%2
   376                              <1> %1@%2:
   377                              <1> %endif
   378                                  
   379 00000000 83EC14                      sub     esp,stk_spc
   380 00000003 896C2410                    mov     [esp+16],ebp
   381 00000007 895C240C                    mov     [esp+12],ebx
   382 0000000B 89742408                    mov     [esp+ 8],esi
   383 0000000F 897C2404                    mov     [esp+ 4],edi
   384                                  
   385 00000013 8B742418                    mov     esi,[esp+in_blk+stk_spc] ; input pointer
   386 00000017 8B06                        mov     eax,[esi   ]
   387 00000019 8B5E04                      mov     ebx,[esi+ 4]
   388 0000001C 8B4E08                      mov     ecx,[esi+ 8]
   389 0000001F 8B560C                      mov     edx,[esi+12]
   390                                  
   391 00000022 8B6C2420                    mov     ebp,[esp+ctx+stk_spc]    ; key pointer
   392 00000026 0FB6BDF0000000              movzx   edi,byte [ebp+4*KS_LENGTH]
   393 0000002D 334500                      xor     eax,[ebp   ]
   394 00000030 335D04                      xor     ebx,[ebp+ 4]
   395 00000033 334D08                      xor     ecx,[ebp+ 8]
   396 00000036 33550C                      xor     edx,[ebp+12]
   397                                  
   398                                  ; determine the number of rounds
   399                                  
   400 00000039 81FFA0000000                cmp     edi,10*16
   401 0000003F 0F8462030000                je      .3
   402 00000045 81FFC0000000                cmp     edi,12*16
   403 0000004B 0F84B4010000                je      .2
   404 00000051 81FFE0000000                cmp     edi,14*16
   405 00000057 740A                        je      .1
   406 00000059 B8FFFFFFFF                  mov     eax,-1
   407 0000005E E97B0B0000                  jmp     .5
   408                                  
   409                                  .1: enc_round
   410                              <1> .1: 
   411                              <1> 
   412 00000063 83C510              <1>  add ebp,16
   413                              <1>  save 0,ebp
   414 00000066 892C24              <2>  mov [esp+4*%1],%2
   415 00000069 8B7508              <1>  mov esi,[ebp+8]
   416 0000006C 8B7D0C              <1>  mov edi,[ebp+12]
   417                              <1> 
   418                              <1>  rnd_fun nr_xor, nr_mov
   419                              <2> 
   420 0000006F C1C310              <2>  rol ebx,16
   421                              <2>  %1 esi, cl, 0, ebp
   422 00000072 0FB6E9              <3>  movzx %4,%2
   423 00000075 3334AD[00000000]    <3>  xor %1,etab_%3(%4)
   424                              <2>  %1 esi, dh, 1, ebp
   425 0000007C 0FB6EE              <3>  movzx %4,%2
   426 0000007F 3334AD[00040000]    <3>  xor %1,etab_%3(%4)
   427                              <2>  %1 esi, bh, 3, ebp
   428 00000086 0FB6EF              <3>  movzx %4,%2
   429 00000089 3334AD[000C0000]    <3>  xor %1,etab_%3(%4)
   430                              <2>  %1 edi, dl, 0, ebp
   431 00000090 0FB6EA              <3>  movzx %4,%2
   432 00000093 333CAD[00000000]    <3>  xor %1,etab_%3(%4)
   433                              <2>  %1 edi, ah, 1, ebp
   434 0000009A 0FB6EC              <3>  movzx %4,%2
   435 0000009D 333CAD[00040000]    <3>  xor %1,etab_%3(%4)
   436                              <2>  %1 edi, bl, 2, ebp
   437 000000A4 0FB6EB              <3>  movzx %4,%2
   438 000000A7 333CAD[00080000]    <3>  xor %1,etab_%3(%4)
   439                              <2>  %2 ebp, al, 0, ebp
   440 000000AE 0FB6E8              <3>  movzx %4,%2
   441 000000B1 8B2CAD[00000000]    <3>  mov %1,etab_%3(%4)
   442 000000B8 C1EB10              <2>  shr ebx,16
   443 000000BB 250000FFFF          <2>  and eax,0xffff0000
   444 000000C0 09D8                <2>  or eax,ebx
   445 000000C2 C1EA10              <2>  shr edx,16
   446                              <2>  %1 ebp, ah, 1, ebx
   447 000000C5 0FB6DC              <3>  movzx %4,%2
   448 000000C8 332C9D[00040000]    <3>  xor %1,etab_%3(%4)
   449                              <2>  %1 ebp, dh, 3, ebx
   450 000000CF 0FB6DE              <3>  movzx %4,%2
   451 000000D2 332C9D[000C0000]    <3>  xor %1,etab_%3(%4)
   452                              <2>  %2 ebx, dl, 2, ebx
   453 000000D9 0FB6DA              <3>  movzx %4,%2
   454 000000DC 8B1C9D[00080000]    <3>  mov %1,etab_%3(%4)
   455                              <2>  %1 ebx, ch, 1, edx
   456 000000E3 0FB6D5              <3>  movzx %4,%2
   457 000000E6 331C95[00040000]    <3>  xor %1,etab_%3(%4)
   458                              <2>  %1 ebx, al, 0, edx
   459 000000ED 0FB6D0              <3>  movzx %4,%2
   460 000000F0 331C95[00000000]    <3>  xor %1,etab_%3(%4)
   461 000000F7 C1E810              <2>  shr eax,16
   462 000000FA C1E910              <2>  shr ecx,16
   463                              <2>  %1 ebp, cl, 2, edx
   464 000000FD 0FB6D1              <3>  movzx %4,%2
   465 00000100 332C95[00080000]    <3>  xor %1,etab_%3(%4)
   466                              <2>  %1 edi, ch, 3, edx
   467 00000107 0FB6D5              <3>  movzx %4,%2
   468 0000010A 333C95[000C0000]    <3>  xor %1,etab_%3(%4)
   469                              <2>  %1 esi, al, 2, edx
   470 00000111 0FB6D0              <3>  movzx %4,%2
   471 00000114 333495[00080000]    <3>  xor %1,etab_%3(%4)
   472                              <2>  %1 ebx, ah, 3, edx
   473 0000011B 0FB6D4              <3>  movzx %4,%2
   474 0000011E 331C95[000C0000]    <3>  xor %1,etab_%3(%4)
   475                              <2> 
   476                              <1> 
   477 00000125 89E8                <1>  mov eax,ebp
   478 00000127 89F1                <1>  mov ecx,esi
   479 00000129 89FA                <1>  mov edx,edi
   480                              <1>  restore ebp,0
   481 0000012B 8B2C24              <2>  mov %1,[esp+4*%2]
   482 0000012E 334500              <1>  xor eax,[ebp]
   483 00000131 335D04              <1>  xor ebx,[ebp+4]
   484                              <1> 
   485                                      enc_round
   486                              <1> 
   487 00000134 83C510              <1>  add ebp,16
   488                              <1>  save 0,ebp
   489 00000137 892C24              <2>  mov [esp+4*%1],%2
   490 0000013A 8B7508              <1>  mov esi,[ebp+8]
   491 0000013D 8B7D0C              <1>  mov edi,[ebp+12]
   492                              <1> 
   493                              <1>  rnd_fun nr_xor, nr_mov
   494                              <2> 
   495 00000140 C1C310              <2>  rol ebx,16
   496                              <2>  %1 esi, cl, 0, ebp
   497 00000143 0FB6E9              <3>  movzx %4,%2
   498 00000146 3334AD[00000000]    <3>  xor %1,etab_%3(%4)
   499                              <2>  %1 esi, dh, 1, ebp
   500 0000014D 0FB6EE              <3>  movzx %4,%2
   501 00000150 3334AD[00040000]    <3>  xor %1,etab_%3(%4)
   502                              <2>  %1 esi, bh, 3, ebp
   503 00000157 0FB6EF              <3>  movzx %4,%2
   504 0000015A 3334AD[000C0000]    <3>  xor %1,etab_%3(%4)
   505                              <2>  %1 edi, dl, 0, ebp
   506 00000161 0FB6EA              <3>  movzx %4,%2
   507 00000164 333CAD[00000000]    <3>  xor %1,etab_%3(%4)
   508                              <2>  %1 edi, ah, 1, ebp
   509 0000016B 0FB6EC              <3>  movzx %4,%2
   510 0000016E 333CAD[00040000]    <3>  xor %1,etab_%3(%4)
   511                              <2>  %1 edi, bl, 2, ebp
   512 00000175 0FB6EB              <3>  movzx %4,%2
   513 00000178 333CAD[00080000]    <3>  xor %1,etab_%3(%4)
   514                              <2>  %2 ebp, al, 0, ebp
   515 0000017F 0FB6E8              <3>  movzx %4,%2
   516 00000182 8B2CAD[00000000]    <3>  mov %1,etab_%3(%4)
   517 00000189 C1EB10              <2>  shr ebx,16
   518 0000018C 250000FFFF          <2>  and eax,0xffff0000
   519 00000191 09D8                <2>  or eax,ebx
   520 00000193 C1EA10              <2>  shr edx,16
   521                              <2>  %1 ebp, ah, 1, ebx
   522 00000196 0FB6DC              <3>  movzx %4,%2
   523 00000199 332C9D[00040000]    <3>  xor %1,etab_%3(%4)
   524                              <2>  %1 ebp, dh, 3, ebx
   525 000001A0 0FB6DE              <3>  movzx %4,%2
   526 000001A3 332C9D[000C0000]    <3>  xor %1,etab_%3(%4)
   527                              <2>  %2 ebx, dl, 2, ebx
   528 000001AA 0FB6DA              <3>  movzx %4,%2
   529 000001AD 8B1C9D[00080000]    <3>  mov %1,etab_%3(%4)
   530                              <2>  %1 ebx, ch, 1, edx
   531 000001B4 0FB6D5              <3>  movzx %4,%2
   532 000001B7 331C95[00040000]    <3>  xor %1,etab_%3(%4)
   533                              <2>  %1 ebx, al, 0, edx
   534 000001BE 0FB6D0              <3>  movzx %4,%2
   535 000001C1 331C95[00000000]    <3>  xor %1,etab_%3(%4)
   536 000001C8 C1E810              <2>  shr eax,16
   537 000001CB C1E910              <2>  shr ecx,16
   538                              <2>  %1 ebp, cl, 2, edx
   539 000001CE 0FB6D1              <3>  movzx %4,%2
   540 000001D1 332C95[00080000]    <3>  xor %1,etab_%3(%4)
   541                              <2>  %1 edi, ch, 3, edx
   542 000001D8 0FB6D5              <3>  movzx %4,%2
   543 000001DB 333C95[000C0000]    <3>  xor %1,etab_%3(%4)
   544                              <2>  %1 esi, al, 2, edx
   545 000001E2 0FB6D0              <3>  movzx %4,%2
   546 000001E5 333495[00080000]    <3>  xor %1,etab_%3(%4)
   547                              <2>  %1 ebx, ah, 3, edx
   548 000001EC 0FB6D4              <3>  movzx %4,%2
   549 000001EF 331C95[000C0000]    <3>  xor %1,etab_%3(%4)
   550                              <2> 
   551                              <1> 
   552 000001F6 89E8                <1>  mov eax,ebp
   553 000001F8 89F1                <1>  mov ecx,esi
   554 000001FA 89FA                <1>  mov edx,edi
   555                              <1>  restore ebp,0
   556 000001FC 8B2C24              <2>  mov %1,[esp+4*%2]
   557 000001FF 334500              <1>  xor eax,[ebp]
   558 00000202 335D04              <1>  xor ebx,[ebp+4]
   559                              <1> 
   560                                  .2: enc_round
   561                              <1> .2: 
   562                              <1> 
   563 00000205 83C510              <1>  add ebp,16
   564                              <1>  save 0,ebp
   565 00000208 892C24              <2>  mov [esp+4*%1],%2
   566 0000020B 8B7508              <1>  mov esi,[ebp+8]
   567 0000020E 8B7D0C              <1>  mov edi,[ebp+12]
   568                              <1> 
   569                              <1>  rnd_fun nr_xor, nr_mov
   570                              <2> 
   571 00000211 C1C310              <2>  rol ebx,16
   572                              <2>  %1 esi, cl, 0, ebp
   573 00000214 0FB6E9              <3>  movzx %4,%2
   574 00000217 3334AD[00000000]    <3>  xor %1,etab_%3(%4)
   575                              <2>  %1 esi, dh, 1, ebp
   576 0000021E 0FB6EE              <3>  movzx %4,%2
   577 00000221 3334AD[00040000]    <3>  xor %1,etab_%3(%4)
   578                              <2>  %1 esi, bh, 3, ebp
   579 00000228 0FB6EF              <3>  movzx %4,%2
   580 0000022B 3334AD[000C0000]    <3>  xor %1,etab_%3(%4)
   581                              <2>  %1 edi, dl, 0, ebp
   582 00000232 0FB6EA              <3>  movzx %4,%2
   583 00000235 333CAD[00000000]    <3>  xor %1,etab_%3(%4)
   584                              <2>  %1 edi, ah, 1, ebp
   585 0000023C 0FB6EC              <3>  movzx %4,%2
   586 0000023F 333CAD[00040000]    <3>  xor %1,etab_%3(%4)
   587                              <2>  %1 edi, bl, 2, ebp
   588 00000246 0FB6EB              <3>  movzx %4,%2
   589 00000249 333CAD[00080000]    <3>  xor %1,etab_%3(%4)
   590                              <2>  %2 ebp, al, 0, ebp
   591 00000250 0FB6E8              <3>  movzx %4,%2
   592 00000253 8B2CAD[00000000]    <3>  mov %1,etab_%3(%4)
   593 0000025A C1EB10              <2>  shr ebx,16
   594 0000025D 250000FFFF          <2>  and eax,0xffff0000
   595 00000262 09D8                <2>  or eax,ebx
   596 00000264 C1EA10              <2>  shr edx,16
   597                              <2>  %1 ebp, ah, 1, ebx
   598 00000267 0FB6DC              <3>  movzx %4,%2
   599 0000026A 332C9D[00040000]    <3>  xor %1,etab_%3(%4)
   600                              <2>  %1 ebp, dh, 3, ebx
   601 00000271 0FB6DE              <3>  movzx %4,%2
   602 00000274 332C9D[000C0000]    <3>  xor %1,etab_%3(%4)
   603                              <2>  %2 ebx, dl, 2, ebx
   604 0000027B 0FB6DA              <3>  movzx %4,%2
   605 0000027E 8B1C9D[00080000]    <3>  mov %1,etab_%3(%4)
   606                              <2>  %1 ebx, ch, 1, edx
   607 00000285 0FB6D5              <3>  movzx %4,%2
   608 00000288 331C95[00040000]    <3>  xor %1,etab_%3(%4)
   609                              <2>  %1 ebx, al, 0, edx
   610 0000028F 0FB6D0              <3>  movzx %4,%2
   611 00000292 331C95[00000000]    <3>  xor %1,etab_%3(%4)
   612 00000299 C1E810              <2>  shr eax,16
   613 0000029C C1E910              <2>  shr ecx,16
   614                              <2>  %1 ebp, cl, 2, edx
   615 0000029F 0FB6D1              <3>  movzx %4,%2
   616 000002A2 332C95[00080000]    <3>  xor %1,etab_%3(%4)
   617                              <2>  %1 edi, ch, 3, edx
   618 000002A9 0FB6D5              <3>  movzx %4,%2
   619 000002AC 333C95[000C0000]    <3>  xor %1,etab_%3(%4)
   620                              <2>  %1 esi, al, 2, edx
   621 000002B3 0FB6D0              <3>  movzx %4,%2
   622 000002B6 333495[00080000]    <3>  xor %1,etab_%3(%4)
   623                              <2>  %1 ebx, ah, 3, edx
   624 000002BD 0FB6D4              <3>  movzx %4,%2
   625 000002C0 331C95[000C0000]    <3>  xor %1,etab_%3(%4)
   626                              <2> 
   627                              <1> 
   628 000002C7 89E8                <1>  mov eax,ebp
   629 000002C9 89F1                <1>  mov ecx,esi
   630 000002CB 89FA                <1>  mov edx,edi
   631                              <1>  restore ebp,0
   632 000002CD 8B2C24              <2>  mov %1,[esp+4*%2]
   633 000002D0 334500              <1>  xor eax,[ebp]
   634 000002D3 335D04              <1>  xor ebx,[ebp+4]
   635                              <1> 
   636                                      enc_round
   637                              <1> 
   638 000002D6 83C510              <1>  add ebp,16
   639                              <1>  save 0,ebp
   640 000002D9 892C24              <2>  mov [esp+4*%1],%2
   641 000002DC 8B7508              <1>  mov esi,[ebp+8]
   642 000002DF 8B7D0C              <1>  mov edi,[ebp+12]
   643                              <1> 
   644                              <1>  rnd_fun nr_xor, nr_mov
   645                              <2> 
   646 000002E2 C1C310              <2>  rol ebx,16
   647                              <2>  %1 esi, cl, 0, ebp
   648 000002E5 0FB6E9              <3>  movzx %4,%2
   649 000002E8 3334AD[00000000]    <3>  xor %1,etab_%3(%4)
   650                              <2>  %1 esi, dh, 1, ebp
   651 000002EF 0FB6EE              <3>  movzx %4,%2
   652 000002F2 3334AD[00040000]    <3>  xor %1,etab_%3(%4)
   653                              <2>  %1 esi, bh, 3, ebp
   654 000002F9 0FB6EF              <3>  movzx %4,%2
   655 000002FC 3334AD[000C0000]    <3>  xor %1,etab_%3(%4)
   656                              <2>  %1 edi, dl, 0, ebp
   657 00000303 0FB6EA              <3>  movzx %4,%2
   658 00000306 333CAD[00000000]    <3>  xor %1,etab_%3(%4)
   659                              <2>  %1 edi, ah, 1, ebp
   660 0000030D 0FB6EC              <3>  movzx %4,%2
   661 00000310 333CAD[00040000]    <3>  xor %1,etab_%3(%4)
   662                              <2>  %1 edi, bl, 2, ebp
   663 00000317 0FB6EB              <3>  movzx %4,%2
   664 0000031A 333CAD[00080000]    <3>  xor %1,etab_%3(%4)
   665                              <2>  %2 ebp, al, 0, ebp
   666 00000321 0FB6E8              <3>  movzx %4,%2
   667 00000324 8B2CAD[00000000]    <3>  mov %1,etab_%3(%4)
   668 0000032B C1EB10              <2>  shr ebx,16
   669 0000032E 250000FFFF          <2>  and eax,0xffff0000
   670 00000333 09D8                <2>  or eax,ebx
   671 00000335 C1EA10              <2>  shr edx,16
   672                              <2>  %1 ebp, ah, 1, ebx
   673 00000338 0FB6DC              <3>  movzx %4,%2
   674 0000033B 332C9D[00040000]    <3>  xor %1,etab_%3(%4)
   675                              <2>  %1 ebp, dh, 3, ebx
   676 00000342 0FB6DE              <3>  movzx %4,%2
   677 00000345 332C9D[000C0000]    <3>  xor %1,etab_%3(%4)
   678                              <2>  %2 ebx, dl, 2, ebx
   679 0000034C 0FB6DA              <3>  movzx %4,%2
   680 0000034F 8B1C9D[00080000]    <3>  mov %1,etab_%3(%4)
   681                              <2>  %1 ebx, ch, 1, edx
   682 00000356 0FB6D5              <3>  movzx %4,%2
   683 00000359 331C95[00040000]    <3>  xor %1,etab_%3(%4)
   684                              <2>  %1 ebx, al, 0, edx
   685 00000360 0FB6D0              <3>  movzx %4,%2
   686 00000363 331C95[00000000]    <3>  xor %1,etab_%3(%4)
   687 0000036A C1E810              <2>  shr eax,16
   688 0000036D C1E910              <2>  shr ecx,16
   689                              <2>  %1 ebp, cl, 2, edx
   690 00000370 0FB6D1              <3>  movzx %4,%2
   691 00000373 332C95[00080000]    <3>  xor %1,etab_%3(%4)
   692                              <2>  %1 edi, ch, 3, edx
   693 0000037A 0FB6D5              <3>  movzx %4,%2
   694 0000037D 333C95[000C0000]    <3>  xor %1,etab_%3(%4)
   695                              <2>  %1 esi, al, 2, edx
   696 00000384 0FB6D0              <3>  movzx %4,%2
   697 00000387 333495[00080000]    <3>  xor %1,etab_%3(%4)
   698                              <2>  %1 ebx, ah, 3, edx
   699 0000038E 0FB6D4              <3>  movzx %4,%2
   700 00000391 331C95[000C0000]    <3>  xor %1,etab_%3(%4)
   701                              <2> 
   702                              <1> 
   703 00000398 89E8                <1>  mov eax,ebp
   704 0000039A 89F1                <1>  mov ecx,esi
   705 0000039C 89FA                <1>  mov edx,edi
   706                              <1>  restore ebp,0
   707 0000039E 8B2C24              <2>  mov %1,[esp+4*%2]
   708 000003A1 334500              <1>  xor eax,[ebp]
   709 000003A4 335D04              <1>  xor ebx,[ebp+4]
   710                              <1> 
   711                                  .3: enc_round
   712                              <1> .3: 
   713                              <1> 
   714 000003A7 83C510              <1>  add ebp,16
   715                              <1>  save 0,ebp
   716 000003AA 892C24              <2>  mov [esp+4*%1],%2
   717 000003AD 8B7508              <1>  mov esi,[ebp+8]
   718 000003B0 8B7D0C              <1>  mov edi,[ebp+12]
   719                              <1> 
   720                              <1>  rnd_fun nr_xor, nr_mov
   721                              <2> 
   722 000003B3 C1C310              <2>  rol ebx,16
   723                              <2>  %1 esi, cl, 0, ebp
   724 000003B6 0FB6E9              <3>  movzx %4,%2
   725 000003B9 3334AD[00000000]    <3>  xor %1,etab_%3(%4)
   726                              <2>  %1 esi, dh, 1, ebp
   727 000003C0 0FB6EE              <3>  movzx %4,%2
   728 000003C3 3334AD[00040000]    <3>  xor %1,etab_%3(%4)
   729                              <2>  %1 esi, bh, 3, ebp
   730 000003CA 0FB6EF              <3>  movzx %4,%2
   731 000003CD 3334AD[000C0000]    <3>  xor %1,etab_%3(%4)
   732                              <2>  %1 edi, dl, 0, ebp
   733 000003D4 0FB6EA              <3>  movzx %4,%2
   734 000003D7 333CAD[00000000]    <3>  xor %1,etab_%3(%4)
   735                              <2>  %1 edi, ah, 1, ebp
   736 000003DE 0FB6EC              <3>  movzx %4,%2
   737 000003E1 333CAD[00040000]    <3>  xor %1,etab_%3(%4)
   738                              <2>  %1 edi, bl, 2, ebp
   739 000003E8 0FB6EB              <3>  movzx %4,%2
   740 000003EB 333CAD[00080000]    <3>  xor %1,etab_%3(%4)
   741                              <2>  %2 ebp, al, 0, ebp
   742 000003F2 0FB6E8              <3>  movzx %4,%2
   743 000003F5 8B2CAD[00000000]    <3>  mov %1,etab_%3(%4)
   744 000003FC C1EB10              <2>  shr ebx,16
   745 000003FF 250000FFFF          <2>  and eax,0xffff0000
   746 00000404 09D8                <2>  or eax,ebx
   747 00000406 C1EA10              <2>  shr edx,16
   748                              <2>  %1 ebp, ah, 1, ebx
   749 00000409 0FB6DC              <3>  movzx %4,%2
   750 0000040C 332C9D[00040000]    <3>  xor %1,etab_%3(%4)
   751                              <2>  %1 ebp, dh, 3, ebx
   752 00000413 0FB6DE              <3>  movzx %4,%2
   753 00000416 332C9D[000C0000]    <3>  xor %1,etab_%3(%4)
   754                              <2>  %2 ebx, dl, 2, ebx
   755 0000041D 0FB6DA              <3>  movzx %4,%2
   756 00000420 8B1C9D[00080000]    <3>  mov %1,etab_%3(%4)
   757                              <2>  %1 ebx, ch, 1, edx
   758 00000427 0FB6D5              <3>  movzx %4,%2
   759 0000042A 331C95[00040000]    <3>  xor %1,etab_%3(%4)
   760                              <2>  %1 ebx, al, 0, edx
   761 00000431 0FB6D0              <3>  movzx %4,%2
   762 00000434 331C95[00000000]    <3>  xor %1,etab_%3(%4)
   763 0000043B C1E810              <2>  shr eax,16
   764 0000043E C1E910              <2>  shr ecx,16
   765                              <2>  %1 ebp, cl, 2, edx
   766 00000441 0FB6D1              <3>  movzx %4,%2
   767 00000444 332C95[00080000]    <3>  xor %1,etab_%3(%4)
   768                              <2>  %1 edi, ch, 3, edx
   769 0000044B 0FB6D5              <3>  movzx %4,%2
   770 0000044E 333C95[000C0000]    <3>  xor %1,etab_%3(%4)
   771                              <2>  %1 esi, al, 2, edx
   772 00000455 0FB6D0              <3>  movzx %4,%2
   773 00000458 333495[00080000]    <3>  xor %1,etab_%3(%4)
   774                              <2>  %1 ebx, ah, 3, edx
   775 0000045F 0FB6D4              <3>  movzx %4,%2
   776 00000462 331C95[000C0000]    <3>  xor %1,etab_%3(%4)
   777                              <2> 
   778                              <1> 
   779 00000469 89E8                <1>  mov eax,ebp
   780 0000046B 89F1                <1>  mov ecx,esi
   781 0000046D 89FA                <1>  mov edx,edi
   782                              <1>  restore ebp,0
   783 0000046F 8B2C24              <2>  mov %1,[esp+4*%2]
   784 00000472 334500              <1>  xor eax,[ebp]
   785 00000475 335D04              <1>  xor ebx,[ebp+4]
   786                              <1> 
   787                                      enc_round
   788                              <1> 
   789 00000478 83C510              <1>  add ebp,16
   790                              <1>  save 0,ebp
   791 0000047B 892C24              <2>  mov [esp+4*%1],%2
   792 0000047E 8B7508              <1>  mov esi,[ebp+8]
   793 00000481 8B7D0C              <1>  mov edi,[ebp+12]
   794                              <1> 
   795                              <1>  rnd_fun nr_xor, nr_mov
   796                              <2> 
   797 00000484 C1C310              <2>  rol ebx,16
   798                              <2>  %1 esi, cl, 0, ebp
   799 00000487 0FB6E9              <3>  movzx %4,%2
   800 0000048A 3334AD[00000000]    <3>  xor %1,etab_%3(%4)
   801                              <2>  %1 esi, dh, 1, ebp
   802 00000491 0FB6EE              <3>  movzx %4,%2
   803 00000494 3334AD[00040000]    <3>  xor %1,etab_%3(%4)
   804                              <2>  %1 esi, bh, 3, ebp
   805 0000049B 0FB6EF              <3>  movzx %4,%2
   806 0000049E 3334AD[000C0000]    <3>  xor %1,etab_%3(%4)
   807                              <2>  %1 edi, dl, 0, ebp
   808 000004A5 0FB6EA              <3>  movzx %4,%2
   809 000004A8 333CAD[00000000]    <3>  xor %1,etab_%3(%4)
   810                              <2>  %1 edi, ah, 1, ebp
   811 000004AF 0FB6EC              <3>  movzx %4,%2
   812 000004B2 333CAD[00040000]    <3>  xor %1,etab_%3(%4)
   813                              <2>  %1 edi, bl, 2, ebp
   814 000004B9 0FB6EB              <3>  movzx %4,%2
   815 000004BC 333CAD[00080000]    <3>  xor %1,etab_%3(%4)
   816                              <2>  %2 ebp, al, 0, ebp
   817 000004C3 0FB6E8              <3>  movzx %4,%2
   818 000004C6 8B2CAD[00000000]    <3>  mov %1,etab_%3(%4)
   819 000004CD C1EB10              <2>  shr ebx,16
   820 000004D0 250000FFFF          <2>  and eax,0xffff0000
   821 000004D5 09D8                <2>  or eax,ebx
   822 000004D7 C1EA10              <2>  shr edx,16
   823                              <2>  %1 ebp, ah, 1, ebx
   824 000004DA 0FB6DC              <3>  movzx %4,%2
   825 000004DD 332C9D[00040000]    <3>  xor %1,etab_%3(%4)
   826                              <2>  %1 ebp, dh, 3, ebx
   827 000004E4 0FB6DE              <3>  movzx %4,%2
   828 000004E7 332C9D[000C0000]    <3>  xor %1,etab_%3(%4)
   829                              <2>  %2 ebx, dl, 2, ebx
   830 000004EE 0FB6DA              <3>  movzx %4,%2
   831 000004F1 8B1C9D[00080000]    <3>  mov %1,etab_%3(%4)
   832                              <2>  %1 ebx, ch, 1, edx
   833 000004F8 0FB6D5              <3>  movzx %4,%2
   834 000004FB 331C95[00040000]    <3>  xor %1,etab_%3(%4)
   835                              <2>  %1 ebx, al, 0, edx
   836 00000502 0FB6D0              <3>  movzx %4,%2
   837 00000505 331C95[00000000]    <3>  xor %1,etab_%3(%4)
   838 0000050C C1E810              <2>  shr eax,16
   839 0000050F C1E910              <2>  shr ecx,16
   840                              <2>  %1 ebp, cl, 2, edx
   841 00000512 0FB6D1              <3>  movzx %4,%2
   842 00000515 332C95[00080000]    <3>  xor %1,etab_%3(%4)
   843                              <2>  %1 edi, ch, 3, edx
   844 0000051C 0FB6D5              <3>  movzx %4,%2
   845 0000051F 333C95[000C0000]    <3>  xor %1,etab_%3(%4)
   846                              <2>  %1 esi, al, 2, edx
   847 00000526 0FB6D0              <3>  movzx %4,%2
   848 00000529 333495[00080000]    <3>  xor %1,etab_%3(%4)
   849                              <2>  %1 ebx, ah, 3, edx
   850 00000530 0FB6D4              <3>  movzx %4,%2
   851 00000533 331C95[000C0000]    <3>  xor %1,etab_%3(%4)
   852                              <2> 
   853                              <1> 
   854 0000053A 89E8                <1>  mov eax,ebp
   855 0000053C 89F1                <1>  mov ecx,esi
   856 0000053E 89FA                <1>  mov edx,edi
   857                              <1>  restore ebp,0
   858 00000540 8B2C24              <2>  mov %1,[esp+4*%2]
   859 00000543 334500              <1>  xor eax,[ebp]
   860 00000546 335D04              <1>  xor ebx,[ebp+4]
   861                              <1> 
   862                                      enc_round
   863                              <1> 
   864 00000549 83C510              <1>  add ebp,16
   865                              <1>  save 0,ebp
   866 0000054C 892C24              <2>  mov [esp+4*%1],%2
   867 0000054F 8B7508              <1>  mov esi,[ebp+8]
   868 00000552 8B7D0C              <1>  mov edi,[ebp+12]
   869                              <1> 
   870                              <1>  rnd_fun nr_xor, nr_mov
   871                              <2> 
   872 00000555 C1C310              <2>  rol ebx,16
   873                              <2>  %1 esi, cl, 0, ebp
   874 00000558 0FB6E9              <3>  movzx %4,%2
   875 0000055B 3334AD[00000000]    <3>  xor %1,etab_%3(%4)
   876                              <2>  %1 esi, dh, 1, ebp
   877 00000562 0FB6EE              <3>  movzx %4,%2
   878 00000565 3334AD[00040000]    <3>  xor %1,etab_%3(%4)
   879                              <2>  %1 esi, bh, 3, ebp
   880 0000056C 0FB6EF              <3>  movzx %4,%2
   881 0000056F 3334AD[000C0000]    <3>  xor %1,etab_%3(%4)
   882                              <2>  %1 edi, dl, 0, ebp
   883 00000576 0FB6EA              <3>  movzx %4,%2
   884 00000579 333CAD[00000000]    <3>  xor %1,etab_%3(%4)
   885                              <2>  %1 edi, ah, 1, ebp
   886 00000580 0FB6EC              <3>  movzx %4,%2
   887 00000583 333CAD[00040000]    <3>  xor %1,etab_%3(%4)
   888                              <2>  %1 edi, bl, 2, ebp
   889 0000058A 0FB6EB              <3>  movzx %4,%2
   890 0000058D 333CAD[00080000]    <3>  xor %1,etab_%3(%4)
   891                              <2>  %2 ebp, al, 0, ebp
   892 00000594 0FB6E8              <3>  movzx %4,%2
   893 00000597 8B2CAD[00000000]    <3>  mov %1,etab_%3(%4)
   894 0000059E C1EB10              <2>  shr ebx,16
   895 000005A1 250000FFFF          <2>  and eax,0xffff0000
   896 000005A6 09D8                <2>  or eax,ebx
   897 000005A8 C1EA10              <2>  shr edx,16
   898                              <2>  %1 ebp, ah, 1, ebx
   899 000005AB 0FB6DC              <3>  movzx %4,%2
   900 000005AE 332C9D[00040000]    <3>  xor %1,etab_%3(%4)
   901                              <2>  %1 ebp, dh, 3, ebx
   902 000005B5 0FB6DE              <3>  movzx %4,%2
   903 000005B8 332C9D[000C0000]    <3>  xor %1,etab_%3(%4)
   904                              <2>  %2 ebx, dl, 2, ebx
   905 000005BF 0FB6DA              <3>  movzx %4,%2
   906 000005C2 8B1C9D[00080000]    <3>  mov %1,etab_%3(%4)
   907                              <2>  %1 ebx, ch, 1, edx
   908 000005C9 0FB6D5              <3>  movzx %4,%2
   909 000005CC 331C95[00040000]    <3>  xor %1,etab_%3(%4)
   910                              <2>  %1 ebx, al, 0, edx
   911 000005D3 0FB6D0              <3>  movzx %4,%2
   912 000005D6 331C95[00000000]    <3>  xor %1,etab_%3(%4)
   913 000005DD C1E810              <2>  shr eax,16
   914 000005E0 C1E910              <2>  shr ecx,16
   915                              <2>  %1 ebp, cl, 2, edx
   916 000005E3 0FB6D1              <3>  movzx %4,%2
   917 000005E6 332C95[00080000]    <3>  xor %1,etab_%3(%4)
   918                              <2>  %1 edi, ch, 3, edx
   919 000005ED 0FB6D5              <3>  movzx %4,%2
   920 000005F0 333C95[000C0000]    <3>  xor %1,etab_%3(%4)
   921                              <2>  %1 esi, al, 2, edx
   922 000005F7 0FB6D0              <3>  movzx %4,%2
   923 000005FA 333495[00080000]    <3>  xor %1,etab_%3(%4)
   924                              <2>  %1 ebx, ah, 3, edx
   925 00000601 0FB6D4              <3>  movzx %4,%2
   926 00000604 331C95[000C0000]    <3>  xor %1,etab_%3(%4)
   927                              <2> 
   928                              <1> 
   929 0000060B 89E8                <1>  mov eax,ebp
   930 0000060D 89F1                <1>  mov ecx,esi
   931 0000060F 89FA                <1>  mov edx,edi
   932                              <1>  restore ebp,0
   933 00000611 8B2C24              <2>  mov %1,[esp+4*%2]
   934 00000614 334500              <1>  xor eax,[ebp]
   935 00000617 335D04              <1>  xor ebx,[ebp+4]
   936                              <1> 
   937                                      enc_round
   938                              <1> 
   939 0000061A 83C510              <1>  add ebp,16
   940                              <1>  save 0,ebp
   941 0000061D 892C24              <2>  mov [esp+4*%1],%2
   942 00000620 8B7508              <1>  mov esi,[ebp+8]
   943 00000623 8B7D0C              <1>  mov edi,[ebp+12]
   944                              <1> 
   945                              <1>  rnd_fun nr_xor, nr_mov
   946                              <2> 
   947 00000626 C1C310              <2>  rol ebx,16
   948                              <2>  %1 esi, cl, 0, ebp
   949 00000629 0FB6E9              <3>  movzx %4,%2
   950 0000062C 3334AD[00000000]    <3>  xor %1,etab_%3(%4)
   951                              <2>  %1 esi, dh, 1, ebp
   952 00000633 0FB6EE              <3>  movzx %4,%2
   953 00000636 3334AD[00040000]    <3>  xor %1,etab_%3(%4)
   954                              <2>  %1 esi, bh, 3, ebp
   955 0000063D 0FB6EF              <3>  movzx %4,%2
   956 00000640 3334AD[000C0000]    <3>  xor %1,etab_%3(%4)
   957                              <2>  %1 edi, dl, 0, ebp
   958 00000647 0FB6EA              <3>  movzx %4,%2
   959 0000064A 333CAD[00000000]    <3>  xor %1,etab_%3(%4)
   960                              <2>  %1 edi, ah, 1, ebp
   961 00000651 0FB6EC              <3>  movzx %4,%2
   962 00000654 333CAD[00040000]    <3>  xor %1,etab_%3(%4)
   963                              <2>  %1 edi, bl, 2, ebp
   964 0000065B 0FB6EB              <3>  movzx %4,%2
   965 0000065E 333CAD[00080000]    <3>  xor %1,etab_%3(%4)
   966                              <2>  %2 ebp, al, 0, ebp
   967 00000665 0FB6E8              <3>  movzx %4,%2
   968 00000668 8B2CAD[00000000]    <3>  mov %1,etab_%3(%4)
   969 0000066F C1EB10              <2>  shr ebx,16
   970 00000672 250000FFFF          <2>  and eax,0xffff0000
   971 00000677 09D8                <2>  or eax,ebx
   972 00000679 C1EA10              <2>  shr edx,16
   973                              <2>  %1 ebp, ah, 1, ebx
   974 0000067C 0FB6DC              <3>  movzx %4,%2
   975 0000067F 332C9D[00040000]    <3>  xor %1,etab_%3(%4)
   976                              <2>  %1 ebp, dh, 3, ebx
   977 00000686 0FB6DE              <3>  movzx %4,%2
   978 00000689 332C9D[000C0000]    <3>  xor %1,etab_%3(%4)
   979                              <2>  %2 ebx, dl, 2, ebx
   980 00000690 0FB6DA              <3>  movzx %4,%2
   981 00000693 8B1C9D[00080000]    <3>  mov %1,etab_%3(%4)
   982                              <2>  %1 ebx, ch, 1, edx
   983 0000069A 0FB6D5              <3>  movzx %4,%2
   984 0000069D 331C95[00040000]    <3>  xor %1,etab_%3(%4)
   985                              <2>  %1 ebx, al, 0, edx
   986 000006A4 0FB6D0              <3>  movzx %4,%2
   987 000006A7 331C95[00000000]    <3>  xor %1,etab_%3(%4)
   988 000006AE C1E810              <2>  shr eax,16
   989 000006B1 C1E910              <2>  shr ecx,16
   990                              <2>  %1 ebp, cl, 2, edx
   991 000006B4 0FB6D1              <3>  movzx %4,%2
   992 000006B7 332C95[00080000]    <3>  xor %1,etab_%3(%4)
   993                              <2>  %1 edi, ch, 3, edx
   994 000006BE 0FB6D5              <3>  movzx %4,%2
   995 000006C1 333C95[000C0000]    <3>  xor %1,etab_%3(%4)
   996                              <2>  %1 esi, al, 2, edx
   997 000006C8 0FB6D0              <3>  movzx %4,%2
   998 000006CB 333495[00080000]    <3>  xor %1,etab_%3(%4)
   999                              <2>  %1 ebx, ah, 3, edx
  1000 000006D2 0FB6D4              <3>  movzx %4,%2
  1001 000006D5 331C95[000C0000]    <3>  xor %1,etab_%3(%4)
  1002                              <2> 
  1003                              <1> 
  1004 000006DC 89E8                <1>  mov eax,ebp
  1005 000006DE 89F1                <1>  mov ecx,esi
  1006 000006E0 89FA                <1>  mov edx,edi
  1007                              <1>  restore ebp,0
  1008 000006E2 8B2C24              <2>  mov %1,[esp+4*%2]
  1009 000006E5 334500              <1>  xor eax,[ebp]
  1010 000006E8 335D04              <1>  xor ebx,[ebp+4]
  1011                              <1> 
  1012                                      enc_round
  1013                              <1> 
  1014 000006EB 83C510              <1>  add ebp,16
  1015                              <1>  save 0,ebp
  1016 000006EE 892C24              <2>  mov [esp+4*%1],%2
  1017 000006F1 8B7508              <1>  mov esi,[ebp+8]
  1018 000006F4 8B7D0C              <1>  mov edi,[ebp+12]
  1019                              <1> 
  1020                              <1>  rnd_fun nr_xor, nr_mov
  1021                              <2> 
  1022 000006F7 C1C310              <2>  rol ebx,16
  1023                              <2>  %1 esi, cl, 0, ebp
  1024 000006FA 0FB6E9              <3>  movzx %4,%2
  1025 000006FD 3334AD[00000000]    <3>  xor %1,etab_%3(%4)
  1026                              <2>  %1 esi, dh, 1, ebp
  1027 00000704 0FB6EE              <3>  movzx %4,%2
  1028 00000707 3334AD[00040000]    <3>  xor %1,etab_%3(%4)
  1029                              <2>  %1 esi, bh, 3, ebp
  1030 0000070E 0FB6EF              <3>  movzx %4,%2
  1031 00000711 3334AD[000C0000]    <3>  xor %1,etab_%3(%4)
  1032                              <2>  %1 edi, dl, 0, ebp
  1033 00000718 0FB6EA              <3>  movzx %4,%2
  1034 0000071B 333CAD[00000000]    <3>  xor %1,etab_%3(%4)
  1035                              <2>  %1 edi, ah, 1, ebp
  1036 00000722 0FB6EC              <3>  movzx %4,%2
  1037 00000725 333CAD[00040000]    <3>  xor %1,etab_%3(%4)
  1038                              <2>  %1 edi, bl, 2, ebp
  1039 0000072C 0FB6EB              <3>  movzx %4,%2
  1040 0000072F 333CAD[00080000]    <3>  xor %1,etab_%3(%4)
  1041                              <2>  %2 ebp, al, 0, ebp
  1042 00000736 0FB6E8              <3>  movzx %4,%2
  1043 00000739 8B2CAD[00000000]    <3>  mov %1,etab_%3(%4)
  1044 00000740 C1EB10              <2>  shr ebx,16
  1045 00000743 250000FFFF          <2>  and eax,0xffff0000
  1046 00000748 09D8                <2>  or eax,ebx
  1047 0000074A C1EA10              <2>  shr edx,16
  1048                              <2>  %1 ebp, ah, 1, ebx
  1049 0000074D 0FB6DC              <3>  movzx %4,%2
  1050 00000750 332C9D[00040000]    <3>  xor %1,etab_%3(%4)
  1051                              <2>  %1 ebp, dh, 3, ebx
  1052 00000757 0FB6DE              <3>  movzx %4,%2
  1053 0000075A 332C9D[000C0000]    <3>  xor %1,etab_%3(%4)
  1054                              <2>  %2 ebx, dl, 2, ebx
  1055 00000761 0FB6DA              <3>  movzx %4,%2
  1056 00000764 8B1C9D[00080000]    <3>  mov %1,etab_%3(%4)
  1057                              <2>  %1 ebx, ch, 1, edx
  1058 0000076B 0FB6D5              <3>  movzx %4,%2
  1059 0000076E 331C95[00040000]    <3>  xor %1,etab_%3(%4)
  1060                              <2>  %1 ebx, al, 0, edx
  1061 00000775 0FB6D0              <3>  movzx %4,%2
  1062 00000778 331C95[00000000]    <3>  xor %1,etab_%3(%4)
  1063 0000077F C1E810              <2>  shr eax,16
  1064 00000782 C1E910              <2>  shr ecx,16
  1065                              <2>  %1 ebp, cl, 2, edx
  1066 00000785 0FB6D1              <3>  movzx %4,%2
  1067 00000788 332C95[00080000]    <3>  xor %1,etab_%3(%4)
  1068                              <2>  %1 edi, ch, 3, edx
  1069 0000078F 0FB6D5              <3>  movzx %4,%2
  1070 00000792 333C95[000C0000]    <3>  xor %1,etab_%3(%4)
  1071                              <2>  %1 esi, al, 2, edx
  1072 00000799 0FB6D0              <3>  movzx %4,%2
  1073 0000079C 333495[00080000]    <3>  xor %1,etab_%3(%4)
  1074                              <2>  %1 ebx, ah, 3, edx
  1075 000007A3 0FB6D4              <3>  movzx %4,%2
  1076 000007A6 331C95[000C0000]    <3>  xor %1,etab_%3(%4)
  1077                              <2> 
  1078                              <1> 
  1079 000007AD 89E8                <1>  mov eax,ebp
  1080 000007AF 89F1                <1>  mov ecx,esi
  1081 000007B1 89FA                <1>  mov edx,edi
  1082                              <1>  restore ebp,0
  1083 000007B3 8B2C24              <2>  mov %1,[esp+4*%2]
  1084 000007B6 334500              <1>  xor eax,[ebp]
  1085 000007B9 335D04              <1>  xor ebx,[ebp+4]
  1086                              <1> 
  1087                                      enc_round
  1088                              <1> 
  1089 000007BC 83C510              <1>  add ebp,16
  1090                              <1>  save 0,ebp
  1091 000007BF 892C24              <2>  mov [esp+4*%1],%2
  1092 000007C2 8B7508              <1>  mov esi,[ebp+8]
  1093 000007C5 8B7D0C              <1>  mov edi,[ebp+12]
  1094                              <1> 
  1095                              <1>  rnd_fun nr_xor, nr_mov
  1096                              <2> 
  1097 000007C8 C1C310              <2>  rol ebx,16
  1098                              <2>  %1 esi, cl, 0, ebp
  1099 000007CB 0FB6E9              <3>  movzx %4,%2
  1100 000007CE 3334AD[00000000]    <3>  xor %1,etab_%3(%4)
  1101                              <2>  %1 esi, dh, 1, ebp
  1102 000007D5 0FB6EE              <3>  movzx %4,%2
  1103 000007D8 3334AD[00040000]    <3>  xor %1,etab_%3(%4)
  1104                              <2>  %1 esi, bh, 3, ebp
  1105 000007DF 0FB6EF              <3>  movzx %4,%2
  1106 000007E2 3334AD[000C0000]    <3>  xor %1,etab_%3(%4)
  1107                              <2>  %1 edi, dl, 0, ebp
  1108 000007E9 0FB6EA              <3>  movzx %4,%2
  1109 000007EC 333CAD[00000000]    <3>  xor %1,etab_%3(%4)
  1110                              <2>  %1 edi, ah, 1, ebp
  1111 000007F3 0FB6EC              <3>  movzx %4,%2
  1112 000007F6 333CAD[00040000]    <3>  xor %1,etab_%3(%4)
  1113                              <2>  %1 edi, bl, 2, ebp
  1114 000007FD 0FB6EB              <3>  movzx %4,%2
  1115 00000800 333CAD[00080000]    <3>  xor %1,etab_%3(%4)
  1116                              <2>  %2 ebp, al, 0, ebp
  1117 00000807 0FB6E8              <3>  movzx %4,%2
  1118 0000080A 8B2CAD[00000000]    <3>  mov %1,etab_%3(%4)
  1119 00000811 C1EB10              <2>  shr ebx,16
  1120 00000814 250000FFFF          <2>  and eax,0xffff0000
  1121 00000819 09D8                <2>  or eax,ebx
  1122 0000081B C1EA10              <2>  shr edx,16
  1123                              <2>  %1 ebp, ah, 1, ebx
  1124 0000081E 0FB6DC              <3>  movzx %4,%2
  1125 00000821 332C9D[00040000]    <3>  xor %1,etab_%3(%4)
  1126                              <2>  %1 ebp, dh, 3, ebx
  1127 00000828 0FB6DE              <3>  movzx %4,%2
  1128 0000082B 332C9D[000C0000]    <3>  xor %1,etab_%3(%4)
  1129                              <2>  %2 ebx, dl, 2, ebx
  1130 00000832 0FB6DA              <3>  movzx %4,%2
  1131 00000835 8B1C9D[00080000]    <3>  mov %1,etab_%3(%4)
  1132                              <2>  %1 ebx, ch, 1, edx
  1133 0000083C 0FB6D5              <3>  movzx %4,%2
  1134 0000083F 331C95[00040000]    <3>  xor %1,etab_%3(%4)
  1135                              <2>  %1 ebx, al, 0, edx
  1136 00000846 0FB6D0              <3>  movzx %4,%2
  1137 00000849 331C95[00000000]    <3>  xor %1,etab_%3(%4)
  1138 00000850 C1E810              <2>  shr eax,16
  1139 00000853 C1E910              <2>  shr ecx,16
  1140                              <2>  %1 ebp, cl, 2, edx
  1141 00000856 0FB6D1              <3>  movzx %4,%2
  1142 00000859 332C95[00080000]    <3>  xor %1,etab_%3(%4)
  1143                              <2>  %1 edi, ch, 3, edx
  1144 00000860 0FB6D5              <3>  movzx %4,%2
  1145 00000863 333C95[000C0000]    <3>  xor %1,etab_%3(%4)
  1146                              <2>  %1 esi, al, 2, edx
  1147 0000086A 0FB6D0              <3>  movzx %4,%2
  1148 0000086D 333495[00080000]    <3>  xor %1,etab_%3(%4)
  1149                              <2>  %1 ebx, ah, 3, edx
  1150 00000874 0FB6D4              <3>  movzx %4,%2
  1151 00000877 331C95[000C0000]    <3>  xor %1,etab_%3(%4)
  1152                              <2> 
  1153                              <1> 
  1154 0000087E 89E8                <1>  mov eax,ebp
  1155 00000880 89F1                <1>  mov ecx,esi
  1156 00000882 89FA                <1>  mov edx,edi
  1157                              <1>  restore ebp,0
  1158 00000884 8B2C24              <2>  mov %1,[esp+4*%2]
  1159 00000887 334500              <1>  xor eax,[ebp]
  1160 0000088A 335D04              <1>  xor ebx,[ebp+4]
  1161                              <1> 
  1162                                      enc_round
  1163                              <1> 
  1164 0000088D 83C510              <1>  add ebp,16
  1165                              <1>  save 0,ebp
  1166 00000890 892C24              <2>  mov [esp+4*%1],%2
  1167 00000893 8B7508              <1>  mov esi,[ebp+8]
  1168 00000896 8B7D0C              <1>  mov edi,[ebp+12]
  1169                              <1> 
  1170                              <1>  rnd_fun nr_xor, nr_mov
  1171                              <2> 
  1172 00000899 C1C310              <2>  rol ebx,16
  1173                              <2>  %1 esi, cl, 0, ebp
  1174 0000089C 0FB6E9              <3>  movzx %4,%2
  1175 0000089F 3334AD[00000000]    <3>  xor %1,etab_%3(%4)
  1176                              <2>  %1 esi, dh, 1, ebp
  1177 000008A6 0FB6EE              <3>  movzx %4,%2
  1178 000008A9 3334AD[00040000]    <3>  xor %1,etab_%3(%4)
  1179                              <2>  %1 esi, bh, 3, ebp
  1180 000008B0 0FB6EF              <3>  movzx %4,%2
  1181 000008B3 3334AD[000C0000]    <3>  xor %1,etab_%3(%4)
  1182                              <2>  %1 edi, dl, 0, ebp
  1183 000008BA 0FB6EA              <3>  movzx %4,%2
  1184 000008BD 333CAD[00000000]    <3>  xor %1,etab_%3(%4)
  1185                              <2>  %1 edi, ah, 1, ebp
  1186 000008C4 0FB6EC              <3>  movzx %4,%2
  1187 000008C7 333CAD[00040000]    <3>  xor %1,etab_%3(%4)
  1188                              <2>  %1 edi, bl, 2, ebp
  1189 000008CE 0FB6EB              <3>  movzx %4,%2
  1190 000008D1 333CAD[00080000]    <3>  xor %1,etab_%3(%4)
  1191                              <2>  %2 ebp, al, 0, ebp
  1192 000008D8 0FB6E8              <3>  movzx %4,%2
  1193 000008DB 8B2CAD[00000000]    <3>  mov %1,etab_%3(%4)
  1194 000008E2 C1EB10              <2>  shr ebx,16
  1195 000008E5 250000FFFF          <2>  and eax,0xffff0000
  1196 000008EA 09D8                <2>  or eax,ebx
  1197 000008EC C1EA10              <2>  shr edx,16
  1198                              <2>  %1 ebp, ah, 1, ebx
  1199 000008EF 0FB6DC              <3>  movzx %4,%2
  1200 000008F2 332C9D[00040000]    <3>  xor %1,etab_%3(%4)
  1201                              <2>  %1 ebp, dh, 3, ebx
  1202 000008F9 0FB6DE              <3>  movzx %4,%2
  1203 000008FC 332C9D[000C0000]    <3>  xor %1,etab_%3(%4)
  1204                              <2>  %2 ebx, dl, 2, ebx
  1205 00000903 0FB6DA              <3>  movzx %4,%2
  1206 00000906 8B1C9D[00080000]    <3>  mov %1,etab_%3(%4)
  1207                              <2>  %1 ebx, ch, 1, edx
  1208 0000090D 0FB6D5              <3>  movzx %4,%2
  1209 00000910 331C95[00040000]    <3>  xor %1,etab_%3(%4)
  1210                              <2>  %1 ebx, al, 0, edx
  1211 00000917 0FB6D0              <3>  movzx %4,%2
  1212 0000091A 331C95[00000000]    <3>  xor %1,etab_%3(%4)
  1213 00000921 C1E810              <2>  shr eax,16
  1214 00000924 C1E910              <2>  shr ecx,16
  1215                              <2>  %1 ebp, cl, 2, edx
  1216 00000927 0FB6D1              <3>  movzx %4,%2
  1217 0000092A 332C95[00080000]    <3>  xor %1,etab_%3(%4)
  1218                              <2>  %1 edi, ch, 3, edx
  1219 00000931 0FB6D5              <3>  movzx %4,%2
  1220 00000934 333C95[000C0000]    <3>  xor %1,etab_%3(%4)
  1221                              <2>  %1 esi, al, 2, edx
  1222 0000093B 0FB6D0              <3>  movzx %4,%2
  1223 0000093E 333495[00080000]    <3>  xor %1,etab_%3(%4)
  1224                              <2>  %1 ebx, ah, 3, edx
  1225 00000945 0FB6D4              <3>  movzx %4,%2
  1226 00000948 331C95[000C0000]    <3>  xor %1,etab_%3(%4)
  1227                              <2> 
  1228                              <1> 
  1229 0000094F 89E8                <1>  mov eax,ebp
  1230 00000951 89F1                <1>  mov ecx,esi
  1231 00000953 89FA                <1>  mov edx,edi
  1232                              <1>  restore ebp,0
  1233 00000955 8B2C24              <2>  mov %1,[esp+4*%2]
  1234 00000958 334500              <1>  xor eax,[ebp]
  1235 0000095B 335D04              <1>  xor ebx,[ebp+4]
  1236                              <1> 
  1237                                      enc_round
  1238                              <1> 
  1239 0000095E 83C510              <1>  add ebp,16
  1240                              <1>  save 0,ebp
  1241 00000961 892C24              <2>  mov [esp+4*%1],%2
  1242 00000964 8B7508              <1>  mov esi,[ebp+8]
  1243 00000967 8B7D0C              <1>  mov edi,[ebp+12]
  1244                              <1> 
  1245                              <1>  rnd_fun nr_xor, nr_mov
  1246                              <2> 
  1247 0000096A C1C310              <2>  rol ebx,16
  1248                              <2>  %1 esi, cl, 0, ebp
  1249 0000096D 0FB6E9              <3>  movzx %4,%2
  1250 00000970 3334AD[00000000]    <3>  xor %1,etab_%3(%4)
  1251                              <2>  %1 esi, dh, 1, ebp
  1252 00000977 0FB6EE              <3>  movzx %4,%2
  1253 0000097A 3334AD[00040000]    <3>  xor %1,etab_%3(%4)
  1254                              <2>  %1 esi, bh, 3, ebp
  1255 00000981 0FB6EF              <3>  movzx %4,%2
  1256 00000984 3334AD[000C0000]    <3>  xor %1,etab_%3(%4)
  1257                              <2>  %1 edi, dl, 0, ebp
  1258 0000098B 0FB6EA              <3>  movzx %4,%2
  1259 0000098E 333CAD[00000000]    <3>  xor %1,etab_%3(%4)
  1260                              <2>  %1 edi, ah, 1, ebp
  1261 00000995 0FB6EC              <3>  movzx %4,%2
  1262 00000998 333CAD[00040000]    <3>  xor %1,etab_%3(%4)
  1263                              <2>  %1 edi, bl, 2, ebp
  1264 0000099F 0FB6EB              <3>  movzx %4,%2
  1265 000009A2 333CAD[00080000]    <3>  xor %1,etab_%3(%4)
  1266                              <2>  %2 ebp, al, 0, ebp
  1267 000009A9 0FB6E8              <3>  movzx %4,%2
  1268 000009AC 8B2CAD[00000000]    <3>  mov %1,etab_%3(%4)
  1269 000009B3 C1EB10              <2>  shr ebx,16
  1270 000009B6 250000FFFF          <2>  and eax,0xffff0000
  1271 000009BB 09D8                <2>  or eax,ebx
  1272 000009BD C1EA10              <2>  shr edx,16
  1273                              <2>  %1 ebp, ah, 1, ebx
  1274 000009C0 0FB6DC              <3>  movzx %4,%2
  1275 000009C3 332C9D[00040000]    <3>  xor %1,etab_%3(%4)
  1276                              <2>  %1 ebp, dh, 3, ebx
  1277 000009CA 0FB6DE              <3>  movzx %4,%2
  1278 000009CD 332C9D[000C0000]    <3>  xor %1,etab_%3(%4)
  1279                              <2>  %2 ebx, dl, 2, ebx
  1280 000009D4 0FB6DA              <3>  movzx %4,%2
  1281 000009D7 8B1C9D[00080000]    <3>  mov %1,etab_%3(%4)
  1282                              <2>  %1 ebx, ch, 1, edx
  1283 000009DE 0FB6D5              <3>  movzx %4,%2
  1284 000009E1 331C95[00040000]    <3>  xor %1,etab_%3(%4)
  1285                              <2>  %1 ebx, al, 0, edx
  1286 000009E8 0FB6D0              <3>  movzx %4,%2
  1287 000009EB 331C95[00000000]    <3>  xor %1,etab_%3(%4)
  1288 000009F2 C1E810              <2>  shr eax,16
  1289 000009F5 C1E910              <2>  shr ecx,16
  1290                              <2>  %1 ebp, cl, 2, edx
  1291 000009F8 0FB6D1              <3>  movzx %4,%2
  1292 000009FB 332C95[00080000]    <3>  xor %1,etab_%3(%4)
  1293                              <2>  %1 edi, ch, 3, edx
  1294 00000A02 0FB6D5              <3>  movzx %4,%2
  1295 00000A05 333C95[000C0000]    <3>  xor %1,etab_%3(%4)
  1296                              <2>  %1 esi, al, 2, edx
  1297 00000A0C 0FB6D0              <3>  movzx %4,%2
  1298 00000A0F 333495[00080000]    <3>  xor %1,etab_%3(%4)
  1299                              <2>  %1 ebx, ah, 3, edx
  1300 00000A16 0FB6D4              <3>  movzx %4,%2
  1301 00000A19 331C95[000C0000]    <3>  xor %1,etab_%3(%4)
  1302                              <2> 
  1303                              <1> 
  1304 00000A20 89E8                <1>  mov eax,ebp
  1305 00000A22 89F1                <1>  mov ecx,esi
  1306 00000A24 89FA                <1>  mov edx,edi
  1307                              <1>  restore ebp,0
  1308 00000A26 8B2C24              <2>  mov %1,[esp+4*%2]
  1309 00000A29 334500              <1>  xor eax,[ebp]
  1310 00000A2C 335D04              <1>  xor ebx,[ebp+4]
  1311                              <1> 
  1312                                      enc_round
  1313                              <1> 
  1314 00000A2F 83C510              <1>  add ebp,16
  1315                              <1>  save 0,ebp
  1316 00000A32 892C24              <2>  mov [esp+4*%1],%2
  1317 00000A35 8B7508              <1>  mov esi,[ebp+8]
  1318 00000A38 8B7D0C              <1>  mov edi,[ebp+12]
  1319                              <1> 
  1320                              <1>  rnd_fun nr_xor, nr_mov
  1321                              <2> 
  1322 00000A3B C1C310              <2>  rol ebx,16
  1323                              <2>  %1 esi, cl, 0, ebp
  1324 00000A3E 0FB6E9              <3>  movzx %4,%2
  1325 00000A41 3334AD[00000000]    <3>  xor %1,etab_%3(%4)
  1326                              <2>  %1 esi, dh, 1, ebp
  1327 00000A48 0FB6EE              <3>  movzx %4,%2
  1328 00000A4B 3334AD[00040000]    <3>  xor %1,etab_%3(%4)
  1329                              <2>  %1 esi, bh, 3, ebp
  1330 00000A52 0FB6EF              <3>  movzx %4,%2
  1331 00000A55 3334AD[000C0000]    <3>  xor %1,etab_%3(%4)
  1332                              <2>  %1 edi, dl, 0, ebp
  1333 00000A5C 0FB6EA              <3>  movzx %4,%2
  1334 00000A5F 333CAD[00000000]    <3>  xor %1,etab_%3(%4)
  1335                              <2>  %1 edi, ah, 1, ebp
  1336 00000A66 0FB6EC              <3>  movzx %4,%2
  1337 00000A69 333CAD[00040000]    <3>  xor %1,etab_%3(%4)
  1338                              <2>  %1 edi, bl, 2, ebp
  1339 00000A70 0FB6EB              <3>  movzx %4,%2
  1340 00000A73 333CAD[00080000]    <3>  xor %1,etab_%3(%4)
  1341                              <2>  %2 ebp, al, 0, ebp
  1342 00000A7A 0FB6E8              <3>  movzx %4,%2
  1343 00000A7D 8B2CAD[00000000]    <3>  mov %1,etab_%3(%4)
  1344 00000A84 C1EB10              <2>  shr ebx,16
  1345 00000A87 250000FFFF          <2>  and eax,0xffff0000
  1346 00000A8C 09D8                <2>  or eax,ebx
  1347 00000A8E C1EA10              <2>  shr edx,16
  1348                              <2>  %1 ebp, ah, 1, ebx
  1349 00000A91 0FB6DC              <3>  movzx %4,%2
  1350 00000A94 332C9D[00040000]    <3>  xor %1,etab_%3(%4)
  1351                              <2>  %1 ebp, dh, 3, ebx
  1352 00000A9B 0FB6DE              <3>  movzx %4,%2
  1353 00000A9E 332C9D[000C0000]    <3>  xor %1,etab_%3(%4)
  1354                              <2>  %2 ebx, dl, 2, ebx
  1355 00000AA5 0FB6DA              <3>  movzx %4,%2
  1356 00000AA8 8B1C9D[00080000]    <3>  mov %1,etab_%3(%4)
  1357                              <2>  %1 ebx, ch, 1, edx
  1358 00000AAF 0FB6D5              <3>  movzx %4,%2
  1359 00000AB2 331C95[00040000]    <3>  xor %1,etab_%3(%4)
  1360                              <2>  %1 ebx, al, 0, edx
  1361 00000AB9 0FB6D0              <3>  movzx %4,%2
  1362 00000ABC 331C95[00000000]    <3>  xor %1,etab_%3(%4)
  1363 00000AC3 C1E810              <2>  shr eax,16
  1364 00000AC6 C1E910              <2>  shr ecx,16
  1365                              <2>  %1 ebp, cl, 2, edx
  1366 00000AC9 0FB6D1              <3>  movzx %4,%2
  1367 00000ACC 332C95[00080000]    <3>  xor %1,etab_%3(%4)
  1368                              <2>  %1 edi, ch, 3, edx
  1369 00000AD3 0FB6D5              <3>  movzx %4,%2
  1370 00000AD6 333C95[000C0000]    <3>  xor %1,etab_%3(%4)
  1371                              <2>  %1 esi, al, 2, edx
  1372 00000ADD 0FB6D0              <3>  movzx %4,%2
  1373 00000AE0 333495[00080000]    <3>  xor %1,etab_%3(%4)
  1374                              <2>  %1 ebx, ah, 3, edx
  1375 00000AE7 0FB6D4              <3>  movzx %4,%2
  1376 00000AEA 331C95[000C0000]    <3>  xor %1,etab_%3(%4)
  1377                              <2> 
  1378                              <1> 
  1379 00000AF1 89E8                <1>  mov eax,ebp
  1380 00000AF3 89F1                <1>  mov ecx,esi
  1381 00000AF5 89FA                <1>  mov edx,edi
  1382                              <1>  restore ebp,0
  1383 00000AF7 8B2C24              <2>  mov %1,[esp+4*%2]
  1384 00000AFA 334500              <1>  xor eax,[ebp]
  1385 00000AFD 335D04              <1>  xor ebx,[ebp+4]
  1386                              <1> 
  1387                                      enc_last_round
  1388                              <1> 
  1389 00000B00 83C510              <1>  add ebp,16
  1390                              <1>  save 0,ebp
  1391 00000B03 892C24              <2>  mov [esp+4*%1],%2
  1392 00000B06 8B7508              <1>  mov esi,[ebp+8]
  1393 00000B09 8B7D0C              <1>  mov edi,[ebp+12]
  1394                              <1> 
  1395                              <1>  rnd_fun lr_xor, lr_mov
  1396                              <2> 
  1397 00000B0C C1C310              <2>  rol ebx,16
  1398                              <2>  %1 esi, cl, 0, ebp
  1399 00000B0F 0FB6E9              <3>  movzx %4,%2
  1400 00000B12 3334AD[00000000]    <3>  xor %1,eltab_%3(%4)
  1401                              <2>  %1 esi, dh, 1, ebp
  1402 00000B19 0FB6EE              <3>  movzx %4,%2
  1403 00000B1C 3334AD[00040000]    <3>  xor %1,eltab_%3(%4)
  1404                              <2>  %1 esi, bh, 3, ebp
  1405 00000B23 0FB6EF              <3>  movzx %4,%2
  1406 00000B26 3334AD[000C0000]    <3>  xor %1,eltab_%3(%4)
  1407                              <2>  %1 edi, dl, 0, ebp
  1408 00000B2D 0FB6EA              <3>  movzx %4,%2
  1409 00000B30 333CAD[00000000]    <3>  xor %1,eltab_%3(%4)
  1410                              <2>  %1 edi, ah, 1, ebp
  1411 00000B37 0FB6EC              <3>  movzx %4,%2
  1412 00000B3A 333CAD[00040000]    <3>  xor %1,eltab_%3(%4)
  1413                              <2>  %1 edi, bl, 2, ebp
  1414 00000B41 0FB6EB              <3>  movzx %4,%2
  1415 00000B44 333CAD[00080000]    <3>  xor %1,eltab_%3(%4)
  1416                              <2>  %2 ebp, al, 0, ebp
  1417 00000B4B 0FB6E8              <3>  movzx %4,%2
  1418 00000B4E 8B2CAD[00000000]    <3>  mov %1,eltab_%3(%4)
  1419 00000B55 C1EB10              <2>  shr ebx,16
  1420 00000B58 250000FFFF          <2>  and eax,0xffff0000
  1421 00000B5D 09D8                <2>  or eax,ebx
  1422 00000B5F C1EA10              <2>  shr edx,16
  1423                              <2>  %1 ebp, ah, 1, ebx
  1424 00000B62 0FB6DC              <3>  movzx %4,%2
  1425 00000B65 332C9D[00040000]    <3>  xor %1,eltab_%3(%4)
  1426                              <2>  %1 ebp, dh, 3, ebx
  1427 00000B6C 0FB6DE              <3>  movzx %4,%2
  1428 00000B6F 332C9D[000C0000]    <3>  xor %1,eltab_%3(%4)
  1429                              <2>  %2 ebx, dl, 2, ebx
  1430 00000B76 0FB6DA              <3>  movzx %4,%2
  1431 00000B79 8B1C9D[00080000]    <3>  mov %1,eltab_%3(%4)
  1432                              <2>  %1 ebx, ch, 1, edx
  1433 00000B80 0FB6D5              <3>  movzx %4,%2
  1434 00000B83 331C95[00040000]    <3>  xor %1,eltab_%3(%4)
  1435                              <2>  %1 ebx, al, 0, edx
  1436 00000B8A 0FB6D0              <3>  movzx %4,%2
  1437 00000B8D 331C95[00000000]    <3>  xor %1,eltab_%3(%4)
  1438 00000B94 C1E810              <2>  shr eax,16
  1439 00000B97 C1E910              <2>  shr ecx,16
  1440                              <2>  %1 ebp, cl, 2, edx
  1441 00000B9A 0FB6D1              <3>  movzx %4,%2
  1442 00000B9D 332C95[00080000]    <3>  xor %1,eltab_%3(%4)
  1443                              <2>  %1 edi, ch, 3, edx
  1444 00000BA4 0FB6D5              <3>  movzx %4,%2
  1445 00000BA7 333C95[000C0000]    <3>  xor %1,eltab_%3(%4)
  1446                              <2>  %1 esi, al, 2, edx
  1447 00000BAE 0FB6D0              <3>  movzx %4,%2
  1448 00000BB1 333495[00080000]    <3>  xor %1,eltab_%3(%4)
  1449                              <2>  %1 ebx, ah, 3, edx
  1450 00000BB8 0FB6D4              <3>  movzx %4,%2
  1451 00000BBB 331C95[000C0000]    <3>  xor %1,eltab_%3(%4)
  1452                              <2> 
  1453                              <1> 
  1454 00000BC2 89E8                <1>  mov eax,ebp
  1455                              <1>  restore ebp,0
  1456 00000BC4 8B2C24              <2>  mov %1,[esp+4*%2]
  1457 00000BC7 334500              <1>  xor eax,[ebp]
  1458 00000BCA 335D04              <1>  xor ebx,[ebp+4]
  1459                              <1> 
  1460                                  
  1461 00000BCD 8B54241C                    mov     edx,[esp+out_blk+stk_spc]
  1462 00000BD1 8902                        mov     [edx],eax
  1463 00000BD3 895A04                      mov     [edx+4],ebx
  1464 00000BD6 897208                      mov     [edx+8],esi
  1465 00000BD9 897A0C                      mov     [edx+12],edi
  1466 00000BDC 31C0                        xor     eax,eax
  1467                                  
  1468 00000BDE 8B6C2410                .5: mov     ebp,[esp+16]
  1469 00000BE2 8B5C240C                    mov     ebx,[esp+12]
  1470 00000BE6 8B742408                    mov     esi,[esp+ 8]
  1471 00000BEA 8B7C2404                    mov     edi,[esp+ 4]
  1472 00000BEE 83C414                      add     esp,stk_spc
  1473                                      do_exit
  1474                              <1> %ifdef DLL_EXPORT
  1475                              <1>  ret %1
  1476                              <1> %else
  1477 00000BF1 C3                  <1>  ret
  1478                              <1> %endif
  1479                                  
  1480                                  %endif
  1481                                  
  1482                                  %ifdef  DECRYPTION
  1483                                  
  1484                                      extern  t_in
  1485                                  
  1486                                  %define dtab_0(x)   [t_in+4*x]
  1487                                  %define dtab_1(x)   [t_in+1024+4*x]
  1488                                  %define dtab_2(x)   [t_in+2048+4*x]
  1489                                  %define dtab_3(x)   [t_in+3072+4*x]
  1490                                  
  1491                                  %ifdef LAST_ROUND_TABLES
  1492                                  
  1493                                      extern  t_il
  1494                                  
  1495                                  %define dltab_0(x)  [t_il+4*x]
  1496                                  %define dltab_1(x)  [t_il+1024+4*x]
  1497                                  %define dltab_2(x)  [t_il+2048+4*x]
  1498                                  %define dltab_3(x)  [t_il+3072+4*x]
  1499                                  
  1500                                  %else
  1501                                  
  1502                                      extern  _t_ibox
  1503                                  
  1504                                  %define dtab_x(x)   byte [_t_ibox+x]
  1505                                  
  1506                                  %endif
  1507                                  
  1508                                  %macro irn_fun 2
  1509                                  
  1510                                      rol eax,16
  1511                                      %1      esi, cl, 0, ebp
  1512                                      %1      esi, bh, 1, ebp
  1513                                      %1      esi, al, 2, ebp
  1514                                      %1      edi, dl, 0, ebp
  1515                                      %1      edi, ch, 1, ebp
  1516                                      %1      edi, ah, 3, ebp
  1517                                      %2      ebp, bl, 0, ebp
  1518                                      shr     eax,16
  1519                                      and     ebx,0xffff0000
  1520                                      or      ebx,eax
  1521                                      shr     ecx,16
  1522                                      %1      ebp, bh, 1, eax
  1523                                      %1      ebp, ch, 3, eax
  1524                                      %2      eax, cl, 2, ecx
  1525                                      %1      eax, bl, 0, ecx
  1526                                      %1      eax, dh, 1, ecx
  1527                                      shr     ebx,16
  1528                                      shr     edx,16
  1529                                      %1      esi, dh, 3, ecx
  1530                                      %1      ebp, dl, 2, ecx
  1531                                      %1      eax, bh, 3, ecx
  1532                                      %1      edi, bl, 2, ecx
  1533                                  
  1534                                  %endmacro
  1535                                  
  1536                                  ; Basic MOV and XOR Operations for normal rounds
  1537                                  
  1538                                  %macro  ni_xor  4
  1539                                      movzx   %4,%2
  1540                                      xor     %1,dtab_%3(%4)
  1541                                  %endmacro
  1542                                  
  1543                                  %macro  ni_mov  4
  1544                                      movzx   %4,%2
  1545                                      mov     %1,dtab_%3(%4)
  1546                                  %endmacro
  1547                                  
  1548                                  ; Basic MOV and XOR Operations for last round
  1549                                  
  1550                                  %ifdef LAST_ROUND_TABLES
  1551                                  
  1552                                  %macro  li_xor  4
  1553                                      movzx   %4,%2
  1554                                      xor     %1,dltab_%3(%4)
  1555                                  %endmacro
  1556                                  
  1557                                  %macro  li_mov  4
  1558                                      movzx   %4,%2
  1559                                      mov     %1,dltab_%3(%4)
  1560                                  %endmacro
  1561                                  
  1562                                  %else
  1563                                  
  1564                                      %macro  li_xor  4
  1565                                          movzx   %4,%2
  1566                                          movzx   %4,dtab_x(%4)
  1567                                      %if %3 != 0
  1568                                          shl     %4,8*%3
  1569                                      %endif
  1570                                          xor     %1,%4
  1571                                      %endmacro
  1572                                  
  1573                                      %macro  li_mov  4
  1574                                          movzx   %4,%2
  1575                                          movzx   %1,dtab_x(%4)
  1576                                      %if %3 != 0
  1577                                          shl     %1,8*%3
  1578                                      %endif
  1579                                      %endmacro
  1580                                  
  1581                                  %endif
  1582                                  
  1583                                  %macro dec_round 0
  1584                                  
  1585                                  %ifdef AES_REV_DKS
  1586                                      add     ebp,16
  1587                                  %else
  1588                                      sub     ebp,16
  1589                                  %endif
  1590                                      save    0,ebp
  1591                                      mov     esi,[ebp+8]
  1592                                      mov     edi,[ebp+12]
  1593                                  
  1594                                      irn_fun ni_xor, ni_mov
  1595                                  
  1596                                      mov     ebx,ebp
  1597                                      mov     ecx,esi
  1598                                      mov     edx,edi
  1599                                      restore ebp,0
  1600                                      xor     eax,[ebp]
  1601                                      xor     ebx,[ebp+4]
  1602                                  
  1603                                  %endmacro
  1604                                  
  1605                                  %macro dec_last_round 0
  1606                                  
  1607                                  %ifdef AES_REV_DKS
  1608                                      add     ebp,16
  1609                                  %else
  1610                                      sub     ebp,16
  1611                                  %endif
  1612                                      save    0,ebp
  1613                                      mov     esi,[ebp+8]
  1614                                      mov     edi,[ebp+12]
  1615                                  
  1616                                      irn_fun li_xor, li_mov
  1617                                  
  1618                                      mov     ebx,ebp
  1619                                      restore ebp,0
  1620                                      xor     eax,[ebp]
  1621                                      xor     ebx,[ebp+4]
  1622                                  
  1623                                  %endmacro
  1624                                  
  1625                                      section .text
  1626                                  
  1627                                  ; AES Decryption Subroutine
  1628                                  
  1629                                      do_name aes_decrypt
  1630                              <1> %ifndef DLL_EXPORT
  1631 00000BF2 90<rept>            <1>  align 32
  1632                              <1>  global %1
  1633                              <1> %1:
  1634                              <1> %else
  1635                              <1>  align 32
  1636                              <1>  global %1@%2
  1637                              <1>  export _%1@%2
  1638                              <1> %1@%2:
  1639                              <1> %endif
  1640                                  
  1641 00000C00 83EC14                      sub     esp,stk_spc
  1642 00000C03 896C2410                    mov     [esp+16],ebp
  1643 00000C07 895C240C                    mov     [esp+12],ebx
  1644 00000C0B 89742408                    mov     [esp+ 8],esi
  1645 00000C0F 897C2404                    mov     [esp+ 4],edi
  1646                                  
  1647                                  ; input four columns and xor in first round key
  1648                                  
  1649 00000C13 8B742418                    mov     esi,[esp+in_blk+stk_spc] ; input pointer
  1650 00000C17 8B06                        mov     eax,[esi   ]
  1651 00000C19 8B5E04                      mov     ebx,[esi+ 4]
  1652 00000C1C 8B4E08                      mov     ecx,[esi+ 8]
  1653 00000C1F 8B560C                      mov     edx,[esi+12]
  1654 00000C22 8D7610                      lea     esi,[esi+16]
  1655                                  
  1656 00000C25 8B6C2420                    mov     ebp,[esp+ctx+stk_spc]    ; key pointer
  1657 00000C29 0FB6BDF0000000              movzx   edi,byte[ebp+4*KS_LENGTH]
  1658                                  %ifndef  AES_REV_DKS        ; if decryption key schedule is not reversed
  1659                                      lea     ebp,[ebp+edi]   ; we have to access it from the top down
  1660                                  %endif
  1661 00000C30 334500                      xor     eax,[ebp   ]    ; key schedule
  1662 00000C33 335D04                      xor     ebx,[ebp+ 4]
  1663 00000C36 334D08                      xor     ecx,[ebp+ 8]
  1664 00000C39 33550C                      xor     edx,[ebp+12]
  1665                                  
  1666                                  ; determine the number of rounds
  1667                                  
  1668 00000C3C 81FFA0000000                cmp     edi,10*16
  1669 00000C42 0F8466030000                je      .3
  1670 00000C48 81FFC0000000                cmp     edi,12*16
  1671 00000C4E 0F84B6010000                je      .2
  1672 00000C54 81FFE0000000                cmp     edi,14*16
  1673 00000C5A 740A                        je      .1
  1674 00000C5C B8FFFFFFFF                  mov     eax,-1
  1675 00000C61 E98A0B0000                  jmp     .5
  1676                                  
  1677                                  .1: dec_round
  1678                              <1> .1: 
  1679                              <1> 
  1680                              <1> %ifdef AES_REV_DKS
  1681 00000C66 83C510              <1>  add ebp,16
  1682                              <1> %else
  1683                              <1>  sub ebp,16
  1684                              <1> %endif
  1685                              <1>  save 0,ebp
  1686 00000C69 892C24              <2>  mov [esp+4*%1],%2
  1687 00000C6C 8B7508              <1>  mov esi,[ebp+8]
  1688 00000C6F 8B7D0C              <1>  mov edi,[ebp+12]
  1689                              <1> 
  1690                              <1>  irn_fun ni_xor, ni_mov
  1691                              <2> 
  1692 00000C72 C1C010              <2>  rol eax,16
  1693                              <2>  %1 esi, cl, 0, ebp
  1694 00000C75 0FB6E9              <3>  movzx %4,%2
  1695 00000C78 3334AD[00000000]    <3>  xor %1,dtab_%3(%4)
  1696                              <2>  %1 esi, bh, 1, ebp
  1697 00000C7F 0FB6EF              <3>  movzx %4,%2
  1698 00000C82 3334AD[00040000]    <3>  xor %1,dtab_%3(%4)
  1699                              <2>  %1 esi, al, 2, ebp
  1700 00000C89 0FB6E8              <3>  movzx %4,%2
  1701 00000C8C 3334AD[00080000]    <3>  xor %1,dtab_%3(%4)
  1702                              <2>  %1 edi, dl, 0, ebp
  1703 00000C93 0FB6EA              <3>  movzx %4,%2
  1704 00000C96 333CAD[00000000]    <3>  xor %1,dtab_%3(%4)
  1705                              <2>  %1 edi, ch, 1, ebp
  1706 00000C9D 0FB6ED              <3>  movzx %4,%2
  1707 00000CA0 333CAD[00040000]    <3>  xor %1,dtab_%3(%4)
  1708                              <2>  %1 edi, ah, 3, ebp
  1709 00000CA7 0FB6EC              <3>  movzx %4,%2
  1710 00000CAA 333CAD[000C0000]    <3>  xor %1,dtab_%3(%4)
  1711                              <2>  %2 ebp, bl, 0, ebp
  1712 00000CB1 0FB6EB              <3>  movzx %4,%2
  1713 00000CB4 8B2CAD[00000000]    <3>  mov %1,dtab_%3(%4)
  1714 00000CBB C1E810              <2>  shr eax,16
  1715 00000CBE 81E30000FFFF        <2>  and ebx,0xffff0000
  1716 00000CC4 09C3                <2>  or ebx,eax
  1717 00000CC6 C1E910              <2>  shr ecx,16
  1718                              <2>  %1 ebp, bh, 1, eax
  1719 00000CC9 0FB6C7              <3>  movzx %4,%2
  1720 00000CCC 332C85[00040000]    <3>  xor %1,dtab_%3(%4)
  1721                              <2>  %1 ebp, ch, 3, eax
  1722 00000CD3 0FB6C5              <3>  movzx %4,%2
  1723 00000CD6 332C85[000C0000]    <3>  xor %1,dtab_%3(%4)
  1724                              <2>  %2 eax, cl, 2, ecx
  1725 00000CDD 0FB6C9              <3>  movzx %4,%2
  1726 00000CE0 8B048D[00080000]    <3>  mov %1,dtab_%3(%4)
  1727                              <2>  %1 eax, bl, 0, ecx
  1728 00000CE7 0FB6CB              <3>  movzx %4,%2
  1729 00000CEA 33048D[00000000]    <3>  xor %1,dtab_%3(%4)
  1730                              <2>  %1 eax, dh, 1, ecx
  1731 00000CF1 0FB6CE              <3>  movzx %4,%2
  1732 00000CF4 33048D[00040000]    <3>  xor %1,dtab_%3(%4)
  1733 00000CFB C1EB10              <2>  shr ebx,16
  1734 00000CFE C1EA10              <2>  shr edx,16
  1735                              <2>  %1 esi, dh, 3, ecx
  1736 00000D01 0FB6CE              <3>  movzx %4,%2
  1737 00000D04 33348D[000C0000]    <3>  xor %1,dtab_%3(%4)
  1738                              <2>  %1 ebp, dl, 2, ecx
  1739 00000D0B 0FB6CA              <3>  movzx %4,%2
  1740 00000D0E 332C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  1741                              <2>  %1 eax, bh, 3, ecx
  1742 00000D15 0FB6CF              <3>  movzx %4,%2
  1743 00000D18 33048D[000C0000]    <3>  xor %1,dtab_%3(%4)
  1744                              <2>  %1 edi, bl, 2, ecx
  1745 00000D1F 0FB6CB              <3>  movzx %4,%2
  1746 00000D22 333C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  1747                              <2> 
  1748                              <1> 
  1749 00000D29 89EB                <1>  mov ebx,ebp
  1750 00000D2B 89F1                <1>  mov ecx,esi
  1751 00000D2D 89FA                <1>  mov edx,edi
  1752                              <1>  restore ebp,0
  1753 00000D2F 8B2C24              <2>  mov %1,[esp+4*%2]
  1754 00000D32 334500              <1>  xor eax,[ebp]
  1755 00000D35 335D04              <1>  xor ebx,[ebp+4]
  1756                              <1> 
  1757                                      dec_round
  1758                              <1> 
  1759                              <1> %ifdef AES_REV_DKS
  1760 00000D38 83C510              <1>  add ebp,16
  1761                              <1> %else
  1762                              <1>  sub ebp,16
  1763                              <1> %endif
  1764                              <1>  save 0,ebp
  1765 00000D3B 892C24              <2>  mov [esp+4*%1],%2
  1766 00000D3E 8B7508              <1>  mov esi,[ebp+8]
  1767 00000D41 8B7D0C              <1>  mov edi,[ebp+12]
  1768                              <1> 
  1769                              <1>  irn_fun ni_xor, ni_mov
  1770                              <2> 
  1771 00000D44 C1C010              <2>  rol eax,16
  1772                              <2>  %1 esi, cl, 0, ebp
  1773 00000D47 0FB6E9              <3>  movzx %4,%2
  1774 00000D4A 3334AD[00000000]    <3>  xor %1,dtab_%3(%4)
  1775                              <2>  %1 esi, bh, 1, ebp
  1776 00000D51 0FB6EF              <3>  movzx %4,%2
  1777 00000D54 3334AD[00040000]    <3>  xor %1,dtab_%3(%4)
  1778                              <2>  %1 esi, al, 2, ebp
  1779 00000D5B 0FB6E8              <3>  movzx %4,%2
  1780 00000D5E 3334AD[00080000]    <3>  xor %1,dtab_%3(%4)
  1781                              <2>  %1 edi, dl, 0, ebp
  1782 00000D65 0FB6EA              <3>  movzx %4,%2
  1783 00000D68 333CAD[00000000]    <3>  xor %1,dtab_%3(%4)
  1784                              <2>  %1 edi, ch, 1, ebp
  1785 00000D6F 0FB6ED              <3>  movzx %4,%2
  1786 00000D72 333CAD[00040000]    <3>  xor %1,dtab_%3(%4)
  1787                              <2>  %1 edi, ah, 3, ebp
  1788 00000D79 0FB6EC              <3>  movzx %4,%2
  1789 00000D7C 333CAD[000C0000]    <3>  xor %1,dtab_%3(%4)
  1790                              <2>  %2 ebp, bl, 0, ebp
  1791 00000D83 0FB6EB              <3>  movzx %4,%2
  1792 00000D86 8B2CAD[00000000]    <3>  mov %1,dtab_%3(%4)
  1793 00000D8D C1E810              <2>  shr eax,16
  1794 00000D90 81E30000FFFF        <2>  and ebx,0xffff0000
  1795 00000D96 09C3                <2>  or ebx,eax
  1796 00000D98 C1E910              <2>  shr ecx,16
  1797                              <2>  %1 ebp, bh, 1, eax
  1798 00000D9B 0FB6C7              <3>  movzx %4,%2
  1799 00000D9E 332C85[00040000]    <3>  xor %1,dtab_%3(%4)
  1800                              <2>  %1 ebp, ch, 3, eax
  1801 00000DA5 0FB6C5              <3>  movzx %4,%2
  1802 00000DA8 332C85[000C0000]    <3>  xor %1,dtab_%3(%4)
  1803                              <2>  %2 eax, cl, 2, ecx
  1804 00000DAF 0FB6C9              <3>  movzx %4,%2
  1805 00000DB2 8B048D[00080000]    <3>  mov %1,dtab_%3(%4)
  1806                              <2>  %1 eax, bl, 0, ecx
  1807 00000DB9 0FB6CB              <3>  movzx %4,%2
  1808 00000DBC 33048D[00000000]    <3>  xor %1,dtab_%3(%4)
  1809                              <2>  %1 eax, dh, 1, ecx
  1810 00000DC3 0FB6CE              <3>  movzx %4,%2
  1811 00000DC6 33048D[00040000]    <3>  xor %1,dtab_%3(%4)
  1812 00000DCD C1EB10              <2>  shr ebx,16
  1813 00000DD0 C1EA10              <2>  shr edx,16
  1814                              <2>  %1 esi, dh, 3, ecx
  1815 00000DD3 0FB6CE              <3>  movzx %4,%2
  1816 00000DD6 33348D[000C0000]    <3>  xor %1,dtab_%3(%4)
  1817                              <2>  %1 ebp, dl, 2, ecx
  1818 00000DDD 0FB6CA              <3>  movzx %4,%2
  1819 00000DE0 332C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  1820                              <2>  %1 eax, bh, 3, ecx
  1821 00000DE7 0FB6CF              <3>  movzx %4,%2
  1822 00000DEA 33048D[000C0000]    <3>  xor %1,dtab_%3(%4)
  1823                              <2>  %1 edi, bl, 2, ecx
  1824 00000DF1 0FB6CB              <3>  movzx %4,%2
  1825 00000DF4 333C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  1826                              <2> 
  1827                              <1> 
  1828 00000DFB 89EB                <1>  mov ebx,ebp
  1829 00000DFD 89F1                <1>  mov ecx,esi
  1830 00000DFF 89FA                <1>  mov edx,edi
  1831                              <1>  restore ebp,0
  1832 00000E01 8B2C24              <2>  mov %1,[esp+4*%2]
  1833 00000E04 334500              <1>  xor eax,[ebp]
  1834 00000E07 335D04              <1>  xor ebx,[ebp+4]
  1835                              <1> 
  1836                                  .2: dec_round
  1837                              <1> .2: 
  1838                              <1> 
  1839                              <1> %ifdef AES_REV_DKS
  1840 00000E0A 83C510              <1>  add ebp,16
  1841                              <1> %else
  1842                              <1>  sub ebp,16
  1843                              <1> %endif
  1844                              <1>  save 0,ebp
  1845 00000E0D 892C24              <2>  mov [esp+4*%1],%2
  1846 00000E10 8B7508              <1>  mov esi,[ebp+8]
  1847 00000E13 8B7D0C              <1>  mov edi,[ebp+12]
  1848                              <1> 
  1849                              <1>  irn_fun ni_xor, ni_mov
  1850                              <2> 
  1851 00000E16 C1C010              <2>  rol eax,16
  1852                              <2>  %1 esi, cl, 0, ebp
  1853 00000E19 0FB6E9              <3>  movzx %4,%2
  1854 00000E1C 3334AD[00000000]    <3>  xor %1,dtab_%3(%4)
  1855                              <2>  %1 esi, bh, 1, ebp
  1856 00000E23 0FB6EF              <3>  movzx %4,%2
  1857 00000E26 3334AD[00040000]    <3>  xor %1,dtab_%3(%4)
  1858                              <2>  %1 esi, al, 2, ebp
  1859 00000E2D 0FB6E8              <3>  movzx %4,%2
  1860 00000E30 3334AD[00080000]    <3>  xor %1,dtab_%3(%4)
  1861                              <2>  %1 edi, dl, 0, ebp
  1862 00000E37 0FB6EA              <3>  movzx %4,%2
  1863 00000E3A 333CAD[00000000]    <3>  xor %1,dtab_%3(%4)
  1864                              <2>  %1 edi, ch, 1, ebp
  1865 00000E41 0FB6ED              <3>  movzx %4,%2
  1866 00000E44 333CAD[00040000]    <3>  xor %1,dtab_%3(%4)
  1867                              <2>  %1 edi, ah, 3, ebp
  1868 00000E4B 0FB6EC              <3>  movzx %4,%2
  1869 00000E4E 333CAD[000C0000]    <3>  xor %1,dtab_%3(%4)
  1870                              <2>  %2 ebp, bl, 0, ebp
  1871 00000E55 0FB6EB              <3>  movzx %4,%2
  1872 00000E58 8B2CAD[00000000]    <3>  mov %1,dtab_%3(%4)
  1873 00000E5F C1E810              <2>  shr eax,16
  1874 00000E62 81E30000FFFF        <2>  and ebx,0xffff0000
  1875 00000E68 09C3                <2>  or ebx,eax
  1876 00000E6A C1E910              <2>  shr ecx,16
  1877                              <2>  %1 ebp, bh, 1, eax
  1878 00000E6D 0FB6C7              <3>  movzx %4,%2
  1879 00000E70 332C85[00040000]    <3>  xor %1,dtab_%3(%4)
  1880                              <2>  %1 ebp, ch, 3, eax
  1881 00000E77 0FB6C5              <3>  movzx %4,%2
  1882 00000E7A 332C85[000C0000]    <3>  xor %1,dtab_%3(%4)
  1883                              <2>  %2 eax, cl, 2, ecx
  1884 00000E81 0FB6C9              <3>  movzx %4,%2
  1885 00000E84 8B048D[00080000]    <3>  mov %1,dtab_%3(%4)
  1886                              <2>  %1 eax, bl, 0, ecx
  1887 00000E8B 0FB6CB              <3>  movzx %4,%2
  1888 00000E8E 33048D[00000000]    <3>  xor %1,dtab_%3(%4)
  1889                              <2>  %1 eax, dh, 1, ecx
  1890 00000E95 0FB6CE              <3>  movzx %4,%2
  1891 00000E98 33048D[00040000]    <3>  xor %1,dtab_%3(%4)
  1892 00000E9F C1EB10              <2>  shr ebx,16
  1893 00000EA2 C1EA10              <2>  shr edx,16
  1894                              <2>  %1 esi, dh, 3, ecx
  1895 00000EA5 0FB6CE              <3>  movzx %4,%2
  1896 00000EA8 33348D[000C0000]    <3>  xor %1,dtab_%3(%4)
  1897                              <2>  %1 ebp, dl, 2, ecx
  1898 00000EAF 0FB6CA              <3>  movzx %4,%2
  1899 00000EB2 332C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  1900                              <2>  %1 eax, bh, 3, ecx
  1901 00000EB9 0FB6CF              <3>  movzx %4,%2
  1902 00000EBC 33048D[000C0000]    <3>  xor %1,dtab_%3(%4)
  1903                              <2>  %1 edi, bl, 2, ecx
  1904 00000EC3 0FB6CB              <3>  movzx %4,%2
  1905 00000EC6 333C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  1906                              <2> 
  1907                              <1> 
  1908 00000ECD 89EB                <1>  mov ebx,ebp
  1909 00000ECF 89F1                <1>  mov ecx,esi
  1910 00000ED1 89FA                <1>  mov edx,edi
  1911                              <1>  restore ebp,0
  1912 00000ED3 8B2C24              <2>  mov %1,[esp+4*%2]
  1913 00000ED6 334500              <1>  xor eax,[ebp]
  1914 00000ED9 335D04              <1>  xor ebx,[ebp+4]
  1915                              <1> 
  1916                                      dec_round
  1917                              <1> 
  1918                              <1> %ifdef AES_REV_DKS
  1919 00000EDC 83C510              <1>  add ebp,16
  1920                              <1> %else
  1921                              <1>  sub ebp,16
  1922                              <1> %endif
  1923                              <1>  save 0,ebp
  1924 00000EDF 892C24              <2>  mov [esp+4*%1],%2
  1925 00000EE2 8B7508              <1>  mov esi,[ebp+8]
  1926 00000EE5 8B7D0C              <1>  mov edi,[ebp+12]
  1927                              <1> 
  1928                              <1>  irn_fun ni_xor, ni_mov
  1929                              <2> 
  1930 00000EE8 C1C010              <2>  rol eax,16
  1931                              <2>  %1 esi, cl, 0, ebp
  1932 00000EEB 0FB6E9              <3>  movzx %4,%2
  1933 00000EEE 3334AD[00000000]    <3>  xor %1,dtab_%3(%4)
  1934                              <2>  %1 esi, bh, 1, ebp
  1935 00000EF5 0FB6EF              <3>  movzx %4,%2
  1936 00000EF8 3334AD[00040000]    <3>  xor %1,dtab_%3(%4)
  1937                              <2>  %1 esi, al, 2, ebp
  1938 00000EFF 0FB6E8              <3>  movzx %4,%2
  1939 00000F02 3334AD[00080000]    <3>  xor %1,dtab_%3(%4)
  1940                              <2>  %1 edi, dl, 0, ebp
  1941 00000F09 0FB6EA              <3>  movzx %4,%2
  1942 00000F0C 333CAD[00000000]    <3>  xor %1,dtab_%3(%4)
  1943                              <2>  %1 edi, ch, 1, ebp
  1944 00000F13 0FB6ED              <3>  movzx %4,%2
  1945 00000F16 333CAD[00040000]    <3>  xor %1,dtab_%3(%4)
  1946                              <2>  %1 edi, ah, 3, ebp
  1947 00000F1D 0FB6EC              <3>  movzx %4,%2
  1948 00000F20 333CAD[000C0000]    <3>  xor %1,dtab_%3(%4)
  1949                              <2>  %2 ebp, bl, 0, ebp
  1950 00000F27 0FB6EB              <3>  movzx %4,%2
  1951 00000F2A 8B2CAD[00000000]    <3>  mov %1,dtab_%3(%4)
  1952 00000F31 C1E810              <2>  shr eax,16
  1953 00000F34 81E30000FFFF        <2>  and ebx,0xffff0000
  1954 00000F3A 09C3                <2>  or ebx,eax
  1955 00000F3C C1E910              <2>  shr ecx,16
  1956                              <2>  %1 ebp, bh, 1, eax
  1957 00000F3F 0FB6C7              <3>  movzx %4,%2
  1958 00000F42 332C85[00040000]    <3>  xor %1,dtab_%3(%4)
  1959                              <2>  %1 ebp, ch, 3, eax
  1960 00000F49 0FB6C5              <3>  movzx %4,%2
  1961 00000F4C 332C85[000C0000]    <3>  xor %1,dtab_%3(%4)
  1962                              <2>  %2 eax, cl, 2, ecx
  1963 00000F53 0FB6C9              <3>  movzx %4,%2
  1964 00000F56 8B048D[00080000]    <3>  mov %1,dtab_%3(%4)
  1965                              <2>  %1 eax, bl, 0, ecx
  1966 00000F5D 0FB6CB              <3>  movzx %4,%2
  1967 00000F60 33048D[00000000]    <3>  xor %1,dtab_%3(%4)
  1968                              <2>  %1 eax, dh, 1, ecx
  1969 00000F67 0FB6CE              <3>  movzx %4,%2
  1970 00000F6A 33048D[00040000]    <3>  xor %1,dtab_%3(%4)
  1971 00000F71 C1EB10              <2>  shr ebx,16
  1972 00000F74 C1EA10              <2>  shr edx,16
  1973                              <2>  %1 esi, dh, 3, ecx
  1974 00000F77 0FB6CE              <3>  movzx %4,%2
  1975 00000F7A 33348D[000C0000]    <3>  xor %1,dtab_%3(%4)
  1976                              <2>  %1 ebp, dl, 2, ecx
  1977 00000F81 0FB6CA              <3>  movzx %4,%2
  1978 00000F84 332C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  1979                              <2>  %1 eax, bh, 3, ecx
  1980 00000F8B 0FB6CF              <3>  movzx %4,%2
  1981 00000F8E 33048D[000C0000]    <3>  xor %1,dtab_%3(%4)
  1982                              <2>  %1 edi, bl, 2, ecx
  1983 00000F95 0FB6CB              <3>  movzx %4,%2
  1984 00000F98 333C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  1985                              <2> 
  1986                              <1> 
  1987 00000F9F 89EB                <1>  mov ebx,ebp
  1988 00000FA1 89F1                <1>  mov ecx,esi
  1989 00000FA3 89FA                <1>  mov edx,edi
  1990                              <1>  restore ebp,0
  1991 00000FA5 8B2C24              <2>  mov %1,[esp+4*%2]
  1992 00000FA8 334500              <1>  xor eax,[ebp]
  1993 00000FAB 335D04              <1>  xor ebx,[ebp+4]
  1994                              <1> 
  1995                                  .3: dec_round
  1996                              <1> .3: 
  1997                              <1> 
  1998                              <1> %ifdef AES_REV_DKS
  1999 00000FAE 83C510              <1>  add ebp,16
  2000                              <1> %else
  2001                              <1>  sub ebp,16
  2002                              <1> %endif
  2003                              <1>  save 0,ebp
  2004 00000FB1 892C24              <2>  mov [esp+4*%1],%2
  2005 00000FB4 8B7508              <1>  mov esi,[ebp+8]
  2006 00000FB7 8B7D0C              <1>  mov edi,[ebp+12]
  2007                              <1> 
  2008                              <1>  irn_fun ni_xor, ni_mov
  2009                              <2> 
  2010 00000FBA C1C010              <2>  rol eax,16
  2011                              <2>  %1 esi, cl, 0, ebp
  2012 00000FBD 0FB6E9              <3>  movzx %4,%2
  2013 00000FC0 3334AD[00000000]    <3>  xor %1,dtab_%3(%4)
  2014                              <2>  %1 esi, bh, 1, ebp
  2015 00000FC7 0FB6EF              <3>  movzx %4,%2
  2016 00000FCA 3334AD[00040000]    <3>  xor %1,dtab_%3(%4)
  2017                              <2>  %1 esi, al, 2, ebp
  2018 00000FD1 0FB6E8              <3>  movzx %4,%2
  2019 00000FD4 3334AD[00080000]    <3>  xor %1,dtab_%3(%4)
  2020                              <2>  %1 edi, dl, 0, ebp
  2021 00000FDB 0FB6EA              <3>  movzx %4,%2
  2022 00000FDE 333CAD[00000000]    <3>  xor %1,dtab_%3(%4)
  2023                              <2>  %1 edi, ch, 1, ebp
  2024 00000FE5 0FB6ED              <3>  movzx %4,%2
  2025 00000FE8 333CAD[00040000]    <3>  xor %1,dtab_%3(%4)
  2026                              <2>  %1 edi, ah, 3, ebp
  2027 00000FEF 0FB6EC              <3>  movzx %4,%2
  2028 00000FF2 333CAD[000C0000]    <3>  xor %1,dtab_%3(%4)
  2029                              <2>  %2 ebp, bl, 0, ebp
  2030 00000FF9 0FB6EB              <3>  movzx %4,%2
  2031 00000FFC 8B2CAD[00000000]    <3>  mov %1,dtab_%3(%4)
  2032 00001003 C1E810              <2>  shr eax,16
  2033 00001006 81E30000FFFF        <2>  and ebx,0xffff0000
  2034 0000100C 09C3                <2>  or ebx,eax
  2035 0000100E C1E910              <2>  shr ecx,16
  2036                              <2>  %1 ebp, bh, 1, eax
  2037 00001011 0FB6C7              <3>  movzx %4,%2
  2038 00001014 332C85[00040000]    <3>  xor %1,dtab_%3(%4)
  2039                              <2>  %1 ebp, ch, 3, eax
  2040 0000101B 0FB6C5              <3>  movzx %4,%2
  2041 0000101E 332C85[000C0000]    <3>  xor %1,dtab_%3(%4)
  2042                              <2>  %2 eax, cl, 2, ecx
  2043 00001025 0FB6C9              <3>  movzx %4,%2
  2044 00001028 8B048D[00080000]    <3>  mov %1,dtab_%3(%4)
  2045                              <2>  %1 eax, bl, 0, ecx
  2046 0000102F 0FB6CB              <3>  movzx %4,%2
  2047 00001032 33048D[00000000]    <3>  xor %1,dtab_%3(%4)
  2048                              <2>  %1 eax, dh, 1, ecx
  2049 00001039 0FB6CE              <3>  movzx %4,%2
  2050 0000103C 33048D[00040000]    <3>  xor %1,dtab_%3(%4)
  2051 00001043 C1EB10              <2>  shr ebx,16
  2052 00001046 C1EA10              <2>  shr edx,16
  2053                              <2>  %1 esi, dh, 3, ecx
  2054 00001049 0FB6CE              <3>  movzx %4,%2
  2055 0000104C 33348D[000C0000]    <3>  xor %1,dtab_%3(%4)
  2056                              <2>  %1 ebp, dl, 2, ecx
  2057 00001053 0FB6CA              <3>  movzx %4,%2
  2058 00001056 332C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  2059                              <2>  %1 eax, bh, 3, ecx
  2060 0000105D 0FB6CF              <3>  movzx %4,%2
  2061 00001060 33048D[000C0000]    <3>  xor %1,dtab_%3(%4)
  2062                              <2>  %1 edi, bl, 2, ecx
  2063 00001067 0FB6CB              <3>  movzx %4,%2
  2064 0000106A 333C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  2065                              <2> 
  2066                              <1> 
  2067 00001071 89EB                <1>  mov ebx,ebp
  2068 00001073 89F1                <1>  mov ecx,esi
  2069 00001075 89FA                <1>  mov edx,edi
  2070                              <1>  restore ebp,0
  2071 00001077 8B2C24              <2>  mov %1,[esp+4*%2]
  2072 0000107A 334500              <1>  xor eax,[ebp]
  2073 0000107D 335D04              <1>  xor ebx,[ebp+4]
  2074                              <1> 
  2075                                      dec_round
  2076                              <1> 
  2077                              <1> %ifdef AES_REV_DKS
  2078 00001080 83C510              <1>  add ebp,16
  2079                              <1> %else
  2080                              <1>  sub ebp,16
  2081                              <1> %endif
  2082                              <1>  save 0,ebp
  2083 00001083 892C24              <2>  mov [esp+4*%1],%2
  2084 00001086 8B7508              <1>  mov esi,[ebp+8]
  2085 00001089 8B7D0C              <1>  mov edi,[ebp+12]
  2086                              <1> 
  2087                              <1>  irn_fun ni_xor, ni_mov
  2088                              <2> 
  2089 0000108C C1C010              <2>  rol eax,16
  2090                              <2>  %1 esi, cl, 0, ebp
  2091 0000108F 0FB6E9              <3>  movzx %4,%2
  2092 00001092 3334AD[00000000]    <3>  xor %1,dtab_%3(%4)
  2093                              <2>  %1 esi, bh, 1, ebp
  2094 00001099 0FB6EF              <3>  movzx %4,%2
  2095 0000109C 3334AD[00040000]    <3>  xor %1,dtab_%3(%4)
  2096                              <2>  %1 esi, al, 2, ebp
  2097 000010A3 0FB6E8              <3>  movzx %4,%2
  2098 000010A6 3334AD[00080000]    <3>  xor %1,dtab_%3(%4)
  2099                              <2>  %1 edi, dl, 0, ebp
  2100 000010AD 0FB6EA              <3>  movzx %4,%2
  2101 000010B0 333CAD[00000000]    <3>  xor %1,dtab_%3(%4)
  2102                              <2>  %1 edi, ch, 1, ebp
  2103 000010B7 0FB6ED              <3>  movzx %4,%2
  2104 000010BA 333CAD[00040000]    <3>  xor %1,dtab_%3(%4)
  2105                              <2>  %1 edi, ah, 3, ebp
  2106 000010C1 0FB6EC              <3>  movzx %4,%2
  2107 000010C4 333CAD[000C0000]    <3>  xor %1,dtab_%3(%4)
  2108                              <2>  %2 ebp, bl, 0, ebp
  2109 000010CB 0FB6EB              <3>  movzx %4,%2
  2110 000010CE 8B2CAD[00000000]    <3>  mov %1,dtab_%3(%4)
  2111 000010D5 C1E810              <2>  shr eax,16
  2112 000010D8 81E30000FFFF        <2>  and ebx,0xffff0000
  2113 000010DE 09C3                <2>  or ebx,eax
  2114 000010E0 C1E910              <2>  shr ecx,16
  2115                              <2>  %1 ebp, bh, 1, eax
  2116 000010E3 0FB6C7              <3>  movzx %4,%2
  2117 000010E6 332C85[00040000]    <3>  xor %1,dtab_%3(%4)
  2118                              <2>  %1 ebp, ch, 3, eax
  2119 000010ED 0FB6C5              <3>  movzx %4,%2
  2120 000010F0 332C85[000C0000]    <3>  xor %1,dtab_%3(%4)
  2121                              <2>  %2 eax, cl, 2, ecx
  2122 000010F7 0FB6C9              <3>  movzx %4,%2
  2123 000010FA 8B048D[00080000]    <3>  mov %1,dtab_%3(%4)
  2124                              <2>  %1 eax, bl, 0, ecx
  2125 00001101 0FB6CB              <3>  movzx %4,%2
  2126 00001104 33048D[00000000]    <3>  xor %1,dtab_%3(%4)
  2127                              <2>  %1 eax, dh, 1, ecx
  2128 0000110B 0FB6CE              <3>  movzx %4,%2
  2129 0000110E 33048D[00040000]    <3>  xor %1,dtab_%3(%4)
  2130 00001115 C1EB10              <2>  shr ebx,16
  2131 00001118 C1EA10              <2>  shr edx,16
  2132                              <2>  %1 esi, dh, 3, ecx
  2133 0000111B 0FB6CE              <3>  movzx %4,%2
  2134 0000111E 33348D[000C0000]    <3>  xor %1,dtab_%3(%4)
  2135                              <2>  %1 ebp, dl, 2, ecx
  2136 00001125 0FB6CA              <3>  movzx %4,%2
  2137 00001128 332C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  2138                              <2>  %1 eax, bh, 3, ecx
  2139 0000112F 0FB6CF              <3>  movzx %4,%2
  2140 00001132 33048D[000C0000]    <3>  xor %1,dtab_%3(%4)
  2141                              <2>  %1 edi, bl, 2, ecx
  2142 00001139 0FB6CB              <3>  movzx %4,%2
  2143 0000113C 333C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  2144                              <2> 
  2145                              <1> 
  2146 00001143 89EB                <1>  mov ebx,ebp
  2147 00001145 89F1                <1>  mov ecx,esi
  2148 00001147 89FA                <1>  mov edx,edi
  2149                              <1>  restore ebp,0
  2150 00001149 8B2C24              <2>  mov %1,[esp+4*%2]
  2151 0000114C 334500              <1>  xor eax,[ebp]
  2152 0000114F 335D04              <1>  xor ebx,[ebp+4]
  2153                              <1> 
  2154                                      dec_round
  2155                              <1> 
  2156                              <1> %ifdef AES_REV_DKS
  2157 00001152 83C510              <1>  add ebp,16
  2158                              <1> %else
  2159                              <1>  sub ebp,16
  2160                              <1> %endif
  2161                              <1>  save 0,ebp
  2162 00001155 892C24              <2>  mov [esp+4*%1],%2
  2163 00001158 8B7508              <1>  mov esi,[ebp+8]
  2164 0000115B 8B7D0C              <1>  mov edi,[ebp+12]
  2165                              <1> 
  2166                              <1>  irn_fun ni_xor, ni_mov
  2167                              <2> 
  2168 0000115E C1C010              <2>  rol eax,16
  2169                              <2>  %1 esi, cl, 0, ebp
  2170 00001161 0FB6E9              <3>  movzx %4,%2
  2171 00001164 3334AD[00000000]    <3>  xor %1,dtab_%3(%4)
  2172                              <2>  %1 esi, bh, 1, ebp
  2173 0000116B 0FB6EF              <3>  movzx %4,%2
  2174 0000116E 3334AD[00040000]    <3>  xor %1,dtab_%3(%4)
  2175                              <2>  %1 esi, al, 2, ebp
  2176 00001175 0FB6E8              <3>  movzx %4,%2
  2177 00001178 3334AD[00080000]    <3>  xor %1,dtab_%3(%4)
  2178                              <2>  %1 edi, dl, 0, ebp
  2179 0000117F 0FB6EA              <3>  movzx %4,%2
  2180 00001182 333CAD[00000000]    <3>  xor %1,dtab_%3(%4)
  2181                              <2>  %1 edi, ch, 1, ebp
  2182 00001189 0FB6ED              <3>  movzx %4,%2
  2183 0000118C 333CAD[00040000]    <3>  xor %1,dtab_%3(%4)
  2184                              <2>  %1 edi, ah, 3, ebp
  2185 00001193 0FB6EC              <3>  movzx %4,%2
  2186 00001196 333CAD[000C0000]    <3>  xor %1,dtab_%3(%4)
  2187                              <2>  %2 ebp, bl, 0, ebp
  2188 0000119D 0FB6EB              <3>  movzx %4,%2
  2189 000011A0 8B2CAD[00000000]    <3>  mov %1,dtab_%3(%4)
  2190 000011A7 C1E810              <2>  shr eax,16
  2191 000011AA 81E30000FFFF        <2>  and ebx,0xffff0000
  2192 000011B0 09C3                <2>  or ebx,eax
  2193 000011B2 C1E910              <2>  shr ecx,16
  2194                              <2>  %1 ebp, bh, 1, eax
  2195 000011B5 0FB6C7              <3>  movzx %4,%2
  2196 000011B8 332C85[00040000]    <3>  xor %1,dtab_%3(%4)
  2197                              <2>  %1 ebp, ch, 3, eax
  2198 000011BF 0FB6C5              <3>  movzx %4,%2
  2199 000011C2 332C85[000C0000]    <3>  xor %1,dtab_%3(%4)
  2200                              <2>  %2 eax, cl, 2, ecx
  2201 000011C9 0FB6C9              <3>  movzx %4,%2
  2202 000011CC 8B048D[00080000]    <3>  mov %1,dtab_%3(%4)
  2203                              <2>  %1 eax, bl, 0, ecx
  2204 000011D3 0FB6CB              <3>  movzx %4,%2
  2205 000011D6 33048D[00000000]    <3>  xor %1,dtab_%3(%4)
  2206                              <2>  %1 eax, dh, 1, ecx
  2207 000011DD 0FB6CE              <3>  movzx %4,%2
  2208 000011E0 33048D[00040000]    <3>  xor %1,dtab_%3(%4)
  2209 000011E7 C1EB10              <2>  shr ebx,16
  2210 000011EA C1EA10              <2>  shr edx,16
  2211                              <2>  %1 esi, dh, 3, ecx
  2212 000011ED 0FB6CE              <3>  movzx %4,%2
  2213 000011F0 33348D[000C0000]    <3>  xor %1,dtab_%3(%4)
  2214                              <2>  %1 ebp, dl, 2, ecx
  2215 000011F7 0FB6CA              <3>  movzx %4,%2
  2216 000011FA 332C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  2217                              <2>  %1 eax, bh, 3, ecx
  2218 00001201 0FB6CF              <3>  movzx %4,%2
  2219 00001204 33048D[000C0000]    <3>  xor %1,dtab_%3(%4)
  2220                              <2>  %1 edi, bl, 2, ecx
  2221 0000120B 0FB6CB              <3>  movzx %4,%2
  2222 0000120E 333C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  2223                              <2> 
  2224                              <1> 
  2225 00001215 89EB                <1>  mov ebx,ebp
  2226 00001217 89F1                <1>  mov ecx,esi
  2227 00001219 89FA                <1>  mov edx,edi
  2228                              <1>  restore ebp,0
  2229 0000121B 8B2C24              <2>  mov %1,[esp+4*%2]
  2230 0000121E 334500              <1>  xor eax,[ebp]
  2231 00001221 335D04              <1>  xor ebx,[ebp+4]
  2232                              <1> 
  2233                                      dec_round
  2234                              <1> 
  2235                              <1> %ifdef AES_REV_DKS
  2236 00001224 83C510              <1>  add ebp,16
  2237                              <1> %else
  2238                              <1>  sub ebp,16
  2239                              <1> %endif
  2240                              <1>  save 0,ebp
  2241 00001227 892C24              <2>  mov [esp+4*%1],%2
  2242 0000122A 8B7508              <1>  mov esi,[ebp+8]
  2243 0000122D 8B7D0C              <1>  mov edi,[ebp+12]
  2244                              <1> 
  2245                              <1>  irn_fun ni_xor, ni_mov
  2246                              <2> 
  2247 00001230 C1C010              <2>  rol eax,16
  2248                              <2>  %1 esi, cl, 0, ebp
  2249 00001233 0FB6E9              <3>  movzx %4,%2
  2250 00001236 3334AD[00000000]    <3>  xor %1,dtab_%3(%4)
  2251                              <2>  %1 esi, bh, 1, ebp
  2252 0000123D 0FB6EF              <3>  movzx %4,%2
  2253 00001240 3334AD[00040000]    <3>  xor %1,dtab_%3(%4)
  2254                              <2>  %1 esi, al, 2, ebp
  2255 00001247 0FB6E8              <3>  movzx %4,%2
  2256 0000124A 3334AD[00080000]    <3>  xor %1,dtab_%3(%4)
  2257                              <2>  %1 edi, dl, 0, ebp
  2258 00001251 0FB6EA              <3>  movzx %4,%2
  2259 00001254 333CAD[00000000]    <3>  xor %1,dtab_%3(%4)
  2260                              <2>  %1 edi, ch, 1, ebp
  2261 0000125B 0FB6ED              <3>  movzx %4,%2
  2262 0000125E 333CAD[00040000]    <3>  xor %1,dtab_%3(%4)
  2263                              <2>  %1 edi, ah, 3, ebp
  2264 00001265 0FB6EC              <3>  movzx %4,%2
  2265 00001268 333CAD[000C0000]    <3>  xor %1,dtab_%3(%4)
  2266                              <2>  %2 ebp, bl, 0, ebp
  2267 0000126F 0FB6EB              <3>  movzx %4,%2
  2268 00001272 8B2CAD[00000000]    <3>  mov %1,dtab_%3(%4)
  2269 00001279 C1E810              <2>  shr eax,16
  2270 0000127C 81E30000FFFF        <2>  and ebx,0xffff0000
  2271 00001282 09C3                <2>  or ebx,eax
  2272 00001284 C1E910              <2>  shr ecx,16
  2273                              <2>  %1 ebp, bh, 1, eax
  2274 00001287 0FB6C7              <3>  movzx %4,%2
  2275 0000128A 332C85[00040000]    <3>  xor %1,dtab_%3(%4)
  2276                              <2>  %1 ebp, ch, 3, eax
  2277 00001291 0FB6C5              <3>  movzx %4,%2
  2278 00001294 332C85[000C0000]    <3>  xor %1,dtab_%3(%4)
  2279                              <2>  %2 eax, cl, 2, ecx
  2280 0000129B 0FB6C9              <3>  movzx %4,%2
  2281 0000129E 8B048D[00080000]    <3>  mov %1,dtab_%3(%4)
  2282                              <2>  %1 eax, bl, 0, ecx
  2283 000012A5 0FB6CB              <3>  movzx %4,%2
  2284 000012A8 33048D[00000000]    <3>  xor %1,dtab_%3(%4)
  2285                              <2>  %1 eax, dh, 1, ecx
  2286 000012AF 0FB6CE              <3>  movzx %4,%2
  2287 000012B2 33048D[00040000]    <3>  xor %1,dtab_%3(%4)
  2288 000012B9 C1EB10              <2>  shr ebx,16
  2289 000012BC C1EA10              <2>  shr edx,16
  2290                              <2>  %1 esi, dh, 3, ecx
  2291 000012BF 0FB6CE              <3>  movzx %4,%2
  2292 000012C2 33348D[000C0000]    <3>  xor %1,dtab_%3(%4)
  2293                              <2>  %1 ebp, dl, 2, ecx
  2294 000012C9 0FB6CA              <3>  movzx %4,%2
  2295 000012CC 332C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  2296                              <2>  %1 eax, bh, 3, ecx
  2297 000012D3 0FB6CF              <3>  movzx %4,%2
  2298 000012D6 33048D[000C0000]    <3>  xor %1,dtab_%3(%4)
  2299                              <2>  %1 edi, bl, 2, ecx
  2300 000012DD 0FB6CB              <3>  movzx %4,%2
  2301 000012E0 333C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  2302                              <2> 
  2303                              <1> 
  2304 000012E7 89EB                <1>  mov ebx,ebp
  2305 000012E9 89F1                <1>  mov ecx,esi
  2306 000012EB 89FA                <1>  mov edx,edi
  2307                              <1>  restore ebp,0
  2308 000012ED 8B2C24              <2>  mov %1,[esp+4*%2]
  2309 000012F0 334500              <1>  xor eax,[ebp]
  2310 000012F3 335D04              <1>  xor ebx,[ebp+4]
  2311                              <1> 
  2312                                      dec_round
  2313                              <1> 
  2314                              <1> %ifdef AES_REV_DKS
  2315 000012F6 83C510              <1>  add ebp,16
  2316                              <1> %else
  2317                              <1>  sub ebp,16
  2318                              <1> %endif
  2319                              <1>  save 0,ebp
  2320 000012F9 892C24              <2>  mov [esp+4*%1],%2
  2321 000012FC 8B7508              <1>  mov esi,[ebp+8]
  2322 000012FF 8B7D0C              <1>  mov edi,[ebp+12]
  2323                              <1> 
  2324                              <1>  irn_fun ni_xor, ni_mov
  2325                              <2> 
  2326 00001302 C1C010              <2>  rol eax,16
  2327                              <2>  %1 esi, cl, 0, ebp
  2328 00001305 0FB6E9              <3>  movzx %4,%2
  2329 00001308 3334AD[00000000]    <3>  xor %1,dtab_%3(%4)
  2330                              <2>  %1 esi, bh, 1, ebp
  2331 0000130F 0FB6EF              <3>  movzx %4,%2
  2332 00001312 3334AD[00040000]    <3>  xor %1,dtab_%3(%4)
  2333                              <2>  %1 esi, al, 2, ebp
  2334 00001319 0FB6E8              <3>  movzx %4,%2
  2335 0000131C 3334AD[00080000]    <3>  xor %1,dtab_%3(%4)
  2336                              <2>  %1 edi, dl, 0, ebp
  2337 00001323 0FB6EA              <3>  movzx %4,%2
  2338 00001326 333CAD[00000000]    <3>  xor %1,dtab_%3(%4)
  2339                              <2>  %1 edi, ch, 1, ebp
  2340 0000132D 0FB6ED              <3>  movzx %4,%2
  2341 00001330 333CAD[00040000]    <3>  xor %1,dtab_%3(%4)
  2342                              <2>  %1 edi, ah, 3, ebp
  2343 00001337 0FB6EC              <3>  movzx %4,%2
  2344 0000133A 333CAD[000C0000]    <3>  xor %1,dtab_%3(%4)
  2345                              <2>  %2 ebp, bl, 0, ebp
  2346 00001341 0FB6EB              <3>  movzx %4,%2
  2347 00001344 8B2CAD[00000000]    <3>  mov %1,dtab_%3(%4)
  2348 0000134B C1E810              <2>  shr eax,16
  2349 0000134E 81E30000FFFF        <2>  and ebx,0xffff0000
  2350 00001354 09C3                <2>  or ebx,eax
  2351 00001356 C1E910              <2>  shr ecx,16
  2352                              <2>  %1 ebp, bh, 1, eax
  2353 00001359 0FB6C7              <3>  movzx %4,%2
  2354 0000135C 332C85[00040000]    <3>  xor %1,dtab_%3(%4)
  2355                              <2>  %1 ebp, ch, 3, eax
  2356 00001363 0FB6C5              <3>  movzx %4,%2
  2357 00001366 332C85[000C0000]    <3>  xor %1,dtab_%3(%4)
  2358                              <2>  %2 eax, cl, 2, ecx
  2359 0000136D 0FB6C9              <3>  movzx %4,%2
  2360 00001370 8B048D[00080000]    <3>  mov %1,dtab_%3(%4)
  2361                              <2>  %1 eax, bl, 0, ecx
  2362 00001377 0FB6CB              <3>  movzx %4,%2
  2363 0000137A 33048D[00000000]    <3>  xor %1,dtab_%3(%4)
  2364                              <2>  %1 eax, dh, 1, ecx
  2365 00001381 0FB6CE              <3>  movzx %4,%2
  2366 00001384 33048D[00040000]    <3>  xor %1,dtab_%3(%4)
  2367 0000138B C1EB10              <2>  shr ebx,16
  2368 0000138E C1EA10              <2>  shr edx,16
  2369                              <2>  %1 esi, dh, 3, ecx
  2370 00001391 0FB6CE              <3>  movzx %4,%2
  2371 00001394 33348D[000C0000]    <3>  xor %1,dtab_%3(%4)
  2372                              <2>  %1 ebp, dl, 2, ecx
  2373 0000139B 0FB6CA              <3>  movzx %4,%2
  2374 0000139E 332C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  2375                              <2>  %1 eax, bh, 3, ecx
  2376 000013A5 0FB6CF              <3>  movzx %4,%2
  2377 000013A8 33048D[000C0000]    <3>  xor %1,dtab_%3(%4)
  2378                              <2>  %1 edi, bl, 2, ecx
  2379 000013AF 0FB6CB              <3>  movzx %4,%2
  2380 000013B2 333C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  2381                              <2> 
  2382                              <1> 
  2383 000013B9 89EB                <1>  mov ebx,ebp
  2384 000013BB 89F1                <1>  mov ecx,esi
  2385 000013BD 89FA                <1>  mov edx,edi
  2386                              <1>  restore ebp,0
  2387 000013BF 8B2C24              <2>  mov %1,[esp+4*%2]
  2388 000013C2 334500              <1>  xor eax,[ebp]
  2389 000013C5 335D04              <1>  xor ebx,[ebp+4]
  2390                              <1> 
  2391                                      dec_round
  2392                              <1> 
  2393                              <1> %ifdef AES_REV_DKS
  2394 000013C8 83C510              <1>  add ebp,16
  2395                              <1> %else
  2396                              <1>  sub ebp,16
  2397                              <1> %endif
  2398                              <1>  save 0,ebp
  2399 000013CB 892C24              <2>  mov [esp+4*%1],%2
  2400 000013CE 8B7508              <1>  mov esi,[ebp+8]
  2401 000013D1 8B7D0C              <1>  mov edi,[ebp+12]
  2402                              <1> 
  2403                              <1>  irn_fun ni_xor, ni_mov
  2404                              <2> 
  2405 000013D4 C1C010              <2>  rol eax,16
  2406                              <2>  %1 esi, cl, 0, ebp
  2407 000013D7 0FB6E9              <3>  movzx %4,%2
  2408 000013DA 3334AD[00000000]    <3>  xor %1,dtab_%3(%4)
  2409                              <2>  %1 esi, bh, 1, ebp
  2410 000013E1 0FB6EF              <3>  movzx %4,%2
  2411 000013E4 3334AD[00040000]    <3>  xor %1,dtab_%3(%4)
  2412                              <2>  %1 esi, al, 2, ebp
  2413 000013EB 0FB6E8              <3>  movzx %4,%2
  2414 000013EE 3334AD[00080000]    <3>  xor %1,dtab_%3(%4)
  2415                              <2>  %1 edi, dl, 0, ebp
  2416 000013F5 0FB6EA              <3>  movzx %4,%2
  2417 000013F8 333CAD[00000000]    <3>  xor %1,dtab_%3(%4)
  2418                              <2>  %1 edi, ch, 1, ebp
  2419 000013FF 0FB6ED              <3>  movzx %4,%2
  2420 00001402 333CAD[00040000]    <3>  xor %1,dtab_%3(%4)
  2421                              <2>  %1 edi, ah, 3, ebp
  2422 00001409 0FB6EC              <3>  movzx %4,%2
  2423 0000140C 333CAD[000C0000]    <3>  xor %1,dtab_%3(%4)
  2424                              <2>  %2 ebp, bl, 0, ebp
  2425 00001413 0FB6EB              <3>  movzx %4,%2
  2426 00001416 8B2CAD[00000000]    <3>  mov %1,dtab_%3(%4)
  2427 0000141D C1E810              <2>  shr eax,16
  2428 00001420 81E30000FFFF        <2>  and ebx,0xffff0000
  2429 00001426 09C3                <2>  or ebx,eax
  2430 00001428 C1E910              <2>  shr ecx,16
  2431                              <2>  %1 ebp, bh, 1, eax
  2432 0000142B 0FB6C7              <3>  movzx %4,%2
  2433 0000142E 332C85[00040000]    <3>  xor %1,dtab_%3(%4)
  2434                              <2>  %1 ebp, ch, 3, eax
  2435 00001435 0FB6C5              <3>  movzx %4,%2
  2436 00001438 332C85[000C0000]    <3>  xor %1,dtab_%3(%4)
  2437                              <2>  %2 eax, cl, 2, ecx
  2438 0000143F 0FB6C9              <3>  movzx %4,%2
  2439 00001442 8B048D[00080000]    <3>  mov %1,dtab_%3(%4)
  2440                              <2>  %1 eax, bl, 0, ecx
  2441 00001449 0FB6CB              <3>  movzx %4,%2
  2442 0000144C 33048D[00000000]    <3>  xor %1,dtab_%3(%4)
  2443                              <2>  %1 eax, dh, 1, ecx
  2444 00001453 0FB6CE              <3>  movzx %4,%2
  2445 00001456 33048D[00040000]    <3>  xor %1,dtab_%3(%4)
  2446 0000145D C1EB10              <2>  shr ebx,16
  2447 00001460 C1EA10              <2>  shr edx,16
  2448                              <2>  %1 esi, dh, 3, ecx
  2449 00001463 0FB6CE              <3>  movzx %4,%2
  2450 00001466 33348D[000C0000]    <3>  xor %1,dtab_%3(%4)
  2451                              <2>  %1 ebp, dl, 2, ecx
  2452 0000146D 0FB6CA              <3>  movzx %4,%2
  2453 00001470 332C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  2454                              <2>  %1 eax, bh, 3, ecx
  2455 00001477 0FB6CF              <3>  movzx %4,%2
  2456 0000147A 33048D[000C0000]    <3>  xor %1,dtab_%3(%4)
  2457                              <2>  %1 edi, bl, 2, ecx
  2458 00001481 0FB6CB              <3>  movzx %4,%2
  2459 00001484 333C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  2460                              <2> 
  2461                              <1> 
  2462 0000148B 89EB                <1>  mov ebx,ebp
  2463 0000148D 89F1                <1>  mov ecx,esi
  2464 0000148F 89FA                <1>  mov edx,edi
  2465                              <1>  restore ebp,0
  2466 00001491 8B2C24              <2>  mov %1,[esp+4*%2]
  2467 00001494 334500              <1>  xor eax,[ebp]
  2468 00001497 335D04              <1>  xor ebx,[ebp+4]
  2469                              <1> 
  2470                                      dec_round
  2471                              <1> 
  2472                              <1> %ifdef AES_REV_DKS
  2473 0000149A 83C510              <1>  add ebp,16
  2474                              <1> %else
  2475                              <1>  sub ebp,16
  2476                              <1> %endif
  2477                              <1>  save 0,ebp
  2478 0000149D 892C24              <2>  mov [esp+4*%1],%2
  2479 000014A0 8B7508              <1>  mov esi,[ebp+8]
  2480 000014A3 8B7D0C              <1>  mov edi,[ebp+12]
  2481                              <1> 
  2482                              <1>  irn_fun ni_xor, ni_mov
  2483                              <2> 
  2484 000014A6 C1C010              <2>  rol eax,16
  2485                              <2>  %1 esi, cl, 0, ebp
  2486 000014A9 0FB6E9              <3>  movzx %4,%2
  2487 000014AC 3334AD[00000000]    <3>  xor %1,dtab_%3(%4)
  2488                              <2>  %1 esi, bh, 1, ebp
  2489 000014B3 0FB6EF              <3>  movzx %4,%2
  2490 000014B6 3334AD[00040000]    <3>  xor %1,dtab_%3(%4)
  2491                              <2>  %1 esi, al, 2, ebp
  2492 000014BD 0FB6E8              <3>  movzx %4,%2
  2493 000014C0 3334AD[00080000]    <3>  xor %1,dtab_%3(%4)
  2494                              <2>  %1 edi, dl, 0, ebp
  2495 000014C7 0FB6EA              <3>  movzx %4,%2
  2496 000014CA 333CAD[00000000]    <3>  xor %1,dtab_%3(%4)
  2497                              <2>  %1 edi, ch, 1, ebp
  2498 000014D1 0FB6ED              <3>  movzx %4,%2
  2499 000014D4 333CAD[00040000]    <3>  xor %1,dtab_%3(%4)
  2500                              <2>  %1 edi, ah, 3, ebp
  2501 000014DB 0FB6EC              <3>  movzx %4,%2
  2502 000014DE 333CAD[000C0000]    <3>  xor %1,dtab_%3(%4)
  2503                              <2>  %2 ebp, bl, 0, ebp
  2504 000014E5 0FB6EB              <3>  movzx %4,%2
  2505 000014E8 8B2CAD[00000000]    <3>  mov %1,dtab_%3(%4)
  2506 000014EF C1E810              <2>  shr eax,16
  2507 000014F2 81E30000FFFF        <2>  and ebx,0xffff0000
  2508 000014F8 09C3                <2>  or ebx,eax
  2509 000014FA C1E910              <2>  shr ecx,16
  2510                              <2>  %1 ebp, bh, 1, eax
  2511 000014FD 0FB6C7              <3>  movzx %4,%2
  2512 00001500 332C85[00040000]    <3>  xor %1,dtab_%3(%4)
  2513                              <2>  %1 ebp, ch, 3, eax
  2514 00001507 0FB6C5              <3>  movzx %4,%2
  2515 0000150A 332C85[000C0000]    <3>  xor %1,dtab_%3(%4)
  2516                              <2>  %2 eax, cl, 2, ecx
  2517 00001511 0FB6C9              <3>  movzx %4,%2
  2518 00001514 8B048D[00080000]    <3>  mov %1,dtab_%3(%4)
  2519                              <2>  %1 eax, bl, 0, ecx
  2520 0000151B 0FB6CB              <3>  movzx %4,%2
  2521 0000151E 33048D[00000000]    <3>  xor %1,dtab_%3(%4)
  2522                              <2>  %1 eax, dh, 1, ecx
  2523 00001525 0FB6CE              <3>  movzx %4,%2
  2524 00001528 33048D[00040000]    <3>  xor %1,dtab_%3(%4)
  2525 0000152F C1EB10              <2>  shr ebx,16
  2526 00001532 C1EA10              <2>  shr edx,16
  2527                              <2>  %1 esi, dh, 3, ecx
  2528 00001535 0FB6CE              <3>  movzx %4,%2
  2529 00001538 33348D[000C0000]    <3>  xor %1,dtab_%3(%4)
  2530                              <2>  %1 ebp, dl, 2, ecx
  2531 0000153F 0FB6CA              <3>  movzx %4,%2
  2532 00001542 332C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  2533                              <2>  %1 eax, bh, 3, ecx
  2534 00001549 0FB6CF              <3>  movzx %4,%2
  2535 0000154C 33048D[000C0000]    <3>  xor %1,dtab_%3(%4)
  2536                              <2>  %1 edi, bl, 2, ecx
  2537 00001553 0FB6CB              <3>  movzx %4,%2
  2538 00001556 333C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  2539                              <2> 
  2540                              <1> 
  2541 0000155D 89EB                <1>  mov ebx,ebp
  2542 0000155F 89F1                <1>  mov ecx,esi
  2543 00001561 89FA                <1>  mov edx,edi
  2544                              <1>  restore ebp,0
  2545 00001563 8B2C24              <2>  mov %1,[esp+4*%2]
  2546 00001566 334500              <1>  xor eax,[ebp]
  2547 00001569 335D04              <1>  xor ebx,[ebp+4]
  2548                              <1> 
  2549                                      dec_round
  2550                              <1> 
  2551                              <1> %ifdef AES_REV_DKS
  2552 0000156C 83C510              <1>  add ebp,16
  2553                              <1> %else
  2554                              <1>  sub ebp,16
  2555                              <1> %endif
  2556                              <1>  save 0,ebp
  2557 0000156F 892C24              <2>  mov [esp+4*%1],%2
  2558 00001572 8B7508              <1>  mov esi,[ebp+8]
  2559 00001575 8B7D0C              <1>  mov edi,[ebp+12]
  2560                              <1> 
  2561                              <1>  irn_fun ni_xor, ni_mov
  2562                              <2> 
  2563 00001578 C1C010              <2>  rol eax,16
  2564                              <2>  %1 esi, cl, 0, ebp
  2565 0000157B 0FB6E9              <3>  movzx %4,%2
  2566 0000157E 3334AD[00000000]    <3>  xor %1,dtab_%3(%4)
  2567                              <2>  %1 esi, bh, 1, ebp
  2568 00001585 0FB6EF              <3>  movzx %4,%2
  2569 00001588 3334AD[00040000]    <3>  xor %1,dtab_%3(%4)
  2570                              <2>  %1 esi, al, 2, ebp
  2571 0000158F 0FB6E8              <3>  movzx %4,%2
  2572 00001592 3334AD[00080000]    <3>  xor %1,dtab_%3(%4)
  2573                              <2>  %1 edi, dl, 0, ebp
  2574 00001599 0FB6EA              <3>  movzx %4,%2
  2575 0000159C 333CAD[00000000]    <3>  xor %1,dtab_%3(%4)
  2576                              <2>  %1 edi, ch, 1, ebp
  2577 000015A3 0FB6ED              <3>  movzx %4,%2
  2578 000015A6 333CAD[00040000]    <3>  xor %1,dtab_%3(%4)
  2579                              <2>  %1 edi, ah, 3, ebp
  2580 000015AD 0FB6EC              <3>  movzx %4,%2
  2581 000015B0 333CAD[000C0000]    <3>  xor %1,dtab_%3(%4)
  2582                              <2>  %2 ebp, bl, 0, ebp
  2583 000015B7 0FB6EB              <3>  movzx %4,%2
  2584 000015BA 8B2CAD[00000000]    <3>  mov %1,dtab_%3(%4)
  2585 000015C1 C1E810              <2>  shr eax,16
  2586 000015C4 81E30000FFFF        <2>  and ebx,0xffff0000
  2587 000015CA 09C3                <2>  or ebx,eax
  2588 000015CC C1E910              <2>  shr ecx,16
  2589                              <2>  %1 ebp, bh, 1, eax
  2590 000015CF 0FB6C7              <3>  movzx %4,%2
  2591 000015D2 332C85[00040000]    <3>  xor %1,dtab_%3(%4)
  2592                              <2>  %1 ebp, ch, 3, eax
  2593 000015D9 0FB6C5              <3>  movzx %4,%2
  2594 000015DC 332C85[000C0000]    <3>  xor %1,dtab_%3(%4)
  2595                              <2>  %2 eax, cl, 2, ecx
  2596 000015E3 0FB6C9              <3>  movzx %4,%2
  2597 000015E6 8B048D[00080000]    <3>  mov %1,dtab_%3(%4)
  2598                              <2>  %1 eax, bl, 0, ecx
  2599 000015ED 0FB6CB              <3>  movzx %4,%2
  2600 000015F0 33048D[00000000]    <3>  xor %1,dtab_%3(%4)
  2601                              <2>  %1 eax, dh, 1, ecx
  2602 000015F7 0FB6CE              <3>  movzx %4,%2
  2603 000015FA 33048D[00040000]    <3>  xor %1,dtab_%3(%4)
  2604 00001601 C1EB10              <2>  shr ebx,16
  2605 00001604 C1EA10              <2>  shr edx,16
  2606                              <2>  %1 esi, dh, 3, ecx
  2607 00001607 0FB6CE              <3>  movzx %4,%2
  2608 0000160A 33348D[000C0000]    <3>  xor %1,dtab_%3(%4)
  2609                              <2>  %1 ebp, dl, 2, ecx
  2610 00001611 0FB6CA              <3>  movzx %4,%2
  2611 00001614 332C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  2612                              <2>  %1 eax, bh, 3, ecx
  2613 0000161B 0FB6CF              <3>  movzx %4,%2
  2614 0000161E 33048D[000C0000]    <3>  xor %1,dtab_%3(%4)
  2615                              <2>  %1 edi, bl, 2, ecx
  2616 00001625 0FB6CB              <3>  movzx %4,%2
  2617 00001628 333C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  2618                              <2> 
  2619                              <1> 
  2620 0000162F 89EB                <1>  mov ebx,ebp
  2621 00001631 89F1                <1>  mov ecx,esi
  2622 00001633 89FA                <1>  mov edx,edi
  2623                              <1>  restore ebp,0
  2624 00001635 8B2C24              <2>  mov %1,[esp+4*%2]
  2625 00001638 334500              <1>  xor eax,[ebp]
  2626 0000163B 335D04              <1>  xor ebx,[ebp+4]
  2627                              <1> 
  2628                                      dec_round
  2629                              <1> 
  2630                              <1> %ifdef AES_REV_DKS
  2631 0000163E 83C510              <1>  add ebp,16
  2632                              <1> %else
  2633                              <1>  sub ebp,16
  2634                              <1> %endif
  2635                              <1>  save 0,ebp
  2636 00001641 892C24              <2>  mov [esp+4*%1],%2
  2637 00001644 8B7508              <1>  mov esi,[ebp+8]
  2638 00001647 8B7D0C              <1>  mov edi,[ebp+12]
  2639                              <1> 
  2640                              <1>  irn_fun ni_xor, ni_mov
  2641                              <2> 
  2642 0000164A C1C010              <2>  rol eax,16
  2643                              <2>  %1 esi, cl, 0, ebp
  2644 0000164D 0FB6E9              <3>  movzx %4,%2
  2645 00001650 3334AD[00000000]    <3>  xor %1,dtab_%3(%4)
  2646                              <2>  %1 esi, bh, 1, ebp
  2647 00001657 0FB6EF              <3>  movzx %4,%2
  2648 0000165A 3334AD[00040000]    <3>  xor %1,dtab_%3(%4)
  2649                              <2>  %1 esi, al, 2, ebp
  2650 00001661 0FB6E8              <3>  movzx %4,%2
  2651 00001664 3334AD[00080000]    <3>  xor %1,dtab_%3(%4)
  2652                              <2>  %1 edi, dl, 0, ebp
  2653 0000166B 0FB6EA              <3>  movzx %4,%2
  2654 0000166E 333CAD[00000000]    <3>  xor %1,dtab_%3(%4)
  2655                              <2>  %1 edi, ch, 1, ebp
  2656 00001675 0FB6ED              <3>  movzx %4,%2
  2657 00001678 333CAD[00040000]    <3>  xor %1,dtab_%3(%4)
  2658                              <2>  %1 edi, ah, 3, ebp
  2659 0000167F 0FB6EC              <3>  movzx %4,%2
  2660 00001682 333CAD[000C0000]    <3>  xor %1,dtab_%3(%4)
  2661                              <2>  %2 ebp, bl, 0, ebp
  2662 00001689 0FB6EB              <3>  movzx %4,%2
  2663 0000168C 8B2CAD[00000000]    <3>  mov %1,dtab_%3(%4)
  2664 00001693 C1E810              <2>  shr eax,16
  2665 00001696 81E30000FFFF        <2>  and ebx,0xffff0000
  2666 0000169C 09C3                <2>  or ebx,eax
  2667 0000169E C1E910              <2>  shr ecx,16
  2668                              <2>  %1 ebp, bh, 1, eax
  2669 000016A1 0FB6C7              <3>  movzx %4,%2
  2670 000016A4 332C85[00040000]    <3>  xor %1,dtab_%3(%4)
  2671                              <2>  %1 ebp, ch, 3, eax
  2672 000016AB 0FB6C5              <3>  movzx %4,%2
  2673 000016AE 332C85[000C0000]    <3>  xor %1,dtab_%3(%4)
  2674                              <2>  %2 eax, cl, 2, ecx
  2675 000016B5 0FB6C9              <3>  movzx %4,%2
  2676 000016B8 8B048D[00080000]    <3>  mov %1,dtab_%3(%4)
  2677                              <2>  %1 eax, bl, 0, ecx
  2678 000016BF 0FB6CB              <3>  movzx %4,%2
  2679 000016C2 33048D[00000000]    <3>  xor %1,dtab_%3(%4)
  2680                              <2>  %1 eax, dh, 1, ecx
  2681 000016C9 0FB6CE              <3>  movzx %4,%2
  2682 000016CC 33048D[00040000]    <3>  xor %1,dtab_%3(%4)
  2683 000016D3 C1EB10              <2>  shr ebx,16
  2684 000016D6 C1EA10              <2>  shr edx,16
  2685                              <2>  %1 esi, dh, 3, ecx
  2686 000016D9 0FB6CE              <3>  movzx %4,%2
  2687 000016DC 33348D[000C0000]    <3>  xor %1,dtab_%3(%4)
  2688                              <2>  %1 ebp, dl, 2, ecx
  2689 000016E3 0FB6CA              <3>  movzx %4,%2
  2690 000016E6 332C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  2691                              <2>  %1 eax, bh, 3, ecx
  2692 000016ED 0FB6CF              <3>  movzx %4,%2
  2693 000016F0 33048D[000C0000]    <3>  xor %1,dtab_%3(%4)
  2694                              <2>  %1 edi, bl, 2, ecx
  2695 000016F7 0FB6CB              <3>  movzx %4,%2
  2696 000016FA 333C8D[00080000]    <3>  xor %1,dtab_%3(%4)
  2697                              <2> 
  2698                              <1> 
  2699 00001701 89EB                <1>  mov ebx,ebp
  2700 00001703 89F1                <1>  mov ecx,esi
  2701 00001705 89FA                <1>  mov edx,edi
  2702                              <1>  restore ebp,0
  2703 00001707 8B2C24              <2>  mov %1,[esp+4*%2]
  2704 0000170A 334500              <1>  xor eax,[ebp]
  2705 0000170D 335D04              <1>  xor ebx,[ebp+4]
  2706                              <1> 
  2707                                      dec_last_round
  2708                              <1> 
  2709                              <1> %ifdef AES_REV_DKS
  2710 00001710 83C510              <1>  add ebp,16
  2711                              <1> %else
  2712                              <1>  sub ebp,16
  2713                              <1> %endif
  2714                              <1>  save 0,ebp
  2715 00001713 892C24              <2>  mov [esp+4*%1],%2
  2716 00001716 8B7508              <1>  mov esi,[ebp+8]
  2717 00001719 8B7D0C              <1>  mov edi,[ebp+12]
  2718                              <1> 
  2719                              <1>  irn_fun li_xor, li_mov
  2720                              <2> 
  2721 0000171C C1C010              <2>  rol eax,16
  2722                              <2>  %1 esi, cl, 0, ebp
  2723 0000171F 0FB6E9              <3>  movzx %4,%2
  2724 00001722 3334AD[00000000]    <3>  xor %1,dltab_%3(%4)
  2725                              <2>  %1 esi, bh, 1, ebp
  2726 00001729 0FB6EF              <3>  movzx %4,%2
  2727 0000172C 3334AD[00040000]    <3>  xor %1,dltab_%3(%4)
  2728                              <2>  %1 esi, al, 2, ebp
  2729 00001733 0FB6E8              <3>  movzx %4,%2
  2730 00001736 3334AD[00080000]    <3>  xor %1,dltab_%3(%4)
  2731                              <2>  %1 edi, dl, 0, ebp
  2732 0000173D 0FB6EA              <3>  movzx %4,%2
  2733 00001740 333CAD[00000000]    <3>  xor %1,dltab_%3(%4)
  2734                              <2>  %1 edi, ch, 1, ebp
  2735 00001747 0FB6ED              <3>  movzx %4,%2
  2736 0000174A 333CAD[00040000]    <3>  xor %1,dltab_%3(%4)
  2737                              <2>  %1 edi, ah, 3, ebp
  2738 00001751 0FB6EC              <3>  movzx %4,%2
  2739 00001754 333CAD[000C0000]    <3>  xor %1,dltab_%3(%4)
  2740                              <2>  %2 ebp, bl, 0, ebp
  2741 0000175B 0FB6EB              <3>  movzx %4,%2
  2742 0000175E 8B2CAD[00000000]    <3>  mov %1,dltab_%3(%4)
  2743 00001765 C1E810              <2>  shr eax,16
  2744 00001768 81E30000FFFF        <2>  and ebx,0xffff0000
  2745 0000176E 09C3                <2>  or ebx,eax
  2746 00001770 C1E910              <2>  shr ecx,16
  2747                              <2>  %1 ebp, bh, 1, eax
  2748 00001773 0FB6C7              <3>  movzx %4,%2
  2749 00001776 332C85[00040000]    <3>  xor %1,dltab_%3(%4)
  2750                              <2>  %1 ebp, ch, 3, eax
  2751 0000177D 0FB6C5              <3>  movzx %4,%2
  2752 00001780 332C85[000C0000]    <3>  xor %1,dltab_%3(%4)
  2753                              <2>  %2 eax, cl, 2, ecx
  2754 00001787 0FB6C9              <3>  movzx %4,%2
  2755 0000178A 8B048D[00080000]    <3>  mov %1,dltab_%3(%4)
  2756                              <2>  %1 eax, bl, 0, ecx
  2757 00001791 0FB6CB              <3>  movzx %4,%2
  2758 00001794 33048D[00000000]    <3>  xor %1,dltab_%3(%4)
  2759                              <2>  %1 eax, dh, 1, ecx
  2760 0000179B 0FB6CE              <3>  movzx %4,%2
  2761 0000179E 33048D[00040000]    <3>  xor %1,dltab_%3(%4)
  2762 000017A5 C1EB10              <2>  shr ebx,16
  2763 000017A8 C1EA10              <2>  shr edx,16
  2764                              <2>  %1 esi, dh, 3, ecx
  2765 000017AB 0FB6CE              <3>  movzx %4,%2
  2766 000017AE 33348D[000C0000]    <3>  xor %1,dltab_%3(%4)
  2767                              <2>  %1 ebp, dl, 2, ecx
  2768 000017B5 0FB6CA              <3>  movzx %4,%2
  2769 000017B8 332C8D[00080000]    <3>  xor %1,dltab_%3(%4)
  2770                              <2>  %1 eax, bh, 3, ecx
  2771 000017BF 0FB6CF              <3>  movzx %4,%2
  2772 000017C2 33048D[000C0000]    <3>  xor %1,dltab_%3(%4)
  2773                              <2>  %1 edi, bl, 2, ecx
  2774 000017C9 0FB6CB              <3>  movzx %4,%2
  2775 000017CC 333C8D[00080000]    <3>  xor %1,dltab_%3(%4)
  2776                              <2> 
  2777                              <1> 
  2778 000017D3 89EB                <1>  mov ebx,ebp
  2779                              <1>  restore ebp,0
  2780 000017D5 8B2C24              <2>  mov %1,[esp+4*%2]
  2781 000017D8 334500              <1>  xor eax,[ebp]
  2782 000017DB 335D04              <1>  xor ebx,[ebp+4]
  2783                              <1> 
  2784                                  
  2785                                  ; move final values to the output array.
  2786                                  
  2787 000017DE 8B6C241C                    mov     ebp,[esp+out_blk+stk_spc]
  2788 000017E2 894500                      mov     [ebp],eax
  2789 000017E5 895D04                      mov     [ebp+4],ebx
  2790 000017E8 897508                      mov     [ebp+8],esi
  2791 000017EB 897D0C                      mov     [ebp+12],edi
  2792 000017EE 31C0                        xor     eax,eax
  2793                                  
  2794 000017F0 8B6C2410                .5: mov     ebp,[esp+16]
  2795 000017F4 8B5C240C                    mov     ebx,[esp+12]
  2796 000017F8 8B742408                    mov     esi,[esp+ 8]
  2797 000017FC 8B7C2404                    mov     edi,[esp+ 4]
  2798 00001800 83C414                      add     esp,stk_spc
  2799                                      do_exit
  2800                              <1> %ifdef DLL_EXPORT
  2801                              <1>  ret %1
  2802                              <1> %else
  2803 00001803 C3                  <1>  ret
  2804                              <1> %endif
  2805                                  
  2806                                  %endif
