;	Static Name Aliases
;
	TITLE   ..\bootconfig.cpp
	.MODEL  SMALL
	.386p
	.387
_TEXT	SEGMENT  WORD USE16 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT  WORD USE16 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT  WORD USE16 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT  WORD USE16 PUBLIC 'BSS'
_BSS	ENDS
DGROUP	GROUP	CONST, _BSS, _DATA
	ASSUME DS: DGROUP, SS: DGROUP
PUBLIC  ?ExtraBootPartitionPresent@@3DA
PUBLIC  ?BootDriveGeometryValid@@3DA
PUBLIC  ?PreventNormalSystemBoot@@3DA
PUBLIC  ?PreventBootMenu@@3DA
PUBLIC  ?BootStarted@@3DA
_DATA      SEGMENT
?BootDriveGeometryValid@@3DA	DB	00H
?PreventNormalSystemBoot@@3DA	DB	00H
?PreventBootMenu@@3DA	DB	00H
?BootStarted@@3DA	DB	00H
?ExtraBootPartitionPresent@@3DA	DB	00H
_DATA      ENDS
_BSS      SEGMENT
	ORG	$+72
PUBLIC  ?ActivePartition@@3UPartition@@A
?ActivePartition@@3UPartition@@A	DW 010H DUP (?)
PUBLIC  ?PartitionFollowingActive@@3UPartition@@A
?PartitionFollowingActive@@3UPartition@@A	DW 010H DUP (?)
PUBLIC  ?HiddenVolumeStartUnitNo@@3TUINT64_STRUCT@@A
?HiddenVolumeStartUnitNo@@3TUINT64_STRUCT@@A	DW 04H DUP (?)
PUBLIC  ?HiddenVolumeStartSector@@3TUINT64_STRUCT@@A
?HiddenVolumeStartSector@@3TUINT64_STRUCT@@A	DW 04H DUP (?)
	ORG	$-152
PUBLIC  ?BootSectorFlags@@3EA
?BootSectorFlags@@3EA	DB 01H DUP (?)
PUBLIC  ?BootLoaderDrive@@3EA
?BootLoaderDrive@@3EA	DB 01H DUP (?)
PUBLIC  ?BootDrive@@3EA
?BootDrive@@3EA	DB 01H DUP (?)
	ORG	$+1
PUBLIC  ?BootDriveGeometry@@3UDriveGeometry@@A
?BootDriveGeometry@@3UDriveGeometry@@A	DW 02H DUP (?)
PUBLIC  ?CustomUserMessage@@3QADA
?CustomUserMessage@@3QADA	DB 019H DUP (?)
	ORG	$+1
PUBLIC  ?OuterVolumeBackupHeaderCrc@@3KA
?OuterVolumeBackupHeaderCrc@@3KA	DW 02H DUP (?)
PUBLIC  ?BootCryptoInfo@@3PAUCRYPTO_INFO_t@@A
?BootCryptoInfo@@3PAUCRYPTO_INFO_t@@A	DW 01H DUP (?)
PUBLIC  ?EncryptedVirtualPartition@@3UPartition@@A
?EncryptedVirtualPartition@@3UPartition@@A	DW 010H DUP (?)
_BSS	ENDS
END
;|*** /*
;|***  Copyright (c) 2008-2012 TrueCrypt Developers Association. All rights reserved.
;|*** 
;|***  Governed by the TrueCrypt License 3.0 the full text of which is contained in
;|***  the file License.txt included in TrueCrypt binary and source code distribution
;|***  packages.
;|*** */
;|*** 
;|*** #include "BootConfig.h"
;|*** 
;|*** byte BootSectorFlags;
;|*** 
;|*** byte BootLoaderDrive;
;|*** byte BootDrive;
;|*** bool BootDriveGeometryValid = false;
;|*** bool PreventNormalSystemBoot = false;
;|*** bool PreventBootMenu = false;
;|*** char CustomUserMessage[TC_BOOT_SECTOR_USER_MESSAGE_MAX_LENGTH + 1];
;|*** uint32 OuterVolumeBackupHeaderCrc;
;|*** 
;|*** bool BootStarted = false;
;|*** 
;|*** DriveGeometry BootDriveGeometry;
;|*** 
;|*** CRYPTO_INFO *BootCryptoInfo;
;|*** Partition EncryptedVirtualPartition;
;|*** 
;|*** Partition ActivePartition;
;|*** Partition PartitionFollowingActive;
;|*** bool ExtraBootPartitionPresent = false;
;|*** uint64 HiddenVolumeStartUnitNo;
;|*** uint64 HiddenVolumeStartSector;
;|*** 
;|*** #ifndef TC_WINDOWS_BOOT_RESCUE_DISK_MODE
;|*** 
;|*** void ReadBootSectorUserConfiguration ()
;|*** {
;|*** 	byte userConfig;
;|*** 
;|*** 	AcquireSectorBuffer();
;|*** 
;|*** 	if (ReadWriteMBR (false, BootLoaderDrive, true) != BiosResultSuccess)
;|*** 		goto ret;
;|*** 
;|*** 	userConfig = SectorBuffer[TC_BOOT_SECTOR_USER_CONFIG_OFFSET];
;|*** 
;|*** #ifdef TC_WINDOWS_BOOT_AES
;|*** 	EnableHwEncryption (!(userConfig & TC_BOOT_USER_CFG_FLAG_DISABLE_HW_ENCRYPTION));
;|*** #endif
;|*** 
;|*** 	PreventBootMenu = (userConfig & TC_BOOT_USER_CFG_FLAG_DISABLE_ESC);
;|*** 
;|*** 	memcpy (CustomUserMessage, SectorBuffer + TC_BOOT_SECTOR_USER_MESSAGE_OFFSET, TC_BOOT_SECTOR_USER_MESSAGE_MAX_LENGTH);
;|*** 	CustomUserMessage[TC_BOOT_SECTOR_USER_MESSAGE_MAX_LENGTH] = 0;
;|*** 
;|*** 	if (userConfig & TC_BOOT_USER_CFG_FLAG_SILENT_MODE)
;|*** 	{
;|*** 		if (CustomUserMessage[0])
;|*** 		{
;|*** 			InitVideoMode();
;|*** 			Print (CustomUserMessage);
;|*** 		}
;|*** 
;|*** 		DisableScreenOutput();
;|*** 	}
;|*** 
;|*** 	OuterVolumeBackupHeaderCrc = *(uint32 *) (SectorBuffer + TC_BOOT_SECTOR_OUTER_VOLUME_BAK_HEADER_CRC_OFFSET);
;|*** 
;|*** ret:
;|*** 	ReleaseSectorBuffer();
;|*** }
;|*** 
;|*** 
;|*** BiosResult UpdateBootSectorConfiguration (byte drive)
;|*** {
;|*** 	AcquireSectorBuffer();
;|*** 
;|*** 	BiosResult result = ReadWriteMBR (false, drive);
;|*** 	if (result != BiosResultSuccess)
;|*** 		goto ret;
;|*** 
;|*** 	SectorBuffer[TC_BOOT_SECTOR_CONFIG_OFFSET] = BootSectorFlags;
;|*** 	result = ReadWriteMBR (true, drive);
;|*** 
;|*** ret:
;|*** 	ReleaseSectorBuffer();
;|*** 	return result;
;|*** }
;|*** 
;|*** #endif // !TC_WINDOWS_BOOT_RESCUE_DISK_MODE
