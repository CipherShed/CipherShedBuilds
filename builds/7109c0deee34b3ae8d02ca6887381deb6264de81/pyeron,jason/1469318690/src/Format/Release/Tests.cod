; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\Public\Desktop\projects\ciphershed\src\Common\Tests.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@ ; `string'
PUBLIC	??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@ ; `string'
PUBLIC	??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@ ; `string'
PUBLIC	??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@ ; `string'
PUBLIC	??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@ ; `string'
PUBLIC	??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@ ; `string'
PUBLIC	??_C@_0P@ONGHGJEC@message?5digest?$AA@		; `string'
PUBLIC	??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@ ; `string'
PUBLIC	??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@ ; `string'
PUBLIC	??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@ ; `string'
PUBLIC	??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@ ; `string'
PUBLIC	??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@ ; `string'
PUBLIC	??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@		; `string'
PUBLIC	??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@ ; `string'
PUBLIC	??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@ ; `string'
PUBLIC	??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@ ; `string'
PUBLIC	??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@ ; `string'
PUBLIC	??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@ ; `string'
PUBLIC	??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@ ; `string'
PUBLIC	??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@ ; `string'
PUBLIC	??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@ ; `string'
PUBLIC	??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@ ; `string'
PUBLIC	??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@ ; `string'
PUBLIC	??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@ ; `string'
PUBLIC	??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@ ; `string'
PUBLIC	??_C@_08BPPJKMC@Hi?5There?$AA@			; `string'
PUBLIC	??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@ ; `string'
PUBLIC	??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@ ; `string'
PUBLIC	??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@ ; `string'
PUBLIC	??_C@_04HDLGGHEL@Jefe?$AA@			; `string'
PUBLIC	??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@ ; `string'
PUBLIC	_XTS_vectors
PUBLIC	_bf_ecb_vectors
PUBLIC	_tripledes_vectors
PUBLIC	_cast_ecb_vectors
PUBLIC	_aes_ecb_vectors
PUBLIC	_serpent_vectors
PUBLIC	_twofish_vectors
PUBLIC	_hmac_sha512_test_keys
PUBLIC	_hmac_sha512_test_data
PUBLIC	_hmac_sha512_test_vectors
PUBLIC	_hmac_sha1_test_keys
PUBLIC	_hmac_sha1_test_data
PUBLIC	_hmac_sha1_test_vectors
PUBLIC	_hmac_ripemd160_test_keys
PUBLIC	_hmac_ripemd160_test_data
PUBLIC	_hmac_ripemd160_test_vectors
PUBLIC	_hmac_whirlpool_test_key
PUBLIC	_hmac_whirlpool_test_data
PUBLIC	_hmac_whirlpool_test_vectors
PUBLIC	_lrw_vectors
_DATA	SEGMENT
COMM	_ks_tmp:BYTE:014ccH
_DATA	ENDS
;	COMDAT ??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@
CONST	SEGMENT
??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@ DB 03H
	DB	091H, 0d2H, 080H, 00H, 0b6H, 'b', 0bbH, 0b8H, 0e6H, '#>', 0e8H
	DB	'l', 0f2H, 0b2H, 084H, 'tLs', 08bH, 'X', 00H, 0baH, '(', 012H, 0edH
	DB	'Ro', 0e3H, 015H, ':', 0b1H, 0baH, 0e7H, 0e2H, '6', 0beH, 096H
	DB	'TI?', 019H, 0faH, 0ceH, 0a6H, 'D', 01fH, '`', 0f5H, 0f0H, 018H
	DB	093H, 09H, 011H, 0a5H, 0e5H, 0ceH, 0d8H, 0f2H, 'j', 0bfH, 0a4H
	DB	02H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
CONST	SEGMENT
??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@ DB 'abcdbcdecdefdefg'
	DB	'efghfghighijhijkijkljklmklmnlmnomnopnopq', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
CONST	SEGMENT
??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@ DB 00H
	DB	011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH, 00H, 011H, '"3DUfw', 088H, 099H
	DB	0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH, 01H, '#Eg', 089H, 0abH, 0cdH
	DB	0efH, 00H, 011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH
	DB	0ffH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@
CONST	SEGMENT
??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@ DB 085H
	DB	0f1H, 'dp>a', 0a6H, '11', 0beH, '~E', 095H, 08eH, 07H, 094H, 012H
	DB	'9', 04H, 0f9H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@
CONST	SEGMENT
??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@ DB 0f8H
	DB	'6b', 0ccH, 08dH, '3', 09cH, '"~`', 0fH, 0cdH, 'clW', 0d2H, 'W'
	DB	01bH, 01cH, '4', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@
CONST	SEGMENT
??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@ DB '1234567890123456'
	DB	'7890123456789012345678901234567890123456789012345678901234567'
	DB	'890', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ONGHGJEC@message?5digest?$AA@
CONST	SEGMENT
??_C@_0P@ONGHGJEC@message?5digest?$AA@ DB 'message digest', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@
CONST	SEGMENT
??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@ DB 01H
	DB	'#Eg', 089H, 0abH, 0cdH, 0efH, 0feH, 0dcH, 0baH, 098H, 'vT2', 010H
	DB	00H, 011H, '"3', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@
CONST	SEGMENT
??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@ DB 00H
	DB	011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH
	DB	01H, '#Eg', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@
CONST	SEGMENT
??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@ DB 012H
	DB	']sB', 0b9H, 0acH, 011H, 0cdH, 091H, 0a3H, 09aH, 0f4H, 08aH, 0a1H
	DB	'{Oc', 0f1H, 'u', 0d3H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@
CONST	SEGMENT
??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@ DB 0efH
	DB	0fcH, 0dfH, 'j', 0e5H, 0ebH, '/', 0a2H, 0d2H, 't', 016H, 0d5H, 0f1H
	DB	084H, 0dfH, 09cH, '%', 09aH, '|y', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@
CONST	SEGMENT
??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@ DB 0b6H
	DB	017H, '1', 086H, 'U', 05H, 'rd', 0e2H, 08bH, 0c0H, 0b6H, 0fbH, '7'
	DB	08cH, 08eH, 0f1H, 'F', 0beH, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@
CONST	SEGMENT
??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@ DB 0bcH
	DB	0f4H, 01eH, 0abH, 08bH, 0b2H, 0d8H, 02H, 0f3H, 0d0H, '\', 0afH
	DB	'|', 0b0H, 092H, 0ecH, 0f8H, 0d1H, 0a3H, 0aaH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@
CONST	SEGMENT
??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@ DB 'Sample #3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@
CONST	SEGMENT
??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@ DB 'PQR'
	DB	'STUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~', 07fH, 080H, 081H
	DB	082H, 083H, 084H, 085H, 086H, 087H, 088H, 089H, 08aH, 08bH, 08cH
	DB	08dH, 08eH, 08fH, 090H, 091H, 092H, 093H, 094H, 095H, 096H, 097H
	DB	098H, 099H, 09aH, 09bH, 09cH, 09dH, 09eH, 09fH, 0a0H, 0a1H, 0a2H
	DB	0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H, 0aaH, 0abH, 0acH, 0adH
	DB	0aeH, 0afH, 0b0H, 0b1H, 0b2H, 0b3H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@
CONST	SEGMENT
??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@ DB 0e3H
	DB	'{jw]', 0c8H, '}', 0baH, 0a4H, 0dfH, 0a9H, 0f9H, 'n^?', 0fdH, 0deH
	DB	0bdH, 'q', 0f8H, 086H, 'r', 089H, 086H, ']', 0f5H, 0a3H, '- ', 0cdH
	DB	0c9H, 'D', 0b6H, 02H, ',', 0acH, '<I', 082H, 0b1H, 0dH, '^', 0ebH
	DB	'U', 0c3H, 0e4H, 0deH, 015H, 013H, 'Fv', 0fbH, 'm', 0e0H, 'D`e'
	DB	0c9H, 't@', 0faH, 08cH, 'jX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@
CONST	SEGMENT
??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@ DB 080H
	DB	0b2H, 'Bc', 0c7H, 0c1H, 0a3H, 0ebH, 0b7H, 014H, 093H, 0c1H, 0ddH
	DB	'{', 0e8H, 0b4H, 09bH, 'F', 0d1H, 0f4H, 01bH, 'J', 0eeH, 0c1H, 012H
	DB	01bH, 01H, '7', 083H, 0f8H, 0f3H, 'RkV', 0d0H, '7', 0e0H, '_%', 098H
	DB	0bdH, 0fH, 0d2H, '!]j', 01eH, 'R', 095H, 0e6H, 'Os', 0f6H, '?', 0aH
	DB	0ecH, 08bH, 091H, 'Z', 098H, ']xe', 098H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@
CONST	SEGMENT
??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@ DB 0b0H
	DB	0baH, 'FV7E', 08cH, 'i', 090H, 0e5H, 0a8H, 0c5H, 0f6H, 01dH, 'J'
	DB	0f7H, 0e5H, 'v', 0d9H, 07fH, 0f9H, 'K', 087H, '-', 0e7H, 'o', 080H
	DB	'P6', 01eH, 0e3H, 0dbH, 0a9H, 01cH, 0a5H, 0c1H, 01aH, 0a2H, '^'
	DB	0b4H, 0d6H, 'y''\', 0c5H, 'x', 080H, 'c', 0a5H, 0f1H, 097H, 'A'
	DB	012H, 0cH, 'O-', 0e2H, 0adH, 0ebH, 0ebH, 010H, 0a2H, 098H, 0ddH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@
CONST	SEGMENT
??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@ DB 0faH
	DB	's', 0b0H, 08H, 09dH, 'V', 0a2H, 084H, 0efH, 0b0H, 0f0H, 'ul', 089H
	DB	0bH, 0e9H, 0b1H, 0b5H, 0dbH, 0ddH, 08eH, 0e8H, 01aH, '6U', 0f8H
	DB	'>3', 0b2H, '''', 09dH, '9', 0bfH, '>', 084H, 082H, 'y', 0a7H, '"'
	DB	0c8H, 06H, 0b4H, 085H, 0a4H, '~g', 0c8H, 07H, 0b9H, 'F', 0a3H, '7'
	DB	0beH, 0e8H, 094H, '&t''', 088H, 'Y', 0e1H, '2', 092H, 0fbH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@
CONST	SEGMENT
??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@ DB 016H
	DB	'Kz{', 0fcH, 0f8H, 019H, 0e2H, 0e3H, 095H, 0fbH, 0e7H, ';V', 0e0H
	DB	0a3H, 087H, 0bdH, 'd".', 083H, 01fH, 0d6H, 010H, '''', 0cH, 0d7H
	DB	0eaH, '%', 05H, 'T', 097H, 'X', 0bfH, 'u', 0c0H, 'Z', 099H, 'J'
	DB	'm', 03H, 'Oe', 0f8H, 0f0H, 0e6H, 0fdH, 0caH, 0eaH, 0b1H, 0a3H
	DB	'MJkKcn', 07H, 0aH, '8', 0bcH, 0e7H, '7', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@
CONST	SEGMENT
??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@ DB 087H
	DB	0aaH, '|', 0deH, 0a5H, 0efH, 'a', 09dH, 'O', 0f0H, 0b4H, '$', 01aH
	DB	01dH, 'l', 0b0H, '#y', 0f4H, 0e2H, 0ceH, 'N', 0c2H, 'xz', 0d0H
	DB	0b3H, 05H, 'E', 0e1H, '|', 0deH, 0daH, 0a8H, '3', 0b7H, 0d6H, 0b8H
	DB	0a7H, 02H, 03H, 08bH, '''N', 0aeH, 0a3H, 0f4H, 0e4H, 0beH, 09dH
	DB	091H, 'N', 0ebH, 'a', 0f1H, 'p.il :', 012H, 'hT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@
CONST	SEGMENT
??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@ DB 'This is a '
	DB	'test using a larger than block-size key and a larger than blo'
	DB	'ck-size data. The key needs to be hashed before being used by'
	DB	' the HMAC algorithm.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@
CONST	SEGMENT
??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@ DB 'Test Using '
	DB	'Larger Than Block-Size Key - Hash Key First', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@
CONST	SEGMENT
??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@ DB 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@
CONST	SEGMENT
??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@ DB 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@
CONST	SEGMENT
??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@ DB 'what do '
	DB	'ya want for nothing?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08BPPJKMC@Hi?5There?$AA@
CONST	SEGMENT
??_C@_08BPPJKMC@Hi?5There?$AA@ DB 'Hi There', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@
CONST	SEGMENT
??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@ DB 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@
CONST	SEGMENT
??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@ DB 01H
	DB	02H, 03H, 04H, 05H, 06H, 07H, 08H, 09H, 0aH, 0bH, 0cH, 0dH, 0eH
	DB	0fH, 010H, 011H, 012H, 013H, 014H, 015H, 016H, 017H, 018H, 019H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@
CONST	SEGMENT
??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@ DB 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDLGGHEL@Jefe?$AA@
CONST	SEGMENT
??_C@_04HDLGGHEL@Jefe?$AA@ DB 'Jefe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@
CONST	SEGMENT
??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@ DB 0bH
	DB	0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH
	DB	0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_XTS_vectors DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	01cH
	DB	03bH
	DB	03aH
	DB	010H
	DB	02fH
	DB	077H
	DB	03H
	DB	086H
	DB	0e4H
	DB	083H
	DB	06cH
	DB	099H
	DB	0e3H
	DB	070H
	DB	0cfH
	DB	09bH
	DB	0eaH
	DB	00H
	DB	080H
	DB	03fH
	DB	05eH
	DB	048H
	DB	023H
	DB	057H
	DB	0a4H
	DB	0aeH
	DB	012H
	DB	0d4H
	DB	014H
	DB	0a3H
	DB	0e6H
	DB	03bH
	DB	05dH
	DB	031H
	DB	0e2H
	DB	076H
	DB	0f8H
	DB	0feH
	DB	04aH
	DB	08dH
	DB	066H
	DB	0b3H
	DB	017H
	DB	0f9H
	DB	0acH
	DB	068H
	DB	03fH
	DB	044H
	DB	068H
	DB	0aH
	DB	086H
	DB	0acH
	DB	035H
	DB	0adH
	DB	0fcH
	DB	033H
	DB	045H
	DB	0beH
	DB	0feH
	DB	0cbH
	DB	04bH
	DB	0b1H
	DB	088H
	DB	0fdH
	DB	057H
	DB	076H
	DB	092H
	DB	06cH
	DB	049H
	DB	0a3H
	DB	09H
	DB	05eH
	DB	0b1H
	DB	08H
	DB	0fdH
	DB	010H
	DB	098H
	DB	0baH
	DB	0ecH
	DB	070H
	DB	0aaH
	DB	0a6H
	DB	069H
	DB	099H
	DB	0a7H
	DB	02aH
	DB	082H
	DB	0f2H
	DB	07dH
	DB	084H
	DB	08bH
	DB	021H
	DB	0d4H
	DB	0a7H
	DB	041H
	DB	0b0H
	DB	0c5H
	DB	0cdH
	DB	04dH
	DB	05fH
	DB	0ffH
	DB	09dH
	DB	0acH
	DB	089H
	DB	0aeH
	DB	0baH
	DB	012H
	DB	029H
	DB	061H
	DB	0d0H
	DB	03aH
	DB	075H
	DB	071H
	DB	023H
	DB	0e9H
	DB	087H
	DB	0fH
	DB	08aH
	DB	0cfH
	DB	010H
	DB	00H
	DB	02H
	DB	08H
	DB	087H
	DB	089H
	DB	014H
	DB	029H
	DB	0caH
	DB	02aH
	DB	03eH
	DB	07aH
	DB	07dH
	DB	07dH
	DB	0f7H
	DB	0b1H
	DB	03H
	DB	055H
	DB	016H
	DB	05cH
	DB	08bH
	DB	09aH
	DB	06dH
	DB	0aH
	DB	07dH
	DB	0e8H
	DB	0b0H
	DB	062H
	DB	0c4H
	DB	050H
	DB	0dH
	DB	0c4H
	DB	0cdH
	DB	012H
	DB	0cH
	DB	0fH
	DB	074H
	DB	018H
	DB	0daH
	DB	0e3H
	DB	0d0H
	DB	0b5H
	DB	078H
	DB	01cH
	DB	034H
	DB	080H
	DB	03fH
	DB	0a7H
	DB	054H
	DB	021H
	DB	0c7H
	DB	090H
	DB	0dfH
	DB	0e1H
	DB	0deH
	DB	018H
	DB	034H
	DB	0f2H
	DB	080H
	DB	0d7H
	DB	066H
	DB	07bH
	DB	032H
	DB	07fH
	DB	06cH
	DB	08cH
	DB	0d7H
	DB	055H
	DB	07eH
	DB	012H
	DB	0acH
	DB	03aH
	DB	0fH
	DB	093H
	DB	0ecH
	DB	05H
	DB	0c5H
	DB	02eH
	DB	04H
	DB	093H
	DB	0efH
	DB	031H
	DB	0a1H
	DB	02dH
	DB	03dH
	DB	092H
	DB	060H
	DB	0f7H
	DB	09aH
	DB	028H
	DB	09dH
	DB	06aH
	DB	037H
	DB	09bH
	DB	0c7H
	DB	0cH
	DB	050H
	DB	084H
	DB	014H
	DB	073H
	DB	0d1H
	DB	0a8H
	DB	0ccH
	DB	081H
	DB	0ecH
	DB	058H
	DB	03eH
	DB	096H
	DB	045H
	DB	0e0H
	DB	07bH
	DB	08dH
	DB	096H
	DB	070H
	DB	065H
	DB	05bH
	DB	0a5H
	DB	0bbH
	DB	0cfH
	DB	0ecH
	DB	0c6H
	DB	0dcH
	DB	039H
	DB	066H
	DB	038H
	DB	0aH
	DB	0d8H
	DB	0feH
	DB	0cbH
	DB	017H
	DB	0b6H
	DB	0baH
	DB	02H
	DB	046H
	DB	09aH
	DB	02H
	DB	0aH
	DB	084H
	DB	0e1H
	DB	08eH
	DB	08fH
	DB	084H
	DB	025H
	DB	020H
	DB	070H
	DB	0c1H
	DB	03eH
	DB	09fH
	DB	01fH
	DB	028H
	DB	09bH
	DB	0e5H
	DB	04fH
	DB	0bcH
	DB	048H
	DB	014H
	DB	057H
	DB	077H
	DB	08fH
	DB	061H
	DB	060H
	DB	015H
	DB	0e1H
	DB	032H
	DB	07aH
	DB	02H
	DB	0b1H
	DB	040H
	DB	0f1H
	DB	050H
	DB	05eH
	DB	0b3H
	DB	09H
	DB	032H
	DB	06dH
	DB	068H
	DB	037H
	DB	08fH
	DB	083H
	DB	074H
	DB	059H
	DB	05cH
	DB	084H
	DB	09dH
	DB	084H
	DB	0f4H
	DB	0c3H
	DB	033H
	DB	0ecH
	DB	044H
	DB	023H
	DB	088H
	DB	051H
	DB	043H
	DB	0cbH
	DB	047H
	DB	0bdH
	DB	071H
	DB	0c5H
	DB	0edH
	DB	0aeH
	DB	09bH
	DB	0e6H
	DB	09aH
	DB	02fH
	DB	0feH
	DB	0ceH
	DB	0b1H
	DB	0beH
	DB	0c9H
	DB	0deH
	DB	024H
	DB	04fH
	DB	0beH
	DB	015H
	DB	099H
	DB	02bH
	DB	011H
	DB	0b7H
	DB	07cH
	DB	04H
	DB	0fH
	DB	012H
	DB	0bdH
	DB	08fH
	DB	06aH
	DB	097H
	DB	05aH
	DB	044H
	DB	0a0H
	DB	0f9H
	DB	0cH
	DB	029H
	DB	0a9H
	DB	0abH
	DB	0c3H
	DB	0d4H
	DB	0d8H
	DB	093H
	DB	092H
	DB	072H
	DB	084H
	DB	0c5H
	DB	087H
	DB	054H
	DB	0ccH
	DB	0e2H
	DB	094H
	DB	052H
	DB	09fH
	DB	086H
	DB	014H
	DB	0dcH
	DB	0d2H
	DB	0abH
	DB	0a9H
	DB	091H
	DB	092H
	DB	05fH
	DB	0edH
	DB	0c4H
	DB	0aeH
	DB	074H
	DB	0ffH
	DB	0acH
	DB	06eH
	DB	033H
	DB	03bH
	DB	093H
	DB	0ebH
	DB	04aH
	DB	0ffH
	DB	04H
	DB	079H
	DB	0daH
	DB	09aH
	DB	041H
	DB	0eH
	DB	044H
	DB	050H
	DB	0e0H
	DB	0ddH
	DB	07aH
	DB	0e4H
	DB	0c6H
	DB	0e2H
	DB	091H
	DB	09H
	DB	00H
	DB	057H
	DB	05dH
	DB	0a4H
	DB	01H
	DB	0fcH
	DB	07H
	DB	05H
	DB	09fH
	DB	064H
	DB	05eH
	DB	08bH
	DB	07eH
	DB	09bH
	DB	0fdH
	DB	0efH
	DB	033H
	DB	094H
	DB	030H
	DB	054H
	DB	0ffH
	DB	084H
	DB	01H
	DB	014H
	DB	093H
	DB	0c2H
	DB	07bH
	DB	034H
	DB	029H
	DB	0eaH
	DB	0edH
	DB	0b4H
	DB	0edH
	DB	053H
	DB	076H
	DB	044H
	DB	01aH
	DB	077H
	DB	0edH
	DB	043H
	DB	085H
	DB	01aH
	DB	0d7H
	DB	07fH
	DB	016H
	DB	0f5H
	DB	041H
	DB	0dfH
	DB	0d2H
	DB	069H
	DB	0d5H
	DB	0dH
	DB	06aH
	DB	05fH
	DB	014H
	DB	0fbH
	DB	0aH
	DB	0abH
	DB	01cH
	DB	0bbH
	DB	04cH
	DB	015H
	DB	050H
	DB	0beH
	DB	097H
	DB	0f7H
	DB	0abH
	DB	040H
	DB	066H
	DB	019H
	DB	03cH
	DB	04cH
	DB	0aaH
	DB	077H
	DB	03dH
	DB	0adH
	DB	038H
	DB	01H
	DB	04bH
	DB	0d2H
	DB	09H
	DB	02fH
	DB	0a7H
	DB	055H
	DB	0c8H
	DB	024H
	DB	0bbH
	DB	05eH
	DB	054H
	DB	0c4H
	DB	0f3H
	DB	06fH
	DB	0fdH
	DB	0a9H
	DB	0fcH
	DB	0eaH
	DB	070H
	DB	0b9H
	DB	0c6H
	DB	0e6H
	DB	093H
	DB	0e1H
	DB	048H
	DB	0c1H
	DB	051H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	077H
	DB	0a3H
	DB	012H
	DB	051H
	DB	061H
	DB	08aH
	DB	015H
	DB	0e6H
	DB	0b9H
	DB	02dH
	DB	01dH
	DB	066H
	DB	0dfH
	DB	0feH
	DB	07bH
	DB	050H
	DB	0b5H
	DB	0bH
	DB	0adH
	DB	055H
	DB	023H
	DB	05H
	DB	0baH
	DB	02H
	DB	017H
	DB	0a6H
	DB	010H
	DB	068H
	DB	08eH
	DB	0ffH
	DB	07eH
	DB	011H
	DB	0e1H
	DB	0d0H
	DB	022H
	DB	054H
	DB	038H
	DB	0e0H
	DB	093H
	DB	024H
	DB	02dH
	DB	06dH
	DB	0b2H
	DB	074H
	DB	0fdH
	DB	0e8H
	DB	01H
	DB	0d4H
	DB	0caH
	DB	0e0H
	DB	06fH
	DB	020H
	DB	092H
	DB	0c7H
	DB	028H
	DB	0b2H
	DB	047H
	DB	085H
	DB	059H
	DB	0dfH
	DB	058H
	DB	0e8H
	DB	037H
	DB	0c2H
	DB	046H
	DB	09eH
	DB	0e4H
	DB	0a4H
	DB	0faH
	DB	079H
	DB	04eH
	DB	04bH
	DB	0bcH
	DB	07fH
	DB	039H
	DB	0bcH
	DB	02H
	DB	06eH
	DB	03cH
	DB	0b7H
	DB	02cH
	DB	033H
	DB	0b0H
	DB	088H
	DB	08fH
	DB	025H
	DB	0b4H
	DB	0acH
	DB	0f5H
	DB	06aH
	DB	02aH
	DB	098H
	DB	04H
	DB	0f1H
	DB	0ceH
	DB	06dH
	DB	03dH
	DB	06eH
	DB	01dH
	DB	0c6H
	DB	0caH
	DB	018H
	DB	01dH
	DB	04bH
	DB	054H
	DB	061H
	DB	079H
	DB	0d5H
	DB	055H
	DB	044H
	DB	0aaH
	DB	077H
	DB	060H
	DB	0c4H
	DB	0dH
	DB	06H
	DB	074H
	DB	015H
	DB	039H
	DB	0c7H
	DB	0e3H
	DB	0cdH
	DB	09dH
	DB	02fH
	DB	066H
	DB	050H
	DB	0b2H
	DB	01H
	DB	03fH
	DB	0d0H
	DB	0eeH
	DB	0b8H
	DB	0c2H
	DB	0b8H
	DB	0e3H
	DB	0d8H
	DB	0d2H
	DB	040H
	DB	0ccH
	DB	0aeH
	DB	02dH
	DB	04cH
	DB	098H
	DB	032H
	DB	0aH
	DB	074H
	DB	042H
	DB	0e1H
	DB	0c8H
	DB	0d7H
	DB	05aH
	DB	042H
	DB	0d6H
	DB	0e6H
	DB	0cfH
	DB	0a4H
	DB	0c2H
	DB	0ecH
	DB	0a1H
	DB	079H
	DB	08dH
	DB	015H
	DB	08cH
	DB	07aH
	DB	0ecH
	DB	0dfH
	DB	082H
	DB	049H
	DB	0fH
	DB	024H
	DB	0bbH
	DB	09bH
	DB	038H
	DB	0e1H
	DB	08H
	DB	0bcH
	DB	0daH
	DB	012H
	DB	0c3H
	DB	0faH
	DB	0f9H
	DB	0a2H
	DB	011H
	DB	041H
	DB	0c3H
	DB	061H
	DB	03bH
	DB	058H
	DB	036H
	DB	07fH
	DB	092H
	DB	02aH
	DB	0aaH
	DB	026H
	DB	0cdH
	DB	022H
	DB	0f2H
	DB	03dH
	DB	070H
	DB	08dH
	DB	0aeH
	DB	069H
	DB	09aH
	DB	0d7H
	DB	0cbH
	DB	040H
	DB	0a8H
	DB	0adH
	DB	0bH
	DB	06eH
	DB	027H
	DB	084H
	DB	097H
	DB	03dH
	DB	0cbH
	DB	060H
	DB	056H
	DB	084H
	DB	0c0H
	DB	08bH
	DB	08dH
	DB	069H
	DB	098H
	DB	0c6H
	DB	09aH
	DB	0acH
	DB	04H
	DB	099H
	DB	021H
	DB	087H
	DB	01eH
	DB	0bbH
	DB	065H
	DB	030H
	DB	01aH
	DB	046H
	DB	019H
	DB	0caH
	DB	080H
	DB	0ecH
	DB	0b4H
	DB	085H
	DB	0a3H
	DB	01dH
	DB	074H
	DB	042H
	DB	023H
	DB	0ceH
	DB	08dH
	DB	0dcH
	DB	023H
	DB	094H
	DB	082H
	DB	08dH
	DB	06aH
	DB	080H
	DB	047H
	DB	0cH
	DB	09H
	DB	02fH
	DB	05bH
	DB	0a4H
	DB	013H
	DB	0c3H
	DB	037H
	DB	08fH
	DB	0a6H
	DB	05H
	DB	042H
	DB	055H
	DB	0c6H
	DB	0f9H
	DB	0dfH
	DB	044H
	DB	095H
	DB	086H
	DB	02bH
	DB	0bbH
	DB	032H
	DB	087H
	DB	068H
	DB	01fH
	DB	093H
	DB	01bH
	DB	068H
	DB	07cH
	DB	088H
	DB	08aH
	DB	0bfH
	DB	084H
	DB	04dH
	DB	0fcH
	DB	08fH
	DB	0c2H
	DB	083H
	DB	031H
	DB	0e5H
	DB	079H
	DB	092H
	DB	08cH
	DB	0d1H
	DB	02bH
	DB	0d2H
	DB	039H
	DB	0aH
	DB	0e1H
	DB	023H
	DB	0cfH
	DB	03H
	DB	081H
	DB	08dH
	DB	014H
	DB	0deH
	DB	0ddH
	DB	0e5H
	DB	0c0H
	DB	0c2H
	DB	04cH
	DB	08aH
	DB	0b0H
	DB	018H
	DB	0bfH
	DB	0caH
	DB	075H
	DB	0caH
	DB	09H
	DB	06fH
	DB	02dH
	DB	053H
	DB	01fH
	DB	03dH
	DB	016H
	DB	019H
	DB	0e7H
	DB	085H
	DB	0f1H
	DB	0adH
	DB	0a4H
	DB	037H
	DB	0caH
	DB	0b9H
	DB	02eH
	DB	098H
	DB	05H
	DB	058H
	DB	0b3H
	DB	0dcH
	DB	0e1H
	DB	047H
	DB	04aH
	DB	0fbH
	DB	075H
	DB	0bfH
	DB	0edH
	DB	0bfH
	DB	08fH
	DB	0f5H
	DB	04cH
	DB	0b2H
	DB	061H
	DB	08eH
	DB	02H
	DB	044H
	DB	0c9H
	DB	0acH
	DB	0dH
	DB	03cH
	DB	066H
	DB	0fbH
	DB	051H
	DB	059H
	DB	08cH
	DB	0d2H
	DB	0dbH
	DB	011H
	DB	0f9H
	DB	0beH
	DB	039H
	DB	079H
	DB	01aH
	DB	0beH
	DB	044H
	DB	07cH
	DB	063H
	DB	09H
	DB	04fH
	DB	07cH
	DB	045H
	DB	03bH
	DB	07fH
	DB	0f8H
	DB	07cH
	DB	0b5H
	DB	0bbH
	DB	036H
	DB	0b7H
	DB	0c7H
	DB	09eH
	DB	0fbH
	DB	08H
	DB	072H
	DB	0d1H
	DB	070H
	DB	058H
	DB	0b8H
	DB	03bH
	DB	015H
	DB	0abH
	DB	08H
	DB	066H
	DB	0adH
	DB	08aH
	DB	058H
	DB	065H
	DB	06cH
	DB	05aH
	DB	07eH
	DB	020H
	DB	0dbH
	DB	0dfH
	DB	030H
	DB	08bH
	DB	024H
	DB	061H
	DB	0d9H
	DB	07cH
	DB	0eH
	DB	0c0H
	DB	02H
	DB	04aH
	DB	027H
	DB	015H
	DB	05H
	DB	052H
	DB	049H
	DB	0cfH
	DB	03bH
	DB	047H
	DB	08dH
	DB	0ddH
	DB	047H
	DB	040H
	DB	0deH
	DB	065H
	DB	04fH
	DB	075H
	DB	0caH
	DB	068H
	DB	06eH
	DB	0dH
	DB	073H
	DB	045H
	DB	0c6H
	DB	09eH
	DB	0d5H
	DB	0cH
	DB	0dcH
	DB	02aH
	DB	08bH
	DB	033H
	DB	02bH
	DB	01fH
	DB	088H
	DB	024H
	DB	010H
	DB	08aH
	DB	0c9H
	DB	037H
	DB	0ebH
	DB	05H
	DB	05H
	DB	085H
	DB	060H
	DB	08eH
	DB	0e7H
	DB	034H
	DB	09H
	DB	07fH
	DB	0c0H
	DB	090H
	DB	054H
	DB	0fbH
	DB	0ffH
	DB	089H
	DB	0eeH
	DB	0aeH
	DB	0eaH
	DB	079H
	DB	01fH
	DB	04aH
	DB	07aH
	DB	0b1H
	DB	0f9H
	DB	086H
	DB	082H
	DB	094H
	DB	0a4H
	DB	0f9H
	DB	0e2H
	DB	07bH
	DB	042H
	DB	0afH
	DB	081H
	DB	00H
	DB	0cbH
	DB	09dH
	DB	059H
	DB	0ceH
	DB	0f9H
	DB	064H
	DB	058H
	DB	03H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	0e3H
	DB	087H
	DB	0aaH
	DB	0a5H
	DB	08bH
	DB	0a4H
	DB	083H
	DB	0afH
	DB	0a7H
	DB	0e8H
	DB	0ebH
	DB	046H
	DB	097H
	DB	078H
	DB	031H
	DB	07eH
	DB	0cfH
	DB	04cH
	DB	0f5H
	DB	073H
	DB	0aaH
	DB	09dH
	DB	04eH
	DB	0acH
	DB	023H
	DB	0f2H
	DB	0cdH
	DB	0f9H
	DB	014H
	DB	0e4H
	DB	0e2H
	DB	00H
	DB	0a8H
	DB	0b4H
	DB	090H
	DB	0e4H
	DB	02eH
	DB	0e6H
	DB	046H
	DB	080H
	DB	02dH
	DB	0c6H
	DB	0eeH
	DB	02bH
	DB	047H
	DB	01bH
	DB	027H
	DB	081H
	DB	095H
	DB	0d6H
	DB	09H
	DB	018H
	DB	0ecH
	DB	0ecH
	DB	0b4H
	DB	04bH
	DB	0f7H
	DB	099H
	DB	066H
	DB	0f8H
	DB	03fH
	DB	0abH
	DB	0a0H
	DB	049H
	DB	092H
	DB	098H
	DB	0ebH
	DB	0c6H
	DB	099H
	DB	0c0H
	DB	0c8H
	DB	063H
	DB	047H
	DB	015H
	DB	0a3H
	DB	020H
	DB	0bbH
	DB	04fH
	DB	07H
	DB	05dH
	DB	062H
	DB	02eH
	DB	074H
	DB	0c8H
	DB	0c9H
	DB	032H
	DB	00H
	DB	04fH
	DB	025H
	DB	0b4H
	DB	01eH
	DB	036H
	DB	010H
	DB	025H
	DB	0b5H
	DB	0a8H
	DB	078H
	DB	015H
	DB	039H
	DB	01fH
	DB	061H
	DB	08H
	DB	0fcH
	DB	04aH
	DB	0faH
	DB	06aH
	DB	05H
	DB	0d9H
	DB	030H
	DB	03cH
	DB	06bH
	DB	0a6H
	DB	08aH
	DB	012H
	DB	08aH
	DB	055H
	DB	070H
	DB	05dH
	DB	041H
	DB	059H
	DB	085H
	DB	083H
	DB	02fH
	DB	0deH
	DB	0aaH
	DB	0e6H
	DB	0c8H
	DB	0e1H
	DB	091H
	DB	010H
	DB	0e8H
	DB	04dH
	DB	01bH
	DB	01fH
	DB	019H
	DB	09aH
	DB	026H
	DB	092H
	DB	011H
	DB	09eH
	DB	0dcH
	DB	096H
	DB	013H
	DB	026H
	DB	058H
	DB	0f0H
	DB	09dH
	DB	0a7H
	DB	0c6H
	DB	023H
	DB	0efH
	DB	0ceH
	DB	0c7H
	DB	012H
	DB	053H
	DB	07aH
	DB	03dH
	DB	094H
	DB	0c0H
	DB	0bfH
	DB	05dH
	DB	07eH
	DB	035H
	DB	02eH
	DB	0c9H
	DB	04aH
	DB	0e5H
	DB	079H
	DB	07fH
	DB	0dbH
	DB	037H
	DB	07dH
	DB	0c1H
	DB	055H
	DB	011H
	DB	050H
	DB	072H
	DB	01aH
	DB	0dfH
	DB	015H
	DB	0bdH
	DB	026H
	DB	0a8H
	DB	0efH
	DB	0c2H
	DB	0fcH
	DB	0aaH
	DB	0d5H
	DB	068H
	DB	081H
	DB	0faH
	DB	09eH
	DB	062H
	DB	046H
	DB	02cH
	DB	028H
	DB	0f3H
	DB	0aH
	DB	0e1H
	DB	0ceH
	DB	0acH
	DB	0a9H
	DB	03cH
	DB	034H
	DB	05cH
	DB	0f2H
	DB	043H
	DB	0b7H
	DB	03fH
	DB	054H
	DB	02eH
	DB	020H
	DB	074H
	DB	0a7H
	DB	05H
	DB	0bdH
	DB	026H
	DB	043H
	DB	0bbH
	DB	09fH
	DB	07cH
	DB	0c7H
	DB	09bH
	DB	0b6H
	DB	0e7H
	DB	09H
	DB	01eH
	DB	0a6H
	DB	0e2H
	DB	032H
	DB	0dfH
	DB	0fH
	DB	09aH
	DB	0d0H
	DB	0d6H
	DB	0cfH
	DB	050H
	DB	023H
	DB	027H
	DB	087H
	DB	06dH
	DB	082H
	DB	020H
	DB	07aH
	DB	0bfH
	DB	021H
	DB	015H
	DB	0cdH
	DB	0acH
	DB	0f6H
	DB	0d5H
	DB	0a4H
	DB	08fH
	DB	06cH
	DB	018H
	DB	079H
	DB	0a6H
	DB	05bH
	DB	011H
	DB	05fH
	DB	0fH
	DB	08bH
	DB	03cH
	DB	0b3H
	DB	0c5H
	DB	09dH
	DB	015H
	DB	0ddH
	DB	08cH
	DB	076H
	DB	09bH
	DB	0c0H
	DB	014H
	DB	079H
	DB	05aH
	DB	018H
	DB	037H
	DB	0f3H
	DB	090H
	DB	01bH
	DB	058H
	DB	045H
	DB	0ebH
	DB	049H
	DB	01aH
	DB	0dfH
	DB	0efH
	DB	0e0H
	DB	097H
	DB	0b1H
	DB	0faH
	DB	030H
	DB	0a1H
	DB	02fH
	DB	0c1H
	DB	0f6H
	DB	05bH
	DB	0a2H
	DB	029H
	DB	05H
	DB	03H
	DB	015H
	DB	039H
	DB	097H
	DB	01aH
	DB	010H
	DB	0f2H
	DB	0f3H
	DB	06cH
	DB	032H
	DB	01bH
	DB	0b5H
	DB	013H
	DB	031H
	DB	0cdH
	DB	0efH
	DB	0b3H
	DB	09eH
	DB	039H
	DB	064H
	DB	0c7H
	DB	0efH
	DB	07H
	DB	099H
	DB	094H
	DB	0f5H
	DB	0b6H
	DB	09bH
	DB	02eH
	DB	0ddH
	DB	083H
	DB	0a7H
	DB	01eH
	DB	0f5H
	DB	049H
	DB	097H
	DB	01eH
	DB	0e9H
	DB	03fH
	DB	044H
	DB	0eaH
	DB	0c3H
	DB	093H
	DB	08fH
	DB	0cdH
	DB	0d6H
	DB	01dH
	DB	01H
	DB	0faH
	DB	071H
	DB	079H
	DB	09dH
	DB	0a3H
	DB	0a8H
	DB	09H
	DB	01cH
	DB	04cH
	DB	048H
	DB	0aaH
	DB	09eH
	DB	0d2H
	DB	063H
	DB	0ffH
	DB	07H
	DB	049H
	DB	0dfH
	DB	095H
	DB	0d4H
	DB	04fH
	DB	0efH
	DB	06aH
	DB	0bH
	DB	0b5H
	DB	078H
	DB	0ecH
	DB	069H
	DB	045H
	DB	06aH
	DB	0a5H
	DB	040H
	DB	08aH
	DB	0e3H
	DB	02cH
	DB	07aH
	DB	0f0H
	DB	08aH
	DB	0d7H
	DB	0baH
	DB	089H
	DB	021H
	DB	028H
	DB	07eH
	DB	03bH
	DB	0beH
	DB	0e3H
	DB	01bH
	DB	076H
	DB	07bH
	DB	0e0H
	DB	06aH
	DB	0eH
	DB	070H
	DB	05cH
	DB	086H
	DB	04aH
	DB	076H
	DB	091H
	DB	037H
	DB	0dfH
	DB	028H
	DB	029H
	DB	022H
	DB	083H
	DB	0eaH
	DB	081H
	DB	0a2H
	DB	048H
	DB	02H
	DB	041H
	DB	0b4H
	DB	04dH
	DB	099H
	DB	021H
	DB	0cdH
	DB	0beH
	DB	0c1H
	DB	0bcH
	DB	028H
	DB	0dcH
	DB	01fH
	DB	0daH
	DB	011H
	DB	04bH
	DB	0d8H
	DB	0e5H
	DB	021H
	DB	07aH
	DB	0c9H
	DB	0d8H
	DB	0ebH
	DB	0afH
	DB	0a7H
	DB	020H
	DB	0e9H
	DB	0daH
	DB	04fH
	DB	09aH
	DB	0ceH
	DB	023H
	DB	01cH
	DB	0c9H
	DB	049H
	DB	0e5H
	DB	0b9H
	DB	06fH
	DB	0e7H
	DB	06fH
	DB	0fcH
	DB	021H
	DB	06H
	DB	03fH
	DB	0ddH
	DB	0c8H
	DB	03aH
	DB	06bH
	DB	086H
	DB	079H
	DB	0c0H
	DB	0dH
	DB	035H
	DB	0e0H
	DB	095H
	DB	076H
	DB	0a8H
	DB	075H
	DB	030H
	DB	05bH
	DB	0edH
	DB	05fH
	DB	036H
	DB	0edH
	DB	024H
	DB	02cH
	DB	089H
	DB	00H
	DB	0ddH
	DB	01fH
	DB	0a9H
	DB	065H
	DB	0bcH
	DB	095H
	DB	0dH
	DB	0fcH
	DB	0e0H
	DB	09bH
	DB	013H
	DB	022H
	DB	063H
	DB	0a1H
	DB	0eeH
	DB	0f5H
	DB	02dH
	DB	0d6H
	DB	088H
	DB	08cH
	DB	030H
	DB	09fH
	DB	05aH
	DB	07dH
	DB	071H
	DB	028H
	DB	026H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	0bfH
	DB	053H
	DB	0d2H
	DB	0daH
	DB	0deH
	DB	078H
	DB	0e8H
	DB	022H
	DB	0a4H
	DB	0d9H
	DB	049H
	DB	0a9H
	DB	0bcH
	DB	067H
	DB	066H
	DB	0b0H
	DB	01bH
	DB	06H
	DB	0a8H
	DB	0efH
	DB	070H
	DB	0d2H
	DB	067H
	DB	048H
	DB	0c6H
	DB	0a7H
	DB	0fcH
	DB	036H
	DB	0d8H
	DB	0aH
	DB	0e4H
	DB	0c5H
	DB	052H
	DB	0fH
	DB	07cH
	DB	04aH
	DB	0b0H
	DB	0acH
	DB	085H
	DB	044H
	DB	042H
	DB	04fH
	DB	0a4H
	DB	05H
	DB	016H
	DB	02fH
	DB	0efH
	DB	05aH
	DB	06bH
	DB	07fH
	DB	022H
	DB	094H
	DB	098H
	DB	06H
	DB	036H
	DB	018H
	DB	0d3H
	DB	09fH
	DB	00H
	DB	03H
	DB	0cbH
	DB	05fH
	DB	0b8H
	DB	0d1H
	DB	0c8H
	DB	06bH
	DB	064H
	DB	034H
	DB	097H
	DB	0daH
	DB	01fH
	DB	0f9H
	DB	045H
	DB	0c8H
	DB	0d3H
	DB	0beH
	DB	0deH
	DB	0caH
	DB	04fH
	DB	047H
	DB	097H
	DB	02H
	DB	0a7H
	DB	0a7H
	DB	035H
	DB	0f0H
	DB	043H
	DB	0ddH
	DB	0b1H
	DB	0d6H
	DB	0aaH
	DB	0adH
	DB	0e3H
	DB	0c4H
	DB	0a0H
	DB	0acH
	DB	07cH
	DB	0a7H
	DB	0f3H
	DB	0faH
	DB	052H
	DB	079H
	DB	0beH
	DB	0f5H
	DB	06fH
	DB	082H
	DB	0cdH
	DB	07aH
	DB	02fH
	DB	038H
	DB	067H
	DB	02eH
	DB	082H
	DB	048H
	DB	014H
	DB	0e1H
	DB	07H
	DB	00H
	DB	030H
	DB	0aH
	DB	05H
	DB	05eH
	DB	016H
	DB	030H
	DB	0b8H
	DB	0f1H
	DB	0cbH
	DB	0eH
	DB	091H
	DB	09fH
	DB	05eH
	DB	094H
	DB	020H
	DB	010H
	DB	0a4H
	DB	016H
	DB	0e2H
	DB	0bfH
	DB	048H
	DB	0cbH
	DB	046H
	DB	099H
	DB	03dH
	DB	03cH
	DB	0b6H
	DB	0a5H
	DB	01cH
	DB	019H
	DB	0baH
	DB	0cfH
	DB	086H
	DB	047H
	DB	085H
	DB	0a0H
	DB	0bH
	DB	0c2H
	DB	0ecH
	DB	0ffH
	DB	015H
	DB	0d3H
	DB	050H
	DB	087H
	DB	05bH
	DB	024H
	DB	06eH
	DB	0d5H
	DB	03eH
	DB	068H
	DB	0beH
	DB	06fH
	DB	055H
	DB	0bdH
	DB	07eH
	DB	05H
	DB	0cfH
	DB	0c2H
	DB	0b2H
	DB	0edH
	DB	064H
	DB	032H
	DB	019H
	DB	08aH
	DB	064H
	DB	044H
	DB	0b6H
	DB	0d8H
	DB	0c2H
	DB	047H
	DB	0faH
	DB	0b9H
	DB	041H
	DB	0f5H
	DB	069H
	DB	076H
	DB	08bH
	DB	05cH
	DB	042H
	DB	093H
	DB	066H
	DB	0f1H
	DB	0d3H
	DB	0f0H
	DB	0fH
	DB	03H
	DB	045H
	DB	0b9H
	DB	061H
	DB	023H
	DB	0d5H
	DB	062H
	DB	04H
	DB	0c0H
	DB	01cH
	DB	063H
	DB	0b2H
	DB	02cH
	DB	0e7H
	DB	08bH
	DB	0afH
	DB	011H
	DB	06eH
	DB	052H
	DB	05eH
	DB	0d9H
	DB	0fH
	DB	0deH
	DB	0a3H
	DB	09fH
	DB	0a4H
	DB	069H
	DB	049H
	DB	04dH
	DB	038H
	DB	066H
	DB	0c3H
	DB	01eH
	DB	05H
	DB	0f2H
	DB	095H
	DB	0ffH
	DB	021H
	DB	0feH
	DB	0a8H
	DB	0d4H
	DB	0e6H
	DB	0e1H
	DB	03dH
	DB	067H
	DB	0e4H
	DB	07cH
	DB	0e7H
	DB	022H
	DB	0e9H
	DB	069H
	DB	08aH
	DB	01cH
	DB	010H
	DB	048H
	DB	0d6H
	DB	08eH
	DB	0bcH
	DB	0deH
	DB	076H
	DB	0b8H
	DB	06fH
	DB	0cfH
	DB	097H
	DB	06eH
	DB	0abH
	DB	08aH
	DB	0a9H
	DB	079H
	DB	02H
	DB	068H
	DB	0b7H
	DB	06H
	DB	08eH
	DB	01H
	DB	07aH
	DB	08bH
	DB	09bH
	DB	074H
	DB	094H
	DB	09H
	DB	051H
	DB	04fH
	DB	010H
	DB	053H
	DB	02H
	DB	07fH
	DB	0d1H
	DB	06cH
	DB	037H
	DB	086H
	DB	0eaH
	DB	01bH
	DB	0acH
	DB	05fH
	DB	015H
	DB	0cbH
	DB	079H
	DB	071H
	DB	01eH
	DB	0e2H
	DB	0abH
	DB	0e8H
	DB	02fH
	DB	05cH
	DB	0f8H
	DB	0b1H
	DB	03aH
	DB	0e7H
	DB	030H
	DB	030H
	DB	0efH
	DB	05bH
	DB	09eH
	DB	044H
	DB	057H
	DB	0e7H
	DB	05dH
	DB	013H
	DB	04H
	DB	0f9H
	DB	088H
	DB	0d6H
	DB	02dH
	DB	0d6H
	DB	0fcH
	DB	04bH
	DB	094H
	DB	0edH
	DB	038H
	DB	0baH
	DB	083H
	DB	01dH
	DB	0a4H
	DB	0b7H
	DB	063H
	DB	049H
	DB	071H
	DB	0b6H
	DB	0cdH
	DB	08eH
	DB	0c3H
	DB	025H
	DB	0d9H
	DB	0c6H
	DB	01cH
	DB	00H
	DB	0f1H
	DB	0dfH
	DB	073H
	DB	062H
	DB	07eH
	DB	0d3H
	DB	074H
	DB	05aH
	DB	05eH
	DB	084H
	DB	089H
	DB	0f3H
	DB	0a9H
	DB	05cH
	DB	069H
	DB	063H
	DB	09cH
	DB	032H
	DB	0cdH
	DB	06eH
	DB	01dH
	DB	053H
	DB	07aH
	DB	085H
	DB	0f7H
	DB	05cH
	DB	0c8H
	DB	044H
	DB	072H
	DB	06eH
	DB	08aH
	DB	072H
	DB	0fcH
	DB	00H
	DB	077H
	DB	0adH
	DB	022H
	DB	00H
	DB	0fH
	DB	01dH
	DB	050H
	DB	078H
	DB	0f6H
	DB	0b8H
	DB	066H
	DB	031H
	DB	08cH
	DB	066H
	DB	08fH
	DB	01aH
	DB	0d0H
	DB	03dH
	DB	05aH
	DB	05fH
	DB	0ceH
	DB	0d5H
	DB	021H
	DB	09fH
	DB	02eH
	DB	0abH
	DB	0bdH
	DB	0aH
	DB	0a5H
	DB	0c0H
	DB	0f4H
	DB	060H
	DB	0d1H
	DB	083H
	DB	0f0H
	DB	044H
	DB	04H
	DB	0a0H
	DB	0d6H
	DB	0f4H
	DB	069H
	DB	055H
	DB	08eH
	DB	081H
	DB	0faH
	DB	0b2H
	DB	04aH
	DB	016H
	DB	079H
	DB	05H
	DB	0abH
	DB	04cH
	DB	078H
	DB	078H
	DB	050H
	DB	02aH
	DB	0d3H
	DB	0e3H
	DB	08fH
	DB	0dbH
	DB	0e6H
	DB	02aH
	DB	041H
	DB	055H
	DB	06cH
	DB	0ecH
	DB	037H
	DB	032H
	DB	057H
	DB	059H
	DB	053H
	DB	03cH
	DB	0e8H
	DB	0f2H
	DB	05fH
	DB	036H
	DB	07cH
	DB	087H
	DB	0bbH
	DB	055H
	DB	078H
	DB	0d6H
	DB	067H
	DB	0aeH
	DB	093H
	DB	0f9H
	DB	0e2H
	DB	0fdH
	DB	099H
	DB	0bcH
	DB	0bcH
	DB	05fH
	DB	02fH
	DB	0bbH
	DB	0a8H
	DB	08cH
	DB	0f6H
	DB	051H
	DB	061H
	DB	039H
	DB	042H
	DB	0fH
	DB	0cfH
	DB	0f3H
	DB	0b7H
	DB	036H
	DB	01dH
	DB	086H
	DB	032H
	DB	02cH
	DB	04bH
	DB	0d8H
	DB	04cH
	DB	082H
	DB	0f3H
	DB	035H
	DB	0abH
	DB	0b1H
	DB	052H
	DB	0c4H
	DB	0a9H
	DB	034H
	DB	011H
	DB	037H
	DB	03aH
	DB	0aaH
	DB	082H
	DB	020H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	064H
	DB	049H
	DB	07eH
	DB	05aH
	DB	083H
	DB	01eH
	DB	04aH
	DB	093H
	DB	02cH
	DB	09H
	DB	0beH
	DB	03eH
	DB	053H
	DB	093H
	DB	037H
	DB	06dH
	DB	0aaH
	DB	059H
	DB	095H
	DB	048H
	DB	0b8H
	DB	016H
	DB	03H
	DB	01dH
	DB	022H
	DB	04bH
	DB	0bfH
	DB	050H
	DB	0a8H
	DB	018H
	DB	0edH
	DB	023H
	DB	050H
	DB	0eaH
	DB	0e7H
	DB	0e9H
	DB	060H
	DB	087H
	DB	0c8H
	DB	0a0H
	DB	0dbH
	DB	051H
	DB	0adH
	DB	029H
	DB	0bH
	DB	0d0H
	DB	0cH
	DB	01aH
	DB	0c1H
	DB	062H
	DB	08H
	DB	057H
	DB	063H
	DB	05bH
	DB	0f2H
	DB	046H
	DB	0c1H
	DB	076H
	DB	0abH
	DB	046H
	DB	03bH
	DB	0e3H
	DB	0bH
	DB	080H
	DB	08dH
	DB	0a5H
	DB	048H
	DB	08H
	DB	01aH
	DB	0c8H
	DB	047H
	DB	0b1H
	DB	058H
	DB	0e1H
	DB	026H
	DB	04bH
	DB	0e2H
	DB	05bH
	DB	0b0H
	DB	091H
	DB	0bH
	DB	0bcH
	DB	092H
	DB	064H
	DB	071H
	DB	08H
	DB	08H
	DB	094H
	DB	015H
	DB	0d4H
	DB	05fH
	DB	0abH
	DB	01bH
	DB	03dH
	DB	026H
	DB	04H
	DB	0e8H
	DB	0a8H
	DB	0efH
	DB	0f1H
	DB	0aeH
	DB	040H
	DB	020H
	DB	0cfH
	DB	0a3H
	DB	099H
	DB	036H
	DB	0b6H
	DB	068H
	DB	027H
	DB	0b2H
	DB	03fH
	DB	037H
	DB	01bH
	DB	092H
	DB	020H
	DB	0bH
	DB	0e9H
	DB	02H
	DB	051H
	DB	0e6H
	DB	0d7H
	DB	03cH
	DB	05fH
	DB	086H
	DB	0deH
	DB	05fH
	DB	0d4H
	DB	0a9H
	DB	050H
	DB	078H
	DB	019H
	DB	033H
	DB	0d7H
	DB	09aH
	DB	028H
	DB	027H
	DB	02bH
	DB	078H
	DB	02aH
	DB	02eH
	DB	0c3H
	DB	013H
	DB	0efH
	DB	0dfH
	DB	0ccH
	DB	06H
	DB	028H
	DB	0f4H
	DB	03dH
	DB	074H
	DB	04cH
	DB	02dH
	DB	0c2H
	DB	0ffH
	DB	03dH
	DB	0cbH
	DB	066H
	DB	099H
	DB	09bH
	DB	050H
	DB	0c7H
	DB	0caH
	DB	089H
	DB	05bH
	DB	0cH
	DB	064H
	DB	079H
	DB	01eH
	DB	0eaH
	DB	0a5H
	DB	0f2H
	DB	094H
	DB	099H
	DB	0fbH
	DB	01cH
	DB	02H
	DB	06fH
	DB	084H
	DB	0ceH
	DB	05bH
	DB	05cH
	DB	072H
	DB	0baH
	DB	010H
	DB	083H
	DB	0cdH
	DB	0dbH
	DB	05cH
	DB	0e4H
	DB	054H
	DB	034H
	DB	063H
	DB	016H
	DB	065H
	DB	0c3H
	DB	033H
	DB	0b6H
	DB	0bH
	DB	011H
	DB	059H
	DB	03fH
	DB	0b2H
	DB	053H
	DB	0c5H
	DB	017H
	DB	09aH
	DB	02cH
	DB	08dH
	DB	0b8H
	DB	013H
	DB	078H
	DB	02aH
	DB	00H
	DB	048H
	DB	056H
	DB	0a1H
	DB	065H
	DB	030H
	DB	011H
	DB	0e9H
	DB	03fH
	DB	0b6H
	DB	0d8H
	DB	076H
	DB	0c1H
	DB	083H
	DB	066H
	DB	0ddH
	DB	086H
	DB	083H
	DB	0f5H
	DB	034H
	DB	012H
	DB	0c0H
	DB	0c1H
	DB	080H
	DB	0f9H
	DB	0c8H
	DB	048H
	DB	059H
	DB	02dH
	DB	059H
	DB	03fH
	DB	086H
	DB	09H
	DB	0caH
	DB	073H
	DB	063H
	DB	017H
	DB	0d3H
	DB	056H
	DB	0e1H
	DB	03eH
	DB	02bH
	DB	0ffH
	DB	03aH
	DB	09fH
	DB	059H
	DB	0cdH
	DB	09aH
	DB	0ebH
	DB	019H
	DB	0cdH
	DB	048H
	DB	025H
	DB	093H
	DB	0d8H
	DB	0c4H
	DB	061H
	DB	028H
	DB	0bbH
	DB	032H
	DB	042H
	DB	03bH
	DB	037H
	DB	0a9H
	DB	0adH
	DB	0fbH
	DB	048H
	DB	02bH
	DB	099H
	DB	045H
	DB	03fH
	DB	0beH
	DB	025H
	DB	0a4H
	DB	01bH
	DB	0f6H
	DB	0feH
	DB	0b4H
	DB	0aaH
	DB	0bH
	DB	0efH
	DB	05eH
	DB	0d2H
	DB	04bH
	DB	0f7H
	DB	03cH
	DB	076H
	DB	029H
	DB	078H
	DB	02H
	DB	054H
	DB	082H
	DB	0c1H
	DB	031H
	DB	015H
	DB	0e4H
	DB	01H
	DB	05aH
	DB	0acH
	DB	099H
	DB	02eH
	DB	056H
	DB	013H
	DB	0a3H
	DB	0b5H
	DB	0c2H
	DB	0f6H
	DB	085H
	DB	0b8H
	DB	047H
	DB	095H
	DB	0cbH
	DB	06eH
	DB	09bH
	DB	026H
	DB	056H
	DB	0d8H
	DB	0c8H
	DB	081H
	DB	057H
	DB	0e5H
	DB	02cH
	DB	042H
	DB	0f9H
	DB	078H
	DB	0d8H
	DB	063H
	DB	04cH
	DB	043H
	DB	0d0H
	DB	06fH
	DB	0eaH
	DB	092H
	DB	08fH
	DB	028H
	DB	022H
	DB	0e4H
	DB	065H
	DB	0aaH
	DB	065H
	DB	076H
	DB	0e9H
	DB	0bfH
	DB	041H
	DB	093H
	DB	084H
	DB	050H
	DB	06cH
	DB	0c3H
	DB	0ceH
	DB	03cH
	DB	054H
	DB	0acH
	DB	01aH
	DB	06fH
	DB	067H
	DB	0dcH
	DB	066H
	DB	0f3H
	DB	0b3H
	DB	01H
	DB	091H
	DB	0e6H
	DB	098H
	DB	038H
	DB	0bH
	DB	0c9H
	DB	099H
	DB	0b0H
	DB	05aH
	DB	0bcH
	DB	0e1H
	DB	09dH
	DB	0c0H
	DB	0c6H
	DB	0dcH
	DB	0c2H
	DB	0ddH
	DB	00H
	DB	01eH
	DB	0c5H
	DB	035H
	DB	0baH
	DB	018H
	DB	0deH
	DB	0b2H
	DB	0dfH
	DB	01aH
	DB	010H
	DB	010H
	DB	023H
	DB	010H
	DB	083H
	DB	018H
	DB	0c7H
	DB	05dH
	DB	0c9H
	DB	086H
	DB	011H
	DB	0a0H
	DB	09dH
	DB	0c4H
	DB	08aH
	DB	0aH
	DB	0cdH
	DB	0ecH
	DB	067H
	DB	06fH
	DB	0abH
	DB	0dfH
	DB	022H
	DB	02fH
	DB	07H
	DB	0e0H
	DB	026H
	DB	0f0H
	DB	059H
	DB	0b6H
	DB	072H
	DB	0b5H
	DB	06eH
	DB	05cH
	DB	0bcH
	DB	08eH
	DB	01dH
	DB	021H
	DB	0bbH
	DB	0d8H
	DB	067H
	DB	0ddH
	DB	092H
	DB	072H
	DB	012H
	DB	05H
	DB	046H
	DB	081H
	DB	0d7H
	DB	0eH
	DB	0a7H
	DB	037H
	DB	013H
	DB	04cH
	DB	0dfH
	DB	0ceH
	DB	093H
	DB	0b6H
	DB	0f8H
	DB	02aH
	DB	0e2H
	DB	024H
	DB	023H
	DB	027H
	DB	04eH
	DB	058H
	DB	0a0H
	DB	082H
	DB	01cH
	DB	0c5H
	DB	050H
	DB	02eH
	DB	02dH
	DB	0aH
	DB	0b4H
	DB	058H
	DB	05eH
	DB	094H
	DB	0deH
	DB	069H
	DB	075H
	DB	0beH
	DB	05eH
	DB	0bH
	DB	04eH
	DB	0fcH
	DB	0e5H
	DB	01cH
	DB	0d3H
	DB	0e7H
	DB	0cH
	DB	025H
	DB	0a1H
	DB	0fbH
	DB	0bbH
	DB	0d6H
	DB	09H
	DB	0d2H
	DB	073H
	DB	0adH
	DB	05bH
	DB	0dH
	DB	059H
	DB	063H
	DB	01cH
	DB	053H
	DB	01fH
	DB	06aH
	DB	0aH
	DB	057H
	DB	0b9H
_hmac_whirlpool_test_key DD FLAT:??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
_bf_ecb_vectors DB 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	'N', 0f9H, 097H, 'Ea', 098H, 0ddH, 'x'
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	'Q', 086H, 'o', 0d5H, 0b8H, '^', 0cbH, 08aH
	DB	'0', 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	010H, 00H, 00H, 00H, 00H, 00H, 00H, 01H
	DB	'}', 085H, 'o', 09aH, 'a0c', 0f2H
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	'$f', 0ddH, 087H, 08bH, 096H, '<', 09dH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	'a', 0f9H, 0c3H, 080H, '"', 081H, 0b0H, 096H
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	'}', 0cH, 0c6H, '0', 0afH, 0daH, 01eH, 0c7H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	'N', 0f9H, 097H, 'Ea', 098H, 0ddH, 'x'
	DB	0feH, 0dcH, 0baH, 098H, 'vT2', 010H
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0aH, 0ceH, 0abH, 0fH, 0c6H, 0a0H, 0a2H, 08dH
	DB	'|', 0a1H, 010H, 'EJ', 01aH, 'nW'
	DB	01H, 0a1H, 0d6H, 0d0H, '9wgB'
	DB	'Y', 0c6H, 082H, 'E', 0ebH, 05H, '(+'
	DB	01H, '1', 0d9H, 'a', 09dH, 0c1H, '7n'
	DB	'\', 0d5H, 'L', 0a8H, '=', 0efH, 'W', 0daH
	DB	0b1H, 0b8H, 0ccH, 0bH, '%', 0fH, 09H, 0a0H
	DB	07H, 0a1H, 013H, '>J', 0bH, '&', 086H
	DB	02H, 'H', 0d4H, '8', 06H, 0f6H, 'qr'
	DB	017H, '0', 0e5H, 'w', 08bH, 0eaH, 01dH, 0a4H
	DB	'8IgL&', 02H, '1', 09eH
	DB	'QEKX-', 0dfH, 'D', 0aH
	DB	0a2H, '^xV', 0cfH, '&Q', 0ebH
	DB	04H, 0b9H, 015H, 0baH, 'C', 0feH, 0b5H, 0b6H
	DB	'B', 0fdH, 'D0YW', 07fH, 0a2H
	DB	'58', 082H, 0b1H, 09H, 0ceH, 08fH, 01aH
	DB	01H, 013H, 0b9H, 'p', 0fdH, '4', 0f2H, 0ceH
	DB	05H, 09bH, '^', 08H, 'Q', 0cfH, 014H, ':'
	DB	'H', 0f4H, 0d0H, 088H, 'L7', 099H, 018H
	DB	01H, 'p', 0f1H, 'uF', 08fH, 0b5H, 0e6H
	DB	07H, 'V', 0d8H, 0e0H, 'wGa', 0d2H
	DB	'C!', 093H, 0b7H, 089H, 'Q', 0fcH, 098H
	DB	'C)', 07fH, 0adH, '8', 0e3H, 's', 0feH
	DB	'v%', 014H, 0b8H, ')', 0bfH, 'Hj'
	DB	013H, 0f0H, 'AT', 0d6H, 09dH, 01aH, 0e5H
	DB	07H, 0a7H, 013H, 'pE', 0daH, '*', 016H
	DB	';', 0ddH, 011H, 090H, 'I7(', 02H
	DB	'.', 0edH, 0daH, 093H, 0ffH, 0d3H, 09cH, 'y'
	DB	04H, 'h', 091H, 04H, 0c2H, 0fdH, ';/'
	DB	'&', 095H, '_h5', 0afH, '`', 09aH
	DB	0d8H, 087H, 0e0H, '9<-', 0a6H, 0e3H
	DB	'7', 0d0H, 'k', 0b5H, 016H, 0cbH, 'uF'
	DB	016H, 'M^@O''R2'
	DB	'_', 099H, 0d0H, 'O[', 016H, '9i'
	DB	01fH, 08H, '&', 0dH, 01aH, 0c2H, 'F^'
	DB	'k', 05H, 'n', 018H, 'u', 09fH, '\', 0caH
	DB	'J', 05H, 'z;$', 0d3H, 097H, '{'
	DB	'X@#d', 01aH, 0baH, 'av'
	DB	00H, 'K', 0d6H, 0efH, 09H, 017H, '`b'
	DB	'E 1', 0c1H, 0e4H, 0faH, 0daH, 08eH
	DB	02H, 'X', 016H, 016H, 'F)', 0b0H, 07H
	DB	'H', 0dH, '9', 00H, 'n', 0e7H, 'b', 0f2H
	DB	'uU', 0aeH, '9', 0f5H, 09bH, 087H, 0bdH
	DB	'Iy>', 0bcH, 'y', 0b3H, '%', 08fH
	DB	'Cu@', 0c8H, 'i', 08fH, '<', 0faH
	DB	'S', 0c5H, '_', 09cH, 0b4H, 09fH, 0c0H, 019H
	DB	'O', 0b0H, '^', 015H, 015H, 0abH, 's', 0a7H
	DB	07H, '-C', 0a0H, 'w', 07H, 'R', 092H
	DB	'z', 08eH, '{', 0faH, 093H, '~', 089H, 0a3H
	DB	'I', 0e9H, ']mL', 0a2H, ')', 0bfH
	DB	02H, 0feH, 'Uw', 081H, 017H, 0f1H, '*'
	DB	0cfH, 09cH, ']zI', 086H, 0adH, 0b5H
	DB	01H, 083H, 010H, 0dcH, '@', 09bH, '&', 0d6H
	DB	01dH, 09dH, '\P', 018H, 0f7H, '(', 0c2H
	DB	0d1H, 0abH, 0b2H, 090H, 'e', 08bH, 0c7H, 'x'
	DB	01cH, 'X', 07fH, 01cH, 013H, 092H, 'O', 0efH
	DB	'0U2(mo)Z'
	DB	'U', 0cbH, '7t', 0d1H, '>', 0f2H, 01H
	DB	01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0faH, '4', 0ecH, 'HG', 0b2H, 'h', 0b2H
	DB	01fH, 01fH, 01fH, 01fH, 0eH, 0eH, 0eH, 0eH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0a7H, 090H, 'yQ', 08H, 0eaH, '<', 0aeH
	DB	0e0H, 0feH, 0e0H, 0feH, 0f1H, 0feH, 0f1H, 0feH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0c3H, 09eH, 07H, '-', 09fH, 0acH, 'c', 01dH
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	01H, 'I3', 0e0H, 0cdH, 0afH, 0f6H, 0e4H
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	0f2H, 01eH, 09aH, 'w', 0b7H, 01cH, 'I', 0bcH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	'$YF', 088H, 'WT6', 09aH
	DB	0feH, 0dcH, 0baH, 098H, 'vT2', 010H
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	'k\Z', 09cH, ']', 09eH, 0aH, 'Z'
_tripledes_vectors DB 01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	0feH
	DB	0dcH
	DB	0baH
	DB	098H
	DB	076H
	DB	054H
	DB	032H
	DB	010H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0e7H
	DB	0deH
	DB	0bH
	DB	07cH
	DB	06H
	DB	0aeH
	DB	05eH
	DB	0eH
	DB	0d5H
_cast_ecb_vectors DB 01H, '#Eg', 012H, '4Vx#Eg', 089H, '4Vx', 09aH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	'#', 08bH, 'O', 0e5H, 084H, '~D', 0b2H
_aes_ecb_vectors DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	00H
	DB	011H
	DB	022H
	DB	033H
	DB	044H
	DB	055H
	DB	066H
	DB	077H
	DB	088H
	DB	099H
	DB	0aaH
	DB	0bbH
	DB	0ccH
	DB	0ddH
	DB	0eeH
	DB	0ffH
	DB	08eH
	DB	0a2H
	DB	0b7H
	DB	0caH
	DB	051H
	DB	067H
	DB	045H
	DB	0bfH
	DB	0eaH
	DB	0fcH
	DB	049H
	DB	090H
	DB	04bH
	DB	049H
	DB	060H
	DB	089H
_serpent_vectors DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	0deH
	DB	026H
	DB	09fH
	DB	0f8H
	DB	033H
	DB	0e4H
	DB	032H
	DB	0b8H
	DB	05bH
	DB	02eH
	DB	088H
	DB	0d2H
	DB	070H
	DB	01cH
	DB	0e7H
	DB	05cH
_twofish_vectors DB 0d4H
	DB	03bH
	DB	0b7H
	DB	055H
	DB	06eH
	DB	0a3H
	DB	02eH
	DB	046H
	DB	0f2H
	DB	0a2H
	DB	082H
	DB	0b7H
	DB	0d4H
	DB	05bH
	DB	04eH
	DB	0dH
	DB	057H
	DB	0ffH
	DB	073H
	DB	09dH
	DB	04dH
	DB	0c9H
	DB	02cH
	DB	01bH
	DB	0d7H
	DB	0fcH
	DB	01H
	DB	070H
	DB	0cH
	DB	0c8H
	DB	021H
	DB	06fH
	DB	090H
	DB	0afH
	DB	0e9H
	DB	01bH
	DB	0b2H
	DB	088H
	DB	054H
	DB	04fH
	DB	02cH
	DB	032H
	DB	0dcH
	DB	023H
	DB	09bH
	DB	026H
	DB	035H
	DB	0e6H
	DB	06cH
	DB	0b4H
	DB	056H
	DB	01cH
	DB	040H
	DB	0bfH
	DB	0aH
	DB	097H
	DB	05H
	DB	093H
	DB	01cH
	DB	0b6H
	DB	0d4H
	DB	08H
	DB	0e7H
	DB	0faH
_hmac_sha512_test_keys DD FLAT:??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@
	DD	FLAT:??_C@_04HDLGGHEL@Jefe?$AA@
	DD	FLAT:??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@
	DD	FLAT:??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@
	DD	FLAT:??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@
	DD	FLAT:??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@
_hmac_sha512_test_data DD FLAT:??_C@_08BPPJKMC@Hi?5There?$AA@
	DD	FLAT:??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@
	DD	FLAT:??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@
	DD	FLAT:??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@
	DD	FLAT:??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@
	DD	FLAT:??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@
_hmac_sha512_test_vectors DD FLAT:??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@
	DD	FLAT:??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@
	DD	FLAT:??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@
	DD	FLAT:??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@
	DD	FLAT:??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@
	DD	FLAT:??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@
_hmac_sha1_test_keys DD FLAT:??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@
	DD	FLAT:??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@
	DD	FLAT:??_C@_04HDLGGHEL@Jefe?$AA@
	DD	FLAT:??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@
_hmac_sha1_test_data DD FLAT:??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@
	DD	FLAT:??_C@_08BPPJKMC@Hi?5There?$AA@
	DD	FLAT:??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@
	DD	FLAT:??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@
_hmac_sha1_test_vectors DD FLAT:??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@
	DD	FLAT:??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@
	DD	FLAT:??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@
	DD	FLAT:??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@
_hmac_ripemd160_test_keys DD FLAT:??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@
	DD	FLAT:??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@
_hmac_ripemd160_test_data DD FLAT:??_C@_0P@ONGHGJEC@message?5digest?$AA@
	DD	FLAT:??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@
_hmac_ripemd160_test_vectors DD FLAT:??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@
	DD	FLAT:??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@
_hmac_whirlpool_test_data DD FLAT:??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
_hmac_whirlpool_test_vectors DD FLAT:??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@
_lrw_vectors DB	0f8H
	DB	0d4H
	DB	076H
	DB	0ffH
	DB	0d6H
	DB	046H
	DB	0eeH
	DB	06cH
	DB	023H
	DB	084H
	DB	0cbH
	DB	01cH
	DB	077H
	DB	0d6H
	DB	019H
	DB	05dH
	DB	0feH
	DB	0f1H
	DB	0a9H
	DB	0f3H
	DB	07bH
	DB	0bcH
	DB	08dH
	DB	021H
	DB	0a7H
	DB	09cH
	DB	021H
	DB	0f8H
	DB	0cbH
	DB	090H
	DB	02H
	DB	089H
	DB	0a8H
	DB	045H
	DB	034H
	DB	08eH
	DB	0c8H
	DB	0c5H
	DB	0b5H
	DB	0f1H
	DB	026H
	DB	0f5H
	DB	0eH
	DB	076H
	DB	0feH
	DB	0fdH
	DB	01bH
	DB	01eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	0bdH
	DB	06H
	DB	0b8H
	DB	0e1H
	DB	0dbH
	DB	098H
	DB	089H
	DB	09eH
	DB	0c4H
	DB	098H
	DB	0e4H
	DB	091H
	DB	0cfH
	DB	01cH
	DB	070H
	DB	02bH
	DB	0fbH
	DB	076H
	DB	015H
	DB	0b2H
	DB	03dH
	DB	080H
	DB	089H
	DB	01dH
	DB	0d4H
	DB	070H
	DB	098H
	DB	0bH
	DB	0c7H
	DB	095H
	DB	084H
	DB	0c8H
	DB	0b2H
	DB	0fbH
	DB	064H
	DB	0ceH
	DB	060H
	DB	097H
	DB	087H
	DB	08dH
	DB	017H
	DB	0fcH
	DB	0e4H
	DB	05aH
	DB	049H
	DB	0e8H
	DB	030H
	DB	0b7H
	DB	06eH
	DB	078H
	DB	017H
	DB	0e7H
	DB	02dH
	DB	05eH
	DB	012H
	DB	0d4H
	DB	060H
	DB	064H
	DB	04H
	DB	07aH
	DB	0f1H
	DB	02fH
	DB	09eH
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	05bH
	DB	090H
	DB	08eH
	DB	0c1H
	DB	0abH
	DB	0ddH
	DB	067H
	DB	05fH
	DB	03dH
	DB	069H
	DB	08aH
	DB	095H
	DB	053H
	DB	0c8H
	DB	09cH
	DB	0e5H
?key1@?1??TestSectorBufEncryption@@9@9 DB 027H		; `TestSectorBufEncryption'::`2'::key1
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
_DATA	ENDS
PUBLIC	??_C@_03BKNEFOAH@AES?$AA@			; `string'
PUBLIC	_ci$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_XTSAesTest
EXTRN	_EncryptBufferXTS:PROC
EXTRN	_MirrorBytes64:PROC
EXTRN	_EAInitMode:PROC
EXTRN	_EAInit:PROC
EXTRN	_EAGetByName:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_03BKNEFOAH@AES?$AA@
; File c:\users\public\desktop\projects\ciphershed\src\common\tests.c
CONST	SEGMENT
??_C@_03BKNEFOAH@AES?$AA@ DB 'AES', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _XTSAesTest
_TEXT	SEGMENT
_ci$GSCopy$ = -536					; size = 4
tv325 = -532						; size = 4
_dataUnitNo$ = -528					; size = 8
_p$ = -520						; size = 512
__$ArrayPad$ = -4					; size = 4
_ci$ = 8						; size = 4
_XTSAesTest PROC					; COMDAT

; 259  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	81 ec 1c 02 00
	00		 sub	 esp, 540		; 0000021cH
  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00011	33 c4		 xor	 eax, esp
  00013	89 84 24 18 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+540], eax
  0001a	53		 push	 ebx
  0001b	56		 push	 esi

; 260  : 	unsigned __int8 p[ENCRYPTION_DATA_UNIT_SIZE];
; 261  : 	UINT64_STRUCT dataUnitNo;
; 262  : 	int i;
; 263  : 
; 264  : 	for (i = 0; i < XTS_TEST_COUNT; i++)

  0001c	b8 4c 02 00 00	 mov	 eax, 588		; 0000024cH
  00021	8d 4c 24 1c	 lea	 ecx, DWORD PTR _p$[esp+548]
  00025	57		 push	 edi
  00026	8b 7d 08	 mov	 edi, DWORD PTR _ci$[ebp]
  00029	2b c1		 sub	 eax, ecx
  0002b	89 7c 24 10	 mov	 DWORD PTR _ci$GSCopy$[esp+552], edi
  0002f	bb 00 00 00 00	 mov	 ebx, OFFSET _XTS_vectors
  00034	89 44 24 14	 mov	 DWORD PTR tv325[esp+552], eax
  00038	eb 0a		 jmp	 SHORT $LN7@XTSAesTest
  0003a	8d 9b 00 00 00
	00		 npad	 6
$LL23@XTSAesTest:
  00040	8b 7c 24 10	 mov	 edi, DWORD PTR _ci$GSCopy$[esp+552]
$LN7@XTSAesTest:

; 265  : 	{
; 266  : 		ci->ea = EAGetByName ("AES");

  00044	68 00 00 00 00	 push	 OFFSET ??_C@_03BKNEFOAH@AES?$AA@
  00049	e8 00 00 00 00	 call	 _EAGetByName
  0004e	83 c4 04	 add	 esp, 4
  00051	89 07		 mov	 DWORD PTR [edi], eax

; 267  : 		if (ci->ea == 0)

  00053	85 c0		 test	 eax, eax
  00055	0f 84 e3 00 00
	00		 je	 $LN18@XTSAesTest

; 268  : 			return FALSE;
; 269  : 
; 270  : 		ci->mode = XTS;
; 271  : 
; 272  : 		if (EAInit (ci->ea, XTS_vectors[i].key1, ci->ks) != ERR_SUCCESS)

  0005b	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0005e	51		 push	 ecx
  0005f	53		 push	 ebx
  00060	50		 push	 eax
  00061	c7 47 04 01 00
	00 00		 mov	 DWORD PTR [edi+4], 1
  00068	e8 00 00 00 00	 call	 _EAInit
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00070	85 c0		 test	 eax, eax
  00072	0f 85 c6 00 00
	00		 jne	 $LN18@XTSAesTest

; 273  : 			return FALSE;
; 274  : 
; 275  : 		memcpy (&ci->k2, XTS_vectors[i].key2, sizeof (XTS_vectors[i].key2));
; 276  : 
; 277  : 		if (!EAInitMode (ci))

  00078	8b 54 24 10	 mov	 edx, DWORD PTR _ci$GSCopy$[esp+552]
  0007c	8d 73 20	 lea	 esi, DWORD PTR [ebx+32]
  0007f	81 c7 a8 42 00
	00		 add	 edi, 17064		; 000042a8H
  00085	b9 08 00 00 00	 mov	 ecx, 8
  0008a	52		 push	 edx
  0008b	f3 a5		 rep movsd
  0008d	e8 00 00 00 00	 call	 _EAInitMode
  00092	83 c4 04	 add	 esp, 4
  00095	85 c0		 test	 eax, eax
  00097	0f 84 a1 00 00
	00		 je	 $LN18@XTSAesTest

; 278  : 			return FALSE;
; 279  : 
; 280  : 		memcpy (p, XTS_vectors[i].plaintext, sizeof (p));
; 281  : 
; 282  : 		dataUnitNo.Value = BE64 (*((unsigned __int64 *) XTS_vectors[i].dataUnitNo));

  0009d	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]
  000a0	8d 73 4c	 lea	 esi, DWORD PTR [ebx+76]
  000a3	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  000a8	8d 7c 24 20	 lea	 edi, DWORD PTR _p$[esp+552]
  000ac	f3 a5		 rep movsd
  000ae	8b 4b 40	 mov	 ecx, DWORD PTR [ebx+64]
  000b1	50		 push	 eax
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 _MirrorBytes64
  000b8	89 44 24 20	 mov	 DWORD PTR _dataUnitNo$[esp+560], eax

; 283  : 
; 284  : 		EncryptBufferXTS (p, sizeof (p), &dataUnitNo, XTS_vectors[i].blockNo, (unsigned char *) (ci->ks), (unsigned char *) ci->ks2, AES);

  000bc	8b 44 24 18	 mov	 eax, DWORD PTR _ci$GSCopy$[esp+560]
  000c0	6a 01		 push	 1
  000c2	89 54 24 28	 mov	 DWORD PTR _dataUnitNo$[esp+568], edx
  000c6	8d 90 d4 14 00
	00		 lea	 edx, DWORD PTR [eax+5332]
  000cc	52		 push	 edx
  000cd	83 c0 08	 add	 eax, 8
  000d0	50		 push	 eax
  000d1	8b 43 48	 mov	 eax, DWORD PTR [ebx+72]
  000d4	50		 push	 eax
  000d5	8d 4c 24 30	 lea	 ecx, DWORD PTR _dataUnitNo$[esp+576]
  000d9	51		 push	 ecx
  000da	6a 00		 push	 0
  000dc	8d 54 24 40	 lea	 edx, DWORD PTR _p$[esp+584]
  000e0	68 00 02 00 00	 push	 512			; 00000200H
  000e5	52		 push	 edx
  000e6	e8 00 00 00 00	 call	 _EncryptBufferXTS

; 285  : 
; 286  : 		if (memcmp (XTS_vectors[i].ciphertext, p, sizeof (p)) != 0)

  000eb	8b 54 24 3c	 mov	 edx, DWORD PTR tv325[esp+592]
  000ef	83 c4 28	 add	 esp, 40			; 00000028H
  000f2	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  000f7	8d 44 24 20	 lea	 eax, DWORD PTR _p$[esp+552]
  000fb	03 d3		 add	 edx, ebx
  000fd	8d 49 00	 npad	 3
$LL11@XTSAesTest:
  00100	8b 34 02	 mov	 esi, DWORD PTR [edx+eax]
  00103	3b 30		 cmp	 esi, DWORD PTR [eax]
  00105	75 37		 jne	 SHORT $LN18@XTSAesTest
  00107	83 e9 04	 sub	 ecx, 4
  0010a	83 c0 04	 add	 eax, 4
  0010d	83 f9 04	 cmp	 ecx, 4
  00110	73 ee		 jae	 SHORT $LL11@XTSAesTest
  00112	81 c3 4c 04 00
	00		 add	 ebx, 1100		; 0000044cH
  00118	81 fb 7c 15 00
	00		 cmp	 ebx, OFFSET _XTS_vectors+5500
  0011e	0f 8c 1c ff ff
	ff		 jl	 $LL23@XTSAesTest

; 287  : 			return FALSE;
; 288  : 	}
; 289  : 
; 290  : 	return TRUE;

  00124	b8 01 00 00 00	 mov	 eax, 1

; 291  : }

  00129	5f		 pop	 edi
  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	8b 8c 24 18 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+540]
  00133	33 cc		 xor	 ecx, esp
  00135	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013a	8b e5		 mov	 esp, ebp
  0013c	5d		 pop	 ebp
  0013d	c3		 ret	 0
$LN18@XTSAesTest:
  0013e	8b 8c 24 24 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+552]
  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx
  00148	33 cc		 xor	 ecx, esp
  0014a	33 c0		 xor	 eax, eax
  0014c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00151	8b e5		 mov	 esp, ebp
  00153	5d		 pop	 ebp
  00154	c3		 ret	 0
_XTSAesTest ENDP
_TEXT	ENDS
PUBLIC	_CipherInit2
EXTRN	_CipherInit:PROC
EXTRN	_BlowfishSetKey:PROC
; Function compile flags: /Ogtpy
;	COMDAT _CipherInit2
_TEXT	SEGMENT
_cipher$ = 8						; size = 4
_key$ = 12						; size = 4
_ks$ = 16						; size = 4
_key_len$ = 20						; size = 4
_CipherInit2 PROC					; COMDAT

; 535  : 	switch (cipher)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _cipher$[esp-4]
  00004	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  00007	83 f9 05	 cmp	 ecx, 5
  0000a	77 33		 ja	 SHORT $LN1@CipherInit
  0000c	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN12@CipherInit[ecx*4]
$LN7@CipherInit:

; 536  : 	{
; 537  : 	case BLOWFISH:
; 538  : 		/* Deprecated/legacy */
; 539  : 		BlowfishSetKey (ks, key_len,  key); 

  00013	8b 44 24 08	 mov	 eax, DWORD PTR _key$[esp-4]
  00017	8b 4c 24 10	 mov	 ecx, DWORD PTR _key_len$[esp-4]
  0001b	8b 54 24 0c	 mov	 edx, DWORD PTR _ks$[esp-4]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 _BlowfishSetKey
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 567  : 	}
; 568  : }

  0002a	c3		 ret	 0
$LN6@CipherInit:

; 540  : 		break;
; 541  : 
; 542  : 	case AES:
; 543  : 		CipherInit(cipher,key,ks);

  0002b	8b 4c 24 0c	 mov	 ecx, DWORD PTR _ks$[esp-4]
  0002f	8b 54 24 08	 mov	 edx, DWORD PTR _key$[esp-4]
  00033	51		 push	 ecx
  00034	52		 push	 edx
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _CipherInit
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 567  : 	}
; 568  : }

  0003e	c3		 ret	 0
$LN1@CipherInit:

; 544  : 		break;
; 545  : 
; 546  : 	case CAST:
; 547  : 		/* Deprecated/legacy */
; 548  : 		CipherInit(cipher,key,ks);
; 549  : 		break;
; 550  : 
; 551  : 	case SERPENT:
; 552  : 		CipherInit(cipher,key,ks);
; 553  : 		break;
; 554  : 
; 555  : 	case TRIPLEDES:
; 556  : 		/* Deprecated/legacy */
; 557  : 		CipherInit(cipher,key,ks);
; 558  : 		break;
; 559  : 
; 560  : 	case TWOFISH:
; 561  : 		CipherInit(cipher,key,ks);
; 562  : 		break;
; 563  : 
; 564  : 	default:			
; 565  : 		/* Unknown/wrong ID */
; 566  : 		TC_THROW_FATAL_EXCEPTION;

  0003f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0

; 567  : 	}
; 568  : }

  00046	c3		 ret	 0
  00047	90		 npad	 1
$LN12@CipherInit:
  00048	00 00 00 00	 DD	 $LN6@CipherInit
  0004c	00 00 00 00	 DD	 $LN6@CipherInit
  00050	00 00 00 00	 DD	 $LN6@CipherInit
  00054	00 00 00 00	 DD	 $LN7@CipherInit
  00058	00 00 00 00	 DD	 $LN6@CipherInit
  0005c	00 00 00 00	 DD	 $LN6@CipherInit
_CipherInit2 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_LRWAesTest
EXTRN	_EncryptBufferLRW128:PROC
; Function compile flags: /Ogtpy
;	COMDAT _LRWAesTest
_TEXT	SEGMENT
_p$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_ci$ = 8						; size = 4
_LRWAesTest PROC					; COMDAT

; 604  : {

  00000	83 ec 14	 sub	 esp, 20			; 00000014H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 10	 mov	 DWORD PTR __$ArrayPad$[esp+20], eax
  0000e	53		 push	 ebx
  0000f	55		 push	 ebp
  00010	56		 push	 esi

; 605  : 	/* Deprecated/legacy */
; 606  : 
; 607  : 	unsigned __int8 p[16];
; 608  : 	int i;
; 609  : 
; 610  : 	for (i = 0; i < LRW_TEST_COUNT; i++)

  00011	bb 50 00 00 00	 mov	 ebx, 80			; 00000050H
  00016	8d 44 24 0c	 lea	 eax, DWORD PTR _p$[esp+32]
  0001a	57		 push	 edi
  0001b	8b 7c 24 28	 mov	 edi, DWORD PTR _ci$[esp+32]
  0001f	be 00 00 00 00	 mov	 esi, OFFSET _lrw_vectors
  00024	2b d8		 sub	 ebx, eax
$LL23@LRWAesTest:

; 611  : 	{
; 612  : 		ci->ea = EAGetByName ("AES");

  00026	68 00 00 00 00	 push	 OFFSET ??_C@_03BKNEFOAH@AES?$AA@
  0002b	e8 00 00 00 00	 call	 _EAGetByName
  00030	83 c4 04	 add	 esp, 4
  00033	89 07		 mov	 DWORD PTR [edi], eax

; 613  : 		if (ci->ea == 0)

  00035	85 c0		 test	 eax, eax
  00037	0f 84 dc 00 00
	00		 je	 $LN18@LRWAesTest

; 614  : 			return FALSE;
; 615  : 
; 616  : 		ci->mode = LRW;
; 617  : 
; 618  : 		if (EAInit (ci->ea, lrw_vectors[i].key1, ci->ks) != ERR_SUCCESS)

  0003d	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  00040	51		 push	 ecx
  00041	56		 push	 esi
  00042	50		 push	 eax
  00043	c7 47 04 02 00
	00 00		 mov	 DWORD PTR [edi+4], 2
  0004a	e8 00 00 00 00	 call	 _EAInit
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00052	85 c0		 test	 eax, eax
  00054	0f 85 bf 00 00
	00		 jne	 $LN18@LRWAesTest

; 619  : 			return FALSE;
; 620  : 
; 621  : 		memcpy (&ci->k2, lrw_vectors[i].key2, sizeof (lrw_vectors[i].key2));

  0005a	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0005d	89 97 a8 42 00
	00		 mov	 DWORD PTR [edi+17064], edx
  00063	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00066	89 87 ac 42 00
	00		 mov	 DWORD PTR [edi+17068], eax
  0006c	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0006f	89 8f b0 42 00
	00		 mov	 DWORD PTR [edi+17072], ecx
  00075	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]

; 622  : 		if (!EAInitMode (ci))

  00078	57		 push	 edi
  00079	89 97 b4 42 00
	00		 mov	 DWORD PTR [edi+17076], edx
  0007f	e8 00 00 00 00	 call	 _EAInitMode
  00084	83 c4 04	 add	 esp, 4
  00087	85 c0		 test	 eax, eax
  00089	0f 84 8a 00 00
	00		 je	 $LN18@LRWAesTest

; 623  : 			return FALSE;
; 624  : 
; 625  : 		memcpy (p, lrw_vectors[i].plaintext, sizeof (p));

  0008f	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00092	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  00095	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00098	89 4c 24 14	 mov	 DWORD PTR _p$[esp+40], ecx

; 626  : 
; 627  : 		EncryptBufferLRW128 (p, sizeof (p), BE64(((unsigned __int64 *)(lrw_vectors[i].index))[1]), ci);

  0009c	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  0009f	57		 push	 edi
  000a0	89 54 24 1c	 mov	 DWORD PTR _p$[esp+48], edx
  000a4	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  000a7	89 44 24 14	 mov	 DWORD PTR _p$[esp+40], eax
  000ab	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  000ae	51		 push	 ecx
  000af	52		 push	 edx
  000b0	89 44 24 28	 mov	 DWORD PTR _p$[esp+60], eax
  000b4	e8 00 00 00 00	 call	 _MirrorBytes64
  000b9	83 c4 08	 add	 esp, 8
  000bc	52		 push	 edx
  000bd	50		 push	 eax
  000be	6a 00		 push	 0
  000c0	8d 44 24 20	 lea	 eax, DWORD PTR _p$[esp+52]
  000c4	6a 10		 push	 16			; 00000010H
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 _EncryptBufferLRW128
  000cc	83 c4 18	 add	 esp, 24			; 00000018H

; 628  : 
; 629  : 		if (memcmp (lrw_vectors[i].ciphertext, p, sizeof (p)) != 0)

  000cf	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000d4	8d 44 24 10	 lea	 eax, DWORD PTR _p$[esp+36]
  000d8	8d 14 33	 lea	 edx, DWORD PTR [ebx+esi]
  000db	eb 03 8d 49 00	 npad	 5
$LL11@LRWAesTest:
  000e0	8b 2c 02	 mov	 ebp, DWORD PTR [edx+eax]
  000e3	3b 28		 cmp	 ebp, DWORD PTR [eax]
  000e5	75 32		 jne	 SHORT $LN18@LRWAesTest
  000e7	83 e9 04	 sub	 ecx, 4
  000ea	83 c0 04	 add	 eax, 4
  000ed	83 f9 04	 cmp	 ecx, 4
  000f0	73 ee		 jae	 SHORT $LL11@LRWAesTest
  000f2	83 c6 60	 add	 esi, 96			; 00000060H
  000f5	81 fe c0 00 00
	00		 cmp	 esi, OFFSET _lrw_vectors+192
  000fb	0f 8c 25 ff ff
	ff		 jl	 $LL23@LRWAesTest
  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	5d		 pop	 ebp

; 630  : 			return FALSE;
; 631  : 	}
; 632  : 
; 633  : 	return TRUE;

  00104	b8 01 00 00 00	 mov	 eax, 1
  00109	5b		 pop	 ebx

; 634  : }

  0010a	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  0010e	33 cc		 xor	 ecx, esp
  00110	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00115	83 c4 14	 add	 esp, 20			; 00000014H
  00118	c3		 ret	 0
$LN18@LRWAesTest:
  00119	8b 4c 24 20	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+36]
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5d		 pop	 ebp
  00120	5b		 pop	 ebx
  00121	33 cc		 xor	 ecx, esp
  00123	33 c0		 xor	 eax, eax
  00125	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012a	83 c4 14	 add	 esp, 20			; 00000014H
  0012d	c3		 ret	 0
_LRWAesTest ENDP
_TEXT	ENDS
PUBLIC	??_C@_07DABDIDEC@Twofish?$AA@			; `string'
PUBLIC	??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@	; `string'
PUBLIC	??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@	; `string'
PUBLIC	??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@		; `string'
PUBLIC	??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@	; `string'
PUBLIC	??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@		; `string'
PUBLIC	??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@	; `string'
PUBLIC	??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@		; `string'
PUBLIC	??_C@_0L@NEGMAKNF@Triple?5DES?$AA@		; `string'
PUBLIC	??_C@_07CCCAKGBN@Serpent?$AA@			; `string'
PUBLIC	??_C@_05LCFOLDPB@CAST5?$AA@			; `string'
PUBLIC	??_C@_08KOMAHJJD@Blowfish?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_TestLegacySectorBufEncryption
EXTRN	_EAGetNext:PROC
EXTRN	_EAGetNextMode:PROC
EXTRN	_DecryptBuffer:PROC
EXTRN	_EncryptBuffer:PROC
EXTRN	_DecryptDataUnits:PROC
EXTRN	_GetCrc32:PROC
EXTRN	_EncryptDataUnits:PROC
EXTRN	_EAGetFirstMode:PROC
EXTRN	_CipherGetBlockSize:PROC
EXTRN	_EAGetFirstCipher:PROC
EXTRN	_EAGetName:PROC
EXTRN	_EAGetFirst:PROC
;	COMDAT ??_C@_07DABDIDEC@Twofish?$AA@
CONST	SEGMENT
??_C@_07DABDIDEC@Twofish?$AA@ DB 'Twofish', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@
CONST	SEGMENT
??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@ DB 'Twofish-Serpent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@
CONST	SEGMENT
??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@ DB 'Serpent-Twofish-AES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@
CONST	SEGMENT
??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@ DB 'Serpent-AES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@
CONST	SEGMENT
??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@ DB 'AES-Twofish-Serpent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@
CONST	SEGMENT
??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@ DB 'AES-Twofish', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@
CONST	SEGMENT
??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@ DB 'AES-Blowfish-Serpent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@
CONST	SEGMENT
??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@ DB 'AES-Blowfish', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NEGMAKNF@Triple?5DES?$AA@
CONST	SEGMENT
??_C@_0L@NEGMAKNF@Triple?5DES?$AA@ DB 'Triple DES', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCCAKGBN@Serpent?$AA@
CONST	SEGMENT
??_C@_07CCCAKGBN@Serpent?$AA@ DB 'Serpent', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCFOLDPB@CAST5?$AA@
CONST	SEGMENT
??_C@_05LCFOLDPB@CAST5?$AA@ DB 'CAST5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KOMAHJJD@Blowfish?$AA@
CONST	SEGMENT
??_C@_08KOMAHJJD@Blowfish?$AA@ DB 'Blowfish', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _TestLegacySectorBufEncryption
_TEXT	SEGMENT
_lrw64InitDone$ = -1108					; size = 4
_lrw128InitDone$ = -1104				; size = 4
_unitNo$ = -1100					; size = 8
_name$ = -1092						; size = 64
_buf$ = -1028						; size = 1024
__$ArrayPad$ = -4					; size = 4
_ci$ = 8						; size = 4
_TestLegacySectorBufEncryption PROC			; COMDAT

; 1034 : {

  00000	81 ec 54 04 00
	00		 sub	 esp, 1108		; 00000454H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 50 04
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1108], eax
  00014	53		 push	 ebx
  00015	55		 push	 ebp
  00016	56		 push	 esi

; 1035 : 	unsigned char buf [ENCRYPTION_DATA_UNIT_SIZE * 2];
; 1036 : 	unsigned int i;
; 1037 : 	char name[64];
; 1038 : 	unsigned __int32 crc;
; 1039 : 	UINT64_STRUCT unitNo;
; 1040 : 	uint32 nbrUnits;
; 1041 : 	int blockSize;
; 1042 : 	BOOL lrw64InitDone = FALSE;

  00017	33 f6		 xor	 esi, esi
  00019	57		 push	 edi
  0001a	8b bc 24 68 04
	00 00		 mov	 edi, DWORD PTR _ci$[esp+1120]
  00021	89 74 24 10	 mov	 DWORD PTR _lrw64InitDone$[esp+1124], esi

; 1043 : 	BOOL lrw128InitDone = FALSE;

  00025	89 74 24 14	 mov	 DWORD PTR _lrw128InitDone$[esp+1124], esi

; 1044 : 	int nTestsPerformed = 0;
; 1045 : 
; 1046 : 	unitNo.Value = 0x0234567890ABCDEFull;

  00029	c7 44 24 18 ef
	cd ab 90	 mov	 DWORD PTR _unitNo$[esp+1124], -1867788817 ; 90abcdefH
  00031	c7 44 24 1c 78
	56 34 02	 mov	 DWORD PTR _unitNo$[esp+1128], 36984440 ; 02345678H

; 1047 : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 1048 : 
; 1049 : 	for (i = 0; i < sizeof (buf); i++)

  00039	33 c0		 xor	 eax, eax
  0003b	bb 01 00 00 00	 mov	 ebx, 1
$LL143@TestLegacy:

; 1050 : 		buf[i] = (unsigned char) i;

  00040	88 44 04 60	 mov	 BYTE PTR _buf$[esp+eax+1124], al
  00044	03 c3		 add	 eax, ebx
  00046	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  0004b	72 f3		 jb	 SHORT $LL143@TestLegacy

; 1051 : 
; 1052 : 	for (i = 0; i < sizeof (ci->k2); i++)

  0004d	33 c0		 xor	 eax, eax
  0004f	90		 npad	 1
$LL140@TestLegacy:

; 1053 : 		ci->k2[i] = (unsigned char) i;

  00050	88 84 07 a8 42
	00 00		 mov	 BYTE PTR [edi+eax+17064], al
  00057	03 c3		 add	 eax, ebx
  00059	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0005e	72 f0		 jb	 SHORT $LL140@TestLegacy

; 1054 : 
; 1055 : 	// Test all EAs
; 1056 : 	for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  00060	e8 00 00 00 00	 call	 _EAGetFirst
  00065	89 07		 mov	 DWORD PTR [edi], eax
  00067	3b c6		 cmp	 eax, esi
  00069	0f 84 fd 0b 00
	00		 je	 $LN135@TestLegacy
  0006f	90		 npad	 1
$LL137@TestLegacy:

; 1057 : 	{
; 1058 : 		EAGetName (name, ci->ea);

  00070	8b 07		 mov	 eax, DWORD PTR [edi]
  00072	50		 push	 eax
  00073	8d 4c 24 24	 lea	 ecx, DWORD PTR _name$[esp+1128]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 _EAGetName

; 1059 : 		blockSize = CipherGetBlockSize (EAGetFirstCipher (ci->ea));

  0007d	8b 17		 mov	 edx, DWORD PTR [edi]
  0007f	52		 push	 edx
  00080	e8 00 00 00 00	 call	 _EAGetFirstCipher
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _CipherGetBlockSize

; 1060 : 
; 1061 : 		if (EAInit (ci->ea, (unsigned char *)buf, ci->ks) == ERR_CIPHER_INIT_FAILURE)

  0008b	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0008d	8b e8		 mov	 ebp, eax
  0008f	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00092	50		 push	 eax
  00093	8d 44 24 74	 lea	 eax, DWORD PTR _buf$[esp+1144]
  00097	50		 push	 eax
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 _EAInit
  0009e	83 c4 1c	 add	 esp, 28			; 0000001cH
  000a1	83 f8 11	 cmp	 eax, 17			; 00000011H
  000a4	0f 84 e3 0b 00
	00		 je	 $LN193@TestLegacy

; 1063 : 
; 1064 : 		// Test all deprecated modes of operation
; 1065 : 		for (ci->mode = EAGetFirstMode (ci->ea);
; 1066 : 			ci->mode != 0;
; 1067 : 			ci->mode = EAGetNextMode (ci->ea, ci->mode))

  000aa	8b 17		 mov	 edx, DWORD PTR [edi]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 _EAGetFirstMode
  000b2	83 c4 04	 add	 esp, 4
  000b5	89 47 04	 mov	 DWORD PTR [edi+4], eax
  000b8	85 c0		 test	 eax, eax
  000ba	0f 84 97 0b 00
	00		 je	 $LN136@TestLegacy
$LL133@TestLegacy:

; 1068 : 		{
; 1069 : 			// Skip modes that are not deprecated
; 1070 : 			if (ci->mode == XTS)

  000c0	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000c3	3b c3		 cmp	 eax, ebx
  000c5	0f 84 72 0b 00
	00		 je	 $LN132@TestLegacy

; 1071 : 				continue;
; 1072 : 
; 1073 : 			if (ci->mode == LRW
; 1074 : 				&& (blockSize == 8 && !lrw64InitDone || blockSize == 16 && !lrw128InitDone ))

  000cb	83 f8 02	 cmp	 eax, 2
  000ce	75 3f		 jne	 SHORT $LN123@TestLegacy
  000d0	83 fd 08	 cmp	 ebp, 8
  000d3	75 09		 jne	 SHORT $LN127@TestLegacy
  000d5	83 7c 24 10 00	 cmp	 DWORD PTR _lrw64InitDone$[esp+1124], 0
  000da	74 0e		 je	 SHORT $LN128@TestLegacy
  000dc	eb 31		 jmp	 SHORT $LN123@TestLegacy
$LN127@TestLegacy:
  000de	83 fd 10	 cmp	 ebp, 16			; 00000010H
  000e1	75 2c		 jne	 SHORT $LN123@TestLegacy
  000e3	83 7c 24 14 00	 cmp	 DWORD PTR _lrw128InitDone$[esp+1124], 0
  000e8	75 25		 jne	 SHORT $LN123@TestLegacy
$LN128@TestLegacy:

; 1075 : 			{
; 1076 : 				if (!EAInitMode (ci))

  000ea	57		 push	 edi
  000eb	e8 00 00 00 00	 call	 _EAInitMode
  000f0	83 c4 04	 add	 esp, 4
  000f3	85 c0		 test	 eax, eax
  000f5	0f 84 92 0b 00
	00		 je	 $LN193@TestLegacy

; 1077 : 					return FALSE;
; 1078 : 
; 1079 : 				if (blockSize == 8)

  000fb	83 fd 08	 cmp	 ebp, 8
  000fe	75 06		 jne	 SHORT $LN125@TestLegacy

; 1080 : 					lrw64InitDone = TRUE;

  00100	89 5c 24 10	 mov	 DWORD PTR _lrw64InitDone$[esp+1124], ebx
  00104	eb 09		 jmp	 SHORT $LN123@TestLegacy
$LN125@TestLegacy:

; 1081 : 				else if (blockSize == 16)

  00106	83 fd 10	 cmp	 ebp, 16			; 00000010H
  00109	75 04		 jne	 SHORT $LN123@TestLegacy

; 1082 : 					lrw128InitDone = TRUE;

  0010b	89 5c 24 14	 mov	 DWORD PTR _lrw128InitDone$[esp+1124], ebx
$LN123@TestLegacy:

; 1083 : 			}
; 1084 : 
; 1085 : 			EncryptDataUnits (buf, &unitNo, nbrUnits, ci);

  0010f	57		 push	 edi
  00110	6a 02		 push	 2
  00112	8d 44 24 20	 lea	 eax, DWORD PTR _unitNo$[esp+1132]
  00116	50		 push	 eax
  00117	8d 4c 24 6c	 lea	 ecx, DWORD PTR _buf$[esp+1136]
  0011b	51		 push	 ecx
  0011c	e8 00 00 00 00	 call	 _EncryptDataUnits

; 1086 : 			crc = GetCrc32 (buf, sizeof (buf));

  00121	8d 54 24 70	 lea	 edx, DWORD PTR _buf$[esp+1140]
  00125	68 00 04 00 00	 push	 1024			; 00000400H
  0012a	52		 push	 edx
  0012b	e8 00 00 00 00	 call	 _GetCrc32

; 1087 : 
; 1088 : 			switch (ci->mode)

  00130	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00133	83 c4 18	 add	 esp, 24			; 00000018H
  00136	83 f9 02	 cmp	 ecx, 2
  00139	0f 84 4f 03 00
	00		 je	 $LN120@TestLegacy
  0013f	83 c1 fd	 add	 ecx, -3			; fffffffdH
  00142	83 f9 02	 cmp	 ecx, 2
  00145	0f 87 32 06 00
	00		 ja	 $LN89@TestLegacy

; 1156 : 				}
; 1157 : 				break;
; 1158 : 
; 1159 : 			case CBC:		// Deprecated/legacy
; 1160 : 			case INNER_CBC:	// Deprecated/legacy
; 1161 : 			case OUTER_CBC:	// Deprecated/legacy
; 1162 : 				if (strcmp (name, "AES") == 0)

  0014b	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_03BKNEFOAH@AES?$AA@
  00150	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL200@TestLegacy:
  00154	8a 19		 mov	 bl, BYTE PTR [ecx]
  00156	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00158	75 1a		 jne	 SHORT $LN201@TestLegacy
  0015a	84 db		 test	 bl, bl
  0015c	74 12		 je	 SHORT $LN202@TestLegacy
  0015e	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00161	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00164	75 0e		 jne	 SHORT $LN201@TestLegacy
  00166	83 c1 02	 add	 ecx, 2
  00169	83 c2 02	 add	 edx, 2
  0016c	84 db		 test	 bl, bl
  0016e	75 e4		 jne	 SHORT $LL200@TestLegacy
$LN202@TestLegacy:
  00170	33 c9		 xor	 ecx, ecx
  00172	eb 05		 jmp	 SHORT $LN203@TestLegacy
$LN201@TestLegacy:
  00174	1b c9		 sbb	 ecx, ecx
  00176	83 d9 ff	 sbb	 ecx, -1
$LN203@TestLegacy:
  00179	85 c9		 test	 ecx, ecx
  0017b	75 11		 jne	 SHORT $LN86@TestLegacy

; 1163 : 				{
; 1164 : 					if (crc != 0x2274f53d)

  0017d	3d 3d f5 74 22	 cmp	 eax, 578090301		; 2274f53dH
  00182	0f 85 05 0b 00
	00		 jne	 $LN193@TestLegacy

; 1165 : 						return FALSE;
; 1166 : 					nTestsPerformed++;

  00188	46		 inc	 esi
  00189	e9 fa 05 00 00	 jmp	 $LN198@TestLegacy
$LN86@TestLegacy:

; 1167 : 				}
; 1168 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  0018e	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_08KOMAHJJD@Blowfish?$AA@
  00193	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL204@TestLegacy:
  00197	8a 19		 mov	 bl, BYTE PTR [ecx]
  00199	3a 1a		 cmp	 bl, BYTE PTR [edx]
  0019b	75 1a		 jne	 SHORT $LN205@TestLegacy
  0019d	84 db		 test	 bl, bl
  0019f	74 12		 je	 SHORT $LN206@TestLegacy
  001a1	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  001a4	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  001a7	75 0e		 jne	 SHORT $LN205@TestLegacy
  001a9	83 c1 02	 add	 ecx, 2
  001ac	83 c2 02	 add	 edx, 2
  001af	84 db		 test	 bl, bl
  001b1	75 e4		 jne	 SHORT $LL204@TestLegacy
$LN206@TestLegacy:
  001b3	33 c9		 xor	 ecx, ecx
  001b5	eb 05		 jmp	 SHORT $LN207@TestLegacy
$LN205@TestLegacy:
  001b7	1b c9		 sbb	 ecx, ecx
  001b9	83 d9 ff	 sbb	 ecx, -1
$LN207@TestLegacy:
  001bc	85 c9		 test	 ecx, ecx
  001be	75 11		 jne	 SHORT $LN83@TestLegacy

; 1169 : 				{
; 1170 : 					if (crc != 0x033899a1)

  001c0	3d a1 99 38 03	 cmp	 eax, 54040993		; 033899a1H
  001c5	0f 85 c2 0a 00
	00		 jne	 $LN193@TestLegacy

; 1171 : 						return FALSE;
; 1172 : 					nTestsPerformed++;

  001cb	46		 inc	 esi
  001cc	e9 b7 05 00 00	 jmp	 $LN198@TestLegacy
$LN83@TestLegacy:

; 1173 : 				}
; 1174 : 				else if (strcmp (name, "CAST5") == 0)		// Deprecated/legacy

  001d1	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_05LCFOLDPB@CAST5?$AA@
  001d6	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
  001da	8d 9b 00 00 00
	00		 npad	 6
$LL208@TestLegacy:
  001e0	8a 19		 mov	 bl, BYTE PTR [ecx]
  001e2	3a 1a		 cmp	 bl, BYTE PTR [edx]
  001e4	75 1a		 jne	 SHORT $LN209@TestLegacy
  001e6	84 db		 test	 bl, bl
  001e8	74 12		 je	 SHORT $LN210@TestLegacy
  001ea	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  001ed	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  001f0	75 0e		 jne	 SHORT $LN209@TestLegacy
  001f2	83 c1 02	 add	 ecx, 2
  001f5	83 c2 02	 add	 edx, 2
  001f8	84 db		 test	 bl, bl
  001fa	75 e4		 jne	 SHORT $LL208@TestLegacy
$LN210@TestLegacy:
  001fc	33 c9		 xor	 ecx, ecx
  001fe	eb 05		 jmp	 SHORT $LN211@TestLegacy
$LN209@TestLegacy:
  00200	1b c9		 sbb	 ecx, ecx
  00202	83 d9 ff	 sbb	 ecx, -1
$LN211@TestLegacy:
  00205	85 c9		 test	 ecx, ecx
  00207	75 11		 jne	 SHORT $LN80@TestLegacy

; 1175 : 				{
; 1176 : 					if (crc != 0x331cecc7)	

  00209	3d c7 ec 1c 33	 cmp	 eax, 857533639		; 331cecc7H
  0020e	0f 85 79 0a 00
	00		 jne	 $LN193@TestLegacy

; 1177 : 						return FALSE;
; 1178 : 					nTestsPerformed++;

  00214	46		 inc	 esi
  00215	e9 6e 05 00 00	 jmp	 $LN198@TestLegacy
$LN80@TestLegacy:

; 1179 : 				}
; 1180 : 				else if (strcmp (name, "Serpent") == 0)

  0021a	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@
  0021f	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL212@TestLegacy:
  00223	8a 19		 mov	 bl, BYTE PTR [ecx]
  00225	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00227	75 1a		 jne	 SHORT $LN213@TestLegacy
  00229	84 db		 test	 bl, bl
  0022b	74 12		 je	 SHORT $LN214@TestLegacy
  0022d	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00230	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00233	75 0e		 jne	 SHORT $LN213@TestLegacy
  00235	83 c1 02	 add	 ecx, 2
  00238	83 c2 02	 add	 edx, 2
  0023b	84 db		 test	 bl, bl
  0023d	75 e4		 jne	 SHORT $LL212@TestLegacy
$LN214@TestLegacy:
  0023f	33 c9		 xor	 ecx, ecx
  00241	eb 05		 jmp	 SHORT $LN215@TestLegacy
$LN213@TestLegacy:
  00243	1b c9		 sbb	 ecx, ecx
  00245	83 d9 ff	 sbb	 ecx, -1
$LN215@TestLegacy:
  00248	85 c9		 test	 ecx, ecx
  0024a	75 11		 jne	 SHORT $LN77@TestLegacy

; 1181 : 				{
; 1182 : 					if (crc != 0x42dff3d4)

  0024c	3d d4 f3 df 42	 cmp	 eax, 1121973204		; 42dff3d4H
  00251	0f 85 36 0a 00
	00		 jne	 $LN193@TestLegacy

; 1183 : 						return FALSE;
; 1184 : 					nTestsPerformed++;

  00257	46		 inc	 esi
  00258	e9 2b 05 00 00	 jmp	 $LN198@TestLegacy
$LN77@TestLegacy:

; 1185 : 				}
; 1186 : 				else if (strcmp (name, "Triple DES") == 0)	// Deprecated/legacy

  0025d	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0L@NEGMAKNF@Triple?5DES?$AA@
  00262	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL216@TestLegacy:
  00266	8a 19		 mov	 bl, BYTE PTR [ecx]
  00268	3a 1a		 cmp	 bl, BYTE PTR [edx]
  0026a	75 1a		 jne	 SHORT $LN217@TestLegacy
  0026c	84 db		 test	 bl, bl
  0026e	74 12		 je	 SHORT $LN218@TestLegacy
  00270	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00273	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00276	75 0e		 jne	 SHORT $LN217@TestLegacy
  00278	83 c1 02	 add	 ecx, 2
  0027b	83 c2 02	 add	 edx, 2
  0027e	84 db		 test	 bl, bl
  00280	75 e4		 jne	 SHORT $LL216@TestLegacy
$LN218@TestLegacy:
  00282	33 c9		 xor	 ecx, ecx
  00284	eb 05		 jmp	 SHORT $LN219@TestLegacy
$LN217@TestLegacy:
  00286	1b c9		 sbb	 ecx, ecx
  00288	83 d9 ff	 sbb	 ecx, -1
$LN219@TestLegacy:
  0028b	85 c9		 test	 ecx, ecx
  0028d	75 11		 jne	 SHORT $LN74@TestLegacy

; 1187 : 				{
; 1188 : 					if (crc != 0xfe497d0c)

  0028f	3d 0c 7d 49 fe	 cmp	 eax, -28738292		; fe497d0cH
  00294	0f 85 f3 09 00
	00		 jne	 $LN193@TestLegacy

; 1189 : 						return FALSE;
; 1190 : 					nTestsPerformed++;

  0029a	46		 inc	 esi
  0029b	e9 e8 04 00 00	 jmp	 $LN198@TestLegacy
$LN74@TestLegacy:

; 1191 : 				}
; 1192 : 				else if (strcmp (name, "AES-Blowfish") == 0)	// Deprecated/legacy

  002a0	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@
  002a5	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
  002a9	8d a4 24 00 00
	00 00		 npad	 7
$LL220@TestLegacy:
  002b0	8a 19		 mov	 bl, BYTE PTR [ecx]
  002b2	3a 1a		 cmp	 bl, BYTE PTR [edx]
  002b4	75 1a		 jne	 SHORT $LN221@TestLegacy
  002b6	84 db		 test	 bl, bl
  002b8	74 12		 je	 SHORT $LN222@TestLegacy
  002ba	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  002bd	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  002c0	75 0e		 jne	 SHORT $LN221@TestLegacy
  002c2	83 c1 02	 add	 ecx, 2
  002c5	83 c2 02	 add	 edx, 2
  002c8	84 db		 test	 bl, bl
  002ca	75 e4		 jne	 SHORT $LL220@TestLegacy
$LN222@TestLegacy:
  002cc	33 c9		 xor	 ecx, ecx
  002ce	eb 05		 jmp	 SHORT $LN223@TestLegacy
$LN221@TestLegacy:
  002d0	1b c9		 sbb	 ecx, ecx
  002d2	83 d9 ff	 sbb	 ecx, -1
$LN223@TestLegacy:
  002d5	85 c9		 test	 ecx, ecx
  002d7	75 11		 jne	 SHORT $LN71@TestLegacy

; 1193 : 				{
; 1194 : 					if (crc != 0xa7a80c84)

  002d9	3d 84 0c a8 a7	 cmp	 eax, -1482158972	; a7a80c84H
  002de	0f 85 a9 09 00
	00		 jne	 $LN193@TestLegacy

; 1195 : 						return FALSE;
; 1196 : 					nTestsPerformed++;

  002e4	46		 inc	 esi
  002e5	e9 9e 04 00 00	 jmp	 $LN198@TestLegacy
$LN71@TestLegacy:

; 1197 : 				}
; 1198 : 				else if (strcmp (name, "AES-Blowfish-Serpent") == 0)	// Deprecated/legacy

  002ea	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@
  002ef	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL224@TestLegacy:
  002f3	8a 19		 mov	 bl, BYTE PTR [ecx]
  002f5	3a 1a		 cmp	 bl, BYTE PTR [edx]
  002f7	75 1a		 jne	 SHORT $LN225@TestLegacy
  002f9	84 db		 test	 bl, bl
  002fb	74 12		 je	 SHORT $LN226@TestLegacy
  002fd	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00300	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00303	75 0e		 jne	 SHORT $LN225@TestLegacy
  00305	83 c1 02	 add	 ecx, 2
  00308	83 c2 02	 add	 edx, 2
  0030b	84 db		 test	 bl, bl
  0030d	75 e4		 jne	 SHORT $LL224@TestLegacy
$LN226@TestLegacy:
  0030f	33 c9		 xor	 ecx, ecx
  00311	eb 05		 jmp	 SHORT $LN227@TestLegacy
$LN225@TestLegacy:
  00313	1b c9		 sbb	 ecx, ecx
  00315	83 d9 ff	 sbb	 ecx, -1
$LN227@TestLegacy:
  00318	85 c9		 test	 ecx, ecx
  0031a	75 11		 jne	 SHORT $LN68@TestLegacy

; 1199 : 				{
; 1200 : 					if (crc != 0xa0584562)

  0031c	3d 62 45 58 a0	 cmp	 eax, -1604827806	; a0584562H
  00321	0f 85 66 09 00
	00		 jne	 $LN193@TestLegacy

; 1201 : 						return FALSE;
; 1202 : 					nTestsPerformed++;

  00327	46		 inc	 esi
  00328	e9 5b 04 00 00	 jmp	 $LN198@TestLegacy
$LN68@TestLegacy:

; 1203 : 				}
; 1204 : 				else if (strcmp (name, "AES-Twofish") == 0)

  0032d	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@
  00332	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL228@TestLegacy:
  00336	8a 19		 mov	 bl, BYTE PTR [ecx]
  00338	3a 1a		 cmp	 bl, BYTE PTR [edx]
  0033a	75 1a		 jne	 SHORT $LN229@TestLegacy
  0033c	84 db		 test	 bl, bl
  0033e	74 12		 je	 SHORT $LN230@TestLegacy
  00340	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00343	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00346	75 0e		 jne	 SHORT $LN229@TestLegacy
  00348	83 c1 02	 add	 ecx, 2
  0034b	83 c2 02	 add	 edx, 2
  0034e	84 db		 test	 bl, bl
  00350	75 e4		 jne	 SHORT $LL228@TestLegacy
$LN230@TestLegacy:
  00352	33 c9		 xor	 ecx, ecx
  00354	eb 05		 jmp	 SHORT $LN231@TestLegacy
$LN229@TestLegacy:
  00356	1b c9		 sbb	 ecx, ecx
  00358	83 d9 ff	 sbb	 ecx, -1
$LN231@TestLegacy:
  0035b	85 c9		 test	 ecx, ecx
  0035d	75 11		 jne	 SHORT $LN65@TestLegacy

; 1205 : 				{
; 1206 : 					if (crc != 0x3c226444)

  0035f	3d 44 64 22 3c	 cmp	 eax, 1008886852		; 3c226444H
  00364	0f 85 23 09 00
	00		 jne	 $LN193@TestLegacy

; 1207 : 						return FALSE;
; 1208 : 					nTestsPerformed++;

  0036a	46		 inc	 esi
  0036b	e9 18 04 00 00	 jmp	 $LN198@TestLegacy
$LN65@TestLegacy:

; 1209 : 				}
; 1210 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  00370	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@
  00375	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
  00379	8d a4 24 00 00
	00 00		 npad	 7
$LL232@TestLegacy:
  00380	8a 19		 mov	 bl, BYTE PTR [ecx]
  00382	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00384	75 1a		 jne	 SHORT $LN233@TestLegacy
  00386	84 db		 test	 bl, bl
  00388	74 12		 je	 SHORT $LN234@TestLegacy
  0038a	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  0038d	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00390	75 0e		 jne	 SHORT $LN233@TestLegacy
  00392	83 c1 02	 add	 ecx, 2
  00395	83 c2 02	 add	 edx, 2
  00398	84 db		 test	 bl, bl
  0039a	75 e4		 jne	 SHORT $LL232@TestLegacy
$LN234@TestLegacy:
  0039c	33 c9		 xor	 ecx, ecx
  0039e	eb 05		 jmp	 SHORT $LN235@TestLegacy
$LN233@TestLegacy:
  003a0	1b c9		 sbb	 ecx, ecx
  003a2	83 d9 ff	 sbb	 ecx, -1
$LN235@TestLegacy:
  003a5	85 c9		 test	 ecx, ecx
  003a7	75 11		 jne	 SHORT $LN62@TestLegacy

; 1211 : 				{
; 1212 : 					if (crc != 0x5e5e77fd)

  003a9	3d fd 77 5e 5e	 cmp	 eax, 1583249405		; 5e5e77fdH
  003ae	0f 85 d9 08 00
	00		 jne	 $LN193@TestLegacy

; 1213 : 						return FALSE;
; 1214 : 					nTestsPerformed++;

  003b4	46		 inc	 esi
  003b5	e9 ce 03 00 00	 jmp	 $LN198@TestLegacy
$LN62@TestLegacy:

; 1215 : 				}
; 1216 : 				else if (strcmp (name, "Serpent-AES") == 0)

  003ba	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@
  003bf	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL236@TestLegacy:
  003c3	8a 19		 mov	 bl, BYTE PTR [ecx]
  003c5	3a 1a		 cmp	 bl, BYTE PTR [edx]
  003c7	75 1a		 jne	 SHORT $LN237@TestLegacy
  003c9	84 db		 test	 bl, bl
  003cb	74 12		 je	 SHORT $LN238@TestLegacy
  003cd	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  003d0	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  003d3	75 0e		 jne	 SHORT $LN237@TestLegacy
  003d5	83 c1 02	 add	 ecx, 2
  003d8	83 c2 02	 add	 edx, 2
  003db	84 db		 test	 bl, bl
  003dd	75 e4		 jne	 SHORT $LL236@TestLegacy
$LN238@TestLegacy:
  003df	33 c9		 xor	 ecx, ecx
  003e1	eb 05		 jmp	 SHORT $LN239@TestLegacy
$LN237@TestLegacy:
  003e3	1b c9		 sbb	 ecx, ecx
  003e5	83 d9 ff	 sbb	 ecx, -1
$LN239@TestLegacy:
  003e8	85 c9		 test	 ecx, ecx
  003ea	75 11		 jne	 SHORT $LN59@TestLegacy

; 1217 : 				{
; 1218 : 					if (crc != 0x57c612d5)

  003ec	3d d5 12 c6 57	 cmp	 eax, 1472598741		; 57c612d5H
  003f1	0f 85 96 08 00
	00		 jne	 $LN193@TestLegacy

; 1219 : 						return FALSE;
; 1220 : 					nTestsPerformed++;

  003f7	46		 inc	 esi
  003f8	e9 8b 03 00 00	 jmp	 $LN198@TestLegacy
$LN59@TestLegacy:

; 1221 : 				}
; 1222 : 				else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  003fd	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@
  00402	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL240@TestLegacy:
  00406	8a 19		 mov	 bl, BYTE PTR [ecx]
  00408	3a 1a		 cmp	 bl, BYTE PTR [edx]
  0040a	75 1a		 jne	 SHORT $LN241@TestLegacy
  0040c	84 db		 test	 bl, bl
  0040e	74 12		 je	 SHORT $LN242@TestLegacy
  00410	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00413	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00416	75 0e		 jne	 SHORT $LN241@TestLegacy
  00418	83 c1 02	 add	 ecx, 2
  0041b	83 c2 02	 add	 edx, 2
  0041e	84 db		 test	 bl, bl
  00420	75 e4		 jne	 SHORT $LL240@TestLegacy
$LN242@TestLegacy:
  00422	33 c9		 xor	 ecx, ecx
  00424	eb 05		 jmp	 SHORT $LN243@TestLegacy
$LN241@TestLegacy:
  00426	1b c9		 sbb	 ecx, ecx
  00428	83 d9 ff	 sbb	 ecx, -1
$LN243@TestLegacy:
  0042b	85 c9		 test	 ecx, ecx
  0042d	75 11		 jne	 SHORT $LN56@TestLegacy

; 1223 : 				{
; 1224 : 					if (crc != 0x081e045a)

  0042f	3d 5a 04 1e 08	 cmp	 eax, 136184922		; 081e045aH
  00434	0f 85 53 08 00
	00		 jne	 $LN193@TestLegacy

; 1225 : 						return FALSE;
; 1226 : 					nTestsPerformed++;

  0043a	46		 inc	 esi
  0043b	e9 48 03 00 00	 jmp	 $LN198@TestLegacy
$LN56@TestLegacy:

; 1227 : 				}
; 1228 : 				else if (strcmp (name, "Twofish-Serpent") == 0)

  00440	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@
  00445	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
  00449	8d a4 24 00 00
	00 00		 npad	 7
$LL244@TestLegacy:
  00450	8a 19		 mov	 bl, BYTE PTR [ecx]
  00452	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00454	75 1a		 jne	 SHORT $LN245@TestLegacy
  00456	84 db		 test	 bl, bl
  00458	74 12		 je	 SHORT $LN246@TestLegacy
  0045a	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  0045d	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00460	75 0e		 jne	 SHORT $LN245@TestLegacy
  00462	83 c1 02	 add	 ecx, 2
  00465	83 c2 02	 add	 edx, 2
  00468	84 db		 test	 bl, bl
  0046a	75 e4		 jne	 SHORT $LL244@TestLegacy
$LN246@TestLegacy:
  0046c	33 c9		 xor	 ecx, ecx
  0046e	eb 05		 jmp	 SHORT $LN247@TestLegacy
$LN245@TestLegacy:
  00470	1b c9		 sbb	 ecx, ecx
  00472	83 d9 ff	 sbb	 ecx, -1
$LN247@TestLegacy:
  00475	85 c9		 test	 ecx, ecx
  00477	0f 85 00 03 00
	00		 jne	 $LN89@TestLegacy

; 1229 : 				{
; 1230 : 					if (crc != 0xa7b659f3)

  0047d	3d f3 59 b6 a7	 cmp	 eax, -1481221645	; a7b659f3H
  00482	0f 85 05 08 00
	00		 jne	 $LN193@TestLegacy

; 1231 : 						return FALSE;
; 1232 : 					nTestsPerformed++;

  00488	46		 inc	 esi

; 1233 : 				}
; 1234 : 				break;

  00489	e9 fa 02 00 00	 jmp	 $LN198@TestLegacy
$LN120@TestLegacy:

; 1089 : 			{
; 1090 : 			case LRW:		// Deprecated/legacy
; 1091 : 				if (strcmp (name, "AES") == 0)

  0048e	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_03BKNEFOAH@AES?$AA@
  00493	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL248@TestLegacy:
  00497	8a 19		 mov	 bl, BYTE PTR [ecx]
  00499	3a 1a		 cmp	 bl, BYTE PTR [edx]
  0049b	75 1a		 jne	 SHORT $LN249@TestLegacy
  0049d	84 db		 test	 bl, bl
  0049f	74 12		 je	 SHORT $LN250@TestLegacy
  004a1	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  004a4	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  004a7	75 0e		 jne	 SHORT $LN249@TestLegacy
  004a9	83 c1 02	 add	 ecx, 2
  004ac	83 c2 02	 add	 edx, 2
  004af	84 db		 test	 bl, bl
  004b1	75 e4		 jne	 SHORT $LL248@TestLegacy
$LN250@TestLegacy:
  004b3	33 c9		 xor	 ecx, ecx
  004b5	eb 05		 jmp	 SHORT $LN251@TestLegacy
$LN249@TestLegacy:
  004b7	1b c9		 sbb	 ecx, ecx
  004b9	83 d9 ff	 sbb	 ecx, -1
$LN251@TestLegacy:
  004bc	85 c9		 test	 ecx, ecx
  004be	75 11		 jne	 SHORT $LN119@TestLegacy

; 1092 : 				{
; 1093 : 					if (crc != 0x5237acf9)

  004c0	3d f9 ac 37 52	 cmp	 eax, 1379380473		; 5237acf9H
  004c5	0f 85 c2 07 00
	00		 jne	 $LN193@TestLegacy

; 1094 : 						return FALSE;
; 1095 : 					nTestsPerformed++;

  004cb	46		 inc	 esi
  004cc	e9 b7 02 00 00	 jmp	 $LN198@TestLegacy
$LN119@TestLegacy:

; 1096 : 				}
; 1097 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  004d1	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_08KOMAHJJD@Blowfish?$AA@
  004d6	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
  004da	8d 9b 00 00 00
	00		 npad	 6
$LL252@TestLegacy:
  004e0	8a 19		 mov	 bl, BYTE PTR [ecx]
  004e2	3a 1a		 cmp	 bl, BYTE PTR [edx]
  004e4	75 1a		 jne	 SHORT $LN253@TestLegacy
  004e6	84 db		 test	 bl, bl
  004e8	74 12		 je	 SHORT $LN254@TestLegacy
  004ea	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  004ed	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  004f0	75 0e		 jne	 SHORT $LN253@TestLegacy
  004f2	83 c1 02	 add	 ecx, 2
  004f5	83 c2 02	 add	 edx, 2
  004f8	84 db		 test	 bl, bl
  004fa	75 e4		 jne	 SHORT $LL252@TestLegacy
$LN254@TestLegacy:
  004fc	33 c9		 xor	 ecx, ecx
  004fe	eb 05		 jmp	 SHORT $LN255@TestLegacy
$LN253@TestLegacy:
  00500	1b c9		 sbb	 ecx, ecx
  00502	83 d9 ff	 sbb	 ecx, -1
$LN255@TestLegacy:
  00505	85 c9		 test	 ecx, ecx
  00507	75 11		 jne	 SHORT $LN116@TestLegacy

; 1098 : 				{
; 1099 : 					if (crc != 0xf94d5300)

  00509	3d 00 53 4d f9	 cmp	 eax, -112372992		; f94d5300H
  0050e	0f 85 79 07 00
	00		 jne	 $LN193@TestLegacy

; 1100 : 						return FALSE;
; 1101 : 					nTestsPerformed++;

  00514	46		 inc	 esi
  00515	e9 6e 02 00 00	 jmp	 $LN198@TestLegacy
$LN116@TestLegacy:

; 1102 : 				}
; 1103 : 				else if (strcmp (name, "CAST5") == 0)		// Deprecated/legacy

  0051a	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_05LCFOLDPB@CAST5?$AA@
  0051f	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL256@TestLegacy:
  00523	8a 19		 mov	 bl, BYTE PTR [ecx]
  00525	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00527	75 1a		 jne	 SHORT $LN257@TestLegacy
  00529	84 db		 test	 bl, bl
  0052b	74 12		 je	 SHORT $LN258@TestLegacy
  0052d	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00530	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00533	75 0e		 jne	 SHORT $LN257@TestLegacy
  00535	83 c1 02	 add	 ecx, 2
  00538	83 c2 02	 add	 edx, 2
  0053b	84 db		 test	 bl, bl
  0053d	75 e4		 jne	 SHORT $LL256@TestLegacy
$LN258@TestLegacy:
  0053f	33 c9		 xor	 ecx, ecx
  00541	eb 05		 jmp	 SHORT $LN259@TestLegacy
$LN257@TestLegacy:
  00543	1b c9		 sbb	 ecx, ecx
  00545	83 d9 ff	 sbb	 ecx, -1
$LN259@TestLegacy:
  00548	85 c9		 test	 ecx, ecx
  0054a	75 11		 jne	 SHORT $LN113@TestLegacy

; 1104 : 				{
; 1105 : 					if (crc != 0x33971e82)

  0054c	3d 82 1e 97 33	 cmp	 eax, 865541762		; 33971e82H
  00551	0f 85 36 07 00
	00		 jne	 $LN193@TestLegacy

; 1106 : 						return FALSE;
; 1107 : 					nTestsPerformed++;

  00557	46		 inc	 esi
  00558	e9 2b 02 00 00	 jmp	 $LN198@TestLegacy
$LN113@TestLegacy:

; 1108 : 				}
; 1109 : 				else if (strcmp (name, "Serpent") == 0)

  0055d	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@
  00562	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL260@TestLegacy:
  00566	8a 19		 mov	 bl, BYTE PTR [ecx]
  00568	3a 1a		 cmp	 bl, BYTE PTR [edx]
  0056a	75 1a		 jne	 SHORT $LN261@TestLegacy
  0056c	84 db		 test	 bl, bl
  0056e	74 12		 je	 SHORT $LN262@TestLegacy
  00570	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00573	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00576	75 0e		 jne	 SHORT $LN261@TestLegacy
  00578	83 c1 02	 add	 ecx, 2
  0057b	83 c2 02	 add	 edx, 2
  0057e	84 db		 test	 bl, bl
  00580	75 e4		 jne	 SHORT $LL260@TestLegacy
$LN262@TestLegacy:
  00582	33 c9		 xor	 ecx, ecx
  00584	eb 05		 jmp	 SHORT $LN263@TestLegacy
$LN261@TestLegacy:
  00586	1b c9		 sbb	 ecx, ecx
  00588	83 d9 ff	 sbb	 ecx, -1
$LN263@TestLegacy:
  0058b	85 c9		 test	 ecx, ecx
  0058d	75 11		 jne	 SHORT $LN110@TestLegacy

; 1110 : 				{
; 1111 : 					if (crc != 0x7fb86805)

  0058f	3d 05 68 b8 7f	 cmp	 eax, 2142791685		; 7fb86805H
  00594	0f 85 f3 06 00
	00		 jne	 $LN193@TestLegacy

; 1112 : 						return FALSE;
; 1113 : 					nTestsPerformed++;

  0059a	46		 inc	 esi
  0059b	e9 e8 01 00 00	 jmp	 $LN198@TestLegacy
$LN110@TestLegacy:

; 1114 : 				}
; 1115 : 				else if (strcmp (name, "Triple DES") == 0)	// Deprecated/legacy

  005a0	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0L@NEGMAKNF@Triple?5DES?$AA@
  005a5	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
  005a9	8d a4 24 00 00
	00 00		 npad	 7
$LL264@TestLegacy:
  005b0	8a 19		 mov	 bl, BYTE PTR [ecx]
  005b2	3a 1a		 cmp	 bl, BYTE PTR [edx]
  005b4	75 1a		 jne	 SHORT $LN265@TestLegacy
  005b6	84 db		 test	 bl, bl
  005b8	74 12		 je	 SHORT $LN266@TestLegacy
  005ba	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  005bd	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  005c0	75 0e		 jne	 SHORT $LN265@TestLegacy
  005c2	83 c1 02	 add	 ecx, 2
  005c5	83 c2 02	 add	 edx, 2
  005c8	84 db		 test	 bl, bl
  005ca	75 e4		 jne	 SHORT $LL264@TestLegacy
$LN266@TestLegacy:
  005cc	33 c9		 xor	 ecx, ecx
  005ce	eb 05		 jmp	 SHORT $LN267@TestLegacy
$LN265@TestLegacy:
  005d0	1b c9		 sbb	 ecx, ecx
  005d2	83 d9 ff	 sbb	 ecx, -1
$LN267@TestLegacy:
  005d5	85 c9		 test	 ecx, ecx
  005d7	75 11		 jne	 SHORT $LN107@TestLegacy

; 1116 : 				{
; 1117 : 					if (crc != 0x2b20bb84)

  005d9	3d 84 bb 20 2b	 cmp	 eax, 723565444		; 2b20bb84H
  005de	0f 85 a9 06 00
	00		 jne	 $LN193@TestLegacy

; 1118 : 						return FALSE;
; 1119 : 					nTestsPerformed++;

  005e4	46		 inc	 esi
  005e5	e9 9e 01 00 00	 jmp	 $LN198@TestLegacy
$LN107@TestLegacy:

; 1120 : 				}
; 1121 : 				else if (strcmp (name, "Twofish") == 0)

  005ea	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_07DABDIDEC@Twofish?$AA@
  005ef	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL268@TestLegacy:
  005f3	8a 19		 mov	 bl, BYTE PTR [ecx]
  005f5	3a 1a		 cmp	 bl, BYTE PTR [edx]
  005f7	75 1a		 jne	 SHORT $LN269@TestLegacy
  005f9	84 db		 test	 bl, bl
  005fb	74 12		 je	 SHORT $LN270@TestLegacy
  005fd	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00600	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00603	75 0e		 jne	 SHORT $LN269@TestLegacy
  00605	83 c1 02	 add	 ecx, 2
  00608	83 c2 02	 add	 edx, 2
  0060b	84 db		 test	 bl, bl
  0060d	75 e4		 jne	 SHORT $LL268@TestLegacy
$LN270@TestLegacy:
  0060f	33 c9		 xor	 ecx, ecx
  00611	eb 05		 jmp	 SHORT $LN271@TestLegacy
$LN269@TestLegacy:
  00613	1b c9		 sbb	 ecx, ecx
  00615	83 d9 ff	 sbb	 ecx, -1
$LN271@TestLegacy:
  00618	85 c9		 test	 ecx, ecx
  0061a	75 11		 jne	 SHORT $LN104@TestLegacy

; 1122 : 				{
; 1123 : 					if (crc != 0xa9de0f0b)

  0061c	3d 0b 0f de a9	 cmp	 eax, -1445064949	; a9de0f0bH
  00621	0f 85 66 06 00
	00		 jne	 $LN193@TestLegacy

; 1124 : 						return FALSE;
; 1125 : 					nTestsPerformed++;

  00627	46		 inc	 esi
  00628	e9 5b 01 00 00	 jmp	 $LN198@TestLegacy
$LN104@TestLegacy:

; 1126 : 				}
; 1127 : 				else if (strcmp (name, "AES-Twofish") == 0)

  0062d	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@
  00632	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL272@TestLegacy:
  00636	8a 19		 mov	 bl, BYTE PTR [ecx]
  00638	3a 1a		 cmp	 bl, BYTE PTR [edx]
  0063a	75 1a		 jne	 SHORT $LN273@TestLegacy
  0063c	84 db		 test	 bl, bl
  0063e	74 12		 je	 SHORT $LN274@TestLegacy
  00640	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00643	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00646	75 0e		 jne	 SHORT $LN273@TestLegacy
  00648	83 c1 02	 add	 ecx, 2
  0064b	83 c2 02	 add	 edx, 2
  0064e	84 db		 test	 bl, bl
  00650	75 e4		 jne	 SHORT $LL272@TestLegacy
$LN274@TestLegacy:
  00652	33 c9		 xor	 ecx, ecx
  00654	eb 05		 jmp	 SHORT $LN275@TestLegacy
$LN273@TestLegacy:
  00656	1b c9		 sbb	 ecx, ecx
  00658	83 d9 ff	 sbb	 ecx, -1
$LN275@TestLegacy:
  0065b	85 c9		 test	 ecx, ecx
  0065d	75 11		 jne	 SHORT $LN101@TestLegacy

; 1128 : 				{
; 1129 : 					if (crc != 0x4ed0fd80)

  0065f	3d 80 fd d0 4e	 cmp	 eax, 1322319232		; 4ed0fd80H
  00664	0f 85 23 06 00
	00		 jne	 $LN193@TestLegacy

; 1130 : 						return FALSE;
; 1131 : 					nTestsPerformed++;

  0066a	46		 inc	 esi
  0066b	e9 18 01 00 00	 jmp	 $LN198@TestLegacy
$LN101@TestLegacy:

; 1132 : 				}
; 1133 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  00670	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@
  00675	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
  00679	8d a4 24 00 00
	00 00		 npad	 7
$LL276@TestLegacy:
  00680	8a 19		 mov	 bl, BYTE PTR [ecx]
  00682	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00684	75 1a		 jne	 SHORT $LN277@TestLegacy
  00686	84 db		 test	 bl, bl
  00688	74 12		 je	 SHORT $LN278@TestLegacy
  0068a	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  0068d	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00690	75 0e		 jne	 SHORT $LN277@TestLegacy
  00692	83 c1 02	 add	 ecx, 2
  00695	83 c2 02	 add	 edx, 2
  00698	84 db		 test	 bl, bl
  0069a	75 e4		 jne	 SHORT $LL276@TestLegacy
$LN278@TestLegacy:
  0069c	33 c9		 xor	 ecx, ecx
  0069e	eb 05		 jmp	 SHORT $LN279@TestLegacy
$LN277@TestLegacy:
  006a0	1b c9		 sbb	 ecx, ecx
  006a2	83 d9 ff	 sbb	 ecx, -1
$LN279@TestLegacy:
  006a5	85 c9		 test	 ecx, ecx
  006a7	75 11		 jne	 SHORT $LN98@TestLegacy

; 1134 : 				{
; 1135 : 					if (crc != 0xea04b3cf)

  006a9	3d cf b3 04 ea	 cmp	 eax, -368790577		; ea04b3cfH
  006ae	0f 85 d9 05 00
	00		 jne	 $LN193@TestLegacy

; 1136 : 						return FALSE;
; 1137 : 					nTestsPerformed++;

  006b4	46		 inc	 esi
  006b5	e9 ce 00 00 00	 jmp	 $LN198@TestLegacy
$LN98@TestLegacy:

; 1138 : 				}
; 1139 : 				else if (strcmp (name, "Serpent-AES") == 0)

  006ba	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@
  006bf	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL280@TestLegacy:
  006c3	8a 19		 mov	 bl, BYTE PTR [ecx]
  006c5	3a 1a		 cmp	 bl, BYTE PTR [edx]
  006c7	75 1a		 jne	 SHORT $LN281@TestLegacy
  006c9	84 db		 test	 bl, bl
  006cb	74 12		 je	 SHORT $LN282@TestLegacy
  006cd	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  006d0	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  006d3	75 0e		 jne	 SHORT $LN281@TestLegacy
  006d5	83 c1 02	 add	 ecx, 2
  006d8	83 c2 02	 add	 edx, 2
  006db	84 db		 test	 bl, bl
  006dd	75 e4		 jne	 SHORT $LL280@TestLegacy
$LN282@TestLegacy:
  006df	33 c9		 xor	 ecx, ecx
  006e1	eb 05		 jmp	 SHORT $LN283@TestLegacy
$LN281@TestLegacy:
  006e3	1b c9		 sbb	 ecx, ecx
  006e5	83 d9 ff	 sbb	 ecx, -1
$LN283@TestLegacy:
  006e8	85 c9		 test	 ecx, ecx
  006ea	75 11		 jne	 SHORT $LN95@TestLegacy

; 1140 : 				{
; 1141 : 					if (crc != 0x0d33596a)

  006ec	3d 6a 59 33 0d	 cmp	 eax, 221469034		; 0d33596aH
  006f1	0f 85 96 05 00
	00		 jne	 $LN193@TestLegacy

; 1142 : 						return FALSE;
; 1143 : 					nTestsPerformed++;

  006f7	46		 inc	 esi
  006f8	e9 8b 00 00 00	 jmp	 $LN198@TestLegacy
$LN95@TestLegacy:

; 1144 : 				}
; 1145 : 				else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  006fd	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@
  00702	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL284@TestLegacy:
  00706	8a 19		 mov	 bl, BYTE PTR [ecx]
  00708	3a 1a		 cmp	 bl, BYTE PTR [edx]
  0070a	75 1a		 jne	 SHORT $LN285@TestLegacy
  0070c	84 db		 test	 bl, bl
  0070e	74 12		 je	 SHORT $LN286@TestLegacy
  00710	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00713	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00716	75 0e		 jne	 SHORT $LN285@TestLegacy
  00718	83 c1 02	 add	 ecx, 2
  0071b	83 c2 02	 add	 edx, 2
  0071e	84 db		 test	 bl, bl
  00720	75 e4		 jne	 SHORT $LL284@TestLegacy
$LN286@TestLegacy:
  00722	33 c9		 xor	 ecx, ecx
  00724	eb 05		 jmp	 SHORT $LN287@TestLegacy
$LN285@TestLegacy:
  00726	1b c9		 sbb	 ecx, ecx
  00728	83 d9 ff	 sbb	 ecx, -1
$LN287@TestLegacy:
  0072b	85 c9		 test	 ecx, ecx
  0072d	75 0e		 jne	 SHORT $LN92@TestLegacy

; 1146 : 				{
; 1147 : 					if (crc != 0x2845d0e3)

  0072f	3d e3 d0 45 28	 cmp	 eax, 675664099		; 2845d0e3H
  00734	0f 85 53 05 00
	00		 jne	 $LN193@TestLegacy

; 1148 : 						return FALSE;
; 1149 : 					nTestsPerformed++;

  0073a	46		 inc	 esi
  0073b	eb 4b		 jmp	 SHORT $LN198@TestLegacy
$LN92@TestLegacy:

; 1150 : 				}
; 1151 : 				else if (strcmp (name, "Twofish-Serpent") == 0)

  0073d	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@
  00742	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL288@TestLegacy:
  00746	8a 19		 mov	 bl, BYTE PTR [ecx]
  00748	3a 1a		 cmp	 bl, BYTE PTR [edx]
  0074a	75 1a		 jne	 SHORT $LN289@TestLegacy
  0074c	84 db		 test	 bl, bl
  0074e	74 12		 je	 SHORT $LN290@TestLegacy
  00750	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00753	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00756	75 0e		 jne	 SHORT $LN289@TestLegacy
  00758	83 c1 02	 add	 ecx, 2
  0075b	83 c2 02	 add	 edx, 2
  0075e	84 db		 test	 bl, bl
  00760	75 e4		 jne	 SHORT $LL288@TestLegacy
$LN290@TestLegacy:
  00762	33 c9		 xor	 ecx, ecx
  00764	eb 05		 jmp	 SHORT $LN291@TestLegacy
$LN289@TestLegacy:
  00766	1b c9		 sbb	 ecx, ecx
  00768	83 d9 ff	 sbb	 ecx, -1
$LN291@TestLegacy:
  0076b	85 c9		 test	 ecx, ecx
  0076d	75 0e		 jne	 SHORT $LN89@TestLegacy

; 1152 : 				{
; 1153 : 					if (crc != 0xca65c5cd)

  0076f	3d cd c5 65 ca	 cmp	 eax, -899299891		; ca65c5cdH
  00774	0f 85 13 05 00
	00		 jne	 $LN193@TestLegacy

; 1154 : 						return FALSE;
; 1155 : 					nTestsPerformed++;

  0077a	46		 inc	 esi

; 1235 : 			}
; 1236 : 
; 1237 : 			if (crc == 0xb70b4c26)

  0077b	eb 0b		 jmp	 SHORT $LN198@TestLegacy
$LN89@TestLegacy:
  0077d	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  00782	0f 84 05 05 00
	00		 je	 $LN193@TestLegacy
$LN198@TestLegacy:

; 1238 : 				return FALSE;
; 1239 : 
; 1240 : 			DecryptDataUnits (buf, &unitNo, nbrUnits, ci);

  00788	57		 push	 edi
  00789	6a 02		 push	 2
  0078b	8d 44 24 20	 lea	 eax, DWORD PTR _unitNo$[esp+1132]
  0078f	50		 push	 eax
  00790	8d 4c 24 6c	 lea	 ecx, DWORD PTR _buf$[esp+1136]
  00794	51		 push	 ecx
  00795	e8 00 00 00 00	 call	 _DecryptDataUnits

; 1241 : 
; 1242 : 			if (GetCrc32 (buf, sizeof (buf)) != 0xb70b4c26)

  0079a	8d 54 24 70	 lea	 edx, DWORD PTR _buf$[esp+1140]
  0079e	68 00 04 00 00	 push	 1024			; 00000400H
  007a3	52		 push	 edx
  007a4	e8 00 00 00 00	 call	 _GetCrc32
  007a9	83 c4 18	 add	 esp, 24			; 00000018H
  007ac	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  007b1	0f 85 d6 04 00
	00		 jne	 $LN193@TestLegacy

; 1243 : 				return FALSE;
; 1244 : 
; 1245 : 			nTestsPerformed++;
; 1246 : 
; 1247 : 			EncryptBuffer (buf, sizeof (buf), ci);

  007b7	57		 push	 edi
  007b8	6a 00		 push	 0
  007ba	8d 44 24 68	 lea	 eax, DWORD PTR _buf$[esp+1132]
  007be	68 00 04 00 00	 push	 1024			; 00000400H
  007c3	50		 push	 eax
  007c4	46		 inc	 esi
  007c5	e8 00 00 00 00	 call	 _EncryptBuffer

; 1248 : 			crc = GetCrc32 (buf, sizeof (buf));

  007ca	8d 4c 24 70	 lea	 ecx, DWORD PTR _buf$[esp+1140]
  007ce	68 00 04 00 00	 push	 1024			; 00000400H
  007d3	51		 push	 ecx
  007d4	e8 00 00 00 00	 call	 _GetCrc32

; 1249 : 
; 1250 : 			switch (ci->mode)

  007d9	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  007dc	83 c4 18	 add	 esp, 24			; 00000018H
  007df	83 f9 02	 cmp	 ecx, 2
  007e2	0f 84 4c 03 00
	00		 je	 $LN47@TestLegacy
  007e8	83 c1 fd	 add	 ecx, -3			; fffffffdH
  007eb	83 f9 02	 cmp	 ecx, 2
  007ee	0f 87 09 04 00
	00		 ja	 $LN40@TestLegacy

; 1270 : 				}
; 1271 : 				break;
; 1272 : 
; 1273 : 			case CBC:		// Deprecated/legacy
; 1274 : 			case INNER_CBC:	// Deprecated/legacy
; 1275 : 			case OUTER_CBC:	// Deprecated/legacy
; 1276 : 				if (strcmp (name, "AES") == 0)

  007f4	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_03BKNEFOAH@AES?$AA@
  007f9	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
  007fd	8d 49 00	 npad	 3
$LL292@TestLegacy:
  00800	8a 19		 mov	 bl, BYTE PTR [ecx]
  00802	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00804	75 1a		 jne	 SHORT $LN293@TestLegacy
  00806	84 db		 test	 bl, bl
  00808	74 12		 je	 SHORT $LN294@TestLegacy
  0080a	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  0080d	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00810	75 0e		 jne	 SHORT $LN293@TestLegacy
  00812	83 c1 02	 add	 ecx, 2
  00815	83 c2 02	 add	 edx, 2
  00818	84 db		 test	 bl, bl
  0081a	75 e4		 jne	 SHORT $LL292@TestLegacy
$LN294@TestLegacy:
  0081c	33 c9		 xor	 ecx, ecx
  0081e	eb 05		 jmp	 SHORT $LN295@TestLegacy
$LN293@TestLegacy:
  00820	1b c9		 sbb	 ecx, ecx
  00822	83 d9 ff	 sbb	 ecx, -1
$LN295@TestLegacy:
  00825	85 c9		 test	 ecx, ecx
  00827	75 11		 jne	 SHORT $LN37@TestLegacy

; 1277 : 				{
; 1278 : 					if (crc != 0x960f740e)

  00829	3d 0e 74 0f 96	 cmp	 eax, -1777372146	; 960f740eH
  0082e	0f 85 59 04 00
	00		 jne	 $LN193@TestLegacy

; 1279 : 						return FALSE;
; 1280 : 					nTestsPerformed++;

  00834	46		 inc	 esi
  00835	e9 ce 03 00 00	 jmp	 $LN199@TestLegacy
$LN37@TestLegacy:

; 1281 : 				}
; 1282 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  0083a	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_08KOMAHJJD@Blowfish?$AA@
  0083f	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL296@TestLegacy:
  00843	8a 19		 mov	 bl, BYTE PTR [ecx]
  00845	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00847	75 1a		 jne	 SHORT $LN297@TestLegacy
  00849	84 db		 test	 bl, bl
  0084b	74 12		 je	 SHORT $LN298@TestLegacy
  0084d	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00850	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00853	75 0e		 jne	 SHORT $LN297@TestLegacy
  00855	83 c1 02	 add	 ecx, 2
  00858	83 c2 02	 add	 edx, 2
  0085b	84 db		 test	 bl, bl
  0085d	75 e4		 jne	 SHORT $LL296@TestLegacy
$LN298@TestLegacy:
  0085f	33 c9		 xor	 ecx, ecx
  00861	eb 05		 jmp	 SHORT $LN299@TestLegacy
$LN297@TestLegacy:
  00863	1b c9		 sbb	 ecx, ecx
  00865	83 d9 ff	 sbb	 ecx, -1
$LN299@TestLegacy:
  00868	85 c9		 test	 ecx, ecx
  0086a	75 11		 jne	 SHORT $LN34@TestLegacy

; 1283 : 				{
; 1284 : 					if (crc != 0x7e1cfabb)

  0086c	3d bb fa 1c 7e	 cmp	 eax, 2115828411		; 7e1cfabbH
  00871	0f 85 16 04 00
	00		 jne	 $LN193@TestLegacy

; 1285 : 						return FALSE;
; 1286 : 					nTestsPerformed++;

  00877	46		 inc	 esi
  00878	e9 8b 03 00 00	 jmp	 $LN199@TestLegacy
$LN34@TestLegacy:

; 1287 : 				}
; 1288 : 				else if (strcmp (name, "CAST5") == 0)	// Deprecated/legacy

  0087d	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_05LCFOLDPB@CAST5?$AA@
  00882	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL300@TestLegacy:
  00886	8a 19		 mov	 bl, BYTE PTR [ecx]
  00888	3a 1a		 cmp	 bl, BYTE PTR [edx]
  0088a	75 1a		 jne	 SHORT $LN301@TestLegacy
  0088c	84 db		 test	 bl, bl
  0088e	74 12		 je	 SHORT $LN302@TestLegacy
  00890	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00893	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00896	75 0e		 jne	 SHORT $LN301@TestLegacy
  00898	83 c1 02	 add	 ecx, 2
  0089b	83 c2 02	 add	 edx, 2
  0089e	84 db		 test	 bl, bl
  008a0	75 e4		 jne	 SHORT $LL300@TestLegacy
$LN302@TestLegacy:
  008a2	33 c9		 xor	 ecx, ecx
  008a4	eb 05		 jmp	 SHORT $LN303@TestLegacy
$LN301@TestLegacy:
  008a6	1b c9		 sbb	 ecx, ecx
  008a8	83 d9 ff	 sbb	 ecx, -1
$LN303@TestLegacy:
  008ab	85 c9		 test	 ecx, ecx
  008ad	75 11		 jne	 SHORT $LN31@TestLegacy

; 1289 : 				{
; 1290 : 					if (crc != 0xeaae21c8)

  008af	3d c8 21 ae ea	 cmp	 eax, -357686840		; eaae21c8H
  008b4	0f 85 d3 03 00
	00		 jne	 $LN193@TestLegacy

; 1291 : 						return FALSE;
; 1292 : 					nTestsPerformed++;

  008ba	46		 inc	 esi
  008bb	e9 48 03 00 00	 jmp	 $LN199@TestLegacy
$LN31@TestLegacy:

; 1293 : 				}
; 1294 : 				else if (strcmp (name, "Serpent") == 0)

  008c0	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@
  008c5	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
  008c9	8d a4 24 00 00
	00 00		 npad	 7
$LL304@TestLegacy:
  008d0	8a 19		 mov	 bl, BYTE PTR [ecx]
  008d2	3a 1a		 cmp	 bl, BYTE PTR [edx]
  008d4	75 1a		 jne	 SHORT $LN305@TestLegacy
  008d6	84 db		 test	 bl, bl
  008d8	74 12		 je	 SHORT $LN306@TestLegacy
  008da	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  008dd	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  008e0	75 0e		 jne	 SHORT $LN305@TestLegacy
  008e2	83 c1 02	 add	 ecx, 2
  008e5	83 c2 02	 add	 edx, 2
  008e8	84 db		 test	 bl, bl
  008ea	75 e4		 jne	 SHORT $LL304@TestLegacy
$LN306@TestLegacy:
  008ec	33 c9		 xor	 ecx, ecx
  008ee	eb 05		 jmp	 SHORT $LN307@TestLegacy
$LN305@TestLegacy:
  008f0	1b c9		 sbb	 ecx, ecx
  008f2	83 d9 ff	 sbb	 ecx, -1
$LN307@TestLegacy:
  008f5	85 c9		 test	 ecx, ecx
  008f7	75 11		 jne	 SHORT $LN28@TestLegacy

; 1295 : 				{
; 1296 : 					if (crc != 0xa8139d62)

  008f9	3d 62 9d 13 a8	 cmp	 eax, -1475109534	; a8139d62H
  008fe	0f 85 89 03 00
	00		 jne	 $LN193@TestLegacy

; 1297 : 						return FALSE;
; 1298 : 					nTestsPerformed++;

  00904	46		 inc	 esi
  00905	e9 fe 02 00 00	 jmp	 $LN199@TestLegacy
$LN28@TestLegacy:

; 1299 : 				}
; 1300 : 				else if (strcmp (name, "Triple DES") == 0)	// Deprecated/legacy

  0090a	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0L@NEGMAKNF@Triple?5DES?$AA@
  0090f	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL308@TestLegacy:
  00913	8a 19		 mov	 bl, BYTE PTR [ecx]
  00915	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00917	75 1a		 jne	 SHORT $LN309@TestLegacy
  00919	84 db		 test	 bl, bl
  0091b	74 12		 je	 SHORT $LN310@TestLegacy
  0091d	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00920	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00923	75 0e		 jne	 SHORT $LN309@TestLegacy
  00925	83 c1 02	 add	 ecx, 2
  00928	83 c2 02	 add	 edx, 2
  0092b	84 db		 test	 bl, bl
  0092d	75 e4		 jne	 SHORT $LL308@TestLegacy
$LN310@TestLegacy:
  0092f	33 c9		 xor	 ecx, ecx
  00931	eb 05		 jmp	 SHORT $LN311@TestLegacy
$LN309@TestLegacy:
  00933	1b c9		 sbb	 ecx, ecx
  00935	83 d9 ff	 sbb	 ecx, -1
$LN311@TestLegacy:
  00938	85 c9		 test	 ecx, ecx
  0093a	75 11		 jne	 SHORT $LN25@TestLegacy

; 1301 : 				{
; 1302 : 					if (crc != 0xecf5d7d0)

  0093c	3d d0 d7 f5 ec	 cmp	 eax, -319432752		; ecf5d7d0H
  00941	0f 85 46 03 00
	00		 jne	 $LN193@TestLegacy

; 1303 : 						return FALSE;
; 1304 : 					nTestsPerformed++;

  00947	46		 inc	 esi
  00948	e9 bb 02 00 00	 jmp	 $LN199@TestLegacy
$LN25@TestLegacy:

; 1305 : 				}
; 1306 : 				else if (strcmp (name, "AES-Blowfish") == 0)	// Deprecated/legacy

  0094d	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@
  00952	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL312@TestLegacy:
  00956	8a 19		 mov	 bl, BYTE PTR [ecx]
  00958	3a 1a		 cmp	 bl, BYTE PTR [edx]
  0095a	75 1a		 jne	 SHORT $LN313@TestLegacy
  0095c	84 db		 test	 bl, bl
  0095e	74 12		 je	 SHORT $LN314@TestLegacy
  00960	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00963	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00966	75 0e		 jne	 SHORT $LN313@TestLegacy
  00968	83 c1 02	 add	 ecx, 2
  0096b	83 c2 02	 add	 edx, 2
  0096e	84 db		 test	 bl, bl
  00970	75 e4		 jne	 SHORT $LL312@TestLegacy
$LN314@TestLegacy:
  00972	33 c9		 xor	 ecx, ecx
  00974	eb 05		 jmp	 SHORT $LN315@TestLegacy
$LN313@TestLegacy:
  00976	1b c9		 sbb	 ecx, ecx
  00978	83 d9 ff	 sbb	 ecx, -1
$LN315@TestLegacy:
  0097b	85 c9		 test	 ecx, ecx
  0097d	75 11		 jne	 SHORT $LN22@TestLegacy

; 1307 : 				{
; 1308 : 					if (crc != 0xb70171b6)

  0097f	3d b6 71 01 b7	 cmp	 eax, -1224642122	; b70171b6H
  00984	0f 85 03 03 00
	00		 jne	 $LN193@TestLegacy

; 1309 : 						return FALSE;
; 1310 : 					nTestsPerformed++;

  0098a	46		 inc	 esi
  0098b	e9 78 02 00 00	 jmp	 $LN199@TestLegacy
$LN22@TestLegacy:

; 1311 : 				}
; 1312 : 				else if (strcmp (name, "AES-Blowfish-Serpent") == 0)	// Deprecated/legacy

  00990	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@
  00995	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
  00999	8d a4 24 00 00
	00 00		 npad	 7
$LL316@TestLegacy:
  009a0	8a 19		 mov	 bl, BYTE PTR [ecx]
  009a2	3a 1a		 cmp	 bl, BYTE PTR [edx]
  009a4	75 1a		 jne	 SHORT $LN317@TestLegacy
  009a6	84 db		 test	 bl, bl
  009a8	74 12		 je	 SHORT $LN318@TestLegacy
  009aa	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  009ad	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  009b0	75 0e		 jne	 SHORT $LN317@TestLegacy
  009b2	83 c1 02	 add	 ecx, 2
  009b5	83 c2 02	 add	 edx, 2
  009b8	84 db		 test	 bl, bl
  009ba	75 e4		 jne	 SHORT $LL316@TestLegacy
$LN318@TestLegacy:
  009bc	33 c9		 xor	 ecx, ecx
  009be	eb 05		 jmp	 SHORT $LN319@TestLegacy
$LN317@TestLegacy:
  009c0	1b c9		 sbb	 ecx, ecx
  009c2	83 d9 ff	 sbb	 ecx, -1
$LN319@TestLegacy:
  009c5	85 c9		 test	 ecx, ecx
  009c7	75 11		 jne	 SHORT $LN19@TestLegacy

; 1313 : 				{
; 1314 : 					if (crc != 0x1e749a87)

  009c9	3d 87 9a 74 1e	 cmp	 eax, 510958215		; 1e749a87H
  009ce	0f 85 b9 02 00
	00		 jne	 $LN193@TestLegacy

; 1315 : 						return FALSE;
; 1316 : 					nTestsPerformed++;

  009d4	46		 inc	 esi
  009d5	e9 2e 02 00 00	 jmp	 $LN199@TestLegacy
$LN19@TestLegacy:

; 1317 : 				}
; 1318 : 				else if (strcmp (name, "AES-Twofish") == 0)

  009da	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@
  009df	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL320@TestLegacy:
  009e3	8a 19		 mov	 bl, BYTE PTR [ecx]
  009e5	3a 1a		 cmp	 bl, BYTE PTR [edx]
  009e7	75 1a		 jne	 SHORT $LN321@TestLegacy
  009e9	84 db		 test	 bl, bl
  009eb	74 12		 je	 SHORT $LN322@TestLegacy
  009ed	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  009f0	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  009f3	75 0e		 jne	 SHORT $LN321@TestLegacy
  009f5	83 c1 02	 add	 ecx, 2
  009f8	83 c2 02	 add	 edx, 2
  009fb	84 db		 test	 bl, bl
  009fd	75 e4		 jne	 SHORT $LL320@TestLegacy
$LN322@TestLegacy:
  009ff	33 c9		 xor	 ecx, ecx
  00a01	eb 05		 jmp	 SHORT $LN323@TestLegacy
$LN321@TestLegacy:
  00a03	1b c9		 sbb	 ecx, ecx
  00a05	83 d9 ff	 sbb	 ecx, -1
$LN323@TestLegacy:
  00a08	85 c9		 test	 ecx, ecx
  00a0a	75 11		 jne	 SHORT $LN16@TestLegacy

; 1319 : 				{
; 1320 : 					if (crc != 0xb4b8bb9b)

  00a0c	3d 9b bb b8 b4	 cmp	 eax, -1262961765	; b4b8bb9bH
  00a11	0f 85 76 02 00
	00		 jne	 $LN193@TestLegacy

; 1321 : 						return FALSE;
; 1322 : 					nTestsPerformed++;

  00a17	46		 inc	 esi
  00a18	e9 eb 01 00 00	 jmp	 $LN199@TestLegacy
$LN16@TestLegacy:

; 1323 : 				}
; 1324 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  00a1d	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@
  00a22	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL324@TestLegacy:
  00a26	8a 19		 mov	 bl, BYTE PTR [ecx]
  00a28	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00a2a	75 1a		 jne	 SHORT $LN325@TestLegacy
  00a2c	84 db		 test	 bl, bl
  00a2e	74 12		 je	 SHORT $LN326@TestLegacy
  00a30	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00a33	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00a36	75 0e		 jne	 SHORT $LN325@TestLegacy
  00a38	83 c1 02	 add	 ecx, 2
  00a3b	83 c2 02	 add	 edx, 2
  00a3e	84 db		 test	 bl, bl
  00a40	75 e4		 jne	 SHORT $LL324@TestLegacy
$LN326@TestLegacy:
  00a42	33 c9		 xor	 ecx, ecx
  00a44	eb 05		 jmp	 SHORT $LN327@TestLegacy
$LN325@TestLegacy:
  00a46	1b c9		 sbb	 ecx, ecx
  00a48	83 d9 ff	 sbb	 ecx, -1
$LN327@TestLegacy:
  00a4b	85 c9		 test	 ecx, ecx
  00a4d	75 11		 jne	 SHORT $LN13@TestLegacy

; 1325 : 				{
; 1326 : 					if (crc != 0x76b6c1cb)

  00a4f	3d cb c1 b6 76	 cmp	 eax, 1991688651		; 76b6c1cbH
  00a54	0f 85 33 02 00
	00		 jne	 $LN193@TestLegacy

; 1327 : 						return FALSE;
; 1328 : 					nTestsPerformed++;

  00a5a	46		 inc	 esi
  00a5b	e9 a8 01 00 00	 jmp	 $LN199@TestLegacy
$LN13@TestLegacy:

; 1329 : 				}
; 1330 : 				else if (strcmp (name, "Serpent-AES") == 0)

  00a60	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@
  00a65	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
  00a69	8d a4 24 00 00
	00 00		 npad	 7
$LL328@TestLegacy:
  00a70	8a 19		 mov	 bl, BYTE PTR [ecx]
  00a72	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00a74	75 1a		 jne	 SHORT $LN329@TestLegacy
  00a76	84 db		 test	 bl, bl
  00a78	74 12		 je	 SHORT $LN330@TestLegacy
  00a7a	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00a7d	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00a80	75 0e		 jne	 SHORT $LN329@TestLegacy
  00a82	83 c1 02	 add	 ecx, 2
  00a85	83 c2 02	 add	 edx, 2
  00a88	84 db		 test	 bl, bl
  00a8a	75 e4		 jne	 SHORT $LL328@TestLegacy
$LN330@TestLegacy:
  00a8c	33 c9		 xor	 ecx, ecx
  00a8e	eb 05		 jmp	 SHORT $LN331@TestLegacy
$LN329@TestLegacy:
  00a90	1b c9		 sbb	 ecx, ecx
  00a92	83 d9 ff	 sbb	 ecx, -1
$LN331@TestLegacy:
  00a95	85 c9		 test	 ecx, ecx
  00a97	75 11		 jne	 SHORT $LN10@TestLegacy

; 1331 : 				{
; 1332 : 					if (crc != 0x634f12ed)

  00a99	3d ed 12 4f 63	 cmp	 eax, 1666126573		; 634f12edH
  00a9e	0f 85 e9 01 00
	00		 jne	 $LN193@TestLegacy

; 1333 : 						return FALSE;
; 1334 : 					nTestsPerformed++;

  00aa4	46		 inc	 esi
  00aa5	e9 5e 01 00 00	 jmp	 $LN199@TestLegacy
$LN10@TestLegacy:

; 1335 : 				}
; 1336 : 				else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  00aaa	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@
  00aaf	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL332@TestLegacy:
  00ab3	8a 19		 mov	 bl, BYTE PTR [ecx]
  00ab5	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00ab7	75 1a		 jne	 SHORT $LN333@TestLegacy
  00ab9	84 db		 test	 bl, bl
  00abb	74 12		 je	 SHORT $LN334@TestLegacy
  00abd	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00ac0	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00ac3	75 0e		 jne	 SHORT $LN333@TestLegacy
  00ac5	83 c1 02	 add	 ecx, 2
  00ac8	83 c2 02	 add	 edx, 2
  00acb	84 db		 test	 bl, bl
  00acd	75 e4		 jne	 SHORT $LL332@TestLegacy
$LN334@TestLegacy:
  00acf	33 c9		 xor	 ecx, ecx
  00ad1	eb 05		 jmp	 SHORT $LN335@TestLegacy
$LN333@TestLegacy:
  00ad3	1b c9		 sbb	 ecx, ecx
  00ad5	83 d9 ff	 sbb	 ecx, -1
$LN335@TestLegacy:
  00ad8	85 c9		 test	 ecx, ecx
  00ada	75 11		 jne	 SHORT $LN7@TestLegacy

; 1337 : 				{
; 1338 : 					if (crc != 0xe54bc1b9)

  00adc	3d b9 c1 4b e5	 cmp	 eax, -448020039		; e54bc1b9H
  00ae1	0f 85 a6 01 00
	00		 jne	 $LN193@TestLegacy

; 1339 : 						return FALSE;
; 1340 : 					nTestsPerformed++;

  00ae7	46		 inc	 esi
  00ae8	e9 1b 01 00 00	 jmp	 $LN199@TestLegacy
$LN7@TestLegacy:

; 1341 : 				}
; 1342 : 				else if (strcmp (name, "Twofish-Serpent") == 0)

  00aed	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@
  00af2	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL336@TestLegacy:
  00af6	8a 19		 mov	 bl, BYTE PTR [ecx]
  00af8	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00afa	75 1a		 jne	 SHORT $LN337@TestLegacy
  00afc	84 db		 test	 bl, bl
  00afe	74 12		 je	 SHORT $LN338@TestLegacy
  00b00	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00b03	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00b06	75 0e		 jne	 SHORT $LN337@TestLegacy
  00b08	83 c1 02	 add	 ecx, 2
  00b0b	83 c2 02	 add	 edx, 2
  00b0e	84 db		 test	 bl, bl
  00b10	75 e4		 jne	 SHORT $LL336@TestLegacy
$LN338@TestLegacy:
  00b12	33 c9		 xor	 ecx, ecx
  00b14	eb 05		 jmp	 SHORT $LN339@TestLegacy
$LN337@TestLegacy:
  00b16	1b c9		 sbb	 ecx, ecx
  00b18	83 d9 ff	 sbb	 ecx, -1
$LN339@TestLegacy:
  00b1b	85 c9		 test	 ecx, ecx
  00b1d	0f 85 da 00 00
	00		 jne	 $LN40@TestLegacy

; 1343 : 				{
; 1344 : 					if (crc != 0x21cdb382)

  00b23	3d 82 b3 cd 21	 cmp	 eax, 567128962		; 21cdb382H
  00b28	0f 85 5f 01 00
	00		 jne	 $LN193@TestLegacy

; 1345 : 						return FALSE;
; 1346 : 					nTestsPerformed++;

  00b2e	46		 inc	 esi

; 1347 : 				}
; 1348 : 				break;

  00b2f	e9 d4 00 00 00	 jmp	 $LN199@TestLegacy
$LN47@TestLegacy:

; 1251 : 			{
; 1252 : 			case LRW:		// Deprecated/legacy
; 1253 : 				if (strcmp (name, "AES") == 0)

  00b34	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_03BKNEFOAH@AES?$AA@
  00b39	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
  00b3d	8d 49 00	 npad	 3
$LL340@TestLegacy:
  00b40	8a 19		 mov	 bl, BYTE PTR [ecx]
  00b42	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00b44	75 1a		 jne	 SHORT $LN341@TestLegacy
  00b46	84 db		 test	 bl, bl
  00b48	74 12		 je	 SHORT $LN342@TestLegacy
  00b4a	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00b4d	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00b50	75 0e		 jne	 SHORT $LN341@TestLegacy
  00b52	83 c1 02	 add	 ecx, 2
  00b55	83 c2 02	 add	 edx, 2
  00b58	84 db		 test	 bl, bl
  00b5a	75 e4		 jne	 SHORT $LL340@TestLegacy
$LN342@TestLegacy:
  00b5c	33 c9		 xor	 ecx, ecx
  00b5e	eb 05		 jmp	 SHORT $LN343@TestLegacy
$LN341@TestLegacy:
  00b60	1b c9		 sbb	 ecx, ecx
  00b62	83 d9 ff	 sbb	 ecx, -1
$LN343@TestLegacy:
  00b65	85 c9		 test	 ecx, ecx
  00b67	75 11		 jne	 SHORT $LN46@TestLegacy

; 1254 : 				{
; 1255 : 					if (crc != 0x5ae1e3d8)

  00b69	3d d8 e3 e1 5a	 cmp	 eax, 1524753368		; 5ae1e3d8H
  00b6e	0f 85 19 01 00
	00		 jne	 $LN193@TestLegacy

; 1256 : 						return FALSE;
; 1257 : 					nTestsPerformed++;

  00b74	46		 inc	 esi
  00b75	e9 8e 00 00 00	 jmp	 $LN199@TestLegacy
$LN46@TestLegacy:

; 1258 : 				}
; 1259 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  00b7a	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_08KOMAHJJD@Blowfish?$AA@
  00b7f	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL344@TestLegacy:
  00b83	8a 19		 mov	 bl, BYTE PTR [ecx]
  00b85	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00b87	75 1a		 jne	 SHORT $LN345@TestLegacy
  00b89	84 db		 test	 bl, bl
  00b8b	74 12		 je	 SHORT $LN346@TestLegacy
  00b8d	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00b90	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00b93	75 0e		 jne	 SHORT $LN345@TestLegacy
  00b95	83 c1 02	 add	 ecx, 2
  00b98	83 c2 02	 add	 edx, 2
  00b9b	84 db		 test	 bl, bl
  00b9d	75 e4		 jne	 SHORT $LL344@TestLegacy
$LN346@TestLegacy:
  00b9f	33 c9		 xor	 ecx, ecx
  00ba1	eb 05		 jmp	 SHORT $LN347@TestLegacy
$LN345@TestLegacy:
  00ba3	1b c9		 sbb	 ecx, ecx
  00ba5	83 d9 ff	 sbb	 ecx, -1
$LN347@TestLegacy:
  00ba8	85 c9		 test	 ecx, ecx
  00baa	75 11		 jne	 SHORT $LN43@TestLegacy

; 1260 : 				{
; 1261 : 					if (crc != 0x2738426f)

  00bac	3d 6f 42 38 27	 cmp	 eax, 657998447		; 2738426fH
  00bb1	0f 85 d6 00 00
	00		 jne	 $LN193@TestLegacy

; 1262 : 						return FALSE;
; 1263 : 					nTestsPerformed++;

  00bb7	46		 inc	 esi
  00bb8	e9 4b 00 00 00	 jmp	 $LN199@TestLegacy
$LN43@TestLegacy:

; 1264 : 				}
; 1265 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  00bbd	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@
  00bc2	8d 4c 24 20	 lea	 ecx, DWORD PTR _name$[esp+1124]
$LL348@TestLegacy:
  00bc6	8a 19		 mov	 bl, BYTE PTR [ecx]
  00bc8	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00bca	75 1a		 jne	 SHORT $LN349@TestLegacy
  00bcc	84 db		 test	 bl, bl
  00bce	74 12		 je	 SHORT $LN350@TestLegacy
  00bd0	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00bd3	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00bd6	75 0e		 jne	 SHORT $LN349@TestLegacy
  00bd8	83 c1 02	 add	 ecx, 2
  00bdb	83 c2 02	 add	 edx, 2
  00bde	84 db		 test	 bl, bl
  00be0	75 e4		 jne	 SHORT $LL348@TestLegacy
$LN350@TestLegacy:
  00be2	33 c9		 xor	 ecx, ecx
  00be4	eb 05		 jmp	 SHORT $LN351@TestLegacy
$LN349@TestLegacy:
  00be6	1b c9		 sbb	 ecx, ecx
  00be8	83 d9 ff	 sbb	 ecx, -1
$LN351@TestLegacy:
  00beb	85 c9		 test	 ecx, ecx
  00bed	75 0e		 jne	 SHORT $LN40@TestLegacy

; 1266 : 				{
; 1267 : 					if (crc != 0x14f2948a)

  00bef	3d 8a 94 f2 14	 cmp	 eax, 351442058		; 14f2948aH
  00bf4	0f 85 93 00 00
	00		 jne	 $LN193@TestLegacy

; 1268 : 						return FALSE;
; 1269 : 					nTestsPerformed++;

  00bfa	46		 inc	 esi

; 1349 : 			}
; 1350 : 
; 1351 : 			if (crc == 0xb70b4c26)

  00bfb	eb 0b		 jmp	 SHORT $LN199@TestLegacy
$LN40@TestLegacy:
  00bfd	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  00c02	0f 84 85 00 00
	00		 je	 $LN193@TestLegacy
$LN199@TestLegacy:

; 1352 : 				return FALSE;
; 1353 : 
; 1354 : 			DecryptBuffer (buf, sizeof (buf), ci);

  00c08	57		 push	 edi
  00c09	6a 00		 push	 0
  00c0b	8d 54 24 68	 lea	 edx, DWORD PTR _buf$[esp+1132]
  00c0f	68 00 04 00 00	 push	 1024			; 00000400H
  00c14	52		 push	 edx
  00c15	e8 00 00 00 00	 call	 _DecryptBuffer

; 1355 : 
; 1356 : 			if (GetCrc32 (buf, sizeof (buf)) != 0xb70b4c26)

  00c1a	8d 44 24 70	 lea	 eax, DWORD PTR _buf$[esp+1140]
  00c1e	68 00 04 00 00	 push	 1024			; 00000400H
  00c23	50		 push	 eax
  00c24	e8 00 00 00 00	 call	 _GetCrc32
  00c29	83 c4 18	 add	 esp, 24			; 00000018H
  00c2c	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  00c31	0f 85 56 00 00
	00		 jne	 $LN193@TestLegacy

; 1357 : 				return FALSE;
; 1358 : 
; 1359 : 			nTestsPerformed++;

  00c37	46		 inc	 esi
  00c38	bb 01 00 00 00	 mov	 ebx, 1
$LN132@TestLegacy:
  00c3d	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00c40	8b 17		 mov	 edx, DWORD PTR [edi]
  00c42	51		 push	 ecx
  00c43	52		 push	 edx
  00c44	e8 00 00 00 00	 call	 _EAGetNextMode
  00c49	83 c4 08	 add	 esp, 8
  00c4c	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00c4f	85 c0		 test	 eax, eax
  00c51	0f 85 69 f4 ff
	ff		 jne	 $LL133@TestLegacy
$LN136@TestLegacy:

; 1054 : 
; 1055 : 	// Test all EAs
; 1056 : 	for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  00c57	8b 07		 mov	 eax, DWORD PTR [edi]
  00c59	50		 push	 eax
  00c5a	e8 00 00 00 00	 call	 _EAGetNext
  00c5f	83 c4 04	 add	 esp, 4
  00c62	89 07		 mov	 DWORD PTR [edi], eax
  00c64	85 c0		 test	 eax, eax
  00c66	0f 85 04 f4 ff
	ff		 jne	 $LL137@TestLegacy
$LN135@TestLegacy:

; 1360 : 		}
; 1361 : 	}
; 1362 : 	return (nTestsPerformed == 86);

  00c6c	33 c0		 xor	 eax, eax
  00c6e	83 fe 56	 cmp	 esi, 86			; 00000056H
  00c71	0f 94 c0	 sete	 al
$LN144@TestLegacy:

; 1363 : }

  00c74	8b 8c 24 60 04
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1124]
  00c7b	5f		 pop	 edi
  00c7c	5e		 pop	 esi
  00c7d	5d		 pop	 ebp
  00c7e	5b		 pop	 ebx
  00c7f	33 cc		 xor	 ecx, esp
  00c81	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00c86	81 c4 54 04 00
	00		 add	 esp, 1108		; 00000454H
  00c8c	c3		 ret	 0
$LN193@TestLegacy:

; 1062 : 			return FALSE;

  00c8d	33 c0		 xor	 eax, eax
  00c8f	eb e3		 jmp	 SHORT $LN144@TestLegacy
_TestLegacySectorBufEncryption ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_test_hmac_sha512
EXTRN	_hmac_sha512:PROC
; Function compile flags: /Ogtpy
;	COMDAT _test_hmac_sha512
_TEXT	SEGMENT
_nTestsPerformed$ = -72					; size = 4
_digest$79274 = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_test_hmac_sha512 PROC					; COMDAT

; 1587 : {

  00000	83 ec 48	 sub	 esp, 72			; 00000048H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 44	 mov	 DWORD PTR __$ArrayPad$[esp+72], eax
  0000e	53		 push	 ebx
  0000f	55		 push	 ebp
  00010	56		 push	 esi

; 1588 : 	unsigned int i;
; 1589 : 	int nTestsPerformed = 0;

  00011	33 f6		 xor	 esi, esi
  00013	57		 push	 edi
  00014	89 74 24 10	 mov	 DWORD PTR _nTestsPerformed$[esp+88], esi
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL5@test_hmac_:

; 1590 : 
; 1591 : 	for (i = 0; i < sizeof (hmac_sha512_test_data) / sizeof(char *); i++)
; 1592 : 	{
; 1593 : 		char digest[SHA512_DIGESTSIZE];
; 1594 : 		hmac_sha512 (hmac_sha512_test_keys[i], (int) strlen (hmac_sha512_test_keys[i]), hmac_sha512_test_data[i], (int) strlen (hmac_sha512_test_data[i]), digest, SHA512_DIGESTSIZE);

  00020	8b 9e 00 00 00
	00		 mov	 ebx, DWORD PTR _hmac_sha512_test_data[esi]
  00026	8b c3		 mov	 eax, ebx
  00028	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0002b	eb 03 8d 49 00	 npad	 5
$LL18@test_hmac_:
  00030	8a 08		 mov	 cl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 c9		 test	 cl, cl
  00035	75 f9		 jne	 SHORT $LL18@test_hmac_
  00037	8b 8e 00 00 00
	00		 mov	 ecx, DWORD PTR _hmac_sha512_test_keys[esi]
  0003d	2b c2		 sub	 eax, edx
  0003f	8b f8		 mov	 edi, eax
  00041	8b c1		 mov	 eax, ecx
  00043	8d 68 01	 lea	 ebp, DWORD PTR [eax+1]
$LL19@test_hmac_:
  00046	8a 10		 mov	 dl, BYTE PTR [eax]
  00048	40		 inc	 eax
  00049	84 d2		 test	 dl, dl
  0004b	75 f9		 jne	 SHORT $LL19@test_hmac_
  0004d	6a 40		 push	 64			; 00000040H
  0004f	8d 54 24 18	 lea	 edx, DWORD PTR _digest$79274[esp+92]
  00053	52		 push	 edx
  00054	57		 push	 edi
  00055	2b c5		 sub	 eax, ebp
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 _hmac_sha512

; 1595 : 		if (memcmp (digest, hmac_sha512_test_vectors[i], SHA512_DIGESTSIZE) != 0)

  0005f	8b 86 00 00 00
	00		 mov	 eax, DWORD PTR _hmac_sha512_test_vectors[esi]
  00065	8d 4c 24 2c	 lea	 ecx, DWORD PTR _digest$79274[esp+112]
  00069	83 c4 18	 add	 esp, 24			; 00000018H
  0006c	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00071	2b c8		 sub	 ecx, eax
$LL9@test_hmac_:
  00073	8b 3c 01	 mov	 edi, DWORD PTR [ecx+eax]
  00076	3b 38		 cmp	 edi, DWORD PTR [eax]
  00078	75 34		 jne	 SHORT $LN11@test_hmac_
  0007a	83 ea 04	 sub	 edx, 4
  0007d	83 c0 04	 add	 eax, 4
  00080	83 fa 04	 cmp	 edx, 4
  00083	73 ee		 jae	 SHORT $LL9@test_hmac_

; 1596 : 			return FALSE;
; 1597 : 		else
; 1598 : 			nTestsPerformed++;

  00085	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+88]
  00089	83 c6 04	 add	 esi, 4
  0008c	83 fe 18	 cmp	 esi, 24			; 00000018H
  0008f	72 8f		 jb	 SHORT $LL5@test_hmac_
  00091	5f		 pop	 edi

; 1599 : 	}
; 1600 : 
; 1601 : 	return (nTestsPerformed == 6);

  00092	33 c0		 xor	 eax, eax
  00094	83 7c 24 0c 06	 cmp	 DWORD PTR _nTestsPerformed$[esp+84], 6
  00099	5e		 pop	 esi
  0009a	5d		 pop	 ebp
  0009b	0f 94 c0	 sete	 al
  0009e	5b		 pop	 ebx

; 1602 : }

  0009f	8b 4c 24 44	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+72]
  000a3	33 cc		 xor	 ecx, esp
  000a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000aa	83 c4 48	 add	 esp, 72			; 00000048H
  000ad	c3		 ret	 0
$LN11@test_hmac_:
  000ae	8b 4c 24 54	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+88]
  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5d		 pop	 ebp
  000b5	5b		 pop	 ebx
  000b6	33 cc		 xor	 ecx, esp
  000b8	33 c0		 xor	 eax, eax
  000ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bf	83 c4 48	 add	 esp, 72			; 00000048H
  000c2	c3		 ret	 0
_test_hmac_sha512 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_test_hmac_sha1
EXTRN	_hmac_sha1:PROC
; Function compile flags: /Ogtpy
;	COMDAT _test_hmac_sha1
_TEXT	SEGMENT
_nTestsPerformed$ = -28					; size = 4
_digest$79285 = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_test_hmac_sha1 PROC					; COMDAT

; 1605 : {

  00000	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 18	 mov	 DWORD PTR __$ArrayPad$[esp+28], eax
  0000e	53		 push	 ebx
  0000f	55		 push	 ebp
  00010	56		 push	 esi

; 1606 : 	// Deprecated/legacy
; 1607 : 
; 1608 : 	int nTestsPerformed = 0;

  00011	33 f6		 xor	 esi, esi
  00013	57		 push	 edi
  00014	89 74 24 10	 mov	 DWORD PTR _nTestsPerformed$[esp+44], esi
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL5@test_hmac_@2:

; 1609 : 	int i;
; 1610 : 
; 1611 : 	for (i = 0; i < 3; i++)
; 1612 : 	{
; 1613 : 		char digest[SHA1_DIGESTSIZE];
; 1614 : 		hmac_sha1 (hmac_sha1_test_keys[i], (int) strlen (hmac_sha1_test_keys[i]), hmac_sha1_test_data[i], (int) strlen (hmac_sha1_test_data[i]), digest, SHA1_DIGESTSIZE);

  00020	8b 9e 00 00 00
	00		 mov	 ebx, DWORD PTR _hmac_sha1_test_data[esi]
  00026	8b c3		 mov	 eax, ebx
  00028	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0002b	eb 03 8d 49 00	 npad	 5
$LL18@test_hmac_@2:
  00030	8a 08		 mov	 cl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 c9		 test	 cl, cl
  00035	75 f9		 jne	 SHORT $LL18@test_hmac_@2
  00037	8b 8e 00 00 00
	00		 mov	 ecx, DWORD PTR _hmac_sha1_test_keys[esi]
  0003d	2b c2		 sub	 eax, edx
  0003f	8b f8		 mov	 edi, eax
  00041	8b c1		 mov	 eax, ecx
  00043	8d 68 01	 lea	 ebp, DWORD PTR [eax+1]
$LL19@test_hmac_@2:
  00046	8a 10		 mov	 dl, BYTE PTR [eax]
  00048	40		 inc	 eax
  00049	84 d2		 test	 dl, dl
  0004b	75 f9		 jne	 SHORT $LL19@test_hmac_@2
  0004d	6a 14		 push	 20			; 00000014H
  0004f	8d 54 24 18	 lea	 edx, DWORD PTR _digest$79285[esp+48]
  00053	52		 push	 edx
  00054	57		 push	 edi
  00055	2b c5		 sub	 eax, ebp
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 _hmac_sha1

; 1615 : 		if (memcmp (digest, hmac_sha1_test_vectors[i], SHA1_DIGESTSIZE) != 0)

  0005f	8b 86 00 00 00
	00		 mov	 eax, DWORD PTR _hmac_sha1_test_vectors[esi]
  00065	8d 4c 24 2c	 lea	 ecx, DWORD PTR _digest$79285[esp+68]
  00069	83 c4 18	 add	 esp, 24			; 00000018H
  0006c	ba 14 00 00 00	 mov	 edx, 20			; 00000014H
  00071	2b c8		 sub	 ecx, eax
$LL9@test_hmac_@2:
  00073	8b 3c 01	 mov	 edi, DWORD PTR [ecx+eax]
  00076	3b 38		 cmp	 edi, DWORD PTR [eax]
  00078	75 34		 jne	 SHORT $LN11@test_hmac_@2
  0007a	83 ea 04	 sub	 edx, 4
  0007d	83 c0 04	 add	 eax, 4
  00080	83 fa 04	 cmp	 edx, 4
  00083	73 ee		 jae	 SHORT $LL9@test_hmac_@2

; 1616 : 			return FALSE;
; 1617 : 		else
; 1618 : 			nTestsPerformed++;

  00085	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+44]
  00089	83 c6 04	 add	 esi, 4
  0008c	83 fe 0c	 cmp	 esi, 12			; 0000000cH
  0008f	7c 8f		 jl	 SHORT $LL5@test_hmac_@2
  00091	5f		 pop	 edi

; 1619 : 	}
; 1620 : 
; 1621 : 	return (nTestsPerformed == 3);

  00092	33 c0		 xor	 eax, eax
  00094	83 7c 24 0c 03	 cmp	 DWORD PTR _nTestsPerformed$[esp+40], 3
  00099	5e		 pop	 esi
  0009a	5d		 pop	 ebp
  0009b	0f 94 c0	 sete	 al
  0009e	5b		 pop	 ebx

; 1622 : }

  0009f	8b 4c 24 18	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+28]
  000a3	33 cc		 xor	 ecx, esp
  000a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000aa	83 c4 1c	 add	 esp, 28			; 0000001cH
  000ad	c3		 ret	 0
$LN11@test_hmac_@2:
  000ae	8b 4c 24 28	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+44]
  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5d		 pop	 ebp
  000b5	5b		 pop	 ebx
  000b6	33 cc		 xor	 ecx, esp
  000b8	33 c0		 xor	 eax, eax
  000ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bf	83 c4 1c	 add	 esp, 28			; 0000001cH
  000c2	c3		 ret	 0
_test_hmac_sha1 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_test_hmac_ripemd160
EXTRN	_hmac_ripemd160:PROC
; Function compile flags: /Ogtpy
;	COMDAT _test_hmac_ripemd160
_TEXT	SEGMENT
_digest$79297 = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_test_hmac_ripemd160 PROC				; COMDAT

; 1625 : {

  00000	83 ec 18	 sub	 esp, 24			; 00000018H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 14	 mov	 DWORD PTR __$ArrayPad$[esp+24], eax
  0000e	53		 push	 ebx
  0000f	56		 push	 esi

; 1626 : 	int nTestsPerformed = 0;

  00010	33 db		 xor	 ebx, ebx
  00012	57		 push	 edi

; 1627 : 	unsigned int i;
; 1628 : 
; 1629 : 	for (i = 0; i < sizeof (hmac_ripemd160_test_data) / sizeof(char *); i++)

  00013	33 f6		 xor	 esi, esi
$LL5@test_hmac_@3:

; 1630 : 	{
; 1631 : 		char digest[RIPEMD160_DIGESTSIZE];
; 1632 : 		hmac_ripemd160 (hmac_ripemd160_test_keys[i], RIPEMD160_DIGESTSIZE, hmac_ripemd160_test_data[i], (int) strlen (hmac_ripemd160_test_data[i]), digest);

  00015	8b 8e 00 00 00
	00		 mov	 ecx, DWORD PTR _hmac_ripemd160_test_data[esi]
  0001b	8b c1		 mov	 eax, ecx
  0001d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL18@test_hmac_@3:
  00020	8a 10		 mov	 dl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 d2		 test	 dl, dl
  00025	75 f9		 jne	 SHORT $LL18@test_hmac_@3
  00027	8d 54 24 0c	 lea	 edx, DWORD PTR _digest$79297[esp+36]
  0002b	52		 push	 edx
  0002c	2b c7		 sub	 eax, edi
  0002e	50		 push	 eax
  0002f	8b 86 00 00 00
	00		 mov	 eax, DWORD PTR _hmac_ripemd160_test_keys[esi]
  00035	51		 push	 ecx
  00036	6a 14		 push	 20			; 00000014H
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _hmac_ripemd160

; 1633 : 		if (memcmp (digest, hmac_ripemd160_test_vectors[i], RIPEMD160_DIGESTSIZE) != 0)

  0003e	8b 86 00 00 00
	00		 mov	 eax, DWORD PTR _hmac_ripemd160_test_vectors[esi]
  00044	8d 54 24 20	 lea	 edx, DWORD PTR _digest$79297[esp+56]
  00048	83 c4 14	 add	 esp, 20			; 00000014H
  0004b	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00050	2b d0		 sub	 edx, eax
$LL9@test_hmac_@3:
  00052	8b 3c 02	 mov	 edi, DWORD PTR [edx+eax]
  00055	3b 38		 cmp	 edi, DWORD PTR [eax]
  00057	75 2e		 jne	 SHORT $LN11@test_hmac_@3
  00059	83 e9 04	 sub	 ecx, 4
  0005c	83 c0 04	 add	 eax, 4
  0005f	83 f9 04	 cmp	 ecx, 4
  00062	73 ee		 jae	 SHORT $LL9@test_hmac_@3
  00064	83 c6 04	 add	 esi, 4

; 1634 : 			return FALSE;
; 1635 : 		else
; 1636 : 			nTestsPerformed++;

  00067	43		 inc	 ebx
  00068	83 fe 08	 cmp	 esi, 8
  0006b	72 a8		 jb	 SHORT $LL5@test_hmac_@3
  0006d	5f		 pop	 edi

; 1637 : 	}
; 1638 : 
; 1639 : 	return (nTestsPerformed == 2);

  0006e	33 c0		 xor	 eax, eax
  00070	83 fb 02	 cmp	 ebx, 2
  00073	5e		 pop	 esi
  00074	0f 94 c0	 sete	 al
  00077	5b		 pop	 ebx

; 1640 : }

  00078	8b 4c 24 14	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+24]
  0007c	33 cc		 xor	 ecx, esp
  0007e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00083	83 c4 18	 add	 esp, 24			; 00000018H
  00086	c3		 ret	 0
$LN11@test_hmac_@3:
  00087	8b 4c 24 20	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+36]
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	33 cc		 xor	 ecx, esp
  00090	33 c0		 xor	 eax, eax
  00092	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00097	83 c4 18	 add	 esp, 24			; 00000018H
  0009a	c3		 ret	 0
_test_hmac_ripemd160 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_test_hmac_whirlpool
EXTRN	_hmac_whirlpool:PROC
; Function compile flags: /Ogtpy
;	COMDAT _test_hmac_whirlpool
_TEXT	SEGMENT
_digest$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_test_hmac_whirlpool PROC				; COMDAT

; 1643 : {

  00000	83 ec 44	 sub	 esp, 68			; 00000044H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 40	 mov	 DWORD PTR __$ArrayPad$[esp+68], eax

; 1644 : 	unsigned char digest[WHIRLPOOL_DIGESTSIZE];
; 1645 : 
; 1646 : 	hmac_whirlpool (hmac_whirlpool_test_key, 64, hmac_whirlpool_test_data, (int) strlen (hmac_whirlpool_test_data), digest, WHIRLPOOL_DIGESTSIZE);

  0000e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hmac_whirlpool_test_data
  00014	8b c2		 mov	 eax, edx
  00016	56		 push	 esi
  00017	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL12@test_hmac_@4:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL12@test_hmac_@4
  00027	6a 40		 push	 64			; 00000040H
  00029	8d 4c 24 08	 lea	 ecx, DWORD PTR _digest$[esp+76]
  0002d	51		 push	 ecx
  0002e	2b c6		 sub	 eax, esi
  00030	50		 push	 eax
  00031	52		 push	 edx
  00032	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hmac_whirlpool_test_key
  00038	6a 40		 push	 64			; 00000040H
  0003a	52		 push	 edx
  0003b	e8 00 00 00 00	 call	 _hmac_whirlpool

; 1647 : 	if (memcmp (digest, hmac_whirlpool_test_vectors, WHIRLPOOL_DIGESTSIZE) != 0)

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR _hmac_whirlpool_test_vectors
  00045	8d 54 24 1c	 lea	 edx, DWORD PTR _digest$[esp+96]
  00049	83 c4 18	 add	 esp, 24			; 00000018H
  0004c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00051	2b d0		 sub	 edx, eax
$LL5@test_hmac_@4:
  00053	8b 34 02	 mov	 esi, DWORD PTR [edx+eax]
  00056	3b 30		 cmp	 esi, DWORD PTR [eax]
  00058	75 20		 jne	 SHORT $LN7@test_hmac_@4
  0005a	83 e9 04	 sub	 ecx, 4
  0005d	83 c0 04	 add	 eax, 4
  00060	83 f9 04	 cmp	 ecx, 4
  00063	73 ee		 jae	 SHORT $LL5@test_hmac_@4

; 1648 : 		return FALSE;
; 1649 : 
; 1650 : 	return TRUE;

  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	5e		 pop	 esi

; 1651 : }

  0006b	8b 4c 24 40	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+68]
  0006f	33 cc		 xor	 ecx, esp
  00071	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00076	83 c4 44	 add	 esp, 68			; 00000044H
  00079	c3		 ret	 0
$LN7@test_hmac_@4:
  0007a	8b 4c 24 44	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+72]
  0007e	5e		 pop	 esi
  0007f	33 cc		 xor	 ecx, esp
  00081	33 c0		 xor	 eax, eax
  00083	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00088	83 c4 44	 add	 esp, 68			; 00000044H
  0008b	c3		 ret	 0
_test_hmac_whirlpool ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@ ; `string'
PUBLIC	??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@ ; `string'
PUBLIC	??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@ ; `string'
PUBLIC	??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@ ; `string'
PUBLIC	??_C@_08NLHBPEGP@password?$AA@			; `string'
PUBLIC	??_C@_04NDGDACAK@?$BC4Vx?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_test_pkcs5
EXTRN	_derive_key_whirlpool:PROC
EXTRN	_derive_key_ripemd160:PROC
EXTRN	_derive_key_sha1:PROC
EXTRN	_derive_key_sha512:PROC
;	COMDAT ??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@
CONST	SEGMENT
??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@ DB 'P'
	DB	'|6o', 0eeH, 010H, '.', 09aH, 0e2H, 08aH, 0d5H, 082H, 'r}''', 0fH
	DB	0e8H, 'M', 07fH, 'hz', 0cfH, 0b5H, 0e7H, 'Cg', 0aaH, 098H, 093H
	DB	'R+', 09H, 'nB', 0dfH, ',YJ', 091H, 'm~', 010H, 0aeH, 0b2H, 01aH
	DB	089H, 08fH, 0b9H, 08fH, 0e6H, '1', 0a9H, 0d8H, 09fH, 098H, '&', 0f4H
	DB	0daH, 0cdH, '}ee', 0deH, 010H, 095H, 091H, 0b4H, 084H, '&', 0aeH
	DB	'C', 0a1H, 00H, '[', 01eH, 0b8H, '8', 097H, 0a4H, 01eH, 'K', 0d2H
	DB	'ed', 0bcH, 0faH, 01fH, '5', 085H, 0dbH, 'O', 097H, 'eo', 0bdH
	DB	'$', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@
CONST	SEGMENT
??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@ DB 'z'
	DB	'=|', 03H, 0e7H, '&k', 0f8H, '=x', 0fbH, ')', 0d2H, 'd', 01fH, 'V'
	DB	0eaH, 0f0H, 0e5H, 0f5H, 0ccH, 0c4H, ':1', 0a8H, 084H, 'p', 0bfH
	DB	0bdH, 'o', 08eH, 'x$Z', 0c0H, 0aH, 0f6H, 0faH, 0f0H, 0f6H, 0e9H
	DB	00H, 'G_s', 0ceH, 0e1H, 'C', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@
CONST	SEGMENT
??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@ DB '\'
	DB	'u', 0ceH, 0f0H, 01aH, 096H, 0dH, 0f7H, 'L', 0b6H, 0b4H, 09bH, 09eH
	DB	'8', 0e6H, 0b5H, ';', 011H, 080H, 0e3H, '/', 0f7H, 0e0H, 0ddH, 0aaH
	DB	0caH, 08fH, 081H, '''', 0f6H, 09fH, 'O', 01dH, 0c8H, '/H-', 0dbH
	DB	01aH, 0aH, 0caH, 090H, 0cbH, 080H, 0b9H, '.', 090H, 09eH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@
CONST	SEGMENT
??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@ DB 013H
	DB	'd', 0aeH, 0f8H, 0dH, 0f5H, 'Wl0', 0d5H, 'qL', 0a7H, 'u?', 0fdH
	DB	00H, 0e5H, '%', 08bH, '9', 0c7H, 'D', 07fH, 0ceH, '#=', 08H, 'u'
	DB	0e0H, '/H', 0d6H, '0', 0d7H, 00H, 0b6H, '$', 0dbH, 0e0H, 'Z', 0d7H
	DB	'G', 0efH, 'R', 0caH, 0a6H, '4', 083H, 'G', 0e5H, 0cbH, 0e9H, 087H
	DB	0f1H, ' Yj', 0e6H, 0a9H, 0cfH, 'Qx', 0c6H, 0b6H, '#', 0a6H, 't'
	DB	0dH, 0e8H, 091H, 0beH, 01aH, 0d0H, '(', 0ccH, 0ceH, 016H, 098H
	DB	09aH, 0beH, 0fbH, 0dcH, 'x', 0c9H, 0e1H, '}rg', 0ceH, 0e1H, 'a'
	DB	'V_', 096H, 'h', 0e6H, 0e1H, 0ddH, 0f4H, 0bfH, 01bH, 080H, 0e0H
	DB	019H, 01cH, 0f4H, 0c4H, 0d3H, 0ddH, 0d5H, 0d5H, 'W-', 083H, 0c7H
	DB	0a3H, '7', 087H, 0f4H, 'N', 0e0H, 0f6H, 0d8H, 'me', 0dcH, 0a0H
	DB	'R', 0a3H, 013H, 0beH, 081H, 0fcH, '0', 0beH, '}iX4', 0b6H, 0ddH
	DB	'A', 0c6H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08NLHBPEGP@password?$AA@
CONST	SEGMENT
??_C@_08NLHBPEGP@password?$AA@ DB 'password', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04NDGDACAK@?$BC4Vx?$AA@
CONST	SEGMENT
??_C@_04NDGDACAK@?$BC4Vx?$AA@ DB 012H, '4Vx', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _test_pkcs5
_TEXT	SEGMENT
_dk$ = -148						; size = 144
__$ArrayPad$ = -4					; size = 4
_test_pkcs5 PROC					; COMDAT

; 1654 : {

  00000	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 90 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+148], eax

; 1655 : 	char dk[144];
; 1656 : 
; 1657 : 	/* HMAC-SHA-512 tests */
; 1658 : 	if (!test_hmac_sha512())

  00014	e8 00 00 00 00	 call	 _test_hmac_sha512
  00019	85 c0		 test	 eax, eax

; 1659 : 		return FALSE;

  0001b	0f 84 ff 01 00
	00		 je	 $LN18@test_pkcs5

; 1660 : 
; 1661 : 	/* HMAC-SHA-1 tests (deprecated/legacy)  */
; 1662 : 	if (test_hmac_sha1() == FALSE)

  00021	e8 00 00 00 00	 call	 _test_hmac_sha1
  00026	85 c0		 test	 eax, eax

; 1663 : 		return FALSE;

  00028	0f 84 f2 01 00
	00		 je	 $LN18@test_pkcs5

; 1664 : 
; 1665 : 	/* HMAC-RIPEMD-160 tests */
; 1666 : 	if (test_hmac_ripemd160() == FALSE)

  0002e	e8 00 00 00 00	 call	 _test_hmac_ripemd160
  00033	85 c0		 test	 eax, eax

; 1667 : 		return FALSE;

  00035	0f 84 e5 01 00
	00		 je	 $LN18@test_pkcs5

; 1668 : 
; 1669 : 	/* HMAC-Whirlpool tests */
; 1670 : 	if (test_hmac_whirlpool() == FALSE)

  0003b	e8 00 00 00 00	 call	 _test_hmac_whirlpool
  00040	85 c0		 test	 eax, eax

; 1671 : 		return FALSE;

  00042	0f 84 d8 01 00
	00		 je	 $LN18@test_pkcs5

; 1672 : 
; 1673 : 	/* PKCS-5 test 1 with HMAC-SHA-512 used as the PRF */
; 1674 : 	derive_key_sha512 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  00048	6a 04		 push	 4
  0004a	8d 44 24 04	 lea	 eax, DWORD PTR _dk$[esp+152]
  0004e	50		 push	 eax
  0004f	6a 05		 push	 5
  00051	6a 04		 push	 4
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@
  00058	6a 08		 push	 8
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@
  0005f	e8 00 00 00 00	 call	 _derive_key_sha512
  00064	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1675 : 	if (memcmp (dk, "\x13\x64\xae\xf8", 4) != 0)

  00067	81 3c 24 13 64
	ae f8		 cmp	 DWORD PTR _dk$[esp+148], -122788845 ; f8ae6413H
  0006e	0f 85 ac 01 00
	00		 jne	 $LN18@test_pkcs5

; 1676 : 		return FALSE;
; 1677 : 
; 1678 : 	/* PKCS-5 test 2 with HMAC-SHA-512 used as the PRF (derives a key longer than the underlying
; 1679 : 	hash output size and block size) */
; 1680 : 	derive_key_sha512 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 144);

  00074	68 90 00 00 00	 push	 144			; 00000090H
  00079	8d 4c 24 04	 lea	 ecx, DWORD PTR _dk$[esp+152]
  0007d	51		 push	 ecx
  0007e	6a 05		 push	 5
  00080	6a 04		 push	 4
  00082	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@
  00087	6a 08		 push	 8
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@
  0008e	e8 00 00 00 00	 call	 _derive_key_sha512
  00093	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1681 : 	if (memcmp (dk, "\x13\x64\xae\xf8\x0d\xf5\x57\x6c\x30\xd5\x71\x4c\xa7\x75\x3f\xfd\x00\xe5\x25\x8b\x39\xc7\x44\x7f\xce\x23\x3d\x08\x75\xe0\x2f\x48\xd6\x30\xd7\x00\xb6\x24\xdb\xe0\x5a\xd7\x47\xef\x52\xca\xa6\x34\x83\x47\xe5\xcb\xe9\x87\xf1\x20\x59\x6a\xe6\xa9\xcf\x51\x78\xc6\xb6\x23\xa6\x74\x0d\xe8\x91\xbe\x1a\xd0\x28\xcc\xce\x16\x98\x9a\xbe\xfb\xdc\x78\xc9\xe1\x7d\x72\x67\xce\xe1\x61\x56\x5f\x96\x68\xe6\xe1\xdd\xf4\xbf\x1b\x80\xe0\x19\x1c\xf4\xc4\xd3\xdd\xd5\xd5\x57\x2d\x83\xc7\xa3\x37\x87\xf4\x4e\xe0\xf6\xd8\x6d\x65\xdc\xa0\x52\xa3\x13\xbe\x81\xfc\x30\xbe\x7d\x69\x58\x34\xb6\xdd\x41\xc6", 144) != 0)

  00096	b8 90 00 00 00	 mov	 eax, 144		; 00000090H
  0009b	33 c9		 xor	 ecx, ecx
  0009d	8d 49 00	 npad	 3
$LL20@test_pkcs5:
  000a0	8b 14 0c	 mov	 edx, DWORD PTR _dk$[esp+ecx+148]
  000a3	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR ??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@[ecx]
  000a9	0f 85 71 01 00
	00		 jne	 $LN18@test_pkcs5
  000af	83 e8 04	 sub	 eax, 4
  000b2	83 c1 04	 add	 ecx, 4
  000b5	83 f8 04	 cmp	 eax, 4
  000b8	73 e6		 jae	 SHORT $LL20@test_pkcs5

; 1682 : 		return FALSE;
; 1683 : 
; 1684 : 	/* PKCS-5 test 1 with HMAC-SHA-1 (deprecated/legacy) used as the PRF (derives a key longer than the underlying hash) */
; 1685 : 	derive_key_sha1 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 48);

  000ba	6a 30		 push	 48			; 00000030H
  000bc	8d 44 24 04	 lea	 eax, DWORD PTR _dk$[esp+152]
  000c0	50		 push	 eax
  000c1	6a 05		 push	 5
  000c3	6a 04		 push	 4
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@
  000ca	6a 08		 push	 8
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@
  000d1	e8 00 00 00 00	 call	 _derive_key_sha1
  000d6	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1686 : 	if (memcmp (dk, "\x5c\x75\xce\xf0\x1a\x96\x0d\xf7\x4c\xb6\xb4\x9b\x9e\x38\xe6\xb5\x3b\x11\x80\xe3\x2f\xf7\xe0\xdd\xaa\xca\x8f\x81\x27\xf6\x9f\x4f\x1d\xc8\x2f\x48\x2d\xdb\x1a\x0a\xca\x90\xcb\x80\xb9\x2e\x90\x9e", 48) != 0)

  000d9	b8 30 00 00 00	 mov	 eax, 48			; 00000030H
  000de	33 c9		 xor	 ecx, ecx
$LL24@test_pkcs5:
  000e0	8b 14 0c	 mov	 edx, DWORD PTR _dk$[esp+ecx+148]
  000e3	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR ??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@[ecx]
  000e9	0f 85 31 01 00
	00		 jne	 $LN18@test_pkcs5
  000ef	83 e8 04	 sub	 eax, 4
  000f2	83 c1 04	 add	 ecx, 4
  000f5	83 f8 04	 cmp	 eax, 4
  000f8	73 e6		 jae	 SHORT $LL24@test_pkcs5

; 1687 : 		return FALSE;
; 1688 : 
; 1689 : 	/* PKCS-5 test 2 with HMAC-SHA-1 (deprecated/legacy) used as the PRF */
; 1690 : 	derive_key_sha1 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  000fa	6a 04		 push	 4
  000fc	8d 44 24 04	 lea	 eax, DWORD PTR _dk$[esp+152]
  00100	50		 push	 eax
  00101	6a 05		 push	 5
  00103	6a 04		 push	 4
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@
  0010a	6a 08		 push	 8
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@
  00111	e8 00 00 00 00	 call	 _derive_key_sha1
  00116	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1691 : 	if (memcmp (dk, "\x5c\x75\xce\xf0", 4) != 0)

  00119	81 3c 24 5c 75
	ce f0		 cmp	 DWORD PTR _dk$[esp+148], -254904996 ; f0ce755cH
  00120	0f 85 fa 00 00
	00		 jne	 $LN18@test_pkcs5

; 1692 : 		return FALSE;
; 1693 : 
; 1694 : #if 0	// This test is disabled because it uses 1200 iterations (to prevent startup slowdown)
; 1695 : 	/* PKCS-5 test 3 with HMAC-SHA-1 (deprecated/legacy) used as the PRF */
; 1696 : 	derive_key_sha1 ("password", 8, "ATHENA.MIT.EDUraeburn", 21, 1200, dk, 16);
; 1697 : 	if (memcmp (dk, "\x5c\x08\xeb\x61\xfd\xf7\x1e\x4e\x4e\xc3\xcf\x6b\xa1\xf5\x51\x2b", 16) != 0)
; 1698 : 		return FALSE;
; 1699 : #endif
; 1700 : 
; 1701 : 	/* PKCS-5 test 1 with HMAC-RIPEMD-160 used as the PRF */
; 1702 : 	derive_key_ripemd160 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  00126	6a 04		 push	 4
  00128	8d 4c 24 04	 lea	 ecx, DWORD PTR _dk$[esp+152]
  0012c	51		 push	 ecx
  0012d	6a 05		 push	 5
  0012f	6a 04		 push	 4
  00131	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@
  00136	6a 08		 push	 8
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@
  0013d	e8 00 00 00 00	 call	 _derive_key_ripemd160
  00142	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1703 : 	if (memcmp (dk, "\x7a\x3d\x7c\x03", 4) != 0)

  00145	81 3c 24 7a 3d
	7c 03		 cmp	 DWORD PTR _dk$[esp+148], 58473850 ; 037c3d7aH
  0014c	0f 85 ce 00 00
	00		 jne	 $LN18@test_pkcs5

; 1704 : 		return FALSE;
; 1705 : 
; 1706 : 	/* PKCS-5 test 2 with HMAC-RIPEMD-160 used as the PRF (derives a key longer than the underlying hash) */
; 1707 : 	derive_key_ripemd160 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 48);

  00152	6a 30		 push	 48			; 00000030H
  00154	8d 54 24 04	 lea	 edx, DWORD PTR _dk$[esp+152]
  00158	52		 push	 edx
  00159	6a 05		 push	 5
  0015b	6a 04		 push	 4
  0015d	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@
  00162	6a 08		 push	 8
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@
  00169	e8 00 00 00 00	 call	 _derive_key_ripemd160
  0016e	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1708 : 	if (memcmp (dk, "\x7a\x3d\x7c\x03\xe7\x26\x6b\xf8\x3d\x78\xfb\x29\xd2\x64\x1f\x56\xea\xf0\xe5\xf5\xcc\xc4\x3a\x31\xa8\x84\x70\xbf\xbd\x6f\x8e\x78\x24\x5a\xc0\x0a\xf6\xfa\xf0\xf6\xe9\x00\x47\x5f\x73\xce\xe1\x43", 48) != 0)

  00171	b8 30 00 00 00	 mov	 eax, 48			; 00000030H
  00176	33 c9		 xor	 ecx, ecx
  00178	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL36@test_pkcs5:
  00180	8b 14 0c	 mov	 edx, DWORD PTR _dk$[esp+ecx+148]
  00183	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR ??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@[ecx]
  00189	0f 85 91 00 00
	00		 jne	 $LN18@test_pkcs5
  0018f	83 e8 04	 sub	 eax, 4
  00192	83 c1 04	 add	 ecx, 4
  00195	83 f8 04	 cmp	 eax, 4
  00198	73 e6		 jae	 SHORT $LL36@test_pkcs5

; 1709 : 		return FALSE;
; 1710 : 
; 1711 : 	/* PKCS-5 test 1 with HMAC-Whirlpool used as the PRF */
; 1712 : 	derive_key_whirlpool ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  0019a	6a 04		 push	 4
  0019c	8d 44 24 04	 lea	 eax, DWORD PTR _dk$[esp+152]
  001a0	50		 push	 eax
  001a1	6a 05		 push	 5
  001a3	6a 04		 push	 4
  001a5	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@
  001aa	6a 08		 push	 8
  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@
  001b1	e8 00 00 00 00	 call	 _derive_key_whirlpool
  001b6	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1713 : 	if (memcmp (dk, "\x50\x7c\x36\x6f", 4) != 0)

  001b9	81 3c 24 50 7c
	36 6f		 cmp	 DWORD PTR _dk$[esp+148], 1865841744 ; 6f367c50H
  001c0	75 5e		 jne	 SHORT $LN18@test_pkcs5

; 1714 : 		return FALSE;
; 1715 : 
; 1716 : 	/* PKCS-5 test 2 with HMAC-Whirlpool used as the PRF (derives a key longer than the underlying hash) */
; 1717 : 	derive_key_whirlpool ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 96);

  001c2	6a 60		 push	 96			; 00000060H
  001c4	8d 4c 24 04	 lea	 ecx, DWORD PTR _dk$[esp+152]
  001c8	51		 push	 ecx
  001c9	6a 05		 push	 5
  001cb	6a 04		 push	 4
  001cd	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@
  001d2	6a 08		 push	 8
  001d4	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@
  001d9	e8 00 00 00 00	 call	 _derive_key_whirlpool
  001de	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1718 : 	if (memcmp (dk, "\x50\x7c\x36\x6f\xee\x10\x2e\x9a\xe2\x8a\xd5\x82\x72\x7d\x27\x0f\xe8\x4d\x7f\x68\x7a\xcf\xb5\xe7\x43\x67\xaa\x98\x93\x52\x2b\x09\x6e\x42\xdf\x2c\x59\x4a\x91\x6d\x7e\x10\xae\xb2\x1a\x89\x8f\xb9\x8f\xe6\x31\xa9\xd8\x9f\x98\x26\xf4\xda\xcd\x7d\x65\x65\xde\x10\x95\x91\xb4\x84\x26\xae\x43\xa1\x00\x5b\x1e\xb8\x38\x97\xa4\x1e\x4b\xd2\x65\x64\xbc\xfa\x1f\x35\x85\xdb\x4f\x97\x65\x6f\xbd\x24", 96) != 0)

  001e1	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  001e6	33 c9		 xor	 ecx, ecx
  001e8	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL44@test_pkcs5:
  001f0	8b 14 0c	 mov	 edx, DWORD PTR _dk$[esp+ecx+148]
  001f3	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR ??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@[ecx]
  001f9	75 25		 jne	 SHORT $LN18@test_pkcs5
  001fb	83 e8 04	 sub	 eax, 4
  001fe	83 c1 04	 add	 ecx, 4
  00201	83 f8 04	 cmp	 eax, 4
  00204	73 ea		 jae	 SHORT $LL44@test_pkcs5

; 1719 : 		return FALSE;
; 1720 : 
; 1721 : 	return TRUE;

  00206	b8 01 00 00 00	 mov	 eax, 1

; 1722 : }

  0020b	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+148]
  00212	33 cc		 xor	 ecx, esp
  00214	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00219	81 c4 94 00 00
	00		 add	 esp, 148		; 00000094H
  0021f	c3		 ret	 0
$LN18@test_pkcs5:
  00220	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+148]
  00227	33 cc		 xor	 ecx, esp
  00229	33 c0		 xor	 eax, eax
  0022b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00230	81 c4 94 00 00
	00		 add	 esp, 148		; 00000094H
  00236	c3		 ret	 0
_test_pkcs5 ENDP
_TEXT	ENDS
PUBLIC	_ci$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_TestSectorBufEncryption
EXTRN	_EAIsModeSupported:PROC
; Function compile flags: /Ogtpy
;	COMDAT _TestSectorBufEncryption
_TEXT	SEGMENT
_nTestsPerformed$ = -2144				; size = 4
_ci$GSCopy$ = -2140					; size = 4
_writeOffset$ = -2136					; size = 8
_unitNo$ = -2128					; size = 8
_name$ = -2120						; size = 64
_buf$ = -2056						; size = 2048
__$ArrayPad$ = -4					; size = 4
_ci$ = 8						; size = 4
_TestSectorBufEncryption PROC				; COMDAT

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	81 ec 64 08 00
	00		 sub	 esp, 2148		; 00000864H
  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00011	33 c4		 xor	 eax, esp
  00013	89 84 24 60 08
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+2148], eax
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8b 7d 08	 mov	 edi, DWORD PTR _ci$[ebp]

; 639  : 	unsigned char buf [ENCRYPTION_DATA_UNIT_SIZE * 4];
; 640  : 	unsigned int i;
; 641  : 	char name[64];
; 642  : 	unsigned __int32 crc;
; 643  : 	UINT64_STRUCT unitNo;
; 644  : 	uint32 nbrUnits;
; 645  : 	unsigned __int64 writeOffset;
; 646  : 	int testCase = 0;

  00020	33 db		 xor	 ebx, ebx

; 647  : 	int nTestsPerformed = 0;
; 648  : 
; 649  : 	static unsigned char key1[] =
; 650  : 	{ 
; 651  : 		0x27, 0x18, 0x28, 0x18, 0x28, 0x45, 0x90, 0x45, 0x23, 0x53, 0x60, 0x28, 0x74, 0x71, 0x35, 0x26, 0x62, 0x49, 0x77, 0x57, 0x24, 0x70, 0x93, 0x69, 0x99, 0x59, 0x57, 0x49, 0x66, 0x96, 0x76, 0x27,
; 652  : 		0x31, 0x41, 0x59, 0x26, 0x53, 0x58, 0x97, 0x93, 0x23, 0x84, 0x62, 0x64, 0x33, 0x83, 0x27, 0x95, 0x02, 0x88, 0x41, 0x97, 0x16, 0x93, 0x99, 0x37, 0x51, 0x05, 0x82, 0x09, 0x74, 0x94, 0x45, 0x92,
; 653  : 		0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13
; 654  : 	};
; 655  : 
; 656  : 	if (!TestLegacySectorBufEncryption (ci))

  00022	57		 push	 edi
  00023	89 7c 24 18	 mov	 DWORD PTR _ci$GSCopy$[esp+2164], edi
  00027	89 5c 24 14	 mov	 DWORD PTR _nTestsPerformed$[esp+2164], ebx
  0002b	e8 00 00 00 00	 call	 _TestLegacySectorBufEncryption
  00030	83 c4 04	 add	 esp, 4
  00033	85 c0		 test	 eax, eax
  00035	75 17		 jne	 SHORT $LN148@TestSector
$LN164@TestSector:

; 657  : 		return FALSE;

  00037	33 c0		 xor	 eax, eax

; 1027 : 	}
; 1028 : 
; 1029 : 	return (nTestsPerformed == 80);
; 1030 : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b 8c 24 60 08
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+2148]
  00043	33 cc		 xor	 ecx, esp
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
$LN148@TestSector:

; 658  : 
; 659  : 
; 660  : 	/* Encryption/decryption of data units (typically, volume data sectors) */
; 661  : 
; 662  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 663  : 
; 664  : 	ci->mode = XTS;	// Other modes of operation are tested in TestLegacySectorBufEncryption()
; 665  : 
; 666  : 	/* The buffer can accommodate 4 data units and we'll test 4 cases by "scrolling". The data unit 0xFFFFFFFFFF
; 667  : 	will "move" from the start of the buffer to its end. For a 512-byte data unit, the byte offset 562949953420800
; 668  : 	corresponds to the data unit 0xFFFFFFFFFF. */
; 669  : 	for (writeOffset = 562949953420800ULL; 
; 670  : 		writeOffset > 562949953420800ULL - nbrUnits * ENCRYPTION_DATA_UNIT_SIZE; 
; 671  : 		writeOffset -= ENCRYPTION_DATA_UNIT_SIZE)

  0004e	be ff ff 01 00	 mov	 esi, 131071		; 0001ffffH
  00053	c7 47 04 01 00
	00 00		 mov	 DWORD PTR [edi+4], 1
  0005a	c7 44 24 18 00
	fe ff ff	 mov	 DWORD PTR _writeOffset$[esp+2160], -512 ; fffffe00H
  00062	89 74 24 1c	 mov	 DWORD PTR _writeOffset$[esp+2164], esi
$LL147@TestSector:

; 672  : 	{
; 673  : 		unitNo.Value = writeOffset / ENCRYPTION_DATA_UNIT_SIZE;

  00066	8b 44 24 18	 mov	 eax, DWORD PTR _writeOffset$[esp+2160]
  0006a	8b ce		 mov	 ecx, esi
  0006c	0f ac c8 09	 shrd	 eax, ecx, 9
  00070	c1 e9 09	 shr	 ecx, 9
  00073	89 44 24 20	 mov	 DWORD PTR _unitNo$[esp+2160], eax
  00077	89 4c 24 24	 mov	 DWORD PTR _unitNo$[esp+2164], ecx

; 674  : 
; 675  : 		// Test all EAs that support this mode of operation
; 676  : 		for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  0007b	e8 00 00 00 00	 call	 _EAGetFirst
  00080	89 07		 mov	 DWORD PTR [edi], eax
  00082	85 c0		 test	 eax, eax
  00084	0f 84 09 06 00
	00		 je	 $LN142@TestSector
  0008a	8d 9b 00 00 00
	00		 npad	 6
$LL144@TestSector:

; 677  : 		{
; 678  : 			if (!EAIsModeSupported (ci->ea, ci->mode))

  00090	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00093	8b 07		 mov	 eax, DWORD PTR [edi]
  00095	52		 push	 edx
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 _EAIsModeSupported
  0009c	83 c4 08	 add	 esp, 8
  0009f	85 c0		 test	 eax, eax
  000a1	0f 84 d3 05 00
	00		 je	 $LN143@TestSector

; 679  : 				continue;
; 680  : 
; 681  : 			EAGetName (name, ci->ea);

  000a7	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000a9	51		 push	 ecx
  000aa	8d 54 24 2c	 lea	 edx, DWORD PTR _name$[esp+2164]
  000ae	52		 push	 edx
  000af	e8 00 00 00 00	 call	 _EAGetName

; 682  : 
; 683  : 			if (EAInit (ci->ea, key1, ci->ks) != ERR_SUCCESS)

  000b4	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000b6	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  000b9	50		 push	 eax
  000ba	68 00 00 00 00	 push	 OFFSET ?key1@?1??TestSectorBufEncryption@@9@9
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 _EAInit
  000c5	83 c4 14	 add	 esp, 20			; 00000014H
  000c8	85 c0		 test	 eax, eax
  000ca	0f 85 67 ff ff
	ff		 jne	 $LN164@TestSector
  000d0	81 c7 a8 42 00
	00		 add	 edi, 17064		; 000042a8H
$LL139@TestSector:

; 684  : 				return FALSE;
; 685  : 
; 686  : 			for (i = 0; i < sizeof (ci->k2); i++)
; 687  : 				ci->k2[i] = (unsigned char) i;

  000d6	88 04 07	 mov	 BYTE PTR [edi+eax], al
  000d9	40		 inc	 eax
  000da	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  000df	72 f5		 jb	 SHORT $LL139@TestSector

; 688  : 
; 689  : 			memcpy (&ci->k2, XTS_vectors[XTS_TEST_COUNT-1].key2, sizeof (XTS_vectors[XTS_TEST_COUNT-1].key2));
; 690  : 
; 691  : 			if (!EAInitMode (ci))

  000e1	8b 54 24 14	 mov	 edx, DWORD PTR _ci$GSCopy$[esp+2160]
  000e5	b9 08 00 00 00	 mov	 ecx, 8
  000ea	be 50 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4432
  000ef	52		 push	 edx
  000f0	f3 a5		 rep movsd
  000f2	e8 00 00 00 00	 call	 _EAInitMode
  000f7	83 c4 04	 add	 esp, 4
  000fa	85 c0		 test	 eax, eax
  000fc	0f 84 35 ff ff
	ff		 je	 $LN164@TestSector

; 692  : 				return FALSE;
; 693  : 
; 694  : 			// Each data unit will contain the same plaintext
; 695  : 			for (i = 0; i < nbrUnits; i++)
; 696  : 			{
; 697  : 				memcpy ((unsigned char *) buf + i * ENCRYPTION_DATA_UNIT_SIZE, 
; 698  : 					XTS_vectors[XTS_TEST_COUNT-1].plaintext, 
; 699  : 					ENCRYPTION_DATA_UNIT_SIZE);
; 700  : 			}
; 701  : 
; 702  : 			EncryptDataUnits (buf, &unitNo, nbrUnits, ci);

  00102	8b 44 24 14	 mov	 eax, DWORD PTR _ci$GSCopy$[esp+2160]
  00106	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  0010b	be 7c 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4476
  00110	8d 7c 24 68	 lea	 edi, DWORD PTR _buf$[esp+2160]
  00114	f3 a5		 rep movsd
  00116	50		 push	 eax
  00117	b9 80 01 00 00	 mov	 ecx, 384		; 00000180H
  0011c	8d 74 24 6c	 lea	 esi, DWORD PTR _buf$[esp+2164]
  00120	8d bc 24 6c 02
	00 00		 lea	 edi, DWORD PTR _buf$[esp+2676]
  00127	f3 a5		 rep movsd
  00129	6a 04		 push	 4
  0012b	8d 4c 24 28	 lea	 ecx, DWORD PTR _unitNo$[esp+2168]
  0012f	51		 push	 ecx
  00130	8d 54 24 74	 lea	 edx, DWORD PTR _buf$[esp+2172]
  00134	52		 push	 edx
  00135	e8 00 00 00 00	 call	 _EncryptDataUnits

; 703  : 
; 704  : 			crc = GetCrc32 (buf, sizeof (buf));

  0013a	8d 44 24 78	 lea	 eax, DWORD PTR _buf$[esp+2176]
  0013e	68 00 08 00 00	 push	 2048			; 00000800H
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 _GetCrc32
  00149	83 c4 18	 add	 esp, 24			; 00000018H
  0014c	8b f0		 mov	 esi, eax

; 705  : 
; 706  : 			if (strcmp (name, "AES") == 0)

  0014e	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_03BKNEFOAH@AES?$AA@
  00153	8d 4c 24 28	 lea	 ecx, DWORD PTR _name$[esp+2160]
$LL221@TestSector:
  00157	8a 01		 mov	 al, BYTE PTR [ecx]
  00159	3a 02		 cmp	 al, BYTE PTR [edx]
  0015b	75 1a		 jne	 SHORT $LN222@TestSector
  0015d	84 c0		 test	 al, al
  0015f	74 12		 je	 SHORT $LN223@TestSector
  00161	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00164	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00167	75 0e		 jne	 SHORT $LN222@TestSector
  00169	83 c1 02	 add	 ecx, 2
  0016c	83 c2 02	 add	 edx, 2
  0016f	84 c0		 test	 al, al
  00171	75 e4		 jne	 SHORT $LL221@TestSector
$LN223@TestSector:
  00173	33 c0		 xor	 eax, eax
  00175	eb 05		 jmp	 SHORT $LN224@TestSector
$LN222@TestSector:
  00177	1b c0		 sbb	 eax, eax
  00179	83 d8 ff	 sbb	 eax, -1
$LN224@TestSector:
  0017c	85 c0		 test	 eax, eax
  0017e	0f 85 96 00 00
	00		 jne	 $LN132@TestSector

; 707  : 			{
; 708  : 				// Verify the ciphertext of the "moving" data unit using the IEEE test vector #14
; 709  : 				if (memcmp (XTS_vectors[XTS_TEST_COUNT-1].ciphertext,
; 710  : 					(unsigned char *) buf + testCase * ENCRYPTION_DATA_UNIT_SIZE,
; 711  : 					ENCRYPTION_DATA_UNIT_SIZE) != 0)

  00184	8b cb		 mov	 ecx, ebx
  00186	c1 e1 09	 shl	 ecx, 9
  00189	8d 4c 0c 68	 lea	 ecx, DWORD PTR _buf$[esp+ecx+2160]
  0018d	ba 7c 13 00 00	 mov	 edx, OFFSET _XTS_vectors+4988
  00192	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  00197	2b d1		 sub	 edx, ecx
  00199	8d a4 24 00 00
	00 00		 npad	 7
$LL152@TestSector:
  001a0	8b 3c 0a	 mov	 edi, DWORD PTR [edx+ecx]
  001a3	3b 39		 cmp	 edi, DWORD PTR [ecx]
  001a5	0f 85 8c fe ff
	ff		 jne	 $LN164@TestSector
  001ab	83 e8 04	 sub	 eax, 4
  001ae	83 c1 04	 add	 ecx, 4
  001b1	83 f8 04	 cmp	 eax, 4
  001b4	73 ea		 jae	 SHORT $LL152@TestSector

; 712  : 				{
; 713  : 					return FALSE;
; 714  : 				}
; 715  : 
; 716  : 				// CRC of all data units in the buffer for each test case
; 717  : 				switch (testCase)

  001b6	83 fb 03	 cmp	 ebx, 3
  001b9	0f 87 74 04 00
	00		 ja	 $LN45@TestSector
  001bf	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR $LN303@TestSector[ebx*4]
$LN128@TestSector:

; 718  : 				{
; 719  : 				case 0: 
; 720  : 					if (crc != 0x888f2990)

  001c6	81 fe 90 29 8f
	88		 cmp	 esi, -2003883632	; 888f2990H
  001cc	0f 85 65 fe ff
	ff		 jne	 $LN164@TestSector

; 721  : 						return FALSE;
; 722  : 					nTestsPerformed++;

  001d2	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 723  : 					break;

  001d6	e9 64 04 00 00	 jmp	 $LN219@TestSector
$LN126@TestSector:

; 724  : 				case 1:
; 725  : 					if (crc != 0xea28ea34)

  001db	81 fe 34 ea 28
	ea		 cmp	 esi, -366417356		; ea28ea34H
  001e1	0f 85 50 fe ff
	ff		 jne	 $LN164@TestSector

; 726  : 						return FALSE;
; 727  : 					nTestsPerformed++;

  001e7	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 728  : 					break;

  001eb	e9 4f 04 00 00	 jmp	 $LN219@TestSector
$LN124@TestSector:

; 729  : 				case 2:
; 730  : 					if (crc != 0xe058f5a2)

  001f0	81 fe a2 f5 58
	e0		 cmp	 esi, -531040862		; e058f5a2H
  001f6	0f 85 3b fe ff
	ff		 jne	 $LN164@TestSector

; 731  : 						return FALSE;
; 732  : 					nTestsPerformed++;

  001fc	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 733  : 					break;

  00200	e9 3a 04 00 00	 jmp	 $LN219@TestSector
$LN122@TestSector:

; 734  : 				case 3:
; 735  : 					if (crc != 0x10473dc9)

  00205	81 fe c9 3d 47
	10		 cmp	 esi, 273104329		; 10473dc9H
  0020b	0f 85 26 fe ff
	ff		 jne	 $LN164@TestSector

; 736  : 						return FALSE;
; 737  : 					nTestsPerformed++;

  00211	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 738  : 					break;
; 739  : 				}
; 740  : 			}
; 741  : 			else if (strcmp (name, "Serpent") == 0)

  00215	e9 25 04 00 00	 jmp	 $LN219@TestSector
$LN132@TestSector:
  0021a	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@
  0021f	8d 4c 24 28	 lea	 ecx, DWORD PTR _name$[esp+2160]
$LL225@TestSector:
  00223	8a 01		 mov	 al, BYTE PTR [ecx]
  00225	3a 02		 cmp	 al, BYTE PTR [edx]
  00227	75 1a		 jne	 SHORT $LN226@TestSector
  00229	84 c0		 test	 al, al
  0022b	74 12		 je	 SHORT $LN227@TestSector
  0022d	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00230	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00233	75 0e		 jne	 SHORT $LN226@TestSector
  00235	83 c1 02	 add	 ecx, 2
  00238	83 c2 02	 add	 edx, 2
  0023b	84 c0		 test	 al, al
  0023d	75 e4		 jne	 SHORT $LL225@TestSector
$LN227@TestSector:
  0023f	33 c0		 xor	 eax, eax
  00241	eb 05		 jmp	 SHORT $LN228@TestSector
$LN226@TestSector:
  00243	1b c0		 sbb	 eax, eax
  00245	83 d8 ff	 sbb	 eax, -1
$LN228@TestSector:
  00248	85 c0		 test	 eax, eax
  0024a	75 64		 jne	 SHORT $LN119@TestSector

; 742  : 			{
; 743  : 				switch (testCase)

  0024c	83 fb 03	 cmp	 ebx, 3
  0024f	0f 87 de 03 00
	00		 ja	 $LN45@TestSector
  00255	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR $LN304@TestSector[ebx*4]
$LN116@TestSector:

; 744  : 				{
; 745  : 				case 0:
; 746  : 					if (crc != 0x7edfecb3)

  0025c	81 fe b3 ec df
	7e		 cmp	 esi, 2128604339		; 7edfecb3H
  00262	0f 85 cf fd ff
	ff		 jne	 $LN164@TestSector

; 747  : 						return FALSE;
; 748  : 					nTestsPerformed++;

  00268	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 749  : 					break;

  0026c	e9 ce 03 00 00	 jmp	 $LN219@TestSector
$LN114@TestSector:

; 750  : 				case 1:
; 751  : 					if (crc != 0x357baaaa)

  00271	81 fe aa aa 7b
	35		 cmp	 esi, 897297066		; 357baaaaH
  00277	0f 85 ba fd ff
	ff		 jne	 $LN164@TestSector

; 752  : 						return FALSE;
; 753  : 					nTestsPerformed++;

  0027d	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 754  : 					break;

  00281	e9 b9 03 00 00	 jmp	 $LN219@TestSector
$LN112@TestSector:

; 755  : 				case 2:
; 756  : 					if (crc != 0xc7b9fca5)

  00286	81 fe a5 fc b9
	c7		 cmp	 esi, -944112475		; c7b9fca5H
  0028c	0f 85 a5 fd ff
	ff		 jne	 $LN164@TestSector

; 757  : 						return FALSE;
; 758  : 					nTestsPerformed++;

  00292	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 759  : 					break;

  00296	e9 a4 03 00 00	 jmp	 $LN219@TestSector
$LN110@TestSector:

; 760  : 				case 3:
; 761  : 					if (crc != 0xb5263e0c)

  0029b	81 fe 0c 3e 26
	b5		 cmp	 esi, -1255784948	; b5263e0cH
  002a1	0f 85 90 fd ff
	ff		 jne	 $LN164@TestSector

; 762  : 						return FALSE;
; 763  : 					nTestsPerformed++;

  002a7	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 764  : 					break;
; 765  : 				}
; 766  : 			}
; 767  : 			else if (strcmp (name, "Twofish") == 0)

  002ab	e9 8f 03 00 00	 jmp	 $LN219@TestSector
$LN119@TestSector:
  002b0	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_07DABDIDEC@Twofish?$AA@
  002b5	8d 4c 24 28	 lea	 ecx, DWORD PTR _name$[esp+2160]
  002b9	8d a4 24 00 00
	00 00		 npad	 7
$LL229@TestSector:
  002c0	8a 01		 mov	 al, BYTE PTR [ecx]
  002c2	3a 02		 cmp	 al, BYTE PTR [edx]
  002c4	75 1a		 jne	 SHORT $LN230@TestSector
  002c6	84 c0		 test	 al, al
  002c8	74 12		 je	 SHORT $LN231@TestSector
  002ca	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  002cd	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  002d0	75 0e		 jne	 SHORT $LN230@TestSector
  002d2	83 c1 02	 add	 ecx, 2
  002d5	83 c2 02	 add	 edx, 2
  002d8	84 c0		 test	 al, al
  002da	75 e4		 jne	 SHORT $LL229@TestSector
$LN231@TestSector:
  002dc	33 c0		 xor	 eax, eax
  002de	eb 05		 jmp	 SHORT $LN232@TestSector
$LN230@TestSector:
  002e0	1b c0		 sbb	 eax, eax
  002e2	83 d8 ff	 sbb	 eax, -1
$LN232@TestSector:
  002e5	85 c0		 test	 eax, eax
  002e7	75 64		 jne	 SHORT $LN107@TestSector

; 768  : 			{
; 769  : 				switch (testCase)

  002e9	83 fb 03	 cmp	 ebx, 3
  002ec	0f 87 41 03 00
	00		 ja	 $LN45@TestSector
  002f2	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR $LN305@TestSector[ebx*4]
$LN104@TestSector:

; 770  : 				{
; 771  : 				case 0:
; 772  : 					if (crc != 0x91525124)

  002f9	81 fe 24 51 52
	91		 cmp	 esi, -1856876252	; 91525124H
  002ff	0f 85 32 fd ff
	ff		 jne	 $LN164@TestSector

; 773  : 						return FALSE;
; 774  : 					nTestsPerformed++;

  00305	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 775  : 					break;

  00309	e9 31 03 00 00	 jmp	 $LN219@TestSector
$LN102@TestSector:

; 776  : 				case 1:
; 777  : 					if (crc != 0x2895cc47)

  0030e	81 fe 47 cc 95
	28		 cmp	 esi, 680905799		; 2895cc47H
  00314	0f 85 1d fd ff
	ff		 jne	 $LN164@TestSector

; 778  : 						return FALSE;
; 779  : 					nTestsPerformed++;

  0031a	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 780  : 					break;

  0031e	e9 1c 03 00 00	 jmp	 $LN219@TestSector
$LN100@TestSector:

; 781  : 				case 2:
; 782  : 					if (crc != 0x6bee346d)

  00323	81 fe 6d 34 ee
	6b		 cmp	 esi, 1810773101		; 6bee346dH
  00329	0f 85 08 fd ff
	ff		 jne	 $LN164@TestSector

; 783  : 						return FALSE;
; 784  : 					nTestsPerformed++;

  0032f	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 785  : 					break;

  00333	e9 07 03 00 00	 jmp	 $LN219@TestSector
$LN98@TestSector:

; 786  : 				case 3:
; 787  : 					if (crc != 0xb1c45759)

  00338	81 fe 59 57 c4
	b1		 cmp	 esi, -1312532647	; b1c45759H
  0033e	0f 85 f3 fc ff
	ff		 jne	 $LN164@TestSector

; 788  : 						return FALSE;
; 789  : 					nTestsPerformed++;

  00344	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 790  : 					break;
; 791  : 				}
; 792  : 			}
; 793  : 			else if (strcmp (name, "AES-Twofish") == 0)

  00348	e9 f2 02 00 00	 jmp	 $LN219@TestSector
$LN107@TestSector:
  0034d	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@
  00352	8d 4c 24 28	 lea	 ecx, DWORD PTR _name$[esp+2160]
$LL233@TestSector:
  00356	8a 01		 mov	 al, BYTE PTR [ecx]
  00358	3a 02		 cmp	 al, BYTE PTR [edx]
  0035a	75 1a		 jne	 SHORT $LN234@TestSector
  0035c	84 c0		 test	 al, al
  0035e	74 12		 je	 SHORT $LN235@TestSector
  00360	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00363	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00366	75 0e		 jne	 SHORT $LN234@TestSector
  00368	83 c1 02	 add	 ecx, 2
  0036b	83 c2 02	 add	 edx, 2
  0036e	84 c0		 test	 al, al
  00370	75 e4		 jne	 SHORT $LL233@TestSector
$LN235@TestSector:
  00372	33 c0		 xor	 eax, eax
  00374	eb 05		 jmp	 SHORT $LN236@TestSector
$LN234@TestSector:
  00376	1b c0		 sbb	 eax, eax
  00378	83 d8 ff	 sbb	 eax, -1
$LN236@TestSector:
  0037b	85 c0		 test	 eax, eax
  0037d	75 64		 jne	 SHORT $LN95@TestSector

; 794  : 			{
; 795  : 				switch (testCase)

  0037f	83 fb 03	 cmp	 ebx, 3
  00382	0f 87 ab 02 00
	00		 ja	 $LN45@TestSector
  00388	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR $LN306@TestSector[ebx*4]
$LN92@TestSector:

; 796  : 				{
; 797  : 				case 0:
; 798  : 					if (crc != 0x6cea7fa2)

  0038f	81 fe a2 7f ea
	6c		 cmp	 esi, 1827307426		; 6cea7fa2H
  00395	0f 85 9c fc ff
	ff		 jne	 $LN164@TestSector

; 799  : 						return FALSE;
; 800  : 					nTestsPerformed++;

  0039b	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 801  : 					break;

  0039f	e9 9b 02 00 00	 jmp	 $LN219@TestSector
$LN90@TestSector:

; 802  : 				case 1:
; 803  : 					if (crc != 0x69052c4c)

  003a4	81 fe 4c 2c 05
	69		 cmp	 esi, 1761946700		; 69052c4cH
  003aa	0f 85 87 fc ff
	ff		 jne	 $LN164@TestSector

; 804  : 						return FALSE;
; 805  : 					nTestsPerformed++;

  003b0	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 806  : 					break;

  003b4	e9 86 02 00 00	 jmp	 $LN219@TestSector
$LN88@TestSector:

; 807  : 				case 2:
; 808  : 					if (crc != 0x88db8de5)

  003b9	81 fe e5 8d db
	88		 cmp	 esi, -1998877211	; 88db8de5H
  003bf	0f 85 72 fc ff
	ff		 jne	 $LN164@TestSector

; 809  : 						return FALSE;
; 810  : 					nTestsPerformed++;

  003c5	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 811  : 					break;

  003c9	e9 71 02 00 00	 jmp	 $LN219@TestSector
$LN86@TestSector:

; 812  : 				case 3:
; 813  : 					if (crc != 0xf16fd8c5)

  003ce	81 fe c5 d8 6f
	f1		 cmp	 esi, -244328251		; f16fd8c5H
  003d4	0f 85 5d fc ff
	ff		 jne	 $LN164@TestSector

; 814  : 						return FALSE;
; 815  : 					nTestsPerformed++;

  003da	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 816  : 					break;
; 817  : 				}
; 818  : 			}
; 819  : 			else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  003de	e9 5c 02 00 00	 jmp	 $LN219@TestSector
$LN95@TestSector:
  003e3	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@
  003e8	8d 4c 24 28	 lea	 ecx, DWORD PTR _name$[esp+2160]
  003ec	8d 64 24 00	 npad	 4
$LL237@TestSector:
  003f0	8a 01		 mov	 al, BYTE PTR [ecx]
  003f2	3a 02		 cmp	 al, BYTE PTR [edx]
  003f4	75 1a		 jne	 SHORT $LN238@TestSector
  003f6	84 c0		 test	 al, al
  003f8	74 12		 je	 SHORT $LN239@TestSector
  003fa	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  003fd	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00400	75 0e		 jne	 SHORT $LN238@TestSector
  00402	83 c1 02	 add	 ecx, 2
  00405	83 c2 02	 add	 edx, 2
  00408	84 c0		 test	 al, al
  0040a	75 e4		 jne	 SHORT $LL237@TestSector
$LN239@TestSector:
  0040c	33 c0		 xor	 eax, eax
  0040e	eb 05		 jmp	 SHORT $LN240@TestSector
$LN238@TestSector:
  00410	1b c0		 sbb	 eax, eax
  00412	83 d8 ff	 sbb	 eax, -1
$LN240@TestSector:
  00415	85 c0		 test	 eax, eax
  00417	75 64		 jne	 SHORT $LN83@TestSector

; 820  : 			{
; 821  : 				switch (testCase)

  00419	83 fb 03	 cmp	 ebx, 3
  0041c	0f 87 11 02 00
	00		 ja	 $LN45@TestSector
  00422	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR $LN307@TestSector[ebx*4]
$LN80@TestSector:

; 822  : 				{
; 823  : 				case 0:
; 824  : 					if (crc != 0xa2d7d82a)

  00429	81 fe 2a d8 d7
	a2		 cmp	 esi, -1562912726	; a2d7d82aH
  0042f	0f 85 02 fc ff
	ff		 jne	 $LN164@TestSector

; 825  : 						return FALSE;
; 826  : 					nTestsPerformed++;

  00435	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 827  : 					break;

  00439	e9 01 02 00 00	 jmp	 $LN219@TestSector
$LN78@TestSector:

; 828  : 				case 1:
; 829  : 					if (crc != 0xdbf76412)

  0043e	81 fe 12 64 f7
	db		 cmp	 esi, -604543982		; dbf76412H
  00444	0f 85 ed fb ff
	ff		 jne	 $LN164@TestSector

; 830  : 						return FALSE;
; 831  : 					nTestsPerformed++;

  0044a	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 832  : 					break;

  0044e	e9 ec 01 00 00	 jmp	 $LN219@TestSector
$LN76@TestSector:

; 833  : 				case 2:
; 834  : 					if (crc != 0xdf0ea03e)

  00453	81 fe 3e a0 0e
	df		 cmp	 esi, -552689602		; df0ea03eH
  00459	0f 85 d8 fb ff
	ff		 jne	 $LN164@TestSector

; 835  : 						return FALSE;
; 836  : 					nTestsPerformed++;

  0045f	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 837  : 					break;

  00463	e9 d7 01 00 00	 jmp	 $LN219@TestSector
$LN74@TestSector:

; 838  : 				case 3:
; 839  : 					if (crc != 0xdadedff7)

  00468	81 fe f7 df de
	da		 cmp	 esi, -622927881		; dadedff7H
  0046e	0f 85 c3 fb ff
	ff		 jne	 $LN164@TestSector

; 840  : 						return FALSE;
; 841  : 					nTestsPerformed++;

  00474	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 842  : 					break;
; 843  : 				}
; 844  : 			}
; 845  : 			else if (strcmp (name, "Serpent-AES") == 0)

  00478	e9 c2 01 00 00	 jmp	 $LN219@TestSector
$LN83@TestSector:
  0047d	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@
  00482	8d 4c 24 28	 lea	 ecx, DWORD PTR _name$[esp+2160]
$LL241@TestSector:
  00486	8a 01		 mov	 al, BYTE PTR [ecx]
  00488	3a 02		 cmp	 al, BYTE PTR [edx]
  0048a	75 1a		 jne	 SHORT $LN242@TestSector
  0048c	84 c0		 test	 al, al
  0048e	74 12		 je	 SHORT $LN243@TestSector
  00490	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00493	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00496	75 0e		 jne	 SHORT $LN242@TestSector
  00498	83 c1 02	 add	 ecx, 2
  0049b	83 c2 02	 add	 edx, 2
  0049e	84 c0		 test	 al, al
  004a0	75 e4		 jne	 SHORT $LL241@TestSector
$LN243@TestSector:
  004a2	33 c0		 xor	 eax, eax
  004a4	eb 05		 jmp	 SHORT $LN244@TestSector
$LN242@TestSector:
  004a6	1b c0		 sbb	 eax, eax
  004a8	83 d8 ff	 sbb	 eax, -1
$LN244@TestSector:
  004ab	85 c0		 test	 eax, eax
  004ad	75 64		 jne	 SHORT $LN71@TestSector

; 846  : 			{
; 847  : 				switch (testCase)

  004af	83 fb 03	 cmp	 ebx, 3
  004b2	0f 87 7b 01 00
	00		 ja	 $LN45@TestSector
  004b8	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR $LN308@TestSector[ebx*4]
$LN68@TestSector:

; 848  : 				{
; 849  : 				case 0:
; 850  : 					if (crc != 0x6dd133b3)

  004bf	81 fe b3 33 d1
	6d		 cmp	 esi, 1842426803		; 6dd133b3H
  004c5	0f 85 6c fb ff
	ff		 jne	 $LN164@TestSector

; 851  : 						return FALSE;
; 852  : 					nTestsPerformed++;

  004cb	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 853  : 					break;

  004cf	e9 6b 01 00 00	 jmp	 $LN219@TestSector
$LN66@TestSector:

; 854  : 				case 1:
; 855  : 					if (crc != 0x0e5717d2)

  004d4	81 fe d2 17 57
	0e		 cmp	 esi, 240588754		; 0e5717d2H
  004da	0f 85 57 fb ff
	ff		 jne	 $LN164@TestSector

; 856  : 						return FALSE;
; 857  : 					nTestsPerformed++;

  004e0	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 858  : 					break;

  004e4	e9 56 01 00 00	 jmp	 $LN219@TestSector
$LN64@TestSector:

; 859  : 				case 2:
; 860  : 					if (crc != 0x39f83cd9)

  004e9	81 fe d9 3c f8
	39		 cmp	 esi, 972569817		; 39f83cd9H
  004ef	0f 85 42 fb ff
	ff		 jne	 $LN164@TestSector

; 861  : 						return FALSE;
; 862  : 					nTestsPerformed++;

  004f5	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 863  : 					break;

  004f9	e9 41 01 00 00	 jmp	 $LN219@TestSector
$LN62@TestSector:

; 864  : 				case 3:
; 865  : 					if (crc != 0x8a79fa2c)

  004fe	81 fe 2c fa 79
	8a		 cmp	 esi, -1971717588	; 8a79fa2cH
  00504	0f 85 2d fb ff
	ff		 jne	 $LN164@TestSector

; 866  : 						return FALSE;
; 867  : 					nTestsPerformed++;

  0050a	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 868  : 					break;
; 869  : 				}
; 870  : 			}
; 871  : 			else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  0050e	e9 2c 01 00 00	 jmp	 $LN219@TestSector
$LN71@TestSector:
  00513	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@
  00518	8d 4c 24 28	 lea	 ecx, DWORD PTR _name$[esp+2160]
  0051c	8d 64 24 00	 npad	 4
$LL245@TestSector:
  00520	8a 01		 mov	 al, BYTE PTR [ecx]
  00522	3a 02		 cmp	 al, BYTE PTR [edx]
  00524	75 1a		 jne	 SHORT $LN246@TestSector
  00526	84 c0		 test	 al, al
  00528	74 12		 je	 SHORT $LN247@TestSector
  0052a	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  0052d	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00530	75 0e		 jne	 SHORT $LN246@TestSector
  00532	83 c1 02	 add	 ecx, 2
  00535	83 c2 02	 add	 edx, 2
  00538	84 c0		 test	 al, al
  0053a	75 e4		 jne	 SHORT $LL245@TestSector
$LN247@TestSector:
  0053c	33 c0		 xor	 eax, eax
  0053e	eb 05		 jmp	 SHORT $LN248@TestSector
$LN246@TestSector:
  00540	1b c0		 sbb	 eax, eax
  00542	83 d8 ff	 sbb	 eax, -1
$LN248@TestSector:
  00545	85 c0		 test	 eax, eax
  00547	75 64		 jne	 SHORT $LN59@TestSector

; 872  : 			{
; 873  : 				switch (testCase)

  00549	83 fb 03	 cmp	 ebx, 3
  0054c	0f 87 e1 00 00
	00		 ja	 $LN45@TestSector
  00552	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR $LN309@TestSector[ebx*4]
$LN56@TestSector:

; 874  : 				{
; 875  : 				case 0:
; 876  : 					if (crc != 0xe536daf8)

  00559	81 fe f8 da 36
	e5		 cmp	 esi, -449389832		; e536daf8H
  0055f	0f 85 d2 fa ff
	ff		 jne	 $LN164@TestSector

; 877  : 						return FALSE;
; 878  : 					nTestsPerformed++;

  00565	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 879  : 					break;

  00569	e9 d1 00 00 00	 jmp	 $LN219@TestSector
$LN54@TestSector:

; 880  : 				case 1:
; 881  : 					if (crc != 0x3ae89e7f)

  0056e	81 fe 7f 9e e8
	3a		 cmp	 esi, 988323455		; 3ae89e7fH
  00574	0f 85 bd fa ff
	ff		 jne	 $LN164@TestSector

; 882  : 						return FALSE;
; 883  : 					nTestsPerformed++;

  0057a	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 884  : 					break;

  0057e	e9 bc 00 00 00	 jmp	 $LN219@TestSector
$LN52@TestSector:

; 885  : 				case 2:
; 886  : 					if (crc != 0x2cc1301a)

  00583	81 fe 1a 30 c1
	2c		 cmp	 esi, 750858266		; 2cc1301aH
  00589	0f 85 a8 fa ff
	ff		 jne	 $LN164@TestSector

; 887  : 						return FALSE;
; 888  : 					nTestsPerformed++;

  0058f	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 889  : 					break;

  00593	e9 a7 00 00 00	 jmp	 $LN219@TestSector
$LN50@TestSector:

; 890  : 				case 3:
; 891  : 					if (crc != 0xcac7bdc7)

  00598	81 fe c7 bd c7
	ca		 cmp	 esi, -892879417		; cac7bdc7H
  0059e	0f 85 93 fa ff
	ff		 jne	 $LN164@TestSector

; 892  : 						return FALSE;
; 893  : 					nTestsPerformed++;

  005a4	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 894  : 					break;
; 895  : 				}
; 896  : 			}
; 897  : 			else if (strcmp (name, "Twofish-Serpent") == 0)

  005a8	e9 92 00 00 00	 jmp	 $LN219@TestSector
$LN59@TestSector:
  005ad	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@
  005b2	8d 4c 24 28	 lea	 ecx, DWORD PTR _name$[esp+2160]
$LL249@TestSector:
  005b6	8a 01		 mov	 al, BYTE PTR [ecx]
  005b8	3a 02		 cmp	 al, BYTE PTR [edx]
  005ba	75 1a		 jne	 SHORT $LN250@TestSector
  005bc	84 c0		 test	 al, al
  005be	74 12		 je	 SHORT $LN251@TestSector
  005c0	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  005c3	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  005c6	75 0e		 jne	 SHORT $LN250@TestSector
  005c8	83 c1 02	 add	 ecx, 2
  005cb	83 c2 02	 add	 edx, 2
  005ce	84 c0		 test	 al, al
  005d0	75 e4		 jne	 SHORT $LL249@TestSector
$LN251@TestSector:
  005d2	33 c0		 xor	 eax, eax
  005d4	eb 05		 jmp	 SHORT $LN252@TestSector
$LN250@TestSector:
  005d6	1b c0		 sbb	 eax, eax
  005d8	83 d8 ff	 sbb	 eax, -1
$LN252@TestSector:
  005db	85 c0		 test	 eax, eax
  005dd	75 54		 jne	 SHORT $LN45@TestSector

; 898  : 			{
; 899  : 				switch (testCase)

  005df	83 fb 03	 cmp	 ebx, 3
  005e2	77 4f		 ja	 SHORT $LN45@TestSector
  005e4	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR $LN310@TestSector[ebx*4]
$LN44@TestSector:

; 900  : 				{
; 901  : 				case 0:
; 902  : 					if (crc != 0x2686c859)

  005eb	81 fe 59 c8 86
	26		 cmp	 esi, 646367321		; 2686c859H
  005f1	0f 85 40 fa ff
	ff		 jne	 $LN164@TestSector

; 903  : 						return FALSE;
; 904  : 					nTestsPerformed++;

  005f7	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 905  : 					break;

  005fb	eb 42		 jmp	 SHORT $LN219@TestSector
$LN42@TestSector:

; 906  : 				case 1:
; 907  : 					if (crc != 0x8a201780)

  005fd	81 fe 80 17 20
	8a		 cmp	 esi, -1977608320	; 8a201780H
  00603	0f 85 2e fa ff
	ff		 jne	 $LN164@TestSector

; 908  : 						return FALSE;
; 909  : 					nTestsPerformed++;

  00609	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 910  : 					break;

  0060d	eb 30		 jmp	 SHORT $LN219@TestSector
$LN40@TestSector:

; 911  : 				case 2:
; 912  : 					if (crc != 0x8dd13796)

  0060f	81 fe 96 37 d1
	8d		 cmp	 esi, -1915668586	; 8dd13796H
  00615	0f 85 1c fa ff
	ff		 jne	 $LN164@TestSector

; 913  : 						return FALSE;
; 914  : 					nTestsPerformed++;

  0061b	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 915  : 					break;

  0061f	eb 1e		 jmp	 SHORT $LN219@TestSector
$LN38@TestSector:

; 916  : 				case 3:
; 917  : 					if (crc != 0xe95196cb)

  00621	81 fe cb 96 51
	e9		 cmp	 esi, -380528949		; e95196cbH
  00627	0f 85 0a fa ff
	ff		 jne	 $LN164@TestSector

; 918  : 						return FALSE;
; 919  : 					nTestsPerformed++;

  0062d	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 920  : 					break;
; 921  : 				}
; 922  : 			}
; 923  : 
; 924  : 			if (crc == 0x9f5edd58)

  00631	eb 0c		 jmp	 SHORT $LN219@TestSector
$LN45@TestSector:
  00633	81 fe 58 dd 5e
	9f		 cmp	 esi, -1621172904	; 9f5edd58H
  00639	0f 84 f8 f9 ff
	ff		 je	 $LN164@TestSector
$LN219@TestSector:

; 925  : 				return FALSE;
; 926  : 
; 927  : 			DecryptDataUnits (buf, &unitNo, nbrUnits, ci);

  0063f	8b 54 24 14	 mov	 edx, DWORD PTR _ci$GSCopy$[esp+2160]
  00643	52		 push	 edx
  00644	6a 04		 push	 4
  00646	8d 44 24 28	 lea	 eax, DWORD PTR _unitNo$[esp+2168]
  0064a	50		 push	 eax
  0064b	8d 4c 24 74	 lea	 ecx, DWORD PTR _buf$[esp+2172]
  0064f	51		 push	 ecx
  00650	e8 00 00 00 00	 call	 _DecryptDataUnits

; 928  : 
; 929  : 			if (GetCrc32 (buf, sizeof (buf)) != 0x9f5edd58)

  00655	8d 54 24 78	 lea	 edx, DWORD PTR _buf$[esp+2176]
  00659	68 00 08 00 00	 push	 2048			; 00000800H
  0065e	52		 push	 edx
  0065f	e8 00 00 00 00	 call	 _GetCrc32
  00664	83 c4 18	 add	 esp, 24			; 00000018H
  00667	3d 58 dd 5e 9f	 cmp	 eax, -1621172904	; 9f5edd58H
  0066c	0f 85 c5 f9 ff
	ff		 jne	 $LN164@TestSector

; 930  : 				return FALSE;
; 931  : 
; 932  : 			nTestsPerformed++;

  00672	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]
  00676	8b 7c 24 14	 mov	 edi, DWORD PTR _ci$GSCopy$[esp+2160]
$LN143@TestSector:
  0067a	8b 07		 mov	 eax, DWORD PTR [edi]
  0067c	50		 push	 eax
  0067d	e8 00 00 00 00	 call	 _EAGetNext
  00682	83 c4 04	 add	 esp, 4
  00685	89 07		 mov	 DWORD PTR [edi], eax
  00687	85 c0		 test	 eax, eax
  00689	0f 85 01 fa ff
	ff		 jne	 $LL144@TestSector

; 674  : 
; 675  : 		// Test all EAs that support this mode of operation
; 676  : 		for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  0068f	8b 74 24 1c	 mov	 esi, DWORD PTR _writeOffset$[esp+2164]
$LN142@TestSector:

; 933  : 		}
; 934  : 		testCase++;

  00693	43		 inc	 ebx
  00694	81 44 24 18 00
	fe ff ff	 add	 DWORD PTR _writeOffset$[esp+2160], -512 ; fffffe00H
  0069c	83 d6 ff	 adc	 esi, -1
  0069f	89 74 24 1c	 mov	 DWORD PTR _writeOffset$[esp+2164], esi
  006a3	81 fe ff ff 01
	00		 cmp	 esi, 131071		; 0001ffffH
  006a9	0f 87 b7 f9 ff
	ff		 ja	 $LL147@TestSector

; 658  : 
; 659  : 
; 660  : 	/* Encryption/decryption of data units (typically, volume data sectors) */
; 661  : 
; 662  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 663  : 
; 664  : 	ci->mode = XTS;	// Other modes of operation are tested in TestLegacySectorBufEncryption()
; 665  : 
; 666  : 	/* The buffer can accommodate 4 data units and we'll test 4 cases by "scrolling". The data unit 0xFFFFFFFFFF
; 667  : 	will "move" from the start of the buffer to its end. For a 512-byte data unit, the byte offset 562949953420800
; 668  : 	corresponds to the data unit 0xFFFFFFFFFF. */
; 669  : 	for (writeOffset = 562949953420800ULL; 
; 670  : 		writeOffset > 562949953420800ULL - nbrUnits * ENCRYPTION_DATA_UNIT_SIZE; 
; 671  : 		writeOffset -= ENCRYPTION_DATA_UNIT_SIZE)

  006af	72 0e		 jb	 SHORT $LN145@TestSector
  006b1	81 7c 24 18 00
	f6 ff ff	 cmp	 DWORD PTR _writeOffset$[esp+2160], -2560 ; fffff600H
  006b9	0f 87 a7 f9 ff
	ff		 ja	 $LL147@TestSector
$LN145@TestSector:

; 935  : 	}
; 936  : 
; 937  : 	/* Encryption/decryption of a buffer (typically, a volume header) */
; 938  : 
; 939  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 940  : 
; 941  : 	// Test all EAs that support this mode of operation
; 942  : 	for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  006bf	e8 00 00 00 00	 call	 _EAGetFirst
  006c4	89 07		 mov	 DWORD PTR [edi], eax
  006c6	85 c0		 test	 eax, eax
  006c8	0f 84 43 03 00
	00		 je	 $LN32@TestSector
  006ce	8b ff		 npad	 2
$LL34@TestSector:

; 943  : 	{
; 944  : 		if (!EAIsModeSupported (ci->ea, ci->mode))

  006d0	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  006d3	8b 17		 mov	 edx, DWORD PTR [edi]
  006d5	51		 push	 ecx
  006d6	52		 push	 edx
  006d7	e8 00 00 00 00	 call	 _EAIsModeSupported
  006dc	83 c4 08	 add	 esp, 8
  006df	85 c0		 test	 eax, eax
  006e1	0f 84 15 03 00
	00		 je	 $LN33@TestSector

; 945  : 			continue;
; 946  : 
; 947  : 		EAGetName (name, ci->ea);

  006e7	8b 07		 mov	 eax, DWORD PTR [edi]
  006e9	50		 push	 eax
  006ea	8d 4c 24 2c	 lea	 ecx, DWORD PTR _name$[esp+2164]
  006ee	51		 push	 ecx
  006ef	e8 00 00 00 00	 call	 _EAGetName

; 948  : 
; 949  : 		if (EAInit (ci->ea, key1, ci->ks) != ERR_SUCCESS)

  006f4	8b 07		 mov	 eax, DWORD PTR [edi]
  006f6	8d 57 08	 lea	 edx, DWORD PTR [edi+8]
  006f9	52		 push	 edx
  006fa	68 00 00 00 00	 push	 OFFSET ?key1@?1??TestSectorBufEncryption@@9@9
  006ff	50		 push	 eax
  00700	e8 00 00 00 00	 call	 _EAInit
  00705	83 c4 14	 add	 esp, 20			; 00000014H
  00708	85 c0		 test	 eax, eax
  0070a	0f 85 27 f9 ff
	ff		 jne	 $LN164@TestSector

; 950  : 			return FALSE;
; 951  : 
; 952  : 		memcpy (&ci->k2, XTS_vectors[XTS_TEST_COUNT-1].key2, sizeof (XTS_vectors[XTS_TEST_COUNT-1].key2));

  00710	8b 5c 24 14	 mov	 ebx, DWORD PTR _ci$GSCopy$[esp+2160]
  00714	8d bb a8 42 00
	00		 lea	 edi, DWORD PTR [ebx+17064]
  0071a	b9 08 00 00 00	 mov	 ecx, 8
  0071f	be 50 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4432

; 953  : 
; 954  : 		if (!EAInitMode (ci))

  00724	53		 push	 ebx
  00725	f3 a5		 rep movsd
  00727	e8 00 00 00 00	 call	 _EAInitMode
  0072c	83 c4 04	 add	 esp, 4
  0072f	85 c0		 test	 eax, eax
  00731	0f 84 00 f9 ff
	ff		 je	 $LN164@TestSector

; 955  : 			return FALSE;
; 956  : 
; 957  : 		// Each data unit will contain the same plaintext
; 958  : 		for (i = 0; i < nbrUnits; i++)
; 959  : 		{
; 960  : 			memcpy ((unsigned char *) buf + i * ENCRYPTION_DATA_UNIT_SIZE, 
; 961  : 				XTS_vectors[XTS_TEST_COUNT-1].plaintext, 
; 962  : 				ENCRYPTION_DATA_UNIT_SIZE);

  00737	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  0073c	be 7c 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4476
  00741	8d 7c 24 68	 lea	 edi, DWORD PTR _buf$[esp+2160]
  00745	f3 a5		 rep movsd

; 963  : 		}
; 964  : 
; 965  : 		EncryptBuffer (buf, sizeof (buf), ci);

  00747	53		 push	 ebx
  00748	b9 80 01 00 00	 mov	 ecx, 384		; 00000180H
  0074d	8d 74 24 6c	 lea	 esi, DWORD PTR _buf$[esp+2164]
  00751	8d bc 24 6c 02
	00 00		 lea	 edi, DWORD PTR _buf$[esp+2676]
  00758	6a 00		 push	 0
  0075a	f3 a5		 rep movsd
  0075c	8d 4c 24 70	 lea	 ecx, DWORD PTR _buf$[esp+2168]
  00760	68 00 08 00 00	 push	 2048			; 00000800H
  00765	51		 push	 ecx
  00766	e8 00 00 00 00	 call	 _EncryptBuffer

; 966  : 
; 967  : 		crc = GetCrc32 (buf, sizeof (buf));

  0076b	8d 54 24 78	 lea	 edx, DWORD PTR _buf$[esp+2176]
  0076f	68 00 08 00 00	 push	 2048			; 00000800H
  00774	52		 push	 edx
  00775	e8 00 00 00 00	 call	 _GetCrc32
  0077a	83 c4 18	 add	 esp, 24			; 00000018H
  0077d	8b f0		 mov	 esi, eax

; 968  : 
; 969  : 		if (strcmp (name, "AES") == 0)

  0077f	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_03BKNEFOAH@AES?$AA@
  00784	8d 4c 24 28	 lea	 ecx, DWORD PTR _name$[esp+2160]
$LL254@TestSector:
  00788	8a 01		 mov	 al, BYTE PTR [ecx]
  0078a	3a 02		 cmp	 al, BYTE PTR [edx]
  0078c	75 1a		 jne	 SHORT $LN255@TestSector
  0078e	84 c0		 test	 al, al
  00790	74 12		 je	 SHORT $LN256@TestSector
  00792	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00795	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00798	75 0e		 jne	 SHORT $LN255@TestSector
  0079a	83 c1 02	 add	 ecx, 2
  0079d	83 c2 02	 add	 edx, 2
  007a0	84 c0		 test	 al, al
  007a2	75 e4		 jne	 SHORT $LL254@TestSector
$LN256@TestSector:
  007a4	33 c0		 xor	 eax, eax
  007a6	eb 05		 jmp	 SHORT $LN257@TestSector
$LN255@TestSector:
  007a8	1b c0		 sbb	 eax, eax
  007aa	83 d8 ff	 sbb	 eax, -1
$LN257@TestSector:
  007ad	85 c0		 test	 eax, eax
  007af	75 15		 jne	 SHORT $LN25@TestSector

; 970  : 		{
; 971  : 			if (crc != 0x33b91fab)

  007b1	81 fe ab 1f b9
	33		 cmp	 esi, 867770283		; 33b91fabH
  007b7	0f 85 7a f8 ff
	ff		 jne	 $LN164@TestSector

; 972  : 				return FALSE;
; 973  : 			nTestsPerformed++;

  007bd	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]
  007c1	e9 01 02 00 00	 jmp	 $LN220@TestSector
$LN25@TestSector:

; 974  : 		}
; 975  : 		else if (strcmp (name, "Serpent") == 0)

  007c6	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@
  007cb	8d 4c 24 28	 lea	 ecx, DWORD PTR _name$[esp+2160]
  007cf	90		 npad	 1
$LL258@TestSector:
  007d0	8a 01		 mov	 al, BYTE PTR [ecx]
  007d2	3a 02		 cmp	 al, BYTE PTR [edx]
  007d4	75 1a		 jne	 SHORT $LN259@TestSector
  007d6	84 c0		 test	 al, al
  007d8	74 12		 je	 SHORT $LN260@TestSector
  007da	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  007dd	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  007e0	75 0e		 jne	 SHORT $LN259@TestSector
  007e2	83 c1 02	 add	 ecx, 2
  007e5	83 c2 02	 add	 edx, 2
  007e8	84 c0		 test	 al, al
  007ea	75 e4		 jne	 SHORT $LL258@TestSector
$LN260@TestSector:
  007ec	33 c0		 xor	 eax, eax
  007ee	eb 05		 jmp	 SHORT $LN261@TestSector
$LN259@TestSector:
  007f0	1b c0		 sbb	 eax, eax
  007f2	83 d8 ff	 sbb	 eax, -1
$LN261@TestSector:
  007f5	85 c0		 test	 eax, eax
  007f7	75 15		 jne	 SHORT $LN22@TestSector

; 976  : 		{
; 977  : 			if (crc != 0x3494d480)

  007f9	81 fe 80 d4 94
	34		 cmp	 esi, 882168960		; 3494d480H
  007ff	0f 85 32 f8 ff
	ff		 jne	 $LN164@TestSector

; 978  : 				return FALSE;
; 979  : 			nTestsPerformed++;

  00805	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]
  00809	e9 b9 01 00 00	 jmp	 $LN220@TestSector
$LN22@TestSector:

; 980  : 		}
; 981  : 		else if (strcmp (name, "Twofish") == 0)

  0080e	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_07DABDIDEC@Twofish?$AA@
  00813	8d 4c 24 28	 lea	 ecx, DWORD PTR _name$[esp+2160]
$LL262@TestSector:
  00817	8a 01		 mov	 al, BYTE PTR [ecx]
  00819	3a 02		 cmp	 al, BYTE PTR [edx]
  0081b	75 1a		 jne	 SHORT $LN263@TestSector
  0081d	84 c0		 test	 al, al
  0081f	74 12		 je	 SHORT $LN264@TestSector
  00821	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00824	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00827	75 0e		 jne	 SHORT $LN263@TestSector
  00829	83 c1 02	 add	 ecx, 2
  0082c	83 c2 02	 add	 edx, 2
  0082f	84 c0		 test	 al, al
  00831	75 e4		 jne	 SHORT $LL262@TestSector
$LN264@TestSector:
  00833	33 c0		 xor	 eax, eax
  00835	eb 05		 jmp	 SHORT $LN265@TestSector
$LN263@TestSector:
  00837	1b c0		 sbb	 eax, eax
  00839	83 d8 ff	 sbb	 eax, -1
$LN265@TestSector:
  0083c	85 c0		 test	 eax, eax
  0083e	75 15		 jne	 SHORT $LN19@TestSector

; 982  : 		{
; 983  : 			if (crc != 0xc4d65b46)

  00840	81 fe 46 5b d6
	c4		 cmp	 esi, -992584890		; c4d65b46H
  00846	0f 85 eb f7 ff
	ff		 jne	 $LN164@TestSector

; 984  : 				return FALSE;
; 985  : 			nTestsPerformed++;

  0084c	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]
  00850	e9 72 01 00 00	 jmp	 $LN220@TestSector
$LN19@TestSector:

; 986  : 		}
; 987  : 		else if (strcmp (name, "AES-Twofish") == 0)

  00855	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@
  0085a	8d 4c 24 28	 lea	 ecx, DWORD PTR _name$[esp+2160]
  0085e	8b ff		 npad	 2
$LL266@TestSector:
  00860	8a 01		 mov	 al, BYTE PTR [ecx]
  00862	3a 02		 cmp	 al, BYTE PTR [edx]
  00864	75 1a		 jne	 SHORT $LN267@TestSector
  00866	84 c0		 test	 al, al
  00868	74 12		 je	 SHORT $LN268@TestSector
  0086a	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  0086d	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00870	75 0e		 jne	 SHORT $LN267@TestSector
  00872	83 c1 02	 add	 ecx, 2
  00875	83 c2 02	 add	 edx, 2
  00878	84 c0		 test	 al, al
  0087a	75 e4		 jne	 SHORT $LL266@TestSector
$LN268@TestSector:
  0087c	33 c0		 xor	 eax, eax
  0087e	eb 05		 jmp	 SHORT $LN269@TestSector
$LN267@TestSector:
  00880	1b c0		 sbb	 eax, eax
  00882	83 d8 ff	 sbb	 eax, -1
$LN269@TestSector:
  00885	85 c0		 test	 eax, eax
  00887	75 15		 jne	 SHORT $LN16@TestSector

; 988  : 		{
; 989  : 			if (crc != 0x14ce7385)

  00889	81 fe 85 73 ce
	14		 cmp	 esi, 349074309		; 14ce7385H
  0088f	0f 85 a2 f7 ff
	ff		 jne	 $LN164@TestSector

; 990  : 				return FALSE;
; 991  : 			nTestsPerformed++;

  00895	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]
  00899	e9 29 01 00 00	 jmp	 $LN220@TestSector
$LN16@TestSector:

; 992  : 		}
; 993  : 		else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  0089e	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@
  008a3	8d 4c 24 28	 lea	 ecx, DWORD PTR _name$[esp+2160]
$LL270@TestSector:
  008a7	8a 01		 mov	 al, BYTE PTR [ecx]
  008a9	3a 02		 cmp	 al, BYTE PTR [edx]
  008ab	75 1a		 jne	 SHORT $LN271@TestSector
  008ad	84 c0		 test	 al, al
  008af	74 12		 je	 SHORT $LN272@TestSector
  008b1	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  008b4	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  008b7	75 0e		 jne	 SHORT $LN271@TestSector
  008b9	83 c1 02	 add	 ecx, 2
  008bc	83 c2 02	 add	 edx, 2
  008bf	84 c0		 test	 al, al
  008c1	75 e4		 jne	 SHORT $LL270@TestSector
$LN272@TestSector:
  008c3	33 c0		 xor	 eax, eax
  008c5	eb 05		 jmp	 SHORT $LN273@TestSector
$LN271@TestSector:
  008c7	1b c0		 sbb	 eax, eax
  008c9	83 d8 ff	 sbb	 eax, -1
$LN273@TestSector:
  008cc	85 c0		 test	 eax, eax
  008ce	75 15		 jne	 SHORT $LN13@TestSector

; 994  : 		{
; 995  : 			if (crc != 0x0ec81bf7)

  008d0	81 fe f7 1b c8
	0e		 cmp	 esi, 247995383		; 0ec81bf7H
  008d6	0f 85 5b f7 ff
	ff		 jne	 $LN164@TestSector

; 996  : 				return FALSE;
; 997  : 			nTestsPerformed++;

  008dc	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]
  008e0	e9 e2 00 00 00	 jmp	 $LN220@TestSector
$LN13@TestSector:

; 998  : 		}
; 999  : 		else if (strcmp (name, "Serpent-AES") == 0)

  008e5	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@
  008ea	8d 4c 24 28	 lea	 ecx, DWORD PTR _name$[esp+2160]
  008ee	8b ff		 npad	 2
$LL274@TestSector:
  008f0	8a 01		 mov	 al, BYTE PTR [ecx]
  008f2	3a 02		 cmp	 al, BYTE PTR [edx]
  008f4	75 1a		 jne	 SHORT $LN275@TestSector
  008f6	84 c0		 test	 al, al
  008f8	74 12		 je	 SHORT $LN276@TestSector
  008fa	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  008fd	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00900	75 0e		 jne	 SHORT $LN275@TestSector
  00902	83 c1 02	 add	 ecx, 2
  00905	83 c2 02	 add	 edx, 2
  00908	84 c0		 test	 al, al
  0090a	75 e4		 jne	 SHORT $LL274@TestSector
$LN276@TestSector:
  0090c	33 c0		 xor	 eax, eax
  0090e	eb 05		 jmp	 SHORT $LN277@TestSector
$LN275@TestSector:
  00910	1b c0		 sbb	 eax, eax
  00912	83 d8 ff	 sbb	 eax, -1
$LN277@TestSector:
  00915	85 c0		 test	 eax, eax
  00917	75 15		 jne	 SHORT $LN10@TestSector

; 1000 : 		{
; 1001 : 			if (crc != 0x42f919ad)

  00919	81 fe ad 19 f9
	42		 cmp	 esi, 1123621293		; 42f919adH
  0091f	0f 85 12 f7 ff
	ff		 jne	 $LN164@TestSector

; 1002 : 				return FALSE;
; 1003 : 			nTestsPerformed++;

  00925	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]
  00929	e9 99 00 00 00	 jmp	 $LN220@TestSector
$LN10@TestSector:

; 1004 : 		}
; 1005 : 		else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  0092e	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@
  00933	8d 4c 24 28	 lea	 ecx, DWORD PTR _name$[esp+2160]
$LL278@TestSector:
  00937	8a 01		 mov	 al, BYTE PTR [ecx]
  00939	3a 02		 cmp	 al, BYTE PTR [edx]
  0093b	75 1a		 jne	 SHORT $LN279@TestSector
  0093d	84 c0		 test	 al, al
  0093f	74 12		 je	 SHORT $LN280@TestSector
  00941	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00944	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00947	75 0e		 jne	 SHORT $LN279@TestSector
  00949	83 c1 02	 add	 ecx, 2
  0094c	83 c2 02	 add	 edx, 2
  0094f	84 c0		 test	 al, al
  00951	75 e4		 jne	 SHORT $LL278@TestSector
$LN280@TestSector:
  00953	33 c0		 xor	 eax, eax
  00955	eb 05		 jmp	 SHORT $LN281@TestSector
$LN279@TestSector:
  00957	1b c0		 sbb	 eax, eax
  00959	83 d8 ff	 sbb	 eax, -1
$LN281@TestSector:
  0095c	85 c0		 test	 eax, eax
  0095e	75 12		 jne	 SHORT $LN7@TestSector

; 1006 : 		{
; 1007 : 			if (crc != 0x208d5c58)

  00960	81 fe 58 5c 8d
	20		 cmp	 esi, 546135128		; 208d5c58H
  00966	0f 85 cb f6 ff
	ff		 jne	 $LN164@TestSector

; 1008 : 				return FALSE;
; 1009 : 			nTestsPerformed++;

  0096c	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]
  00970	eb 55		 jmp	 SHORT $LN220@TestSector
$LN7@TestSector:

; 1010 : 		}
; 1011 : 		else if (strcmp (name, "Twofish-Serpent") == 0)

  00972	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@
  00977	8d 4c 24 28	 lea	 ecx, DWORD PTR _name$[esp+2160]
  0097b	eb 03 8d 49 00	 npad	 5
$LL282@TestSector:
  00980	8a 01		 mov	 al, BYTE PTR [ecx]
  00982	3a 02		 cmp	 al, BYTE PTR [edx]
  00984	75 1a		 jne	 SHORT $LN283@TestSector
  00986	84 c0		 test	 al, al
  00988	74 12		 je	 SHORT $LN284@TestSector
  0098a	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  0098d	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00990	75 0e		 jne	 SHORT $LN283@TestSector
  00992	83 c1 02	 add	 ecx, 2
  00995	83 c2 02	 add	 edx, 2
  00998	84 c0		 test	 al, al
  0099a	75 e4		 jne	 SHORT $LL282@TestSector
$LN284@TestSector:
  0099c	33 c0		 xor	 eax, eax
  0099e	eb 05		 jmp	 SHORT $LN285@TestSector
$LN283@TestSector:
  009a0	1b c0		 sbb	 eax, eax
  009a2	83 d8 ff	 sbb	 eax, -1
$LN285@TestSector:
  009a5	85 c0		 test	 eax, eax
  009a7	75 12		 jne	 SHORT $LN4@TestSector

; 1012 : 		{
; 1013 : 			if (crc != 0xbe78cec1)

  009a9	81 fe c1 ce 78
	be		 cmp	 esi, -1099379007	; be78cec1H
  009af	0f 85 82 f6 ff
	ff		 jne	 $LN164@TestSector

; 1014 : 				return FALSE;
; 1015 : 			nTestsPerformed++;

  009b5	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]

; 1016 : 		}
; 1017 : 
; 1018 : 		if (crc == 0x9f5edd58)

  009b9	eb 0c		 jmp	 SHORT $LN220@TestSector
$LN4@TestSector:
  009bb	81 fe 58 dd 5e
	9f		 cmp	 esi, -1621172904	; 9f5edd58H
  009c1	0f 84 70 f6 ff
	ff		 je	 $LN164@TestSector
$LN220@TestSector:

; 1019 : 			return FALSE;
; 1020 : 
; 1021 : 		DecryptBuffer (buf, sizeof (buf), ci);

  009c7	53		 push	 ebx
  009c8	6a 00		 push	 0
  009ca	8d 44 24 70	 lea	 eax, DWORD PTR _buf$[esp+2168]
  009ce	68 00 08 00 00	 push	 2048			; 00000800H
  009d3	50		 push	 eax
  009d4	e8 00 00 00 00	 call	 _DecryptBuffer

; 1022 : 
; 1023 : 		if (GetCrc32 (buf, sizeof (buf)) != 0x9f5edd58)

  009d9	8d 4c 24 78	 lea	 ecx, DWORD PTR _buf$[esp+2176]
  009dd	68 00 08 00 00	 push	 2048			; 00000800H
  009e2	51		 push	 ecx
  009e3	e8 00 00 00 00	 call	 _GetCrc32
  009e8	83 c4 18	 add	 esp, 24			; 00000018H
  009eb	3d 58 dd 5e 9f	 cmp	 eax, -1621172904	; 9f5edd58H
  009f0	0f 85 41 f6 ff
	ff		 jne	 $LN164@TestSector

; 1024 : 			return FALSE;
; 1025 : 
; 1026 : 		nTestsPerformed++;

  009f6	ff 44 24 10	 inc	 DWORD PTR _nTestsPerformed$[esp+2160]
  009fa	8b fb		 mov	 edi, ebx
$LN33@TestSector:
  009fc	8b 17		 mov	 edx, DWORD PTR [edi]
  009fe	52		 push	 edx
  009ff	e8 00 00 00 00	 call	 _EAGetNext
  00a04	83 c4 04	 add	 esp, 4
  00a07	89 07		 mov	 DWORD PTR [edi], eax
  00a09	85 c0		 test	 eax, eax
  00a0b	0f 85 bf fc ff
	ff		 jne	 $LL34@TestSector
$LN32@TestSector:

; 1027 : 	}
; 1028 : 
; 1029 : 	return (nTestsPerformed == 80);
; 1030 : }

  00a11	8b 8c 24 6c 08
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+2160]
  00a18	33 c0		 xor	 eax, eax
  00a1a	83 7c 24 10 50	 cmp	 DWORD PTR _nTestsPerformed$[esp+2160], 80 ; 00000050H
  00a1f	5f		 pop	 edi
  00a20	5e		 pop	 esi
  00a21	0f 94 c0	 sete	 al
  00a24	5b		 pop	 ebx
  00a25	33 cc		 xor	 ecx, esp
  00a27	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a2c	8b e5		 mov	 esp, ebp
  00a2e	5d		 pop	 ebp
  00a2f	c3		 ret	 0
$LN303@TestSector:
  00a30	00 00 00 00	 DD	 $LN128@TestSector
  00a34	00 00 00 00	 DD	 $LN126@TestSector
  00a38	00 00 00 00	 DD	 $LN124@TestSector
  00a3c	00 00 00 00	 DD	 $LN122@TestSector
$LN304@TestSector:
  00a40	00 00 00 00	 DD	 $LN116@TestSector
  00a44	00 00 00 00	 DD	 $LN114@TestSector
  00a48	00 00 00 00	 DD	 $LN112@TestSector
  00a4c	00 00 00 00	 DD	 $LN110@TestSector
$LN305@TestSector:
  00a50	00 00 00 00	 DD	 $LN104@TestSector
  00a54	00 00 00 00	 DD	 $LN102@TestSector
  00a58	00 00 00 00	 DD	 $LN100@TestSector
  00a5c	00 00 00 00	 DD	 $LN98@TestSector
$LN306@TestSector:
  00a60	00 00 00 00	 DD	 $LN92@TestSector
  00a64	00 00 00 00	 DD	 $LN90@TestSector
  00a68	00 00 00 00	 DD	 $LN88@TestSector
  00a6c	00 00 00 00	 DD	 $LN86@TestSector
$LN307@TestSector:
  00a70	00 00 00 00	 DD	 $LN80@TestSector
  00a74	00 00 00 00	 DD	 $LN78@TestSector
  00a78	00 00 00 00	 DD	 $LN76@TestSector
  00a7c	00 00 00 00	 DD	 $LN74@TestSector
$LN308@TestSector:
  00a80	00 00 00 00	 DD	 $LN68@TestSector
  00a84	00 00 00 00	 DD	 $LN66@TestSector
  00a88	00 00 00 00	 DD	 $LN64@TestSector
  00a8c	00 00 00 00	 DD	 $LN62@TestSector
$LN309@TestSector:
  00a90	00 00 00 00	 DD	 $LN56@TestSector
  00a94	00 00 00 00	 DD	 $LN54@TestSector
  00a98	00 00 00 00	 DD	 $LN52@TestSector
  00a9c	00 00 00 00	 DD	 $LN50@TestSector
$LN310@TestSector:
  00aa0	00 00 00 00	 DD	 $LN44@TestSector
  00aa4	00 00 00 00	 DD	 $LN42@TestSector
  00aa8	00 00 00 00	 DD	 $LN40@TestSector
  00aac	00 00 00 00	 DD	 $LN38@TestSector
_TestSectorBufEncryption ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_crypto_close:PROC
EXTRN	_crc32_selftests:PROC
EXTRN	_DecipherBlocks:PROC
EXTRN	_EncipherBlocks:PROC
EXTRN	_DecipherBlock:PROC
EXTRN	_EncipherBlock:PROC
EXTRN	_BlowfishEncryptLE:PROC
EXTRN	_MirrorBytes32:PROC
EXTRN	_crypto_open:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogtpy
;	COMDAT _DoAutoTestAlgorithms
_TEXT	SEGMENT
_bFailed$ = -1092					; size = 4
_i$ = -1088						; size = 4
tv1280 = -1084						; size = 4
_ci$ = -1080						; size = 4
_tmp$ = -1076						; size = 16
_key$ = -1060						; size = 32
_testData$79233 = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_DoAutoTestAlgorithms PROC				; COMDAT

; 1367 : {

  00000	81 ec 44 04 00
	00		 sub	 esp, 1092		; 00000444H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 40 04
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1092], eax
  00014	53		 push	 ebx

; 1368 : 	PCRYPTO_INFO ci;
; 1369 : 	char key[32];
; 1370 : 	unsigned char tmp[16];
; 1371 : 	BOOL bFailed = FALSE;

  00015	33 db		 xor	 ebx, ebx
  00017	89 5c 24 04	 mov	 DWORD PTR _bFailed$[esp+1096], ebx

; 1372 : 	int i;
; 1373 : 
; 1374 : 	ci = crypto_open ();

  0001b	e8 00 00 00 00	 call	 _crypto_open
  00020	89 44 24 10	 mov	 DWORD PTR _ci$[esp+1096], eax

; 1375 : 	if (!ci)

  00024	3b c3		 cmp	 eax, ebx
  00026	75 18		 jne	 SHORT $LN45@DoAutoTest

; 1376 : 		return FALSE;

  00028	33 c0		 xor	 eax, eax
  0002a	5b		 pop	 ebx

; 1562 : 	return !bFailed;
; 1563 : }

  0002b	8b 8c 24 40 04
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1092]
  00032	33 cc		 xor	 ecx, esp
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	81 c4 44 04 00
	00		 add	 esp, 1092		; 00000444H
  0003f	c3		 ret	 0
$LN45@DoAutoTest:
  00040	56		 push	 esi
  00041	57		 push	 edi

; 1377 : 
; 1378 : 	memset (ci, 0, sizeof (*ci));

  00042	68 68 44 00 00	 push	 17512			; 00004468H
  00047	53		 push	 ebx
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _memset
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1379 : 
; 1380 : 	/* Blowfish (deprecated/legacy) */
; 1381 : 
; 1382 : 	for (i=0;i<BF_TEST_COUNT;i++)

  00051	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  00056	8d 44 24 1c	 lea	 eax, DWORD PTR _tmp$[esp+1104]
  0005a	be 00 00 00 00	 mov	 esi, OFFSET _bf_ecb_vectors
  0005f	2b f8		 sub	 edi, eax
  00061	55		 push	 ebp
$LL157@DoAutoTest:

; 1383 : 	{		
; 1384 : 		memcpy(key, bf_ecb_vectors[i].key, 8);

  00062	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00065	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 1385 : 		memcpy(tmp, bf_ecb_vectors[i].plaintext, 8);

  00067	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006a	89 54 24 34	 mov	 DWORD PTR _key$[esp+1112], edx

; 1386 : 		CipherInit2(BLOWFISH, key, ks_tmp, 8);

  0006e	8d 54 24 30	 lea	 edx, DWORD PTR _key$[esp+1108]
  00072	52		 push	 edx
  00073	89 4c 24 34	 mov	 DWORD PTR _key$[esp+1112], ecx
  00077	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0007a	6a 08		 push	 8
  0007c	68 00 00 00 00	 push	 OFFSET _ks_tmp
  00081	89 44 24 2c	 mov	 DWORD PTR _tmp$[esp+1120], eax
  00085	89 4c 24 30	 mov	 DWORD PTR _tmp$[esp+1124], ecx
  00089	e8 00 00 00 00	 call	 _BlowfishSetKey

; 1387 : 
; 1388 : 		((uint32 *)tmp)[0] = BE32 (((uint32 *)tmp)[0]);

  0008e	8b 44 24 2c	 mov	 eax, DWORD PTR _tmp$[esp+1120]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 _MirrorBytes32

; 1389 : 		((uint32 *)tmp)[1] = BE32 (((uint32 *)tmp)[1]);

  00098	8b 4c 24 34	 mov	 ecx, DWORD PTR _tmp$[esp+1128]
  0009c	51		 push	 ecx
  0009d	89 44 24 34	 mov	 DWORD PTR _tmp$[esp+1128], eax
  000a1	e8 00 00 00 00	 call	 _MirrorBytes32

; 1390 : 
; 1391 : 		BlowfishEncryptLE (tmp,tmp,(BF_KEY *)ks_tmp,1);

  000a6	6a 01		 push	 1
  000a8	8d 54 24 38	 lea	 edx, DWORD PTR _tmp$[esp+1132]
  000ac	68 00 00 00 00	 push	 OFFSET _ks_tmp
  000b1	89 44 24 40	 mov	 DWORD PTR _tmp$[esp+1140], eax
  000b5	52		 push	 edx
  000b6	8b c2		 mov	 eax, edx
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 _BlowfishEncryptLE

; 1392 : 		BlowfishEncryptLE (tmp,tmp,(BF_KEY *)ks_tmp,0);

  000be	6a 00		 push	 0
  000c0	8d 4c 24 48	 lea	 ecx, DWORD PTR _tmp$[esp+1148]
  000c4	68 00 00 00 00	 push	 OFFSET _ks_tmp
  000c9	51		 push	 ecx
  000ca	8b d1		 mov	 edx, ecx
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 _BlowfishEncryptLE

; 1393 : 		BlowfishEncryptLE (tmp,tmp,(BF_KEY *)ks_tmp,1);

  000d2	6a 01		 push	 1
  000d4	8d 44 24 58	 lea	 eax, DWORD PTR _tmp$[esp+1164]
  000d8	68 00 00 00 00	 push	 OFFSET _ks_tmp
  000dd	50		 push	 eax
  000de	8b c8		 mov	 ecx, eax
  000e0	51		 push	 ecx
  000e1	e8 00 00 00 00	 call	 _BlowfishEncryptLE

; 1394 : 
; 1395 : 		((uint32 *)tmp)[0] = BE32 (((uint32 *)tmp)[0]);

  000e6	8b 54 24 64	 mov	 edx, DWORD PTR _tmp$[esp+1176]
  000ea	83 c4 44	 add	 esp, 68			; 00000044H
  000ed	52		 push	 edx
  000ee	e8 00 00 00 00	 call	 _MirrorBytes32
  000f3	89 44 24 24	 mov	 DWORD PTR _tmp$[esp+1112], eax

; 1396 : 		((uint32 *)tmp)[1] = BE32 (((uint32 *)tmp)[1]);

  000f7	8b 44 24 28	 mov	 eax, DWORD PTR _tmp$[esp+1116]
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 _MirrorBytes32
  00101	89 44 24 2c	 mov	 DWORD PTR _tmp$[esp+1120], eax
  00105	83 c4 08	 add	 esp, 8

; 1397 : 
; 1398 : 		if (memcmp(bf_ecb_vectors[i].ciphertext,tmp,8)!=0)

  00108	b9 08 00 00 00	 mov	 ecx, 8
  0010d	8d 44 24 20	 lea	 eax, DWORD PTR _tmp$[esp+1108]
  00111	8d 14 37	 lea	 edx, DWORD PTR [edi+esi]
$LL49@DoAutoTest:
  00114	8b 2c 02	 mov	 ebp, DWORD PTR [edx+eax]
  00117	3b 28		 cmp	 ebp, DWORD PTR [eax]
  00119	75 1b		 jne	 SHORT $LN158@DoAutoTest
  0011b	83 e9 04	 sub	 ecx, 4
  0011e	83 c0 04	 add	 eax, 4
  00121	83 f9 04	 cmp	 ecx, 4
  00124	73 ee		 jae	 SHORT $LL49@DoAutoTest
  00126	83 c6 18	 add	 esi, 24			; 00000018H
  00129	43		 inc	 ebx
  0012a	81 fe 30 03 00
	00		 cmp	 esi, OFFSET _bf_ecb_vectors+816
  00130	0f 8c 2c ff ff
	ff		 jl	 $LL157@DoAutoTest
$LN158@DoAutoTest:

; 1399 : 			break;
; 1400 : 	}
; 1401 : 
; 1402 : 	if (i != BF_TEST_COUNT)

  00136	83 fb 22	 cmp	 ebx, 34			; 00000022H
  00139	74 08		 je	 SHORT $LN40@DoAutoTest

; 1403 : 		bFailed = TRUE;

  0013b	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR _bFailed$[esp+1108], 1
$LN40@DoAutoTest:

; 1404 : 
; 1405 : 	/* CAST5 (deprecated/legacy) */
; 1406 : 
; 1407 : 	for (i=0;i<CAST_TEST_COUNT;i++)

  00143	bf 18 00 00 00	 mov	 edi, 24			; 00000018H
  00148	8d 4c 24 20	 lea	 ecx, DWORD PTR _tmp$[esp+1108]
  0014c	33 db		 xor	 ebx, ebx
  0014e	be 00 00 00 00	 mov	 esi, OFFSET _cast_ecb_vectors
  00153	2b f9		 sub	 edi, ecx
$LL155@DoAutoTest:

; 1408 : 	{			
; 1409 : 		int cipher = CAST;
; 1410 : 		memcpy(key, cast_ecb_vectors[i].key, 16);

  00155	8b 16		 mov	 edx, DWORD PTR [esi]
  00157	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0015a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0015d	89 54 24 30	 mov	 DWORD PTR _key$[esp+1108], edx
  00161	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]

; 1411 : 		memcpy(tmp, cast_ecb_vectors[i].plaintext, 8);
; 1412 : 		CipherInit2(cipher, key, ks_tmp, 16);

  00164	6a 10		 push	 16			; 00000010H
  00166	89 54 24 40	 mov	 DWORD PTR _key$[esp+1124], edx
  0016a	68 00 00 00 00	 push	 OFFSET _ks_tmp
  0016f	8d 54 24 38	 lea	 edx, DWORD PTR _key$[esp+1116]
  00173	89 44 24 3c	 mov	 DWORD PTR _key$[esp+1120], eax
  00177	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0017a	89 4c 24 40	 mov	 DWORD PTR _key$[esp+1124], ecx
  0017e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00181	52		 push	 edx
  00182	6a 05		 push	 5
  00184	89 44 24 30	 mov	 DWORD PTR _tmp$[esp+1124], eax
  00188	89 4c 24 34	 mov	 DWORD PTR _tmp$[esp+1128], ecx
  0018c	e8 00 00 00 00	 call	 _CipherInit2

; 1413 : 
; 1414 : 		EncipherBlock(cipher, tmp, ks_tmp);

  00191	68 00 00 00 00	 push	 OFFSET _ks_tmp
  00196	8d 44 24 34	 lea	 eax, DWORD PTR _tmp$[esp+1128]
  0019a	50		 push	 eax
  0019b	6a 05		 push	 5
  0019d	e8 00 00 00 00	 call	 _EncipherBlock

; 1415 : 		DecipherBlock(cipher, tmp, ks_tmp);

  001a2	68 00 00 00 00	 push	 OFFSET _ks_tmp
  001a7	8d 4c 24 40	 lea	 ecx, DWORD PTR _tmp$[esp+1140]
  001ab	51		 push	 ecx
  001ac	6a 05		 push	 5
  001ae	e8 00 00 00 00	 call	 _DecipherBlock

; 1416 : 		EncipherBlock(cipher, tmp, ks_tmp);

  001b3	68 00 00 00 00	 push	 OFFSET _ks_tmp
  001b8	8d 54 24 4c	 lea	 edx, DWORD PTR _tmp$[esp+1152]
  001bc	52		 push	 edx
  001bd	6a 05		 push	 5
  001bf	e8 00 00 00 00	 call	 _EncipherBlock
  001c4	83 c4 34	 add	 esp, 52			; 00000034H

; 1417 : 
; 1418 : 		if (memcmp(cast_ecb_vectors[i].ciphertext, tmp,8)!=0)

  001c7	b9 08 00 00 00	 mov	 ecx, 8
  001cc	8d 44 24 20	 lea	 eax, DWORD PTR _tmp$[esp+1108]
  001d0	8d 14 37	 lea	 edx, DWORD PTR [edi+esi]
$LL53@DoAutoTest:
  001d3	8b 2c 02	 mov	 ebp, DWORD PTR [edx+eax]
  001d6	3b 28		 cmp	 ebp, DWORD PTR [eax]
  001d8	75 1b		 jne	 SHORT $LN156@DoAutoTest
  001da	83 e9 04	 sub	 ecx, 4
  001dd	83 c0 04	 add	 eax, 4
  001e0	83 f9 04	 cmp	 ecx, 4
  001e3	73 ee		 jae	 SHORT $LL53@DoAutoTest
  001e5	83 c6 20	 add	 esi, 32			; 00000020H
  001e8	43		 inc	 ebx
  001e9	81 fe 20 00 00
	00		 cmp	 esi, OFFSET _cast_ecb_vectors+32
  001ef	0f 8c 60 ff ff
	ff		 jl	 $LL155@DoAutoTest
$LN156@DoAutoTest:

; 1419 : 			break;
; 1420 : 	}
; 1421 : 
; 1422 : 	if (i!=CAST_TEST_COUNT)

  001f5	83 fb 01	 cmp	 ebx, 1
  001f8	74 08		 je	 SHORT $LN35@DoAutoTest

; 1423 : 		bFailed = TRUE;

  001fa	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR _bFailed$[esp+1108], 1
$LN35@DoAutoTest:

; 1424 : 
; 1425 : 
; 1426 : 	/* Triple DES (TECB, EDE) - deprecated/legacy */
; 1427 : 
; 1428 : 	for (i = 0; i < TRIPLEDES_TEST_COUNT; i++)

  00202	bb 18 00 00 00	 mov	 ebx, OFFSET _tripledes_vectors+24
  00207	8d 44 24 20	 lea	 eax, DWORD PTR _tmp$[esp+1108]
  0020b	8b f3		 mov	 esi, ebx
  0020d	8b f8		 mov	 edi, eax
  0020f	33 ed		 xor	 ebp, ebp
  00211	2b f0		 sub	 esi, eax
  00213	83 ef 18	 sub	 edi, 24			; 00000018H
  00216	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL34@DoAutoTest:

; 1429 : 	{			
; 1430 : 		int cipher = TRIPLEDES;
; 1431 : 		memcpy(key, tripledes_vectors[i].key, sizeof(tripledes_vectors->key));

  00220	8b 44 37 08	 mov	 eax, DWORD PTR [edi+esi+8]
  00224	8b 0c 37	 mov	 ecx, DWORD PTR [edi+esi]
  00227	8b 54 37 04	 mov	 edx, DWORD PTR [edi+esi+4]
  0022b	89 44 24 38	 mov	 DWORD PTR _key$[esp+1116], eax
  0022f	8b 44 37 14	 mov	 eax, DWORD PTR [edi+esi+20]
  00233	89 4c 24 30	 mov	 DWORD PTR _key$[esp+1108], ecx
  00237	8b 4c 37 0c	 mov	 ecx, DWORD PTR [edi+esi+12]
  0023b	89 54 24 34	 mov	 DWORD PTR _key$[esp+1112], edx
  0023f	8b 54 37 10	 mov	 edx, DWORD PTR [edi+esi+16]
  00243	89 44 24 44	 mov	 DWORD PTR _key$[esp+1128], eax

; 1432 : 		memcpy(tmp, tripledes_vectors[i].plaintext, sizeof(tripledes_vectors->plaintext));
; 1433 : 
; 1434 : 		CipherInit(cipher, key, ks_tmp);

  00247	68 00 00 00 00	 push	 OFFSET _ks_tmp
  0024c	8d 44 24 34	 lea	 eax, DWORD PTR _key$[esp+1112]
  00250	89 4c 24 40	 mov	 DWORD PTR _key$[esp+1124], ecx
  00254	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00256	89 54 24 44	 mov	 DWORD PTR _key$[esp+1128], edx
  0025a	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0025d	50		 push	 eax
  0025e	6a 06		 push	 6
  00260	89 4c 24 2c	 mov	 DWORD PTR _tmp$[esp+1120], ecx
  00264	89 54 24 30	 mov	 DWORD PTR _tmp$[esp+1124], edx
  00268	e8 00 00 00 00	 call	 _CipherInit

; 1435 : 
; 1436 : 		EncipherBlock(cipher, tmp, ks_tmp);

  0026d	68 00 00 00 00	 push	 OFFSET _ks_tmp
  00272	8d 4c 24 30	 lea	 ecx, DWORD PTR _tmp$[esp+1124]
  00276	51		 push	 ecx
  00277	6a 06		 push	 6
  00279	e8 00 00 00 00	 call	 _EncipherBlock
  0027e	83 c4 18	 add	 esp, 24			; 00000018H

; 1437 : 		if (memcmp(tripledes_vectors[i].ciphertext, tmp, sizeof(tripledes_vectors->ciphertext)) != 0)

  00281	b9 08 00 00 00	 mov	 ecx, 8
  00286	8d 44 24 20	 lea	 eax, DWORD PTR _tmp$[esp+1108]
  0028a	8d 9b 00 00 00
	00		 npad	 6
$LL57@DoAutoTest:
  00290	8b 54 30 08	 mov	 edx, DWORD PTR [eax+esi+8]
  00294	3b 10		 cmp	 edx, DWORD PTR [eax]
  00296	75 4d		 jne	 SHORT $LN59@DoAutoTest
  00298	83 e9 04	 sub	 ecx, 4
  0029b	83 c0 04	 add	 eax, 4
  0029e	83 f9 04	 cmp	 ecx, 4
  002a1	73 ed		 jae	 SHORT $LL57@DoAutoTest

; 1438 : 			break;
; 1439 : 
; 1440 : 		DecipherBlock(cipher, tmp, ks_tmp);

  002a3	68 00 00 00 00	 push	 OFFSET _ks_tmp
  002a8	8d 44 24 24	 lea	 eax, DWORD PTR _tmp$[esp+1112]
  002ac	50		 push	 eax
  002ad	6a 06		 push	 6
  002af	e8 00 00 00 00	 call	 _DecipherBlock
  002b4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1441 : 		if (memcmp(tripledes_vectors[i].plaintext, tmp, sizeof(tripledes_vectors->plaintext)) != 0)

  002b7	b9 08 00 00 00	 mov	 ecx, 8
  002bc	8d 44 24 20	 lea	 eax, DWORD PTR _tmp$[esp+1108]
$LL61@DoAutoTest:
  002c0	8b 14 30	 mov	 edx, DWORD PTR [eax+esi]
  002c3	3b 10		 cmp	 edx, DWORD PTR [eax]
  002c5	75 1e		 jne	 SHORT $LN59@DoAutoTest
  002c7	83 e9 04	 sub	 ecx, 4
  002ca	83 c0 04	 add	 eax, 4
  002cd	83 f9 04	 cmp	 ecx, 4
  002d0	73 ee		 jae	 SHORT $LL61@DoAutoTest
  002d2	83 c3 28	 add	 ebx, 40			; 00000028H
  002d5	45		 inc	 ebp
  002d6	83 c6 28	 add	 esi, 40			; 00000028H
  002d9	81 fb 40 00 00
	00		 cmp	 ebx, OFFSET _tripledes_vectors+64
  002df	0f 8c 3b ff ff
	ff		 jl	 $LL34@DoAutoTest
$LN59@DoAutoTest:

; 1442 : 			break;
; 1443 : 	}
; 1444 : 	if (i != TRIPLEDES_TEST_COUNT)

  002e5	83 fd 01	 cmp	 ebp, 1
  002e8	74 08		 je	 SHORT $LN29@DoAutoTest

; 1445 : 		bFailed = TRUE;

  002ea	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR _bFailed$[esp+1108], 1
$LN29@DoAutoTest:

; 1446 : 
; 1447 : 
; 1448 : 	/* AES */
; 1449 : 
; 1450 : 	for (i = 0; i < AES_TEST_COUNT; i++)

  002f2	bb 20 00 00 00	 mov	 ebx, OFFSET _aes_ecb_vectors+32
  002f7	8d 44 24 20	 lea	 eax, DWORD PTR _tmp$[esp+1108]
  002fb	8b eb		 mov	 ebp, ebx
  002fd	2b e8		 sub	 ebp, eax
  002ff	83 e8 20	 sub	 eax, 32			; 00000020H
  00302	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR _i$[esp+1108], 0
  0030a	89 44 24 18	 mov	 DWORD PTR tv1280[esp+1108], eax
  0030e	eb 04		 jmp	 SHORT $LN28@DoAutoTest
$LL153@DoAutoTest:
  00310	8b 44 24 18	 mov	 eax, DWORD PTR tv1280[esp+1108]
$LN28@DoAutoTest:

; 1451 : 	{			
; 1452 : 		int cipher = AES;
; 1453 : 		memcpy(key, aes_ecb_vectors[i].key, 32);
; 1454 : 		memcpy(tmp, aes_ecb_vectors[i].plaintext, 16);

  00314	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00317	8d 34 28	 lea	 esi, DWORD PTR [eax+ebp]
  0031a	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0031d	b9 08 00 00 00	 mov	 ecx, 8
  00322	8d 7c 24 30	 lea	 edi, DWORD PTR _key$[esp+1108]
  00326	f3 a5		 rep movsd
  00328	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0032a	89 54 24 24	 mov	 DWORD PTR _tmp$[esp+1112], edx

; 1455 : 		CipherInit(cipher, key, ks_tmp);

  0032e	68 00 00 00 00	 push	 OFFSET _ks_tmp
  00333	8d 54 24 34	 lea	 edx, DWORD PTR _key$[esp+1112]
  00337	89 4c 24 24	 mov	 DWORD PTR _tmp$[esp+1112], ecx
  0033b	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  0033e	52		 push	 edx
  0033f	bf 01 00 00 00	 mov	 edi, 1
  00344	57		 push	 edi
  00345	89 44 24 34	 mov	 DWORD PTR _tmp$[esp+1128], eax
  00349	89 4c 24 38	 mov	 DWORD PTR _tmp$[esp+1132], ecx
  0034d	e8 00 00 00 00	 call	 _CipherInit

; 1456 : 
; 1457 : 		EncipherBlock(cipher, tmp, ks_tmp);

  00352	68 00 00 00 00	 push	 OFFSET _ks_tmp
  00357	8d 44 24 30	 lea	 eax, DWORD PTR _tmp$[esp+1124]
  0035b	50		 push	 eax
  0035c	57		 push	 edi
  0035d	e8 00 00 00 00	 call	 _EncipherBlock
  00362	83 c4 18	 add	 esp, 24			; 00000018H

; 1458 : 		if (memcmp(aes_ecb_vectors[i].ciphertext, tmp, 16) != 0)

  00365	8d 4f 0f	 lea	 ecx, DWORD PTR [edi+15]
  00368	8d 44 24 20	 lea	 eax, DWORD PTR _tmp$[esp+1108]
  0036c	8d 64 24 00	 npad	 4
$LL65@DoAutoTest:
  00370	8b 54 28 10	 mov	 edx, DWORD PTR [eax+ebp+16]
  00374	3b 10		 cmp	 edx, DWORD PTR [eax]
  00376	75 50		 jne	 SHORT $LN67@DoAutoTest
  00378	83 e9 04	 sub	 ecx, 4
  0037b	83 c0 04	 add	 eax, 4
  0037e	83 f9 04	 cmp	 ecx, 4
  00381	73 ed		 jae	 SHORT $LL65@DoAutoTest

; 1459 : 			break;
; 1460 : 
; 1461 : 		DecipherBlock(cipher, tmp, ks_tmp);

  00383	68 00 00 00 00	 push	 OFFSET _ks_tmp
  00388	8d 44 24 24	 lea	 eax, DWORD PTR _tmp$[esp+1112]
  0038c	50		 push	 eax
  0038d	57		 push	 edi
  0038e	e8 00 00 00 00	 call	 _DecipherBlock
  00393	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1462 : 		if (memcmp(aes_ecb_vectors[i].plaintext, tmp, 16) != 0)

  00396	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0039b	8d 44 24 20	 lea	 eax, DWORD PTR _tmp$[esp+1108]
  0039f	90		 npad	 1
$LL69@DoAutoTest:
  003a0	8b 14 28	 mov	 edx, DWORD PTR [eax+ebp]
  003a3	3b 10		 cmp	 edx, DWORD PTR [eax]
  003a5	75 21		 jne	 SHORT $LN67@DoAutoTest
  003a7	83 e9 04	 sub	 ecx, 4
  003aa	83 c0 04	 add	 eax, 4
  003ad	83 f9 04	 cmp	 ecx, 4
  003b0	73 ee		 jae	 SHORT $LL69@DoAutoTest
  003b2	01 7c 24 14	 add	 DWORD PTR _i$[esp+1108], edi
  003b6	83 c3 40	 add	 ebx, 64			; 00000040H
  003b9	83 c5 40	 add	 ebp, 64			; 00000040H
  003bc	81 fb 60 00 00
	00		 cmp	 ebx, OFFSET _aes_ecb_vectors+96
  003c2	0f 8c 48 ff ff
	ff		 jl	 $LL153@DoAutoTest
$LN67@DoAutoTest:

; 1463 : 			break;
; 1464 : 	}
; 1465 : 	if (i != AES_TEST_COUNT)

  003c8	39 7c 24 14	 cmp	 DWORD PTR _i$[esp+1108], edi
  003cc	74 04		 je	 SHORT $LN154@DoAutoTest

; 1466 : 		bFailed = TRUE;

  003ce	89 7c 24 10	 mov	 DWORD PTR _bFailed$[esp+1108], edi
$LN154@DoAutoTest:

; 1467 : 
; 1468 : 	// AES EncipherBlocks()/DecipherBlocks()
; 1469 : 	{
; 1470 : 		byte testData[1024];
; 1471 : 		uint32 origCrc;
; 1472 : 		size_t i;
; 1473 : 
; 1474 : 		for (i = 0; i < sizeof (testData); ++i)

  003d2	33 c0		 xor	 eax, eax
$LL22@DoAutoTest:

; 1475 : 		{
; 1476 : 			testData[i] = (byte) i;

  003d4	88 44 04 50	 mov	 BYTE PTR _testData$79233[esp+eax+1108], al
  003d8	03 c7		 add	 eax, edi
  003da	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  003df	72 f3		 jb	 SHORT $LL22@DoAutoTest

; 1477 : 		}
; 1478 : 
; 1479 : 		origCrc = GetCrc32 (testData, sizeof (testData));

  003e1	8d 44 24 50	 lea	 eax, DWORD PTR _testData$79233[esp+1108]
  003e5	68 00 04 00 00	 push	 1024			; 00000400H
  003ea	50		 push	 eax
  003eb	e8 00 00 00 00	 call	 _GetCrc32

; 1480 : 
; 1481 : 		CipherInit (AES, testData, ks_tmp);

  003f0	68 00 00 00 00	 push	 OFFSET _ks_tmp
  003f5	8d 4c 24 5c	 lea	 ecx, DWORD PTR _testData$79233[esp+1120]
  003f9	51		 push	 ecx
  003fa	57		 push	 edi
  003fb	8b f0		 mov	 esi, eax
  003fd	e8 00 00 00 00	 call	 _CipherInit

; 1482 : 		EncipherBlocks (AES, testData, ks_tmp, sizeof (testData) / CipherGetBlockSize (AES));

  00402	57		 push	 edi
  00403	e8 00 00 00 00	 call	 _CipherGetBlockSize
  00408	8b c8		 mov	 ecx, eax
  0040a	33 d2		 xor	 edx, edx
  0040c	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  00411	f7 f1		 div	 ecx
  00413	8d 54 24 68	 lea	 edx, DWORD PTR _testData$79233[esp+1132]
  00417	50		 push	 eax
  00418	68 00 00 00 00	 push	 OFFSET _ks_tmp
  0041d	52		 push	 edx
  0041e	57		 push	 edi
  0041f	e8 00 00 00 00	 call	 _EncipherBlocks

; 1483 : 
; 1484 : 		if (GetCrc32 (testData, sizeof (testData)) != 0xb5cd5631)

  00424	8d 44 24 78	 lea	 eax, DWORD PTR _testData$79233[esp+1148]
  00428	68 00 04 00 00	 push	 1024			; 00000400H
  0042d	50		 push	 eax
  0042e	e8 00 00 00 00	 call	 _GetCrc32
  00433	83 c4 30	 add	 esp, 48			; 00000030H
  00436	3d 31 56 cd b5	 cmp	 eax, -1244834255	; b5cd5631H
  0043b	74 04		 je	 SHORT $LN19@DoAutoTest

; 1485 : 			bFailed = TRUE;

  0043d	89 7c 24 10	 mov	 DWORD PTR _bFailed$[esp+1108], edi
$LN19@DoAutoTest:

; 1486 : 
; 1487 : 		DecipherBlocks (AES, testData, ks_tmp, sizeof (testData) / CipherGetBlockSize (AES));

  00441	57		 push	 edi
  00442	e8 00 00 00 00	 call	 _CipherGetBlockSize
  00447	8b c8		 mov	 ecx, eax
  00449	33 d2		 xor	 edx, edx
  0044b	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  00450	f7 f1		 div	 ecx
  00452	8d 54 24 54	 lea	 edx, DWORD PTR _testData$79233[esp+1112]
  00456	50		 push	 eax
  00457	68 00 00 00 00	 push	 OFFSET _ks_tmp
  0045c	52		 push	 edx
  0045d	57		 push	 edi
  0045e	e8 00 00 00 00	 call	 _DecipherBlocks

; 1488 : 
; 1489 : 		if (origCrc != GetCrc32 (testData, sizeof (testData)))

  00463	8d 44 24 64	 lea	 eax, DWORD PTR _testData$79233[esp+1128]
  00467	68 00 04 00 00	 push	 1024			; 00000400H
  0046c	50		 push	 eax
  0046d	e8 00 00 00 00	 call	 _GetCrc32
  00472	83 c4 1c	 add	 esp, 28			; 0000001cH
  00475	3b f0		 cmp	 esi, eax
  00477	74 04		 je	 SHORT $LN18@DoAutoTest

; 1490 : 			bFailed = TRUE;

  00479	89 7c 24 10	 mov	 DWORD PTR _bFailed$[esp+1108], edi
$LN18@DoAutoTest:

; 1491 : 	}
; 1492 : 
; 1493 : 	/* Serpent */
; 1494 : 
; 1495 : 	for (i = 0; i < SERPENT_TEST_COUNT; i++)

  0047d	bb 20 00 00 00	 mov	 ebx, OFFSET _serpent_vectors+32
  00482	8b eb		 mov	 ebp, ebx
  00484	8d 4c 24 20	 lea	 ecx, DWORD PTR _tmp$[esp+1108]
  00488	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR _i$[esp+1108], 0
  00490	2b e9		 sub	 ebp, ecx
$LL17@DoAutoTest:

; 1496 : 	{			
; 1497 : 		int cipher = SERPENT;
; 1498 : 		memcpy(key, serpent_vectors[i].key, 32);

  00492	8b 54 24 18	 mov	 edx, DWORD PTR tv1280[esp+1108]

; 1499 : 		memcpy(tmp, serpent_vectors[i].plaintext, 16);

  00496	8b 03		 mov	 eax, DWORD PTR [ebx]
  00498	8d 34 2a	 lea	 esi, DWORD PTR [edx+ebp]
  0049b	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  0049e	b9 08 00 00 00	 mov	 ecx, 8
  004a3	8d 7c 24 30	 lea	 edi, DWORD PTR _key$[esp+1108]
  004a7	f3 a5		 rep movsd
  004a9	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  004ac	89 4c 24 24	 mov	 DWORD PTR _tmp$[esp+1112], ecx

; 1500 : 		CipherInit(cipher, key, ks_tmp);

  004b0	68 00 00 00 00	 push	 OFFSET _ks_tmp
  004b5	8d 4c 24 34	 lea	 ecx, DWORD PTR _key$[esp+1112]
  004b9	89 44 24 24	 mov	 DWORD PTR _tmp$[esp+1112], eax
  004bd	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  004c0	51		 push	 ecx
  004c1	6a 02		 push	 2
  004c3	89 54 24 34	 mov	 DWORD PTR _tmp$[esp+1128], edx
  004c7	89 44 24 38	 mov	 DWORD PTR _tmp$[esp+1132], eax
  004cb	e8 00 00 00 00	 call	 _CipherInit

; 1501 : 
; 1502 : 		EncipherBlock(cipher, tmp, ks_tmp);

  004d0	68 00 00 00 00	 push	 OFFSET _ks_tmp
  004d5	8d 54 24 30	 lea	 edx, DWORD PTR _tmp$[esp+1124]
  004d9	52		 push	 edx
  004da	6a 02		 push	 2
  004dc	e8 00 00 00 00	 call	 _EncipherBlock
  004e1	83 c4 18	 add	 esp, 24			; 00000018H

; 1503 : 		if (memcmp(serpent_vectors[i].ciphertext, tmp, 16) != 0)

  004e4	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  004e9	8d 44 24 20	 lea	 eax, DWORD PTR _tmp$[esp+1108]
  004ed	8d 49 00	 npad	 3
$LL73@DoAutoTest:
  004f0	8b 54 28 10	 mov	 edx, DWORD PTR [eax+ebp+16]
  004f4	3b 10		 cmp	 edx, DWORD PTR [eax]
  004f6	75 50		 jne	 SHORT $LN75@DoAutoTest
  004f8	83 e9 04	 sub	 ecx, 4
  004fb	83 c0 04	 add	 eax, 4
  004fe	83 f9 04	 cmp	 ecx, 4
  00501	73 ed		 jae	 SHORT $LL73@DoAutoTest

; 1504 : 			break;
; 1505 : 
; 1506 : 		DecipherBlock(cipher, tmp, ks_tmp);

  00503	68 00 00 00 00	 push	 OFFSET _ks_tmp
  00508	8d 44 24 24	 lea	 eax, DWORD PTR _tmp$[esp+1112]
  0050c	50		 push	 eax
  0050d	6a 02		 push	 2
  0050f	e8 00 00 00 00	 call	 _DecipherBlock
  00514	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1507 : 		if (memcmp(serpent_vectors[i].plaintext, tmp, 16) != 0)

  00517	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0051c	8d 44 24 20	 lea	 eax, DWORD PTR _tmp$[esp+1108]
$LL77@DoAutoTest:
  00520	8b 14 28	 mov	 edx, DWORD PTR [eax+ebp]
  00523	3b 10		 cmp	 edx, DWORD PTR [eax]
  00525	75 21		 jne	 SHORT $LN75@DoAutoTest
  00527	83 e9 04	 sub	 ecx, 4
  0052a	83 c0 04	 add	 eax, 4
  0052d	83 f9 04	 cmp	 ecx, 4
  00530	73 ee		 jae	 SHORT $LL77@DoAutoTest
  00532	ff 44 24 14	 inc	 DWORD PTR _i$[esp+1108]
  00536	83 c3 40	 add	 ebx, 64			; 00000040H
  00539	83 c5 40	 add	 ebp, 64			; 00000040H
  0053c	81 fb 60 00 00
	00		 cmp	 ebx, OFFSET _serpent_vectors+96
  00542	0f 8c 4a ff ff
	ff		 jl	 $LL17@DoAutoTest
$LN75@DoAutoTest:

; 1508 : 			break;
; 1509 : 	}
; 1510 : 	if (i != SERPENT_TEST_COUNT)

  00548	b8 01 00 00 00	 mov	 eax, 1
  0054d	39 44 24 14	 cmp	 DWORD PTR _i$[esp+1108], eax
  00551	74 04		 je	 SHORT $LN12@DoAutoTest

; 1511 : 		bFailed = TRUE;

  00553	89 44 24 10	 mov	 DWORD PTR _bFailed$[esp+1108], eax
$LN12@DoAutoTest:

; 1512 : 
; 1513 : 
; 1514 : 	/* Twofish */
; 1515 : 
; 1516 : 	for (i = 0; i < TWOFISH_TEST_COUNT; i++)

  00557	bb 20 00 00 00	 mov	 ebx, OFFSET _twofish_vectors+32
  0055c	8b eb		 mov	 ebp, ebx
  0055e	8d 44 24 20	 lea	 eax, DWORD PTR _tmp$[esp+1108]
  00562	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR _i$[esp+1108], 0
  0056a	2b e8		 sub	 ebp, eax
  0056c	8d 64 24 00	 npad	 4
$LL11@DoAutoTest:

; 1517 : 	{			
; 1518 : 		int cipher = TWOFISH;
; 1519 : 		memcpy(key, twofish_vectors[i].key, 32);
; 1520 : 		memcpy(tmp, twofish_vectors[i].plaintext, 16);

  00570	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00573	8b 4c 24 18	 mov	 ecx, DWORD PTR tv1280[esp+1108]
  00577	8b 13		 mov	 edx, DWORD PTR [ebx]
  00579	8d 34 29	 lea	 esi, DWORD PTR [ecx+ebp]
  0057c	89 44 24 24	 mov	 DWORD PTR _tmp$[esp+1112], eax

; 1521 : 		CipherInit(cipher, key, ks_tmp);

  00580	68 00 00 00 00	 push	 OFFSET _ks_tmp
  00585	8d 44 24 34	 lea	 eax, DWORD PTR _key$[esp+1112]
  00589	b9 08 00 00 00	 mov	 ecx, 8
  0058e	8d 7c 24 34	 lea	 edi, DWORD PTR _key$[esp+1112]
  00592	f3 a5		 rep movsd
  00594	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00597	89 54 24 24	 mov	 DWORD PTR _tmp$[esp+1112], edx
  0059b	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
  0059e	50		 push	 eax
  0059f	6a 03		 push	 3
  005a1	89 4c 24 34	 mov	 DWORD PTR _tmp$[esp+1128], ecx
  005a5	89 54 24 38	 mov	 DWORD PTR _tmp$[esp+1132], edx
  005a9	e8 00 00 00 00	 call	 _CipherInit

; 1522 : 
; 1523 : 		EncipherBlock(cipher, tmp, ks_tmp);

  005ae	68 00 00 00 00	 push	 OFFSET _ks_tmp
  005b3	8d 4c 24 30	 lea	 ecx, DWORD PTR _tmp$[esp+1124]
  005b7	51		 push	 ecx
  005b8	6a 03		 push	 3
  005ba	e8 00 00 00 00	 call	 _EncipherBlock
  005bf	83 c4 18	 add	 esp, 24			; 00000018H

; 1524 : 		if (memcmp(twofish_vectors[i].ciphertext, tmp, 16) != 0)

  005c2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  005c7	8d 44 24 20	 lea	 eax, DWORD PTR _tmp$[esp+1108]
  005cb	eb 03 8d 49 00	 npad	 5
$LL81@DoAutoTest:
  005d0	8b 54 28 10	 mov	 edx, DWORD PTR [eax+ebp+16]
  005d4	3b 10		 cmp	 edx, DWORD PTR [eax]
  005d6	75 50		 jne	 SHORT $LN83@DoAutoTest
  005d8	83 e9 04	 sub	 ecx, 4
  005db	83 c0 04	 add	 eax, 4
  005de	83 f9 04	 cmp	 ecx, 4
  005e1	73 ed		 jae	 SHORT $LL81@DoAutoTest

; 1525 : 			break;
; 1526 : 
; 1527 : 		DecipherBlock(cipher, tmp, ks_tmp);

  005e3	68 00 00 00 00	 push	 OFFSET _ks_tmp
  005e8	8d 44 24 24	 lea	 eax, DWORD PTR _tmp$[esp+1112]
  005ec	50		 push	 eax
  005ed	6a 03		 push	 3
  005ef	e8 00 00 00 00	 call	 _DecipherBlock
  005f4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1528 : 		if (memcmp(twofish_vectors[i].plaintext, tmp, 16) != 0)

  005f7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  005fc	8d 44 24 20	 lea	 eax, DWORD PTR _tmp$[esp+1108]
$LL85@DoAutoTest:
  00600	8b 14 28	 mov	 edx, DWORD PTR [eax+ebp]
  00603	3b 10		 cmp	 edx, DWORD PTR [eax]
  00605	75 21		 jne	 SHORT $LN83@DoAutoTest
  00607	83 e9 04	 sub	 ecx, 4
  0060a	83 c0 04	 add	 eax, 4
  0060d	83 f9 04	 cmp	 ecx, 4
  00610	73 ee		 jae	 SHORT $LL85@DoAutoTest
  00612	ff 44 24 14	 inc	 DWORD PTR _i$[esp+1108]
  00616	83 c3 40	 add	 ebx, 64			; 00000040H
  00619	83 c5 40	 add	 ebp, 64			; 00000040H
  0061c	81 fb 60 00 00
	00		 cmp	 ebx, OFFSET _twofish_vectors+96
  00622	0f 8c 48 ff ff
	ff		 jl	 $LL11@DoAutoTest
$LN83@DoAutoTest:

; 1529 : 			break;
; 1530 : 	}
; 1531 : 	if (i != TWOFISH_TEST_COUNT)

  00628	bf 01 00 00 00	 mov	 edi, 1
  0062d	5d		 pop	 ebp
  0062e	39 7c 24 10	 cmp	 DWORD PTR _i$[esp+1104], edi
  00632	74 04		 je	 SHORT $LN6@DoAutoTest

; 1532 : 		bFailed = TRUE;

  00634	89 7c 24 0c	 mov	 DWORD PTR _bFailed$[esp+1104], edi
$LN6@DoAutoTest:

; 1533 : 
; 1534 : 	
; 1535 : 	/* PKCS #5 and HMACs */
; 1536 : 	if (!test_pkcs5 ())

  00638	e8 00 00 00 00	 call	 _test_pkcs5
  0063d	85 c0		 test	 eax, eax
  0063f	75 04		 jne	 SHORT $LN5@DoAutoTest

; 1537 : 		bFailed = TRUE;

  00641	89 7c 24 0c	 mov	 DWORD PTR _bFailed$[esp+1104], edi
$LN5@DoAutoTest:

; 1538 : 
; 1539 : 	/* CRC-32 */
; 1540 : 	if (!crc32_selftests ())

  00645	e8 00 00 00 00	 call	 _crc32_selftests
  0064a	85 c0		 test	 eax, eax
  0064c	75 04		 jne	 SHORT $LN4@DoAutoTest

; 1541 : 		bFailed = TRUE;

  0064e	89 7c 24 0c	 mov	 DWORD PTR _bFailed$[esp+1104], edi
$LN4@DoAutoTest:

; 1542 : 
; 1543 : 	/* GF multiplicator */
; 1544 : #if 0
; 1545 : 	if (!GfMulSelfTest ())
; 1546 : 		bFailed = TRUE;
; 1547 : #endif
; 1548 : 
; 1549 : 	/* XTS-AES */
; 1550 : 	if (!XTSAesTest (ci))

  00652	8b 74 24 18	 mov	 esi, DWORD PTR _ci$[esp+1104]
  00656	56		 push	 esi
  00657	e8 00 00 00 00	 call	 _XTSAesTest
  0065c	83 c4 04	 add	 esp, 4
  0065f	85 c0		 test	 eax, eax
  00661	75 04		 jne	 SHORT $LN3@DoAutoTest

; 1551 : 		bFailed = TRUE;

  00663	89 7c 24 0c	 mov	 DWORD PTR _bFailed$[esp+1104], edi
$LN3@DoAutoTest:

; 1552 : 
; 1553 : 	/* LRW-AES (deprecated/legacy) */
; 1554 : 	if (!LRWAesTest (ci))

  00667	56		 push	 esi
  00668	e8 00 00 00 00	 call	 _LRWAesTest
  0066d	83 c4 04	 add	 esp, 4
  00670	85 c0		 test	 eax, eax
  00672	75 04		 jne	 SHORT $LN2@DoAutoTest

; 1555 : 		bFailed = TRUE;

  00674	89 7c 24 0c	 mov	 DWORD PTR _bFailed$[esp+1104], edi
$LN2@DoAutoTest:

; 1556 : 
; 1557 : 	/* Sector and buffer related algorithms */
; 1558 : 	if (!TestSectorBufEncryption (ci))

  00678	56		 push	 esi
  00679	e8 00 00 00 00	 call	 _TestSectorBufEncryption
  0067e	83 c4 04	 add	 esp, 4
  00681	85 c0		 test	 eax, eax
  00683	75 04		 jne	 SHORT $LN1@DoAutoTest

; 1559 : 		bFailed = TRUE;

  00685	89 7c 24 0c	 mov	 DWORD PTR _bFailed$[esp+1104], edi
$LN1@DoAutoTest:

; 1560 : 	
; 1561 : 	crypto_close (ci);

  00689	56		 push	 esi
  0068a	e8 00 00 00 00	 call	 _crypto_close

; 1562 : 	return !bFailed;
; 1563 : }

  0068f	8b 8c 24 50 04
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1108]
  00696	83 c4 04	 add	 esp, 4
  00699	33 c0		 xor	 eax, eax
  0069b	39 44 24 0c	 cmp	 DWORD PTR _bFailed$[esp+1104], eax
  0069f	5f		 pop	 edi
  006a0	5e		 pop	 esi
  006a1	0f 94 c0	 sete	 al
  006a4	5b		 pop	 ebx
  006a5	33 cc		 xor	 ecx, esp
  006a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006ac	81 c4 44 04 00
	00		 add	 esp, 1092		; 00000444H
  006b2	c3		 ret	 0
_DoAutoTestAlgorithms ENDP
_TEXT	ENDS
PUBLIC	_AutoTestAlgorithms
EXTRN	_EnableHwEncryption:PROC
EXTRN	_IsHwEncryptionEnabled:PROC
; Function compile flags: /Ogtpy
;	COMDAT _AutoTestAlgorithms
_TEXT	SEGMENT
_AutoTestAlgorithms PROC				; COMDAT

; 1567 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1568 : 	BOOL result = TRUE;

  00002	be 01 00 00 00	 mov	 esi, 1

; 1569 : 	BOOL hwEncryptionEnabled = IsHwEncryptionEnabled();

  00007	e8 00 00 00 00	 call	 _IsHwEncryptionEnabled

; 1570 : 
; 1571 : 	EnableHwEncryption (FALSE);

  0000c	6a 00		 push	 0
  0000e	8b f8		 mov	 edi, eax
  00010	e8 00 00 00 00	 call	 _EnableHwEncryption
  00015	83 c4 04	 add	 esp, 4

; 1572 : 
; 1573 : 	if (!DoAutoTestAlgorithms())

  00018	e8 00 00 00 00	 call	 _DoAutoTestAlgorithms
  0001d	85 c0		 test	 eax, eax
  0001f	75 02		 jne	 SHORT $LN2@AutoTestAl

; 1574 : 		result = FALSE;

  00021	33 f6		 xor	 esi, esi
$LN2@AutoTestAl:

; 1575 : 
; 1576 : 	EnableHwEncryption (TRUE);

  00023	6a 01		 push	 1
  00025	e8 00 00 00 00	 call	 _EnableHwEncryption
  0002a	83 c4 04	 add	 esp, 4

; 1577 : 
; 1578 : 	if (!DoAutoTestAlgorithms())

  0002d	e8 00 00 00 00	 call	 _DoAutoTestAlgorithms
  00032	85 c0		 test	 eax, eax
  00034	75 02		 jne	 SHORT $LN1@AutoTestAl

; 1579 : 		result = FALSE;

  00036	33 f6		 xor	 esi, esi
$LN1@AutoTestAl:

; 1580 : 
; 1581 : 	EnableHwEncryption (hwEncryptionEnabled);

  00038	57		 push	 edi
  00039	e8 00 00 00 00	 call	 _EnableHwEncryption
  0003e	83 c4 04	 add	 esp, 4
  00041	5f		 pop	 edi

; 1582 : 	return result;

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi

; 1583 : }

  00045	c3		 ret	 0
_AutoTestAlgorithms ENDP
_TEXT	ENDS
END
