; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\Public\Desktop\projects\ciphershed\src\Common\util\dll.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?append@@YAHPA_WIAAI0I@Z			; append
EXTRN	_wcsncpy_s:PROC
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\common\util\dll.cpp
;	COMDAT ?append@@YAHPA_WIAAI0I@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_buf_size$ = 12						; size = 4
_ofs$ = 16						; size = 4
_str$ = 20						; size = 4
_str_len$ = 24						; size = 4
?append@@YAHPA_WIAAI0I@Z PROC				; append, COMDAT

; 24   : 	//https://msdn.microsoft.com/en-us/library/5dae5d43(v=vs.110).aspx
; 25   : 	errno_t err=wcsncpy_s((wchar_t *)&buf[ofs],buf_size-ofs,(const wchar_t *)str,str_len);

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR _str$[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR _buf_size$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 10	 mov	 esi, DWORD PTR _ofs$[esp]
  0000d	8b 06		 mov	 eax, DWORD PTR [esi]
  0000f	57		 push	 edi
  00010	8b 7c 24 1c	 mov	 edi, DWORD PTR _str_len$[esp+4]
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR _buf$[esp+12]
  0001a	2b d0		 sub	 edx, eax
  0001c	52		 push	 edx
  0001d	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 _wcsncpy_s
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 26   : 	if (!err) ofs+=str_len;

  00029	85 c0		 test	 eax, eax
  0002b	75 02		 jne	 SHORT $LN1@append
  0002d	01 3e		 add	 DWORD PTR [esi], edi
$LN1@append:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi

; 27   : 	return err;
; 28   : }

  00031	c3		 ret	 0
?append@@YAHPA_WIAAI0I@Z ENDP				; append
_TEXT	ENDS
PUBLIC	??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@		; `string'
PUBLIC	?LoadDLLdbuffer@@YAPAUHINSTANCE__@@IPA_WI@Z	; LoadDLLdbuffer
EXTRN	__imp__LoadLibraryExW@12:PROC
EXTRN	_free:PROC
EXTRN	__imp__GetSystemDirectoryW@8:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	_malloc:PROC
;	COMDAT ??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@
CONST	SEGMENT
??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@ DB '\', 00H, 00H, 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?LoadDLLdbuffer@@YAPAUHINSTANCE__@@IPA_WI@Z
_TEXT	SEGMENT
_systemPrefixLength$ = 8				; size = 4
_dllName$ = 12						; size = 4
_length$ = 16						; size = 4
?LoadDLLdbuffer@@YAPAUHINSTANCE__@@IPA_WI@Z PROC	; LoadDLLdbuffer, COMDAT

; 32   : 	//printf("LoadDLLdbuffer=>\n syspreflen=%d\n dllName=%S\n length=%d\n",systemPrefixLength, dllName, length);
; 33   : 	// code not implemented.
; 34   : 	
; 35   : 	UINT blen=systemPrefixLength+1+length+1;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _systemPrefixLength$[esp-4]
  00004	53		 push	 ebx
  00005	55		 push	 ebp
  00006	8b 6c 24 14	 mov	 ebp, DWORD PTR _length$[esp+4]
  0000a	56		 push	 esi
  0000b	8d 74 28 02	 lea	 esi, DWORD PTR [eax+ebp+2]

; 36   : 	WCHAR* buf=(WCHAR*)malloc(sizeof(WCHAR)*(blen));

  0000f	8d 0c 36	 lea	 ecx, DWORD PTR [esi+esi]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _malloc
  00018	8b d8		 mov	 ebx, eax
  0001a	83 c4 04	 add	 esp, 4

; 37   : 	if (!buf)

  0001d	85 db		 test	 ebx, ebx
  0001f	75 11		 jne	 SHORT $LN4@LoadDLLdbu

; 38   : 	{
; 39   : 		SetLastError(DYNAMICBUFFER_FAILED);	

  00021	68 02 00 00 20	 push	 536870914		; 20000002H
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp

; 40   : 		return NULL;

  0002e	33 c0		 xor	 eax, eax
  00030	5b		 pop	 ebx

; 72   : }

  00031	c3		 ret	 0
$LN4@LoadDLLdbu:
  00032	57		 push	 edi

; 41   : 	}
; 42   : 	UINT len=GetSystemDirectoryW(buf,blen);

  00033	56		 push	 esi
  00034	53		 push	 ebx
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDirectoryW@8
  0003b	8b f8		 mov	 edi, eax

; 43   : 
; 44   : 	errno_t err;
; 45   : 	if (buf[len]!=BACKSLASH_STRING[0])		

  0003d	66 83 3c 7b 5c	 cmp	 WORD PTR [ebx+edi*2], 92 ; 0000005cH
  00042	8d 04 7b	 lea	 eax, DWORD PTR [ebx+edi*2]
  00045	74 1a		 je	 SHORT $LN2@LoadDLLdbu

; 46   : 	{
; 47   : 		err=append(buf,blen,len,(LPWSTR)BACKSLASH_STRING,wcslen(BACKSLASH_STRING));

  00047	6a 01		 push	 1
  00049	8b d6		 mov	 edx, esi
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@
  00050	2b d7		 sub	 edx, edi
  00052	52		 push	 edx
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 _wcsncpy_s
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	85 c0		 test	 eax, eax
  0005e	75 1a		 jne	 SHORT $LN13@LoadDLLdbu
  00060	47		 inc	 edi
$LN2@LoadDLLdbu:

; 48   : 		if (err)
; 49   : 		{
; 50   : 			free(buf);
; 51   : 			SetLastError(DYNAMICBUFFER_TOOSMALL);
; 52   : 			return NULL;
; 53   : 		}
; 54   : 	}
; 55   : 
; 56   : 	err=append(buf,blen,len,dllName,length);

  00061	8b 44 24 18	 mov	 eax, DWORD PTR _dllName$[esp+12]
  00065	55		 push	 ebp
  00066	50		 push	 eax
  00067	2b f7		 sub	 esi, edi
  00069	8d 0c 7b	 lea	 ecx, DWORD PTR [ebx+edi*2]
  0006c	56		 push	 esi
  0006d	51		 push	 ecx
  0006e	e8 00 00 00 00	 call	 _wcsncpy_s
  00073	83 c4 10	 add	 esp, 16			; 00000010H

; 57   : 	if (err)

  00076	85 c0		 test	 eax, eax
  00078	74 1b		 je	 SHORT $LN1@LoadDLLdbu
$LN13@LoadDLLdbu:

; 58   : 	{
; 59   : 		free(buf);

  0007a	53		 push	 ebx
  0007b	e8 00 00 00 00	 call	 _free
  00080	83 c4 04	 add	 esp, 4

; 60   : 		SetLastError(DYNAMICBUFFER_TOOSMALL);

  00083	68 03 00 00 20	 push	 536870915		; 20000003H
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5d		 pop	 ebp

; 61   : 		return NULL;

  00091	33 c0		 xor	 eax, eax
  00093	5b		 pop	 ebx

; 72   : }

  00094	c3		 ret	 0
$LN1@LoadDLLdbu:

; 62   : 	}
; 63   : 
; 64   : 	DWORD   dwFlags=0;
; 65   : 	//https://msdn.microsoft.com/en-us/library/windows/desktop/ms684179(v=vs.85).aspx
; 66   : 	HMODULE res;
; 67   : 	res=LoadLibraryExW(buf, NULL, dwFlags);

  00095	6a 00		 push	 0
  00097	6a 00		 push	 0
  00099	53		 push	 ebx
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryExW@12

; 68   : 
; 69   : 	free(buf);

  000a0	53		 push	 ebx
  000a1	8b f0		 mov	 esi, eax
  000a3	e8 00 00 00 00	 call	 _free
  000a8	83 c4 04	 add	 esp, 4
  000ab	5f		 pop	 edi

; 70   : 
; 71   : 	return res;

  000ac	8b c6		 mov	 eax, esi
  000ae	5e		 pop	 esi
  000af	5d		 pop	 ebp
  000b0	5b		 pop	 ebx

; 72   : }

  000b1	c3		 ret	 0
?LoadDLLdbuffer@@YAPAUHINSTANCE__@@IPA_WI@Z ENDP	; LoadDLLdbuffer
_TEXT	ENDS
PUBLIC	?GetHandleDLLdbuffer@@YAPAUHINSTANCE__@@IPA_WI@Z ; GetHandleDLLdbuffer
EXTRN	__imp__GetModuleHandleW@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?GetHandleDLLdbuffer@@YAPAUHINSTANCE__@@IPA_WI@Z
_TEXT	SEGMENT
_systemPrefixLength$ = 8				; size = 4
_dllName$ = 12						; size = 4
_length$ = 16						; size = 4
?GetHandleDLLdbuffer@@YAPAUHINSTANCE__@@IPA_WI@Z PROC	; GetHandleDLLdbuffer, COMDAT

; 76   : 	//printf("LoadDLLdbuffer=>\n syspreflen=%d\n dllName=%S\n length=%d\n",systemPrefixLength, dllName, length);
; 77   : 	// code not implemented.
; 78   : 	
; 79   : 	UINT blen=systemPrefixLength+1+length+1;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _systemPrefixLength$[esp-4]
  00004	53		 push	 ebx
  00005	55		 push	 ebp
  00006	8b 6c 24 14	 mov	 ebp, DWORD PTR _length$[esp+4]
  0000a	56		 push	 esi
  0000b	8d 74 28 02	 lea	 esi, DWORD PTR [eax+ebp+2]

; 80   : 	WCHAR* buf=(WCHAR*)malloc(sizeof(WCHAR)*(blen));

  0000f	8d 0c 36	 lea	 ecx, DWORD PTR [esi+esi]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _malloc
  00018	8b d8		 mov	 ebx, eax
  0001a	83 c4 04	 add	 esp, 4

; 81   : 	if (!buf)

  0001d	85 db		 test	 ebx, ebx
  0001f	75 11		 jne	 SHORT $LN4@GetHandleD

; 82   : 	{
; 83   : 		SetLastError(DYNAMICBUFFER_FAILED);	

  00021	68 02 00 00 20	 push	 536870914		; 20000002H
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp

; 84   : 		return NULL;

  0002e	33 c0		 xor	 eax, eax
  00030	5b		 pop	 ebx

; 115  : }

  00031	c3		 ret	 0
$LN4@GetHandleD:
  00032	57		 push	 edi

; 85   : 	}
; 86   : 	UINT len=GetSystemDirectoryW(buf,blen);

  00033	56		 push	 esi
  00034	53		 push	 ebx
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDirectoryW@8
  0003b	8b f8		 mov	 edi, eax

; 87   : 
; 88   : 	errno_t err;
; 89   : 	if (buf[len]!=BACKSLASH_STRING[0])		

  0003d	66 83 3c 7b 5c	 cmp	 WORD PTR [ebx+edi*2], 92 ; 0000005cH
  00042	8d 04 7b	 lea	 eax, DWORD PTR [ebx+edi*2]
  00045	74 1a		 je	 SHORT $LN2@GetHandleD

; 90   : 	{
; 91   : 		err=append(buf,blen,len,(LPWSTR)BACKSLASH_STRING,wcslen(BACKSLASH_STRING));

  00047	6a 01		 push	 1
  00049	8b d6		 mov	 edx, esi
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@
  00050	2b d7		 sub	 edx, edi
  00052	52		 push	 edx
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 _wcsncpy_s
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	85 c0		 test	 eax, eax
  0005e	75 33		 jne	 SHORT $LN13@GetHandleD
  00060	47		 inc	 edi
$LN2@GetHandleD:

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	err=append(buf,blen,len,dllName,length);

  00061	8b 44 24 18	 mov	 eax, DWORD PTR _dllName$[esp+12]
  00065	55		 push	 ebp
  00066	50		 push	 eax
  00067	2b f7		 sub	 esi, edi
  00069	8d 0c 7b	 lea	 ecx, DWORD PTR [ebx+edi*2]
  0006c	56		 push	 esi
  0006d	51		 push	 ecx
  0006e	e8 00 00 00 00	 call	 _wcsncpy_s
  00073	83 c4 10	 add	 esp, 16			; 00000010H

; 101  : 	if (err)
; 102  : 	{
; 103  : 		free(buf);

  00076	53		 push	 ebx
  00077	85 c0		 test	 eax, eax

; 104  : 		SetLastError(DYNAMICBUFFER_TOOSMALL);
; 105  : 		return NULL;

  00079	75 19		 jne	 SHORT $LN15@GetHandleD

; 106  : 	}
; 107  : 
; 108  : 	//https://msdn.microsoft.com/en-us/library/ms683199(v=vs.85).aspx
; 109  : 	HMODULE res;
; 110  : 	res=GetModuleHandleW(buf);

  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleW@4

; 111  : 
; 112  : 	free(buf);

  00081	53		 push	 ebx
  00082	8b f0		 mov	 esi, eax
  00084	e8 00 00 00 00	 call	 _free
  00089	83 c4 04	 add	 esp, 4
  0008c	5f		 pop	 edi

; 113  : 
; 114  : 	return res;

  0008d	8b c6		 mov	 eax, esi
  0008f	5e		 pop	 esi
  00090	5d		 pop	 ebp
  00091	5b		 pop	 ebx

; 115  : }

  00092	c3		 ret	 0
$LN13@GetHandleD:

; 92   : 		if (err)
; 93   : 		{
; 94   : 			free(buf);

  00093	53		 push	 ebx
$LN15@GetHandleD:
  00094	e8 00 00 00 00	 call	 _free
  00099	83 c4 04	 add	 esp, 4

; 95   : 			SetLastError(DYNAMICBUFFER_TOOSMALL);

  0009c	68 03 00 00 20	 push	 536870915		; 20000003H
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5d		 pop	 ebp

; 96   : 			return NULL;

  000aa	33 c0		 xor	 eax, eax
  000ac	5b		 pop	 ebx

; 115  : }

  000ad	c3		 ret	 0
?GetHandleDLLdbuffer@@YAPAUHINSTANCE__@@IPA_WI@Z ENDP	; GetHandleDLLdbuffer
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?LoadDLL@@YAPAUHINSTANCE__@@PA_WI@Z		; LoadDLL
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?LoadDLL@@YAPAUHINSTANCE__@@PA_WI@Z
_TEXT	SEGMENT
_len$ = -528						; size = 4
_stackBuf$ = -524					; size = 520
__$ArrayPad$ = -4					; size = 4
_dllName$ = 8						; size = 4
_length$ = 12						; size = 4
?LoadDLL@@YAPAUHINSTANCE__@@PA_WI@Z PROC		; LoadDLL, COMDAT

; 118  : {

  00000	81 ec 10 02 00
	00		 sub	 esp, 528		; 00000210H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 0c 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+528], eax
  00014	53		 push	 ebx

; 119  : 	const int minlen=LoadDLL_stack_buf_size-1-length-1;

  00015	8b 9c 24 1c 02
	00 00		 mov	 ebx, DWORD PTR _length$[esp+528]
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8b bc 24 20 02
	00 00		 mov	 edi, DWORD PTR _dllName$[esp+536]

; 120  : 
; 121  : 	WCHAR stackBuf[LoadDLL_stack_buf_size];
; 122  : 	stackBuf[LoadDLL_stack_buf_size-1]=0;
; 123  : 
; 124  : 	// windows 2000 support, not supported in NT4
; 125  : 	//https://msdn.microsoft.com/en-us/library/windows/desktop/ms724373(v=vs.85).aspx
; 126  : 	UINT len=GetSystemDirectoryW(stackBuf,LoadDLL_stack_buf_size);

  00025	68 04 01 00 00	 push	 260			; 00000104H
  0002a	8d 4c 24 14	 lea	 ecx, DWORD PTR _stackBuf$[esp+544]
  0002e	33 c0		 xor	 eax, eax
  00030	be 02 01 00 00	 mov	 esi, 258		; 00000102H
  00035	51		 push	 ecx
  00036	2b f3		 sub	 esi, ebx
  00038	66 89 84 24 1e
	02 00 00	 mov	 WORD PTR _stackBuf$[esp+1066], ax
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDirectoryW@8
  00046	89 44 24 0c	 mov	 DWORD PTR _len$[esp+540], eax

; 127  : 
; 128  : 	// in case UINT is redefined as signed...
; 129  : 	if (len<=0) 

  0004a	85 c0		 test	 eax, eax

; 130  : 	{
; 131  : 		// the caller may GetLastError ...
; 132  : 		return NULL;

  0004c	76 45		 jbe	 SHORT $LN14@LoadDLL

; 133  : 	}
; 134  : 	else if (minlen<=0 || minlen<(int)len)

  0004e	85 f6		 test	 esi, esi
  00050	0f 8e 9b 00 00
	00		 jle	 $LN4@LoadDLL
  00056	3b f0		 cmp	 esi, eax
  00058	0f 8c 93 00 00
	00		 jl	 $LN4@LoadDLL

; 138  : 	}
; 139  : 
; 140  : 	errno_t err;
; 141  : 	if (stackBuf[len]!=BACKSLASH_STRING[0])		

  0005e	66 83 7c 44 10
	5c		 cmp	 WORD PTR _stackBuf$[esp+eax*2+540], 92 ; 0000005cH
  00064	74 4b		 je	 SHORT $LN2@LoadDLL

; 142  : 	{
; 143  : 		//https://msdn.microsoft.com/en-us/library/5dae5d43(v=vs.110).aspx
; 144  : 		err=append(stackBuf,LoadDLL_stack_buf_size,len,(LPWSTR)BACKSLASH_STRING,wcslen(BACKSLASH_STRING));

  00066	6a 01		 push	 1
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@
  0006d	8d 54 24 14	 lea	 edx, DWORD PTR _len$[esp+548]
  00071	52		 push	 edx
  00072	8d 44 24 1c	 lea	 eax, DWORD PTR _stackBuf$[esp+552]
  00076	68 04 01 00 00	 push	 260			; 00000104H
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?append@@YAHPA_WIAAI0I@Z ; append
  00081	83 c4 14	 add	 esp, 20			; 00000014H

; 145  : 		if (err)

  00084	85 c0		 test	 eax, eax
  00086	74 25		 je	 SHORT $LN13@LoadDLL
$LN15@LoadDLL:

; 146  : 		{
; 147  : 			SetLastError(STATICBUFFER_TOOSMALL);

  00088	68 01 00 00 20	 push	 536870913		; 20000001H
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
$LN14@LoadDLL:
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi

; 148  : 			return NULL;

  00095	33 c0		 xor	 eax, eax
  00097	5b		 pop	 ebx

; 161  : }

  00098	8b 8c 24 0c 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+528]
  0009f	33 cc		 xor	 ecx, esp
  000a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a6	81 c4 10 02 00
	00		 add	 esp, 528		; 00000210H
  000ac	c3		 ret	 0
$LN13@LoadDLL:

; 148  : 			return NULL;

  000ad	8b 44 24 0c	 mov	 eax, DWORD PTR _len$[esp+540]
$LN2@LoadDLL:

; 149  : 		}
; 150  : 	}
; 151  : 
; 152  : 	err=append(stackBuf,LoadDLL_stack_buf_size,len,dllName,length);

  000b1	53		 push	 ebx
  000b2	b9 04 01 00 00	 mov	 ecx, 260		; 00000104H
  000b7	57		 push	 edi
  000b8	2b c8		 sub	 ecx, eax
  000ba	51		 push	 ecx
  000bb	8d 54 44 1c	 lea	 edx, DWORD PTR _stackBuf$[esp+eax*2+552]
  000bf	52		 push	 edx
  000c0	e8 00 00 00 00	 call	 _wcsncpy_s
  000c5	83 c4 10	 add	 esp, 16			; 00000010H

; 153  : 	if (err)

  000c8	85 c0		 test	 eax, eax

; 154  : 	{
; 155  : 		SetLastError(STATICBUFFER_TOOSMALL);
; 156  : 		return NULL;

  000ca	75 bc		 jne	 SHORT $LN15@LoadDLL

; 157  : 	}
; 158  : 
; 159  : 	//https://msdn.microsoft.com/en-us/library/windows/desktop/ms684179(v=vs.85).aspx
; 160  : 	return LoadLibraryExW(stackBuf, NULL, 0);

  000cc	50		 push	 eax
  000cd	50		 push	 eax
  000ce	8d 44 24 18	 lea	 eax, DWORD PTR _stackBuf$[esp+548]
  000d2	50		 push	 eax
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryExW@12
  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	5b		 pop	 ebx

; 161  : }

  000dc	8b 8c 24 0c 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+528]
  000e3	33 cc		 xor	 ecx, esp
  000e5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ea	81 c4 10 02 00
	00		 add	 esp, 528		; 00000210H
  000f0	c3		 ret	 0
$LN4@LoadDLL:

; 135  : 	{
; 136  : 		//use dynamic buffer
; 137  : 		return LoadDLLdbuffer(len,dllName,length);

  000f1	53		 push	 ebx
  000f2	57		 push	 edi
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ?LoadDLLdbuffer@@YAPAUHINSTANCE__@@IPA_WI@Z ; LoadDLLdbuffer

; 161  : }

  000f9	8b 8c 24 24 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+552]
  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx
  00106	33 cc		 xor	 ecx, esp
  00108	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010d	81 c4 10 02 00
	00		 add	 esp, 528		; 00000210H
  00113	c3		 ret	 0
?LoadDLL@@YAPAUHINSTANCE__@@PA_WI@Z ENDP		; LoadDLL
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetHandleDLL@@YAPAUHINSTANCE__@@PA_WI@Z	; GetHandleDLL
; Function compile flags: /Ogtpy
;	COMDAT ?GetHandleDLL@@YAPAUHINSTANCE__@@PA_WI@Z
_TEXT	SEGMENT
_len$ = -528						; size = 4
_stackBuf$ = -524					; size = 520
__$ArrayPad$ = -4					; size = 4
_dllName$ = 8						; size = 4
_length$ = 12						; size = 4
?GetHandleDLL@@YAPAUHINSTANCE__@@PA_WI@Z PROC		; GetHandleDLL, COMDAT

; 164  : {

  00000	81 ec 10 02 00
	00		 sub	 esp, 528		; 00000210H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 0c 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+528], eax
  00014	53		 push	 ebx

; 165  : 	const int minlen=LoadDLL_stack_buf_size-1-length-1;

  00015	8b 9c 24 1c 02
	00 00		 mov	 ebx, DWORD PTR _length$[esp+528]
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8b bc 24 20 02
	00 00		 mov	 edi, DWORD PTR _dllName$[esp+536]

; 166  : 
; 167  : 	WCHAR stackBuf[LoadDLL_stack_buf_size];
; 168  : 	stackBuf[LoadDLL_stack_buf_size-1]=0;
; 169  : 
; 170  : 	// windows 2000 support, not supported in NT4
; 171  : 	//https://msdn.microsoft.com/en-us/library/windows/desktop/ms724373(v=vs.85).aspx
; 172  : 	UINT len=GetSystemDirectoryW(stackBuf,LoadDLL_stack_buf_size);

  00025	68 04 01 00 00	 push	 260			; 00000104H
  0002a	8d 4c 24 14	 lea	 ecx, DWORD PTR _stackBuf$[esp+544]
  0002e	33 c0		 xor	 eax, eax
  00030	be 02 01 00 00	 mov	 esi, 258		; 00000102H
  00035	51		 push	 ecx
  00036	2b f3		 sub	 esi, ebx
  00038	66 89 84 24 1e
	02 00 00	 mov	 WORD PTR _stackBuf$[esp+1066], ax
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDirectoryW@8
  00046	89 44 24 0c	 mov	 DWORD PTR _len$[esp+540], eax

; 173  : 
; 174  : 	// in case UINT is redefined as signed...
; 175  : 	if (len<=0) 

  0004a	85 c0		 test	 eax, eax

; 176  : 	{
; 177  : 		// the caller may GetLastError ...
; 178  : 		return NULL;

  0004c	76 45		 jbe	 SHORT $LN14@GetHandleD@2

; 179  : 	}
; 180  : 	else if (minlen<=0 || minlen<(int)len)

  0004e	85 f6		 test	 esi, esi
  00050	0f 8e 99 00 00
	00		 jle	 $LN4@GetHandleD@2
  00056	3b f0		 cmp	 esi, eax
  00058	0f 8c 91 00 00
	00		 jl	 $LN4@GetHandleD@2

; 184  : 	}
; 185  : 
; 186  : 	errno_t err;
; 187  : 	if (stackBuf[len]!=BACKSLASH_STRING[0])		

  0005e	66 83 7c 44 10
	5c		 cmp	 WORD PTR _stackBuf$[esp+eax*2+540], 92 ; 0000005cH
  00064	74 4b		 je	 SHORT $LN2@GetHandleD@2

; 188  : 	{
; 189  : 		//https://msdn.microsoft.com/en-us/library/5dae5d43(v=vs.110).aspx
; 190  : 		err=append(stackBuf,LoadDLL_stack_buf_size,len,(LPWSTR)BACKSLASH_STRING,wcslen(BACKSLASH_STRING));

  00066	6a 01		 push	 1
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@
  0006d	8d 54 24 14	 lea	 edx, DWORD PTR _len$[esp+548]
  00071	52		 push	 edx
  00072	8d 44 24 1c	 lea	 eax, DWORD PTR _stackBuf$[esp+552]
  00076	68 04 01 00 00	 push	 260			; 00000104H
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?append@@YAHPA_WIAAI0I@Z ; append
  00081	83 c4 14	 add	 esp, 20			; 00000014H

; 191  : 		if (err)

  00084	85 c0		 test	 eax, eax
  00086	74 25		 je	 SHORT $LN13@GetHandleD@2
$LN15@GetHandleD@2:

; 192  : 		{
; 193  : 			SetLastError(STATICBUFFER_TOOSMALL);

  00088	68 01 00 00 20	 push	 536870913		; 20000001H
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
$LN14@GetHandleD@2:
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi

; 194  : 			return NULL;

  00095	33 c0		 xor	 eax, eax
  00097	5b		 pop	 ebx

; 207  : }

  00098	8b 8c 24 0c 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+528]
  0009f	33 cc		 xor	 ecx, esp
  000a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a6	81 c4 10 02 00
	00		 add	 esp, 528		; 00000210H
  000ac	c3		 ret	 0
$LN13@GetHandleD@2:

; 194  : 			return NULL;

  000ad	8b 44 24 0c	 mov	 eax, DWORD PTR _len$[esp+540]
$LN2@GetHandleD@2:

; 195  : 		}
; 196  : 	}
; 197  : 
; 198  : 	err=append(stackBuf,LoadDLL_stack_buf_size,len,dllName,length);

  000b1	53		 push	 ebx
  000b2	b9 04 01 00 00	 mov	 ecx, 260		; 00000104H
  000b7	57		 push	 edi
  000b8	2b c8		 sub	 ecx, eax
  000ba	51		 push	 ecx
  000bb	8d 54 44 1c	 lea	 edx, DWORD PTR _stackBuf$[esp+eax*2+552]
  000bf	52		 push	 edx
  000c0	e8 00 00 00 00	 call	 _wcsncpy_s
  000c5	83 c4 10	 add	 esp, 16			; 00000010H

; 199  : 	if (err)

  000c8	85 c0		 test	 eax, eax

; 200  : 	{
; 201  : 		SetLastError(STATICBUFFER_TOOSMALL);
; 202  : 		return NULL;

  000ca	75 bc		 jne	 SHORT $LN15@GetHandleD@2

; 203  : 	}
; 204  : 
; 205  : 	//https://msdn.microsoft.com/en-us/library/ms683199(v=vs.85).aspx
; 206  : 	return GetModuleHandleW(stackBuf);

  000cc	8d 44 24 10	 lea	 eax, DWORD PTR _stackBuf$[esp+540]
  000d0	50		 push	 eax
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleW@4
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx

; 207  : }

  000da	8b 8c 24 0c 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+528]
  000e1	33 cc		 xor	 ecx, esp
  000e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e8	81 c4 10 02 00
	00		 add	 esp, 528		; 00000210H
  000ee	c3		 ret	 0
$LN4@GetHandleD@2:

; 181  : 	{
; 182  : 		//use dynamic buffer
; 183  : 		return GetHandleDLLdbuffer(len,dllName,length);

  000ef	53		 push	 ebx
  000f0	57		 push	 edi
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 ?GetHandleDLLdbuffer@@YAPAUHINSTANCE__@@IPA_WI@Z ; GetHandleDLLdbuffer

; 207  : }

  000f7	8b 8c 24 24 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+552]
  000fe	83 c4 0c	 add	 esp, 12			; 0000000cH
  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	5b		 pop	 ebx
  00104	33 cc		 xor	 ecx, esp
  00106	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010b	81 c4 10 02 00
	00		 add	 esp, 528		; 00000210H
  00111	c3		 ret	 0
?GetHandleDLL@@YAPAUHINSTANCE__@@PA_WI@Z ENDP		; GetHandleDLL
_TEXT	ENDS
END
