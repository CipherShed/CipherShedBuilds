; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\Public\Desktop\projects\ciphershed\src\Mount\Mount.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
PUBLIC	?CmdMountOptions@@3UMountOptions@@A		; CmdMountOptions
PUBLIC	?szDriveLetter@@3PADA				; szDriveLetter
PUBLIC	?mountOptions@@3UMountOptions@@A		; mountOptions
PUBLIC	?BootEncStatus@@3UBootEncryptionStatus@@A	; BootEncStatus
PUBLIC	?RecentBootEncStatus@@3UBootEncryptionStatus@@A	; RecentBootEncStatus
PUBLIC	?FirstCmdKeyFile@@3PAUKeyFileStruct@@A		; FirstCmdKeyFile
PUBLIC	?defaultMountOptions@@3UMountOptions@@A		; defaultMountOptions
PUBLIC	_VolumeNotificationsList
PUBLIC	?CmdVolumePassword@@3UPassword@@A		; CmdVolumePassword
PUBLIC	?VolumePassword@@3UPassword@@A			; VolumePassword
PUBLIC	?szFileName@@3PADA				; szFileName
PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?RescueIsoImageSize@BootEncryption@CipherShed@@1IB ; CipherShed::BootEncryption::RescueIsoImageSize
PUBLIC	?MaxPasswordLength@SecurityToken@CipherShed@@2IB ; CipherShed::SecurityToken::MaxPasswordLength
PUBLIC	?BootEncObj@@3PAVBootEncryption@CipherShed@@A	; BootEncObj
PUBLIC	_bExplore
PUBLIC	?bBeep@@3HA					; bBeep
PUBLIC	?commandLineDrive@@3DA				; commandLineDrive
PUBLIC	?bCacheInDriver@@3HA				; bCacheInDriver
PUBLIC	?bCacheInDriverDefault@@3HA			; bCacheInDriverDefault
PUBLIC	?bHistoryCmdLine@@3HA				; bHistoryCmdLine
PUBLIC	?bUseDifferentTrayIconIfVolMounted@@3HA		; bUseDifferentTrayIconIfVolMounted
PUBLIC	?bCloseDismountedWindows@@3HA			; bCloseDismountedWindows
PUBLIC	?bWipeCacheOnExit@@3HA				; bWipeCacheOnExit
PUBLIC	?bWipeCacheOnAutoDismount@@3HA			; bWipeCacheOnAutoDismount
PUBLIC	_bEnableBkgTask
PUBLIC	_bCloseBkgTaskWhenNoVolumes
PUBLIC	?bDismountOnLogOff@@3HA				; bDismountOnLogOff
PUBLIC	?bDismountOnScreenSaver@@3HA			; bDismountOnScreenSaver
PUBLIC	?bDismountOnPowerSaving@@3HA			; bDismountOnPowerSaving
PUBLIC	?bForceAutoDismount@@3HA			; bForceAutoDismount
PUBLIC	?bForceMount@@3HA				; bForceMount
PUBLIC	?bForceUnmount@@3HA				; bForceUnmount
PUBLIC	?bWipe@@3HA					; bWipe
PUBLIC	?bAuto@@3HA					; bAuto
PUBLIC	?LogOn@@3HA					; LogOn
PUBLIC	?bAutoMountDevices@@3HA				; bAutoMountDevices
PUBLIC	?bAutoMountFavorites@@3HA			; bAutoMountFavorites
PUBLIC	_bPlaySoundOnSuccessfulHkDismount
PUBLIC	_bDisplayBalloonOnSuccessfulHkDismount
PUBLIC	?bHibernationPreventionNotified@@3HA		; bHibernationPreventionNotified
PUBLIC	?bHiddenSysLeakProtNotifiedDuringSession@@3HA	; bHiddenSysLeakProtNotifiedDuringSession
PUBLIC	?CloseSecurityTokenSessionsAfterMount@@3HA	; CloseSecurityTokenSessionsAfterMount
PUBLIC	?DisableSystemCrashDetection@@3HA		; DisableSystemCrashDetection
PUBLIC	?SystemCrashDetected@@3HA			; SystemCrashDetected
PUBLIC	?Quit@@3HA					; Quit
PUBLIC	?ComServerMode@@3HA				; ComServerMode
PUBLIC	?ServiceMode@@3HA				; ServiceMode
PUBLIC	?UsePreferences@@3HA				; UsePreferences
PUBLIC	?HiddenSysLeakProtectionNotificationStatus@@3HA	; HiddenSysLeakProtectionNotificationStatus
PUBLIC	?MaxVolumeIdleTime@@3HA				; MaxVolumeIdleTime
PUBLIC	?nCurrentShowType@@3HA				; nCurrentShowType
PUBLIC	?nSelectedDriveIndex@@3HA			; nSelectedDriveIndex
PUBLIC	?cmdUnmountDrive@@3HA				; cmdUnmountDrive
PUBLIC	?CmdVolumePasswordValid@@3HA			; CmdVolumePasswordValid
PUBLIC	?CmdMountOptionsValid@@3HA			; CmdMountOptionsValid
PUBLIC	?hbmLogoBitmapRescaled@@3PAUHBITMAP__@@A	; hbmLogoBitmapRescaled
PUBLIC	?OrigKeyboardLayout@@3PADA			; OrigKeyboardLayout
PUBLIC	?bKeyboardLayoutChanged@@3HA			; bKeyboardLayoutChanged
PUBLIC	?bKeybLayoutAltKeyWarningShown@@3HA		; bKeybLayoutAltKeyWarningShown
_BSS	SEGMENT
?CmdMountOptions@@3UMountOptions@@A DB 064H DUP (?)	; CmdMountOptions
?szDriveLetter@@3PADA DB 03H DUP (?)			; szDriveLetter
	ALIGN	4

?mountOptions@@3UMountOptions@@A DB 064H DUP (?)	; mountOptions
?BootEncStatus@@3UBootEncryptionStatus@@A DB 05eH DUP (?) ; BootEncStatus
	ALIGN	4

?RecentBootEncStatus@@3UBootEncryptionStatus@@A DB 05eH DUP (?) ; RecentBootEncStatus
	ALIGN	4

?FirstCmdKeyFile@@3PAUKeyFileStruct@@A DD 01H DUP (?)	; FirstCmdKeyFile
?defaultMountOptions@@3UMountOptions@@A DB 064H DUP (?)	; defaultMountOptions
_VolumeNotificationsList DB 068H DUP (?)
?CmdVolumePassword@@3UPassword@@A DB 048H DUP (?)	; CmdVolumePassword
?VolumePassword@@3UPassword@@A DB 048H DUP (?)		; VolumePassword
?szFileName@@3PADA DB 0105H DUP (?)			; szFileName
	ALIGN	4

?BootEncObj@@3PAVBootEncryption@CipherShed@@A DD 01H DUP (?) ; BootEncObj
_bExplore DD	01H DUP (?)
?bBeep@@3HA DD	01H DUP (?)				; bBeep
?commandLineDrive@@3DA DB 01H DUP (?)			; commandLineDrive
	ALIGN	4

?bCacheInDriver@@3HA DD 01H DUP (?)			; bCacheInDriver
?bCacheInDriverDefault@@3HA DD 01H DUP (?)		; bCacheInDriverDefault
?bHistoryCmdLine@@3HA DD 01H DUP (?)			; bHistoryCmdLine
?bWipeCacheOnExit@@3HA DD 01H DUP (?)			; bWipeCacheOnExit
_bEnableBkgTask DD 01H DUP (?)
_bCloseBkgTaskWhenNoVolumes DD 01H DUP (?)
?bDismountOnPowerSaving@@3HA DD 01H DUP (?)		; bDismountOnPowerSaving
?bForceMount@@3HA DD 01H DUP (?)			; bForceMount
?bForceUnmount@@3HA DD 01H DUP (?)			; bForceUnmount
?bWipe@@3HA DD	01H DUP (?)				; bWipe
?bAuto@@3HA DD	01H DUP (?)				; bAuto
?LogOn@@3HA DD	01H DUP (?)				; LogOn
?bAutoMountDevices@@3HA DD 01H DUP (?)			; bAutoMountDevices
?bAutoMountFavorites@@3HA DD 01H DUP (?)		; bAutoMountFavorites
?bHibernationPreventionNotified@@3HA DD 01H DUP (?)	; bHibernationPreventionNotified
?bHiddenSysLeakProtNotifiedDuringSession@@3HA DD 01H DUP (?) ; bHiddenSysLeakProtNotifiedDuringSession
?CloseSecurityTokenSessionsAfterMount@@3HA DD 01H DUP (?) ; CloseSecurityTokenSessionsAfterMount
?DisableSystemCrashDetection@@3HA DD 01H DUP (?)	; DisableSystemCrashDetection
?SystemCrashDetected@@3HA DD 01H DUP (?)		; SystemCrashDetected
?Quit@@3HA DD	01H DUP (?)				; Quit
?ComServerMode@@3HA DD 01H DUP (?)			; ComServerMode
?ServiceMode@@3HA DD 01H DUP (?)			; ServiceMode
?HiddenSysLeakProtectionNotificationStatus@@3HA DD 01H DUP (?) ; HiddenSysLeakProtectionNotificationStatus
?nCurrentShowType@@3HA DD 01H DUP (?)			; nCurrentShowType
?cmdUnmountDrive@@3HA DD 01H DUP (?)			; cmdUnmountDrive
?CmdVolumePasswordValid@@3HA DD 01H DUP (?)		; CmdVolumePasswordValid
?CmdMountOptionsValid@@3HA DD 01H DUP (?)		; CmdMountOptionsValid
?hbmLogoBitmapRescaled@@3PAUHBITMAP__@@A DD 01H DUP (?)	; hbmLogoBitmapRescaled
?bKeyboardLayoutChanged@@3HA DD 01H DUP (?)		; bKeyboardLayoutChanged
?bKeybLayoutAltKeyWarningShown@@3HA DD 01H DUP (?)	; bKeybLayoutAltKeyWarningShown
_TaskBarIconMutex DD 01H DUP (?)
_MainWindowHidden DD 01H DUP (?)
_pwdChangeDlgMode DD 01H DUP (?)
_bSysEncPwdChangeDlgMode DD 01H DUP (?)
_bPrebootPasswordDlgMode DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ?MaxPasswordLength@SecurityToken@CipherShed@@2IB
CONST	SEGMENT
?MaxPasswordLength@SecurityToken@CipherShed@@2IB DD 080H ; CipherShed::SecurityToken::MaxPasswordLength
CONST	ENDS
;	COMDAT ?RescueIsoImageSize@BootEncryption@CipherShed@@1IB
CONST	SEGMENT
?RescueIsoImageSize@BootEncryption@CipherShed@@1IB DD 01c0000H ; CipherShed::BootEncryption::RescueIsoImageSize
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
?bUseDifferentTrayIconIfVolMounted@@3HA DD 01H		; bUseDifferentTrayIconIfVolMounted
?bCloseDismountedWindows@@3HA DD 01H			; bCloseDismountedWindows
?bWipeCacheOnAutoDismount@@3HA DD 01H			; bWipeCacheOnAutoDismount
?bDismountOnLogOff@@3HA DD 01H				; bDismountOnLogOff
?bDismountOnScreenSaver@@3HA DD 01H			; bDismountOnScreenSaver
?bForceAutoDismount@@3HA DD 01H				; bForceAutoDismount
_bPlaySoundOnSuccessfulHkDismount DD 01H
_bDisplayBalloonOnSuccessfulHkDismount DD 01H
?UsePreferences@@3HA DD 01H				; UsePreferences
?MaxVolumeIdleTime@@3HA DD 0ffffff88H			; MaxVolumeIdleTime
?nSelectedDriveIndex@@3HA DD 0ffffffffH			; nSelectedDriveIndex
?OrigKeyboardLayout@@3PADA DB '00000409', 00H		; OrigKeyboardLayout
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
PUBLIC	?strchr@@YAPADPADH@Z				; strchr
EXTRN	_strchr:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
;	COMDAT ?strchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strchr@@YAPADPADH@Z PROC				; strchr, COMDAT

; 184  : 	{ return (char*)strchr((const char*)_Str, _Ch); }

  00000	e9 00 00 00 00	 jmp	 _strchr
?strchr@@YAPADPADH@Z ENDP				; strchr
_TEXT	ENDS
PUBLIC	?strrchr@@YAPADPADH@Z				; strrchr
EXTRN	_strrchr:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?strrchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strrchr@@YAPADPADH@Z PROC				; strrchr, COMDAT

; 188  : 	{ return (char*)strrchr((const char*)_Str, _Ch); }

  00000	e9 00 00 00 00	 jmp	 _strrchr
?strrchr@@YAPADPADH@Z ENDP				; strrchr
_TEXT	ENDS
PUBLIC	?wcsstr@@YAPA_WPA_WPB_W@Z			; wcsstr
EXTRN	_wcsstr:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?wcsstr@@YAPA_WPA_WPB_W@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__SubStr$ = 12						; size = 4
?wcsstr@@YAPA_WPA_WPB_W@Z PROC				; wcsstr, COMDAT

; 337  :         {return ((wchar_t *)wcsstr((const wchar_t *)_Str, _SubStr)); }

  00000	e9 00 00 00 00	 jmp	 _wcsstr
?wcsstr@@YAPA_WPA_WPB_W@Z ENDP				; wcsstr
_TEXT	ENDS
PUBLIC	_RtlSecureZeroMemory
; Function compile flags: /Ogtpy
; File c:\program files\microsoft sdks\windows\v7.0\include\winnt.h
;	COMDAT _RtlSecureZeroMemory
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_cnt$ = 12						; size = 4
_RtlSecureZeroMemory PROC				; COMDAT

; 13070:     volatile char *vptr = (volatile char *)ptr;
; 13071: 
; 13072: #if defined(_M_AMD64)
; 13073: 
; 13074:         __stosb((PBYTE )((DWORD64)vptr), 0, cnt);
; 13075: 
; 13076: #else
; 13077: 
; 13078:     while (cnt) {

  00000	8b 54 24 08	 mov	 edx, DWORD PTR _cnt$[esp-4]
  00004	8b 44 24 04	 mov	 eax, DWORD PTR _ptr$[esp-4]
  00008	8b c8		 mov	 ecx, eax
  0000a	85 d2		 test	 edx, edx
  0000c	74 0b		 je	 SHORT $LN1@RtlSecureZ
  0000e	8b ff		 npad	 2
$LL2@RtlSecureZ:

; 13079:         *vptr = 0;

  00010	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 13080:         vptr++;

  00013	41		 inc	 ecx

; 13081:         cnt--;

  00014	83 ea 01	 sub	 edx, 1
  00017	75 f7		 jne	 SHORT $LL2@RtlSecureZ
$LN1@RtlSecureZ:

; 13082:     }
; 13083: 
; 13084: #endif
; 13085: 
; 13086:     return ptr;
; 13087: }

  00019	c3		 ret	 0
_RtlSecureZeroMemory ENDP
_TEXT	ENDS
PUBLIC	?swprintf@@YAHPA_WPB_WZZ			; swprintf
EXTRN	__vswprintf:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\swprintf.inl
;	COMDAT ?swprintf@@YAHPA_WPB_WZZ
_TEXT	SEGMENT
__String$ = 8						; size = 4
__Format$ = 12						; size = 4
?swprintf@@YAHPA_WPB_WZZ PROC				; swprintf, COMDAT

; 87   :     va_list _Arglist;
; 88   :     _crt_va_start(_Arglist, _Format);
; 89   :     int _Ret = _vswprintf(_String, _Format, _Arglist);

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Format$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __String$[esp-4]
  00008	8d 44 24 0c	 lea	 eax, DWORD PTR __Format$[esp]
  0000c	50		 push	 eax
  0000d	51		 push	 ecx
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 __vswprintf
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 90   :     _crt_va_end(_Arglist);
; 91   :     return _Ret;
; 92   : }

  00017	c3		 ret	 0
?swprintf@@YAHPA_WPB_WZZ ENDP				; swprintf
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

  00000	56		 push	 esi
  00001	8d 44 24 08	 lea	 eax, DWORD PTR __Message$[esp]
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtpy
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00009	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000e	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00013	74 09		 je	 SHORT $LN6@scalar
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	_wmemcmp
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\wchar.h
;	COMDAT _wmemcmp
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcmp PROC						; COMDAT

; 1216 :         {for (; 0 < _N; ++_S1, ++_S2, --_N)

  00000	8b 54 24 0c	 mov	 edx, DWORD PTR __N$[esp-4]
  00004	56		 push	 esi
  00005	85 d2		 test	 edx, edx
  00007	76 1b		 jbe	 SHORT $LN2@wmemcmp
  00009	8b 4c 24 0c	 mov	 ecx, DWORD PTR __S2$[esp]
  0000d	8b 44 24 08	 mov	 eax, DWORD PTR __S1$[esp]
$LL4@wmemcmp:

; 1217 :                 if (*_S1 != *_S2)

  00011	66 8b 30	 mov	 si, WORD PTR [eax]
  00014	66 3b 31	 cmp	 si, WORD PTR [ecx]
  00017	75 0f		 jne	 SHORT $LN8@wmemcmp
  00019	83 c0 02	 add	 eax, 2
  0001c	83 c1 02	 add	 ecx, 2
  0001f	83 ea 01	 sub	 edx, 1
  00022	75 ed		 jne	 SHORT $LL4@wmemcmp
$LN2@wmemcmp:

; 1219 :         return (0); }

  00024	33 c0		 xor	 eax, eax
  00026	5e		 pop	 esi
  00027	c3		 ret	 0
$LN8@wmemcmp:

; 1218 :                         return (*_S1 < *_S2 ? -1 : +1);

  00028	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0002b	66 3b 01	 cmp	 ax, WORD PTR [ecx]
  0002e	5e		 pop	 esi
  0002f	1b c0		 sbb	 eax, eax
  00031	83 e0 fe	 and	 eax, -2			; fffffffeH
  00034	40		 inc	 eax

; 1219 :         return (0); }

  00035	c3		 ret	 0
_wmemcmp ENDP
_TEXT	ENDS
PUBLIC	_wmemcpy_s
EXTRN	_memcpy_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT _wmemcpy_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemcpy_s PROC						; COMDAT

; 1232 : #pragma warning( push )
; 1233 : #pragma warning( disable : 6386 )
; 1234 :             return memcpy_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memcpy_s
_wmemcpy_s ENDP
_TEXT	ENDS
PUBLIC	_wmemmove_s
EXTRN	_memmove_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT _wmemmove_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemmove_s PROC					; COMDAT

; 1252 : #pragma warning( push )
; 1253 : #pragma warning( disable : 6386 )
; 1254 :             return memmove_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memmove_s
_wmemmove_s ENDP
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z	; std::char_traits<wchar_t>::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT

; 310  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000b	66 89 0a	 mov	 WORD PTR [edx], cx

; 311  : 		}

  0000e	c3		 ret	 0
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
PUBLIC	?compare@?$char_traits@_W@std@@SAHPB_W0I@Z	; std::char_traits<wchar_t>::compare
; Function compile flags: /Ogtpy
;	COMDAT ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@_W@std@@SAHPB_W0I@Z PROC		; std::char_traits<wchar_t>::compare, COMDAT

; 326  : //		_DEBUG_POINTER(_First1);
; 327  : //		_DEBUG_POINTER(_First2);
; 328  : 		return (::wmemcmp(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _wmemcmp
?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ENDP		; std::char_traits<wchar_t>::compare
_TEXT	ENDS
PUBLIC	?length@?$char_traits@_W@std@@SAIPB_W@Z		; std::char_traits<wchar_t>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@_W@std@@SAIPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@_W@std@@SAIPB_W@Z PROC		; std::char_traits<wchar_t>::length, COMDAT

; 333  : //		_DEBUG_POINTER(_First);
; 334  : 		return (::wcslen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL3@length:
  00007	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000a	83 c0 02	 add	 eax, 2
  0000d	66 85 c9	 test	 cx, cx
  00010	75 f5		 jne	 SHORT $LL3@length
  00012	2b c2		 sub	 eax, edx
  00014	d1 f8		 sar	 eax, 1

; 335  : 		}

  00016	c3		 ret	 0
?length@?$char_traits@_W@std@@SAIPB_W@Z ENDP		; std::char_traits<wchar_t>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Copy_s, COMDAT

; 348  : //		_DEBUG_POINTER(_First1);
; 349  : //		_DEBUG_POINTER(_First2);
; 350  : 		_CRT_SECURE_WMEMCPY(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 351  : 		return _First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 352  : 		}

  00026	c3		 ret	 0
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Copy_s
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Move_s, COMDAT

; 372  : //		_DEBUG_POINTER(_First1);
; 373  : //		_DEBUG_POINTER(_First2);
; 374  : 		_CRT_SECURE_WMEMMOVE(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 375  : 		return (_Elem *)_First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 376  : 		}

  00026	c3		 ret	 0
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Move_s
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 425  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 426  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?eq@?$char_traits@D@std@@SA_NABD0@Z		; std::char_traits<char>::eq
; Function compile flags: /Ogtpy
;	COMDAT ?eq@?$char_traits@D@std@@SA_NABD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@D@std@@SA_NABD0@Z PROC		; std::char_traits<char>::eq, COMDAT

; 430  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000a	33 c0		 xor	 eax, eax
  0000c	3a 0a		 cmp	 cl, BYTE PTR [edx]
  0000e	0f 94 c0	 sete	 al

; 431  : 		}

  00011	c3		 ret	 0
?eq@?$char_traits@D@std@@SA_NABD0@Z ENDP		; std::char_traits<char>::eq
_TEXT	ENDS
PUBLIC	?compare@?$char_traits@D@std@@SAHPBD0I@Z	; std::char_traits<char>::compare
; Function compile flags: /Ogtpy
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@D@std@@SAHPBD0I@Z PROC		; std::char_traits<char>::compare, COMDAT

; 441  : //		_DEBUG_POINTER(_First1);
; 442  : //		_DEBUG_POINTER(_First2);
; 443  : 		return (::memcmp(_First1, _First2, _Count));

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First1$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 10	 mov	 esi, DWORD PTR __Count$[esp]
  0000d	57		 push	 edi
  0000e	83 fe 04	 cmp	 esi, 4
  00011	72 14		 jb	 SHORT $LN11@compare
$LL4@compare:
  00013	8b 02		 mov	 eax, DWORD PTR [edx]
  00015	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00017	75 12		 jne	 SHORT $LN5@compare
  00019	83 ee 04	 sub	 esi, 4
  0001c	83 c1 04	 add	 ecx, 4
  0001f	83 c2 04	 add	 edx, 4
  00022	83 fe 04	 cmp	 esi, 4
  00025	73 ec		 jae	 SHORT $LL4@compare
$LN11@compare:
  00027	85 f6		 test	 esi, esi
  00029	74 44		 je	 SHORT $LN6@compare
$LN5@compare:
  0002b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0002e	0f b6 39	 movzx	 edi, BYTE PTR [ecx]
  00031	2b c7		 sub	 eax, edi
  00033	75 31		 jne	 SHORT $LN7@compare
  00035	83 fe 01	 cmp	 esi, 1
  00038	76 35		 jbe	 SHORT $LN6@compare
  0003a	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  0003e	0f b6 79 01	 movzx	 edi, BYTE PTR [ecx+1]
  00042	2b c7		 sub	 eax, edi
  00044	75 20		 jne	 SHORT $LN7@compare
  00046	83 fe 02	 cmp	 esi, 2
  00049	76 24		 jbe	 SHORT $LN6@compare
  0004b	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  0004f	0f b6 79 02	 movzx	 edi, BYTE PTR [ecx+2]
  00053	2b c7		 sub	 eax, edi
  00055	75 0f		 jne	 SHORT $LN7@compare
  00057	83 fe 03	 cmp	 esi, 3
  0005a	76 13		 jbe	 SHORT $LN6@compare
  0005c	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  00060	0f b6 49 03	 movzx	 ecx, BYTE PTR [ecx+3]
  00064	2b c1		 sub	 eax, ecx
$LN7@compare:
  00066	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  00069	5f		 pop	 edi
  0006a	83 c8 01	 or	 eax, 1
  0006d	5e		 pop	 esi

; 444  : 		}

  0006e	c3		 ret	 0
$LN6@compare:
  0006f	5f		 pop	 edi

; 441  : //		_DEBUG_POINTER(_First1);
; 442  : //		_DEBUG_POINTER(_First2);
; 443  : 		return (::memcmp(_First1, _First2, _Count));

  00070	33 c0		 xor	 eax, eax
  00072	5e		 pop	 esi

; 444  : 		}

  00073	c3		 ret	 0
?compare@?$char_traits@D@std@@SAHPBD0I@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 448  : //		_DEBUG_POINTER(_First);
; 449  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length@2:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $LL3@length@2
  0000e	2b c2		 sub	 eax, edx

; 450  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Copy_s, COMDAT

; 463  : //		_DEBUG_POINTER(_First1);
; 464  : //		_DEBUG_POINTER(_First2);
; 465  : 		_CRT_SECURE_MEMCPY(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 466  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 467  : 		}

  00020	c3		 ret	 0
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Copy_s
_TEXT	ENDS
PUBLIC	?find@?$char_traits@D@std@@SAPBDPBDIABD@Z	; std::char_traits<char>::find
EXTRN	_memchr:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?find@?$char_traits@D@std@@SAPBDPBDIABD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 4
?find@?$char_traits@D@std@@SAPBDPBDIABD@Z PROC		; std::char_traits<char>::find, COMDAT

; 472  : //		_DEBUG_POINTER(_First);
; 473  : 		return ((const _Elem *)::memchr(_First, _Ch, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ch$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00008	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0000b	50		 push	 eax
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __First$[esp]
  00010	52		 push	 edx
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _memchr
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 474  : 		}

  0001a	c3		 ret	 0
?find@?$char_traits@D@std@@SAPBDPBDIABD@Z ENDP		; std::char_traits<char>::find
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Move_s, COMDAT

; 487  : //		_DEBUG_POINTER(_First1);
; 488  : //		_DEBUG_POINTER(_First2);
; 489  : 		_CRT_SECURE_MEMMOVE(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 490  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 491  : 		}

  00020	c3		 ret	 0
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Move_s
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAPADPADID@Z	; std::char_traits<char>::assign
EXTRN	_memset:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 495  : //		_DEBUG_POINTER(_First);
; 496  : 		return ((_Elem *)::memset(_First, _Ch, _Count));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	0f be 4c 24 0c	 movsx	 ecx, BYTE PTR __Ch$[esp-4]
  00009	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	52		 push	 edx
  00010	e8 00 00 00 00	 call	 _memset
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 497  : 		}

  00018	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
; Function compile flags: /Ogtpy
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 506  : 		return ((unsigned char)_Ch);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 507  : 		}

  00007	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
; Function compile flags: /Ogtpy
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 512  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000a	33 c0		 xor	 eax, eax
  0000c	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0000e	0f 94 c0	 sete	 al

; 513  : 		}

  00011	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
; Function compile flags: /Ogtpy
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 517  : 		return (EOF);

  00000	83 c8 ff	 or	 eax, -1

; 518  : 		}

  00003	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
PUBLIC	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Pcont$ = 8						; size = 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z PROC	; std::_Aux_cont::_Aux_cont, COMDAT
; _this$ = ecx

; 364  : 	explicit _Aux_cont(const _Container_base_aux * const _Pcont)

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pcont$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx
  00008	c2 04 00	 ret	 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ENDP	; std::_Aux_cont::_Aux_cont
_TEXT	ENDS
PUBLIC	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
; Function compile flags: /Ogtpy
;	COMDAT ?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Aux_cont::_Getcont, COMDAT
; _this$ = ecx

; 369  : 		return _Mycontainer;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 370  : 		}

  00002	c3		 ret	 0
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Aux_cont::_Getcont
_TEXT	ENDS
PUBLIC	??0_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::_Container_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??0_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::_Container_base_aux, COMDAT
; _this$ = ecx

; 379  : 	_Container_base_aux()

  00000	8b c1		 mov	 eax, ecx

; 380  : 		{
; 381  : 		// Do nothing: _Container_base_aux_alloc_real() will construct the aux object.
; 382  : 		}

  00002	c3		 ret	 0
??0_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::_Container_base_aux
_TEXT	ENDS
PUBLIC	??1_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::~_Container_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??1_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??1_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::~_Container_base_aux, COMDAT
; _this$ = ecx

; 403  : 		// Do nothing: ~_Container_base_aux_alloc_real() previously destroyed the aux object.
; 404  : 		}

  00000	c3		 ret	 0
??1_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::~_Container_base_aux
_TEXT	ENDS
PUBLIC	??0_Iterator_base_aux@std@@QAE@XZ		; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??0_Iterator_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base_aux@std@@QAE@XZ PROC			; std::_Iterator_base_aux::_Iterator_base_aux, COMDAT
; _this$ = ecx

; 448  : 	_Iterator_base_aux()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0_Iterator_base_aux@std@@QAE@XZ ENDP			; std::_Iterator_base_aux::_Iterator_base_aux
_TEXT	ENDS
PUBLIC	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z
_TEXT	SEGMENT
__Pcont$ = 8						; size = 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z PROC ; std::_Iterator_base_aux::_Set_container, COMDAT
; _this$ = ecx

; 453  : 		_Myaux = _Pcont->_Myownedaux;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pcont$[esp-4]
  00004	8b 10		 mov	 edx, DWORD PTR [eax]
  00006	89 11		 mov	 DWORD PTR [ecx], edx

; 454  : 		}

  00008	c2 04 00	 ret	 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ENDP ; std::_Iterator_base_aux::_Set_container
_TEXT	ENDS
PUBLIC	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Ogtpy
;	COMDAT ?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Iterator_base_aux::_Getmycont, COMDAT
; _this$ = ecx

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 03		 je	 SHORT $LN3@Getmycont
  00006	8b 00		 mov	 eax, DWORD PTR [eax]

; 459  : 		}

  00008	c3		 ret	 0
$LN3@Getmycont:

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

  00009	33 c0		 xor	 eax, eax

; 459  : 		}

  0000b	c3		 ret	 0
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Iterator_base_aux::_Getmycont
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_aux::_Same_container, COMDAT
; _this$ = ecx

; 463  : 		return _Myaux == _Other._Myaux;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Other$[esp-4]
  00006	33 c9		 xor	 ecx, ecx
  00008	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000a	0f 94 c1	 sete	 cl
  0000d	8a c1		 mov	 al, cl

; 464  : 		}

  0000f	c2 04 00	 ret	 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_aux::_Same_container
_TEXT	ENDS
PUBLIC	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Has_container@_Iterator_base_aux@std@@QBE_NXZ
_TEXT	SEGMENT
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ PROC	; std::_Iterator_base_aux::_Has_container, COMDAT
; _this$ = ecx

; 468  : 		return _Myaux != 0;

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	0f 95 c0	 setne	 al

; 469  : 		}

  00007	c3		 ret	 0
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ENDP	; std::_Iterator_base_aux::_Has_container
_TEXT	ENDS
PUBLIC	??0_Iterator_base_secure@std@@QAE@XZ		; std::_Iterator_base_secure::_Iterator_base_secure
; Function compile flags: /Ogtpy
;	COMDAT ??0_Iterator_base_secure@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base_secure@std@@QAE@XZ PROC		; std::_Iterator_base_secure::_Iterator_base_secure, COMDAT
; _this$ = ecx

; 567  : 		{

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 568  : 		}

  00008	c3		 ret	 0
??0_Iterator_base_secure@std@@QAE@XZ ENDP		; std::_Iterator_base_secure::_Iterator_base_secure
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_secure@std@@QBE_NABV12@@Z ; std::_Iterator_base_secure::_Same_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Same_container@_Iterator_base_secure@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_secure@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_secure::_Same_container, COMDAT
; _this$ = ecx

; 577  : 		return _Mycont == _Other._Mycont;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Other$[esp-4]
  00006	33 c9		 xor	 ecx, ecx
  00008	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000a	0f 94 c1	 sete	 cl
  0000d	8a c1		 mov	 al, cl

; 578  : 		}

  0000f	c2 04 00	 ret	 4
?_Same_container@_Iterator_base_secure@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_secure::_Same_container
_TEXT	ENDS
PUBLIC	?_Has_container@_Iterator_base_secure@std@@QBE_NXZ ; std::_Iterator_base_secure::_Has_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Has_container@_Iterator_base_secure@std@@QBE_NXZ
_TEXT	SEGMENT
?_Has_container@_Iterator_base_secure@std@@QBE_NXZ PROC	; std::_Iterator_base_secure::_Has_container, COMDAT
; _this$ = ecx

; 582  : 		return _Mycont != 0;

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	0f 95 c0	 setne	 al

; 583  : 		}

  00007	c3		 ret	 0
?_Has_container@_Iterator_base_secure@std@@QBE_NXZ ENDP	; std::_Iterator_base_secure::_Has_container
_TEXT	ENDS
PUBLIC	?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ	; std::_Locinfo::_Getctype
EXTRN	__Getctype:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
;	COMDAT ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
_TEXT	SEGMENT
$T150206 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ PROC	; std::_Locinfo::_Getctype, COMDAT
; _this$ = ecx

; 123  : 		{	// return ctype stuff

  00000	83 ec 10	 sub	 esp, 16			; 00000010H

; 124  : 		return (::_Getctype());

  00003	8d 04 24	 lea	 eax, DWORD PTR $T150206[esp+16]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 __Getctype
  0000c	8b 4c 24 18	 mov	 ecx, DWORD PTR ___$ReturnUdt$[esp+16]
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	89 11		 mov	 DWORD PTR [ecx], edx
  00014	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00017	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0001a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0001d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00020	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00023	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00026	8b c1		 mov	 eax, ecx

; 125  : 		}

  00028	83 c4 14	 add	 esp, 20			; 00000014H
  0002b	c2 04 00	 ret	 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ENDP	; std::_Locinfo::_Getctype
_TEXT	ENDS
PUBLIC	?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ	; std::_Locinfo::_Getcvt
EXTRN	__Getcvt:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ PROC		; std::_Locinfo::_Getcvt, COMDAT
; _this$ = ecx

; 129  : 		return (::_Getcvt());

  00000	e8 00 00 00 00	 call	 __Getcvt
  00005	8b c8		 mov	 ecx, eax
  00007	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx
  0000d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 130  : 		}

  00010	c2 04 00	 ret	 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ENDP		; std::_Locinfo::_Getcvt
_TEXT	ENDS
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 73   : 			{	// construct with specified stamp value

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Val$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 74   : 			}

  00008	c2 04 00	 ret	 4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
PUBLIC	??Bid@locale@std@@QAEIXZ			; std::locale::id::operator unsigned int
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
; Function compile flags: /Ogtpy
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT
__Lock$87479 = -4					; size = 4
??Bid@locale@std@@QAEIXZ PROC				; std::locale::id::operator unsigned int, COMDAT
; _this$ = ecx

; 77   : 			{	// get stamp, with lazy allocation

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 78   : 			if (_Id == 0)

  00004	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00007	75 26		 jne	 SHORT $LN6@operator

; 79   : 				{	// still zero, allocate stamp
; 80   : 				_BEGIN_LOCK(_LOCK_LOCALE)

  00009	6a 00		 push	 0
  0000b	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$87479[esp+12]
  0000f	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 81   : 					if (_Id == 0)

  00014	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00017	75 0d		 jne	 SHORT $LN1@operator

; 82   : 						_Id = ++_Id_cnt;

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  0001e	40		 inc	 eax
  0001f	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00024	89 06		 mov	 DWORD PTR [esi], eax
$LN1@operator:

; 83   : 				_END_LOCK()

  00026	8d 4c 24 04	 lea	 ecx, DWORD PTR __Lock$87479[esp+8]
  0002a	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN6@operator:

; 84   : 				}
; 85   : 			return (_Id);

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	5e		 pop	 esi

; 86   : 			}

  00032	59		 pop	 ecx
  00033	c3		 ret	 0
??Bid@locale@std@@QAEIXZ ENDP				; std::locale::id::operator unsigned int
_TEXT	ENDS
PUBLIC	?_Incref@facet@locale@std@@QAEXXZ		; std::locale::facet::_Incref
; Function compile flags: /Ogtpy
;	COMDAT ?_Incref@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
__Lock$87485 = -4					; size = 4
?_Incref@facet@locale@std@@QAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 117  : 			{	// safely increment the reference count

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 118  : 			_BEGIN_LOCK(_LOCK_LOCALE)

  00004	6a 00		 push	 0
  00006	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$87485[esp+12]
  0000a	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 119  : 				if (_Refs < (size_t)(-1))

  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	83 f8 ff	 cmp	 eax, -1
  00015	73 04		 jae	 SHORT $LN1@Incref

; 120  : 					++_Refs;

  00017	40		 inc	 eax
  00018	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@Incref:

; 121  : 			_END_LOCK()

  0001b	8d 4c 24 04	 lea	 ecx, DWORD PTR __Lock$87485[esp+8]
  0001f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00024	5e		 pop	 esi

; 122  : 			}

  00025	59		 pop	 ecx
  00026	c3		 ret	 0
?_Incref@facet@locale@std@@QAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
PUBLIC	?_Decref@facet@locale@std@@QAEPAV123@XZ		; std::locale::facet::_Decref
; Function compile flags: /Ogtpy
;	COMDAT ?_Decref@facet@locale@std@@QAEPAV123@XZ
_TEXT	SEGMENT
__Lock$87490 = -4					; size = 4
?_Decref@facet@locale@std@@QAEPAV123@XZ PROC		; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 125  : 			{	// safely decrement the reference count, return this when dead

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 126  : 			_BEGIN_LOCK(_LOCK_LOCALE)

  00005	6a 00		 push	 0
  00007	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$87490[esp+16]
  0000b	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 127  : 				if (0 < _Refs && _Refs < (size_t)(-1))

  00010	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00013	85 c0		 test	 eax, eax
  00015	76 09		 jbe	 SHORT $LN1@Decref
  00017	83 f8 ff	 cmp	 eax, -1
  0001a	73 04		 jae	 SHORT $LN1@Decref

; 128  : 					--_Refs;

  0001c	48		 dec	 eax
  0001d	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN1@Decref:

; 129  : 				return (_Refs == 0 ? this : 0);

  00020	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00023	f7 de		 neg	 esi
  00025	1b f6		 sbb	 esi, esi
  00027	f7 d6		 not	 esi
  00029	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$87490[esp+12]
  0002d	23 f7		 and	 esi, edi
  0002f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00034	5f		 pop	 edi
  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi

; 130  : 			_END_LOCK()
; 131  : 			}

  00038	59		 pop	 ecx
  00039	c3		 ret	 0
?_Decref@facet@locale@std@@QAEPAV123@XZ ENDP		; std::locale::facet::_Decref
_TEXT	ENDS
PUBLIC	?_Register@facet@locale@std@@QAEXXZ		; std::locale::facet::_Register
EXTRN	?facet_Register@facet@locale@std@@CAXPAV123@@Z:PROC ; std::locale::facet::facet_Register
; Function compile flags: /Ogtpy
;	COMDAT ?_Register@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
?_Register@facet@locale@std@@QAEXXZ PROC		; std::locale::facet::_Register, COMDAT
; _this$ = ecx

; 135  : #if defined(_M_CEE)
; 136  : 			facet_Register_m(this);
; 137  : #else
; 138  : 			facet_Register(this);

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  00006	59		 pop	 ecx

; 139  : #endif
; 140  : 			}

  00007	c3		 ret	 0
?_Register@facet@locale@std@@QAEXXZ ENDP		; std::locale::facet::_Register
_TEXT	ENDS
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??1facet@locale@std@@UAE@XZ			; std::locale::facet::~facet
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Efacet@locale@std@@UAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1facet@locale@std@@UAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@UAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 170  : 			{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@

; 171  : 			}

  00006	c3		 ret	 0
??1facet@locale@std@@UAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
PUBLIC	??0facet@locale@std@@IAE@I@Z			; std::locale::facet::facet
; Function compile flags: /Ogtpy
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT
__Initrefs$ = 8						; size = 4
??0facet@locale@std@@IAE@I@Z PROC			; std::locale::facet::facet, COMDAT
; _this$ = ecx

; 176  : 			{	// construct with initial reference count

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Initrefs$[esp-4]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@
  0000c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 177  : 			}

  0000f	c2 04 00	 ret	 4
??0facet@locale@std@@IAE@I@Z ENDP			; std::locale::facet::facet
_TEXT	ENDS
PUBLIC	??0locale@std@@QAE@XZ				; std::locale::locale
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@XZ:PROC	; std::locale::_Init
; Function compile flags: /Ogtpy
;	COMDAT ??0locale@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$150233 = -4					; size = 4
??0locale@std@@QAE@XZ PROC				; std::locale::locale, COMDAT
; _this$ = ecx

; 324  : 		{	// construct from current locale

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  0000a	89 07		 mov	 DWORD PTR [edi], eax

; 325  : 		_Getgloballocale()->_Incref();

  0000c	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  00011	6a 00		 push	 0
  00013	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$150233[esp+16]
  00017	8b f0		 mov	 esi, eax
  00019	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0001e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00021	83 f8 ff	 cmp	 eax, -1
  00024	73 04		 jae	 SHORT $LN3@locale
  00026	40		 inc	 eax
  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN3@locale:
  0002a	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$150233[esp+12]
  0002e	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 326  : 		}

  00033	8b c7		 mov	 eax, edi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	59		 pop	 ecx
  00038	c3		 ret	 0
??0locale@std@@QAE@XZ ENDP				; std::locale::locale
_TEXT	ENDS
PUBLIC	??0locale@std@@QAE@ABV01@@Z			; std::locale::locale
; Function compile flags: /Ogtpy
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Lock$150241 = 8					; size = 4
__Right$ = 8						; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = ecx

; 334  : 		{	// construct by copying

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	56		 push	 esi
  00005	8b 30		 mov	 esi, DWORD PTR [eax]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 335  : 		_Ptr->_Incref();

  0000a	6a 00		 push	 0
  0000c	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$150241[esp+8]
  00010	89 37		 mov	 DWORD PTR [edi], esi
  00012	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	83 f8 ff	 cmp	 eax, -1
  0001d	73 04		 jae	 SHORT $LN3@locale@2
  0001f	40		 inc	 eax
  00020	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN3@locale@2:
  00023	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$150241[esp+4]
  00027	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 336  : 		}

  0002c	8b c7		 mov	 eax, edi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c2 04 00	 ret	 4
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
_TEXT	ENDS
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
; Function compile flags: /Ogtpy
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$150254 = -4					; size = 4
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 390  : 		{	// destroy the object

  00000	51		 push	 ecx
  00001	57		 push	 edi

; 391  : 		if (_Ptr != 0)

  00002	8b 39		 mov	 edi, DWORD PTR [ecx]
  00004	85 ff		 test	 edi, edi
  00006	74 3f		 je	 SHORT $LN4@locale@3

; 392  : 			_DELETE_CRT(_Ptr->_Decref());

  00008	6a 00		 push	 0
  0000a	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$150254[esp+12]
  0000e	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00013	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00016	85 c0		 test	 eax, eax
  00018	76 09		 jbe	 SHORT $LN6@locale@3
  0001a	83 f8 ff	 cmp	 eax, -1
  0001d	73 04		 jae	 SHORT $LN6@locale@3
  0001f	48		 dec	 eax
  00020	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN6@locale@3:
  00023	56		 push	 esi
  00024	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00027	f7 de		 neg	 esi
  00029	1b f6		 sbb	 esi, esi
  0002b	f7 d6		 not	 esi
  0002d	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$150254[esp+12]
  00031	23 f7		 and	 esi, edi
  00033	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00038	85 f6		 test	 esi, esi
  0003a	74 0a		 je	 SHORT $LN9@locale@3
  0003c	8b 06		 mov	 eax, DWORD PTR [esi]
  0003e	8b 10		 mov	 edx, DWORD PTR [eax]
  00040	6a 01		 push	 1
  00042	8b ce		 mov	 ecx, esi
  00044	ff d2		 call	 edx
$LN9@locale@3:
  00046	5e		 pop	 esi
$LN4@locale@3:
  00047	5f		 pop	 edi

; 393  : 		}

  00048	59		 pop	 ecx
  00049	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
; Function compile flags: /Ogtpy
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 413  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 414  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	56		 push	 esi
  00003	8b 74 24 08	 mov	 esi, DWORD PTR __Id$[esp]
  00007	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  0000a	73 24		 jae	 SHORT $LN6@Getfacet
  0000c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000f	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 415  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00012	85 c0		 test	 eax, eax
  00014	75 20		 jne	 SHORT $LN1@Getfacet
$LN10@Getfacet:
  00016	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  0001a	74 1a		 je	 SHORT $LN1@Getfacet

; 416  : 			return (_Facptr);	// found facet or not transparent, return pointer
; 417  : 		else
; 418  : 			{	// look in current locale
; 419  : 			locale::_Locimp *_Ptr = _Getgloballocale();

  0001c	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 420  : 			return (_Id < _Ptr->_Facetcount
; 421  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 422  : 				: 0);	// no entry in current locale

  00021	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00024	73 0e		 jae	 SHORT $LN8@Getfacet
  00026	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00029	8b 04 b1	 mov	 eax, DWORD PTR [ecx+esi*4]
  0002c	5e		 pop	 esi

; 423  : 			}
; 424  : 		}

  0002d	c2 04 00	 ret	 4
$LN6@Getfacet:

; 413  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 414  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00030	33 c0		 xor	 eax, eax

; 415  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00032	eb e2		 jmp	 SHORT $LN10@Getfacet
$LN8@Getfacet:

; 420  : 			return (_Id < _Ptr->_Facetcount
; 421  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 422  : 				: 0);	// no entry in current locale

  00034	33 c0		 xor	 eax, eax
$LN1@Getfacet:
  00036	5e		 pop	 esi

; 423  : 			}
; 424  : 		}

  00037	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gfacet@locale@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@UAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN6@scalar@2
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN6@scalar@2:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_Gfacet@locale@std@@UAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??0ctype_base@std@@QAE@I@Z			; std::ctype_base::ctype_base
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0ctype_base@std@@QAE@I@Z
_TEXT	SEGMENT
__Refs$ = 8						; size = 4
??0ctype_base@std@@QAE@I@Z PROC				; std::ctype_base::ctype_base, COMDAT
; _this$ = ecx

; 1358 : 		{	// default constructor

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Refs$[esp-4]
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ctype_base@std@@6B@

; 1359 : 		}

  0000f	c2 04 00	 ret	 4
??0ctype_base@std@@QAE@I@Z ENDP				; std::ctype_base::ctype_base
_TEXT	ENDS
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
; Function compile flags: /Ogtpy
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx

; 1363 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00006	c3		 ret	 0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN8@scalar@3
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN8@scalar@3:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?widen@?$ctype@D@std@@QBEDD@Z			; std::ctype<char>::widen
; Function compile flags: /Ogtpy
;	COMDAT ?widen@?$ctype@D@std@@QBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?widen@?$ctype@D@std@@QBEDD@Z PROC			; std::ctype<char>::widen, COMDAT
; _this$ = ecx

; 1716 : 		return (do_widen(_Byte));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00005	ff e0		 jmp	 eax
?widen@?$ctype@D@std@@QBEDD@Z ENDP			; std::ctype<char>::widen
_TEXT	ENDS
PUBLIC	?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z	; std::ctype<char>::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T150308 = -16						; size = 16
__Lobj$ = 8						; size = 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z PROC		; std::ctype<char>::_Init, COMDAT
; _this$ = ecx

; 1807 : 		{	// initialize from _Lobj

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi

; 1808 : 		_Ctype = _Lobj._Getctype();

  00004	8d 44 24 04	 lea	 eax, DWORD PTR $T150308[esp+20]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 __Getctype
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00015	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00018	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0001b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001e	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00021	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00024	83 c4 04	 add	 esp, 4
  00027	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0002a	5e		 pop	 esi

; 1809 : 		}

  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	c2 04 00	 ret	 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z ENDP		; std::ctype<char>::_Init
_TEXT	ENDS
PUBLIC	?rdstate@ios_base@std@@QBEHXZ			; std::ios_base::rdstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?rdstate@ios_base@std@@QBEHXZ PROC			; std::ios_base::rdstate, COMDAT
; _this$ = ecx

; 311  : 		return (_Mystate);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 312  : 		}

  00003	c3		 ret	 0
?rdstate@ios_base@std@@QBEHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
PUBLIC	?good@ios_base@std@@QBE_NXZ			; std::ios_base::good
; Function compile flags: /Ogtpy
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?good@ios_base@std@@QBE_NXZ PROC			; std::ios_base::good, COMDAT
; _this$ = ecx

; 334  : 		return (rdstate() == goodbit);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  00005	0f 94 c0	 sete	 al

; 335  : 		}

  00008	c3		 ret	 0
?good@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
PUBLIC	?fail@ios_base@std@@QBE_NXZ			; std::ios_base::fail
; Function compile flags: /Ogtpy
;	COMDAT ?fail@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?fail@ios_base@std@@QBE_NXZ PROC			; std::ios_base::fail, COMDAT
; _this$ = ecx

; 344  : 		return (((int)rdstate()
; 345  : 			& ((int)badbit | (int)failbit)) != 0);

  00000	f6 41 08 06	 test	 BYTE PTR [ecx+8], 6
  00004	b8 00 00 00 00	 mov	 eax, 0
  00009	0f 95 c0	 setne	 al

; 346  : 		}

  0000c	c3		 ret	 0
?fail@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::fail
_TEXT	ENDS
PUBLIC	?flags@ios_base@std@@QBEHXZ			; std::ios_base::flags
; Function compile flags: /Ogtpy
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?flags@ios_base@std@@QBEHXZ PROC			; std::ios_base::flags, COMDAT
; _this$ = ecx

; 374  : 		return (_Fmtfl);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 375  : 		}

  00003	c3		 ret	 0
?flags@ios_base@std@@QBEHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
PUBLIC	?width@ios_base@std@@QBEHXZ			; std::ios_base::width
; Function compile flags: /Ogtpy
;	COMDAT ?width@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?width@ios_base@std@@QBEHXZ PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 419  : 		return (_Wide);

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 420  : 		}

  00003	c3		 ret	 0
?width@ios_base@std@@QBEHXZ ENDP			; std::ios_base::width
_TEXT	ENDS
PUBLIC	?width@ios_base@std@@QAEHH@Z			; std::ios_base::width
; Function compile flags: /Ogtpy
;	COMDAT ?width@ios_base@std@@QAEHH@Z
_TEXT	SEGMENT
__Newwidth$ = 8						; size = 4
?width@ios_base@std@@QAEHH@Z PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 424  : 		streamsize _Oldwidth = _Wide;
; 425  : 		_Wide = _Newwidth;

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Newwidth$[esp-4]
  00004	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00007	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 426  : 		return (_Oldwidth);
; 427  : 		}

  0000a	c2 04 00	 ret	 4
?width@ios_base@std@@QAEHH@Z ENDP			; std::ios_base::width
_TEXT	ENDS
PUBLIC	?getloc@ios_base@std@@QBE?AVlocale@2@XZ		; std::ios_base::getloc
; Function compile flags: /Ogtpy
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
$T150332 = -4						; size = 4
__Lock$150345 = 8					; size = 4
___$ReturnUdt$ = 8					; size = 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT
; _this$ = ecx

; 430  : 		{	// get locale

  00000	51		 push	 ecx

; 431  : 		return (*_Ploc);

  00001	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00004	56		 push	 esi
  00005	8b 30		 mov	 esi, DWORD PTR [eax]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	6a 00		 push	 0
  0000e	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$150345[esp+12]
  00012	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T150332[esp+16], 0
  0001a	89 37		 mov	 DWORD PTR [edi], esi
  0001c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00021	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00024	83 f8 ff	 cmp	 eax, -1
  00027	73 04		 jae	 SHORT $LN7@getloc
  00029	40		 inc	 eax
  0002a	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@getloc:
  0002d	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$150345[esp+8]
  00031	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00036	8b c7		 mov	 eax, edi
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi

; 432  : 		}

  0003a	59		 pop	 ecx
  0003b	c2 04 00	 ret	 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ ENDP		; std::ios_base::getloc
_TEXT	ENDS
PUBLIC	??_7ios_base@std@@6B@				; std::ios_base::`vftable'
PUBLIC	??1ios_base@std@@UAE@XZ				; std::ios_base::~ios_base
PUBLIC	??_R4ios_base@std@@6B@				; std::ios_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:PROC	; std::ios_base::_Ios_base_dtor
EXTRN	??_Eios_base@std@@UAEPAXI@Z:PROC		; std::ios_base::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
_DATA	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
_DATA	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ios_base@std@@6B@
rdata$r	SEGMENT
??_R4ios_base@std@@6B@ DD 00H				; std::ios_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVios_base@std@@@8
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT
??_7ios_base@std@@6B@ DD FLAT:??_R4ios_base@std@@6B@	; std::ios_base::`vftable'
	DD	FLAT:??_Eios_base@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ios_base@std@@UAE@XZ PROC				; std::ios_base::~ios_base, COMDAT
; _this$ = ecx

; 494  :         _Ios_base_dtor(this);

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx

; 495  :         }

  0000d	c3		 ret	 0
??1ios_base@std@@UAE@XZ ENDP				; std::ios_base::~ios_base
_TEXT	ENDS
PUBLIC	??0ios_base@std@@IAE@XZ				; std::ios_base::ios_base
; Function compile flags: /Ogtpy
;	COMDAT ??0ios_base@std@@IAE@XZ
_TEXT	SEGMENT
??0ios_base@std@@IAE@XZ PROC				; std::ios_base::ios_base, COMDAT
; _this$ = ecx

; 510  : 	__CLR_OR_THIS_CALL ios_base()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@

; 511  : 		{	// default constructor
; 512  : 		}

  00008	c3		 ret	 0
??0ios_base@std@@IAE@XZ ENDP				; std::ios_base::ios_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gios_base@std@@UAEPAXI@Z PROC			; std::ios_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	56		 push	 esi
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000f	83 c4 04	 add	 esp, 4
  00012	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00017	74 09		 je	 SHORT $LN6@scalar@4
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	83 c4 04	 add	 esp, 4
$LN6@scalar@4:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c2 04 00	 ret	 4
??_Gios_base@std@@UAEPAXI@Z ENDP			; std::ios_base::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7Container@ForEach@CipherShed@@6B@		; CipherShed::ForEach::Container::`vftable'
PUBLIC	??0Container@ForEach@CipherShed@@QAE@XZ		; CipherShed::ForEach::Container::Container
PUBLIC	??_R4Container@ForEach@CipherShed@@6B@		; CipherShed::ForEach::Container::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUContainer@ForEach@CipherShed@@@8	; CipherShed::ForEach::Container `RTTI Type Descriptor'
PUBLIC	??_R3Container@ForEach@CipherShed@@8		; CipherShed::ForEach::Container::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Container@ForEach@CipherShed@@8		; CipherShed::ForEach::Container::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Container@ForEach@CipherShed@@8	; CipherShed::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EContainer@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::Container::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
; File c:\users\public\desktop\projects\ciphershed\src\platform\foreach.h
rdata$r	SEGMENT
??_R1A@?0A@EA@Container@ForEach@CipherShed@@8 DD FLAT:??_R0?AUContainer@ForEach@CipherShed@@@8 ; CipherShed::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2Container@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2Container@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8 ; CipherShed::ForEach::Container::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Container@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3Container@ForEach@CipherShed@@8 DD 00H		; CipherShed::ForEach::Container::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUContainer@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUContainer@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::Container `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUContainer@ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Container@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4Container@ForEach@CipherShed@@6B@ DD 00H		; CipherShed::ForEach::Container::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUContainer@ForEach@CipherShed@@@8
	DD	FLAT:??_R3Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7Container@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7Container@ForEach@CipherShed@@6B@ DD FLAT:??_R4Container@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::Container::`vftable'
	DD	FLAT:??_EContainer@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0Container@ForEach@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0Container@ForEach@CipherShed@@QAE@XZ PROC		; CipherShed::ForEach::Container::Container, COMDAT
; _this$ = ecx

; 19   : 			Container () : InnerContinue (true), InnerEndCondition (false) { }

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00008	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  0000c	c6 40 05 00	 mov	 BYTE PTR [eax+5], 0
  00010	c3		 ret	 0
??0Container@ForEach@CipherShed@@QAE@XZ ENDP		; CipherShed::ForEach::Container::Container
_TEXT	ENDS
PUBLIC	??1Container@ForEach@CipherShed@@UAE@XZ		; CipherShed::ForEach::Container::~Container
; Function compile flags: /Ogtpy
;	COMDAT ??1Container@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1Container@ForEach@CipherShed@@UAE@XZ PROC		; CipherShed::ForEach::Container::~Container, COMDAT
; _this$ = ecx

; 20   : 			virtual ~Container () { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00006	c3		 ret	 0
??1Container@ForEach@CipherShed@@UAE@XZ ENDP		; CipherShed::ForEach::Container::~Container
_TEXT	ENDS
PUBLIC	?Continue@Container@ForEach@CipherShed@@QBEXXZ	; CipherShed::ForEach::Container::Continue
; Function compile flags: /Ogtpy
;	COMDAT ?Continue@Container@ForEach@CipherShed@@QBEXXZ
_TEXT	SEGMENT
?Continue@Container@ForEach@CipherShed@@QBEXXZ PROC	; CipherShed::ForEach::Container::Continue, COMDAT
; _this$ = ecx

; 22   : 			void Continue () const { InnerContinue = true; }

  00000	c6 41 04 01	 mov	 BYTE PTR [ecx+4], 1
  00004	c3		 ret	 0
?Continue@Container@ForEach@CipherShed@@QBEXXZ ENDP	; CipherShed::ForEach::Container::Continue
_TEXT	ENDS
PUBLIC	?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ ; CipherShed::ForEach::Container::InnerIsNotEnd
; Function compile flags: /Ogtpy
;	COMDAT ?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ
_TEXT	SEGMENT
?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ PROC ; CipherShed::ForEach::Container::InnerIsNotEnd, COMDAT
; _this$ = ecx

; 23   : 			bool InnerIsNotEnd () const { return InnerEndCondition = !InnerEndCondition; }

  00000	80 79 05 00	 cmp	 BYTE PTR [ecx+5], 0
  00004	0f 94 c0	 sete	 al
  00007	88 41 05	 mov	 BYTE PTR [ecx+5], al
  0000a	c3		 ret	 0
?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ ENDP ; CipherShed::ForEach::Container::InnerIsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GContainer@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GContainer@ForEach@CipherShed@@UAEPAXI@Z PROC	; CipherShed::ForEach::Container::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0000e	74 09		 je	 SHORT $LN6@scalar@5
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN6@scalar@5:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_GContainer@ForEach@CipherShed@@UAEPAXI@Z ENDP	; CipherShed::ForEach::Container::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_ConvertUTF16toUTF8s
EXTRN	_ConvertUTF16toUTF8:PROC
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\common\util\unicode\convertutf.h
;	COMDAT _ConvertUTF16toUTF8s
_TEXT	SEGMENT
_sourceStart$ = 8					; size = 4
_sourceLength$ = 12					; size = 4
_targetStart$ = 16					; size = 4
_targetLength$ = 20					; size = 4
_flags$ = 24						; size = 4
_ConvertUTF16toUTF8s PROC				; COMDAT

; 172  : 	return ConvertUTF16toUTF8(&sourceStart, sourceStart+sizeof(*sourceStart)*sourceLength, &targetStart, targetStart+sizeof(*targetStart)*targetLength, flags);

  00000	8b 44 24 14	 mov	 eax, DWORD PTR _flags$[esp-4]
  00004	8b 4c 24 10	 mov	 ecx, DWORD PTR _targetLength$[esp-4]
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR _targetStart$[esp-4]
  0000c	50		 push	 eax
  0000d	03 d1		 add	 edx, ecx
  0000f	8b 4c 24 0c	 mov	 ecx, DWORD PTR _sourceLength$[esp]
  00013	52		 push	 edx
  00014	8b 54 24 0c	 mov	 edx, DWORD PTR _sourceStart$[esp+4]
  00018	8d 44 24 14	 lea	 eax, DWORD PTR _targetStart$[esp+4]
  0001c	50		 push	 eax
  0001d	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00020	50		 push	 eax
  00021	8d 4c 24 14	 lea	 ecx, DWORD PTR _sourceStart$[esp+12]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 _ConvertUTF16toUTF8
  0002b	83 c4 14	 add	 esp, 20			; 00000014H

; 173  : }

  0002e	c3		 ret	 0
_ConvertUTF16toUTF8s ENDP
_TEXT	ENDS
PUBLIC	??_GBootEncryption@CipherShed@@QAEPAXI@Z	; CipherShed::BootEncryption::`scalar deleting destructor'
EXTRN	??1BootEncryption@CipherShed@@QAE@XZ:PROC	; CipherShed::BootEncryption::~BootEncryption
; Function compile flags: /Ogtpy
;	COMDAT ??_GBootEncryption@CipherShed@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GBootEncryption@CipherShed@@QAEPAXI@Z PROC		; CipherShed::BootEncryption::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@6
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@6:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GBootEncryption@CipherShed@@QAEPAXI@Z ENDP		; CipherShed::BootEncryption::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_VolumeSelected
EXTRN	__imp__GetWindowTextLengthA@4:PROC
EXTRN	__imp__GetDlgItem@8:PROC
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
;	COMDAT _VolumeSelected
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_VolumeSelected PROC					; COMDAT

; 359  : 	return (GetWindowTextLengthA(GetDlgItem (hwndDlg, IDC_VOLUME)) > 0);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _hwndDlg$[esp-4]
  00004	68 0a 04 00 00	 push	 1034			; 0000040aH
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00010	50		 push	 eax
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthA@4
  00017	33 c9		 xor	 ecx, ecx
  00019	85 c0		 test	 eax, eax
  0001b	0f 9f c1	 setg	 cl
  0001e	8b c1		 mov	 eax, ecx

; 360  : }

  00020	c3		 ret	 0
_VolumeSelected ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@JMGBPMDD@HotkeyCodeCloseSecurityTokenSess@ ; `string'
PUBLIC	??_C@_0CE@HGCCLLKG@HotkeyModCloseSecurityTokenSessi@ ; `string'
PUBLIC	??_C@_0BN@CHLGHFOA@HotkeyCodeShowHideMainWindow?$AA@ ; `string'
PUBLIC	??_C@_0BM@LONPOCBB@HotkeyModShowHideMainWindow?$AA@ ; `string'
PUBLIC	??_C@_0BP@HCDOBOOJ@HotkeyCodeMountFavoriteVolumes?$AA@ ; `string'
PUBLIC	??_C@_0BO@BBPCFBJL@HotkeyModMountFavoriteVolumes?$AA@ ; `string'
PUBLIC	??_C@_0CD@NAGGLIOF@HotkeyCodeForceDismountAllWipeEx@ ; `string'
PUBLIC	??_C@_0CC@NJGCLCKP@HotkeyModForceDismountAllWipeExi@ ; `string'
PUBLIC	??_C@_0BP@GBIKFBPN@HotkeyCodeForceDismountAllWipe?$AA@ ; `string'
PUBLIC	??_C@_0BO@CEGBOIP@HotkeyModForceDismountAllWipe?$AA@ ; `string'
PUBLIC	??_C@_0BK@CFAKNANL@HotkeyCodeDismountAllWipe?$AA@ ; `string'
PUBLIC	??_C@_0BJ@DMJNNPJL@HotkeyModDismountAllWipe?$AA@ ; `string'
PUBLIC	??_C@_0BE@NNJKBANE@HotkeyCodeWipeCache?$AA@	; `string'
PUBLIC	??_C@_0BD@PFLDJHEM@HotkeyModWipeCache?$AA@	; `string'
PUBLIC	??_C@_0BG@FAJJGDON@HotkeyCodeDismountAll?$AA@	; `string'
PUBLIC	??_C@_0BF@JKNNFNFF@HotkeyModDismountAll?$AA@	; `string'
PUBLIC	??_C@_0BL@HFFNPBG@HotkeyCodeAutoMountDevices?$AA@ ; `string'
PUBLIC	??_C@_0BK@HBJAAJIJ@HotkeyModAutoMountDevices?$AA@ ; `string'
PUBLIC	??_C@_0BO@GGCIJNCK@DisplayMsgBoxOnHotkeyDismount?$AA@ ; `string'
PUBLIC	??_C@_0BP@BFHJPAFJ@PlaySoundOnHotkeyMountDismount?$AA@ ; `string'
PUBLIC	??_C@_0BF@MIMCAHPI@SecurityTokenLibrary?$AA@	; `string'
PUBLIC	??_C@_0BC@JNFOKCJG@LastSelectedDrive?$AA@	; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0CA@JDEDMHHP@HiddenSystemLeakProtNotifStatus?$AA@ ; `string'
PUBLIC	??_C@_0BM@PPMGLKNI@DisableSystemCrashDetection?$AA@ ; `string'
PUBLIC	??_C@_0CF@EFIMMBIH@CloseSecurityTokenSessionsAfterM@ ; `string'
PUBLIC	??_C@_0BF@NMKCILAI@MountVolumesReadOnly?$AA@	; `string'
PUBLIC	??_C@_0BG@BIDCCDPC@MountVolumesRemovable?$AA@	; `string'
PUBLIC	??_C@_0BD@LGMAGJMG@PreserveTimestamps?$AA@	; `string'
PUBLIC	??_C@_0M@LMLBNLIJ@UseKeyfiles?$AA@		; `string'
PUBLIC	??_C@_0BM@GHIJBHNC@HiddenSectorDetectionStatus?$AA@ ; `string'
PUBLIC	??_C@_0BC@JKHHAAAB@MaxVolumeIdleTime?$AA@	; `string'
PUBLIC	??_C@_0BC@EDMFNFCN@ForceAutoDismount?$AA@	; `string'
PUBLIC	??_C@_0BG@MFJBKGJC@DismountOnScreenSaver?$AA@	; `string'
PUBLIC	??_C@_0BG@EJBOHCEJ@DismountOnPowerSaving?$AA@	; `string'
PUBLIC	??_C@_0BB@JBNDKFIM@DismountOnLogOff?$AA@	; `string'
PUBLIC	??_C@_0BP@GDDJCJHL@CloseBackgroundTaskOnNoVolumes?$AA@ ; `string'
PUBLIC	??_C@_0BF@KJGFKHOF@EnableBackgroundTask?$AA@	; `string'
PUBLIC	??_C@_0BG@IDCDKCEI@MountFavoritesOnLogon?$AA@	; `string'
PUBLIC	??_C@_0BE@MJJJGJOJ@MountDevicesOnLogon?$AA@	; `string'
PUBLIC	??_C@_0N@PLOGBODB@StartOnLogon?$AA@		; `string'
PUBLIC	??_C@_0BI@FALOPCPE@WipeCacheOnAutoDismount?$AA@	; `string'
PUBLIC	??_C@_0BI@BNIOMO@WipePasswordCacheOnExit?$AA@	; `string'
PUBLIC	??_C@_0P@NEHAKGAO@CachePasswords?$AA@		; `string'
PUBLIC	??_C@_0BC@CGLEBHPJ@SaveVolumeHistory?$AA@	; `string'
PUBLIC	??_C@_0CF@KIMFPDKC@UseDifferentTrayIconIfVolumesMou@ ; `string'
PUBLIC	??_C@_0BN@JJNCGBDA@OpenExplorerWindowAfterMount?$AA@ ; `string'
PUBLIC	_LoadSettings
EXTRN	__imp__SetWindowTextA@8:PROC
EXTRN	_LoadCombo:PROC
EXTRN	_Hotkeys:BYTE
EXTRN	_InitSecurityTokenLibrary:PROC
EXTRN	_SecurityTokenLibraryPath:BYTE
EXTRN	_ConfigReadString:PROC
EXTRN	_IsHiddenOSRunning:PROC
EXTRN	_bPreserveTimestamp:DWORD
EXTRN	_defaultKeyFilesParam:QWORD
EXTRN	_HiddenSectorDetectionStatus:DWORD
EXTRN	_IsAdmin:PROC
EXTRN	_IsServerOS:PROC
EXTRN	_bMountFavoritesOnLogon:DWORD
EXTRN	_bMountDevicesOnLogon:DWORD
EXTRN	_bStartOnLogon:DWORD
EXTRN	_bHistory:DWORD
EXTRN	_ConfigReadInt:PROC
EXTRN	_free:PROC
EXTRN	_ConfigBuffer:DWORD
EXTRN	_bInPlaceEncNonSysPending:DWORD
EXTRN	_LoadNonSysInPlaceEncSettings:PROC
EXTRN	_LoadSysEncSettings:PROC
EXTRN	_EnableHwEncryption:PROC
EXTRN	_ReadDriverConfigurationFlags:PROC
_BSS	SEGMENT
_CmdLineVolumeSpecified DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0CF@JMGBPMDD@HotkeyCodeCloseSecurityTokenSess@
CONST	SEGMENT
??_C@_0CF@JMGBPMDD@HotkeyCodeCloseSecurityTokenSess@ DB 'HotkeyCodeCloseS'
	DB	'ecurityTokenSessions', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HGCCLLKG@HotkeyModCloseSecurityTokenSessi@
CONST	SEGMENT
??_C@_0CE@HGCCLLKG@HotkeyModCloseSecurityTokenSessi@ DB 'HotkeyModCloseSe'
	DB	'curityTokenSessions', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CHLGHFOA@HotkeyCodeShowHideMainWindow?$AA@
CONST	SEGMENT
??_C@_0BN@CHLGHFOA@HotkeyCodeShowHideMainWindow?$AA@ DB 'HotkeyCodeShowHi'
	DB	'deMainWindow', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LONPOCBB@HotkeyModShowHideMainWindow?$AA@
CONST	SEGMENT
??_C@_0BM@LONPOCBB@HotkeyModShowHideMainWindow?$AA@ DB 'HotkeyModShowHide'
	DB	'MainWindow', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HCDOBOOJ@HotkeyCodeMountFavoriteVolumes?$AA@
CONST	SEGMENT
??_C@_0BP@HCDOBOOJ@HotkeyCodeMountFavoriteVolumes?$AA@ DB 'HotkeyCodeMoun'
	DB	'tFavoriteVolumes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BBPCFBJL@HotkeyModMountFavoriteVolumes?$AA@
CONST	SEGMENT
??_C@_0BO@BBPCFBJL@HotkeyModMountFavoriteVolumes?$AA@ DB 'HotkeyModMountF'
	DB	'avoriteVolumes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@NAGGLIOF@HotkeyCodeForceDismountAllWipeEx@
CONST	SEGMENT
??_C@_0CD@NAGGLIOF@HotkeyCodeForceDismountAllWipeEx@ DB 'HotkeyCodeForceD'
	DB	'ismountAllWipeExit', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NJGCLCKP@HotkeyModForceDismountAllWipeExi@
CONST	SEGMENT
??_C@_0CC@NJGCLCKP@HotkeyModForceDismountAllWipeExi@ DB 'HotkeyModForceDi'
	DB	'smountAllWipeExit', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GBIKFBPN@HotkeyCodeForceDismountAllWipe?$AA@
CONST	SEGMENT
??_C@_0BP@GBIKFBPN@HotkeyCodeForceDismountAllWipe?$AA@ DB 'HotkeyCodeForc'
	DB	'eDismountAllWipe', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CEGBOIP@HotkeyModForceDismountAllWipe?$AA@
CONST	SEGMENT
??_C@_0BO@CEGBOIP@HotkeyModForceDismountAllWipe?$AA@ DB 'HotkeyModForceDi'
	DB	'smountAllWipe', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CFAKNANL@HotkeyCodeDismountAllWipe?$AA@
CONST	SEGMENT
??_C@_0BK@CFAKNANL@HotkeyCodeDismountAllWipe?$AA@ DB 'HotkeyCodeDismountA'
	DB	'llWipe', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DMJNNPJL@HotkeyModDismountAllWipe?$AA@
CONST	SEGMENT
??_C@_0BJ@DMJNNPJL@HotkeyModDismountAllWipe?$AA@ DB 'HotkeyModDismountAll'
	DB	'Wipe', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NNJKBANE@HotkeyCodeWipeCache?$AA@
CONST	SEGMENT
??_C@_0BE@NNJKBANE@HotkeyCodeWipeCache?$AA@ DB 'HotkeyCodeWipeCache', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PFLDJHEM@HotkeyModWipeCache?$AA@
CONST	SEGMENT
??_C@_0BD@PFLDJHEM@HotkeyModWipeCache?$AA@ DB 'HotkeyModWipeCache', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FAJJGDON@HotkeyCodeDismountAll?$AA@
CONST	SEGMENT
??_C@_0BG@FAJJGDON@HotkeyCodeDismountAll?$AA@ DB 'HotkeyCodeDismountAll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JKNNFNFF@HotkeyModDismountAll?$AA@
CONST	SEGMENT
??_C@_0BF@JKNNFNFF@HotkeyModDismountAll?$AA@ DB 'HotkeyModDismountAll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HFFNPBG@HotkeyCodeAutoMountDevices?$AA@
CONST	SEGMENT
??_C@_0BL@HFFNPBG@HotkeyCodeAutoMountDevices?$AA@ DB 'HotkeyCodeAutoMount'
	DB	'Devices', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HBJAAJIJ@HotkeyModAutoMountDevices?$AA@
CONST	SEGMENT
??_C@_0BK@HBJAAJIJ@HotkeyModAutoMountDevices?$AA@ DB 'HotkeyModAutoMountD'
	DB	'evices', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GGCIJNCK@DisplayMsgBoxOnHotkeyDismount?$AA@
CONST	SEGMENT
??_C@_0BO@GGCIJNCK@DisplayMsgBoxOnHotkeyDismount?$AA@ DB 'DisplayMsgBoxOn'
	DB	'HotkeyDismount', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BFHJPAFJ@PlaySoundOnHotkeyMountDismount?$AA@
CONST	SEGMENT
??_C@_0BP@BFHJPAFJ@PlaySoundOnHotkeyMountDismount?$AA@ DB 'PlaySoundOnHot'
	DB	'keyMountDismount', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MIMCAHPI@SecurityTokenLibrary?$AA@
CONST	SEGMENT
??_C@_0BF@MIMCAHPI@SecurityTokenLibrary?$AA@ DB 'SecurityTokenLibrary', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JNFOKCJG@LastSelectedDrive?$AA@
CONST	SEGMENT
??_C@_0BC@JNFOKCJG@LastSelectedDrive?$AA@ DB 'LastSelectedDrive', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JDEDMHHP@HiddenSystemLeakProtNotifStatus?$AA@
CONST	SEGMENT
??_C@_0CA@JDEDMHHP@HiddenSystemLeakProtNotifStatus?$AA@ DB 'HiddenSystemL'
	DB	'eakProtNotifStatus', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PPMGLKNI@DisableSystemCrashDetection?$AA@
CONST	SEGMENT
??_C@_0BM@PPMGLKNI@DisableSystemCrashDetection?$AA@ DB 'DisableSystemCras'
	DB	'hDetection', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@EFIMMBIH@CloseSecurityTokenSessionsAfterM@
CONST	SEGMENT
??_C@_0CF@EFIMMBIH@CloseSecurityTokenSessionsAfterM@ DB 'CloseSecurityTok'
	DB	'enSessionsAfterMount', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NMKCILAI@MountVolumesReadOnly?$AA@
CONST	SEGMENT
??_C@_0BF@NMKCILAI@MountVolumesReadOnly?$AA@ DB 'MountVolumesReadOnly', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BIDCCDPC@MountVolumesRemovable?$AA@
CONST	SEGMENT
??_C@_0BG@BIDCCDPC@MountVolumesRemovable?$AA@ DB 'MountVolumesRemovable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LGMAGJMG@PreserveTimestamps?$AA@
CONST	SEGMENT
??_C@_0BD@LGMAGJMG@PreserveTimestamps?$AA@ DB 'PreserveTimestamps', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LMLBNLIJ@UseKeyfiles?$AA@
CONST	SEGMENT
??_C@_0M@LMLBNLIJ@UseKeyfiles?$AA@ DB 'UseKeyfiles', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GHIJBHNC@HiddenSectorDetectionStatus?$AA@
CONST	SEGMENT
??_C@_0BM@GHIJBHNC@HiddenSectorDetectionStatus?$AA@ DB 'HiddenSectorDetec'
	DB	'tionStatus', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JKHHAAAB@MaxVolumeIdleTime?$AA@
CONST	SEGMENT
??_C@_0BC@JKHHAAAB@MaxVolumeIdleTime?$AA@ DB 'MaxVolumeIdleTime', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EDMFNFCN@ForceAutoDismount?$AA@
CONST	SEGMENT
??_C@_0BC@EDMFNFCN@ForceAutoDismount?$AA@ DB 'ForceAutoDismount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MFJBKGJC@DismountOnScreenSaver?$AA@
CONST	SEGMENT
??_C@_0BG@MFJBKGJC@DismountOnScreenSaver?$AA@ DB 'DismountOnScreenSaver', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EJBOHCEJ@DismountOnPowerSaving?$AA@
CONST	SEGMENT
??_C@_0BG@EJBOHCEJ@DismountOnPowerSaving?$AA@ DB 'DismountOnPowerSaving', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JBNDKFIM@DismountOnLogOff?$AA@
CONST	SEGMENT
??_C@_0BB@JBNDKFIM@DismountOnLogOff?$AA@ DB 'DismountOnLogOff', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GDDJCJHL@CloseBackgroundTaskOnNoVolumes?$AA@
CONST	SEGMENT
??_C@_0BP@GDDJCJHL@CloseBackgroundTaskOnNoVolumes?$AA@ DB 'CloseBackgroun'
	DB	'dTaskOnNoVolumes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KJGFKHOF@EnableBackgroundTask?$AA@
CONST	SEGMENT
??_C@_0BF@KJGFKHOF@EnableBackgroundTask?$AA@ DB 'EnableBackgroundTask', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IDCDKCEI@MountFavoritesOnLogon?$AA@
CONST	SEGMENT
??_C@_0BG@IDCDKCEI@MountFavoritesOnLogon?$AA@ DB 'MountFavoritesOnLogon', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MJJJGJOJ@MountDevicesOnLogon?$AA@
CONST	SEGMENT
??_C@_0BE@MJJJGJOJ@MountDevicesOnLogon?$AA@ DB 'MountDevicesOnLogon', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PLOGBODB@StartOnLogon?$AA@
CONST	SEGMENT
??_C@_0N@PLOGBODB@StartOnLogon?$AA@ DB 'StartOnLogon', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FALOPCPE@WipeCacheOnAutoDismount?$AA@
CONST	SEGMENT
??_C@_0BI@FALOPCPE@WipeCacheOnAutoDismount?$AA@ DB 'WipeCacheOnAutoDismou'
	DB	'nt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BNIOMO@WipePasswordCacheOnExit?$AA@
CONST	SEGMENT
??_C@_0BI@BNIOMO@WipePasswordCacheOnExit?$AA@ DB 'WipePasswordCacheOnExit'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NEHAKGAO@CachePasswords?$AA@
CONST	SEGMENT
??_C@_0P@NEHAKGAO@CachePasswords?$AA@ DB 'CachePasswords', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CGLEBHPJ@SaveVolumeHistory?$AA@
CONST	SEGMENT
??_C@_0BC@CGLEBHPJ@SaveVolumeHistory?$AA@ DB 'SaveVolumeHistory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KIMFPDKC@UseDifferentTrayIconIfVolumesMou@
CONST	SEGMENT
??_C@_0CF@KIMFPDKC@UseDifferentTrayIconIfVolumesMou@ DB 'UseDifferentTray'
	DB	'IconIfVolumesMounted', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JJNCGBDA@OpenExplorerWindowAfterMount?$AA@
CONST	SEGMENT
??_C@_0BN@JJNCGBDA@OpenExplorerWindowAfterMount?$AA@ DB 'OpenExplorerWind'
	DB	'owAfterMount', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _LoadSettings
_TEXT	SEGMENT
_savedWipeAlgorithm$ = -4				; size = 4
_hwndDlg$ = 8						; size = 4
_LoadSettings PROC					; COMDAT

; 396  : {

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	55		 push	 ebp
  00003	56		 push	 esi

; 397  : 	EnableHwEncryption ((ReadDriverConfigurationFlags() & TC_DRIVER_CONFIG_DISABLE_HARDWARE_ENCRYPTION) ? FALSE : TRUE);

  00004	e8 00 00 00 00	 call	 _ReadDriverConfigurationFlags
  00009	c1 e8 03	 shr	 eax, 3
  0000c	f7 d0		 not	 eax
  0000e	83 e0 01	 and	 eax, 1
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _EnableHwEncryption

; 398  : 
; 399  : 	WipeAlgorithmId savedWipeAlgorithm = TC_WIPE_NONE;
; 400  : 
; 401  : 	LoadSysEncSettings (hwndDlg);

  00017	8b 6c 24 18	 mov	 ebp, DWORD PTR _hwndDlg$[esp+16]
  0001b	33 db		 xor	 ebx, ebx
  0001d	55		 push	 ebp
  0001e	89 5c 24 14	 mov	 DWORD PTR _savedWipeAlgorithm$[esp+24], ebx
  00022	e8 00 00 00 00	 call	 _LoadSysEncSettings

; 402  : 
; 403  : 	if (LoadNonSysInPlaceEncSettings (&savedWipeAlgorithm) != 0)

  00027	8d 44 24 14	 lea	 eax, DWORD PTR _savedWipeAlgorithm$[esp+24]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _LoadNonSysInPlaceEncSettings
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	85 c0		 test	 eax, eax
  00036	74 0a		 je	 SHORT $LN7@LoadSettin

; 404  : 		bInPlaceEncNonSysPending = TRUE;

  00038	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSysPending, 1
$LN7@LoadSettin:

; 405  : 
; 406  : 	// If the config file has already been loaded during this session
; 407  : 	if (ConfigBuffer != NULL)

  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR _ConfigBuffer
  00047	3b c3		 cmp	 eax, ebx
  00049	74 0f		 je	 SHORT $LN6@LoadSettin

; 408  : 	{
; 409  : 		free (ConfigBuffer);

  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 _free
  00051	83 c4 04	 add	 esp, 4

; 410  : 		ConfigBuffer = NULL;

  00054	89 1d 00 00 00
	00		 mov	 DWORD PTR _ConfigBuffer, ebx
$LN6@LoadSettin:

; 411  : 	}
; 412  : 
; 413  : 	// Options
; 414  : 	bExplore =						ConfigReadInt ("OpenExplorerWindowAfterMount", FALSE);

  0005a	53		 push	 ebx
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JJNCGBDA@OpenExplorerWindowAfterMount?$AA@
  00060	e8 00 00 00 00	 call	 _ConfigReadInt

; 415  : 	bUseDifferentTrayIconIfVolMounted =	ConfigReadInt ("UseDifferentTrayIconIfVolumesMounted", TRUE);

  00065	6a 01		 push	 1
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@KIMFPDKC@UseDifferentTrayIconIfVolumesMou@
  0006c	a3 00 00 00 00	 mov	 DWORD PTR _bExplore, eax
  00071	e8 00 00 00 00	 call	 _ConfigReadInt

; 416  : 
; 417  : 	bHistory =						ConfigReadInt ("SaveVolumeHistory", FALSE);

  00076	53		 push	 ebx
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CGLEBHPJ@SaveVolumeHistory?$AA@
  0007c	a3 00 00 00 00	 mov	 DWORD PTR ?bUseDifferentTrayIconIfVolMounted@@3HA, eax ; bUseDifferentTrayIconIfVolMounted
  00081	e8 00 00 00 00	 call	 _ConfigReadInt

; 418  : 
; 419  : 	bCacheInDriverDefault = bCacheInDriver = ConfigReadInt ("CachePasswords", FALSE);

  00086	53		 push	 ebx
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NEHAKGAO@CachePasswords?$AA@
  0008c	a3 00 00 00 00	 mov	 DWORD PTR _bHistory, eax
  00091	e8 00 00 00 00	 call	 _ConfigReadInt

; 420  : 	bWipeCacheOnExit =				ConfigReadInt ("WipePasswordCacheOnExit", FALSE);

  00096	53		 push	 ebx
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BNIOMO@WipePasswordCacheOnExit?$AA@
  0009c	a3 00 00 00 00	 mov	 DWORD PTR ?bCacheInDriver@@3HA, eax ; bCacheInDriver
  000a1	a3 00 00 00 00	 mov	 DWORD PTR ?bCacheInDriverDefault@@3HA, eax ; bCacheInDriverDefault
  000a6	e8 00 00 00 00	 call	 _ConfigReadInt

; 421  : 	bWipeCacheOnAutoDismount =		ConfigReadInt ("WipeCacheOnAutoDismount", TRUE);

  000ab	6a 01		 push	 1
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FALOPCPE@WipeCacheOnAutoDismount?$AA@
  000b2	a3 00 00 00 00	 mov	 DWORD PTR ?bWipeCacheOnExit@@3HA, eax ; bWipeCacheOnExit
  000b7	e8 00 00 00 00	 call	 _ConfigReadInt

; 422  : 
; 423  : 	bStartOnLogon =					ConfigReadInt ("StartOnLogon", FALSE);

  000bc	53		 push	 ebx
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PLOGBODB@StartOnLogon?$AA@
  000c2	a3 00 00 00 00	 mov	 DWORD PTR ?bWipeCacheOnAutoDismount@@3HA, eax ; bWipeCacheOnAutoDismount
  000c7	e8 00 00 00 00	 call	 _ConfigReadInt

; 424  : 	bMountDevicesOnLogon =			ConfigReadInt ("MountDevicesOnLogon", FALSE);

  000cc	53		 push	 ebx
  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MJJJGJOJ@MountDevicesOnLogon?$AA@
  000d2	a3 00 00 00 00	 mov	 DWORD PTR _bStartOnLogon, eax
  000d7	e8 00 00 00 00	 call	 _ConfigReadInt
  000dc	83 c4 40	 add	 esp, 64			; 00000040H

; 425  : 	bMountFavoritesOnLogon =		ConfigReadInt ("MountFavoritesOnLogon", FALSE);

  000df	53		 push	 ebx
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@IDCDKCEI@MountFavoritesOnLogon?$AA@
  000e5	a3 00 00 00 00	 mov	 DWORD PTR _bMountDevicesOnLogon, eax
  000ea	e8 00 00 00 00	 call	 _ConfigReadInt

; 426  : 
; 427  : 	bEnableBkgTask =				ConfigReadInt ("EnableBackgroundTask", TRUE);

  000ef	6a 01		 push	 1
  000f1	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KJGFKHOF@EnableBackgroundTask?$AA@
  000f6	a3 00 00 00 00	 mov	 DWORD PTR _bMountFavoritesOnLogon, eax
  000fb	e8 00 00 00 00	 call	 _ConfigReadInt

; 428  : 	bCloseBkgTaskWhenNoVolumes =	ConfigReadInt ("CloseBackgroundTaskOnNoVolumes", FALSE);

  00100	53		 push	 ebx
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@GDDJCJHL@CloseBackgroundTaskOnNoVolumes?$AA@
  00106	a3 00 00 00 00	 mov	 DWORD PTR _bEnableBkgTask, eax
  0010b	e8 00 00 00 00	 call	 _ConfigReadInt
  00110	83 c4 18	 add	 esp, 24			; 00000018H
  00113	a3 00 00 00 00	 mov	 DWORD PTR _bCloseBkgTaskWhenNoVolumes, eax

; 429  : 
; 430  : 	bDismountOnLogOff =				ConfigReadInt ("DismountOnLogOff", !(IsServerOS() && IsAdmin()));

  00118	e8 00 00 00 00	 call	 _IsServerOS
  0011d	85 c0		 test	 eax, eax
  0011f	74 0d		 je	 SHORT $LN10@LoadSettin
  00121	e8 00 00 00 00	 call	 _IsAdmin
  00126	85 c0		 test	 eax, eax
  00128	74 04		 je	 SHORT $LN10@LoadSettin
  0012a	33 c0		 xor	 eax, eax
  0012c	eb 05		 jmp	 SHORT $LN11@LoadSettin
$LN10@LoadSettin:
  0012e	b8 01 00 00 00	 mov	 eax, 1
$LN11@LoadSettin:
  00133	57		 push	 edi
  00134	50		 push	 eax
  00135	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JBNDKFIM@DismountOnLogOff?$AA@
  0013a	e8 00 00 00 00	 call	 _ConfigReadInt

; 431  : 	bDismountOnPowerSaving =		ConfigReadInt ("DismountOnPowerSaving", FALSE);

  0013f	53		 push	 ebx
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EJBOHCEJ@DismountOnPowerSaving?$AA@
  00145	a3 00 00 00 00	 mov	 DWORD PTR ?bDismountOnLogOff@@3HA, eax ; bDismountOnLogOff
  0014a	e8 00 00 00 00	 call	 _ConfigReadInt

; 432  : 	bDismountOnScreenSaver =		ConfigReadInt ("DismountOnScreenSaver", FALSE);

  0014f	53		 push	 ebx
  00150	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MFJBKGJC@DismountOnScreenSaver?$AA@
  00155	a3 00 00 00 00	 mov	 DWORD PTR ?bDismountOnPowerSaving@@3HA, eax ; bDismountOnPowerSaving
  0015a	e8 00 00 00 00	 call	 _ConfigReadInt

; 433  : 	bForceAutoDismount =			ConfigReadInt ("ForceAutoDismount", TRUE);

  0015f	6a 01		 push	 1
  00161	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EDMFNFCN@ForceAutoDismount?$AA@
  00166	a3 00 00 00 00	 mov	 DWORD PTR ?bDismountOnScreenSaver@@3HA, eax ; bDismountOnScreenSaver
  0016b	e8 00 00 00 00	 call	 _ConfigReadInt

; 434  : 	MaxVolumeIdleTime =				ConfigReadInt ("MaxVolumeIdleTime", -60);

  00170	6a c4		 push	 -60			; ffffffc4H
  00172	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JKHHAAAB@MaxVolumeIdleTime?$AA@
  00177	a3 00 00 00 00	 mov	 DWORD PTR ?bForceAutoDismount@@3HA, eax ; bForceAutoDismount
  0017c	e8 00 00 00 00	 call	 _ConfigReadInt

; 435  : 
; 436  : 	HiddenSectorDetectionStatus =	ConfigReadInt ("HiddenSectorDetectionStatus", 0);

  00181	53		 push	 ebx
  00182	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@GHIJBHNC@HiddenSectorDetectionStatus?$AA@
  00187	a3 00 00 00 00	 mov	 DWORD PTR ?MaxVolumeIdleTime@@3HA, eax ; MaxVolumeIdleTime
  0018c	e8 00 00 00 00	 call	 _ConfigReadInt

; 437  : 
; 438  : 	defaultKeyFilesParam.EnableKeyFiles = ConfigReadInt ("UseKeyfiles", FALSE);

  00191	53		 push	 ebx
  00192	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LMLBNLIJ@UseKeyfiles?$AA@
  00197	a3 00 00 00 00	 mov	 DWORD PTR _HiddenSectorDetectionStatus, eax
  0019c	e8 00 00 00 00	 call	 _ConfigReadInt

; 439  : 
; 440  : 	bPreserveTimestamp = defaultMountOptions.PreserveTimestamp = ConfigReadInt ("PreserveTimestamps", TRUE);

  001a1	6a 01		 push	 1
  001a3	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LGMAGJMG@PreserveTimestamps?$AA@
  001a8	a3 00 00 00 00	 mov	 DWORD PTR _defaultKeyFilesParam, eax
  001ad	e8 00 00 00 00	 call	 _ConfigReadInt
  001b2	83 c4 40	 add	 esp, 64			; 00000040H

; 441  : 	defaultMountOptions.Removable =	ConfigReadInt ("MountVolumesRemovable", FALSE);

  001b5	53		 push	 ebx
  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BIDCCDPC@MountVolumesRemovable?$AA@
  001bb	a3 0c 00 00 00	 mov	 DWORD PTR ?defaultMountOptions@@3UMountOptions@@A+12, eax
  001c0	a3 00 00 00 00	 mov	 DWORD PTR _bPreserveTimestamp, eax
  001c5	e8 00 00 00 00	 call	 _ConfigReadInt

; 442  : 	defaultMountOptions.ReadOnly =	ConfigReadInt ("MountVolumesReadOnly", FALSE);

  001ca	53		 push	 ebx
  001cb	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@NMKCILAI@MountVolumesReadOnly?$AA@
  001d0	a3 04 00 00 00	 mov	 DWORD PTR ?defaultMountOptions@@3UMountOptions@@A+4, eax
  001d5	e8 00 00 00 00	 call	 _ConfigReadInt

; 443  : 	defaultMountOptions.ProtectHiddenVolume = FALSE;
; 444  : 	defaultMountOptions.PartitionInInactiveSysEncScope = FALSE;
; 445  : 	defaultMountOptions.RecoveryMode = FALSE;
; 446  : 	defaultMountOptions.UseBackupHeader =  FALSE;
; 447  : 
; 448  : 	mountOptions = defaultMountOptions;
; 449  : 
; 450  : 	CloseSecurityTokenSessionsAfterMount = ConfigReadInt ("CloseSecurityTokenSessionsAfterMount", 0);

  001da	53		 push	 ebx
  001db	a3 00 00 00 00	 mov	 DWORD PTR ?defaultMountOptions@@3UMountOptions@@A, eax
  001e0	89 1d 08 00 00
	00		 mov	 DWORD PTR ?defaultMountOptions@@3UMountOptions@@A+8, ebx
  001e6	89 1d 10 00 00
	00		 mov	 DWORD PTR ?defaultMountOptions@@3UMountOptions@@A+16, ebx
  001ec	89 1d 60 00 00
	00		 mov	 DWORD PTR ?defaultMountOptions@@3UMountOptions@@A+96, ebx
  001f2	89 1d 5c 00 00
	00		 mov	 DWORD PTR ?defaultMountOptions@@3UMountOptions@@A+92, ebx
  001f8	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  001fd	be 00 00 00 00	 mov	 esi, OFFSET ?defaultMountOptions@@3UMountOptions@@A ; defaultMountOptions
  00202	bf 00 00 00 00	 mov	 edi, OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  00207	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@EFIMMBIH@CloseSecurityTokenSessionsAfterM@
  0020c	f3 a5		 rep movsd
  0020e	e8 00 00 00 00	 call	 _ConfigReadInt

; 451  : 	DisableSystemCrashDetection = ConfigReadInt ("DisableSystemCrashDetection", FALSE);

  00213	53		 push	 ebx
  00214	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PPMGLKNI@DisableSystemCrashDetection?$AA@
  00219	a3 00 00 00 00	 mov	 DWORD PTR ?CloseSecurityTokenSessionsAfterMount@@3HA, eax ; CloseSecurityTokenSessionsAfterMount
  0021e	e8 00 00 00 00	 call	 _ConfigReadInt
  00223	83 c4 20	 add	 esp, 32			; 00000020H
  00226	a3 00 00 00 00	 mov	 DWORD PTR ?DisableSystemCrashDetection@@3HA, eax ; DisableSystemCrashDetection

; 452  : 
; 453  : 	if (IsHiddenOSRunning())

  0022b	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00230	5f		 pop	 edi
  00231	85 c0		 test	 eax, eax
  00233	74 13		 je	 SHORT $LN5@LoadSettin

; 454  : 		HiddenSysLeakProtectionNotificationStatus =	ConfigReadInt ("HiddenSystemLeakProtNotifStatus", TC_HIDDEN_OS_READ_ONLY_NOTIF_MODE_NONE);

  00235	53		 push	 ebx
  00236	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JDEDMHHP@HiddenSystemLeakProtNotifStatus?$AA@
  0023b	e8 00 00 00 00	 call	 _ConfigReadInt
  00240	83 c4 08	 add	 esp, 8
  00243	a3 00 00 00 00	 mov	 DWORD PTR ?HiddenSysLeakProtectionNotificationStatus@@3HA, eax ; HiddenSysLeakProtectionNotificationStatus
$LN5@LoadSettin:

; 455  : 
; 456  : 	// Drive letter - command line arg overrides registry
; 457  : 	if (szDriveLetter[0] == 0)

  00248	38 1d 00 00 00
	00		 cmp	 BYTE PTR ?szDriveLetter@@3PADA, bl
  0024e	75 19		 jne	 SHORT $LN4@LoadSettin

; 458  : 		ConfigReadString ("LastSelectedDrive", "", szDriveLetter, sizeof (szDriveLetter));

  00250	6a 03		 push	 3
  00252	68 00 00 00 00	 push	 OFFSET ?szDriveLetter@@3PADA ; szDriveLetter
  00257	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0025c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JNFOKCJG@LastSelectedDrive?$AA@
  00261	e8 00 00 00 00	 call	 _ConfigReadString
  00266	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@LoadSettin:

; 459  : 
; 460  : 	ConfigReadString ("SecurityTokenLibrary", "", SecurityTokenLibraryPath, sizeof (SecurityTokenLibraryPath) - 1);

  00269	68 03 01 00 00	 push	 259			; 00000103H
  0026e	68 00 00 00 00	 push	 OFFSET _SecurityTokenLibraryPath
  00273	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00278	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MIMCAHPI@SecurityTokenLibrary?$AA@
  0027d	e8 00 00 00 00	 call	 _ConfigReadString
  00282	83 c4 10	 add	 esp, 16			; 00000010H

; 461  : 	if (SecurityTokenLibraryPath[0])

  00285	38 1d 00 00 00
	00		 cmp	 BYTE PTR _SecurityTokenLibraryPath, bl
  0028b	74 05		 je	 SHORT $LN3@LoadSettin

; 462  : 		InitSecurityTokenLibrary();

  0028d	e8 00 00 00 00	 call	 _InitSecurityTokenLibrary
$LN3@LoadSettin:

; 463  : 
; 464  : 	// Hotkeys
; 465  : 	bPlaySoundOnSuccessfulHkDismount							= ConfigReadInt ("PlaySoundOnHotkeyMountDismount", TRUE);

  00292	6a 01		 push	 1
  00294	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BFHJPAFJ@PlaySoundOnHotkeyMountDismount?$AA@
  00299	e8 00 00 00 00	 call	 _ConfigReadInt

; 466  : 	bDisplayBalloonOnSuccessfulHkDismount					= ConfigReadInt ("DisplayMsgBoxOnHotkeyDismount", TRUE);

  0029e	6a 01		 push	 1
  002a0	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@GGCIJNCK@DisplayMsgBoxOnHotkeyDismount?$AA@
  002a5	a3 00 00 00 00	 mov	 DWORD PTR _bPlaySoundOnSuccessfulHkDismount, eax
  002aa	e8 00 00 00 00	 call	 _ConfigReadInt

; 467  : 	Hotkeys [HK_AUTOMOUNT_DEVICES].vKeyModifiers					= ConfigReadInt ("HotkeyModAutoMountDevices", 0);

  002af	53		 push	 ebx
  002b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@HBJAAJIJ@HotkeyModAutoMountDevices?$AA@
  002b5	a3 00 00 00 00	 mov	 DWORD PTR _bDisplayBalloonOnSuccessfulHkDismount, eax
  002ba	e8 00 00 00 00	 call	 _ConfigReadInt

; 468  : 	Hotkeys [HK_AUTOMOUNT_DEVICES].vKeyCode							= ConfigReadInt ("HotkeyCodeAutoMountDevices", 0);

  002bf	53		 push	 ebx
  002c0	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HFFNPBG@HotkeyCodeAutoMountDevices?$AA@
  002c5	a3 04 00 00 00	 mov	 DWORD PTR _Hotkeys+4, eax
  002ca	e8 00 00 00 00	 call	 _ConfigReadInt

; 469  : 	Hotkeys [HK_DISMOUNT_ALL].vKeyModifiers							= ConfigReadInt ("HotkeyModDismountAll", 0);

  002cf	53		 push	 ebx
  002d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JKNNFNFF@HotkeyModDismountAll?$AA@
  002d5	a3 00 00 00 00	 mov	 DWORD PTR _Hotkeys, eax
  002da	e8 00 00 00 00	 call	 _ConfigReadInt

; 470  : 	Hotkeys [HK_DISMOUNT_ALL].vKeyCode								= ConfigReadInt ("HotkeyCodeDismountAll", 0);

  002df	53		 push	 ebx
  002e0	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FAJJGDON@HotkeyCodeDismountAll?$AA@
  002e5	a3 14 00 00 00	 mov	 DWORD PTR _Hotkeys+20, eax
  002ea	e8 00 00 00 00	 call	 _ConfigReadInt

; 471  : 	Hotkeys [HK_WIPE_CACHE].vKeyModifiers							= ConfigReadInt ("HotkeyModWipeCache", 0);

  002ef	53		 push	 ebx
  002f0	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PFLDJHEM@HotkeyModWipeCache?$AA@
  002f5	a3 10 00 00 00	 mov	 DWORD PTR _Hotkeys+16, eax
  002fa	e8 00 00 00 00	 call	 _ConfigReadInt

; 472  : 	Hotkeys [HK_WIPE_CACHE].vKeyCode								= ConfigReadInt ("HotkeyCodeWipeCache", 0);

  002ff	53		 push	 ebx
  00300	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NNJKBANE@HotkeyCodeWipeCache?$AA@
  00305	a3 44 00 00 00	 mov	 DWORD PTR _Hotkeys+68, eax
  0030a	e8 00 00 00 00	 call	 _ConfigReadInt
  0030f	83 c4 40	 add	 esp, 64			; 00000040H

; 473  : 	Hotkeys [HK_DISMOUNT_ALL_AND_WIPE].vKeyModifiers				= ConfigReadInt ("HotkeyModDismountAllWipe", 0);

  00312	53		 push	 ebx
  00313	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DMJNNPJL@HotkeyModDismountAllWipe?$AA@
  00318	a3 40 00 00 00	 mov	 DWORD PTR _Hotkeys+64, eax
  0031d	e8 00 00 00 00	 call	 _ConfigReadInt

; 474  : 	Hotkeys [HK_DISMOUNT_ALL_AND_WIPE].vKeyCode						= ConfigReadInt ("HotkeyCodeDismountAllWipe", 0);

  00322	53		 push	 ebx
  00323	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@CFAKNANL@HotkeyCodeDismountAllWipe?$AA@
  00328	a3 1c 00 00 00	 mov	 DWORD PTR _Hotkeys+28, eax
  0032d	e8 00 00 00 00	 call	 _ConfigReadInt

; 475  : 	Hotkeys [HK_FORCE_DISMOUNT_ALL_AND_WIPE].vKeyModifiers			= ConfigReadInt ("HotkeyModForceDismountAllWipe", 0);

  00332	53		 push	 ebx
  00333	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@CEGBOIP@HotkeyModForceDismountAllWipe?$AA@
  00338	a3 18 00 00 00	 mov	 DWORD PTR _Hotkeys+24, eax
  0033d	e8 00 00 00 00	 call	 _ConfigReadInt

; 476  : 	Hotkeys [HK_FORCE_DISMOUNT_ALL_AND_WIPE].vKeyCode				= ConfigReadInt ("HotkeyCodeForceDismountAllWipe", 0);

  00342	53		 push	 ebx
  00343	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@GBIKFBPN@HotkeyCodeForceDismountAllWipe?$AA@
  00348	a3 24 00 00 00	 mov	 DWORD PTR _Hotkeys+36, eax
  0034d	e8 00 00 00 00	 call	 _ConfigReadInt

; 477  : 	Hotkeys [HK_FORCE_DISMOUNT_ALL_AND_WIPE_AND_EXIT].vKeyModifiers	= ConfigReadInt ("HotkeyModForceDismountAllWipeExit", 0);

  00352	53		 push	 ebx
  00353	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@NJGCLCKP@HotkeyModForceDismountAllWipeExi@
  00358	a3 20 00 00 00	 mov	 DWORD PTR _Hotkeys+32, eax
  0035d	e8 00 00 00 00	 call	 _ConfigReadInt

; 478  : 	Hotkeys [HK_FORCE_DISMOUNT_ALL_AND_WIPE_AND_EXIT].vKeyCode		= ConfigReadInt ("HotkeyCodeForceDismountAllWipeExit", 0);

  00362	53		 push	 ebx
  00363	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@NAGGLIOF@HotkeyCodeForceDismountAllWipeEx@
  00368	a3 2c 00 00 00	 mov	 DWORD PTR _Hotkeys+44, eax
  0036d	e8 00 00 00 00	 call	 _ConfigReadInt

; 479  : 	Hotkeys [HK_MOUNT_FAVORITE_VOLUMES].vKeyModifiers				= ConfigReadInt ("HotkeyModMountFavoriteVolumes", 0);

  00372	53		 push	 ebx
  00373	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@BBPCFBJL@HotkeyModMountFavoriteVolumes?$AA@
  00378	a3 28 00 00 00	 mov	 DWORD PTR _Hotkeys+40, eax
  0037d	e8 00 00 00 00	 call	 _ConfigReadInt

; 480  : 	Hotkeys [HK_MOUNT_FAVORITE_VOLUMES].vKeyCode					= ConfigReadInt ("HotkeyCodeMountFavoriteVolumes", 0);

  00382	53		 push	 ebx
  00383	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@HCDOBOOJ@HotkeyCodeMountFavoriteVolumes?$AA@
  00388	a3 34 00 00 00	 mov	 DWORD PTR _Hotkeys+52, eax
  0038d	e8 00 00 00 00	 call	 _ConfigReadInt
  00392	83 c4 40	 add	 esp, 64			; 00000040H

; 481  : 	Hotkeys [HK_SHOW_HIDE_MAIN_WINDOW].vKeyModifiers				= ConfigReadInt ("HotkeyModShowHideMainWindow", 0);

  00395	53		 push	 ebx
  00396	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@LONPOCBB@HotkeyModShowHideMainWindow?$AA@
  0039b	a3 30 00 00 00	 mov	 DWORD PTR _Hotkeys+48, eax
  003a0	e8 00 00 00 00	 call	 _ConfigReadInt

; 482  : 	Hotkeys [HK_SHOW_HIDE_MAIN_WINDOW].vKeyCode						= ConfigReadInt ("HotkeyCodeShowHideMainWindow", 0);

  003a5	53		 push	 ebx
  003a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CHLGHFOA@HotkeyCodeShowHideMainWindow?$AA@
  003ab	a3 3c 00 00 00	 mov	 DWORD PTR _Hotkeys+60, eax
  003b0	e8 00 00 00 00	 call	 _ConfigReadInt

; 483  : 	Hotkeys [HK_CLOSE_SECURITY_TOKEN_SESSIONS].vKeyModifiers		= ConfigReadInt ("HotkeyModCloseSecurityTokenSessions", 0);

  003b5	53		 push	 ebx
  003b6	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@HGCCLLKG@HotkeyModCloseSecurityTokenSessi@
  003bb	a3 38 00 00 00	 mov	 DWORD PTR _Hotkeys+56, eax
  003c0	e8 00 00 00 00	 call	 _ConfigReadInt

; 484  : 	Hotkeys [HK_CLOSE_SECURITY_TOKEN_SESSIONS].vKeyCode				= ConfigReadInt ("HotkeyCodeCloseSecurityTokenSessions", 0);

  003c5	53		 push	 ebx
  003c6	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JMGBPMDD@HotkeyCodeCloseSecurityTokenSess@
  003cb	a3 0c 00 00 00	 mov	 DWORD PTR _Hotkeys+12, eax
  003d0	e8 00 00 00 00	 call	 _ConfigReadInt
  003d5	83 c4 20	 add	 esp, 32			; 00000020H

; 485  : 
; 486  : 	// History
; 487  : 	if (bHistoryCmdLine != TRUE)

  003d8	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?bHistoryCmdLine@@3HA, 1 ; bHistoryCmdLine
  003df	a3 08 00 00 00	 mov	 DWORD PTR _Hotkeys+8, eax
  003e4	74 33		 je	 SHORT $LN1@LoadSettin

; 488  : 	{
; 489  : 		LoadCombo (GetDlgItem (hwndDlg, IDC_VOLUME));

  003e6	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  003ec	68 0a 04 00 00	 push	 1034			; 0000040aH
  003f1	55		 push	 ebp
  003f2	ff d6		 call	 esi
  003f4	50		 push	 eax
  003f5	e8 00 00 00 00	 call	 _LoadCombo
  003fa	83 c4 04	 add	 esp, 4

; 490  : 		if (CmdLineVolumeSpecified)

  003fd	39 1d 00 00 00
	00		 cmp	 DWORD PTR _CmdLineVolumeSpecified, ebx
  00403	74 14		 je	 SHORT $LN1@LoadSettin

; 491  : 			SetWindowTextA(GetDlgItem (hwndDlg, IDC_VOLUME), szFileName);

  00405	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  0040a	68 0a 04 00 00	 push	 1034			; 0000040aH
  0040f	55		 push	 ebp
  00410	ff d6		 call	 esi
  00412	50		 push	 eax
  00413	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8
$LN1@LoadSettin:
  00419	5e		 pop	 esi
  0041a	5d		 pop	 ebp
  0041b	5b		 pop	 ebx

; 492  : 	}
; 493  : }

  0041c	59		 pop	 ecx
  0041d	c3		 ret	 0
_LoadSettings ENDP
_TEXT	ENDS
PUBLIC	??_R0?AUException@CipherShed@@@8		; CipherShed::Exception `RTTI Type Descriptor'
EXTRN	_MainDlg:DWORD
EXTRN	_SystemEncryptionStatus:DWORD
EXTRN	?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ:PROC ; CipherShed::BootEncryption::GetStatus
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_R0?AUException@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUException@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUException@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?SysEncryptionOrDecryptionRequired@@YAHXZ$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?SysEncryptionOrDecryptionRequired@@YAHXZ$0
__unwindtable$?SysEncryptionOrDecryptionRequired@@YAHXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SysEncryptionOrDecryptionRequired@@YAHXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SysEncryptionOrDecryptionRequired@@YAHXZ$2
__ehfuncinfo$?SysEncryptionOrDecryptionRequired@@YAHXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SysEncryptionOrDecryptionRequired@@YAHXZ
	DD	01H
	DD	FLAT:__tryblocktable$?SysEncryptionOrDecryptionRequired@@YAHXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?SysEncryptionOrDecryptionRequired@@YAHXZ
_TEXT	SEGMENT
$T150386 = -114						; size = 94
_e$135879 = -20						; size = 4
__$EHRec$ = -16						; size = 16
?SysEncryptionOrDecryptionRequired@@YAHXZ PROC		; SysEncryptionOrDecryptionRequired, COMDAT

; 585  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SysEncryptionOrDecryptionRequired@@YAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 586  : 	/* If you update this function, revise SysEncryptionOrDecryptionRequired() in Tcformat.c as well. */
; 587  : 
; 588  : 	try
; 589  : 	{
; 590  : 		BootEncStatus = BootEncObj->GetStatus();

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00031	8d 45 8e	 lea	 eax, DWORD PTR $T150386[ebp]
  00034	50		 push	 eax
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003c	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00041	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00046	8b f0		 mov	 esi, eax
  00048	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  0004d	f3 a5		 rep movsd
  0004f	66 a5		 movsw
$LN11@SysEncrypt:

; 596  : 
; 597  : 	return (SystemEncryptionStatus == SYSENC_STATUS_ENCRYPTING
; 598  : 		|| SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING
; 599  : 		|| 
; 600  : 		(
; 601  : 			BootEncStatus.DriveMounted 
; 602  : 			&& 
; 603  : 			(
; 604  : 				BootEncStatus.ConfiguredEncryptedAreaStart != BootEncStatus.EncryptedAreaStart
; 605  : 				|| BootEncStatus.ConfiguredEncryptedAreaEnd != BootEncStatus.EncryptedAreaEnd
; 606  : 			)
; 607  : 		)
; 608  : 	);

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  00056	3d 90 01 00 00	 cmp	 eax, 400		; 00000190H
  0005b	74 6f		 je	 SHORT $LN4@SysEncrypt
  0005d	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  00062	74 68		 je	 SHORT $LN4@SysEncrypt
  00064	83 3d 06 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, 0
  0006b	74 36		 je	 SHORT $LN6@SysEncrypt
  0006d	a1 1a 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+26
  00072	3b 05 2a 00 00
	00		 cmp	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+42
  00078	75 52		 jne	 SHORT $LN4@SysEncrypt
  0007a	8b 0d 1e 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+30
  00080	3b 0d 2e 00 00
	00		 cmp	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+46
  00086	75 44		 jne	 SHORT $LN4@SysEncrypt
  00088	8b 15 22 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+34
  0008e	3b 15 32 00 00
	00		 cmp	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+50
  00094	75 36		 jne	 SHORT $LN4@SysEncrypt
  00096	a1 26 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+38
  0009b	3b 05 36 00 00
	00		 cmp	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+54
  000a1	75 29		 jne	 SHORT $LN4@SysEncrypt
$LN6@SysEncrypt:
  000a3	33 c0		 xor	 eax, eax

; 609  : }

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
__catch$?SysEncryptionOrDecryptionRequired@@YAHXZ$0:

; 591  : 	}
; 592  : 	catch (Exception &e)
; 593  : 	{
; 594  : 		e.Show (MainDlg);

  000b7	8b 4d ec	 mov	 ecx, DWORD PTR _e$135879[ebp]
  000ba	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bc	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000c1	8b 12		 mov	 edx, DWORD PTR [edx]
  000c3	50		 push	 eax
  000c4	ff d2		 call	 edx

; 595  : 	}

  000c6	b8 00 00 00 00	 mov	 eax, $LN11@SysEncrypt
  000cb	c3		 ret	 0
$LN4@SysEncrypt:

; 596  : 
; 597  : 	return (SystemEncryptionStatus == SYSENC_STATUS_ENCRYPTING
; 598  : 		|| SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING
; 599  : 		|| 
; 600  : 		(
; 601  : 			BootEncStatus.DriveMounted 
; 602  : 			&& 
; 603  : 			(
; 604  : 				BootEncStatus.ConfiguredEncryptedAreaStart != BootEncStatus.EncryptedAreaStart
; 605  : 				|| BootEncStatus.ConfiguredEncryptedAreaEnd != BootEncStatus.EncryptedAreaEnd
; 606  : 			)
; 607  : 		)
; 608  : 	);

  000cc	b8 01 00 00 00	 mov	 eax, 1

; 609  : }

  000d1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000db	59		 pop	 ecx
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi
  000de	5b		 pop	 ebx
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SysEncryptionOrDecryptionRequired@@YAHXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SysEncryptionOrDecryptionRequired@@YAHXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SysEncryptionOrDecryptionRequired@@YAHXZ ENDP		; SysEncryptionOrDecryptionRequired
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z$0
__unwindtable$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z$2
__ehfuncinfo$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?SysDriveOrPartitionFullyEncrypted@@YAHH@Z
_TEXT	SEGMENT
$T150411 = -114						; size = 94
_e$135885 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_bSilent$ = 8						; size = 4
?SysDriveOrPartitionFullyEncrypted@@YAHH@Z PROC		; SysDriveOrPartitionFullyEncrypted, COMDAT

; 613  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 614  : 	/* If you update this function, revise SysDriveOrPartitionFullyEncrypted() in Tcformat.c as well. */
; 615  : 
; 616  : 	try
; 617  : 	{
; 618  : 		BootEncStatus = BootEncObj->GetStatus();

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00031	8d 45 8e	 lea	 eax, DWORD PTR $T150411[ebp]
  00034	50		 push	 eax
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003c	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00041	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00046	8b f0		 mov	 esi, eax
  00048	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  0004d	f3 a5		 rep movsd
  0004f	66 a5		 movsw
$LN10@SysDriveOr:

; 625  : 
; 626  : 	return (!BootEncStatus.SetupInProgress
; 627  : 		&& BootEncStatus.ConfiguredEncryptedAreaEnd != 0
; 628  : 		&& BootEncStatus.ConfiguredEncryptedAreaEnd != -1
; 629  : 		&& BootEncStatus.ConfiguredEncryptedAreaStart == BootEncStatus.EncryptedAreaStart
; 630  : 		&& BootEncStatus.ConfiguredEncryptedAreaEnd == BootEncStatus.EncryptedAreaEnd);

  00051	83 3d 3e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, 0
  00058	75 78		 jne	 SHORT $LN5@SysDriveOr
  0005a	a1 22 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+34
  0005f	8b 0d 26 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+38
  00065	8b d0		 mov	 edx, eax
  00067	0b d1		 or	 edx, ecx
  00069	74 67		 je	 SHORT $LN5@SysDriveOr
  0006b	8b d0		 mov	 edx, eax
  0006d	23 d1		 and	 edx, ecx
  0006f	83 fa ff	 cmp	 edx, -1
  00072	74 5e		 je	 SHORT $LN5@SysDriveOr
  00074	8b 15 1a 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+26
  0007a	3b 15 2a 00 00
	00		 cmp	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+42
  00080	75 50		 jne	 SHORT $LN5@SysDriveOr
  00082	8b 15 1e 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+30
  00088	3b 15 2e 00 00
	00		 cmp	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+46
  0008e	75 42		 jne	 SHORT $LN5@SysDriveOr
  00090	3b 05 32 00 00
	00		 cmp	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+50
  00096	75 3a		 jne	 SHORT $LN5@SysDriveOr
  00098	3b 0d 36 00 00
	00		 cmp	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+54
  0009e	75 32		 jne	 SHORT $LN5@SysDriveOr
  000a0	b8 01 00 00 00	 mov	 eax, 1

; 631  : }

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
__catch$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z$0:

; 619  : 	}
; 620  : 	catch (Exception &e)
; 621  : 	{
; 622  : 		if (!bSilent)

  000b7	83 7d 08 00	 cmp	 DWORD PTR _bSilent$[ebp], 0
  000bb	75 0f		 jne	 SHORT $LN1@SysDriveOr

; 623  : 			e.Show (MainDlg);

  000bd	8b 4d ec	 mov	 ecx, DWORD PTR _e$135885[ebp]
  000c0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000c7	8b 12		 mov	 edx, DWORD PTR [edx]
  000c9	50		 push	 eax
  000ca	ff d2		 call	 edx
$LN1@SysDriveOr:

; 624  : 	}

  000cc	b8 00 00 00 00	 mov	 eax, $LN10@SysDriveOr
  000d1	c3		 ret	 0
$LN5@SysDriveOr:

; 625  : 
; 626  : 	return (!BootEncStatus.SetupInProgress
; 627  : 		&& BootEncStatus.ConfiguredEncryptedAreaEnd != 0
; 628  : 		&& BootEncStatus.ConfiguredEncryptedAreaEnd != -1
; 629  : 		&& BootEncStatus.ConfiguredEncryptedAreaStart == BootEncStatus.EncryptedAreaStart
; 630  : 		&& BootEncStatus.ConfiguredEncryptedAreaEnd == BootEncStatus.EncryptedAreaEnd);

  000d2	33 c0		 xor	 eax, eax

; 631  : }

  000d4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000de	59		 pop	 ecx
  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SysDriveOrPartitionFullyEncrypted@@YAHH@Z ENDP		; SysDriveOrPartitionFullyEncrypted
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?SysEncDeviceActive@@YAHH@Z$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?SysEncDeviceActive@@YAHH@Z$0
__unwindtable$?SysEncDeviceActive@@YAHH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SysEncDeviceActive@@YAHH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SysEncDeviceActive@@YAHH@Z$2
__ehfuncinfo$?SysEncDeviceActive@@YAHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SysEncDeviceActive@@YAHH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SysEncDeviceActive@@YAHH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?SysEncDeviceActive@@YAHH@Z
_TEXT	SEGMENT
$T150429 = -114						; size = 94
_e$135892 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_bSilent$ = 8						; size = 4
?SysEncDeviceActive@@YAHH@Z PROC			; SysEncDeviceActive, COMDAT

; 637  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SysEncDeviceActive@@YAHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 638  : 	try
; 639  : 	{
; 640  : 		BootEncStatus = BootEncObj->GetStatus();

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00031	8d 45 8e	 lea	 eax, DWORD PTR $T150429[ebp]
  00034	50		 push	 eax
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003c	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00041	8b f0		 mov	 esi, eax
  00043	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00048	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  0004d	f3 a5		 rep movsd
  0004f	66 a5		 movsw

; 648  : 	}
; 649  : 
; 650  : 	return (BootEncStatus.DriveMounted);

  00051	a1 06 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6

; 651  : }

  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
__catch$?SysEncDeviceActive@@YAHH@Z$0:

; 641  : 	}
; 642  : 	catch (Exception &e)
; 643  : 	{
; 644  : 		if (!bSilent)

  00068	83 7d 08 00	 cmp	 DWORD PTR _bSilent$[ebp], 0
  0006c	75 0f		 jne	 SHORT $LN1@SysEncDevi

; 645  : 			e.Show (MainDlg);

  0006e	8b 4d ec	 mov	 ecx, DWORD PTR _e$135892[ebp]
  00071	8b 11		 mov	 edx, DWORD PTR [ecx]
  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00078	8b 12		 mov	 edx, DWORD PTR [edx]
  0007a	50		 push	 eax
  0007b	ff d2		 call	 edx
$LN1@SysEncDevi:

; 646  : 
; 647  : 		return FALSE;

  0007d	b8 00 00 00 00	 mov	 eax, $LN8@SysEncDevi
  00082	c3		 ret	 0
$LN8@SysEncDevi:
  00083	33 c0		 xor	 eax, eax

; 651  : }

  00085	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00088	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008f	59		 pop	 ecx
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SysEncDeviceActive@@YAHH@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SysEncDeviceActive@@YAHH@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SysEncDeviceActive@@YAHH@Z ENDP			; SysEncDeviceActive
PUBLIC	_WholeSysDriveEncryption
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_WholeSysDriveEncryption$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$_WholeSysDriveEncryption$0
__unwindtable$_WholeSysDriveEncryption DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_WholeSysDriveEncryption DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_WholeSysDriveEncryption$2
__ehfuncinfo$_WholeSysDriveEncryption DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_WholeSysDriveEncryption
	DD	01H
	DD	FLAT:__tryblocktable$_WholeSysDriveEncryption
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _WholeSysDriveEncryption
_TEXT	SEGMENT
$T150445 = -114						; size = 94
_e$135900 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_bSilent$ = 8						; size = 4
_WholeSysDriveEncryption PROC				; COMDAT

; 655  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_WholeSysDriveEncryption
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 656  : 	try
; 657  : 	{
; 658  : 		BootEncStatus = BootEncObj->GetStatus();

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00031	8d 45 8e	 lea	 eax, DWORD PTR $T150445[ebp]
  00034	50		 push	 eax
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003c	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00041	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00046	8b f0		 mov	 esi, eax
  00048	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  0004d	f3 a5		 rep movsd
  0004f	66 a5		 movsw

; 659  : 
; 660  : 		return (BootEncStatus.ConfiguredEncryptedAreaStart == TC_BOOT_LOADER_AREA_SIZE
; 661  : 			&& BootEncStatus.ConfiguredEncryptedAreaEnd >= BootEncStatus.BootDriveLength.QuadPart - 1);

  00051	81 3d 1a 00 00
	00 00 7e 00 00	 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+26, 32256 ; 00007e00H
  0005b	75 61		 jne	 SHORT $LN10@WholeSysDr
  0005d	83 3d 1e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+30, 0
  00064	75 58		 jne	 SHORT $LN10@WholeSysDr
  00066	8b 0d 12 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+18
  0006c	a1 16 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+22
  00071	8b 15 26 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+38
  00077	83 e9 01	 sub	 ecx, 1
  0007a	83 d8 00	 sbb	 eax, 0
  0007d	3b d0		 cmp	 edx, eax
  0007f	7c 3d		 jl	 SHORT $LN10@WholeSysDr
  00081	7f 09		 jg	 SHORT $LN12@WholeSysDr
  00083	a1 22 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+34
  00088	3b c1		 cmp	 eax, ecx
  0008a	72 32		 jb	 SHORT $LN10@WholeSysDr
$LN12@WholeSysDr:
  0008c	b8 01 00 00 00	 mov	 eax, 1

; 669  : 	}
; 670  : }

  00091	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
__catch$_WholeSysDriveEncryption$0:

; 662  : 	}
; 663  : 	catch (Exception &e)
; 664  : 	{
; 665  : 		if (!bSilent)

  000a3	83 7d 08 00	 cmp	 DWORD PTR _bSilent$[ebp], 0
  000a7	75 0f		 jne	 SHORT $LN1@WholeSysDr

; 666  : 			e.Show (MainDlg);

  000a9	8b 4d ec	 mov	 ecx, DWORD PTR _e$135900[ebp]
  000ac	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000b3	8b 12		 mov	 edx, DWORD PTR [edx]
  000b5	50		 push	 eax
  000b6	ff d2		 call	 edx
$LN1@WholeSysDr:

; 667  : 
; 668  : 		return FALSE;

  000b8	b8 00 00 00 00	 mov	 eax, $LN10@WholeSysDr
  000bd	c3		 ret	 0
$LN10@WholeSysDr:
  000be	33 c0		 xor	 eax, eax

; 669  : 	}
; 670  : }

  000c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ca	59		 pop	 ecx
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_WholeSysDriveEncryption:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_WholeSysDriveEncryption
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_WholeSysDriveEncryption ENDP
PUBLIC	?GetSysEncDeviceSize@@YA_KH@Z			; GetSysEncDeviceSize
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?GetSysEncDeviceSize@@YA_KH@Z$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?GetSysEncDeviceSize@@YA_KH@Z$0
__unwindtable$?GetSysEncDeviceSize@@YA_KH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?GetSysEncDeviceSize@@YA_KH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?GetSysEncDeviceSize@@YA_KH@Z$2
__ehfuncinfo$?GetSysEncDeviceSize@@YA_KH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetSysEncDeviceSize@@YA_KH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?GetSysEncDeviceSize@@YA_KH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?GetSysEncDeviceSize@@YA_KH@Z
_TEXT	SEGMENT
$T150464 = -114						; size = 94
_e$135908 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_bSilent$ = 8						; size = 4
?GetSysEncDeviceSize@@YA_KH@Z PROC			; GetSysEncDeviceSize, COMDAT

; 674  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetSysEncDeviceSize@@YA_KH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 675  : 	try
; 676  : 	{
; 677  : 		BootEncStatus = BootEncObj->GetStatus();

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00031	8d 45 8e	 lea	 eax, DWORD PTR $T150464[ebp]
  00034	50		 push	 eax
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003c	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00041	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00046	8b f0		 mov	 esi, eax
  00048	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  0004d	f3 a5		 rep movsd
  0004f	66 a5		 movsw
$LN8@GetSysEncD:

; 684  : 
; 685  : 	return (BootEncStatus.ConfiguredEncryptedAreaEnd - BootEncStatus.ConfiguredEncryptedAreaStart + 1);

  00051	a1 22 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+34
  00056	2b 05 1a 00 00
	00		 sub	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+26
  0005c	8b 15 26 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+38
  00062	1b 15 1e 00 00
	00		 sbb	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+30
  00068	83 c0 01	 add	 eax, 1
  0006b	83 d2 00	 adc	 edx, 0

; 686  : }

  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
__catch$?GetSysEncDeviceSize@@YA_KH@Z$0:

; 678  : 	}
; 679  : 	catch (Exception &e)
; 680  : 	{
; 681  : 		if (!bSilent)

  00080	83 7d 08 00	 cmp	 DWORD PTR _bSilent$[ebp], 0
  00084	75 0f		 jne	 SHORT $LN1@GetSysEncD

; 682  : 			e.Show (MainDlg);

  00086	8b 4d ec	 mov	 ecx, DWORD PTR _e$135908[ebp]
  00089	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008b	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00090	8b 12		 mov	 edx, DWORD PTR [edx]
  00092	50		 push	 eax
  00093	ff d2		 call	 edx
$LN1@GetSysEncD:

; 683  : 	}

  00095	b8 00 00 00 00	 mov	 eax, $LN8@GetSysEncD
  0009a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?GetSysEncDeviceSize@@YA_KH@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSysEncDeviceSize@@YA_KH@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSysEncDeviceSize@@YA_KH@Z ENDP			; GetSysEncDeviceSize
PUBLIC	?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z	; GetSysEncDeviceEncryptedPartSize
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z$0
__unwindtable$?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z$2
__ehfuncinfo$?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z
_TEXT	SEGMENT
$T150480 = -114						; size = 94
_e$135915 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_bSilent$ = 8						; size = 4
?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z PROC		; GetSysEncDeviceEncryptedPartSize, COMDAT

; 690  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 691  : 	try
; 692  : 	{
; 693  : 		BootEncStatus = BootEncObj->GetStatus();

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00031	8d 45 8e	 lea	 eax, DWORD PTR $T150480[ebp]
  00034	50		 push	 eax
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003c	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00041	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00046	8b f0		 mov	 esi, eax
  00048	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  0004d	f3 a5		 rep movsd
  0004f	66 a5		 movsw
$LN8@GetSysEncD@2:

; 700  : 
; 701  : 	return (BootEncStatus.EncryptedAreaEnd - BootEncStatus.EncryptedAreaStart + 1);

  00051	a1 32 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+50
  00056	2b 05 2a 00 00
	00		 sub	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+42
  0005c	8b 15 36 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+54
  00062	1b 15 2e 00 00
	00		 sbb	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+46
  00068	83 c0 01	 add	 eax, 1
  0006b	83 d2 00	 adc	 edx, 0

; 702  : }

  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
__catch$?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z$0:

; 694  : 	}
; 695  : 	catch (Exception &e)
; 696  : 	{
; 697  : 		if (!bSilent)

  00080	83 7d 08 00	 cmp	 DWORD PTR _bSilent$[ebp], 0
  00084	75 0f		 jne	 SHORT $LN1@GetSysEncD@2

; 698  : 			e.Show (MainDlg);

  00086	8b 4d ec	 mov	 ecx, DWORD PTR _e$135915[ebp]
  00089	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008b	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00090	8b 12		 mov	 edx, DWORD PTR [edx]
  00092	50		 push	 eax
  00093	ff d2		 call	 edx
$LN1@GetSysEncD@2:

; 699  : 	}

  00095	b8 00 00 00 00	 mov	 eax, $LN8@GetSysEncD@2
  0009a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z ENDP		; GetSysEncDeviceEncryptedPartSize
PUBLIC	??_C@_0BA@DJOMNFMG@IDPM_PROPERTIES?$AA@		; `string'
PUBLIC	??_C@_0BH@MNBOMCDE@IDM_VERIFY_RESCUE_DISK?$AA@	; `string'
PUBLIC	??_C@_0BH@MLCINLBO@IDM_CREATE_RESCUE_DISK?$AA@	; `string'
PUBLIC	??_C@_0BF@KPIIIAFE@IDM_SYS_ENC_SETTINGS?$AA@	; `string'
PUBLIC	??_C@_0CF@CAHOHCGA@IDM_CHANGE_SYS_HEADER_KEY_DERIV_@ ; `string'
PUBLIC	??_C@_0BI@CKBDIDDP@IDM_CHANGE_SYS_PASSWORD?$AA@	; `string'
PUBLIC	??_C@_07CAOFPAJK@ENCRYPT?$AA@			; `string'
PUBLIC	??_C@_0BE@NCCLMCDM@PERMANENTLY_DECRYPT?$AA@	; `string'
PUBLIC	??_C@_0BC@EGBHACCE@IDM_SYSENC_RESUME?$AA@	; `string'
EXTRN	__imp__AppendMenuA@16:PROC
EXTRN	__imp__AppendMenuW@16:PROC
EXTRN	_GetString:PROC
;	COMDAT ??_C@_0BA@DJOMNFMG@IDPM_PROPERTIES?$AA@
CONST	SEGMENT
??_C@_0BA@DJOMNFMG@IDPM_PROPERTIES?$AA@ DB 'IDPM_PROPERTIES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MNBOMCDE@IDM_VERIFY_RESCUE_DISK?$AA@
CONST	SEGMENT
??_C@_0BH@MNBOMCDE@IDM_VERIFY_RESCUE_DISK?$AA@ DB 'IDM_VERIFY_RESCUE_DISK'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MLCINLBO@IDM_CREATE_RESCUE_DISK?$AA@
CONST	SEGMENT
??_C@_0BH@MLCINLBO@IDM_CREATE_RESCUE_DISK?$AA@ DB 'IDM_CREATE_RESCUE_DISK'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KPIIIAFE@IDM_SYS_ENC_SETTINGS?$AA@
CONST	SEGMENT
??_C@_0BF@KPIIIAFE@IDM_SYS_ENC_SETTINGS?$AA@ DB 'IDM_SYS_ENC_SETTINGS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CAHOHCGA@IDM_CHANGE_SYS_HEADER_KEY_DERIV_@
CONST	SEGMENT
??_C@_0CF@CAHOHCGA@IDM_CHANGE_SYS_HEADER_KEY_DERIV_@ DB 'IDM_CHANGE_SYS_H'
	DB	'EADER_KEY_DERIV_ALGO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CKBDIDDP@IDM_CHANGE_SYS_PASSWORD?$AA@
CONST	SEGMENT
??_C@_0BI@CKBDIDDP@IDM_CHANGE_SYS_PASSWORD?$AA@ DB 'IDM_CHANGE_SYS_PASSWO'
	DB	'RD', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_07CAOFPAJK@ENCRYPT?$AA@
CONST	SEGMENT
??_C@_07CAOFPAJK@ENCRYPT?$AA@ DB 'ENCRYPT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NCCLMCDM@PERMANENTLY_DECRYPT?$AA@
CONST	SEGMENT
??_C@_0BE@NCCLMCDM@PERMANENTLY_DECRYPT?$AA@ DB 'PERMANENTLY_DECRYPT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EGBHACCE@IDM_SYSENC_RESUME?$AA@
CONST	SEGMENT
??_C@_0BC@EGBHACCE@IDM_SYSENC_RESUME?$AA@ DB 'IDM_SYSENC_RESUME', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?PopulateSysEncContextMenu@@YAXPAUHMENU__@@H@Z$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?PopulateSysEncContextMenu@@YAXPAUHMENU__@@H@Z$0
__unwindtable$?PopulateSysEncContextMenu@@YAXPAUHMENU__@@H@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?PopulateSysEncContextMenu@@YAXPAUHMENU__@@H@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?PopulateSysEncContextMenu@@YAXPAUHMENU__@@H@Z$2
__ehfuncinfo$?PopulateSysEncContextMenu@@YAXPAUHMENU__@@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?PopulateSysEncContextMenu@@YAXPAUHMENU__@@H@Z
	DD	01H
	DD	FLAT:__tryblocktable$?PopulateSysEncContextMenu@@YAXPAUHMENU__@@H@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?PopulateSysEncContextMenu@@YAXPAUHMENU__@@H@Z
_TEXT	SEGMENT
$T150496 = -114						; size = 94
_e$135923 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_popup$ = 8						; size = 4
_bToolsOnly$ = 12					; size = 4
?PopulateSysEncContextMenu@@YAXPAUHMENU__@@H@Z PROC	; PopulateSysEncContextMenu, COMDAT

; 706  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PopulateSysEncContextMenu@@YAXPAUHMENU__@@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b 5d 08	 mov	 ebx, DWORD PTR _popup$[ebp]

; 707  : 	try
; 708  : 	{
; 709  : 		BootEncStatus = BootEncObj->GetStatus();

  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00034	8d 45 8e	 lea	 eax, DWORD PTR $T150496[ebp]
  00037	50		 push	 eax
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003f	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00044	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00049	8b f0		 mov	 esi, eax
  0004b	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00050	f3 a5		 rep movsd
  00052	66 a5		 movsw
  00054	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0005b	eb 1f		 jmp	 SHORT $LN14@PopulateSy
__catch$?PopulateSysEncContextMenu@@YAXPAUHMENU__@@H@Z$0:

; 710  : 	}
; 711  : 	catch (Exception &e)
; 712  : 	{
; 713  : 		e.Show (MainDlg);

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR _e$135923[ebp]
  00060	8b 11		 mov	 edx, DWORD PTR [ecx]
  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00067	8b 12		 mov	 edx, DWORD PTR [edx]
  00069	50		 push	 eax
  0006a	ff d2		 call	 edx

; 714  : 	}

  0006c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00073	b8 00 00 00 00	 mov	 eax, $LN16@PopulateSy
  00078	c3		 ret	 0
$LN16@PopulateSy:
  00079	8b 5d 08	 mov	 ebx, DWORD PTR _popup$[ebp]
$LN14@PopulateSy:

; 715  : 
; 716  : 	if (!bToolsOnly && !IsHiddenOSRunning())

  0007c	83 7d 0c 00	 cmp	 DWORD PTR _bToolsOnly$[ebp], 0
  00080	0f 85 95 00 00
	00		 jne	 $LN19@PopulateSy
  00086	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  0008b	85 c0		 test	 eax, eax
  0008d	0f 85 88 00 00
	00		 jne	 $LN19@PopulateSy

; 717  : 	{
; 718  : 		if (SysEncryptionOrDecryptionRequired ())

  00093	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  00098	85 c0		 test	 eax, eax
  0009a	74 7f		 je	 SHORT $LN19@PopulateSy

; 719  : 		{
; 720  : 			if (!BootEncStatus.SetupInProgress)

  0009c	83 3d 3e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, 0
  000a3	75 20		 jne	 SHORT $LN17@PopulateSy

; 721  : 				AppendMenuW (popup, MF_STRING, IDM_SYSENC_RESUME, GetString ("IDM_SYSENC_RESUME"));

  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EGBHACCE@IDM_SYSENC_RESUME?$AA@
  000aa	e8 00 00 00 00	 call	 _GetString
  000af	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__AppendMenuW@16
  000b5	83 c4 04	 add	 esp, 4
  000b8	50		 push	 eax
  000b9	68 70 9c 00 00	 push	 40048			; 00009c70H
  000be	6a 00		 push	 0
  000c0	53		 push	 ebx
  000c1	ff d6		 call	 esi
  000c3	eb 06		 jmp	 SHORT $LN5@PopulateSy
$LN17@PopulateSy:
  000c5	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__AppendMenuW@16
$LN5@PopulateSy:

; 722  : 
; 723  : 			if (SystemEncryptionStatus != SYSENC_STATUS_DECRYPTING)

  000cb	81 3d 00 00 00
	00 58 02 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  000d5	74 18		 je	 SHORT $LN4@PopulateSy

; 724  : 				AppendMenuW (popup, MF_STRING, IDM_PERMANENTLY_DECRYPT_SYS, GetString ("PERMANENTLY_DECRYPT"));

  000d7	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NCCLMCDM@PERMANENTLY_DECRYPT?$AA@
  000dc	e8 00 00 00 00	 call	 _GetString
  000e1	83 c4 04	 add	 esp, 4
  000e4	50		 push	 eax
  000e5	68 6c 9c 00 00	 push	 40044			; 00009c6cH
  000ea	6a 00		 push	 0
  000ec	53		 push	 ebx
  000ed	ff d6		 call	 esi
$LN4@PopulateSy:

; 725  : 			
; 726  : 			AppendMenuW (popup, MF_STRING, IDM_ENCRYPT_SYSTEM_DEVICE, GetString ("ENCRYPT"));

  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_07CAOFPAJK@ENCRYPT?$AA@
  000f4	e8 00 00 00 00	 call	 _GetString
  000f9	83 c4 04	 add	 esp, 4
  000fc	50		 push	 eax
  000fd	68 6f 9c 00 00	 push	 40047			; 00009c6fH
  00102	6a 00		 push	 0
  00104	53		 push	 ebx
  00105	ff d6		 call	 esi

; 727  : 			AppendMenu (popup, MF_SEPARATOR, 0, NULL);

  00107	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__AppendMenuA@16
  0010d	6a 00		 push	 0
  0010f	6a 00		 push	 0
  00111	68 00 08 00 00	 push	 2048			; 00000800H
  00116	53		 push	 ebx
  00117	ff d7		 call	 edi
  00119	eb 0c		 jmp	 SHORT $LN6@PopulateSy
$LN19@PopulateSy:
  0011b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__AppendMenuW@16
  00121	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__AppendMenuA@16
$LN6@PopulateSy:

; 728  : 		}
; 729  : 	}
; 730  : 
; 731  : 	AppendMenuW (popup, MF_STRING, IDM_CHANGE_SYS_PASSWORD, GetString ("IDM_CHANGE_SYS_PASSWORD"));

  00127	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CKBDIDDP@IDM_CHANGE_SYS_PASSWORD?$AA@
  0012c	e8 00 00 00 00	 call	 _GetString
  00131	83 c4 04	 add	 esp, 4
  00134	50		 push	 eax
  00135	68 6a 9c 00 00	 push	 40042			; 00009c6aH
  0013a	6a 00		 push	 0
  0013c	53		 push	 ebx
  0013d	ff d6		 call	 esi

; 732  : 	AppendMenuW (popup, MF_STRING, IDM_CHANGE_SYS_HEADER_KEY_DERIV_ALGO, GetString ("IDM_CHANGE_SYS_HEADER_KEY_DERIV_ALGO"));

  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CAHOHCGA@IDM_CHANGE_SYS_HEADER_KEY_DERIV_@
  00144	e8 00 00 00 00	 call	 _GetString
  00149	83 c4 04	 add	 esp, 4
  0014c	50		 push	 eax
  0014d	68 69 9c 00 00	 push	 40041			; 00009c69H
  00152	6a 00		 push	 0
  00154	53		 push	 ebx
  00155	ff d6		 call	 esi

; 733  : 
; 734  : 	AppendMenu (popup, MF_SEPARATOR, 0, NULL);

  00157	6a 00		 push	 0
  00159	6a 00		 push	 0
  0015b	68 00 08 00 00	 push	 2048			; 00000800H
  00160	53		 push	 ebx
  00161	ff d7		 call	 edi

; 735  : 	AppendMenuW (popup, MF_STRING, IDM_SYS_ENC_SETTINGS, GetString ("IDM_SYS_ENC_SETTINGS"));

  00163	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KPIIIAFE@IDM_SYS_ENC_SETTINGS?$AA@
  00168	e8 00 00 00 00	 call	 _GetString
  0016d	83 c4 04	 add	 esp, 4
  00170	50		 push	 eax
  00171	68 75 9c 00 00	 push	 40053			; 00009c75H
  00176	6a 00		 push	 0
  00178	53		 push	 ebx
  00179	ff d6		 call	 esi

; 736  : 
; 737  : 	if (!IsHiddenOSRunning())

  0017b	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00180	85 c0		 test	 eax, eax
  00182	75 3a		 jne	 SHORT $LN3@PopulateSy

; 738  : 	{
; 739  : 		AppendMenu (popup, MF_SEPARATOR, 0, NULL);

  00184	50		 push	 eax
  00185	50		 push	 eax
  00186	68 00 08 00 00	 push	 2048			; 00000800H
  0018b	53		 push	 ebx
  0018c	ff d7		 call	 edi

; 740  : 		AppendMenuW (popup, MF_STRING, IDM_CREATE_RESCUE_DISK, GetString ("IDM_CREATE_RESCUE_DISK"));

  0018e	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@MLCINLBO@IDM_CREATE_RESCUE_DISK?$AA@
  00193	e8 00 00 00 00	 call	 _GetString
  00198	83 c4 04	 add	 esp, 4
  0019b	50		 push	 eax
  0019c	68 6b 9c 00 00	 push	 40043			; 00009c6bH
  001a1	6a 00		 push	 0
  001a3	53		 push	 ebx
  001a4	ff d6		 call	 esi

; 741  : 		AppendMenuW (popup, MF_STRING, IDM_VERIFY_RESCUE_DISK, GetString ("IDM_VERIFY_RESCUE_DISK"));

  001a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@MNBOMCDE@IDM_VERIFY_RESCUE_DISK?$AA@
  001ab	e8 00 00 00 00	 call	 _GetString
  001b0	83 c4 04	 add	 esp, 4
  001b3	50		 push	 eax
  001b4	68 6d 9c 00 00	 push	 40045			; 00009c6dH
  001b9	6a 00		 push	 0
  001bb	53		 push	 ebx
  001bc	ff d6		 call	 esi
$LN3@PopulateSy:

; 742  : 	}
; 743  : 
; 744  : 	if (!bToolsOnly)

  001be	83 7d 0c 00	 cmp	 DWORD PTR _bToolsOnly$[ebp], 0
  001c2	75 5d		 jne	 SHORT $LN2@PopulateSy

; 745  : 	{
; 746  : 		if (SysDriveOrPartitionFullyEncrypted (FALSE) && !IsHiddenOSRunning())

  001c4	6a 00		 push	 0
  001c6	e8 00 00 00 00	 call	 ?SysDriveOrPartitionFullyEncrypted@@YAHH@Z ; SysDriveOrPartitionFullyEncrypted
  001cb	83 c4 04	 add	 esp, 4
  001ce	85 c0		 test	 eax, eax
  001d0	74 2b		 je	 SHORT $LN1@PopulateSy
  001d2	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  001d7	85 c0		 test	 eax, eax
  001d9	75 22		 jne	 SHORT $LN1@PopulateSy

; 747  : 		{
; 748  : 			AppendMenu (popup, MF_SEPARATOR, 0, NULL);

  001db	50		 push	 eax
  001dc	50		 push	 eax
  001dd	68 00 08 00 00	 push	 2048			; 00000800H
  001e2	53		 push	 ebx
  001e3	ff d7		 call	 edi

; 749  : 			AppendMenuW (popup, MF_STRING, IDM_PERMANENTLY_DECRYPT_SYS, GetString ("PERMANENTLY_DECRYPT"));

  001e5	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NCCLMCDM@PERMANENTLY_DECRYPT?$AA@
  001ea	e8 00 00 00 00	 call	 _GetString
  001ef	83 c4 04	 add	 esp, 4
  001f2	50		 push	 eax
  001f3	68 6c 9c 00 00	 push	 40044			; 00009c6cH
  001f8	6a 00		 push	 0
  001fa	53		 push	 ebx
  001fb	ff d6		 call	 esi
$LN1@PopulateSy:

; 750  : 		}
; 751  : 		AppendMenu (popup, MF_SEPARATOR, 0, NULL);

  001fd	6a 00		 push	 0
  001ff	6a 00		 push	 0
  00201	68 00 08 00 00	 push	 2048			; 00000800H
  00206	53		 push	 ebx
  00207	ff d7		 call	 edi

; 752  : 		AppendMenuW (popup, MF_STRING, IDM_VOLUME_PROPERTIES, GetString ("IDPM_PROPERTIES"));

  00209	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DJOMNFMG@IDPM_PROPERTIES?$AA@
  0020e	e8 00 00 00 00	 call	 _GetString
  00213	83 c4 04	 add	 esp, 4
  00216	50		 push	 eax
  00217	68 57 9c 00 00	 push	 40023			; 00009c57H
  0021c	6a 00		 push	 0
  0021e	53		 push	 ebx
  0021f	ff d6		 call	 esi
$LN2@PopulateSy:

; 753  : 	}
; 754  : }

  00221	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00224	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0022b	59		 pop	 ecx
  0022c	5f		 pop	 edi
  0022d	5e		 pop	 esi
  0022e	5b		 pop	 ebx
  0022f	8b e5		 mov	 esp, ebp
  00231	5d		 pop	 ebp
  00232	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?PopulateSysEncContextMenu@@YAXPAUHMENU__@@H@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PopulateSysEncContextMenu@@YAXPAUHMENU__@@H@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PopulateSysEncContextMenu@@YAXPAUHMENU__@@H@Z ENDP	; PopulateSysEncContextMenu
PUBLIC	??_C@_0BO@FKAHPBKI@?2Device?2Harddisk?$CFd?2Partition0?$AA@ ; `string'
PUBLIC	??_C@_0BN@CEPHIDFC@?2Device?2Harddisk?$CFd?2Partition?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_TCBootLoaderOnInactiveSysEncDrive
EXTRN	?IsBootLoaderOnDrive@BootEncryption@CipherShed@@QAE_NPAD@Z:PROC ; CipherShed::BootEncryption::IsBootLoaderOnDrive
EXTRN	_IsSystemDevicePath:PROC
EXTRN	__snprintf:PROC
EXTRN	_sscanf:PROC
EXTRN	__imp__GetWindowTextA@12:PROC
;	COMDAT ??_C@_0BO@FKAHPBKI@?2Device?2Harddisk?$CFd?2Partition0?$AA@
CONST	SEGMENT
??_C@_0BO@FKAHPBKI@?2Device?2Harddisk?$CFd?2Partition0?$AA@ DB '\Device\H'
	DB	'arddisk%d\Partition0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CEPHIDFC@?2Device?2Harddisk?$CFd?2Partition?$AA@
CONST	SEGMENT
??_C@_0BN@CEPHIDFC@?2Device?2Harddisk?$CFd?2Partition?$AA@ DB '\Device\Ha'
	DB	'rddisk%d\Partition', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_TCBootLoaderOnInactiveSysEncDrive$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_TCBootLoaderOnInactiveSysEncDrive$0
__unwindtable$_TCBootLoaderOnInactiveSysEncDrive DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_TCBootLoaderOnInactiveSysEncDrive DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_TCBootLoaderOnInactiveSysEncDrive$2
__ehfuncinfo$_TCBootLoaderOnInactiveSysEncDrive DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_TCBootLoaderOnInactiveSysEncDrive
	DD	01H
	DD	FLAT:__tryblocktable$_TCBootLoaderOnInactiveSysEncDrive
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _TCBootLoaderOnInactiveSysEncDrive
_TEXT	SEGMENT
$T150516 = -114						; size = 94
_driveNo$135983 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_szDevicePath$135984 = 0				; size = 261
_parentDrivePath$135985 = 264				; size = 261
__$ArrayPad$ = 528					; size = 4
_TCBootLoaderOnInactiveSysEncDrive PROC			; COMDAT

; 863  : {

  00000	55		 push	 ebp
  00001	8d ac 24 ec fd
	ff ff		 lea	 ebp, DWORD PTR [esp-532]
  00008	81 ec 14 02 00
	00		 sub	 esp, 532		; 00000214H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$_TCBootLoaderOnInactiveSysEncDrive
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	83 ec 68	 sub	 esp, 104		; 00000068H
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 85 10 02 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002c	53		 push	 ebx
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 864  : 	try
; 865  : 	{
; 866  : 		int driveNo;
; 867  : 		char szDevicePath [TC_MAX_PATH+1];
; 868  : 		char parentDrivePath [TC_MAX_PATH+1];
; 869  : 
; 870  : 		if (bPrebootPasswordDlgMode)

  0003c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bPrebootPasswordDlgMode, 0
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 871  : 			return FALSE;

  0004a	0f 85 bb 00 00
	00		 jne	 $LN10@TCBootLoad

; 872  : 
; 873  : 		GetWindowTextA(GetDlgItem (MainDlg, IDC_VOLUME), szDevicePath, sizeof (szDevicePath));

  00050	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00056	68 05 01 00 00	 push	 261			; 00000105H
  0005b	8d 45 00	 lea	 eax, DWORD PTR _szDevicePath$135984[ebp]
  0005e	50		 push	 eax
  0005f	68 0a 04 00 00	 push	 1034			; 0000040aH
  00064	51		 push	 ecx
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0006b	50		 push	 eax
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 874  : 
; 875  : 		if (sscanf (szDevicePath, "\\Device\\Harddisk%d\\Partition", &driveNo) != 1)

  00072	8d 55 ec	 lea	 edx, DWORD PTR _driveNo$135983[ebp]
  00075	52		 push	 edx
  00076	8d 45 00	 lea	 eax, DWORD PTR _szDevicePath$135984[ebp]
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CEPHIDFC@?2Device?2Harddisk?$CFd?2Partition?$AA@
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 _sscanf
  00084	83 c4 0c	 add	 esp, 12			; 0000000cH
  00087	83 f8 01	 cmp	 eax, 1

; 876  : 			return FALSE;

  0008a	75 7f		 jne	 SHORT $LN10@TCBootLoad

; 877  : 
; 878  : 		_snprintf (parentDrivePath,
; 879  : 			sizeof (parentDrivePath),
; 880  : 			"\\Device\\Harddisk%d\\Partition0",
; 881  : 			driveNo);

  0008c	8b 4d ec	 mov	 ecx, DWORD PTR _driveNo$135983[ebp]
  0008f	51		 push	 ecx
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@FKAHPBKI@?2Device?2Harddisk?$CFd?2Partition0?$AA@
  00095	8d 95 08 01 00
	00		 lea	 edx, DWORD PTR _parentDrivePath$135985[ebp]
  0009b	68 05 01 00 00	 push	 261			; 00000105H
  000a0	52		 push	 edx
  000a1	e8 00 00 00 00	 call	 __snprintf

; 882  : 
; 883  : 		BootEncStatus = BootEncObj->GetStatus();

  000a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000ac	83 c4 10	 add	 esp, 16			; 00000010H
  000af	8d 45 8e	 lea	 eax, DWORD PTR $T150516[ebp]
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  000b8	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  000bd	8b f0		 mov	 esi, eax
  000bf	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  000c4	f3 a5		 rep movsd
  000c6	66 a5		 movsw

; 884  : 
; 885  : 		if (BootEncStatus.DriveMounted
; 886  : 			&& IsSystemDevicePath (parentDrivePath, MainDlg, FALSE) == 2)

  000c8	83 3d 06 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, 0
  000cf	74 1d		 je	 SHORT $LN1@TCBootLoad
  000d1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  000d7	6a 00		 push	 0
  000d9	51		 push	 ecx
  000da	8d 95 08 01 00
	00		 lea	 edx, DWORD PTR _parentDrivePath$135985[ebp]
  000e0	52		 push	 edx
  000e1	e8 00 00 00 00	 call	 _IsSystemDevicePath
  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e9	83 f8 02	 cmp	 eax, 2

; 887  : 		{
; 888  : 			// The partition is within key scope of active system encryption
; 889  : 			return FALSE;

  000ec	74 1d		 je	 SHORT $LN10@TCBootLoad
$LN1@TCBootLoad:

; 890  : 		}
; 891  : 
; 892  : 		return ((BOOL) BootEncObj->IsBootLoaderOnDrive (parentDrivePath));

  000ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000f4	8d 85 08 01 00
	00		 lea	 eax, DWORD PTR _parentDrivePath$135985[ebp]
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 ?IsBootLoaderOnDrive@BootEncryption@CipherShed@@QAE_NPAD@Z ; CipherShed::BootEncryption::IsBootLoaderOnDrive
  00100	0f b6 c0	 movzx	 eax, al
  00103	eb 08		 jmp	 SHORT $LN9@TCBootLoad
__catch$_TCBootLoaderOnInactiveSysEncDrive$0:

; 893  : 	}
; 894  : 	catch (...)
; 895  : 	{
; 896  : 		return FALSE;

  00105	b8 00 00 00 00	 mov	 eax, $LN10@TCBootLoad
  0010a	c3		 ret	 0
$LN10@TCBootLoad:
  0010b	33 c0		 xor	 eax, eax
$LN9@TCBootLoad:

; 897  : 	}
; 898  : 
; 899  : }

  0010d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00110	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00117	59		 pop	 ecx
  00118	5f		 pop	 edi
  00119	5e		 pop	 esi
  0011a	5b		 pop	 ebx
  0011b	8b 8d 10 02 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00121	33 cd		 xor	 ecx, ebp
  00123	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00128	81 c5 14 02 00
	00		 add	 ebp, 532		; 00000214H
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_TCBootLoaderOnInactiveSysEncDrive:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	8b 8a 1c 02 00
	00		 mov	 ecx, DWORD PTR [edx+540]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_TCBootLoaderOnInactiveSysEncDrive
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_TCBootLoaderOnInactiveSysEncDrive ENDP
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_0BO@KBIBLJFA@VOL_CREATION_WIZARD_NOT_FOUND?$AA@ ; `string'
PUBLIC	??_C@_0BH@DOPCJFAH@CipherShed?9Format?4exe?$CC?$AA@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	_handleWin32Error:PROC
EXTRN	__imp__CreateProcessA@40:PROC
EXTRN	_Error:PROC
EXTRN	_FileExists:PROC
EXTRN	__imp__GetModuleFileNameA@12:PROC
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KBIBLJFA@VOL_CREATION_WIZARD_NOT_FOUND?$AA@
CONST	SEGMENT
??_C@_0BO@KBIBLJFA@VOL_CREATION_WIZARD_NOT_FOUND?$AA@ DB 'VOL_CREATION_WI'
	DB	'ZARD_NOT_FOUND', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DOPCJFAH@CipherShed?9Format?4exe?$CC?$AA@
CONST	SEGMENT
??_C@_0BH@DOPCJFAH@CipherShed?9Format?4exe?$CC?$AA@ DB 'CipherShed-Format'
	DB	'.exe"', 00H					; `string'
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
CONST	ENDS
;	COMDAT ?LaunchVolCreationWizard@@YAXPAUHWND__@@PBD@Z
_TEXT	SEGMENT
tv90 = -352						; size = 4
_pi$136026 = -348					; size = 16
_si$136025 = -332					; size = 68
_t$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
?LaunchVolCreationWizard@@YAXPAUHWND__@@PBD@Z PROC	; LaunchVolCreationWizard, COMDAT
; _arg$ = ebx

; 942  : {

  00000	81 ec 60 01 00
	00		 sub	 esp, 352		; 00000160H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 5c 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+352], eax
  00014	55		 push	 ebp
  00015	8b ac 24 68 01
	00 00		 mov	 ebp, DWORD PTR _hwndDlg$[esp+352]
  0001c	56		 push	 esi

; 943  : 	char t[TC_MAX_PATH] = {'"',0};

  0001d	68 02 01 00 00	 push	 258			; 00000102H
  00022	8d 44 24 66	 lea	 eax, DWORD PTR _t$[esp+366]
  00026	6a 00		 push	 0
  00028	50		 push	 eax
  00029	c6 44 24 6c 22	 mov	 BYTE PTR _t$[esp+372], 34 ; 00000022H
  0002e	c6 44 24 6d 00	 mov	 BYTE PTR _t$[esp+373], 0
  00033	e8 00 00 00 00	 call	 _memset
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 944  : 	char *tmp;
; 945  : 
; 946  : 	GetModuleFileName (NULL, t+1, sizeof(t)-1);

  0003b	68 03 01 00 00	 push	 259			; 00000103H
  00040	8d 4c 24 65	 lea	 ecx, DWORD PTR _t$[esp+365]
  00044	51		 push	 ecx
  00045	6a 00		 push	 0
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12

; 947  : 
; 948  : 	tmp = strrchr (t, '\\');

  0004d	8d 54 24 60	 lea	 edx, DWORD PTR _t$[esp+360]
  00051	6a 5c		 push	 92			; 0000005cH
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 _strrchr
  00059	8b f0		 mov	 esi, eax
  0005b	83 c4 08	 add	 esp, 8

; 949  : 	if (tmp)

  0005e	85 f6		 test	 esi, esi
  00060	0f 84 f5 00 00
	00		 je	 $LN1@LaunchVolC
  00066	57		 push	 edi

; 950  : 	{
; 951  : 		STARTUPINFO si;
; 952  : 		PROCESS_INFORMATION pi;
; 953  : 		ZeroMemory (&si, sizeof (si));

  00067	6a 44		 push	 68			; 00000044H
  00069	8d 44 24 24	 lea	 eax, DWORD PTR _si$136025[esp+368]
  0006d	6a 00		 push	 0
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _memset

; 954  : 
; 955  : 		strcpy (++tmp, "CipherShed-Format.exe\"");

  00075	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
  00078	b9 05 00 00 00	 mov	 ecx, 5
  0007d	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BH@DOPCJFAH@CipherShed?9Format?4exe?$CC?$AA@
  00082	f3 a5		 rep movsd
  00084	66 a5		 movsw

; 956  : 
; 957  : 		if (!FileExists(t))

  00086	8d 4c 24 70	 lea	 ecx, DWORD PTR _t$[esp+376]
  0008a	51		 push	 ecx
  0008b	a4		 movsb
  0008c	e8 00 00 00 00	 call	 _FileExists
  00091	83 c4 10	 add	 esp, 16			; 00000010H
  00094	85 c0		 test	 eax, eax
  00096	75 0d		 jne	 SHORT $LN4@LaunchVolC

; 958  : 			Error ("VOL_CREATION_WIZARD_NOT_FOUND");	// Display a user-friendly error message and advise what to do

  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@KBIBLJFA@VOL_CREATION_WIZARD_NOT_FOUND?$AA@
  0009d	e8 00 00 00 00	 call	 _Error
  000a2	83 c4 04	 add	 esp, 4
$LN4@LaunchVolC:

; 959  : 
; 960  : 		if (strlen (arg) > 0)

  000a5	8b c3		 mov	 eax, ebx
  000a7	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  000aa	8d 9b 00 00 00
	00		 npad	 6
$LL10@LaunchVolC:
  000b0	8a 08		 mov	 cl, BYTE PTR [eax]
  000b2	40		 inc	 eax
  000b3	84 c9		 test	 cl, cl
  000b5	75 f9		 jne	 SHORT $LL10@LaunchVolC
  000b7	2b c2		 sub	 eax, edx
  000b9	74 41		 je	 SHORT $LN3@LaunchVolC

; 961  : 		{
; 962  : 			strcat (t, " ");

  000bb	8d 7c 24 64	 lea	 edi, DWORD PTR _t$[esp+364]
  000bf	4f		 dec	 edi
$LL11@LaunchVolC:
  000c0	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  000c3	47		 inc	 edi
  000c4	84 c0		 test	 al, al
  000c6	75 f8		 jne	 SHORT $LL11@LaunchVolC
  000c8	66 8b 15 00 00
	00 00		 mov	 dx, WORD PTR ??_C@_01CLKCMJKC@?5?$AA@

; 963  : 			strcat (t, arg);

  000cf	8b c3		 mov	 eax, ebx
  000d1	66 89 17	 mov	 WORD PTR [edi], dx
  000d4	8b c8		 mov	 ecx, eax
$LL12@LaunchVolC:
  000d6	8a 10		 mov	 dl, BYTE PTR [eax]
  000d8	40		 inc	 eax
  000d9	84 d2		 test	 dl, dl
  000db	75 f9		 jne	 SHORT $LL12@LaunchVolC
  000dd	8d 7c 24 64	 lea	 edi, DWORD PTR _t$[esp+364]
  000e1	2b c1		 sub	 eax, ecx
  000e3	8b f1		 mov	 esi, ecx
  000e5	4f		 dec	 edi
$LL13@LaunchVolC:
  000e6	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  000e9	47		 inc	 edi
  000ea	84 c9		 test	 cl, cl
  000ec	75 f8		 jne	 SHORT $LL13@LaunchVolC
  000ee	8b c8		 mov	 ecx, eax
  000f0	c1 e9 02	 shr	 ecx, 2
  000f3	f3 a5		 rep movsd
  000f5	8b c8		 mov	 ecx, eax
  000f7	83 e1 03	 and	 ecx, 3
  000fa	f3 a4		 rep movsb
$LN3@LaunchVolC:

; 964  : 		}
; 965  : 
; 966  : 		if (!CreateProcess (NULL, (LPSTR) t, NULL, NULL, FALSE, NORMAL_PRIORITY_CLASS, NULL, NULL, &si, &pi))

  000fc	8d 44 24 10	 lea	 eax, DWORD PTR _pi$136026[esp+364]
  00100	50		 push	 eax
  00101	8d 4c 24 24	 lea	 ecx, DWORD PTR _si$136025[esp+368]
  00105	51		 push	 ecx
  00106	6a 00		 push	 0
  00108	6a 00		 push	 0
  0010a	6a 20		 push	 32			; 00000020H
  0010c	6a 00		 push	 0
  0010e	6a 00		 push	 0
  00110	6a 00		 push	 0
  00112	8d 94 24 84 00
	00 00		 lea	 edx, DWORD PTR _t$[esp+396]
  00119	52		 push	 edx
  0011a	6a 00		 push	 0
  0011c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateProcessA@40
  00122	5f		 pop	 edi
  00123	85 c0		 test	 eax, eax
  00125	75 20		 jne	 SHORT $LN2@LaunchVolC

; 967  : 		{
; 968  : 			handleWin32Error (hwndDlg);

  00127	55		 push	 ebp
  00128	e8 00 00 00 00	 call	 _handleWin32Error
  0012d	83 c4 04	 add	 esp, 4
  00130	5e		 pop	 esi
  00131	5d		 pop	 ebp

; 974  : 		}
; 975  : 	}
; 976  : }

  00132	8b 8c 24 5c 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+352]
  00139	33 cc		 xor	 ecx, esp
  0013b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00140	81 c4 60 01 00
	00		 add	 esp, 352		; 00000160H
  00146	c3		 ret	 0
$LN2@LaunchVolC:

; 969  : 		}
; 970  : 		else
; 971  : 		{
; 972  : 			CloseHandle (pi.hProcess);

  00147	8b 44 24 0c	 mov	 eax, DWORD PTR _pi$136026[esp+360]
  0014b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__CloseHandle@4
  00151	50		 push	 eax
  00152	ff d6		 call	 esi

; 973  : 			CloseHandle (pi.hThread);

  00154	8b 4c 24 10	 mov	 ecx, DWORD PTR _pi$136026[esp+364]
  00158	51		 push	 ecx
  00159	ff d6		 call	 esi
$LN1@LaunchVolC:

; 974  : 		}
; 975  : 	}
; 976  : }

  0015b	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+360]
  00162	5e		 pop	 esi
  00163	5d		 pop	 ebp
  00164	33 cc		 xor	 ecx, esp
  00166	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016b	81 c4 60 01 00
	00		 add	 esp, 352		; 00000160H
  00171	c3		 ret	 0
?LaunchVolCreationWizard@@YAXPAUHWND__@@PBD@Z ENDP	; LaunchVolCreationWizard
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	__imp__GetWindowTextW@12:PROC
EXTRN	__imp__VirtualLock@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?PasswordChangeEnable@@YAXPAUHWND__@@HHHHHH@Z
_TEXT	SEGMENT
_bEnable$ = -368					; size = 4
$T150567 = -364						; size = 4
$T150566 = -360						; size = 4
$T150549 = -356						; size = 4
$T150550 = -352						; size = 4
$T150561 = -348						; size = 4
$T150562 = -344						; size = 4
_password$ = -340					; size = 65
_newPassword$ = -272					; size = 65
_newVerify$ = -204					; size = 65
_tmpUTF16buf$ = -136					; size = 130
__$ArrayPad$ = -4					; size = 4
_button$ = 8						; size = 4
_passwordId$ = 12					; size = 4
_keyFilesEnabled$ = 16					; size = 4
_newPasswordId$ = 20					; size = 4
_newVerifyId$ = 24					; size = 4
_newKeyFilesEnabled$ = 28				; size = 4
?PasswordChangeEnable@@YAXPAUHWND__@@HHHHHH@Z PROC	; PasswordChangeEnable, COMDAT
; _hwndDlg$ = ebx

; 1341 : {

  00000	81 ec 70 01 00
	00		 sub	 esp, 368		; 00000170H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 6c 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+368], eax
  00014	55		 push	 ebp
  00015	8b ac 24 80 01
	00 00		 mov	 ebp, DWORD PTR _keyFilesEnabled$[esp+368]
  0001c	56		 push	 esi
  0001d	57		 push	 edi

; 1342 : 	char password[MAX_PASSWORD + 1]={};

  0001e	6a 41		 push	 65			; 00000041H
  00020	8d 44 24 2c	 lea	 eax, DWORD PTR _password$[esp+384]
  00024	6a 00		 push	 0
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _memset

; 1343 : 	char newPassword[MAX_PASSWORD + 1]={};

  0002c	6a 41		 push	 65			; 00000041H
  0002e	8d 4c 24 7c	 lea	 ecx, DWORD PTR _newPassword$[esp+396]
  00032	6a 00		 push	 0
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 _memset

; 1344 : 	char newVerify[MAX_PASSWORD + 1]={};

  0003a	6a 41		 push	 65			; 00000041H
  0003c	8d 94 24 cc 00
	00 00		 lea	 edx, DWORD PTR _newVerify$[esp+408]
  00043	6a 00		 push	 0
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 _memset
  0004b	83 c4 24	 add	 esp, 36			; 00000024H

; 1345 : 	BOOL bEnable = TRUE;
; 1346 : 	WCHAR tmpUTF16buf[MAX_PASSWORD+1];
; 1347 : 	VirtualLock(tmpUTF16buf,sizeof(tmpUTF16buf));

  0004e	68 82 00 00 00	 push	 130			; 00000082H
  00053	8d 84 24 f8 00
	00 00		 lea	 eax, DWORD PTR _tmpUTF16buf$[esp+384]
  0005a	50		 push	 eax
  0005b	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR _bEnable$[esp+388], 1
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualLock@8

; 1348 : 
; 1349 : 	GetWindowTextW(GetDlgItem (hwndDlg, passwordId), tmpUTF16buf, sizeof(tmpUTF16buf)/sizeof(*tmpUTF16buf));

  00069	8b 94 24 84 01
	00 00		 mov	 edx, DWORD PTR _passwordId$[esp+376]
  00070	6a 41		 push	 65			; 00000041H
  00072	8d 8c 24 f8 00
	00 00		 lea	 ecx, DWORD PTR _tmpUTF16buf$[esp+384]
  00079	51		 push	 ecx
  0007a	52		 push	 edx
  0007b	53		 push	 ebx
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00082	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetWindowTextW@12
  00088	50		 push	 eax
  00089	ff d6		 call	 esi

; 1350 : 	ConvertUTF16toUTF8s((const UTF16*)tmpUTF16buf,sizeof(tmpUTF16buf)/sizeof(*tmpUTF16buf),(UTF8*)password,sizeof(password)/sizeof(*password),strictConversion);

  0008b	6a 00		 push	 0
  0008d	8d 44 24 2c	 lea	 eax, DWORD PTR _password$[esp+384]
  00091	8d 54 24 6d	 lea	 edx, DWORD PTR _password$[esp+449]
  00095	52		 push	 edx
  00096	89 44 24 24	 mov	 DWORD PTR $T150550[esp+388], eax
  0009a	8d 8c 24 fc 00
	00 00		 lea	 ecx, DWORD PTR _tmpUTF16buf$[esp+388]
  000a1	8d 44 24 24	 lea	 eax, DWORD PTR $T150550[esp+388]
  000a5	89 4c 24 20	 mov	 DWORD PTR $T150549[esp+388], ecx
  000a9	50		 push	 eax
  000aa	8d 8c 24 04 02
	00 00		 lea	 ecx, DWORD PTR _tmpUTF16buf$[esp+652]
  000b1	51		 push	 ecx
  000b2	8d 54 24 28	 lea	 edx, DWORD PTR $T150549[esp+396]
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 _ConvertUTF16toUTF8

; 1351 : 	burn(tmpUTF16buf,sizeof(tmpUTF16buf));

  000bc	8d 94 24 08 01
	00 00		 lea	 edx, DWORD PTR _tmpUTF16buf$[esp+400]
  000c3	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  000c8	83 c4 14	 add	 esp, 20			; 00000014H
  000cb	8b f9		 mov	 edi, ecx
  000cd	8b c2		 mov	 eax, edx
  000cf	90		 npad	 1
$LL41@PasswordCh:
  000d0	c6 00 00	 mov	 BYTE PTR [eax], 0
  000d3	40		 inc	 eax
  000d4	83 ef 01	 sub	 edi, 1
  000d7	75 f7		 jne	 SHORT $LL41@PasswordCh
  000d9	8d a4 24 00 00
	00 00		 npad	 7
$LL32@PasswordCh:
  000e0	49		 dec	 ecx
  000e1	c6 02 00	 mov	 BYTE PTR [edx], 0
  000e4	42		 inc	 edx
  000e5	85 c9		 test	 ecx, ecx
  000e7	75 f7		 jne	 SHORT $LL32@PasswordCh

; 1352 : 	if (pwdChangeDlgMode == PCDM_CHANGE_PKCS5_PRF)

  000e9	a1 00 00 00 00	 mov	 eax, DWORD PTR _pwdChangeDlgMode
  000ee	83 f8 01	 cmp	 eax, 1
  000f1	75 09		 jne	 SHORT $LN30@PasswordCh

; 1353 : 		newKeyFilesEnabled = keyFilesEnabled;

  000f3	89 ac 24 94 01
	00 00		 mov	 DWORD PTR _newKeyFilesEnabled$[esp+376], ebp

; 1354 : 
; 1355 : 	switch (pwdChangeDlgMode)

  000fa	eb 09		 jmp	 SHORT $LN104@PasswordCh
$LN30@PasswordCh:
  000fc	85 c0		 test	 eax, eax
  000fe	7e 33		 jle	 SHORT $LN26@PasswordCh
  00100	83 f8 03	 cmp	 eax, 3
  00103	7f 2e		 jg	 SHORT $LN26@PasswordCh
$LN104@PasswordCh:

; 1356 : 	{
; 1357 : 	case PCDM_REMOVE_ALL_KEYFILES_FROM_VOL:
; 1358 : 	case PCDM_ADD_REMOVE_VOL_KEYFILES:
; 1359 : 	case PCDM_CHANGE_PKCS5_PRF:
; 1360 : 		memcpy (newPassword, password, sizeof (newPassword));

  00105	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0010a	8d 74 24 28	 lea	 esi, DWORD PTR _password$[esp+380]
  0010e	8d 7c 24 6c	 lea	 edi, DWORD PTR _newPassword$[esp+380]
  00112	f3 a5		 rep movsd
  00114	a4		 movsb

; 1361 : 		memcpy (newVerify, password, sizeof (newVerify));

  00115	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0011a	8d 74 24 28	 lea	 esi, DWORD PTR _password$[esp+380]
  0011e	8d bc 24 b0 00
	00 00		 lea	 edi, DWORD PTR _newVerify$[esp+380]
  00125	f3 a5		 rep movsd
  00127	a4		 movsb

; 1362 : 		break;

  00128	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  0012e	e9 d6 00 00 00	 jmp	 $LN23@PasswordCh
$LN26@PasswordCh:

; 1363 : 
; 1364 : 	default:
; 1365 : 		GetWindowTextW(GetDlgItem (hwndDlg, newPasswordId), tmpUTF16buf, sizeof(tmpUTF16buf)/sizeof(*tmpUTF16buf));

  00133	8b 8c 24 8c 01
	00 00		 mov	 ecx, DWORD PTR _newPasswordId$[esp+376]
  0013a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00140	6a 41		 push	 65			; 00000041H
  00142	8d 84 24 f8 00
	00 00		 lea	 eax, DWORD PTR _tmpUTF16buf$[esp+384]
  00149	50		 push	 eax
  0014a	51		 push	 ecx
  0014b	53		 push	 ebx
  0014c	ff d7		 call	 edi
  0014e	50		 push	 eax
  0014f	ff d6		 call	 esi

; 1366 : 		ConvertUTF16toUTF8s((const UTF16*)tmpUTF16buf,sizeof(tmpUTF16buf)/sizeof(*tmpUTF16buf),(UTF8*)newPassword,sizeof(newPassword)/sizeof(*newPassword),strictConversion);

  00151	6a 00		 push	 0
  00153	8d 54 24 70	 lea	 edx, DWORD PTR _newPassword$[esp+384]
  00157	8d 8c 24 b1 00
	00 00		 lea	 ecx, DWORD PTR _newPassword$[esp+449]
  0015e	51		 push	 ecx
  0015f	89 54 24 2c	 mov	 DWORD PTR $T150562[esp+388], edx
  00163	8d 84 24 fc 00
	00 00		 lea	 eax, DWORD PTR _tmpUTF16buf$[esp+388]
  0016a	8d 54 24 2c	 lea	 edx, DWORD PTR $T150562[esp+388]
  0016e	89 44 24 28	 mov	 DWORD PTR $T150561[esp+388], eax
  00172	52		 push	 edx
  00173	8d 84 24 04 02
	00 00		 lea	 eax, DWORD PTR _tmpUTF16buf$[esp+652]
  0017a	50		 push	 eax
  0017b	8d 4c 24 30	 lea	 ecx, DWORD PTR $T150561[esp+396]
  0017f	51		 push	 ecx
  00180	e8 00 00 00 00	 call	 _ConvertUTF16toUTF8

; 1367 : 		GetWindowTextW(GetDlgItem (hwndDlg, newVerifyId), tmpUTF16buf, sizeof(tmpUTF16buf)/sizeof(*tmpUTF16buf));

  00185	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR _newVerifyId$[esp+396]
  0018c	83 c4 14	 add	 esp, 20			; 00000014H
  0018f	6a 41		 push	 65			; 00000041H
  00191	8d 94 24 f8 00
	00 00		 lea	 edx, DWORD PTR _tmpUTF16buf$[esp+384]
  00198	52		 push	 edx
  00199	50		 push	 eax
  0019a	53		 push	 ebx
  0019b	ff d7		 call	 edi
  0019d	50		 push	 eax
  0019e	ff d6		 call	 esi

; 1368 : 		ConvertUTF16toUTF8s((const UTF16*)tmpUTF16buf,sizeof(tmpUTF16buf)/sizeof(*tmpUTF16buf),(UTF8*)newVerify,sizeof(newVerify)/sizeof(*newVerify),strictConversion);

  001a0	6a 00		 push	 0
  001a2	8d 8c 24 b4 00
	00 00		 lea	 ecx, DWORD PTR _newVerify$[esp+384]
  001a9	8d 84 24 f5 00
	00 00		 lea	 eax, DWORD PTR _newVerify$[esp+449]
  001b0	50		 push	 eax
  001b1	89 4c 24 18	 mov	 DWORD PTR $T150567[esp+388], ecx
  001b5	8d 94 24 fc 00
	00 00		 lea	 edx, DWORD PTR _tmpUTF16buf$[esp+388]
  001bc	8d 4c 24 18	 lea	 ecx, DWORD PTR $T150567[esp+388]
  001c0	89 54 24 1c	 mov	 DWORD PTR $T150566[esp+388], edx
  001c4	51		 push	 ecx
  001c5	8d 94 24 04 02
	00 00		 lea	 edx, DWORD PTR _tmpUTF16buf$[esp+652]
  001cc	52		 push	 edx
  001cd	8d 44 24 24	 lea	 eax, DWORD PTR $T150566[esp+396]
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 _ConvertUTF16toUTF8

; 1369 : 		burn(tmpUTF16buf,sizeof(tmpUTF16buf));

  001d7	8d 94 24 08 01
	00 00		 lea	 edx, DWORD PTR _tmpUTF16buf$[esp+400]
  001de	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  001e3	83 c4 14	 add	 esp, 20			; 00000014H
  001e6	8b f1		 mov	 esi, ecx
  001e8	8b c2		 mov	 eax, edx
  001ea	8d 9b 00 00 00
	00		 npad	 6
$LL49@PasswordCh:
  001f0	c6 00 00	 mov	 BYTE PTR [eax], 0
  001f3	40		 inc	 eax
  001f4	83 ee 01	 sub	 esi, 1
  001f7	75 f7		 jne	 SHORT $LL49@PasswordCh
  001f9	8d a4 24 00 00
	00 00		 npad	 7
$LL22@PasswordCh:
  00200	49		 dec	 ecx
  00201	c6 02 00	 mov	 BYTE PTR [edx], 0
  00204	42		 inc	 edx
  00205	85 c9		 test	 ecx, ecx
  00207	75 f7		 jne	 SHORT $LL22@PasswordCh
$LN23@PasswordCh:

; 1370 : 	}
; 1371 : 
; 1372 : 	if (!keyFilesEnabled && strlen (password) < MIN_PASSWORD)

  00209	33 f6		 xor	 esi, esi
  0020b	3b ee		 cmp	 ebp, esi
  0020d	75 15		 jne	 SHORT $LN124@PasswordCh
  0020f	8d 44 24 28	 lea	 eax, DWORD PTR _password$[esp+380]
  00213	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL105@PasswordCh:
  00216	8a 08		 mov	 cl, BYTE PTR [eax]
  00218	40		 inc	 eax
  00219	84 c9		 test	 cl, cl
  0021b	75 f9		 jne	 SHORT $LL105@PasswordCh
  0021d	2b c2		 sub	 eax, edx
  0021f	83 f8 01	 cmp	 eax, 1

; 1373 : 		bEnable = FALSE;

  00222	72 5a		 jb	 SHORT $LN138@PasswordCh
$LN124@PasswordCh:

; 1374 : 	else if (strcmp (newPassword, newVerify) != 0)

  00224	8d 94 24 b0 00
	00 00		 lea	 edx, DWORD PTR _newVerify$[esp+380]
  0022b	8d 4c 24 6c	 lea	 ecx, DWORD PTR _newPassword$[esp+380]
  0022f	90		 npad	 1
$LL106@PasswordCh:
  00230	8a 01		 mov	 al, BYTE PTR [ecx]
  00232	3a 02		 cmp	 al, BYTE PTR [edx]
  00234	75 1a		 jne	 SHORT $LN107@PasswordCh
  00236	84 c0		 test	 al, al
  00238	74 12		 je	 SHORT $LN108@PasswordCh
  0023a	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  0023d	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00240	75 0e		 jne	 SHORT $LN107@PasswordCh
  00242	83 c1 02	 add	 ecx, 2
  00245	83 c2 02	 add	 edx, 2
  00248	84 c0		 test	 al, al
  0024a	75 e4		 jne	 SHORT $LL106@PasswordCh
$LN108@PasswordCh:
  0024c	33 c0		 xor	 eax, eax
  0024e	eb 05		 jmp	 SHORT $LN109@PasswordCh
$LN107@PasswordCh:
  00250	1b c0		 sbb	 eax, eax
  00252	83 d8 ff	 sbb	 eax, -1
$LN109@PasswordCh:
  00255	3b c6		 cmp	 eax, esi

; 1375 : 		bEnable = FALSE;

  00257	75 25		 jne	 SHORT $LN138@PasswordCh

; 1376 : 	else if (!newKeyFilesEnabled && strlen (newPassword) < MIN_PASSWORD)

  00259	39 b4 24 94 01
	00 00		 cmp	 DWORD PTR _newKeyFilesEnabled$[esp+376], esi
  00260	75 20		 jne	 SHORT $LN15@PasswordCh
  00262	8d 44 24 6c	 lea	 eax, DWORD PTR _newPassword$[esp+380]
  00266	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00269	8d a4 24 00 00
	00 00		 npad	 7
$LL110@PasswordCh:
  00270	8a 08		 mov	 cl, BYTE PTR [eax]
  00272	40		 inc	 eax
  00273	84 c9		 test	 cl, cl
  00275	75 f9		 jne	 SHORT $LL110@PasswordCh
  00277	2b c2		 sub	 eax, edx
  00279	83 f8 01	 cmp	 eax, 1
  0027c	73 04		 jae	 SHORT $LN15@PasswordCh
$LN138@PasswordCh:

; 1377 : 		bEnable = FALSE;

  0027e	89 74 24 0c	 mov	 DWORD PTR _bEnable$[esp+380], esi
$LN15@PasswordCh:

; 1378 : 
; 1379 : 	burn (password, sizeof (password));

  00282	8d 54 24 28	 lea	 edx, DWORD PTR _password$[esp+380]
  00286	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  0028b	8b f1		 mov	 esi, ecx
  0028d	8b c2		 mov	 eax, edx
  0028f	90		 npad	 1
$LL53@PasswordCh:
  00290	c6 00 00	 mov	 BYTE PTR [eax], 0
  00293	40		 inc	 eax
  00294	83 ee 01	 sub	 esi, 1
  00297	75 f7		 jne	 SHORT $LL53@PasswordCh
  00299	8d a4 24 00 00
	00 00		 npad	 7
$LL12@PasswordCh:
  002a0	49		 dec	 ecx
  002a1	c6 02 00	 mov	 BYTE PTR [edx], 0
  002a4	42		 inc	 edx
  002a5	85 c9		 test	 ecx, ecx
  002a7	75 f7		 jne	 SHORT $LL12@PasswordCh

; 1380 : 	burn (newPassword, sizeof (newPassword));

  002a9	8d 54 24 6c	 lea	 edx, DWORD PTR _newPassword$[esp+380]
  002ad	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  002b2	8b f1		 mov	 esi, ecx
  002b4	8b c2		 mov	 eax, edx
$LL57@PasswordCh:
  002b6	c6 00 00	 mov	 BYTE PTR [eax], 0
  002b9	40		 inc	 eax
  002ba	83 ee 01	 sub	 esi, 1
  002bd	75 f7		 jne	 SHORT $LL57@PasswordCh
  002bf	90		 npad	 1
$LL7@PasswordCh:
  002c0	49		 dec	 ecx
  002c1	c6 02 00	 mov	 BYTE PTR [edx], 0
  002c4	42		 inc	 edx
  002c5	85 c9		 test	 ecx, ecx
  002c7	75 f7		 jne	 SHORT $LL7@PasswordCh

; 1381 : 	burn (newVerify, sizeof (newVerify));

  002c9	8d 94 24 b0 00
	00 00		 lea	 edx, DWORD PTR _newVerify$[esp+380]
  002d0	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  002d5	8b f1		 mov	 esi, ecx
  002d7	8b c2		 mov	 eax, edx
  002d9	8d a4 24 00 00
	00 00		 npad	 7
$LL61@PasswordCh:
  002e0	c6 00 00	 mov	 BYTE PTR [eax], 0
  002e3	40		 inc	 eax
  002e4	83 ee 01	 sub	 esi, 1
  002e7	75 f7		 jne	 SHORT $LL61@PasswordCh
  002e9	8d a4 24 00 00
	00 00		 npad	 7
$LL2@PasswordCh:
  002f0	49		 dec	 ecx
  002f1	c6 02 00	 mov	 BYTE PTR [edx], 0
  002f4	42		 inc	 edx
  002f5	85 c9		 test	 ecx, ecx
  002f7	75 f7		 jne	 SHORT $LL2@PasswordCh

; 1382 : 
; 1383 : 	EnableWindow (GetDlgItem (hwndDlg, button), bEnable);

  002f9	8b 4c 24 0c	 mov	 ecx, DWORD PTR _bEnable$[esp+380]
  002fd	8b 94 24 80 01
	00 00		 mov	 edx, DWORD PTR _button$[esp+376]
  00304	51		 push	 ecx
  00305	52		 push	 edx
  00306	53		 push	 ebx
  00307	ff d7		 call	 edi
  00309	50		 push	 eax
  0030a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 1384 : }

  00310	8b 8c 24 78 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+380]
  00317	5f		 pop	 edi
  00318	5e		 pop	 esi
  00319	5d		 pop	 ebp
  0031a	33 cc		 xor	 ecx, esp
  0031c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00321	81 c4 70 01 00
	00		 add	 esp, 368		; 00000170H
  00327	c3		 ret	 0
?PasswordChangeEnable@@YAXPAUHWND__@@HHHHHH@Z ENDP	; PasswordChangeEnable
_TEXT	ENDS
PUBLIC	??_C@_0BB@MMDPAFIK@CANNOT_SET_TIMER?$AA@	; `string'
PUBLIC	??_C@_0BK@EBNLJAJI@IDD_PCDM_CHANGE_PKCS5_PRF?$AA@ ; `string'
PUBLIC	??_C@_0CB@POIELMAL@IDD_PCDM_ADD_REMOVE_VOL_KEYFILES@ ; `string'
PUBLIC	??_C@_0CG@JOKOOJHO@IDD_PCDM_REMOVE_ALL_KEYFILES_FRO@ ; `string'
PUBLIC	??_C@_09ECKOGGEP@UNCHANGED?$AA@			; `string'
PUBLIC	??_C@_0BH@OAALJAFL@IDD_PASSWORDCHANGE_DLG?$AA@	; `string'
PUBLIC	??_C@_0BJ@CPHEENHA@UNSUPPORTED_CHARS_IN_PWD?$AA@ ; `string'
PUBLIC	??_C@_0CG@FCGANOF@ALGO_NOT_SUPPORTED_FOR_SYS_ENCRY@ ; `string'
PUBLIC	??_C@_0CK@PHDAOPJF@KEYFILES_NOT_SUPPORTED_FOR_SYS_E@ ; `string'
PUBLIC	??_C@_0CF@OEJEFNLJ@ALT_KEY_CHARS_NOT_FOR_SYS_ENCRYP@ ; `string'
PUBLIC	??_C@_0CA@HGCGAMEK@KEYB_LAYOUT_SYS_ENC_EXPLANATION?$AA@ ; `string'
PUBLIC	??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@		; `string'
PUBLIC	??_C@_0BN@MNCKOJDH@KEYB_LAYOUT_CHANGE_PREVENTED?$AA@ ; `string'
PUBLIC	??_C@_0CL@KAEHBIEI@CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_@ ; `string'
PUBLIC	??_C@_08OKJEGFFL@00000409?$AA@			; `string'
PUBLIC	??_C@_11LOCGONAA@?$AA?$AA@			; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_PasswordChangeDlgProc@16
EXTRN	_CheckCapsLock:PROC
EXTRN	__imp__SetTimer@16:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	_ToBootPwdField:PROC
EXTRN	_get_pkcs5_prf_name:PROC
EXTRN	_HashIsDeprecated:PROC
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	_LocalizeDialog:PROC
EXTRN	_KeyFileRemoveAll:PROC
EXTRN	_NormalCursor:PROC
EXTRN	_UacChangePwd:PROC
EXTRN	_IsVolumeDeviceHosted:PROC
EXTRN	_IsUacSupported:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	_ChangePwd:PROC
EXTRN	?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z:PROC ; CipherShed::BootEncryption::ChangePassword
EXTRN	_KeyFilesApply:PROC
EXTRN	_WaitCursor:PROC
EXTRN	_CheckPasswordLength:PROC
EXTRN	_CheckPasswordCharEncoding:PROC
EXTRN	__imp__GetParent@4:PROC
EXTRN	__imp__InvalidateRect@12:PROC
EXTRN	_SelectAlgo:PROC
EXTRN	_Info:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	_GetCheckBox:PROC
EXTRN	_VerifyPasswordAndUpdate2:PROC
EXTRN	_SetCheckBox:PROC
EXTRN	__imp__DialogBoxParamW@20:PROC
EXTRN	_hInst:DWORD
EXTRN	_KeyFilesDlgProc@16:PROC
EXTRN	_Warning:PROC
EXTRN	_FirstKeyFile:DWORD
EXTRN	_KeyFilesEnable:DWORD
EXTRN	_RestoreDefaultKeyFilesParam:PROC
EXTRN	__imp__GetAsyncKeyState@4:PROC
EXTRN	__imp__MessageBoxW@16:PROC
EXTRN	_lpszTitle:DWORD
EXTRN	__imp__EndDialog@8:PROC
EXTRN	__imp__KillTimer@8:PROC
EXTRN	__imp__LoadKeyboardLayoutA@8:PROC
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	__imp__GetKeyboardLayout@4:PROC
EXTRN	__chkstk:PROC
;	COMDAT ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A
; File c:\program files\microsoft sdks\windows\v7.0\include\winnt.h
_BSS	SEGMENT
?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A DQ 01H DUP (?) ; `PasswordChangeDlgProc'::`2'::newKeyFilesParam
_BSS	ENDS
;	COMDAT ??_C@_0BB@MMDPAFIK@CANNOT_SET_TIMER?$AA@
CONST	SEGMENT
??_C@_0BB@MMDPAFIK@CANNOT_SET_TIMER?$AA@ DB 'CANNOT_SET_TIMER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EBNLJAJI@IDD_PCDM_CHANGE_PKCS5_PRF?$AA@
CONST	SEGMENT
??_C@_0BK@EBNLJAJI@IDD_PCDM_CHANGE_PKCS5_PRF?$AA@ DB 'IDD_PCDM_CHANGE_PKC'
	DB	'S5_PRF', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@POIELMAL@IDD_PCDM_ADD_REMOVE_VOL_KEYFILES@
CONST	SEGMENT
??_C@_0CB@POIELMAL@IDD_PCDM_ADD_REMOVE_VOL_KEYFILES@ DB 'IDD_PCDM_ADD_REM'
	DB	'OVE_VOL_KEYFILES', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@JOKOOJHO@IDD_PCDM_REMOVE_ALL_KEYFILES_FRO@
CONST	SEGMENT
??_C@_0CG@JOKOOJHO@IDD_PCDM_REMOVE_ALL_KEYFILES_FRO@ DB 'IDD_PCDM_REMOVE_'
	DB	'ALL_KEYFILES_FROM_VOL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09ECKOGGEP@UNCHANGED?$AA@
CONST	SEGMENT
??_C@_09ECKOGGEP@UNCHANGED?$AA@ DB 'UNCHANGED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OAALJAFL@IDD_PASSWORDCHANGE_DLG?$AA@
CONST	SEGMENT
??_C@_0BH@OAALJAFL@IDD_PASSWORDCHANGE_DLG?$AA@ DB 'IDD_PASSWORDCHANGE_DLG'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CPHEENHA@UNSUPPORTED_CHARS_IN_PWD?$AA@
CONST	SEGMENT
??_C@_0BJ@CPHEENHA@UNSUPPORTED_CHARS_IN_PWD?$AA@ DB 'UNSUPPORTED_CHARS_IN'
	DB	'_PWD', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FCGANOF@ALGO_NOT_SUPPORTED_FOR_SYS_ENCRY@
CONST	SEGMENT
??_C@_0CG@FCGANOF@ALGO_NOT_SUPPORTED_FOR_SYS_ENCRY@ DB 'ALGO_NOT_SUPPORTE'
	DB	'D_FOR_SYS_ENCRYPTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PHDAOPJF@KEYFILES_NOT_SUPPORTED_FOR_SYS_E@
CONST	SEGMENT
??_C@_0CK@PHDAOPJF@KEYFILES_NOT_SUPPORTED_FOR_SYS_E@ DB 'KEYFILES_NOT_SUP'
	DB	'PORTED_FOR_SYS_ENCRYPTION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OEJEFNLJ@ALT_KEY_CHARS_NOT_FOR_SYS_ENCRYP@
CONST	SEGMENT
??_C@_0CF@OEJEFNLJ@ALT_KEY_CHARS_NOT_FOR_SYS_ENCRYP@ DB 'ALT_KEY_CHARS_NO'
	DB	'T_FOR_SYS_ENCRYPTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HGCGAMEK@KEYB_LAYOUT_SYS_ENC_EXPLANATION?$AA@
CONST	SEGMENT
??_C@_0CA@HGCGAMEK@KEYB_LAYOUT_SYS_ENC_EXPLANATION?$AA@ DB 'KEYB_LAYOUT_S'
	DB	'YS_ENC_EXPLANATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@ DB 0aH, 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MNCKOJDH@KEYB_LAYOUT_CHANGE_PREVENTED?$AA@
CONST	SEGMENT
??_C@_0BN@MNCKOJDH@KEYB_LAYOUT_CHANGE_PREVENTED?$AA@ DB 'KEYB_LAYOUT_CHAN'
	DB	'GE_PREVENTED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KAEHBIEI@CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_@
CONST	SEGMENT
??_C@_0CL@KAEHBIEI@CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_@ DB 'CANT_CHANGE_KEYB'
	DB	'_LAYOUT_FOR_SYS_ENCRYPTION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OKJEGFFL@00000409?$AA@
CONST	SEGMENT
??_C@_08OKJEGFFL@00000409?$AA@ DB '00000409', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_11LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_PasswordChangeDlgProc@16$3 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffd8H
	DD	FLAT:__catch$_PasswordChangeDlgProc@16$1
__unwindtable$_PasswordChangeDlgProc@16 DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_PasswordChangeDlgProc@16 DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_PasswordChangeDlgProc@16$3
__ehfuncinfo$_PasswordChangeDlgProc@16 DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_PasswordChangeDlgProc@16
	DD	01H
	DD	FLAT:__tryblocktable$_PasswordChangeDlgProc@16
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
xdata$x	ENDS
;	COMDAT _PasswordChangeDlgProc@16
_TEXT	SEGMENT
_e$136502 = -40						; size = 4
_hwndDlg$GSCopy$ = -36					; size = 4
_param$136421 = -32					; size = 8
_hParent$136452 = -24					; size = 4
_new_hash_algo_id$136447 = -24				; size = 4
_i$136359 = -24						; size = 4
_nStatus$136455 = -20					; size = 4
_pkcs5$136456 = -20					; size = 4
_hComboBox$136358 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_oldPassword$136453 = 0					; size = 72
_newPassword$136454 = 72				; size = 72
_szTmp$136406 = 144					; size = 8192
_szTmp$136412 = 8336					; size = 8192
_tmp$136524 = 16528					; size = 130
_tmp$136416 = 16660					; size = 130
_tmp$136402 = 16792					; size = 130
_tmpUTF16buf$136457 = 16924				; size = 130
__$ArrayPad$ = 17056					; size = 4
_hwndDlg$ = 17068					; size = 4
_msg$ = 17072						; size = 4
_wParam$ = 17076					; size = 4
_lParam$ = 17080					; size = 4
_PasswordChangeDlgProc@16 PROC				; COMDAT

; 1391 : {

  00000	55		 push	 ebp
  00001	8d ac 24 5c bd
	ff ff		 lea	 ebp, DWORD PTR [esp-17060]
  00008	b8 a4 42 00 00	 mov	 eax, 17060		; 000042a4H
  0000d	e8 00 00 00 00	 call	 __chkstk
  00012	6a ff		 push	 -1
  00014	68 00 00 00 00	 push	 __ehhandler$_PasswordChangeDlgProc@16
  00019	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001f	50		 push	 eax
  00020	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00028	33 c5		 xor	 eax, ebp
  0002a	89 85 a0 42 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00030	53		 push	 ebx
  00031	56		 push	 esi
  00032	57		 push	 edi
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1392 : 	static KeyFilesDlgParam newKeyFilesParam;
; 1393 : 
; 1394 : 	WORD lw = LOWORD (wParam);
; 1395 : 	WORD hw = HIWORD (wParam);

  00040	8b 85 b4 42 00
	00		 mov	 eax, DWORD PTR _wParam$[ebp]

; 1396 : 
; 1397 : 	switch (msg)

  00046	8b 8d b0 42 00
	00		 mov	 ecx, DWORD PTR _msg$[ebp]
  0004c	8b 9d ac 42 00
	00		 mov	 ebx, DWORD PTR _hwndDlg$[ebp]
  00052	8b d0		 mov	 edx, eax
  00054	c1 ea 10	 shr	 edx, 16			; 00000010H
  00057	81 e9 10 01 00
	00		 sub	 ecx, 272		; 00000110H
  0005d	89 5d dc	 mov	 DWORD PTR _hwndDlg$GSCopy$[ebp], ebx
  00060	0f 84 0b 0b 00
	00		 je	 $LN84@PasswordCh@2
  00066	83 e9 01	 sub	 ecx, 1
  00069	0f 84 cd 02 00
	00		 je	 $LN60@PasswordCh@2
  0006f	83 e9 02	 sub	 ecx, 2

; 1877 : 		}
; 1878 : 		return 0;
; 1879 : 	}
; 1880 : 
; 1881 : 	return 0;

  00072	0f 85 30 0f 00
	00		 jne	 $LN202@PasswordCh@2

; 1525 : 		}
; 1526 : 
; 1527 : 	case WM_TIMER:
; 1528 : 		switch (wParam)

  00078	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H

; 1590 : 		}
; 1591 : 		return 0;

  0007d	0f 85 25 0f 00
	00		 jne	 $LN202@PasswordCh@2

; 1529 : 		{
; 1530 : 		case TIMER_ID_KEYB_LAYOUT_GUARD:
; 1531 : 			if (bSysEncPwdChangeDlgMode)

  00083	39 0d 00 00 00
	00		 cmp	 DWORD PTR _bSysEncPwdChangeDlgMode, ecx
  00089	0f 84 a3 02 00
	00		 je	 $LN61@PasswordCh@2

; 1532 : 			{
; 1533 : 				DWORD keybLayout = (DWORD) GetKeyboardLayout (NULL);

  0008f	51		 push	 ecx
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyboardLayout@4

; 1534 : 
; 1535 : 				/* Watch the keyboard layout */
; 1536 : 
; 1537 : 				if (keybLayout != 0x00000409 && keybLayout != 0x04090409)

  00096	3d 09 04 00 00	 cmp	 eax, 1033		; 00000409H
  0009b	0f 84 a1 01 00
	00		 je	 $LN64@PasswordCh@2
  000a1	3d 09 04 09 04	 cmp	 eax, 67699721		; 04090409H
  000a6	0f 84 96 01 00
	00		 je	 $LN64@PasswordCh@2

; 1538 : 				{
; 1539 : 					// Keyboard layout is not standard US
; 1540 : 
; 1541 : 					// Attempt to wipe passwords stored in the input field buffers
; 1542 : 					WCHAR tmp[MAX_PASSWORD+1];
; 1543 : 					memset (tmp, 0x20, sizeof(tmp)); //0x20 = ASCII space or 0x2020 = Unicode DAGGER

  000ac	68 82 00 00 00	 push	 130			; 00000082H
  000b1	8d 85 98 41 00
	00		 lea	 eax, DWORD PTR _tmp$136402[ebp]
  000b7	6a 20		 push	 32			; 00000020H
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _memset

; 1544 : 					tmp [MAX_PASSWORD] = 0;
; 1545 : 					SetWindowTextW(GetDlgItem (hwndDlg, IDC_OLD_PASSWORD), tmp);

  000bf	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  000c5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c8	8d 95 98 41 00
	00		 lea	 edx, DWORD PTR _tmp$136402[ebp]
  000ce	52		 push	 edx
  000cf	68 ec 03 00 00	 push	 1004			; 000003ecH
  000d4	33 c9		 xor	 ecx, ecx
  000d6	53		 push	 ebx
  000d7	66 89 8d 18 42
	00 00		 mov	 WORD PTR _tmp$136402[ebp+128], cx
  000de	ff d6		 call	 esi
  000e0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  000e6	50		 push	 eax
  000e7	ff d7		 call	 edi

; 1546 : 					SetWindowTextW(GetDlgItem (hwndDlg, IDC_PASSWORD), tmp);

  000e9	8d 85 98 41 00
	00		 lea	 eax, DWORD PTR _tmp$136402[ebp]
  000ef	50		 push	 eax
  000f0	68 0b 04 00 00	 push	 1035			; 0000040bH
  000f5	53		 push	 ebx
  000f6	ff d6		 call	 esi
  000f8	50		 push	 eax
  000f9	ff d7		 call	 edi

; 1547 : 					SetWindowTextW(GetDlgItem (hwndDlg, IDC_VERIFY), tmp);

  000fb	8d 8d 98 41 00
	00		 lea	 ecx, DWORD PTR _tmp$136402[ebp]
  00101	51		 push	 ecx
  00102	68 ea 03 00 00	 push	 1002			; 000003eaH
  00107	53		 push	 ebx
  00108	ff d6		 call	 esi
  0010a	50		 push	 eax
  0010b	ff d7		 call	 edi

; 1548 : 
; 1549 : 					SetWindowTextW(GetDlgItem (hwndDlg, IDC_OLD_PASSWORD), L"");

  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  00112	68 ec 03 00 00	 push	 1004			; 000003ecH
  00117	53		 push	 ebx
  00118	ff d6		 call	 esi
  0011a	50		 push	 eax
  0011b	ff d7		 call	 edi

; 1550 : 					SetWindowTextW(GetDlgItem (hwndDlg, IDC_PASSWORD), L"");

  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  00122	68 0b 04 00 00	 push	 1035			; 0000040bH
  00127	53		 push	 ebx
  00128	ff d6		 call	 esi
  0012a	50		 push	 eax
  0012b	ff d7		 call	 edi

; 1551 : 					SetWindowTextW(GetDlgItem (hwndDlg, IDC_VERIFY), L"");

  0012d	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  00132	68 ea 03 00 00	 push	 1002			; 000003eaH
  00137	53		 push	 ebx
  00138	ff d6		 call	 esi
  0013a	50		 push	 eax
  0013b	ff d7		 call	 edi

; 1552 : 
; 1553 : 					keybLayout = (DWORD) LoadKeyboardLayout ("00000409", KLF_ACTIVATE);

  0013d	6a 01		 push	 1
  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_08OKJEGFFL@00000409?$AA@
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadKeyboardLayoutA@8

; 1554 : 
; 1555 : 					if (keybLayout != 0x00000409 && keybLayout != 0x04090409)

  0014a	3d 09 04 00 00	 cmp	 eax, 1033		; 00000409H
  0014f	74 33		 je	 SHORT $LN63@PasswordCh@2
  00151	3d 09 04 09 04	 cmp	 eax, 67699721		; 04090409H
  00156	74 2c		 je	 SHORT $LN63@PasswordCh@2

; 1556 : 					{
; 1557 : 						KillTimer (hwndDlg, TIMER_ID_KEYB_LAYOUT_GUARD);

  00158	68 00 01 00 00	 push	 256			; 00000100H
  0015d	53		 push	 ebx
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 1558 : 						Error ("CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_ENCRYPTION");

  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@KAEHBIEI@CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_@
  00169	e8 00 00 00 00	 call	 _Error
  0016e	83 c4 04	 add	 esp, 4

; 1559 : 						EndDialog (hwndDlg, IDCANCEL);

  00171	6a 02		 push	 2
  00173	53		 push	 ebx
  00174	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
$LN207@PasswordCh@2:

; 1560 : 						return 1;

  0017a	b8 01 00 00 00	 mov	 eax, 1
  0017f	e9 26 0e 00 00	 jmp	 $LN87@PasswordCh@2
$LN63@PasswordCh@2:

; 1561 : 					}
; 1562 : 
; 1563 : 					bKeyboardLayoutChanged = TRUE;
; 1564 : 
; 1565 : 					wchar_t szTmp [4096];
; 1566 : 					wcscpy (szTmp, GetString ("KEYB_LAYOUT_CHANGE_PREVENTED"));

  00184	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MNCKOJDH@KEYB_LAYOUT_CHANGE_PREVENTED?$AA@
  00189	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, 1 ; bKeyboardLayoutChanged
  00193	e8 00 00 00 00	 call	 _GetString
  00198	83 c4 04	 add	 esp, 4
  0019b	8d 95 90 00 00
	00		 lea	 edx, DWORD PTR _szTmp$136406[ebp]
$LL89@PasswordCh@2:
  001a1	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  001a4	66 89 0a	 mov	 WORD PTR [edx], cx
  001a7	83 c0 02	 add	 eax, 2
  001aa	83 c2 02	 add	 edx, 2
  001ad	66 85 c9	 test	 cx, cx
  001b0	75 ef		 jne	 SHORT $LL89@PasswordCh@2

; 1567 : 					wcscat (szTmp, L"\n\n");

  001b2	8d 85 90 00 00
	00		 lea	 eax, DWORD PTR _szTmp$136406[ebp]
  001b8	83 c0 fe	 add	 eax, -2			; fffffffeH
  001bb	eb 03 8d 49 00	 npad	 5
$LL172@PasswordCh@2:
  001c0	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  001c4	83 c0 02	 add	 eax, 2
  001c7	66 85 c9	 test	 cx, cx
  001ca	75 f4		 jne	 SHORT $LL172@PasswordCh@2
  001cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  001d2	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@+4
  001d9	89 10		 mov	 DWORD PTR [eax], edx

; 1568 : 					wcscat (szTmp, GetString ("KEYB_LAYOUT_SYS_ENC_EXPLANATION"));

  001db	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HGCGAMEK@KEYB_LAYOUT_SYS_ENC_EXPLANATION?$AA@
  001e0	66 89 48 04	 mov	 WORD PTR [eax+4], cx
  001e4	e8 00 00 00 00	 call	 _GetString
  001e9	83 c4 04	 add	 esp, 4
  001ec	8b d0		 mov	 edx, eax
  001ee	8b ff		 npad	 2
$LL173@PasswordCh@2:
  001f0	66 8b 08	 mov	 cx, WORD PTR [eax]
  001f3	83 c0 02	 add	 eax, 2
  001f6	66 85 c9	 test	 cx, cx
  001f9	75 f5		 jne	 SHORT $LL173@PasswordCh@2
  001fb	8d bd 90 00 00
	00		 lea	 edi, DWORD PTR _szTmp$136406[ebp]
  00201	2b c2		 sub	 eax, edx
  00203	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL174@PasswordCh@2:
  00206	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  0020a	83 c7 02	 add	 edi, 2
  0020d	66 85 c9	 test	 cx, cx
  00210	75 f4		 jne	 SHORT $LL174@PasswordCh@2
  00212	8b c8		 mov	 ecx, eax
  00214	c1 e9 02	 shr	 ecx, 2
  00217	8b f2		 mov	 esi, edx

; 1569 : 					MessageBoxW (MainDlg, szTmp, lpszTitle, MB_ICONWARNING | MB_SETFOREGROUND | MB_TOPMOST);

  00219	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  0021f	f3 a5		 rep movsd
  00221	8b c8		 mov	 ecx, eax
  00223	68 30 00 05 00	 push	 327728			; 00050030H
  00228	83 e1 03	 and	 ecx, 3
  0022b	52		 push	 edx
  0022c	8d 85 90 00 00
	00		 lea	 eax, DWORD PTR _szTmp$136406[ebp]
  00232	f3 a4		 rep movsb
  00234	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0023a	50		 push	 eax
  0023b	51		 push	 ecx
  0023c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN64@PasswordCh@2:

; 1570 : 				}
; 1571 : 
; 1572 : 
; 1573 : 				/* Watch the right Alt key (which is used to enter various characters on non-US keyboards) */
; 1574 : 
; 1575 : 				if (bKeyboardLayoutChanged && !bKeybLayoutAltKeyWarningShown)

  00242	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, 0 ; bKeyboardLayoutChanged
  00249	0f 84 e3 00 00
	00		 je	 $LN61@PasswordCh@2
  0024f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bKeybLayoutAltKeyWarningShown@@3HA, 0 ; bKeybLayoutAltKeyWarningShown
  00256	0f 85 d6 00 00
	00		 jne	 $LN61@PasswordCh@2

; 1576 : 				{
; 1577 : 					if (GetAsyncKeyState (VK_RMENU) < 0)

  0025c	68 a5 00 00 00	 push	 165			; 000000a5H
  00261	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetAsyncKeyState@4
  00267	66 85 c0	 test	 ax, ax
  0026a	0f 8d c2 00 00
	00		 jge	 $LN61@PasswordCh@2

; 1578 : 					{
; 1579 : 						bKeybLayoutAltKeyWarningShown = TRUE;
; 1580 : 
; 1581 : 						wchar_t szTmp [4096];
; 1582 : 						wcscpy (szTmp, GetString ("ALT_KEY_CHARS_NOT_FOR_SYS_ENCRYPTION"));

  00270	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@OEJEFNLJ@ALT_KEY_CHARS_NOT_FOR_SYS_ENCRYP@
  00275	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bKeybLayoutAltKeyWarningShown@@3HA, 1 ; bKeybLayoutAltKeyWarningShown
  0027f	e8 00 00 00 00	 call	 _GetString
  00284	83 c4 04	 add	 esp, 4
  00287	8d 95 90 20 00
	00		 lea	 edx, DWORD PTR _szTmp$136412[ebp]
  0028d	8d 49 00	 npad	 3
$LL90@PasswordCh@2:
  00290	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00293	66 89 0a	 mov	 WORD PTR [edx], cx
  00296	83 c0 02	 add	 eax, 2
  00299	83 c2 02	 add	 edx, 2
  0029c	66 85 c9	 test	 cx, cx
  0029f	75 ef		 jne	 SHORT $LL90@PasswordCh@2

; 1583 : 						wcscat (szTmp, L"\n\n");

  002a1	8d 85 90 20 00
	00		 lea	 eax, DWORD PTR _szTmp$136412[ebp]
  002a7	83 c0 fe	 add	 eax, -2			; fffffffeH
  002aa	8d 9b 00 00 00
	00		 npad	 6
$LL175@PasswordCh@2:
  002b0	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  002b4	83 c0 02	 add	 eax, 2
  002b7	66 85 c9	 test	 cx, cx
  002ba	75 f4		 jne	 SHORT $LL175@PasswordCh@2
  002bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  002c2	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@+4
  002c9	89 10		 mov	 DWORD PTR [eax], edx

; 1584 : 						wcscat (szTmp, GetString ("KEYB_LAYOUT_SYS_ENC_EXPLANATION"));

  002cb	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HGCGAMEK@KEYB_LAYOUT_SYS_ENC_EXPLANATION?$AA@
  002d0	66 89 48 04	 mov	 WORD PTR [eax+4], cx
  002d4	e8 00 00 00 00	 call	 _GetString
  002d9	83 c4 04	 add	 esp, 4
  002dc	8b d0		 mov	 edx, eax
  002de	8b ff		 npad	 2
$LL176@PasswordCh@2:
  002e0	66 8b 08	 mov	 cx, WORD PTR [eax]
  002e3	83 c0 02	 add	 eax, 2
  002e6	66 85 c9	 test	 cx, cx
  002e9	75 f5		 jne	 SHORT $LL176@PasswordCh@2
  002eb	8d bd 90 20 00
	00		 lea	 edi, DWORD PTR _szTmp$136412[ebp]
  002f1	2b c2		 sub	 eax, edx
  002f3	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL177@PasswordCh@2:
  002f6	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  002fa	83 c7 02	 add	 edi, 2
  002fd	66 85 c9	 test	 cx, cx
  00300	75 f4		 jne	 SHORT $LL177@PasswordCh@2
  00302	8b c8		 mov	 ecx, eax
  00304	c1 e9 02	 shr	 ecx, 2
  00307	8b f2		 mov	 esi, edx

; 1585 : 						MessageBoxW (MainDlg, szTmp, lpszTitle, MB_ICONINFORMATION  | MB_SETFOREGROUND | MB_TOPMOST);

  00309	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  0030f	f3 a5		 rep movsd
  00311	8b c8		 mov	 ecx, eax
  00313	68 40 00 05 00	 push	 327744			; 00050040H
  00318	83 e1 03	 and	 ecx, 3
  0031b	52		 push	 edx
  0031c	8d 85 90 20 00
	00		 lea	 eax, DWORD PTR _szTmp$136412[ebp]
  00322	f3 a4		 rep movsb
  00324	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0032a	50		 push	 eax
  0032b	51		 push	 ecx
  0032c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN61@PasswordCh@2:

; 1586 : 					}
; 1587 : 				}
; 1588 : 			}
; 1589 : 			return 1;

  00332	b8 01 00 00 00	 mov	 eax, 1
  00337	e9 6e 0c 00 00	 jmp	 $LN87@PasswordCh@2
$LN60@PasswordCh@2:

; 1592 : 
; 1593 : 	case WM_COMMAND:
; 1594 : 		if (lw == IDCANCEL)

  0033c	66 83 f8 02	 cmp	 ax, 2
  00340	75 79		 jne	 SHORT $LN59@PasswordCh@2

; 1595 : 		{
; 1596 : 			// Attempt to wipe passwords stored in the input field buffers
; 1597 : 			WCHAR tmp[MAX_PASSWORD+1];
; 1598 : 			memset (tmp, 0x20, sizeof(tmp)); //0x20 = ASCII space or 0x2020 = Unicode DAGGER

  00342	68 82 00 00 00	 push	 130			; 00000082H
  00347	8d 95 14 41 00
	00		 lea	 edx, DWORD PTR _tmp$136416[ebp]
  0034d	6a 20		 push	 32			; 00000020H
  0034f	52		 push	 edx
  00350	e8 00 00 00 00	 call	 _memset

; 1599 : 			tmp[MAX_PASSWORD] = 0;
; 1600 : 			SetWindowTextW(GetDlgItem (hwndDlg, IDC_PASSWORD), tmp);	

  00355	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0035b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0035e	8d 8d 14 41 00
	00		 lea	 ecx, DWORD PTR _tmp$136416[ebp]
  00364	51		 push	 ecx
  00365	68 0b 04 00 00	 push	 1035			; 0000040bH
  0036a	33 c0		 xor	 eax, eax
  0036c	53		 push	 ebx
  0036d	66 89 85 94 41
	00 00		 mov	 WORD PTR _tmp$136416[ebp+128], ax
  00374	ff d6		 call	 esi
  00376	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  0037c	50		 push	 eax
  0037d	ff d7		 call	 edi

; 1601 : 			SetWindowTextW(GetDlgItem (hwndDlg, IDC_OLD_PASSWORD), tmp);	

  0037f	8d 95 14 41 00
	00		 lea	 edx, DWORD PTR _tmp$136416[ebp]
  00385	52		 push	 edx
  00386	68 ec 03 00 00	 push	 1004			; 000003ecH
  0038b	53		 push	 ebx
  0038c	ff d6		 call	 esi
  0038e	50		 push	 eax
  0038f	ff d7		 call	 edi

; 1602 : 			SetWindowTextW(GetDlgItem (hwndDlg, IDC_VERIFY), tmp);	

  00391	8d 85 14 41 00
	00		 lea	 eax, DWORD PTR _tmp$136416[ebp]
  00397	50		 push	 eax
  00398	68 ea 03 00 00	 push	 1002			; 000003eaH
  0039d	53		 push	 ebx
  0039e	ff d6		 call	 esi
  003a0	50		 push	 eax
  003a1	ff d7		 call	 edi

; 1603 : 			RestoreDefaultKeyFilesParam ();

  003a3	e8 00 00 00 00	 call	 _RestoreDefaultKeyFilesParam

; 1604 : 
; 1605 : 			EndDialog (hwndDlg, IDCANCEL);

  003a8	6a 02		 push	 2
  003aa	53		 push	 ebx
  003ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 1606 : 			return 1;

  003b1	b8 01 00 00 00	 mov	 eax, 1
  003b6	e9 ef 0b 00 00	 jmp	 $LN87@PasswordCh@2
$LN59@PasswordCh@2:

; 1607 : 		}
; 1608 : 
; 1609 : 		if (hw == EN_CHANGE)

  003bb	b9 00 03 00 00	 mov	 ecx, 768		; 00000300H
  003c0	66 3b d1	 cmp	 dx, cx
  003c3	75 5b		 jne	 SHORT $LN58@PasswordCh@2

; 1610 : 		{
; 1611 : 			PasswordChangeEnable (hwndDlg, IDOK,
; 1612 : 				IDC_OLD_PASSWORD,
; 1613 : 				KeyFilesEnable && FirstKeyFile != NULL,
; 1614 : 				IDC_PASSWORD, IDC_VERIFY, 
; 1615 : 				newKeyFilesParam.EnableKeyFiles && newKeyFilesParam.FirstKeyFile != NULL);		

  003c5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A, 0
$LN210@PasswordCh@2:
  003cc	74 10		 je	 SHORT $LN91@PasswordCh@2
  003ce	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A+4, 0
  003d5	74 07		 je	 SHORT $LN91@PasswordCh@2
  003d7	b9 01 00 00 00	 mov	 ecx, 1
  003dc	eb 02		 jmp	 SHORT $LN92@PasswordCh@2
$LN91@PasswordCh@2:
  003de	33 c9		 xor	 ecx, ecx
$LN92@PasswordCh@2:
  003e0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
$LN209@PasswordCh@2:
  003e7	74 10		 je	 SHORT $LN93@PasswordCh@2
  003e9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _FirstKeyFile, 0
  003f0	74 07		 je	 SHORT $LN93@PasswordCh@2
  003f2	b8 01 00 00 00	 mov	 eax, 1
  003f7	eb 02		 jmp	 SHORT $LN94@PasswordCh@2
$LN93@PasswordCh@2:
  003f9	33 c0		 xor	 eax, eax
$LN94@PasswordCh@2:
  003fb	51		 push	 ecx
  003fc	68 ea 03 00 00	 push	 1002			; 000003eaH
  00401	68 0b 04 00 00	 push	 1035			; 0000040bH
  00406	50		 push	 eax
  00407	68 ec 03 00 00	 push	 1004			; 000003ecH
  0040c	6a 01		 push	 1
  0040e	e8 00 00 00 00	 call	 ?PasswordChangeEnable@@YAXPAUHWND__@@HHHHHH@Z ; PasswordChangeEnable
  00413	83 c4 18	 add	 esp, 24			; 00000018H

; 1616 : 
; 1617 : 			return 1;

  00416	b8 01 00 00 00	 mov	 eax, 1
  0041b	e9 8a 0b 00 00	 jmp	 $LN87@PasswordCh@2
$LN58@PasswordCh@2:

; 1618 : 		}
; 1619 : 
; 1620 : 		if (lw == IDC_KEYFILES)

  00420	b9 09 04 00 00	 mov	 ecx, 1033		; 00000409H
  00425	66 3b c1	 cmp	 ax, cx
  00428	0f 85 96 00 00
	00		 jne	 $LN57@PasswordCh@2

; 1621 : 		{
; 1622 : 			if (bSysEncPwdChangeDlgMode)

  0042e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bSysEncPwdChangeDlgMode, 0
  00435	74 17		 je	 SHORT $LN56@PasswordCh@2
$LN208@PasswordCh@2:

; 1623 : 			{
; 1624 : 				Warning ("KEYFILES_NOT_SUPPORTED_FOR_SYS_ENCRYPTION");

  00437	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PHDAOPJF@KEYFILES_NOT_SUPPORTED_FOR_SYS_E@
  0043c	e8 00 00 00 00	 call	 _Warning
  00441	83 c4 04	 add	 esp, 4

; 1625 : 				return 1;

  00444	b8 01 00 00 00	 mov	 eax, 1
  00449	e9 5c 0b 00 00	 jmp	 $LN87@PasswordCh@2
$LN56@PasswordCh@2:

; 1626 : 			}
; 1627 : 
; 1628 : 			KeyFilesDlgParam param;
; 1629 : 			param.EnableKeyFiles = KeyFilesEnable;

  0044e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KeyFilesEnable

; 1630 : 			param.FirstKeyFile = FirstKeyFile;

  00454	a1 00 00 00 00	 mov	 eax, DWORD PTR _FirstKeyFile

; 1631 : 
; 1632 : 			if (IDOK == DialogBoxParamW (hInst,
; 1633 : 				MAKEINTRESOURCEW (IDD_KEYFILES), hwndDlg,
; 1634 : 				(DLGPROC) KeyFilesDlgProc, (LPARAM) &param))

  00459	8d 4d e0	 lea	 ecx, DWORD PTR _param$136421[ebp]
  0045c	51		 push	 ecx
  0045d	68 00 00 00 00	 push	 OFFSET _KeyFilesDlgProc@16
  00462	53		 push	 ebx
  00463	89 55 e0	 mov	 DWORD PTR _param$136421[ebp], edx
  00466	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  0046c	68 f9 01 00 00	 push	 505			; 000001f9H
  00471	52		 push	 edx
  00472	89 45 e4	 mov	 DWORD PTR _param$136421[ebp+4], eax
  00475	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  0047b	83 f8 01	 cmp	 eax, 1
  0047e	75 20		 jne	 SHORT $LN55@PasswordCh@2

; 1635 : 			{
; 1636 : 				KeyFilesEnable = param.EnableKeyFiles;

  00480	8b 45 e0	 mov	 eax, DWORD PTR _param$136421[ebp]

; 1637 : 				FirstKeyFile = param.FirstKeyFile;

  00483	8b 4d e4	 mov	 ecx, DWORD PTR _param$136421[ebp+4]

; 1638 : 			
; 1639 : 				SetCheckBox (hwndDlg, IDC_ENABLE_KEYFILES, KeyFilesEnable);

  00486	50		 push	 eax
  00487	68 f1 03 00 00	 push	 1009			; 000003f1H
  0048c	53		 push	 ebx
  0048d	a3 00 00 00 00	 mov	 DWORD PTR _KeyFilesEnable, eax
  00492	89 0d 00 00 00
	00		 mov	 DWORD PTR _FirstKeyFile, ecx
  00498	e8 00 00 00 00	 call	 _SetCheckBox
  0049d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN55@PasswordCh@2:

; 1640 : 			}
; 1641 : 
; 1642 : 			PasswordChangeEnable (hwndDlg, IDOK,
; 1643 : 				IDC_OLD_PASSWORD,
; 1644 : 				KeyFilesEnable && FirstKeyFile != NULL,
; 1645 : 				IDC_PASSWORD, IDC_VERIFY, 
; 1646 : 				newKeyFilesParam.EnableKeyFiles && newKeyFilesParam.FirstKeyFile != NULL);		

  004a0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A, 0
  004a7	0f 84 31 ff ff
	ff		 je	 $LN91@PasswordCh@2
  004ad	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A+4, 0
  004b4	0f 84 24 ff ff
	ff		 je	 $LN91@PasswordCh@2
  004ba	b9 01 00 00 00	 mov	 ecx, 1
  004bf	e9 1c ff ff ff	 jmp	 $LN92@PasswordCh@2
$LN57@PasswordCh@2:

; 1647 : 
; 1648 : 			return 1;
; 1649 : 		}
; 1650 : 
; 1651 : 		
; 1652 : 		if (lw == IDC_NEW_KEYFILES)

  004c4	b9 08 04 00 00	 mov	 ecx, 1032		; 00000408H
  004c9	66 3b c1	 cmp	 ax, cx
  004cc	0f 85 b2 00 00
	00		 jne	 $LN54@PasswordCh@2

; 1653 : 		{
; 1654 : 			if (bSysEncPwdChangeDlgMode)

  004d2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bSysEncPwdChangeDlgMode, 0

; 1655 : 			{
; 1656 : 				Warning ("KEYFILES_NOT_SUPPORTED_FOR_SYS_ENCRYPTION");
; 1657 : 				return 1;

  004d9	0f 85 58 ff ff
	ff		 jne	 $LN208@PasswordCh@2

; 1658 : 			}
; 1659 : 
; 1660 : 			if (IDOK == DialogBoxParamW (hInst,
; 1661 : 				MAKEINTRESOURCEW (IDD_KEYFILES), hwndDlg,
; 1662 : 				(DLGPROC) KeyFilesDlgProc, (LPARAM) &newKeyFilesParam))

  004df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  004e5	68 00 00 00 00	 push	 OFFSET ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A
  004ea	68 00 00 00 00	 push	 OFFSET _KeyFilesDlgProc@16
  004ef	53		 push	 ebx
  004f0	68 f9 01 00 00	 push	 505			; 000001f9H
  004f5	52		 push	 edx
  004f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  004fc	83 f8 01	 cmp	 eax, 1
  004ff	75 5f		 jne	 SHORT $LN52@PasswordCh@2

; 1663 : 			{
; 1664 : 				SetCheckBox (hwndDlg, IDC_ENABLE_NEW_KEYFILES, newKeyFilesParam.EnableKeyFiles);

  00501	a1 00 00 00 00	 mov	 eax, DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A
  00506	50		 push	 eax
  00507	68 f4 03 00 00	 push	 1012			; 000003f4H
  0050c	53		 push	 ebx
  0050d	e8 00 00 00 00	 call	 _SetCheckBox
  00512	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1665 : 
; 1666 : 				VerifyPasswordAndUpdate2(hwndDlg, GetDlgItem (hwndDlg, IDOK), GetDlgItem (hwndDlg, IDC_PASSWORD),
; 1667 : 					GetDlgItem (hwndDlg, IDC_VERIFY), NULL, 0, NULL, 0,
; 1668 : 					newKeyFilesParam.EnableKeyFiles && newKeyFilesParam.FirstKeyFile != NULL);		

  00515	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A, 0
  0051c	74 10		 je	 SHORT $LN99@PasswordCh@2
  0051e	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A+4, 0
  00525	74 07		 je	 SHORT $LN99@PasswordCh@2
  00527	b8 01 00 00 00	 mov	 eax, 1
  0052c	eb 02		 jmp	 SHORT $LN100@PasswordCh@2
$LN99@PasswordCh@2:
  0052e	33 c0		 xor	 eax, eax
$LN100@PasswordCh@2:
  00530	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00536	50		 push	 eax
  00537	6a 00		 push	 0
  00539	6a 00		 push	 0
  0053b	6a 00		 push	 0
  0053d	6a 00		 push	 0
  0053f	68 ea 03 00 00	 push	 1002			; 000003eaH
  00544	53		 push	 ebx
  00545	ff d6		 call	 esi
  00547	50		 push	 eax
  00548	68 0b 04 00 00	 push	 1035			; 0000040bH
  0054d	53		 push	 ebx
  0054e	ff d6		 call	 esi
  00550	50		 push	 eax
  00551	6a 01		 push	 1
  00553	53		 push	 ebx
  00554	ff d6		 call	 esi
  00556	50		 push	 eax
  00557	53		 push	 ebx
  00558	e8 00 00 00 00	 call	 _VerifyPasswordAndUpdate2
  0055d	83 c4 24	 add	 esp, 36			; 00000024H
$LN52@PasswordCh@2:

; 1669 : 			}
; 1670 : 
; 1671 : 			PasswordChangeEnable (hwndDlg, IDOK,
; 1672 : 				IDC_OLD_PASSWORD,
; 1673 : 				KeyFilesEnable && FirstKeyFile != NULL,
; 1674 : 				IDC_PASSWORD, IDC_VERIFY, 
; 1675 : 				newKeyFilesParam.EnableKeyFiles && newKeyFilesParam.FirstKeyFile != NULL);		

  00560	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A, 0
  00567	0f 84 71 fe ff
	ff		 je	 $LN91@PasswordCh@2
  0056d	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A+4, 0
  00574	0f 84 64 fe ff
	ff		 je	 $LN91@PasswordCh@2
  0057a	b9 01 00 00 00	 mov	 ecx, 1
  0057f	e9 5c fe ff ff	 jmp	 $LN92@PasswordCh@2
$LN54@PasswordCh@2:

; 1676 : 
; 1677 : 			return 1;
; 1678 : 		}
; 1679 : 
; 1680 : 		if (lw == IDC_ENABLE_KEYFILES)

  00584	b9 f1 03 00 00	 mov	 ecx, 1009		; 000003f1H
  00589	66 3b c1	 cmp	 ax, cx
  0058c	75 36		 jne	 SHORT $LN51@PasswordCh@2

; 1681 : 		{
; 1682 : 			KeyFilesEnable = GetCheckBox (hwndDlg, IDC_ENABLE_KEYFILES);

  0058e	51		 push	 ecx
  0058f	53		 push	 ebx
  00590	e8 00 00 00 00	 call	 _GetCheckBox
  00595	83 c4 08	 add	 esp, 8

; 1683 : 
; 1684 : 			PasswordChangeEnable (hwndDlg, IDOK,
; 1685 : 				IDC_OLD_PASSWORD,
; 1686 : 				KeyFilesEnable && FirstKeyFile != NULL,
; 1687 : 				IDC_PASSWORD, IDC_VERIFY, 
; 1688 : 				newKeyFilesParam.EnableKeyFiles && newKeyFilesParam.FirstKeyFile != NULL);		

  00598	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A, 0
  0059f	a3 00 00 00 00	 mov	 DWORD PTR _KeyFilesEnable, eax
  005a4	74 15		 je	 SHORT $LN105@PasswordCh@2
  005a6	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A+4, 0
  005ad	74 0c		 je	 SHORT $LN105@PasswordCh@2
  005af	b9 01 00 00 00	 mov	 ecx, 1
  005b4	85 c0		 test	 eax, eax
  005b6	e9 2c fe ff ff	 jmp	 $LN209@PasswordCh@2
$LN105@PasswordCh@2:
  005bb	33 c9		 xor	 ecx, ecx
  005bd	85 c0		 test	 eax, eax
  005bf	e9 23 fe ff ff	 jmp	 $LN209@PasswordCh@2
$LN51@PasswordCh@2:

; 1689 : 
; 1690 : 			return 1;
; 1691 : 		}
; 1692 : 
; 1693 : 		if (lw == IDC_ENABLE_NEW_KEYFILES)

  005c4	b9 f4 03 00 00	 mov	 ecx, 1012		; 000003f4H
  005c9	66 3b c1	 cmp	 ax, cx
  005cc	75 16		 jne	 SHORT $LN50@PasswordCh@2

; 1694 : 		{
; 1695 : 			newKeyFilesParam.EnableKeyFiles = GetCheckBox (hwndDlg, IDC_ENABLE_NEW_KEYFILES);

  005ce	51		 push	 ecx
  005cf	53		 push	 ebx
  005d0	e8 00 00 00 00	 call	 _GetCheckBox
  005d5	83 c4 08	 add	 esp, 8
  005d8	a3 00 00 00 00	 mov	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A, eax

; 1696 : 
; 1697 : 			PasswordChangeEnable (hwndDlg, IDOK,
; 1698 : 				IDC_OLD_PASSWORD,
; 1699 : 				KeyFilesEnable && FirstKeyFile != NULL,
; 1700 : 				IDC_PASSWORD, IDC_VERIFY, 
; 1701 : 				newKeyFilesParam.EnableKeyFiles && newKeyFilesParam.FirstKeyFile != NULL);		

  005dd	85 c0		 test	 eax, eax
  005df	e9 e8 fd ff ff	 jmp	 $LN210@PasswordCh@2
$LN50@PasswordCh@2:

; 1702 : 
; 1703 : 			return 1;
; 1704 : 		}
; 1705 : 
; 1706 : 		if (hw == CBN_SELCHANGE)

  005e4	66 83 fa 01	 cmp	 dx, 1
  005e8	75 7e		 jne	 SHORT $LN49@PasswordCh@2

; 1707 : 		{
; 1708 : 			switch (lw)

  005ea	ba f7 03 00 00	 mov	 edx, 1015		; 000003f7H
  005ef	66 3b c2	 cmp	 ax, dx
  005f2	75 6a		 jne	 SHORT $LN44@PasswordCh@2

; 1709 : 			{
; 1710 : 			case IDC_PKCS5_PRF_ID:
; 1711 : 				if (bSysEncPwdChangeDlgMode)

  005f4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bSysEncPwdChangeDlgMode, 0
  005fb	74 61		 je	 SHORT $LN44@PasswordCh@2

; 1712 : 				{
; 1713 : 					int new_hash_algo_id = SendMessage (GetDlgItem (hwndDlg, IDC_PKCS5_PRF_ID), CB_GETITEMDATA, 
; 1714 : 						SendMessage (GetDlgItem (hwndDlg, IDC_PKCS5_PRF_ID), CB_GETCURSEL, 0, 0), 0);

  005fd	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00603	6a 00		 push	 0
  00605	6a 00		 push	 0
  00607	6a 00		 push	 0
  00609	68 47 01 00 00	 push	 327			; 00000147H
  0060e	52		 push	 edx
  0060f	53		 push	 ebx
  00610	ff d6		 call	 esi
  00612	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  00618	50		 push	 eax
  00619	ff d7		 call	 edi
  0061b	50		 push	 eax
  0061c	68 50 01 00 00	 push	 336			; 00000150H
  00621	68 f7 03 00 00	 push	 1015			; 000003f7H
  00626	53		 push	 ebx
  00627	ff d6		 call	 esi
  00629	50		 push	 eax
  0062a	ff d7		 call	 edi

; 1715 : 
; 1716 : 					if (new_hash_algo_id != 0 && new_hash_algo_id != DEFAULT_HASH_ALGORITHM_BOOT)

  0062c	85 c0		 test	 eax, eax
  0062e	74 2e		 je	 SHORT $LN44@PasswordCh@2
  00630	83 f8 01	 cmp	 eax, 1
  00633	74 29		 je	 SHORT $LN44@PasswordCh@2

; 1717 : 					{
; 1718 : 						int new_hash_algo_id = DEFAULT_HASH_ALGORITHM_BOOT;
; 1719 : 						Info ("ALGO_NOT_SUPPORTED_FOR_SYS_ENCRYPTION");

  00635	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@FCGANOF@ALGO_NOT_SUPPORTED_FOR_SYS_ENCRY@
  0063a	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _new_hash_algo_id$136447[ebp], 1
  00641	e8 00 00 00 00	 call	 _Info
  00646	83 c4 04	 add	 esp, 4

; 1720 : 						SelectAlgo (GetDlgItem (hwndDlg, IDC_PKCS5_PRF_ID), &new_hash_algo_id);

  00649	8d 45 e8	 lea	 eax, DWORD PTR _new_hash_algo_id$136447[ebp]
  0064c	50		 push	 eax
  0064d	68 f7 03 00 00	 push	 1015			; 000003f7H
  00652	53		 push	 ebx
  00653	ff d6		 call	 esi
  00655	50		 push	 eax
  00656	e8 00 00 00 00	 call	 _SelectAlgo
  0065b	83 c4 08	 add	 esp, 8
$LN44@PasswordCh@2:

; 1721 : 					}
; 1722 : 				}
; 1723 : 				break;
; 1724 : 			}
; 1725 : 			return 1;

  0065e	b8 01 00 00 00	 mov	 eax, 1
  00663	e9 42 09 00 00	 jmp	 $LN87@PasswordCh@2
$LN49@PasswordCh@2:

; 1726 : 
; 1727 : 		}
; 1728 : 
; 1729 : 		if (lw == IDC_SHOW_PASSWORD_CHPWD_ORI)

  00668	b9 3b 04 00 00	 mov	 ecx, 1083		; 0000043bH
  0066d	66 3b c1	 cmp	 ax, cx
  00670	75 4e		 jne	 SHORT $LN43@PasswordCh@2

; 1730 : 		{
; 1731 : 			SendMessage (GetDlgItem (hwndDlg, IDC_OLD_PASSWORD),
; 1732 : 						EM_SETPASSWORDCHAR,
; 1733 : 						GetCheckBox (hwndDlg, IDC_SHOW_PASSWORD_CHPWD_ORI) ? 0 : '*',
; 1734 : 						0);

  00672	6a 00		 push	 0
  00674	51		 push	 ecx
  00675	53		 push	 ebx
  00676	e8 00 00 00 00	 call	 _GetCheckBox
  0067b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00681	83 c4 08	 add	 esp, 8
  00684	f7 d8		 neg	 eax
  00686	1b c0		 sbb	 eax, eax
  00688	83 e0 d6	 and	 eax, -42		; ffffffd6H
  0068b	83 c0 2a	 add	 eax, 42			; 0000002aH
  0068e	50		 push	 eax
  0068f	68 cc 00 00 00	 push	 204			; 000000ccH
  00694	68 ec 03 00 00	 push	 1004			; 000003ecH
  00699	53		 push	 ebx
  0069a	ff d6		 call	 esi
  0069c	50		 push	 eax
  0069d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1735 : 			InvalidateRect (GetDlgItem (hwndDlg, IDC_OLD_PASSWORD), NULL, TRUE);

  006a3	6a 01		 push	 1
  006a5	6a 00		 push	 0
  006a7	68 ec 03 00 00	 push	 1004			; 000003ecH
  006ac	53		 push	 ebx
  006ad	ff d6		 call	 esi
  006af	50		 push	 eax
  006b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 1736 : 			return 1;

  006b6	b8 01 00 00 00	 mov	 eax, 1
  006bb	e9 ea 08 00 00	 jmp	 $LN87@PasswordCh@2
$LN43@PasswordCh@2:

; 1737 : 		}
; 1738 : 
; 1739 : 		if (lw == IDC_SHOW_PASSWORD_CHPWD_NEW)

  006c0	ba 39 04 00 00	 mov	 edx, 1081		; 00000439H
  006c5	66 3b c2	 cmp	 ax, dx
  006c8	0f 85 8c 00 00
	00		 jne	 $LN42@PasswordCh@2

; 1740 : 		{
; 1741 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PASSWORD),
; 1742 : 						EM_SETPASSWORDCHAR,
; 1743 : 						GetCheckBox (hwndDlg, IDC_SHOW_PASSWORD_CHPWD_NEW) ? 0 : '*',
; 1744 : 						0);

  006ce	6a 00		 push	 0
  006d0	52		 push	 edx
  006d1	53		 push	 ebx
  006d2	e8 00 00 00 00	 call	 _GetCheckBox
  006d7	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  006dd	83 c4 08	 add	 esp, 8
  006e0	f7 d8		 neg	 eax
  006e2	1b c0		 sbb	 eax, eax
  006e4	83 e0 d6	 and	 eax, -42		; ffffffd6H
  006e7	83 c0 2a	 add	 eax, 42			; 0000002aH
  006ea	50		 push	 eax
  006eb	68 cc 00 00 00	 push	 204			; 000000ccH
  006f0	68 0b 04 00 00	 push	 1035			; 0000040bH
  006f5	53		 push	 ebx
  006f6	ff d6		 call	 esi
  006f8	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  006fe	50		 push	 eax
  006ff	ff d7		 call	 edi

; 1745 : 			SendMessage (GetDlgItem (hwndDlg, IDC_VERIFY),
; 1746 : 						EM_SETPASSWORDCHAR,
; 1747 : 						GetCheckBox (hwndDlg, IDC_SHOW_PASSWORD_CHPWD_NEW) ? 0 : '*',
; 1748 : 						0);

  00701	6a 00		 push	 0
  00703	68 39 04 00 00	 push	 1081			; 00000439H
  00708	53		 push	 ebx
  00709	e8 00 00 00 00	 call	 _GetCheckBox
  0070e	83 c4 08	 add	 esp, 8
  00711	f7 d8		 neg	 eax
  00713	1b c0		 sbb	 eax, eax
  00715	83 e0 d6	 and	 eax, -42		; ffffffd6H
  00718	83 c0 2a	 add	 eax, 42			; 0000002aH
  0071b	50		 push	 eax
  0071c	68 cc 00 00 00	 push	 204			; 000000ccH
  00721	68 ea 03 00 00	 push	 1002			; 000003eaH
  00726	53		 push	 ebx
  00727	ff d6		 call	 esi
  00729	50		 push	 eax
  0072a	ff d7		 call	 edi

; 1749 : 			InvalidateRect (GetDlgItem (hwndDlg, IDC_PASSWORD), NULL, TRUE);

  0072c	6a 01		 push	 1
  0072e	6a 00		 push	 0
  00730	68 0b 04 00 00	 push	 1035			; 0000040bH
  00735	53		 push	 ebx
  00736	ff d6		 call	 esi
  00738	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__InvalidateRect@12
  0073e	50		 push	 eax
  0073f	ff d7		 call	 edi

; 1750 : 			InvalidateRect (GetDlgItem (hwndDlg, IDC_VERIFY), NULL, TRUE);

  00741	6a 01		 push	 1
  00743	6a 00		 push	 0
  00745	68 ea 03 00 00	 push	 1002			; 000003eaH
  0074a	53		 push	 ebx
  0074b	ff d6		 call	 esi
  0074d	50		 push	 eax
  0074e	ff d7		 call	 edi

; 1751 : 			return 1;

  00750	b8 01 00 00 00	 mov	 eax, 1
  00755	e9 50 08 00 00	 jmp	 $LN87@PasswordCh@2
$LN42@PasswordCh@2:

; 1752 : 		}
; 1753 : 
; 1754 : 		if (lw == IDOK)

  0075a	66 83 f8 01	 cmp	 ax, 1
  0075e	0f 85 44 08 00
	00		 jne	 $LN202@PasswordCh@2

; 1755 : 		{
; 1756 : 			HWND hParent = GetParent (hwndDlg);

  00764	53		 push	 ebx
  00765	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4

; 1757 : 			Password oldPassword={0,{},{}};

  0076b	33 f6		 xor	 esi, esi
  0076d	6a 41		 push	 65			; 00000041H
  0076f	89 45 e8	 mov	 DWORD PTR _hParent$136452[ebp], eax
  00772	8d 45 04	 lea	 eax, DWORD PTR _oldPassword$136453[ebp+4]
  00775	56		 push	 esi
  00776	50		 push	 eax
  00777	89 75 00	 mov	 DWORD PTR _oldPassword$136453[ebp], esi
  0077a	e8 00 00 00 00	 call	 _memset

; 1758 : 			Password newPassword={0,{},{}};

  0077f	6a 41		 push	 65			; 00000041H
  00781	33 c0		 xor	 eax, eax
  00783	8d 4d 4c	 lea	 ecx, DWORD PTR _newPassword$136454[ebp+4]
  00786	56		 push	 esi
  00787	51		 push	 ecx
  00788	66 89 45 45	 mov	 WORD PTR _oldPassword$136453[ebp+69], ax
  0078c	88 45 47	 mov	 BYTE PTR _oldPassword$136453[ebp+71], al
  0078f	89 75 48	 mov	 DWORD PTR _newPassword$136454[ebp], esi
  00792	e8 00 00 00 00	 call	 _memset
  00797	83 c4 18	 add	 esp, 24			; 00000018H

; 1759 : 			int nStatus;
; 1760 : 			int pkcs5 = SendMessage (GetDlgItem (hwndDlg, IDC_PKCS5_PRF_ID), CB_GETITEMDATA, 
; 1761 : 					SendMessage (GetDlgItem (hwndDlg, IDC_PKCS5_PRF_ID), CB_GETCURSEL, 0, 0), 0);

  0079a	56		 push	 esi
  0079b	56		 push	 esi
  0079c	56		 push	 esi
  0079d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  007a3	68 47 01 00 00	 push	 327			; 00000147H
  007a8	33 c0		 xor	 eax, eax
  007aa	68 f7 03 00 00	 push	 1015			; 000003f7H
  007af	53		 push	 ebx
  007b0	66 89 85 8d 00
	00 00		 mov	 WORD PTR _newPassword$136454[ebp+69], ax
  007b7	88 85 8f 00 00
	00		 mov	 BYTE PTR _newPassword$136454[ebp+71], al
  007bd	ff d6		 call	 esi
  007bf	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  007c5	50		 push	 eax
  007c6	ff d7		 call	 edi
  007c8	50		 push	 eax
  007c9	68 50 01 00 00	 push	 336			; 00000150H
  007ce	68 f7 03 00 00	 push	 1015			; 000003f7H
  007d3	53		 push	 ebx
  007d4	ff d6		 call	 esi
  007d6	50		 push	 eax
  007d7	ff d7		 call	 edi

; 1762 : 			WCHAR tmpUTF16buf[MAX_PASSWORD+1];
; 1763 : 			VirtualLock(tmpUTF16buf,sizeof(tmpUTF16buf));

  007d9	68 82 00 00 00	 push	 130			; 00000082H
  007de	8d 95 1c 42 00
	00		 lea	 edx, DWORD PTR _tmpUTF16buf$136457[ebp]
  007e4	52		 push	 edx
  007e5	89 45 ec	 mov	 DWORD PTR _pkcs5$136456[ebp], eax
  007e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualLock@8

; 1764 : 
; 1765 : 			if (!CheckPasswordCharEncoding (GetDlgItem (hwndDlg, IDC_PASSWORD), NULL))

  007ee	6a 00		 push	 0
  007f0	68 0b 04 00 00	 push	 1035			; 0000040bH
  007f5	53		 push	 ebx
  007f6	ff d6		 call	 esi
  007f8	50		 push	 eax
  007f9	e8 00 00 00 00	 call	 _CheckPasswordCharEncoding
  007fe	83 c4 08	 add	 esp, 8
  00801	85 c0		 test	 eax, eax
  00803	75 17		 jne	 SHORT $LN40@PasswordCh@2

; 1766 : 			{
; 1767 : 				Error ("UNSUPPORTED_CHARS_IN_PWD");

  00805	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@CPHEENHA@UNSUPPORTED_CHARS_IN_PWD?$AA@
  0080a	e8 00 00 00 00	 call	 _Error
  0080f	83 c4 04	 add	 esp, 4

; 1768 : 				return 1;

  00812	b8 01 00 00 00	 mov	 eax, 1
  00817	e9 8e 07 00 00	 jmp	 $LN87@PasswordCh@2
$LN40@PasswordCh@2:

; 1769 : 			}
; 1770 : 
; 1771 : 			if (pwdChangeDlgMode == PCDM_CHANGE_PKCS5_PRF)

  0081c	a1 00 00 00 00	 mov	 eax, DWORD PTR _pwdChangeDlgMode
  00821	83 f8 01	 cmp	 eax, 1
  00824	75 0c		 jne	 SHORT $LN39@PasswordCh@2

; 1772 : 			{
; 1773 : 				newKeyFilesParam.EnableKeyFiles = KeyFilesEnable;

  00826	a1 00 00 00 00	 mov	 eax, DWORD PTR _KeyFilesEnable
  0082b	a3 00 00 00 00	 mov	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A, eax

; 1774 : 			}
; 1775 : 			else if (!(newKeyFilesParam.EnableKeyFiles && newKeyFilesParam.FirstKeyFile != NULL)

  00830	eb 30		 jmp	 SHORT $LN35@PasswordCh@2
$LN39@PasswordCh@2:

; 1776 : 				&& pwdChangeDlgMode == PCDM_CHANGE_PASSWORD)

  00832	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A, 0
  00839	74 09		 je	 SHORT $LN36@PasswordCh@2
  0083b	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A+4, 0
  00842	75 1e		 jne	 SHORT $LN35@PasswordCh@2
$LN36@PasswordCh@2:
  00844	85 c0		 test	 eax, eax
  00846	75 1a		 jne	 SHORT $LN35@PasswordCh@2

; 1777 : 			{
; 1778 : 				if (!CheckPasswordLength (hwndDlg, GetDlgItem (hwndDlg, IDC_PASSWORD)))

  00848	68 0b 04 00 00	 push	 1035			; 0000040bH
  0084d	53		 push	 ebx
  0084e	ff d6		 call	 esi
  00850	50		 push	 eax
  00851	53		 push	 ebx
  00852	e8 00 00 00 00	 call	 _CheckPasswordLength
  00857	83 c4 08	 add	 esp, 8
  0085a	85 c0		 test	 eax, eax

; 1779 : 					return 1;

  0085c	0f 84 18 f9 ff
	ff		 je	 $LN207@PasswordCh@2
$LN35@PasswordCh@2:

; 1780 : 			}
; 1781 : 
; 1782 : 			GetWindowTextA(GetDlgItem (hParent, IDC_VOLUME), szFileName, sizeof (szFileName));

  00862	8b 4d e8	 mov	 ecx, DWORD PTR _hParent$136452[ebp]
  00865	68 05 01 00 00	 push	 261			; 00000105H
  0086a	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  0086f	68 0a 04 00 00	 push	 1034			; 0000040aH
  00874	51		 push	 ecx
  00875	ff d6		 call	 esi
  00877	50		 push	 eax
  00878	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 1783 : 
; 1784 : 			GetWindowTextW(GetDlgItem (hwndDlg, IDC_OLD_PASSWORD), tmpUTF16buf, sizeof(tmpUTF16buf)/sizeof(*tmpUTF16buf));

  0087e	6a 41		 push	 65			; 00000041H
  00880	8d 95 1c 42 00
	00		 lea	 edx, DWORD PTR _tmpUTF16buf$136457[ebp]
  00886	52		 push	 edx
  00887	68 ec 03 00 00	 push	 1004			; 000003ecH
  0088c	53		 push	 ebx
  0088d	ff d6		 call	 esi
  0088f	50		 push	 eax
  00890	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextW@12

; 1785 : 			ConvertUTF16toUTF8s((const UTF16*)tmpUTF16buf,sizeof(tmpUTF16buf)/sizeof(*tmpUTF16buf),oldPassword.Text,sizeof(oldPassword.Text)/sizeof(*oldPassword.Text),strictConversion);

  00896	6a 00		 push	 0
  00898	6a 41		 push	 65			; 00000041H
  0089a	8d 45 04	 lea	 eax, DWORD PTR _oldPassword$136453[ebp+4]
  0089d	50		 push	 eax
  0089e	8d 8d 1c 42 00
	00		 lea	 ecx, DWORD PTR _tmpUTF16buf$136457[ebp]
  008a4	6a 41		 push	 65			; 00000041H
  008a6	51		 push	 ecx
  008a7	e8 00 00 00 00	 call	 _ConvertUTF16toUTF8s

; 1786 : 			burn(tmpUTF16buf,sizeof(tmpUTF16buf));

  008ac	8d 95 1c 42 00
	00		 lea	 edx, DWORD PTR _tmpUTF16buf$136457[ebp]
  008b2	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  008b7	83 c4 14	 add	 esp, 20			; 00000014H
  008ba	8b f9		 mov	 edi, ecx
  008bc	8b c2		 mov	 eax, edx
$LN120@PasswordCh@2:
  008be	c6 00 00	 mov	 BYTE PTR [eax], 0
  008c1	40		 inc	 eax
  008c2	83 ef 01	 sub	 edi, 1
  008c5	75 f7		 jne	 SHORT $LN120@PasswordCh@2
$LL31@PasswordCh@2:
  008c7	49		 dec	 ecx
  008c8	c6 02 00	 mov	 BYTE PTR [edx], 0
  008cb	42		 inc	 edx
  008cc	85 c9		 test	 ecx, ecx
  008ce	75 f7		 jne	 SHORT $LL31@PasswordCh@2

; 1787 : 			oldPassword.Length = strlen ((char *) oldPassword.Text);

  008d0	8d 45 04	 lea	 eax, DWORD PTR _oldPassword$136453[ebp+4]
  008d3	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL178@PasswordCh@2:
  008d6	8a 08		 mov	 cl, BYTE PTR [eax]
  008d8	40		 inc	 eax
  008d9	84 c9		 test	 cl, cl
  008db	75 f9		 jne	 SHORT $LL178@PasswordCh@2
  008dd	2b c2		 sub	 eax, edx
  008df	89 45 00	 mov	 DWORD PTR _oldPassword$136453[ebp], eax

; 1788 : 
; 1789 : 			switch (pwdChangeDlgMode)

  008e2	a1 00 00 00 00	 mov	 eax, DWORD PTR _pwdChangeDlgMode
  008e7	85 c0		 test	 eax, eax
  008e9	7e 28		 jle	 SHORT $LN26@PasswordCh@2
  008eb	83 f8 03	 cmp	 eax, 3
  008ee	7f 23		 jg	 SHORT $LN26@PasswordCh@2

; 1790 : 			{
; 1791 : 			case PCDM_REMOVE_ALL_KEYFILES_FROM_VOL:
; 1792 : 			case PCDM_ADD_REMOVE_VOL_KEYFILES:
; 1793 : 			case PCDM_CHANGE_PKCS5_PRF:
; 1794 : 				memcpy (newPassword.Text, oldPassword.Text, sizeof (newPassword.Text));

  008f0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  008f5	8d 75 04	 lea	 esi, DWORD PTR _oldPassword$136453[ebp+4]
  008f8	8d 7d 4c	 lea	 edi, DWORD PTR _newPassword$136454[ebp+4]
  008fb	f3 a5		 rep movsd

; 1795 : 				newPassword.Length = strlen ((char *) oldPassword.Text);

  008fd	8d 45 04	 lea	 eax, DWORD PTR _oldPassword$136453[ebp+4]
  00900	a4		 movsb
  00901	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL179@PasswordCh@2:
  00904	8a 08		 mov	 cl, BYTE PTR [eax]
  00906	40		 inc	 eax
  00907	84 c9		 test	 cl, cl
  00909	75 f9		 jne	 SHORT $LL179@PasswordCh@2

; 1796 : 				break;

  0090b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00911	eb 64		 jmp	 SHORT $LN203@PasswordCh@2
$LN26@PasswordCh@2:

; 1797 : 
; 1798 : 			default:
; 1799 : 				GetWindowTextW(GetDlgItem (hwndDlg, IDC_PASSWORD), tmpUTF16buf, sizeof(tmpUTF16buf)/sizeof(*tmpUTF16buf));

  00913	6a 41		 push	 65			; 00000041H
  00915	8d 95 1c 42 00
	00		 lea	 edx, DWORD PTR _tmpUTF16buf$136457[ebp]
  0091b	52		 push	 edx
  0091c	68 0b 04 00 00	 push	 1035			; 0000040bH
  00921	53		 push	 ebx
  00922	ff d6		 call	 esi
  00924	50		 push	 eax
  00925	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextW@12

; 1800 : 				ConvertUTF16toUTF8s((const UTF16*)tmpUTF16buf,sizeof(tmpUTF16buf)/sizeof(*tmpUTF16buf),(UTF8*)newPassword.Text,sizeof(newPassword.Text)/sizeof(*newPassword.Text),strictConversion);

  0092b	6a 00		 push	 0
  0092d	6a 41		 push	 65			; 00000041H
  0092f	8d 45 4c	 lea	 eax, DWORD PTR _newPassword$136454[ebp+4]
  00932	50		 push	 eax
  00933	8d 8d 1c 42 00
	00		 lea	 ecx, DWORD PTR _tmpUTF16buf$136457[ebp]
  00939	6a 41		 push	 65			; 00000041H
  0093b	51		 push	 ecx
  0093c	e8 00 00 00 00	 call	 _ConvertUTF16toUTF8s

; 1801 : 				burn(tmpUTF16buf,sizeof(tmpUTF16buf));

  00941	8d 95 1c 42 00
	00		 lea	 edx, DWORD PTR _tmpUTF16buf$136457[ebp]
  00947	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  0094c	83 c4 14	 add	 esp, 20			; 00000014H
  0094f	8b f9		 mov	 edi, ecx
  00951	8b c2		 mov	 eax, edx
$LN124@PasswordCh@2:
  00953	c6 00 00	 mov	 BYTE PTR [eax], 0
  00956	40		 inc	 eax
  00957	83 ef 01	 sub	 edi, 1
  0095a	75 f7		 jne	 SHORT $LN124@PasswordCh@2
  0095c	8d 64 24 00	 npad	 4
$LL22@PasswordCh@2:
  00960	49		 dec	 ecx
  00961	c6 02 00	 mov	 BYTE PTR [edx], 0
  00964	42		 inc	 edx
  00965	85 c9		 test	 ecx, ecx
  00967	75 f7		 jne	 SHORT $LL22@PasswordCh@2

; 1802 : 				newPassword.Length = strlen ((char *) newPassword.Text);

  00969	8d 45 4c	 lea	 eax, DWORD PTR _newPassword$136454[ebp+4]
  0096c	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0096f	90		 npad	 1
$LL180@PasswordCh@2:
  00970	8a 08		 mov	 cl, BYTE PTR [eax]
  00972	40		 inc	 eax
  00973	84 c9		 test	 cl, cl
  00975	75 f9		 jne	 SHORT $LL180@PasswordCh@2
$LN203@PasswordCh@2:
  00977	2b c2		 sub	 eax, edx
  00979	89 45 48	 mov	 DWORD PTR _newPassword$136454[ebp], eax

; 1803 : 			}
; 1804 : 
; 1805 : 			WaitCursor ();

  0097c	e8 00 00 00 00	 call	 _WaitCursor

; 1806 : 
; 1807 : 			if (KeyFilesEnable)

  00981	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  00988	74 13		 je	 SHORT $LN20@PasswordCh@2

; 1808 : 				KeyFilesApply (&oldPassword, FirstKeyFile);

  0098a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _FirstKeyFile
  00990	52		 push	 edx
  00991	8d 45 00	 lea	 eax, DWORD PTR _oldPassword$136453[ebp]
  00994	50		 push	 eax
  00995	e8 00 00 00 00	 call	 _KeyFilesApply
  0099a	83 c4 08	 add	 esp, 8
$LN20@PasswordCh@2:

; 1809 : 
; 1810 : 			if (newKeyFilesParam.EnableKeyFiles)

  0099d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A, 0
  009a4	74 30		 je	 SHORT $LN18@PasswordCh@2

; 1811 : 			{
; 1812 : 				if (!KeyFilesApply (&newPassword, pwdChangeDlgMode == PCDM_CHANGE_PKCS5_PRF ? FirstKeyFile : newKeyFilesParam.FirstKeyFile))

  009a6	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _pwdChangeDlgMode, 1
  009ad	a1 00 00 00 00	 mov	 eax, DWORD PTR _FirstKeyFile
  009b2	74 05		 je	 SHORT $LN114@PasswordCh@2
  009b4	a1 04 00 00 00	 mov	 eax, DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A+4
$LN114@PasswordCh@2:
  009b9	50		 push	 eax
  009ba	8d 4d 48	 lea	 ecx, DWORD PTR _newPassword$136454[ebp]
  009bd	51		 push	 ecx
  009be	e8 00 00 00 00	 call	 _KeyFilesApply
  009c3	83 c4 08	 add	 esp, 8
  009c6	85 c0		 test	 eax, eax
  009c8	75 0c		 jne	 SHORT $LN18@PasswordCh@2

; 1813 : 				{
; 1814 : 					nStatus = ERR_DONT_REPORT;

  009ca	c7 45 ec 1c 00
	00 00		 mov	 DWORD PTR _nStatus$136455[ebp], 28 ; 0000001cH

; 1815 : 					goto err;

  009d1	e9 bb 00 00 00	 jmp	 $err$136498
$LN18@PasswordCh@2:

; 1816 : 				}
; 1817 : 			}
; 1818 : 
; 1819 : 			if (bSysEncPwdChangeDlgMode)

  009d6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bSysEncPwdChangeDlgMode, 0
  009dd	74 51		 je	 SHORT $LN16@PasswordCh@2

; 1820 : 			{
; 1821 : 				// System
; 1822 : 
; 1823 : 				pkcs5 = 0;	// PKCS-5 PRF unchanged (currently system encryption supports only RIPEMD-160)
; 1824 : 
; 1825 : 				try
; 1826 : 				{
; 1827 : 					nStatus = BootEncObj->ChangePassword (&oldPassword, &newPassword, pkcs5);

  009df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  009e5	6a 00		 push	 0
  009e7	8d 55 48	 lea	 edx, DWORD PTR _newPassword$136454[ebp]
  009ea	52		 push	 edx
  009eb	8d 45 00	 lea	 eax, DWORD PTR _oldPassword$136453[ebp]
  009ee	50		 push	 eax
  009ef	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  009f6	e8 00 00 00 00	 call	 ?ChangePassword@BootEncryption@CipherShed@@QAEHPAUPassword@@0H@Z ; CipherShed::BootEncryption::ChangePassword

; 1834 : 			}
; 1835 : 			else

  009fb	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00a01	89 45 ec	 mov	 DWORD PTR _nStatus$136455[ebp], eax
  00a04	e9 88 00 00 00	 jmp	 $err$136498
__catch$_PasswordChangeDlgProc@16$1:

; 1828 : 				}
; 1829 : 				catch (Exception &e)
; 1830 : 				{
; 1831 : 					e.Show (MainDlg);

  00a09	8b 4d d8	 mov	 ecx, DWORD PTR _e$136502[ebp]
  00a0c	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a0e	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00a13	8b 12		 mov	 edx, DWORD PTR [edx]
  00a15	50		 push	 eax
  00a16	ff d2		 call	 edx

; 1832 : 					nStatus = ERR_OS_ERROR;

  00a18	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _nStatus$136455[ebp], 1

; 1833 : 				}

  00a1f	b8 00 00 00 00	 mov	 eax, $LN194@PasswordCh@2
  00a24	c3		 ret	 0
$LN194@PasswordCh@2:
  00a25	8b 5d dc	 mov	 ebx, DWORD PTR _hwndDlg$GSCopy$[ebp]

; 1834 : 			}
; 1835 : 			else

  00a28	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00a2e	eb 61		 jmp	 SHORT $err$136498
$LN16@PasswordCh@2:

; 1836 : 			{
; 1837 : 				// Non-system
; 1838 : 
; 1839 : 				nStatus = ChangePwd (szFileName, &oldPassword, &newPassword, pkcs5, hwndDlg);

  00a30	8b 7d ec	 mov	 edi, DWORD PTR _pkcs5$136456[ebp]
  00a33	53		 push	 ebx
  00a34	57		 push	 edi
  00a35	8d 45 48	 lea	 eax, DWORD PTR _newPassword$136454[ebp]
  00a38	50		 push	 eax
  00a39	8d 4d 00	 lea	 ecx, DWORD PTR _oldPassword$136453[ebp]
  00a3c	51		 push	 ecx
  00a3d	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00a42	e8 00 00 00 00	 call	 _ChangePwd
  00a47	83 c4 14	 add	 esp, 20			; 00000014H
  00a4a	89 45 ec	 mov	 DWORD PTR _nStatus$136455[ebp], eax

; 1840 : 
; 1841 : 				if (nStatus == ERR_OS_ERROR
; 1842 : 					&& GetLastError () == ERROR_ACCESS_DENIED
; 1843 : 					&& IsUacSupported ()
; 1844 : 					&& IsVolumeDeviceHosted (szFileName))

  00a4d	83 f8 01	 cmp	 eax, 1
  00a50	75 3f		 jne	 SHORT $err$136498
  00a52	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00a58	83 f8 05	 cmp	 eax, 5
  00a5b	75 34		 jne	 SHORT $err$136498
  00a5d	e8 00 00 00 00	 call	 _IsUacSupported
  00a62	85 c0		 test	 eax, eax
  00a64	74 2b		 je	 SHORT $err$136498
  00a66	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00a6b	e8 00 00 00 00	 call	 _IsVolumeDeviceHosted
  00a70	83 c4 04	 add	 esp, 4
  00a73	85 c0		 test	 eax, eax
  00a75	74 1a		 je	 SHORT $err$136498

; 1845 : 				{
; 1846 : 					nStatus = UacChangePwd (szFileName, &oldPassword, &newPassword, pkcs5, hwndDlg);

  00a77	53		 push	 ebx
  00a78	57		 push	 edi
  00a79	8d 55 48	 lea	 edx, DWORD PTR _newPassword$136454[ebp]
  00a7c	52		 push	 edx
  00a7d	8d 45 00	 lea	 eax, DWORD PTR _oldPassword$136453[ebp]
  00a80	50		 push	 eax
  00a81	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00a86	e8 00 00 00 00	 call	 _UacChangePwd
  00a8b	83 c4 14	 add	 esp, 20			; 00000014H
  00a8e	89 45 ec	 mov	 DWORD PTR _nStatus$136455[ebp], eax
$err$136498:

; 1847 : 				}
; 1848 : 			}
; 1849 : 
; 1850 : err:
; 1851 : 			burn (&oldPassword, sizeof (oldPassword));

  00a91	8d 55 00	 lea	 edx, DWORD PTR _oldPassword$136453[ebp]
  00a94	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00a99	8b f9		 mov	 edi, ecx
  00a9b	8b c2		 mov	 eax, edx
$LN128@PasswordCh@2:
  00a9d	c6 00 00	 mov	 BYTE PTR [eax], 0
  00aa0	40		 inc	 eax
  00aa1	83 ef 01	 sub	 edi, 1
  00aa4	75 f7		 jne	 SHORT $LN128@PasswordCh@2
$LL9@PasswordCh@2:
  00aa6	49		 dec	 ecx
  00aa7	c6 02 00	 mov	 BYTE PTR [edx], 0
  00aaa	42		 inc	 edx
  00aab	85 c9		 test	 ecx, ecx
  00aad	75 f7		 jne	 SHORT $LL9@PasswordCh@2

; 1852 : 			burn (&newPassword, sizeof (newPassword));

  00aaf	8d 55 48	 lea	 edx, DWORD PTR _newPassword$136454[ebp]
  00ab2	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00ab7	8b f9		 mov	 edi, ecx
  00ab9	8b c2		 mov	 eax, edx
$LN132@PasswordCh@2:
  00abb	c6 00 00	 mov	 BYTE PTR [eax], 0
  00abe	40		 inc	 eax
  00abf	83 ef 01	 sub	 edi, 1
  00ac2	75 f7		 jne	 SHORT $LN132@PasswordCh@2
$LL4@PasswordCh@2:
  00ac4	49		 dec	 ecx
  00ac5	c6 02 00	 mov	 BYTE PTR [edx], 0
  00ac8	42		 inc	 edx
  00ac9	85 c9		 test	 ecx, ecx
  00acb	75 f7		 jne	 SHORT $LL4@PasswordCh@2

; 1853 : 
; 1854 : 			NormalCursor ();

  00acd	e8 00 00 00 00	 call	 _NormalCursor

; 1855 : 
; 1856 : 			if (nStatus == 0)

  00ad2	83 7d ec 00	 cmp	 DWORD PTR _nStatus$136455[ebp], 0
  00ad6	0f 85 8b 00 00
	00		 jne	 $LN2@PasswordCh@2

; 1857 : 			{
; 1858 : 				// Attempt to wipe passwords stored in the input field buffers
; 1859 : 				WCHAR tmp[MAX_PASSWORD+1];
; 1860 : 				memset (tmp, 0x20, sizeof(tmp)); //0x20 = ASCII space or 0x2020 = Unicode DAGGER

  00adc	68 82 00 00 00	 push	 130			; 00000082H
  00ae1	8d 8d 90 40 00
	00		 lea	 ecx, DWORD PTR _tmp$136524[ebp]
  00ae7	6a 20		 push	 32			; 00000020H
  00ae9	51		 push	 ecx
  00aea	e8 00 00 00 00	 call	 _memset
  00aef	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1861 : 				tmp[MAX_PASSWORD] = 0;
; 1862 : 				SetWindowTextW(GetDlgItem (hwndDlg, IDC_PASSWORD), tmp);	

  00af2	8d 85 90 40 00
	00		 lea	 eax, DWORD PTR _tmp$136524[ebp]
  00af8	50		 push	 eax
  00af9	68 0b 04 00 00	 push	 1035			; 0000040bH
  00afe	33 d2		 xor	 edx, edx
  00b00	53		 push	 ebx
  00b01	66 89 95 10 41
	00 00		 mov	 WORD PTR _tmp$136524[ebp+128], dx
  00b08	ff d6		 call	 esi
  00b0a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  00b10	50		 push	 eax
  00b11	ff d7		 call	 edi

; 1863 : 				SetWindowTextW(GetDlgItem (hwndDlg, IDC_OLD_PASSWORD), tmp);	

  00b13	8d 8d 90 40 00
	00		 lea	 ecx, DWORD PTR _tmp$136524[ebp]
  00b19	51		 push	 ecx
  00b1a	68 ec 03 00 00	 push	 1004			; 000003ecH
  00b1f	53		 push	 ebx
  00b20	ff d6		 call	 esi
  00b22	50		 push	 eax
  00b23	ff d7		 call	 edi

; 1864 : 				SetWindowTextW(GetDlgItem (hwndDlg, IDC_VERIFY), tmp);	

  00b25	8d 95 90 40 00
	00		 lea	 edx, DWORD PTR _tmp$136524[ebp]
  00b2b	52		 push	 edx
  00b2c	68 ea 03 00 00	 push	 1002			; 000003eaH
  00b31	53		 push	 ebx
  00b32	ff d6		 call	 esi
  00b34	50		 push	 eax
  00b35	ff d7		 call	 edi

; 1865 : 
; 1866 : 				KeyFileRemoveAll (&newKeyFilesParam.FirstKeyFile);

  00b37	68 04 00 00 00	 push	 OFFSET ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A+4
  00b3c	e8 00 00 00 00	 call	 _KeyFileRemoveAll
  00b41	83 c4 04	 add	 esp, 4

; 1867 : 				RestoreDefaultKeyFilesParam ();

  00b44	e8 00 00 00 00	 call	 _RestoreDefaultKeyFilesParam

; 1868 : 
; 1869 : 				if (bSysEncPwdChangeDlgMode)

  00b49	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bSysEncPwdChangeDlgMode, 0
  00b50	74 0c		 je	 SHORT $LN1@PasswordCh@2

; 1870 : 				{
; 1871 : 					KillTimer (hwndDlg, TIMER_ID_KEYB_LAYOUT_GUARD);

  00b52	68 00 01 00 00	 push	 256			; 00000100H
  00b57	53		 push	 ebx
  00b58	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8
$LN1@PasswordCh@2:

; 1872 : 				}
; 1873 : 
; 1874 : 				EndDialog (hwndDlg, IDOK);

  00b5e	6a 01		 push	 1
  00b60	53		 push	 ebx
  00b61	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
$LN2@PasswordCh@2:

; 1875 : 			}
; 1876 : 			return 1;

  00b67	b8 01 00 00 00	 mov	 eax, 1
  00b6c	e9 39 04 00 00	 jmp	 $LN87@PasswordCh@2
$LN84@PasswordCh@2:

; 1398 : 	{
; 1399 : 	case WM_INITDIALOG:
; 1400 : 		{
; 1401 : 			LPARAM nIndex;
; 1402 : 			HWND hComboBox = GetDlgItem (hwndDlg, IDC_PKCS5_PRF_ID);

  00b71	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00b77	68 f7 03 00 00	 push	 1015			; 000003f7H
  00b7c	53		 push	 ebx
  00b7d	ff d6		 call	 esi
  00b7f	89 45 ec	 mov	 DWORD PTR _hComboBox$136358[ebp], eax

; 1403 : 			int i;
; 1404 : 
; 1405 : 			ZeroMemory (&newKeyFilesParam, sizeof (newKeyFilesParam));

  00b82	33 c0		 xor	 eax, eax

; 1406 : 
; 1407 : 			SetWindowTextW (hwndDlg, GetString ("IDD_PASSWORDCHANGE_DLG"));

  00b84	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@OAALJAFL@IDD_PASSWORDCHANGE_DLG?$AA@
  00b89	a3 00 00 00 00	 mov	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A, eax
  00b8e	a3 04 00 00 00	 mov	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A+4, eax
  00b93	e8 00 00 00 00	 call	 _GetString
  00b98	83 c4 04	 add	 esp, 4
  00b9b	50		 push	 eax
  00b9c	53		 push	 ebx
  00b9d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 1408 : 			LocalizeDialog (hwndDlg, "IDD_PASSWORDCHANGE_DLG");

  00ba3	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@OAALJAFL@IDD_PASSWORDCHANGE_DLG?$AA@
  00ba8	53		 push	 ebx
  00ba9	e8 00 00 00 00	 call	 _LocalizeDialog
  00bae	83 c4 08	 add	 esp, 8

; 1409 : 
; 1410 : 			SendMessage (GetDlgItem (hwndDlg, IDC_OLD_PASSWORD), EM_LIMITTEXT, MAX_PASSWORD, 0);

  00bb1	6a 00		 push	 0
  00bb3	6a 40		 push	 64			; 00000040H
  00bb5	68 c5 00 00 00	 push	 197			; 000000c5H
  00bba	68 ec 03 00 00	 push	 1004			; 000003ecH
  00bbf	53		 push	 ebx
  00bc0	ff d6		 call	 esi
  00bc2	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  00bc8	50		 push	 eax
  00bc9	ff d7		 call	 edi

; 1411 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PASSWORD), EM_LIMITTEXT, MAX_PASSWORD, 0);

  00bcb	6a 00		 push	 0
  00bcd	6a 40		 push	 64			; 00000040H
  00bcf	68 c5 00 00 00	 push	 197			; 000000c5H
  00bd4	68 0b 04 00 00	 push	 1035			; 0000040bH
  00bd9	53		 push	 ebx
  00bda	ff d6		 call	 esi
  00bdc	50		 push	 eax
  00bdd	ff d7		 call	 edi

; 1412 : 			SendMessage (GetDlgItem (hwndDlg, IDC_VERIFY), EM_LIMITTEXT, MAX_PASSWORD, 0);

  00bdf	6a 00		 push	 0
  00be1	6a 40		 push	 64			; 00000040H
  00be3	68 c5 00 00 00	 push	 197			; 000000c5H
  00be8	68 ea 03 00 00	 push	 1002			; 000003eaH
  00bed	53		 push	 ebx
  00bee	ff d6		 call	 esi
  00bf0	50		 push	 eax
  00bf1	ff d7		 call	 edi

; 1413 : 			EnableWindow (GetDlgItem (hwndDlg, IDOK), FALSE);

  00bf3	6a 00		 push	 0
  00bf5	6a 01		 push	 1
  00bf7	53		 push	 ebx
  00bf8	ff d6		 call	 esi
  00bfa	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  00c00	50		 push	 eax
  00c01	ff d7		 call	 edi

; 1414 : 
; 1415 : 			SetCheckBox (hwndDlg, IDC_ENABLE_KEYFILES, KeyFilesEnable);

  00c03	a1 00 00 00 00	 mov	 eax, DWORD PTR _KeyFilesEnable
  00c08	50		 push	 eax
  00c09	68 f1 03 00 00	 push	 1009			; 000003f1H
  00c0e	53		 push	 ebx
  00c0f	e8 00 00 00 00	 call	 _SetCheckBox
  00c14	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1416 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_KEYFILES), TRUE);

  00c17	6a 01		 push	 1
  00c19	68 09 04 00 00	 push	 1033			; 00000409H
  00c1e	53		 push	 ebx
  00c1f	ff d6		 call	 esi
  00c21	50		 push	 eax
  00c22	ff d7		 call	 edi

; 1417 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_NEW_KEYFILES), TRUE);

  00c24	6a 01		 push	 1
  00c26	68 08 04 00 00	 push	 1032			; 00000408H
  00c2b	53		 push	 ebx
  00c2c	ff d6		 call	 esi
  00c2e	50		 push	 eax
  00c2f	ff d7		 call	 edi

; 1418 : 
; 1419 : 			SendMessage (hComboBox, CB_RESETCONTENT, 0, 0);

  00c31	8b 4d ec	 mov	 ecx, DWORD PTR _hComboBox$136358[ebp]
  00c34	6a 00		 push	 0
  00c36	6a 00		 push	 0
  00c38	68 4b 01 00 00	 push	 331			; 0000014bH
  00c3d	51		 push	 ecx
  00c3e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1420 : 
; 1421 : 			nIndex = SendMessageW (hComboBox, CB_ADDSTRING, 0, (LPARAM) GetString ("UNCHANGED"));

  00c44	68 00 00 00 00	 push	 OFFSET ??_C@_09ECKOGGEP@UNCHANGED?$AA@
  00c49	e8 00 00 00 00	 call	 _GetString
  00c4e	8b 55 ec	 mov	 edx, DWORD PTR _hComboBox$136358[ebp]
  00c51	83 c4 04	 add	 esp, 4
  00c54	50		 push	 eax
  00c55	6a 00		 push	 0
  00c57	68 43 01 00 00	 push	 323			; 00000143H
  00c5c	52		 push	 edx
  00c5d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16

; 1422 : 			SendMessage (hComboBox, CB_SETITEMDATA, nIndex, (LPARAM) 0);

  00c63	6a 00		 push	 0
  00c65	50		 push	 eax
  00c66	8b 45 ec	 mov	 eax, DWORD PTR _hComboBox$136358[ebp]
  00c69	68 51 01 00 00	 push	 337			; 00000151H
  00c6e	50		 push	 eax
  00c6f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1423 : 
; 1424 : 			for (i = FIRST_PRF_ID; i <= LAST_PRF_ID; i++)

  00c75	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _i$136359[ebp], 1
  00c7c	8d 64 24 00	 npad	 4
$LL83@PasswordCh@2:

; 1425 : 			{
; 1426 : 				if (!HashIsDeprecated (i))

  00c80	8b 4d e8	 mov	 ecx, DWORD PTR _i$136359[ebp]
  00c83	51		 push	 ecx
  00c84	e8 00 00 00 00	 call	 _HashIsDeprecated
  00c89	83 c4 04	 add	 esp, 4
  00c8c	85 c0		 test	 eax, eax
  00c8e	75 32		 jne	 SHORT $LN82@PasswordCh@2

; 1427 : 				{
; 1428 : 					nIndex = SendMessage (hComboBox, CB_ADDSTRING, 0, (LPARAM) get_pkcs5_prf_name(i));

  00c90	8b 55 e8	 mov	 edx, DWORD PTR _i$136359[ebp]
  00c93	52		 push	 edx
  00c94	e8 00 00 00 00	 call	 _get_pkcs5_prf_name
  00c99	83 c4 04	 add	 esp, 4
  00c9c	50		 push	 eax
  00c9d	8b 45 ec	 mov	 eax, DWORD PTR _hComboBox$136358[ebp]
  00ca0	6a 00		 push	 0
  00ca2	68 43 01 00 00	 push	 323			; 00000143H
  00ca7	50		 push	 eax
  00ca8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1429 : 					SendMessage (hComboBox, CB_SETITEMDATA, nIndex, (LPARAM) i);

  00cae	8b 4d e8	 mov	 ecx, DWORD PTR _i$136359[ebp]
  00cb1	8b 55 ec	 mov	 edx, DWORD PTR _hComboBox$136358[ebp]
  00cb4	51		 push	 ecx
  00cb5	50		 push	 eax
  00cb6	68 51 01 00 00	 push	 337			; 00000151H
  00cbb	52		 push	 edx
  00cbc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN82@PasswordCh@2:
  00cc2	8b 45 e8	 mov	 eax, DWORD PTR _i$136359[ebp]
  00cc5	40		 inc	 eax
  00cc6	83 f8 04	 cmp	 eax, 4
  00cc9	89 45 e8	 mov	 DWORD PTR _i$136359[ebp], eax
  00ccc	7e b2		 jle	 SHORT $LL83@PasswordCh@2

; 1430 : 				}
; 1431 : 			}
; 1432 : 
; 1433 : 			SendMessage (hComboBox, CB_SETCURSEL, 0, 0);

  00cce	8b 45 ec	 mov	 eax, DWORD PTR _hComboBox$136358[ebp]
  00cd1	6a 00		 push	 0
  00cd3	6a 00		 push	 0
  00cd5	68 4e 01 00 00	 push	 334			; 0000014eH
  00cda	50		 push	 eax
  00cdb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1434 : 
; 1435 : 			switch (pwdChangeDlgMode)

  00ce1	a1 00 00 00 00	 mov	 eax, DWORD PTR _pwdChangeDlgMode
  00ce6	83 e8 01	 sub	 eax, 1
  00ce9	0f 84 2f 01 00
	00		 je	 $LN77@PasswordCh@2
  00cef	83 e8 01	 sub	 eax, 1
  00cf2	0f 84 d6 00 00
	00		 je	 $LN76@PasswordCh@2
  00cf8	83 e8 01	 sub	 eax, 1
  00cfb	0f 85 9b 01 00
	00		 jne	 $LN78@PasswordCh@2

; 1459 : 
; 1460 : 			case PCDM_REMOVE_ALL_KEYFILES_FROM_VOL:
; 1461 : 				newKeyFilesParam.EnableKeyFiles = FALSE;
; 1462 : 				SetWindowTextW (hwndDlg, GetString ("IDD_PCDM_REMOVE_ALL_KEYFILES_FROM_VOL"));

  00d01	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@JOKOOJHO@IDD_PCDM_REMOVE_ALL_KEYFILES_FRO@
  00d06	a3 00 00 00 00	 mov	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A, eax
  00d0b	e8 00 00 00 00	 call	 _GetString
  00d10	83 c4 04	 add	 esp, 4
  00d13	50		 push	 eax
  00d14	53		 push	 ebx
  00d15	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 1463 : 				LocalizeDialog (hwndDlg, "IDD_PCDM_REMOVE_ALL_KEYFILES_FROM_VOL");

  00d1b	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@JOKOOJHO@IDD_PCDM_REMOVE_ALL_KEYFILES_FRO@
  00d20	53		 push	 ebx
  00d21	e8 00 00 00 00	 call	 _LocalizeDialog

; 1464 : 				KeyFilesEnable = TRUE;
; 1465 : 				SetCheckBox (hwndDlg, IDC_ENABLE_KEYFILES, TRUE);

  00d26	6a 01		 push	 1
  00d28	68 f1 03 00 00	 push	 1009			; 000003f1H
  00d2d	53		 push	 ebx
  00d2e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _KeyFilesEnable, 1
  00d38	e8 00 00 00 00	 call	 _SetCheckBox
  00d3d	83 c4 14	 add	 esp, 20			; 00000014H

; 1466 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_KEYFILES), TRUE);

  00d40	6a 01		 push	 1
  00d42	68 09 04 00 00	 push	 1033			; 00000409H
  00d47	53		 push	 ebx
  00d48	ff d6		 call	 esi
  00d4a	50		 push	 eax
  00d4b	ff d7		 call	 edi

; 1467 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_ENABLE_KEYFILES), TRUE);

  00d4d	6a 01		 push	 1
  00d4f	68 f1 03 00 00	 push	 1009			; 000003f1H
  00d54	53		 push	 ebx
  00d55	ff d6		 call	 esi
  00d57	50		 push	 eax
  00d58	ff d7		 call	 edi

; 1468 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_PASSWORD), FALSE);

  00d5a	6a 00		 push	 0
  00d5c	68 0b 04 00 00	 push	 1035			; 0000040bH
  00d61	53		 push	 ebx
  00d62	ff d6		 call	 esi
  00d64	50		 push	 eax
  00d65	ff d7		 call	 edi

; 1469 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_VERIFY), FALSE);

  00d67	6a 00		 push	 0
  00d69	68 ea 03 00 00	 push	 1002			; 000003eaH
  00d6e	53		 push	 ebx
  00d6f	ff d6		 call	 esi
  00d71	50		 push	 eax
  00d72	ff d7		 call	 edi

; 1470 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_ENABLE_NEW_KEYFILES), FALSE);

  00d74	6a 00		 push	 0
  00d76	68 f4 03 00 00	 push	 1012			; 000003f4H
  00d7b	53		 push	 ebx
  00d7c	ff d6		 call	 esi
  00d7e	50		 push	 eax
  00d7f	ff d7		 call	 edi

; 1471 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_SHOW_PASSWORD_CHPWD_NEW), FALSE);

  00d81	6a 00		 push	 0
  00d83	68 39 04 00 00	 push	 1081			; 00000439H
  00d88	53		 push	 ebx
  00d89	ff d6		 call	 esi
  00d8b	50		 push	 eax
  00d8c	ff d7		 call	 edi

; 1472 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_NEW_KEYFILES), FALSE);

  00d8e	6a 00		 push	 0
  00d90	68 08 04 00 00	 push	 1032			; 00000408H
  00d95	53		 push	 ebx
  00d96	ff d6		 call	 esi
  00d98	50		 push	 eax
  00d99	ff d7		 call	 edi

; 1473 : 				EnableWindow (GetDlgItem (hwndDlg, IDT_NEW_PASSWORD), FALSE);

  00d9b	6a 00		 push	 0
  00d9d	68 1f 04 00 00	 push	 1055			; 0000041fH
  00da2	53		 push	 ebx
  00da3	ff d6		 call	 esi
  00da5	50		 push	 eax
  00da6	ff d7		 call	 edi

; 1474 : 				EnableWindow (GetDlgItem (hwndDlg, IDT_CONFIRM_PASSWORD), FALSE);

  00da8	6a 00		 push	 0
  00daa	68 20 04 00 00	 push	 1056			; 00000420H
  00daf	53		 push	 ebx
  00db0	ff d6		 call	 esi
  00db2	50		 push	 eax
  00db3	ff d7		 call	 edi

; 1475 : 				EnableWindow (GetDlgItem (hwndDlg, IDT_PKCS5_PRF), FALSE);

  00db5	6a 00		 push	 0
  00db7	68 21 04 00 00	 push	 1057			; 00000421H
  00dbc	53		 push	 ebx
  00dbd	ff d6		 call	 esi
  00dbf	50		 push	 eax
  00dc0	ff d7		 call	 edi

; 1476 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_PKCS5_PRF_ID), FALSE);

  00dc2	6a 00		 push	 0
  00dc4	68 f7 03 00 00	 push	 1015			; 000003f7H

; 1477 : 				break;

  00dc9	e9 c8 00 00 00	 jmp	 $LN204@PasswordCh@2
$LN76@PasswordCh@2:

; 1447 : 				break;
; 1448 : 
; 1449 : 			case PCDM_ADD_REMOVE_VOL_KEYFILES:
; 1450 : 				SetWindowTextW (hwndDlg, GetString ("IDD_PCDM_ADD_REMOVE_VOL_KEYFILES"));

  00dce	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@POIELMAL@IDD_PCDM_ADD_REMOVE_VOL_KEYFILES@
  00dd3	e8 00 00 00 00	 call	 _GetString
  00dd8	83 c4 04	 add	 esp, 4
  00ddb	50		 push	 eax
  00ddc	53		 push	 ebx
  00ddd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 1451 : 				LocalizeDialog (hwndDlg, "IDD_PCDM_ADD_REMOVE_VOL_KEYFILES");

  00de3	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@POIELMAL@IDD_PCDM_ADD_REMOVE_VOL_KEYFILES@
  00de8	53		 push	 ebx
  00de9	e8 00 00 00 00	 call	 _LocalizeDialog
  00dee	83 c4 08	 add	 esp, 8

; 1452 : 				newKeyFilesParam.EnableKeyFiles = TRUE;
; 1453 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_PASSWORD), FALSE);

  00df1	6a 00		 push	 0
  00df3	68 0b 04 00 00	 push	 1035			; 0000040bH
  00df8	53		 push	 ebx
  00df9	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A, 1
  00e03	ff d6		 call	 esi
  00e05	50		 push	 eax
  00e06	ff d7		 call	 edi

; 1454 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_VERIFY), FALSE);

  00e08	6a 00		 push	 0
  00e0a	68 ea 03 00 00	 push	 1002			; 000003eaH
  00e0f	53		 push	 ebx
  00e10	ff d6		 call	 esi
  00e12	50		 push	 eax
  00e13	ff d7		 call	 edi

; 1455 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_SHOW_PASSWORD_CHPWD_NEW), FALSE);

  00e15	6a 00		 push	 0
  00e17	68 39 04 00 00	 push	 1081			; 00000439H

; 1456 : 				EnableWindow (GetDlgItem (hwndDlg, IDT_NEW_PASSWORD), FALSE);
; 1457 : 				EnableWindow (GetDlgItem (hwndDlg, IDT_CONFIRM_PASSWORD), FALSE);
; 1458 : 				break;

  00e1c	eb 5e		 jmp	 SHORT $LN205@PasswordCh@2
$LN77@PasswordCh@2:

; 1436 : 			{
; 1437 : 			case PCDM_CHANGE_PKCS5_PRF:
; 1438 : 				SetWindowTextW (hwndDlg, GetString ("IDD_PCDM_CHANGE_PKCS5_PRF"));

  00e1e	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EBNLJAJI@IDD_PCDM_CHANGE_PKCS5_PRF?$AA@
  00e23	e8 00 00 00 00	 call	 _GetString
  00e28	83 c4 04	 add	 esp, 4
  00e2b	50		 push	 eax
  00e2c	53		 push	 ebx
  00e2d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 1439 : 				LocalizeDialog (hwndDlg, "IDD_PCDM_CHANGE_PKCS5_PRF");

  00e33	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EBNLJAJI@IDD_PCDM_CHANGE_PKCS5_PRF?$AA@
  00e38	53		 push	 ebx
  00e39	e8 00 00 00 00	 call	 _LocalizeDialog
  00e3e	83 c4 08	 add	 esp, 8

; 1440 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_PASSWORD), FALSE);

  00e41	6a 00		 push	 0
  00e43	68 0b 04 00 00	 push	 1035			; 0000040bH
  00e48	53		 push	 ebx
  00e49	ff d6		 call	 esi
  00e4b	50		 push	 eax
  00e4c	ff d7		 call	 edi

; 1441 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_VERIFY), FALSE);

  00e4e	6a 00		 push	 0
  00e50	68 ea 03 00 00	 push	 1002			; 000003eaH
  00e55	53		 push	 ebx
  00e56	ff d6		 call	 esi
  00e58	50		 push	 eax
  00e59	ff d7		 call	 edi

; 1442 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_ENABLE_NEW_KEYFILES), FALSE);

  00e5b	6a 00		 push	 0
  00e5d	68 f4 03 00 00	 push	 1012			; 000003f4H
  00e62	53		 push	 ebx
  00e63	ff d6		 call	 esi
  00e65	50		 push	 eax
  00e66	ff d7		 call	 edi

; 1443 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_SHOW_PASSWORD_CHPWD_NEW), FALSE);

  00e68	6a 00		 push	 0
  00e6a	68 39 04 00 00	 push	 1081			; 00000439H
  00e6f	53		 push	 ebx
  00e70	ff d6		 call	 esi
  00e72	50		 push	 eax
  00e73	ff d7		 call	 edi

; 1444 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_NEW_KEYFILES), FALSE);

  00e75	6a 00		 push	 0
  00e77	68 08 04 00 00	 push	 1032			; 00000408H
$LN205@PasswordCh@2:
  00e7c	53		 push	 ebx
  00e7d	ff d6		 call	 esi
  00e7f	50		 push	 eax
  00e80	ff d7		 call	 edi

; 1445 : 				EnableWindow (GetDlgItem (hwndDlg, IDT_NEW_PASSWORD), FALSE);

  00e82	6a 00		 push	 0
  00e84	68 1f 04 00 00	 push	 1055			; 0000041fH
  00e89	53		 push	 ebx
  00e8a	ff d6		 call	 esi
  00e8c	50		 push	 eax
  00e8d	ff d7		 call	 edi

; 1446 : 				EnableWindow (GetDlgItem (hwndDlg, IDT_CONFIRM_PASSWORD), FALSE);

  00e8f	6a 00		 push	 0
  00e91	68 20 04 00 00	 push	 1056			; 00000420H
$LN204@PasswordCh@2:
  00e96	53		 push	 ebx
  00e97	ff d6		 call	 esi
  00e99	50		 push	 eax
  00e9a	ff d7		 call	 edi
$LN78@PasswordCh@2:

; 1478 : 
; 1479 : 			case PCDM_CHANGE_PASSWORD:
; 1480 : 			default:
; 1481 : 				// NOP
; 1482 : 				break;
; 1483 : 			};
; 1484 : 
; 1485 : 			if (bSysEncPwdChangeDlgMode)

  00e9c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bSysEncPwdChangeDlgMode, 0
  00ea3	0f 84 f4 00 00
	00		 je	 $LN73@PasswordCh@2

; 1486 : 			{
; 1487 : 				ToBootPwdField (hwndDlg, IDC_PASSWORD);

  00ea9	68 0b 04 00 00	 push	 1035			; 0000040bH
  00eae	53		 push	 ebx
  00eaf	e8 00 00 00 00	 call	 _ToBootPwdField

; 1488 : 				ToBootPwdField (hwndDlg, IDC_VERIFY);

  00eb4	68 ea 03 00 00	 push	 1002			; 000003eaH
  00eb9	53		 push	 ebx
  00eba	e8 00 00 00 00	 call	 _ToBootPwdField

; 1489 : 				ToBootPwdField (hwndDlg, IDC_OLD_PASSWORD);

  00ebf	68 ec 03 00 00	 push	 1004			; 000003ecH
  00ec4	53		 push	 ebx
  00ec5	e8 00 00 00 00	 call	 _ToBootPwdField
  00eca	83 c4 18	 add	 esp, 24			; 00000018H

; 1490 : 
; 1491 : 				if ((DWORD) GetKeyboardLayout (NULL) != 0x00000409 && (DWORD) GetKeyboardLayout (NULL) != 0x04090409)

  00ecd	6a 00		 push	 0
  00ecf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyboardLayout@4
  00ed5	3d 09 04 00 00	 cmp	 eax, 1033		; 00000409H
  00eda	74 4f		 je	 SHORT $LN72@PasswordCh@2
  00edc	6a 00		 push	 0
  00ede	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyboardLayout@4
  00ee4	3d 09 04 09 04	 cmp	 eax, 67699721		; 04090409H
  00ee9	74 40		 je	 SHORT $LN72@PasswordCh@2

; 1492 : 				{
; 1493 : 					DWORD keybLayout = (DWORD) LoadKeyboardLayout ("00000409", KLF_ACTIVATE);

  00eeb	6a 01		 push	 1
  00eed	68 00 00 00 00	 push	 OFFSET ??_C@_08OKJEGFFL@00000409?$AA@
  00ef2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadKeyboardLayoutA@8

; 1494 : 
; 1495 : 					if (keybLayout != 0x00000409 && keybLayout != 0x04090409)

  00ef8	3d 09 04 00 00	 cmp	 eax, 1033		; 00000409H
  00efd	74 22		 je	 SHORT $LN71@PasswordCh@2
  00eff	3d 09 04 09 04	 cmp	 eax, 67699721		; 04090409H
  00f04	74 1b		 je	 SHORT $LN71@PasswordCh@2

; 1496 : 					{
; 1497 : 						Error ("CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_ENCRYPTION");

  00f06	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@KAEHBIEI@CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_@
$LN206@PasswordCh@2:
  00f0b	e8 00 00 00 00	 call	 _Error
  00f10	83 c4 04	 add	 esp, 4

; 1498 : 						EndDialog (hwndDlg, IDCANCEL);

  00f13	6a 02		 push	 2
  00f15	53		 push	 ebx
  00f16	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 1499 : 						return 0;

  00f1c	e9 87 00 00 00	 jmp	 $LN202@PasswordCh@2
$LN71@PasswordCh@2:

; 1500 : 					}
; 1501 : 
; 1502 : 					bKeyboardLayoutChanged = TRUE;

  00f21	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, 1 ; bKeyboardLayoutChanged
$LN72@PasswordCh@2:

; 1503 : 				}
; 1504 : 
; 1505 : 				ShowWindow(GetDlgItem(hwndDlg, IDC_SHOW_PASSWORD_CHPWD_NEW), SW_HIDE);

  00f2b	6a 00		 push	 0
  00f2d	68 39 04 00 00	 push	 1081			; 00000439H
  00f32	53		 push	 ebx
  00f33	ff d6		 call	 esi
  00f35	50		 push	 eax
  00f36	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 1506 : 				ShowWindow(GetDlgItem(hwndDlg, IDC_SHOW_PASSWORD_CHPWD_ORI), SW_HIDE);

  00f3c	6a 00		 push	 0
  00f3e	68 3b 04 00 00	 push	 1083			; 0000043bH
  00f43	53		 push	 ebx
  00f44	ff d6		 call	 esi
  00f46	50		 push	 eax
  00f47	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 1507 : 
; 1508 : 				if (SetTimer (hwndDlg, TIMER_ID_KEYB_LAYOUT_GUARD, TIMER_INTERVAL_KEYB_LAYOUT_GUARD, NULL) == 0)

  00f4d	6a 00		 push	 0
  00f4f	6a 0a		 push	 10			; 0000000aH
  00f51	68 00 01 00 00	 push	 256			; 00000100H
  00f56	53		 push	 ebx
  00f57	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16
  00f5d	85 c0		 test	 eax, eax
  00f5f	75 07		 jne	 SHORT $LN70@PasswordCh@2

; 1509 : 				{
; 1510 : 					Error ("CANNOT_SET_TIMER");

  00f61	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MMDPAFIK@CANNOT_SET_TIMER?$AA@

; 1511 : 					EndDialog (hwndDlg, IDCANCEL);
; 1512 : 					return 0;

  00f66	eb a3		 jmp	 SHORT $LN206@PasswordCh@2
$LN70@PasswordCh@2:

; 1513 : 				}
; 1514 : 
; 1515 : 				newKeyFilesParam.EnableKeyFiles = FALSE;

  00f68	33 c0		 xor	 eax, eax

; 1516 : 				KeyFilesEnable = FALSE;
; 1517 : 				SetCheckBox (hwndDlg, IDC_ENABLE_KEYFILES, FALSE);

  00f6a	50		 push	 eax
  00f6b	68 f1 03 00 00	 push	 1009			; 000003f1H
  00f70	53		 push	 ebx
  00f71	a3 00 00 00 00	 mov	 DWORD PTR ?newKeyFilesParam@?1??PasswordChangeDlgProc@@9@16@4UKeyFilesDlgParam@@A, eax
  00f76	a3 00 00 00 00	 mov	 DWORD PTR _KeyFilesEnable, eax
  00f7b	e8 00 00 00 00	 call	 _SetCheckBox
  00f80	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1518 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_ENABLE_KEYFILES), FALSE);

  00f83	6a 00		 push	 0
  00f85	68 f1 03 00 00	 push	 1009			; 000003f1H
  00f8a	53		 push	 ebx
  00f8b	ff d6		 call	 esi
  00f8d	50		 push	 eax
  00f8e	ff d7		 call	 edi

; 1519 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_ENABLE_NEW_KEYFILES), FALSE);

  00f90	6a 00		 push	 0
  00f92	68 f4 03 00 00	 push	 1012			; 000003f4H
  00f97	53		 push	 ebx
  00f98	ff d6		 call	 esi
  00f9a	50		 push	 eax
  00f9b	ff d7		 call	 edi
$LN73@PasswordCh@2:

; 1520 : 			}
; 1521 : 
; 1522 : 			CheckCapsLock (hwndDlg, FALSE);

  00f9d	6a 00		 push	 0
  00f9f	53		 push	 ebx
  00fa0	e8 00 00 00 00	 call	 _CheckCapsLock
  00fa5	83 c4 08	 add	 esp, 8
$LN202@PasswordCh@2:

; 1523 : 
; 1524 : 			return 0;

  00fa8	33 c0		 xor	 eax, eax
$LN87@PasswordCh@2:

; 1882 : }

  00faa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00fad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00fb4	59		 pop	 ecx
  00fb5	5f		 pop	 edi
  00fb6	5e		 pop	 esi
  00fb7	5b		 pop	 ebx
  00fb8	8b 8d a0 42 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00fbe	33 cd		 xor	 ecx, ebp
  00fc0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00fc5	81 c5 a4 42 00
	00		 add	 ebp, 17060		; 000042a4H
  00fcb	8b e5		 mov	 esp, ebp
  00fcd	5d		 pop	 ebp
  00fce	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_PasswordChangeDlgProc@16:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	8b 8a ac 42 00
	00		 mov	 ecx, DWORD PTR [edx+17068]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_PasswordChangeDlgProc@16
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_PasswordChangeDlgProc@16 ENDP
EXTRN	_IsNonInstallMode:PROC
EXTRN	_IsButtonChecked:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?PreferencesDlgEnableButtons@@YAXPAUHWND__@@@Z
_TEXT	SEGMENT
_installed$ = -8					; size = 4
_idle$ = -4						; size = 4
?PreferencesDlgEnableButtons@@YAXPAUHWND__@@@Z PROC	; PreferencesDlgEnableButtons, COMDAT
; _hwndDlg$ = esi

; 2187 : {

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	57		 push	 edi

; 2188 : 	BOOL back = IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_BKG_TASK_ENABLE));

  00006	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  0000c	68 eb 03 00 00	 push	 1003			; 000003ebH
  00011	56		 push	 esi
  00012	ff d7		 call	 edi
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _IsButtonChecked
  0001a	83 c4 04	 add	 esp, 4

; 2189 : 	BOOL idle = IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_DISMOUNT_INACTIVE));

  0001d	68 fc 03 00 00	 push	 1020			; 000003fcH
  00022	56		 push	 esi
  00023	8b e8		 mov	 ebp, eax
  00025	ff d7		 call	 edi
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _IsButtonChecked
  0002d	83 c4 04	 add	 esp, 4
  00030	89 44 24 10	 mov	 DWORD PTR _idle$[esp+20], eax

; 2190 : 	BOOL installed = !IsNonInstallMode();

  00034	e8 00 00 00 00	 call	 _IsNonInstallMode
  00039	f7 d8		 neg	 eax
  0003b	1b c0		 sbb	 eax, eax
  0003d	40		 inc	 eax
  0003e	89 44 24 0c	 mov	 DWORD PTR _installed$[esp+20], eax

; 2191 : 
; 2192 : 	EnableWindow (GetDlgItem (hwndDlg, IDC_CLOSE_BKG_TASK_WHEN_NOVOL), back && installed);

  00042	85 ed		 test	 ebp, ebp
  00044	74 0b		 je	 SHORT $LN3@Preference@2
  00046	85 c0		 test	 eax, eax
  00048	74 07		 je	 SHORT $LN3@Preference@2
  0004a	b8 01 00 00 00	 mov	 eax, 1
  0004f	eb 02		 jmp	 SHORT $LN4@Preference@2
$LN3@Preference@2:
  00051	33 c0		 xor	 eax, eax
$LN4@Preference@2:
  00053	50		 push	 eax
  00054	68 33 04 00 00	 push	 1075			; 00000433H
  00059	56		 push	 esi
  0005a	ff d7		 call	 edi
  0005c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  00062	50		 push	 eax
  00063	ff d3		 call	 ebx

; 2193 : 	EnableWindow (GetDlgItem (hwndDlg, IDT_LOGON), installed);

  00065	8b 44 24 0c	 mov	 eax, DWORD PTR _installed$[esp+20]
  00069	50		 push	 eax
  0006a	68 35 04 00 00	 push	 1077			; 00000435H
  0006f	56		 push	 esi
  00070	ff d7		 call	 edi
  00072	50		 push	 eax
  00073	ff d3		 call	 ebx

; 2194 : 	EnableWindow (GetDlgItem (hwndDlg, IDC_PREF_LOGON_START), back && installed);

  00075	85 ed		 test	 ebp, ebp
  00077	74 0e		 je	 SHORT $LN5@Preference@2
  00079	83 7c 24 0c 00	 cmp	 DWORD PTR _installed$[esp+20], 0
  0007e	74 07		 je	 SHORT $LN5@Preference@2
  00080	b8 01 00 00 00	 mov	 eax, 1
  00085	eb 02		 jmp	 SHORT $LN6@Preference@2
$LN5@Preference@2:
  00087	33 c0		 xor	 eax, eax
$LN6@Preference@2:
  00089	50		 push	 eax
  0008a	68 37 04 00 00	 push	 1079			; 00000437H
  0008f	56		 push	 esi
  00090	ff d7		 call	 edi
  00092	50		 push	 eax
  00093	ff d3		 call	 ebx

; 2195 : 	EnableWindow (GetDlgItem (hwndDlg, IDC_PREF_LOGON_MOUNT_DEVICES), installed);

  00095	8b 4c 24 0c	 mov	 ecx, DWORD PTR _installed$[esp+20]
  00099	51		 push	 ecx
  0009a	68 38 04 00 00	 push	 1080			; 00000438H
  0009f	56		 push	 esi
  000a0	ff d7		 call	 edi
  000a2	50		 push	 eax
  000a3	ff d3		 call	 ebx

; 2196 : 	EnableWindow (GetDlgItem (hwndDlg, IDT_AUTO_DISMOUNT), back);

  000a5	55		 push	 ebp
  000a6	68 2b 04 00 00	 push	 1067			; 0000042bH
  000ab	56		 push	 esi
  000ac	ff d7		 call	 edi
  000ae	50		 push	 eax
  000af	ff d3		 call	 ebx

; 2197 : 	EnableWindow (GetDlgItem (hwndDlg, IDT_AUTO_DISMOUNT_ON), back);

  000b1	55		 push	 ebp
  000b2	68 31 04 00 00	 push	 1073			; 00000431H
  000b7	56		 push	 esi
  000b8	ff d7		 call	 edi
  000ba	50		 push	 eax
  000bb	ff d3		 call	 ebx

; 2198 : 	EnableWindow (GetDlgItem (hwndDlg, IDT_MINUTES), back);

  000bd	55		 push	 ebp
  000be	68 2e 04 00 00	 push	 1070			; 0000042eH
  000c3	56		 push	 esi
  000c4	ff d7		 call	 edi
  000c6	50		 push	 eax
  000c7	ff d3		 call	 ebx

; 2199 : 	EnableWindow (GetDlgItem (hwndDlg, IDC_PREF_DISMOUNT_LOGOFF), back);

  000c9	55		 push	 ebp
  000ca	68 fa 03 00 00	 push	 1018			; 000003faH
  000cf	56		 push	 esi
  000d0	ff d7		 call	 edi
  000d2	50		 push	 eax
  000d3	ff d3		 call	 ebx

; 2200 : 	EnableWindow (GetDlgItem (hwndDlg, IDC_PREF_DISMOUNT_POWERSAVING), back);

  000d5	55		 push	 ebp
  000d6	68 30 04 00 00	 push	 1072			; 00000430H
  000db	56		 push	 esi
  000dc	ff d7		 call	 edi
  000de	50		 push	 eax
  000df	ff d3		 call	 ebx

; 2201 : 	EnableWindow (GetDlgItem (hwndDlg, IDC_PREF_DISMOUNT_SCREENSAVER), back);

  000e1	55		 push	 ebp
  000e2	68 2f 04 00 00	 push	 1071			; 0000042fH
  000e7	56		 push	 esi
  000e8	ff d7		 call	 edi
  000ea	50		 push	 eax
  000eb	ff d3		 call	 ebx

; 2202 : 	EnableWindow (GetDlgItem (hwndDlg, IDC_PREF_DISMOUNT_INACTIVE), back);

  000ed	55		 push	 ebp
  000ee	68 fc 03 00 00	 push	 1020			; 000003fcH
  000f3	56		 push	 esi
  000f4	ff d7		 call	 edi
  000f6	50		 push	 eax
  000f7	ff d3		 call	 ebx

; 2203 : 	EnableWindow (GetDlgItem (hwndDlg, IDC_PREF_DISMOUNT_INACTIVE_TIME), back && idle);

  000f9	85 ed		 test	 ebp, ebp
  000fb	74 0e		 je	 SHORT $LN7@Preference@2
  000fd	83 7c 24 10 00	 cmp	 DWORD PTR _idle$[esp+20], 0
  00102	74 07		 je	 SHORT $LN7@Preference@2
  00104	b8 01 00 00 00	 mov	 eax, 1
  00109	eb 02		 jmp	 SHORT $LN8@Preference@2
$LN7@Preference@2:
  0010b	33 c0		 xor	 eax, eax
$LN8@Preference@2:
  0010d	50		 push	 eax
  0010e	68 2d 04 00 00	 push	 1069			; 0000042dH
  00113	56		 push	 esi
  00114	ff d7		 call	 edi
  00116	50		 push	 eax
  00117	ff d3		 call	 ebx

; 2204 : 	EnableWindow (GetDlgItem (hwndDlg, IDC_PREF_FORCE_AUTO_DISMOUNT), back);

  00119	55		 push	 ebp
  0011a	68 2c 04 00 00	 push	 1068			; 0000042cH
  0011f	56		 push	 esi
  00120	ff d7		 call	 edi
  00122	50		 push	 eax
  00123	ff d3		 call	 ebx
  00125	5f		 pop	 edi
  00126	5d		 pop	 ebp
  00127	5b		 pop	 ebx

; 2205 : }

  00128	83 c4 08	 add	 esp, 8
  0012b	c3		 ret	 0
?PreferencesDlgEnableButtons@@YAXPAUHWND__@@@Z ENDP	; PreferencesDlgEnableButtons
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_GetCipherBlockSizeByDriveNo
EXTRN	_EAGetPreviousCipher:PROC
EXTRN	_CipherGetBlockSize:PROC
EXTRN	_EAGetLastCipher:PROC
EXTRN	__imp__DeviceIoControl@32:PROC
EXTRN	_hDriver:DWORD
; Function compile flags: /Ogtpy
;	COMDAT _GetCipherBlockSizeByDriveNo
_TEXT	SEGMENT
_dwResult$ = -604					; size = 4
_prop$ = -600						; size = 596
__$ArrayPad$ = -4					; size = 4
_nDosDriveNo$ = 8					; size = 4
_GetCipherBlockSizeByDriveNo PROC			; COMDAT

; 2599 : {

  00000	81 ec 5c 02 00
	00		 sub	 esp, 604		; 0000025cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 58 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+604], eax
  00014	56		 push	 esi

; 2600 : 	VOLUME_PROPERTIES_STRUCT prop;
; 2601 : 	DWORD dwResult;
; 2602 : 
; 2603 : 	int blockSize = 0, cipherID;
; 2604 : 
; 2605 : 	memset (&prop, 0, sizeof(prop));

  00015	68 54 02 00 00	 push	 596			; 00000254H
  0001a	33 f6		 xor	 esi, esi
  0001c	8d 44 24 0c	 lea	 eax, DWORD PTR _prop$[esp+612]
  00020	56		 push	 esi
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _memset

; 2606 : 	prop.driveNo = nDosDriveNo;

  00027	8b 8c 24 70 02
	00 00		 mov	 ecx, DWORD PTR _nDosDriveNo$[esp+616]
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2607 : 
; 2608 : 	if (DeviceIoControl (hDriver, TC_IOCTL_GET_VOLUME_PROPERTIES, &prop, sizeof (prop), &prop, sizeof (prop), &dwResult, NULL))

  00031	56		 push	 esi
  00032	8d 54 24 08	 lea	 edx, DWORD PTR _dwResult$[esp+612]
  00036	52		 push	 edx
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDriver
  0003d	68 54 02 00 00	 push	 596			; 00000254H
  00042	8d 44 24 14	 lea	 eax, DWORD PTR _prop$[esp+620]
  00046	50		 push	 eax
  00047	68 54 02 00 00	 push	 596			; 00000254H
  0004c	89 4c 24 1c	 mov	 DWORD PTR _prop$[esp+628], ecx
  00050	8b c8		 mov	 ecx, eax
  00052	51		 push	 ecx
  00053	68 1c 20 22 00	 push	 2236444			; 0022201cH
  00058	52		 push	 edx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  0005f	85 c0		 test	 eax, eax
  00061	74 75		 je	 SHORT $LN14@GetCipherB

; 2609 : 	{
; 2610 : 		for (cipherID = EAGetLastCipher (prop.ea);

  00063	8b 84 24 20 02
	00 00		 mov	 eax, DWORD PTR _prop$[esp+1144]
  0006a	57		 push	 edi
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 _EAGetLastCipher
  00071	8b f8		 mov	 edi, eax
  00073	83 c4 04	 add	 esp, 4

; 2611 : 			cipherID != 0;
; 2612 : 			cipherID = EAGetPreviousCipher (prop.ea, cipherID))

  00076	85 ff		 test	 edi, edi
  00078	74 45		 je	 SHORT $LN13@GetCipherB
  0007a	8d 9b 00 00 00
	00		 npad	 6
$LL5@GetCipherB:

; 2613 : 		{
; 2614 : 			if (blockSize > 0)
; 2615 : 				blockSize = min (blockSize, CipherGetBlockSize (cipherID) * 8);

  00080	57		 push	 edi
  00081	e8 00 00 00 00	 call	 _CipherGetBlockSize
  00086	83 c4 04	 add	 esp, 4
  00089	85 f6		 test	 esi, esi
  0008b	7e 13		 jle	 SHORT $LN2@GetCipherB
  0008d	03 c0		 add	 eax, eax
  0008f	03 c0		 add	 eax, eax
  00091	03 c0		 add	 eax, eax
  00093	3b f0		 cmp	 esi, eax
  00095	7c 11		 jl	 SHORT $LN4@GetCipherB
  00097	57		 push	 edi
  00098	e8 00 00 00 00	 call	 _CipherGetBlockSize
  0009d	83 c4 04	 add	 esp, 4
$LN2@GetCipherB:

; 2616 : 			else
; 2617 : 				blockSize = CipherGetBlockSize (cipherID) * 8;

  000a0	8b f0		 mov	 esi, eax
  000a2	03 f6		 add	 esi, esi
  000a4	03 f6		 add	 esi, esi
  000a6	03 f6		 add	 esi, esi
$LN4@GetCipherB:
  000a8	8b 8c 24 24 02
	00 00		 mov	 ecx, DWORD PTR _prop$[esp+1148]
  000af	57		 push	 edi
  000b0	51		 push	 ecx
  000b1	e8 00 00 00 00	 call	 _EAGetPreviousCipher
  000b6	8b f8		 mov	 edi, eax
  000b8	83 c4 08	 add	 esp, 8
  000bb	85 ff		 test	 edi, edi
  000bd	75 c1		 jne	 SHORT $LL5@GetCipherB
$LN13@GetCipherB:
  000bf	5f		 pop	 edi

; 2618 : 		}
; 2619 : 	}
; 2620 : 
; 2621 : 	return blockSize;

  000c0	8b c6		 mov	 eax, esi
  000c2	5e		 pop	 esi

; 2622 : }

  000c3	8b 8c 24 58 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+604]
  000ca	33 cc		 xor	 ecx, esp
  000cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d1	81 c4 5c 02 00
	00		 add	 esp, 604		; 0000025cH
  000d7	c3		 ret	 0
$LN14@GetCipherB:
  000d8	8b 8c 24 5c 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+608]
  000df	8b c6		 mov	 eax, esi
  000e1	5e		 pop	 esi
  000e2	33 cc		 xor	 ecx, esp
  000e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e9	81 c4 5c 02 00
	00		 add	 esp, 604		; 0000025cH
  000ef	c3		 ret	 0
_GetCipherBlockSizeByDriveNo ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_GetModeOfOperationByDriveNo
; Function compile flags: /Ogtpy
;	COMDAT _GetModeOfOperationByDriveNo
_TEXT	SEGMENT
_dwResult$ = -604					; size = 4
_prop$ = -600						; size = 596
__$ArrayPad$ = -4					; size = 4
_nDosDriveNo$ = 8					; size = 4
_GetModeOfOperationByDriveNo PROC			; COMDAT

; 2627 : {

  00000	81 ec 5c 02 00
	00		 sub	 esp, 604		; 0000025cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 58 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+604], eax

; 2628 : 	VOLUME_PROPERTIES_STRUCT prop;
; 2629 : 	DWORD dwResult;
; 2630 : 
; 2631 : 	memset (&prop, 0, sizeof(prop));

  00014	68 54 02 00 00	 push	 596			; 00000254H
  00019	8d 44 24 08	 lea	 eax, DWORD PTR _prop$[esp+608]
  0001d	6a 00		 push	 0
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 _memset

; 2632 : 	prop.driveNo = nDosDriveNo;

  00025	8b 8c 24 6c 02
	00 00		 mov	 ecx, DWORD PTR _nDosDriveNo$[esp+612]
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2633 : 
; 2634 : 	if (DeviceIoControl (hDriver, TC_IOCTL_GET_VOLUME_PROPERTIES, &prop, sizeof (prop), &prop, sizeof (prop), &dwResult, NULL))

  0002f	6a 00		 push	 0
  00031	8d 54 24 04	 lea	 edx, DWORD PTR _dwResult$[esp+608]
  00035	52		 push	 edx
  00036	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDriver
  0003c	68 54 02 00 00	 push	 596			; 00000254H
  00041	8d 44 24 10	 lea	 eax, DWORD PTR _prop$[esp+616]
  00045	50		 push	 eax
  00046	68 54 02 00 00	 push	 596			; 00000254H
  0004b	89 4c 24 18	 mov	 DWORD PTR _prop$[esp+624], ecx
  0004f	8b c8		 mov	 ecx, eax
  00051	51		 push	 ecx
  00052	68 1c 20 22 00	 push	 2236444			; 0022201cH
  00057	52		 push	 edx
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 2635 : 	{
; 2636 : 		return prop.mode;
; 2637 : 	}
; 2638 : 
; 2639 : 	return 0;
; 2640 : }

  0005e	8b 8c 24 58 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+604]
  00065	f7 d8		 neg	 eax
  00067	1b c0		 sbb	 eax, eax
  00069	23 84 24 20 02
	00 00		 and	 eax, DWORD PTR _prop$[esp+1144]
  00070	33 cc		 xor	 ecx, esp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	81 c4 5c 02 00
	00		 add	 esp, 604		; 0000025cH
  0007d	c3		 ret	 0
_GetModeOfOperationByDriveNo ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@OIDCBJLP@FIRST_AVAILABLE?$AA@		; `string'
PUBLIC	??_C@_0BB@KOMHMFOJ@IDD_TRAVELER_DLG?$AA@	; `string'
PUBLIC	??_C@_0BG@EAOOIFHO@TRAVELER_DISK_CREATED?$AA@	; `string'
PUBLIC	??_C@_1JE@HACDHGGM@?$AAs?$AAh?$AAe?$AAl?$AAl?$AA?2?$AAd?$AAi?$AAs?$AAm?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$CF?$AAs?$AA?6?$AAs?$AAh?$AAe?$AAl?$AAl?$AA?2?$AAd?$AAi?$AAs?$AAm?$AAo?$AAu?$AAn?$AAt@ ; `string'
PUBLIC	??_C@_0BI@DIPBHJCK@DISMOUNT_ALL_TC_VOLUMES?$AA@	; `string'
PUBLIC	??_C@_1HM@MAHCOBAC@?$AAs?$AAh?$AAe?$AAl?$AAl?$AA?2?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$DN?$AA?$CF?$AAs?$AA?6?$AAs?$AAh?$AAe?$AAl?$AAl?$AA?2?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1BE@KMHACBEF@?$AAo?$AAp?$AAe?$AAn?$AA?$DN?$AA?$CF?$AAh?$AAs?$AA?6?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BK@HJGFLODN@CipherShed?2CipherShed?4exe?$AA@ ; `string'
PUBLIC	??_C@_1BG@HBMCJIGD@?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$DN?$AA?$CF?$AAs?$AA?6?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BF@FNOLBOJK@IDC_PREF_LOGON_START?$AA@	; `string'
PUBLIC	??_C@_0BA@GLIKLLDG@MOUNT_TC_VOLUME?$AA@		; `string'
PUBLIC	??_C@_1GG@FCCOHAAK@?$AA?$FL?$AAa?$AAu?$AAt?$AAo?$AAr?$AAu?$AAn?$AA?$FN?$AA?6?$AAl?$AAa?$AAb?$AAe?$AAl?$AA?$DN?$AA?$CF?$AAs?$AA?6?$AAi?$AAc?$AAo?$AAn?$AA?$DN?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh@ ; `string'
PUBLIC	??_C@_0BB@OANGMHDM@TC_TRAVELER_DISK?$AA@	; `string'
PUBLIC	??_C@_0DM@DKKPKDEI@CipherShed?2CipherShed?4exe?5?1q?5bac@ ; `string'
PUBLIC	??_C@_03FFBCBBOC@?5?1e?$AA@			; `string'
PUBLIC	??_C@_05OFCDDPAN@?5?1c?5y?$AA@			; `string'
PUBLIC	??_C@_06CPFEHJGK@?5?1m?5ro?$AA@			; `string'
PUBLIC	??_C@_0BE@JLOKBADK@CANT_CREATE_AUTORUN?$AA@	; `string'
PUBLIC	??_C@_0O@NLMEGGOA@w?0ccs?$DNUNICODE?$AA@	; `string'
PUBLIC	??_C@_0P@PNEANFPE@?$CFs?2autorun?4inf?$AA@	; `string'
PUBLIC	??_C@_0BO@DOBPCGCP@?$CFs?2CipherShed?2Language?4?$CFs?4xml?$AA@ ; `string'
PUBLIC	??_C@_0BD@CKMJLFFK@?$CFs?2Language?4?$CFs?4xml?$AA@ ; `string'
PUBLIC	??_C@_02LFNMGJAP@en?$AA@			; `string'
PUBLIC	??_C@_0CA@HFBFOIIO@?$CFs?2CipherShed?2truecrypt?9x64?4sys?$AA@ ; `string'
PUBLIC	??_C@_0BF@EOFLLDBF@?$CFs?2truecrypt?9x64?4sys?$AA@ ; `string'
PUBLIC	??_C@_0BM@NEDOPHHN@?$CFs?2CipherShed?2truecrypt?4sys?$AA@ ; `string'
PUBLIC	??_C@_0BB@BGNGAFJM@?$CFs?2truecrypt?4sys?$AA@	; `string'
PUBLIC	??_C@_0CE@MIAHDFAN@?$CFs?2CipherShed?2CipherShed?9Format?4@ ; `string'
PUBLIC	??_C@_0BJ@BNFOBJFG@?$CFs?2CipherShed?9Format?4exe?$AA@ ; `string'
PUBLIC	??_C@_0BN@CCABONAP@?$CFs?2CipherShed?2CipherShed?4exe?$AA@ ; `string'
PUBLIC	??_C@_0BC@PFMONHBD@?$CFs?2CipherShed?4exe?$AA@	; `string'
PUBLIC	??_C@_0O@JJPBLNNC@?$CFs?2CipherShed?$AA@	; `string'
PUBLIC	??_C@_01BJJEKLCA@?$CC?$AA@			; `string'
PUBLIC	??_C@_0BB@EGBJNKPM@NO_FILE_SELECTED?$AA@	; `string'
PUBLIC	??_C@_0BB@EDOKKIEO@NO_PATH_SELECTED?$AA@	; `string'
PUBLIC	??_C@_0BA@DJBAGGGN@SELECT_DEST_DIR?$AA@		; `string'
PUBLIC	??_C@_0L@GHEOANHD@OPEN_TITLE?$AA@		; `string'
PUBLIC	??_C@_0BM@BMCDENFC@AUTORUN_MAY_NOT_ALWAYS_WORK?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?TravelerDlgProc@@YGHPAUHWND__@@IIJ@Z		; TravelerDlgProc
EXTRN	__imp__SendDlgItemMessageW@20:PROC
EXTRN	_fclose:PROC
EXTRN	_CheckFileStreamWriteErrors:PROC
EXTRN	_fwprintf:PROC
EXTRN	_fopen:PROC
EXTRN	__imp__DeleteFileA@4:PROC
EXTRN	_GetPreferredLangId:PROC
EXTRN	_TCCopyFile:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	_sprintf:PROC
EXTRN	__imp__GetSystemDirectoryA@8:PROC
EXTRN	__imp__SetFocus@4:PROC
EXTRN	__imp__SendDlgItemMessageA@20:PROC
EXTRN	_BrowseDirectories:PROC
EXTRN	__imp__SetDlgItemTextA@12:PROC
EXTRN	?BrowseFilesInDir@@YAHPAUHWND__@@PAD11HHPA_WPB_W3@Z:PROC ; BrowseFilesInDir
EXTRN	__imp__GetDlgItemTextA@16:PROC
;	COMDAT ?bAutoRunWarningDisplayed@?1??TravelerDlgProc@@YGHPAUHWND__@@IIJ@Z@4HA
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
_BSS	SEGMENT
?bAutoRunWarningDisplayed@?1??TravelerDlgProc@@YGHPAUHWND__@@IIJ@Z@4HA DD 01H DUP (?) ; `TravelerDlgProc'::`2'::bAutoRunWarningDisplayed
_BSS	ENDS
;	COMDAT ??_C@_0BA@OIDCBJLP@FIRST_AVAILABLE?$AA@
CONST	SEGMENT
??_C@_0BA@OIDCBJLP@FIRST_AVAILABLE?$AA@ DB 'FIRST_AVAILABLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KOMHMFOJ@IDD_TRAVELER_DLG?$AA@
CONST	SEGMENT
??_C@_0BB@KOMHMFOJ@IDD_TRAVELER_DLG?$AA@ DB 'IDD_TRAVELER_DLG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EAOOIFHO@TRAVELER_DISK_CREATED?$AA@
CONST	SEGMENT
??_C@_0BG@EAOOIFHO@TRAVELER_DISK_CREATED?$AA@ DB 'TRAVELER_DISK_CREATED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JE@HACDHGGM@?$AAs?$AAh?$AAe?$AAl?$AAl?$AA?2?$AAd?$AAi?$AAs?$AAm?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$CF?$AAs?$AA?6?$AAs?$AAh?$AAe?$AAl?$AAl?$AA?2?$AAd?$AAi?$AAs?$AAm?$AAo?$AAu?$AAn?$AAt@
CONST	SEGMENT
??_C@_1JE@HACDHGGM@?$AAs?$AAh?$AAe?$AAl?$AAl?$AA?2?$AAd?$AAi?$AAs?$AAm?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$CF?$AAs?$AA?6?$AAs?$AAh?$AAe?$AAl?$AAl?$AA?2?$AAd?$AAi?$AAs?$AAm?$AAo?$AAu?$AAn?$AAt@ DB 's'
	DB	00H, 'h', 00H, 'e', 00H, 'l', 00H, 'l', 00H, '\', 00H, 'd', 00H
	DB	'i', 00H, 's', 00H, 'm', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't'
	DB	00H, '=', 00H, '%', 00H, 's', 00H, 0aH, 00H, 's', 00H, 'h', 00H
	DB	'e', 00H, 'l', 00H, 'l', 00H, '\', 00H, 'd', 00H, 'i', 00H, 's'
	DB	00H, 'm', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '\', 00H
	DB	'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'd'
	DB	00H, '=', 00H, 'C', 00H, 'i', 00H, 'p', 00H, 'h', 00H, 'e', 00H
	DB	'r', 00H, 'S', 00H, 'h', 00H, 'e', 00H, 'd', 00H, '\', 00H, 'C'
	DB	00H, 'i', 00H, 'p', 00H, 'h', 00H, 'e', 00H, 'r', 00H, 'S', 00H
	DB	'h', 00H, 'e', 00H, 'd', 00H, '.', 00H, 'e', 00H, 'x', 00H, 'e'
	DB	00H, ' ', 00H, '/', 00H, 'q', 00H, ' ', 00H, '/', 00H, 'd', 00H
	DB	0aH, 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DIPBHJCK@DISMOUNT_ALL_TC_VOLUMES?$AA@
CONST	SEGMENT
??_C@_0BI@DIPBHJCK@DISMOUNT_ALL_TC_VOLUMES?$AA@ DB 'DISMOUNT_ALL_TC_VOLUM'
	DB	'ES', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1HM@MAHCOBAC@?$AAs?$AAh?$AAe?$AAl?$AAl?$AA?2?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$DN?$AA?$CF?$AAs?$AA?6?$AAs?$AAh?$AAe?$AAl?$AAl?$AA?2?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAa@
CONST	SEGMENT
??_C@_1HM@MAHCOBAC@?$AAs?$AAh?$AAe?$AAl?$AAl?$AA?2?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$DN?$AA?$CF?$AAs?$AA?6?$AAs?$AAh?$AAe?$AAl?$AAl?$AA?2?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAa@ DB 's'
	DB	00H, 'h', 00H, 'e', 00H, 'l', 00H, 'l', 00H, '\', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 'r', 00H, 't', 00H, '=', 00H, '%', 00H, 's'
	DB	00H, 0aH, 00H, 's', 00H, 'h', 00H, 'e', 00H, 'l', 00H, 'l', 00H
	DB	'\', 00H, 's', 00H, 't', 00H, 'a', 00H, 'r', 00H, 't', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H
	DB	'd', 00H, '=', 00H, 'C', 00H, 'i', 00H, 'p', 00H, 'h', 00H, 'e'
	DB	00H, 'r', 00H, 'S', 00H, 'h', 00H, 'e', 00H, 'd', 00H, '\', 00H
	DB	'C', 00H, 'i', 00H, 'p', 00H, 'h', 00H, 'e', 00H, 'r', 00H, 'S'
	DB	00H, 'h', 00H, 'e', 00H, 'd', 00H, '.', 00H, 'e', 00H, 'x', 00H
	DB	'e', 00H, 0aH, 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@KMHACBEF@?$AAo?$AAp?$AAe?$AAn?$AA?$DN?$AA?$CF?$AAh?$AAs?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@KMHACBEF@?$AAo?$AAp?$AAe?$AAn?$AA?$DN?$AA?$CF?$AAh?$AAs?$AA?6?$AA?$AA@ DB 'o'
	DB	00H, 'p', 00H, 'e', 00H, 'n', 00H, '=', 00H, '%', 00H, 'h', 00H
	DB	's', 00H, 0aH, 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HJGFLODN@CipherShed?2CipherShed?4exe?$AA@
CONST	SEGMENT
??_C@_0BK@HJGFLODN@CipherShed?2CipherShed?4exe?$AA@ DB 'CipherShed\Cipher'
	DB	'Shed.exe', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@HBMCJIGD@?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$DN?$AA?$CF?$AAs?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@HBMCJIGD@?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$DN?$AA?$CF?$AAs?$AA?6?$AA?$AA@ DB 'a'
	DB	00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, '=', 00H
	DB	'%', 00H, 's', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FNOLBOJK@IDC_PREF_LOGON_START?$AA@
CONST	SEGMENT
??_C@_0BF@FNOLBOJK@IDC_PREF_LOGON_START?$AA@ DB 'IDC_PREF_LOGON_START', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GLIKLLDG@MOUNT_TC_VOLUME?$AA@
CONST	SEGMENT
??_C@_0BA@GLIKLLDG@MOUNT_TC_VOLUME?$AA@ DB 'MOUNT_TC_VOLUME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GG@FCCOHAAK@?$AA?$FL?$AAa?$AAu?$AAt?$AAo?$AAr?$AAu?$AAn?$AA?$FN?$AA?6?$AAl?$AAa?$AAb?$AAe?$AAl?$AA?$DN?$AA?$CF?$AAs?$AA?6?$AAi?$AAc?$AAo?$AAn?$AA?$DN?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh@
CONST	SEGMENT
??_C@_1GG@FCCOHAAK@?$AA?$FL?$AAa?$AAu?$AAt?$AAo?$AAr?$AAu?$AAn?$AA?$FN?$AA?6?$AAl?$AAa?$AAb?$AAe?$AAl?$AA?$DN?$AA?$CF?$AAs?$AA?6?$AAi?$AAc?$AAo?$AAn?$AA?$DN?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh@ DB '['
	DB	00H, 'a', 00H, 'u', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'u', 00H
	DB	'n', 00H, ']', 00H, 0aH, 00H, 'l', 00H, 'a', 00H, 'b', 00H, 'e'
	DB	00H, 'l', 00H, '=', 00H, '%', 00H, 's', 00H, 0aH, 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, '=', 00H, 'C', 00H, 'i', 00H, 'p'
	DB	00H, 'h', 00H, 'e', 00H, 'r', 00H, 'S', 00H, 'h', 00H, 'e', 00H
	DB	'd', 00H, '\', 00H, 'C', 00H, 'i', 00H, 'p', 00H, 'h', 00H, 'e'
	DB	00H, 'r', 00H, 'S', 00H, 'h', 00H, 'e', 00H, 'd', 00H, '.', 00H
	DB	'e', 00H, 'x', 00H, 'e', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OANGMHDM@TC_TRAVELER_DISK?$AA@
CONST	SEGMENT
??_C@_0BB@OANGMHDM@TC_TRAVELER_DISK?$AA@ DB 'TC_TRAVELER_DISK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@DKKPKDEI@CipherShed?2CipherShed?4exe?5?1q?5bac@
CONST	SEGMENT
??_C@_0DM@DKKPKDEI@CipherShed?2CipherShed?4exe?5?1q?5bac@ DB 'CipherShed\'
	DB	'CipherShed.exe /q background%s%s%s%s /m rm /v %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFBCBBOC@?5?1e?$AA@
CONST	SEGMENT
??_C@_03FFBCBBOC@?5?1e?$AA@ DB ' /e', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OFCDDPAN@?5?1c?5y?$AA@
CONST	SEGMENT
??_C@_05OFCDDPAN@?5?1c?5y?$AA@ DB ' /c y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CPFEHJGK@?5?1m?5ro?$AA@
CONST	SEGMENT
??_C@_06CPFEHJGK@?5?1m?5ro?$AA@ DB ' /m ro', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JLOKBADK@CANT_CREATE_AUTORUN?$AA@
CONST	SEGMENT
??_C@_0BE@JLOKBADK@CANT_CREATE_AUTORUN?$AA@ DB 'CANT_CREATE_AUTORUN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NLMEGGOA@w?0ccs?$DNUNICODE?$AA@
CONST	SEGMENT
??_C@_0O@NLMEGGOA@w?0ccs?$DNUNICODE?$AA@ DB 'w,ccs=UNICODE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PNEANFPE@?$CFs?2autorun?4inf?$AA@
CONST	SEGMENT
??_C@_0P@PNEANFPE@?$CFs?2autorun?4inf?$AA@ DB '%s\autorun.inf', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DOBPCGCP@?$CFs?2CipherShed?2Language?4?$CFs?4xml?$AA@
CONST	SEGMENT
??_C@_0BO@DOBPCGCP@?$CFs?2CipherShed?2Language?4?$CFs?4xml?$AA@ DB '%s\Ci'
	DB	'pherShed\Language.%s.xml', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CKMJLFFK@?$CFs?2Language?4?$CFs?4xml?$AA@
CONST	SEGMENT
??_C@_0BD@CKMJLFFK@?$CFs?2Language?4?$CFs?4xml?$AA@ DB '%s\Language.%s.xm'
	DB	'l', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en?$AA@
CONST	SEGMENT
??_C@_02LFNMGJAP@en?$AA@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HFBFOIIO@?$CFs?2CipherShed?2truecrypt?9x64?4sys?$AA@
CONST	SEGMENT
??_C@_0CA@HFBFOIIO@?$CFs?2CipherShed?2truecrypt?9x64?4sys?$AA@ DB '%s\Cip'
	DB	'herShed\truecrypt-x64.sys', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EOFLLDBF@?$CFs?2truecrypt?9x64?4sys?$AA@
CONST	SEGMENT
??_C@_0BF@EOFLLDBF@?$CFs?2truecrypt?9x64?4sys?$AA@ DB '%s\truecrypt-x64.s'
	DB	'ys', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NEDOPHHN@?$CFs?2CipherShed?2truecrypt?4sys?$AA@
CONST	SEGMENT
??_C@_0BM@NEDOPHHN@?$CFs?2CipherShed?2truecrypt?4sys?$AA@ DB '%s\CipherSh'
	DB	'ed\truecrypt.sys', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BGNGAFJM@?$CFs?2truecrypt?4sys?$AA@
CONST	SEGMENT
??_C@_0BB@BGNGAFJM@?$CFs?2truecrypt?4sys?$AA@ DB '%s\truecrypt.sys', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MIAHDFAN@?$CFs?2CipherShed?2CipherShed?9Format?4@
CONST	SEGMENT
??_C@_0CE@MIAHDFAN@?$CFs?2CipherShed?2CipherShed?9Format?4@ DB '%s\Cipher'
	DB	'Shed\CipherShed-Format.exe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BNFOBJFG@?$CFs?2CipherShed?9Format?4exe?$AA@
CONST	SEGMENT
??_C@_0BJ@BNFOBJFG@?$CFs?2CipherShed?9Format?4exe?$AA@ DB '%s\CipherShed-'
	DB	'Format.exe', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CCABONAP@?$CFs?2CipherShed?2CipherShed?4exe?$AA@
CONST	SEGMENT
??_C@_0BN@CCABONAP@?$CFs?2CipherShed?2CipherShed?4exe?$AA@ DB '%s\CipherS'
	DB	'hed\CipherShed.exe', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PFMONHBD@?$CFs?2CipherShed?4exe?$AA@
CONST	SEGMENT
??_C@_0BC@PFMONHBD@?$CFs?2CipherShed?4exe?$AA@ DB '%s\CipherShed.exe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JJPBLNNC@?$CFs?2CipherShed?$AA@
CONST	SEGMENT
??_C@_0O@JJPBLNNC@?$CFs?2CipherShed?$AA@ DB '%s\CipherShed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01BJJEKLCA@?$CC?$AA@
CONST	SEGMENT
??_C@_01BJJEKLCA@?$CC?$AA@ DB '"', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EGBJNKPM@NO_FILE_SELECTED?$AA@
CONST	SEGMENT
??_C@_0BB@EGBJNKPM@NO_FILE_SELECTED?$AA@ DB 'NO_FILE_SELECTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EDOKKIEO@NO_PATH_SELECTED?$AA@
CONST	SEGMENT
??_C@_0BB@EDOKKIEO@NO_PATH_SELECTED?$AA@ DB 'NO_PATH_SELECTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DJBAGGGN@SELECT_DEST_DIR?$AA@
CONST	SEGMENT
??_C@_0BA@DJBAGGGN@SELECT_DEST_DIR?$AA@ DB 'SELECT_DEST_DIR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GHEOANHD@OPEN_TITLE?$AA@
CONST	SEGMENT
??_C@_0L@GHEOANHD@OPEN_TITLE?$AA@ DB 'OPEN_TITLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BMCDENFC@AUTORUN_MAY_NOT_ALWAYS_WORK?$AA@
CONST	SEGMENT
??_C@_0BM@BMCDENFC@AUTORUN_MAY_NOT_ALWAYS_WORK?$AA@ DB 'AUTORUN_MAY_NOT_A'
	DB	'LWAYS_WORK', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
CONST	ENDS
;	COMDAT ?TravelerDlgProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_drive$137013 = -2212					; size = 4
_drive$136970 = -2212					; size = 3
_bCacheInDriver$137003 = -2208				; size = 4
_bExplore$137002 = -2204				; size = 4
_bMountReadOnly$137006 = -2200				; size = 4
_bAutoMount$137005 = -2196				; size = 4
_driveLetter$137047 = -2192				; size = 5
_volName$137012 = -2184					; size = 260
_volName$136991 = -2184					; size = 260
_appDir$137010 = -1924					; size = 260
_dstDir$136990 = -1924					; size = 260
_dstDir$137007 = -1664					; size = 260
_dstPath$137009 = -1404					; size = 520
_srcPath$137008 = -884					; size = 520
_dstPath$136995 = -884					; size = 520
_autoMount$137046 = -364				; size = 100
_sysDir$137011 = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?TravelerDlgProc@@YGHPAUHWND__@@IIJ@Z PROC		; TravelerDlgProc, COMDAT

; 2991 : {

  00000	81 ec a4 08 00
	00		 sub	 esp, 2212		; 000008a4H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 a0 08
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+2212], eax

; 2992 : 	WORD lw = LOWORD (wParam);
; 2993 : 	static BOOL bAutoRunWarningDisplayed = FALSE;
; 2994 : 
; 2995 : 	switch (msg)

  00014	8b 84 24 ac 08
	00 00		 mov	 eax, DWORD PTR _msg$[esp+2208]
  0001b	2d 10 01 00 00	 sub	 eax, 272		; 00000110H
  00020	53		 push	 ebx
  00021	55		 push	 ebp
  00022	56		 push	 esi
  00023	8b b4 24 b4 08
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+2220]
  0002a	57		 push	 edi
  0002b	0f 84 bd 07 00
	00		 je	 $LN32@TravelerDl
  00031	83 e8 01	 sub	 eax, 1

; 3229 : 			return 1;
; 3230 : 		}
; 3231 : 		return 0;
; 3232 : 	}
; 3233 : 
; 3234 : 	return 0;

  00034	0f 85 96 08 00
	00		 jne	 $LN64@TravelerDl
  0003a	8b 84 24 c0 08
	00 00		 mov	 eax, DWORD PTR _wParam$[esp+2224]
  00041	8b c8		 mov	 ecx, eax
  00043	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00046	85 c9		 test	 ecx, ecx
  00048	0f 85 f2 00 00
	00		 jne	 $LN27@TravelerDl
  0004e	ba fd 03 00 00	 mov	 edx, 1021		; 000003fdH
  00053	66 3b c2	 cmp	 ax, dx
  00056	74 18		 je	 SHORT $LN61@TravelerDl
  00058	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  0005d	66 3b c1	 cmp	 ax, cx
  00060	74 0e		 je	 SHORT $LN61@TravelerDl
  00062	ba fe 03 00 00	 mov	 edx, 1022		; 000003feH
  00067	66 3b c2	 cmp	 ax, dx
  0006a	0f 85 d0 00 00
	00		 jne	 $LN27@TravelerDl
$LN61@TravelerDl:

; 3029 : 		}
; 3030 : 
; 3031 : 
; 3032 : 	case WM_COMMAND:
; 3033 : 
; 3034 : 		if (HIWORD (wParam) == BN_CLICKED
; 3035 : 			&& (lw == IDC_AUTORUN_DISABLE || lw == IDC_AUTORUN_MOUNT || lw == IDC_AUTORUN_START ))
; 3036 : 		{
; 3037 : 			BOOL enabled = IsButtonChecked (GetDlgItem (hwndDlg, IDC_AUTORUN_MOUNT));

  00070	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00076	68 00 04 00 00	 push	 1024			; 00000400H
  0007b	56		 push	 esi
  0007c	ff d7		 call	 edi
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 _IsButtonChecked
  00084	83 c4 04	 add	 esp, 4
  00087	8b d8		 mov	 ebx, eax

; 3038 : 			
; 3039 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_BROWSE_FILES), enabled);

  00089	53		 push	 ebx
  0008a	68 0c 04 00 00	 push	 1036			; 0000040cH
  0008f	56		 push	 esi
  00090	ff d7		 call	 edi
  00092	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__EnableWindow@8
  00098	50		 push	 eax
  00099	ff d5		 call	 ebp

; 3040 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_VOLUME_NAME), enabled);

  0009b	53		 push	 ebx
  0009c	68 01 04 00 00	 push	 1025			; 00000401H
  000a1	56		 push	 esi
  000a2	ff d7		 call	 edi
  000a4	50		 push	 eax
  000a5	ff d5		 call	 ebp

; 3041 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_TRAVEL_OPEN_EXPLORER), enabled);

  000a7	53		 push	 ebx
  000a8	68 27 04 00 00	 push	 1063			; 00000427H
  000ad	56		 push	 esi
  000ae	ff d7		 call	 edi
  000b0	50		 push	 eax
  000b1	ff d5		 call	 ebp

; 3042 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_TRAV_CACHE_PASSWORDS), enabled);

  000b3	53		 push	 ebx
  000b4	68 28 04 00 00	 push	 1064			; 00000428H
  000b9	56		 push	 esi
  000ba	ff d7		 call	 edi
  000bc	50		 push	 eax
  000bd	ff d5		 call	 ebp

; 3043 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_MOUNT_READONLY), enabled);

  000bf	53		 push	 ebx
  000c0	68 ba 13 00 00	 push	 5050			; 000013baH
  000c5	56		 push	 esi
  000c6	ff d7		 call	 edi
  000c8	50		 push	 eax
  000c9	ff d5		 call	 ebp

; 3044 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_DRIVELIST), enabled);

  000cb	53		 push	 ebx
  000cc	68 ef 03 00 00	 push	 1007			; 000003efH
  000d1	56		 push	 esi
  000d2	ff d7		 call	 edi
  000d4	50		 push	 eax
  000d5	ff d5		 call	 ebp

; 3045 : 			EnableWindow (GetDlgItem (hwndDlg, IDT_TRAVELER_MOUNT), enabled);

  000d7	53		 push	 ebx
  000d8	68 04 04 00 00	 push	 1028			; 00000404H
  000dd	56		 push	 esi
  000de	ff d7		 call	 edi
  000e0	50		 push	 eax
  000e1	ff d5		 call	 ebp

; 3046 : 			EnableWindow (GetDlgItem (hwndDlg, IDT_MOUNT_LETTER), enabled);

  000e3	53		 push	 ebx
  000e4	68 05 04 00 00	 push	 1029			; 00000405H
  000e9	56		 push	 esi
  000ea	ff d7		 call	 edi
  000ec	50		 push	 eax
  000ed	ff d5		 call	 ebp

; 3047 : 			EnableWindow (GetDlgItem (hwndDlg, IDT_MOUNT_SETTINGS), enabled);

  000ef	53		 push	 ebx
  000f0	68 06 04 00 00	 push	 1030			; 00000406H
  000f5	56		 push	 esi
  000f6	ff d7		 call	 edi
  000f8	50		 push	 eax
  000f9	ff d5		 call	 ebp

; 3048 : 
; 3049 : 			if (!bAutoRunWarningDisplayed
; 3050 : 				&& (lw == IDC_AUTORUN_MOUNT || lw == IDC_AUTORUN_START))

  000fb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bAutoRunWarningDisplayed@?1??TravelerDlgProc@@YGHPAUHWND__@@IIJ@Z@4HA, 0
  00102	75 32		 jne	 SHORT $LN62@TravelerDl
  00104	8b 84 24 c0 08
	00 00		 mov	 eax, DWORD PTR _wParam$[esp+2224]
  0010b	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  00110	66 3b c1	 cmp	 ax, cx
  00113	74 0a		 je	 SHORT $LN24@TravelerDl
  00115	ba fe 03 00 00	 mov	 edx, 1022		; 000003feH
  0011a	66 3b c2	 cmp	 ax, dx
  0011d	75 17		 jne	 SHORT $LN62@TravelerDl
$LN24@TravelerDl:

; 3051 : 			{
; 3052 : 				bAutoRunWarningDisplayed = TRUE;
; 3053 : 				Warning ("AUTORUN_MAY_NOT_ALWAYS_WORK");

  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BMCDENFC@AUTORUN_MAY_NOT_ALWAYS_WORK?$AA@
  00124	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bAutoRunWarningDisplayed@?1??TravelerDlgProc@@YGHPAUHWND__@@IIJ@Z@4HA, 1
  0012e	e8 00 00 00 00	 call	 _Warning
  00133	83 c4 04	 add	 esp, 4
$LN62@TravelerDl:

; 3054 : 			}
; 3055 : 
; 3056 : 			return 1;

  00136	b8 01 00 00 00	 mov	 eax, 1
  0013b	e9 92 07 00 00	 jmp	 $LN35@TravelerDl
$LN27@TravelerDl:

; 3057 : 		}
; 3058 : 
; 3059 : 		if (lw == IDC_BROWSE_FILES)

  00140	b9 0c 04 00 00	 mov	 ecx, 1036		; 0000040cH
  00145	66 3b c1	 cmp	 ax, cx
  00148	0f 85 87 00 00
	00		 jne	 $LN23@TravelerDl

; 3060 : 		{
; 3061 : 			char dstDir[MAX_PATH];
; 3062 : 			char volName[MAX_PATH] = { 0 };

  0014e	68 03 01 00 00	 push	 259			; 00000103H
  00153	8d 54 24 31	 lea	 edx, DWORD PTR _volName$136991[esp+2233]
  00157	6a 00		 push	 0
  00159	52		 push	 edx
  0015a	c6 44 24 38 00	 mov	 BYTE PTR _volName$136991[esp+2240], 0
  0015f	e8 00 00 00 00	 call	 _memset
  00164	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3063 : 
; 3064 : 			GetDlgItemText (hwndDlg, IDC_DIRECTORY, dstDir, sizeof dstDir);

  00167	68 04 01 00 00	 push	 260			; 00000104H
  0016c	8d 84 24 34 01
	00 00		 lea	 eax, DWORD PTR _dstDir$136990[esp+2232]
  00173	50		 push	 eax
  00174	68 f9 03 00 00	 push	 1017			; 000003f9H
  00179	56		 push	 esi
  0017a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemTextA@16

; 3065 : 
; 3066 : 			if (BrowseFilesInDir (hwndDlg, "OPEN_TITLE", dstDir, volName, bHistory, FALSE, NULL))

  00180	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHistory
  00186	6a 00		 push	 0
  00188	6a 00		 push	 0
  0018a	6a 00		 push	 0
  0018c	6a 00		 push	 0
  0018e	51		 push	 ecx
  0018f	8d 54 24 40	 lea	 edx, DWORD PTR _volName$136991[esp+2248]
  00193	52		 push	 edx
  00194	8d 84 24 48 01
	00 00		 lea	 eax, DWORD PTR _dstDir$136990[esp+2252]
  0019b	50		 push	 eax
  0019c	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GHEOANHD@OPEN_TITLE?$AA@
  001a1	56		 push	 esi
  001a2	e8 00 00 00 00	 call	 ?BrowseFilesInDir@@YAHPAUHWND__@@PAD11HHPA_WPB_W3@Z ; BrowseFilesInDir
  001a7	83 c4 24	 add	 esp, 36			; 00000024H
  001aa	85 c0		 test	 eax, eax
  001ac	74 1d		 je	 SHORT $LN22@TravelerDl

; 3067 : 				SetDlgItemText (hwndDlg, IDC_VOLUME_NAME, strchr (volName, '\\') + 1);

  001ae	8d 4c 24 2c	 lea	 ecx, DWORD PTR _volName$136991[esp+2228]
  001b2	6a 5c		 push	 92			; 0000005cH
  001b4	51		 push	 ecx
  001b5	e8 00 00 00 00	 call	 _strchr
  001ba	83 c4 08	 add	 esp, 8
  001bd	40		 inc	 eax
  001be	50		 push	 eax
  001bf	68 01 04 00 00	 push	 1025			; 00000401H
  001c4	56		 push	 esi
  001c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12
$LN22@TravelerDl:

; 3068 : 
; 3069 : 			return 1;

  001cb	b8 01 00 00 00	 mov	 eax, 1
  001d0	e9 fd 06 00 00	 jmp	 $LN35@TravelerDl
$LN23@TravelerDl:

; 3070 : 		}
; 3071 : 
; 3072 : 		if (lw == IDC_BROWSE_DIRS)

  001d5	ba fb 03 00 00	 mov	 edx, 1019		; 000003fbH
  001da	66 3b c2	 cmp	 ax, dx
  001dd	75 51		 jne	 SHORT $LN21@TravelerDl

; 3073 : 		{
; 3074 : 			char dstPath[MAX_PATH * 2];
; 3075 : 			GetDlgItemText (hwndDlg, IDC_DIRECTORY, dstPath, sizeof dstPath);

  001df	68 08 02 00 00	 push	 520			; 00000208H
  001e4	8d 84 24 44 05
	00 00		 lea	 eax, DWORD PTR _dstPath$136995[esp+2232]
  001eb	50		 push	 eax
  001ec	68 f9 03 00 00	 push	 1017			; 000003f9H
  001f1	56		 push	 esi
  001f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemTextA@16

; 3076 : 
; 3077 : 			if (BrowseDirectories (hwndDlg, "SELECT_DEST_DIR", dstPath))

  001f8	8d 8c 24 40 05
	00 00		 lea	 ecx, DWORD PTR _dstPath$136995[esp+2228]
  001ff	51		 push	 ecx
  00200	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DJBAGGGN@SELECT_DEST_DIR?$AA@
  00205	56		 push	 esi
  00206	e8 00 00 00 00	 call	 _BrowseDirectories
  0020b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0020e	85 c0		 test	 eax, eax
  00210	74 14		 je	 SHORT $LN20@TravelerDl

; 3078 : 				SetDlgItemText (hwndDlg, IDC_DIRECTORY, dstPath);

  00212	8d 94 24 40 05
	00 00		 lea	 edx, DWORD PTR _dstPath$136995[esp+2228]
  00219	52		 push	 edx
  0021a	68 f9 03 00 00	 push	 1017			; 000003f9H
  0021f	56		 push	 esi
  00220	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12
$LN20@TravelerDl:

; 3079 : 
; 3080 : 			return 1;

  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	e9 a2 06 00 00	 jmp	 $LN35@TravelerDl
$LN21@TravelerDl:

; 3081 : 		}
; 3082 : 
; 3083 : 		if (lw == IDCANCEL || lw == IDCLOSE)

  00230	66 83 f8 02	 cmp	 ax, 2
  00234	0f 84 9f 05 00
	00		 je	 $LN18@TravelerDl
  0023a	66 83 f8 08	 cmp	 ax, 8
  0023e	0f 84 95 05 00
	00		 je	 $LN18@TravelerDl

; 3087 : 		}
; 3088 : 
; 3089 : 		if (lw == IDC_CREATE)

  00244	b9 25 04 00 00	 mov	 ecx, 1061		; 00000425H
  00249	66 3b c1	 cmp	 ax, cx
  0024c	0f 85 7e 06 00
	00		 jne	 $LN64@TravelerDl

; 3090 : 		{
; 3091 : 
; 3092 : 			BOOL copyWizard, bExplore, bCacheInDriver, bAutoRun, bAutoMount, bMountReadOnly;
; 3093 : 			char dstDir[MAX_PATH];
; 3094 : 			char srcPath[MAX_PATH * 2];
; 3095 : 			char dstPath[MAX_PATH * 2];
; 3096 : 			char appDir[MAX_PATH];
; 3097 : 			char sysDir[MAX_PATH];
; 3098 : 			char volName[MAX_PATH];
; 3099 : 			int drive;
; 3100 : 
; 3101 : 			GetDlgItemText (hwndDlg, IDC_DIRECTORY, dstDir, sizeof dstDir);

  00252	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItemTextA@16
  00258	68 04 01 00 00	 push	 260			; 00000104H
  0025d	8d 94 24 38 02
	00 00		 lea	 edx, DWORD PTR _dstDir$137007[esp+2232]
  00264	52		 push	 edx
  00265	68 f9 03 00 00	 push	 1017			; 000003f9H
  0026a	56		 push	 esi
  0026b	ff d7		 call	 edi

; 3102 : 			volName[0] = 0;
; 3103 : 			GetDlgItemText (hwndDlg, IDC_VOLUME_NAME, volName + 1, sizeof volName);

  0026d	68 04 01 00 00	 push	 260			; 00000104H
  00272	8d 44 24 31	 lea	 eax, DWORD PTR _volName$137012[esp+2233]
  00276	50		 push	 eax
  00277	68 01 04 00 00	 push	 1025			; 00000401H
  0027c	56		 push	 esi
  0027d	c6 44 24 3c 00	 mov	 BYTE PTR _volName$137012[esp+2244], 0
  00282	ff d7		 call	 edi

; 3104 : 			
; 3105 : 			drive = SendDlgItemMessage (hwndDlg, IDC_DRIVELIST, CB_GETCURSEL, 0, 0);

  00284	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendDlgItemMessageA@20
  0028a	6a 00		 push	 0
  0028c	6a 00		 push	 0
  0028e	68 47 01 00 00	 push	 327			; 00000147H
  00293	68 ef 03 00 00	 push	 1007			; 000003efH
  00298	56		 push	 esi
  00299	ff d7		 call	 edi

; 3106 : 			drive = SendDlgItemMessage (hwndDlg, IDC_DRIVELIST, CB_GETITEMDATA, drive, 0);

  0029b	6a 00		 push	 0
  0029d	50		 push	 eax
  0029e	68 50 01 00 00	 push	 336			; 00000150H
  002a3	68 ef 03 00 00	 push	 1007			; 000003efH
  002a8	56		 push	 esi
  002a9	ff d7		 call	 edi

; 3107 : 
; 3108 : 			copyWizard = IsButtonChecked (GetDlgItem (hwndDlg, IDC_COPY_WIZARD));

  002ab	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  002b1	68 02 04 00 00	 push	 1026			; 00000402H
  002b6	56		 push	 esi
  002b7	89 44 24 18	 mov	 DWORD PTR _drive$137013[esp+2236], eax
  002bb	ff d7		 call	 edi
  002bd	50		 push	 eax
  002be	e8 00 00 00 00	 call	 _IsButtonChecked
  002c3	83 c4 04	 add	 esp, 4

; 3109 : 			bExplore = IsButtonChecked (GetDlgItem (hwndDlg, IDC_TRAVEL_OPEN_EXPLORER));

  002c6	68 27 04 00 00	 push	 1063			; 00000427H
  002cb	56		 push	 esi
  002cc	8b d8		 mov	 ebx, eax
  002ce	ff d7		 call	 edi
  002d0	50		 push	 eax
  002d1	e8 00 00 00 00	 call	 _IsButtonChecked
  002d6	83 c4 04	 add	 esp, 4

; 3110 : 			bCacheInDriver = IsButtonChecked (GetDlgItem (hwndDlg, IDC_TRAV_CACHE_PASSWORDS));

  002d9	68 28 04 00 00	 push	 1064			; 00000428H
  002de	56		 push	 esi
  002df	89 44 24 20	 mov	 DWORD PTR _bExplore$137002[esp+2236], eax
  002e3	ff d7		 call	 edi
  002e5	50		 push	 eax
  002e6	e8 00 00 00 00	 call	 _IsButtonChecked
  002eb	83 c4 04	 add	 esp, 4

; 3111 : 			bMountReadOnly = IsButtonChecked (GetDlgItem (hwndDlg, IDC_MOUNT_READONLY));

  002ee	68 ba 13 00 00	 push	 5050			; 000013baH
  002f3	56		 push	 esi
  002f4	89 44 24 1c	 mov	 DWORD PTR _bCacheInDriver$137003[esp+2236], eax
  002f8	ff d7		 call	 edi
  002fa	50		 push	 eax
  002fb	e8 00 00 00 00	 call	 _IsButtonChecked
  00300	83 c4 04	 add	 esp, 4

; 3112 : 			bAutoRun = !IsButtonChecked (GetDlgItem (hwndDlg, IDC_AUTORUN_DISABLE));

  00303	68 fd 03 00 00	 push	 1021			; 000003fdH
  00308	56		 push	 esi
  00309	89 44 24 24	 mov	 DWORD PTR _bMountReadOnly$137006[esp+2236], eax
  0030d	ff d7		 call	 edi
  0030f	50		 push	 eax
  00310	e8 00 00 00 00	 call	 _IsButtonChecked
  00315	83 c4 04	 add	 esp, 4
  00318	8b e8		 mov	 ebp, eax
  0031a	f7 dd		 neg	 ebp

; 3113 : 			bAutoMount = IsButtonChecked (GetDlgItem (hwndDlg, IDC_AUTORUN_MOUNT));

  0031c	68 00 04 00 00	 push	 1024			; 00000400H
  00321	1b ed		 sbb	 ebp, ebp
  00323	56		 push	 esi
  00324	45		 inc	 ebp
  00325	ff d7		 call	 edi
  00327	50		 push	 eax
  00328	e8 00 00 00 00	 call	 _IsButtonChecked
  0032d	83 c4 04	 add	 esp, 4

; 3114 : 
; 3115 : 			if (dstDir[0] == 0)

  00330	80 bc 24 34 02
	00 00 00	 cmp	 BYTE PTR _dstDir$137007[esp+2228], 0
  00338	89 44 24 20	 mov	 DWORD PTR _bAutoMount$137005[esp+2228], eax
  0033c	75 37		 jne	 SHORT $LN16@TravelerDl

; 3116 : 			{
; 3117 : 				SetFocus (GetDlgItem (hwndDlg, IDC_DIRECTORY));

  0033e	68 f9 03 00 00	 push	 1017			; 000003f9H
  00343	56		 push	 esi
  00344	ff d7		 call	 edi
  00346	50		 push	 eax
  00347	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 3118 : 				MessageBoxW (hwndDlg, GetString ("NO_PATH_SELECTED"), lpszTitle, MB_ICONEXCLAMATION);

  0034d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  00353	6a 30		 push	 48			; 00000030H
  00355	51		 push	 ecx
  00356	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EDOKKIEO@NO_PATH_SELECTED?$AA@
$LN68@TravelerDl:
  0035b	e8 00 00 00 00	 call	 _GetString
  00360	83 c4 04	 add	 esp, 4
  00363	50		 push	 eax
  00364	56		 push	 esi
  00365	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 3119 : 				return 1;

  0036b	b8 01 00 00 00	 mov	 eax, 1
  00370	e9 5d 05 00 00	 jmp	 $LN35@TravelerDl
$LN16@TravelerDl:

; 3120 : 			}
; 3121 : 
; 3122 : 			
; 3123 : 			if (bAutoMount && volName[1] == 0)

  00375	85 c0		 test	 eax, eax
  00377	74 26		 je	 SHORT $LN15@TravelerDl
  00379	80 7c 24 2d 00	 cmp	 BYTE PTR _volName$137012[esp+2229], 0
  0037e	75 26		 jne	 SHORT $LN55@TravelerDl

; 3124 : 			{
; 3125 : 				SetFocus (GetDlgItem (hwndDlg, IDC_VOLUME_NAME));

  00380	68 01 04 00 00	 push	 1025			; 00000401H
  00385	56		 push	 esi
  00386	ff d7		 call	 edi
  00388	50		 push	 eax
  00389	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 3126 : 				MessageBoxW (hwndDlg, GetString ("NO_FILE_SELECTED"), lpszTitle, MB_ICONEXCLAMATION);

  0038f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  00395	6a 30		 push	 48			; 00000030H
  00397	52		 push	 edx
  00398	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EGBJNKPM@NO_FILE_SELECTED?$AA@

; 3127 : 				return 1;

  0039d	eb bc		 jmp	 SHORT $LN68@TravelerDl
$LN15@TravelerDl:

; 3128 : 			}
; 3129 : 
; 3130 : 			if (volName[1] != 0)

  0039f	80 7c 24 2d 00	 cmp	 BYTE PTR _volName$137012[esp+2229], 0
  003a4	74 1b		 je	 SHORT $LN14@TravelerDl
$LN55@TravelerDl:

; 3131 : 			{
; 3132 : 				volName[0] = '"';
; 3133 : 				strcat (volName, "\"");

  003a6	8d 7c 24 2c	 lea	 edi, DWORD PTR _volName$137012[esp+2228]
  003aa	c6 44 24 2c 22	 mov	 BYTE PTR _volName$137012[esp+2228], 34 ; 00000022H
  003af	4f		 dec	 edi
$LL56@TravelerDl:
  003b0	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  003b3	47		 inc	 edi
  003b4	84 c0		 test	 al, al
  003b6	75 f8		 jne	 SHORT $LL56@TravelerDl
  003b8	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01BJJEKLCA@?$CC?$AA@
  003be	66 89 07	 mov	 WORD PTR [edi], ax
$LN14@TravelerDl:

; 3134 : 			}
; 3135 : 
; 3136 : 			GetModuleFileName (NULL, appDir, sizeof (appDir));

  003c1	68 04 01 00 00	 push	 260			; 00000104H
  003c6	8d 8c 24 34 01
	00 00		 lea	 ecx, DWORD PTR _appDir$137010[esp+2232]
  003cd	51		 push	 ecx
  003ce	6a 00		 push	 0
  003d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12

; 3137 : 			strrchr (appDir, '\\')[0] = 0;

  003d6	8d 94 24 30 01
	00 00		 lea	 edx, DWORD PTR _appDir$137010[esp+2228]
  003dd	6a 5c		 push	 92			; 0000005cH
  003df	52		 push	 edx
  003e0	e8 00 00 00 00	 call	 _strrchr
  003e5	83 c4 08	 add	 esp, 8
  003e8	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3138 : 
; 3139 : 			WaitCursor ();

  003eb	e8 00 00 00 00	 call	 _WaitCursor

; 3140 : 			GetSystemDirectory (sysDir, sizeof (sysDir));

  003f0	68 04 01 00 00	 push	 260			; 00000104H
  003f5	8d 84 24 b0 07
	00 00		 lea	 eax, DWORD PTR _sysDir$137011[esp+2232]
  003fc	50		 push	 eax
  003fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDirectoryA@8

; 3141 : 
; 3142 : 			sprintf (dstPath, "%s\\CipherShed", dstDir);

  00403	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR _dstDir$137007[esp+2228]
  0040a	51		 push	 ecx
  0040b	8d 94 24 3c 03
	00 00		 lea	 edx, DWORD PTR _dstPath$137009[esp+2232]
  00412	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JJPBLNNC@?$CFs?2CipherShed?$AA@
  00417	52		 push	 edx
  00418	e8 00 00 00 00	 call	 _sprintf
  0041d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3143 : 			CreateDirectory (dstPath, NULL);

  00420	6a 00		 push	 0
  00422	8d 84 24 3c 03
	00 00		 lea	 eax, DWORD PTR _dstPath$137009[esp+2232]
  00429	50		 push	 eax
  0042a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8

; 3144 : 
; 3145 : 			// Main app
; 3146 : 			sprintf (srcPath, "%s\\CipherShed.exe", appDir);

  00430	8d 8c 24 30 01
	00 00		 lea	 ecx, DWORD PTR _appDir$137010[esp+2228]
  00437	51		 push	 ecx
  00438	8d 94 24 44 05
	00 00		 lea	 edx, DWORD PTR _srcPath$137008[esp+2232]
  0043f	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PFMONHBD@?$CFs?2CipherShed?4exe?$AA@
  00444	52		 push	 edx
  00445	e8 00 00 00 00	 call	 _sprintf

; 3147 : 			sprintf (dstPath, "%s\\CipherShed\\CipherShed.exe", dstDir);

  0044a	8d 84 24 40 02
	00 00		 lea	 eax, DWORD PTR _dstDir$137007[esp+2240]
  00451	50		 push	 eax
  00452	8d 8c 24 48 03
	00 00		 lea	 ecx, DWORD PTR _dstPath$137009[esp+2244]
  00459	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CCABONAP@?$CFs?2CipherShed?2CipherShed?4exe?$AA@
  0045e	51		 push	 ecx
  0045f	e8 00 00 00 00	 call	 _sprintf

; 3148 : 			if (!TCCopyFile (srcPath, dstPath))

  00464	8d 94 24 50 03
	00 00		 lea	 edx, DWORD PTR _dstPath$137009[esp+2252]
  0046b	52		 push	 edx
  0046c	8d 84 24 5c 05
	00 00		 lea	 eax, DWORD PTR _srcPath$137008[esp+2256]
  00473	50		 push	 eax
  00474	e8 00 00 00 00	 call	 _TCCopyFile
  00479	83 c4 20	 add	 esp, 32			; 00000020H
  0047c	85 c0		 test	 eax, eax

; 3149 : 			{
; 3150 : 				handleWin32Error (hwndDlg);

  0047e	0f 84 f8 00 00
	00		 je	 $LN67@TravelerDl

; 3151 : 				goto stop;
; 3152 : 			}
; 3153 : 
; 3154 : 			// Wizard
; 3155 : 			if (copyWizard)

  00484	85 db		 test	 ebx, ebx
  00486	74 54		 je	 SHORT $LN10@TravelerDl

; 3156 : 			{
; 3157 : 				sprintf (srcPath, "%s\\CipherShed-Format.exe", appDir);

  00488	8d 8c 24 30 01
	00 00		 lea	 ecx, DWORD PTR _appDir$137010[esp+2228]
  0048f	51		 push	 ecx
  00490	8d 94 24 44 05
	00 00		 lea	 edx, DWORD PTR _srcPath$137008[esp+2232]
  00497	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@BNFOBJFG@?$CFs?2CipherShed?9Format?4exe?$AA@
  0049c	52		 push	 edx
  0049d	e8 00 00 00 00	 call	 _sprintf

; 3158 : 				sprintf (dstPath, "%s\\CipherShed\\CipherShed-Format.exe", dstDir);

  004a2	8d 84 24 40 02
	00 00		 lea	 eax, DWORD PTR _dstDir$137007[esp+2240]
  004a9	50		 push	 eax
  004aa	8d 8c 24 48 03
	00 00		 lea	 ecx, DWORD PTR _dstPath$137009[esp+2244]
  004b1	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MIAHDFAN@?$CFs?2CipherShed?2CipherShed?9Format?4@
  004b6	51		 push	 ecx
  004b7	e8 00 00 00 00	 call	 _sprintf

; 3159 : 				if (!TCCopyFile (srcPath, dstPath))

  004bc	8d 94 24 50 03
	00 00		 lea	 edx, DWORD PTR _dstPath$137009[esp+2252]
  004c3	52		 push	 edx
  004c4	8d 84 24 5c 05
	00 00		 lea	 eax, DWORD PTR _srcPath$137008[esp+2256]
  004cb	50		 push	 eax
  004cc	e8 00 00 00 00	 call	 _TCCopyFile
  004d1	83 c4 20	 add	 esp, 32			; 00000020H
  004d4	85 c0		 test	 eax, eax

; 3226 : 
; 3227 : stop:

  004d6	0f 84 a0 00 00
	00		 je	 $LN67@TravelerDl
$LN10@TravelerDl:

; 3160 : 				{
; 3161 : 					handleWin32Error (hwndDlg);
; 3162 : 					goto stop;
; 3163 : 				}
; 3164 : 			}
; 3165 : 
; 3166 : 			// Driver
; 3167 : 			sprintf (srcPath, "%s\\truecrypt.sys", appDir);

  004dc	8d 8c 24 30 01
	00 00		 lea	 ecx, DWORD PTR _appDir$137010[esp+2228]
  004e3	51		 push	 ecx
  004e4	8d 94 24 44 05
	00 00		 lea	 edx, DWORD PTR _srcPath$137008[esp+2232]
  004eb	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@BGNGAFJM@?$CFs?2truecrypt?4sys?$AA@
  004f0	52		 push	 edx
  004f1	e8 00 00 00 00	 call	 _sprintf

; 3168 : 			sprintf (dstPath, "%s\\CipherShed\\truecrypt.sys", dstDir);

  004f6	8d 84 24 40 02
	00 00		 lea	 eax, DWORD PTR _dstDir$137007[esp+2240]
  004fd	50		 push	 eax
  004fe	8d 8c 24 48 03
	00 00		 lea	 ecx, DWORD PTR _dstPath$137009[esp+2244]
  00505	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NEDOPHHN@?$CFs?2CipherShed?2truecrypt?4sys?$AA@
  0050a	51		 push	 ecx
  0050b	e8 00 00 00 00	 call	 _sprintf

; 3169 : 			if (!TCCopyFile (srcPath, dstPath))

  00510	8d 94 24 50 03
	00 00		 lea	 edx, DWORD PTR _dstPath$137009[esp+2252]
  00517	52		 push	 edx
  00518	8d 84 24 5c 05
	00 00		 lea	 eax, DWORD PTR _srcPath$137008[esp+2256]
  0051f	50		 push	 eax
  00520	e8 00 00 00 00	 call	 _TCCopyFile
  00525	83 c4 20	 add	 esp, 32			; 00000020H
  00528	85 c0		 test	 eax, eax

; 3226 : 
; 3227 : stop:

  0052a	74 50		 je	 SHORT $LN67@TravelerDl
  0052c	8d 8c 24 30 01
	00 00		 lea	 ecx, DWORD PTR _appDir$137010[esp+2228]
  00533	51		 push	 ecx
  00534	8d 94 24 44 05
	00 00		 lea	 edx, DWORD PTR _srcPath$137008[esp+2232]
  0053b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EOFLLDBF@?$CFs?2truecrypt?9x64?4sys?$AA@
  00540	52		 push	 edx
  00541	e8 00 00 00 00	 call	 _sprintf
  00546	8d 84 24 40 02
	00 00		 lea	 eax, DWORD PTR _dstDir$137007[esp+2240]
  0054d	50		 push	 eax
  0054e	8d 8c 24 48 03
	00 00		 lea	 ecx, DWORD PTR _dstPath$137009[esp+2244]
  00555	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HFBFOIIO@?$CFs?2CipherShed?2truecrypt?9x64?4sys?$AA@
  0055a	51		 push	 ecx
  0055b	e8 00 00 00 00	 call	 _sprintf
  00560	8d 94 24 50 03
	00 00		 lea	 edx, DWORD PTR _dstPath$137009[esp+2252]
  00567	52		 push	 edx
  00568	8d 84 24 5c 05
	00 00		 lea	 eax, DWORD PTR _srcPath$137008[esp+2256]
  0056f	50		 push	 eax
  00570	e8 00 00 00 00	 call	 _TCCopyFile
  00575	83 c4 20	 add	 esp, 32			; 00000020H
  00578	85 c0		 test	 eax, eax
  0057a	75 18		 jne	 SHORT $LN6@TravelerDl
$LN67@TravelerDl:

; 3170 : 			{
; 3171 : 				handleWin32Error (hwndDlg);
; 3172 : 				goto stop;
; 3173 : 			}
; 3174 : 
; 3175 : 			// Driver x64
; 3176 : 			sprintf (srcPath, "%s\\truecrypt-x64.sys", appDir);
; 3177 : 			sprintf (dstPath, "%s\\CipherShed\\truecrypt-x64.sys", dstDir);
; 3178 : 			if (!TCCopyFile (srcPath, dstPath))
; 3179 : 			{
; 3180 : 				handleWin32Error (hwndDlg);

  0057c	56		 push	 esi
  0057d	e8 00 00 00 00	 call	 _handleWin32Error
  00582	83 c4 04	 add	 esp, 4

; 3228 : 			NormalCursor ();

  00585	e8 00 00 00 00	 call	 _NormalCursor
  0058a	b8 01 00 00 00	 mov	 eax, 1
  0058f	e9 3e 03 00 00	 jmp	 $LN35@TravelerDl
$LN6@TravelerDl:

; 3181 : 				goto stop;
; 3182 : 			}
; 3183 : 
; 3184 : 			if (GetPreferredLangId () && strcmp (GetPreferredLangId (), "en") != 0)

  00594	e8 00 00 00 00	 call	 _GetPreferredLangId
  00599	85 c0		 test	 eax, eax
  0059b	0f 84 90 00 00
	00		 je	 $LN63@TravelerDl
  005a1	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_02LFNMGJAP@en?$AA@
  005a6	e8 00 00 00 00	 call	 _GetPreferredLangId
  005ab	eb 03 8d 49 00	 npad	 5
$LL57@TravelerDl:
  005b0	8a 08		 mov	 cl, BYTE PTR [eax]
  005b2	3a 0f		 cmp	 cl, BYTE PTR [edi]
  005b4	75 1a		 jne	 SHORT $LN58@TravelerDl
  005b6	84 c9		 test	 cl, cl
  005b8	74 12		 je	 SHORT $LN59@TravelerDl
  005ba	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  005bd	3a 4f 01	 cmp	 cl, BYTE PTR [edi+1]
  005c0	75 0e		 jne	 SHORT $LN58@TravelerDl
  005c2	83 c0 02	 add	 eax, 2
  005c5	83 c7 02	 add	 edi, 2
  005c8	84 c9		 test	 cl, cl
  005ca	75 e4		 jne	 SHORT $LL57@TravelerDl
$LN59@TravelerDl:
  005cc	33 c0		 xor	 eax, eax
  005ce	eb 05		 jmp	 SHORT $LN60@TravelerDl
$LN58@TravelerDl:
  005d0	1b c0		 sbb	 eax, eax
  005d2	83 d8 ff	 sbb	 eax, -1
$LN60@TravelerDl:
  005d5	85 c0		 test	 eax, eax
  005d7	74 58		 je	 SHORT $LN63@TravelerDl

; 3185 : 			{
; 3186 : 				// Language pack
; 3187 : 				sprintf (srcPath, "%s\\Language.%s.xml", appDir, GetPreferredLangId ());

  005d9	e8 00 00 00 00	 call	 _GetPreferredLangId
  005de	50		 push	 eax
  005df	8d 8c 24 34 01
	00 00		 lea	 ecx, DWORD PTR _appDir$137010[esp+2232]
  005e6	51		 push	 ecx
  005e7	8d 94 24 48 05
	00 00		 lea	 edx, DWORD PTR _srcPath$137008[esp+2236]
  005ee	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CKMJLFFK@?$CFs?2Language?4?$CFs?4xml?$AA@
  005f3	52		 push	 edx
  005f4	e8 00 00 00 00	 call	 _sprintf

; 3188 : 				sprintf (dstPath, "%s\\CipherShed\\Language.%s.xml", dstDir, GetPreferredLangId ());

  005f9	e8 00 00 00 00	 call	 _GetPreferredLangId
  005fe	50		 push	 eax
  005ff	8d 84 24 48 02
	00 00		 lea	 eax, DWORD PTR _dstDir$137007[esp+2248]
  00606	50		 push	 eax
  00607	8d 8c 24 50 03
	00 00		 lea	 ecx, DWORD PTR _dstPath$137009[esp+2252]
  0060e	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DOBPCGCP@?$CFs?2CipherShed?2Language?4?$CFs?4xml?$AA@
  00613	51		 push	 ecx
  00614	e8 00 00 00 00	 call	 _sprintf

; 3189 : 				TCCopyFile (srcPath, dstPath);

  00619	8d 94 24 58 03
	00 00		 lea	 edx, DWORD PTR _dstPath$137009[esp+2260]
  00620	52		 push	 edx
  00621	8d 84 24 64 05
	00 00		 lea	 eax, DWORD PTR _srcPath$137008[esp+2264]
  00628	50		 push	 eax
  00629	e8 00 00 00 00	 call	 _TCCopyFile
  0062e	83 c4 28	 add	 esp, 40			; 00000028H
$LN63@TravelerDl:

; 3190 : 			}
; 3191 : 
; 3192 : 			// AutoRun
; 3193 : 			sprintf (dstPath, "%s\\autorun.inf", dstDir);

  00631	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR _dstDir$137007[esp+2228]
  00638	51		 push	 ecx
  00639	8d 94 24 3c 03
	00 00		 lea	 edx, DWORD PTR _dstPath$137009[esp+2232]
  00640	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PNEANFPE@?$CFs?2autorun?4inf?$AA@
  00645	52		 push	 edx
  00646	e8 00 00 00 00	 call	 _sprintf
  0064b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3194 : 			DeleteFile (dstPath);

  0064e	8d 84 24 38 03
	00 00		 lea	 eax, DWORD PTR _dstPath$137009[esp+2228]
  00655	50		 push	 eax
  00656	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4

; 3195 : 			if (bAutoRun)

  0065c	85 ed		 test	 ebp, ebp
  0065e	0f 84 48 01 00
	00		 je	 $LN3@TravelerDl

; 3196 : 			{
; 3197 : 				FILE *af;
; 3198 : 				char autoMount[100];
; 3199 : 				char driveLetter[] = { ' ', '/', 'l', (char) drive, 0 };

  00664	8b 5c 24 10	 mov	 ebx, DWORD PTR _drive$137013[esp+2228]

; 3200 : 
; 3201 : 				af = fopen (dstPath, "w,ccs=UNICODE");

  00668	8d 8c 24 38 03
	00 00		 lea	 ecx, DWORD PTR _dstPath$137009[esp+2228]
  0066f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NLMEGGOA@w?0ccs?$DNUNICODE?$AA@
  00674	51		 push	 ecx
  00675	c6 44 24 2c 20	 mov	 BYTE PTR _driveLetter$137047[esp+2236], 32 ; 00000020H
  0067a	c6 44 24 2d 2f	 mov	 BYTE PTR _driveLetter$137047[esp+2237], 47 ; 0000002fH
  0067f	c6 44 24 2e 6c	 mov	 BYTE PTR _driveLetter$137047[esp+2238], 108 ; 0000006cH
  00684	88 5c 24 2f	 mov	 BYTE PTR _driveLetter$137047[esp+2239], bl
  00688	c6 44 24 30 00	 mov	 BYTE PTR _driveLetter$137047[esp+2240], 0
  0068d	e8 00 00 00 00	 call	 _fopen
  00692	8b f8		 mov	 edi, eax
  00694	83 c4 08	 add	 esp, 8

; 3202 : 
; 3203 : 				if (af == NULL)

  00697	85 ff		 test	 edi, edi
  00699	75 13		 jne	 SHORT $LN2@TravelerDl

; 3204 : 				{
; 3205 : 					MessageBoxW (hwndDlg, GetString ("CANT_CREATE_AUTORUN"), lpszTitle, MB_ICONERROR);

  0069b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  006a1	6a 10		 push	 16			; 00000010H
  006a3	52		 push	 edx
  006a4	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JLOKBADK@CANT_CREATE_AUTORUN?$AA@

; 3226 : 
; 3227 : stop:

  006a9	e9 0c 01 00 00	 jmp	 $LN65@TravelerDl
$LN2@TravelerDl:

; 3206 : 					goto stop;
; 3207 : 				}
; 3208 : 
; 3209 : 				sprintf (autoMount, "CipherShed\\CipherShed.exe /q background%s%s%s%s /m rm /v %s",
; 3210 : 					drive > 0 ? driveLetter : "",
; 3211 : 					bExplore ? " /e" : "",
; 3212 : 					bCacheInDriver ? " /c y" : "",
; 3213 : 					bMountReadOnly ? " /m ro" : "",
; 3214 : 					volName);

  006ae	83 7c 24 1c 00	 cmp	 DWORD PTR _bMountReadOnly$137006[esp+2228], 0
  006b3	bd 00 00 00 00	 mov	 ebp, OFFSET ??_C@_06CPFEHJGK@?5?1m?5ro?$AA@
  006b8	75 05		 jne	 SHORT $LN38@TravelerDl
  006ba	bd 00 00 00 00	 mov	 ebp, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN38@TravelerDl:
  006bf	83 7c 24 14 00	 cmp	 DWORD PTR _bCacheInDriver$137003[esp+2228], 0
  006c4	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_05OFCDDPAN@?5?1c?5y?$AA@
  006c9	75 05		 jne	 SHORT $LN40@TravelerDl
  006cb	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN40@TravelerDl:
  006d0	83 7c 24 18 00	 cmp	 DWORD PTR _bExplore$137002[esp+2228], 0
  006d5	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03FFBCBBOC@?5?1e?$AA@
  006da	75 05		 jne	 SHORT $LN42@TravelerDl
  006dc	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN42@TravelerDl:
  006e1	8d 44 24 24	 lea	 eax, DWORD PTR _driveLetter$137047[esp+2228]
  006e5	85 db		 test	 ebx, ebx
  006e7	7f 05		 jg	 SHORT $LN44@TravelerDl
  006e9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN44@TravelerDl:
  006ee	8d 5c 24 2c	 lea	 ebx, DWORD PTR _volName$137012[esp+2228]
  006f2	53		 push	 ebx
  006f3	55		 push	 ebp
  006f4	52		 push	 edx
  006f5	51		 push	 ecx
  006f6	50		 push	 eax
  006f7	8d 84 24 5c 07
	00 00		 lea	 eax, DWORD PTR _autoMount$137046[esp+2248]
  006fe	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@DKKPKDEI@CipherShed?2CipherShed?4exe?5?1q?5bac@
  00703	50		 push	 eax
  00704	e8 00 00 00 00	 call	 _sprintf

; 3215 : 
; 3216 : 				fwprintf (af, L"[autorun]\nlabel=%s\nicon=CipherShed\\CipherShed.exe\n", GetString ("TC_TRAVELER_DISK"));

  00709	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@OANGMHDM@TC_TRAVELER_DISK?$AA@
  0070e	e8 00 00 00 00	 call	 _GetString
  00713	50		 push	 eax
  00714	68 00 00 00 00	 push	 OFFSET ??_C@_1GG@FCCOHAAK@?$AA?$FL?$AAa?$AAu?$AAt?$AAo?$AAr?$AAu?$AAn?$AA?$FN?$AA?6?$AAl?$AAa?$AAb?$AAe?$AAl?$AA?$DN?$AA?$CF?$AAs?$AA?6?$AAi?$AAc?$AAo?$AAn?$AA?$DN?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh@
  00719	57		 push	 edi
  0071a	e8 00 00 00 00	 call	 _fwprintf

; 3217 : 				fwprintf (af, L"action=%s\n", bAutoMount ? GetString ("MOUNT_TC_VOLUME") : GetString ("IDC_PREF_LOGON_START"));

  0071f	8b 5c 24 4c	 mov	 ebx, DWORD PTR _bAutoMount$137005[esp+2272]
  00723	83 c4 2c	 add	 esp, 44			; 0000002cH
  00726	85 db		 test	 ebx, ebx
  00728	74 07		 je	 SHORT $LN45@TravelerDl
  0072a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GLIKLLDG@MOUNT_TC_VOLUME?$AA@
  0072f	eb 05		 jmp	 SHORT $LN66@TravelerDl
$LN45@TravelerDl:
  00731	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FNOLBOJK@IDC_PREF_LOGON_START?$AA@
$LN66@TravelerDl:
  00736	e8 00 00 00 00	 call	 _GetString
  0073b	83 c4 04	 add	 esp, 4
  0073e	50		 push	 eax
  0073f	68 00 00 00 00	 push	 OFFSET ??_C@_1BG@HBMCJIGD@?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$DN?$AA?$CF?$AAs?$AA?6?$AA?$AA@
  00744	57		 push	 edi
  00745	e8 00 00 00 00	 call	 _fwprintf
  0074a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3218 : 				fwprintf (af, L"open=%hs\n", bAutoMount ? autoMount : "CipherShed\\CipherShed.exe");

  0074d	8d 84 24 48 07
	00 00		 lea	 eax, DWORD PTR _autoMount$137046[esp+2228]
  00754	85 db		 test	 ebx, ebx
  00756	75 05		 jne	 SHORT $LN48@TravelerDl
  00758	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BK@HJGFLODN@CipherShed?2CipherShed?4exe?$AA@
$LN48@TravelerDl:
  0075d	50		 push	 eax
  0075e	68 00 00 00 00	 push	 OFFSET ??_C@_1BE@KMHACBEF@?$AAo?$AAp?$AAe?$AAn?$AA?$DN?$AA?$CF?$AAh?$AAs?$AA?6?$AA?$AA@
  00763	57		 push	 edi
  00764	e8 00 00 00 00	 call	 _fwprintf

; 3219 : 				fwprintf (af, L"shell\\start=%s\nshell\\start\\command=CipherShed\\CipherShed.exe\n", GetString ("IDC_PREF_LOGON_START"));

  00769	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FNOLBOJK@IDC_PREF_LOGON_START?$AA@
  0076e	e8 00 00 00 00	 call	 _GetString
  00773	50		 push	 eax
  00774	68 00 00 00 00	 push	 OFFSET ??_C@_1HM@MAHCOBAC@?$AAs?$AAh?$AAe?$AAl?$AAl?$AA?2?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$DN?$AA?$CF?$AAs?$AA?6?$AAs?$AAh?$AAe?$AAl?$AAl?$AA?2?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAa@
  00779	57		 push	 edi
  0077a	e8 00 00 00 00	 call	 _fwprintf

; 3220 : 				fwprintf (af, L"shell\\dismount=%s\nshell\\dismount\\command=CipherShed\\CipherShed.exe /q /d\n", GetString ("DISMOUNT_ALL_TC_VOLUMES"));

  0077f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DIPBHJCK@DISMOUNT_ALL_TC_VOLUMES?$AA@
  00784	e8 00 00 00 00	 call	 _GetString
  00789	50		 push	 eax
  0078a	68 00 00 00 00	 push	 OFFSET ??_C@_1JE@HACDHGGM@?$AAs?$AAh?$AAe?$AAl?$AAl?$AA?2?$AAd?$AAi?$AAs?$AAm?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$CF?$AAs?$AA?6?$AAs?$AAh?$AAe?$AAl?$AAl?$AA?2?$AAd?$AAi?$AAs?$AAm?$AAo?$AAu?$AAn?$AAt@
  0078f	57		 push	 edi
  00790	e8 00 00 00 00	 call	 _fwprintf

; 3221 : 
; 3222 : 				CheckFileStreamWriteErrors (af, dstPath);

  00795	8d 8c 24 64 03
	00 00		 lea	 ecx, DWORD PTR _dstPath$137009[esp+2272]
  0079c	51		 push	 ecx
  0079d	57		 push	 edi
  0079e	e8 00 00 00 00	 call	 _CheckFileStreamWriteErrors

; 3223 : 				fclose (af);

  007a3	57		 push	 edi
  007a4	e8 00 00 00 00	 call	 _fclose
  007a9	83 c4 38	 add	 esp, 56			; 00000038H
$LN3@TravelerDl:

; 3224 : 			}
; 3225 : 			MessageBoxW (hwndDlg, GetString ("TRAVELER_DISK_CREATED"), lpszTitle, MB_ICONINFORMATION);

  007ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  007b2	6a 40		 push	 64			; 00000040H
  007b4	52		 push	 edx
  007b5	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EAOOIFHO@TRAVELER_DISK_CREATED?$AA@
$LN65@TravelerDl:
  007ba	e8 00 00 00 00	 call	 _GetString
  007bf	83 c4 04	 add	 esp, 4
  007c2	50		 push	 eax
  007c3	56		 push	 esi
  007c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$stop$137024:

; 3228 : 			NormalCursor ();

  007ca	e8 00 00 00 00	 call	 _NormalCursor
  007cf	b8 01 00 00 00	 mov	 eax, 1
  007d4	e9 f9 00 00 00	 jmp	 $LN35@TravelerDl
$LN18@TravelerDl:

; 3084 : 		{
; 3085 : 			EndDialog (hwndDlg, lw);

  007d9	0f b7 c0	 movzx	 eax, ax
  007dc	50		 push	 eax
  007dd	56		 push	 esi
  007de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 3086 : 			return 1;

  007e4	b8 01 00 00 00	 mov	 eax, 1
  007e9	e9 e4 00 00 00	 jmp	 $LN35@TravelerDl
$LN32@TravelerDl:

; 2996 : 	{
; 2997 : 	case WM_INITDIALOG:
; 2998 : 		{
; 2999 : 			char i;
; 3000 : 			int index;
; 3001 : 			char drive[] = { 0, ':', 0 };
; 3002 : 
; 3003 : 			LocalizeDialog (hwndDlg, "IDD_TRAVELER_DLG");

  007ee	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KOMHMFOJ@IDD_TRAVELER_DLG?$AA@
  007f3	56		 push	 esi
  007f4	c6 44 24 18 00	 mov	 BYTE PTR _drive$136970[esp+2236], 0
  007f9	c6 44 24 19 3a	 mov	 BYTE PTR _drive$136970[esp+2237], 58 ; 0000003aH
  007fe	c6 44 24 1a 00	 mov	 BYTE PTR _drive$136970[esp+2238], 0
  00803	e8 00 00 00 00	 call	 _LocalizeDialog

; 3004 : 
; 3005 : 			SendDlgItemMessage (hwndDlg, IDC_COPY_WIZARD, BM_SETCHECK, 
; 3006 : 						BST_CHECKED, 0);

  00808	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendDlgItemMessageA@20
  0080e	83 c4 08	 add	 esp, 8
  00811	6a 00		 push	 0
  00813	6a 01		 push	 1
  00815	68 f1 00 00 00	 push	 241			; 000000f1H
  0081a	68 02 04 00 00	 push	 1026			; 00000402H
  0081f	56		 push	 esi
  00820	ff d7		 call	 edi

; 3007 : 
; 3008 : 			SendDlgItemMessage (hwndDlg, IDC_TRAVEL_OPEN_EXPLORER, BM_SETCHECK, 
; 3009 : 						BST_CHECKED, 0);

  00822	6a 00		 push	 0
  00824	6a 01		 push	 1
  00826	68 f1 00 00 00	 push	 241			; 000000f1H
  0082b	68 27 04 00 00	 push	 1063			; 00000427H
  00830	56		 push	 esi
  00831	ff d7		 call	 edi

; 3010 : 
; 3011 : 			SendDlgItemMessage (hwndDlg, IDC_AUTORUN_DISABLE, BM_SETCHECK, 
; 3012 : 						BST_CHECKED, 0);

  00833	6a 00		 push	 0
  00835	6a 01		 push	 1
  00837	68 f1 00 00 00	 push	 241			; 000000f1H
  0083c	68 fd 03 00 00	 push	 1021			; 000003fdH
  00841	56		 push	 esi
  00842	ff d7		 call	 edi

; 3013 : 
; 3014 : 			SendDlgItemMessage (hwndDlg, IDC_DRIVELIST, CB_RESETCONTENT, 0, 0);

  00844	6a 00		 push	 0
  00846	6a 00		 push	 0
  00848	68 4b 01 00 00	 push	 331			; 0000014bH
  0084d	68 ef 03 00 00	 push	 1007			; 000003efH
  00852	56		 push	 esi
  00853	ff d7		 call	 edi

; 3015 : 
; 3016 : 			index = SendDlgItemMessageW (hwndDlg, IDC_DRIVELIST, CB_ADDSTRING, 0, (LPARAM) GetString ("FIRST_AVAILABLE"));

  00855	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OIDCBJLP@FIRST_AVAILABLE?$AA@
  0085a	e8 00 00 00 00	 call	 _GetString
  0085f	83 c4 04	 add	 esp, 4
  00862	50		 push	 eax
  00863	6a 00		 push	 0
  00865	68 43 01 00 00	 push	 323			; 00000143H
  0086a	68 ef 03 00 00	 push	 1007			; 000003efH
  0086f	56		 push	 esi
  00870	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendDlgItemMessageW@20

; 3017 : 			SendDlgItemMessage (hwndDlg, IDC_DRIVELIST, CB_SETITEMDATA, index, (LPARAM) 0);

  00876	6a 00		 push	 0
  00878	50		 push	 eax
  00879	68 51 01 00 00	 push	 337			; 00000151H
  0087e	68 ef 03 00 00	 push	 1007			; 000003efH
  00883	56		 push	 esi
  00884	ff d7		 call	 edi

; 3018 : 
; 3019 : 			for (i = 'D'; i <= 'Z'; i++)

  00886	b3 44		 mov	 bl, 68			; 00000044H
  00888	bd 44 00 00 00	 mov	 ebp, 68			; 00000044H
  0088d	8d 49 00	 npad	 3
$LL31@TravelerDl:

; 3020 : 			{
; 3021 : 				drive[0] = i;
; 3022 : 				index = SendDlgItemMessage (hwndDlg, IDC_DRIVELIST, CB_ADDSTRING, 0, (LPARAM) drive);

  00890	8d 4c 24 10	 lea	 ecx, DWORD PTR _drive$136970[esp+2228]
  00894	51		 push	 ecx
  00895	6a 00		 push	 0
  00897	68 43 01 00 00	 push	 323			; 00000143H
  0089c	68 ef 03 00 00	 push	 1007			; 000003efH
  008a1	56		 push	 esi
  008a2	88 5c 24 24	 mov	 BYTE PTR _drive$136970[esp+2248], bl
  008a6	ff d7		 call	 edi

; 3023 : 				SendDlgItemMessage (hwndDlg, IDC_DRIVELIST, CB_SETITEMDATA, index, (LPARAM) i);

  008a8	55		 push	 ebp
  008a9	50		 push	 eax
  008aa	68 51 01 00 00	 push	 337			; 00000151H
  008af	68 ef 03 00 00	 push	 1007			; 000003efH
  008b4	56		 push	 esi
  008b5	ff d7		 call	 edi
  008b7	fe c3		 inc	 bl
  008b9	45		 inc	 ebp
  008ba	80 fb 5a	 cmp	 bl, 90			; 0000005aH
  008bd	7e d1		 jle	 SHORT $LL31@TravelerDl

; 3024 : 			}
; 3025 : 		
; 3026 : 			SendDlgItemMessage (hwndDlg, IDC_DRIVELIST, CB_SETCURSEL, 0, 0);

  008bf	6a 00		 push	 0
  008c1	6a 00		 push	 0
  008c3	68 4e 01 00 00	 push	 334			; 0000014eH
  008c8	68 ef 03 00 00	 push	 1007			; 000003efH
  008cd	56		 push	 esi
  008ce	ff d7		 call	 edi
$LN64@TravelerDl:

; 3027 : 
; 3028 : 			return 0;

  008d0	33 c0		 xor	 eax, eax
$LN35@TravelerDl:

; 3235 : }

  008d2	8b 8c 24 b0 08
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+2228]
  008d9	5f		 pop	 edi
  008da	5e		 pop	 esi
  008db	5d		 pop	 ebp
  008dc	5b		 pop	 ebx
  008dd	33 cc		 xor	 ecx, esp
  008df	e8 00 00 00 00	 call	 @__security_check_cookie@4
  008e4	81 c4 a4 08 00
	00		 add	 esp, 2212		; 000008a4H
  008ea	c2 10 00	 ret	 16			; 00000010H
?TravelerDlgProc@@YGHPAUHWND__@@IIJ@Z ENDP		; TravelerDlgProc
_TEXT	ENDS
PUBLIC	_GetSelectedLong
; Function compile flags: /Ogtpy
;	COMDAT _GetSelectedLong
_TEXT	SEGMENT
_item$ = -52						; size = 52
_hTree$ = 8						; size = 4
_GetSelectedLong PROC					; COMDAT

; 3330 : {

  00000	83 ec 34	 sub	 esp, 52			; 00000034H
  00003	53		 push	 ebx

; 3331 : 	int hItem = ListView_GetSelectionMark (hTree);

  00004	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7c 24 44	 mov	 edi, DWORD PTR _hTree$[esp+60]
  00010	6a 00		 push	 0
  00012	6a 00		 push	 0
  00014	68 42 10 00 00	 push	 4162			; 00001042H
  00019	57		 push	 edi
  0001a	ff d3		 call	 ebx
  0001c	8b f0		 mov	 esi, eax

; 3332 : 	LVITEM item;
; 3333 : 
; 3334 : 	if (nSelectedDriveIndex >= 0)

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nSelectedDriveIndex@@3HA ; nSelectedDriveIndex
  00023	85 c0		 test	 eax, eax
  00025	7c 02		 jl	 SHORT $LN3@GetSelecte

; 3335 : 		hItem = nSelectedDriveIndex;

  00027	8b f0		 mov	 esi, eax
$LN3@GetSelecte:

; 3336 : 
; 3337 : 	memset(&item, 0, sizeof(LVITEM));

  00029	6a 34		 push	 52			; 00000034H
  0002b	8d 44 24 10	 lea	 eax, DWORD PTR _item$[esp+68]
  0002f	6a 00		 push	 0
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _memset
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3338 : 	item.mask = LVIF_PARAM;
; 3339 : 	item.iItem = hItem;
; 3340 : 
; 3341 : 	if (ListView_GetItem (hTree, &item) == FALSE)

  0003a	8d 4c 24 0c	 lea	 ecx, DWORD PTR _item$[esp+64]
  0003e	51		 push	 ecx
  0003f	6a 00		 push	 0
  00041	68 05 10 00 00	 push	 4101			; 00001005H
  00046	57		 push	 edi
  00047	c7 44 24 1c 04
	00 00 00	 mov	 DWORD PTR _item$[esp+80], 4
  0004f	89 74 24 20	 mov	 DWORD PTR _item$[esp+84], esi
  00053	ff d3		 call	 ebx
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	85 c0		 test	 eax, eax
  0005a	75 07		 jne	 SHORT $LN2@GetSelecte

; 3342 : 		return MAKELONG (0xffff, 0xffff);

  0005c	83 c8 ff	 or	 eax, -1

; 3345 : }

  0005f	83 c4 34	 add	 esp, 52			; 00000034H
  00062	c3		 ret	 0
$LN2@GetSelecte:

; 3343 : 	else
; 3344 : 		return item.lParam;

  00063	8b 44 24 20	 mov	 eax, DWORD PTR _item$[esp+84]

; 3345 : }

  00067	83 c4 34	 add	 esp, 52			; 00000034H
  0006a	c3		 ret	 0
_GetSelectedLong ENDP
_TEXT	ENDS
PUBLIC	_GetItemLong
; Function compile flags: /Ogtpy
;	COMDAT _GetItemLong
_TEXT	SEGMENT
_item$ = -52						; size = 52
_hTree$ = 8						; size = 4
_itemNo$ = 12						; size = 4
_GetItemLong PROC					; COMDAT

; 3348 : {

  00000	83 ec 34	 sub	 esp, 52			; 00000034H

; 3349 : 	LVITEM item;
; 3350 : 
; 3351 : 	memset(&item, 0, sizeof(LVITEM));

  00003	6a 34		 push	 52			; 00000034H
  00005	8d 44 24 04	 lea	 eax, DWORD PTR _item$[esp+56]
  00009	6a 00		 push	 0
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _memset

; 3352 : 	item.mask = LVIF_PARAM;
; 3353 : 	item.iItem = itemNo;
; 3354 : 
; 3355 : 	if (ListView_GetItem (hTree, &item) == FALSE)

  00011	8b 44 24 44	 mov	 eax, DWORD PTR _hTree$[esp+60]
  00015	8b 4c 24 48	 mov	 ecx, DWORD PTR _itemNo$[esp+60]
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	8d 14 24	 lea	 edx, DWORD PTR _item$[esp+52]
  0001f	52		 push	 edx
  00020	6a 00		 push	 0
  00022	68 05 10 00 00	 push	 4101			; 00001005H
  00027	50		 push	 eax
  00028	c7 44 24 10 04
	00 00 00	 mov	 DWORD PTR _item$[esp+68], 4
  00030	89 4c 24 14	 mov	 DWORD PTR _item$[esp+72], ecx
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0003a	85 c0		 test	 eax, eax
  0003c	75 07		 jne	 SHORT $LN2@GetItemLon

; 3356 : 		return MAKELONG (0xffff, 0xffff);

  0003e	83 c8 ff	 or	 eax, -1

; 3359 : }

  00041	83 c4 34	 add	 esp, 52			; 00000034H
  00044	c3		 ret	 0
$LN2@GetItemLon:

; 3357 : 	else
; 3358 : 		return item.lParam;

  00045	8b 44 24 20	 mov	 eax, DWORD PTR _item$[esp+84]

; 3359 : }

  00049	83 c4 34	 add	 esp, 52			; 00000034H
  0004c	c3		 ret	 0
_GetItemLong ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@EIILMKAM@PKCS5_PRF_CHANGED?$AA@	; `string'
PUBLIC	??_C@_0BB@DEPMFMC@PASSWORD_CHANGED?$AA@		; `string'
PUBLIC	??_C@_0BA@LJPOPGOF@KEYFILE_CHANGED?$AA@		; `string'
PUBLIC	??_C@_0BD@OHBCOECM@MOUNTED_NOPWCHANGE?$AA@	; `string'
PUBLIC	??_C@_0BM@FIBIL@MOUNTED_NO_PKCS5_PRF_CHANGE?$AA@ ; `string'
EXTRN	_VolumePathExists:PROC
EXTRN	_IsMountedVolume:PROC
;	COMDAT ??_C@_0BC@EIILMKAM@PKCS5_PRF_CHANGED?$AA@
CONST	SEGMENT
??_C@_0BC@EIILMKAM@PKCS5_PRF_CHANGED?$AA@ DB 'PKCS5_PRF_CHANGED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DEPMFMC@PASSWORD_CHANGED?$AA@
CONST	SEGMENT
??_C@_0BB@DEPMFMC@PASSWORD_CHANGED?$AA@ DB 'PASSWORD_CHANGED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LJPOPGOF@KEYFILE_CHANGED?$AA@
CONST	SEGMENT
??_C@_0BA@LJPOPGOF@KEYFILE_CHANGED?$AA@ DB 'KEYFILE_CHANGED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OHBCOECM@MOUNTED_NOPWCHANGE?$AA@
CONST	SEGMENT
??_C@_0BD@OHBCOECM@MOUNTED_NOPWCHANGE?$AA@ DB 'MOUNTED_NOPWCHANGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FIBIL@MOUNTED_NO_PKCS5_PRF_CHANGE?$AA@
CONST	SEGMENT
??_C@_0BM@FIBIL@MOUNTED_NO_PKCS5_PRF_CHANGE?$AA@ DB 'MOUNTED_NO_PKCS5_PRF'
	DB	'_CHANGE', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?ChangePassword@@YAXPAUHWND__@@@Z
_TEXT	SEGMENT
?ChangePassword@@YAXPAUHWND__@@@Z PROC			; ChangePassword, COMDAT
; _hwndDlg$ = esi

; 3938 : 	int result;
; 3939 : 	
; 3940 : 	GetWindowTextA(GetDlgItem (hwndDlg, IDC_VOLUME), szFileName, sizeof (szFileName));

  00000	68 05 01 00 00	 push	 261			; 00000105H
  00005	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  0000a	68 0a 04 00 00	 push	 1034			; 0000040aH
  0000f	56		 push	 esi
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00016	50		 push	 eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 3941 : 	if (IsMountedVolume (szFileName))

  0001d	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00022	e8 00 00 00 00	 call	 _IsMountedVolume
  00027	83 c4 04	 add	 esp, 4
  0002a	85 c0		 test	 eax, eax
  0002c	74 1d		 je	 SHORT $LN8@ChangePass

; 3942 : 	{
; 3943 : 		Warning (pwdChangeDlgMode == PCDM_CHANGE_PKCS5_PRF ? "MOUNTED_NO_PKCS5_PRF_CHANGE" : "MOUNTED_NOPWCHANGE");

  0002e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _pwdChangeDlgMode, 1
  00035	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BM@FIBIL@MOUNTED_NO_PKCS5_PRF_CHANGE?$AA@
  0003a	74 05		 je	 SHORT $LN12@ChangePass
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BD@OHBCOECM@MOUNTED_NOPWCHANGE?$AA@
$LN12@ChangePass:
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _Warning
  00047	83 c4 04	 add	 esp, 4

; 3974 : 		}
; 3975 : 	}
; 3976 : }

  0004a	c3		 ret	 0
$LN8@ChangePass:

; 3944 : 		return;
; 3945 : 	}
; 3946 : 
; 3947 : 	if (!VolumePathExists (szFileName))

  0004b	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00050	e8 00 00 00 00	 call	 _VolumePathExists
  00055	83 c4 04	 add	 esp, 4
  00058	85 c0		 test	 eax, eax
  0005a	75 0a		 jne	 SHORT $LN7@ChangePass

; 3948 : 	{
; 3949 : 		handleWin32Error (hwndDlg);

  0005c	56		 push	 esi
  0005d	e8 00 00 00 00	 call	 _handleWin32Error
  00062	83 c4 04	 add	 esp, 4

; 3974 : 		}
; 3975 : 	}
; 3976 : }

  00065	c3		 ret	 0
$LN7@ChangePass:

; 3950 : 		return;
; 3951 : 	}
; 3952 : 
; 3953 : 	bSysEncPwdChangeDlgMode = FALSE;
; 3954 : 
; 3955 : 	result = DialogBoxW (hInst, MAKEINTRESOURCEW (IDD_PASSWORDCHANGE_DLG), hwndDlg,
; 3956 : 		(DLGPROC) PasswordChangeDlgProc);

  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  0006b	6a 00		 push	 0
  0006d	68 00 00 00 00	 push	 OFFSET _PasswordChangeDlgProc@16
  00072	56		 push	 esi
  00073	6a 66		 push	 102			; 00000066H
  00075	50		 push	 eax
  00076	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bSysEncPwdChangeDlgMode, 0
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 3957 : 
; 3958 : 	if (result == IDOK)

  00086	83 f8 01	 cmp	 eax, 1
  00089	75 38		 jne	 SHORT $LN4@ChangePass

; 3959 : 	{
; 3960 : 		switch (pwdChangeDlgMode)

  0008b	a1 00 00 00 00	 mov	 eax, DWORD PTR _pwdChangeDlgMode
  00090	83 f8 01	 cmp	 eax, 1
  00093	74 23		 je	 SHORT $LN3@ChangePass
  00095	7e 13		 jle	 SHORT $LN1@ChangePass
  00097	83 f8 03	 cmp	 eax, 3
  0009a	7f 0e		 jg	 SHORT $LN1@ChangePass

; 3964 : 			break;
; 3965 : 
; 3966 : 		case PCDM_ADD_REMOVE_VOL_KEYFILES:
; 3967 : 		case PCDM_REMOVE_ALL_KEYFILES_FROM_VOL:
; 3968 : 			Info ("KEYFILE_CHANGED");

  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LJPOPGOF@KEYFILE_CHANGED?$AA@
  000a1	e8 00 00 00 00	 call	 _Info
  000a6	83 c4 04	 add	 esp, 4

; 3974 : 		}
; 3975 : 	}
; 3976 : }

  000a9	c3		 ret	 0
$LN1@ChangePass:

; 3969 : 			break;
; 3970 : 
; 3971 : 		case PCDM_CHANGE_PASSWORD:
; 3972 : 		default:
; 3973 : 			Info ("PASSWORD_CHANGED");

  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DEPMFMC@PASSWORD_CHANGED?$AA@
  000af	e8 00 00 00 00	 call	 _Info
  000b4	83 c4 04	 add	 esp, 4

; 3974 : 		}
; 3975 : 	}
; 3976 : }

  000b7	c3		 ret	 0
$LN3@ChangePass:

; 3961 : 		{
; 3962 : 		case PCDM_CHANGE_PKCS5_PRF:
; 3963 : 			Info ("PKCS5_PRF_CHANGED");

  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EIILMKAM@PKCS5_PRF_CHANGED?$AA@
  000bd	e8 00 00 00 00	 call	 _Info
  000c2	59		 pop	 ecx
$LN4@ChangePass:

; 3974 : 		}
; 3975 : 	}
; 3976 : }

  000c3	c3		 ret	 0
?ChangePassword@@YAXPAUHWND__@@@Z ENDP			; ChangePassword
_TEXT	ENDS
PUBLIC	??_C@_0CP@MHIMBFBH@SYS_PARTITION_OR_DRIVE_APPEARS_F@ ; `string'
PUBLIC	??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@ ; `string'
PUBLIC	??_C@_07PFDFIFLD@?1sysenc?$AA@			; `string'
PUBLIC	??_C@_0CK@CMNICGGD@Global?2TrueCrypt?5System?5Encrypti@ ; `string'
EXTRN	_MutexExistsOnSystem:PROC
;	COMDAT ??_C@_0CP@MHIMBFBH@SYS_PARTITION_OR_DRIVE_APPEARS_F@
CONST	SEGMENT
??_C@_0CP@MHIMBFBH@SYS_PARTITION_OR_DRIVE_APPEARS_F@ DB 'SYS_PARTITION_OR'
	DB	'_DRIVE_APPEARS_FULLY_ENCRYPTED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
CONST	SEGMENT
??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@ DB 'SYSTEM_ENCRYPTIO'
	DB	'N_IN_PROGRESS_ELSEWHERE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PFDFIFLD@?1sysenc?$AA@
CONST	SEGMENT
??_C@_07PFDFIFLD@?1sysenc?$AA@ DB '/sysenc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CMNICGGD@Global?2TrueCrypt?5System?5Encrypti@
CONST	SEGMENT
??_C@_0CK@CMNICGGD@Global?2TrueCrypt?5System?5Encrypti@ DB 'Global\TrueCr'
	DB	'ypt System Encryption Wizard', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?EncryptSystemDevice@@YAXXZ$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?EncryptSystemDevice@@YAXXZ$0
__unwindtable$?EncryptSystemDevice@@YAXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?EncryptSystemDevice@@YAXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?EncryptSystemDevice@@YAXXZ$2
__ehfuncinfo$?EncryptSystemDevice@@YAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?EncryptSystemDevice@@YAXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?EncryptSystemDevice@@YAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?EncryptSystemDevice@@YAXXZ
_TEXT	SEGMENT
$T150889 = -114						; size = 94
_e$137791 = -20						; size = 4
__$EHRec$ = -16						; size = 16
?EncryptSystemDevice@@YAXXZ PROC			; EncryptSystemDevice, COMDAT

; 4073 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?EncryptSystemDevice@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 4074 : 	try
; 4075 : 	{
; 4076 : 		BootEncStatus = BootEncObj->GetStatus();

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00031	8d 45 8e	 lea	 eax, DWORD PTR $T150889[ebp]
  00034	50		 push	 eax
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003c	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00041	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00046	8b f0		 mov	 esi, eax
  00048	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  0004d	f3 a5		 rep movsd
  0004f	66 a5		 movsw
  00051	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN16@EncryptSys:

; 4082 : 
; 4083 : 	if (!BootEncStatus.DriveEncrypted 
; 4084 : 		&& !BootEncStatus.DriveMounted
; 4085 : 		&& !SysEncryptionOrDecryptionRequired ())

  00058	83 3d 0e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14, 0
  0005f	75 5d		 jne	 SHORT $LN9@EncryptSys
  00061	83 3d 06 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, 0
  00068	75 54		 jne	 SHORT $LN9@EncryptSys
  0006a	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  0006f	85 c0		 test	 eax, eax
  00071	75 4b		 jne	 SHORT $LN9@EncryptSys

; 4086 : 	{
; 4087 : 		// System partition/drive is not encrypted (nothing to resume). Initiate the process.
; 4088 : 
; 4089 : 		if (!MutexExistsOnSystem (TC_MUTEX_NAME_SYSENC))	// If no instance of the wizard is currently taking care of system encryption

  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@CMNICGGD@Global?2TrueCrypt?5System?5Encrypti@
  00078	e8 00 00 00 00	 call	 _MutexExistsOnSystem
  0007d	83 c4 04	 add	 esp, 4
  00080	85 c0		 test	 eax, eax
  00082	75 2e		 jne	 SHORT $LN8@EncryptSys

; 4090 : 		{
; 4091 : 			LaunchVolCreationWizard (MainDlg, "/sysenc");

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00089	50		 push	 eax
  0008a	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_07PFDFIFLD@?1sysenc?$AA@
  0008f	e8 00 00 00 00	 call	 ?LaunchVolCreationWizard@@YAXPAUHWND__@@PBD@Z ; LaunchVolCreationWizard

; 4092 : 		}
; 4093 : 		else

  00094	eb 6d		 jmp	 SHORT $LN20@EncryptSys
__catch$?EncryptSystemDevice@@YAXXZ$0:

; 4077 : 	}
; 4078 : 	catch (Exception &e)
; 4079 : 	{
; 4080 : 		e.Show (MainDlg);

  00096	8b 4d ec	 mov	 ecx, DWORD PTR _e$137791[ebp]
  00099	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009b	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000a0	8b 12		 mov	 edx, DWORD PTR [edx]
  000a2	50		 push	 eax
  000a3	ff d2		 call	 edx

; 4081 : 	}

  000a5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000ac	b8 00 00 00 00	 mov	 eax, $LN16@EncryptSys
  000b1	c3		 ret	 0
$LN8@EncryptSys:

; 4094 : 			Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  000b7	e8 00 00 00 00	 call	 _Warning
  000bc	eb 45		 jmp	 SHORT $LN20@EncryptSys
$LN9@EncryptSys:

; 4095 : 
; 4096 : 		return;
; 4097 : 	}
; 4098 : 	else if (SysEncryptionOrDecryptionRequired ())

  000be	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  000c3	85 c0		 test	 eax, eax
  000c5	74 24		 je	 SHORT $LN5@EncryptSys

; 4099 : 	{
; 4100 : 		// System partition/drive encryption already initiated but is incomplete -- attempt to resume the process.
; 4101 : 		// Note that this also covers the pretest phase and paused decryption (reverses decrypting and starts encrypting)
; 4102 : 
; 4103 : 		if (!MutexExistsOnSystem (TC_MUTEX_NAME_SYSENC))	// If no instance of the wizard is currently taking care of system encryption

  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@CMNICGGD@Global?2TrueCrypt?5System?5Encrypti@
  000cc	e8 00 00 00 00	 call	 _MutexExistsOnSystem
  000d1	83 c4 04	 add	 esp, 4
  000d4	85 c0		 test	 eax, eax
  000d6	75 da		 jne	 SHORT $LN8@EncryptSys

; 4104 : 		{
; 4105 : 			LaunchVolCreationWizard (MainDlg, "/sysenc");

  000d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  000de	51		 push	 ecx
  000df	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_07PFDFIFLD@?1sysenc?$AA@
  000e4	e8 00 00 00 00	 call	 ?LaunchVolCreationWizard@@YAXPAUHWND__@@PBD@Z ; LaunchVolCreationWizard

; 4106 : 		}
; 4107 : 		else

  000e9	eb 18		 jmp	 SHORT $LN20@EncryptSys
$LN5@EncryptSys:

; 4108 : 			Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");
; 4109 : 	}
; 4110 : 	else if (SysDriveOrPartitionFullyEncrypted (FALSE))

  000eb	6a 00		 push	 0
  000ed	e8 00 00 00 00	 call	 ?SysDriveOrPartitionFullyEncrypted@@YAHH@Z ; SysDriveOrPartitionFullyEncrypted
  000f2	83 c4 04	 add	 esp, 4
  000f5	85 c0		 test	 eax, eax
  000f7	74 0d		 je	 SHORT $LN1@EncryptSys

; 4111 : 	{
; 4112 : 		// System partition/drive appears to be fully encrypted
; 4113 : 		Info ("SYS_PARTITION_OR_DRIVE_APPEARS_FULLY_ENCRYPTED");

  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@MHIMBFBH@SYS_PARTITION_OR_DRIVE_APPEARS_F@
  000fe	e8 00 00 00 00	 call	 _Info
$LN20@EncryptSys:
  00103	83 c4 04	 add	 esp, 4
$LN1@EncryptSys:

; 4114 : 		return;
; 4115 : 	}
; 4116 : }

  00106	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00109	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00110	59		 pop	 ecx
  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	5b		 pop	 ebx
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?EncryptSystemDevice@@YAXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?EncryptSystemDevice@@YAXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?EncryptSystemDevice@@YAXXZ ENDP			; EncryptSystemDevice
PUBLIC	??_C@_08FPKBNNLN@?1dsysenc?$AA@			; `string'
PUBLIC	??_C@_0CJ@GFEACENL@SYS_ENCRYPTION_OR_DECRYPTION_IN_@ ; `string'
PUBLIC	??_C@_0CD@DOIAPED@CONFIRM_DECRYPT_SYS_DEVICE_CAUTI@ ; `string'
PUBLIC	??_C@_0BL@DACABIPE@CONFIRM_DECRYPT_SYS_DEVICE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@KGJBOMKO@CANNOT_DECRYPT_HIDDEN_OS?$AA@ ; `string'
PUBLIC	??_C@_0BI@BHICMCGD@SYS_DRIVE_NOT_ENCRYPTED?$AA@	; `string'
EXTRN	_CloseSysEncMutex:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	?AbortSetup@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::AbortSetup
EXTRN	_CreateSysEncMutex:PROC
EXTRN	_AskWarnNoYes:PROC
EXTRN	_AskNoYes:PROC
;	COMDAT ??_C@_08FPKBNNLN@?1dsysenc?$AA@
CONST	SEGMENT
??_C@_08FPKBNNLN@?1dsysenc?$AA@ DB '/dsysenc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GFEACENL@SYS_ENCRYPTION_OR_DECRYPTION_IN_@
CONST	SEGMENT
??_C@_0CJ@GFEACENL@SYS_ENCRYPTION_OR_DECRYPTION_IN_@ DB 'SYS_ENCRYPTION_O'
	DB	'R_DECRYPTION_IN_PROGRESS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DOIAPED@CONFIRM_DECRYPT_SYS_DEVICE_CAUTI@
CONST	SEGMENT
??_C@_0CD@DOIAPED@CONFIRM_DECRYPT_SYS_DEVICE_CAUTI@ DB 'CONFIRM_DECRYPT_S'
	DB	'YS_DEVICE_CAUTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DACABIPE@CONFIRM_DECRYPT_SYS_DEVICE?$AA@
CONST	SEGMENT
??_C@_0BL@DACABIPE@CONFIRM_DECRYPT_SYS_DEVICE?$AA@ DB 'CONFIRM_DECRYPT_SY'
	DB	'S_DEVICE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KGJBOMKO@CANNOT_DECRYPT_HIDDEN_OS?$AA@
CONST	SEGMENT
??_C@_0BJ@KGJBOMKO@CANNOT_DECRYPT_HIDDEN_OS?$AA@ DB 'CANNOT_DECRYPT_HIDDE'
	DB	'N_OS', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BHICMCGD@SYS_DRIVE_NOT_ENCRYPTED?$AA@
CONST	SEGMENT
??_C@_0BI@BHICMCGD@SYS_DRIVE_NOT_ENCRYPTED?$AA@ DB 'SYS_DRIVE_NOT_ENCRYPT'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?DecryptSystemDevice@@YAXXZ$5 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$?DecryptSystemDevice@@YAXXZ$2
__catchsym$?DecryptSystemDevice@@YAXXZ$4 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?DecryptSystemDevice@@YAXXZ$0
__unwindtable$?DecryptSystemDevice@@YAXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?DecryptSystemDevice@@YAXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?DecryptSystemDevice@@YAXXZ
	DD	02H
	DD	FLAT:__tryblocktable$?DecryptSystemDevice@@YAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?DecryptSystemDevice@@YAXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?DecryptSystemDevice@@YAXXZ$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?DecryptSystemDevice@@YAXXZ$5
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?DecryptSystemDevice@@YAXXZ
_TEXT	SEGMENT
$T150907 = -118						; size = 94
$T150906 = -118						; size = 94
_e$137825 = -24						; size = 4
_e$137809 = -20						; size = 4
__$EHRec$ = -16						; size = 16
?DecryptSystemDevice@@YAXXZ PROC			; DecryptSystemDevice, COMDAT

; 4120 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?DecryptSystemDevice@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 4121 : 	try
; 4122 : 	{
; 4123 : 		BootEncStatus = BootEncObj->GetStatus();

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00031	8d 45 8a	 lea	 eax, DWORD PTR $T150906[ebp]
  00034	50		 push	 eax
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003c	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00041	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00046	8b f0		 mov	 esi, eax
  00048	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  0004d	f3 a5		 rep movsd
  0004f	66 a5		 movsw
  00051	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN20@DecryptSys:

; 4129 : 
; 4130 : 	if (!BootEncStatus.DriveEncrypted 
; 4131 : 		&& !BootEncStatus.DriveMounted
; 4132 : 		&& !BootEncStatus.DeviceFilterActive
; 4133 : 		&& !BootEncStatus.VolumeHeaderPresent
; 4134 : 		&& !SysEncryptionOrDecryptionRequired ())

  00058	83 3d 0e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14, 0
  0005f	75 4a		 jne	 SHORT $LN11@DecryptSys
  00061	83 3d 06 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, 0
  00068	75 41		 jne	 SHORT $LN11@DecryptSys
  0006a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A, 0
  00071	75 38		 jne	 SHORT $LN11@DecryptSys
  00073	83 3d 0a 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+10, 0
  0007a	75 2f		 jne	 SHORT $LN11@DecryptSys
  0007c	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  00081	85 c0		 test	 eax, eax
  00083	75 26		 jne	 SHORT $LN11@DecryptSys

; 4135 : 	{
; 4136 : 		Warning ("SYS_DRIVE_NOT_ENCRYPTED");

  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BHICMCGD@SYS_DRIVE_NOT_ENCRYPTED?$AA@

; 4137 : 		return;

  0008a	e9 14 01 00 00	 jmp	 $LN30@DecryptSys
__catch$?DecryptSystemDevice@@YAXXZ$0:

; 4124 : 	}
; 4125 : 	catch (Exception &e)
; 4126 : 	{
; 4127 : 		e.Show (MainDlg);

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR _e$137809[ebp]
  00092	8b 11		 mov	 edx, DWORD PTR [ecx]
  00094	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00099	8b 12		 mov	 edx, DWORD PTR [edx]
  0009b	50		 push	 eax
  0009c	ff d2		 call	 edx

; 4128 : 	}

  0009e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a5	b8 00 00 00 00	 mov	 eax, $LN20@DecryptSys
  000aa	c3		 ret	 0
$LN11@DecryptSys:

; 4138 : 	}
; 4139 : 
; 4140 : 	if (IsHiddenOSRunning())

  000ab	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  000b0	85 c0		 test	 eax, eax
  000b2	74 0a		 je	 SHORT $LN10@DecryptSys

; 4141 : 	{
; 4142 : 		Warning ("CANNOT_DECRYPT_HIDDEN_OS");

  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KGJBOMKO@CANNOT_DECRYPT_HIDDEN_OS?$AA@

; 4143 : 		return;

  000b9	e9 e5 00 00 00	 jmp	 $LN30@DecryptSys
$LN10@DecryptSys:

; 4144 : 	}
; 4145 : 
; 4146 : 	if (AskNoYes ("CONFIRM_DECRYPT_SYS_DEVICE") == IDNO)

  000be	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@DACABIPE@CONFIRM_DECRYPT_SYS_DEVICE?$AA@
  000c3	e8 00 00 00 00	 call	 _AskNoYes
  000c8	83 c4 04	 add	 esp, 4
  000cb	83 f8 07	 cmp	 eax, 7
  000ce	0f 84 d7 00 00
	00		 je	 $LN1@DecryptSys

; 4147 : 		return;
; 4148 : 
; 4149 : 	if (AskWarnNoYes ("CONFIRM_DECRYPT_SYS_DEVICE_CAUTION") == IDNO)

  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@DOIAPED@CONFIRM_DECRYPT_SYS_DEVICE_CAUTI@
  000d9	e8 00 00 00 00	 call	 _AskWarnNoYes
  000de	83 c4 04	 add	 esp, 4
  000e1	83 f8 07	 cmp	 eax, 7
  000e4	0f 84 c1 00 00
	00		 je	 $LN1@DecryptSys

; 4150 : 		return;
; 4151 : 
; 4152 : 	if (CreateSysEncMutex ())	// If no instance of the wizard is currently taking care of system encryption

  000ea	e8 00 00 00 00	 call	 _CreateSysEncMutex
  000ef	85 c0		 test	 eax, eax
  000f1	0f 84 a7 00 00
	00		 je	 $LN7@DecryptSys

; 4153 : 	{
; 4154 : 		try
; 4155 : 		{
; 4156 : 			// User-mode app may have crashed and its mutex may have gotten lost, so we need to check the driver status too
; 4157 : 			if (BootEncStatus.SetupInProgress)

  000f7	83 3d 3e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, 0
  000fe	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00105	74 61		 je	 SHORT $LN22@DecryptSys

; 4158 : 			{
; 4159 : 				int attempts = 20;
; 4160 : 
; 4161 : 				BootEncObj->AbortSetup ();

  00107	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0010d	bb 14 00 00 00	 mov	 ebx, 20			; 00000014H
  00112	e8 00 00 00 00	 call	 ?AbortSetup@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::AbortSetup
$LL4@DecryptSys:

; 4162 : 				while (BootEncStatus.SetupInProgress && attempts > 0)

  00117	83 3d 3e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, 0
  0011e	74 48		 je	 SHORT $LN22@DecryptSys
  00120	85 db		 test	 ebx, ebx
  00122	7e 44		 jle	 SHORT $LN22@DecryptSys

; 4163 : 				{
; 4164 : 					Sleep (100);

  00124	6a 64		 push	 100			; 00000064H
  00126	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 4165 : 					BootEncStatus = BootEncObj->GetStatus();

  0012c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00132	8d 45 8a	 lea	 eax, DWORD PTR $T150907[ebp]
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0013b	8b f0		 mov	 esi, eax
  0013d	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00142	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00147	f3 a5		 rep movsd
  00149	66 a5		 movsw

; 4166 : 					attempts--;

  0014b	4b		 dec	 ebx

; 4167 : 					WaitCursor();

  0014c	e8 00 00 00 00	 call	 _WaitCursor

; 4168 : 				}

  00151	eb c4		 jmp	 SHORT $LL4@DecryptSys
__catch$?DecryptSystemDevice@@YAXXZ$2:

; 4169 : 			}
; 4170 : 		}
; 4171 : 		catch (Exception &e)
; 4172 : 		{
; 4173 : 			e.Show (MainDlg);

  00153	8b 4d e8	 mov	 ecx, DWORD PTR _e$137825[ebp]
  00156	8b 11		 mov	 edx, DWORD PTR [ecx]
  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0015d	8b 12		 mov	 edx, DWORD PTR [edx]
  0015f	50		 push	 eax
  00160	ff d2		 call	 edx

; 4174 : 		}

  00162	b8 00 00 00 00	 mov	 eax, $LN22@DecryptSys
  00167	c3		 ret	 0
$LN22@DecryptSys:

; 4175 : 		NormalCursor ();

  00168	e8 00 00 00 00	 call	 _NormalCursor

; 4176 : 
; 4177 : 		if (BootEncStatus.SetupInProgress)

  0016d	83 3d 3e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, 0
  00174	74 11		 je	 SHORT $LN2@DecryptSys

; 4178 : 		{
; 4179 : 			CloseSysEncMutex ();	

  00176	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 4180 : 			Error ("SYS_ENCRYPTION_OR_DECRYPTION_IN_PROGRESS");

  0017b	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@GFEACENL@SYS_ENCRYPTION_OR_DECRYPTION_IN_@
  00180	e8 00 00 00 00	 call	 _Error

; 4181 : 			return;

  00185	eb 21		 jmp	 SHORT $LN31@DecryptSys
$LN2@DecryptSys:

; 4182 : 		}
; 4183 : 
; 4184 : 		CloseSysEncMutex ();	

  00187	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 4185 : 		LaunchVolCreationWizard (MainDlg, "/dsysenc");

  0018c	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00191	50		 push	 eax
  00192	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_08FPKBNNLN@?1dsysenc?$AA@
  00197	e8 00 00 00 00	 call	 ?LaunchVolCreationWizard@@YAXPAUHWND__@@PBD@Z ; LaunchVolCreationWizard

; 4186 : 	}
; 4187 : 	else

  0019c	eb 0a		 jmp	 SHORT $LN31@DecryptSys
$LN7@DecryptSys:

; 4188 : 		Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
$LN30@DecryptSys:
  001a3	e8 00 00 00 00	 call	 _Warning
$LN31@DecryptSys:
  001a8	83 c4 04	 add	 esp, 4
$LN1@DecryptSys:

; 4189 : }

  001ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b5	59		 pop	 ecx
  001b6	5f		 pop	 edi
  001b7	5e		 pop	 esi
  001b8	5b		 pop	 ebx
  001b9	8b e5		 mov	 esp, ebp
  001bb	5d		 pop	 ebp
  001bc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?DecryptSystemDevice@@YAXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 84	 mov	 ecx, DWORD PTR [edx-124]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DecryptSystemDevice@@YAXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DecryptSystemDevice@@YAXXZ ENDP			; DecryptSystemDevice
PUBLIC	??_C@_08MEKEMIGM@?1isysenc?$AA@			; `string'
PUBLIC	??_C@_0BC@FGMBBDKC@HIDDEN_OS_PREINFO?$AA@	; `string'
;	COMDAT ??_C@_08MEKEMIGM@?1isysenc?$AA@
CONST	SEGMENT
??_C@_08MEKEMIGM@?1isysenc?$AA@ DB '/isysenc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FGMBBDKC@HIDDEN_OS_PREINFO?$AA@
CONST	SEGMENT
??_C@_0BC@FGMBBDKC@HIDDEN_OS_PREINFO?$AA@ DB 'HIDDEN_OS_PREINFO', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?CreateHiddenOS@@YAXXZ
_TEXT	SEGMENT
?CreateHiddenOS@@YAXXZ PROC				; CreateHiddenOS, COMDAT

; 4193 : {

  00000	53		 push	 ebx

; 4194 : 
; 4195 : 	// Display brief information as to what a hidden operating system is and what it's good for. This needs to be
; 4196 : 	// done, because if the system partition/drive is currently encrypted, the wizard will not display any
; 4197 : 	// such information, but will exit (displaying only an error meessage).
; 4198 : 	Info("HIDDEN_OS_PREINFO");

  00001	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FGMBBDKC@HIDDEN_OS_PREINFO?$AA@
  00006	e8 00 00 00 00	 call	 _Info

; 4199 : 
; 4200 : 	LaunchVolCreationWizard (MainDlg, "/isysenc");

  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00010	50		 push	 eax
  00011	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_08MEKEMIGM@?1isysenc?$AA@
  00016	e8 00 00 00 00	 call	 ?LaunchVolCreationWizard@@YAXPAUHWND__@@PBD@Z ; LaunchVolCreationWizard
  0001b	83 c4 08	 add	 esp, 8
  0001e	5b		 pop	 ebx

; 4201 : }

  0001f	c3		 ret	 0
?CreateHiddenOS@@YAXXZ ENDP				; CreateHiddenOS
_TEXT	ENDS
PUBLIC	??_C@_08FFGENEKE@?1csysenc?$AA@			; `string'
;	COMDAT ??_C@_08FFGENEKE@?1csysenc?$AA@
CONST	SEGMENT
??_C@_08FFGENEKE@?1csysenc?$AA@ DB '/csysenc', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?ResumeInterruptedSysEncProcess@@YAXXZ
_TEXT	SEGMENT
?ResumeInterruptedSysEncProcess@@YAXXZ PROC		; ResumeInterruptedSysEncProcess, COMDAT

; 4207 : 	if (!MutexExistsOnSystem (TC_MUTEX_NAME_SYSENC))	// If no instance of the wizard is currently taking care of system encryption

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@CMNICGGD@Global?2TrueCrypt?5System?5Encrypti@
  00005	e8 00 00 00 00	 call	 _MutexExistsOnSystem
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	75 16		 jne	 SHORT $LN2@ResumeInte

; 4208 : 	{
; 4209 : 		LaunchVolCreationWizard (MainDlg, "/csysenc");

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_08FFGENEKE@?1csysenc?$AA@
  0001d	e8 00 00 00 00	 call	 ?LaunchVolCreationWizard@@YAXPAUHWND__@@PBD@Z ; LaunchVolCreationWizard
  00022	83 c4 04	 add	 esp, 4
  00025	5b		 pop	 ebx

; 4213 : }

  00026	c3		 ret	 0
$LN2@ResumeInte:

; 4210 : 	}
; 4211 : 	else
; 4212 : 		Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  0002c	e8 00 00 00 00	 call	 _Warning
  00031	59		 pop	 ecx

; 4213 : }

  00032	c3		 ret	 0
?ResumeInterruptedSysEncProcess@@YAXXZ ENDP		; ResumeInterruptedSysEncProcess
_TEXT	ENDS
PUBLIC	??_C@_09FFOCOHMH@?1zinplace?$AA@		; `string'
;	COMDAT ??_C@_09FFOCOHMH@?1zinplace?$AA@
CONST	SEGMENT
??_C@_09FFOCOHMH@?1zinplace?$AA@ DB '/zinplace', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?ResumeInterruptedNonSysInplaceEncProcess@@YAXXZ
_TEXT	SEGMENT
?ResumeInterruptedNonSysInplaceEncProcess@@YAXXZ PROC	; ResumeInterruptedNonSysInplaceEncProcess, COMDAT

; 4405 : 	// IMPORTANT: This function must not check any config files! Otherwise, if a config file was lost or corrupt, 
; 4406 : 	// the user would not be able resume encryption and the data on the volume would be inaccessible.
; 4407 : 
; 4408 : 	LaunchVolCreationWizard (MainDlg, "/zinplace");

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00005	53		 push	 ebx
  00006	50		 push	 eax
  00007	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_09FFOCOHMH@?1zinplace?$AA@
  0000c	e8 00 00 00 00	 call	 ?LaunchVolCreationWizard@@YAXPAUHWND__@@PBD@Z ; LaunchVolCreationWizard
  00011	83 c4 04	 add	 esp, 4
  00014	5b		 pop	 ebx

; 4409 : }

  00015	c3		 ret	 0
?ResumeInterruptedNonSysInplaceEncProcess@@YAXXZ ENDP	; ResumeInterruptedNonSysInplaceEncProcess
_TEXT	ENDS
EXTRN	_BenchmarkDlgProc@16:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?Benchmark@@YAXPAUHWND__@@@Z
_TEXT	SEGMENT
?Benchmark@@YAXPAUHWND__@@@Z PROC			; Benchmark, COMDAT
; _hwndDlg$ = eax

; 4459 : 	DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_BENCHMARK_DLG), hwndDlg,
; 4460 : 		(DLGPROC) BenchmarkDlgProc, (LPARAM) NULL);

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00006	6a 00		 push	 0
  00008	68 00 00 00 00	 push	 OFFSET _BenchmarkDlgProc@16
  0000d	50		 push	 eax
  0000e	68 f7 01 00 00	 push	 503			; 000001f7H
  00013	51		 push	 ecx
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 4461 : }

  0001a	c3		 ret	 0
?Benchmark@@YAXPAUHWND__@@@Z ENDP			; Benchmark
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1Finally6105@?CFK@??MainDialogProc@@9@16@QAE@XZ
_TEXT	SEGMENT
??1Finally6105@?CFK@??MainDialogProc@@9@16@QAE@XZ PROC	; `MainDialogProc'::`602'::Finally6105::~Finally6105, COMDAT

; 6105 : 				finally_do ({ NormalCursor(); });

  00000	e9 00 00 00 00	 jmp	 _NormalCursor
??1Finally6105@?CFK@??MainDialogProc@@9@16@QAE@XZ ENDP	; `MainDialogProc'::`602'::Finally6105::~Finally6105
_TEXT	ENDS
PUBLIC	??_C@_0BD@LGCKNJIO@COMMAND_LINE_ERROR?$AA@	; `string'
PUBLIC	??_C@_0L@EGCKCJDC@background?$AA@		; `string'
PUBLIC	??_C@_0M@OAMDCHEH@preferences?$AA@		; `string'
PUBLIC	??_C@_03IIGECEEC@UAC?$AA@			; `string'
PUBLIC	??_C@_08MPLGCJPF@recovery?$AA@			; `string'
PUBLIC	??_C@_09COBBNOIA@headerbak?$AA@			; `string'
PUBLIC	??_C@_02MNOEILMP@bk?$AA@			; `string'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	??_C@_02IGFKOFAO@sm?$AA@			; `string'
PUBLIC	??_C@_09OMDJNLDP@timestamp?$AA@			; `string'
PUBLIC	??_C@_02FHFEMMFE@ts?$AA@			; `string'
PUBLIC	??_C@_09HPGMKNKO@removable?$AA@			; `string'
PUBLIC	??_C@_02IHJIIPDJ@rm?$AA@			; `string'
PUBLIC	??_C@_08JOKHDEJH@readonly?$AA@			; `string'
PUBLIC	??_C@_02LFKOONLL@ro?$AA@			; `string'
PUBLIC	??_C@_0BB@JACLBFH@BAD_DRIVE_LETTER?$AA@		; `string'
PUBLIC	??_C@_02KAJCLHKP@no?$AA@			; `string'
PUBLIC	??_C@_01EFFIKLCJ@n?$AA@				; `string'
PUBLIC	??_C@_05DEGNHEGP@logon?$AA@			; `string'
PUBLIC	??_C@_09OAMOHPIB@favorites?$AA@			; `string'
PUBLIC	??_C@_07DNDGGNGG@devices?$AA@			; `string'
PUBLIC	??_C@_02FDNBMIAB@?1w?$AA@			; `string'
PUBLIC	??_C@_0L@ENHIBAFA@?1wipecache?$AA@		; `string'
PUBLIC	??_C@_02EKMKPJEA@?1v?$AA@			; `string'
PUBLIC	??_C@_07JEDHAFIB@?1volume?$AA@			; `string'
PUBLIC	??_C@_09JABABBPB@?1tokenlib?$AA@		; `string'
PUBLIC	??_C@_02DHLNANAF@?1s?$AA@			; `string'
PUBLIC	??_C@_07BBNAADON@?1silent?$AA@			; `string'
PUBLIC	??_C@_02FILGPIH@?1q?$AA@			; `string'
PUBLIC	??_C@_05CMMBDMDD@?1quit?$AA@			; `string'
PUBLIC	??_C@_02BMJAFOMG@?1p?$AA@			; `string'
PUBLIC	??_C@_09GAKENAOK@?1password?$AA@		; `string'
PUBLIC	??_C@_02ODPMDCNK@?1m?$AA@			; `string'
PUBLIC	??_C@_0N@DJNKKGFK@?1mountoption?$AA@		; `string'
PUBLIC	??_C@_02PKOHADJL@?1l?$AA@			; `string'
PUBLIC	??_C@_07BFLOILGP@?1letter?$AA@			; `string'
PUBLIC	??_C@_02LFKGJFFM@?1k?$AA@			; `string'
PUBLIC	??_C@_08DFIHLCEH@?1keyfile?$AA@			; `string'
PUBLIC	??_C@_02JOILMGJP@?1h?$AA@			; `string'
PUBLIC	??_C@_08BCLHLEKP@?1history?$AA@			; `string'
PUBLIC	??_C@_02GLHBANAM@?1?$DP?$AA@			; `string'
PUBLIC	??_C@_05HDIPJJLA@?1help?$AA@			; `string'
PUBLIC	??_C@_02IOLBB@?1f?$AA@				; `string'
PUBLIC	??_C@_06NIEOHKD@?1force?$AA@			; `string'
PUBLIC	??_C@_02CLCFLINC@?1e?$AA@			; `string'
PUBLIC	??_C@_08HIGIMFLE@?1explore?$AA@			; `string'
PUBLIC	??_C@_02DCDOIJJD@?1d?$AA@			; `string'
PUBLIC	??_C@_09ELHLJIDE@?1dismount?$AA@		; `string'
PUBLIC	??_C@_02HNHPBPFE@?1c?$AA@			; `string'
PUBLIC	??_C@_06GIJBHGK@?1cache?$AA@			; `string'
PUBLIC	??_C@_02GEGECOBF@?1b?$AA@			; `string'
PUBLIC	??_C@_05DGOOLKJO@?1beep?$AA@			; `string'
PUBLIC	??_C@_02EPEJHNNG@?1a?$AA@			; `string'
PUBLIC	??_C@_05PBOJFAAI@?1auto?$AA@			; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	??_C@_0L@JGIDNNFC@?9Embedding?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_ExtractCommandLine
EXTRN	_exit:PROC
EXTRN	_CommandHelpDlgProc@16:PROC
EXTRN	_strcpy_s:PROC
EXTRN	_Silent:DWORD
EXTRN	_AddComboItem:PROC
EXTRN	_AbortProcess:PROC
EXTRN	_KeyFileAdd:PROC
EXTRN	_strncpy:PROC
EXTRN	_malloc:PROC
EXTRN	_RelativePath2Absolute:PROC
EXTRN	_toupper:PROC
EXTRN	_GetArgumentValue:PROC
EXTRN	_GetArgumentID:PROC
EXTRN	_Win32CommandLine:PROC
EXTRN	__stricmp:PROC
_BSS	SEGMENT
_NoCmdLineArgs DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BD@LGCKNJIO@COMMAND_LINE_ERROR?$AA@
CONST	SEGMENT
??_C@_0BD@LGCKNJIO@COMMAND_LINE_ERROR?$AA@ DB 'COMMAND_LINE_ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EGCKCJDC@background?$AA@
CONST	SEGMENT
??_C@_0L@EGCKCJDC@background?$AA@ DB 'background', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OAMDCHEH@preferences?$AA@
CONST	SEGMENT
??_C@_0M@OAMDCHEH@preferences?$AA@ DB 'preferences', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03IIGECEEC@UAC?$AA@
CONST	SEGMENT
??_C@_03IIGECEEC@UAC?$AA@ DB 'UAC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08MPLGCJPF@recovery?$AA@
CONST	SEGMENT
??_C@_08MPLGCJPF@recovery?$AA@ DB 'recovery', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09COBBNOIA@headerbak?$AA@
CONST	SEGMENT
??_C@_09COBBNOIA@headerbak?$AA@ DB 'headerbak', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02MNOEILMP@bk?$AA@
CONST	SEGMENT
??_C@_02MNOEILMP@bk?$AA@ DB 'bk', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02IGFKOFAO@sm?$AA@
CONST	SEGMENT
??_C@_02IGFKOFAO@sm?$AA@ DB 'sm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09OMDJNLDP@timestamp?$AA@
CONST	SEGMENT
??_C@_09OMDJNLDP@timestamp?$AA@ DB 'timestamp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02FHFEMMFE@ts?$AA@
CONST	SEGMENT
??_C@_02FHFEMMFE@ts?$AA@ DB 'ts', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09HPGMKNKO@removable?$AA@
CONST	SEGMENT
??_C@_09HPGMKNKO@removable?$AA@ DB 'removable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02IHJIIPDJ@rm?$AA@
CONST	SEGMENT
??_C@_02IHJIIPDJ@rm?$AA@ DB 'rm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JOKHDEJH@readonly?$AA@
CONST	SEGMENT
??_C@_08JOKHDEJH@readonly?$AA@ DB 'readonly', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFKOONLL@ro?$AA@
CONST	SEGMENT
??_C@_02LFKOONLL@ro?$AA@ DB 'ro', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JACLBFH@BAD_DRIVE_LETTER?$AA@
CONST	SEGMENT
??_C@_0BB@JACLBFH@BAD_DRIVE_LETTER?$AA@ DB 'BAD_DRIVE_LETTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KAJCLHKP@no?$AA@
CONST	SEGMENT
??_C@_02KAJCLHKP@no?$AA@ DB 'no', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EFFIKLCJ@n?$AA@
CONST	SEGMENT
??_C@_01EFFIKLCJ@n?$AA@ DB 'n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05DEGNHEGP@logon?$AA@
CONST	SEGMENT
??_C@_05DEGNHEGP@logon?$AA@ DB 'logon', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OAMOHPIB@favorites?$AA@
CONST	SEGMENT
??_C@_09OAMOHPIB@favorites?$AA@ DB 'favorites', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DNDGGNGG@devices?$AA@
CONST	SEGMENT
??_C@_07DNDGGNGG@devices?$AA@ DB 'devices', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FDNBMIAB@?1w?$AA@
CONST	SEGMENT
??_C@_02FDNBMIAB@?1w?$AA@ DB '/w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ENHIBAFA@?1wipecache?$AA@
CONST	SEGMENT
??_C@_0L@ENHIBAFA@?1wipecache?$AA@ DB '/wipecache', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02EKMKPJEA@?1v?$AA@
CONST	SEGMENT
??_C@_02EKMKPJEA@?1v?$AA@ DB '/v', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07JEDHAFIB@?1volume?$AA@
CONST	SEGMENT
??_C@_07JEDHAFIB@?1volume?$AA@ DB '/volume', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JABABBPB@?1tokenlib?$AA@
CONST	SEGMENT
??_C@_09JABABBPB@?1tokenlib?$AA@ DB '/tokenlib', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DHLNANAF@?1s?$AA@
CONST	SEGMENT
??_C@_02DHLNANAF@?1s?$AA@ DB '/s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07BBNAADON@?1silent?$AA@
CONST	SEGMENT
??_C@_07BBNAADON@?1silent?$AA@ DB '/silent', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02FILGPIH@?1q?$AA@
CONST	SEGMENT
??_C@_02FILGPIH@?1q?$AA@ DB '/q', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05CMMBDMDD@?1quit?$AA@
CONST	SEGMENT
??_C@_05CMMBDMDD@?1quit?$AA@ DB '/quit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02BMJAFOMG@?1p?$AA@
CONST	SEGMENT
??_C@_02BMJAFOMG@?1p?$AA@ DB '/p', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09GAKENAOK@?1password?$AA@
CONST	SEGMENT
??_C@_09GAKENAOK@?1password?$AA@ DB '/password', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02ODPMDCNK@?1m?$AA@
CONST	SEGMENT
??_C@_02ODPMDCNK@?1m?$AA@ DB '/m', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DJNKKGFK@?1mountoption?$AA@
CONST	SEGMENT
??_C@_0N@DJNKKGFK@?1mountoption?$AA@ DB '/mountoption', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02PKOHADJL@?1l?$AA@
CONST	SEGMENT
??_C@_02PKOHADJL@?1l?$AA@ DB '/l', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07BFLOILGP@?1letter?$AA@
CONST	SEGMENT
??_C@_07BFLOILGP@?1letter?$AA@ DB '/letter', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFKGJFFM@?1k?$AA@
CONST	SEGMENT
??_C@_02LFKGJFFM@?1k?$AA@ DB '/k', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DFIHLCEH@?1keyfile?$AA@
CONST	SEGMENT
??_C@_08DFIHLCEH@?1keyfile?$AA@ DB '/keyfile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02JOILMGJP@?1h?$AA@
CONST	SEGMENT
??_C@_02JOILMGJP@?1h?$AA@ DB '/h', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08BCLHLEKP@?1history?$AA@
CONST	SEGMENT
??_C@_08BCLHLEKP@?1history?$AA@ DB '/history', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02GLHBANAM@?1?$DP?$AA@
CONST	SEGMENT
??_C@_02GLHBANAM@?1?$DP?$AA@ DB '/?', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HDIPJJLA@?1help?$AA@
CONST	SEGMENT
??_C@_05HDIPJJLA@?1help?$AA@ DB '/help', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02IOLBB@?1f?$AA@
CONST	SEGMENT
??_C@_02IOLBB@?1f?$AA@ DB '/f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NIEOHKD@?1force?$AA@
CONST	SEGMENT
??_C@_06NIEOHKD@?1force?$AA@ DB '/force', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02CLCFLINC@?1e?$AA@
CONST	SEGMENT
??_C@_02CLCFLINC@?1e?$AA@ DB '/e', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08HIGIMFLE@?1explore?$AA@
CONST	SEGMENT
??_C@_08HIGIMFLE@?1explore?$AA@ DB '/explore', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DCDOIJJD@?1d?$AA@
CONST	SEGMENT
??_C@_02DCDOIJJD@?1d?$AA@ DB '/d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09ELHLJIDE@?1dismount?$AA@
CONST	SEGMENT
??_C@_09ELHLJIDE@?1dismount?$AA@ DB '/dismount', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02HNHPBPFE@?1c?$AA@
CONST	SEGMENT
??_C@_02HNHPBPFE@?1c?$AA@ DB '/c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06GIJBHGK@?1cache?$AA@
CONST	SEGMENT
??_C@_06GIJBHGK@?1cache?$AA@ DB '/cache', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GEGECOBF@?1b?$AA@
CONST	SEGMENT
??_C@_02GEGECOBF@?1b?$AA@ DB '/b', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05DGOOLKJO@?1beep?$AA@
CONST	SEGMENT
??_C@_05DGOOLKJO@?1beep?$AA@ DB '/beep', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EPEJHNNG@?1a?$AA@
CONST	SEGMENT
??_C@_02EPEJHNNG@?1a?$AA@ DB '/a', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PBOJFAAI@?1auto?$AA@
CONST	SEGMENT
??_C@_05PBOJFAAI@?1auto?$AA@ DB '/auto', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JGIDNNFC@?9Embedding?$AA@
CONST	SEGMENT
??_C@_0L@JGIDNNFC@?9Embedding?$AA@ DB '-Embedding', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _ExtractCommandLine
_TEXT	SEGMENT
_lpszCommandLineArgs$ = -1432				; size = 4
_i$139126 = -1428					; size = 4
_nArgPos$139183 = -1424					; size = 4
_hwndDlg$GSCopy$ = -1420				; size = 4
_as$139182 = -1416					; size = 8
_nNoCommandLineArgs$ = -1408				; size = 4
_args$139148 = -1404					; size = 816
_szTmp$139226 = -588					; size = 16
_szTmp$139222 = -572					; size = 8
_szTmp$139201 = -564					; size = 8
_szTmp$139256 = -556					; size = 32
_szTmp$139189 = -556					; size = 32
_tmpPath$ = -524					; size = 520
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_lpszCommandLine$ = 12					; size = 4
_ExtractCommandLine PROC				; COMDAT

; 6587 : {

  00000	81 ec 98 05 00
	00		 sub	 esp, 1432		; 00000598H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 94 05
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1432], eax
  00014	55		 push	 ebp
  00015	56		 push	 esi
  00016	8b b4 24 a8 05
	00 00		 mov	 esi, DWORD PTR _lpszCommandLine$[esp+1436]
  0001d	57		 push	 edi
  0001e	8b bc 24 a8 05
	00 00		 mov	 edi, DWORD PTR _hwndDlg$[esp+1440]

; 6588 : 	char **lpszCommandLineArgs;	/* Array of command line arguments */
; 6589 : 	int nNoCommandLineArgs;	/* The number of arguments in the array */
; 6590 : 	char tmpPath[MAX_PATH * 2];
; 6591 : 
; 6592 : 	/* Defaults */
; 6593 : 	mountOptions.PreserveTimestamp = TRUE;
; 6594 : 	
; 6595 : 	if (_stricmp (lpszCommandLine, "-Embedding") == 0)

  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JGIDNNFC@?9Embedding?$AA@
  0002a	bd 01 00 00 00	 mov	 ebp, 1
  0002f	56		 push	 esi

; 6861 : 	{
; 6862 : 		free (lpszCommandLineArgs[nNoCommandLineArgs]);

  00030	89 7c 24 20	 mov	 DWORD PTR _hwndDlg$GSCopy$[esp+1452], edi
  00034	89 2d 0c 00 00
	00		 mov	 DWORD PTR ?mountOptions@@3UMountOptions@@A+12, ebp
  0003a	e8 00 00 00 00	 call	 __stricmp
  0003f	83 c4 08	 add	 esp, 8
  00042	85 c0		 test	 eax, eax
  00044	75 1e		 jne	 SHORT $LN62@ExtractCom
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	89 2d 00 00 00
	00		 mov	 DWORD PTR ?ComServerMode@@3HA, ebp ; ComServerMode
  0004e	5d		 pop	 ebp

; 6863 : 	}
; 6864 : }

  0004f	8b 8c 24 94 05
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1432]
  00056	33 cc		 xor	 ecx, esp
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	81 c4 98 05 00
	00		 add	 esp, 1432		; 00000598H
  00063	c3		 ret	 0
$LN62@ExtractCom:
  00064	53		 push	 ebx

; 6596 : 	{
; 6597 : 		ComServerMode = TRUE;
; 6598 : 		return;
; 6599 : 	}
; 6600 : 
; 6601 : 	/* Extract command line arguments */
; 6602 : 	NoCmdLineArgs = nNoCommandLineArgs = Win32CommandLine (lpszCommandLine, &lpszCommandLineArgs);

  00065	8d 44 24 10	 lea	 eax, DWORD PTR _lpszCommandLineArgs$[esp+1448]
  00069	50		 push	 eax
  0006a	56		 push	 esi
  0006b	e8 00 00 00 00	 call	 _Win32CommandLine
  00070	8b f0		 mov	 esi, eax

; 6603 : 
; 6604 : 	if (nNoCommandLineArgs > 0)

  00072	33 db		 xor	 ebx, ebx
  00074	83 c4 08	 add	 esp, 8
  00077	3b f3		 cmp	 esi, ebx
  00079	89 74 24 28	 mov	 DWORD PTR _nNoCommandLineArgs$[esp+1448], esi
  0007d	89 35 00 00 00
	00		 mov	 DWORD PTR _NoCmdLineArgs, esi
  00083	0f 8e e5 0f 00
	00		 jle	 $LN66@ExtractCom

; 6605 : 	{
; 6606 : 		int i;
; 6607 : 
; 6608 : 		for (i = 0; i < nNoCommandLineArgs; i++)

  00089	33 c9		 xor	 ecx, ecx
  0008b	3b f3		 cmp	 esi, ebx
  0008d	89 4c 24 14	 mov	 DWORD PTR _i$139126[esp+1448], ecx
  00091	0f 8e d7 0f 00
	00		 jle	 $LN66@ExtractCom
  00097	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL60@ExtractCom:

; 6609 : 		{
; 6610 : 			enum
; 6611 : 			{
; 6612 : 				OptionAuto,
; 6613 : 				OptionBeep,
; 6614 : 				OptionCache,
; 6615 : 				CommandDismount,
; 6616 : 				OptionExplore,
; 6617 : 				OptionForce,
; 6618 : 				CommandHelp,
; 6619 : 				OptionHistory,
; 6620 : 				OptionKeyfile,
; 6621 : 				OptionLetter,
; 6622 : 				OptionMountOption,
; 6623 : 				OptionPassword,
; 6624 : 				OptionQuit,
; 6625 : 				OptionSilent,
; 6626 : 				OptionTokenLib,
; 6627 : 				OptionVolume,
; 6628 : 				CommandWipeCache
; 6629 : 			};
; 6630 : 
; 6631 : 			argument args[]=
; 6632 : 			{
; 6633 : 				{ OptionAuto,					"/auto",			"/a", FALSE },

  000a0	0f b7 05 04 00
	00 00		 movzx	 eax, WORD PTR ??_C@_05PBOJFAAI@?1auto?$AA@+4
  000a7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_05PBOJFAAI@?1auto?$AA@
  000ad	66 89 44 24 34	 mov	 WORD PTR _args$139148[esp+1456], ax
  000b2	33 c0		 xor	 eax, eax
  000b4	89 44 24 36	 mov	 DWORD PTR _args$139148[esp+1458], eax
  000b8	89 44 24 3a	 mov	 DWORD PTR _args$139148[esp+1462], eax
  000bc	89 44 24 3e	 mov	 DWORD PTR _args$139148[esp+1466], eax
  000c0	89 44 24 42	 mov	 DWORD PTR _args$139148[esp+1470], eax
  000c4	89 44 24 46	 mov	 DWORD PTR _args$139148[esp+1474], eax
  000c8	89 44 24 4a	 mov	 DWORD PTR _args$139148[esp+1478], eax
  000cc	66 89 44 24 4e	 mov	 WORD PTR _args$139148[esp+1482], ax
  000d1	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02EPEJHNNG@?1a?$AA@+2
  000d8	88 44 24 52	 mov	 BYTE PTR _args$139148[esp+1486], al
  000dc	33 c0		 xor	 eax, eax
  000de	89 44 24 53	 mov	 DWORD PTR _args$139148[esp+1487], eax
  000e2	88 44 24 57	 mov	 BYTE PTR _args$139148[esp+1491], al

; 6634 : 				{ OptionBeep,					"/beep",			"/b", FALSE },

  000e6	0f b7 05 04 00
	00 00		 movzx	 eax, WORD PTR ??_C@_05DGOOLKJO@?1beep?$AA@+4
  000ed	66 89 44 24 64	 mov	 WORD PTR _args$139148[esp+1504], ax
  000f2	33 c0		 xor	 eax, eax
  000f4	89 44 24 66	 mov	 DWORD PTR _args$139148[esp+1506], eax
  000f8	89 44 24 6a	 mov	 DWORD PTR _args$139148[esp+1510], eax
  000fc	89 44 24 6e	 mov	 DWORD PTR _args$139148[esp+1514], eax
  00100	89 44 24 72	 mov	 DWORD PTR _args$139148[esp+1518], eax
  00104	89 44 24 76	 mov	 DWORD PTR _args$139148[esp+1522], eax
  00108	89 44 24 7a	 mov	 DWORD PTR _args$139148[esp+1526], eax
  0010c	66 89 44 24 7e	 mov	 WORD PTR _args$139148[esp+1530], ax
  00111	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02GEGECOBF@?1b?$AA@+2
  00118	89 54 24 30	 mov	 DWORD PTR _args$139148[esp+1452], edx
  0011c	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02EPEJHNNG@?1a?$AA@
  00123	88 84 24 82 00
	00 00		 mov	 BYTE PTR _args$139148[esp+1534], al
  0012a	33 c0		 xor	 eax, eax
  0012c	66 89 54 24 50	 mov	 WORD PTR _args$139148[esp+1484], dx
  00131	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_05DGOOLKJO@?1beep?$AA@
  00137	89 84 24 83 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1535], eax
  0013e	88 84 24 87 00
	00 00		 mov	 BYTE PTR _args$139148[esp+1539], al

; 6635 : 				{ OptionCache,					"/cache",			"/c", FALSE },

  00145	0f b7 05 04 00
	00 00		 movzx	 eax, WORD PTR ??_C@_06GIJBHGK@?1cache?$AA@+4
  0014c	89 54 24 60	 mov	 DWORD PTR _args$139148[esp+1500], edx
  00150	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02GEGECOBF@?1b?$AA@
  00157	66 89 84 24 94
	00 00 00	 mov	 WORD PTR _args$139148[esp+1552], ax
  0015f	33 c0		 xor	 eax, eax
  00161	66 89 94 24 80
	00 00 00	 mov	 WORD PTR _args$139148[esp+1532], dx
  00169	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_06GIJBHGK@?1cache?$AA@
  0016f	89 84 24 97 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1555], eax
  00176	89 84 24 9b 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1559], eax
  0017d	89 84 24 9f 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1563], eax
  00184	89 84 24 a3 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1567], eax
  0018b	89 84 24 a7 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1571], eax
  00192	89 84 24 ab 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1575], eax
  00199	88 84 24 af 00
	00 00		 mov	 BYTE PTR _args$139148[esp+1579], al
  001a0	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02HNHPBPFE@?1c?$AA@
  001a7	89 94 24 90 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1548], edx
  001ae	0f b6 15 06 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_06GIJBHGK@?1cache?$AA@+6
  001b5	66 89 84 24 b0
	00 00 00	 mov	 WORD PTR _args$139148[esp+1580], ax
  001bd	33 c0		 xor	 eax, eax
  001bf	88 94 24 96 00
	00 00		 mov	 BYTE PTR _args$139148[esp+1554], dl
  001c6	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_02HNHPBPFE@?1c?$AA@+2
  001cd	89 84 24 b3 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1583], eax
  001d4	88 84 24 b7 00
	00 00		 mov	 BYTE PTR _args$139148[esp+1587], al

; 6636 : 				{ CommandDismount,				"/dismount",		"/d", FALSE },

  001db	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09ELHLJIDE@?1dismount?$AA@
  001e0	88 94 24 b2 00
	00 00		 mov	 BYTE PTR _args$139148[esp+1582], dl
  001e7	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_09ELHLJIDE@?1dismount?$AA@+4
  001ed	89 84 24 c0 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1596], eax
  001f4	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ??_C@_09ELHLJIDE@?1dismount?$AA@+8
  001fb	89 94 24 c4 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1600], edx
  00202	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02DCDOIJJD@?1d?$AA@
  00209	66 89 84 24 c8
	00 00 00	 mov	 WORD PTR _args$139148[esp+1604], ax
  00211	33 c0		 xor	 eax, eax
  00213	89 5c 24 2c	 mov	 DWORD PTR _args$139148[esp+1448], ebx
  00217	89 5c 24 58	 mov	 DWORD PTR _args$139148[esp+1492], ebx
  0021b	89 6c 24 5c	 mov	 DWORD PTR _args$139148[esp+1496], ebp
  0021f	89 9c 24 88 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1540], ebx
  00226	c7 84 24 8c 00
	00 00 02 00 00
	00		 mov	 DWORD PTR _args$139148[esp+1544], 2
  00231	89 9c 24 b8 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1588], ebx
  00238	c7 84 24 bc 00
	00 00 03 00 00
	00		 mov	 DWORD PTR _args$139148[esp+1592], 3
  00243	89 84 24 ca 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1606], eax
  0024a	89 84 24 ce 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1610], eax
  00251	89 84 24 d2 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1614], eax
  00258	89 84 24 d6 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1618], eax
  0025f	89 84 24 da 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1622], eax
  00266	66 89 84 24 de
	00 00 00	 mov	 WORD PTR _args$139148[esp+1626], ax
  0026e	66 89 94 24 e0
	00 00 00	 mov	 WORD PTR _args$139148[esp+1628], dx
  00276	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02DCDOIJJD@?1d?$AA@+2
  0027d	88 84 24 e2 00
	00 00		 mov	 BYTE PTR _args$139148[esp+1630], al
  00284	33 c0		 xor	 eax, eax

; 6637 : 				{ OptionExplore,				"/explore",			"/e", FALSE },

  00286	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_08HIGIMFLE@?1explore?$AA@
  0028c	89 84 24 e3 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1631], eax
  00293	88 84 24 e7 00
	00 00		 mov	 BYTE PTR _args$139148[esp+1635], al
  0029a	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_08HIGIMFLE@?1explore?$AA@+4
  0029f	89 84 24 f4 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1648], eax
  002a6	33 c0		 xor	 eax, eax
  002a8	89 84 24 f9 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1653], eax
  002af	89 84 24 fd 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1657], eax
  002b6	89 84 24 01 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1661], eax
  002bd	89 84 24 05 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1665], eax
  002c4	89 84 24 09 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1669], eax
  002cb	66 89 84 24 0d
	01 00 00	 mov	 WORD PTR _args$139148[esp+1673], ax
  002d3	88 84 24 0f 01
	00 00		 mov	 BYTE PTR _args$139148[esp+1675], al
  002da	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02CLCFLINC@?1e?$AA@
  002e1	66 89 84 24 10
	01 00 00	 mov	 WORD PTR _args$139148[esp+1676], ax
  002e9	33 c0		 xor	 eax, eax
  002eb	89 84 24 13 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1679], eax
  002f2	88 84 24 17 01
	00 00		 mov	 BYTE PTR _args$139148[esp+1683], al

; 6638 : 				{ OptionForce,					"/force",			"/f", FALSE },

  002f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06NIEOHKD@?1force?$AA@
  002fe	89 84 24 20 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1692], eax
  00305	0f b6 05 06 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_06NIEOHKD@?1force?$AA@+6
  0030c	89 94 24 f0 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1644], edx
  00313	0f b6 15 08 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_08HIGIMFLE@?1explore?$AA@+8
  0031a	88 84 24 26 01
	00 00		 mov	 BYTE PTR _args$139148[esp+1698], al
  00321	33 c0		 xor	 eax, eax
  00323	88 94 24 f8 00
	00 00		 mov	 BYTE PTR _args$139148[esp+1652], dl
  0032a	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_02CLCFLINC@?1e?$AA@+2
  00331	89 84 24 27 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1699], eax
  00338	89 84 24 2b 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1703], eax
  0033f	89 84 24 2f 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1707], eax
  00346	89 84 24 33 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1711], eax
  0034d	89 84 24 37 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1715], eax
  00354	89 84 24 3b 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1719], eax
  0035b	88 84 24 3f 01
	00 00		 mov	 BYTE PTR _args$139148[esp+1723], al
  00362	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02IOLBB@?1f?$AA@+2
  00369	88 94 24 12 01
	00 00		 mov	 BYTE PTR _args$139148[esp+1678], dl
  00370	0f b7 15 04 00
	00 00		 movzx	 edx, WORD PTR ??_C@_06NIEOHKD@?1force?$AA@+4
  00377	88 84 24 42 01
	00 00		 mov	 BYTE PTR _args$139148[esp+1726], al
  0037e	33 c0		 xor	 eax, eax
  00380	66 89 94 24 24
	01 00 00	 mov	 WORD PTR _args$139148[esp+1696], dx
  00388	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02IOLBB@?1f?$AA@
  0038f	89 84 24 43 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1727], eax
  00396	88 84 24 47 01
	00 00		 mov	 BYTE PTR _args$139148[esp+1731], al

; 6639 : 				{ CommandHelp,					"/help",			"/?", FALSE },

  0039d	0f b7 05 04 00
	00 00		 movzx	 eax, WORD PTR ??_C@_05HDIPJJLA@?1help?$AA@+4
  003a4	66 89 94 24 40
	01 00 00	 mov	 WORD PTR _args$139148[esp+1724], dx
  003ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_05HDIPJJLA@?1help?$AA@
  003b2	66 89 84 24 54
	01 00 00	 mov	 WORD PTR _args$139148[esp+1744], ax
  003ba	33 c0		 xor	 eax, eax
  003bc	89 94 24 50 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1740], edx
  003c3	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02GLHBANAM@?1?$DP?$AA@
  003ca	89 84 24 56 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1746], eax
  003d1	89 84 24 5a 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1750], eax
  003d8	89 84 24 5e 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1754], eax
  003df	89 84 24 62 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1758], eax
  003e6	89 84 24 66 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1762], eax
  003ed	89 84 24 6a 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1766], eax
  003f4	66 89 84 24 6e
	01 00 00	 mov	 WORD PTR _args$139148[esp+1770], ax
  003fc	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02GLHBANAM@?1?$DP?$AA@+2
  00403	66 89 94 24 70
	01 00 00	 mov	 WORD PTR _args$139148[esp+1772], dx

; 6640 : 				{ OptionHistory,				"/history",			"/h", FALSE },

  0040b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_08BCLHLEKP@?1history?$AA@
  00411	88 84 24 72 01
	00 00		 mov	 BYTE PTR _args$139148[esp+1774], al
  00418	33 c0		 xor	 eax, eax
  0041a	89 84 24 73 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1775], eax
  00421	88 84 24 77 01
	00 00		 mov	 BYTE PTR _args$139148[esp+1779], al
  00428	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_08BCLHLEKP@?1history?$AA@+4
  0042d	89 94 24 80 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1788], edx
  00434	0f b6 15 08 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_08BCLHLEKP@?1history?$AA@+8
  0043b	89 84 24 84 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1792], eax
  00442	89 9c 24 e8 00
	00 00		 mov	 DWORD PTR _args$139148[esp+1636], ebx
  00449	c7 84 24 ec 00
	00 00 04 00 00
	00		 mov	 DWORD PTR _args$139148[esp+1640], 4
  00454	89 9c 24 18 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1684], ebx
  0045b	c7 84 24 1c 01
	00 00 05 00 00
	00		 mov	 DWORD PTR _args$139148[esp+1688], 5
  00466	89 9c 24 48 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1732], ebx
  0046d	c7 84 24 4c 01
	00 00 06 00 00
	00		 mov	 DWORD PTR _args$139148[esp+1736], 6
  00478	89 9c 24 78 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1780], ebx
  0047f	c7 84 24 7c 01
	00 00 07 00 00
	00		 mov	 DWORD PTR _args$139148[esp+1784], 7
  0048a	88 94 24 88 01
	00 00		 mov	 BYTE PTR _args$139148[esp+1796], dl
  00491	33 c0		 xor	 eax, eax
  00493	89 84 24 89 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1797], eax
  0049a	89 84 24 8d 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1801], eax
  004a1	89 84 24 91 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1805], eax
  004a8	89 84 24 95 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1809], eax
  004af	89 84 24 99 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1813], eax
  004b6	66 89 84 24 9d
	01 00 00	 mov	 WORD PTR _args$139148[esp+1817], ax
  004be	88 84 24 9f 01
	00 00		 mov	 BYTE PTR _args$139148[esp+1819], al
  004c5	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02JOILMGJP@?1h?$AA@
  004cc	66 89 84 24 a0
	01 00 00	 mov	 WORD PTR _args$139148[esp+1820], ax
  004d4	33 c0		 xor	 eax, eax
  004d6	89 84 24 a3 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1823], eax
  004dd	88 84 24 a7 01
	00 00		 mov	 BYTE PTR _args$139148[esp+1827], al

; 6641 : 				{ OptionKeyfile,				"/keyfile",			"/k", FALSE },

  004e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_08DFIHLCEH@?1keyfile?$AA@
  004e9	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_02JOILMGJP@?1h?$AA@+2
  004f0	89 84 24 b0 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1836], eax
  004f7	0f b6 05 08 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_08DFIHLCEH@?1keyfile?$AA@+8
  004fe	88 84 24 b8 01
	00 00		 mov	 BYTE PTR _args$139148[esp+1844], al
  00505	33 c0		 xor	 eax, eax
  00507	89 84 24 b9 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1845], eax
  0050e	89 84 24 bd 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1849], eax
  00515	89 84 24 c1 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1853], eax
  0051c	89 84 24 c5 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1857], eax
  00523	89 84 24 c9 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1861], eax
  0052a	66 89 84 24 cd
	01 00 00	 mov	 WORD PTR _args$139148[esp+1865], ax
  00532	88 84 24 cf 01
	00 00		 mov	 BYTE PTR _args$139148[esp+1867], al
  00539	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02LFKGJFFM@?1k?$AA@+2
  00540	88 84 24 d2 01
	00 00		 mov	 BYTE PTR _args$139148[esp+1870], al
  00547	33 c0		 xor	 eax, eax
  00549	89 84 24 d3 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1871], eax
  00550	88 84 24 d7 01
	00 00		 mov	 BYTE PTR _args$139148[esp+1875], al

; 6642 : 				{ OptionLetter,					"/letter",			"/l", FALSE },

  00557	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_07BFLOILGP@?1letter?$AA@+4
  0055c	89 84 24 e4 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1888], eax
  00563	33 c0		 xor	 eax, eax
  00565	88 94 24 a2 01
	00 00		 mov	 BYTE PTR _args$139148[esp+1822], dl
  0056c	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_08DFIHLCEH@?1keyfile?$AA@+4
  00572	89 84 24 e8 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1892], eax
  00579	89 84 24 ec 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1896], eax
  00580	89 84 24 f0 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1900], eax
  00587	89 84 24 f4 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1904], eax
  0058e	89 84 24 f8 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1908], eax
  00595	89 84 24 fc 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1912], eax
  0059c	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02PKOHADJL@?1l?$AA@+2
  005a3	89 94 24 b4 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1840], edx
  005aa	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02LFKGJFFM@?1k?$AA@
  005b1	88 84 24 02 02
	00 00		 mov	 BYTE PTR _args$139148[esp+1918], al
  005b8	33 c0		 xor	 eax, eax
  005ba	66 89 94 24 d0
	01 00 00	 mov	 WORD PTR _args$139148[esp+1868], dx
  005c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_07BFLOILGP@?1letter?$AA@
  005c8	89 84 24 03 02
	00 00		 mov	 DWORD PTR _args$139148[esp+1919], eax
  005cf	88 84 24 07 02
	00 00		 mov	 BYTE PTR _args$139148[esp+1923], al

; 6643 : 				{ OptionMountOption,			"/mountoption",		"/m", FALSE },

  005d6	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@DJNKKGFK@?1mountoption?$AA@+4
  005db	89 94 24 e0 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1884], edx
  005e2	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02PKOHADJL@?1l?$AA@
  005e9	89 84 24 14 02
	00 00		 mov	 DWORD PTR _args$139148[esp+1936], eax
  005f0	0f b6 05 0c 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_0N@DJNKKGFK@?1mountoption?$AA@+12
  005f7	66 89 94 24 00
	02 00 00	 mov	 WORD PTR _args$139148[esp+1916], dx
  005ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0N@DJNKKGFK@?1mountoption?$AA@
  00605	88 84 24 1c 02
	00 00		 mov	 BYTE PTR _args$139148[esp+1944], al
  0060c	33 c0		 xor	 eax, eax
  0060e	89 94 24 10 02
	00 00		 mov	 DWORD PTR _args$139148[esp+1932], edx
  00615	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0N@DJNKKGFK@?1mountoption?$AA@+8
  0061b	89 84 24 1d 02
	00 00		 mov	 DWORD PTR _args$139148[esp+1945], eax
  00622	89 84 24 21 02
	00 00		 mov	 DWORD PTR _args$139148[esp+1949], eax
  00629	89 84 24 25 02
	00 00		 mov	 DWORD PTR _args$139148[esp+1953], eax
  00630	89 84 24 29 02
	00 00		 mov	 DWORD PTR _args$139148[esp+1957], eax
  00637	66 89 84 24 2d
	02 00 00	 mov	 WORD PTR _args$139148[esp+1961], ax
  0063f	88 84 24 2f 02
	00 00		 mov	 BYTE PTR _args$139148[esp+1963], al
  00646	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02ODPMDCNK@?1m?$AA@+2
  0064d	89 94 24 18 02
	00 00		 mov	 DWORD PTR _args$139148[esp+1940], edx
  00654	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02ODPMDCNK@?1m?$AA@
  0065b	88 84 24 32 02
	00 00		 mov	 BYTE PTR _args$139148[esp+1966], al
  00662	33 c0		 xor	 eax, eax
  00664	89 9c 24 a8 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1828], ebx
  0066b	c7 84 24 ac 01
	00 00 08 00 00
	00		 mov	 DWORD PTR _args$139148[esp+1832], 8
  00676	89 9c 24 d8 01
	00 00		 mov	 DWORD PTR _args$139148[esp+1876], ebx
  0067d	c7 84 24 dc 01
	00 00 09 00 00
	00		 mov	 DWORD PTR _args$139148[esp+1880], 9
  00688	89 9c 24 08 02
	00 00		 mov	 DWORD PTR _args$139148[esp+1924], ebx
  0068f	c7 84 24 0c 02
	00 00 0a 00 00
	00		 mov	 DWORD PTR _args$139148[esp+1928], 10 ; 0000000aH
  0069a	66 89 94 24 30
	02 00 00	 mov	 WORD PTR _args$139148[esp+1964], dx
  006a2	89 84 24 33 02
	00 00		 mov	 DWORD PTR _args$139148[esp+1967], eax
  006a9	88 84 24 37 02
	00 00		 mov	 BYTE PTR _args$139148[esp+1971], al

; 6644 : 				{ OptionPassword,				"/password",		"/p", FALSE },

  006b0	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_09GAKENAOK@?1password?$AA@+4
  006b5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_09GAKENAOK@?1password?$AA@
  006bb	89 84 24 44 02
	00 00		 mov	 DWORD PTR _args$139148[esp+1984], eax
  006c2	33 c0		 xor	 eax, eax
  006c4	89 84 24 4a 02
	00 00		 mov	 DWORD PTR _args$139148[esp+1990], eax
  006cb	89 84 24 4e 02
	00 00		 mov	 DWORD PTR _args$139148[esp+1994], eax
  006d2	89 84 24 52 02
	00 00		 mov	 DWORD PTR _args$139148[esp+1998], eax
  006d9	89 84 24 56 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2002], eax
  006e0	89 84 24 5a 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2006], eax
  006e7	66 89 84 24 5e
	02 00 00	 mov	 WORD PTR _args$139148[esp+2010], ax
  006ef	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02BMJAFOMG@?1p?$AA@
  006f6	66 89 84 24 60
	02 00 00	 mov	 WORD PTR _args$139148[esp+2012], ax
  006fe	33 c0		 xor	 eax, eax
  00700	89 84 24 63 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2015], eax
  00707	88 84 24 67 02
	00 00		 mov	 BYTE PTR _args$139148[esp+2019], al

; 6645 : 				{ OptionQuit,					"/quit",			"/q", FALSE },

  0070e	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05CMMBDMDD@?1quit?$AA@
  00713	89 84 24 70 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2028], eax
  0071a	33 c0		 xor	 eax, eax
  0071c	89 84 24 76 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2034], eax
  00723	89 84 24 7a 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2038], eax
  0072a	89 84 24 7e 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2042], eax
  00731	89 84 24 82 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2046], eax
  00738	89 84 24 86 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2050], eax
  0073f	89 84 24 8a 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2054], eax
  00746	66 89 84 24 8e
	02 00 00	 mov	 WORD PTR _args$139148[esp+2058], ax
  0074e	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02FILGPIH@?1q?$AA@
  00755	89 94 24 40 02
	00 00		 mov	 DWORD PTR _args$139148[esp+1980], edx
  0075c	0f b7 15 08 00
	00 00		 movzx	 edx, WORD PTR ??_C@_09GAKENAOK@?1password?$AA@+8
  00763	66 89 84 24 90
	02 00 00	 mov	 WORD PTR _args$139148[esp+2060], ax
  0076b	33 c0		 xor	 eax, eax
  0076d	66 89 94 24 48
	02 00 00	 mov	 WORD PTR _args$139148[esp+1988], dx
  00775	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_02BMJAFOMG@?1p?$AA@+2
  0077c	89 84 24 93 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2063], eax
  00783	88 84 24 97 02
	00 00		 mov	 BYTE PTR _args$139148[esp+2067], al

; 6646 : 				{ OptionSilent,					"/silent",			"/s", FALSE },

  0078a	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_07BBNAADON@?1silent?$AA@
  0078f	89 84 24 a0 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2076], eax
  00796	33 c0		 xor	 eax, eax
  00798	88 94 24 62 02
	00 00		 mov	 BYTE PTR _args$139148[esp+2014], dl
  0079f	0f b7 15 04 00
	00 00		 movzx	 edx, WORD PTR ??_C@_05CMMBDMDD@?1quit?$AA@+4
  007a6	89 84 24 a8 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2084], eax
  007ad	89 84 24 ac 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2088], eax
  007b4	89 84 24 b0 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2092], eax
  007bb	89 84 24 b4 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2096], eax
  007c2	89 84 24 b8 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2100], eax
  007c9	89 84 24 bc 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2104], eax
  007d0	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02DHLNANAF@?1s?$AA@
  007d7	66 89 94 24 74
	02 00 00	 mov	 WORD PTR _args$139148[esp+2032], dx
  007df	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_02FILGPIH@?1q?$AA@+2
  007e6	66 89 84 24 c0
	02 00 00	 mov	 WORD PTR _args$139148[esp+2108], ax
  007ee	33 c0		 xor	 eax, eax
  007f0	88 94 24 92 02
	00 00		 mov	 BYTE PTR _args$139148[esp+2062], dl
  007f7	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_07BBNAADON@?1silent?$AA@+4
  007fd	89 84 24 c3 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2111], eax
  00804	88 84 24 c7 02
	00 00		 mov	 BYTE PTR _args$139148[esp+2115], al

; 6647 : 				{ OptionTokenLib,				"/tokenlib",		NULL, FALSE },

  0080b	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09JABABBPB@?1tokenlib?$AA@
  00810	89 94 24 a4 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2080], edx
  00817	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_02DHLNANAF@?1s?$AA@+2
  0081e	89 84 24 d0 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2124], eax
  00825	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ??_C@_09JABABBPB@?1tokenlib?$AA@+8
  0082c	88 94 24 c2 02
	00 00		 mov	 BYTE PTR _args$139148[esp+2110], dl
  00833	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_09JABABBPB@?1tokenlib?$AA@+4
  00839	66 89 84 24 d8
	02 00 00	 mov	 WORD PTR _args$139148[esp+2132], ax
  00841	33 c0		 xor	 eax, eax
  00843	89 9c 24 38 02
	00 00		 mov	 DWORD PTR _args$139148[esp+1972], ebx
  0084a	c7 84 24 3c 02
	00 00 0b 00 00
	00		 mov	 DWORD PTR _args$139148[esp+1976], 11 ; 0000000bH
  00855	89 9c 24 68 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2020], ebx
  0085c	c7 84 24 6c 02
	00 00 0c 00 00
	00		 mov	 DWORD PTR _args$139148[esp+2024], 12 ; 0000000cH
  00867	89 9c 24 98 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2068], ebx
  0086e	c7 84 24 9c 02
	00 00 0d 00 00
	00		 mov	 DWORD PTR _args$139148[esp+2072], 13 ; 0000000dH
  00879	89 9c 24 c8 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2116], ebx
  00880	c7 84 24 cc 02
	00 00 0e 00 00
	00		 mov	 DWORD PTR _args$139148[esp+2120], 14 ; 0000000eH
  0088b	89 94 24 d4 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2128], edx
  00892	89 84 24 da 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2134], eax
  00899	89 84 24 de 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2138], eax
  008a0	89 84 24 e2 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2142], eax
  008a7	89 84 24 e6 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2146], eax
  008ae	89 84 24 ea 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2150], eax
  008b5	66 89 84 24 ee
	02 00 00	 mov	 WORD PTR _args$139148[esp+2154], ax
  008bd	88 9c 24 f0 02
	00 00		 mov	 BYTE PTR _args$139148[esp+2156], bl
  008c4	88 9c 24 f1 02
	00 00		 mov	 BYTE PTR _args$139148[esp+2157], bl
  008cb	89 84 24 f2 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2158], eax

; 6648 : 				{ OptionVolume,					"/volume",			"/v", FALSE },

  008d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_07JEDHAFIB@?1volume?$AA@
  008d8	66 89 84 24 f6
	02 00 00	 mov	 WORD PTR _args$139148[esp+2162], ax
  008e0	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_07JEDHAFIB@?1volume?$AA@+4
  008e5	89 84 24 04 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2176], eax
  008ec	33 c0		 xor	 eax, eax
  008ee	89 84 24 08 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2180], eax
  008f5	89 84 24 0c 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2184], eax
  008fc	89 84 24 10 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2188], eax
  00903	89 84 24 14 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2192], eax
  0090a	89 84 24 18 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2196], eax
  00911	89 84 24 1c 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2200], eax
  00918	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02EKMKPJEA@?1v?$AA@+2
  0091f	88 84 24 22 03
	00 00		 mov	 BYTE PTR _args$139148[esp+2206], al
  00926	33 c0		 xor	 eax, eax
  00928	89 94 24 00 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2172], edx
  0092f	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02EKMKPJEA@?1v?$AA@
  00936	89 84 24 23 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2207], eax
  0093d	88 84 24 27 03
	00 00		 mov	 BYTE PTR _args$139148[esp+2211], al

; 6649 : 				{ CommandWipeCache,				"/wipecache",		"/w", FALSE }

  00944	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_0L@ENHIBAFA@?1wipecache?$AA@+4
  00949	89 84 24 34 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2224], eax
  00950	0f b6 05 0a 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_0L@ENHIBAFA@?1wipecache?$AA@+10
  00957	66 89 94 24 20
	03 00 00	 mov	 WORD PTR _args$139148[esp+2204], dx
  0095f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0L@ENHIBAFA@?1wipecache?$AA@
  00965	89 94 24 30 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2220], edx
  0096c	0f b7 15 08 00
	00 00		 movzx	 edx, WORD PTR ??_C@_0L@ENHIBAFA@?1wipecache?$AA@+8
  00973	88 84 24 3a 03
	00 00		 mov	 BYTE PTR _args$139148[esp+2230], al
  0097a	33 c0		 xor	 eax, eax
  0097c	89 84 24 3b 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2231], eax
  00983	89 84 24 3f 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2235], eax
  0098a	89 84 24 43 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2239], eax
  00991	89 84 24 47 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2243], eax
  00998	89 84 24 4b 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2247], eax
  0099f	88 84 24 4f 03
	00 00		 mov	 BYTE PTR _args$139148[esp+2251], al
  009a6	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02FDNBMIAB@?1w?$AA@+2
  009ad	66 89 94 24 38
	03 00 00	 mov	 WORD PTR _args$139148[esp+2228], dx
  009b5	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02FDNBMIAB@?1w?$AA@
  009bc	88 84 24 52 03
	00 00		 mov	 BYTE PTR _args$139148[esp+2254], al
  009c3	33 c0		 xor	 eax, eax
  009c5	66 89 94 24 50
	03 00 00	 mov	 WORD PTR _args$139148[esp+2252], dx
  009cd	89 84 24 53 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2255], eax
  009d4	88 84 24 57 03
	00 00		 mov	 BYTE PTR _args$139148[esp+2259], al

; 6650 : 			};
; 6651 : 
; 6652 : 			argumentspec as;
; 6653 : 
; 6654 : 			int nArgPos;
; 6655 : 
; 6656 : 			as.args = args;

  009db	8d 54 24 2c	 lea	 edx, DWORD PTR _args$139148[esp+1448]
  009df	89 54 24 20	 mov	 DWORD PTR _as$139182[esp+1448], edx

; 6657 : 			as.arg_cnt = sizeof(args)/ sizeof(args[0]);
; 6658 : 			
; 6659 : 			switch (GetArgumentID (&as, lpszCommandLineArgs[i], &nArgPos))

  009e3	8b 54 24 10	 mov	 edx, DWORD PTR _lpszCommandLineArgs$[esp+1448]
  009e7	8d 44 24 18	 lea	 eax, DWORD PTR _nArgPos$139183[esp+1448]
  009eb	50		 push	 eax
  009ec	89 9c 24 fc 02
	00 00		 mov	 DWORD PTR _args$139148[esp+2168], ebx
  009f3	c7 84 24 00 03
	00 00 0f 00 00
	00		 mov	 DWORD PTR _args$139148[esp+2172], 15 ; 0000000fH
  009fe	89 9c 24 2c 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2216], ebx
  00a05	c7 84 24 30 03
	00 00 10 00 00
	00		 mov	 DWORD PTR _args$139148[esp+2220], 16 ; 00000010H
  00a10	89 9c 24 5c 03
	00 00		 mov	 DWORD PTR _args$139148[esp+2264], ebx
  00a17	c7 44 24 28 11
	00 00 00	 mov	 DWORD PTR _as$139182[esp+1456], 17 ; 00000011H
  00a1f	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00a22	50		 push	 eax
  00a23	8d 4c 24 28	 lea	 ecx, DWORD PTR _as$139182[esp+1456]
  00a27	51		 push	 ecx
  00a28	e8 00 00 00 00	 call	 _GetArgumentID
  00a2d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a30	83 f8 10	 cmp	 eax, 16			; 00000010H
  00a33	0f 87 d0 05 00
	00		 ja	 $LN4@ExtractCom
  00a39	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN73@ExtractCom[eax*4]
$LN55@ExtractCom:

; 6660 : 			{
; 6661 : 			case OptionAuto:
; 6662 : 				{
; 6663 : 					char szTmp[32];
; 6664 : 					bAuto = TRUE;
; 6665 : 
; 6666 : 					if (HAS_ARGUMENT == GetArgumentValue (lpszCommandLineArgs,
; 6667 : 						nArgPos, &i, nNoCommandLineArgs, szTmp, sizeof (szTmp)))

  00a40	8b 4c 24 18	 mov	 ecx, DWORD PTR _nArgPos$139183[esp+1448]
  00a44	6a 20		 push	 32			; 00000020H
  00a46	8d 94 24 80 03
	00 00		 lea	 edx, DWORD PTR _szTmp$139189[esp+1452]
  00a4d	52		 push	 edx
  00a4e	8b 54 24 18	 mov	 edx, DWORD PTR _lpszCommandLineArgs$[esp+1456]
  00a52	56		 push	 esi
  00a53	8d 44 24 20	 lea	 eax, DWORD PTR _i$139126[esp+1460]
  00a57	50		 push	 eax
  00a58	51		 push	 ecx
  00a59	52		 push	 edx
  00a5a	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bAuto@@3HA, ebp ; bAuto
  00a60	e8 00 00 00 00	 call	 _GetArgumentValue
  00a65	83 c4 18	 add	 esp, 24			; 00000018H
  00a68	3b c5		 cmp	 eax, ebp
  00a6a	0f 85 ec 05 00
	00		 jne	 $LN59@ExtractCom

; 6668 : 					{
; 6669 : 						if (!_stricmp (szTmp, "devices"))

  00a70	8d 84 24 7c 03
	00 00		 lea	 eax, DWORD PTR _szTmp$139189[esp+1448]
  00a77	68 00 00 00 00	 push	 OFFSET ??_C@_07DNDGGNGG@devices?$AA@
  00a7c	50		 push	 eax
  00a7d	e8 00 00 00 00	 call	 __stricmp
  00a82	83 c4 08	 add	 esp, 8
  00a85	85 c0		 test	 eax, eax
  00a87	75 0b		 jne	 SHORT $LN53@ExtractCom

; 6670 : 							bAutoMountDevices = TRUE;

  00a89	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bAutoMountDevices@@3HA, ebp ; bAutoMountDevices
  00a8f	e9 c8 05 00 00	 jmp	 $LN59@ExtractCom
$LN53@ExtractCom:

; 6671 : 						else if (!_stricmp (szTmp, "favorites"))

  00a94	8d 8c 24 7c 03
	00 00		 lea	 ecx, DWORD PTR _szTmp$139189[esp+1448]
  00a9b	68 00 00 00 00	 push	 OFFSET ??_C@_09OAMOHPIB@favorites?$AA@
  00aa0	51		 push	 ecx
  00aa1	e8 00 00 00 00	 call	 __stricmp
  00aa6	83 c4 08	 add	 esp, 8
  00aa9	85 c0		 test	 eax, eax
  00aab	75 0b		 jne	 SHORT $LN51@ExtractCom

; 6672 : 							bAutoMountFavorites = TRUE;

  00aad	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bAutoMountFavorites@@3HA, ebp ; bAutoMountFavorites
  00ab3	e9 a4 05 00 00	 jmp	 $LN59@ExtractCom
$LN51@ExtractCom:

; 6673 : 						else if (!_stricmp (szTmp, "logon"))

  00ab8	8d 94 24 7c 03
	00 00		 lea	 edx, DWORD PTR _szTmp$139189[esp+1448]
  00abf	68 00 00 00 00	 push	 OFFSET ??_C@_05DEGNHEGP@logon?$AA@
  00ac4	52		 push	 edx
  00ac5	e8 00 00 00 00	 call	 __stricmp
  00aca	83 c4 08	 add	 esp, 8
  00acd	85 c0		 test	 eax, eax
  00acf	0f 85 87 05 00
	00		 jne	 $LN59@ExtractCom

; 6674 : 							LogOn = TRUE;

  00ad5	89 2d 00 00 00
	00		 mov	 DWORD PTR ?LogOn@@3HA, ebp ; LogOn

; 6675 : 					}
; 6676 : 				}
; 6677 : 				break;

  00adb	e9 7c 05 00 00	 jmp	 $LN59@ExtractCom
$LN48@ExtractCom:

; 6678 : 
; 6679 : 			case OptionBeep:
; 6680 : 				bBeep = TRUE;

  00ae0	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bBeep@@3HA, ebp ; bBeep

; 6681 : 				break;

  00ae6	e9 71 05 00 00	 jmp	 $LN59@ExtractCom
$LN47@ExtractCom:

; 6682 : 
; 6683 : 			case OptionCache:
; 6684 : 				{
; 6685 : 					char szTmp[8];
; 6686 : 					bCacheInDriver = TRUE;
; 6687 : 
; 6688 : 					GetArgumentValue (lpszCommandLineArgs, nArgPos, &i, nNoCommandLineArgs,
; 6689 : 						     szTmp, sizeof (szTmp));

  00aeb	8b 54 24 18	 mov	 edx, DWORD PTR _nArgPos$139183[esp+1448]
  00aef	6a 08		 push	 8
  00af1	8d 84 24 78 03
	00 00		 lea	 eax, DWORD PTR _szTmp$139201[esp+1452]
  00af8	50		 push	 eax
  00af9	8b 44 24 18	 mov	 eax, DWORD PTR _lpszCommandLineArgs$[esp+1456]
  00afd	56		 push	 esi
  00afe	8d 4c 24 20	 lea	 ecx, DWORD PTR _i$139126[esp+1460]
  00b02	51		 push	 ecx
  00b03	52		 push	 edx
  00b04	50		 push	 eax
  00b05	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bCacheInDriver@@3HA, ebp ; bCacheInDriver
  00b0b	e8 00 00 00 00	 call	 _GetArgumentValue

; 6690 : 
; 6691 : 					if (!_stricmp(szTmp,"n") || !_stricmp(szTmp,"no"))

  00b10	8d 8c 24 8c 03
	00 00		 lea	 ecx, DWORD PTR _szTmp$139201[esp+1472]
  00b17	68 00 00 00 00	 push	 OFFSET ??_C@_01EFFIKLCJ@n?$AA@
  00b1c	51		 push	 ecx
  00b1d	e8 00 00 00 00	 call	 __stricmp
  00b22	83 c4 20	 add	 esp, 32			; 00000020H
  00b25	85 c0		 test	 eax, eax
  00b27	74 1d		 je	 SHORT $LN45@ExtractCom
  00b29	8d 94 24 74 03
	00 00		 lea	 edx, DWORD PTR _szTmp$139201[esp+1448]
  00b30	68 00 00 00 00	 push	 OFFSET ??_C@_02KAJCLHKP@no?$AA@
  00b35	52		 push	 edx
  00b36	e8 00 00 00 00	 call	 __stricmp
  00b3b	83 c4 08	 add	 esp, 8
  00b3e	85 c0		 test	 eax, eax
  00b40	0f 85 16 05 00
	00		 jne	 $LN59@ExtractCom
$LN45@ExtractCom:

; 6692 : 						bCacheInDriver = FALSE;

  00b46	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bCacheInDriver@@3HA, ebx ; bCacheInDriver

; 6693 : 				}
; 6694 : 				break;

  00b4c	e9 0b 05 00 00	 jmp	 $LN59@ExtractCom
$LN44@ExtractCom:

; 6695 : 
; 6696 : 			case CommandDismount:
; 6697 : 
; 6698 : 				if (HAS_ARGUMENT == GetArgumentValue (lpszCommandLineArgs, nArgPos, &i, nNoCommandLineArgs,
; 6699 : 				     szDriveLetter, sizeof (szDriveLetter)))

  00b51	8b 4c 24 18	 mov	 ecx, DWORD PTR _nArgPos$139183[esp+1448]
  00b55	8b 54 24 10	 mov	 edx, DWORD PTR _lpszCommandLineArgs$[esp+1448]
  00b59	6a 03		 push	 3
  00b5b	68 00 00 00 00	 push	 OFFSET ?szDriveLetter@@3PADA ; szDriveLetter
  00b60	56		 push	 esi
  00b61	8d 44 24 20	 lea	 eax, DWORD PTR _i$139126[esp+1460]
  00b65	50		 push	 eax
  00b66	51		 push	 ecx
  00b67	52		 push	 edx
  00b68	e8 00 00 00 00	 call	 _GetArgumentValue
  00b6d	83 c4 18	 add	 esp, 24			; 00000018H
  00b70	3b c5		 cmp	 eax, ebp
  00b72	75 1d		 jne	 SHORT $LN43@ExtractCom

; 6700 : 					cmdUnmountDrive = toupper(szDriveLetter[0]) - 'A';

  00b74	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR ?szDriveLetter@@3PADA
  00b7b	50		 push	 eax
  00b7c	e8 00 00 00 00	 call	 _toupper
  00b81	83 c4 04	 add	 esp, 4
  00b84	83 e8 41	 sub	 eax, 65			; 00000041H
  00b87	a3 00 00 00 00	 mov	 DWORD PTR ?cmdUnmountDrive@@3HA, eax ; cmdUnmountDrive

; 6701 : 				else 

  00b8c	e9 cb 04 00 00	 jmp	 $LN59@ExtractCom
$LN43@ExtractCom:

; 6702 : 					cmdUnmountDrive = -1;

  00b91	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?cmdUnmountDrive@@3HA, -1 ; cmdUnmountDrive

; 6703 : 
; 6704 : 				break;

  00b9b	e9 bc 04 00 00	 jmp	 $LN59@ExtractCom
$LN41@ExtractCom:

; 6705 : 
; 6706 : 			case OptionExplore:
; 6707 : 				bExplore = TRUE;

  00ba0	89 2d 00 00 00
	00		 mov	 DWORD PTR _bExplore, ebp

; 6708 : 				break;

  00ba6	e9 b1 04 00 00	 jmp	 $LN59@ExtractCom
$LN40@ExtractCom:

; 6709 : 
; 6710 : 			case OptionForce:
; 6711 : 				bForceMount = TRUE;

  00bab	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bForceMount@@3HA, ebp ; bForceMount

; 6712 : 				bForceUnmount = TRUE;

  00bb1	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bForceUnmount@@3HA, ebp ; bForceUnmount

; 6713 : 				break;

  00bb7	e9 a0 04 00 00	 jmp	 $LN59@ExtractCom
$LN39@ExtractCom:

; 6714 : 
; 6715 : 			case OptionKeyfile:
; 6716 : 				if (HAS_ARGUMENT == GetArgumentValue (lpszCommandLineArgs, nArgPos, &i,
; 6717 : 					nNoCommandLineArgs, tmpPath, sizeof (tmpPath)))

  00bbc	8b 44 24 18	 mov	 eax, DWORD PTR _nArgPos$139183[esp+1448]
  00bc0	68 08 02 00 00	 push	 520			; 00000208H
  00bc5	8d 8c 24 a0 03
	00 00		 lea	 ecx, DWORD PTR _tmpPath$[esp+1452]
  00bcc	51		 push	 ecx
  00bcd	8b 4c 24 18	 mov	 ecx, DWORD PTR _lpszCommandLineArgs$[esp+1456]
  00bd1	56		 push	 esi
  00bd2	8d 54 24 20	 lea	 edx, DWORD PTR _i$139126[esp+1460]
  00bd6	52		 push	 edx
  00bd7	50		 push	 eax
  00bd8	51		 push	 ecx
  00bd9	e8 00 00 00 00	 call	 _GetArgumentValue
  00bde	83 c4 18	 add	 esp, 24			; 00000018H
  00be1	3b c5		 cmp	 eax, ebp
  00be3	0f 85 73 04 00
	00		 jne	 $LN59@ExtractCom

; 6718 : 				{
; 6719 : 					KeyFile *kf;
; 6720 : 					RelativePath2Absolute (tmpPath);

  00be9	8d 94 24 9c 03
	00 00		 lea	 edx, DWORD PTR _tmpPath$[esp+1448]
  00bf0	52		 push	 edx
  00bf1	e8 00 00 00 00	 call	 _RelativePath2Absolute

; 6721 : 					kf = (KeyFile *) malloc (sizeof (KeyFile));

  00bf6	68 08 01 00 00	 push	 264			; 00000108H
  00bfb	e8 00 00 00 00	 call	 _malloc
  00c00	8b f8		 mov	 edi, eax

; 6722 : 					strncpy (kf->FileName, tmpPath, sizeof (kf->FileName));

  00c02	68 04 01 00 00	 push	 260			; 00000104H
  00c07	8d 84 24 a8 03
	00 00		 lea	 eax, DWORD PTR _tmpPath$[esp+1460]
  00c0e	50		 push	 eax
  00c0f	57		 push	 edi
  00c10	e8 00 00 00 00	 call	 _strncpy

; 6723 : 					FirstCmdKeyFile = KeyFileAdd (FirstCmdKeyFile, kf);

  00c15	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?FirstCmdKeyFile@@3PAUKeyFileStruct@@A ; FirstCmdKeyFile
  00c1b	57		 push	 edi
  00c1c	51		 push	 ecx
  00c1d	e8 00 00 00 00	 call	 _KeyFileAdd

; 6724 : 				}
; 6725 : 				break;

  00c22	8b 7c 24 38	 mov	 edi, DWORD PTR _hwndDlg$GSCopy$[esp+1476]
  00c26	83 c4 1c	 add	 esp, 28			; 0000001cH
  00c29	a3 00 00 00 00	 mov	 DWORD PTR ?FirstCmdKeyFile@@3PAUKeyFileStruct@@A, eax ; FirstCmdKeyFile
  00c2e	e9 29 04 00 00	 jmp	 $LN59@ExtractCom
$LN37@ExtractCom:

; 6726 : 
; 6727 : 			case OptionLetter:
; 6728 : 				GetArgumentValue (lpszCommandLineArgs, nArgPos, &i, nNoCommandLineArgs,
; 6729 : 					szDriveLetter, sizeof (szDriveLetter));

  00c33	8b 44 24 18	 mov	 eax, DWORD PTR _nArgPos$139183[esp+1448]
  00c37	8b 4c 24 10	 mov	 ecx, DWORD PTR _lpszCommandLineArgs$[esp+1448]
  00c3b	6a 03		 push	 3
  00c3d	68 00 00 00 00	 push	 OFFSET ?szDriveLetter@@3PADA ; szDriveLetter
  00c42	56		 push	 esi
  00c43	8d 54 24 20	 lea	 edx, DWORD PTR _i$139126[esp+1460]
  00c47	52		 push	 edx
  00c48	50		 push	 eax
  00c49	51		 push	 ecx
  00c4a	e8 00 00 00 00	 call	 _GetArgumentValue

; 6730 : 				commandLineDrive = *szDriveLetter = (char) toupper (*szDriveLetter);

  00c4f	0f be 15 00 00
	00 00		 movsx	 edx, BYTE PTR ?szDriveLetter@@3PADA
  00c56	52		 push	 edx
  00c57	e8 00 00 00 00	 call	 _toupper
  00c5c	83 c4 1c	 add	 esp, 28			; 0000001cH

; 6731 : 
; 6732 : 				if (commandLineDrive < 'C' || commandLineDrive > 'Z')

  00c5f	3c 43		 cmp	 al, 67			; 00000043H
  00c61	a2 00 00 00 00	 mov	 BYTE PTR ?szDriveLetter@@3PADA, al
  00c66	a2 00 00 00 00	 mov	 BYTE PTR ?commandLineDrive@@3DA, al ; commandLineDrive
  00c6b	7c 08		 jl	 SHORT $LN35@ExtractCom
  00c6d	3c 5a		 cmp	 al, 90			; 0000005aH
  00c6f	0f 8e e7 03 00
	00		 jle	 $LN59@ExtractCom
$LN35@ExtractCom:

; 6733 : 					AbortProcess ("BAD_DRIVE_LETTER");

  00c75	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JACLBFH@BAD_DRIVE_LETTER?$AA@
  00c7a	e8 00 00 00 00	 call	 _AbortProcess
  00c7f	83 c4 04	 add	 esp, 4

; 6734 : 
; 6735 : 				break;

  00c82	e9 d5 03 00 00	 jmp	 $LN59@ExtractCom
$LN34@ExtractCom:

; 6736 : 
; 6737 : 			case OptionHistory:
; 6738 : 				{
; 6739 : 					char szTmp[8];
; 6740 : 					bHistory = bHistoryCmdLine = TRUE;
; 6741 : 
; 6742 : 					GetArgumentValue (lpszCommandLineArgs, nArgPos, &i, nNoCommandLineArgs,
; 6743 : 						     szTmp, sizeof (szTmp));

  00c87	8b 54 24 18	 mov	 edx, DWORD PTR _nArgPos$139183[esp+1448]
  00c8b	6a 08		 push	 8
  00c8d	8d 84 24 70 03
	00 00		 lea	 eax, DWORD PTR _szTmp$139222[esp+1452]
  00c94	50		 push	 eax
  00c95	8b 44 24 18	 mov	 eax, DWORD PTR _lpszCommandLineArgs$[esp+1456]
  00c99	56		 push	 esi
  00c9a	8d 4c 24 20	 lea	 ecx, DWORD PTR _i$139126[esp+1460]
  00c9e	51		 push	 ecx
  00c9f	52		 push	 edx
  00ca0	50		 push	 eax
  00ca1	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bHistoryCmdLine@@3HA, ebp ; bHistoryCmdLine
  00ca7	89 2d 00 00 00
	00		 mov	 DWORD PTR _bHistory, ebp
  00cad	e8 00 00 00 00	 call	 _GetArgumentValue

; 6744 : 
; 6745 : 					if (!_stricmp(szTmp,"n") || !_stricmp(szTmp,"no"))

  00cb2	8d 8c 24 84 03
	00 00		 lea	 ecx, DWORD PTR _szTmp$139222[esp+1472]
  00cb9	68 00 00 00 00	 push	 OFFSET ??_C@_01EFFIKLCJ@n?$AA@
  00cbe	51		 push	 ecx
  00cbf	e8 00 00 00 00	 call	 __stricmp
  00cc4	83 c4 20	 add	 esp, 32			; 00000020H
  00cc7	85 c0		 test	 eax, eax
  00cc9	74 1d		 je	 SHORT $LN32@ExtractCom
  00ccb	8d 94 24 6c 03
	00 00		 lea	 edx, DWORD PTR _szTmp$139222[esp+1448]
  00cd2	68 00 00 00 00	 push	 OFFSET ??_C@_02KAJCLHKP@no?$AA@
  00cd7	52		 push	 edx
  00cd8	e8 00 00 00 00	 call	 __stricmp
  00cdd	83 c4 08	 add	 esp, 8
  00ce0	85 c0		 test	 eax, eax
  00ce2	0f 85 74 03 00
	00		 jne	 $LN59@ExtractCom
$LN32@ExtractCom:

; 6746 : 						bHistory = FALSE;

  00ce8	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHistory, ebx

; 6747 : 				}
; 6748 : 				break;

  00cee	e9 69 03 00 00	 jmp	 $LN59@ExtractCom
$LN31@ExtractCom:

; 6749 : 
; 6750 : 			case OptionMountOption:
; 6751 : 				{
; 6752 : 					char szTmp[16];
; 6753 : 					if (HAS_ARGUMENT == GetArgumentValue (lpszCommandLineArgs,
; 6754 : 						nArgPos, &i, nNoCommandLineArgs, szTmp, sizeof (szTmp)))

  00cf3	8b 54 24 18	 mov	 edx, DWORD PTR _nArgPos$139183[esp+1448]
  00cf7	6a 10		 push	 16			; 00000010H
  00cf9	8d 84 24 60 03
	00 00		 lea	 eax, DWORD PTR _szTmp$139226[esp+1452]
  00d00	50		 push	 eax
  00d01	8b 44 24 18	 mov	 eax, DWORD PTR _lpszCommandLineArgs$[esp+1456]
  00d05	56		 push	 esi
  00d06	8d 4c 24 20	 lea	 ecx, DWORD PTR _i$139126[esp+1460]
  00d0a	51		 push	 ecx
  00d0b	52		 push	 edx
  00d0c	50		 push	 eax
  00d0d	e8 00 00 00 00	 call	 _GetArgumentValue
  00d12	83 c4 18	 add	 esp, 24			; 00000018H
  00d15	3b c5		 cmp	 eax, ebp
  00d17	0f 85 3f 03 00
	00		 jne	 $LN59@ExtractCom

; 6755 : 					{
; 6756 : 						if (!_stricmp (szTmp, "ro") || !_stricmp (szTmp, "readonly"))

  00d1d	8d 8c 24 5c 03
	00 00		 lea	 ecx, DWORD PTR _szTmp$139226[esp+1448]
  00d24	68 00 00 00 00	 push	 OFFSET ??_C@_02LFKOONLL@ro?$AA@
  00d29	51		 push	 ecx
  00d2a	e8 00 00 00 00	 call	 __stricmp
  00d2f	83 c4 08	 add	 esp, 8
  00d32	85 c0		 test	 eax, eax
  00d34	74 19		 je	 SHORT $LN28@ExtractCom
  00d36	8d 94 24 5c 03
	00 00		 lea	 edx, DWORD PTR _szTmp$139226[esp+1448]
  00d3d	68 00 00 00 00	 push	 OFFSET ??_C@_08JOKHDEJH@readonly?$AA@
  00d42	52		 push	 edx
  00d43	e8 00 00 00 00	 call	 __stricmp
  00d48	83 c4 08	 add	 esp, 8
  00d4b	85 c0		 test	 eax, eax
  00d4d	75 06		 jne	 SHORT $LN29@ExtractCom
$LN28@ExtractCom:

; 6757 : 							mountOptions.ReadOnly = TRUE;

  00d4f	89 2d 00 00 00
	00		 mov	 DWORD PTR ?mountOptions@@3UMountOptions@@A, ebp
$LN29@ExtractCom:

; 6758 : 
; 6759 : 						if (!_stricmp (szTmp, "rm") || !_stricmp (szTmp, "removable"))

  00d55	8d 84 24 5c 03
	00 00		 lea	 eax, DWORD PTR _szTmp$139226[esp+1448]
  00d5c	68 00 00 00 00	 push	 OFFSET ??_C@_02IHJIIPDJ@rm?$AA@
  00d61	50		 push	 eax
  00d62	e8 00 00 00 00	 call	 __stricmp
  00d67	83 c4 08	 add	 esp, 8
  00d6a	85 c0		 test	 eax, eax
  00d6c	74 19		 je	 SHORT $LN26@ExtractCom
  00d6e	8d 8c 24 5c 03
	00 00		 lea	 ecx, DWORD PTR _szTmp$139226[esp+1448]
  00d75	68 00 00 00 00	 push	 OFFSET ??_C@_09HPGMKNKO@removable?$AA@
  00d7a	51		 push	 ecx
  00d7b	e8 00 00 00 00	 call	 __stricmp
  00d80	83 c4 08	 add	 esp, 8
  00d83	85 c0		 test	 eax, eax
  00d85	75 06		 jne	 SHORT $LN27@ExtractCom
$LN26@ExtractCom:

; 6760 : 							mountOptions.Removable = TRUE;

  00d87	89 2d 04 00 00
	00		 mov	 DWORD PTR ?mountOptions@@3UMountOptions@@A+4, ebp
$LN27@ExtractCom:

; 6761 : 
; 6762 : 						if (!_stricmp (szTmp, "ts") || !_stricmp (szTmp, "timestamp"))

  00d8d	8d 94 24 5c 03
	00 00		 lea	 edx, DWORD PTR _szTmp$139226[esp+1448]
  00d94	68 00 00 00 00	 push	 OFFSET ??_C@_02FHFEMMFE@ts?$AA@
  00d99	52		 push	 edx
  00d9a	e8 00 00 00 00	 call	 __stricmp
  00d9f	83 c4 08	 add	 esp, 8
  00da2	85 c0		 test	 eax, eax
  00da4	74 19		 je	 SHORT $LN24@ExtractCom
  00da6	8d 84 24 5c 03
	00 00		 lea	 eax, DWORD PTR _szTmp$139226[esp+1448]
  00dad	68 00 00 00 00	 push	 OFFSET ??_C@_09OMDJNLDP@timestamp?$AA@
  00db2	50		 push	 eax
  00db3	e8 00 00 00 00	 call	 __stricmp
  00db8	83 c4 08	 add	 esp, 8
  00dbb	85 c0		 test	 eax, eax
  00dbd	75 06		 jne	 SHORT $LN25@ExtractCom
$LN24@ExtractCom:

; 6763 : 							mountOptions.PreserveTimestamp = FALSE;

  00dbf	89 1d 0c 00 00
	00		 mov	 DWORD PTR ?mountOptions@@3UMountOptions@@A+12, ebx
$LN25@ExtractCom:

; 6764 : 
; 6765 : 						if (!_stricmp (szTmp, "sm") || !_stricmp (szTmp, "system"))

  00dc5	8d 8c 24 5c 03
	00 00		 lea	 ecx, DWORD PTR _szTmp$139226[esp+1448]
  00dcc	68 00 00 00 00	 push	 OFFSET ??_C@_02IGFKOFAO@sm?$AA@
  00dd1	51		 push	 ecx
  00dd2	e8 00 00 00 00	 call	 __stricmp
  00dd7	83 c4 08	 add	 esp, 8
  00dda	85 c0		 test	 eax, eax
  00ddc	74 19		 je	 SHORT $LN22@ExtractCom
  00dde	8d 94 24 5c 03
	00 00		 lea	 edx, DWORD PTR _szTmp$139226[esp+1448]
  00de5	68 00 00 00 00	 push	 OFFSET ??_C@_06FHFOAHML@system?$AA@
  00dea	52		 push	 edx
  00deb	e8 00 00 00 00	 call	 __stricmp
  00df0	83 c4 08	 add	 esp, 8
  00df3	85 c0		 test	 eax, eax
  00df5	75 0c		 jne	 SHORT $LN23@ExtractCom
$LN22@ExtractCom:

; 6766 : 							mountOptions.PartitionInInactiveSysEncScope = bPrebootPasswordDlgMode = TRUE;

  00df7	89 2d 00 00 00
	00		 mov	 DWORD PTR _bPrebootPasswordDlgMode, ebp
  00dfd	89 2d 10 00 00
	00		 mov	 DWORD PTR ?mountOptions@@3UMountOptions@@A+16, ebp
$LN23@ExtractCom:

; 6767 : 					
; 6768 : 						if (!_stricmp (szTmp, "bk") || !_stricmp (szTmp, "headerbak"))

  00e03	8d 84 24 5c 03
	00 00		 lea	 eax, DWORD PTR _szTmp$139226[esp+1448]
  00e0a	68 00 00 00 00	 push	 OFFSET ??_C@_02MNOEILMP@bk?$AA@
  00e0f	50		 push	 eax
  00e10	e8 00 00 00 00	 call	 __stricmp
  00e15	83 c4 08	 add	 esp, 8
  00e18	85 c0		 test	 eax, eax
  00e1a	74 19		 je	 SHORT $LN20@ExtractCom
  00e1c	8d 8c 24 5c 03
	00 00		 lea	 ecx, DWORD PTR _szTmp$139226[esp+1448]
  00e23	68 00 00 00 00	 push	 OFFSET ??_C@_09COBBNOIA@headerbak?$AA@
  00e28	51		 push	 ecx
  00e29	e8 00 00 00 00	 call	 __stricmp
  00e2e	83 c4 08	 add	 esp, 8
  00e31	85 c0		 test	 eax, eax
  00e33	75 06		 jne	 SHORT $LN21@ExtractCom
$LN20@ExtractCom:

; 6769 : 							mountOptions.UseBackupHeader = TRUE;

  00e35	89 2d 5c 00 00
	00		 mov	 DWORD PTR ?mountOptions@@3UMountOptions@@A+92, ebp
$LN21@ExtractCom:

; 6770 : 
; 6771 : 						if (!_stricmp (szTmp, "recovery"))

  00e3b	8d 94 24 5c 03
	00 00		 lea	 edx, DWORD PTR _szTmp$139226[esp+1448]
  00e42	68 00 00 00 00	 push	 OFFSET ??_C@_08MPLGCJPF@recovery?$AA@
  00e47	52		 push	 edx
  00e48	e8 00 00 00 00	 call	 __stricmp
  00e4d	83 c4 08	 add	 esp, 8
  00e50	85 c0		 test	 eax, eax
  00e52	75 06		 jne	 SHORT $LN19@ExtractCom

; 6772 : 							mountOptions.RecoveryMode = TRUE;

  00e54	89 2d 60 00 00
	00		 mov	 DWORD PTR ?mountOptions@@3UMountOptions@@A+96, ebp
$LN19@ExtractCom:

; 6773 : 
; 6774 : 						CmdMountOptions = mountOptions;

  00e5a	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00e5f	be 00 00 00 00	 mov	 esi, OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  00e64	bf 00 00 00 00	 mov	 edi, OFFSET ?CmdMountOptions@@3UMountOptions@@A ; CmdMountOptions
  00e69	f3 a5		 rep movsd

; 6775 : 						CmdMountOptionsValid = TRUE;
; 6776 : 					}
; 6777 : 				}
; 6778 : 				break;

  00e6b	8b 74 24 28	 mov	 esi, DWORD PTR _nNoCommandLineArgs$[esp+1448]
  00e6f	8b 7c 24 1c	 mov	 edi, DWORD PTR _hwndDlg$GSCopy$[esp+1448]
  00e73	89 2d 00 00 00
	00		 mov	 DWORD PTR ?CmdMountOptionsValid@@3HA, ebp ; CmdMountOptionsValid
  00e79	e9 de 01 00 00	 jmp	 $LN59@ExtractCom
$LN18@ExtractCom:

; 6779 : 
; 6780 : 			case OptionPassword:
; 6781 : 				GetArgumentValue (lpszCommandLineArgs, nArgPos, &i, nNoCommandLineArgs,
; 6782 : 						     (char *) CmdVolumePassword.Text, sizeof (CmdVolumePassword.Text));

  00e7e	8b 4c 24 18	 mov	 ecx, DWORD PTR _nArgPos$139183[esp+1448]
  00e82	8b 54 24 10	 mov	 edx, DWORD PTR _lpszCommandLineArgs$[esp+1448]
  00e86	6a 41		 push	 65			; 00000041H
  00e88	68 04 00 00 00	 push	 OFFSET ?CmdVolumePassword@@3UPassword@@A+4
  00e8d	56		 push	 esi
  00e8e	8d 44 24 20	 lea	 eax, DWORD PTR _i$139126[esp+1460]
  00e92	50		 push	 eax
  00e93	51		 push	 ecx
  00e94	52		 push	 edx
  00e95	e8 00 00 00 00	 call	 _GetArgumentValue

; 6783 : 				CmdVolumePassword.Length = strlen ((char *) CmdVolumePassword.Text);

  00e9a	b8 04 00 00 00	 mov	 eax, OFFSET ?CmdVolumePassword@@3UPassword@@A+4
  00e9f	83 c4 18	 add	 esp, 24			; 00000018H
  00ea2	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL69@ExtractCom:
  00ea5	8a 08		 mov	 cl, BYTE PTR [eax]
  00ea7	40		 inc	 eax
  00ea8	3a cb		 cmp	 cl, bl
  00eaa	75 f9		 jne	 SHORT $LL69@ExtractCom
  00eac	2b c2		 sub	 eax, edx
  00eae	a3 00 00 00 00	 mov	 DWORD PTR ?CmdVolumePassword@@3UPassword@@A, eax

; 6784 : 				CmdVolumePasswordValid = TRUE;

  00eb3	89 2d 00 00 00
	00		 mov	 DWORD PTR ?CmdVolumePasswordValid@@3HA, ebp ; CmdVolumePasswordValid

; 6785 : 				break;

  00eb9	e9 9e 01 00 00	 jmp	 $LN59@ExtractCom
$LN17@ExtractCom:

; 6786 : 
; 6787 : 			case OptionVolume:
; 6788 : 				if (HAS_ARGUMENT == GetArgumentValue (lpszCommandLineArgs, nArgPos, &i,
; 6789 : 								      nNoCommandLineArgs, szFileName, sizeof (szFileName)))

  00ebe	8b 4c 24 18	 mov	 ecx, DWORD PTR _nArgPos$139183[esp+1448]
  00ec2	8b 54 24 10	 mov	 edx, DWORD PTR _lpszCommandLineArgs$[esp+1448]
  00ec6	68 05 01 00 00	 push	 261			; 00000105H
  00ecb	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00ed0	56		 push	 esi
  00ed1	8d 44 24 20	 lea	 eax, DWORD PTR _i$139126[esp+1460]
  00ed5	50		 push	 eax
  00ed6	51		 push	 ecx
  00ed7	52		 push	 edx
  00ed8	e8 00 00 00 00	 call	 _GetArgumentValue
  00edd	83 c4 18	 add	 esp, 24			; 00000018H
  00ee0	3b c5		 cmp	 eax, ebp
  00ee2	0f 85 74 01 00
	00		 jne	 $LN59@ExtractCom

; 6790 : 				{
; 6791 : 					RelativePath2Absolute (szFileName);

  00ee8	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00eed	e8 00 00 00 00	 call	 _RelativePath2Absolute

; 6792 : 					AddComboItem (GetDlgItem (hwndDlg, IDC_VOLUME), szFileName, bHistory);

  00ef2	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHistory
  00ef7	83 c4 04	 add	 esp, 4
  00efa	50		 push	 eax
  00efb	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00f00	68 0a 04 00 00	 push	 1034			; 0000040aH
  00f05	57		 push	 edi
  00f06	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00f0c	50		 push	 eax
  00f0d	e8 00 00 00 00	 call	 _AddComboItem

; 6793 : 					CmdLineVolumeSpecified = TRUE;

  00f12	89 2d 00 00 00
	00		 mov	 DWORD PTR _CmdLineVolumeSpecified, ebp

; 6794 : 				}
; 6795 : 				break;

  00f18	e9 3c 01 00 00	 jmp	 $LN72@ExtractCom
$LN15@ExtractCom:

; 6796 : 
; 6797 : 			case OptionQuit:
; 6798 : 				{
; 6799 : 					char szTmp[32];
; 6800 : 
; 6801 : 					if (HAS_ARGUMENT == GetArgumentValue (lpszCommandLineArgs,
; 6802 : 						nArgPos, &i, nNoCommandLineArgs, szTmp, sizeof (szTmp)))

  00f1d	8b 44 24 18	 mov	 eax, DWORD PTR _nArgPos$139183[esp+1448]
  00f21	6a 20		 push	 32			; 00000020H
  00f23	8d 8c 24 80 03
	00 00		 lea	 ecx, DWORD PTR _szTmp$139256[esp+1452]
  00f2a	51		 push	 ecx
  00f2b	8b 4c 24 18	 mov	 ecx, DWORD PTR _lpszCommandLineArgs$[esp+1456]
  00f2f	56		 push	 esi
  00f30	8d 54 24 20	 lea	 edx, DWORD PTR _i$139126[esp+1460]
  00f34	52		 push	 edx
  00f35	50		 push	 eax
  00f36	51		 push	 ecx
  00f37	e8 00 00 00 00	 call	 _GetArgumentValue
  00f3c	83 c4 18	 add	 esp, 24			; 00000018H
  00f3f	3b c5		 cmp	 eax, ebp
  00f41	75 66		 jne	 SHORT $LN11@ExtractCom

; 6803 : 					{
; 6804 : 						if (!_stricmp (szTmp, "UAC")) // Used to indicate non-install elevation

  00f43	8d 94 24 7c 03
	00 00		 lea	 edx, DWORD PTR _szTmp$139256[esp+1448]
  00f4a	68 00 00 00 00	 push	 OFFSET ??_C@_03IIGECEEC@UAC?$AA@
  00f4f	52		 push	 edx
  00f50	e8 00 00 00 00	 call	 __stricmp
  00f55	83 c4 08	 add	 esp, 8
  00f58	85 c0		 test	 eax, eax
  00f5a	0f 84 fc 00 00
	00		 je	 $LN59@ExtractCom

; 6805 : 							break;
; 6806 : 
; 6807 : 						if (!_stricmp (szTmp, "preferences"))

  00f60	8d 84 24 7c 03
	00 00		 lea	 eax, DWORD PTR _szTmp$139256[esp+1448]
  00f67	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OAMDCHEH@preferences?$AA@
  00f6c	50		 push	 eax
  00f6d	e8 00 00 00 00	 call	 __stricmp
  00f72	83 c4 08	 add	 esp, 8
  00f75	85 c0		 test	 eax, eax
  00f77	75 11		 jne	 SHORT $LN12@ExtractCom

; 6808 : 						{
; 6809 : 							Quit = TRUE;

  00f79	89 2d 00 00 00
	00		 mov	 DWORD PTR ?Quit@@3HA, ebp ; Quit

; 6810 : 							UsePreferences = TRUE;

  00f7f	89 2d 00 00 00
	00		 mov	 DWORD PTR ?UsePreferences@@3HA, ebp ; UsePreferences

; 6811 : 							break;

  00f85	e9 d2 00 00 00	 jmp	 $LN59@ExtractCom
$LN12@ExtractCom:

; 6812 : 						}
; 6813 : 
; 6814 : 						if (!_stricmp (szTmp, "background"))

  00f8a	8d 8c 24 7c 03
	00 00		 lea	 ecx, DWORD PTR _szTmp$139256[esp+1448]
  00f91	68 00 00 00 00	 push	 OFFSET ??_C@_0L@EGCKCJDC@background?$AA@
  00f96	51		 push	 ecx
  00f97	e8 00 00 00 00	 call	 __stricmp
  00f9c	83 c4 08	 add	 esp, 8
  00f9f	85 c0		 test	 eax, eax
  00fa1	75 06		 jne	 SHORT $LN11@ExtractCom

; 6815 : 							bEnableBkgTask = TRUE;

  00fa3	89 2d 00 00 00
	00		 mov	 DWORD PTR _bEnableBkgTask, ebp
$LN11@ExtractCom:

; 6816 : 					}
; 6817 : 
; 6818 : 					Quit = TRUE;

  00fa9	89 2d 00 00 00
	00		 mov	 DWORD PTR ?Quit@@3HA, ebp ; Quit

; 6819 : 					UsePreferences = FALSE;

  00faf	89 1d 00 00 00
	00		 mov	 DWORD PTR ?UsePreferences@@3HA, ebx ; UsePreferences

; 6820 : 				}
; 6821 : 				break;

  00fb5	e9 a2 00 00 00	 jmp	 $LN59@ExtractCom
$LN10@ExtractCom:

; 6822 : 
; 6823 : 			case OptionSilent:
; 6824 : 				Silent = TRUE;

  00fba	89 2d 00 00 00
	00		 mov	 DWORD PTR _Silent, ebp

; 6825 : 				break;

  00fc0	e9 97 00 00 00	 jmp	 $LN59@ExtractCom
$LN9@ExtractCom:

; 6826 : 
; 6827 : 			case OptionTokenLib:
; 6828 : 				if (GetArgumentValue (lpszCommandLineArgs, nArgPos, &i, nNoCommandLineArgs, SecurityTokenLibraryPath, sizeof (SecurityTokenLibraryPath)) == HAS_ARGUMENT)

  00fc5	8b 44 24 18	 mov	 eax, DWORD PTR _nArgPos$139183[esp+1448]
  00fc9	8b 4c 24 10	 mov	 ecx, DWORD PTR _lpszCommandLineArgs$[esp+1448]
  00fcd	68 04 01 00 00	 push	 260			; 00000104H
  00fd2	68 00 00 00 00	 push	 OFFSET _SecurityTokenLibraryPath
  00fd7	56		 push	 esi
  00fd8	8d 54 24 20	 lea	 edx, DWORD PTR _i$139126[esp+1460]
  00fdc	52		 push	 edx
  00fdd	50		 push	 eax
  00fde	51		 push	 ecx
  00fdf	e8 00 00 00 00	 call	 _GetArgumentValue
  00fe4	83 c4 18	 add	 esp, 24			; 00000018H
  00fe7	3b c5		 cmp	 eax, ebp
  00fe9	75 07		 jne	 SHORT $LN8@ExtractCom

; 6829 : 					InitSecurityTokenLibrary();

  00feb	e8 00 00 00 00	 call	 _InitSecurityTokenLibrary

; 6830 : 				else

  00ff0	eb 6a		 jmp	 SHORT $LN59@ExtractCom
$LN8@ExtractCom:

; 6831 : 					Error ("COMMAND_LINE_ERROR");

  00ff2	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LGCKNJIO@COMMAND_LINE_ERROR?$AA@
  00ff7	e8 00 00 00 00	 call	 _Error
  00ffc	83 c4 04	 add	 esp, 4

; 6832 : 
; 6833 : 				break;

  00fff	eb 5b		 jmp	 SHORT $LN59@ExtractCom
$LN6@ExtractCom:

; 6834 : 
; 6835 : 			case CommandWipeCache:
; 6836 : 				bWipe = TRUE;

  01001	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bWipe@@3HA, ebp ; bWipe

; 6837 : 				break;

  01007	eb 53		 jmp	 SHORT $LN59@ExtractCom
$LN4@ExtractCom:

; 6843 : 				break;
; 6844 : 
; 6845 : 				// no option = file name
; 6846 : 			default:
; 6847 : 				{
; 6848 : 					strcpy_s (szFileName, array_capacity (szFileName), lpszCommandLineArgs[i]);

  01009	8b 54 24 10	 mov	 edx, DWORD PTR _lpszCommandLineArgs$[esp+1448]
  0100d	8b 44 24 14	 mov	 eax, DWORD PTR _i$139126[esp+1448]
  01011	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  01014	51		 push	 ecx
  01015	68 05 01 00 00	 push	 261			; 00000105H
  0101a	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  0101f	e8 00 00 00 00	 call	 _strcpy_s

; 6849 : 					RelativePath2Absolute (szFileName);

  01024	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  01029	e8 00 00 00 00	 call	 _RelativePath2Absolute
  0102e	83 c4 10	 add	 esp, 16			; 00000010H

; 6850 : 
; 6851 : 					if (nNoCommandLineArgs == 1)

  01031	3b f5		 cmp	 esi, ebp
  01033	75 06		 jne	 SHORT $LN3@ExtractCom

; 6852 : 						CmdLineVolumeSpecified = TRUE;

  01035	89 2d 00 00 00
	00		 mov	 DWORD PTR _CmdLineVolumeSpecified, ebp
$LN3@ExtractCom:

; 6853 : 					AddComboItem (GetDlgItem (hwndDlg, IDC_VOLUME), szFileName, bHistory);

  0103b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHistory
  01041	52		 push	 edx
  01042	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  01047	68 0a 04 00 00	 push	 1034			; 0000040aH
  0104c	57		 push	 edi
  0104d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  01053	50		 push	 eax
  01054	e8 00 00 00 00	 call	 _AddComboItem
$LN72@ExtractCom:
  01059	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN59@ExtractCom:

; 6605 : 	{
; 6606 : 		int i;
; 6607 : 
; 6608 : 		for (i = 0; i < nNoCommandLineArgs; i++)

  0105c	8b 4c 24 14	 mov	 ecx, DWORD PTR _i$139126[esp+1448]
  01060	03 cd		 add	 ecx, ebp
  01062	3b ce		 cmp	 ecx, esi
  01064	89 4c 24 14	 mov	 DWORD PTR _i$139126[esp+1448], ecx
  01068	0f 8c 32 f0 ff
	ff		 jl	 $LL60@ExtractCom
$LN66@ExtractCom:

; 6854 : 				}
; 6855 : 			}
; 6856 : 		}
; 6857 : 	}
; 6858 : 
; 6859 : 	/* Free up the command line arguments */
; 6860 : 	while (--nNoCommandLineArgs >= 0)

  0106e	2b f5		 sub	 esi, ebp
  01070	78 14		 js	 SHORT $LN70@ExtractCom
$LL2@ExtractCom:

; 6861 : 	{
; 6862 : 		free (lpszCommandLineArgs[nNoCommandLineArgs]);

  01072	8b 54 24 10	 mov	 edx, DWORD PTR _lpszCommandLineArgs$[esp+1448]
  01076	8b 04 b2	 mov	 eax, DWORD PTR [edx+esi*4]
  01079	50		 push	 eax
  0107a	e8 00 00 00 00	 call	 _free
  0107f	83 c4 04	 add	 esp, 4
  01082	2b f5		 sub	 esi, ebp
  01084	79 ec		 jns	 SHORT $LL2@ExtractCom
$LN70@ExtractCom:

; 6863 : 	}
; 6864 : }

  01086	8b 8c 24 a4 05
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1448]
  0108d	5b		 pop	 ebx
  0108e	5f		 pop	 edi
  0108f	5e		 pop	 esi
  01090	5d		 pop	 ebp
  01091	33 cc		 xor	 ecx, esp
  01093	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01098	81 c4 98 05 00
	00		 add	 esp, 1432		; 00000598H
  0109e	c3		 ret	 0
$LN5@ExtractCom:

; 6838 : 
; 6839 : 			case CommandHelp:
; 6840 : 				DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_COMMANDHELP_DLG), hwndDlg, (DLGPROC)
; 6841 : 						CommandHelpDlgProc, (LPARAM) &as);

  0109f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  010a5	8d 44 24 20	 lea	 eax, DWORD PTR _as$139182[esp+1448]
  010a9	50		 push	 eax
  010aa	68 00 00 00 00	 push	 OFFSET _CommandHelpDlgProc@16
  010af	57		 push	 edi
  010b0	68 fd 01 00 00	 push	 509			; 000001fdH
  010b5	51		 push	 ecx
  010b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 6842 : 				exit(0);

  010bc	53		 push	 ebx
  010bd	e8 00 00 00 00	 call	 _exit
$LN71@ExtractCom:
  010c2	8b ff		 npad	 2
$LN73@ExtractCom:

; 6863 : 	}
; 6864 : }

  010c4	00 00 00 00	 DD	 $LN55@ExtractCom
  010c8	00 00 00 00	 DD	 $LN48@ExtractCom
  010cc	00 00 00 00	 DD	 $LN47@ExtractCom
  010d0	00 00 00 00	 DD	 $LN44@ExtractCom
  010d4	00 00 00 00	 DD	 $LN41@ExtractCom
  010d8	00 00 00 00	 DD	 $LN40@ExtractCom
  010dc	00 00 00 00	 DD	 $LN5@ExtractCom
  010e0	00 00 00 00	 DD	 $LN34@ExtractCom
  010e4	00 00 00 00	 DD	 $LN39@ExtractCom
  010e8	00 00 00 00	 DD	 $LN37@ExtractCom
  010ec	00 00 00 00	 DD	 $LN31@ExtractCom
  010f0	00 00 00 00	 DD	 $LN18@ExtractCom
  010f4	00 00 00 00	 DD	 $LN15@ExtractCom
  010f8	00 00 00 00	 DD	 $LN10@ExtractCom
  010fc	00 00 00 00	 DD	 $LN9@ExtractCom
  01100	00 00 00 00	 DD	 $LN17@ExtractCom
  01104	00 00 00 00	 DD	 $LN6@ExtractCom
_ExtractCommandLine ENDP
_TEXT	ENDS
EXTRN	__imp__SetServiceStatus@8:PROC
_BSS	SEGMENT
_SystemFavoritesServiceStatus DB 01cH DUP (?)
_SystemFavoritesServiceStatusHandle DD 01H DUP (?)
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT ?SystemFavoritesServiceSetStatus@@YAXKK@Z
_TEXT	SEGMENT
?SystemFavoritesServiceSetStatus@@YAXKK@Z PROC		; SystemFavoritesServiceSetStatus, COMDAT
; _status$ = eax
; _waitHint$ = ecx

; 6887 : 	SystemFavoritesServiceStatus.dwCurrentState = status;
; 6888 : 	SystemFavoritesServiceStatus.dwWaitHint = waitHint;
; 6889 : 	SystemFavoritesServiceStatus.dwWin32ExitCode = NO_ERROR;
; 6890 : 
; 6891 : 	SetServiceStatus (SystemFavoritesServiceStatusHandle, &SystemFavoritesServiceStatus);

  00000	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SystemFavoritesServiceStatusHandle
  00006	68 00 00 00 00	 push	 OFFSET _SystemFavoritesServiceStatus
  0000b	52		 push	 edx
  0000c	a3 04 00 00 00	 mov	 DWORD PTR _SystemFavoritesServiceStatus+4, eax
  00011	89 0d 18 00 00
	00		 mov	 DWORD PTR _SystemFavoritesServiceStatus+24, ecx
  00017	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _SystemFavoritesServiceStatus+12, 0
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetServiceStatus@8

; 6892 : }

  00027	c3		 ret	 0
?SystemFavoritesServiceSetStatus@@YAXKK@Z ENDP		; SystemFavoritesServiceSetStatus
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?SystemFavoritesServiceCtrlHandler@@YGXK@Z
_TEXT	SEGMENT
_control$ = 8						; size = 4
?SystemFavoritesServiceCtrlHandler@@YGXK@Z PROC		; SystemFavoritesServiceCtrlHandler, COMDAT

; 6897 : 	if (control == SERVICE_CONTROL_STOP) 
; 6898 : 		SystemFavoritesServiceSetStatus (SERVICE_STOP_PENDING);

  00000	33 c0		 xor	 eax, eax
  00002	83 7c 24 04 01	 cmp	 DWORD PTR _control$[esp-4], 1
  00007	68 00 00 00 00	 push	 OFFSET _SystemFavoritesServiceStatus
  0000c	a3 18 00 00 00	 mov	 DWORD PTR _SystemFavoritesServiceStatus+24, eax
  00011	a3 0c 00 00 00	 mov	 DWORD PTR _SystemFavoritesServiceStatus+12, eax
  00016	75 19		 jne	 SHORT $LN2@SystemFavo
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemFavoritesServiceStatusHandle
  0001d	50		 push	 eax
  0001e	c7 05 04 00 00
	00 03 00 00 00	 mov	 DWORD PTR _SystemFavoritesServiceStatus+4, 3

; 6899 : 	else
; 6900 : 		SystemFavoritesServiceSetStatus (SystemFavoritesServiceStatus.dwCurrentState);

  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetServiceStatus@8

; 6901 : }

  0002e	c2 04 00	 ret	 4
$LN2@SystemFavo:

; 6899 : 	else
; 6900 : 		SystemFavoritesServiceSetStatus (SystemFavoritesServiceStatus.dwCurrentState);

  00031	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SystemFavoritesServiceStatusHandle
  00037	51		 push	 ecx
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetServiceStatus@8

; 6901 : }

  0003e	c2 04 00	 ret	 4
?SystemFavoritesServiceCtrlHandler@@YGXK@Z ENDP		; SystemFavoritesServiceCtrlHandler
_TEXT	ENDS
PUBLIC	??_C@_1BG@INDNNNCG@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BG@GANMCCCG@CipherShedTaskBarIcon?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_TaskBarIconAdd
EXTRN	__imp__Shell_NotifyIconW@8:PROC
EXTRN	__imp__LoadImageA@24:PROC
EXTRN	_nCurrentOS:DWORD
EXTRN	_ScreenDPI:DWORD
EXTRN	__imp__CreateMutexA@12:PROC
;	COMDAT ??_C@_1BG@INDNNNCG@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@INDNNNCG@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?$AA@ DB 'C'
	DB	00H, 'i', 00H, 'p', 00H, 'h', 00H, 'e', 00H, 'r', 00H, 'S', 00H
	DB	'h', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GANMCCCG@CipherShedTaskBarIcon?$AA@
CONST	SEGMENT
??_C@_0BG@GANMCCCG@CipherShedTaskBarIcon?$AA@ DB 'CipherShedTaskBarIcon', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _TaskBarIconAdd
_TEXT	SEGMENT
_tnid$ = -956						; size = 952
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_TaskBarIconAdd PROC					; COMDAT

; 7012 : { 

  00000	81 ec bc 03 00
	00		 sub	 esp, 956		; 000003bcH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 b8 03
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+956], eax
  00014	56		 push	 esi
  00015	8b b4 24 c4 03
	00 00		 mov	 esi, DWORD PTR _hwnd$[esp+956]

; 7013 : 	NOTIFYICONDATAW tnid; 
; 7014 : 
; 7015 : 	ZeroMemory (&tnid, sizeof (tnid));

  0001c	68 b8 03 00 00	 push	 952			; 000003b8H
  00021	8d 44 24 08	 lea	 eax, DWORD PTR _tnid$[esp+964]
  00025	6a 00		 push	 0
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _memset
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7016 : 
; 7017 : 	// Only one icon may be created
; 7018 : 	if (TaskBarIconMutex != NULL) return TRUE;

  00030	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _TaskBarIconMutex, 0
  00037	74 1b		 je	 SHORT $LN3@TaskBarIco
  00039	b8 01 00 00 00	 mov	 eax, 1
  0003e	5e		 pop	 esi

; 7043 : }

  0003f	8b 8c 24 b8 03
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+956]
  00046	33 cc		 xor	 ecx, esp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	81 c4 bc 03 00
	00		 add	 esp, 956		; 000003bcH
  00053	c3		 ret	 0
$LN3@TaskBarIco:

; 7019 : 
; 7020 : 	TaskBarIconMutex = CreateMutex (NULL, TRUE, "CipherShedTaskBarIcon");

  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@GANMCCCG@CipherShedTaskBarIcon?$AA@
  00059	6a 01		 push	 1
  0005b	6a 00		 push	 0
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateMutexA@12
  00063	a3 00 00 00 00	 mov	 DWORD PTR _TaskBarIconMutex, eax

; 7021 : 	if (TaskBarIconMutex == NULL || GetLastError () == ERROR_ALREADY_EXISTS)

  00068	85 c0		 test	 eax, eax
  0006a	0f 84 c7 00 00
	00		 je	 $LN1@TaskBarIco
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00076	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  0007b	0f 84 b6 00 00
	00		 je	 $LN1@TaskBarIco

; 7022 : 	{
; 7023 : 		TaskBarIconMutex = NULL;
; 7024 : 		return FALSE;
; 7025 : 	}
; 7026 : 
; 7027 : 	tnid.cbSize = sizeof (NOTIFYICONDATAW); 
; 7028 : 	tnid.hWnd = hwnd; 
; 7029 : 	tnid.uID = IDI_CIPHERSHED_ICON; 
; 7030 : 	tnid.uFlags = NIF_MESSAGE | NIF_ICON | NIF_TIP; 
; 7031 : 	tnid.uCallbackMessage = TC_APPMSG_TASKBAR_ICON; 
; 7032 : 	tnid.hIcon = (HICON) LoadImage (hInst, MAKEINTRESOURCE (IDI_CIPHERSHED_ICON), 
; 7033 : 		IMAGE_ICON, 
; 7034 : 		ScreenDPI >= 120 ? 0 : 16, 
; 7035 : 		ScreenDPI >= 120 ? 0 : 16,
; 7036 : 		(ScreenDPI >= 120 ? LR_DEFAULTSIZE : 0) 
; 7037 : 		| LR_SHARED
; 7038 : 		| (nCurrentOS != WIN_2000 ? LR_DEFAULTCOLOR : LR_VGACOLOR)); // Windows 2000 cannot display more than 16 fixed colors in notification tray

  00081	33 c0		 xor	 eax, eax
  00083	89 74 24 08	 mov	 DWORD PTR _tnid$[esp+964], esi
  00087	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _ScreenDPI
  0008d	83 fe 78	 cmp	 esi, 120		; 00000078H
  00090	0f 9d c0	 setge	 al
  00093	33 d2		 xor	 edx, edx
  00095	b9 07 00 00 00	 mov	 ecx, 7
  0009a	89 4c 24 10	 mov	 DWORD PTR _tnid$[esp+972], ecx
  0009e	c7 44 24 04 b8
	03 00 00	 mov	 DWORD PTR _tnid$[esp+960], 952 ; 000003b8H
  000a6	c7 44 24 0c f5
	01 00 00	 mov	 DWORD PTR _tnid$[esp+968], 501 ; 000001f5H
  000ae	c7 44 24 14 66
	80 00 00	 mov	 DWORD PTR _tnid$[esp+976], 32870 ; 00008066H
  000b6	48		 dec	 eax
  000b7	83 e0 10	 and	 eax, 16			; 00000010H
  000ba	39 0d 00 00 00
	00		 cmp	 DWORD PTR _nCurrentOS, ecx
  000c0	0f 95 c2	 setne	 dl
  000c3	33 c9		 xor	 ecx, ecx
  000c5	4a		 dec	 edx
  000c6	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  000cc	83 fe 78	 cmp	 esi, 120		; 00000078H
  000cf	0f 9c c1	 setl	 cl
  000d2	49		 dec	 ecx
  000d3	83 e1 40	 and	 ecx, 64			; 00000040H
  000d6	0b d1		 or	 edx, ecx
  000d8	81 ca 00 80 00
	00		 or	 edx, 32768		; 00008000H
  000de	52		 push	 edx
  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  000e5	50		 push	 eax
  000e6	50		 push	 eax
  000e7	6a 01		 push	 1
  000e9	68 f5 01 00 00	 push	 501			; 000001f5H
  000ee	52		 push	 edx
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadImageA@24
  000f5	89 44 24 18	 mov	 DWORD PTR _tnid$[esp+980], eax

; 7039 : 
; 7040 : 	wcscpy (tnid.szTip, L"CipherShed");

  000f9	33 c0		 xor	 eax, eax
  000fb	eb 03 8d 49 00	 npad	 5
$LL6@TaskBarIco:
  00100	0f b7 88 00 00
	00 00		 movzx	 ecx, WORD PTR ??_C@_1BG@INDNNNCG@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?$AA@[eax]
  00107	66 89 4c 04 1c	 mov	 WORD PTR _tnid$[esp+eax+984], cx
  0010c	83 c0 02	 add	 eax, 2
  0010f	66 85 c9	 test	 cx, cx
  00112	75 ec		 jne	 SHORT $LL6@TaskBarIco

; 7041 : 
; 7042 : 	return Shell_NotifyIconW (NIM_ADD, &tnid); 

  00114	8d 44 24 04	 lea	 eax, DWORD PTR _tnid$[esp+960]
  00118	50		 push	 eax
  00119	6a 00		 push	 0
  0011b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Shell_NotifyIconW@8
  00121	5e		 pop	 esi

; 7043 : }

  00122	8b 8c 24 b8 03
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+956]
  00129	33 cc		 xor	 ecx, esp
  0012b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00130	81 c4 bc 03 00
	00		 add	 esp, 956		; 000003bcH
  00136	c3		 ret	 0
$LN1@TaskBarIco:
  00137	8b 8c 24 bc 03
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+960]
  0013e	5e		 pop	 esi
  0013f	33 cc		 xor	 ecx, esp
  00141	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _TaskBarIconMutex, 0
  0014b	33 c0		 xor	 eax, eax
  0014d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00152	81 c4 bc 03 00
	00		 add	 esp, 956		; 000003bcH
  00158	c3		 ret	 0
_TaskBarIconAdd ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_TaskBarIconRemove
EXTRN	__imp__Shell_NotifyIconA@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT _TaskBarIconRemove
_TEXT	SEGMENT
_tnid$139370 = -508					; size = 504
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_TaskBarIconRemove PROC					; COMDAT

; 7047 : { 

  00000	81 ec fc 01 00
	00		 sub	 esp, 508		; 000001fcH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 f8 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+508], eax

; 7048 : 	if (TaskBarIconMutex != NULL)

  00014	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _TaskBarIconMutex, 0
  0001b	56		 push	 esi
  0001c	8b b4 24 04 02
	00 00		 mov	 esi, DWORD PTR _hwnd$[esp+508]
  00023	74 69		 je	 SHORT $LN3@TaskBarIco@2

; 7049 : 	{
; 7050 : 		NOTIFYICONDATA tnid; 
; 7051 : 		BOOL res;
; 7052 : 
; 7053 : 		ZeroMemory (&tnid, sizeof (tnid));

  00025	68 f8 01 00 00	 push	 504			; 000001f8H
  0002a	8d 44 24 08	 lea	 eax, DWORD PTR _tnid$139370[esp+516]
  0002e	6a 00		 push	 0
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _memset
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7054 : 		tnid.cbSize = sizeof(NOTIFYICONDATA); 
; 7055 : 		tnid.hWnd = hwnd; 
; 7056 : 		tnid.uID = IDI_CIPHERSHED_ICON; 
; 7057 : 
; 7058 : 		res = Shell_NotifyIcon (NIM_DELETE, &tnid);

  00039	8d 4c 24 04	 lea	 ecx, DWORD PTR _tnid$139370[esp+512]
  0003d	51		 push	 ecx
  0003e	6a 02		 push	 2
  00040	c7 44 24 0c f8
	01 00 00	 mov	 DWORD PTR _tnid$139370[esp+520], 504 ; 000001f8H
  00048	89 74 24 10	 mov	 DWORD PTR _tnid$139370[esp+524], esi
  0004c	c7 44 24 14 f5
	01 00 00	 mov	 DWORD PTR _tnid$139370[esp+528], 501 ; 000001f5H
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Shell_NotifyIconA@8
  0005a	8b f0		 mov	 esi, eax

; 7059 : 		if (TaskBarIconMutex)

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR _TaskBarIconMutex
  00061	85 c0		 test	 eax, eax
  00063	74 11		 je	 SHORT $LN2@TaskBarIco@2

; 7060 : 		{
; 7061 : 			CloseHandle (TaskBarIconMutex);

  00065	50		 push	 eax
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 7062 : 			TaskBarIconMutex = NULL;

  0006c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _TaskBarIconMutex, 0
$LN2@TaskBarIco@2:

; 7063 : 		}
; 7064 : 		return res;

  00076	8b c6		 mov	 eax, esi
  00078	5e		 pop	 esi

; 7065 : 	}
; 7066 : 	else
; 7067 : 		return FALSE;
; 7068 : }

  00079	8b 8c 24 f8 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+508]
  00080	33 cc		 xor	 ecx, esp
  00082	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00087	81 c4 fc 01 00
	00		 add	 esp, 508		; 000001fcH
  0008d	c3		 ret	 0
$LN3@TaskBarIco@2:
  0008e	8b 8c 24 fc 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+512]
  00095	5e		 pop	 esi
  00096	33 cc		 xor	 ecx, esp
  00098	33 c0		 xor	 eax, eax
  0009a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009f	81 c4 fc 01 00
	00		 add	 esp, 508		; 000001fcH
  000a5	c3		 ret	 0
_TaskBarIconRemove ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_TaskBarIconChange
; Function compile flags: /Ogtpy
;	COMDAT _TaskBarIconChange
_TEXT	SEGMENT
_tnid$ = -508						; size = 504
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_iconId$ = 12						; size = 4
_TaskBarIconChange PROC					; COMDAT

; 7072 : { 

  00000	81 ec fc 01 00
	00		 sub	 esp, 508		; 000001fcH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 f8 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+508], eax

; 7073 : 	if (TaskBarIconMutex == NULL)

  00014	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _TaskBarIconMutex, 0
  0001b	56		 push	 esi
  0001c	8b b4 24 04 02
	00 00		 mov	 esi, DWORD PTR _hwnd$[esp+508]
  00023	75 18		 jne	 SHORT $LN1@TaskBarIco@3

; 7074 : 		return FALSE;

  00025	33 c0		 xor	 eax, eax
  00027	5e		 pop	 esi

; 7093 : }

  00028	8b 8c 24 f8 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+508]
  0002f	33 cc		 xor	 ecx, esp
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	81 c4 fc 01 00
	00		 add	 esp, 508		; 000001fcH
  0003c	c3		 ret	 0
$LN1@TaskBarIco@3:

; 7075 : 
; 7076 : 	NOTIFYICONDATA tnid; 
; 7077 : 
; 7078 : 	ZeroMemory (&tnid, sizeof (tnid));

  0003d	68 f8 01 00 00	 push	 504			; 000001f8H
  00042	8d 44 24 08	 lea	 eax, DWORD PTR _tnid$[esp+516]
  00046	6a 00		 push	 0
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _memset
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7079 : 
; 7080 : 	tnid.cbSize = sizeof (tnid); 
; 7081 : 	tnid.hWnd = hwnd; 
; 7082 : 	tnid.uID = IDI_CIPHERSHED_ICON; 
; 7083 : 	tnid.uFlags = NIF_ICON; 
; 7084 : 	tnid.hIcon = (HICON) LoadImage (hInst, MAKEINTRESOURCE (iconId), 
; 7085 : 		IMAGE_ICON, 
; 7086 : 		ScreenDPI >= 120 ? 0 : 16, 
; 7087 : 		ScreenDPI >= 120 ? 0 : 16,
; 7088 : 		(ScreenDPI >= 120 ? LR_DEFAULTSIZE : 0) 
; 7089 : 		| LR_SHARED
; 7090 : 		| (nCurrentOS != WIN_2000 ? LR_DEFAULTCOLOR : LR_VGACOLOR)); // Windows 2000 cannot display more than 16 fixed colors in notification tray

  00051	33 c0		 xor	 eax, eax
  00053	89 74 24 08	 mov	 DWORD PTR _tnid$[esp+516], esi
  00057	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _ScreenDPI
  0005d	83 fe 78	 cmp	 esi, 120		; 00000078H
  00060	0f 9d c0	 setge	 al
  00063	33 c9		 xor	 ecx, ecx
  00065	c7 44 24 04 f8
	01 00 00	 mov	 DWORD PTR _tnid$[esp+512], 504 ; 000001f8H
  0006d	c7 44 24 0c f5
	01 00 00	 mov	 DWORD PTR _tnid$[esp+520], 501 ; 000001f5H
  00075	c7 44 24 10 02
	00 00 00	 mov	 DWORD PTR _tnid$[esp+524], 2
  0007d	48		 dec	 eax
  0007e	83 e0 10	 and	 eax, 16			; 00000010H
  00081	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _nCurrentOS, 7
  00088	0f 95 c1	 setne	 cl
  0008b	33 d2		 xor	 edx, edx
  0008d	49		 dec	 ecx
  0008e	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  00094	83 fe 78	 cmp	 esi, 120		; 00000078H
  00097	0f 9c c2	 setl	 dl
  0009a	4a		 dec	 edx
  0009b	83 e2 40	 and	 edx, 64			; 00000040H
  0009e	0b ca		 or	 ecx, edx
  000a0	81 c9 00 80 00
	00		 or	 ecx, 32768		; 00008000H
  000a6	51		 push	 ecx
  000a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  000ad	50		 push	 eax
  000ae	50		 push	 eax
  000af	0f b7 84 24 14
	02 00 00	 movzx	 eax, WORD PTR _iconId$[esp+520]
  000b7	6a 01		 push	 1
  000b9	50		 push	 eax
  000ba	51		 push	 ecx
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadImageA@24

; 7091 : 
; 7092 : 	return Shell_NotifyIcon (NIM_MODIFY, &tnid); 

  000c1	8d 54 24 04	 lea	 edx, DWORD PTR _tnid$[esp+512]
  000c5	52		 push	 edx
  000c6	6a 01		 push	 1
  000c8	89 44 24 20	 mov	 DWORD PTR _tnid$[esp+540], eax
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Shell_NotifyIconA@8

; 7093 : }

  000d2	8b 8c 24 fc 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+512]
  000d9	5e		 pop	 esi
  000da	33 cc		 xor	 ecx, esp
  000dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e1	81 c4 fc 01 00
	00		 add	 esp, 508		; 000001fcH
  000e7	c3		 ret	 0
_TaskBarIconChange ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_DismountIdleVolumes
EXTRN	?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ:PROC ; CipherShed::SecurityToken::CloseAllSessions
EXTRN	_DriverUnmountVolume:PROC
EXTRN	_CloseVolumeExplorerWindows:PROC
EXTRN	_BroadcastDeviceChange:PROC
EXTRN	__imp__GetTickCount@0:PROC
;	COMDAT ?InactivityTime@?1??DismountIdleVolumes@@9@4PAHA
_BSS	SEGMENT
?InactivityTime@?1??DismountIdleVolumes@@9@4PAHA DD 01aH DUP (?) ; `DismountIdleVolumes'::`2'::InactivityTime
_BSS	ENDS
;	COMDAT ?LastId@?1??DismountIdleVolumes@@9@4PAHA
_BSS	SEGMENT
?LastId@?1??DismountIdleVolumes@@9@4PAHA DD 01aH DUP (?) ; `DismountIdleVolumes'::`2'::LastId
_BSS	ENDS
;	COMDAT ?LastWritten@?1??DismountIdleVolumes@@9@4PA_KA
_BSS	SEGMENT
?LastWritten@?1??DismountIdleVolumes@@9@4PA_KA DQ 01aH DUP (?) ; `DismountIdleVolumes'::`2'::LastWritten
_BSS	ENDS
;	COMDAT ?LastRead@?1??DismountIdleVolumes@@9@4PA_KA
_BSS	SEGMENT
?LastRead@?1??DismountIdleVolumes@@9@4PA_KA DQ 01aH DUP (?) ; `DismountIdleVolumes'::`2'::LastRead
_BSS	ENDS
_BSS	SEGMENT
_LastKnownMountList DB 03674H DUP (?)
_BSS	ENDS
;	COMDAT ?lastMinTickCount@?1??DismountIdleVolumes@@9@4KA
_BSS	SEGMENT
?lastMinTickCount@?1??DismountIdleVolumes@@9@4KA DD 01H DUP (?) ; `DismountIdleVolumes'::`2'::lastMinTickCount
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _DismountIdleVolumes
_TEXT	SEGMENT
$T150995 = -608						; size = 4
_dwResult$ = -604					; size = 4
_prop$ = -600						; size = 596
__$ArrayPad$ = -4					; size = 4
_DismountIdleVolumes PROC				; COMDAT

; 7097 : {

  00000	81 ec 60 02 00
	00		 sub	 esp, 608		; 00000260H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 5c 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+608], eax
  00014	56		 push	 esi

; 7098 : 	static DWORD lastMinTickCount;
; 7099 : 	static int InactivityTime[26];
; 7100 : 	static unsigned __int64 LastRead[26], LastWritten[26];
; 7101 : 	static int LastId[26];
; 7102 : 
; 7103 : 	VOLUME_PROPERTIES_STRUCT prop;
; 7104 : 	DWORD dwResult;
; 7105 : 	BOOL bResult;
; 7106 : 	int i;
; 7107 : 
; 7108 : 	if (GetTickCount() > lastMinTickCount && GetTickCount() - lastMinTickCount < 60 * 1000)

  00015	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetTickCount@0
  0001b	ff d6		 call	 esi
  0001d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?lastMinTickCount@?1??DismountIdleVolumes@@9@4KA
  00023	76 13		 jbe	 SHORT $LN12@DismountId
  00025	ff d6		 call	 esi
  00027	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?lastMinTickCount@?1??DismountIdleVolumes@@9@4KA
  0002d	3d 60 ea 00 00	 cmp	 eax, 60000		; 0000ea60H
  00032	0f 82 d0 01 00
	00		 jb	 $LN9@DismountId
$LN12@DismountId:
  00038	53		 push	 ebx
  00039	55		 push	 ebp
  0003a	57		 push	 edi

; 7109 : 		return;
; 7110 : 	
; 7111 : 	lastMinTickCount = GetTickCount();

  0003b	ff d6		 call	 esi

; 7112 : 
; 7113 : 	for (i = 0; i < 26; i++)

  0003d	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__DeviceIoControl@32
  00043	a3 00 00 00 00	 mov	 DWORD PTR ?lastMinTickCount@?1??DismountIdleVolumes@@9@4KA, eax
  00048	b8 01 00 00 00	 mov	 eax, 1
  0004d	33 f6		 xor	 esi, esi
  0004f	89 44 24 10	 mov	 DWORD PTR $T150995[esp+624], eax
$LL21@DismountId:

; 7114 : 	{
; 7115 : 		if (LastKnownMountList.ulMountedDrives & (1 << i))

  00053	85 05 00 00 00
	00		 test	 DWORD PTR _LastKnownMountList, eax
  00059	0f 84 92 01 00
	00		 je	 $LN10@DismountId

; 7116 : 		{
; 7117 : 			memset (&prop, 0, sizeof(prop));

  0005f	68 54 02 00 00	 push	 596			; 00000254H
  00064	8d 44 24 1c	 lea	 eax, DWORD PTR _prop$[esp+628]
  00068	6a 00		 push	 0
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _memset
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7118 : 			prop.driveNo = i;
; 7119 : 
; 7120 : 			bResult = DeviceIoControl (hDriver, TC_IOCTL_GET_VOLUME_PROPERTIES, &prop,
; 7121 : 				sizeof (prop), &prop, sizeof (prop), &dwResult, NULL);

  00073	6a 00		 push	 0
  00075	8d 4c 24 18	 lea	 ecx, DWORD PTR _dwResult$[esp+628]
  00079	51		 push	 ecx
  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hDriver
  00080	68 54 02 00 00	 push	 596			; 00000254H
  00085	8d 54 24 24	 lea	 edx, DWORD PTR _prop$[esp+636]
  00089	52		 push	 edx
  0008a	68 54 02 00 00	 push	 596			; 00000254H
  0008f	8b c2		 mov	 eax, edx
  00091	50		 push	 eax
  00092	68 1c 20 22 00	 push	 2236444			; 0022201cH
  00097	51		 push	 ecx
  00098	89 74 24 38	 mov	 DWORD PTR _prop$[esp+656], esi
  0009c	ff d3		 call	 ebx

; 7122 : 
; 7123 : 			if (bResult)

  0009e	85 c0		 test	 eax, eax
  000a0	0f 84 4b 01 00
	00		 je	 $LN10@DismountId

; 7124 : 			{
; 7125 : 				if (LastRead[i] == prop.totalBytesRead 
; 7126 : 					&& LastWritten[i] == prop.totalBytesWritten
; 7127 : 					&& LastId[i] == prop.uniqueId)

  000a6	8b 14 f5 00 00
	00 00		 mov	 edx, DWORD PTR ?LastRead@?1??DismountIdleVolumes@@9@4PA_KA[esi*8]
  000ad	8b 84 24 54 02
	00 00		 mov	 eax, DWORD PTR _prop$[esp+1196]
  000b4	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR _prop$[esp+1208]
  000bb	8b 7c 24 1c	 mov	 edi, DWORD PTR _prop$[esp+628]
  000bf	3b d0		 cmp	 edx, eax
  000c1	8b 94 24 5c 02
	00 00		 mov	 edx, DWORD PTR _prop$[esp+1204]
  000c8	0f 85 ee 00 00
	00		 jne	 $LN18@DismountId
  000ce	8b 2c f5 04 00
	00 00		 mov	 ebp, DWORD PTR ?LastRead@?1??DismountIdleVolumes@@9@4PA_KA[esi*8+4]
  000d5	3b ac 24 58 02
	00 00		 cmp	 ebp, DWORD PTR _prop$[esp+1200]
  000dc	0f 85 da 00 00
	00		 jne	 $LN18@DismountId
  000e2	8b 2c f5 00 00
	00 00		 mov	 ebp, DWORD PTR ?LastWritten@?1??DismountIdleVolumes@@9@4PA_KA[esi*8]
  000e9	3b ea		 cmp	 ebp, edx
  000eb	0f 85 cb 00 00
	00		 jne	 $LN18@DismountId
  000f1	8b 2c f5 04 00
	00 00		 mov	 ebp, DWORD PTR ?LastWritten@?1??DismountIdleVolumes@@9@4PA_KA[esi*8+4]
  000f8	3b e9		 cmp	 ebp, ecx
  000fa	0f 85 bc 00 00
	00		 jne	 $LN18@DismountId
  00100	39 3c b5 00 00
	00 00		 cmp	 DWORD PTR ?LastId@?1??DismountIdleVolumes@@9@4PAHA[esi*4], edi
  00107	0f 85 af 00 00
	00		 jne	 $LN18@DismountId

; 7128 : 				{
; 7129 : 					if (++InactivityTime[i] >= MaxVolumeIdleTime)

  0010d	ff 04 b5 00 00
	00 00		 inc	 DWORD PTR ?InactivityTime@?1??DismountIdleVolumes@@9@4PAHA[esi*4]
  00114	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR ?InactivityTime@?1??DismountIdleVolumes@@9@4PAHA[esi*4]
  0011b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?MaxVolumeIdleTime@@3HA ; MaxVolumeIdleTime
  00121	0f 8c ca 00 00
	00		 jl	 $LN10@DismountId

; 7130 : 					{
; 7131 : 						BroadcastDeviceChange (DBT_DEVICEREMOVEPENDING, i, 0);

  00127	6a 00		 push	 0
  00129	56		 push	 esi
  0012a	68 03 80 00 00	 push	 32771			; 00008003H
  0012f	e8 00 00 00 00	 call	 _BroadcastDeviceChange
  00134	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7132 : 
; 7133 : 						if (bCloseDismountedWindows && CloseVolumeExplorerWindows (MainDlg, i))

  00137	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bCloseDismountedWindows@@3HA, 0 ; bCloseDismountedWindows
  0013e	74 1e		 je	 SHORT $LN4@DismountId
  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00145	56		 push	 esi
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 _CloseVolumeExplorerWindows
  0014c	83 c4 08	 add	 esp, 8
  0014f	85 c0		 test	 eax, eax
  00151	74 0b		 je	 SHORT $LN4@DismountId

; 7134 : 							Sleep (250);

  00153	68 fa 00 00 00	 push	 250			; 000000faH
  00158	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
$LN4@DismountId:

; 7135 : 
; 7136 : 						if (DriverUnmountVolume (MainDlg, i, bForceAutoDismount) == 0)

  0015e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bForceAutoDismount@@3HA ; bForceAutoDismount
  00164	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0016a	51		 push	 ecx
  0016b	56		 push	 esi
  0016c	52		 push	 edx
  0016d	e8 00 00 00 00	 call	 _DriverUnmountVolume
  00172	83 c4 0c	 add	 esp, 12			; 0000000cH
  00175	85 c0		 test	 eax, eax
  00177	75 78		 jne	 SHORT $LN10@DismountId

; 7137 : 						{
; 7138 : 							InactivityTime[i] = 0;
; 7139 : 							BroadcastDeviceChange (DBT_DEVICEREMOVECOMPLETE, i, 0);

  00179	50		 push	 eax
  0017a	56		 push	 esi
  0017b	68 04 80 00 00	 push	 32772			; 00008004H
  00180	89 04 b5 00 00
	00 00		 mov	 DWORD PTR ?InactivityTime@?1??DismountIdleVolumes@@9@4PAHA[esi*4], eax
  00187	e8 00 00 00 00	 call	 _BroadcastDeviceChange
  0018c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7140 : 
; 7141 : 							if (bWipeCacheOnAutoDismount)

  0018f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bWipeCacheOnAutoDismount@@3HA, 0 ; bWipeCacheOnAutoDismount
  00196	74 59		 je	 SHORT $LN10@DismountId

; 7142 : 							{
; 7143 : 								DeviceIoControl (hDriver, TC_IOCTL_WIPE_PASSWORD_CACHE, NULL, 0, NULL, 0, &dwResult, NULL);

  00198	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hDriver
  0019e	6a 00		 push	 0
  001a0	8d 44 24 18	 lea	 eax, DWORD PTR _dwResult$[esp+628]
  001a4	50		 push	 eax
  001a5	6a 00		 push	 0
  001a7	6a 00		 push	 0
  001a9	6a 00		 push	 0
  001ab	6a 00		 push	 0
  001ad	68 30 20 22 00	 push	 2236464			; 00222030H
  001b2	51		 push	 ecx
  001b3	ff d3		 call	 ebx

; 7144 : 								SecurityToken::CloseAllSessions();

  001b5	e8 00 00 00 00	 call	 ?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ ; CipherShed::SecurityToken::CloseAllSessions

; 7145 : 							}
; 7146 : 						}
; 7147 : 					}
; 7148 : 				}
; 7149 : 				else

  001ba	eb 35		 jmp	 SHORT $LN10@DismountId
$LN18@DismountId:

; 7150 : 				{
; 7151 : 					InactivityTime[i] = 0;
; 7152 : 					LastRead[i] = prop.totalBytesRead;

  001bc	89 04 f5 00 00
	00 00		 mov	 DWORD PTR ?LastRead@?1??DismountIdleVolumes@@9@4PA_KA[esi*8], eax
  001c3	8b 84 24 58 02
	00 00		 mov	 eax, DWORD PTR _prop$[esp+1200]
  001ca	c7 04 b5 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?InactivityTime@?1??DismountIdleVolumes@@9@4PAHA[esi*4], 0
  001d5	89 04 f5 04 00
	00 00		 mov	 DWORD PTR ?LastRead@?1??DismountIdleVolumes@@9@4PA_KA[esi*8+4], eax

; 7153 : 					LastWritten[i] = prop.totalBytesWritten;

  001dc	89 14 f5 00 00
	00 00		 mov	 DWORD PTR ?LastWritten@?1??DismountIdleVolumes@@9@4PA_KA[esi*8], edx
  001e3	89 0c f5 04 00
	00 00		 mov	 DWORD PTR ?LastWritten@?1??DismountIdleVolumes@@9@4PA_KA[esi*8+4], ecx

; 7154 : 					LastId[i] = prop.uniqueId;

  001ea	89 3c b5 00 00
	00 00		 mov	 DWORD PTR ?LastId@?1??DismountIdleVolumes@@9@4PAHA[esi*4], edi
$LN10@DismountId:
  001f1	8b 44 24 10	 mov	 eax, DWORD PTR $T150995[esp+624]
  001f5	46		 inc	 esi
  001f6	d1 c0		 rol	 eax, 1
  001f8	83 fe 1a	 cmp	 esi, 26			; 0000001aH
  001fb	89 44 24 10	 mov	 DWORD PTR $T150995[esp+624], eax
  001ff	0f 8c 4e fe ff
	ff		 jl	 $LL21@DismountId
  00205	5f		 pop	 edi
  00206	5d		 pop	 ebp
  00207	5b		 pop	 ebx
$LN9@DismountId:

; 7155 : 				}
; 7156 : 			}
; 7157 : 		}
; 7158 : 	}
; 7159 : }

  00208	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+612]
  0020f	5e		 pop	 esi
  00210	33 cc		 xor	 ecx, esp
  00212	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00217	81 c4 60 02 00
	00		 add	 esp, 608		; 00000260H
  0021d	c3		 ret	 0
_DismountIdleVolumes ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@DOFEIEI@?6?7?$DM?1defaultkeyfiles?$DO?$AA@ ; `string'
PUBLIC	??_C@_0BJ@CHEIJIHP@?6?7?7?$DMkeyfile?$DO?$CFs?$DM?1keyfile?$DO?$AA@ ; `string'
PUBLIC	??_C@_0BE@OMMCBCFB@?6?7?$DMdefaultkeyfiles?$DO?$AA@ ; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_0BF@CEDLNBLM@Default?5Keyfiles?4xml?$AA@	; `string'
PUBLIC	__$ArrayPad$
EXTRN	_XmlWriteFooter:PROC
EXTRN	_fprintf:PROC
EXTRN	_XmlQuoteText:PROC
EXTRN	_fputs:PROC
EXTRN	_XmlWriteHeader:PROC
EXTRN	_remove:PROC
EXTRN	_GetConfigPath:PROC
;	COMDAT ??_C@_0BF@DOFEIEI@?6?7?$DM?1defaultkeyfiles?$DO?$AA@
CONST	SEGMENT
??_C@_0BF@DOFEIEI@?6?7?$DM?1defaultkeyfiles?$DO?$AA@ DB 0aH, 09H, '</defa'
	DB	'ultkeyfiles>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CHEIJIHP@?6?7?7?$DMkeyfile?$DO?$CFs?$DM?1keyfile?$DO?$AA@
CONST	SEGMENT
??_C@_0BJ@CHEIJIHP@?6?7?7?$DMkeyfile?$DO?$CFs?$DM?1keyfile?$DO?$AA@ DB 0aH
	DB	09H, 09H, '<keyfile>%s</keyfile>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OMMCBCFB@?6?7?$DMdefaultkeyfiles?$DO?$AA@
CONST	SEGMENT
??_C@_0BE@OMMCBCFB@?6?7?$DMdefaultkeyfiles?$DO?$AA@ DB 0aH, 09H, '<defaul'
	DB	'tkeyfiles>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CEDLNBLM@Default?5Keyfiles?4xml?$AA@
CONST	SEGMENT
??_C@_0BF@CEDLNBLM@Default?5Keyfiles?4xml?$AA@ DB 'Default Keyfiles.xml', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _SaveDefaultKeyFilesParam
_TEXT	SEGMENT
_q$139701 = -524					; size = 520
__$ArrayPad$ = -4					; size = 4
_SaveDefaultKeyFilesParam PROC				; COMDAT

; 7305 : {

  00000	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 08 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+524], eax

; 7306 : 	if (defaultKeyFilesParam.FirstKeyFile == NULL)

  00014	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR _defaultKeyFilesParam+4, 0
  0001b	75 28		 jne	 SHORT $LN5@SaveDefaul

; 7307 : 	{
; 7308 : 		/* No keyfiles selected */ 
; 7309 : 		remove (GetConfigPath (TC_APPD_FILENAME_DEFAULT_KEYFILES));

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@CEDLNBLM@Default?5Keyfiles?4xml?$AA@
  00022	e8 00 00 00 00	 call	 _GetConfigPath
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _remove
  0002d	83 c4 08	 add	 esp, 8

; 7343 : 		return;
; 7344 : 	}
; 7345 : }

  00030	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+524]
  00037	33 cc		 xor	 ecx, esp
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	81 c4 0c 02 00
	00		 add	 esp, 524		; 0000020cH
  00044	c3		 ret	 0
$LN5@SaveDefaul:
  00045	56		 push	 esi

; 7310 : 	}
; 7311 : 	else
; 7312 : 	{
; 7313 : 		FILE *f;
; 7314 : 		KeyFile *kf = FirstKeyFile;

  00046	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _FirstKeyFile
  0004c	57		 push	 edi

; 7315 : 
; 7316 : 		f = fopen (GetConfigPath (TC_APPD_FILENAME_DEFAULT_KEYFILES), "w");

  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w?$AA@
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@CEDLNBLM@Default?5Keyfiles?4xml?$AA@
  00057	e8 00 00 00 00	 call	 _GetConfigPath
  0005c	83 c4 04	 add	 esp, 4
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _fopen
  00065	8b f8		 mov	 edi, eax
  00067	83 c4 08	 add	 esp, 8

; 7317 : 		if (f == NULL)

  0006a	85 ff		 test	 edi, edi
  0006c	75 25		 jne	 SHORT $LN3@SaveDefaul

; 7318 : 		{
; 7319 : 			handleWin32Error (MainDlg);

  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _handleWin32Error
  00079	83 c4 04	 add	 esp, 4
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi

; 7343 : 		return;
; 7344 : 	}
; 7345 : }

  0007e	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+524]
  00085	33 cc		 xor	 ecx, esp
  00087	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008c	81 c4 0c 02 00
	00		 add	 esp, 524		; 0000020cH
  00092	c3		 ret	 0
$LN3@SaveDefaul:

; 7320 : 			return;
; 7321 : 		}
; 7322 : 
; 7323 : 		XmlWriteHeader (f);

  00093	57		 push	 edi
  00094	e8 00 00 00 00	 call	 _XmlWriteHeader

; 7324 : 
; 7325 : 		fputs ("\n\t<defaultkeyfiles>", f);

  00099	57		 push	 edi
  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@OMMCBCFB@?6?7?$DMdefaultkeyfiles?$DO?$AA@
  0009f	e8 00 00 00 00	 call	 _fputs
  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7326 : 
; 7327 : 		while (kf != NULL)

  000a7	85 f6		 test	 esi, esi
  000a9	74 32		 je	 SHORT $LN1@SaveDefaul
  000ab	eb 03 8d 49 00	 npad	 5
$LL2@SaveDefaul:

; 7328 : 		{
; 7329 : 			char q[TC_MAX_PATH * 2];
; 7330 : 
; 7331 : 			XmlQuoteText (kf->FileName, q, sizeof (q));

  000b0	68 08 02 00 00	 push	 520			; 00000208H
  000b5	8d 4c 24 0c	 lea	 ecx, DWORD PTR _q$139701[esp+536]
  000b9	51		 push	 ecx
  000ba	56		 push	 esi
  000bb	e8 00 00 00 00	 call	 _XmlQuoteText

; 7332 : 			fprintf (f, "\n\t\t<keyfile>%s</keyfile>", q); 

  000c0	8d 54 24 14	 lea	 edx, DWORD PTR _q$139701[esp+544]
  000c4	52		 push	 edx
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@CHEIJIHP@?6?7?7?$DMkeyfile?$DO?$CFs?$DM?1keyfile?$DO?$AA@
  000ca	57		 push	 edi
  000cb	e8 00 00 00 00	 call	 _fprintf

; 7333 : 
; 7334 : 			kf = kf->Next;

  000d0	8b b6 04 01 00
	00		 mov	 esi, DWORD PTR [esi+260]
  000d6	83 c4 18	 add	 esp, 24			; 00000018H
  000d9	85 f6		 test	 esi, esi
  000db	75 d3		 jne	 SHORT $LL2@SaveDefaul
$LN1@SaveDefaul:

; 7335 : 		}
; 7336 : 
; 7337 : 		fputs ("\n\t</defaultkeyfiles>", f); 

  000dd	57		 push	 edi
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@DOFEIEI@?6?7?$DM?1defaultkeyfiles?$DO?$AA@
  000e3	e8 00 00 00 00	 call	 _fputs

; 7338 : 
; 7339 : 		XmlWriteFooter (f);

  000e8	57		 push	 edi
  000e9	e8 00 00 00 00	 call	 _XmlWriteFooter

; 7340 : 
; 7341 : 		CheckFileStreamWriteErrors (f, TC_APPD_FILENAME_DEFAULT_KEYFILES);

  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@CEDLNBLM@Default?5Keyfiles?4xml?$AA@
  000f3	57		 push	 edi
  000f4	e8 00 00 00 00	 call	 _CheckFileStreamWriteErrors

; 7342 : 		fclose (f);

  000f9	57		 push	 edi
  000fa	e8 00 00 00 00	 call	 _fclose

; 7343 : 		return;
; 7344 : 	}
; 7345 : }

  000ff	8b 8c 24 28 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+556]
  00106	83 c4 18	 add	 esp, 24			; 00000018H
  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
  0010b	33 cc		 xor	 ecx, esp
  0010d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00112	81 c4 0c 02 00
	00		 add	 esp, 524		; 0000020cH
  00118	c3		 ret	 0
_SaveDefaultKeyFilesParam ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@DGLAJIIH@CONFIRM_SAVE_DEFAULT_KEYFILES?$AA@ ; `string'
EXTRN	_AskWarnYesNo:PROC
;	COMDAT ??_C@_0BO@DGLAJIIH@CONFIRM_SAVE_DEFAULT_KEYFILES?$AA@
CONST	SEGMENT
??_C@_0BO@DGLAJIIH@CONFIRM_SAVE_DEFAULT_KEYFILES?$AA@ DB 'CONFIRM_SAVE_DE'
	DB	'FAULT_KEYFILES', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _KeyfileDefaultsDlg
_TEXT	SEGMENT
_param$ = -8						; size = 8
_hwndDlg$ = 8						; size = 4
_KeyfileDefaultsDlg PROC				; COMDAT

; 7349 : {

  00000	83 ec 08	 sub	 esp, 8

; 7350 : 	KeyFilesDlgParam param;
; 7351 : 
; 7352 : 	param.EnableKeyFiles = defaultKeyFilesParam.EnableKeyFiles;

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR _defaultKeyFilesParam

; 7353 : 	param.FirstKeyFile = defaultKeyFilesParam.FirstKeyFile;

  00008	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _defaultKeyFilesParam+4

; 7354 : 
; 7355 : 	if (DialogBoxParamW (hInst,
; 7356 : 		MAKEINTRESOURCEW (IDD_KEYFILES), hwndDlg,
; 7357 : 		(DLGPROC) KeyFilesDlgProc, (LPARAM) &param) == IDOK)

  0000e	8d 14 24	 lea	 edx, DWORD PTR _param$[esp+8]
  00011	52		 push	 edx
  00012	68 00 00 00 00	 push	 OFFSET _KeyFilesDlgProc@16
  00017	89 44 24 08	 mov	 DWORD PTR _param$[esp+16], eax
  0001b	8b 44 24 14	 mov	 eax, DWORD PTR _hwndDlg$[esp+12]
  0001f	50		 push	 eax
  00020	89 4c 24 10	 mov	 DWORD PTR _param$[esp+24], ecx
  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  0002a	68 f9 01 00 00	 push	 505			; 000001f9H
  0002f	51		 push	 ecx
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  00036	83 f8 01	 cmp	 eax, 1
  00039	75 42		 jne	 SHORT $LN2@KeyfileDef

; 7358 : 	{
; 7359 : 		if (!param.EnableKeyFiles || AskWarnYesNo ("CONFIRM_SAVE_DEFAULT_KEYFILES") == IDYES)

  0003b	83 3c 24 00	 cmp	 DWORD PTR _param$[esp+8], 0
  0003f	74 12		 je	 SHORT $LN1@KeyfileDef
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DGLAJIIH@CONFIRM_SAVE_DEFAULT_KEYFILES?$AA@
  00046	e8 00 00 00 00	 call	 _AskWarnYesNo
  0004b	83 c4 04	 add	 esp, 4
  0004e	83 f8 06	 cmp	 eax, 6
  00051	75 2a		 jne	 SHORT $LN2@KeyfileDef
$LN1@KeyfileDef:

; 7360 : 		{
; 7361 : 			KeyFileRemoveAll (&defaultKeyFilesParam.FirstKeyFile);

  00053	68 04 00 00 00	 push	 OFFSET _defaultKeyFilesParam+4
  00058	e8 00 00 00 00	 call	 _KeyFileRemoveAll

; 7362 : 			defaultKeyFilesParam.EnableKeyFiles = param.EnableKeyFiles;

  0005d	8b 54 24 04	 mov	 edx, DWORD PTR _param$[esp+12]

; 7363 : 			defaultKeyFilesParam.FirstKeyFile = param.FirstKeyFile;

  00061	8b 44 24 08	 mov	 eax, DWORD PTR _param$[esp+16]
  00065	83 c4 04	 add	 esp, 4
  00068	89 15 00 00 00
	00		 mov	 DWORD PTR _defaultKeyFilesParam, edx
  0006e	a3 04 00 00 00	 mov	 DWORD PTR _defaultKeyFilesParam+4, eax

; 7364 : 
; 7365 : 			RestoreDefaultKeyFilesParam ();

  00073	e8 00 00 00 00	 call	 _RestoreDefaultKeyFilesParam

; 7366 : 			SaveDefaultKeyFilesParam ();

  00078	e8 00 00 00 00	 call	 _SaveDefaultKeyFilesParam
$LN2@KeyfileDef:

; 7367 : 		}
; 7368 : 	}
; 7369 : }

  0007d	83 c4 08	 add	 esp, 8
  00080	c3		 ret	 0
_KeyfileDefaultsDlg ENDP
_TEXT	ENDS
PUBLIC	_ChangeMainWindowVisibility
EXTRN	__imp__SetForegroundWindow@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _ChangeMainWindowVisibility
_TEXT	SEGMENT
_ChangeMainWindowVisibility PROC			; COMDAT

; 7453 : 	MainWindowHidden = !MainWindowHidden;

  00000	33 c0		 xor	 eax, eax
  00002	39 05 00 00 00
	00		 cmp	 DWORD PTR _MainWindowHidden, eax
  00008	0f 94 c0	 sete	 al
  0000b	a3 00 00 00 00	 mov	 DWORD PTR _MainWindowHidden, eax

; 7454 : 
; 7455 : 	if (!MainWindowHidden)

  00010	85 c0		 test	 eax, eax
  00012	75 11		 jne	 SHORT $LN2@ChangeMain

; 7456 : 		SetForegroundWindow (MainDlg);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00019	50		 push	 eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetForegroundWindow@4
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainWindowHidden
$LN2@ChangeMain:

; 7457 : 
; 7458 : 	ShowWindow (MainDlg, !MainWindowHidden ? SW_SHOW : SW_HIDE);

  00025	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0002b	f7 d8		 neg	 eax
  0002d	1b c0		 sbb	 eax, eax
  0002f	56		 push	 esi
  00030	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__ShowWindow@8
  00036	83 e0 fb	 and	 eax, -5			; fffffffbH
  00039	83 c0 05	 add	 eax, 5
  0003c	50		 push	 eax
  0003d	51		 push	 ecx
  0003e	ff d6		 call	 esi

; 7459 : 
; 7460 : 	if (!MainWindowHidden)

  00040	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _MainWindowHidden, 0
  00047	75 0b		 jne	 SHORT $LN1@ChangeMain

; 7461 : 		ShowWindow (MainDlg, SW_RESTORE);

  00049	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0004f	6a 09		 push	 9
  00051	52		 push	 edx
  00052	ff d6		 call	 esi
$LN1@ChangeMain:
  00054	5e		 pop	 esi

; 7462 : }

  00055	c3		 ret	 0
_ChangeMainWindowVisibility ENDP
_TEXT	ENDS
PUBLIC	?SetDriverConfigurationFlag@@YAXIH@Z		; SetDriverConfigurationFlag
EXTRN	?SetDriverConfigurationFlag@BootEncryption@CipherShed@@QAEXI_N@Z:PROC ; CipherShed::BootEncryption::SetDriverConfigurationFlag
; Function compile flags: /Ogtpy
;	COMDAT ?SetDriverConfigurationFlag@@YAXIH@Z
_TEXT	SEGMENT
_flag$ = 8						; size = 4
_state$ = 12						; size = 4
?SetDriverConfigurationFlag@@YAXIH@Z PROC		; SetDriverConfigurationFlag, COMDAT

; 8098 : 	BootEncObj->SetDriverConfigurationFlag (flag, state ? true : false);

  00000	83 7c 24 08 00	 cmp	 DWORD PTR _state$[esp-4], 0
  00005	8b 54 24 04	 mov	 edx, DWORD PTR _flag$[esp-4]
  00009	0f 95 c0	 setne	 al
  0000c	0f b6 c8	 movzx	 ecx, al
  0000f	51		 push	 ecx
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 ?SetDriverConfigurationFlag@BootEncryption@CipherShed@@QAEXI_N@Z ; CipherShed::BootEncryption::SetDriverConfigurationFlag

; 8099 : }

  0001c	c3		 ret	 0
?SetDriverConfigurationFlag@@YAXIH@Z ENDP		; SetDriverConfigurationFlag
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0Finally8592@?3??GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@111@Z@QAE@PAX@Z
_TEXT	SEGMENT
??0Finally8592@?3??GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@111@Z@QAE@PAX@Z PROC ; `GetExecutableImageInformation'::`4'::Finally8592::Finally8592, COMDAT
; _this$ = eax
; _a$ = ecx

; 8592 : 	finally_do_arg (void*, buf, { free (finally_arg); });

  00000	89 08		 mov	 DWORD PTR [eax], ecx
  00002	c3		 ret	 0
??0Finally8592@?3??GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@111@Z@QAE@PAX@Z ENDP ; `GetExecutableImageInformation'::`4'::Finally8592::Finally8592
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1Finally8592@?3??GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@111@Z@QAE@XZ
_TEXT	SEGMENT
??1Finally8592@?3??GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@111@Z@QAE@XZ PROC ; `GetExecutableImageInformation'::`4'::Finally8592::~Finally8592, COMDAT
; _this$ = eax

; 8592 : 	finally_do_arg (void*, buf, { free (finally_arg); });

  00000	8b 08		 mov	 ecx, DWORD PTR [eax]
  00002	51		 push	 ecx
  00003	e8 00 00 00 00	 call	 _free
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1Finally8592@?3??GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@111@Z@QAE@XZ ENDP ; `GetExecutableImageInformation'::`4'::Finally8592::~Finally8592
_TEXT	ENDS
EXTRN	__imp__GetWindowRect@8:PROC
;	COMDAT ?eventHandlerActive@?1??HandleDriveListMouseWheelEvent@@9@4HA
_BSS	SEGMENT
?eventHandlerActive@?1??HandleDriveListMouseWheelEvent@@9@4HA DD 01H DUP (?) ; `HandleDriveListMouseWheelEvent'::`2'::eventHandlerActive
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _HandleDriveListMouseWheelEvent
_TEXT	SEGMENT
_listRect$ = -16					; size = 16
_uMsg$ = 8						; size = 4
_wParam$ = 12						; size = 4
_bListMustBePointed$ = 16				; size = 4
_HandleDriveListMouseWheelEvent PROC			; COMDAT
; _lParam$ = edi

; 8964 : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H

; 8965 : 	static BOOL eventHandlerActive = FALSE;
; 8966 : 	if (eventHandlerActive)

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eventHandlerActive@?1??HandleDriveListMouseWheelEvent@@9@4HA, 0
  0000a	74 06		 je	 SHORT $LN5@HandleDriv

; 8967 : 		return 0;

  0000c	33 c0		 xor	 eax, eax

; 8994 : }

  0000e	83 c4 10	 add	 esp, 16			; 00000010H
  00011	c3		 ret	 0
$LN5@HandleDriv:

; 8968 : 
; 8969 : 	RECT listRect;
; 8970 : 	int mouseX = GET_X_LPARAM (lParam);
; 8971 : 	int mouseY = GET_Y_LPARAM (lParam);
; 8972 : 
; 8973 : 	GetWindowRect (GetDlgItem (MainDlg, IDC_DRIVELIST), &listRect);

  00012	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00018	53		 push	 ebx
  00019	55		 push	 ebp
  0001a	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__GetDlgItem@8
  00020	56		 push	 esi
  00021	8d 4c 24 0c	 lea	 ecx, DWORD PTR _listRect$[esp+28]
  00025	51		 push	 ecx
  00026	8b c7		 mov	 eax, edi
  00028	68 ef 03 00 00	 push	 1007			; 000003efH
  0002d	c1 e8 10	 shr	 eax, 16			; 00000010H
  00030	52		 push	 edx
  00031	0f bf f7	 movsx	 esi, di
  00034	0f bf d8	 movsx	 ebx, ax
  00037	ff d5		 call	 ebp
  00039	50		 push	 eax
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 8974 : 
; 8975 : 	// Determine if the mouse pointer is within the main drive list
; 8976 : 	bool bListPointed = (mouseX >= listRect.left && mouseX <= listRect.right
; 8977 : 		&& mouseY >= listRect.top && mouseY <= listRect.bottom);

  00040	3b 74 24 0c	 cmp	 esi, DWORD PTR _listRect$[esp+28]
  00044	7c 16		 jl	 SHORT $LN8@HandleDriv
  00046	3b 74 24 14	 cmp	 esi, DWORD PTR _listRect$[esp+36]
  0004a	7f 10		 jg	 SHORT $LN8@HandleDriv
  0004c	3b 5c 24 10	 cmp	 ebx, DWORD PTR _listRect$[esp+32]
  00050	7c 0a		 jl	 SHORT $LN8@HandleDriv
  00052	3b 5c 24 18	 cmp	 ebx, DWORD PTR _listRect$[esp+40]
  00056	7f 04		 jg	 SHORT $LN8@HandleDriv
  00058	b0 01		 mov	 al, 1
  0005a	eb 02		 jmp	 SHORT $LN9@HandleDriv
$LN8@HandleDriv:
  0005c	32 c0		 xor	 al, al
$LN9@HandleDriv:

; 8978 : 
; 8979 : 	if (bListMustBePointed && bListPointed
; 8980 : 		|| !bListMustBePointed)

  0005e	8b 4c 24 28	 mov	 ecx, DWORD PTR _bListMustBePointed$[esp+24]
  00062	85 c9		 test	 ecx, ecx
  00064	74 04		 je	 SHORT $LN3@HandleDriv
  00066	84 c0		 test	 al, al
  00068	74 58		 je	 SHORT $LN4@HandleDriv
$LN3@HandleDriv:

; 8981 : 	{
; 8982 : 		eventHandlerActive = TRUE;

  0006a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?eventHandlerActive@?1??HandleDriveListMouseWheelEvent@@9@4HA, 1

; 8983 : 
; 8984 : 		if (!bListMustBePointed && bListPointed)

  00074	85 c9		 test	 ecx, ecx
  00076	75 18		 jne	 SHORT $LN10@HandleDriv
  00078	84 c0		 test	 al, al
  0007a	74 14		 je	 SHORT $LN10@HandleDriv

; 8985 : 			SetFocus (GetDlgItem (MainDlg, IDC_DRIVELIST));

  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00081	68 ef 03 00 00	 push	 1007			; 000003efH
  00086	50		 push	 eax
  00087	ff d5		 call	 ebp
  00089	50		 push	 eax
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4
$LN10@HandleDriv:

; 8986 : 
; 8987 : 		SendMessage (GetDlgItem (MainDlg, IDC_DRIVELIST), uMsg, wParam, lParam);

  00090	8b 4c 24 24	 mov	 ecx, DWORD PTR _wParam$[esp+24]
  00094	8b 54 24 20	 mov	 edx, DWORD PTR _uMsg$[esp+24]
  00098	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0009d	57		 push	 edi
  0009e	51		 push	 ecx
  0009f	52		 push	 edx
  000a0	68 ef 03 00 00	 push	 1007			; 000003efH
  000a5	50		 push	 eax
  000a6	ff d5		 call	 ebp
  000a8	50		 push	 eax
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  000af	5e		 pop	 esi
  000b0	5d		 pop	 ebp

; 8988 : 
; 8989 : 		eventHandlerActive = FALSE;

  000b1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?eventHandlerActive@?1??HandleDriveListMouseWheelEvent@@9@4HA, 0

; 8990 : 		return 0;	// Do not process this event any further e.g. to prevent two lists from being scrolled at once

  000bb	33 c0		 xor	 eax, eax
  000bd	5b		 pop	 ebx

; 8994 : }

  000be	83 c4 10	 add	 esp, 16			; 00000010H
  000c1	c3		 ret	 0
$LN4@HandleDriv:
  000c2	5e		 pop	 esi
  000c3	5d		 pop	 ebp

; 8991 : 	}
; 8992 : 
; 8993 : 	return 1;

  000c4	b8 01 00 00 00	 mov	 eax, 1
  000c9	5b		 pop	 ebx

; 8994 : }

  000ca	83 c4 10	 add	 esp, 16			; 00000010H
  000cd	c3		 ret	 0
_HandleDriveListMouseWheelEvent ENDP
_TEXT	ENDS
EXTRN	__imp__CallWindowProcA@20:PROC
EXTRN	__imp__GetWindowLongA@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?MouseWheelProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?MouseWheelProc@@YGJPAUHWND__@@IIJ@Z PROC		; MouseWheelProc, COMDAT

; 8998 : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 8999 : 	WNDPROC wp = (WNDPROC) GetWindowLongPtr (hwnd, GWLP_USERDATA);

  00003	8b 74 24 10	 mov	 esi, DWORD PTR _hwnd$[esp+8]
  00007	57		 push	 edi
  00008	6a eb		 push	 -21			; ffffffebH
  0000a	56		 push	 esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8

; 9000 : 
; 9001 : 	switch (message)

  00011	8b 6c 24 18	 mov	 ebp, DWORD PTR _message$[esp+12]
  00015	8b 7c 24 20	 mov	 edi, DWORD PTR _lParam$[esp+12]
  00019	8b d8		 mov	 ebx, eax
  0001b	81 fd 0a 02 00
	00		 cmp	 ebp, 522		; 0000020aH
  00021	75 1f		 jne	 SHORT $LN1@MouseWheel

; 9002 : 	{
; 9003 : 	case WM_MOUSEWHEEL:
; 9004 : 
; 9005 : 		if (HandleDriveListMouseWheelEvent (message, wParam, lParam, TRUE) == 0)

  00023	8b 44 24 1c	 mov	 eax, DWORD PTR _wParam$[esp+12]
  00027	6a 01		 push	 1
  00029	50		 push	 eax
  0002a	68 0a 02 00 00	 push	 522			; 0000020aH
  0002f	e8 00 00 00 00	 call	 _HandleDriveListMouseWheelEvent
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH
  00037	85 c0		 test	 eax, eax
  00039	75 07		 jne	 SHORT $LN1@MouseWheel
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	5b		 pop	 ebx

; 9010 : }

  0003f	c2 10 00	 ret	 16			; 00000010H
$LN1@MouseWheel:

; 9006 : 			return 0;	// Do not process this event any further e.g. to prevent two lists from being scrolled at once
; 9007 : 	}
; 9008 : 
; 9009 : 	return CallWindowProc (wp, hwnd, message, wParam, lParam);

  00042	8b 4c 24 1c	 mov	 ecx, DWORD PTR _wParam$[esp+12]
  00046	57		 push	 edi
  00047	51		 push	 ecx
  00048	55		 push	 ebp
  00049	56		 push	 esi
  0004a	53		 push	 ebx
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5d		 pop	 ebp
  00054	5b		 pop	 ebx

; 9010 : }

  00055	c2 10 00	 ret	 16			; 00000010H
?MouseWheelProc@@YGJPAUHWND__@@IIJ@Z ENDP		; MouseWheelProc
_TEXT	ENDS
PUBLIC	_HookMouseWheel
EXTRN	__imp__SetWindowLongA@12:PROC
; Function compile flags: /Ogtpy
;	COMDAT _HookMouseWheel
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_ctrlId$ = 12						; size = 4
_HookMouseWheel PROC					; COMDAT

; 9015 : 	HWND hwndCtrl = GetDlgItem (hwndDlg, ctrlId);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _ctrlId$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR _hwndDlg$[esp-4]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	50		 push	 eax
  0000b	51		 push	 ecx
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00012	8b f0		 mov	 esi, eax

; 9016 : 
; 9017 : 	SetWindowLongPtr (hwndCtrl, GWLP_USERDATA, (LONG_PTR) GetWindowLongPtr (hwndCtrl, GWLP_WNDPROC));

  00014	6a fc		 push	 -4			; fffffffcH
  00016	56		 push	 esi
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  0001d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowLongA@12
  00023	50		 push	 eax
  00024	6a eb		 push	 -21			; ffffffebH
  00026	56		 push	 esi
  00027	ff d7		 call	 edi

; 9018 : 	SetWindowLongPtr (hwndCtrl, GWLP_WNDPROC, (LONG_PTR) MouseWheelProc);

  00029	68 00 00 00 00	 push	 OFFSET ?MouseWheelProc@@YGJPAUHWND__@@IIJ@Z ; MouseWheelProc
  0002e	6a fc		 push	 -4			; fffffffcH
  00030	56		 push	 esi
  00031	ff d7		 call	 edi
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi

; 9019 : }

  00035	c3		 ret	 0
_HookMouseWheel ENDP
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 1705 : 		return (_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  00005	0f 94 c0	 sete	 al

; 1706 : 		}

  00008	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
PUBLIC	??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R13A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,0,4,64)'
EXTRN	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R13A@3EA@?$_Iosb@H@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
rdata$r	SEGMENT
??_R13A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,0,4,64)'
	DD	00H
	DD	04H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 63   : 		{	// destroy the object

  00000	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@

; 64   : 		}

  0000e	c3		 ret	 0
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 39   : 		}

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
; Function compile flags: /Ogtpy
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::rdbuf, COMDAT
; _this$ = ecx

; 85   : 		return (_Mystrbuf);

  00000	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]

; 86   : 		}

  00003	c3		 ret	 0
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::rdbuf
_TEXT	ENDS
PUBLIC	??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
PUBLIC	??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a f8 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-8], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@

; 43   : 		}

  0000e	c3		 ret	 0
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length, COMDAT
; _this$ = ecx

; 1661 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1662 : 		}

  00003	c3		 ret	 0
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
_TEXT	ENDS
PUBLIC	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
_TEXT	ENDS
PUBLIC	?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty, COMDAT
; _this$ = ecx

; 1705 : 		return (_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  00005	0f 94 c0	 sete	 al

; 1706 : 		}

  00008	c3		 ret	 0
?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty
_TEXT	ENDS
PUBLIC	?size@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?size@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

  00000	56		 push	 esi

; 726  : 		return (_Mylast - _Myfirst);

  00001	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]
  00004	2b 71 0c	 sub	 esi, DWORD PTR [ecx+12]
  00007	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0000c	f7 ee		 imul	 esi
  0000e	03 d6		 add	 edx, esi
  00010	c1 fa 06	 sar	 edx, 6
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	03 c2		 add	 eax, edx
  0001a	5e		 pop	 esi

; 727  : 		}

  0001b	c3		 ret	 0
?size@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator[]
EXTRN	__invalid_parameter_noinfo:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

  00003	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00006	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  00009	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0000e	f7 e9		 imul	 ecx
  00010	03 d1		 add	 edx, ecx
  00012	c1 fa 06	 sar	 edx, 6
  00015	8b c2		 mov	 eax, edx
  00017	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001a	57		 push	 edi
  0001b	8b 7c 24 0c	 mov	 edi, DWORD PTR __Pos$[esp+4]
  0001f	03 c2		 add	 eax, edx
  00021	3b f8		 cmp	 edi, eax
  00023	72 05		 jb	 SHORT $LN3@operator@2
  00025	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@2:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

  0002a	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0002d	8b cf		 mov	 ecx, edi
  0002f	c1 e1 04	 shl	 ecx, 4
  00032	2b cf		 sub	 ecx, edi
  00034	5f		 pop	 edi
  00035	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  00038	5e		 pop	 esi

; 786  : 		}

  00039	c2 04 00	 ret	 4
??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator[]
_TEXT	ENDS
PUBLIC	?empty@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::empty
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?empty@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NXZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::empty, COMDAT
; _this$ = ecx

; 630  : 		return (_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00005	0f 94 c0	 sete	 al

; 631  : 		}

  00008	c3		 ret	 0
?empty@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NXZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::empty
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator*, COMDAT
; _this$ = ecx

; 91   : 		{	// return designated object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 99   : 			_SCL_SECURE_OUT_OF_RANGE;
; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN19@operator@3
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN15@operator@3
$LN19@operator@3:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN16@operator@3
$LN15@operator@3:
  00018	33 c0		 xor	 eax, eax
$LN16@operator@3:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 0a		 jb	 SHORT $LN20@operator@3
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	5e		 pop	 esi

; 107  : 		}

  0002b	c3		 ret	 0
$LN20@operator@3:

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  0002c	8b c1		 mov	 eax, ecx
  0002e	5e		 pop	 esi

; 107  : 		}

  0002f	c3		 ret	 0
??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator*
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator*
; Function compile flags: /Ogtpy
;	COMDAT ??D?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ PROC ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator*, COMDAT
; _this$ = ecx

; 91   : 		{	// return designated object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 99   : 			_SCL_SECURE_OUT_OF_RANGE;
; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN19@operator@4
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN15@operator@4
$LN19@operator@4:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN16@operator@4
$LN15@operator@4:
  00018	33 c0		 xor	 eax, eax
$LN16@operator@4:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 0a		 jb	 SHORT $LN20@operator@4
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	5e		 pop	 esi

; 107  : 		}

  0002b	c3		 ret	 0
$LN20@operator@4:

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  0002c	8b c1		 mov	 eax, ecx
  0002e	5e		 pop	 esi

; 107  : 		}

  0002f	c3		 ret	 0
??D?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ ENDP ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator*
_TEXT	ENDS
PUBLIC	??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
EXTRN	??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_iostream<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	03H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	09H
	DD	FLAT:??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 918  : 		{	// destroy the object

  00000	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a f4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@

; 919  : 		}

  0000e	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	c7 44 0a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0001c	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  0001f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00022	c7 44 0a f4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0002a	c3		 ret	 0
??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??_Glocale@std@@QAEPAXI@Z			; std::locale::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_Glocale@std@@QAEPAXI@Z
_TEXT	SEGMENT
__Lock$151144 = -4					; size = 4
___flags$ = 8						; size = 4
??_Glocale@std@@QAEPAXI@Z PROC				; std::locale::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	8b d9		 mov	 ebx, ecx
  00004	57		 push	 edi
  00005	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00007	85 ff		 test	 edi, edi
  00009	74 3f		 je	 SHORT $LN7@scalar@7
  0000b	6a 00		 push	 0
  0000d	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$151144[esp+16]
  00011	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00016	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00019	85 c0		 test	 eax, eax
  0001b	76 09		 jbe	 SHORT $LN9@scalar@7
  0001d	83 f8 ff	 cmp	 eax, -1
  00020	73 04		 jae	 SHORT $LN9@scalar@7
  00022	48		 dec	 eax
  00023	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN9@scalar@7:
  00026	56		 push	 esi
  00027	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0002a	f7 de		 neg	 esi
  0002c	1b f6		 sbb	 esi, esi
  0002e	f7 d6		 not	 esi
  00030	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$151144[esp+16]
  00034	23 f7		 and	 esi, edi
  00036	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0003b	85 f6		 test	 esi, esi
  0003d	74 0a		 je	 SHORT $LN13@scalar@7
  0003f	8b 06		 mov	 eax, DWORD PTR [esi]
  00041	8b 10		 mov	 edx, DWORD PTR [eax]
  00043	6a 01		 push	 1
  00045	8b ce		 mov	 ecx, esi
  00047	ff d2		 call	 edx
$LN13@scalar@7:
  00049	5e		 pop	 esi
$LN7@scalar@7:
  0004a	f6 44 24 10 01	 test	 BYTE PTR ___flags$[esp+8], 1
  0004f	74 09		 je	 SHORT $LN12@scalar@7
  00051	53		 push	 ebx
  00052	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00057	83 c4 04	 add	 esp, 4
$LN12@scalar@7:
  0005a	5f		 pop	 edi
  0005b	8b c3		 mov	 eax, ebx
  0005d	5b		 pop	 ebx
  0005e	59		 pop	 ecx
  0005f	c2 04 00	 ret	 4
??_Glocale@std@@QAEPAXI@Z ENDP				; std::locale::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00003	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 f8 00
	00 00 00	 mov	 DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00003	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  00011	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0001f	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00022	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00025	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0002d	50		 push	 eax
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00034	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00039	59		 pop	 ecx
  0003a	c3		 ret	 0
??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@2:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
_TEXT	SEGMENT
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ PROC ; std::basic_ios<char,std::char_traits<char> >::fill, COMDAT
; _this$ = ecx

; 106  : 		return (_Fillch);

  00000	8a 41 30	 mov	 al, BYTE PTR [ecx+48]

; 107  : 		}

  00003	c3		 ret	 0
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::fill
_TEXT	ENDS
PUBLIC	??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
PUBLIC	??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
EXTRN	??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
CONST	ENDS
;	COMDAT ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 146  : 	__CLR_OR_THIS_CALL basic_ios()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 147  : 		{	// default constructor, do nothing
; 148  : 		}

  00008	c3		 ret	 0
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	56		 push	 esi
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000f	83 c4 04	 add	 esp, 4
  00012	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00017	74 09		 je	 SHORT $LN9@scalar@8
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	83 c4 04	 add	 esp, 4
$LN9@scalar@8:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c2 04 00	 ret	 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubsync, COMDAT
; _this$ = ecx

; 100  : 		return (sync());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00005	ff e2		 jmp	 edx
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
_TEXT	ENDS
PUBLIC	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
EXTRN	?_Unlock@_Mutex@std@@QAEXXZ:PROC		; std::_Mutex::_Unlock
; Function compile flags: /Ogtpy
;	COMDAT ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 178  : 		_Mylock._Unlock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
PUBLIC	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
; Function compile flags: /Ogtpy
;	COMDAT ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::eback, COMDAT
; _this$ = ecx

; 185  : 		return (*_IGfirst);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 186  : 		}

  00005	c3		 ret	 0
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::eback
_TEXT	ENDS
PUBLIC	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
; Function compile flags: /Ogtpy
;	COMDAT ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::gptr, COMDAT
; _this$ = ecx

; 190  : 		return (*_IGnext);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 191  : 		}

  00005	c3		 ret	 0
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gptr
_TEXT	ENDS
PUBLIC	?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
; Function compile flags: /Ogtpy
;	COMDAT ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbase, COMDAT
; _this$ = ecx

; 195  : 		return (*_IPfirst);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 196  : 		}

  00005	c3		 ret	 0
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbase
_TEXT	ENDS
PUBLIC	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
; Function compile flags: /Ogtpy
;	COMDAT ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pptr, COMDAT
; _this$ = ecx

; 200  : 		return (*_IPnext);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 201  : 		}

  00005	c3		 ret	 0
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pptr
_TEXT	ENDS
PUBLIC	?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
; Function compile flags: /Ogtpy
;	COMDAT ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::egptr, COMDAT
; _this$ = ecx

; 205  : 		return (*_IGnext + *_IGcount);

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	03 01		 add	 eax, DWORD PTR [ecx]

; 206  : 		}

  0000a	c3		 ret	 0
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::egptr
_TEXT	ENDS
PUBLIC	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
; Function compile flags: /Ogtpy
;	COMDAT ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setg, COMDAT
; _this$ = ecx

; 216  : 		*_IGfirst = _First;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00007	89 10		 mov	 DWORD PTR [eax], edx

; 217  : 		*_IGnext = _Next;

  00009	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __Next$[esp-4]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 218  : 		*_IGcount = (int)(_Last - _Next);

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0001b	89 10		 mov	 DWORD PTR [eax], edx

; 219  : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setg
_TEXT	ENDS
PUBLIC	?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
; Function compile flags: /Ogtpy
;	COMDAT ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::epptr, COMDAT
; _this$ = ecx

; 223  : 		return (*_IPnext + *_IPcount);

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	03 01		 add	 eax, DWORD PTR [ecx]

; 224  : 		}

  0000a	c3		 ret	 0
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::epptr
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
; Function compile flags: /Ogtpy
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 257  : 		*_IPfirst = _First;

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00007	89 02		 mov	 DWORD PTR [edx], eax

; 258  : 		*_IPnext = _First;

  00009	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 259  : 		*_IPcount = (int)(_Last - _First);

  0000e	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00012	2b d0		 sub	 edx, eax
  00014	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00017	89 10		 mov	 DWORD PTR [eax], edx

; 260  : 		}

  00019	c2 08 00	 ret	 8
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
; Function compile flags: /Ogtpy
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 264  : 		*_IPfirst = _First;

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00007	89 10		 mov	 DWORD PTR [eax], edx

; 265  : 		*_IPnext = _Next;

  00009	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __Next$[esp-4]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 266  : 		*_IPcount = (int)(_Last - _Next);

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0001b	89 10		 mov	 DWORD PTR [eax], edx

; 267  : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
PUBLIC	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
; Function compile flags: /Ogtpy
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc, COMDAT
; _this$ = ecx

; 271  : 		--*_IPcount;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 272  : 		return ((*_IPnext)++);

  00005	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 273  : 		}

  0000f	c3		 ret	 0
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
_TEXT	ENDS
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
; Function compile flags: /Ogtpy
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT
; _this$ = ecx

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 06		 je	 SHORT $LN3@Pnavail
  00008	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 278  : 		}

  0000d	c3		 ret	 0
$LN3@Pnavail:

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  0000e	33 c0		 xor	 eax, eax

; 278  : 		}

  00010	c3		 ret	 0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@3
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@3:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::capacity
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::capacity, COMDAT
; _this$ = ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	85 c0		 test	 eax, eax
  00005	75 01		 jne	 SHORT $LN3@capacity

; 636  : 		}

  00007	c3		 ret	 0
$LN3@capacity:

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00008	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0000b	2b c8		 sub	 ecx, eax
  0000d	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00012	f7 e9		 imul	 ecx
  00014	c1 fa 06	 sar	 edx, 6
  00017	8b c2		 mov	 eax, edx
  00019	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001c	03 c2		 add	 eax, edx

; 636  : 		}

  0001e	c3		 ret	 0
?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::size, COMDAT
; _this$ = ecx

; 726  : 		return (_Mylast - _Myfirst);

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	2b 51 0c	 sub	 edx, DWORD PTR [ecx+12]
  00006	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 06	 sar	 edx, 6
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx

; 727  : 		}

  00017	c3		 ret	 0
?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::size
_TEXT	ENDS
PUBLIC	??0?$allocator@UHostDevice@@@std@@QAE@XZ	; std::allocator<HostDevice>::allocator<HostDevice>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UHostDevice@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UHostDevice@@@std@@QAE@XZ PROC		; std::allocator<HostDevice>::allocator<HostDevice>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@UHostDevice@@@std@@QAE@XZ ENDP		; std::allocator<HostDevice>::allocator<HostDevice>
_TEXT	ENDS
PUBLIC	??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z	; std::allocator<HostDevice>::allocator<HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z PROC	; std::allocator<HostDevice>::allocator<HostDevice>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<HostDevice>::allocator<HostDevice>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z ; std::allocator<HostDevice>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z PROC ; std::allocator<HostDevice>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z ENDP ; std::allocator<HostDevice>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::capacity
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::capacity, COMDAT
; _this$ = ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	85 c0		 test	 eax, eax
  00005	75 01		 jne	 SHORT $LN3@capacity@2

; 636  : 		}

  00007	c3		 ret	 0
$LN3@capacity@2:

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00008	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0000b	2b c8		 sub	 ecx, eax
  0000d	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00012	f7 e9		 imul	 ecx
  00014	03 d1		 add	 edx, ecx
  00016	c1 fa 06	 sar	 edx, 6
  00019	8b c2		 mov	 eax, edx
  0001b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001e	03 c2		 add	 eax, edx

; 636  : 		}

  00020	c3		 ret	 0
?capacity@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::capacity
_TEXT	ENDS
PUBLIC	??0?$allocator@UFavoriteVolume@CipherShed@@@std@@QAE@XZ ; std::allocator<CipherShed::FavoriteVolume>::allocator<CipherShed::FavoriteVolume>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UFavoriteVolume@CipherShed@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UFavoriteVolume@CipherShed@@@std@@QAE@XZ PROC ; std::allocator<CipherShed::FavoriteVolume>::allocator<CipherShed::FavoriteVolume>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@UFavoriteVolume@CipherShed@@@std@@QAE@XZ ENDP ; std::allocator<CipherShed::FavoriteVolume>::allocator<CipherShed::FavoriteVolume>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@I@Z ; std::allocator<CipherShed::FavoriteVolume>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@I@Z PROC ; std::allocator<CipherShed::FavoriteVolume>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@I@Z ENDP ; std::allocator<CipherShed::FavoriteVolume>::deallocate
_TEXT	ENDS
PUBLIC	?_Nextnode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Nextnode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Nextnode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Nextnode, COMDAT

; 115  : 		return ((_Nodepref)(*_Pnode)._Next);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 116  : 		}

  00004	c3		 ret	 0
?_Nextnode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Prevnode
; Function compile flags: /Ogtpy
;	COMDAT ?_Prevnode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Prevnode, COMDAT

; 120  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 121  : 		}

  00007	c3		 ret	 0
?_Prevnode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Prevnode
_TEXT	ENDS
PUBLIC	?_Myval@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAUFavoriteVolume@CipherShed@@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Myval
; Function compile flags: /Ogtpy
;	COMDAT ?_Myval@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAUFavoriteVolume@CipherShed@@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAUFavoriteVolume@CipherShed@@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Myval, COMDAT

; 125  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 126  : 		}

  00007	c3		 ret	 0
?_Myval@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAAAUFavoriteVolume@CipherShed@@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Myval
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::deallocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator-
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator-, COMDAT
; _this$ = ecx

; 186  : 		{	// return difference of iterators

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@5
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@5
$LN4@operator@5:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@5:

; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	2b 4f 04	 sub	 ecx, DWORD PTR [edi+4]
  0001d	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00022	f7 e9		 imul	 ecx
  00024	c1 fa 06	 sar	 edx, 6
  00027	8b c2		 mov	 eax, edx
  00029	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002c	5f		 pop	 edi
  0002d	03 c2		 add	 eax, edx
  0002f	5e		 pop	 esi

; 195  : 		}

  00030	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator-
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??E?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??E?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx

; 235  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 236  : 
; 237  :  #if _HAS_ITERATOR_DEBUGGING
; 238  : 			if (this->_Mycont == 0
; 239  : 				|| _Ptr == 0
; 240  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 241  : 				{
; 242  : 				_DEBUG_ERROR("list iterator not incrementable");
; 243  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 244  : 				}
; 245  :  #else
; 246  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN23@operator@6
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 247  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN17@operator@6
$LN23@operator@6:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN18@operator@6
$LN17@operator@6:
  00018	33 c0		 xor	 eax, eax
$LN18@operator@6:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN3@operator@6
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@6:

; 248  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 249  : 
; 250  : 			_Ptr = _Nextnode(_Ptr);

  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	8b 02		 mov	 eax, DWORD PTR [edx]
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 251  : 			return (*this);

  0002f	8b c6		 mov	 eax, esi
  00031	5e		 pop	 esi

; 252  : 			}

  00032	c3		 ret	 0
??E?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator++
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV012@H@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV012@H@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx

; 255  : 			{	// postincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 256  : 			_Myt_iter _Tmp = *this;

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00008	57		 push	 edi
  00009	8b 7c 24 0c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000d	89 07		 mov	 DWORD PTR [edi], eax
  0000f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 257  : 			++*this;

  00012	85 c0		 test	 eax, eax
  00014	75 0b		 jne	 SHORT $LN25@operator@7
  00016	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0001b	8b 06		 mov	 eax, DWORD PTR [esi]
  0001d	85 c0		 test	 eax, eax
  0001f	74 04		 je	 SHORT $LN19@operator@7
$LN25@operator@7:
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	eb 02		 jmp	 SHORT $LN20@operator@7
$LN19@operator@7:
  00025	33 c0		 xor	 eax, eax
$LN20@operator@7:
  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	3b 50 14	 cmp	 edx, DWORD PTR [eax+20]
  0002d	75 05		 jne	 SHORT $LN5@operator@7
  0002f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@7:
  00034	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]

; 258  : 			return (_Tmp);

  00039	8b c7		 mov	 eax, edi
  0003b	5f		 pop	 edi
  0003c	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0003f	5e		 pop	 esi

; 259  : 			}

  00040	c2 08 00	 ret	 8
??E?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV012@H@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator++
_TEXT	ENDS
PUBLIC	??8?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator==, COMDAT
; _this$ = ecx

; 290  : 			{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 291  : 
; 292  :  #if _HAS_ITERATOR_DEBUGGING
; 293  : 			_Compat(_Right);
; 294  :  #else
; 295  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@8
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@8
$LN4@operator@8:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@8:

; 296  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 297  : 
; 298  : 			return (_Ptr == _Right._Ptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 299  : 			}

  00026	c2 04 00	 ret	 4
??8?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@3@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::_Mynode
; Function compile flags: /Ogtpy
;	COMDAT ?_Mynode@?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@3@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::_Mynode, COMDAT
; _this$ = ecx

; 308  : 			return (_Ptr);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 309  : 			}

  00003	c3		 ret	 0
?_Mynode@?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@3@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::_Mynode
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 300  : 		{	// discard any allocated buffer and clear pointers

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 301  : 		if (_Mystate & _Allocated)

  00003	f6 46 40 01	 test	 BYTE PTR [esi+64], 1
  00007	74 0e		 je	 SHORT $LN16@Tidy

; 302  : 			_Al.deallocate(_Mysb::eback(),
; 303  : 				(_Mysb::pptr() != 0 ? _Mysb::epptr()
; 304  : 					: _Mysb::egptr()) - _Mysb::eback());

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN16@Tidy:

; 305  : 		_Mysb::setg(0, 0, 0);

  00017	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0001a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00020	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00023	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00029	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0002c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 306  : 		_Mysb::setp(0, 0);

  00032	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00035	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0003b	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0003e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00044	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00047	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 307  : 		_Seekhigh = 0;
; 308  : 		_Mystate &= ~_Allocated;

  0004d	83 66 40 fe	 and	 DWORD PTR [esi+64], -2	; fffffffeH
  00051	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00058	5e		 pop	 esi

; 309  : 		}

  00059	c3		 ret	 0
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Myval@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Myval
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Myval@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@Z PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Myval, COMDAT

; 125  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 126  : 		}

  00007	c3		 ret	 0
?_Myval@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@Z ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Myval
_TEXT	ENDS
PUBLIC	??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 116  : 			return (_Ok);

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 117  : 			}

  00003	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1079 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00000	8b 54 24 18	 mov	 edx, DWORD PTR __Val$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00009	56		 push	 esi
  0000a	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  0000e	52		 push	 edx
  0000f	8b 54 24 1c	 mov	 edx, DWORD PTR __Fill$[esp+4]
  00013	52		 push	 edx
  00014	8b 54 24 1c	 mov	 edx, DWORD PTR __Iosbase$[esp+8]
  00018	52		 push	 edx
  00019	8b 54 24 1c	 mov	 edx, DWORD PTR __Dest$[esp+16]
  0001d	52		 push	 edx
  0001e	8b 54 24 1c	 mov	 edx, DWORD PTR __Dest$[esp+16]
  00022	52		 push	 edx
  00023	56		 push	 esi
  00024	ff d0		 call	 eax
  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi

; 1080 : 		}

  00029	c2 18 00	 ret	 24			; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
; Function compile flags: /Ogtpy
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1085 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00000	8b 54 24 18	 mov	 edx, DWORD PTR __Val$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00009	56		 push	 esi
  0000a	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  0000e	52		 push	 edx
  0000f	8b 54 24 1c	 mov	 edx, DWORD PTR __Fill$[esp+4]
  00013	52		 push	 edx
  00014	8b 54 24 1c	 mov	 edx, DWORD PTR __Iosbase$[esp+8]
  00018	52		 push	 edx
  00019	8b 54 24 1c	 mov	 edx, DWORD PTR __Dest$[esp+16]
  0001d	52		 push	 edx
  0001e	8b 54 24 1c	 mov	 edx, DWORD PTR __Dest$[esp+16]
  00022	52		 push	 edx
  00023	56		 push	 esi
  00024	ff d0		 call	 eax
  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi

; 1086 : 		}

  00029	c2 18 00	 ret	 24			; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
PUBLIC	??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
__Sb$ = 8						; size = 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 583  : 		{	// construct from stream buffer _Sb

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Sb$[esp-4]
  00006	c6 00 00	 mov	 BYTE PTR [eax], 0
  00009	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 584  : 		}

  0000c	c2 04 00	 ret	 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
; Function compile flags: /Ogtpy
;	COMDAT ?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed, COMDAT
; _this$ = ecx

; 617  : 		return (_Failed);

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 618  : 		}

  00002	c3		 ret	 0
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
EXTRN	?_Addstd@ios_base@std@@SAXPAV12@@Z:PROC		; std::ios_base::_Addstd
;	COMDAT ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0
__ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
_TEXT	SEGMENT
$T151446 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
__Addit$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 56   : 	__CLR_OR_THIS_CALL basic_ostream(_Uninitialized, bool _Addit = true)

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 08	 mov	 DWORD PTR $T151446[esp+28], eax
  00030	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+24], eax
  00034	74 19		 je	 SHORT $LN2@basic_ostr
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
  0003c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  00043	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  00047	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR $T151446[esp+28], 1
$LN2@basic_ostr:
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00054	c7 04 16 00 00
	00 00		 mov	 DWORD PTR [esi+edx], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@

; 57   : 		{	// construct uninitialized
; 58   : 		if (_Addit)

  0005b	38 44 24 24	 cmp	 BYTE PTR __Addit$[esp+24], al
  0005f	74 10		 je	 SHORT $LN13@basic_ostr

; 59   : 			ios_base::_Addstd(this);	// suppress for basic_iostream

  00061	8b 06		 mov	 eax, DWORD PTR [esi]
  00063	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00066	03 c6		 add	 eax, esi
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  0006e	83 c4 04	 add	 esp, 4
$LN13@basic_ostr:

; 60   : 		}

  00071	8b c6		 mov	 eax, esi
  00073	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5e		 pop	 esi
  00080	83 c4 14	 add	 esp, 20			; 00000014H
  00083	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T151446[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN8@basic_ostr
  0000c	83 65 ec fe	 and	 DWORD PTR $T151446[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 04	 add	 ecx, 4
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN8@basic_ostr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
PUBLIC	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::tie, COMDAT
; _this$ = ecx

; 73   : 		return (_Tiestr);

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 74   : 		}

  00003	c3		 ret	 0
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::tie
_TEXT	ENDS
PUBLIC	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
EXTRN	?_Lock@_Mutex@std@@QAEXXZ:PROC			; std::_Mutex::_Lock
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 173  : 		_Mylock._Lock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@4
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@4:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@ABV01@@Z		; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@_W@std@@QAE@ABV01@@Z PROC		; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@_W@std@@QAE@ABV01@@Z ENDP		; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z	; std::allocator<wchar_t>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::deallocate
_TEXT	ENDS
PUBLIC	?_Nextnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Nextnode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Nextnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Nextnode, COMDAT

; 115  : 		return ((_Nodepref)(*_Pnode)._Next);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 116  : 		}

  00004	c3		 ret	 0
?_Nextnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Prevnode
; Function compile flags: /Ogtpy
;	COMDAT ?_Prevnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Prevnode, COMDAT

; 120  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 121  : 		}

  00007	c3		 ret	 0
?_Prevnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Prevnode
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::deallocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@UFavoriteVolume@CipherShed@@@std@@QAE@ABV01@@Z ; std::allocator<CipherShed::FavoriteVolume>::allocator<CipherShed::FavoriteVolume>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@UFavoriteVolume@CipherShed@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UFavoriteVolume@CipherShed@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CipherShed::FavoriteVolume>::allocator<CipherShed::FavoriteVolume>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UFavoriteVolume@CipherShed@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CipherShed::FavoriteVolume>::allocator<CipherShed::FavoriteVolume>
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator==
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@9
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@9
$LN4@operator@9:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@9:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 212  : 		}

  00026	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator==
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator-
; Function compile flags: /Ogtpy
;	COMDAT ??G?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator-, COMDAT
; _this$ = ecx

; 186  : 		{	// return difference of iterators

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@10
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@10
$LN4@operator@10:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@10:

; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	2b 4f 04	 sub	 ecx, DWORD PTR [edi+4]
  0001d	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00022	f7 e9		 imul	 ecx
  00024	03 d1		 add	 edx, ecx
  00026	c1 fa 06	 sar	 edx, 6
  00029	8b c2		 mov	 eax, edx
  0002b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002e	5f		 pop	 edi
  0002f	03 c2		 add	 eax, edx
  00031	5e		 pop	 esi

; 195  : 		}

  00032	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator-
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@11
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@11
$LN4@operator@11:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@11:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 212  : 		}

  00026	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator==
_TEXT	ENDS
PUBLIC	?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z
_TEXT	SEGMENT
__Mode$ = 8						; size = 4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate, COMDAT
; _this$ = ecx

; 318  : 		_Strstate _State = (_Strstate)0;
; 319  : 		if (!(_Mode & ios_base::in))

  00000	8a 4c 24 04	 mov	 cl, BYTE PTR __Mode$[esp-4]
  00004	33 c0		 xor	 eax, eax
  00006	f6 c1 01	 test	 cl, 1
  00009	75 05		 jne	 SHORT $LN4@Getstate

; 320  : 			_State |= _Noread;

  0000b	b8 04 00 00 00	 mov	 eax, 4
$LN4@Getstate:

; 321  : 		if (!(_Mode & ios_base::out))

  00010	f6 c1 02	 test	 cl, 2
  00013	75 03		 jne	 SHORT $LN3@Getstate

; 322  : 			_State |= _Constant;

  00015	83 c8 02	 or	 eax, 2
$LN3@Getstate:

; 323  : 		if (_Mode & ios_base::app)

  00018	f6 c1 08	 test	 cl, 8
  0001b	74 03		 je	 SHORT $LN2@Getstate

; 324  : 			_State |= _Append;

  0001d	83 c8 08	 or	 eax, 8
$LN2@Getstate:

; 325  : 		if (_Mode & ios_base::ate)

  00020	f6 c1 04	 test	 cl, 4
  00023	74 03		 je	 SHORT $LN1@Getstate

; 326  : 			_State |= _Atend;

  00025	83 c8 10	 or	 eax, 16			; 00000010H
$LN1@Getstate:

; 327  : 		return (_State);
; 328  : 		}

  00028	c2 04 00	 ret	 4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
_TEXT	ENDS
PUBLIC	?_Nextnode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAAAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Nextnode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Nextnode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAAAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAAAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@@Z PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Nextnode, COMDAT

; 115  : 		return ((_Nodepref)(*_Pnode)._Next);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 116  : 		}

  00004	c3		 ret	 0
?_Nextnode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAAAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@@Z ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAAAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Prevnode
; Function compile flags: /Ogtpy
;	COMDAT ?_Prevnode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAAAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAAAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@@Z PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Prevnode, COMDAT

; 120  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 121  : 		}

  00007	c3		 ret	 0
?_Prevnode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAAAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@@Z ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Prevnode
_TEXT	ENDS
PUBLIC	??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@I@Z ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@I@Z PROC ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@I@Z ENDP ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??8?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NABV012@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator==
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??8?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NABV012@@Z PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator==, COMDAT
; _this$ = ecx

; 290  : 			{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 291  : 
; 292  :  #if _HAS_ITERATOR_DEBUGGING
; 293  : 			_Compat(_Right);
; 294  :  #else
; 295  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@12
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@12
$LN4@operator@12:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@12:

; 296  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 297  : 
; 298  : 			return (_Ptr == _Right._Ptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 299  : 			}

  00026	c2 04 00	 ret	 4
??8?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NABV012@@Z ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::_Mynode
; Function compile flags: /Ogtpy
;	COMDAT ?_Mynode@?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@XZ
_TEXT	SEGMENT
?_Mynode@?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@XZ PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::_Mynode, COMDAT
; _this$ = ecx

; 308  : 			return (_Ptr);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 309  : 			}

  00003	c3		 ret	 0
?_Mynode@?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@XZ ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::_Mynode
_TEXT	ENDS
PUBLIC	??Y?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??Y?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 169  : 		{	// increment by integer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 170  : 		if (this->_Mycont != _IGNORE_MYCONT)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  0000a	83 f8 fc	 cmp	 eax, -4			; fffffffcH
  0000d	74 40		 je	 SHORT $LN1@operator@13

; 171  : 		{
; 172  : 			_SCL_SECURE_VALIDATE(this->_Has_container());

  0000f	85 c0		 test	 eax, eax
  00011	75 05		 jne	 SHORT $LN8@operator@13
  00013	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@operator@13:

; 173  : 			_SCL_SECURE_VALIDATE_RANGE(

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
  0001a	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0001e	72 05		 jb	 SHORT $LN17@operator@13
  00020	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00023	eb 03		 jmp	 SHORT $LN18@operator@13
$LN17@operator@13:
  00025	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
$LN18@operator@13:
  00028	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002b	55		 push	 ebp
  0002c	8b 68 14	 mov	 ebp, DWORD PTR [eax+20]
  0002f	03 ea		 add	 ebp, edx
  00031	03 cf		 add	 ecx, edi
  00033	3b cd		 cmp	 ecx, ebp
  00035	5d		 pop	 ebp
  00036	77 12		 ja	 SHORT $LN4@operator@13
  00038	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0003c	72 05		 jb	 SHORT $LN21@operator@13
  0003e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00041	eb 03		 jmp	 SHORT $LN22@operator@13
$LN21@operator@13:
  00043	83 c0 04	 add	 eax, 4
$LN22@operator@13:
  00046	3b c8		 cmp	 ecx, eax
  00048	73 05		 jae	 SHORT $LN1@operator@13
$LN4@operator@13:

; 174  : 				_Myptr + _Off <= (((_Mystring *)this->_Mycont)->_Myptr() + ((_Mystring *)this->_Mycont)->_Mysize) &&
; 175  : 				_Myptr + _Off >= ((_Mystring *)this->_Mycont)->_Myptr());

  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN1@operator@13:

; 176  : 		}
; 177  : 		_Myptr += _Off;

  0004f	01 7e 04	 add	 DWORD PTR [esi+4], edi
  00052	5f		 pop	 edi

; 178  : 		return (*this);

  00053	8b c6		 mov	 eax, esi
  00055	5e		 pop	 esi

; 179  : 		}

  00056	c2 04 00	 ret	 4
??Y?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
; Function compile flags: /Ogtpy
;	COMDAT ??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-, COMDAT
; _this$ = ecx

; 199  : 		{	// return difference of iterators

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 200  : 
; 201  :  #if _HAS_ITERATOR_DEBUGGING
; 202  : 		_Compat(_Right);
; 203  :  #else
; 204  : 		if (this->_Mycont != _IGNORE_MYCONT)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	83 f8 fc	 cmp	 eax, -4			; fffffffcH
  0000d	74 0d		 je	 SHORT $LN1@operator@14

; 205  : 		{
; 206  : 			_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  0000f	85 c0		 test	 eax, eax
  00011	74 04		 je	 SHORT $LN4@operator@14
  00013	3b 07		 cmp	 eax, DWORD PTR [edi]
  00015	74 05		 je	 SHORT $LN1@operator@14
$LN4@operator@14:
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN1@operator@14:

; 207  : 		}
; 208  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 209  : 
; 210  : 		return (_Myptr - _Right._Myptr);

  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	2b 47 04	 sub	 eax, DWORD PTR [edi+4]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 211  : 		}

  00024	c2 04 00	 ret	 4
??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 75   : 			{	// lock the stream buffer, if there

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ostr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 06		 mov	 DWORD PTR [esi], eax

; 76   : 			if (_Myostr.rdbuf() != 0)

  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000e	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  00012	85 c0		 test	 eax, eax
  00014	74 08		 je	 SHORT $LN10@Sentry_bas

; 77   : 				_Myostr.rdbuf()->_Lock();

  00016	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00019	e8 00 00 00 00	 call	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
$LN10@Sentry_bas:

; 78   : 			}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtpy
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 82   : 			if (_Myostr.rdbuf() != 0)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  0000b	85 c0		 test	 eax, eax
  0000d	74 08		 je	 SHORT $LN8@Sentry_bas@2

; 83   : 				_Myostr.rdbuf()->_Unlock();

  0000f	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00012	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN8@Sentry_bas@2:

; 84   : 			}

  00017	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	??0?$_Ranit_base@DHPBDABDV_Iterator_base_secure@std@@@std@@QAE@XZ ; std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Ranit_base@DHPBDABDV_Iterator_base_secure@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Ranit_base@DHPBDABDV_Iterator_base_secure@std@@@std@@QAE@XZ PROC ; std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Ranit_base@DHPBDABDV_Iterator_base_secure@std@@@std@@QAE@XZ ENDP ; std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UHostDevice@@HPBU3@ABU3@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UHostDevice@@HPBU3@ABU3@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UHostDevice@@HPBU3@ABU3@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UHostDevice@@HPBU3@ABU3@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@UFavoriteVolume@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@UFavoriteVolume@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@UFavoriteVolume@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@UFavoriteVolume@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 167  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 282  : 		_IGfirst = &_Gfirst, _IPfirst = &_Pfirst;
; 283  : 		_IGnext = &_Gnext, _IPnext = &_Pnext;

  00000	8d 51 18	 lea	 edx, DWORD PTR [ecx+24]
  00003	89 51 20	 mov	 DWORD PTR [ecx+32], edx
  00006	8d 51 1c	 lea	 edx, DWORD PTR [ecx+28]
  00009	89 51 24	 mov	 DWORD PTR [ecx+36], edx
  0000c	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0000f	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 284  : 		_IGcount = &_Gcount, _IPcount = &_Pcount;

  00012	8d 51 28	 lea	 edx, DWORD PTR [ecx+40]
  00015	89 51 30	 mov	 DWORD PTR [ecx+48], edx
  00018	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  0001b	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0001e	8d 51 2c	 lea	 edx, DWORD PTR [ecx+44]
  00021	89 51 34	 mov	 DWORD PTR [ecx+52], edx

; 285  : 		setp(0, 0), setg(0, 0, 0);

  00024	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002a	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00033	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00036	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0003c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00045	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00048	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0004e	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00051	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 286  : 		}

  00057	c3		 ret	 0
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2d		 je	 SHORT $LN2@Inside
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 08	 cmp	 esi, 8
  00013	72 04		 jb	 SHORT $LN8@Inside
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 18		 jb	 SHORT $LN2@Inside
  0001f	83 fe 08	 cmp	 esi, 8
  00022	72 02		 jb	 SHORT $LN12@Inside
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0002c	3b d7		 cmp	 edx, edi
  0002e	76 07		 jbe	 SHORT $LN2@Inside
  00030	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi

; 2138 : 		}

  00034	c2 04 00	 ret	 4
$LN2@Inside:
  00037	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 2138 : 		}

  0003b	c2 04 00	 ret	 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ	; std::allocator<HostDevice>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ PROC	; std::allocator<HostDevice>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 e1 e1 e1 01	 mov	 eax, 31580641		; 01e1e1e1H

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ ENDP	; std::allocator<HostDevice>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UFavoriteVolume@CipherShed@@@std@@QBEIXZ ; std::allocator<CipherShed::FavoriteVolume>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@UFavoriteVolume@CipherShed@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UFavoriteVolume@CipherShed@@@std@@QBEIXZ PROC ; std::allocator<CipherShed::FavoriteVolume>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 22 22 22 02	 mov	 eax, 35791394		; 02222222H

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UFavoriteVolume@CipherShed@@@std@@QBEIXZ ENDP ; std::allocator<CipherShed::FavoriteVolume>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?max_size@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::max_size, COMDAT
; _this$ = ecx

; 625  : 		return (this->_Alval.max_size());

  00000	b8 22 22 22 02	 mov	 eax, 35791394		; 02222222H

; 626  : 		}

  00005	c3		 ret	 0
?max_size@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::max_size
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	85 c0		 test	 eax, eax
  00008	75 0b		 jne	 SHORT $LN26@operator@15
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	85 c0		 test	 eax, eax
  00013	74 04		 je	 SHORT $LN16@operator@15
$LN26@operator@15:
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN17@operator@15
$LN16@operator@15:
  00019	33 c9		 xor	 ecx, ecx
$LN17@operator@15:
  0001b	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  0001f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00022	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  00028	03 d7		 add	 edx, edi
  0002a	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0002d	77 0f		 ja	 SHORT $LN4@operator@15
  0002f	85 c0		 test	 eax, eax
  00031	74 04		 je	 SHORT $LN22@operator@15
  00033	8b 00		 mov	 eax, DWORD PTR [eax]
  00035	eb 02		 jmp	 SHORT $LN23@operator@15
$LN22@operator@15:
  00037	33 c0		 xor	 eax, eax
$LN23@operator@15:
  00039	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  0003c	73 05		 jae	 SHORT $LN27@operator@15
$LN4@operator@15:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

  0003e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN27@operator@15:

; 164  : 		_Myptr += _Off;

  00043	01 7e 04	 add	 DWORD PTR [esi+4], edi
  00046	5f		 pop	 edi

; 165  : 		return (*this);

  00047	8b c6		 mov	 eax, esi
  00049	5e		 pop	 esi

; 166  : 		}

  0004a	c2 04 00	 ret	 4
??Y?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator+=
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UFavoriteVolume@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UFavoriteVolume@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UFavoriteVolume@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UFavoriteVolume@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@HPBV32@ABV32@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::bidirectional_iterator_tag,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@HPBV32@ABV32@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@HPBV32@ABV32@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::bidirectional_iterator_tag,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@HPBV32@ABV32@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::bidirectional_iterator_tag,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx

; 2076 : 		if (_Count == 1)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	83 f8 01	 cmp	 eax, 1
  00007	75 28		 jne	 SHORT $LN2@Chassign

; 2077 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

  00009	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  0000d	72 11		 jb	 SHORT $LN7@Chassign
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	8a 44 24 0c	 mov	 al, BYTE PTR __Ch$[esp-4]
  00016	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  0001a	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 2080 : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH

; 2077 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

$LN7@Chassign:
  00020	8a 44 24 0c	 mov	 al, BYTE PTR __Ch$[esp-4]
  00024	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00028	83 c1 04	 add	 ecx, 4
  0002b	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 2080 : 		}

  0002e	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Chassign:

; 2078 : 		else
; 2079 : 			_Traits::assign(_Myptr() + _Off, _Count, _Ch);

  00031	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00035	72 05		 jb	 SHORT $LN13@Chassign
  00037	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0003a	eb 03		 jmp	 SHORT $LN14@Chassign
$LN13@Chassign:
  0003c	83 c1 04	 add	 ecx, 4
$LN14@Chassign:
  0003f	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00043	50		 push	 eax
  00044	0f be 44 24 10	 movsx	 eax, BYTE PTR __Ch$[esp]
  00049	50		 push	 eax
  0004a	03 ca		 add	 ecx, edx
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 _memset
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2080 : 		}

  00055	c2 0c 00	 ret	 12			; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@_W@std@@QBEIXZ		; std::allocator<wchar_t>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@_W@std@@QBEIXZ PROC		; std::allocator<wchar_t>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@_W@std@@QBEIXZ ENDP		; std::allocator<wchar_t>::max_size
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

  00004	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00006	85 c9		 test	 ecx, ecx
  00008	75 0b		 jne	 SHORT $LN26@operator@16
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

  0000f	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00011	85 c9		 test	 ecx, ecx
  00013	74 04		 je	 SHORT $LN16@operator@16
$LN26@operator@16:
  00015	8b 11		 mov	 edx, DWORD PTR [ecx]
  00017	eb 02		 jmp	 SHORT $LN17@operator@16
$LN16@operator@16:
  00019	33 d2		 xor	 edx, edx
$LN17@operator@16:
  0001b	8b 44 24 0c	 mov	 eax, DWORD PTR __Off$[esp+4]
  0001f	8b f0		 mov	 esi, eax
  00021	c1 e6 04	 shl	 esi, 4
  00024	2b f0		 sub	 esi, eax
  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	03 f6		 add	 esi, esi
  0002b	03 f6		 add	 esi, esi
  0002d	03 f6		 add	 esi, esi
  0002f	03 c6		 add	 eax, esi
  00031	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
  00034	77 0f		 ja	 SHORT $LN4@operator@16
  00036	85 c9		 test	 ecx, ecx
  00038	74 04		 je	 SHORT $LN22@operator@16
  0003a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003c	eb 02		 jmp	 SHORT $LN23@operator@16
$LN22@operator@16:
  0003e	33 c9		 xor	 ecx, ecx
$LN23@operator@16:
  00040	3b 41 0c	 cmp	 eax, DWORD PTR [ecx+12]
  00043	73 05		 jae	 SHORT $LN27@operator@16
$LN4@operator@16:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN27@operator@16:

; 164  : 		_Myptr += _Off;

  0004a	01 77 04	 add	 DWORD PTR [edi+4], esi

; 165  : 		return (*this);

  0004d	8b c7		 mov	 eax, edi
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 166  : 		}

  00051	c2 04 00	 ret	 4
??Y?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+=
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size
_TEXT	ENDS
PUBLIC	??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::ToTypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\platform\foreach.h
;	COMDAT ??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ToTypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ToTypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<HostDevice,std::allocator<HostDevice> > > CipherShed::ForEach::TypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ PROC ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<HostDevice,std::allocator<HostDevice> > > CipherShed::ForEach::TypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	c2 04 00	 ret	 4
??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ ENDP ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<HostDevice,std::allocator<HostDevice> > > CipherShed::ForEach::TypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _forEachContainer$[esp-4]

; 97   : 		}

  00004	c3		 ret	 0
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??$ToTypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ToTypeWrapper<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$ToTypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ToTypeWrapper<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
??$ToTypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ToTypeWrapper<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??$?BV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@12@XZ ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > CipherShed::ForEach::TypeWrapper<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?BV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@12@XZ PROC ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > CipherShed::ForEach::TypeWrapper<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	c2 04 00	 ret	 4
??$?BV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@12@XZ ENDP ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > CipherShed::ForEach::TypeWrapper<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _forEachContainer$[esp-4]

; 97   : 		}

  00004	c3		 ret	 0
??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??$ToTypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ToTypeWrapper<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$ToTypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ToTypeWrapper<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
??$ToTypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ToTypeWrapper<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??$?BV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@12@XZ ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > CipherShed::ForEach::TypeWrapper<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?BV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@12@XZ PROC ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > CipherShed::ForEach::TypeWrapper<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	c2 04 00	 ret	 4
??$?BV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@12@XZ ENDP ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > CipherShed::ForEach::TypeWrapper<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _forEachContainer$[esp-4]

; 97   : 		}

  00004	c3		 ret	 0
??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??$ToTypeWrapper@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@01@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CipherShed::ForEach::ToTypeWrapper<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogtpy
;	COMDAT ??$ToTypeWrapper@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@01@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@01@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z PROC ; CipherShed::ForEach::ToTypeWrapper<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
??$ToTypeWrapper@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@01@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ENDP ; CipherShed::ForEach::ToTypeWrapper<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	??$?BV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@12@XZ ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > CipherShed::ForEach::TypeWrapper<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?BV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@12@XZ PROC ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > CipherShed::ForEach::TypeWrapper<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	c2 04 00	 ret	 4
??$?BV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@12@XZ ENDP ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > CipherShed::ForEach::TypeWrapper<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@01@@Z ; CipherShed::ForEach::GetContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@01@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _forEachContainer$[esp-4]

; 97   : 		}

  00004	c3		 ret	 0
??$GetContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@01@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T151796 = -12						; size = 12
$T151801 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 0f		 ja	 SHORT $LN3@Allocate

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00013	83 c4 04	 add	 esp, 4

; 44   : 	}

  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	c3		 ret	 0
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001a	83 c8 ff	 or	 eax, -1
  0001d	33 d2		 xor	 edx, edx
  0001f	f7 f1		 div	 ecx
  00021	83 f8 01	 cmp	 eax, 1
  00024	73 e7		 jae	 SHORT $LN1@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T151801[esp+8]
  0002a	50		 push	 eax
  0002b	8d 4c 24 04	 lea	 ecx, DWORD PTR $T151796[esp+16]
  0002f	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T151801[esp+12], 0
  00037	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003c	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00041	8d 4c 24 04	 lea	 ecx, DWORD PTR $T151796[esp+16]
  00045	51		 push	 ecx
  00046	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T151796[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate:
  00053	cc		 int	 3
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$?0UHostDevice@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UHostDevice@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0UHostDevice@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UHostDevice@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0UHostDevice@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UHostDevice@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><HostDevice>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0UHostDevice@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UHostDevice@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><HostDevice>
_TEXT	ENDS
PUBLIC	??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z
_TEXT	SEGMENT
$T151810 = -12						; size = 12
$T151814 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z PROC ; std::_Allocate<HostDevice>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 15		 ja	 SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00019	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001f	c3		 ret	 0
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00020	83 c8 ff	 or	 eax, -1
  00023	33 d2		 xor	 edx, edx
  00025	f7 f1		 div	 ecx
  00027	3d 88 00 00 00	 cmp	 eax, 136		; 00000088H
  0002c	73 df		 jae	 SHORT $LN1@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002e	8d 44 24 10	 lea	 eax, DWORD PTR $T151814[esp+8]
  00032	50		 push	 eax
  00033	8d 4c 24 04	 lea	 ecx, DWORD PTR $T151810[esp+16]
  00037	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T151814[esp+12], 0
  0003f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00044	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00049	8d 4c 24 04	 lea	 ecx, DWORD PTR $T151810[esp+16]
  0004d	51		 push	 ecx
  0004e	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T151810[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00056	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@2:
  0005b	cc		 int	 3
??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ENDP ; std::_Allocate<HostDevice>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>
_TEXT	ENDS
PUBLIC	??$?0UFavoriteVolume@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><CipherShed::FavoriteVolume>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0UFavoriteVolume@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0UFavoriteVolume@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><CipherShed::FavoriteVolume>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0UFavoriteVolume@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><CipherShed::FavoriteVolume>
_TEXT	ENDS
PUBLIC	??$_Allocate@UFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@IPAU12@@Z ; std::_Allocate<CipherShed::FavoriteVolume>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@UFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@IPAU12@@Z
_TEXT	SEGMENT
$T151822 = -12						; size = 12
$T151826 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@IPAU12@@Z PROC ; std::_Allocate<CipherShed::FavoriteVolume>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 1c		 ja	 SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8b d1		 mov	 edx, ecx
  0000f	c1 e2 04	 shl	 edx, 4
  00012	2b d1		 sub	 edx, ecx
  00014	03 d2		 add	 edx, edx
  00016	03 d2		 add	 edx, edx
  00018	03 d2		 add	 edx, edx
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	83 c4 04	 add	 esp, 4

; 44   : 	}

  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	c3		 ret	 0
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00027	83 c8 ff	 or	 eax, -1
  0002a	33 d2		 xor	 edx, edx
  0002c	f7 f1		 div	 ecx
  0002e	83 f8 78	 cmp	 eax, 120		; 00000078H
  00031	73 da		 jae	 SHORT $LN1@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00033	8d 44 24 10	 lea	 eax, DWORD PTR $T151826[esp+8]
  00037	50		 push	 eax
  00038	8d 4c 24 04	 lea	 ecx, DWORD PTR $T151822[esp+16]
  0003c	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T151826[esp+12], 0
  00044	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00049	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004e	8d 4c 24 04	 lea	 ecx, DWORD PTR $T151822[esp+16]
  00052	51		 push	 ecx
  00053	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T151822[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  0005b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@3:
  00060	cc		 int	 3
??$_Allocate@UFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@IPAU12@@Z ENDP ; std::_Allocate<CipherShed::FavoriteVolume>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>
_TEXT	ENDS
PUBLIC	??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *>::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *>::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *>::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@IPAU120@@Z
_TEXT	SEGMENT
$T151834 = -12						; size = 12
$T151838 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 16		 ja	 SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 c9	 lea	 edx, DWORD PTR [ecx+ecx*8]
  00010	03 d2		 add	 edx, edx
  00012	03 d2		 add	 edx, edx
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	c3		 ret	 0
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00021	83 c8 ff	 or	 eax, -1
  00024	33 d2		 xor	 edx, edx
  00026	f7 f1		 div	 ecx
  00028	83 f8 24	 cmp	 eax, 36			; 00000024H
  0002b	73 e0		 jae	 SHORT $LN1@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002d	8d 44 24 10	 lea	 eax, DWORD PTR $T151838[esp+8]
  00031	50		 push	 eax
  00032	8d 4c 24 04	 lea	 ecx, DWORD PTR $T151834[esp+16]
  00036	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T151838[esp+12], 0
  0003e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00043	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00048	8d 4c 24 04	 lea	 ecx, DWORD PTR $T151834[esp+16]
  0004c	51		 push	 ecx
  0004d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T151834[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00055	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@4:
  0005a	cc		 int	 3
??$_Allocate@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@ABQAU120@@Z ; std::_Construct<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *,std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Construct@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@ABQAU120@@Z PROC ; std::_Construct<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *,std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN3@Construct
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN3@Construct:

; 53   : 	}

  00010	c3		 ret	 0
??$_Construct@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *,std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAXPAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z ; std::_Destroy<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAXPAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAXPAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z PROC ; std::_Destroy<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAXPAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z ENDP ; std::_Destroy<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z
_TEXT	SEGMENT
$T151852 = -12						; size = 12
$T151856 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z PROC ; std::_Allocate<std::_Aux_cont>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 16		 ja	 SHORT $LN3@Allocate@5

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@5:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	c3		 ret	 0
$LN3@Allocate@5:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00021	83 c8 ff	 or	 eax, -1
  00024	33 d2		 xor	 edx, edx
  00026	f7 f1		 div	 ecx
  00028	83 f8 04	 cmp	 eax, 4
  0002b	73 e0		 jae	 SHORT $LN1@Allocate@5

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002d	8d 44 24 10	 lea	 eax, DWORD PTR $T151856[esp+8]
  00031	50		 push	 eax
  00032	8d 4c 24 04	 lea	 ecx, DWORD PTR $T151852[esp+16]
  00036	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T151856[esp+12], 0
  0003e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00043	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00048	8d 4c 24 04	 lea	 ecx, DWORD PTR $T151852[esp+16]
  0004c	51		 push	 ecx
  0004d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T151852[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00055	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@5:
  0005a	cc		 int	 3
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ENDP ; std::_Allocate<std::_Aux_cont>
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T151860 = -12						; size = 12
$T151864 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 12		 ja	 SHORT $LN3@Allocate@6

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@6:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	c1 e1 07	 shl	 ecx, 7
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00016	83 c4 04	 add	 esp, 4

; 44   : 	}

  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	c3		 ret	 0
$LN3@Allocate@6:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001d	83 c8 ff	 or	 eax, -1
  00020	33 d2		 xor	 edx, edx
  00022	f7 f1		 div	 ecx
  00024	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00029	73 e2		 jae	 SHORT $LN1@Allocate@6

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002b	8d 44 24 10	 lea	 eax, DWORD PTR $T151864[esp+8]
  0002f	50		 push	 eax
  00030	8d 4c 24 04	 lea	 ecx, DWORD PTR $T151860[esp+16]
  00034	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T151864[esp+12], 0
  0003c	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00041	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00046	8d 4c 24 04	 lea	 ecx, DWORD PTR $T151860[esp+16]
  0004a	51		 push	 ecx
  0004b	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T151860[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@6:
  00058	cc		 int	 3
??$_Allocate@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *,std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Construct@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@ABQAU120@@Z PROC ; std::_Construct<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *,std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN3@Construct@2
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN3@Construct@2:

; 53   : 	}

  00010	c3		 ret	 0
??$_Construct@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *,std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>
_TEXT	ENDS
PUBLIC	??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Allocate@_W@std@@YAPA_WIPA_W@Z		; std::_Allocate<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT
$T151878 = -12						; size = 12
$T151882 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@_W@std@@YAPA_WIPA_W@Z PROC			; std::_Allocate<wchar_t>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 12		 ja	 SHORT $LN3@Allocate@7

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@7:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00016	83 c4 04	 add	 esp, 4

; 44   : 	}

  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	c3		 ret	 0
$LN3@Allocate@7:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001d	83 c8 ff	 or	 eax, -1
  00020	33 d2		 xor	 edx, edx
  00022	f7 f1		 div	 ecx
  00024	83 f8 02	 cmp	 eax, 2
  00027	73 e4		 jae	 SHORT $LN1@Allocate@7

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00029	8d 44 24 10	 lea	 eax, DWORD PTR $T151882[esp+8]
  0002d	50		 push	 eax
  0002e	8d 4c 24 04	 lea	 ecx, DWORD PTR $T151878[esp+16]
  00032	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T151882[esp+12], 0
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003f	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00044	8d 4c 24 04	 lea	 ecx, DWORD PTR $T151878[esp+16]
  00048	51		 push	 ecx
  00049	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T151878[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@7:
  00056	cc		 int	 3
??$_Allocate@_W@std@@YAPA_WIPA_W@Z ENDP			; std::_Allocate<wchar_t>
_TEXT	ENDS
PUBLIC	??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputn, COMDAT
; _this$ = ecx

; 168  : 		return (xsputn(_Ptr, _Count));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00005	ff e0		 jmp	 eax
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputn
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
EXTRN	?_Xran@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xran
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__Count$ = 20						; size = 4
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare, COMDAT
; _this$ = ecx

; 2038 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 2039 : 
; 2040 :  #if _HAS_ITERATOR_DEBUGGING
; 2041 : 		if (_Count != 0)
; 2042 : 			_DEBUG_POINTER(_Ptr);
; 2043 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2044 : 
; 2045 : 		if (_Mysize < _Off)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Off$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	39 6f 14	 cmp	 DWORD PTR [edi+20], ebp
  0000d	73 05		 jae	 SHORT $LN2@compare@2

; 2046 : 			_String_base::_Xran();	// _Off off end

  0000f	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN2@compare@2:

; 2047 : 		if (_Mysize - _Off < _N0)

  00014	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00017	8b 74 24 18	 mov	 esi, DWORD PTR __N0$[esp+12]
  0001b	2b c5		 sub	 eax, ebp
  0001d	3b c6		 cmp	 eax, esi
  0001f	73 02		 jae	 SHORT $LN1@compare@2

; 2048 : 			_N0 = _Mysize - _Off;	// trim _N0 to size

  00021	8b f0		 mov	 esi, eax
$LN1@compare@2:

; 2049 : 
; 2050 : 		size_type _Ans = _Traits::compare(_Myptr() + _Off, _Ptr,
; 2051 : 			_N0 < _Count ? _N0 : _Count);

  00023	8b 5c 24 20	 mov	 ebx, DWORD PTR __Count$[esp+12]
  00027	8b c6		 mov	 eax, esi
  00029	3b f3		 cmp	 esi, ebx
  0002b	72 02		 jb	 SHORT $LN6@compare@2
  0002d	8b c3		 mov	 eax, ebx
$LN6@compare@2:
  0002f	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  00033	72 05		 jb	 SHORT $LN13@compare@2
  00035	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  00038	eb 03		 jmp	 SHORT $LN14@compare@2
$LN13@compare@2:
  0003a	83 c7 04	 add	 edi, 4
$LN14@compare@2:
  0003d	50		 push	 eax
  0003e	8b 44 24 20	 mov	 eax, DWORD PTR __Ptr$[esp+16]
  00042	50		 push	 eax
  00043	8d 0c 6f	 lea	 ecx, DWORD PTR [edi+ebp*2]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 _wmemcmp
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2052 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2053 : 			: _N0 == _Count ? 0 : +1);

  0004f	85 c0		 test	 eax, eax
  00051	75 15		 jne	 SHORT $LN8@compare@2
  00053	3b f3		 cmp	 esi, ebx
  00055	73 0a		 jae	 SHORT $LN7@compare@2
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	83 c8 ff	 or	 eax, -1
  0005d	5b		 pop	 ebx

; 2054 : 		}

  0005e	c2 10 00	 ret	 16			; 00000010H
$LN7@compare@2:

; 2052 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2053 : 			: _N0 == _Count ? 0 : +1);

  00061	33 c0		 xor	 eax, eax
  00063	3b f3		 cmp	 esi, ebx
  00065	0f 95 c0	 setne	 al
$LN8@compare@2:
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5d		 pop	 ebp
  0006b	5b		 pop	 ebx

; 2054 : 		}

  0006c	c2 10 00	 ret	 16			; 00000010H
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
_TEXT	ENDS
PUBLIC	?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init, COMDAT
; _this$ = ecx

; 1046 : 		{	// initialize from _Locinfo object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1047 : 		_Cvt = _Lobj._Getcvt();

  00003	e8 00 00 00 00	 call	 __Getcvt
  00008	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0000b	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0000e	5e		 pop	 esi

; 1048 : 		}

  0000f	c2 04 00	 ret	 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<char> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 625  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 598  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<wchar_t> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 598  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUHostDevice@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHostDevice@@0@Z ; std::_Iter_random<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@PAUHostDevice@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHostDevice@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUHostDevice@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHostDevice@@0@Z PROC ; std::_Iter_random<HostDevice *,HostDevice *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

  00004	c3		 ret	 0
??$_Iter_random@PAUHostDevice@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHostDevice@@0@Z ENDP ; std::_Iter_random<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUHostDevice@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHostDevice@@0@Z ; std::_Ptr_cat<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUHostDevice@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHostDevice@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUHostDevice@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHostDevice@@0@Z PROC ; std::_Ptr_cat<HostDevice *,HostDevice *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@PAUHostDevice@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHostDevice@@0@Z ENDP ; std::_Ptr_cat<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUFavoriteVolume@CipherShed@@0@Z ; std::_Iter_random<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_random@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUFavoriteVolume@CipherShed@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUFavoriteVolume@CipherShed@@0@Z PROC ; std::_Iter_random<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

  00004	c3		 ret	 0
??$_Iter_random@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUFavoriteVolume@CipherShed@@0@Z ENDP ; std::_Iter_random<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUFavoriteVolume@CipherShed@@0@Z ; std::_Ptr_cat<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUFavoriteVolume@CipherShed@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUFavoriteVolume@CipherShed@@0@Z PROC ; std::_Ptr_cat<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUFavoriteVolume@CipherShed@@0@Z ENDP ; std::_Ptr_cat<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??$_Move_cat@PAUHostDevice@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHostDevice@@@Z ; std::_Move_cat<HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_cat@PAUHostDevice@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHostDevice@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUHostDevice@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHostDevice@@@Z PROC ; std::_Move_cat<HostDevice *>, COMDAT

; 1200 : 	{

  00000	51		 push	 ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1203 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Move_cat@PAUHostDevice@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHostDevice@@@Z ENDP ; std::_Move_cat<HostDevice *>
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 625  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Move_cat@PAUFavoriteVolume@CipherShed@@@std@@YA?AU_Undefined_move_tag@0@ABQAUFavoriteVolume@CipherShed@@@Z ; std::_Move_cat<CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Move_cat@PAUFavoriteVolume@CipherShed@@@std@@YA?AU_Undefined_move_tag@0@ABQAUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUFavoriteVolume@CipherShed@@@std@@YA?AU_Undefined_move_tag@0@ABQAUFavoriteVolume@CipherShed@@@Z PROC ; std::_Move_cat<CipherShed::FavoriteVolume *>, COMDAT

; 1200 : 	{

  00000	51		 push	 ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1203 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Move_cat@PAUFavoriteVolume@CipherShed@@@std@@YA?AU_Undefined_move_tag@0@ABQAUFavoriteVolume@CipherShed@@@Z ENDP ; std::_Move_cat<CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??$?0UFavoriteVolume@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *><CipherShed::FavoriteVolume>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$?0UFavoriteVolume@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0UFavoriteVolume@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z PROC ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *><CipherShed::FavoriteVolume>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0UFavoriteVolume@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *><CipherShed::FavoriteVolume>
_TEXT	ENDS
PUBLIC	??$?0UFavoriteVolume@CipherShed@@@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node><CipherShed::FavoriteVolume>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0UFavoriteVolume@CipherShed@@@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0UFavoriteVolume@CipherShed@@@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z PROC ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node><CipherShed::FavoriteVolume>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0UFavoriteVolume@CipherShed@@@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node><CipherShed::FavoriteVolume>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAPAUHostDevice@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAPAUHostDevice@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAPAUHostDevice@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAPAUHostDevice@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *>
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<HostDevice *>, COMDAT

; 1147 : 		return _It;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 1148 : 	}

  00006	c3		 ret	 0
??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<HostDevice *>
_TEXT	ENDS
PUBLIC	??4HostDevice@@QAEAAU0@ABU0@@Z			; HostDevice::operator=
PUBLIC	??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	53		 push	 ebx

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 23		 je	 SHORT $LN200@Copy_opt
  0000e	57		 push	 edi
  0000f	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
$LL3@Copy_opt:

; 2472 : 		*_Dest = *_First;

  00013	56		 push	 esi
  00014	8b cf		 mov	 ecx, edi
  00016	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  0001b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00021	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL3@Copy_opt

; 2473 : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 2474 : 	}

  00030	c3		 ret	 0
$LN200@Copy_opt:

; 2473 : 	return (_Dest);

  00031	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 2474 : 	}

  00037	c3		 ret	 0
??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Checked_base@PAUFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<CipherShed::FavoriteVolume *>, COMDAT

; 1147 : 		return _It;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 1148 : 	}

  00006	c3		 ret	 0
??$_Checked_base@PAUFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??$_Iter_cat@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z ; std::_Iter_cat<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_cat@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z PROC ; std::_Iter_cat<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >, COMDAT

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 955  : 	}

  00004	c3		 ret	 0
??$_Iter_cat@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z ENDP ; std::_Iter_cat<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	??$_Iter_cat@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z ; std::_Iter_cat<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_cat@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z PROC ; std::_Iter_cat<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1> >, COMDAT

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 955  : 	}

  00004	c3		 ret	 0
??$_Iter_cat@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z ENDP ; std::_Iter_cat<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	??F?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator--
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??F?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??F?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator--, COMDAT
; _this$ = ecx

; 262  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 263  : 
; 264  :  #if _HAS_ITERATOR_DEBUGGING
; 265  : 			if (this->_Mycont == 0
; 266  : 				|| _Ptr == 0
; 267  : 				|| (_Ptr = _Prevnode(_Ptr))
; 268  : 					== ((_Myt *)this->_Mycont)->_Myhead)
; 269  : 				{
; 270  : 				_DEBUG_ERROR("list iterator not decrementable");
; 271  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 272  : 				}
; 273  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 274  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	75 05		 jne	 SHORT $LN8@operator@17
  00008	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@operator@17:

; 275  : 			_Ptr = _Prevnode(_Ptr);

  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00010	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 276  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00018	85 c0		 test	 eax, eax
  0001a	74 04		 je	 SHORT $LN19@operator@17
  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
  0001e	eb 02		 jmp	 SHORT $LN20@operator@17
$LN19@operator@17:
  00020	33 c0		 xor	 eax, eax
$LN20@operator@17:
  00022	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00025	75 05		 jne	 SHORT $LN23@operator@17
  00027	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN23@operator@17:

; 277  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 278  : 
; 279  : 			return (*this);

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi

; 280  : 			}

  0002f	c3		 ret	 0
??F?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator--
_TEXT	ENDS
PUBLIC	??F?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV012@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator--
; Function compile flags: /Ogtpy
;	COMDAT ??F?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??F?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV012@XZ PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator--, COMDAT
; _this$ = ecx

; 262  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 263  : 
; 264  :  #if _HAS_ITERATOR_DEBUGGING
; 265  : 			if (this->_Mycont == 0
; 266  : 				|| _Ptr == 0
; 267  : 				|| (_Ptr = _Prevnode(_Ptr))
; 268  : 					== ((_Myt *)this->_Mycont)->_Myhead)
; 269  : 				{
; 270  : 				_DEBUG_ERROR("list iterator not decrementable");
; 271  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 272  : 				}
; 273  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 274  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	75 05		 jne	 SHORT $LN8@operator@18
  00008	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@operator@18:

; 275  : 			_Ptr = _Prevnode(_Ptr);

  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00010	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 276  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00018	85 c0		 test	 eax, eax
  0001a	74 04		 je	 SHORT $LN19@operator@18
  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
  0001e	eb 02		 jmp	 SHORT $LN20@operator@18
$LN19@operator@18:
  00020	33 c0		 xor	 eax, eax
$LN20@operator@18:
  00022	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00025	75 05		 jne	 SHORT $LN23@operator@18
  00027	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN23@operator@18:

; 277  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 278  : 
; 279  : 			return (*this);

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi

; 280  : 			}

  0002f	c3		 ret	 0
??F?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV012@XZ ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator--
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAUFavoriteVolume@CipherShed@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@AAPAUFavoriteVolume@CipherShed@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >,CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAUFavoriteVolume@CipherShed@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@AAPAUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAUFavoriteVolume@CipherShed@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@AAPAUFavoriteVolume@CipherShed@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >,CipherShed::FavoriteVolume *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAUFavoriteVolume@CipherShed@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@AAPAUFavoriteVolume@CipherShed@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >,CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEPBUHostDevice@@XZ ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Checked_iterator_base
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEPBUHostDevice@@XZ
_TEXT	SEGMENT
?_Checked_iterator_base@?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEPBUHostDevice@@XZ PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 47   : 		return _Myptr;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 48   : 	}

  00003	c3		 ret	 0
?_Checked_iterator_base@?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEPBUHostDevice@@XZ ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Checked_iterator_base
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPBUFavoriteVolume@CipherShed@@XZ ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Checked_iterator_base
; Function compile flags: /Ogtpy
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPBUFavoriteVolume@CipherShed@@XZ
_TEXT	SEGMENT
?_Checked_iterator_base@?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPBUFavoriteVolume@CipherShed@@XZ PROC ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 47   : 		return _Myptr;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 48   : 	}

  00003	c3		 ret	 0
?_Checked_iterator_base@?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPBUFavoriteVolume@CipherShed@@XZ ENDP ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Checked_iterator_base
_TEXT	ENDS
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z		; std::ctype<char>::ctype<char>
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z	; std::ctype<char>::_Do_widen_s
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z	; std::ctype<char>::_Do_narrow_s
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
	DD	FLAT:?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
CONST	ENDS
;	COMDAT ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
$T152512 = -16						; size = 16
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<char>::ctype<char>, COMDAT
; _this$ = ecx

; 1784 : 		{	// construct from current locale

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Refs$[esp-4]
  00004	83 ec 10	 sub	 esp, 16			; 00000010H
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1785 : 		_Init(_Lobj);

  0000a	8d 4c 24 04	 lea	 ecx, DWORD PTR $T152512[esp+20]
  0000e	51		 push	 ecx
  0000f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  00018	e8 00 00 00 00	 call	 __Getctype
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00022	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00025	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00028	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0002b	89 56 10	 mov	 DWORD PTR [esi+16], edx
  0002e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00031	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00034	83 c4 04	 add	 esp, 4

; 1786 : 		}

  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi
  0003a	83 c4 10	 add	 esp, 16			; 00000010H
  0003d	c2 08 00	 ret	 8
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<char>::ctype<char>
_TEXT	ENDS
PUBLIC	?_Tidy@?$ctype@D@std@@IAEXXZ			; std::ctype<char>::_Tidy
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$ctype@D@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$ctype@D@std@@IAEXXZ PROC			; std::ctype<char>::_Tidy, COMDAT
; _this$ = ecx

; 1813 : 		if (0 < _Ctype._Delfl)

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	85 c0		 test	 eax, eax
  00005	7e 0d		 jle	 SHORT $LN6@Tidy@2

; 1814 : 			free((void *)_Ctype._Table);

  00007	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _free
  00010	83 c4 04	 add	 esp, 4

; 1817 : 		}

  00013	c3		 ret	 0
$LN6@Tidy@2:

; 1815 : 		else if (_Ctype._Delfl < 0)

  00014	7d 0a		 jge	 SHORT $LN1@Tidy@2

; 1816 : 			delete[] (void *)_Ctype._Table;

  00016	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001f	59		 pop	 ecx
$LN1@Tidy@2:

; 1817 : 		}

  00020	c3		 ret	 0
?_Tidy@?$ctype@D@std@@IAEXXZ ENDP			; std::ctype<char>::_Tidy
_TEXT	ENDS
EXTRN	__Tolower:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 1821 : 		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));

  00000	0f b6 44 24 04	 movzx	 eax, BYTE PTR __Ch$[esp-4]
  00005	83 c1 08	 add	 ecx, 8
  00008	51		 push	 ecx
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __Tolower
  0000f	83 c4 08	 add	 esp, 8

; 1822 : 		}

  00012	c2 04 00	 ret	 4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 1826 : 		{	// convert [_First, _Last) in place to lower case

  00000	53		 push	 ebx

; 1827 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 1828 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 19		 je	 SHORT $LN8@do_tolower
  0000e	57		 push	 edi
  0000f	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_tolower:

; 1829 : 			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);

  00012	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Tolower
  0001c	88 06		 mov	 BYTE PTR [esi], al
  0001e	46		 inc	 esi
  0001f	83 c4 08	 add	 esp, 8
  00022	3b f3		 cmp	 esi, ebx
  00024	75 ec		 jne	 SHORT $LL3@do_tolower
  00026	5f		 pop	 edi
$LN8@do_tolower:

; 1830 : 		return ((const _Elem *)_First);

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx

; 1831 : 		}

  0002b	c2 08 00	 ret	 8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
EXTRN	__Toupper:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 1835 : 		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));

  00000	0f b6 44 24 04	 movzx	 eax, BYTE PTR __Ch$[esp-4]
  00005	83 c1 08	 add	 ecx, 8
  00008	51		 push	 ecx
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __Toupper
  0000f	83 c4 08	 add	 esp, 8

; 1836 : 		}

  00012	c2 04 00	 ret	 4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 1840 : 		{	// convert [_First, _Last) in place to upper case

  00000	53		 push	 ebx

; 1841 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 1842 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 19		 je	 SHORT $LN8@do_toupper
  0000e	57		 push	 edi
  0000f	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_toupper:

; 1843 : 			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);

  00012	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Toupper
  0001c	88 06		 mov	 BYTE PTR [esi], al
  0001e	46		 inc	 esi
  0001f	83 c4 08	 add	 esp, 8
  00022	3b f3		 cmp	 esi, ebx
  00024	75 ec		 jne	 SHORT $LL3@do_toupper
  00026	5f		 pop	 edi
$LN8@do_toupper:

; 1844 : 		return ((const _Elem *)_First);

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx

; 1845 : 		}

  0002b	c2 08 00	 ret	 8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 1849 : 		return (_Byte);

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Byte$[esp-4]

; 1850 : 		}

  00004	c2 04 00	 ret	 4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 1856 : 		// assume there is enough space in _Dest
; 1857 : 		return _Do_widen_s(_First, _Last, _Dest, _Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000b	57		 push	 edi
  0000c	8b f8		 mov	 edi, eax
  0000e	2b fa		 sub	 edi, edx
  00010	57		 push	 edi
  00011	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001a	52		 push	 edx
  0001b	ff d0		 call	 eax
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi

; 1858 : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Dest_size$ = 20					; size = 4
?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z PROC	; std::ctype<char>::_Do_widen_s, COMDAT
; _this$ = ecx

; 1862 : 		{	// widen chars in [_First, _Last)

  00000	53		 push	 ebx

; 1863 : 		_DEBUG_RANGE(_First, _Last);
; 1864 : 		_DEBUG_POINTER(_Dest);
; 1865 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 18	 mov	 ebp, DWORD PTR __Dest_size$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7c 24 18	 mov	 edi, DWORD PTR __Last$[esp+12]
  00010	8b f7		 mov	 esi, edi
  00012	2b f3		 sub	 esi, ebx
  00014	3b ee		 cmp	 ebp, esi
  00016	73 05		 jae	 SHORT $LN3@Do_widen_s
  00018	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Do_widen_s:

; 1866 : 		_CRT_SECURE_MEMCPY(_Dest, _Dest_size, _First, _Last - _First);

  0001d	8b 44 24 1c	 mov	 eax, DWORD PTR __Dest$[esp+12]
  00021	56		 push	 esi
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memcpy_s
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 1867 : 		return (_Last);

  0002d	8b c7		 mov	 eax, edi
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	5b		 pop	 ebx

; 1868 : 		}

  00033	c2 10 00	 ret	 16			; 00000010H
?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z ENDP	; std::ctype<char>::_Do_widen_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 1872 : 		return (_Ch);

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Ch$[esp-4]

; 1873 : 		}

  00004	c2 08 00	 ret	 8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dflt$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 1880 : 		// assume there is enough space in _Dest
; 1881 : 		return _Do_narrow_s(_First, _Last, _Dflt, _Dest, _Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000b	57		 push	 edi
  0000c	8b f8		 mov	 edi, eax
  0000e	2b fa		 sub	 edi, edx
  00010	57		 push	 edi
  00011	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dest$[esp+8]
  00015	57		 push	 edi
  00016	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dflt$[esp+12]
  0001a	57		 push	 edi
  0001b	50		 push	 eax
  0001c	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0001f	52		 push	 edx
  00020	ff d0		 call	 eax
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 1882 : 		}

  00024	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
__Dest_size$ = 24					; size = 4
?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z PROC	; std::ctype<char>::_Do_narrow_s, COMDAT
; _this$ = ecx

; 1887 : 		{	// narrow elements in [_First, _Last) to chars

  00000	53		 push	 ebx

; 1888 : 		_DEBUG_RANGE(_First, _Last);
; 1889 : 		_DEBUG_POINTER(_Dest);
; 1890 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 1c	 mov	 ebp, DWORD PTR __Dest_size$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7c 24 18	 mov	 edi, DWORD PTR __Last$[esp+12]
  00010	8b f7		 mov	 esi, edi
  00012	2b f3		 sub	 esi, ebx
  00014	3b ee		 cmp	 ebp, esi
  00016	73 05		 jae	 SHORT $LN3@Do_narrow_
  00018	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Do_narrow_:

; 1891 : 		_CRT_SECURE_MEMCPY(_Dest, _Dest_size, _First, _Last - _First);

  0001d	8b 44 24 20	 mov	 eax, DWORD PTR __Dest$[esp+12]
  00021	56		 push	 esi
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memcpy_s
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 1892 : 		return (_Last);

  0002d	8b c7		 mov	 eax, edi
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	5b		 pop	 ebx

; 1893 : 		}

  00033	c2 14 00	 ret	 20			; 00000014H
?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z ENDP	; std::ctype<char>::_Do_narrow_s
_TEXT	ENDS
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 1801 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1802 : 		_Tidy();

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  0000c	85 c0		 test	 eax, eax
  0000e	7e 14		 jle	 SHORT $LN14@ctype
  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _free
  00019	83 c4 04	 add	 esp, 4

; 1803 : 		}

  0001c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00022	5e		 pop	 esi
  00023	c3		 ret	 0
$LN14@ctype:

; 1802 : 		_Tidy();

  00024	7d 0c		 jge	 SHORT $LN13@ctype
  00026	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002f	83 c4 04	 add	 esp, 4
$LN13@ctype:

; 1803 : 		}

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00038	5e		 pop	 esi
  00039	c3		 ret	 0
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  0000c	85 c0		 test	 eax, eax
  0000e	7e 0b		 jle	 SHORT $LN16@scalar@9
  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _free
  00019	eb 0b		 jmp	 SHORT $LN17@scalar@9
$LN16@scalar@9:
  0001b	7d 0c		 jge	 SHORT $LN6@scalar@9
  0001d	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN17@scalar@9:
  00026	83 c4 04	 add	 esp, 4
$LN6@scalar@9:
  00029	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0002e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00034	74 09		 je	 SHORT $LN15@scalar@9
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003c	83 c4 04	 add	 esp, 4
$LN15@scalar@9:
  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi
  00042	c2 04 00	 ret	 4
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_RandStop:PROC
EXTRN	_cleanup:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__GetCommandLineW@0:PROC
EXTRN	__imp__GetCommandLineA@0:PROC
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
;	COMDAT _localcleanup
_TEXT	SEGMENT
_localcleanup PROC					; COMDAT

; 148  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 149  : 	// Wipe command line
; 150  : 	char *c = GetCommandLineA ();

  00002	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCommandLineA@0
  00008	8b f0		 mov	 esi, eax

; 151  : 	wchar_t *wc = GetCommandLineW ();

  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCommandLineW@0

; 152  : 	burn(c, strlen (c));

  00010	8b ce		 mov	 ecx, esi
  00012	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL122@localclean:
  00015	8a 11		 mov	 dl, BYTE PTR [ecx]
  00017	41		 inc	 ecx
  00018	84 d2		 test	 dl, dl
  0001a	75 f9		 jne	 SHORT $LL122@localclean
  0001c	2b cf		 sub	 ecx, edi
  0001e	8b f9		 mov	 edi, ecx
  00020	8b ce		 mov	 ecx, esi
  00022	55		 push	 ebp
  00023	8d 69 01	 lea	 ebp, DWORD PTR [ecx+1]
$LL123@localclean:
  00026	8a 11		 mov	 dl, BYTE PTR [ecx]
  00028	41		 inc	 ecx
  00029	84 d2		 test	 dl, dl
  0002b	75 f9		 jne	 SHORT $LL123@localclean
  0002d	2b cd		 sub	 ecx, ebp
  0002f	8b d6		 mov	 edx, esi
  00031	74 09		 je	 SHORT $LN74@localclean
$LL43@localclean:
  00033	c6 02 00	 mov	 BYTE PTR [edx], 0
  00036	42		 inc	 edx
  00037	83 e9 01	 sub	 ecx, 1
  0003a	75 f7		 jne	 SHORT $LL43@localclean
$LN74@localclean:
  0003c	85 ff		 test	 edi, edi
  0003e	74 09		 je	 SHORT $LN88@localclean
$LL34@localclean:
  00040	4f		 dec	 edi
  00041	c6 06 00	 mov	 BYTE PTR [esi], 0
  00044	46		 inc	 esi
  00045	85 ff		 test	 edi, edi
  00047	75 f7		 jne	 SHORT $LL34@localclean
$LN88@localclean:

; 153  : 	burn(wc, wcslen (wc) * sizeof (wchar_t));

  00049	8b c8		 mov	 ecx, eax
  0004b	8b e8		 mov	 ebp, eax
  0004d	8d 71 02	 lea	 esi, DWORD PTR [ecx+2]
$LL124@localclean:
  00050	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00053	83 c1 02	 add	 ecx, 2
  00056	66 85 d2	 test	 dx, dx
  00059	75 f5		 jne	 SHORT $LL124@localclean
  0005b	2b ce		 sub	 ecx, esi
  0005d	d1 f9		 sar	 ecx, 1
  0005f	8d 34 09	 lea	 esi, DWORD PTR [ecx+ecx]
  00062	8b c8		 mov	 ecx, eax
  00064	8d 79 02	 lea	 edi, DWORD PTR [ecx+2]
$LL125@localclean:
  00067	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0006a	83 c1 02	 add	 ecx, 2
  0006d	66 85 d2	 test	 dx, dx
  00070	75 f5		 jne	 SHORT $LL125@localclean
  00072	2b cf		 sub	 ecx, edi
  00074	d1 f9		 sar	 ecx, 1
  00076	03 c9		 add	 ecx, ecx
  00078	74 0f		 je	 SHORT $LN76@localclean
  0007a	8d 9b 00 00 00
	00		 npad	 6
$LL47@localclean:
  00080	c6 00 00	 mov	 BYTE PTR [eax], 0
  00083	40		 inc	 eax
  00084	83 e9 01	 sub	 ecx, 1
  00087	75 f7		 jne	 SHORT $LL47@localclean
$LN76@localclean:
  00089	85 f6		 test	 esi, esi
  0008b	74 0d		 je	 SHORT $LN91@localclean
  0008d	8d 49 00	 npad	 3
$LL29@localclean:
  00090	4e		 dec	 esi
  00091	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
  00095	45		 inc	 ebp
  00096	85 f6		 test	 esi, esi
  00098	75 f6		 jne	 SHORT $LL29@localclean
$LN91@localclean:

; 154  : 
; 155  : 	/* Delete buffered bitmaps (if any) */
; 156  : 	if (hbmLogoBitmapRescaled != NULL)

  0009a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hbmLogoBitmapRescaled@@3PAUHBITMAP__@@A ; hbmLogoBitmapRescaled
  0009f	5d		 pop	 ebp
  000a0	85 c0		 test	 eax, eax
  000a2	74 11		 je	 SHORT $LN26@localclean

; 157  : 	{
; 158  : 		DeleteObject ((HGDIOBJ) hbmLogoBitmapRescaled);

  000a4	50		 push	 eax
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 159  : 		hbmLogoBitmapRescaled = NULL;

  000ab	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hbmLogoBitmapRescaled@@3PAUHBITMAP__@@A, 0 ; hbmLogoBitmapRescaled
$LN26@localclean:

; 160  : 	}
; 161  : 
; 162  : 	/* These items should have already been cleared by the functions that used them, but we're going to
; 163  : 	clear them for extra security. */
; 164  : 	burn (&VolumePassword, sizeof (VolumePassword));

  000b5	ba 00 00 00 00	 mov	 edx, OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  000ba	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  000bf	8b f1		 mov	 esi, ecx
  000c1	8b c2		 mov	 eax, edx
$LL51@localclean:
  000c3	c6 00 00	 mov	 BYTE PTR [eax], 0
  000c6	40		 inc	 eax
  000c7	83 ee 01	 sub	 esi, 1
  000ca	75 f7		 jne	 SHORT $LL51@localclean
  000cc	8d 64 24 00	 npad	 4
$LL23@localclean:
  000d0	49		 dec	 ecx
  000d1	c6 02 00	 mov	 BYTE PTR [edx], 0
  000d4	42		 inc	 edx
  000d5	85 c9		 test	 ecx, ecx
  000d7	75 f7		 jne	 SHORT $LL23@localclean

; 165  : 	burn (&CmdVolumePassword, sizeof (CmdVolumePassword));

  000d9	ba 00 00 00 00	 mov	 edx, OFFSET ?CmdVolumePassword@@3UPassword@@A ; CmdVolumePassword
  000de	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  000e3	8b f1		 mov	 esi, ecx
  000e5	8b c2		 mov	 eax, edx
$LL55@localclean:
  000e7	c6 00 00	 mov	 BYTE PTR [eax], 0
  000ea	40		 inc	 eax
  000eb	83 ee 01	 sub	 esi, 1
  000ee	75 f7		 jne	 SHORT $LL55@localclean
$LL18@localclean:
  000f0	49		 dec	 ecx
  000f1	c6 02 00	 mov	 BYTE PTR [edx], 0
  000f4	42		 inc	 edx
  000f5	85 c9		 test	 ecx, ecx
  000f7	75 f7		 jne	 SHORT $LL18@localclean

; 166  : 	burn (&mountOptions, sizeof (mountOptions));

  000f9	ba 00 00 00 00	 mov	 edx, OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  000fe	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00103	8b f1		 mov	 esi, ecx
  00105	8b c2		 mov	 eax, edx
$LL59@localclean:
  00107	c6 00 00	 mov	 BYTE PTR [eax], 0
  0010a	40		 inc	 eax
  0010b	83 ee 01	 sub	 esi, 1
  0010e	75 f7		 jne	 SHORT $LL59@localclean
$LL13@localclean:
  00110	49		 dec	 ecx
  00111	c6 02 00	 mov	 BYTE PTR [edx], 0
  00114	42		 inc	 edx
  00115	85 c9		 test	 ecx, ecx
  00117	75 f7		 jne	 SHORT $LL13@localclean

; 167  : 	burn (&defaultMountOptions, sizeof (defaultMountOptions));

  00119	ba 00 00 00 00	 mov	 edx, OFFSET ?defaultMountOptions@@3UMountOptions@@A ; defaultMountOptions
  0011e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00123	8b f1		 mov	 esi, ecx
  00125	8b c2		 mov	 eax, edx
$LL63@localclean:
  00127	c6 00 00	 mov	 BYTE PTR [eax], 0
  0012a	40		 inc	 eax
  0012b	83 ee 01	 sub	 esi, 1
  0012e	75 f7		 jne	 SHORT $LL63@localclean
$LL8@localclean:
  00130	49		 dec	 ecx
  00131	c6 02 00	 mov	 BYTE PTR [edx], 0
  00134	42		 inc	 edx
  00135	85 c9		 test	 ecx, ecx
  00137	75 f7		 jne	 SHORT $LL8@localclean

; 168  : 	burn (&szFileName, sizeof(szFileName));

  00139	ba 00 00 00 00	 mov	 edx, OFFSET ?szFileName@@3PADA ; szFileName
  0013e	b9 05 01 00 00	 mov	 ecx, 261		; 00000105H
  00143	8b f1		 mov	 esi, ecx
  00145	8b c2		 mov	 eax, edx
$LL67@localclean:
  00147	c6 00 00	 mov	 BYTE PTR [eax], 0
  0014a	40		 inc	 eax
  0014b	83 ee 01	 sub	 esi, 1
  0014e	75 f7		 jne	 SHORT $LL67@localclean
$LL3@localclean:
  00150	49		 dec	 ecx
  00151	c6 02 00	 mov	 BYTE PTR [edx], 0
  00154	42		 inc	 edx
  00155	85 c9		 test	 ecx, ecx
  00157	75 f7		 jne	 SHORT $LL3@localclean

; 169  : 
; 170  : 	/* Cleanup common code resources */
; 171  : 	cleanup ();

  00159	e8 00 00 00 00	 call	 _cleanup

; 172  : 
; 173  : 	if (BootEncObj != NULL)

  0015e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00164	85 c9		 test	 ecx, ecx
  00166	74 1a		 je	 SHORT $LN1@localclean

; 174  : 	{
; 175  : 		delete BootEncObj;

  00168	8b f1		 mov	 esi, ecx
  0016a	e8 00 00 00 00	 call	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
  0016f	56		 push	 esi
  00170	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00175	83 c4 04	 add	 esp, 4

; 176  : 		BootEncObj = NULL;

  00178	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A, 0 ; BootEncObj
$LN1@localclean:

; 177  : 	}
; 178  : 
; 179  : 	RandStop (TRUE);

  00182	6a 01		 push	 1
  00184	e8 00 00 00 00	 call	 _RandStop
  00189	83 c4 04	 add	 esp, 4
  0018c	5f		 pop	 edi
  0018d	5e		 pop	 esi

; 180  : }

  0018e	c3		 ret	 0
_localcleanup ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@JOHDMOHN@UNMOUNT_BUTTON?$AA@		; `string'
PUBLIC	??_C@_0N@HBOIHDNA@MOUNT_BUTTON?$AA@		; `string'
PUBLIC	_EnableDisableButtons
EXTRN	_IsComboEmpty:PROC
EXTRN	_IsPasswordCacheEmpty:PROC
EXTRN	__imp__EnableMenuItem@12:PROC
EXTRN	__imp__GetMenu@4:PROC
;	COMDAT ??_C@_0P@JOHDMOHN@UNMOUNT_BUTTON?$AA@
CONST	SEGMENT
??_C@_0P@JOHDMOHN@UNMOUNT_BUTTON?$AA@ DB 'UNMOUNT_BUTTON', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HBOIHDNA@MOUNT_BUTTON?$AA@
CONST	SEGMENT
??_C@_0N@HBOIHDNA@MOUNT_BUTTON?$AA@ DB 'MOUNT_BUTTON', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _EnableDisableButtons
_TEXT	SEGMENT
_x$ = -4						; size = 2
_hwndDlg$ = 8						; size = 4
_EnableDisableButtons PROC				; COMDAT

; 310  : {

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	55		 push	 ebp
  00003	56		 push	 esi

; 311  : 	HWND hOKButton = GetDlgItem (hwndDlg, IDOK);

  00004	8b 74 24 14	 mov	 esi, DWORD PTR _hwndDlg$[esp+12]
  00008	57		 push	 edi
  00009	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  0000f	6a 01		 push	 1
  00011	56		 push	 esi
  00012	ff d7		 call	 edi

; 312  : 	WORD x;
; 313  : 
; 314  : 	x = LOWORD (GetSelectedLong (GetDlgItem (hwndDlg, IDC_DRIVELIST)));

  00014	68 ef 03 00 00	 push	 1007			; 000003efH
  00019	56		 push	 esi
  0001a	8b e8		 mov	 ebp, eax
  0001c	ff d7		 call	 edi
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _GetSelectedLong

; 315  : 
; 316  : 	EnableMenuItem (GetMenu (hwndDlg), IDM_MOUNT_VOLUME, MF_ENABLED);

  00024	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetMenu@4
  0002a	83 c4 04	 add	 esp, 4
  0002d	6a 00		 push	 0
  0002f	0f b7 c0	 movzx	 eax, ax
  00032	68 4e 9c 00 00	 push	 40014			; 00009c4eH
  00037	56		 push	 esi
  00038	89 44 24 1c	 mov	 DWORD PTR _x$[esp+32], eax
  0003c	ff d7		 call	 edi
  0003e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableMenuItem@12
  00044	50		 push	 eax
  00045	ff d3		 call	 ebx

; 317  : 	EnableMenuItem (GetMenu (hwndDlg), IDM_MOUNT_VOLUME_OPTIONS, MF_ENABLED);

  00047	6a 00		 push	 0
  00049	68 47 9c 00 00	 push	 40007			; 00009c47H
  0004e	56		 push	 esi
  0004f	ff d7		 call	 edi
  00051	50		 push	 eax
  00052	ff d3		 call	 ebx

; 318  : 	EnableMenuItem (GetMenu (hwndDlg), IDM_BACKUP_VOL_HEADER, MF_ENABLED);

  00054	6a 00		 push	 0
  00056	68 5a 9c 00 00	 push	 40026			; 00009c5aH
  0005b	56		 push	 esi
  0005c	ff d7		 call	 edi
  0005e	50		 push	 eax
  0005f	ff d3		 call	 ebx

; 319  : 	EnableMenuItem (GetMenu (hwndDlg), IDM_RESTORE_VOL_HEADER, MF_ENABLED);

  00061	6a 00		 push	 0
  00063	68 5b 9c 00 00	 push	 40027			; 00009c5bH
  00068	56		 push	 esi
  00069	ff d7		 call	 edi
  0006b	50		 push	 eax
  0006c	ff d3		 call	 ebx

; 320  : 	EnableMenuItem (GetMenu (hwndDlg), IDM_CHANGE_PASSWORD, MF_ENABLED);

  0006e	6a 00		 push	 0
  00070	68 4f 9c 00 00	 push	 40015			; 00009c4fH
  00075	56		 push	 esi
  00076	ff d7		 call	 edi
  00078	50		 push	 eax
  00079	ff d3		 call	 ebx

; 321  : 	EnableWindow (hOKButton, TRUE);

  0007b	6a 01		 push	 1
  0007d	55		 push	 ebp
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 322  : 
; 323  : 	switch (x)

  00084	0f b7 44 24 10	 movzx	 eax, WORD PTR _x$[esp+20]
  00089	83 f8 01	 cmp	 eax, 1
  0008c	0f 84 87 00 00
	00		 je	 $LN3@EnableDisa
  00092	83 c0 fe	 add	 eax, -2			; fffffffeH
  00095	83 f8 01	 cmp	 eax, 1
  00098	77 3f		 ja	 SHORT $LN1@EnableDisa

; 333  : 		}
; 334  : 		break;
; 335  : 
; 336  : 	case TC_MLIST_ITEM_SYS_PARTITION:
; 337  : 	case TC_MLIST_ITEM_SYS_DRIVE:
; 338  : 		EnableWindow (hOKButton, FALSE);

  0009a	6a 00		 push	 0
  0009c	55		 push	 ebp
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 339  : 		SetWindowTextW (hOKButton, GetString ("MOUNT_BUTTON"));

  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HBOIHDNA@MOUNT_BUTTON?$AA@
  000a8	e8 00 00 00 00	 call	 _GetString
  000ad	83 c4 04	 add	 esp, 4
  000b0	50		 push	 eax
  000b1	55		 push	 ebp
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 340  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_VOLUME_PROPERTIES), TRUE);

  000b8	6a 01		 push	 1
  000ba	68 15 04 00 00	 push	 1045			; 00000415H
  000bf	56		 push	 esi
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  000c6	50		 push	 eax
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 341  : 		EnableMenuItem (GetMenu (hwndDlg), IDM_UNMOUNT_VOLUME, MF_GRAYED);

  000cd	6a 01		 push	 1
  000cf	68 43 9c 00 00	 push	 40003			; 00009c43H

; 342  : 		break;

  000d4	e9 85 00 00 00	 jmp	 $LN8@EnableDisa
$LN1@EnableDisa:

; 343  : 
; 344  : 	case TC_MLIST_ITEM_FREE:
; 345  : 	default:
; 346  : 		SetWindowTextW (hOKButton, GetString ("MOUNT_BUTTON"));

  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HBOIHDNA@MOUNT_BUTTON?$AA@
  000de	e8 00 00 00 00	 call	 _GetString
  000e3	83 c4 04	 add	 esp, 4
  000e6	50		 push	 eax
  000e7	55		 push	 ebp
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 347  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_VOLUME_PROPERTIES), FALSE);

  000ee	6a 00		 push	 0
  000f0	68 15 04 00 00	 push	 1045			; 00000415H
  000f5	56		 push	 esi
  000f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  000fc	50		 push	 eax
  000fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 348  : 		EnableMenuItem (GetMenu (hwndDlg), IDM_VOLUME_PROPERTIES, MF_GRAYED);

  00103	6a 01		 push	 1
  00105	68 57 9c 00 00	 push	 40023			; 00009c57H
  0010a	56		 push	 esi
  0010b	ff d7		 call	 edi
  0010d	50		 push	 eax
  0010e	ff d3		 call	 ebx

; 349  : 		EnableMenuItem (GetMenu (hwndDlg), IDM_UNMOUNT_VOLUME, MF_GRAYED);

  00110	6a 01		 push	 1
  00112	68 43 9c 00 00	 push	 40003			; 00009c43H
  00117	eb 45		 jmp	 SHORT $LN8@EnableDisa
$LN3@EnableDisa:

; 324  : 	{
; 325  : 	case TC_MLIST_ITEM_NONSYS_VOL:
; 326  : 		{
; 327  : 			SetWindowTextW (hOKButton, GetString ("UNMOUNT_BUTTON"));

  00119	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JOHDMOHN@UNMOUNT_BUTTON?$AA@
  0011e	e8 00 00 00 00	 call	 _GetString
  00123	83 c4 04	 add	 esp, 4
  00126	50		 push	 eax
  00127	55		 push	 ebp
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 328  : 			EnableWindow (hOKButton, TRUE);

  0012e	6a 01		 push	 1
  00130	55		 push	 ebp
  00131	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__EnableWindow@8
  00137	ff d5		 call	 ebp

; 329  : 			EnableMenuItem (GetMenu (hwndDlg), IDM_UNMOUNT_VOLUME, MF_ENABLED);

  00139	6a 00		 push	 0
  0013b	68 43 9c 00 00	 push	 40003			; 00009c43H
  00140	56		 push	 esi
  00141	ff d7		 call	 edi
  00143	50		 push	 eax
  00144	ff d3		 call	 ebx

; 330  : 
; 331  : 			EnableWindow (GetDlgItem (hwndDlg, IDC_VOLUME_PROPERTIES), TRUE);

  00146	6a 01		 push	 1
  00148	68 15 04 00 00	 push	 1045			; 00000415H
  0014d	56		 push	 esi
  0014e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00154	50		 push	 eax
  00155	ff d5		 call	 ebp

; 332  : 			EnableMenuItem (GetMenu (hwndDlg), IDM_VOLUME_PROPERTIES, MF_ENABLED);

  00157	6a 00		 push	 0
  00159	68 57 9c 00 00	 push	 40023			; 00009c57H
$LN8@EnableDisa:
  0015e	56		 push	 esi
  0015f	ff d7		 call	 edi
  00161	50		 push	 eax
  00162	ff d3		 call	 ebx

; 350  : 	}
; 351  : 
; 352  : 	EnableWindow (GetDlgItem (hwndDlg, IDC_WIPE_CACHE), !IsPasswordCacheEmpty());

  00164	e8 00 00 00 00	 call	 _IsPasswordCacheEmpty
  00169	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__GetDlgItem@8
  0016f	f7 d8		 neg	 eax
  00171	1b c0		 sbb	 eax, eax
  00173	40		 inc	 eax
  00174	50		 push	 eax
  00175	68 10 04 00 00	 push	 1040			; 00000410H
  0017a	56		 push	 esi
  0017b	ff d5		 call	 ebp
  0017d	50		 push	 eax
  0017e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 353  : 	EnableMenuItem (GetMenu (hwndDlg), IDM_WIPE_CACHE, IsPasswordCacheEmpty() ? MF_GRAYED:MF_ENABLED);

  00184	e8 00 00 00 00	 call	 _IsPasswordCacheEmpty
  00189	f7 d8		 neg	 eax
  0018b	1b c0		 sbb	 eax, eax
  0018d	f7 d8		 neg	 eax
  0018f	50		 push	 eax
  00190	68 52 9c 00 00	 push	 40018			; 00009c52H
  00195	56		 push	 esi
  00196	ff d7		 call	 edi
  00198	50		 push	 eax
  00199	ff d3		 call	 ebx

; 354  : 	EnableMenuItem (GetMenu (hwndDlg), IDM_CLEAR_HISTORY, IsComboEmpty (GetDlgItem (hwndDlg, IDC_VOLUME)) ? MF_GRAYED:MF_ENABLED);

  0019b	68 0a 04 00 00	 push	 1034			; 0000040aH
  001a0	56		 push	 esi
  001a1	ff d5		 call	 ebp
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 _IsComboEmpty
  001a9	83 c4 04	 add	 esp, 4
  001ac	f7 d8		 neg	 eax
  001ae	1b c0		 sbb	 eax, eax
  001b0	f7 d8		 neg	 eax
  001b2	50		 push	 eax
  001b3	68 44 9c 00 00	 push	 40004			; 00009c44H
  001b8	56		 push	 esi
  001b9	ff d7		 call	 edi
  001bb	50		 push	 eax
  001bc	ff d3		 call	 ebx
  001be	5f		 pop	 edi
  001bf	5e		 pop	 esi
  001c0	5d		 pop	 ebp
  001c1	5b		 pop	 ebx

; 355  : }

  001c2	59		 pop	 ecx
  001c3	c3		 ret	 0
_EnableDisableButtons ENDP
_TEXT	ENDS
PUBLIC	?ActiveSysEncDeviceSelected@@YAHXZ		; ActiveSysEncDeviceSelected
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?ActiveSysEncDeviceSelected@@YAHXZ$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?ActiveSysEncDeviceSelected@@YAHXZ$0
__unwindtable$?ActiveSysEncDeviceSelected@@YAHXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?ActiveSysEncDeviceSelected@@YAHXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?ActiveSysEncDeviceSelected@@YAHXZ$2
__ehfuncinfo$?ActiveSysEncDeviceSelected@@YAHXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ActiveSysEncDeviceSelected@@YAHXZ
	DD	01H
	DD	FLAT:__tryblocktable$?ActiveSysEncDeviceSelected@@YAHXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?ActiveSysEncDeviceSelected@@YAHXZ
_TEXT	SEGMENT
$T152734 = -114						; size = 94
_e$135801 = -20						; size = 4
__$EHRec$ = -16						; size = 16
?ActiveSysEncDeviceSelected@@YAHXZ PROC			; ActiveSysEncDeviceSelected, COMDAT

; 371  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ActiveSysEncDeviceSelected@@YAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 372  : 	try
; 373  : 	{
; 374  : 		BootEncStatus = BootEncObj->GetStatus();

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00031	8d 45 8e	 lea	 eax, DWORD PTR $T152734[ebp]
  00034	50		 push	 eax
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003c	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00041	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00046	8b f0		 mov	 esi, eax
  00048	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  0004d	f3 a5		 rep movsd
  0004f	66 a5		 movsw

; 375  : 
; 376  : 		if (BootEncStatus.DriveEncrypted)

  00051	83 3d 0e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14, 0
  00058	0f 84 97 00 00
	00		 je	 $LN12@ActiveSysE

; 377  : 		{
; 378  : 			int retCode = 0;
; 379  : 
; 380  : 			GetWindowTextA(GetDlgItem (MainDlg, IDC_VOLUME), szFileName, sizeof (szFileName));

  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00064	68 05 01 00 00	 push	 261			; 00000105H
  00069	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  0006e	68 0a 04 00 00	 push	 1034			; 0000040aH
  00073	51		 push	 ecx
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0007a	50		 push	 eax
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 381  : 
; 382  : 			retCode = IsSystemDevicePath (szFileName, MainDlg, FALSE);

  00081	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00087	6a 00		 push	 0
  00089	52		 push	 edx
  0008a	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  0008f	e8 00 00 00 00	 call	 _IsSystemDevicePath

; 383  : 
; 384  : 			return (WholeSysDriveEncryption(FALSE) ? (retCode == 2 || retCode == 1) : (retCode == 1));

  00094	6a 00		 push	 0
  00096	8b f0		 mov	 esi, eax
  00098	e8 00 00 00 00	 call	 _WholeSysDriveEncryption
  0009d	83 c4 10	 add	 esp, 16			; 00000010H
  000a0	85 c0		 test	 eax, eax
  000a2	74 21		 je	 SHORT $LN7@ActiveSysE
  000a4	83 fe 02	 cmp	 esi, 2
  000a7	74 05		 je	 SHORT $LN5@ActiveSysE
  000a9	83 fe 01	 cmp	 esi, 1
  000ac	75 47		 jne	 SHORT $LN12@ActiveSysE
$LN5@ActiveSysE:
  000ae	b8 01 00 00 00	 mov	 eax, 1

; 393  : }

  000b3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bd	59		 pop	 ecx
  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	5b		 pop	 ebx
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN7@ActiveSysE:

; 383  : 
; 384  : 			return (WholeSysDriveEncryption(FALSE) ? (retCode == 2 || retCode == 1) : (retCode == 1));

  000c5	33 c0		 xor	 eax, eax
  000c7	83 fe 01	 cmp	 esi, 1
  000ca	0f 94 c0	 sete	 al

; 393  : }

  000cd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d7	59		 pop	 ecx
  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
__catch$?ActiveSysEncDeviceSelected@@YAHXZ$0:

; 385  : 		}
; 386  : 	}
; 387  : 	catch (Exception &e)
; 388  : 	{
; 389  : 		e.Show (MainDlg);

  000df	8b 4d ec	 mov	 ecx, DWORD PTR _e$135801[ebp]
  000e2	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  000ea	8b 00		 mov	 eax, DWORD PTR [eax]
  000ec	52		 push	 edx
  000ed	ff d0		 call	 eax

; 390  : 	}

  000ef	b8 00 00 00 00	 mov	 eax, $LN12@ActiveSysE
  000f4	c3		 ret	 0
$LN12@ActiveSysE:

; 391  : 
; 392  : 	return FALSE;

  000f5	33 c0		 xor	 eax, eax

; 393  : }

  000f7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00101	59		 pop	 ecx
  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?ActiveSysEncDeviceSelected@@YAHXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ActiveSysEncDeviceSelected@@YAHXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ActiveSysEncDeviceSelected@@YAHXZ ENDP			; ActiveSysEncDeviceSelected
PUBLIC	??_C@_08BENDAOKD@Language?$AA@			; `string'
PUBLIC	??_C@_03CGGPNEOP@?$CFc?3?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_SaveSettings
EXTRN	_DumpCombo:PROC
EXTRN	_ConfigWriteEnd:PROC
EXTRN	_ConfigWriteString:PROC
EXTRN	_ConfigWriteInt:PROC
EXTRN	_ConfigWriteBegin:PROC
;	COMDAT ??_C@_08BENDAOKD@Language?$AA@
CONST	SEGMENT
??_C@_08BENDAOKD@Language?$AA@ DB 'Language', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CGGPNEOP@?$CFc?3?$AA@
CONST	SEGMENT
??_C@_03CGGPNEOP@?$CFc?3?$AA@ DB '%c:', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _SaveSettings
_TEXT	SEGMENT
_szTmp$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_SaveSettings PROC					; COMDAT

; 496  : {

  00000	83 ec 24	 sub	 esp, 36			; 00000024H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 20	 mov	 DWORD PTR __$ArrayPad$[esp+36], eax
  0000e	56		 push	 esi
  0000f	8b 74 24 2c	 mov	 esi, DWORD PTR _hwndDlg$[esp+36]
  00013	57		 push	 edi

; 497  : 	WaitCursor ();

  00014	e8 00 00 00 00	 call	 _WaitCursor

; 498  : 
; 499  : 	char szTmp[32] = {0};

  00019	33 c0		 xor	 eax, eax
  0001b	c6 44 24 08 00	 mov	 BYTE PTR _szTmp$[esp+44], 0
  00020	89 44 24 09	 mov	 DWORD PTR _szTmp$[esp+45], eax
  00024	89 44 24 0d	 mov	 DWORD PTR _szTmp$[esp+49], eax
  00028	89 44 24 11	 mov	 DWORD PTR _szTmp$[esp+53], eax
  0002c	89 44 24 15	 mov	 DWORD PTR _szTmp$[esp+57], eax
  00030	89 44 24 19	 mov	 DWORD PTR _szTmp$[esp+61], eax
  00034	89 44 24 1d	 mov	 DWORD PTR _szTmp$[esp+65], eax
  00038	89 44 24 21	 mov	 DWORD PTR _szTmp$[esp+69], eax
  0003c	66 89 44 24 25	 mov	 WORD PTR _szTmp$[esp+73], ax
  00041	88 44 24 27	 mov	 BYTE PTR _szTmp$[esp+75], al

; 500  : 	LPARAM lLetter;
; 501  : 
; 502  : 	// Options
; 503  : 	ConfigWriteBegin ();

  00045	e8 00 00 00 00	 call	 _ConfigWriteBegin

; 504  : 
; 505  : 	ConfigWriteInt ("OpenExplorerWindowAfterMount",		bExplore);

  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR _bExplore
  0004f	50		 push	 eax
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JJNCGBDA@OpenExplorerWindowAfterMount?$AA@
  00055	e8 00 00 00 00	 call	 _ConfigWriteInt

; 506  : 	ConfigWriteInt ("UseDifferentTrayIconIfVolumesMounted",	bUseDifferentTrayIconIfVolMounted);

  0005a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bUseDifferentTrayIconIfVolMounted@@3HA ; bUseDifferentTrayIconIfVolMounted
  00060	51		 push	 ecx
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@KIMFPDKC@UseDifferentTrayIconIfVolumesMou@
  00066	e8 00 00 00 00	 call	 _ConfigWriteInt

; 507  : 	ConfigWriteInt ("SaveVolumeHistory",				!IsButtonChecked (GetDlgItem (hwndDlg, IDC_NO_HISTORY)));

  0006b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	68 ee 03 00 00	 push	 1006			; 000003eeH
  00079	56		 push	 esi
  0007a	ff d7		 call	 edi
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 _IsButtonChecked
  00082	f7 d8		 neg	 eax
  00084	1b c0		 sbb	 eax, eax
  00086	40		 inc	 eax
  00087	50		 push	 eax
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CGLEBHPJ@SaveVolumeHistory?$AA@
  0008d	e8 00 00 00 00	 call	 _ConfigWriteInt

; 508  : 
; 509  : 	ConfigWriteInt ("CachePasswords",					bCacheInDriverDefault);

  00092	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bCacheInDriverDefault@@3HA ; bCacheInDriverDefault
  00098	52		 push	 edx
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NEHAKGAO@CachePasswords?$AA@
  0009e	e8 00 00 00 00	 call	 _ConfigWriteInt

; 510  : 	ConfigWriteInt ("WipePasswordCacheOnExit",			bWipeCacheOnExit);

  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bWipeCacheOnExit@@3HA ; bWipeCacheOnExit
  000a8	50		 push	 eax
  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BNIOMO@WipePasswordCacheOnExit?$AA@
  000ae	e8 00 00 00 00	 call	 _ConfigWriteInt

; 511  : 	ConfigWriteInt ("WipeCacheOnAutoDismount",			bWipeCacheOnAutoDismount);

  000b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bWipeCacheOnAutoDismount@@3HA ; bWipeCacheOnAutoDismount
  000b9	51		 push	 ecx
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FALOPCPE@WipeCacheOnAutoDismount?$AA@
  000bf	e8 00 00 00 00	 call	 _ConfigWriteInt

; 512  : 
; 513  : 	ConfigWriteInt ("StartOnLogon",						bStartOnLogon);

  000c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bStartOnLogon
  000ca	52		 push	 edx
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PLOGBODB@StartOnLogon?$AA@
  000d0	e8 00 00 00 00	 call	 _ConfigWriteInt

; 514  : 	ConfigWriteInt ("MountDevicesOnLogon",				bMountDevicesOnLogon);

  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _bMountDevicesOnLogon
  000da	50		 push	 eax
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MJJJGJOJ@MountDevicesOnLogon?$AA@
  000e0	e8 00 00 00 00	 call	 _ConfigWriteInt

; 515  : 	ConfigWriteInt ("MountFavoritesOnLogon",			bMountFavoritesOnLogon);

  000e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bMountFavoritesOnLogon
  000eb	51		 push	 ecx
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@IDCDKCEI@MountFavoritesOnLogon?$AA@
  000f1	e8 00 00 00 00	 call	 _ConfigWriteInt

; 516  : 
; 517  : 	ConfigWriteInt ("MountVolumesReadOnly",				defaultMountOptions.ReadOnly);

  000f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?defaultMountOptions@@3UMountOptions@@A
  000fc	52		 push	 edx
  000fd	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@NMKCILAI@MountVolumesReadOnly?$AA@
  00102	e8 00 00 00 00	 call	 _ConfigWriteInt

; 518  : 	ConfigWriteInt ("MountVolumesRemovable",			defaultMountOptions.Removable);

  00107	a1 04 00 00 00	 mov	 eax, DWORD PTR ?defaultMountOptions@@3UMountOptions@@A+4
  0010c	83 c4 44	 add	 esp, 68			; 00000044H
  0010f	50		 push	 eax
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BIDCCDPC@MountVolumesRemovable?$AA@
  00115	e8 00 00 00 00	 call	 _ConfigWriteInt

; 519  : 	ConfigWriteInt ("PreserveTimestamps",				defaultMountOptions.PreserveTimestamp);

  0011a	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?defaultMountOptions@@3UMountOptions@@A+12
  00120	51		 push	 ecx
  00121	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LGMAGJMG@PreserveTimestamps?$AA@
  00126	e8 00 00 00 00	 call	 _ConfigWriteInt

; 520  : 
; 521  : 	ConfigWriteInt ("EnableBackgroundTask",				bEnableBkgTask);

  0012b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bEnableBkgTask
  00131	52		 push	 edx
  00132	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KJGFKHOF@EnableBackgroundTask?$AA@
  00137	e8 00 00 00 00	 call	 _ConfigWriteInt

; 522  : 	ConfigWriteInt ("CloseBackgroundTaskOnNoVolumes",	bCloseBkgTaskWhenNoVolumes);

  0013c	a1 00 00 00 00	 mov	 eax, DWORD PTR _bCloseBkgTaskWhenNoVolumes
  00141	50		 push	 eax
  00142	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@GDDJCJHL@CloseBackgroundTaskOnNoVolumes?$AA@
  00147	e8 00 00 00 00	 call	 _ConfigWriteInt

; 523  : 
; 524  : 	ConfigWriteInt ("DismountOnLogOff",					bDismountOnLogOff);

  0014c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bDismountOnLogOff@@3HA ; bDismountOnLogOff
  00152	51		 push	 ecx
  00153	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JBNDKFIM@DismountOnLogOff?$AA@
  00158	e8 00 00 00 00	 call	 _ConfigWriteInt

; 525  : 	ConfigWriteInt ("DismountOnPowerSaving",			bDismountOnPowerSaving);

  0015d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bDismountOnPowerSaving@@3HA ; bDismountOnPowerSaving
  00163	52		 push	 edx
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EJBOHCEJ@DismountOnPowerSaving?$AA@
  00169	e8 00 00 00 00	 call	 _ConfigWriteInt

; 526  : 	ConfigWriteInt ("DismountOnScreenSaver",			bDismountOnScreenSaver);

  0016e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bDismountOnScreenSaver@@3HA ; bDismountOnScreenSaver
  00173	50		 push	 eax
  00174	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MFJBKGJC@DismountOnScreenSaver?$AA@
  00179	e8 00 00 00 00	 call	 _ConfigWriteInt

; 527  : 	ConfigWriteInt ("ForceAutoDismount",				bForceAutoDismount);

  0017e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bForceAutoDismount@@3HA ; bForceAutoDismount
  00184	51		 push	 ecx
  00185	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EDMFNFCN@ForceAutoDismount?$AA@
  0018a	e8 00 00 00 00	 call	 _ConfigWriteInt

; 528  : 	ConfigWriteInt ("MaxVolumeIdleTime",				MaxVolumeIdleTime);

  0018f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?MaxVolumeIdleTime@@3HA ; MaxVolumeIdleTime
  00195	83 c4 40	 add	 esp, 64			; 00000040H
  00198	52		 push	 edx
  00199	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JKHHAAAB@MaxVolumeIdleTime?$AA@
  0019e	e8 00 00 00 00	 call	 _ConfigWriteInt

; 529  : 
; 530  : 	ConfigWriteInt ("HiddenSectorDetectionStatus",				HiddenSectorDetectionStatus);

  001a3	a1 00 00 00 00	 mov	 eax, DWORD PTR _HiddenSectorDetectionStatus
  001a8	50		 push	 eax
  001a9	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@GHIJBHNC@HiddenSectorDetectionStatus?$AA@
  001ae	e8 00 00 00 00	 call	 _ConfigWriteInt

; 531  : 
; 532  : 	ConfigWriteInt ("UseKeyfiles",						defaultKeyFilesParam.EnableKeyFiles);

  001b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _defaultKeyFilesParam
  001b9	51		 push	 ecx
  001ba	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LMLBNLIJ@UseKeyfiles?$AA@
  001bf	e8 00 00 00 00	 call	 _ConfigWriteInt
  001c4	83 c4 18	 add	 esp, 24			; 00000018H

; 533  : 
; 534  : 	if (IsHiddenOSRunning())

  001c7	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  001cc	85 c0		 test	 eax, eax
  001ce	74 14		 je	 SHORT $LN3@SaveSettin

; 535  : 		ConfigWriteInt ("HiddenSystemLeakProtNotifStatus", HiddenSysLeakProtectionNotificationStatus);

  001d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?HiddenSysLeakProtectionNotificationStatus@@3HA ; HiddenSysLeakProtectionNotificationStatus
  001d6	52		 push	 edx
  001d7	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JDEDMHHP@HiddenSystemLeakProtNotifStatus?$AA@
  001dc	e8 00 00 00 00	 call	 _ConfigWriteInt
  001e1	83 c4 08	 add	 esp, 8
$LN3@SaveSettin:

; 536  : 
; 537  : 	// Drive Letter
; 538  : 	lLetter = GetSelectedLong (GetDlgItem (hwndDlg, IDC_DRIVELIST));

  001e4	68 ef 03 00 00	 push	 1007			; 000003efH
  001e9	56		 push	 esi
  001ea	ff d7		 call	 edi
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 _GetSelectedLong

; 539  : 	if (LOWORD (lLetter) != 0xffff)

  001f2	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  001f7	83 c4 04	 add	 esp, 4
  001fa	66 3b c1	 cmp	 ax, cx
  001fd	74 19		 je	 SHORT $LN2@SaveSettin

; 540  : 		sprintf (szTmp, "%c:", (char) HIWORD (lLetter));

  001ff	c1 e8 10	 shr	 eax, 16			; 00000010H
  00202	0f be d0	 movsx	 edx, al
  00205	52		 push	 edx
  00206	8d 44 24 0c	 lea	 eax, DWORD PTR _szTmp$[esp+48]
  0020a	68 00 00 00 00	 push	 OFFSET ??_C@_03CGGPNEOP@?$CFc?3?$AA@
  0020f	50		 push	 eax
  00210	e8 00 00 00 00	 call	 _sprintf
  00215	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@SaveSettin:

; 541  : 	ConfigWriteString ("LastSelectedDrive", szTmp);

  00218	8d 4c 24 08	 lea	 ecx, DWORD PTR _szTmp$[esp+44]
  0021c	51		 push	 ecx
  0021d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JNFOKCJG@LastSelectedDrive?$AA@
  00222	e8 00 00 00 00	 call	 _ConfigWriteString

; 542  : 
; 543  : 	ConfigWriteInt ("CloseSecurityTokenSessionsAfterMount",	CloseSecurityTokenSessionsAfterMount);

  00227	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?CloseSecurityTokenSessionsAfterMount@@3HA ; CloseSecurityTokenSessionsAfterMount
  0022d	52		 push	 edx
  0022e	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@EFIMMBIH@CloseSecurityTokenSessionsAfterM@
  00233	e8 00 00 00 00	 call	 _ConfigWriteInt

; 544  : 	ConfigWriteInt ("DisableSystemCrashDetection", DisableSystemCrashDetection);

  00238	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DisableSystemCrashDetection@@3HA ; DisableSystemCrashDetection
  0023d	50		 push	 eax
  0023e	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PPMGLKNI@DisableSystemCrashDetection?$AA@
  00243	e8 00 00 00 00	 call	 _ConfigWriteInt

; 545  : 
; 546  : 	// Hotkeys
; 547  : 	ConfigWriteInt ("HotkeyModAutoMountDevices",				Hotkeys[HK_AUTOMOUNT_DEVICES].vKeyModifiers);

  00248	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _Hotkeys+4
  0024e	51		 push	 ecx
  0024f	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@HBJAAJIJ@HotkeyModAutoMountDevices?$AA@
  00254	e8 00 00 00 00	 call	 _ConfigWriteInt

; 548  : 	ConfigWriteInt ("HotkeyCodeAutoMountDevices",				Hotkeys[HK_AUTOMOUNT_DEVICES].vKeyCode);

  00259	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _Hotkeys
  0025f	52		 push	 edx
  00260	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HFFNPBG@HotkeyCodeAutoMountDevices?$AA@
  00265	e8 00 00 00 00	 call	 _ConfigWriteInt

; 549  : 	ConfigWriteInt ("HotkeyModDismountAll",						Hotkeys[HK_DISMOUNT_ALL].vKeyModifiers);

  0026a	a1 14 00 00 00	 mov	 eax, DWORD PTR _Hotkeys+20
  0026f	50		 push	 eax
  00270	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JKNNFNFF@HotkeyModDismountAll?$AA@
  00275	e8 00 00 00 00	 call	 _ConfigWriteInt

; 550  : 	ConfigWriteInt ("HotkeyCodeDismountAll",					Hotkeys[HK_DISMOUNT_ALL].vKeyCode);

  0027a	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR _Hotkeys+16
  00280	51		 push	 ecx
  00281	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FAJJGDON@HotkeyCodeDismountAll?$AA@
  00286	e8 00 00 00 00	 call	 _ConfigWriteInt

; 551  : 	ConfigWriteInt ("HotkeyModWipeCache",						Hotkeys[HK_WIPE_CACHE].vKeyModifiers);

  0028b	8b 15 44 00 00
	00		 mov	 edx, DWORD PTR _Hotkeys+68
  00291	52		 push	 edx
  00292	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PFLDJHEM@HotkeyModWipeCache?$AA@
  00297	e8 00 00 00 00	 call	 _ConfigWriteInt

; 552  : 	ConfigWriteInt ("HotkeyCodeWipeCache",						Hotkeys[HK_WIPE_CACHE].vKeyCode);

  0029c	a1 40 00 00 00	 mov	 eax, DWORD PTR _Hotkeys+64
  002a1	83 c4 40	 add	 esp, 64			; 00000040H
  002a4	50		 push	 eax
  002a5	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NNJKBANE@HotkeyCodeWipeCache?$AA@
  002aa	e8 00 00 00 00	 call	 _ConfigWriteInt

; 553  : 	ConfigWriteInt ("HotkeyModDismountAllWipe",					Hotkeys[HK_DISMOUNT_ALL_AND_WIPE].vKeyModifiers);

  002af	8b 0d 1c 00 00
	00		 mov	 ecx, DWORD PTR _Hotkeys+28
  002b5	51		 push	 ecx
  002b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DMJNNPJL@HotkeyModDismountAllWipe?$AA@
  002bb	e8 00 00 00 00	 call	 _ConfigWriteInt

; 554  : 	ConfigWriteInt ("HotkeyCodeDismountAllWipe",				Hotkeys[HK_DISMOUNT_ALL_AND_WIPE].vKeyCode);

  002c0	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR _Hotkeys+24
  002c6	52		 push	 edx
  002c7	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@CFAKNANL@HotkeyCodeDismountAllWipe?$AA@
  002cc	e8 00 00 00 00	 call	 _ConfigWriteInt

; 555  : 	ConfigWriteInt ("HotkeyModForceDismountAllWipe",			Hotkeys[HK_FORCE_DISMOUNT_ALL_AND_WIPE].vKeyModifiers);

  002d1	a1 24 00 00 00	 mov	 eax, DWORD PTR _Hotkeys+36
  002d6	50		 push	 eax
  002d7	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@CEGBOIP@HotkeyModForceDismountAllWipe?$AA@
  002dc	e8 00 00 00 00	 call	 _ConfigWriteInt

; 556  : 	ConfigWriteInt ("HotkeyCodeForceDismountAllWipe",			Hotkeys[HK_FORCE_DISMOUNT_ALL_AND_WIPE].vKeyCode);

  002e1	8b 0d 20 00 00
	00		 mov	 ecx, DWORD PTR _Hotkeys+32
  002e7	51		 push	 ecx
  002e8	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@GBIKFBPN@HotkeyCodeForceDismountAllWipe?$AA@
  002ed	e8 00 00 00 00	 call	 _ConfigWriteInt

; 557  : 	ConfigWriteInt ("HotkeyModForceDismountAllWipeExit",		Hotkeys[HK_FORCE_DISMOUNT_ALL_AND_WIPE_AND_EXIT].vKeyModifiers);

  002f2	8b 15 2c 00 00
	00		 mov	 edx, DWORD PTR _Hotkeys+44
  002f8	52		 push	 edx
  002f9	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@NJGCLCKP@HotkeyModForceDismountAllWipeExi@
  002fe	e8 00 00 00 00	 call	 _ConfigWriteInt

; 558  : 	ConfigWriteInt ("HotkeyCodeForceDismountAllWipeExit",		Hotkeys[HK_FORCE_DISMOUNT_ALL_AND_WIPE_AND_EXIT].vKeyCode);

  00303	a1 28 00 00 00	 mov	 eax, DWORD PTR _Hotkeys+40
  00308	50		 push	 eax
  00309	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@NAGGLIOF@HotkeyCodeForceDismountAllWipeEx@
  0030e	e8 00 00 00 00	 call	 _ConfigWriteInt

; 559  : 	ConfigWriteInt ("HotkeyModMountFavoriteVolumes",			Hotkeys[HK_MOUNT_FAVORITE_VOLUMES].vKeyModifiers);

  00313	8b 0d 34 00 00
	00		 mov	 ecx, DWORD PTR _Hotkeys+52
  00319	51		 push	 ecx
  0031a	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@BBPCFBJL@HotkeyModMountFavoriteVolumes?$AA@
  0031f	e8 00 00 00 00	 call	 _ConfigWriteInt

; 560  : 	ConfigWriteInt ("HotkeyCodeMountFavoriteVolumes",			Hotkeys[HK_MOUNT_FAVORITE_VOLUMES].vKeyCode);

  00324	8b 15 30 00 00
	00		 mov	 edx, DWORD PTR _Hotkeys+48
  0032a	83 c4 40	 add	 esp, 64			; 00000040H
  0032d	52		 push	 edx
  0032e	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@HCDOBOOJ@HotkeyCodeMountFavoriteVolumes?$AA@
  00333	e8 00 00 00 00	 call	 _ConfigWriteInt

; 561  : 	ConfigWriteInt ("HotkeyModShowHideMainWindow",				Hotkeys[HK_SHOW_HIDE_MAIN_WINDOW].vKeyModifiers);

  00338	a1 3c 00 00 00	 mov	 eax, DWORD PTR _Hotkeys+60
  0033d	50		 push	 eax
  0033e	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@LONPOCBB@HotkeyModShowHideMainWindow?$AA@
  00343	e8 00 00 00 00	 call	 _ConfigWriteInt

; 562  : 	ConfigWriteInt ("HotkeyCodeShowHideMainWindow",				Hotkeys[HK_SHOW_HIDE_MAIN_WINDOW].vKeyCode);

  00348	8b 0d 38 00 00
	00		 mov	 ecx, DWORD PTR _Hotkeys+56
  0034e	51		 push	 ecx
  0034f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CHLGHFOA@HotkeyCodeShowHideMainWindow?$AA@
  00354	e8 00 00 00 00	 call	 _ConfigWriteInt

; 563  : 	ConfigWriteInt ("HotkeyModCloseSecurityTokenSessions",		Hotkeys[HK_CLOSE_SECURITY_TOKEN_SESSIONS].vKeyModifiers);

  00359	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR _Hotkeys+12
  0035f	52		 push	 edx
  00360	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@HGCCLLKG@HotkeyModCloseSecurityTokenSessi@
  00365	e8 00 00 00 00	 call	 _ConfigWriteInt

; 564  : 	ConfigWriteInt ("HotkeyCodeCloseSecurityTokenSessions",		Hotkeys[HK_CLOSE_SECURITY_TOKEN_SESSIONS].vKeyCode);

  0036a	a1 08 00 00 00	 mov	 eax, DWORD PTR _Hotkeys+8
  0036f	50		 push	 eax
  00370	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JMGBPMDD@HotkeyCodeCloseSecurityTokenSess@
  00375	e8 00 00 00 00	 call	 _ConfigWriteInt

; 565  : 	ConfigWriteInt ("PlaySoundOnHotkeyMountDismount",			bPlaySoundOnSuccessfulHkDismount);

  0037a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bPlaySoundOnSuccessfulHkDismount
  00380	51		 push	 ecx
  00381	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BFHJPAFJ@PlaySoundOnHotkeyMountDismount?$AA@
  00386	e8 00 00 00 00	 call	 _ConfigWriteInt

; 566  : 	ConfigWriteInt ("DisplayMsgBoxOnHotkeyDismount",			bDisplayBalloonOnSuccessfulHkDismount);

  0038b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bDisplayBalloonOnSuccessfulHkDismount
  00391	52		 push	 edx
  00392	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@GGCIJNCK@DisplayMsgBoxOnHotkeyDismount?$AA@
  00397	e8 00 00 00 00	 call	 _ConfigWriteInt
  0039c	83 c4 38	 add	 esp, 56			; 00000038H

; 567  : 
; 568  : 	// Language
; 569  : 	if (GetPreferredLangId () != NULL)

  0039f	e8 00 00 00 00	 call	 _GetPreferredLangId
  003a4	85 c0		 test	 eax, eax
  003a6	74 13		 je	 SHORT $LN1@SaveSettin

; 570  : 		ConfigWriteString ("Language", GetPreferredLangId ());

  003a8	e8 00 00 00 00	 call	 _GetPreferredLangId
  003ad	50		 push	 eax
  003ae	68 00 00 00 00	 push	 OFFSET ??_C@_08BENDAOKD@Language?$AA@
  003b3	e8 00 00 00 00	 call	 _ConfigWriteString
  003b8	83 c4 08	 add	 esp, 8
$LN1@SaveSettin:

; 571  : 
; 572  : 	// PKCS#11 Library Path
; 573  : 	ConfigWriteString ("SecurityTokenLibrary", SecurityTokenLibraryPath[0] ? SecurityTokenLibraryPath : "");

  003bb	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR _SecurityTokenLibraryPath, 0
  003c2	b8 00 00 00 00	 mov	 eax, OFFSET _SecurityTokenLibraryPath
  003c7	75 05		 jne	 SHORT $LN7@SaveSettin
  003c9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN7@SaveSettin:
  003ce	50		 push	 eax
  003cf	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MIMCAHPI@SecurityTokenLibrary?$AA@
  003d4	e8 00 00 00 00	 call	 _ConfigWriteString
  003d9	83 c4 08	 add	 esp, 8

; 574  : 
; 575  : 	ConfigWriteEnd ();

  003dc	e8 00 00 00 00	 call	 _ConfigWriteEnd

; 576  : 
; 577  : 	// History
; 578  : 	DumpCombo (GetDlgItem (hwndDlg, IDC_VOLUME), IsButtonChecked (GetDlgItem (hwndDlg, IDC_NO_HISTORY)));

  003e1	68 ee 03 00 00	 push	 1006			; 000003eeH
  003e6	56		 push	 esi
  003e7	ff d7		 call	 edi
  003e9	50		 push	 eax
  003ea	e8 00 00 00 00	 call	 _IsButtonChecked
  003ef	83 c4 04	 add	 esp, 4
  003f2	50		 push	 eax
  003f3	68 0a 04 00 00	 push	 1034			; 0000040aH
  003f8	56		 push	 esi
  003f9	ff d7		 call	 edi
  003fb	50		 push	 eax
  003fc	e8 00 00 00 00	 call	 _DumpCombo
  00401	83 c4 08	 add	 esp, 8

; 579  : 
; 580  : 	NormalCursor ();

  00404	e8 00 00 00 00	 call	 _NormalCursor

; 581  : }

  00409	8b 4c 24 28	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+44]
  0040d	5f		 pop	 edi
  0040e	5e		 pop	 esi
  0040f	33 cc		 xor	 ecx, esp
  00411	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00416	83 c4 24	 add	 esp, 36			; 00000024H
  00419	c3		 ret	 0
_SaveSettings ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@ILKHOBEF@NO_SYSENC_PARTITION_SELECTED?$AA@ ; `string'
PUBLIC	??_C@_0CN@HPAOAPNF@MOUNT_WITHOUT_PBA_VOL_ON_ACTIVE_@ ; `string'
PUBLIC	??_C@_0N@PJPEEMEG@INVALID_PATH?$AA@		; `string'
PUBLIC	??_C@_0M@OJHKIMBP@?2Partition0?$AA@		; `string'
PUBLIC	??_C@_0BC@PDEAFOMG@SELECT_FREE_DRIVE?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_CheckSysEncMountWithoutPBA
EXTRN	_CreateFullVolumePath:PROC
;	COMDAT ??_C@_0BN@ILKHOBEF@NO_SYSENC_PARTITION_SELECTED?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
CONST	SEGMENT
??_C@_0BN@ILKHOBEF@NO_SYSENC_PARTITION_SELECTED?$AA@ DB 'NO_SYSENC_PARTIT'
	DB	'ION_SELECTED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@HPAOAPNF@MOUNT_WITHOUT_PBA_VOL_ON_ACTIVE_@
CONST	SEGMENT
??_C@_0CN@HPAOAPNF@MOUNT_WITHOUT_PBA_VOL_ON_ACTIVE_@ DB 'MOUNT_WITHOUT_PB'
	DB	'A_VOL_ON_ACTIVE_SYSENC_DRIVE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PJPEEMEG@INVALID_PATH?$AA@
CONST	SEGMENT
??_C@_0N@PJPEEMEG@INVALID_PATH?$AA@ DB 'INVALID_PATH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OJHKIMBP@?2Partition0?$AA@
CONST	SEGMENT
??_C@_0M@OJHKIMBP@?2Partition0?$AA@ DB '\Partition0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PDEAFOMG@SELECT_FREE_DRIVE?$AA@
CONST	SEGMENT
??_C@_0BC@PDEAFOMG@SELECT_FREE_DRIVE?$AA@ DB 'SELECT_FREE_DRIVE', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_CheckSysEncMountWithoutPBA$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffcc8H
	DD	FLAT:__catch$_CheckSysEncMountWithoutPBA$0
__unwindtable$_CheckSysEncMountWithoutPBA DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_CheckSysEncMountWithoutPBA DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_CheckSysEncMountWithoutPBA$2
__ehfuncinfo$_CheckSysEncMountWithoutPBA DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_CheckSysEncMountWithoutPBA
	DD	01H
	DD	FLAT:__tryblocktable$_CheckSysEncMountWithoutPBA
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
xdata$x	ENDS
;	COMDAT _CheckSysEncMountWithoutPBA
_TEXT	SEGMENT
$T152761 = -918						; size = 94
_e$135978 = -824					; size = 4
_driveNo$135966 = -820					; size = 4
_tmpbDevice$ = -816					; size = 4
_szDiskFile$ = -812					; size = 261
_parentDrivePath$135967 = -548				; size = 261
_szDevicePath$ = -284					; size = 261
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_devicePath$ = 8					; size = 4
_quiet$ = 12						; size = 4
_CheckSysEncMountWithoutPBA PROC			; COMDAT

; 762  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_CheckSysEncMountWithoutPBA
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 03 00
	00		 sub	 esp, 908		; 0000038cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	8b 75 08	 mov	 esi, DWORD PTR _devicePath$[ebp]

; 763  : 	BOOL tmpbDevice;
; 764  : 	char szDevicePath [TC_MAX_PATH+1];
; 765  : 	char szDiskFile [TC_MAX_PATH+1];
; 766  : 
; 767  : 	if (strlen (devicePath) < 2)

  00034	8b c6		 mov	 eax, esi
  00036	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL27@CheckSysEn:
  00040	8a 08		 mov	 cl, BYTE PTR [eax]
  00042	40		 inc	 eax
  00043	84 c9		 test	 cl, cl
  00045	75 f9		 jne	 SHORT $LL27@CheckSysEn
  00047	2b c2		 sub	 eax, edx
  00049	83 f8 02	 cmp	 eax, 2

; 768  : 	{
; 769  : 		GetWindowTextA(GetDlgItem (MainDlg, IDC_VOLUME), szDevicePath, sizeof (szDevicePath));

  0004c	68 05 01 00 00	 push	 261			; 00000105H
  00051	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szDevicePath$[ebp]
  00057	73 76		 jae	 SHORT $LN17@CheckSysEn
  00059	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0005f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00065	50		 push	 eax
  00066	68 0a 04 00 00	 push	 1034			; 0000040aH
  0006b	51		 push	 ecx
  0006c	ff d6		 call	 esi
  0006e	50		 push	 eax
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 770  : 		CreateFullVolumePath (szDiskFile, szDevicePath, &tmpbDevice);

  00075	8d 95 d0 fc ff
	ff		 lea	 edx, DWORD PTR _tmpbDevice$[ebp]
  0007b	52		 push	 edx
  0007c	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szDevicePath$[ebp]
  00082	50		 push	 eax
  00083	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR _szDiskFile$[ebp]
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 _CreateFullVolumePath
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 771  : 
; 772  : 		if (!tmpbDevice)

  00092	83 bd d0 fc ff
	ff 00		 cmp	 DWORD PTR _tmpbDevice$[ebp], 0

; 773  : 		{
; 774  : 			if (!quiet)
; 775  : 				Warning ("NO_SYSENC_PARTITION_SELECTED");
; 776  : 
; 777  : 			return FALSE;

  00099	0f 84 4c 01 00
	00		 je	 $LN10@CheckSysEn

; 778  : 		}
; 779  : 
; 780  : 		if (LOWORD (GetSelectedLong (GetDlgItem (MainDlg, IDC_DRIVELIST))) != TC_MLIST_ITEM_FREE)

  0009f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  000a5	68 ef 03 00 00	 push	 1007			; 000003efH
  000aa	52		 push	 edx
  000ab	ff d6		 call	 esi
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 _GetSelectedLong
  000b3	83 c4 04	 add	 esp, 4
  000b6	66 85 c0	 test	 ax, ax
  000b9	74 1e		 je	 SHORT $LN12@CheckSysEn

; 781  : 		{
; 782  : 			if (!quiet)

  000bb	83 7d 0c 00	 cmp	 DWORD PTR _quiet$[ebp], 0
  000bf	0f 85 39 01 00
	00		 jne	 $LN9@CheckSysEn

; 783  : 				Warning ("SELECT_FREE_DRIVE");

  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PDEAFOMG@SELECT_FREE_DRIVE?$AA@

; 784  : 
; 785  : 			return FALSE;

  000ca	e9 27 01 00 00	 jmp	 $LN31@CheckSysEn
$LN17@CheckSysEn:

; 786  : 		}
; 787  : 	}
; 788  : 	else
; 789  : 		strncpy (szDevicePath, devicePath, sizeof (szDevicePath));

  000cf	56		 push	 esi
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 _strncpy
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@CheckSysEn:

; 790  : 
; 791  : 	char *partionPortion = strrchr (szDevicePath, '\\');

  000d9	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _szDevicePath$[ebp]
  000df	6a 5c		 push	 92			; 0000005cH
  000e1	51		 push	 ecx
  000e2	e8 00 00 00 00	 call	 _strrchr
  000e7	83 c4 08	 add	 esp, 8

; 792  : 
; 793  : 	if (!partionPortion
; 794  : 		|| !_stricmp (partionPortion, "\\Partition0"))

  000ea	85 c0		 test	 eax, eax
  000ec	0f 84 f9 00 00
	00		 je	 $LN10@CheckSysEn
  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OJHKIMBP@?2Partition0?$AA@
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 __stricmp
  000fd	83 c4 08	 add	 esp, 8
  00100	85 c0		 test	 eax, eax
  00102	0f 84 e3 00 00
	00		 je	 $LN10@CheckSysEn

; 801  : 	}
; 802  : 
; 803  : 	try
; 804  : 	{
; 805  : 		BootEncStatus = BootEncObj->GetStatus();

  00108	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0010e	8d 95 6a fc ff
	ff		 lea	 edx, DWORD PTR $T152761[ebp]
  00114	52		 push	 edx
  00115	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0011c	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00121	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00126	8b f0		 mov	 esi, eax
  00128	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  0012d	f3 a5		 rep movsd
  0012f	66 a5		 movsw

; 806  : 
; 807  : 		if (BootEncStatus.DriveMounted)

  00131	83 3d 06 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, 0
  00138	74 7f		 je	 SHORT $LN7@CheckSysEn

; 808  : 		{
; 809  : 			int retCode = 0;
; 810  : 			int driveNo;
; 811  : 			char parentDrivePath [TC_MAX_PATH+1];
; 812  : 
; 813  : 			if (sscanf (szDevicePath, "\\Device\\Harddisk%d\\Partition", &driveNo) != 1)

  0013a	8d 85 cc fc ff
	ff		 lea	 eax, DWORD PTR _driveNo$135966[ebp]
  00140	50		 push	 eax
  00141	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _szDevicePath$[ebp]
  00147	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CEPHIDFC@?2Device?2Harddisk?$CFd?2Partition?$AA@
  0014c	51		 push	 ecx
  0014d	e8 00 00 00 00	 call	 _sscanf
  00152	83 c4 0c	 add	 esp, 12			; 0000000cH
  00155	83 f8 01	 cmp	 eax, 1
  00158	74 19		 je	 SHORT $LN6@CheckSysEn

; 814  : 			{
; 815  : 				if (!quiet)

  0015a	83 7d 0c 00	 cmp	 DWORD PTR _quiet$[ebp], 0
  0015e	0f 85 9a 00 00
	00		 jne	 $LN9@CheckSysEn

; 816  : 					Error ("INVALID_PATH");

  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PJPEEMEG@INVALID_PATH?$AA@
  00169	e8 00 00 00 00	 call	 _Error

; 817  : 
; 818  : 				return FALSE;

  0016e	e9 88 00 00 00	 jmp	 $LN32@CheckSysEn
$LN6@CheckSysEn:

; 819  : 			}
; 820  : 
; 821  : 			_snprintf (parentDrivePath,
; 822  : 				sizeof (parentDrivePath),
; 823  : 				"\\Device\\Harddisk%d\\Partition0",
; 824  : 				driveNo);

  00173	8b 95 cc fc ff
	ff		 mov	 edx, DWORD PTR _driveNo$135966[ebp]
  00179	52		 push	 edx
  0017a	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@FKAHPBKI@?2Device?2Harddisk?$CFd?2Partition0?$AA@
  0017f	8d 85 dc fd ff
	ff		 lea	 eax, DWORD PTR _parentDrivePath$135967[ebp]
  00185	68 05 01 00 00	 push	 261			; 00000105H
  0018a	50		 push	 eax
  0018b	e8 00 00 00 00	 call	 __snprintf

; 825  : 
; 826  : 			WaitCursor ();

  00190	e8 00 00 00 00	 call	 _WaitCursor

; 827  : 
; 828  : 			// This is critical (re-mounting a mounted system volume as a normal volume could cause data corruption)
; 829  : 			// so we force the slower but reliable method
; 830  : 			retCode = IsSystemDevicePath (parentDrivePath, MainDlg, TRUE);

  00195	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0019b	6a 01		 push	 1
  0019d	51		 push	 ecx
  0019e	8d 95 dc fd ff
	ff		 lea	 edx, DWORD PTR _parentDrivePath$135967[ebp]
  001a4	52		 push	 edx
  001a5	e8 00 00 00 00	 call	 _IsSystemDevicePath
  001aa	83 c4 1c	 add	 esp, 28			; 0000001cH
  001ad	8b f0		 mov	 esi, eax

; 831  : 
; 832  : 			NormalCursor();

  001af	e8 00 00 00 00	 call	 _NormalCursor

; 833  : 
; 834  : 			if (retCode != 2)

  001b4	83 fe 02	 cmp	 esi, 2
  001b7	74 07		 je	 SHORT $LN4@CheckSysEn
$LN7@CheckSysEn:

; 835  : 				return TRUE;

  001b9	b8 01 00 00 00	 mov	 eax, 1
  001be	eb 40		 jmp	 SHORT $LN18@CheckSysEn
$LN4@CheckSysEn:

; 836  : 			else
; 837  : 			{
; 838  : 				// The partition is located on active system drive
; 839  : 
; 840  : 				if (!quiet)

  001c0	83 7d 0c 00	 cmp	 DWORD PTR _quiet$[ebp], 0
  001c4	75 38		 jne	 SHORT $LN9@CheckSysEn

; 841  : 					Warning ("MOUNT_WITHOUT_PBA_VOL_ON_ACTIVE_SYSENC_DRIVE");

  001c6	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@HPAOAPNF@MOUNT_WITHOUT_PBA_VOL_ON_ACTIVE_@

; 842  : 
; 843  : 				return FALSE;

  001cb	eb 29		 jmp	 SHORT $LN31@CheckSysEn
__catch$_CheckSysEncMountWithoutPBA$0:

; 844  : 			}
; 845  : 		}
; 846  : 		else
; 847  : 			return TRUE;
; 848  : 	}
; 849  : 	catch (Exception &e)
; 850  : 	{
; 851  : 		NormalCursor();

  001cd	e8 00 00 00 00	 call	 _NormalCursor

; 852  : 		e.Show (MainDlg);

  001d2	8b 8d c8 fc ff
	ff		 mov	 ecx, DWORD PTR _e$135978[ebp]
  001d8	8b 01		 mov	 eax, DWORD PTR [ecx]
  001da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  001e0	8b 00		 mov	 eax, DWORD PTR [eax]
  001e2	52		 push	 edx
  001e3	ff d0		 call	 eax

; 853  : 	}

  001e5	b8 00 00 00 00	 mov	 eax, $LN9@CheckSysEn
  001ea	c3		 ret	 0
$LN10@CheckSysEn:

; 795  : 	{
; 796  : 		// Only partitions are supported (not whole drives)
; 797  : 		if (!quiet)

  001eb	83 7d 0c 00	 cmp	 DWORD PTR _quiet$[ebp], 0
  001ef	75 0d		 jne	 SHORT $LN9@CheckSysEn

; 798  : 			Warning ("NO_SYSENC_PARTITION_SELECTED");

  001f1	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ILKHOBEF@NO_SYSENC_PARTITION_SELECTED?$AA@
$LN31@CheckSysEn:
  001f6	e8 00 00 00 00	 call	 _Warning
$LN32@CheckSysEn:
  001fb	83 c4 04	 add	 esp, 4
$LN9@CheckSysEn:

; 799  : 
; 800  : 		return FALSE;

  001fe	33 c0		 xor	 eax, eax
$LN18@CheckSysEn:

; 854  : 
; 855  : 	return FALSE;
; 856  : }

  00200	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00203	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0020a	59		 pop	 ecx
  0020b	5f		 pop	 edi
  0020c	5e		 pop	 esi
  0020d	5b		 pop	 ebx
  0020e	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00211	33 cd		 xor	 ecx, ebp
  00213	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00218	8b e5		 mov	 esp, ebp
  0021a	5d		 pop	 ebp
  0021b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_CheckSysEncMountWithoutPBA:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 64 fc ff
	ff		 mov	 ecx, DWORD PTR [edx-924]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_CheckSysEncMountWithoutPBA
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_CheckSysEncMountWithoutPBA ENDP
PUBLIC	_SelectItem
; Function compile flags: /Ogtpy
;	COMDAT _SelectItem
_TEXT	SEGMENT
_item$ = -52						; size = 52
_hTree$ = 8						; size = 4
_nLetter$ = 12						; size = 1
_SelectItem PROC					; COMDAT

; 903  : {

  00000	83 ec 34	 sub	 esp, 52			; 00000034H

; 904  : 	if (nLetter == 0)

  00003	80 7c 24 3c 00	 cmp	 BYTE PTR _nLetter$[esp+48], 0
  00008	55		 push	 ebp
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7c 24 44	 mov	 edi, DWORD PTR _hTree$[esp+60]
  0000f	75 10		 jne	 SHORT $LN7@SelectItem

; 905  : 	{
; 906  : 		// The caller specified an invalid drive letter (typically because it is unknown). 
; 907  : 		// Find out which drive letter is currently selected in the list and use it.
; 908  : 		nLetter = (char) (HIWORD (GetSelectedLong (hTree)));

  00011	57		 push	 edi
  00012	e8 00 00 00 00	 call	 _GetSelectedLong
  00017	83 c4 04	 add	 esp, 4
  0001a	c1 e8 10	 shr	 eax, 16			; 00000010H
  0001d	88 44 24 48	 mov	 BYTE PTR _nLetter$[esp+60], al
$LN7@SelectItem:

; 909  : 	}
; 910  : 
; 911  : 	int i;
; 912  : 	LVITEM item;
; 913  : 	
; 914  : 	for (i = 0; i < ListView_GetItemCount(hTree); i++)

  00021	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SendMessageA@16
  00027	33 f6		 xor	 esi, esi
  00029	56		 push	 esi
  0002a	56		 push	 esi
  0002b	68 04 10 00 00	 push	 4100			; 00001004H
  00030	57		 push	 edi
  00031	ff d5		 call	 ebp
  00033	85 c0		 test	 eax, eax
  00035	0f 8e a3 00 00
	00		 jle	 $LN4@SelectItem
  0003b	eb 03 8d 49 00	 npad	 5
$LL6@SelectItem:

; 915  : 	{
; 916  : 		memset(&item, 0, sizeof(LVITEM));

  00040	6a 34		 push	 52			; 00000034H
  00042	8d 44 24 10	 lea	 eax, DWORD PTR _item$[esp+68]
  00046	6a 00		 push	 0
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _memset
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 917  : 		item.mask = LVIF_PARAM;
; 918  : 		item.iItem = i;
; 919  : 
; 920  : 		if (ListView_GetItem (hTree, &item) == FALSE)

  00051	8d 4c 24 0c	 lea	 ecx, DWORD PTR _item$[esp+64]
  00055	51		 push	 ecx
  00056	6a 00		 push	 0
  00058	68 05 10 00 00	 push	 4101			; 00001005H
  0005d	57		 push	 edi
  0005e	c7 44 24 1c 04
	00 00 00	 mov	 DWORD PTR _item$[esp+80], 4
  00066	89 74 24 20	 mov	 DWORD PTR _item$[esp+84], esi
  0006a	ff d5		 call	 ebp
  0006c	85 c0		 test	 eax, eax
  0006e	74 2d		 je	 SHORT $LN11@SelectItem

; 922  : 		else
; 923  : 		{
; 924  : 			if (HIWORD (item.lParam) == nLetter)

  00070	8b 54 24 2c	 mov	 edx, DWORD PTR _item$[esp+96]
  00074	0f be 44 24 48	 movsx	 eax, BYTE PTR _nLetter$[esp+60]
  00079	c1 ea 10	 shr	 edx, 16			; 00000010H
  0007c	3b d0		 cmp	 edx, eax
  0007e	74 26		 je	 SHORT $LN12@SelectItem
  00080	6a 00		 push	 0
  00082	6a 00		 push	 0
  00084	68 04 10 00 00	 push	 4100			; 00001004H
  00089	57		 push	 edi
  0008a	46		 inc	 esi
  0008b	ff d5		 call	 ebp
  0008d	3b f0		 cmp	 esi, eax
  0008f	7c af		 jl	 SHORT $LL6@SelectItem
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi

; 932  : 				return TRUE;
; 933  : 			}
; 934  : 		}
; 935  : 	}
; 936  : 
; 937  : 	return TRUE;

  00093	b8 01 00 00 00	 mov	 eax, 1
  00098	5d		 pop	 ebp

; 938  : }

  00099	83 c4 34	 add	 esp, 52			; 00000034H
  0009c	c3		 ret	 0
$LN11@SelectItem:
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi

; 921  : 			return FALSE;

  0009f	33 c0		 xor	 eax, eax
  000a1	5d		 pop	 ebp

; 938  : }

  000a2	83 c4 34	 add	 esp, 52			; 00000034H
  000a5	c3		 ret	 0
$LN12@SelectItem:

; 925  : 			{
; 926  : 				memset(&item, 0, sizeof(LVITEM));

  000a6	6a 34		 push	 52			; 00000034H
  000a8	8d 4c 24 10	 lea	 ecx, DWORD PTR _item$[esp+68]
  000ac	6a 00		 push	 0
  000ae	51		 push	 ecx
  000af	e8 00 00 00 00	 call	 _memset
  000b4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 927  : 				item.state = LVIS_FOCUSED|LVIS_SELECTED;
; 928  : 				item.stateMask = LVIS_FOCUSED|LVIS_SELECTED;
; 929  : 				item.mask = LVIF_STATE;
; 930  : 				item.iItem = i;
; 931  : 				SendMessage(hTree, LVM_SETITEMSTATE, i, (LPARAM) &item);

  000b7	8d 54 24 0c	 lea	 edx, DWORD PTR _item$[esp+64]
  000bb	52		 push	 edx
  000bc	56		 push	 esi
  000bd	b8 03 00 00 00	 mov	 eax, 3
  000c2	68 2b 10 00 00	 push	 4139			; 0000102bH
  000c7	57		 push	 edi
  000c8	89 44 24 28	 mov	 DWORD PTR _item$[esp+92], eax
  000cc	89 44 24 2c	 mov	 DWORD PTR _item$[esp+96], eax
  000d0	c7 44 24 1c 08
	00 00 00	 mov	 DWORD PTR _item$[esp+80], 8
  000d8	89 74 24 20	 mov	 DWORD PTR _item$[esp+84], esi
  000dc	ff d5		 call	 ebp
$LN4@SelectItem:
  000de	5f		 pop	 edi
  000df	5e		 pop	 esi

; 932  : 				return TRUE;
; 933  : 			}
; 934  : 		}
; 935  : 	}
; 936  : 
; 937  : 	return TRUE;

  000e0	b8 01 00 00 00	 mov	 eax, 1
  000e5	5d		 pop	 ebp

; 938  : }

  000e6	83 c4 34	 add	 esp, 52			; 00000034H
  000e9	c3		 ret	 0
_SelectItem ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@CHONIFKG@IDD_PREFERENCES_DLG?$AA@	; `string'
PUBLIC	??_C@_0BG@KMGBADNB@IDM_TOKEN_PREFERENCES?$AA@	; `string'
PUBLIC	??_C@_0BF@ENCPBHMN@IDM_DEFAULT_KEYFILES?$AA@	; `string'
PUBLIC	??_C@_0BL@MNFBKGOL@IDM_SYS_FAVORITES_SETTINGS?$AA@ ; `string'
PUBLIC	??_C@_0BE@MAKEILOG@IDM_SYSENC_SETTINGS?$AA@	; `string'
PUBLIC	??_C@_0BJ@EOENNFH@IDM_PERFORMANCE_SETTINGS?$AA@	; `string'
PUBLIC	??_C@_0BE@LICAELEJ@IDM_HOTKEY_SETTINGS?$AA@	; `string'
PUBLIC	??_C@_0N@FMENHOOK@IDM_LANGUAGE?$AA@		; `string'
PUBLIC	??_C@_0CB@JNMNPOPP@WARN_PREF_AUTO_DISMOUNT_ON_POWER@ ; `string'
PUBLIC	??_C@_0BI@MENNOFDM@WARN_PREF_AUTO_DISMOUNT?$AA@	; `string'
PUBLIC	??_C@_0BP@IFIIHFON@CONFIRM_NO_FORCED_AUTODISMOUNT?$AA@ ; `string'
PUBLIC	??_C@_0CB@DILBGMN@CONFIRM_BACKGROUND_TASK_DISABLED@ ; `string'
PUBLIC	?PreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z	; PreferencesDlgProc
EXTRN	__imp__SetDlgItemInt@16:PROC
EXTRN	__imp__DestroyMenu@4:PROC
EXTRN	__imp__TrackPopupMenu@28:PROC
EXTRN	__imp__CreatePopupMenu@0:PROC
EXTRN	_ManageStartupSeq:PROC
EXTRN	__imp__GetDlgItemInt@16:PROC
;	COMDAT ?ActivePreferencesDialogWindow@?1??PreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z@4PAU2@A
_BSS	SEGMENT
?ActivePreferencesDialogWindow@?1??PreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z@4PAU2@A DD 01H DUP (?) ; `PreferencesDlgProc'::`2'::ActivePreferencesDialogWindow
_BSS	ENDS
;	COMDAT ?PreferencesDialogActive@?1??PreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z@4HA
_BSS	SEGMENT
?PreferencesDialogActive@?1??PreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z@4HA DD 01H DUP (?) ; `PreferencesDlgProc'::`2'::PreferencesDialogActive
_BSS	ENDS
;	COMDAT ??_C@_0BE@CHONIFKG@IDD_PREFERENCES_DLG?$AA@
CONST	SEGMENT
??_C@_0BE@CHONIFKG@IDD_PREFERENCES_DLG?$AA@ DB 'IDD_PREFERENCES_DLG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KMGBADNB@IDM_TOKEN_PREFERENCES?$AA@
CONST	SEGMENT
??_C@_0BG@KMGBADNB@IDM_TOKEN_PREFERENCES?$AA@ DB 'IDM_TOKEN_PREFERENCES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ENCPBHMN@IDM_DEFAULT_KEYFILES?$AA@
CONST	SEGMENT
??_C@_0BF@ENCPBHMN@IDM_DEFAULT_KEYFILES?$AA@ DB 'IDM_DEFAULT_KEYFILES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MNFBKGOL@IDM_SYS_FAVORITES_SETTINGS?$AA@
CONST	SEGMENT
??_C@_0BL@MNFBKGOL@IDM_SYS_FAVORITES_SETTINGS?$AA@ DB 'IDM_SYS_FAVORITES_'
	DB	'SETTINGS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MAKEILOG@IDM_SYSENC_SETTINGS?$AA@
CONST	SEGMENT
??_C@_0BE@MAKEILOG@IDM_SYSENC_SETTINGS?$AA@ DB 'IDM_SYSENC_SETTINGS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EOENNFH@IDM_PERFORMANCE_SETTINGS?$AA@
CONST	SEGMENT
??_C@_0BJ@EOENNFH@IDM_PERFORMANCE_SETTINGS?$AA@ DB 'IDM_PERFORMANCE_SETTI'
	DB	'NGS', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LICAELEJ@IDM_HOTKEY_SETTINGS?$AA@
CONST	SEGMENT
??_C@_0BE@LICAELEJ@IDM_HOTKEY_SETTINGS?$AA@ DB 'IDM_HOTKEY_SETTINGS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FMENHOOK@IDM_LANGUAGE?$AA@
CONST	SEGMENT
??_C@_0N@FMENHOOK@IDM_LANGUAGE?$AA@ DB 'IDM_LANGUAGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JNMNPOPP@WARN_PREF_AUTO_DISMOUNT_ON_POWER@
CONST	SEGMENT
??_C@_0CB@JNMNPOPP@WARN_PREF_AUTO_DISMOUNT_ON_POWER@ DB 'WARN_PREF_AUTO_D'
	DB	'ISMOUNT_ON_POWER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MENNOFDM@WARN_PREF_AUTO_DISMOUNT?$AA@
CONST	SEGMENT
??_C@_0BI@MENNOFDM@WARN_PREF_AUTO_DISMOUNT?$AA@ DB 'WARN_PREF_AUTO_DISMOU'
	DB	'NT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IFIIHFON@CONFIRM_NO_FORCED_AUTODISMOUNT?$AA@
CONST	SEGMENT
??_C@_0BP@IFIIHFON@CONFIRM_NO_FORCED_AUTODISMOUNT?$AA@ DB 'CONFIRM_NO_FOR'
	DB	'CED_AUTODISMOUNT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DILBGMN@CONFIRM_BACKGROUND_TASK_DISABLED@
CONST	SEGMENT
??_C@_0CB@DILBGMN@CONFIRM_BACKGROUND_TASK_DISABLED@ DB 'CONFIRM_BACKGROUN'
	DB	'D_TASK_DISABLED', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?PreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_rect$136717 = -16					; size = 16
_p$136689 = 8						; size = 4
_hwndDlg$ = 8						; size = 4
_l$136688 = 12						; size = 4
_msg$ = 12						; size = 4
_s$136690 = 16						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?PreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z PROC		; PreferencesDlgProc, COMDAT

; 2209 : 	static BOOL PreferencesDialogActive = FALSE;
; 2210 : 	static HWND ActivePreferencesDialogWindow;
; 2211 : 
; 2212 : 	WORD lw = LOWORD (wParam);
; 2213 : 
; 2214 : 	switch (msg)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _msg$[esp-4]
  00004	83 ec 10	 sub	 esp, 16			; 00000010H
  00007	2d 10 01 00 00	 sub	 eax, 272		; 00000110H
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	0f 84 09 05 00
	00		 je	 $LN22@Preference@3
  00015	83 e8 01	 sub	 eax, 1

; 2397 : 	}
; 2398 : 
; 2399 : 	return 0;

  00018	0f 85 95 07 00
	00		 jne	 $LN42@Preference@3
  0001e	8b 5c 24 28	 mov	 ebx, DWORD PTR _wParam$[esp+24]
  00022	8b 74 24 20	 mov	 esi, DWORD PTR _hwndDlg$[esp+24]
  00026	b8 eb 03 00 00	 mov	 eax, 1003		; 000003ebH
  0002b	55		 push	 ebp
  0002c	66 3b d8	 cmp	 bx, ax
  0002f	75 54		 jne	 SHORT $LN18@Preference@3
  00031	50		 push	 eax
  00032	56		 push	 esi
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _IsButtonChecked
  0003f	83 c4 04	 add	 esp, 4
  00042	85 c0		 test	 eax, eax
  00044	75 22		 jne	 SHORT $LN39@Preference@3
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@DILBGMN@CONFIRM_BACKGROUND_TASK_DISABLED@
  0004b	e8 00 00 00 00	 call	 _AskWarnNoYes
  00050	83 c4 04	 add	 esp, 4
  00053	83 f8 07	 cmp	 eax, 7
  00056	75 10		 jne	 SHORT $LN39@Preference@3
  00058	6a 01		 push	 1
  0005a	68 eb 03 00 00	 push	 1003			; 000003ebH
  0005f	56		 push	 esi
  00060	e8 00 00 00 00	 call	 _SetCheckBox
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN39@Preference@3:
  00068	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0006b	85 db		 test	 ebx, ebx
  0006d	0f 85 9f 04 00
	00		 jne	 $LN1@Preference@3
  00073	e8 00 00 00 00	 call	 ?PreferencesDlgEnableButtons@@YAXPAUHWND__@@@Z ; PreferencesDlgEnableButtons
  00078	5d		 pop	 ebp
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0007e	5b		 pop	 ebx

; 2400 : }

  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	c2 10 00	 ret	 16			; 00000010H
$LN18@Preference@3:

; 2287 : 
; 2288 : 	case WM_COMMAND:
; 2289 : 
; 2290 : 		if (lw == IDC_PREF_BKG_TASK_ENABLE && !IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_BKG_TASK_ENABLE)))
; 2291 : 		{
; 2292 : 			if (AskWarnNoYes ("CONFIRM_BACKGROUND_TASK_DISABLED") == IDNO)
; 2293 : 				SetCheckBox (hwndDlg, IDC_PREF_BKG_TASK_ENABLE, TRUE);
; 2294 : 		}
; 2295 : 
; 2296 : 		// Forced dismount disabled warning
; 2297 : 		if (lw == IDC_PREF_DISMOUNT_INACTIVE
; 2298 : 			|| lw == IDC_PREF_DISMOUNT_LOGOFF
; 2299 : 			|| lw == IDC_PREF_DISMOUNT_POWERSAVING
; 2300 : 			|| lw == IDC_PREF_DISMOUNT_SCREENSAVER
; 2301 : 			|| lw == IDC_PREF_FORCE_AUTO_DISMOUNT)

  00085	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  0008b	b9 fc 03 00 00	 mov	 ecx, 1020		; 000003fcH
  00090	66 3b d9	 cmp	 bx, cx
  00093	74 2c		 je	 SHORT $LN16@Preference@3
  00095	ba fa 03 00 00	 mov	 edx, 1018		; 000003faH
  0009a	66 3b da	 cmp	 bx, dx
  0009d	74 22		 je	 SHORT $LN16@Preference@3
  0009f	b8 30 04 00 00	 mov	 eax, 1072		; 00000430H
  000a4	66 3b d8	 cmp	 bx, ax
  000a7	74 18		 je	 SHORT $LN16@Preference@3
  000a9	b9 2f 04 00 00	 mov	 ecx, 1071		; 0000042fH
  000ae	66 3b d9	 cmp	 bx, cx
  000b1	74 0e		 je	 SHORT $LN16@Preference@3
  000b3	ba 2c 04 00 00	 mov	 edx, 1068		; 0000042cH
  000b8	66 3b da	 cmp	 bx, dx
  000bb	0f 85 2d 01 00
	00		 jne	 $LN36@Preference@3
$LN16@Preference@3:

; 2302 : 		{
; 2303 : 			BOOL i = IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_DISMOUNT_INACTIVE));

  000c1	68 fc 03 00 00	 push	 1020			; 000003fcH
  000c6	56		 push	 esi
  000c7	ff d7		 call	 edi
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _IsButtonChecked
  000cf	83 c4 04	 add	 esp, 4

; 2304 : 			BOOL l = IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_DISMOUNT_LOGOFF));

  000d2	68 fa 03 00 00	 push	 1018			; 000003faH
  000d7	56		 push	 esi
  000d8	8b e8		 mov	 ebp, eax
  000da	ff d7		 call	 edi
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _IsButtonChecked
  000e2	83 c4 04	 add	 esp, 4

; 2305 : 			BOOL p = IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_DISMOUNT_POWERSAVING));

  000e5	68 30 04 00 00	 push	 1072			; 00000430H
  000ea	56		 push	 esi
  000eb	89 44 24 30	 mov	 DWORD PTR _l$136688[esp+36], eax
  000ef	ff d7		 call	 edi
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 _IsButtonChecked
  000f7	83 c4 04	 add	 esp, 4

; 2306 : 			BOOL s = IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_DISMOUNT_SCREENSAVER));

  000fa	68 2f 04 00 00	 push	 1071			; 0000042fH
  000ff	56		 push	 esi
  00100	89 44 24 2c	 mov	 DWORD PTR _p$136689[esp+36], eax
  00104	ff d7		 call	 edi
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 _IsButtonChecked
  0010c	83 c4 04	 add	 esp, 4

; 2307 : 			BOOL q = IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_FORCE_AUTO_DISMOUNT));

  0010f	68 2c 04 00 00	 push	 1068			; 0000042cH
  00114	56		 push	 esi
  00115	89 44 24 34	 mov	 DWORD PTR _s$136690[esp+36], eax
  00119	ff d7		 call	 edi
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _IsButtonChecked
  00121	83 c4 04	 add	 esp, 4

; 2308 : 
; 2309 : 			if (!q)

  00124	85 c0		 test	 eax, eax
  00126	0f 85 9f 00 00
	00		 jne	 $LN35@Preference@3

; 2310 : 			{
; 2311 : 				if (lw == IDC_PREF_FORCE_AUTO_DISMOUNT && (i || l || p || s))

  0012c	b8 2c 04 00 00	 mov	 eax, 1068		; 0000042cH
  00131	66 3b d8	 cmp	 bx, ax
  00134	75 3e		 jne	 SHORT $LN14@Preference@3
  00136	85 ed		 test	 ebp, ebp
  00138	75 16		 jne	 SHORT $LN37@Preference@3
  0013a	39 6c 24 28	 cmp	 DWORD PTR _l$136688[esp+28], ebp
  0013e	75 10		 jne	 SHORT $LN37@Preference@3
  00140	39 6c 24 24	 cmp	 DWORD PTR _p$136689[esp+28], ebp
  00144	75 0a		 jne	 SHORT $LN37@Preference@3
  00146	39 6c 24 2c	 cmp	 DWORD PTR _s$136690[esp+28], ebp
  0014a	0f 84 18 ff ff
	ff		 je	 $LN39@Preference@3
$LN37@Preference@3:

; 2312 : 				{
; 2313 : 					if (AskWarnNoYes ("CONFIRM_NO_FORCED_AUTODISMOUNT") == IDNO)

  00150	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@IFIIHFON@CONFIRM_NO_FORCED_AUTODISMOUNT?$AA@
  00155	e8 00 00 00 00	 call	 _AskWarnNoYes
  0015a	83 c4 04	 add	 esp, 4
  0015d	83 f8 07	 cmp	 eax, 7
  00160	75 69		 jne	 SHORT $LN35@Preference@3

; 2314 : 						SetCheckBox (hwndDlg, IDC_PREF_FORCE_AUTO_DISMOUNT, TRUE);

  00162	6a 01		 push	 1
  00164	68 2c 04 00 00	 push	 1068			; 0000042cH
  00169	56		 push	 esi
  0016a	e8 00 00 00 00	 call	 _SetCheckBox
  0016f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2315 : 				}
; 2316 : 				else if ((lw == IDC_PREF_DISMOUNT_INACTIVE && i

  00172	eb 57		 jmp	 SHORT $LN35@Preference@3
$LN14@Preference@3:

; 2317 : 					|| lw == IDC_PREF_DISMOUNT_LOGOFF && l
; 2318 : 					|| lw == IDC_PREF_DISMOUNT_POWERSAVING && p
; 2319 : 					|| lw == IDC_PREF_DISMOUNT_SCREENSAVER && s))

  00174	b9 fc 03 00 00	 mov	 ecx, 1020		; 000003fcH
  00179	66 3b d9	 cmp	 bx, cx
  0017c	75 06		 jne	 SHORT $LN8@Preference@3
  0017e	85 ed		 test	 ebp, ebp
  00180	75 3c		 jne	 SHORT $LN9@Preference@3
  00182	eb 47		 jmp	 SHORT $LN35@Preference@3
$LN8@Preference@3:
  00184	ba fa 03 00 00	 mov	 edx, 1018		; 000003faH
  00189	66 3b da	 cmp	 bx, dx
  0018c	75 09		 jne	 SHORT $LN7@Preference@3
  0018e	83 7c 24 28 00	 cmp	 DWORD PTR _l$136688[esp+28], 0
  00193	75 29		 jne	 SHORT $LN9@Preference@3
  00195	eb 34		 jmp	 SHORT $LN35@Preference@3
$LN7@Preference@3:
  00197	b8 30 04 00 00	 mov	 eax, 1072		; 00000430H
  0019c	66 3b d8	 cmp	 bx, ax
  0019f	75 0c		 jne	 SHORT $LN6@Preference@3
  001a1	83 7c 24 24 00	 cmp	 DWORD PTR _p$136689[esp+28], 0
  001a6	75 16		 jne	 SHORT $LN9@Preference@3
  001a8	e9 bb fe ff ff	 jmp	 $LN39@Preference@3
$LN6@Preference@3:
  001ad	b9 2f 04 00 00	 mov	 ecx, 1071		; 0000042fH
  001b2	66 3b d9	 cmp	 bx, cx
  001b5	75 14		 jne	 SHORT $LN35@Preference@3
  001b7	83 7c 24 2c 00	 cmp	 DWORD PTR _s$136690[esp+28], 0
  001bc	74 0d		 je	 SHORT $LN35@Preference@3
$LN9@Preference@3:

; 2320 : 					Warning ("WARN_PREF_AUTO_DISMOUNT");

  001be	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@MENNOFDM@WARN_PREF_AUTO_DISMOUNT?$AA@
  001c3	e8 00 00 00 00	 call	 _Warning
  001c8	83 c4 04	 add	 esp, 4
$LN35@Preference@3:

; 2321 : 			}
; 2322 : 
; 2323 : 			if (p && lw == IDC_PREF_DISMOUNT_POWERSAVING)

  001cb	83 7c 24 24 00	 cmp	 DWORD PTR _p$136689[esp+28], 0
  001d0	74 1c		 je	 SHORT $LN36@Preference@3
  001d2	ba 30 04 00 00	 mov	 edx, 1072		; 00000430H
  001d7	66 3b da	 cmp	 bx, dx
  001da	75 12		 jne	 SHORT $LN36@Preference@3

; 2324 : 				Warning ("WARN_PREF_AUTO_DISMOUNT_ON_POWER");

  001dc	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@JNMNPOPP@WARN_PREF_AUTO_DISMOUNT_ON_POWER@
  001e1	e8 00 00 00 00	 call	 _Warning
  001e6	83 c4 04	 add	 esp, 4

; 2325 : 		}
; 2326 : 
; 2327 : 		if (lw == IDCANCEL)

  001e9	e9 7a fe ff ff	 jmp	 $LN39@Preference@3
$LN36@Preference@3:
  001ee	66 83 fb 02	 cmp	 bx, 2
  001f2	75 22		 jne	 SHORT $LN4@Preference@3

; 2328 : 		{
; 2329 : 			PreferencesDialogActive = FALSE;

  001f4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?PreferencesDialogActive@?1??PreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z@4HA, 0

; 2330 : 			EndDialog (hwndDlg, lw);

  001fe	6a 02		 push	 2
$LN43@Preference@3:

; 2364 : 			EndDialog (hwndDlg, lw);

  00200	56		 push	 esi
  00201	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
  00207	5d		 pop	 ebp
  00208	5f		 pop	 edi
  00209	5e		 pop	 esi

; 2387 : 			return 1;

  0020a	b8 01 00 00 00	 mov	 eax, 1
  0020f	5b		 pop	 ebx

; 2400 : }

  00210	83 c4 10	 add	 esp, 16			; 00000010H
  00213	c2 10 00	 ret	 16			; 00000010H
$LN4@Preference@3:

; 2331 : 			return 1;
; 2332 : 		}
; 2333 : 
; 2334 : 		if (lw == IDOK)

  00216	66 83 fb 01	 cmp	 bx, 1
  0021a	0f 85 cc 01 00
	00		 jne	 $LN3@Preference@3

; 2335 : 		{
; 2336 : 			WaitCursor ();

  00220	e8 00 00 00 00	 call	 _WaitCursor

; 2337 : 
; 2338 : 			bExplore						= IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_OPEN_EXPLORER));	 

  00225	68 f0 03 00 00	 push	 1008			; 000003f0H
  0022a	56		 push	 esi
  0022b	ff d7		 call	 edi
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 _IsButtonChecked
  00233	83 c4 04	 add	 esp, 4

; 2339 : 			bUseDifferentTrayIconIfVolMounted = IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_USE_DIFF_TRAY_ICON_IF_VOL_MOUNTED));	 

  00236	68 f3 03 00 00	 push	 1011			; 000003f3H
  0023b	56		 push	 esi
  0023c	a3 00 00 00 00	 mov	 DWORD PTR _bExplore, eax
  00241	ff d7		 call	 edi
  00243	50		 push	 eax
  00244	e8 00 00 00 00	 call	 _IsButtonChecked
  00249	83 c4 04	 add	 esp, 4

; 2340 : 			bPreserveTimestamp = defaultMountOptions.PreserveTimestamp = IsButtonChecked (GetDlgItem (hwndDlg, IDC_PRESERVE_TIMESTAMPS));	 

  0024c	68 f5 03 00 00	 push	 1013			; 000003f5H
  00251	56		 push	 esi
  00252	a3 00 00 00 00	 mov	 DWORD PTR ?bUseDifferentTrayIconIfVolMounted@@3HA, eax ; bUseDifferentTrayIconIfVolMounted
  00257	ff d7		 call	 edi
  00259	50		 push	 eax
  0025a	e8 00 00 00 00	 call	 _IsButtonChecked
  0025f	83 c4 04	 add	 esp, 4

; 2341 : 			bWipeCacheOnExit				= IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_WIPE_CACHE_ON_EXIT));

  00262	68 f6 03 00 00	 push	 1014			; 000003f6H
  00267	56		 push	 esi
  00268	a3 0c 00 00 00	 mov	 DWORD PTR ?defaultMountOptions@@3UMountOptions@@A+12, eax
  0026d	a3 00 00 00 00	 mov	 DWORD PTR _bPreserveTimestamp, eax
  00272	ff d7		 call	 edi
  00274	50		 push	 eax
  00275	e8 00 00 00 00	 call	 _IsButtonChecked
  0027a	83 c4 04	 add	 esp, 4

; 2342 : 			bWipeCacheOnAutoDismount		= IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_WIPE_CACHE_ON_AUTODISMOUNT));

  0027d	68 32 04 00 00	 push	 1074			; 00000432H
  00282	56		 push	 esi
  00283	a3 00 00 00 00	 mov	 DWORD PTR ?bWipeCacheOnExit@@3HA, eax ; bWipeCacheOnExit
  00288	ff d7		 call	 edi
  0028a	50		 push	 eax
  0028b	e8 00 00 00 00	 call	 _IsButtonChecked
  00290	83 c4 04	 add	 esp, 4

; 2343 : 			bCacheInDriverDefault = bCacheInDriver = IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_CACHE_PASSWORDS));	 

  00293	68 f8 03 00 00	 push	 1016			; 000003f8H
  00298	56		 push	 esi
  00299	a3 00 00 00 00	 mov	 DWORD PTR ?bWipeCacheOnAutoDismount@@3HA, eax ; bWipeCacheOnAutoDismount
  0029e	ff d7		 call	 edi
  002a0	50		 push	 eax
  002a1	e8 00 00 00 00	 call	 _IsButtonChecked
  002a6	83 c4 04	 add	 esp, 4

; 2344 : 			defaultMountOptions.ReadOnly	= IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_MOUNT_READONLY));

  002a9	68 e8 03 00 00	 push	 1000			; 000003e8H
  002ae	56		 push	 esi
  002af	a3 00 00 00 00	 mov	 DWORD PTR ?bCacheInDriver@@3HA, eax ; bCacheInDriver
  002b4	a3 00 00 00 00	 mov	 DWORD PTR ?bCacheInDriverDefault@@3HA, eax ; bCacheInDriverDefault
  002b9	ff d7		 call	 edi
  002bb	50		 push	 eax
  002bc	e8 00 00 00 00	 call	 _IsButtonChecked
  002c1	83 c4 04	 add	 esp, 4

; 2345 : 			defaultMountOptions.Removable	= IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_MOUNT_REMOVABLE));

  002c4	68 e9 03 00 00	 push	 1001			; 000003e9H
  002c9	56		 push	 esi
  002ca	a3 00 00 00 00	 mov	 DWORD PTR ?defaultMountOptions@@3UMountOptions@@A, eax
  002cf	ff d7		 call	 edi
  002d1	50		 push	 eax
  002d2	e8 00 00 00 00	 call	 _IsButtonChecked
  002d7	83 c4 04	 add	 esp, 4

; 2346 : 			bEnableBkgTask				= IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_BKG_TASK_ENABLE));

  002da	68 eb 03 00 00	 push	 1003			; 000003ebH
  002df	56		 push	 esi
  002e0	a3 04 00 00 00	 mov	 DWORD PTR ?defaultMountOptions@@3UMountOptions@@A+4, eax
  002e5	ff d7		 call	 edi
  002e7	50		 push	 eax
  002e8	e8 00 00 00 00	 call	 _IsButtonChecked
  002ed	83 c4 04	 add	 esp, 4
  002f0	a3 00 00 00 00	 mov	 DWORD PTR _bEnableBkgTask, eax

; 2347 : 			bCloseBkgTaskWhenNoVolumes	= IsNonInstallMode() ? bCloseBkgTaskWhenNoVolumes : IsButtonChecked (GetDlgItem (hwndDlg, IDC_CLOSE_BKG_TASK_WHEN_NOVOL));

  002f5	e8 00 00 00 00	 call	 _IsNonInstallMode
  002fa	85 c0		 test	 eax, eax
  002fc	75 16		 jne	 SHORT $LN30@Preference@3
  002fe	68 33 04 00 00	 push	 1075			; 00000433H
  00303	56		 push	 esi
  00304	ff d7		 call	 edi
  00306	50		 push	 eax
  00307	e8 00 00 00 00	 call	 _IsButtonChecked
  0030c	83 c4 04	 add	 esp, 4
  0030f	a3 00 00 00 00	 mov	 DWORD PTR _bCloseBkgTaskWhenNoVolumes, eax
$LN30@Preference@3:

; 2348 : 			bDismountOnLogOff				= IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_DISMOUNT_LOGOFF));

  00314	68 fa 03 00 00	 push	 1018			; 000003faH
  00319	56		 push	 esi
  0031a	ff d7		 call	 edi
  0031c	50		 push	 eax
  0031d	e8 00 00 00 00	 call	 _IsButtonChecked
  00322	83 c4 04	 add	 esp, 4

; 2349 : 			bDismountOnPowerSaving			= IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_DISMOUNT_POWERSAVING));

  00325	68 30 04 00 00	 push	 1072			; 00000430H
  0032a	56		 push	 esi
  0032b	a3 00 00 00 00	 mov	 DWORD PTR ?bDismountOnLogOff@@3HA, eax ; bDismountOnLogOff
  00330	ff d7		 call	 edi
  00332	50		 push	 eax
  00333	e8 00 00 00 00	 call	 _IsButtonChecked
  00338	83 c4 04	 add	 esp, 4

; 2350 : 			bDismountOnScreenSaver			= IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_DISMOUNT_SCREENSAVER));

  0033b	68 2f 04 00 00	 push	 1071			; 0000042fH
  00340	56		 push	 esi
  00341	a3 00 00 00 00	 mov	 DWORD PTR ?bDismountOnPowerSaving@@3HA, eax ; bDismountOnPowerSaving
  00346	ff d7		 call	 edi
  00348	50		 push	 eax
  00349	e8 00 00 00 00	 call	 _IsButtonChecked
  0034e	83 c4 04	 add	 esp, 4

; 2351 : 			bForceAutoDismount				= IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_FORCE_AUTO_DISMOUNT));

  00351	68 2c 04 00 00	 push	 1068			; 0000042cH
  00356	56		 push	 esi
  00357	a3 00 00 00 00	 mov	 DWORD PTR ?bDismountOnScreenSaver@@3HA, eax ; bDismountOnScreenSaver
  0035c	ff d7		 call	 edi
  0035e	50		 push	 eax
  0035f	e8 00 00 00 00	 call	 _IsButtonChecked
  00364	83 c4 04	 add	 esp, 4

; 2352 : 			MaxVolumeIdleTime				= GetDlgItemInt (hwndDlg, IDC_PREF_DISMOUNT_INACTIVE_TIME, NULL, FALSE)
; 2353 : 												* (IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_DISMOUNT_INACTIVE)) ? 1 : -1);

  00367	68 fc 03 00 00	 push	 1020			; 000003fcH
  0036c	56		 push	 esi
  0036d	a3 00 00 00 00	 mov	 DWORD PTR ?bForceAutoDismount@@3HA, eax ; bForceAutoDismount
  00372	ff d7		 call	 edi
  00374	50		 push	 eax
  00375	e8 00 00 00 00	 call	 _IsButtonChecked
  0037a	83 c4 04	 add	 esp, 4
  0037d	6a 00		 push	 0
  0037f	8b d8		 mov	 ebx, eax
  00381	f7 db		 neg	 ebx
  00383	6a 00		 push	 0
  00385	1b db		 sbb	 ebx, ebx
  00387	68 2d 04 00 00	 push	 1069			; 0000042dH
  0038c	83 e3 02	 and	 ebx, 2
  0038f	56		 push	 esi
  00390	4b		 dec	 ebx
  00391	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemInt@16
  00397	0f af c3	 imul	 eax, ebx

; 2354 : 			bStartOnLogon					= IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_LOGON_START));	 

  0039a	68 37 04 00 00	 push	 1079			; 00000437H
  0039f	56		 push	 esi
  003a0	a3 00 00 00 00	 mov	 DWORD PTR ?MaxVolumeIdleTime@@3HA, eax ; MaxVolumeIdleTime
  003a5	ff d7		 call	 edi
  003a7	50		 push	 eax
  003a8	e8 00 00 00 00	 call	 _IsButtonChecked
  003ad	83 c4 04	 add	 esp, 4

; 2355 : 			bMountDevicesOnLogon			= IsButtonChecked (GetDlgItem (hwndDlg, IDC_PREF_LOGON_MOUNT_DEVICES));	 

  003b0	68 38 04 00 00	 push	 1080			; 00000438H
  003b5	56		 push	 esi
  003b6	a3 00 00 00 00	 mov	 DWORD PTR _bStartOnLogon, eax
  003bb	ff d7		 call	 edi
  003bd	50		 push	 eax
  003be	e8 00 00 00 00	 call	 _IsButtonChecked
  003c3	a3 00 00 00 00	 mov	 DWORD PTR _bMountDevicesOnLogon, eax

; 2356 : 
; 2357 : 			ManageStartupSeq ();

  003c8	e8 00 00 00 00	 call	 _ManageStartupSeq

; 2358 : 
; 2359 : 			SaveSettings (hwndDlg);

  003cd	56		 push	 esi
  003ce	e8 00 00 00 00	 call	 _SaveSettings
  003d3	83 c4 08	 add	 esp, 8

; 2360 : 
; 2361 : 			NormalCursor ();

  003d6	e8 00 00 00 00	 call	 _NormalCursor

; 2362 : 
; 2363 : 			PreferencesDialogActive = FALSE;

  003db	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?PreferencesDialogActive@?1??PreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z@4HA, 0

; 2364 : 			EndDialog (hwndDlg, lw);

  003e5	6a 01		 push	 1

; 2365 : 			return 1;

  003e7	e9 14 fe ff ff	 jmp	 $LN43@Preference@3
$LN3@Preference@3:

; 2366 : 		}
; 2367 : 
; 2368 : 		if (lw == IDC_MORE_SETTINGS)

  003ec	b8 55 04 00 00	 mov	 eax, 1109		; 00000455H
  003f1	66 3b d8	 cmp	 bx, ax
  003f4	0f 85 6e fc ff
	ff		 jne	 $LN39@Preference@3

; 2369 : 		{
; 2370 : 			HMENU popup = CreatePopupMenu ();

  003fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0

; 2371 : 
; 2372 : 			AppendMenuW (popup, MF_STRING, IDM_LANGUAGE, GetString ("IDM_LANGUAGE"));

  00400	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FMENHOOK@IDM_LANGUAGE?$AA@
  00405	8b d8		 mov	 ebx, eax
  00407	e8 00 00 00 00	 call	 _GetString
  0040c	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__AppendMenuW@16
  00412	83 c4 04	 add	 esp, 4
  00415	50		 push	 eax
  00416	68 58 9c 00 00	 push	 40024			; 00009c58H
  0041b	6a 00		 push	 0
  0041d	53		 push	 ebx
  0041e	ff d5		 call	 ebp

; 2373 : 			AppendMenuW (popup, MF_STRING, IDM_HOTKEY_SETTINGS, GetString ("IDM_HOTKEY_SETTINGS"));

  00420	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LICAELEJ@IDM_HOTKEY_SETTINGS?$AA@
  00425	e8 00 00 00 00	 call	 _GetString
  0042a	83 c4 04	 add	 esp, 4
  0042d	50		 push	 eax
  0042e	68 5c 9c 00 00	 push	 40028			; 00009c5cH
  00433	6a 00		 push	 0
  00435	53		 push	 ebx
  00436	ff d5		 call	 ebp

; 2374 : 			AppendMenuW (popup, MF_STRING, IDM_PERFORMANCE_SETTINGS, GetString ("IDM_PERFORMANCE_SETTINGS"));

  00438	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@EOENNFH@IDM_PERFORMANCE_SETTINGS?$AA@
  0043d	e8 00 00 00 00	 call	 _GetString
  00442	83 c4 04	 add	 esp, 4
  00445	50		 push	 eax
  00446	68 7e 9c 00 00	 push	 40062			; 00009c7eH
  0044b	6a 00		 push	 0
  0044d	53		 push	 ebx
  0044e	ff d5		 call	 ebp

; 2375 : 			AppendMenuW (popup, MF_STRING, IDM_SYSENC_SETTINGS, GetString ("IDM_SYSENC_SETTINGS"));

  00450	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MAKEILOG@IDM_SYSENC_SETTINGS?$AA@
  00455	e8 00 00 00 00	 call	 _GetString
  0045a	83 c4 04	 add	 esp, 4
  0045d	50		 push	 eax
  0045e	68 76 9c 00 00	 push	 40054			; 00009c76H
  00463	6a 00		 push	 0
  00465	53		 push	 ebx
  00466	ff d5		 call	 ebp

; 2376 : 			AppendMenuW (popup, MF_STRING, IDM_SYS_FAVORITES_SETTINGS, GetString ("IDM_SYS_FAVORITES_SETTINGS"));

  00468	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MNFBKGOL@IDM_SYS_FAVORITES_SETTINGS?$AA@
  0046d	e8 00 00 00 00	 call	 _GetString
  00472	83 c4 04	 add	 esp, 4
  00475	50		 push	 eax
  00476	68 79 9c 00 00	 push	 40057			; 00009c79H
  0047b	6a 00		 push	 0
  0047d	53		 push	 ebx
  0047e	ff d5		 call	 ebp

; 2377 : 			AppendMenuW (popup, MF_STRING, IDM_DEFAULT_KEYFILES, GetString ("IDM_DEFAULT_KEYFILES"));

  00480	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@ENCPBHMN@IDM_DEFAULT_KEYFILES?$AA@
  00485	e8 00 00 00 00	 call	 _GetString
  0048a	83 c4 04	 add	 esp, 4
  0048d	50		 push	 eax
  0048e	68 4a 9c 00 00	 push	 40010			; 00009c4aH
  00493	6a 00		 push	 0
  00495	53		 push	 ebx
  00496	ff d5		 call	 ebp

; 2378 : 			AppendMenuW (popup, MF_STRING, IDM_TOKEN_PREFERENCES, GetString ("IDM_TOKEN_PREFERENCES"));

  00498	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KMGBADNB@IDM_TOKEN_PREFERENCES?$AA@
  0049d	e8 00 00 00 00	 call	 _GetString
  004a2	83 c4 04	 add	 esp, 4
  004a5	50		 push	 eax
  004a6	68 73 9c 00 00	 push	 40051			; 00009c73H
  004ab	6a 00		 push	 0
  004ad	53		 push	 ebx
  004ae	ff d5		 call	 ebp

; 2379 : 
; 2380 : 			RECT rect;
; 2381 : 			GetWindowRect (GetDlgItem (hwndDlg, IDC_MORE_SETTINGS), &rect);

  004b0	8d 4c 24 10	 lea	 ecx, DWORD PTR _rect$136717[esp+32]
  004b4	51		 push	 ecx
  004b5	68 55 04 00 00	 push	 1109			; 00000455H
  004ba	56		 push	 esi
  004bb	ff d7		 call	 edi
  004bd	50		 push	 eax
  004be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 2382 : 
; 2383 : 			int menuItem = TrackPopupMenu (popup, TPM_RETURNCMD | TPM_LEFTBUTTON, rect.left + 2, rect.top + 2, 0, hwndDlg, NULL);

  004c4	8b 54 24 14	 mov	 edx, DWORD PTR _rect$136717[esp+36]
  004c8	8b 44 24 10	 mov	 eax, DWORD PTR _rect$136717[esp+32]
  004cc	6a 00		 push	 0
  004ce	56		 push	 esi
  004cf	6a 00		 push	 0
  004d1	83 c2 02	 add	 edx, 2
  004d4	52		 push	 edx
  004d5	83 c0 02	 add	 eax, 2
  004d8	50		 push	 eax
  004d9	68 00 01 00 00	 push	 256			; 00000100H
  004de	53		 push	 ebx
  004df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TrackPopupMenu@28

; 2384 : 			DestroyMenu (popup);

  004e5	53		 push	 ebx
  004e6	8b f0		 mov	 esi, eax
  004e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyMenu@4

; 2385 : 
; 2386 : 			SendMessage (MainDlg, WM_COMMAND, menuItem, NULL);

  004ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  004f4	6a 00		 push	 0
  004f6	56		 push	 esi
  004f7	68 11 01 00 00	 push	 273			; 00000111H
  004fc	51		 push	 ecx
  004fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00503	5d		 pop	 ebp
  00504	5f		 pop	 edi
  00505	5e		 pop	 esi

; 2387 : 			return 1;

  00506	b8 01 00 00 00	 mov	 eax, 1
  0050b	5b		 pop	 ebx

; 2400 : }

  0050c	83 c4 10	 add	 esp, 16			; 00000010H
  0050f	c2 10 00	 ret	 16			; 00000010H
$LN1@Preference@3:
  00512	5d		 pop	 ebp
  00513	5f		 pop	 edi
  00514	5e		 pop	 esi

; 2388 : 		}
; 2389 : 
; 2390 : 		if (HIWORD (wParam) == BN_CLICKED)
; 2391 : 		{
; 2392 : 			PreferencesDlgEnableButtons (hwndDlg);
; 2393 : 			return 1;
; 2394 : 		}
; 2395 : 
; 2396 : 		return 0;

  00515	33 c0		 xor	 eax, eax
  00517	5b		 pop	 ebx

; 2400 : }

  00518	83 c4 10	 add	 esp, 16			; 00000010H
  0051b	c2 10 00	 ret	 16			; 00000010H
$LN22@Preference@3:

; 2215 : 	{
; 2216 : 	case WM_INITDIALOG:
; 2217 : 		{
; 2218 : 			if (PreferencesDialogActive)

  0051e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?PreferencesDialogActive@?1??PreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z@4HA, 0
  00525	74 36		 je	 SHORT $LN21@Preference@3

; 2219 : 			{
; 2220 : 				ShowWindow (ActivePreferencesDialogWindow, SW_SHOW);

  00527	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ActivePreferencesDialogWindow@?1??PreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z@4PAU2@A
  0052d	6a 05		 push	 5
  0052f	52		 push	 edx
  00530	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 2221 : 				SetForegroundWindow (ActivePreferencesDialogWindow);

  00536	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ActivePreferencesDialogWindow@?1??PreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z@4PAU2@A
  0053b	50		 push	 eax
  0053c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetForegroundWindow@4

; 2222 : 				EndDialog (hwndDlg, IDCANCEL);

  00542	8b 4c 24 20	 mov	 ecx, DWORD PTR _hwndDlg$[esp+24]
  00546	6a 02		 push	 2
  00548	51		 push	 ecx
  00549	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
  0054f	5f		 pop	 edi
  00550	5e		 pop	 esi

; 2223 : 				return 1;

  00551	b8 01 00 00 00	 mov	 eax, 1
  00556	5b		 pop	 ebx

; 2400 : }

  00557	83 c4 10	 add	 esp, 16			; 00000010H
  0055a	c2 10 00	 ret	 16			; 00000010H
$LN21@Preference@3:

; 2224 : 			}
; 2225 : 
; 2226 : 			ActivePreferencesDialogWindow = hwndDlg;

  0055d	8b 74 24 20	 mov	 esi, DWORD PTR _hwndDlg$[esp+24]

; 2227 : 			PreferencesDialogActive = TRUE;
; 2228 : 
; 2229 : 			LocalizeDialog (hwndDlg, "IDD_PREFERENCES_DLG");

  00561	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CHONIFKG@IDD_PREFERENCES_DLG?$AA@
  00566	56		 push	 esi
  00567	89 35 00 00 00
	00		 mov	 DWORD PTR ?ActivePreferencesDialogWindow@?1??PreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z@4PAU2@A, esi
  0056d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?PreferencesDialogActive@?1??PreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z@4HA, 1
  00577	e8 00 00 00 00	 call	 _LocalizeDialog

; 2230 : 		
; 2231 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PREF_OPEN_EXPLORER), BM_SETCHECK, 
; 2232 : 						bExplore ? BST_CHECKED:BST_UNCHECKED, 0);

  0057c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00582	83 c4 08	 add	 esp, 8
  00585	33 d2		 xor	 edx, edx
  00587	39 15 00 00 00
	00		 cmp	 DWORD PTR _bExplore, edx
  0058d	6a 00		 push	 0
  0058f	0f 95 c2	 setne	 dl
  00592	52		 push	 edx
  00593	68 f1 00 00 00	 push	 241			; 000000f1H
  00598	68 f0 03 00 00	 push	 1008			; 000003f0H
  0059d	56		 push	 esi
  0059e	ff d7		 call	 edi
  005a0	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  005a6	50		 push	 eax
  005a7	ff d3		 call	 ebx

; 2233 : 
; 2234 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PREF_USE_DIFF_TRAY_ICON_IF_VOL_MOUNTED), BM_SETCHECK, 
; 2235 : 						bUseDifferentTrayIconIfVolMounted ? BST_CHECKED:BST_UNCHECKED, 0);

  005a9	33 c0		 xor	 eax, eax
  005ab	39 05 00 00 00
	00		 cmp	 DWORD PTR ?bUseDifferentTrayIconIfVolMounted@@3HA, eax ; bUseDifferentTrayIconIfVolMounted
  005b1	6a 00		 push	 0
  005b3	0f 95 c0	 setne	 al
  005b6	50		 push	 eax
  005b7	68 f1 00 00 00	 push	 241			; 000000f1H
  005bc	68 f3 03 00 00	 push	 1011			; 000003f3H
  005c1	56		 push	 esi
  005c2	ff d7		 call	 edi
  005c4	50		 push	 eax
  005c5	ff d3		 call	 ebx

; 2236 : 			
; 2237 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PRESERVE_TIMESTAMPS), BM_SETCHECK, 
; 2238 : 						defaultMountOptions.PreserveTimestamp ? BST_CHECKED:BST_UNCHECKED, 0);

  005c7	33 c9		 xor	 ecx, ecx
  005c9	39 0d 0c 00 00
	00		 cmp	 DWORD PTR ?defaultMountOptions@@3UMountOptions@@A+12, ecx
  005cf	6a 00		 push	 0
  005d1	0f 95 c1	 setne	 cl
  005d4	51		 push	 ecx
  005d5	68 f1 00 00 00	 push	 241			; 000000f1H
  005da	68 f5 03 00 00	 push	 1013			; 000003f5H
  005df	56		 push	 esi
  005e0	ff d7		 call	 edi
  005e2	50		 push	 eax
  005e3	ff d3		 call	 ebx

; 2239 : 
; 2240 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PREF_WIPE_CACHE_ON_EXIT), BM_SETCHECK, 
; 2241 : 						bWipeCacheOnExit ? BST_CHECKED:BST_UNCHECKED, 0);

  005e5	33 d2		 xor	 edx, edx
  005e7	39 15 00 00 00
	00		 cmp	 DWORD PTR ?bWipeCacheOnExit@@3HA, edx ; bWipeCacheOnExit
  005ed	6a 00		 push	 0
  005ef	0f 95 c2	 setne	 dl
  005f2	52		 push	 edx
  005f3	68 f1 00 00 00	 push	 241			; 000000f1H
  005f8	68 f6 03 00 00	 push	 1014			; 000003f6H
  005fd	56		 push	 esi
  005fe	ff d7		 call	 edi
  00600	50		 push	 eax
  00601	ff d3		 call	 ebx

; 2242 : 
; 2243 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PREF_WIPE_CACHE_ON_AUTODISMOUNT), BM_SETCHECK, 
; 2244 : 						bWipeCacheOnAutoDismount ? BST_CHECKED:BST_UNCHECKED, 0);

  00603	33 c0		 xor	 eax, eax
  00605	39 05 00 00 00
	00		 cmp	 DWORD PTR ?bWipeCacheOnAutoDismount@@3HA, eax ; bWipeCacheOnAutoDismount
  0060b	6a 00		 push	 0
  0060d	0f 95 c0	 setne	 al
  00610	50		 push	 eax
  00611	68 f1 00 00 00	 push	 241			; 000000f1H
  00616	68 32 04 00 00	 push	 1074			; 00000432H
  0061b	56		 push	 esi
  0061c	ff d7		 call	 edi
  0061e	50		 push	 eax
  0061f	ff d3		 call	 ebx

; 2245 : 
; 2246 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PREF_CACHE_PASSWORDS), BM_SETCHECK, 
; 2247 : 						bCacheInDriver ? BST_CHECKED:BST_UNCHECKED, 0);

  00621	33 c9		 xor	 ecx, ecx
  00623	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?bCacheInDriver@@3HA, ecx ; bCacheInDriver
  00629	6a 00		 push	 0
  0062b	0f 95 c1	 setne	 cl
  0062e	51		 push	 ecx
  0062f	68 f1 00 00 00	 push	 241			; 000000f1H
  00634	68 f8 03 00 00	 push	 1016			; 000003f8H
  00639	56		 push	 esi
  0063a	ff d7		 call	 edi
  0063c	50		 push	 eax
  0063d	ff d3		 call	 ebx

; 2248 : 			
; 2249 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PREF_MOUNT_READONLY), BM_SETCHECK, 
; 2250 : 						defaultMountOptions.ReadOnly ? BST_CHECKED:BST_UNCHECKED, 0);

  0063f	33 d2		 xor	 edx, edx
  00641	39 15 00 00 00
	00		 cmp	 DWORD PTR ?defaultMountOptions@@3UMountOptions@@A, edx
  00647	6a 00		 push	 0
  00649	0f 95 c2	 setne	 dl
  0064c	52		 push	 edx
  0064d	68 f1 00 00 00	 push	 241			; 000000f1H
  00652	68 e8 03 00 00	 push	 1000			; 000003e8H
  00657	56		 push	 esi
  00658	ff d7		 call	 edi
  0065a	50		 push	 eax
  0065b	ff d3		 call	 ebx

; 2251 : 
; 2252 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PREF_MOUNT_REMOVABLE), BM_SETCHECK, 
; 2253 : 						defaultMountOptions.Removable ? BST_CHECKED:BST_UNCHECKED, 0);

  0065d	33 c0		 xor	 eax, eax
  0065f	39 05 04 00 00
	00		 cmp	 DWORD PTR ?defaultMountOptions@@3UMountOptions@@A+4, eax
  00665	6a 00		 push	 0
  00667	0f 95 c0	 setne	 al
  0066a	50		 push	 eax
  0066b	68 f1 00 00 00	 push	 241			; 000000f1H
  00670	68 e9 03 00 00	 push	 1001			; 000003e9H
  00675	56		 push	 esi
  00676	ff d7		 call	 edi
  00678	50		 push	 eax
  00679	ff d3		 call	 ebx

; 2254 : 
; 2255 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PREF_LOGON_START), BM_SETCHECK, 
; 2256 : 						bStartOnLogon ? BST_CHECKED:BST_UNCHECKED, 0);

  0067b	33 c9		 xor	 ecx, ecx
  0067d	39 0d 00 00 00
	00		 cmp	 DWORD PTR _bStartOnLogon, ecx
  00683	6a 00		 push	 0
  00685	0f 95 c1	 setne	 cl
  00688	51		 push	 ecx
  00689	68 f1 00 00 00	 push	 241			; 000000f1H
  0068e	68 37 04 00 00	 push	 1079			; 00000437H
  00693	56		 push	 esi
  00694	ff d7		 call	 edi
  00696	50		 push	 eax
  00697	ff d3		 call	 ebx

; 2257 : 
; 2258 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PREF_LOGON_MOUNT_DEVICES), BM_SETCHECK, 
; 2259 : 						bMountDevicesOnLogon ? BST_CHECKED:BST_UNCHECKED, 0);

  00699	33 d2		 xor	 edx, edx
  0069b	39 15 00 00 00
	00		 cmp	 DWORD PTR _bMountDevicesOnLogon, edx
  006a1	6a 00		 push	 0
  006a3	0f 95 c2	 setne	 dl
  006a6	52		 push	 edx
  006a7	68 f1 00 00 00	 push	 241			; 000000f1H
  006ac	68 38 04 00 00	 push	 1080			; 00000438H
  006b1	56		 push	 esi
  006b2	ff d7		 call	 edi
  006b4	50		 push	 eax
  006b5	ff d3		 call	 ebx

; 2260 : 
; 2261 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PREF_BKG_TASK_ENABLE), BM_SETCHECK, 
; 2262 : 						bEnableBkgTask ? BST_CHECKED:BST_UNCHECKED, 0);

  006b7	33 c0		 xor	 eax, eax
  006b9	39 05 00 00 00
	00		 cmp	 DWORD PTR _bEnableBkgTask, eax
  006bf	6a 00		 push	 0
  006c1	0f 95 c0	 setne	 al
  006c4	50		 push	 eax
  006c5	68 f1 00 00 00	 push	 241			; 000000f1H
  006ca	68 eb 03 00 00	 push	 1003			; 000003ebH
  006cf	56		 push	 esi
  006d0	ff d7		 call	 edi
  006d2	50		 push	 eax
  006d3	ff d3		 call	 ebx

; 2263 : 
; 2264 : 			SendMessage (GetDlgItem (hwndDlg, IDC_CLOSE_BKG_TASK_WHEN_NOVOL), BM_SETCHECK, 
; 2265 : 						bCloseBkgTaskWhenNoVolumes || IsNonInstallMode() ? BST_CHECKED:BST_UNCHECKED, 0);

  006d5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bCloseBkgTaskWhenNoVolumes, 0
  006dc	75 09		 jne	 SHORT $LN27@Preference@3
  006de	e8 00 00 00 00	 call	 _IsNonInstallMode
  006e3	85 c0		 test	 eax, eax
  006e5	74 05		 je	 SHORT $LN28@Preference@3
$LN27@Preference@3:
  006e7	b8 01 00 00 00	 mov	 eax, 1
$LN28@Preference@3:
  006ec	6a 00		 push	 0
  006ee	50		 push	 eax
  006ef	68 f1 00 00 00	 push	 241			; 000000f1H
  006f4	68 33 04 00 00	 push	 1075			; 00000433H
  006f9	56		 push	 esi
  006fa	ff d7		 call	 edi
  006fc	50		 push	 eax
  006fd	ff d3		 call	 ebx

; 2266 : 			
; 2267 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PREF_DISMOUNT_LOGOFF), BM_SETCHECK, 
; 2268 : 						bDismountOnLogOff ? BST_CHECKED:BST_UNCHECKED, 0);

  006ff	33 c9		 xor	 ecx, ecx
  00701	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?bDismountOnLogOff@@3HA, ecx ; bDismountOnLogOff
  00707	6a 00		 push	 0
  00709	0f 95 c1	 setne	 cl
  0070c	51		 push	 ecx
  0070d	68 f1 00 00 00	 push	 241			; 000000f1H
  00712	68 fa 03 00 00	 push	 1018			; 000003faH
  00717	56		 push	 esi
  00718	ff d7		 call	 edi
  0071a	50		 push	 eax
  0071b	ff d3		 call	 ebx

; 2269 : 
; 2270 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PREF_DISMOUNT_POWERSAVING), BM_SETCHECK, 
; 2271 : 						bDismountOnPowerSaving ? BST_CHECKED:BST_UNCHECKED, 0);

  0071d	33 d2		 xor	 edx, edx
  0071f	39 15 00 00 00
	00		 cmp	 DWORD PTR ?bDismountOnPowerSaving@@3HA, edx ; bDismountOnPowerSaving
  00725	6a 00		 push	 0
  00727	0f 95 c2	 setne	 dl
  0072a	52		 push	 edx
  0072b	68 f1 00 00 00	 push	 241			; 000000f1H
  00730	68 30 04 00 00	 push	 1072			; 00000430H
  00735	56		 push	 esi
  00736	ff d7		 call	 edi
  00738	50		 push	 eax
  00739	ff d3		 call	 ebx

; 2272 : 
; 2273 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PREF_DISMOUNT_SCREENSAVER), BM_SETCHECK, 
; 2274 : 						bDismountOnScreenSaver ? BST_CHECKED:BST_UNCHECKED, 0);

  0073b	33 c0		 xor	 eax, eax
  0073d	39 05 00 00 00
	00		 cmp	 DWORD PTR ?bDismountOnScreenSaver@@3HA, eax ; bDismountOnScreenSaver
  00743	6a 00		 push	 0
  00745	0f 95 c0	 setne	 al
  00748	50		 push	 eax
  00749	68 f1 00 00 00	 push	 241			; 000000f1H
  0074e	68 2f 04 00 00	 push	 1071			; 0000042fH
  00753	56		 push	 esi
  00754	ff d7		 call	 edi
  00756	50		 push	 eax
  00757	ff d3		 call	 ebx

; 2275 : 			
; 2276 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PREF_FORCE_AUTO_DISMOUNT), BM_SETCHECK, 
; 2277 : 						bForceAutoDismount ? BST_CHECKED:BST_UNCHECKED, 0);

  00759	33 c9		 xor	 ecx, ecx
  0075b	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?bForceAutoDismount@@3HA, ecx ; bForceAutoDismount
  00761	6a 00		 push	 0
  00763	0f 95 c1	 setne	 cl
  00766	51		 push	 ecx
  00767	68 f1 00 00 00	 push	 241			; 000000f1H
  0076c	68 2c 04 00 00	 push	 1068			; 0000042cH
  00771	56		 push	 esi
  00772	ff d7		 call	 edi
  00774	50		 push	 eax
  00775	ff d3		 call	 ebx

; 2278 : 
; 2279 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PREF_DISMOUNT_INACTIVE), BM_SETCHECK, 
; 2280 : 						MaxVolumeIdleTime > 0 ? BST_CHECKED:BST_UNCHECKED, 0);

  00777	33 d2		 xor	 edx, edx
  00779	39 15 00 00 00
	00		 cmp	 DWORD PTR ?MaxVolumeIdleTime@@3HA, edx ; MaxVolumeIdleTime
  0077f	6a 00		 push	 0
  00781	0f 9f c2	 setg	 dl
  00784	52		 push	 edx
  00785	68 f1 00 00 00	 push	 241			; 000000f1H
  0078a	68 fc 03 00 00	 push	 1020			; 000003fcH
  0078f	56		 push	 esi
  00790	ff d7		 call	 edi
  00792	50		 push	 eax
  00793	ff d3		 call	 ebx

; 2281 : 
; 2282 : 			SetDlgItemInt (hwndDlg, IDC_PREF_DISMOUNT_INACTIVE_TIME, abs (MaxVolumeIdleTime), FALSE);

  00795	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MaxVolumeIdleTime@@3HA ; MaxVolumeIdleTime
  0079a	99		 cdq
  0079b	6a 00		 push	 0
  0079d	33 c2		 xor	 eax, edx
  0079f	2b c2		 sub	 eax, edx
  007a1	50		 push	 eax
  007a2	68 2d 04 00 00	 push	 1069			; 0000042dH
  007a7	56		 push	 esi
  007a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemInt@16

; 2283 : 
; 2284 : 			PreferencesDlgEnableButtons (hwndDlg);

  007ae	e8 00 00 00 00	 call	 ?PreferencesDlgEnableButtons@@YAXPAUHWND__@@@Z ; PreferencesDlgEnableButtons
$LN42@Preference@3:
  007b3	5f		 pop	 edi
  007b4	5e		 pop	 esi

; 2285 : 		}
; 2286 : 		return 0;

  007b5	33 c0		 xor	 eax, eax
  007b7	5b		 pop	 ebx

; 2400 : }

  007b8	83 c4 10	 add	 esp, 16			; 00000010H
  007bb	c2 10 00	 ret	 16			; 00000010H
?PreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z ENDP		; PreferencesDlgProc
_TEXT	ENDS
PUBLIC	??_C@_0BC@LMEHFMJL@IDD_MOUNT_OPTIONS?$AA@	; `string'
PUBLIC	??_C@_0BN@GAPKAGEI@HIDVOL_PROT_BKG_TASK_WARNING?$AA@ ; `string'
PUBLIC	??_C@_0BE@ODKOANPA@hiddenvolprotection?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_MountOptionsDlgProc@16
EXTRN	_KeyfilesPopupMenu:PROC
EXTRN	_ToHyperlink:PROC
EXTRN	_Applink:PROC
;	COMDAT ?mountOptions@?1??MountOptionsDlgProc@@9@16@4PAUMountOptions@@A
; File c:\program files\microsoft sdks\windows\v7.0\include\winnt.h
_BSS	SEGMENT
?mountOptions@?1??MountOptionsDlgProc@@9@16@4PAUMountOptions@@A DD 01H DUP (?) ; `MountOptionsDlgProc'::`2'::mountOptions
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	8

_hidVolProtKeyFilesParam DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BC@LMEHFMJL@IDD_MOUNT_OPTIONS?$AA@
CONST	SEGMENT
??_C@_0BC@LMEHFMJL@IDD_MOUNT_OPTIONS?$AA@ DB 'IDD_MOUNT_OPTIONS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GAPKAGEI@HIDVOL_PROT_BKG_TASK_WARNING?$AA@
CONST	SEGMENT
??_C@_0BN@GAPKAGEI@HIDVOL_PROT_BKG_TASK_WARNING?$AA@ DB 'HIDVOL_PROT_BKG_'
	DB	'TASK_WARNING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@ODKOANPA@hiddenvolprotection?$AA@
CONST	SEGMENT
??_C@_0BE@ODKOANPA@hiddenvolprotection?$AA@ DB 'hiddenvolprotection', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
CONST	ENDS
;	COMDAT _MountOptionsDlgProc@16
_TEXT	SEGMENT
_protect$136738 = -288					; size = 4
_buttonRect$136744 = -284				; size = 16
_tmp$136771 = -268					; size = 130
_tmp$136769 = -136					; size = 130
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_MountOptionsDlgProc@16 PROC				; COMDAT

; 2404 : {

  00000	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 1c 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+288], eax

; 2405 : 	static MountOptions *mountOptions;
; 2406 : 
; 2407 : 	WORD lw = LOWORD (wParam);
; 2408 : 
; 2409 : 	switch (msg)

  00014	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR _msg$[esp+284]
  0001b	83 e8 7b	 sub	 eax, 123		; 0000007bH
  0001e	53		 push	 ebx
  0001f	55		 push	 ebp
  00020	56		 push	 esi
  00021	8b b4 24 30 01
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+296]
  00028	57		 push	 edi
  00029	8b bc 24 40 01
	00 00		 mov	 edi, DWORD PTR _lParam$[esp+300]
  00030	0f 84 97 05 00
	00		 je	 $LN21@MountOptio
  00036	2d 95 00 00 00	 sub	 eax, 149		; 00000095H
  0003b	0f 84 97 03 00
	00		 je	 $LN23@MountOptio
  00041	83 e8 01	 sub	 eax, 1
  00044	0f 85 03 06 00
	00		 jne	 $LN19@MountOptio

; 2480 : 			}
; 2481 : 		}
; 2482 : 		break;
; 2483 : 
; 2484 : 	case WM_COMMAND:
; 2485 : 
; 2486 : 		if (lw == IDC_KEYFILES_HIDVOL_PROT)

  0004a	8b ac 24 3c 01
	00 00		 mov	 ebp, DWORD PTR _wParam$[esp+300]
  00051	b8 b3 13 00 00	 mov	 eax, 5043		; 000013b3H
  00056	66 3b e8	 cmp	 bp, ax
  00059	75 32		 jne	 SHORT $LN16@MountOptio

; 2487 : 		{
; 2488 : 			if (IDOK == DialogBoxParamW (hInst,
; 2489 : 				MAKEINTRESOURCEW (IDD_KEYFILES), hwndDlg,
; 2490 : 				(DLGPROC) KeyFilesDlgProc, (LPARAM) &hidVolProtKeyFilesParam))

  0005b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00061	68 00 00 00 00	 push	 OFFSET _hidVolProtKeyFilesParam
  00066	68 00 00 00 00	 push	 OFFSET _KeyFilesDlgProc@16
  0006b	56		 push	 esi
  0006c	68 f9 01 00 00	 push	 505			; 000001f9H
  00071	51		 push	 ecx
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  00078	83 f8 01	 cmp	 eax, 1
  0007b	0f 85 cc 05 00
	00		 jne	 $LN19@MountOptio

; 2491 : 			{
; 2492 : 				SetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE_HIDVOL_PROT, hidVolProtKeyFilesParam.EnableKeyFiles);

  00081	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hidVolProtKeyFilesParam
  00087	52		 push	 edx

; 2493 : 			}
; 2494 : 		}
; 2495 : 
; 2496 : 		if (lw == IDC_KEYFILES_ENABLE_HIDVOL_PROT)

  00088	e9 b2 05 00 00	 jmp	 $LN49@MountOptio
$LN16@MountOptio:
  0008d	b8 cf 13 00 00	 mov	 eax, 5071		; 000013cfH
  00092	66 3b e8	 cmp	 bp, ax
  00095	75 14		 jne	 SHORT $LN15@MountOptio

; 2497 : 		{
; 2498 : 			hidVolProtKeyFilesParam.EnableKeyFiles = GetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE_HIDVOL_PROT);

  00097	50		 push	 eax
  00098	56		 push	 esi
  00099	e8 00 00 00 00	 call	 _GetCheckBox
  0009e	83 c4 08	 add	 esp, 8
  000a1	a3 00 00 00 00	 mov	 DWORD PTR _hidVolProtKeyFilesParam, eax

; 2499 : 
; 2500 : 			return 0;

  000a6	e9 a2 05 00 00	 jmp	 $LN19@MountOptio
$LN15@MountOptio:

; 2501 : 		}
; 2502 : 
; 2503 : 		if (lw == IDC_SHOW_PASSWORD_MO)

  000ab	b9 c9 13 00 00	 mov	 ecx, 5065		; 000013c9H
  000b0	66 3b e9	 cmp	 bp, cx
  000b3	75 4e		 jne	 SHORT $LN14@MountOptio

; 2504 : 		{
; 2505 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PASSWORD_PROT_HIDVOL),
; 2506 : 						EM_SETPASSWORDCHAR,
; 2507 : 						GetCheckBox (hwndDlg, IDC_SHOW_PASSWORD_MO) ? 0 : '*',
; 2508 : 						0);

  000b5	6a 00		 push	 0
  000b7	51		 push	 ecx
  000b8	56		 push	 esi
  000b9	e8 00 00 00 00	 call	 _GetCheckBox
  000be	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  000c4	83 c4 08	 add	 esp, 8
  000c7	f7 d8		 neg	 eax
  000c9	1b c0		 sbb	 eax, eax
  000cb	83 e0 d6	 and	 eax, -42		; ffffffd6H
  000ce	83 c0 2a	 add	 eax, 42			; 0000002aH
  000d1	50		 push	 eax
  000d2	68 cc 00 00 00	 push	 204			; 000000ccH
  000d7	68 cc 13 00 00	 push	 5068			; 000013ccH
  000dc	56		 push	 esi
  000dd	ff d7		 call	 edi
  000df	50		 push	 eax
  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 2509 : 			InvalidateRect (GetDlgItem (hwndDlg, IDC_PASSWORD_PROT_HIDVOL), NULL, TRUE);

  000e6	6a 01		 push	 1
  000e8	6a 00		 push	 0
  000ea	68 cc 13 00 00	 push	 5068			; 000013ccH
  000ef	56		 push	 esi
  000f0	ff d7		 call	 edi
  000f2	50		 push	 eax
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 2510 : 			return 1;

  000f9	b8 01 00 00 00	 mov	 eax, 1
  000fe	e9 4c 05 00 00	 jmp	 $LN26@MountOptio
$LN14@MountOptio:

; 2511 : 		}
; 2512 : 
; 2513 : 		if (lw == IDC_LINK_HIDVOL_PROTECTION_INFO)

  00103	ba e9 13 00 00	 mov	 edx, 5097		; 000013e9H
  00108	66 3b ea	 cmp	 bp, dx
  0010b	75 16		 jne	 SHORT $LN13@MountOptio

; 2514 : 		{
; 2515 : 			Applink ("hiddenvolprotection", TRUE, "");

  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00112	6a 01		 push	 1
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@ODKOANPA@hiddenvolprotection?$AA@
  00119	e8 00 00 00 00	 call	 _Applink

; 2516 : 		}
; 2517 : 
; 2518 : 		if (lw == IDCANCEL)

  0011e	e9 27 05 00 00	 jmp	 $LN50@MountOptio
$LN13@MountOptio:
  00123	66 83 fd 02	 cmp	 bp, 2
  00127	75 4f		 jne	 SHORT $LN12@MountOptio

; 2519 : 		{
; 2520 : 			WCHAR tmp[MAX_PASSWORD+1];
; 2521 : 
; 2522 : 			// Cleanup
; 2523 : 			memset (tmp, 0x20, sizeof(tmp)); //0x20 = ASCII space or 0x2020 = Unicode DAGGER

  00129	68 82 00 00 00	 push	 130			; 00000082H
  0012e	8d 84 24 ac 00
	00 00		 lea	 eax, DWORD PTR _tmp$136769[esp+308]
  00135	6a 20		 push	 32			; 00000020H
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 _memset
  0013d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2524 : 			tmp[MAX_PASSWORD] = 0;
; 2525 : 			SetWindowTextW(GetDlgItem (hwndDlg, IDC_PASSWORD_PROT_HIDVOL), tmp);	

  00140	8d 94 24 a8 00
	00 00		 lea	 edx, DWORD PTR _tmp$136769[esp+304]
  00147	52		 push	 edx
  00148	68 cc 13 00 00	 push	 5068			; 000013ccH
  0014d	33 c9		 xor	 ecx, ecx
  0014f	56		 push	 esi
  00150	66 89 8c 24 34
	01 00 00	 mov	 WORD PTR _tmp$136769[esp+444], cx
  00158	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0015e	50		 push	 eax
  0015f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 2526 : 
; 2527 : 			EndDialog (hwndDlg, lw);

  00165	6a 02		 push	 2
  00167	56		 push	 esi
  00168	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 2528 : 			return 1;

  0016e	b8 01 00 00 00	 mov	 eax, 1
  00173	e9 d7 04 00 00	 jmp	 $LN26@MountOptio
$LN12@MountOptio:

; 2529 : 		}
; 2530 : 
; 2531 : 		if (lw == IDOK)
; 2532 : 		{
; 2533 : 			WCHAR tmp[MAX_PASSWORD+1];
; 2534 : 			
; 2535 : 			mountOptions->ReadOnly = IsButtonChecked (GetDlgItem (hwndDlg, IDC_MOUNT_READONLY));

  00178	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  0017e	66 83 fd 01	 cmp	 bp, 1
  00182	0f 85 7f 01 00
	00		 jne	 $LN11@MountOptio
  00188	68 ba 13 00 00	 push	 5050			; 000013baH
  0018d	56		 push	 esi
  0018e	ff d7		 call	 edi
  00190	50		 push	 eax
  00191	e8 00 00 00 00	 call	 _IsButtonChecked
  00196	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mountOptions@?1??MountOptionsDlgProc@@9@16@4PAUMountOptions@@A
  0019c	83 c4 04	 add	 esp, 4

; 2536 : 			mountOptions->Removable = IsButtonChecked (GetDlgItem (hwndDlg, IDC_MOUNT_REMOVABLE));

  0019f	68 bb 13 00 00	 push	 5051			; 000013bbH
  001a4	56		 push	 esi
  001a5	89 01		 mov	 DWORD PTR [ecx], eax
  001a7	ff d7		 call	 edi
  001a9	50		 push	 eax
  001aa	e8 00 00 00 00	 call	 _IsButtonChecked
  001af	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mountOptions@?1??MountOptionsDlgProc@@9@16@4PAUMountOptions@@A
  001b5	83 c4 04	 add	 esp, 4

; 2537 : 			mountOptions->ProtectHiddenVolume = IsButtonChecked (GetDlgItem (hwndDlg, IDC_PROTECT_HIDDEN_VOL));

  001b8	68 bc 13 00 00	 push	 5052			; 000013bcH
  001bd	56		 push	 esi
  001be	89 42 04	 mov	 DWORD PTR [edx+4], eax
  001c1	ff d7		 call	 edi
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 _IsButtonChecked
  001c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mountOptions@?1??MountOptionsDlgProc@@9@16@4PAUMountOptions@@A
  001cf	83 c4 04	 add	 esp, 4

; 2538 : 			mountOptions->PartitionInInactiveSysEncScope = IsButtonChecked (GetDlgItem (hwndDlg, IDC_MOUNT_SYSENC_PART_WITHOUT_PBA));

  001d2	68 bf 13 00 00	 push	 5055			; 000013bfH
  001d7	56		 push	 esi
  001d8	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  001db	ff d7		 call	 edi
  001dd	50		 push	 eax
  001de	e8 00 00 00 00	 call	 _IsButtonChecked
  001e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mountOptions@?1??MountOptionsDlgProc@@9@16@4PAUMountOptions@@A
  001e9	83 c4 04	 add	 esp, 4

; 2539 : 			mountOptions->UseBackupHeader = IsButtonChecked (GetDlgItem (hwndDlg, IDC_USE_EMBEDDED_HEADER_BAK));

  001ec	68 be 13 00 00	 push	 5054			; 000013beH
  001f1	56		 push	 esi
  001f2	89 42 10	 mov	 DWORD PTR [edx+16], eax
  001f5	ff d7		 call	 edi
  001f7	50		 push	 eax
  001f8	e8 00 00 00 00	 call	 _IsButtonChecked
  001fd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mountOptions@?1??MountOptionsDlgProc@@9@16@4PAUMountOptions@@A
  00203	83 c4 04	 add	 esp, 4

; 2540 : 			
; 2541 : 			if (mountOptions->ProtectHiddenVolume)

  00206	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  0020a	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  0020d	74 72		 je	 SHORT $LN45@MountOptio

; 2542 : 			{
; 2543 : 				GetWindowTextW(GetDlgItem (hwndDlg, IDC_PASSWORD_PROT_HIDVOL), tmp, sizeof(tmp)/sizeof(*tmp));

  0020f	6a 41		 push	 65			; 00000041H
  00211	8d 44 24 28	 lea	 eax, DWORD PTR _tmp$136771[esp+308]
  00215	50		 push	 eax
  00216	68 cc 13 00 00	 push	 5068			; 000013ccH
  0021b	56		 push	 esi
  0021c	ff d7		 call	 edi
  0021e	50		 push	 eax
  0021f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextW@12

; 2544 : 				ConvertUTF16toUTF8s((const UTF16*)tmp,sizeof(tmp)/sizeof(*tmp),(UTF8*)mountOptions->ProtectedHidVolPassword.Text,sizeof(mountOptions->ProtectedHidVolPassword.Text)/sizeof(*mountOptions->ProtectedHidVolPassword.Text),strictConversion);

  00225	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mountOptions@?1??MountOptionsDlgProc@@9@16@4PAUMountOptions@@A
  0022b	6a 00		 push	 0
  0022d	6a 41		 push	 65			; 00000041H
  0022f	83 c1 18	 add	 ecx, 24			; 00000018H
  00232	51		 push	 ecx
  00233	8d 54 24 30	 lea	 edx, DWORD PTR _tmp$136771[esp+316]
  00237	6a 41		 push	 65			; 00000041H
  00239	52		 push	 edx
  0023a	e8 00 00 00 00	 call	 _ConvertUTF16toUTF8s

; 2545 : 				burn(tmp,sizeof(tmp));

  0023f	8d 54 24 38	 lea	 edx, DWORD PTR _tmp$136771[esp+324]
  00243	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  00248	83 c4 14	 add	 esp, 20			; 00000014H
  0024b	8b d9		 mov	 ebx, ecx
  0024d	8b c2		 mov	 eax, edx
  0024f	90		 npad	 1
$LL29@MountOptio:
  00250	c6 00 00	 mov	 BYTE PTR [eax], 0
  00253	40		 inc	 eax
  00254	83 eb 01	 sub	 ebx, 1
  00257	75 f7		 jne	 SHORT $LL29@MountOptio
  00259	8d a4 24 00 00
	00 00		 npad	 7
$LL6@MountOptio:
  00260	49		 dec	 ecx
  00261	c6 02 00	 mov	 BYTE PTR [edx], 0
  00264	42		 inc	 edx
  00265	85 c9		 test	 ecx, ecx
  00267	75 f7		 jne	 SHORT $LL6@MountOptio

; 2546 : 
; 2547 : 				mountOptions->ProtectedHidVolPassword.Length = strlen ((char *) mountOptions->ProtectedHidVolPassword.Text);

  00269	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mountOptions@?1??MountOptionsDlgProc@@9@16@4PAUMountOptions@@A
  0026f	8d 42 18	 lea	 eax, DWORD PTR [edx+24]
  00272	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
$LL42@MountOptio:
  00275	8a 08		 mov	 cl, BYTE PTR [eax]
  00277	40		 inc	 eax
  00278	84 c9		 test	 cl, cl
  0027a	75 f9		 jne	 SHORT $LL42@MountOptio
  0027c	2b c3		 sub	 eax, ebx
  0027e	89 42 14	 mov	 DWORD PTR [edx+20], eax
$LN45@MountOptio:

; 2548 : 			}
; 2549 : 
; 2550 : 			// Cleanup
; 2551 : 			memset (tmp, 0x20, sizeof(tmp)); //0x20 = ASCII space or 0x2020 = Unicode DAGGER

  00281	68 82 00 00 00	 push	 130			; 00000082H
  00286	8d 44 24 28	 lea	 eax, DWORD PTR _tmp$136771[esp+308]
  0028a	6a 20		 push	 32			; 00000020H
  0028c	50		 push	 eax
  0028d	e8 00 00 00 00	 call	 _memset
  00292	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2552 : 			tmp[MAX_PASSWORD] = 0;
; 2553 : 			SetWindowTextW(GetDlgItem (hwndDlg, IDC_PASSWORD_PROT_HIDVOL), tmp);	

  00295	8d 54 24 24	 lea	 edx, DWORD PTR _tmp$136771[esp+304]
  00299	52		 push	 edx
  0029a	68 cc 13 00 00	 push	 5068			; 000013ccH
  0029f	33 c9		 xor	 ecx, ecx
  002a1	56		 push	 esi
  002a2	66 89 8c 24 b0
	00 00 00	 mov	 WORD PTR _tmp$136771[esp+444], cx
  002aa	ff d7		 call	 edi
  002ac	50		 push	 eax
  002ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 2554 : 
; 2555 : 			if ((mountOptions->ProtectHiddenVolume && !bEnableBkgTask)
; 2556 : 				&& (AskWarnYesNo ("HIDVOL_PROT_BKG_TASK_WARNING") == IDYES))

  002b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mountOptions@?1??MountOptionsDlgProc@@9@16@4PAUMountOptions@@A
  002b8	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  002bc	74 34		 je	 SHORT $LN46@MountOptio
  002be	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bEnableBkgTask, 0
  002c5	75 2b		 jne	 SHORT $LN46@MountOptio
  002c7	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GAPKAGEI@HIDVOL_PROT_BKG_TASK_WARNING?$AA@
  002cc	e8 00 00 00 00	 call	 _AskWarnYesNo
  002d1	83 c4 04	 add	 esp, 4
  002d4	83 f8 06	 cmp	 eax, 6
  002d7	75 19		 jne	 SHORT $LN46@MountOptio

; 2557 : 			{
; 2558 : 				bEnableBkgTask = TRUE;
; 2559 : 				TaskBarIconAdd (MainDlg);

  002d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  002df	51		 push	 ecx
  002e0	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bEnableBkgTask, 1
  002ea	e8 00 00 00 00	 call	 _TaskBarIconAdd
  002ef	83 c4 04	 add	 esp, 4
$LN46@MountOptio:

; 2560 : 			}
; 2561 : 
; 2562 : 			EndDialog (hwndDlg, lw);

  002f2	0f b7 d5	 movzx	 edx, bp
  002f5	52		 push	 edx
  002f6	56		 push	 esi
  002f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 2563 : 			return 1;

  002fd	b8 01 00 00 00	 mov	 eax, 1
  00302	e9 48 03 00 00	 jmp	 $LN26@MountOptio
$LN11@MountOptio:

; 2564 : 		}
; 2565 : 
; 2566 : 		if (lw == IDC_MOUNT_READONLY || lw == IDC_PROTECT_HIDDEN_VOL)

  00307	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  0030d	b8 ba 13 00 00	 mov	 eax, 5050		; 000013baH
  00312	66 3b e8	 cmp	 bp, ax
  00315	74 0f		 je	 SHORT $LN37@MountOptio
  00317	b9 bc 13 00 00	 mov	 ecx, 5052		; 000013bcH
  0031c	66 3b e9	 cmp	 bp, cx
  0031f	74 5e		 je	 SHORT $LN1@MountOptio

; 2586 : 		}
; 2587 : 
; 2588 : 		return 0;

  00321	e9 27 03 00 00	 jmp	 $LN19@MountOptio
$LN37@MountOptio:

; 2567 : 		{
; 2568 : 			BOOL protect;
; 2569 : 
; 2570 : 			if (lw == IDC_MOUNT_READONLY)
; 2571 : 			{
; 2572 : 				SendDlgItemMessage (hwndDlg, IDC_PROTECT_HIDDEN_VOL, BM_SETCHECK, BST_UNCHECKED, 0);

  00326	6a 00		 push	 0
  00328	6a 00		 push	 0
  0032a	68 f1 00 00 00	 push	 241			; 000000f1H
  0032f	68 bc 13 00 00	 push	 5052			; 000013bcH
  00334	56		 push	 esi
  00335	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendDlgItemMessageA@20

; 2573 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_PROTECT_HIDDEN_VOL), !IsButtonChecked (GetDlgItem (hwndDlg, IDC_MOUNT_READONLY)));

  0033b	68 ba 13 00 00	 push	 5050			; 000013baH
  00340	56		 push	 esi
  00341	ff d7		 call	 edi
  00343	50		 push	 eax
  00344	e8 00 00 00 00	 call	 _IsButtonChecked
  00349	83 c4 04	 add	 esp, 4
  0034c	f7 d8		 neg	 eax
  0034e	1b c0		 sbb	 eax, eax
  00350	40		 inc	 eax
  00351	50		 push	 eax
  00352	68 bc 13 00 00	 push	 5052			; 000013bcH
  00357	56		 push	 esi
  00358	ff d7		 call	 edi
  0035a	50		 push	 eax
  0035b	ff d3		 call	 ebx

; 2574 : 				EnableWindow (GetDlgItem (hwndDlg, IDT_HIDDEN_VOL_PROTECTION), !IsButtonChecked (GetDlgItem (hwndDlg, IDC_MOUNT_READONLY)));

  0035d	68 ba 13 00 00	 push	 5050			; 000013baH
  00362	56		 push	 esi
  00363	ff d7		 call	 edi
  00365	50		 push	 eax
  00366	e8 00 00 00 00	 call	 _IsButtonChecked
  0036b	83 c4 04	 add	 esp, 4
  0036e	f7 d8		 neg	 eax
  00370	1b c0		 sbb	 eax, eax
  00372	40		 inc	 eax
  00373	50		 push	 eax
  00374	68 c6 13 00 00	 push	 5062			; 000013c6H
  00379	56		 push	 esi
  0037a	ff d7		 call	 edi
  0037c	50		 push	 eax
  0037d	ff d3		 call	 ebx
$LN1@MountOptio:

; 2575 : 			}
; 2576 : 
; 2577 : 			protect = IsButtonChecked (GetDlgItem (hwndDlg, IDC_PROTECT_HIDDEN_VOL));

  0037f	68 bc 13 00 00	 push	 5052			; 000013bcH
  00384	56		 push	 esi
  00385	ff d7		 call	 edi
  00387	50		 push	 eax
  00388	e8 00 00 00 00	 call	 _IsButtonChecked
  0038d	83 c4 04	 add	 esp, 4
  00390	8b e8		 mov	 ebp, eax

; 2578 : 
; 2579 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_PASSWORD_PROT_HIDVOL), protect);

  00392	55		 push	 ebp
  00393	68 cc 13 00 00	 push	 5068			; 000013ccH
  00398	56		 push	 esi
  00399	ff d7		 call	 edi
  0039b	50		 push	 eax
  0039c	ff d3		 call	 ebx

; 2580 : 			EnableWindow (GetDlgItem (hwndDlg, IDT_HIDDEN_PROT_PASSWD), protect);

  0039e	55		 push	 ebp
  0039f	68 c0 13 00 00	 push	 5056			; 000013c0H
  003a4	56		 push	 esi
  003a5	ff d7		 call	 edi
  003a7	50		 push	 eax
  003a8	ff d3		 call	 ebx

; 2581 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_SHOW_PASSWORD_MO), protect);

  003aa	55		 push	 ebp
  003ab	68 c9 13 00 00	 push	 5065			; 000013c9H
  003b0	56		 push	 esi
  003b1	ff d7		 call	 edi
  003b3	50		 push	 eax
  003b4	ff d3		 call	 ebx

; 2582 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_KEYFILES_HIDVOL_PROT), protect);

  003b6	55		 push	 ebp
  003b7	68 b3 13 00 00	 push	 5043			; 000013b3H
  003bc	56		 push	 esi
  003bd	ff d7		 call	 edi
  003bf	50		 push	 eax
  003c0	ff d3		 call	 ebx

; 2583 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_KEYFILES_ENABLE_HIDVOL_PROT), protect);

  003c2	55		 push	 ebp
  003c3	68 cf 13 00 00	 push	 5071			; 000013cfH
  003c8	56		 push	 esi
  003c9	ff d7		 call	 edi
  003cb	50		 push	 eax
  003cc	ff d3		 call	 ebx

; 2584 : 
; 2585 : 			return 1;

  003ce	b8 01 00 00 00	 mov	 eax, 1
  003d3	e9 77 02 00 00	 jmp	 $LN26@MountOptio
$LN23@MountOptio:

; 2410 : 	{
; 2411 : 	case WM_INITDIALOG:
; 2412 : 		{
; 2413 : 			BOOL protect;
; 2414 : 			
; 2415 : 			mountOptions = (MountOptions *) lParam;
; 2416 : 
; 2417 : 			LocalizeDialog (hwndDlg, "IDD_MOUNT_OPTIONS");

  003d8	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LMEHFMJL@IDD_MOUNT_OPTIONS?$AA@
  003dd	56		 push	 esi
  003de	89 3d 00 00 00
	00		 mov	 DWORD PTR ?mountOptions@?1??MountOptionsDlgProc@@9@16@4PAUMountOptions@@A, edi
  003e4	e8 00 00 00 00	 call	 _LocalizeDialog

; 2418 : 		
; 2419 : 			SendDlgItemMessage (hwndDlg, IDC_MOUNT_READONLY, BM_SETCHECK,
; 2420 : 				mountOptions->ReadOnly ? BST_CHECKED : BST_UNCHECKED, 0);

  003e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mountOptions@?1??MountOptionsDlgProc@@9@16@4PAUMountOptions@@A
  003ee	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SendDlgItemMessageA@20
  003f4	83 c4 08	 add	 esp, 8
  003f7	33 d2		 xor	 edx, edx
  003f9	39 10		 cmp	 DWORD PTR [eax], edx
  003fb	6a 00		 push	 0
  003fd	0f 95 c2	 setne	 dl
  00400	52		 push	 edx
  00401	68 f1 00 00 00	 push	 241			; 000000f1H
  00406	68 ba 13 00 00	 push	 5050			; 000013baH
  0040b	56		 push	 esi
  0040c	ff d5		 call	 ebp

; 2421 : 			SendDlgItemMessage (hwndDlg, IDC_MOUNT_REMOVABLE, BM_SETCHECK,
; 2422 : 				mountOptions->Removable ? BST_CHECKED : BST_UNCHECKED, 0);

  0040e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mountOptions@?1??MountOptionsDlgProc@@9@16@4PAUMountOptions@@A
  00414	33 c9		 xor	 ecx, ecx
  00416	39 4a 04	 cmp	 DWORD PTR [edx+4], ecx
  00419	6a 00		 push	 0
  0041b	0f 95 c1	 setne	 cl
  0041e	51		 push	 ecx
  0041f	68 f1 00 00 00	 push	 241			; 000000f1H
  00424	68 bb 13 00 00	 push	 5051			; 000013bbH
  00429	56		 push	 esi
  0042a	ff d5		 call	 ebp

; 2423 : 			SendDlgItemMessage (hwndDlg, IDC_PROTECT_HIDDEN_VOL, BM_SETCHECK,
; 2424 : 				mountOptions->ProtectHiddenVolume ? BST_CHECKED : BST_UNCHECKED, 0);

  0042c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mountOptions@?1??MountOptionsDlgProc@@9@16@4PAUMountOptions@@A
  00432	33 c0		 xor	 eax, eax
  00434	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  00437	6a 00		 push	 0
  00439	0f 95 c0	 setne	 al
  0043c	50		 push	 eax
  0043d	68 f1 00 00 00	 push	 241			; 000000f1H
  00442	68 bc 13 00 00	 push	 5052			; 000013bcH
  00447	56		 push	 esi
  00448	ff d5		 call	 ebp

; 2425 : 
; 2426 : 			SendDlgItemMessage (hwndDlg, IDC_PROTECT_HIDDEN_VOL, BM_SETCHECK,
; 2427 : 				mountOptions->ProtectHiddenVolume ? BST_CHECKED : BST_UNCHECKED, 0);

  0044a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mountOptions@?1??MountOptionsDlgProc@@9@16@4PAUMountOptions@@A
  0044f	33 d2		 xor	 edx, edx
  00451	39 50 08	 cmp	 DWORD PTR [eax+8], edx
  00454	6a 00		 push	 0
  00456	0f 95 c2	 setne	 dl
  00459	52		 push	 edx
  0045a	68 f1 00 00 00	 push	 241			; 000000f1H
  0045f	68 bc 13 00 00	 push	 5052			; 000013bcH
  00464	56		 push	 esi
  00465	ff d5		 call	 ebp

; 2428 : 
; 2429 : 			mountOptions->PartitionInInactiveSysEncScope = bPrebootPasswordDlgMode;

  00467	a1 00 00 00 00	 mov	 eax, DWORD PTR _bPrebootPasswordDlgMode
  0046c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mountOptions@?1??MountOptionsDlgProc@@9@16@4PAUMountOptions@@A

; 2430 : 
; 2431 : 			SendDlgItemMessage (hwndDlg, IDC_MOUNT_SYSENC_PART_WITHOUT_PBA, BM_SETCHECK,
; 2432 : 				bPrebootPasswordDlgMode ? BST_CHECKED : BST_UNCHECKED, 0);

  00472	33 d2		 xor	 edx, edx
  00474	85 c0		 test	 eax, eax
  00476	0f 95 c2	 setne	 dl
  00479	6a 00		 push	 0
  0047b	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0047e	52		 push	 edx
  0047f	68 f1 00 00 00	 push	 241			; 000000f1H
  00484	68 bf 13 00 00	 push	 5055			; 000013bfH
  00489	56		 push	 esi
  0048a	ff d5		 call	 ebp

; 2433 : 
; 2434 : 			SendDlgItemMessage (hwndDlg, IDC_USE_EMBEDDED_HEADER_BAK, BM_SETCHECK,
; 2435 : 				mountOptions->UseBackupHeader ? BST_CHECKED : BST_UNCHECKED, 0);

  0048c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mountOptions@?1??MountOptionsDlgProc@@9@16@4PAUMountOptions@@A
  00492	33 c0		 xor	 eax, eax
  00494	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  00497	6a 00		 push	 0
  00499	0f 95 c0	 setne	 al
  0049c	50		 push	 eax
  0049d	68 f1 00 00 00	 push	 241			; 000000f1H
  004a2	68 be 13 00 00	 push	 5054			; 000013beH
  004a7	56		 push	 esi
  004a8	ff d5		 call	 ebp

; 2436 : 			
; 2437 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_MOUNT_SYSENC_PART_WITHOUT_PBA), !bPrebootPasswordDlgMode);

  004aa	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  004b0	33 d2		 xor	 edx, edx
  004b2	39 15 00 00 00
	00		 cmp	 DWORD PTR _bPrebootPasswordDlgMode, edx
  004b8	0f 94 c2	 sete	 dl
  004bb	52		 push	 edx
  004bc	68 bf 13 00 00	 push	 5055			; 000013bfH
  004c1	56		 push	 esi
  004c2	ff d7		 call	 edi
  004c4	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  004ca	50		 push	 eax
  004cb	ff d3		 call	 ebx

; 2438 : 
; 2439 : 			protect = IsButtonChecked (GetDlgItem (hwndDlg, IDC_PROTECT_HIDDEN_VOL));

  004cd	68 bc 13 00 00	 push	 5052			; 000013bcH
  004d2	56		 push	 esi
  004d3	ff d7		 call	 edi
  004d5	50		 push	 eax
  004d6	e8 00 00 00 00	 call	 _IsButtonChecked
  004db	83 c4 04	 add	 esp, 4

; 2440 : 
; 2441 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_PROTECT_HIDDEN_VOL), !IsButtonChecked (GetDlgItem (hwndDlg, IDC_MOUNT_READONLY)));

  004de	68 ba 13 00 00	 push	 5050			; 000013baH
  004e3	56		 push	 esi
  004e4	89 44 24 18	 mov	 DWORD PTR _protect$136738[esp+312], eax
  004e8	ff d7		 call	 edi
  004ea	50		 push	 eax
  004eb	e8 00 00 00 00	 call	 _IsButtonChecked
  004f0	83 c4 04	 add	 esp, 4
  004f3	f7 d8		 neg	 eax
  004f5	1b c0		 sbb	 eax, eax
  004f7	40		 inc	 eax
  004f8	50		 push	 eax
  004f9	68 bc 13 00 00	 push	 5052			; 000013bcH
  004fe	56		 push	 esi
  004ff	ff d7		 call	 edi
  00501	50		 push	 eax
  00502	ff d3		 call	 ebx

; 2442 : 			EnableWindow (GetDlgItem (hwndDlg, IDT_HIDDEN_VOL_PROTECTION), !IsButtonChecked (GetDlgItem (hwndDlg, IDC_MOUNT_READONLY)));

  00504	68 ba 13 00 00	 push	 5050			; 000013baH
  00509	56		 push	 esi
  0050a	ff d7		 call	 edi
  0050c	50		 push	 eax
  0050d	e8 00 00 00 00	 call	 _IsButtonChecked
  00512	83 c4 04	 add	 esp, 4
  00515	f7 d8		 neg	 eax
  00517	1b c0		 sbb	 eax, eax
  00519	40		 inc	 eax
  0051a	50		 push	 eax
  0051b	68 c6 13 00 00	 push	 5062			; 000013c6H
  00520	56		 push	 esi
  00521	ff d7		 call	 edi
  00523	50		 push	 eax
  00524	ff d3		 call	 ebx

; 2443 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_PASSWORD_PROT_HIDVOL), protect);

  00526	8b 44 24 10	 mov	 eax, DWORD PTR _protect$136738[esp+304]
  0052a	50		 push	 eax
  0052b	68 cc 13 00 00	 push	 5068			; 000013ccH
  00530	56		 push	 esi
  00531	ff d7		 call	 edi
  00533	50		 push	 eax
  00534	ff d3		 call	 ebx

; 2444 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_SHOW_PASSWORD_MO), protect);

  00536	8b 4c 24 10	 mov	 ecx, DWORD PTR _protect$136738[esp+304]
  0053a	51		 push	 ecx
  0053b	68 c9 13 00 00	 push	 5065			; 000013c9H
  00540	56		 push	 esi
  00541	ff d7		 call	 edi
  00543	50		 push	 eax
  00544	ff d3		 call	 ebx

; 2445 : 			EnableWindow (GetDlgItem (hwndDlg, IDT_HIDDEN_PROT_PASSWD), protect);

  00546	8b 54 24 10	 mov	 edx, DWORD PTR _protect$136738[esp+304]
  0054a	52		 push	 edx
  0054b	68 c0 13 00 00	 push	 5056			; 000013c0H
  00550	56		 push	 esi
  00551	ff d7		 call	 edi
  00553	50		 push	 eax
  00554	ff d3		 call	 ebx

; 2446 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_KEYFILES_HIDVOL_PROT), protect);

  00556	8b 44 24 10	 mov	 eax, DWORD PTR _protect$136738[esp+304]
  0055a	50		 push	 eax
  0055b	68 b3 13 00 00	 push	 5043			; 000013b3H
  00560	56		 push	 esi
  00561	ff d7		 call	 edi
  00563	50		 push	 eax
  00564	ff d3		 call	 ebx

; 2447 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_KEYFILES_ENABLE_HIDVOL_PROT), protect);

  00566	8b 4c 24 10	 mov	 ecx, DWORD PTR _protect$136738[esp+304]
  0056a	51		 push	 ecx
  0056b	68 cf 13 00 00	 push	 5071			; 000013cfH
  00570	56		 push	 esi
  00571	ff d7		 call	 edi
  00573	50		 push	 eax
  00574	ff d3		 call	 ebx

; 2448 : 
; 2449 : 			SetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE_HIDVOL_PROT, hidVolProtKeyFilesParam.EnableKeyFiles);

  00576	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hidVolProtKeyFilesParam
  0057c	52		 push	 edx
  0057d	68 cf 13 00 00	 push	 5071			; 000013cfH
  00582	56		 push	 esi
  00583	e8 00 00 00 00	 call	 _SetCheckBox
  00588	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2450 : 
; 2451 : 			SendDlgItemMessage (hwndDlg, IDC_PASSWORD_PROT_HIDVOL, EM_LIMITTEXT, MAX_PASSWORD, 0);

  0058b	6a 00		 push	 0
  0058d	6a 40		 push	 64			; 00000040H
  0058f	68 c5 00 00 00	 push	 197			; 000000c5H
  00594	68 cc 13 00 00	 push	 5068			; 000013ccH
  00599	56		 push	 esi
  0059a	ff d5		 call	 ebp

; 2452 : 
; 2453 : 			if (mountOptions->ProtectedHidVolPassword.Length > 0)

  0059c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mountOptions@?1??MountOptionsDlgProc@@9@16@4PAUMountOptions@@A
  005a1	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  005a5	76 13		 jbe	 SHORT $LN22@MountOptio

; 2454 : 			{
; 2455 : 				// may need to be converted to UTF16
; 2456 : 				SetWindowTextA(GetDlgItem (hwndDlg, IDC_PASSWORD_PROT_HIDVOL), (LPSTR) mountOptions->ProtectedHidVolPassword.Text);	

  005a7	83 c0 18	 add	 eax, 24			; 00000018H
  005aa	50		 push	 eax
  005ab	68 cc 13 00 00	 push	 5068			; 000013ccH
  005b0	56		 push	 esi
  005b1	ff d7		 call	 edi
  005b3	50		 push	 eax
  005b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8
$LN22@MountOptio:

; 2457 : 			}
; 2458 : 			ToHyperlink (hwndDlg, IDC_LINK_HIDVOL_PROTECTION_INFO);

  005ba	68 e9 13 00 00	 push	 5097			; 000013e9H
  005bf	56		 push	 esi
  005c0	e8 00 00 00 00	 call	 _ToHyperlink
  005c5	83 c4 08	 add	 esp, 8

; 2459 : 
; 2460 : 		}
; 2461 : 		return 0;

  005c8	e9 80 00 00 00	 jmp	 $LN19@MountOptio
$LN21@MountOptio:

; 2462 : 
; 2463 : 	case WM_CONTEXTMENU:
; 2464 : 		{
; 2465 : 			RECT buttonRect;
; 2466 : 			GetWindowRect (GetDlgItem (hwndDlg, IDC_KEYFILES_HIDVOL_PROT), &buttonRect);

  005cd	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
  005d3	8d 44 24 14	 lea	 eax, DWORD PTR _buttonRect$136744[esp+304]
  005d7	50		 push	 eax
  005d8	68 b3 13 00 00	 push	 5043			; 000013b3H
  005dd	56		 push	 esi
  005de	ff d3		 call	 ebx
  005e0	50		 push	 eax
  005e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 2467 : 
; 2468 : 			if (IsButtonChecked (GetDlgItem (hwndDlg, IDC_PROTECT_HIDDEN_VOL))
; 2469 : 				&& LOWORD (lParam) >= buttonRect.left && LOWORD (lParam) <= buttonRect.right
; 2470 : 				&& HIWORD (lParam) >= buttonRect.top && HIWORD (lParam) <= buttonRect.bottom)

  005e7	68 bc 13 00 00	 push	 5052			; 000013bcH
  005ec	56		 push	 esi
  005ed	ff d3		 call	 ebx
  005ef	50		 push	 eax
  005f0	e8 00 00 00 00	 call	 _IsButtonChecked
  005f5	83 c4 04	 add	 esp, 4
  005f8	85 c0		 test	 eax, eax
  005fa	74 51		 je	 SHORT $LN19@MountOptio
  005fc	8b 54 24 14	 mov	 edx, DWORD PTR _buttonRect$136744[esp+304]
  00600	0f b7 c7	 movzx	 eax, di
  00603	3b c2		 cmp	 eax, edx
  00605	7c 46		 jl	 SHORT $LN19@MountOptio
  00607	3b 44 24 1c	 cmp	 eax, DWORD PTR _buttonRect$136744[esp+312]
  0060b	7f 40		 jg	 SHORT $LN19@MountOptio
  0060d	8b 4c 24 18	 mov	 ecx, DWORD PTR _buttonRect$136744[esp+308]
  00611	c1 ef 10	 shr	 edi, 16			; 00000010H
  00614	3b f9		 cmp	 edi, ecx
  00616	7c 35		 jl	 SHORT $LN19@MountOptio
  00618	3b 7c 24 20	 cmp	 edi, DWORD PTR _buttonRect$136744[esp+316]
  0061c	7f 2f		 jg	 SHORT $LN19@MountOptio

; 2471 : 			{
; 2472 : 				// The "Keyfiles" button has been right-clicked
; 2473 : 
; 2474 : 				POINT popupPos;
; 2475 : 				popupPos.x = buttonRect.left + 2;
; 2476 : 				popupPos.y = buttonRect.top + 2;
; 2477 : 
; 2478 : 				if (KeyfilesPopupMenu (hwndDlg, popupPos, &hidVolProtKeyFilesParam))

  0061e	68 00 00 00 00	 push	 OFFSET _hidVolProtKeyFilesParam
  00623	83 c1 02	 add	 ecx, 2
  00626	51		 push	 ecx
  00627	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  0062a	50		 push	 eax
  0062b	56		 push	 esi
  0062c	e8 00 00 00 00	 call	 _KeyfilesPopupMenu
  00631	83 c4 10	 add	 esp, 16			; 00000010H
  00634	85 c0		 test	 eax, eax
  00636	74 15		 je	 SHORT $LN19@MountOptio

; 2479 : 					SetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE_HIDVOL_PROT, hidVolProtKeyFilesParam.EnableKeyFiles);

  00638	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hidVolProtKeyFilesParam
  0063e	51		 push	 ecx
$LN49@MountOptio:
  0063f	68 cf 13 00 00	 push	 5071			; 000013cfH
  00644	56		 push	 esi
  00645	e8 00 00 00 00	 call	 _SetCheckBox
$LN50@MountOptio:
  0064a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN19@MountOptio:

; 2589 : 	}
; 2590 : 
; 2591 : 	return 0;

  0064d	33 c0		 xor	 eax, eax
$LN26@MountOptio:

; 2592 : }

  0064f	8b 8c 24 2c 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+304]
  00656	5f		 pop	 edi
  00657	5e		 pop	 esi
  00658	5d		 pop	 ebp
  00659	5b		 pop	 ebx
  0065a	33 cc		 xor	 ecx, esp
  0065c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00661	81 c4 20 01 00
	00		 add	 esp, 288		; 00000120H
  00667	c2 10 00	 ret	 16			; 00000010H
_MountOptionsDlgProc@16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@GPHBLDDM@OPEN_VOL_TITLE?$AA@		; `string'
EXTRN	_BrowseFiles:PROC
;	COMDAT ??_C@_0P@GPHBLDDM@OPEN_VOL_TITLE?$AA@
CONST	SEGMENT
??_C@_0P@GPHBLDDM@OPEN_VOL_TITLE?$AA@ DB 'OPEN_VOL_TITLE', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?SelectContainer@@YAHPAUHWND__@@@Z
_TEXT	SEGMENT
?SelectContainer@@YAHPAUHWND__@@@Z PROC			; SelectContainer, COMDAT
; _hwndDlg$ = esi

; 4413 : 	if (BrowseFiles (hwndDlg, "OPEN_VOL_TITLE", szFileName, bHistory, FALSE, NULL) == FALSE)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHistory
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	50		 push	 eax
  0000a	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GPHBLDDM@OPEN_VOL_TITLE?$AA@
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _BrowseFiles
  0001a	83 c4 18	 add	 esp, 24			; 00000018H
  0001d	85 c0		 test	 eax, eax
  0001f	75 01		 jne	 SHORT $LN1@SelectCont

; 4420 : }

  00021	c3		 ret	 0
$LN1@SelectCont:

; 4414 : 		return FALSE;
; 4415 : 
; 4416 : 	AddComboItem (GetDlgItem (hwndDlg, IDC_VOLUME), szFileName, bHistory);

  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHistory
  00028	57		 push	 edi
  00029	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  0002f	51		 push	 ecx
  00030	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00035	68 0a 04 00 00	 push	 1034			; 0000040aH
  0003a	56		 push	 esi
  0003b	ff d7		 call	 edi
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _AddComboItem

; 4417 : 	EnableDisableButtons (hwndDlg);

  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 _EnableDisableButtons
  00049	83 c4 10	 add	 esp, 16			; 00000010H

; 4418 : 	SetFocus (GetDlgItem (hwndDlg, IDC_DRIVELIST));

  0004c	68 ef 03 00 00	 push	 1007			; 000003efH
  00051	56		 push	 esi
  00052	ff d7		 call	 edi
  00054	50		 push	 eax
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 4419 : 	return TRUE;

  0005b	b8 01 00 00 00	 mov	 eax, 1
  00060	5f		 pop	 edi

; 4420 : }

  00061	c3		 ret	 0
?SelectContainer@@YAHPAUHWND__@@@Z ENDP			; SelectContainer
_TEXT	ENDS
EXTRN	_RawDevicesDlgProc@16:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?SelectPartition@@YAHPAUHWND__@@@Z
_TEXT	SEGMENT
?SelectPartition@@YAHPAUHWND__@@@Z PROC			; SelectPartition, COMDAT
; _hwndDlg$ = esi

; 4424 : 	int nResult = DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_RAWDEVICES_DLG), hwndDlg,
; 4425 : 		(DLGPROC) RawDevicesDlgProc, (LPARAM) & szFileName[0]);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00005	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  0000a	68 00 00 00 00	 push	 OFFSET _RawDevicesDlgProc@16
  0000f	56		 push	 esi
  00010	68 fe 01 00 00	 push	 510			; 000001feH
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 4426 : 	if (nResult == IDOK)

  0001c	83 f8 01	 cmp	 eax, 1
  0001f	75 40		 jne	 SHORT $LN1@SelectPart

; 4427 : 	{
; 4428 : 		AddComboItem (GetDlgItem (hwndDlg, IDC_VOLUME), szFileName, bHistory);

  00021	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHistory
  00027	57		 push	 edi
  00028	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  0002e	51		 push	 ecx
  0002f	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00034	68 0a 04 00 00	 push	 1034			; 0000040aH
  00039	56		 push	 esi
  0003a	ff d7		 call	 edi
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _AddComboItem

; 4429 : 		EnableDisableButtons (hwndDlg);

  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 _EnableDisableButtons
  00048	83 c4 10	 add	 esp, 16			; 00000010H

; 4430 : 		SetFocus (GetDlgItem (hwndDlg, IDC_DRIVELIST));

  0004b	68 ef 03 00 00	 push	 1007			; 000003efH
  00050	56		 push	 esi
  00051	ff d7		 call	 edi
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 4431 : 		return TRUE;

  0005a	b8 01 00 00 00	 mov	 eax, 1
  0005f	5f		 pop	 edi

; 4435 : }

  00060	c3		 ret	 0
$LN1@SelectPart:

; 4432 : 	}
; 4433 : 
; 4434 : 	return FALSE;

  00061	33 c0		 xor	 eax, eax

; 4435 : }

  00063	c3		 ret	 0
?SelectPartition@@YAHPAUHWND__@@@Z ENDP			; SelectPartition
_TEXT	ENDS
PUBLIC	??_C@_0BL@PHEMONEB@PASSWORD_CACHE_WIPED_SHORT?$AA@ ; `string'
PUBLIC	??_C@_0BF@NBAJKDBM@PASSWORD_CACHE_WIPED?$AA@	; `string'
EXTRN	_InfoBalloon:PROC
;	COMDAT ??_C@_0BL@PHEMONEB@PASSWORD_CACHE_WIPED_SHORT?$AA@
CONST	SEGMENT
??_C@_0BL@PHEMONEB@PASSWORD_CACHE_WIPED_SHORT?$AA@ DB 'PASSWORD_CACHE_WIP'
	DB	'ED_SHORT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NBAJKDBM@PASSWORD_CACHE_WIPED?$AA@
CONST	SEGMENT
??_C@_0BF@NBAJKDBM@PASSWORD_CACHE_WIPED?$AA@ DB 'PASSWORD_CACHE_WIPED', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _WipeCache
_TEXT	SEGMENT
_dwResult$ = -4						; size = 4
_silent$ = 8						; size = 4
_WipeCache PROC						; COMDAT
; _hwndDlg$ = esi

; 4438 : {

  00000	51		 push	 ecx

; 4439 : 	DWORD dwResult;
; 4440 : 	BOOL bResult;
; 4441 : 
; 4442 : 	bResult = DeviceIoControl (hDriver, TC_IOCTL_WIPE_PASSWORD_CACHE, NULL, 0, NULL, 0, &dwResult, NULL);

  00001	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hDriver
  00007	6a 00		 push	 0
  00009	8d 44 24 04	 lea	 eax, DWORD PTR _dwResult$[esp+8]
  0000d	50		 push	 eax
  0000e	6a 00		 push	 0
  00010	6a 00		 push	 0
  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	68 30 20 22 00	 push	 2236464			; 00222030H
  0001b	51		 push	 ecx
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 4443 : 	if (hwndDlg == NULL)

  00022	85 f6		 test	 esi, esi
  00024	74 30		 je	 SHORT $LN1@WipeCache

; 4444 : 		return;
; 4445 : 
; 4446 : 	if (bResult == FALSE)
; 4447 : 		handleWin32Error (hwndDlg);

  00026	56		 push	 esi
  00027	85 c0		 test	 eax, eax
  00029	75 0a		 jne	 SHORT $LN3@WipeCache
  0002b	e8 00 00 00 00	 call	 _handleWin32Error
  00030	83 c4 04	 add	 esp, 4

; 4454 : 	}
; 4455 : }

  00033	59		 pop	 ecx
  00034	c3		 ret	 0
$LN3@WipeCache:

; 4448 : 	else
; 4449 : 	{
; 4450 : 		EnableDisableButtons (hwndDlg);

  00035	e8 00 00 00 00	 call	 _EnableDisableButtons
  0003a	83 c4 04	 add	 esp, 4

; 4451 : 
; 4452 : 		if (!silent)

  0003d	83 7c 24 08 00	 cmp	 DWORD PTR _silent$[esp], 0
  00042	75 12		 jne	 SHORT $LN1@WipeCache

; 4453 : 			InfoBalloon ("PASSWORD_CACHE_WIPED_SHORT", "PASSWORD_CACHE_WIPED");

  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@NBAJKDBM@PASSWORD_CACHE_WIPED?$AA@
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PHEMONEB@PASSWORD_CACHE_WIPED_SHORT?$AA@
  0004e	e8 00 00 00 00	 call	 _InfoBalloon
  00053	83 c4 08	 add	 esp, 8
$LN1@WipeCache:

; 4454 : 	}
; 4455 : }

  00056	59		 pop	 ecx
  00057	c3		 ret	 0
_WipeCache ENDP
_TEXT	ENDS
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1557 : 		{	// subscript mutable sequence

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1558 : 
; 1559 :  #if _HAS_ITERATOR_DEBUGGING
; 1560 : 		// skip debug checks if the container is initizialed with _IGNORE_MYITERLIST
; 1561 : 		if (this->_Myfirstiter != _IGNORE_MYITERLIST)
; 1562 : 			{
; 1563 : 			if (_Mysize < _Off)
; 1564 : 				{
; 1565 : 				_DEBUG_ERROR("string subscript out of range");
; 1566 : 				_SCL_SECURE_OUT_OF_RANGE;
; 1567 : 				}
; 1568 : 			}
; 1569 :  #else
; 1570 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= _Mysize);

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	3b 7e 14	 cmp	 edi, DWORD PTR [esi+20]
  0000b	76 05		 jbe	 SHORT $LN3@operator@19
  0000d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@19:

; 1571 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1572 : 
; 1573 : 		return (_Myptr()[_Off]);

  00012	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00016	72 0b		 jb	 SHORT $LN9@operator@19
  00018	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0001b	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1574 : 		}

  00020	c2 04 00	 ret	 4

; 1571 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1572 : 
; 1573 : 		return (_Myptr()[_Off]);

$LN9@operator@19:
  00023	8d 44 3e 04	 lea	 eax, DWORD PTR [esi+edi+4]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi

; 1574 : 		}

  00029	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1577 : 		{	// subscript nonmutable sequence

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1578 : 
; 1579 :  #if _HAS_ITERATOR_DEBUGGING
; 1580 : 		// skip debug checks if the container is initizialed with _IGNORE_MYITERLIST
; 1581 : 		if (this->_Myfirstiter != _IGNORE_MYITERLIST)
; 1582 : 			{
; 1583 : 			if (_Mysize < _Off)	// sic
; 1584 : 				{
; 1585 : 				_DEBUG_ERROR("string subscript out of range");
; 1586 : 				_SCL_SECURE_OUT_OF_RANGE;
; 1587 : 				}
; 1588 : 			}
; 1589 :  #else
; 1590 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= _Mysize);

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	3b 7e 14	 cmp	 edi, DWORD PTR [esi+20]
  0000b	76 05		 jbe	 SHORT $LN3@operator@20
  0000d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@20:

; 1591 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1592 : 
; 1593 : 		return (_Myptr()[_Off]);

  00012	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00016	72 0b		 jb	 SHORT $LN9@operator@20
  00018	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0001b	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1594 : 		}

  00020	c2 04 00	 ret	 4

; 1591 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1592 : 
; 1593 : 		return (_Myptr()[_Off]);

$LN9@operator@20:
  00023	8d 44 3e 04	 lea	 eax, DWORD PTR [esi+edi+4]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi

; 1594 : 		}

  00029	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogtpy
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN5@c_str
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z ; std::basic_streambuf<char,std::char_traits<char> >::_Xsgetn_s
PUBLIC	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char> >::imbue
EXTRN	??1_Mutex@std@@QAE@XZ:PROC			; std::_Mutex::~_Mutex
EXTRN	??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
	DD	FLAT:?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
CONST	ENDS
;	COMDAT ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
__Lock$152916 = -4					; size = 4
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	55		 push	 ebp
  00003	8b e9		 mov	 ebp, ecx

; 43   : 		_DELETE_CRT(_Plocale);

  00005	8b 5d 38	 mov	 ebx, DWORD PTR [ebp+56]
  00008	c7 45 00 00 00
	00 00		 mov	 DWORD PTR [ebp], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  0000f	85 db		 test	 ebx, ebx
  00011	74 50		 je	 SHORT $LN3@basic_stre
  00013	57		 push	 edi
  00014	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00016	85 ff		 test	 edi, edi
  00018	74 3f		 je	 SHORT $LN12@basic_stre
  0001a	6a 00		 push	 0
  0001c	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$152916[esp+20]
  00020	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00025	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00028	85 c0		 test	 eax, eax
  0002a	76 09		 jbe	 SHORT $LN14@basic_stre
  0002c	83 f8 ff	 cmp	 eax, -1
  0002f	73 04		 jae	 SHORT $LN14@basic_stre
  00031	48		 dec	 eax
  00032	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN14@basic_stre:
  00035	56		 push	 esi
  00036	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00039	f7 de		 neg	 esi
  0003b	1b f6		 sbb	 esi, esi
  0003d	f7 d6		 not	 esi
  0003f	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$152916[esp+20]
  00043	23 f7		 and	 esi, edi
  00045	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0004a	85 f6		 test	 esi, esi
  0004c	74 0a		 je	 SHORT $LN18@basic_stre
  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	8b 10		 mov	 edx, DWORD PTR [eax]
  00052	6a 01		 push	 1
  00054	8b ce		 mov	 ecx, esi
  00056	ff d2		 call	 edx
$LN18@basic_stre:
  00058	5e		 pop	 esi
$LN12@basic_stre:
  00059	53		 push	 ebx
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005f	83 c4 04	 add	 esp, 4
  00062	5f		 pop	 edi
$LN3@basic_stre:

; 44   : 		}

  00063	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
  00066	5d		 pop	 ebp
  00067	5b		 pop	 ebx
  00068	83 c4 04	 add	 esp, 4
  0006b	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?to_char_type@?$char_traits@D@std@@SADABH@Z	; std::char_traits<char>::to_char_type
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 501  : 		return ((_Elem)_Meta);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Meta$[esp-4]
  00004	8a 00		 mov	 al, BYTE PTR [eax]

; 502  : 		}

  00006	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 298  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 299  : 		}

  00003	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::overflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 303  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 304  : 		}

  00003	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc, COMDAT
; _this$ = ecx

; 308  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 309  : 		}

  00002	c3		 ret	 0
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 313  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 314  : 		}

  00003	c3		 ret	 0
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn, COMDAT
; _this$ = ecx

; 326  : 		// assume the destination buffer is large enough
; 327  : 		return _Xsgetn_s(_Ptr, (size_t)-1, _Count);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Count$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00009	52		 push	 edx
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR __Ptr$[esp]
  0000e	6a ff		 push	 -1
  00010	52		 push	 edx
  00011	ff d0		 call	 eax

; 328  : 		}

  00013	c2 08 00	 ret	 8
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 403  : 		{	// offer buffer to external agent (do nothing)

  00000	8b c1		 mov	 eax, ecx

; 404  : 		return (this);
; 405  : 		}

  00002	c2 08 00	 ret	 8
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 409  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 410  : 		}

  00002	c3		 ret	 0
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sync
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 414  : 		}

  00000	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
PUBLIC	?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump
; Function compile flags: /Ogtpy
;	COMDAT ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::gbump, COMDAT
; _this$ = ecx

; 210  : 		*_IGcount -= _Off;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00007	29 10		 sub	 DWORD PTR [eax], edx

; 211  : 		*_IGnext += _Off;

  00009	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0000c	01 11		 add	 DWORD PTR [ecx], edx

; 212  : 		}

  0000e	c2 04 00	 ret	 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gbump
_TEXT	ENDS
PUBLIC	?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
; Function compile flags: /Ogtpy
;	COMDAT ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc, COMDAT
; _this$ = ecx

; 234  : 		--*_IGcount;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 235  : 		return ((*_IGnext)++);

  00005	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 236  : 		}

  0000f	c3		 ret	 0
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
_TEXT	ENDS
PUBLIC	?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
; Function compile flags: /Ogtpy
;	COMDAT ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail, COMDAT
; _this$ = ecx

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 06		 je	 SHORT $LN3@Gnavail
  00008	8b 49 30	 mov	 ecx, DWORD PTR [ecx+48]
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 247  : 		}

  0000d	c3		 ret	 0
$LN3@Gnavail:

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  0000e	33 c0		 xor	 eax, eax

; 247  : 		}

  00010	c3		 ret	 0
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
_TEXT	ENDS
PUBLIC	?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump
; Function compile flags: /Ogtpy
;	COMDAT ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbump, COMDAT
; _this$ = ecx

; 251  : 		*_IPcount -= _Off;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00007	29 10		 sub	 DWORD PTR [eax], edx

; 252  : 		*_IPnext += _Off;

  00009	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0000c	01 11		 add	 DWORD PTR [ecx], edx

; 253  : 		}

  0000e	c2 04 00	 ret	 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbump
_TEXT	ENDS
PUBLIC	??0?$fpos@H@std@@QAE@J@Z			; std::fpos<int>::fpos<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??0?$fpos@H@std@@QAE@J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = ecx

; 54   : 		{	// construct with stream offset

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx
  00008	33 c9		 xor	 ecx, ecx
  0000a	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00010	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 55   : 		}

  00013	c2 04 00	 ret	 4
??0?$fpos@H@std@@QAE@J@Z ENDP				; std::fpos<int>::fpos<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 317  : 		{	// get a character from stream, point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00008	ff d2		 call	 edx
  0000a	83 f8 ff	 cmp	 eax, -1
  0000d	75 04		 jne	 SHORT $LN3@uflow
  0000f	0b c0		 or	 eax, eax
  00011	5e		 pop	 esi

; 320  : 		}

  00012	c3		 ret	 0
$LN3@uflow:

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00013	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00016	ff 08		 dec	 DWORD PTR [eax]
  00018	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00020	89 10		 mov	 DWORD PTR [eax], edx
  00022	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00025	5e		 pop	 esi

; 320  : 		}

  00026	c3		 ret	 0
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::uflow
_TEXT	ENDS
EXTRN	?_BADOFF@std@@3JB:DWORD				; std::_BADOFF
; Function compile flags: /Ogtpy
;	COMDAT ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 393  : 		return (streampos(_BADOFF));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 394  : 		}

  00017	c2 10 00	 ret	 16			; 00000010H
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 399  : 		return (streampos(_BADOFF));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 400  : 		}

  00017	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN5@c_str@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str@2:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
PUBLIC	?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::empty
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::empty, COMDAT
; _this$ = ecx

; 736  : 		return (size() == 0);

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	2b 51 0c	 sub	 edx, DWORD PTR [ecx+12]
  00006	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 06	 sar	 edx, 6
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx
  00017	f7 d8		 neg	 eax
  00019	1b c0		 sbb	 eax, eax
  0001b	40		 inc	 eax

; 737  : 		}

  0001c	c3		 ret	 0
?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::empty
_TEXT	ENDS
PUBLIC	??D?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??D?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ
_TEXT	SEGMENT
??D?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator*, COMDAT
; _this$ = ecx

; 211  : 			{	// return designated value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 212  : 
; 213  :  #if _HAS_ITERATOR_DEBUGGING
; 214  : 			if (this->_Mycont == 0
; 215  : 				|| _Ptr == 0
; 216  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 217  : 				{
; 218  : 				_DEBUG_ERROR("list iterator not dereferencable");
; 219  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 220  : 				}
; 221  :  #else
; 222  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN23@operator@21
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 223  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN17@operator@21
$LN23@operator@21:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN18@operator@21
$LN17@operator@21:
  00018	33 c0		 xor	 eax, eax
$LN18@operator@21:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN3@operator@21
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@21:

; 224  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 225  : 
; 226  : 			return (_Myval(_Ptr));

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 c0 08	 add	 eax, 8
  0002d	5e		 pop	 esi

; 227  : 			}

  0002e	c3		 ret	 0
??D?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator*
_TEXT	ENDS
PUBLIC	??9?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator!=
; Function compile flags: /Ogtpy
;	COMDAT ??9?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator!=, COMDAT
; _this$ = ecx

; 302  : 			{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 303  : 			return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN6@operator@22
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN5@operator@22
$LN6@operator@22:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@22:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 304  : 			}

  00026	c2 04 00	 ret	 4
??9?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator!=
_TEXT	ENDS
PUBLIC	??E?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??E?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::operator++, COMDAT
; _this$ = ecx

; 403  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 404  : 			++(*(_Mybase_iter *)this);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN25@operator@23
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN19@operator@23
$LN25@operator@23:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN20@operator@23
$LN19@operator@23:
  00018	33 c0		 xor	 eax, eax
$LN20@operator@23:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN5@operator@23
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@23:
  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	8b 02		 mov	 eax, DWORD PTR [edx]
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 405  : 			return (*this);

  0002f	8b c6		 mov	 eax, esi
  00031	5e		 pop	 esi

; 406  : 			}

  00032	c3		 ret	 0
??E?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::operator++
_TEXT	ENDS
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 43   : 		_Tidy();

  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 44   : 		}

  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?not_eof@?$char_traits@D@std@@SAHABH@Z		; std::char_traits<char>::not_eof
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 522  : 		return (_Meta != eof() ? _Meta : !eof());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Meta$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8b c1		 mov	 eax, ecx
  00008	40		 inc	 eax
  00009	f7 d8		 neg	 eax
  0000b	1b c0		 sbb	 eax, eax
  0000d	23 c1		 and	 eax, ecx

; 523  : 		}

  0000f	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHABH@Z ENDP		; std::char_traits<char>::not_eof
_TEXT	ENDS
PUBLIC	??B?$fpos@H@std@@QBEJXZ				; std::fpos<int>::operator long
; Function compile flags: /Ogtpy
;	COMDAT ??B?$fpos@H@std@@QBEJXZ
_TEXT	SEGMENT
??B?$fpos@H@std@@QBEJXZ PROC				; std::fpos<int>::operator long, COMDAT
; _this$ = ecx

; 79   : 		return ((streamoff)(_Myoff + _FPOSOFF(_Fpos)));

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	03 01		 add	 eax, DWORD PTR [ecx]

; 80   : 		}

  00005	c3		 ret	 0
??B?$fpos@H@std@@QBEJXZ ENDP				; std::fpos<int>::operator long
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT
; _this$ = ecx

; 157  : 		if (_Mysb::gptr() == 0
; 158  : 			|| _Mysb::gptr() <= _Mysb::eback()
; 159  : 			|| !_Traits::eq_int_type(_Traits::eof(), _Meta)
; 160  : 			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
; 161  : 			&& _Mystate & _Constant)

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]
  00005	85 c0		 test	 eax, eax
  00007	74 3b		 je	 SHORT $LN3@pbackfail
  00009	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0000c	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000e	76 34		 jbe	 SHORT $LN3@pbackfail
  00010	8b 54 24 04	 mov	 edx, DWORD PTR __Meta$[esp-4]
  00014	83 fa ff	 cmp	 edx, -1
  00017	74 0b		 je	 SHORT $LN4@pbackfail
  00019	3a 50 ff	 cmp	 dl, BYTE PTR [eax-1]
  0001c	74 06		 je	 SHORT $LN4@pbackfail
  0001e	f6 41 40 02	 test	 BYTE PTR [ecx+64], 2
  00022	75 20		 jne	 SHORT $LN3@pbackfail
$LN4@pbackfail:

; 163  : 		else
; 164  : 			{	// back up one position and store put-back character
; 165  : 			_Mysb::gbump(-1);

  00024	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00027	ff 00		 inc	 DWORD PTR [eax]
  00029	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0002c	ff 08		 dec	 DWORD PTR [eax]

; 166  : 			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  0002e	83 fa ff	 cmp	 edx, -1
  00031	74 0c		 je	 SHORT $LN37@pbackfail

; 167  : 				*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  00033	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	88 11		 mov	 BYTE PTR [ecx], dl

; 168  : 			return (_Traits::not_eof(_Meta));

  0003a	8b c2		 mov	 eax, edx

; 169  : 			}
; 170  : 		}

  0003c	c2 04 00	 ret	 4

; 168  : 			return (_Traits::not_eof(_Meta));

$LN37@pbackfail:
  0003f	33 c0		 xor	 eax, eax

; 169  : 			}
; 170  : 		}

  00041	c2 04 00	 ret	 4
$LN3@pbackfail:

; 162  : 			return (_Traits::eof());	// can't put back, fail

  00044	83 c8 ff	 or	 eax, -1

; 169  : 			}
; 170  : 		}

  00047	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT
; _this$ = ecx

; 174  : 		if (_Mysb::gptr() == 0)

  00000	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00003	56		 push	 esi
  00004	8b 32		 mov	 esi, DWORD PTR [edx]
  00006	85 f6		 test	 esi, esi
  00008	75 05		 jne	 SHORT $LN8@underflow

; 175  : 			return (_Traits::eof());	// no character buffer, fail

  0000a	83 c8 ff	 or	 eax, -1
  0000d	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  0000e	c3		 ret	 0
$LN8@underflow:
  0000f	53		 push	 ebx
  00010	57		 push	 edi

; 176  : 		else if (_Mysb::gptr() < _Mysb::egptr())

  00011	8b 79 30	 mov	 edi, DWORD PTR [ecx+48]
  00014	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00016	8b c6		 mov	 eax, esi
  00018	03 d8		 add	 ebx, eax
  0001a	3b c3		 cmp	 eax, ebx
  0001c	73 07		 jae	 SHORT $LN6@underflow

; 177  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  0001e	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx
  00023	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00024	c3		 ret	 0
$LN6@underflow:

; 178  : 		else if (_Mystate & _Noread || _Mysb::pptr() == 0
; 179  : 			|| _Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr())

  00025	f6 41 40 04	 test	 BYTE PTR [ecx+64], 4
  00029	75 2f		 jne	 SHORT $LN3@underflow
  0002b	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0002e	8b 00		 mov	 eax, DWORD PTR [eax]
  00030	85 c0		 test	 eax, eax
  00032	74 26		 je	 SHORT $LN3@underflow
  00034	3b c6		 cmp	 eax, esi
  00036	77 05		 ja	 SHORT $LN4@underflow
  00038	39 71 3c	 cmp	 DWORD PTR [ecx+60], esi
  0003b	76 1d		 jbe	 SHORT $LN3@underflow
$LN4@underflow:

; 181  : 		else
; 182  : 			{	// extend read buffer into written area, then return buffered
; 183  : 			if (_Seekhigh < _Mysb::pptr())

  0003d	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00040	73 03		 jae	 SHORT $LN1@underflow

; 184  : 				_Seekhigh = _Mysb::pptr();

  00042	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN1@underflow:

; 185  : 			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);

  00045	8b 12		 mov	 edx, DWORD PTR [edx]
  00047	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0004a	2b c2		 sub	 eax, edx
  0004c	89 07		 mov	 DWORD PTR [edi], eax

; 186  : 			return (_Traits::to_int_type(*_Mysb::gptr()));

  0004e	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00051	8b 11		 mov	 edx, DWORD PTR [ecx]
  00053	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00056	5f		 pop	 edi
  00057	5b		 pop	 ebx
  00058	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00059	c3		 ret	 0
$LN3@underflow:
  0005a	5f		 pop	 edi
  0005b	5b		 pop	 ebx

; 180  : 			return (_Traits::eof());	// can't read, fail

  0005c	83 c8 ff	 or	 eax, -1
  0005f	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00060	c3		 ret	 0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Way$ = 16						; size = 4
__Which$ = 20						; size = 4
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT
; _this$ = ecx

; 194  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00000	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00003	8b 02		 mov	 eax, DWORD PTR [edx]
  00005	85 c0		 test	 eax, eax
  00007	74 08		 je	 SHORT $LN20@seekoff
  00009	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  0000c	73 03		 jae	 SHORT $LN20@seekoff

; 195  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  0000e	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN20@seekoff:
  00011	53		 push	 ebx

; 196  : 
; 197  : 		if (_Which & ios_base::in && _Mysb::gptr() != 0)

  00012	8a 5c 24 14	 mov	 bl, BYTE PTR __Which$[esp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	f6 c3 01	 test	 bl, 1
  0001b	0f 84 a8 00 00
	00		 je	 $LN19@seekoff
  00021	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00024	8b 30		 mov	 esi, DWORD PTR [eax]
  00026	85 f6		 test	 esi, esi
  00028	0f 84 9b 00 00
	00		 je	 $LN19@seekoff

; 198  : 			{	// position within read buffer
; 199  : 			if (_Way == ios_base::end)

  0002e	8b 44 24 18	 mov	 eax, DWORD PTR __Way$[esp+8]
  00032	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  00038	83 f8 02	 cmp	 eax, 2
  0003b	75 10		 jne	 SHORT $LN18@seekoff

; 200  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  0003d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00040	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00043	2b 02		 sub	 eax, DWORD PTR [edx]
  00045	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
  00049	03 d0		 add	 edx, eax

; 201  : 			else if (_Way == ios_base::cur

  0004b	eb 25		 jmp	 SHORT $LN14@seekoff
$LN18@seekoff:

; 202  : 				&& (_Which & ios_base::out) == 0)

  0004d	83 f8 01	 cmp	 eax, 1
  00050	75 14		 jne	 SHORT $LN16@seekoff
  00052	f6 c3 02	 test	 bl, 2
  00055	75 13		 jne	 SHORT $LN73@seekoff

; 203  : 				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());

  00057	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0005a	8b c6		 mov	 eax, esi
  0005c	2b 02		 sub	 eax, DWORD PTR [edx]
  0005e	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
  00062	03 d0		 add	 edx, eax
  00064	eb 0c		 jmp	 SHORT $LN14@seekoff
$LN16@seekoff:

; 204  : 			else if (_Way != ios_base::beg)

  00066	85 c0		 test	 eax, eax
  00068	74 04		 je	 SHORT $LN74@seekoff
$LN73@seekoff:

; 205  : 				_Off = _BADOFF;

  0006a	8b d7		 mov	 edx, edi
  0006c	eb 04		 jmp	 SHORT $LN14@seekoff
$LN74@seekoff:
  0006e	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
$LN14@seekoff:

; 206  : 
; 207  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00072	85 d2		 test	 edx, edx
  00074	0f 8c b9 00 00
	00		 jl	 $LN3@seekoff
  0007a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0007d	8b 00		 mov	 eax, DWORD PTR [eax]
  0007f	55		 push	 ebp
  00080	8b 69 3c	 mov	 ebp, DWORD PTR [ecx+60]
  00083	2b e8		 sub	 ebp, eax
  00085	3b d5		 cmp	 edx, ebp
  00087	5d		 pop	 ebp
  00088	0f 8f a5 00 00
	00		 jg	 $LN3@seekoff

; 208  : 				{	// change read position
; 209  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  0008e	2b c6		 sub	 eax, esi
  00090	8b 71 30	 mov	 esi, DWORD PTR [ecx+48]
  00093	03 c2		 add	 eax, edx
  00095	29 06		 sub	 DWORD PTR [esi], eax
  00097	8b 71 20	 mov	 esi, DWORD PTR [ecx+32]
  0009a	01 06		 add	 DWORD PTR [esi], eax

; 210  : 				if (_Which & ios_base::out && _Mysb::pptr() != 0)

  0009c	f6 c3 02	 test	 bl, 2
  0009f	0f 84 98 00 00
	00		 je	 $LN77@seekoff
  000a5	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  000a8	8b 1f		 mov	 ebx, DWORD PTR [edi]
  000aa	85 db		 test	 ebx, ebx
  000ac	0f 84 8b 00 00
	00		 je	 $LN77@seekoff

; 211  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 212  : 						_Mysb::epptr());	// change write position to match

  000b2	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  000b5	8b 30		 mov	 esi, DWORD PTR [eax]
  000b7	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  000ba	8b 00		 mov	 eax, DWORD PTR [eax]
  000bc	03 c3		 add	 eax, ebx
  000be	89 37		 mov	 DWORD PTR [edi], esi
  000c0	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  000c3	2b c6		 sub	 eax, esi
  000c5	89 01		 mov	 DWORD PTR [ecx], eax

; 213  : 				}
; 214  : 			else

  000c7	eb 74		 jmp	 SHORT $LN77@seekoff
$LN19@seekoff:

; 215  : 				_Off = _BADOFF;
; 216  : 			}
; 217  : 		else if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000c9	f6 c3 02	 test	 bl, 2
  000cc	74 69		 je	 SHORT $LN9@seekoff
  000ce	8b 32		 mov	 esi, DWORD PTR [edx]
  000d0	85 f6		 test	 esi, esi
  000d2	74 63		 je	 SHORT $LN9@seekoff

; 218  : 			{	// position within write buffer
; 219  : 			if (_Way == ios_base::end)

  000d4	8b 44 24 18	 mov	 eax, DWORD PTR __Way$[esp+8]
  000d8	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  000de	83 f8 02	 cmp	 eax, 2
  000e1	75 10		 jne	 SHORT $LN8@seekoff

; 220  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  000e3	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000e6	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  000e9	2b 02		 sub	 eax, DWORD PTR [edx]
  000eb	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
  000ef	03 d0		 add	 edx, eax
  000f1	eb 1e		 jmp	 SHORT $LN4@seekoff
$LN8@seekoff:

; 221  : 			else if (_Way == ios_base::cur)

  000f3	83 f8 01	 cmp	 eax, 1
  000f6	75 0f		 jne	 SHORT $LN6@seekoff

; 222  : 				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());

  000f8	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000fb	8b c6		 mov	 eax, esi
  000fd	2b 02		 sub	 eax, DWORD PTR [edx]
  000ff	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
  00103	03 d0		 add	 edx, eax
  00105	eb 0a		 jmp	 SHORT $LN4@seekoff
$LN6@seekoff:

; 223  : 			else if (_Way != ios_base::beg)
; 224  : 				_Off = _BADOFF;

  00107	8b d7		 mov	 edx, edi
  00109	85 c0		 test	 eax, eax
  0010b	75 04		 jne	 SHORT $LN4@seekoff
  0010d	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
$LN4@seekoff:

; 225  : 
; 226  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00111	85 d2		 test	 edx, edx
  00113	7c 1e		 jl	 SHORT $LN3@seekoff
  00115	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00118	8b 00		 mov	 eax, DWORD PTR [eax]
  0011a	8b 59 3c	 mov	 ebx, DWORD PTR [ecx+60]
  0011d	2b d8		 sub	 ebx, eax
  0011f	3b d3		 cmp	 edx, ebx
  00121	7f 10		 jg	 SHORT $LN3@seekoff

; 227  : 				_Mysb::pbump((int)(_Mysb::eback()
; 228  : 					- _Mysb::pptr() + _Off));	// change write position

  00123	2b c6		 sub	 eax, esi
  00125	8b 71 34	 mov	 esi, DWORD PTR [ecx+52]
  00128	03 c2		 add	 eax, edx
  0012a	29 06		 sub	 DWORD PTR [esi], eax
  0012c	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0012f	01 01		 add	 DWORD PTR [ecx], eax

; 229  : 			else

  00131	eb 0a		 jmp	 SHORT $LN77@seekoff
$LN3@seekoff:

; 230  : 				_Off = _BADOFF;

  00133	8b d7		 mov	 edx, edi

; 231  : 			}
; 232  : 		else

  00135	eb 06		 jmp	 SHORT $LN77@seekoff
$LN9@seekoff:

; 233  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  00137	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
$LN77@seekoff:

; 234  : 		return (pos_type(_Off));

  0013d	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  00141	5f		 pop	 edi
  00142	33 c9		 xor	 ecx, ecx
  00144	5e		 pop	 esi
  00145	89 10		 mov	 DWORD PTR [eax], edx
  00147	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0014a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0014d	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00150	5b		 pop	 ebx

; 235  : 		}

  00151	c2 10 00	 ret	 16			; 00000010H
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Ptr$ = 12						; size = 24
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT
; _this$ = ecx

; 240  : 		streamoff _Off = (streamoff)_Ptr;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Ptr$[esp+4]
  00008	55		 push	 ebp
  00009	57		 push	 edi

; 241  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  0000a	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  0000d	03 d0		 add	 edx, eax
  0000f	8b 07		 mov	 eax, DWORD PTR [edi]
  00011	85 c0		 test	 eax, eax
  00013	74 08		 je	 SHORT $LN12@seekpos
  00015	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00018	73 03		 jae	 SHORT $LN12@seekpos

; 242  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  0001a	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN12@seekpos:

; 243  : 
; 244  : 		if (_Off == _BADOFF)

  0001d	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  00023	3b d5		 cmp	 edx, ebp
  00025	0f 84 8a 00 00
	00		 je	 $LN56@seekpos
  0002b	53		 push	 ebx

; 245  : 			;
; 246  : 		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)

  0002c	8a 5c 24 2c	 mov	 bl, BYTE PTR __Mode$[esp+8]
  00030	56		 push	 esi
  00031	f6 c3 01	 test	 bl, 1
  00034	74 4e		 je	 SHORT $LN55@seekpos
  00036	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00039	8b 30		 mov	 esi, DWORD PTR [eax]
  0003b	85 f6		 test	 esi, esi
  0003d	74 45		 je	 SHORT $LN55@seekpos

; 247  : 			{	// position within read buffer
; 248  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0003f	85 d2		 test	 edx, edx
  00041	7c 6e		 jl	 SHORT $LN4@seekpos
  00043	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00046	8b 00		 mov	 eax, DWORD PTR [eax]
  00048	8b 79 3c	 mov	 edi, DWORD PTR [ecx+60]
  0004b	2b f8		 sub	 edi, eax
  0004d	3b d7		 cmp	 edx, edi
  0004f	7f 60		 jg	 SHORT $LN4@seekpos

; 249  : 				{	// change read position
; 250  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00051	2b c6		 sub	 eax, esi
  00053	8b 71 30	 mov	 esi, DWORD PTR [ecx+48]
  00056	03 c2		 add	 eax, edx
  00058	29 06		 sub	 DWORD PTR [esi], eax
  0005a	8b 71 20	 mov	 esi, DWORD PTR [ecx+32]
  0005d	01 06		 add	 DWORD PTR [esi], eax

; 251  : 				if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  0005f	f6 c3 02	 test	 bl, 2
  00062	74 4f		 je	 SHORT $LN57@seekpos
  00064	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  00067	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00069	85 db		 test	 ebx, ebx
  0006b	74 46		 je	 SHORT $LN57@seekpos

; 252  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 253  : 						_Mysb::epptr());	// change write position to match

  0006d	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00070	8b 30		 mov	 esi, DWORD PTR [eax]
  00072	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00075	8b 00		 mov	 eax, DWORD PTR [eax]
  00077	03 c3		 add	 eax, ebx
  00079	89 37		 mov	 DWORD PTR [edi], esi
  0007b	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  0007e	2b c6		 sub	 eax, esi
  00080	89 01		 mov	 DWORD PTR [ecx], eax

; 254  : 				}
; 255  : 			else
; 256  : 				_Off = _BADOFF;

  00082	eb 2f		 jmp	 SHORT $LN57@seekpos
$LN55@seekpos:

; 257  : 			}
; 258  : 		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  00084	f6 c3 02	 test	 bl, 2
  00087	74 28		 je	 SHORT $LN4@seekpos
  00089	8b 3f		 mov	 edi, DWORD PTR [edi]
  0008b	85 ff		 test	 edi, edi
  0008d	74 22		 je	 SHORT $LN4@seekpos

; 259  : 			{	// position within write buffer
; 260  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0008f	85 d2		 test	 edx, edx
  00091	7c 1e		 jl	 SHORT $LN4@seekpos
  00093	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	8b 71 3c	 mov	 esi, DWORD PTR [ecx+60]
  0009b	2b f0		 sub	 esi, eax
  0009d	3b d6		 cmp	 edx, esi
  0009f	7f 10		 jg	 SHORT $LN4@seekpos

; 261  : 				_Mysb::pbump((int)(_Mysb::eback()
; 262  : 					- _Mysb::pptr() + _Off));	// change write position

  000a1	8b 71 34	 mov	 esi, DWORD PTR [ecx+52]
  000a4	2b c7		 sub	 eax, edi
  000a6	03 c2		 add	 eax, edx
  000a8	29 06		 sub	 DWORD PTR [esi], eax
  000aa	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000ad	01 01		 add	 DWORD PTR [ecx], eax

; 263  : 			else

  000af	eb 02		 jmp	 SHORT $LN57@seekpos
$LN4@seekpos:

; 264  : 				_Off = _BADOFF;
; 265  : 			}
; 266  : 		else
; 267  : 			_Off = _BADOFF;

  000b1	8b d5		 mov	 edx, ebp
$LN57@seekpos:
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
$LN56@seekpos:

; 268  : 		return (streampos(_Off));

  000b5	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  000b9	33 c9		 xor	 ecx, ecx
  000bb	5f		 pop	 edi
  000bc	89 10		 mov	 DWORD PTR [eax], edx
  000be	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000c1	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000c4	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  000c7	5d		 pop	 ebp

; 269  : 		}

  000c8	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
_TEXT	ENDS
PUBLIC	??D?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??D?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
??D?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator*, COMDAT
; _this$ = ecx

; 211  : 			{	// return designated value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 212  : 
; 213  :  #if _HAS_ITERATOR_DEBUGGING
; 214  : 			if (this->_Mycont == 0
; 215  : 				|| _Ptr == 0
; 216  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 217  : 				{
; 218  : 				_DEBUG_ERROR("list iterator not dereferencable");
; 219  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 220  : 				}
; 221  :  #else
; 222  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN23@operator@24
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 223  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN17@operator@24
$LN23@operator@24:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN18@operator@24
$LN17@operator@24:
  00018	33 c0		 xor	 eax, eax
$LN18@operator@24:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN3@operator@24
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@24:

; 224  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 225  : 
; 226  : 			return (_Myval(_Ptr));

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 c0 08	 add	 eax, 8
  0002d	5e		 pop	 esi

; 227  : 			}

  0002e	c3		 ret	 0
??D?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator*
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 fc	 lea	 esi, DWORD PTR [ecx-4]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0000c	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00014	50		 push	 eax
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0001b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00020	83 c4 04	 add	 esp, 4
  00023	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00028	74 09		 je	 SHORT $LN13@scalar@10
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
$LN13@scalar@10:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 f8	 lea	 esi, DWORD PTR [ecx-8]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0000c	c7 44 02 f8 00
	00 00 00	 mov	 DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00014	50		 push	 eax
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0001b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00020	83 c4 04	 add	 esp, 4
  00023	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00028	74 09		 je	 SHORT $LN13@scalar@11
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
$LN13@scalar@11:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@12
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@12:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_iostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 f4	 lea	 esi, DWORD PTR [ecx-12]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0000c	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  00014	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00022	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00025	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00028	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00030	50		 push	 eax
  00031	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00037	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0003c	83 c4 04	 add	 esp, 4
  0003f	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00044	74 09		 je	 SHORT $LN17@scalar@13
  00046	56		 push	 esi
  00047	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004c	83 c4 04	 add	 esp, 4
$LN17@scalar@13:
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	c2 04 00	 ret	 4
??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_iostream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00015	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0001a	74 09		 je	 SHORT $LN7@scalar@14
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$LN7@scalar@14:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	c2 04 00	 ret	 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
tv206 = 12						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 1770 : 		{	// look for [_Ptr, _Ptr + _Count) beginnng at or after _Off

  00000	51		 push	 ecx

; 1771 : 
; 1772 :  #if _HAS_ITERATOR_DEBUGGING
; 1773 : 		if (_Count != 0)
; 1774 : 			_DEBUG_POINTER(_Ptr);
; 1775 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1776 : 
; 1777 : 		if (_Count == 0 && _Off <= _Mysize)

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Count$[esp]
  00005	8b 44 24 0c	 mov	 eax, DWORD PTR __Off$[esp]
  00009	89 0c 24	 mov	 DWORD PTR _this$[esp+4], ecx
  0000c	85 d2		 test	 edx, edx
  0000e	75 09		 jne	 SHORT $LN6@find
  00010	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]

; 1778 : 			return (_Off);	// null string always matches (if inside string)

  00013	0f 86 86 00 00
	00		 jbe	 $LN7@find
$LN6@find:
  00019	53		 push	 ebx
  0001a	55		 push	 ebp
  0001b	56		 push	 esi
  0001c	57		 push	 edi

; 1779 : 
; 1780 : 		size_type _Nm;
; 1781 : 		if (_Off < _Mysize && _Count <= (_Nm = _Mysize - _Off))

  0001d	8b 79 14	 mov	 edi, DWORD PTR [ecx+20]
  00020	3b c7		 cmp	 eax, edi
  00022	73 74		 jae	 SHORT $LN2@find
  00024	2b f8		 sub	 edi, eax
  00026	3b d7		 cmp	 edx, edi
  00028	77 6e		 ja	 SHORT $LN2@find

; 1782 : 			{	// room for match, look for it
; 1783 : 			const _Elem *_Uptr, *_Vptr;
; 1784 : 			for (_Nm -= _Count - 1, _Vptr = _Myptr() + _Off;

  0002a	be 01 00 00 00	 mov	 esi, 1
  0002f	2b f2		 sub	 esi, edx
  00031	03 fe		 add	 edi, esi
  00033	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00037	72 0b		 jb	 SHORT $LN11@find
  00039	83 c1 04	 add	 ecx, 4
  0003c	89 4c 24 1c	 mov	 DWORD PTR tv206[esp+16], ecx
  00040	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00042	eb 07		 jmp	 SHORT $LN12@find
$LN11@find:
  00044	83 c1 04	 add	 ecx, 4
  00047	89 4c 24 1c	 mov	 DWORD PTR tv206[esp+16], ecx
$LN12@find:

; 1785 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1786 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)

  0004b	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  0004f	8d 1c 01	 lea	 ebx, DWORD PTR [ecx+eax]
  00052	0f be 45 00	 movsx	 eax, BYTE PTR [ebp]
  00056	57		 push	 edi
  00057	50		 push	 eax
  00058	53		 push	 ebx
  00059	e8 00 00 00 00	 call	 _memchr
  0005e	8b f0		 mov	 esi, eax
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH
  00063	85 f6		 test	 esi, esi
  00065	74 31		 je	 SHORT $LN2@find
$LL4@find:

; 1787 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)

  00067	8b 4c 24 20	 mov	 ecx, DWORD PTR __Count$[esp+16]
  0006b	51		 push	 ecx
  0006c	55		 push	 ebp
  0006d	56		 push	 esi
  0006e	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH
  00076	85 c0		 test	 eax, eax
  00078	74 29		 je	 SHORT $LN20@find
  0007a	0f be 55 00	 movsx	 edx, BYTE PTR [ebp]
  0007e	2b de		 sub	 ebx, esi
  00080	8d 7c 1f ff	 lea	 edi, DWORD PTR [edi+ebx-1]
  00084	57		 push	 edi
  00085	52		 push	 edx
  00086	8d 5e 01	 lea	 ebx, DWORD PTR [esi+1]
  00089	53		 push	 ebx
  0008a	e8 00 00 00 00	 call	 _memchr
  0008f	8b f0		 mov	 esi, eax
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
  00094	85 f6		 test	 esi, esi
  00096	75 cf		 jne	 SHORT $LL4@find
$LN2@find:
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5d		 pop	 ebp

; 1789 : 			}
; 1790 : 
; 1791 : 		return (npos);	// no match

  0009b	83 c8 ff	 or	 eax, -1
  0009e	5b		 pop	 ebx
$LN7@find:

; 1792 : 		}

  0009f	59		 pop	 ecx
  000a0	c2 0c 00	 ret	 12			; 0000000cH
$LN20@find:

; 1788 : 					return (_Uptr - _Myptr());	// found a match

  000a3	8b 44 24 10	 mov	 eax, DWORD PTR _this$[esp+20]
  000a7	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  000ab	8b 4c 24 1c	 mov	 ecx, DWORD PTR tv206[esp+16]
  000af	72 02		 jb	 SHORT $LN18@find
  000b1	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN18@find:
  000b3	5f		 pop	 edi
  000b4	8b c6		 mov	 eax, esi
  000b6	5e		 pop	 esi
  000b7	5d		 pop	 ebp
  000b8	2b c1		 sub	 eax, ecx
  000ba	5b		 pop	 ebx

; 1792 : 		}

  000bb	59		 pop	 ecx
  000bc	c2 0c 00	 ret	 12			; 0000000cH
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
PUBLIC	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Function compile flags: /Ogtpy
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
tv170 = 12						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx

; 1813 : 
; 1814 :  #if _HAS_ITERATOR_DEBUGGING
; 1815 : 		if (_Count != 0)
; 1816 : 			_DEBUG_POINTER(_Ptr);
; 1817 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1818 : 
; 1819 : 		if (_Count == 0)

  00000	8b 54 24 0c	 mov	 edx, DWORD PTR __Count$[esp-4]
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 1820 : 			return (_Off < _Mysize ? _Off : _Mysize);	// null always matches

  00007	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000a	85 d2		 test	 edx, edx
  0000c	75 12		 jne	 SHORT $LN8@rfind
  0000e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Off$[esp]
  00012	3b c8		 cmp	 ecx, eax
  00014	0f 83 85 00 00
	00		 jae	 $LN9@rfind
  0001a	8b c1		 mov	 eax, ecx
  0001c	5f		 pop	 edi

; 1834 : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
$LN8@rfind:
  00020	53		 push	 ebx
  00021	55		 push	 ebp
  00022	56		 push	 esi

; 1821 : 		if (_Count <= _Mysize)

  00023	3b d0		 cmp	 edx, eax
  00025	77 72		 ja	 SHORT $LN27@rfind

; 1822 : 			{	// room for match, look for it
; 1823 : 			const _Elem *_Uptr = _Myptr() +
; 1824 : 				(_Off < _Mysize - _Count ? _Off : _Mysize - _Count);

  00027	8b 4c 24 18	 mov	 ecx, DWORD PTR __Off$[esp+12]
  0002b	2b c2		 sub	 eax, edx
  0002d	3b c8		 cmp	 ecx, eax
  0002f	73 02		 jae	 SHORT $LN13@rfind
  00031	8b c1		 mov	 eax, ecx
$LN13@rfind:
  00033	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00036	89 4c 24 18	 mov	 DWORD PTR tv170[esp+12], ecx
  0003a	8d 5f 04	 lea	 ebx, DWORD PTR [edi+4]
  0003d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00040	72 04		 jb	 SHORT $LN17@rfind
  00042	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00044	eb 02		 jmp	 SHORT $LN18@rfind
$LN17@rfind:
  00046	8b cb		 mov	 ecx, ebx
$LN18@rfind:
  00048	8b 6c 24 14	 mov	 ebp, DWORD PTR __Ptr$[esp+12]
  0004c	8d 34 01	 lea	 esi, DWORD PTR [ecx+eax]
  0004f	90		 npad	 1
$LL6@rfind:

; 1825 : 			for (; ; --_Uptr)
; 1826 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1827 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)

  00050	8a 45 00	 mov	 al, BYTE PTR [ebp]
  00053	38 06		 cmp	 BYTE PTR [esi], al
  00055	75 0f		 jne	 SHORT $LN3@rfind
  00057	52		 push	 edx
  00058	55		 push	 ebp
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	85 c0		 test	 eax, eax
  00064	74 12		 je	 SHORT $LN26@rfind
$LN3@rfind:

; 1829 : 				else if (_Uptr == _Myptr())

  00066	8b cf		 mov	 ecx, edi
  00068	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  0006d	3b f0		 cmp	 esi, eax
  0006f	74 28		 je	 SHORT $LN27@rfind
  00071	8b 54 24 1c	 mov	 edx, DWORD PTR __Count$[esp+12]
  00075	4e		 dec	 esi
  00076	eb d8		 jmp	 SHORT $LL6@rfind
$LN26@rfind:

; 1828 : 					return (_Uptr - _Myptr());	// found a match

  00078	83 7c 24 18 10	 cmp	 DWORD PTR tv170[esp+12], 16 ; 00000010H
  0007d	72 0d		 jb	 SHORT $LN23@rfind
  0007f	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00081	8b c6		 mov	 eax, esi
  00083	5e		 pop	 esi
  00084	5d		 pop	 ebp
  00085	5b		 pop	 ebx
  00086	2b c1		 sub	 eax, ecx
  00088	5f		 pop	 edi

; 1834 : 		}

  00089	c2 0c 00	 ret	 12			; 0000000cH

; 1828 : 					return (_Uptr - _Myptr());	// found a match

$LN23@rfind:
  0008c	8b c6		 mov	 eax, esi
  0008e	5e		 pop	 esi
  0008f	5d		 pop	 ebp
  00090	8b cb		 mov	 ecx, ebx
  00092	5b		 pop	 ebx
  00093	2b c1		 sub	 eax, ecx
  00095	5f		 pop	 edi

; 1834 : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN27@rfind:
  00099	5e		 pop	 esi
  0009a	5d		 pop	 ebp

; 1830 : 					break;	// at beginning, no more chance for match
; 1831 : 			}
; 1832 : 
; 1833 : 		return (npos);	// no match

  0009b	83 c8 ff	 or	 eax, -1
  0009e	5b		 pop	 ebx
$LN9@rfind:
  0009f	5f		 pop	 edi

; 1834 : 		}

  000a0	c2 0c 00	 ret	 12			; 0000000cH
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtpy
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__Count$ = 20						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 2038 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 2039 : 
; 2040 :  #if _HAS_ITERATOR_DEBUGGING
; 2041 : 		if (_Count != 0)
; 2042 : 			_DEBUG_POINTER(_Ptr);
; 2043 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2044 : 
; 2045 : 		if (_Mysize < _Off)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Off$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	39 6f 14	 cmp	 DWORD PTR [edi+20], ebp
  0000d	73 05		 jae	 SHORT $LN2@compare@3

; 2046 : 			_String_base::_Xran();	// _Off off end

  0000f	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN2@compare@3:

; 2047 : 		if (_Mysize - _Off < _N0)

  00014	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00017	8b 74 24 18	 mov	 esi, DWORD PTR __N0$[esp+12]
  0001b	2b c5		 sub	 eax, ebp
  0001d	3b c6		 cmp	 eax, esi
  0001f	73 02		 jae	 SHORT $LN1@compare@3

; 2048 : 			_N0 = _Mysize - _Off;	// trim _N0 to size

  00021	8b f0		 mov	 esi, eax
$LN1@compare@3:

; 2049 : 
; 2050 : 		size_type _Ans = _Traits::compare(_Myptr() + _Off, _Ptr,
; 2051 : 			_N0 < _Count ? _N0 : _Count);

  00023	8b 5c 24 20	 mov	 ebx, DWORD PTR __Count$[esp+12]
  00027	8b c6		 mov	 eax, esi
  00029	3b f3		 cmp	 esi, ebx
  0002b	72 02		 jb	 SHORT $LN6@compare@3
  0002d	8b c3		 mov	 eax, ebx
$LN6@compare@3:
  0002f	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  00033	72 05		 jb	 SHORT $LN13@compare@3
  00035	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  00038	eb 03		 jmp	 SHORT $LN14@compare@3
$LN13@compare@3:
  0003a	83 c7 04	 add	 edi, 4
$LN14@compare@3:
  0003d	50		 push	 eax
  0003e	8b 44 24 20	 mov	 eax, DWORD PTR __Ptr$[esp+16]
  00042	50		 push	 eax
  00043	03 fd		 add	 edi, ebp
  00045	57		 push	 edi
  00046	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2052 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2053 : 			: _N0 == _Count ? 0 : +1);

  0004e	85 c0		 test	 eax, eax
  00050	75 15		 jne	 SHORT $LN8@compare@3
  00052	3b f3		 cmp	 esi, ebx
  00054	73 0a		 jae	 SHORT $LN7@compare@3
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5d		 pop	 ebp
  00059	83 c8 ff	 or	 eax, -1
  0005c	5b		 pop	 ebx

; 2054 : 		}

  0005d	c2 10 00	 ret	 16			; 00000010H
$LN7@compare@3:

; 2052 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2053 : 			: _N0 == _Count ? 0 : +1);

  00060	33 c0		 xor	 eax, eax
  00062	3b f3		 cmp	 esi, ebx
  00064	0f 95 c0	 setne	 al
$LN8@compare@3:
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5d		 pop	 ebp
  0006a	5b		 pop	 ebx

; 2054 : 		}

  0006b	c2 10 00	 ret	 16			; 00000010H
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
; Function compile flags: /Ogtpy
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 2058 : 		return (_Mybase::_Alval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 2059 : 		}

  00004	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogtpy
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $LN5@Eos
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 2115 : 		}

  00014	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 2115 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogtpy
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2c		 je	 SHORT $LN2@Inside@2
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 10	 cmp	 esi, 16			; 00000010H
  00013	72 04		 jb	 SHORT $LN8@Inside@2
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside@2
$LN8@Inside@2:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside@2:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 17		 jb	 SHORT $LN2@Inside@2
  0001f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00022	72 02		 jb	 SHORT $LN12@Inside@2
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside@2:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	03 c8		 add	 ecx, eax
  0002b	3b cf		 cmp	 ecx, edi
  0002d	76 07		 jbe	 SHORT $LN2@Inside@2
  0002f	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00030	b0 01		 mov	 al, 1
  00032	5e		 pop	 esi

; 2138 : 		}

  00033	c2 04 00	 ret	 4
$LN2@Inside@2:
  00036	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00037	32 c0		 xor	 al, al
  00039	5e		 pop	 esi

; 2138 : 		}

  0003a	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif
; Function compile flags: /Ogtpy
;	COMDAT ?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__P2$ = 8						; size = 8
__P1$ = 16						; size = 8
?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif, COMDAT

; 2143 : 		return (_STR_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __P2$[esp]
  00004	85 c0		 test	 eax, eax
  00006	75 01		 jne	 SHORT $LN3@Pdif

; 2144 : 		}

  00008	c3		 ret	 0
$LN3@Pdif:

; 2143 : 		return (_STR_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);

  00009	8b 4c 24 04	 mov	 ecx, DWORD PTR __P2$[esp-4]
  0000d	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00010	74 13		 je	 SHORT $LN5@Pdif
  00012	85 c9		 test	 ecx, ecx
  00014	74 06		 je	 SHORT $LN8@Pdif
  00016	3b 4c 24 0c	 cmp	 ecx, DWORD PTR __P1$[esp-4]
  0001a	74 09		 je	 SHORT $LN5@Pdif
$LN8@Pdif:
  0001c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00021	8b 44 24 08	 mov	 eax, DWORD PTR __P2$[esp]
$LN5@Pdif:
  00025	2b 44 24 10	 sub	 eax, DWORD PTR __P1$[esp]

; 2144 : 		}

  00029	c3		 ret	 0
?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputc, COMDAT
; _this$ = ecx

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 22		 je	 SHORT $LN3@sputc
  00008	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0000b	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0000e	7e 1a		 jle	 SHORT $LN3@sputc
  00010	8b c2		 mov	 eax, edx
  00012	ff 08		 dec	 DWORD PTR [eax]
  00014	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0001c	89 11		 mov	 DWORD PTR [ecx], edx
  0001e	8a 4c 24 04	 mov	 cl, BYTE PTR __Ch$[esp-4]
  00022	88 08		 mov	 BYTE PTR [eax], cl
  00024	0f b6 c1	 movzx	 eax, cl

; 164  : 		}

  00027	c2 04 00	 ret	 4
$LN3@sputc:

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

  0002a	0f b6 54 24 04	 movzx	 edx, BYTE PTR __Ch$[esp-4]
  0002f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	89 54 24 04	 mov	 DWORD PTR __Ch$[esp-4], edx
  00038	ff e0		 jmp	 eax
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputc
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::get_allocator
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::get_allocator, COMDAT
; _this$ = ecx

; 2058 : 		return (_Mybase::_Alval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 2059 : 		}

  00004	c2 04 00	 ret	 4
?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::get_allocator
_TEXT	ENDS
PUBLIC	??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z PROC ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ENDP ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??1HostDevice@@QAE@XZ				; HostDevice::~HostDevice
PUBLIC	?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 1124 : 		if (_Myfirst != 0)

  00004	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]
  00007	85 f6		 test	 esi, esi
  00009	74 26		 je	 SHORT $LN112@Tidy@3
  0000b	57		 push	 edi

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

  0000c	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  0000f	3b f7		 cmp	 esi, edi
  00011	74 11		 je	 SHORT $LN10@Tidy@3
$LL12@Tidy@3:
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  0001a	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00020	3b f7		 cmp	 esi, edi
  00022	75 ef		 jne	 SHORT $LL12@Tidy@3
$LN10@Tidy@3:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  00024	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	83 c4 04	 add	 esp, 4
  00030	5f		 pop	 edi
$LN112@Tidy@3:
  00031	5e		 pop	 esi

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00032	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  00039	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  00040	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
  00047	5b		 pop	 ebx

; 1135 : 		}

  00048	c3		 ret	 0
?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::~_Container_base_aux_alloc_real<std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::~_Container_base_aux_alloc_real<std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::~_Container_base_aux_alloc_real<std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator!=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 216  : 		return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN6@operator@25
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN5@operator@25
$LN6@operator@25:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@25:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 217  : 		}

  00026	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator!=
_TEXT	ENDS
PUBLIC	??D?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEAAUFavoriteVolume@CipherShed@@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??D?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEAAUFavoriteVolume@CipherShed@@XZ
_TEXT	SEGMENT
??D?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEAAUFavoriteVolume@CipherShed@@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::operator*, COMDAT
; _this$ = ecx

; 393  : 			{	// return designated value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 394  : 			return ((reference)**(_Mybase_iter *)this);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN25@operator@26
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN19@operator@26
$LN25@operator@26:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN20@operator@26
$LN19@operator@26:
  00018	33 c0		 xor	 eax, eax
$LN20@operator@26:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN5@operator@26
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@26:
  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 c0 08	 add	 eax, 8
  0002d	5e		 pop	 esi

; 395  : 			}

  0002e	c3		 ret	 0
??D?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEAAUFavoriteVolume@CipherShed@@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::operator*
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator!=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 216  : 		return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN6@operator@27
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN5@operator@27
$LN6@operator@27:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@27:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 217  : 		}

  00026	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator!=
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV012@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??E?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??E?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV012@XZ PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx

; 235  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 236  : 
; 237  :  #if _HAS_ITERATOR_DEBUGGING
; 238  : 			if (this->_Mycont == 0
; 239  : 				|| _Ptr == 0
; 240  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 241  : 				{
; 242  : 				_DEBUG_ERROR("list iterator not incrementable");
; 243  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 244  : 				}
; 245  :  #else
; 246  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN23@operator@28
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 247  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN17@operator@28
$LN23@operator@28:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN18@operator@28
$LN17@operator@28:
  00018	33 c0		 xor	 eax, eax
$LN18@operator@28:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN3@operator@28
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@28:

; 248  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 249  : 
; 250  : 			_Ptr = _Nextnode(_Ptr);

  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	8b 02		 mov	 eax, DWORD PTR [edx]
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 251  : 			return (*this);

  0002f	8b c6		 mov	 eax, esi
  00031	5e		 pop	 esi

; 252  : 			}

  00032	c3		 ret	 0
??E?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV012@XZ ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator++
_TEXT	ENDS
PUBLIC	??9?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NABV012@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator!=
; Function compile flags: /Ogtpy
;	COMDAT ??9?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NABV012@@Z PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator!=, COMDAT
; _this$ = ecx

; 302  : 			{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 303  : 			return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN6@operator@29
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN5@operator@29
$LN6@operator@29:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@29:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 304  : 			}

  00026	c2 04 00	 ret	 4
??9?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NABV012@@Z ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator!=
_TEXT	ENDS
PUBLIC	??Y?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??Y?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 405  : 		(*(_Mybase *)this) += _Off;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Off$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??Y?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 406  : 		return (*this);

  0000d	8b c6		 mov	 eax, esi
  0000f	5e		 pop	 esi

; 407  : 		}

  00010	c2 04 00	 ret	 4
??Y?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
EXTRN	??0_Mutex@std@@QAE@XZ:PROC			; std::_Mutex::_Mutex
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ$0
__ehfuncinfo$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	ENDS
;	COMDAT ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
__Lock$154235 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 28   : 		{	// construct with no buffers

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx
  00028	89 5c 24 14	 mov	 DWORD PTR _this$[esp+36], ebx
  0002c	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0002f	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  00035	e8 00 00 00 00	 call	 ??0_Mutex@std@@QAE@XZ	; std::_Mutex::_Mutex
  0003a	6a 04		 push	 4
  0003c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00049	8b f0		 mov	 esi, eax
  0004b	83 c4 04	 add	 esp, 4
  0004e	85 f6		 test	 esi, esi
  00050	74 30		 je	 SHORT $LN3@basic_stre@2
  00052	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  00057	89 06		 mov	 DWORD PTR [esi], eax
  00059	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0005e	6a 00		 push	 0
  00060	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$154235[esp+40]
  00064	8b f8		 mov	 edi, eax
  00066	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0006b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0006e	83 f8 ff	 cmp	 eax, -1
  00071	73 04		 jae	 SHORT $LN8@basic_stre@2
  00073	40		 inc	 eax
  00074	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN8@basic_stre@2:
  00077	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$154235[esp+36]
  0007b	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00080	eb 02		 jmp	 SHORT $LN4@basic_stre@2
$LN3@basic_stre@2:
  00082	33 f6		 xor	 esi, esi
$LN4@basic_stre@2:

; 29   : 		_Init();

  00084	8b cb		 mov	 ecx, ebx
  00086	89 73 38	 mov	 DWORD PTR [ebx+56], esi
  00089	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init

; 30   : 		}

  0008e	8b c3		 mov	 eax, ebx
  00090	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	83 c4 14	 add	 esp, 20			; 00000014H
  000a2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
__ehhandler$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  00012	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00004	33 d2		 xor	 edx, edx
  00006	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  0000a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000d	72 0a		 jb	 SHORT $LN5@Eos@2
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 2115 : 		}

  00016	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos@2:
  00019	66 89 54 41 04	 mov	 WORD PTR [ecx+eax*2+4], dx

; 2115 : 		}

  0001e	c2 04 00	 ret	 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

  00000	b8 e1 e1 e1 01	 mov	 eax, 31580641		; 01e1e1e1H

; 732  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z ; std::allocator<HostDevice>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z PROC ; std::allocator<HostDevice>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z ENDP ; std::allocator<HostDevice>::allocate
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

  00000	b8 22 22 22 02	 mov	 eax, 35791394		; 02222222H

; 732  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEIXZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEPAUFavoriteVolume@CipherShed@@I@Z ; std::allocator<CipherShed::FavoriteVolume>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEPAUFavoriteVolume@CipherShed@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEPAUFavoriteVolume@CipherShed@@I@Z PROC ; std::allocator<CipherShed::FavoriteVolume>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@UFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@IPAU12@@Z ; std::_Allocate<CipherShed::FavoriteVolume>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEPAUFavoriteVolume@CipherShed@@I@Z ENDP ; std::allocator<CipherShed::FavoriteVolume>::allocate
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Y?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 375  : 		(*(_Mybase *)this) += _Off;

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	85 c0		 test	 eax, eax
  00008	75 0b		 jne	 SHORT $LN28@operator@30
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	85 c0		 test	 eax, eax
  00013	74 04		 je	 SHORT $LN18@operator@30
$LN28@operator@30:
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN19@operator@30
$LN18@operator@30:
  00019	33 c9		 xor	 ecx, ecx
$LN19@operator@30:
  0001b	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  0001f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00022	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  00028	03 d7		 add	 edx, edi
  0002a	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0002d	77 0f		 ja	 SHORT $LN6@operator@30
  0002f	85 c0		 test	 eax, eax
  00031	74 04		 je	 SHORT $LN24@operator@30
  00033	8b 00		 mov	 eax, DWORD PTR [eax]
  00035	eb 02		 jmp	 SHORT $LN25@operator@30
$LN24@operator@30:
  00037	33 c0		 xor	 eax, eax
$LN25@operator@30:
  00039	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  0003c	73 05		 jae	 SHORT $LN29@operator@30
$LN6@operator@30:
  0003e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN29@operator@30:
  00043	01 7e 04	 add	 DWORD PTR [esi+4], edi
  00046	5f		 pop	 edi

; 376  : 		return (*this);

  00047	8b c6		 mov	 eax, esi
  00049	5e		 pop	 esi

; 377  : 		}

  0004a	c2 04 00	 ret	 4
??Y?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+=
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@I@Z ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@I@Z PROC ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@I@Z ENDP ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@ABQAU342@@Z PROC ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN5@construct
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN5@construct:

; 156  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@ABQAU342@@Z ENDP ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@Z ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@Z PROC ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@Z ENDP ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 83   : 		__CLR_OR_THIS_CALL _String_const_iterator(pointer _Ptr, const _Container_base_secure *_Pstring)

  00000	53		 push	 ebx

; 84   : 			{	// construct with pointer _Ptr
; 85   : 			_SCL_SECURE_VALIDATE(

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __Pstring$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00013	85 f6		 test	 esi, esi
  00015	74 29		 je	 SHORT $LN4@String_con
  00017	85 db		 test	 ebx, ebx
  00019	74 25		 je	 SHORT $LN4@String_con
  0001b	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00021	83 fa 10	 cmp	 edx, 16			; 00000010H
  00024	72 04		 jb	 SHORT $LN14@String_con
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	eb 02		 jmp	 SHORT $LN15@String_con
$LN14@String_con:
  0002a	8b c8		 mov	 ecx, eax
$LN15@String_con:
  0002c	3b cb		 cmp	 ecx, ebx
  0002e	77 10		 ja	 SHORT $LN4@String_con
  00030	83 fa 10	 cmp	 edx, 16			; 00000010H
  00033	72 02		 jb	 SHORT $LN18@String_con
  00035	8b 00		 mov	 eax, DWORD PTR [eax]
$LN18@String_con:
  00037	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0003a	03 c8		 add	 ecx, eax
  0003c	3b d9		 cmp	 ebx, ecx
  0003e	76 05		 jbe	 SHORT $LN3@String_con
$LN4@String_con:

; 86   : 				_Pstring != NULL && 
; 87   : 				_Ptr != NULL && 
; 88   : 				((_Mystring *)_Pstring)->_Myptr() <= _Ptr && _Ptr <= (((_Mystring *)_Pstring)->_Myptr() + ((_Mystring *)_Pstring)->_Mysize));

  00040	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@String_con:

; 89   : 			this->_Mycont = _Pstring;

  00045	89 37		 mov	 DWORD PTR [edi], esi

; 90   : 			_Myptr = _Ptr;

  00047	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 91   : 			}

  0004a	8b c7		 mov	 eax, edi
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	c2 08 00	 ret	 8
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@UHostDevice@@HPBU1@ABU1@@std@@QAE@XZ ; std::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Ranit@UHostDevice@@HPBU1@ABU1@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Ranit@UHostDevice@@HPBU1@ABU1@@std@@QAE@XZ PROC	; std::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Ranit@UHostDevice@@HPBU1@ABU1@@std@@QAE@XZ ENDP	; std::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>
_TEXT	ENDS
PUBLIC	??0?$_Bidit@UFavoriteVolume@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ ; std::_Bidit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>::_Bidit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Bidit@UFavoriteVolume@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Bidit@UFavoriteVolume@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ PROC ; std::_Bidit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>::_Bidit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Bidit@UFavoriteVolume@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ ENDP ; std::_Bidit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>::_Bidit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::allocate
; Function compile flags: /Ogtpy
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@ABQAU342@@Z PROC ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN5@construct@2
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN5@construct@2:

; 156  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	?max_size@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?max_size@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT
; _this$ = ecx

; 625  : 		return (this->_Alval.max_size());

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 626  : 		}

  00005	c3		 ret	 0
?max_size@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Y?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+=, COMDAT
; _this$ = ecx

; 375  : 		(*(_Mybase *)this) += _Off;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Off$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??Y?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+=

; 376  : 		return (*this);

  0000d	8b c6		 mov	 eax, esi
  0000f	5e		 pop	 esi

; 377  : 		}

  00010	c2 04 00	 ret	 4
??Y?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+=
_TEXT	ENDS
PUBLIC	??0?$_Ranit@UFavoriteVolume@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ ; std::_Ranit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>::_Ranit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Ranit@UFavoriteVolume@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Ranit@UFavoriteVolume@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ PROC ; std::_Ranit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>::_Ranit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Ranit@UFavoriteVolume@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ ENDP ; std::_Ranit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>::_Ranit<CipherShed::FavoriteVolume,int,CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume const &>
_TEXT	ENDS
PUBLIC	??0?$_Bidit@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HPBV12@ABV12@@std@@QAE@XZ ; std::_Bidit<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::_Bidit<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Bidit@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HPBV12@ABV12@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Bidit@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HPBV12@ABV12@@std@@QAE@XZ PROC ; std::_Bidit<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::_Bidit<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Bidit@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HPBV12@ABV12@@std@@QAE@XZ ENDP ; std::_Bidit<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::_Bidit<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 419  : 		{

  00000	56		 push	 esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN3@Container_
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
$LN3@Container_:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Container_base_aux_alloc_real@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 617  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 590  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 590  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 617  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare, COMDAT
; _this$ = ecx

; 2025 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)

  00000	56		 push	 esi

; 2026 : 		_DEBUG_POINTER(_Ptr);
; 2027 : 		return (compare(0, _Mysize, _Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@compare@4:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@compare@4
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00023	56		 push	 esi
  00024	50		 push	 eax
  00025	6a 00		 push	 0
  00027	e8 00 00 00 00	 call	 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 2028 : 		}

  0002e	c2 04 00	 ret	 4
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
_TEXT	ENDS
PUBLIC	??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
PUBLIC	??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
EXTRN	??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@'
	DB	'std@@@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD FLAT:??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
	DD	FLAT:??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1063 : 		{	// construct from specified locale

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Refs$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 1064 : 		_Init(_Lobj);

  00010	e8 00 00 00 00	 call	 __Getcvt
  00015	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00018	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 1065 : 		}

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 08 00	 ret	 8
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
PUBLIC	?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ	; std::_Locinfo::_Getlconv
EXTRN	_localeconv:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
;	COMDAT ?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ
_TEXT	SEGMENT
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ PROC		; std::_Locinfo::_Getlconv, COMDAT
; _this$ = ecx

; 134  : 		return (localeconv());

  00000	e9 00 00 00 00	 jmp	 _localeconv
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ ENDP		; std::_Locinfo::_Getlconv
_TEXT	ENDS
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	?_Getfalse@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Getfalse
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?_Getfalse@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Getfalse@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Getfalse, COMDAT
; _this$ = ecx

; 172  : 		return ("false");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05LAPONLG@false?$AA@

; 173  : 		}

  00005	c3		 ret	 0
?_Getfalse@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Getfalse
_TEXT	ENDS
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	?_Gettrue@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Gettrue
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?_Gettrue@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Gettrue@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Gettrue, COMDAT
; _this$ = ecx

; 177  : 		return ("true");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04LOAJBDKD@true?$AA@

; 178  : 		}

  00005	c3		 ret	 0
?_Gettrue@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Gettrue
_TEXT	ENDS
PUBLIC	?precision@ios_base@std@@QBEHXZ			; std::ios_base::precision
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
;	COMDAT ?precision@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?precision@ios_base@std@@QBEHXZ PROC			; std::ios_base::precision, COMDAT
; _this$ = ecx

; 407  : 		return (_Prec);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 408  : 		}

  00003	c3		 ret	 0
?precision@ios_base@std@@QBEHXZ ENDP			; std::ios_base::precision
_TEXT	ENDS
PUBLIC	??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1042 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00006	c3		 ret	 0
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN8@scalar@15
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN8@scalar@15:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
; Function compile flags: /Ogtpy
;	COMDAT ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 1
__Flags$ = 20						; size = 4
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt, COMDAT

; 1289 : 		char *_Ptr = _Fmt;
; 1290 : 		*_Ptr++ = '%';

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Fmt$[esp-4]

; 1291 : 
; 1292 : 		if (_Flags & ios_base::showpos)

  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Flags$[esp-4]
  00008	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000e	f6 c2 20	 test	 dl, 32			; 00000020H
  00011	74 04		 je	 SHORT $LN3@Ffmt

; 1293 : 			*_Ptr++ = '+';

  00013	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00016	41		 inc	 ecx
$LN3@Ffmt:

; 1294 : 		if (_Flags & ios_base::showpoint)

  00017	f6 c2 10	 test	 dl, 16			; 00000010H
  0001a	74 04		 je	 SHORT $LN2@Ffmt

; 1295 : 			*_Ptr++ = '#';

  0001c	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  0001f	41		 inc	 ecx
$LN2@Ffmt:

; 1296 : 		*_Ptr++ = '.';

  00020	c6 01 2e	 mov	 BYTE PTR [ecx], 46	; 0000002eH
  00023	41		 inc	 ecx
  00024	53		 push	 ebx

; 1297 : 		*_Ptr++ = '*';	// for precision argument
; 1298 : 		if (_Spec != '\0')

  00025	8a 5c 24 10	 mov	 bl, BYTE PTR __Spec$[esp]
  00029	c6 01 2a	 mov	 BYTE PTR [ecx], 42	; 0000002aH
  0002c	41		 inc	 ecx
  0002d	84 db		 test	 bl, bl
  0002f	74 03		 je	 SHORT $LN1@Ffmt

; 1299 : 			*_Ptr++ = _Spec;	// 'L' qualifier for long double only

  00031	88 19		 mov	 BYTE PTR [ecx], bl
  00033	41		 inc	 ecx
$LN1@Ffmt:

; 1300 : 
; 1301 : 		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

  00034	81 e2 00 30 00
	00		 and	 edx, 12288		; 00003000H
  0003a	5b		 pop	 ebx

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0003b	81 fa 00 20 00
	00		 cmp	 edx, 8192		; 00002000H
  00041	75 09		 jne	 SHORT $LN8@Ffmt
  00043	b2 66		 mov	 dl, 102			; 00000066H
  00045	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  00047	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  0004b	c3		 ret	 0
$LN8@Ffmt:

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0004c	81 fa 00 30 00
	00		 cmp	 edx, 12288		; 00003000H
  00052	75 09		 jne	 SHORT $LN6@Ffmt
  00054	b2 61		 mov	 dl, 97			; 00000061H
  00056	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  00058	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  0005c	c3		 ret	 0
$LN6@Ffmt:

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0005d	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00063	0f 95 c2	 setne	 dl
  00066	8d 54 12 65	 lea	 edx, DWORD PTR [edx+edx+101]
  0006a	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  0006c	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  00070	c3		 ret	 0
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
_TEXT	ENDS
PUBLIC	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
; Function compile flags: /Ogtpy
;	COMDAT ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 4
__Flags$ = 20						; size = 4
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt, COMDAT

; 1432 : 		char *_Ptr = _Fmt;
; 1433 : 		*_Ptr++ = '%';

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Fmt$[esp-4]

; 1434 : 
; 1435 : 		if (_Flags & ios_base::showpos)

  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Flags$[esp-4]
  00008	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000e	f6 c2 20	 test	 dl, 32			; 00000020H
  00011	74 04		 je	 SHORT $LN4@Ifmt

; 1436 : 			*_Ptr++ = '+';

  00013	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00016	41		 inc	 ecx
$LN4@Ifmt:

; 1437 : 		if (_Flags & ios_base::showbase)

  00017	f6 c2 08	 test	 dl, 8
  0001a	74 04		 je	 SHORT $LN3@Ifmt

; 1438 : 			*_Ptr++ = '#';

  0001c	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  0001f	41		 inc	 ecx
$LN3@Ifmt:
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	57		 push	 edi

; 1439 : 		if (_Spec[0] != 'L')

  00023	8b 7c 24 18	 mov	 edi, DWORD PTR __Spec$[esp+8]
  00027	8a 1f		 mov	 bl, BYTE PTR [edi]
  00029	80 fb 4c	 cmp	 bl, 76			; 0000004cH
  0002c	74 04		 je	 SHORT $LN2@Ifmt

; 1440 : 			*_Ptr++ = _Spec[0];	// qualifier

  0002e	88 19		 mov	 BYTE PTR [ecx], bl

; 1441 : 		else

  00030	eb 0b		 jmp	 SHORT $LN11@Ifmt
$LN2@Ifmt:

; 1442 : 			{	/* change L to I64 */
; 1443 : 			*_Ptr++ = 'I';

  00032	c6 01 49	 mov	 BYTE PTR [ecx], 73	; 00000049H
  00035	41		 inc	 ecx

; 1444 : 			*_Ptr++ = '6';

  00036	c6 01 36	 mov	 BYTE PTR [ecx], 54	; 00000036H
  00039	41		 inc	 ecx

; 1445 : 			*_Ptr++ = '4';

  0003a	c6 01 34	 mov	 BYTE PTR [ecx], 52	; 00000034H
$LN11@Ifmt:

; 1446 : 			}
; 1447 : 
; 1448 : 		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  0003d	8b f2		 mov	 esi, edx
  0003f	81 e6 00 0e 00
	00		 and	 esi, 3584		; 00000e00H
  00045	41		 inc	 ecx

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  00046	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  0004c	75 0c		 jne	 SHORT $LN9@Ifmt
  0004e	5f		 pop	 edi
  0004f	b2 6f		 mov	 dl, 111			; 0000006fH
  00051	5e		 pop	 esi
  00052	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00054	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00058	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  00059	c3		 ret	 0
$LN9@Ifmt:

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  0005a	81 fe 00 08 00
	00		 cmp	 esi, 2048		; 00000800H
  00060	74 0d		 je	 SHORT $LN7@Ifmt
  00062	8a 57 01	 mov	 dl, BYTE PTR [edi+1]
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00069	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  0006d	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  0006e	c3		 ret	 0
$LN7@Ifmt:

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  0006f	02 d2		 add	 dl, dl
  00071	02 d2		 add	 dl, dl
  00073	02 d2		 add	 dl, dl
  00075	f6 d2		 not	 dl
  00077	80 e2 20	 and	 dl, 32			; 00000020H
  0007a	5f		 pop	 edi
  0007b	80 ca 58	 or	 dl, 88			; 00000058H
  0007e	5e		 pop	 esi
  0007f	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00081	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00085	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  00086	c3		 ret	 0
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
_TEXT	ENDS
PUBLIC	??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*, COMDAT
; _this$ = ecx

; 601  : 		{	// pretend to get designated element

  00000	8b c1		 mov	 eax, ecx

; 602  : 		return (*this);
; 603  : 		}

  00002	c3		 ret	 0
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
_TEXT	ENDS
PUBLIC	??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++, COMDAT
; _this$ = ecx

; 606  : 		{	// pretend to preincrement

  00000	8b c1		 mov	 eax, ecx

; 607  : 		return (*this);
; 608  : 		}

  00002	c3		 ret	 0
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
_TEXT	ENDS
PUBLIC	?decimal_point@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::decimal_point
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?decimal_point@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?decimal_point@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::decimal_point, COMDAT
; _this$ = ecx

; 70   : 		return (do_decimal_point());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00005	ff e2		 jmp	 edx
?decimal_point@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::decimal_point
_TEXT	ENDS
PUBLIC	?thousands_sep@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::thousands_sep
; Function compile flags: /Ogtpy
;	COMDAT ?thousands_sep@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?thousands_sep@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::thousands_sep, COMDAT
; _this$ = ecx

; 75   : 		return (do_thousands_sep());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00005	ff e2		 jmp	 edx
?thousands_sep@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::thousands_sep
_TEXT	ENDS
PUBLIC	?_Tidy@?$numpunct@D@std@@AAEXXZ			; std::numpunct<char>::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$numpunct@D@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$numpunct@D@std@@AAEXXZ PROC			; std::numpunct<char>::_Tidy, COMDAT
; _this$ = ecx

; 190  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 191  : 		_DELETE_CRT_VEC((void *)_Grouping);

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 192  : 		_DELETE_CRT_VEC((void *)_Falsename);

  0000c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 193  : 		_DELETE_CRT_VEC((void *)_Truename);

  00015	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	5e		 pop	 esi

; 194  : 		}

  00022	c3		 ret	 0
?_Tidy@?$numpunct@D@std@@AAEXXZ ENDP			; std::numpunct<char>::_Tidy
_TEXT	ENDS
PUBLIC	??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z	; std::_Maklocchr<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z PROC		; std::_Maklocchr<char>, COMDAT

; 603  : 	return ((_Elem)(unsigned char)_Byte);

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Byte$[esp-4]

; 604  : 	}

  00004	c3		 ret	 0
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z ENDP		; std::_Maklocchr<char>
_TEXT	ENDS
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Ogtpy
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 624  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	56		 push	 esi
  00001	57		 push	 edi

; 625  : 	size_t _Count = ::strlen(_Ptr) + 1;

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	8b c7		 mov	 eax, edi
  00008	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL8@Maklocstr:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL8@Maklocstr
  00017	2b c2		 sub	 eax, edx
  00019	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 626  : 	_Elem *_Ptrdest = _NEW_CRT _Elem[_Count];

  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00022	83 c4 04	 add	 esp, 4

; 627  : 
; 628  : #pragma warning(push)
; 629  : #pragma warning(disable: 6011)
; 630  : 	/* prefast noise */
; 631  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00025	8b c8		 mov	 ecx, eax
  00027	85 f6		 test	 esi, esi
  00029	76 10		 jbe	 SHORT $LN1@Maklocstr
  0002b	eb 03 8d 49 00	 npad	 5
$LL3@Maklocstr:

; 632  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  00030	8a 17		 mov	 dl, BYTE PTR [edi]
  00032	88 11		 mov	 BYTE PTR [ecx], dl
  00034	4e		 dec	 esi
  00035	41		 inc	 ecx
  00036	47		 inc	 edi
  00037	85 f6		 test	 esi, esi
  00039	77 f5		 ja	 SHORT $LL3@Maklocstr
$LN1@Maklocstr:
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 633  : 	return (_Ptrdest);
; 634  : #pragma warning(pop)
; 635  : 	}

  0003d	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
PUBLIC	??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 1
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=, COMDAT
; _this$ = ecx

; 592  : 		{	// store element and increment

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 593  : 		if (_Strbuf == 0
; 594  : 			|| traits_type::eq_int_type(_Traits::eof(),
; 595  : 				_Strbuf->sputc(_Right)))

  00003	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00006	85 c9		 test	 ecx, ecx
  00008	74 3b		 je	 SHORT $LN1@operator@31
  0000a	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0000d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00010	74 21		 je	 SHORT $LN7@operator@31
  00012	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00015	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00018	7e 19		 jle	 SHORT $LN7@operator@31
  0001a	8b c2		 mov	 eax, edx
  0001c	ff 08		 dec	 DWORD PTR [eax]
  0001e	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00026	89 11		 mov	 DWORD PTR [ecx], edx
  00028	8a 4c 24 08	 mov	 cl, BYTE PTR __Right$[esp]
  0002c	88 08		 mov	 BYTE PTR [eax], cl
  0002e	0f b6 c1	 movzx	 eax, cl
  00031	eb 0d		 jmp	 SHORT $LN8@operator@31
$LN7@operator@31:
  00033	0f b6 54 24 08	 movzx	 edx, BYTE PTR __Right$[esp]
  00038	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003d	52		 push	 edx
  0003e	ff d0		 call	 eax
$LN8@operator@31:
  00040	83 f8 ff	 cmp	 eax, -1
  00043	75 03		 jne	 SHORT $LN23@operator@31
$LN1@operator@31:

; 596  : 			_Failed = true;

  00045	c6 06 01	 mov	 BYTE PTR [esi], 1
$LN23@operator@31:

; 597  : 		return (*this);

  00048	8b c6		 mov	 eax, esi
  0004a	5e		 pop	 esi

; 598  : 		}

  0004b	c2 04 00	 ret	 4
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode, COMDAT
; _this$ = ecx

; 1172 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  00000	68 80 00 00 00	 push	 128			; 00000080H
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 1173 : 		int _Linkcnt = 0;
; 1174 : 
; 1175 : 		_TRY_BEGIN
; 1176 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Pnode);

  0000d	85 c0		 test	 eax, eax
  0000f	74 02		 je	 SHORT $LN26@Buynode
  00011	89 00		 mov	 DWORD PTR [eax], eax
$LN26@Buynode:

; 1177 : 		++_Linkcnt;
; 1178 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Pnode);

  00013	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00016	85 c9		 test	 ecx, ecx
  00018	74 02		 je	 SHORT $LN36@Buynode
  0001a	89 01		 mov	 DWORD PTR [ecx], eax
$LN36@Buynode:

; 1179 : 		_CATCH_ALL
; 1180 : 		if (0 < _Linkcnt)
; 1181 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1182 : 		this->_Alnod.deallocate(_Pnode, 1);
; 1183 : 		_RERAISE;
; 1184 : 		_CATCH_END
; 1185 : 		return (_Pnode);
; 1186 : 		}

  0001c	c3		 ret	 0
?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode
_TEXT	ENDS
PUBLIC	?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z	; std::numpunct<char>::_Init
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0
__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2
__ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
_TEXT	SEGMENT
$T154860 = -28						; size = 8
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Lobj$ = 8						; size = 4
__Isdef$ = 12						; size = 1
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z PROC	; std::numpunct<char>::_Init, COMDAT
; _this$ = ecx

; 135  : 		{	// initialize from _Lobj

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d e8	 mov	 DWORD PTR _this$[ebp], ebx

; 136  : 		const lconv *_Ptr = _Lobj._Getlconv();

  00030	e8 00 00 00 00	 call	 _localeconv
  00035	8b f0		 mov	 esi, eax

; 137  : 
; 138  : 		_Grouping = 0;

  00037	33 c0		 xor	 eax, eax
  00039	89 75 ec	 mov	 DWORD PTR __Ptr$[ebp], esi
  0003c	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 139  : 		_Falsename = 0;

  0003f	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 140  : 		_Truename = 0;

  00042	89 43 14	 mov	 DWORD PTR [ebx+20], eax

; 141  : 
; 142  : 		_TRY_BEGIN

  00045	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], eax

; 143  : 		_Grouping = _MAKLOCSTR(char, _Ptr->grouping, _Lobj._Getcvt());

  00048	e8 00 00 00 00	 call	 __Getcvt
  0004d	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00050	8b c7		 mov	 eax, edi
  00052	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL58@Init:
  00055	8a 08		 mov	 cl, BYTE PTR [eax]
  00057	40		 inc	 eax
  00058	84 c9		 test	 cl, cl
  0005a	75 f9		 jne	 SHORT $LL58@Init
  0005c	2b c2		 sub	 eax, edx
  0005e	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00067	83 c4 04	 add	 esp, 4
  0006a	8b c8		 mov	 ecx, eax
  0006c	8d 64 24 00	 npad	 4
$LL15@Init:
  00070	85 f6		 test	 esi, esi
  00072	76 09		 jbe	 SHORT $LN13@Init
  00074	8a 17		 mov	 dl, BYTE PTR [edi]
  00076	88 11		 mov	 BYTE PTR [ecx], dl
  00078	4e		 dec	 esi
  00079	41		 inc	 ecx
  0007a	47		 inc	 edi
  0007b	eb f3		 jmp	 SHORT $LL15@Init
$LN13@Init:
  0007d	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 144  : 		_Falsename = _MAKLOCSTR(_Elem, _Lobj._Getfalse(), _Lobj._Getcvt());

  00080	e8 00 00 00 00	 call	 __Getcvt
  00085	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_05LAPONLG@false?$AA@
  0008a	8b c7		 mov	 eax, edi
  0008c	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0008f	90		 npad	 1
$LL59@Init:
  00090	8a 08		 mov	 cl, BYTE PTR [eax]
  00092	40		 inc	 eax
  00093	84 c9		 test	 cl, cl
  00095	75 f9		 jne	 SHORT $LL59@Init
  00097	2b c2		 sub	 eax, edx
  00099	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0009c	56		 push	 esi
  0009d	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000a2	83 c4 04	 add	 esp, 4
  000a5	8b c8		 mov	 ecx, eax
$LL24@Init:
  000a7	85 f6		 test	 esi, esi
  000a9	76 09		 jbe	 SHORT $LN22@Init
  000ab	8a 17		 mov	 dl, BYTE PTR [edi]
  000ad	88 11		 mov	 BYTE PTR [ecx], dl
  000af	4e		 dec	 esi
  000b0	41		 inc	 ecx
  000b1	47		 inc	 edi
  000b2	eb f3		 jmp	 SHORT $LL24@Init
$LN22@Init:
  000b4	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 145  : 		_Truename = _MAKLOCSTR(_Elem, _Lobj._Gettrue(), _Lobj._Getcvt());

  000b7	e8 00 00 00 00	 call	 __Getcvt
  000bc	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_04LOAJBDKD@true?$AA@
  000c1	8b c7		 mov	 eax, edi
  000c3	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL60@Init:
  000c6	8a 08		 mov	 cl, BYTE PTR [eax]
  000c8	40		 inc	 eax
  000c9	84 c9		 test	 cl, cl
  000cb	75 f9		 jne	 SHORT $LL60@Init
  000cd	2b c2		 sub	 eax, edx
  000cf	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  000d2	56		 push	 esi
  000d3	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000d8	83 c4 04	 add	 esp, 4
  000db	8b c8		 mov	 ecx, eax
  000dd	8d 49 00	 npad	 3
$LL33@Init:
  000e0	85 f6		 test	 esi, esi
  000e2	76 09		 jbe	 SHORT $LN31@Init
  000e4	8a 17		 mov	 dl, BYTE PTR [edi]
  000e6	88 11		 mov	 BYTE PTR [ecx], dl
  000e8	4e		 dec	 esi
  000e9	41		 inc	 ecx
  000ea	47		 inc	 edi
  000eb	eb f3		 jmp	 SHORT $LL33@Init
$LN31@Init:
  000ed	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  000f0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 149  : 		_CATCH_END
; 150  : 
; 151  : 		_Dp = _MAKLOCCHR(_Elem, _Ptr->decimal_point[0], _Lobj._Getcvt());

  000f7	e8 00 00 00 00	 call	 __Getcvt
  000fc	8b 75 ec	 mov	 esi, DWORD PTR __Ptr$[ebp]
  000ff	8b 06		 mov	 eax, DWORD PTR [esi]
  00101	8a 08		 mov	 cl, BYTE PTR [eax]
  00103	88 4b 0c	 mov	 BYTE PTR [ebx+12], cl

; 152  : 		_Kseparator =
; 153  : 			_MAKLOCCHR(_Elem, _Ptr->thousands_sep[0], _Lobj._Getcvt());

  00106	e8 00 00 00 00	 call	 __Getcvt

; 154  : 
; 155  : 		if (_Isdef)

  0010b	80 7d 0c 00	 cmp	 BYTE PTR __Isdef$[ebp], 0
  0010f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00112	8a 02		 mov	 al, BYTE PTR [edx]
  00114	88 43 0d	 mov	 BYTE PTR [ebx+13], al
  00117	74 2d		 je	 SHORT $LN1@Init

; 156  : 			{	// apply defaults for required facets
; 157  : 			_Grouping = _MAKLOCSTR(char, "", _Lobj._Getcvt());

  00119	e8 00 00 00 00	 call	 __Getcvt
  0011e	8d 4d e4	 lea	 ecx, DWORD PTR $T154860[ebp]
  00121	51		 push	 ecx
  00122	6a 00		 push	 0
  00124	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00129	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  0012e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00131	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 158  : 			_Dp = _MAKLOCCHR(_Elem, '.', _Lobj._Getcvt());

  00134	e8 00 00 00 00	 call	 __Getcvt
  00139	c6 43 0c 2e	 mov	 BYTE PTR [ebx+12], 46	; 0000002eH

; 159  : 			_Kseparator = _MAKLOCCHR(_Elem, ',', _Lobj._Getcvt());

  0013d	e8 00 00 00 00	 call	 __Getcvt
  00142	c6 43 0d 2c	 mov	 BYTE PTR [ebx+13], 44	; 0000002cH
$LN1@Init:

; 160  : 			}
; 161  : 		}

  00146	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00149	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00150	59		 pop	 ecx
  00151	5f		 pop	 edi
  00152	5e		 pop	 esi
  00153	5b		 pop	 ebx
  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c2 08 00	 ret	 8
__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0:

; 146  : 		_CATCH_ALL
; 147  : 		_Tidy();

  0015a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0015d	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AAEXXZ ; std::numpunct<char>::_Tidy

; 148  : 		_RERAISE;

  00162	6a 00		 push	 0
  00164	6a 00		 push	 0
  00166	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN62@Init:
  0016b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ENDP	; std::numpunct<char>::_Init
PUBLIC	??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@@Z ; std::_Checked_base<HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@@Z PROC ; std::_Checked_base<HostDevice *>, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 1166 : 	}

  00006	c3		 ret	 0
??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@@Z ENDP ; std::_Checked_base<HostDevice *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T154989 = -8						; size = 1
$T154990 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
$T154991 = 16						; size = 1
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<HostDevice *,HostDevice *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

  00000	83 ec 08	 sub	 esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);
; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

  00003	8b 54 24 14	 mov	 edx, DWORD PTR $T154991[esp+4]
  00007	53		 push	 ebx
  00008	8b 5c 24 10	 mov	 ebx, DWORD PTR __First$[esp+8]
  0000c	56		 push	 esi
  0000d	8b 74 24 18	 mov	 esi, DWORD PTR __Last$[esp+12]
  00011	57		 push	 edi
  00012	8b 7c 24 20	 mov	 edi, DWORD PTR __Dest$[esp+16]
  00016	32 c0		 xor	 al, al
  00018	88 44 24 10	 mov	 BYTE PTR $T154990[esp+20], al
  0001c	8b 4c 24 10	 mov	 ecx, DWORD PTR $T154990[esp+20]
  00020	88 44 24 0c	 mov	 BYTE PTR $T154989[esp+20], al
  00024	8b 44 24 0c	 mov	 eax, DWORD PTR $T154989[esp+20]
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	52		 push	 edx
  0002b	57		 push	 edi
  0002c	56		 push	 esi
  0002d	53		 push	 ebx
  0002e	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
  00033	2b f3		 sub	 esi, ebx
  00035	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0003a	f7 ee		 imul	 esi
  0003c	c1 fa 06	 sar	 edx, 6
  0003f	8b c2		 mov	 eax, edx
  00041	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00044	03 c2		 add	 eax, edx
  00046	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	03 c7		 add	 eax, edi
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx

; 2486 : 	return _Result;
; 2487 : 	}

  00054	83 c4 08	 add	 esp, 8
  00057	c3		 ret	 0
??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@AAPAU12@@Z ; std::_Checked_base<CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Checked_base@PAUFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@AAPAU12@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@PAUFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@AAPAU12@@Z PROC ; std::_Checked_base<CipherShed::FavoriteVolume *>, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 1166 : 	}

  00006	c3		 ret	 0
??$_Checked_base@PAUFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@AAPAU12@@Z ENDP ; std::_Checked_base<CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV012@H@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??E?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV012@H@Z PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx

; 255  : 			{	// postincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 256  : 			_Myt_iter _Tmp = *this;

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00008	57		 push	 edi
  00009	8b 7c 24 0c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000d	89 07		 mov	 DWORD PTR [edi], eax
  0000f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 257  : 			++*this;

  00012	85 c0		 test	 eax, eax
  00014	75 0b		 jne	 SHORT $LN25@operator@32
  00016	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0001b	8b 06		 mov	 eax, DWORD PTR [esi]
  0001d	85 c0		 test	 eax, eax
  0001f	74 04		 je	 SHORT $LN19@operator@32
$LN25@operator@32:
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	eb 02		 jmp	 SHORT $LN20@operator@32
$LN19@operator@32:
  00025	33 c0		 xor	 eax, eax
$LN20@operator@32:
  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	3b 50 14	 cmp	 edx, DWORD PTR [eax+20]
  0002d	75 05		 jne	 SHORT $LN5@operator@32
  0002f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@32:
  00034	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]

; 258  : 			return (_Tmp);

  00039	8b c7		 mov	 eax, edi
  0003b	5f		 pop	 edi
  0003c	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0003f	5e		 pop	 esi

; 259  : 			}

  00040	c2 08 00	 ret	 8
??E?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV012@H@Z ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator++
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1139 : 		return _It._Checked_iterator_base();

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1140 : 	}

  00007	c3		 ret	 0
??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUFavoriteVolume@CipherShed@@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUFavoriteVolume@CipherShed@@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUFavoriteVolume@CipherShed@@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1139 : 		return _It._Checked_iterator_base();

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1140 : 	}

  00007	c3		 ret	 0
??$_Checked_base@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUFavoriteVolume@CipherShed@@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	_EndMainDlg
EXTRN	_ClearHistory:PROC
EXTRN	_MoveEditToCombo:PROC
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
;	COMDAT _EndMainDlg
_TEXT	SEGMENT
_dwResult$135714 = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_EndMainDlg PROC					; COMDAT

; 192  : {

  00000	51		 push	 ecx

; 193  : 	MoveEditToCombo (GetDlgItem (hwndDlg, IDC_VOLUME), bHistory);

  00001	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHistory
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR _hwndDlg$[esp+4]
  0000b	57		 push	 edi
  0000c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00012	50		 push	 eax
  00013	68 0a 04 00 00	 push	 1034			; 0000040aH
  00018	56		 push	 esi
  00019	ff d7		 call	 edi
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _MoveEditToCombo
  00021	83 c4 08	 add	 esp, 8

; 194  : 	
; 195  : 	if (UsePreferences) 

  00024	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?UsePreferences@@3HA, 0 ; UsePreferences
  0002b	74 09		 je	 SHORT $LN5@EndMainDlg

; 196  : 		SaveSettings (hwndDlg);

  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 _SaveSettings
  00033	83 c4 04	 add	 esp, 4
$LN5@EndMainDlg:

; 197  : 
; 198  : 	if (bWipeCacheOnExit)

  00036	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bWipeCacheOnExit@@3HA, 0 ; bWipeCacheOnExit
  0003d	74 21		 je	 SHORT $LN4@EndMainDlg

; 199  : 	{
; 200  : 		DWORD dwResult;
; 201  : 		DeviceIoControl (hDriver, TC_IOCTL_WIPE_PASSWORD_CACHE, NULL, 0, NULL, 0, &dwResult, NULL);

  0003f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDriver
  00045	6a 00		 push	 0
  00047	8d 4c 24 0c	 lea	 ecx, DWORD PTR _dwResult$135714[esp+16]
  0004b	51		 push	 ecx
  0004c	6a 00		 push	 0
  0004e	6a 00		 push	 0
  00050	6a 00		 push	 0
  00052	6a 00		 push	 0
  00054	68 30 20 22 00	 push	 2236464			; 00222030H
  00059	52		 push	 edx
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
$LN4@EndMainDlg:

; 202  : 	}
; 203  : 
; 204  : 	if (!bHistory)

  00060	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bHistory, 0
  00067	75 25		 jne	 SHORT $LN3@EndMainDlg

; 205  : 	{
; 206  : 		SetWindowTextA(GetDlgItem (hwndDlg, IDC_VOLUME), "");

  00069	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0006e	68 0a 04 00 00	 push	 1034			; 0000040aH
  00073	56		 push	 esi
  00074	ff d7		 call	 edi
  00076	50		 push	 eax
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 207  : 		ClearHistory (GetDlgItem (hwndDlg, IDC_VOLUME));

  0007d	68 0a 04 00 00	 push	 1034			; 0000040aH
  00082	56		 push	 esi
  00083	ff d7		 call	 edi
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _ClearHistory
  0008b	83 c4 04	 add	 esp, 4
$LN3@EndMainDlg:

; 208  : 	}
; 209  : 
; 210  : 	if (TaskBarIconMutex != NULL)

  0008e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _TaskBarIconMutex, 0
  00095	74 17		 je	 SHORT $LN2@EndMainDlg

; 211  : 	{
; 212  : 		MainWindowHidden = TRUE;
; 213  : 		ShowWindow (hwndDlg, SW_HIDE);

  00097	6a 00		 push	 0
  00099	56		 push	 esi
  0009a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _MainWindowHidden, 1
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi

; 220  : 	}
; 221  : }

  000ac	59		 pop	 ecx
  000ad	c3		 ret	 0
$LN2@EndMainDlg:

; 214  : 	}
; 215  : 	else
; 216  : 	{
; 217  : 		KillTimer (hwndDlg, TIMER_ID_MAIN);

  000ae	68 ff 00 00 00	 push	 255			; 000000ffH
  000b3	56		 push	 esi
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 218  : 		TaskBarIconRemove (hwndDlg);

  000ba	56		 push	 esi
  000bb	e8 00 00 00 00	 call	 _TaskBarIconRemove
  000c0	83 c4 04	 add	 esp, 4

; 219  : 		EndDialog (hwndDlg, 0);

  000c3	6a 00		 push	 0
  000c5	56		 push	 esi
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi

; 220  : 	}
; 221  : }

  000ce	59		 pop	 ecx
  000cf	c3		 ret	 0
_EndMainDlg ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@PDMGJHBJ@TrueCryptSystemFavorites?$AA@ ; `string'
EXTRN	__imp__DeregisterEventSource@4:PROC
EXTRN	__imp__ReportEventA@36:PROC
EXTRN	__imp__RegisterEventSourceA@8:PROC
;	COMDAT ??_C@_0BJ@PDMGJHBJ@TrueCryptSystemFavorites?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
CONST	SEGMENT
??_C@_0BJ@PDMGJHBJ@TrueCryptSystemFavorites?$AA@ DB 'TrueCryptSystemFavor'
	DB	'ites', 00H					; `string'
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
CONST	ENDS
;	COMDAT ?SystemFavoritesServiceLogError@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_strings$139289 = -8					; size = 8
?SystemFavoritesServiceLogError@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; SystemFavoritesServiceLogError, COMDAT
; _errorMessage$ = eax

; 6872 : { 

  00000	83 ec 08	 sub	 esp, 8
  00003	56		 push	 esi
  00004	57		 push	 edi

; 6873 : 	HANDLE eventSource = RegisterEventSource (NULL, TC_SYSTEM_FAVORITES_SERVICE_NAME);

  00005	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PDMGJHBJ@TrueCryptSystemFavorites?$AA@
  0000a	6a 00		 push	 0
  0000c	8b f8		 mov	 edi, eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterEventSourceA@8
  00014	8b f0		 mov	 esi, eax

; 6874 : 
; 6875 : 	if (eventSource)

  00016	85 f6		 test	 esi, esi
  00018	74 42		 je	 SHORT $LN1@SystemFavo@2

; 6876 : 	{
; 6877 : 		LPCTSTR strings[] = { TC_SYSTEM_FAVORITES_SERVICE_NAME, errorMessage.c_str() };

  0001a	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  0001e	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _strings$139289[esp+16], OFFSET ??_C@_0BJ@PDMGJHBJ@TrueCryptSystemFavorites?$AA@
  00026	72 09		 jb	 SHORT $LN8@SystemFavo@2
  00028	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002b	89 44 24 0c	 mov	 DWORD PTR _strings$139289[esp+20], eax
  0002f	eb 07		 jmp	 SHORT $LN9@SystemFavo@2
$LN8@SystemFavo@2:
  00031	83 c7 04	 add	 edi, 4
  00034	89 7c 24 0c	 mov	 DWORD PTR _strings$139289[esp+20], edi
$LN9@SystemFavo@2:

; 6878 : 		ReportEvent (eventSource, EVENTLOG_ERROR_TYPE, 0, 0xC0000001, NULL, array_capacity (strings), 0, strings, NULL);

  00038	6a 00		 push	 0
  0003a	8d 4c 24 0c	 lea	 ecx, DWORD PTR _strings$139289[esp+20]
  0003e	51		 push	 ecx
  0003f	6a 00		 push	 0
  00041	6a 02		 push	 2
  00043	6a 00		 push	 0
  00045	68 01 00 00 c0	 push	 -1073741823		; c0000001H
  0004a	6a 00		 push	 0
  0004c	6a 01		 push	 1
  0004e	56		 push	 esi
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReportEventA@36

; 6879 : 
; 6880 : 		DeregisterEventSource (eventSource);

  00055	56		 push	 esi
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeregisterEventSource@4
$LN1@SystemFavo@2:
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi

; 6881 : 	}
; 6882 : }

  0005e	83 c4 08	 add	 esp, 8
  00061	c3		 ret	 0
?SystemFavoritesServiceLogError@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; SystemFavoritesServiceLogError
_TEXT	ENDS
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 1765 : 		return (find(_Right._Myptr(), _Off, _Right.size()));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00008	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0000b	72 12		 jb	 SHORT $LN7@find@2
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	52		 push	 edx
  00011	8b 54 24 0c	 mov	 edx, DWORD PTR __Off$[esp]
  00015	52		 push	 edx
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find

; 1766 : 		}

  0001c	c2 08 00	 ret	 8

; 1765 : 		return (find(_Right._Myptr(), _Off, _Right.size()));

$LN7@find@2:
  0001f	52		 push	 edx
  00020	8b 54 24 0c	 mov	 edx, DWORD PTR __Off$[esp]
  00024	83 c0 04	 add	 eax, 4
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find

; 1766 : 		}

  0002e	c2 08 00	 ret	 8
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Ogtpy
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 1795 : 		{	// look for [_Ptr, <null>) beginnng at or after _Off

  00000	56		 push	 esi

; 1796 : 		_DEBUG_POINTER(_Ptr);
; 1797 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@find@3:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@find@3
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	8b 44 24 14	 mov	 eax, DWORD PTR __Off$[esp+8]
  0001e	50		 push	 eax
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 1798 : 		}

  00027	c2 08 00	 ret	 8
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Ogtpy
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 1802 : 		return (find((const _Elem *)&_Ch, _Off, 1));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Off$[esp-4]
  00004	6a 01		 push	 1
  00006	50		 push	 eax
  00007	8d 54 24 0c	 lea	 edx, DWORD PTR __Ch$[esp+4]
  0000b	52		 push	 edx
  0000c	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find

; 1803 : 		}

  00011	c2 08 00	 ret	 8
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
PUBLIC	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Function compile flags: /Ogtpy
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx

; 1837 : 		{	// look for [_Ptr, <null>) beginning before _Off

  00000	56		 push	 esi

; 1838 : 		_DEBUG_POINTER(_Ptr);
; 1839 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@rfind@2:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@rfind@2
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	8b 44 24 14	 mov	 eax, DWORD PTR __Off$[esp+8]
  0001e	50		 push	 eax
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 1840 : 		}

  00027	c2 08 00	 ret	 8
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
_TEXT	ENDS
PUBLIC	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Function compile flags: /Ogtpy
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
__Off$ = 12						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx

; 1844 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Off$[esp-4]
  00004	6a 01		 push	 1
  00006	50		 push	 eax
  00007	8d 54 24 0c	 lea	 edx, DWORD PTR __Ch$[esp+4]
  0000b	52		 push	 edx
  0000c	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind

; 1845 : 		}

  00011	c2 08 00	 ret	 8
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtpy
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 2004 : 		return (compare(0, _Mysize, _Right._Myptr(), _Right.size()));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00008	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0000b	72 13		 jb	 SHORT $LN7@compare@5
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	52		 push	 edx
  00011	50		 push	 eax
  00012	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00015	50		 push	 eax
  00016	6a 00		 push	 0
  00018	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare

; 2005 : 		}

  0001d	c2 04 00	 ret	 4

; 2004 : 		return (compare(0, _Mysize, _Right._Myptr(), _Right.size()));

$LN7@compare@5:
  00020	52		 push	 edx
  00021	83 c0 04	 add	 eax, 4
  00024	50		 push	 eax
  00025	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00028	50		 push	 eax
  00029	6a 00		 push	 0
  0002b	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare

; 2005 : 		}

  00030	c2 04 00	 ret	 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Ptr_size$ = 12					; size = 4
__Count$ = 16						; size = 4
?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Xsgetn_s, COMDAT
; _this$ = ecx

; 332  : 		{	// get _Count characters from stream

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

  00002	8b 6c 24 14	 mov	 ebp, DWORD PTR __Count$[esp+4]
  00006	56		 push	 esi
  00007	33 f6		 xor	 esi, esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	89 74 24 0c	 mov	 DWORD PTR __Copied$[esp+16], esi
  00010	85 ed		 test	 ebp, ebp
  00012	7e 71		 jle	 SHORT $LN31@Xsgetn_s
  00014	53		 push	 ebx
  00015	8b 5c 24 18	 mov	 ebx, DWORD PTR __Ptr$[esp+16]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL7@Xsgetn_s:

; 337  : 			if (0 < (_Stream_size = _Gnavail()))

  00020	8b cf		 mov	 ecx, edi
  00022	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  00027	85 c0		 test	 eax, eax
  00029	7e 35		 jle	 SHORT $LN5@Xsgetn_s

; 338  : 				{	// copy from read buffer
; 339  : 				_Size = _Stream_size;
; 340  : 				if (_Count < _Size)

  0002b	3b e8		 cmp	 ebp, eax
  0002d	8b f0		 mov	 esi, eax
  0002f	7d 02		 jge	 SHORT $LN4@Xsgetn_s

; 341  : 					_Size = _Count;

  00031	8b f5		 mov	 esi, ebp
$LN4@Xsgetn_s:

; 342  : 				_Traits_helper::copy_s<_Traits>(_Ptr, _Ptr_size, gptr(), _Size);

  00033	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	8b 54 24 1c	 mov	 edx, DWORD PTR __Ptr_size$[esp+16]
  0003c	56		 push	 esi
  0003d	51		 push	 ecx
  0003e	52		 push	 edx
  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 _memcpy_s

; 343  : 				_Ptr += _Size;
; 344  : 				_Copied += _Size;
; 345  : 				_Count -= _Size;
; 346  : 				gbump((int)_Size);

  00045	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00048	29 30		 sub	 DWORD PTR [eax], esi
  0004a	01 74 24 20	 add	 DWORD PTR __Copied$[esp+36], esi
  0004e	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00051	03 de		 add	 ebx, esi
  00053	2b ee		 sub	 ebp, esi
  00055	83 c4 10	 add	 esp, 16			; 00000010H
  00058	01 30		 add	 DWORD PTR [eax], esi
  0005a	8b 74 24 10	 mov	 esi, DWORD PTR __Copied$[esp+20]
  0005e	eb 17		 jmp	 SHORT $LN1@Xsgetn_s
$LN5@Xsgetn_s:

; 347  : 				}
; 348  : 			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  00060	8b 07		 mov	 eax, DWORD PTR [edi]
  00062	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00065	8b cf		 mov	 ecx, edi
  00067	ff d2		 call	 edx
  00069	83 f8 ff	 cmp	 eax, -1
  0006c	74 0d		 je	 SHORT $LN30@Xsgetn_s

; 349  : 				break;	// end of file, quit
; 350  : 			else
; 351  : 				{	// get a single character
; 352  : 				*_Ptr++ = _Traits::to_char_type(_Meta);
; 353  : 				++_Copied;

  0006e	46		 inc	 esi
  0006f	88 03		 mov	 BYTE PTR [ebx], al
  00071	43		 inc	 ebx
  00072	89 74 24 10	 mov	 DWORD PTR __Copied$[esp+20], esi

; 354  : 				--_Count;

  00076	4d		 dec	 ebp
$LN1@Xsgetn_s:

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

  00077	85 ed		 test	 ebp, ebp
  00079	7f a5		 jg	 SHORT $LL7@Xsgetn_s
$LN30@Xsgetn_s:
  0007b	5b		 pop	 ebx
  0007c	5f		 pop	 edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

  0007d	8b c6		 mov	 eax, esi
  0007f	5e		 pop	 esi
  00080	5d		 pop	 ebp

; 358  : 		}

  00081	59		 pop	 ecx
  00082	c2 0c 00	 ret	 12			; 0000000cH
$LN31@Xsgetn_s:
  00085	5f		 pop	 edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

  00086	8b c6		 mov	 eax, esi
  00088	5e		 pop	 esi
  00089	5d		 pop	 ebp

; 358  : 		}

  0008a	59		 pop	 ecx
  0008b	c2 0c 00	 ret	 12			; 0000000cH
?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Xsgetn_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn, COMDAT
; _this$ = ecx

; 362  : 		{	// put _Count characters to stream

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

  00002	8b 6c 24 10	 mov	 ebp, DWORD PTR __Count$[esp+4]
  00006	56		 push	 esi
  00007	33 f6		 xor	 esi, esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	89 74 24 0c	 mov	 DWORD PTR __Copied$[esp+16], esi
  00010	85 ed		 test	 ebp, ebp
  00012	7e 6f		 jle	 SHORT $LN31@xsputn
  00014	53		 push	 ebx
  00015	8b 5c 24 18	 mov	 ebx, DWORD PTR __Ptr$[esp+16]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL7@xsputn:

; 366  : 			if (0 < (_Stream_size = _Pnavail()))

  00020	8b cf		 mov	 ecx, edi
  00022	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
  00027	85 c0		 test	 eax, eax
  00029	7e 31		 jle	 SHORT $LN5@xsputn

; 367  : 				{	// copy to write buffer
; 368  : 				_Size = _Stream_size;
; 369  : 				if (_Count < _Size)

  0002b	3b e8		 cmp	 ebp, eax
  0002d	8b f0		 mov	 esi, eax
  0002f	7d 02		 jge	 SHORT $LN4@xsputn

; 370  : 					_Size = _Count;

  00031	8b f5		 mov	 esi, ebp
$LN4@xsputn:

; 371  : 				_Traits_helper::copy_s<_Traits>(pptr(), _Stream_size, _Ptr, _Size);

  00033	56		 push	 esi
  00034	53		 push	 ebx
  00035	50		 push	 eax
  00036	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 _memcpy_s

; 372  : 				_Ptr += _Size;
; 373  : 				_Copied += _Size;
; 374  : 				_Count -= _Size;
; 375  : 				pbump((int)_Size);

  00041	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00044	29 30		 sub	 DWORD PTR [eax], esi
  00046	01 74 24 20	 add	 DWORD PTR __Copied$[esp+36], esi
  0004a	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  0004d	03 de		 add	 ebx, esi
  0004f	2b ee		 sub	 ebp, esi
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	01 30		 add	 DWORD PTR [eax], esi

; 376  : 				}
; 377  : 			else if (_Traits::eq_int_type(_Traits::eof(),

  00056	8b 74 24 10	 mov	 esi, DWORD PTR __Copied$[esp+20]
  0005a	eb 19		 jmp	 SHORT $LN1@xsputn
$LN5@xsputn:

; 378  : 				overflow(_Traits::to_int_type(*_Ptr))))

  0005c	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  0005f	8b 17		 mov	 edx, DWORD PTR [edi]
  00061	50		 push	 eax
  00062	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00065	8b cf		 mov	 ecx, edi
  00067	ff d0		 call	 eax
  00069	83 f8 ff	 cmp	 eax, -1
  0006c	74 0b		 je	 SHORT $LN30@xsputn

; 379  : 				break;	// single character put failed, quit
; 380  : 			else
; 381  : 				{	// count character successfully put
; 382  : 				++_Ptr;
; 383  : 				++_Copied;

  0006e	46		 inc	 esi
  0006f	43		 inc	 ebx
  00070	89 74 24 10	 mov	 DWORD PTR __Copied$[esp+20], esi

; 384  : 				--_Count;

  00074	4d		 dec	 ebp
$LN1@xsputn:

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

  00075	85 ed		 test	 ebp, ebp
  00077	7f a7		 jg	 SHORT $LL7@xsputn
$LN30@xsputn:
  00079	5b		 pop	 ebx
  0007a	5f		 pop	 edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

  0007b	8b c6		 mov	 eax, esi
  0007d	5e		 pop	 esi
  0007e	5d		 pop	 ebp

; 388  : 		}

  0007f	59		 pop	 ecx
  00080	c2 08 00	 ret	 8
$LN31@xsputn:
  00083	5f		 pop	 edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

  00084	8b c6		 mov	 eax, esi
  00086	5e		 pop	 esi
  00087	5d		 pop	 ebp

; 388  : 		}

  00088	59		 pop	 ecx
  00089	c2 08 00	 ret	 8
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
_TEXT	ENDS
PUBLIC	??C?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPAUFavoriteVolume@CipherShed@@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::operator->
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??C?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPAUFavoriteVolume@CipherShed@@XZ
_TEXT	SEGMENT
??C?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPAUFavoriteVolume@CipherShed@@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::operator->, COMDAT
; _this$ = ecx

; 398  : 			{	// return pointer to class object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 399  : 			return (&**this);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN27@operator@33
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN21@operator@33
$LN27@operator@33:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN22@operator@33
$LN21@operator@33:
  00018	33 c0		 xor	 eax, eax
$LN22@operator@33:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN7@operator@33
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@operator@33:
  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 c0 08	 add	 eax, 8
  0002d	5e		 pop	 esi

; 400  : 			}

  0002e	c3		 ret	 0
??C?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPAUFavoriteVolume@CipherShed@@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::operator->
_TEXT	ENDS
PUBLIC	??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	FLAT:??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$alloc'
	DB	'ator@D@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	054H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 495  : 		{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	89 4c 24 08	 mov	 DWORD PTR _this$[esp+24], ecx
  00026	8b 41 ac	 mov	 eax, DWORD PTR [ecx-84]
  00029	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002c	c7 44 0a ac 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-84], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 496  : 		}

  00034	8d 71 b8	 lea	 esi, DWORD PTR [ecx-72]
  00037	8b ce		 mov	 ecx, esi
  00039	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00047	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00053	8b 46 f4	 mov	 eax, DWORD PTR [esi-12]
  00056	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00059	c7 44 31 f4 00
	00 00 00	 mov	 DWORD PTR [ecx+esi-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  00061	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00064	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00067	c7 44 30 fc 00
	00 00 00	 mov	 DWORD PTR [eax+esi-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0006f	8b 4e f4	 mov	 ecx, DWORD PTR [esi-12]
  00072	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00075	c7 44 32 f4 00
	00 00 00	 mov	 DWORD PTR [edx+esi-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0007d	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5e		 pop	 esi
  0008a	83 c4 10	 add	 esp, 16			; 00000010H
  0008d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 e9 48	 sub	 ecx, 72			; 00000048H
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__ehhandler$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00012	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Newsize$142808 = -4					; size = 4
__Meta$ = 8						; size = 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT
; _this$ = ecx

; 87   : 		{	// put an element to stream

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 88   : 		if (_Mystate & _Append
; 89   : 			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)

  00004	f6 46 40 08	 test	 BYTE PTR [esi+64], 8
  00008	57		 push	 edi
  00009	74 20		 je	 SHORT $LN102@overflow
  0000b	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  0000e	8b 17		 mov	 edx, DWORD PTR [edi]
  00010	85 d2		 test	 edx, edx
  00012	74 17		 je	 SHORT $LN102@overflow
  00014	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  00017	3b d1		 cmp	 edx, ecx
  00019	73 10		 jae	 SHORT $LN102@overflow

; 90   : 			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  0001b	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	03 c2		 add	 eax, edx
  00022	89 0f		 mov	 DWORD PTR [edi], ecx
  00024	2b c1		 sub	 eax, ecx
  00026	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00029	89 01		 mov	 DWORD PTR [ecx], eax
$LN102@overflow:

; 91   : 
; 92   : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0002b	8b 44 24 10	 mov	 eax, DWORD PTR __Meta$[esp+8]
  0002f	83 f8 ff	 cmp	 eax, -1
  00032	75 08		 jne	 SHORT $LN17@overflow
  00034	5f		 pop	 edi

; 93   : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  00035	33 c0		 xor	 eax, eax
  00037	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  00038	59		 pop	 ecx
  00039	c2 04 00	 ret	 4
$LN17@overflow:

; 94   : 		else if (_Mysb::pptr() != 0
; 95   : 			&& _Mysb::pptr() < _Mysb::epptr())

  0003c	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  0003f	8b 3a		 mov	 edi, DWORD PTR [edx]
  00041	53		 push	 ebx
  00042	85 ff		 test	 edi, edi
  00044	74 22		 je	 SHORT $LN15@overflow
  00046	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00049	8b 19		 mov	 ebx, DWORD PTR [ecx]
  0004b	8b d7		 mov	 edx, edi
  0004d	03 da		 add	 ebx, edx
  0004f	3b d3		 cmp	 edx, ebx
  00051	73 15		 jae	 SHORT $LN15@overflow

; 96   : 			{	// room in buffer, store it
; 97   : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  00053	ff 09		 dec	 DWORD PTR [ecx]
  00055	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  00058	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005a	5b		 pop	 ebx
  0005b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0005e	89 16		 mov	 DWORD PTR [esi], edx
  00060	5f		 pop	 edi
  00061	88 01		 mov	 BYTE PTR [ecx], al
  00063	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  00064	59		 pop	 ecx
  00065	c2 04 00	 ret	 4
$LN15@overflow:

; 98   : 			return (_Meta);
; 99   : 			}
; 100  : 		else if (_Mystate & _Constant)

  00068	f6 46 40 02	 test	 BYTE PTR [esi+64], 2
  0006c	74 0a		 je	 SHORT $LN13@overflow
  0006e	5b		 pop	 ebx
  0006f	5f		 pop	 edi

; 101  : 			return (_Traits::eof());	// array nonmutable, fail

  00070	83 c8 ff	 or	 eax, -1
  00073	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  00074	59		 pop	 ecx
  00075	c2 04 00	 ret	 4
$LN13@overflow:
  00078	55		 push	 ebp

; 102  : 		else
; 103  : 			{	// grow buffer and store element
; 104  : 			size_t _Oldsize = _Mysb::pptr() == 0
; 105  : 				? 0 : _Mysb::epptr() - _Mysb::eback();

  00079	85 ff		 test	 edi, edi
  0007b	75 04		 jne	 SHORT $LN21@overflow
  0007d	33 ed		 xor	 ebp, ebp
  0007f	eb 0c		 jmp	 SHORT $LN22@overflow
$LN21@overflow:
  00081	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00084	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00087	8b 28		 mov	 ebp, DWORD PTR [eax]
  00089	2b 29		 sub	 ebp, DWORD PTR [ecx]
  0008b	03 ef		 add	 ebp, edi
$LN22@overflow:

; 106  : 			size_t _Newsize = _Oldsize;
; 107  : 			size_t _Inc = _Newsize / 2 < _MINSIZE
; 108  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent

  0008d	8b c5		 mov	 eax, ebp
  0008f	d1 e8		 shr	 eax, 1
  00091	83 f8 20	 cmp	 eax, 32			; 00000020H
  00094	73 07		 jae	 SHORT $LN23@overflow
  00096	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0009b	eb 04		 jmp	 SHORT $LL11@overflow
$LN23@overflow:

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  0009d	85 c0		 test	 eax, eax
  0009f	76 11		 jbe	 SHORT $LN106@overflow
$LL11@overflow:
  000a1	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  000a6	2b d0		 sub	 edx, eax
  000a8	3b d5		 cmp	 edx, ebp
  000aa	73 04		 jae	 SHORT $LN10@overflow

; 111  : 				_Inc /= 2;	// increment causes overflow, halve it

  000ac	d1 e8		 shr	 eax, 1

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  000ae	75 f1		 jne	 SHORT $LL11@overflow
$LN10@overflow:

; 112  : 			if (_Inc == 0)

  000b0	85 c0		 test	 eax, eax
$LN106@overflow:
  000b2	75 0b		 jne	 SHORT $LN9@overflow
  000b4	5d		 pop	 ebp
  000b5	5b		 pop	 ebx
  000b6	5f		 pop	 edi

; 113  : 				return (_Traits::eof());	// buffer can't grow, fail

  000b7	83 c8 ff	 or	 eax, -1
  000ba	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  000bb	59		 pop	 ecx
  000bc	c2 04 00	 ret	 4
$LN9@overflow:

; 114  : 
; 115  : 			_Newsize += _Inc;

  000bf	03 c5		 add	 eax, ebp

; 116  : 
; 117  : 			_Elem *_Newptr = _Al.allocate(_Newsize);

  000c1	6a 00		 push	 0
  000c3	50		 push	 eax
  000c4	89 44 24 18	 mov	 DWORD PTR __Newsize$142808[esp+28], eax
  000c8	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  000cd	8b f8		 mov	 edi, eax

; 118  : 			_Elem *_Oldptr = _Mysb::eback();

  000cf	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000d2	8b 18		 mov	 ebx, DWORD PTR [eax]
  000d4	83 c4 08	 add	 esp, 8

; 119  : 
; 120  : 			if (0 < _Oldsize)

  000d7	85 ed		 test	 ebp, ebp
  000d9	76 12		 jbe	 SHORT $LN107@overflow

; 121  : 				_Traits_helper::copy_s<_Traits>(_Newptr, _Newsize, _Oldptr, _Oldsize);

  000db	8b 4c 24 10	 mov	 ecx, DWORD PTR __Newsize$142808[esp+20]
  000df	55		 push	 ebp
  000e0	53		 push	 ebx
  000e1	51		 push	 ecx
  000e2	57		 push	 edi
  000e3	e8 00 00 00 00	 call	 ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
  000e8	83 c4 10	 add	 esp, 16			; 00000010H

; 122  : 
; 123  : 			if (_Oldsize == 0)

  000eb	85 ed		 test	 ebp, ebp
$LN107@overflow:
  000ed	75 3e		 jne	 SHORT $LN7@overflow

; 124  : 				{	// first growth, set up pointers
; 125  : 				_Seekhigh = _Newptr;
; 126  : 				_Mysb::setp(_Newptr, _Newptr + _Newsize);

  000ef	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000f2	89 7e 3c	 mov	 DWORD PTR [esi+60], edi
  000f5	89 3a		 mov	 DWORD PTR [edx], edi
  000f7	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  000fa	8b 54 24 10	 mov	 edx, DWORD PTR __Newsize$142808[esp+20]
  000fe	89 38		 mov	 DWORD PTR [eax], edi
  00100	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00103	89 11		 mov	 DWORD PTR [ecx], edx

; 127  : 				if (_Mystate & _Noread)
; 128  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  00105	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00108	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  0010c	89 38		 mov	 DWORD PTR [eax], edi
  0010e	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00111	74 0d		 je	 SHORT $LN6@overflow
  00113	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00119	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0011c	89 3a		 mov	 DWORD PTR [edx], edi

; 129  : 				else

  0011e	eb 73		 jmp	 SHORT $LN89@overflow
$LN6@overflow:

; 130  : 					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);

  00120	89 39		 mov	 DWORD PTR [ecx], edi
  00122	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  00125	c7 02 01 00 00
	00		 mov	 DWORD PTR [edx], 1

; 131  : 				}
; 132  : 			else

  0012b	eb 66		 jmp	 SHORT $LN89@overflow
$LN7@overflow:

; 133  : 				{	// not first growth, adjust pointers
; 134  : 				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);
; 135  : 				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
; 136  : 					_Newptr + (_Mysb::pptr() - _Oldptr),
; 137  : 					_Newptr + _Newsize);

  0012d	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00130	8b c7		 mov	 eax, edi
  00132	2b c3		 sub	 eax, ebx
  00134	01 46 3c	 add	 DWORD PTR [esi+60], eax
  00137	8b 01		 mov	 eax, DWORD PTR [ecx]
  00139	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0013c	8b d7		 mov	 edx, edi
  0013e	2b d3		 sub	 edx, ebx
  00140	01 11		 add	 DWORD PTR [ecx], edx
  00142	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00145	2b c3		 sub	 eax, ebx
  00147	03 c7		 add	 eax, edi
  00149	8b d7		 mov	 edx, edi
  0014b	2b d0		 sub	 edx, eax
  0014d	03 54 24 10	 add	 edx, DWORD PTR __Newsize$142808[esp+20]
  00151	89 01		 mov	 DWORD PTR [ecx], eax
  00153	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00156	89 10		 mov	 DWORD PTR [eax], edx

; 138  : 				if (_Mystate & _Noread)

  00158	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  0015c	74 15		 je	 SHORT $LN3@overflow

; 139  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  0015e	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00161	89 39		 mov	 DWORD PTR [ecx], edi
  00163	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00166	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0016c	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0016f	89 38		 mov	 DWORD PTR [eax], edi

; 140  : 				else

  00171	eb 20		 jmp	 SHORT $LN89@overflow
$LN3@overflow:

; 141  : 					_Mysb::setg(_Newptr,
; 142  : 						_Newptr + (_Mysb::gptr() - _Oldptr),
; 143  : 						_Mysb::pptr() + 1);

  00173	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00176	8b 02		 mov	 eax, DWORD PTR [edx]
  00178	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0017b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0017d	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00180	2b c3		 sub	 eax, ebx
  00182	03 c7		 add	 eax, edi
  00184	89 3a		 mov	 DWORD PTR [edx], edi
  00186	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00189	2b c8		 sub	 ecx, eax
  0018b	89 02		 mov	 DWORD PTR [edx], eax
  0018d	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00190	41		 inc	 ecx
  00191	89 08		 mov	 DWORD PTR [eax], ecx
$LN89@overflow:

; 144  : 				}
; 145  : 
; 146  : 			if (_Mystate & _Allocated)

  00193	f6 46 40 01	 test	 BYTE PTR [esi+64], 1
  00197	74 09		 je	 SHORT $LN91@overflow

; 147  : 				_Al.deallocate(_Oldptr, _Oldsize);

  00199	53		 push	 ebx
  0019a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0019f	83 c4 04	 add	 esp, 4
$LN91@overflow:

; 148  : 			_Mystate |= _Allocated;
; 149  : 
; 150  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  001a2	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  001a5	83 4e 40 01	 or	 DWORD PTR [esi+64], 1
  001a9	ff 08		 dec	 DWORD PTR [eax]
  001ab	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  001ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001b0	8b 44 24 18	 mov	 eax, DWORD PTR __Meta$[esp+16]
  001b4	5d		 pop	 ebp
  001b5	5b		 pop	 ebx
  001b6	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  001b9	89 16		 mov	 DWORD PTR [esi], edx
  001bb	5f		 pop	 edi
  001bc	88 01		 mov	 BYTE PTR [ecx], al
  001be	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  001bf	59		 pop	 ecx
  001c0	c2 04 00	 ret	 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
_TEXT	ENDS
PUBLIC	??H?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??H?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+, COMDAT
; _this$ = ecx

; 410  : 		{	// return this + integer

  00000	83 ec 08	 sub	 esp, 8

; 411  : 		_Myt _Tmp = *this;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 412  : 		return (_Tmp += _Off);

  00008	8b 54 24 10	 mov	 edx, DWORD PTR __Off$[esp+4]
  0000c	89 4c 24 04	 mov	 DWORD PTR __Tmp$[esp+12], ecx
  00010	52		 push	 edx
  00011	8d 4c 24 04	 lea	 ecx, DWORD PTR __Tmp$[esp+12]
  00015	89 44 24 04	 mov	 DWORD PTR __Tmp$[esp+12], eax
  00019	e8 00 00 00 00	 call	 ??Y?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=
  0001e	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  00022	8b 0c 24	 mov	 ecx, DWORD PTR __Tmp$[esp+8]
  00025	8b 54 24 04	 mov	 edx, DWORD PTR __Tmp$[esp+12]
  00029	89 08		 mov	 DWORD PTR [eax], ecx
  0002b	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 413  : 		}

  0002e	83 c4 08	 add	 esp, 8
  00031	c2 08 00	 ret	 8
??H?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::~_Vector_val<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::~_Vector_val<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::~_Vector_val<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??1?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	??1?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??1?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv130 = 8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 55		 jbe	 SHORT $LN30@erase

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00030	72 09		 jb	 SHORT $LN8@erase
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv130[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase
$LN8@erase:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv130[esp+12], ebp
$LN9@erase:
  0003f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00042	72 05		 jb	 SHORT $LN12@erase
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	eb 02		 jmp	 SHORT $LN13@erase
$LN12@erase:
  00049	8b d5		 mov	 edx, ebp
$LN13@erase:
  0004b	2b c7		 sub	 eax, edi
  0004d	50		 push	 eax
  0004e	8b 44 24 18	 mov	 eax, DWORD PTR tv130[esp+16]
  00052	03 c3		 add	 eax, ebx
  00054	03 c7		 add	 eax, edi
  00056	50		 push	 eax
  00057	2b cb		 sub	 ecx, ebx
  00059	51		 push	 ecx
  0005a	03 d3		 add	 edx, ebx
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00062	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00065	2b c7		 sub	 eax, edi
  00067	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0006a	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0006e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00071	72 03		 jb	 SHORT $LN26@erase
  00073	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN26@erase:
  00076	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  0007a	5d		 pop	 ebp
$LN30@erase:
  0007b	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  0007c	8b c6		 mov	 eax, esi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx

; 1275 : 		}

  00080	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 27		 je	 SHORT $LN15@Tidy@4

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00013	72 21		 jb	 SHORT $LN15@Tidy@4

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 0d		 jbe	 SHORT $LN13@Tidy@4

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	57		 push	 edi
  00020	53		 push	 ebx
  00021	6a 10		 push	 16			; 00000010H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _memcpy_s
  00029	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@Tidy@4:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00032	83 c4 04	 add	 esp, 4
  00035	5b		 pop	 ebx
$LN15@Tidy@4:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00036	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00039	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00040	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 2160 : 		}

  00047	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 2a		 je	 SHORT $LN17@Tidy@5

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00013	72 24		 jb	 SHORT $LN17@Tidy@5

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 10		 jbe	 SHORT $LN15@Tidy@5

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  00022	51		 push	 ecx
  00023	53		 push	 ebx
  00024	6a 10		 push	 16			; 00000010H
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _memcpy_s
  0002c	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@Tidy@5:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00035	83 c4 04	 add	 esp, 4
  00038	5b		 pop	 ebx
$LN17@Tidy@5:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00039	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0003c	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00043	33 d2		 xor	 edx, edx
  00045	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 2160 : 		}

  0004c	c2 08 00	 ret	 8
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??H?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

  00000	56		 push	 esi

; 381  : 		_Myt _Tmp = *this;

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]
  00003	57		 push	 edi
  00004	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]

; 382  : 		return (_Tmp += _Off);

  00007	85 f6		 test	 esi, esi
  00009	75 20		 jne	 SHORT $LN30@operator@34
  0000b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00010	33 c0		 xor	 eax, eax
$LN21@operator@34:
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR __Off$[esp+4]
  00016	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  0001c	03 f9		 add	 edi, ecx
  0001e	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
  00021	77 13		 ja	 SHORT $LN8@operator@34
  00023	85 f6		 test	 esi, esi
  00025	74 08		 je	 SHORT $LN26@operator@34
  00027	8b 06		 mov	 eax, DWORD PTR [esi]
  00029	eb 06		 jmp	 SHORT $LN27@operator@34
$LN30@operator@34:
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	eb e3		 jmp	 SHORT $LN21@operator@34
$LN26@operator@34:
  0002f	33 c0		 xor	 eax, eax
$LN27@operator@34:
  00031	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  00034	73 05		 jae	 SHORT $LN7@operator@34
$LN8@operator@34:
  00036	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@operator@34:
  0003b	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  0003f	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00042	5f		 pop	 edi
  00043	89 30		 mov	 DWORD PTR [eax], esi
  00045	5e		 pop	 esi

; 383  : 		}

  00046	c2 08 00	 ret	 8
??H?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Buynode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Buynode, COMDAT
; _this$ = ecx

; 1172 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  00000	6a 24		 push	 36			; 00000024H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 1173 : 		int _Linkcnt = 0;
; 1174 : 
; 1175 : 		_TRY_BEGIN
; 1176 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Pnode);

  0000a	85 c0		 test	 eax, eax
  0000c	74 02		 je	 SHORT $LN26@Buynode@2
  0000e	89 00		 mov	 DWORD PTR [eax], eax
$LN26@Buynode@2:

; 1177 : 		++_Linkcnt;
; 1178 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Pnode);

  00010	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00013	85 c9		 test	 ecx, ecx
  00015	74 02		 je	 SHORT $LN36@Buynode@2
  00017	89 01		 mov	 DWORD PTR [ecx], eax
$LN36@Buynode@2:

; 1179 : 		_CATCH_ALL
; 1180 : 		if (0 < _Linkcnt)
; 1181 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1182 : 		this->_Alnod.deallocate(_Pnode, 1);
; 1183 : 		_RERAISE;
; 1184 : 		_CATCH_END
; 1185 : 		return (_Pnode);
; 1186 : 		}

  00019	c3		 ret	 0
?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Buynode
_TEXT	ENDS
PUBLIC	??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBV_Container_base_secure@1@@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBV_Container_base_secure@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBV_Container_base_secure@1@@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 341  : 			{	// construct with pointer _Ptr

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Pstring$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 08	 mov	 ecx, DWORD PTR __Ptr$[esp]
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >

; 342  : 			}

  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	c2 08 00	 ret	 8
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBV_Container_base_secure@1@@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 0f	 or	 esi, 15			; 0000000fH

; 2085 : 		if (max_size() < _Newres)

  00038	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN6@Copy

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  0003f	eb 22		 jmp	 SHORT $LN4@Copy
$LN6@Copy:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00041	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e6		 mul	 esi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b d1		 cmp	 edx, ecx
  00053	73 0e		 jae	 SHORT $LN4@Copy
  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005a	2b c1		 sub	 eax, ecx
  0005c	3b d8		 cmp	 ebx, eax
  0005e	77 03		 ja	 SHORT $LN4@Copy

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00060	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00063	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00066	6a 00		 push	 0
  00068	51		 push	 ecx
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00070	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00075	83 c4 08	 add	 esp, 8
  00078	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0007b	eb 28		 jmp	 SHORT $LN16@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007d	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00080	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00083	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00086	40		 inc	 eax
  00087	6a 00		 push	 0
  00089	50		 push	 eax
  0008a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0008e	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00093	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00096	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  00099	b8 00 00 00 00	 mov	 eax, $LN106@Copy
  0009e	c3		 ret	 0
$LN106@Copy:
  0009f	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a2	8b 75 e8	 mov	 esi, DWORD PTR __Newres$[ebp]
$LN16@Copy:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000a5	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000a8	85 db		 test	 ebx, ebx
  000aa	76 20		 jbe	 SHORT $LN71@Copy

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000ac	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000b0	72 05		 jb	 SHORT $LN63@Copy
  000b2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b5	eb 03		 jmp	 SHORT $LN64@Copy
$LN63@Copy:
  000b7	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN64@Copy:
  000ba	53		 push	 ebx
  000bb	50		 push	 eax
  000bc	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000bf	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _memcpy_s
  000c9	83 c4 10	 add	 esp, 16			; 00000010H
$LN71@Copy:

; 2106 : 		_Tidy(true);

  000cc	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000d0	72 0c		 jb	 SHORT $LN87@Copy
  000d2	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000db	83 c4 04	 add	 esp, 4
$LN87@Copy:

; 2107 : 		_Bx._Ptr = _Ptr;

  000de	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000e1	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000e4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e7	89 08		 mov	 DWORD PTR [eax], ecx

; 2108 : 		_Myres = _Newres;

  000e9	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000ec	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  000ef	83 fe 10	 cmp	 esi, 16			; 00000010H
  000f2	72 02		 jb	 SHORT $LN101@Copy
  000f4	8b c1		 mov	 eax, ecx
$LN101@Copy:
  000f6	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 2110 : 		}

  000fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00104	59		 pop	 ecx
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010e	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00111	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00115	72 0c		 jb	 SHORT $LN51@Copy
  00117	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00120	83 c4 04	 add	 esp, 4
$LN51@Copy:

; 2100 : 			_RERAISE;

  00123	6a 00		 push	 0
  00125	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0012c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00133	6a 00		 push	 0
  00135	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN109@Copy:
  0013e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv133 = 8						; size = 4
__Off$ = 8						; size = 4
tv139 = 12						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase@2

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase@2:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase@2

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase@2:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 69		 jbe	 SHORT $LN32@erase@2

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 08	 cmp	 ecx, 8
  00030	72 09		 jb	 SHORT $LN8@erase@2
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv133[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase@2
$LN8@erase@2:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv133[esp+12], ebp
$LN9@erase@2:
  0003f	83 f9 08	 cmp	 ecx, 8
  00042	72 09		 jb	 SHORT $LN12@erase@2
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	89 54 24 18	 mov	 DWORD PTR tv139[esp+12], edx
  0004b	eb 04		 jmp	 SHORT $LN13@erase@2
$LN12@erase@2:
  0004d	89 6c 24 18	 mov	 DWORD PTR tv139[esp+12], ebp
$LN13@erase@2:
  00051	8b 54 24 14	 mov	 edx, DWORD PTR tv133[esp+12]
  00055	2b c7		 sub	 eax, edi
  00057	03 c0		 add	 eax, eax
  00059	50		 push	 eax
  0005a	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0005d	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00060	2b cb		 sub	 ecx, ebx
  00062	50		 push	 eax
  00063	03 c9		 add	 ecx, ecx
  00065	51		 push	 ecx
  00066	8b 4c 24 24	 mov	 ecx, DWORD PTR tv139[esp+24]
  0006a	8d 14 59	 lea	 edx, DWORD PTR [ecx+ebx*2]
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	2b c7		 sub	 eax, edi
  00078	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0007b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0007f	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00082	72 03		 jb	 SHORT $LN28@erase@2
  00084	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN28@erase@2:
  00087	33 c9		 xor	 ecx, ecx
  00089	66 89 4c 45 00	 mov	 WORD PTR [ebp+eax*2], cx
  0008e	5d		 pop	 ebp
$LN32@erase@2:
  0008f	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 1275 : 		}

  00094	c2 08 00	 ret	 8
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::_Container_base_aux_alloc_real<std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::_Container_base_aux_alloc_real<std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 419  : 		{

  00000	56		 push	 esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN3@Container_@2
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
$LN3@Container_@2:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::_Container_base_aux_alloc_real<std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >::_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >::_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 419  : 		{

  00000	56		 push	 esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN3@Container_@3
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
$LN3@Container_@3:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Container_base_aux_alloc_real@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >::_Container_base_aux_alloc_real<std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

  00000	53		 push	 ebx

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN4@Vector_con
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN4@Vector_con
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN3@Vector_con
$LN4@Vector_con:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Vector_con:

; 79   : 		this->_Set_container(_Pvector);

  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi

; 80   : 		_Myptr = _Ptr;

  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 81   : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??0?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PBV12@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::_Const_iterator<1>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PBV12@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::_Const_iterator<1>, COMDAT
; _this$ = ecx

; 176  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi

; 177  : 			_SCL_SECURE_TRAITS_VALIDATE(_Plist != NULL);

  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN3@Const_iter
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Const_iter:

; 178  : 			this->_Set_container(_Plist);

  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 179  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PBV12@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::_Const_iterator<1>
_TEXT	ENDS
PUBLIC	?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__State$ = 16						; size = 4
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init, COMDAT
; _this$ = ecx

; 274  : 		_Seekhigh = 0;
; 275  : 		_Mystate = _State;

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __State$[esp-4]
  00004	53		 push	 ebx

; 276  : 
; 277  : 		if (_Count != 0
; 278  : 			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))

  00005	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Count$[esp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00013	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00016	85 db		 test	 ebx, ebx
  00018	0f 84 81 00 00
	00		 je	 $LN4@Init@2
  0001e	83 e0 06	 and	 eax, 6
  00021	3c 06		 cmp	 al, 6
  00023	74 7a		 je	 SHORT $LN4@Init@2
  00025	57		 push	 edi

; 279  : 			{	// finite buffer that can be read or written, set it up
; 280  : 			_Elem *_Pnew = _Al.allocate(_Count);

  00026	6a 00		 push	 0
  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0002e	8b f8		 mov	 edi, eax

; 281  : 			_Traits_helper::copy_s<_Traits>(_Pnew, _Count, _Ptr, _Count);

  00030	8b 44 24 18	 mov	 eax, DWORD PTR __Ptr$[esp+16]
  00034	53		 push	 ebx
  00035	50		 push	 eax
  00036	53		 push	 ebx
  00037	57		 push	 edi
  00038	e8 00 00 00 00	 call	 _memcpy_s
  0003d	83 c4 18	 add	 esp, 24			; 00000018H

; 282  : 			_Seekhigh = _Pnew + _Count;
; 283  : 
; 284  : 			if (!(_Mystate & _Noread))

  00040	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  00044	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  00047	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  0004a	75 0f		 jne	 SHORT $LN19@Init@2

; 285  : 				_Mysb::setg(_Pnew, _Pnew,
; 286  : 					_Pnew + _Count);	// setup read buffer

  0004c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0004f	89 39		 mov	 DWORD PTR [ecx], edi
  00051	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00054	89 3a		 mov	 DWORD PTR [edx], edi
  00056	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00059	89 19		 mov	 DWORD PTR [ecx], ebx
$LN19@Init@2:

; 287  : 			if (!(_Mystate & _Constant))

  0005b	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  0005e	f6 c1 02	 test	 cl, 2
  00061	75 37		 jne	 SHORT $LN25@Init@2

; 288  : 				{	// setup write buffer, and maybe read buffer
; 289  : 				_Mysb::setp(_Pnew,
; 290  : 					(_Mystate & _Atend) ? _Pnew + _Count : _Pnew,
; 291  : 					_Pnew + _Count);

  00063	f6 c1 10	 test	 cl, 16			; 00000010H
  00066	75 02		 jne	 SHORT $LN8@Init@2
  00068	8b c7		 mov	 eax, edi
$LN8@Init@2:
  0006a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0006d	89 3a		 mov	 DWORD PTR [edx], edi
  0006f	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00072	89 01		 mov	 DWORD PTR [ecx], eax
  00074	8b d7		 mov	 edx, edi
  00076	2b d0		 sub	 edx, eax
  00078	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0007b	03 d3		 add	 edx, ebx
  0007d	89 10		 mov	 DWORD PTR [eax], edx

; 292  : 				if (_Mysb::gptr() == 0)

  0007f	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00082	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00085	75 13		 jne	 SHORT $LN25@Init@2

; 293  : 					_Mysb::setg(_Pnew, 0, _Pnew);

  00087	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0008a	89 3a		 mov	 DWORD PTR [edx], edi
  0008c	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0008f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00095	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00098	89 39		 mov	 DWORD PTR [ecx], edi
$LN25@Init@2:

; 294  : 				}
; 295  : 			_Mystate |= _Allocated;

  0009a	83 4e 40 01	 or	 DWORD PTR [esi+64], 1
  0009e	5f		 pop	 edi
$LN4@Init@2:
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx

; 296  : 			}
; 297  : 		}

  000a1	c2 0c 00	 ret	 12			; 0000000cH
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
_TEXT	ENDS
PUBLIC	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put, COMDAT

; 1510 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00004	55		 push	 ebp
  00005	8b 6c 24 1c	 mov	 ebp, DWORD PTR __Count$[esp]
  00009	85 ed		 test	 ebp, ebp
  0000b	76 52		 jbe	 SHORT $LN1@Put
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7c 24 20	 mov	 edi, DWORD PTR __Ptr$[esp+8]
$LL3@Put:

; 1511 : 			*_Dest = *_Ptr;

  00013	85 c9		 test	 ecx, ecx
  00015	74 3b		 je	 SHORT $LN10@Put
  00017	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0001a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001d	8a 17		 mov	 dl, BYTE PTR [edi]
  0001f	8d 71 24	 lea	 esi, DWORD PTR [ecx+36]
  00022	74 1a		 je	 SHORT $LN16@Put
  00024	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	7e 12		 jle	 SHORT $LN16@Put
  0002c	ff 08		 dec	 DWORD PTR [eax]
  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  00035	89 30		 mov	 DWORD PTR [eax], esi
  00037	88 11		 mov	 BYTE PTR [ecx], dl
  00039	0f b6 c2	 movzx	 eax, dl
  0003c	eb 0b		 jmp	 SHORT $LN17@Put
$LN16@Put:
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	0f b6 d2	 movzx	 edx, dl
  00046	52		 push	 edx
  00047	ff d0		 call	 eax
$LN17@Put:
  00049	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Dest$[esp+12]
  0004d	83 f8 ff	 cmp	 eax, -1
  00050	75 05		 jne	 SHORT $LN2@Put
$LN10@Put:
  00052	c6 44 24 18 01	 mov	 BYTE PTR __Dest$[esp+8], 1
$LN2@Put:

; 1510 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00057	4d		 dec	 ebp
  00058	47		 inc	 edi
  00059	85 ed		 test	 ebp, ebp
  0005b	77 b6		 ja	 SHORT $LL3@Put
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
$LN1@Put:

; 1512 : 		return (_Dest);

  0005f	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  00063	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  00067	89 10		 mov	 DWORD PTR [eax], edx
  00069	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0006c	5d		 pop	 ebp

; 1513 : 		}

  0006d	c3		 ret	 0
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
_TEXT	ENDS
PUBLIC	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
; Function compile flags: /Ogtpy
;	COMDAT ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ch$ = 24						; size = 1
__Count$ = 28						; size = 4
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep, COMDAT

; 1545 : 		for (; 0 < _Count; --_Count, ++_Dest)

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00004	56		 push	 esi
  00005	8b 74 24 1c	 mov	 esi, DWORD PTR __Count$[esp]
  00009	85 f6		 test	 esi, esi
  0000b	76 4d		 jbe	 SHORT $LN1@Rep
  0000d	53		 push	 ebx
  0000e	8a 5c 24 1c	 mov	 bl, BYTE PTR __Ch$[esp+4]
$LL6@Rep:

; 1546 : 			*_Dest = _Ch;

  00012	85 c9		 test	 ecx, ecx
  00014	74 39		 je	 SHORT $LN10@Rep
  00016	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00019	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001c	8d 51 24	 lea	 edx, DWORD PTR [ecx+36]
  0001f	74 1a		 je	 SHORT $LN16@Rep
  00021	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00024	83 38 00	 cmp	 DWORD PTR [eax], 0
  00027	7e 12		 jle	 SHORT $LN16@Rep
  00029	ff 08		 dec	 DWORD PTR [eax]
  0002b	8b 02		 mov	 eax, DWORD PTR [edx]
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00032	89 10		 mov	 DWORD PTR [eax], edx
  00034	88 19		 mov	 BYTE PTR [ecx], bl
  00036	0f b6 c3	 movzx	 eax, bl
  00039	eb 0b		 jmp	 SHORT $LN17@Rep
$LN16@Rep:
  0003b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00040	0f b6 d3	 movzx	 edx, bl
  00043	52		 push	 edx
  00044	ff d0		 call	 eax
$LN17@Rep:
  00046	8b 4c 24 18	 mov	 ecx, DWORD PTR __Dest$[esp+8]
  0004a	83 f8 ff	 cmp	 eax, -1
  0004d	75 05		 jne	 SHORT $LN2@Rep
$LN10@Rep:
  0004f	c6 44 24 14 01	 mov	 BYTE PTR __Dest$[esp+4], 1
$LN2@Rep:

; 1545 : 		for (; 0 < _Count; --_Count, ++_Dest)

  00054	83 ee 01	 sub	 esi, 1
  00057	75 b9		 jne	 SHORT $LL6@Rep
  00059	5b		 pop	 ebx
$LN1@Rep:

; 1547 : 		return (_Dest);

  0005a	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  0005e	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  00062	89 10		 mov	 DWORD PTR [eax], edx
  00064	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00067	5e		 pop	 esi

; 1548 : 		}

  00068	c3		 ret	 0
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??H?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

  00000	83 ec 08	 sub	 esp, 8

; 381  : 		_Myt _Tmp = *this;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 382  : 		return (_Tmp += _Off);

  00008	8b 54 24 10	 mov	 edx, DWORD PTR __Off$[esp+4]
  0000c	89 4c 24 04	 mov	 DWORD PTR __Tmp$[esp+12], ecx
  00010	52		 push	 edx
  00011	8d 4c 24 04	 lea	 ecx, DWORD PTR __Tmp$[esp+12]
  00015	89 44 24 04	 mov	 DWORD PTR __Tmp$[esp+12], eax
  00019	e8 00 00 00 00	 call	 ??Y?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+=
  0001e	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  00022	8b 0c 24	 mov	 ecx, DWORD PTR __Tmp$[esp+8]
  00025	8b 54 24 04	 mov	 edx, DWORD PTR __Tmp$[esp+12]
  00029	89 08		 mov	 DWORD PTR [eax], ecx
  0002b	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 383  : 		}

  0002e	83 c4 08	 add	 esp, 8
  00031	c2 08 00	 ret	 8
??H?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 07	 or	 esi, 7

; 2085 : 		if (max_size() < _Newres)

  00038	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH
  0003e	76 04		 jbe	 SHORT $LN6@Copy@2

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  00040	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  00042	eb 22		 jmp	 SHORT $LN4@Copy@2
$LN6@Copy@2:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00044	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00047	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0004c	f7 e6		 mul	 esi
  0004e	8b cb		 mov	 ecx, ebx
  00050	d1 e9		 shr	 ecx, 1
  00052	d1 ea		 shr	 edx, 1
  00054	3b d1		 cmp	 edx, ecx
  00056	73 0e		 jae	 SHORT $LN4@Copy@2
  00058	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0005d	2b c1		 sub	 eax, ecx
  0005f	3b d8		 cmp	 ebx, eax
  00061	77 03		 ja	 SHORT $LN4@Copy@2

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00063	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy@2:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00066	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00069	6a 00		 push	 0
  0006b	51		 push	 ecx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00078	83 c4 08	 add	 esp, 8
  0007b	8b d8		 mov	 ebx, eax
  0007d	eb 2b		 jmp	 SHORT $LN16@Copy@2
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007f	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00082	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00085	89 45 08	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00088	40		 inc	 eax
  00089	6a 00		 push	 0
  0008b	50		 push	 eax
  0008c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00090	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00095	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax
  00098	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  0009b	b8 00 00 00 00	 mov	 eax, $LN112@Copy@2
  000a0	c3		 ret	 0
$LN112@Copy@2:
  000a1	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a4	8b 75 08	 mov	 esi, DWORD PTR __Newres$[ebp]
  000a7	8b 5d e8	 mov	 ebx, DWORD PTR __Ptr$[ebp]
$LN16@Copy@2:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000ad	85 c9		 test	 ecx, ecx
  000af	76 24		 jbe	 SHORT $LN75@Copy@2

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000b1	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000b5	72 05		 jb	 SHORT $LN65@Copy@2
  000b7	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000ba	eb 03		 jmp	 SHORT $LN66@Copy@2
$LN65@Copy@2:
  000bc	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN66@Copy@2:
  000bf	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	8d 44 36 02	 lea	 eax, DWORD PTR [esi+esi+2]
  000c8	50		 push	 eax
  000c9	53		 push	 ebx
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000d2	83 c4 10	 add	 esp, 16			; 00000010H
$LN75@Copy@2:

; 2106 : 		_Tidy(true);

  000d5	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000d9	72 0f		 jb	 SHORT $LN93@Copy@2
  000db	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000de	51		 push	 ecx
  000df	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000e7	83 c4 04	 add	 esp, 4
$LN93@Copy@2:
  000ea	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000ed	33 d2		 xor	 edx, edx

; 2107 : 		_Bx._Ptr = _Ptr;

  000ef	89 18		 mov	 DWORD PTR [eax], ebx

; 2108 : 		_Myres = _Newres;

  000f1	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000f4	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  000f7	83 fe 08	 cmp	 esi, 8
  000fa	72 02		 jb	 SHORT $LN107@Copy@2
  000fc	8b c3		 mov	 eax, ebx
$LN107@Copy@2:
  000fe	33 d2		 xor	 edx, edx
  00100	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 2110 : 		}

  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010e	59		 pop	 ecx
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  00118	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0011b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0011f	72 0c		 jb	 SHORT $LN53@Copy@2
  00121	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012a	83 c4 04	 add	 esp, 4
$LN53@Copy@2:
  0012d	33 c9		 xor	 ecx, ecx

; 2100 : 			_RERAISE;

  0012f	51		 push	 ecx
  00130	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00137	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0013e	51		 push	 ecx
  0013f	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00143	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN115@Copy@2:
  00148	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
PUBLIC	??0?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAUFavoriteVolume@CipherShed@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAUFavoriteVolume@CipherShed@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAUFavoriteVolume@CipherShed@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

  00000	53		 push	 ebx

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN4@Vector_con@2
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN4@Vector_con@2
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN3@Vector_con@2
$LN4@Vector_con@2:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Vector_con@2:

; 79   : 		this->_Set_container(_Pvector);

  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi

; 80   : 		_Myptr = _Ptr;

  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 81   : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAUFavoriteVolume@CipherShed@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??0?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@List_nod
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 48   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 47   : 		{	// construct allocator from _Al

$LN8@List_nod:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 48   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??0?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PBV12@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::_Const_iterator<1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PBV12@@Z PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::_Const_iterator<1>, COMDAT
; _this$ = ecx

; 176  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi

; 177  : 			_SCL_SECURE_TRAITS_VALIDATE(_Plist != NULL);

  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN3@Const_iter@2
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Const_iter@2:

; 178  : 			this->_Set_container(_Plist);

  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 179  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PBV12@@Z ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::_Const_iterator<1>
_TEXT	ENDS
PUBLIC	?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc, COMDAT

; 1518 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00004	55		 push	 ebp
  00005	8b 6c 24 1c	 mov	 ebp, DWORD PTR __Count$[esp]
  00009	85 ed		 test	 ebp, ebp
  0000b	76 52		 jbe	 SHORT $LN1@Putc
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7c 24 20	 mov	 edi, DWORD PTR __Ptr$[esp+8]
$LL3@Putc:

; 1519 : 			*_Dest = _MAKLOCCHR(_Elem, *_Ptr, _Cvt);

  00013	85 c9		 test	 ecx, ecx
  00015	74 3b		 je	 SHORT $LN12@Putc
  00017	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0001a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001d	8a 17		 mov	 dl, BYTE PTR [edi]
  0001f	8d 71 24	 lea	 esi, DWORD PTR [ecx+36]
  00022	74 1a		 je	 SHORT $LN18@Putc
  00024	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	7e 12		 jle	 SHORT $LN18@Putc
  0002c	ff 08		 dec	 DWORD PTR [eax]
  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  00035	89 30		 mov	 DWORD PTR [eax], esi
  00037	88 11		 mov	 BYTE PTR [ecx], dl
  00039	0f b6 c2	 movzx	 eax, dl
  0003c	eb 0b		 jmp	 SHORT $LN19@Putc
$LN18@Putc:
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	0f b6 d2	 movzx	 edx, dl
  00046	52		 push	 edx
  00047	ff d0		 call	 eax
$LN19@Putc:
  00049	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Dest$[esp+12]
  0004d	83 f8 ff	 cmp	 eax, -1
  00050	75 05		 jne	 SHORT $LN2@Putc
$LN12@Putc:
  00052	c6 44 24 18 01	 mov	 BYTE PTR __Dest$[esp+8], 1
$LN2@Putc:

; 1518 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00057	4d		 dec	 ebp
  00058	47		 inc	 edi
  00059	85 ed		 test	 ebp, ebp
  0005b	77 b6		 ja	 SHORT $LL3@Putc
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
$LN1@Putc:

; 1520 : 		return (_Dest);

  0005f	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  00063	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  00067	89 10		 mov	 DWORD PTR [eax], edx
  00069	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0006c	5d		 pop	 ebp

; 1521 : 		}

  0006d	c3		 ret	 0
?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
_TEXT	ENDS
PUBLIC	?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
; Function compile flags: /Ogtpy
;	COMDAT ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z
_TEXT	SEGMENT
$T157171 = -16						; size = 8
$T157172 = -8						; size = 8
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
__Kseparator$ = 32					; size = 1
?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped, COMDAT

; 1525 : 		{	// put char sequence [_Ptr, _Ptr + _Count) to _Dest with commas

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx
  0000a	8b 5d 1c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7d 18	 mov	 edi, DWORD PTR __Ptr$[ebp]
$LL5@Putgrouped:

; 1526 : 		for (; ; ++_Ptr, --_Count)
; 1527 : 			{	// put field with thousands separators for NULs
; 1528 : 			const char *_Pend =
; 1529 : 				(const char *)::memchr(_Ptr, '\0', _Count);

  00012	53		 push	 ebx
  00013	6a 00		 push	 0
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 _memchr
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1530 : 			size_t _Groupsize = _Pend != 0 ? _Pend - _Ptr : _Count;

  0001e	85 c0		 test	 eax, eax
  00020	74 06		 je	 SHORT $LN8@Putgrouped
  00022	2b c7		 sub	 eax, edi
  00024	8b f0		 mov	 esi, eax
  00026	eb 02		 jmp	 SHORT $LN9@Putgrouped
$LN8@Putgrouped:
  00028	8b f3		 mov	 esi, ebx
$LN9@Putgrouped:

; 1531 : 
; 1532 : 			_Dest = _Putc(_Dest, _Ptr, _Groupsize);

  0002a	8b 45 14	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  0002d	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00036	51		 push	 ecx
  00037	8d 54 24 20	 lea	 edx, DWORD PTR $T157171[esp+48]
  0003b	52		 push	 edx
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00047	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0004a	83 c4 18	 add	 esp, 24			; 00000018H

; 1533 : 			_Ptr += _Groupsize, _Count -= _Groupsize;

  0004d	03 fe		 add	 edi, esi
  0004f	2b de		 sub	 ebx, esi
  00051	89 55 14	 mov	 DWORD PTR __Dest$[ebp+4], edx

; 1534 : 			if (_Count == 0)

  00054	74 31		 je	 SHORT $LN12@Putgrouped

; 1535 : 				break;
; 1536 : 			if (_Kseparator != (_Elem)0)

  00056	8b 4d 20	 mov	 ecx, DWORD PTR __Kseparator$[ebp]
  00059	84 c9		 test	 cl, cl
  0005b	74 26		 je	 SHORT $LN4@Putgrouped

; 1537 : 				_Dest = _Rep(_Dest, _Kseparator, 1);

  0005d	8b 10		 mov	 edx, DWORD PTR [eax]
  0005f	6a 01		 push	 1
  00061	51		 push	 ecx
  00062	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00065	51		 push	 ecx
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	52		 push	 edx
  0006a	8d 44 24 28	 lea	 eax, DWORD PTR $T157172[esp+48]
  0006e	50		 push	 eax
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00075	8b 10		 mov	 edx, DWORD PTR [eax]
  00077	89 55 10	 mov	 DWORD PTR __Dest$[ebp], edx
  0007a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007d	83 c4 18	 add	 esp, 24			; 00000018H
  00080	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
$LN4@Putgrouped:
  00083	47		 inc	 edi
  00084	4b		 dec	 ebx
  00085	eb 8b		 jmp	 SHORT $LL5@Putgrouped
$LN12@Putgrouped:

; 1538 : 			}
; 1539 : 		return (_Dest);

  00087	8b 10		 mov	 edx, DWORD PTR [eax]
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0008c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1540 : 		}

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00094	89 11		 mov	 DWORD PTR [ecx], edx
  00096	8b c1		 mov	 eax, ecx
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
_TEXT	ENDS
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 74   : 	return (_Left.compare(_Right) == 0);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00008	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0000b	72 05		 jb	 SHORT $LN9@operator@35
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	eb 03		 jmp	 SHORT $LN10@operator@35
$LN9@operator@35:
  00012	83 c0 04	 add	 eax, 4
$LN10@operator@35:
  00015	51		 push	 ecx
  00016	8b 4c 24 08	 mov	 ecx, DWORD PTR __Left$[esp]
  0001a	50		 push	 eax
  0001b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001e	50		 push	 eax
  0001f	6a 00		 push	 0
  00021	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  00026	f7 d8		 neg	 eax
  00028	1b c0		 sbb	 eax, eax
  0002a	40		 inc	 eax

; 75   : 	}

  0002b	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z PROC ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 94   : 	return (_Left.compare(_Right) == 0);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  00004	8b c2		 mov	 eax, edx
  00006	56		 push	 esi
  00007	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL7@operator@36:
  00010	66 8b 08	 mov	 cx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 c9	 test	 cx, cx
  00019	75 f5		 jne	 SHORT $LL7@operator@36
  0001b	8b 4c 24 08	 mov	 ecx, DWORD PTR __Left$[esp]
  0001f	2b c6		 sub	 eax, esi
  00021	d1 f8		 sar	 eax, 1
  00023	50		 push	 eax
  00024	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	6a 00		 push	 0
  0002b	e8 00 00 00 00	 call	 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
  00030	f7 d8		 neg	 eax
  00032	1b c0		 sbb	 eax, eax
  00034	40		 inc	 eax
  00035	5e		 pop	 esi

; 95   : 	}

  00036	c3		 ret	 0
??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ENDP ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 104  : 	return (!(_Left == _Right));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00008	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0000b	72 05		 jb	 SHORT $LN11@operator@37
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	eb 03		 jmp	 SHORT $LN12@operator@37
$LN11@operator@37:
  00012	83 c0 04	 add	 eax, 4
$LN12@operator@37:
  00015	51		 push	 ecx
  00016	8b 4c 24 08	 mov	 ecx, DWORD PTR __Left$[esp]
  0001a	50		 push	 eax
  0001b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001e	50		 push	 eax
  0001f	6a 00		 push	 0
  00021	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  00026	f7 d8		 neg	 eax
  00028	1b c0		 sbb	 eax, eax
  0002a	f7 d8		 neg	 eax

; 105  : 	}

  0002c	c3		 ret	 0
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ; stdext::unchecked_copy<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z
_TEXT	SEGMENT
$T157244 = -4						; size = 1
__First$ = 8						; size = 4
__Cat$157249 = 12					; size = 1
$T157246 = 12						; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z PROC ; stdext::unchecked_copy<HostDevice *,HostDevice *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

  00000	51		 push	 ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Cat$157249[esp]
  00005	8b 54 24 0c	 mov	 edx, DWORD PTR $T157246[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T157244[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T157244[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *>

; 3607 : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ENDP ; stdext::unchecked_copy<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 646  : 		return (const_iterator(_Myfirst, this));

  00004	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00015	76 05		 jbe	 SHORT $LN5@begin
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@begin:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 647  : 		}

  00028	c2 04 00	 ret	 4
?begin@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 656  : 		return (const_iterator(_Mylast, this));

  00004	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	39 5e 0c	 cmp	 DWORD PTR [esi+12], ebx
  00015	76 05		 jbe	 SHORT $LN5@end
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@end:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 657  : 		}

  00028	c2 04 00	 ret	 4
?end@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end
_TEXT	ENDS
PUBLIC	?begin@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?begin@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin, COMDAT
; _this$ = ecx

; 539  : 		return (const_iterator(_Nextnode(_Myhead), this));

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 540  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end, COMDAT
; _this$ = ecx

; 549  : 		return (const_iterator(_Myhead, this));

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 550  : 		}

  0000e	c2 04 00	 ret	 4
?end@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end
_TEXT	ENDS
PUBLIC	?begin@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Const_iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Const_iterator@$00@12@XZ PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin, COMDAT
; _this$ = ecx

; 539  : 		return (const_iterator(_Nextnode(_Myhead), this));

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 540  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Const_iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Const_iterator@$00@12@XZ PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end, COMDAT
; _this$ = ecx

; 549  : 		return (const_iterator(_Myhead, this));

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 550  : 		}

  0000e	c2 04 00	 ret	 4
?end@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
_TEXT	ENDS
PUBLIC	??_7?$numpunct@D@std@@6B@			; std::numpunct<char>::`vftable'
PUBLIC	??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z	; std::numpunct<char>::numpunct<char>
PUBLIC	??_R4?$numpunct@D@std@@6B@			; std::numpunct<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$numpunct@D@std@@@8			; std::numpunct<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$numpunct@D@std@@8		; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_decimal_point@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_grouping
PUBLIC	?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_falsename
PUBLIC	?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_truename
EXTRN	??_E?$numpunct@D@std@@MAEPAXI@Z:PROC		; std::numpunct<char>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$numpunct@D@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@D@std@@8 DD FLAT:??_R0?AV?$numpunct@D@std@@@8 ; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$numpunct@D@std@@8 ; std::numpunct<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@D@std@@8 DD 00H				; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT
??_R0?AV?$numpunct@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::numpunct<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$numpunct@D@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@D@std@@6B@ DD 00H			; std::numpunct<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$numpunct@D@std@@@8
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$numpunct@D@std@@6B@
CONST	SEGMENT
??_7?$numpunct@D@std@@6B@ DD FLAT:??_R4?$numpunct@D@std@@6B@ ; std::numpunct<char>::`vftable'
	DD	FLAT:??_E?$numpunct@D@std@@MAEPAXI@Z
	DD	FLAT:?do_decimal_point@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0
__ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
__Isdef$ = 16						; size = 1
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z PROC	; std::numpunct<char>::numpunct<char>, COMDAT
; _this$ = ecx

; 106  : 		{	// construct from specified locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	8b 44 24 20	 mov	 eax, DWORD PTR __Refs$[esp+20]
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 107  : 		_Init(_Lobj, _Isdef);

  0002f	8b 4c 24 24	 mov	 ecx, DWORD PTR __Isdef$[esp+20]
  00033	8b 54 24 1c	 mov	 edx, DWORD PTR __Lobj$[esp+20]
  00037	51		 push	 ecx
  00038	52		 push	 edx
  00039	8b ce		 mov	 ecx, esi
  0003b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+40], 0
  00043	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  00049	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init

; 108  : 		}

  0004e	8b c6		 mov	 eax, esi
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	5e		 pop	 esi
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@UAE@XZ ; std::locale::facet::~facet
__ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z ENDP	; std::numpunct<char>::numpunct<char>
; Function compile flags: /Ogtpy
;	COMDAT ?do_decimal_point@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_decimal_point@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_decimal_point, COMDAT
; _this$ = ecx

; 165  : 		return (_Dp);

  00000	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]

; 166  : 		}

  00003	c3		 ret	 0
?do_decimal_point@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_decimal_point
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_thousands_sep, COMDAT
; _this$ = ecx

; 170  : 		return (_Kseparator);

  00000	8a 41 0d	 mov	 al, BYTE PTR [ecx+13]

; 171  : 		}

  00003	c3		 ret	 0
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_thousands_sep
_TEXT	ENDS
PUBLIC	??1?$numpunct@D@std@@MAE@XZ			; std::numpunct<char>::~numpunct<char>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$numpunct@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$numpunct@D@std@@MAE@XZ PROC			; std::numpunct<char>::~numpunct<char>, COMDAT
; _this$ = ecx

; 121  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 122  : 		_Tidy();

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  0000d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00012	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 123  : 		}

  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0002d	5e		 pop	 esi
  0002e	c3		 ret	 0
??1?$numpunct@D@std@@MAE@XZ ENDP			; std::numpunct<char>::~numpunct<char>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$numpunct@D@std@@MAEPAXI@Z PROC			; std::numpunct<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  0000d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00012	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00032	74 09		 je	 SHORT $LN10@scalar@16
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4
$LN10@scalar@16:
  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	c2 04 00	 ret	 4
??_G?$numpunct@D@std@@MAEPAXI@Z ENDP			; std::numpunct<char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z PROC ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@List_nod@2
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 48   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 47   : 		{	// construct allocator from _Al

$LN8@List_nod@2:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 48   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ENDP ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1166 : 	}

  00007	c3		 ret	 0
??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAPBUFavoriteVolume@CipherShed@@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAPBUFavoriteVolume@CipherShed@@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAPBUFavoriteVolume@CipherShed@@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1166 : 	}

  00007	c3		 ret	 0
??$_Checked_base@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAPBUFavoriteVolume@CipherShed@@AAV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 54	 lea	 esi, DWORD PTR [ecx+84]
  00004	8b ce		 mov	 ecx, esi
  00006	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0000b	56		 push	 esi
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00012	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00017	83 c4 04	 add	 esp, 4
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 565  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 566  : 		_Tidy();

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH
  0000b	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0000e	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 567  : 		}

  00011	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $LN17@basic_stri
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN17@basic_stri:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 907  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 1502 : 		return (_STRING_ITERATOR(_Myptr()));

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 17		 jb	 SHORT $LN5@begin@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	56		 push	 esi
  0000a	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  0000e	51		 push	 ecx
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi

; 1503 : 		}

  0001a	c2 04 00	 ret	 4

; 1502 : 		return (_STRING_ITERATOR(_Myptr()));

$LN5@begin@2:
  0001d	56		 push	 esi
  0001e	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  00022	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00025	51		 push	 ecx
  00026	50		 push	 eax
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi

; 1503 : 		}

  00031	c2 04 00	 ret	 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 565  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 566  : 		_Tidy();

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 18 07 00
	00 00		 mov	 DWORD PTR [eax+24], 7
  0000b	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  00012	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 567  : 		}

  00016	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00007	72 0c		 jb	 SHORT $LN19@basic_stri@2
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN19@basic_stri@2:
  00015	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0001c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00023	33 c9		 xor	 ecx, ecx
  00025	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00029	5e		 pop	 esi

; 907  : 		}

  0002a	c3		 ret	 0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0

; 559  : 		_Tidy();

  00030	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy

; 560  : 		}

  00035	8b 06		 mov	 eax, DWORD PTR [esi]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4
  00040	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00044	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004b	59		 pop	 ecx
  0004c	5e		 pop	 esi
  0004d	83 c4 10	 add	 esp, 16			; 00000010H
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
;	COMDAT ??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8d 79 ac	 lea	 edi, DWORD PTR [ecx-84]
  00005	8d 77 54	 lea	 esi, DWORD PTR [edi+84]
  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0000f	56		 push	 esi
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00016	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001b	83 c4 04	 add	 esp, 4
  0001e	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  00023	74 09		 je	 SHORT $LN11@scalar@17
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002b	83 c4 04	 add	 esp, 4
$LN11@scalar@17:
  0002e	8b c7		 mov	 eax, edi
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	c2 04 00	 ret	 4
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	??1?$_List_ptr@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_ptr@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_ptr@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_ptr@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??1?$_List_ptr@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::_List_ptr<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_List_ptr<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_ptr@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_ptr@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::_List_ptr<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_List_ptr<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_ptr@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::_List_ptr<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_List_ptr<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
$T158378 = -8						; size = 8
$T158377 = -8						; size = 8
$T158337 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1285 : 		{	// erase substring [_First, _Last)

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	8b e9		 mov	 ebp, ecx

; 1286 : 		size_type _Count = _Pdif(_First, begin());

  00007	8b 4d 18	 mov	 ecx, DWORD PTR [ebp+24]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0000f	72 05		 jb	 SHORT $LN7@erase@3
  00011	8b 7d 04	 mov	 edi, DWORD PTR [ebp+4]
  00014	eb 03		 jmp	 SHORT $LN8@erase@3
$LN7@erase@3:
  00016	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
$LN8@erase@3:
  00019	85 ff		 test	 edi, edi
  0001b	74 26		 je	 SHORT $LN14@erase@3
  0001d	8d 55 04	 lea	 edx, DWORD PTR [ebp+4]
  00020	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00023	72 04		 jb	 SHORT $LN24@erase@3
  00025	8b 02		 mov	 eax, DWORD PTR [edx]
  00027	eb 02		 jmp	 SHORT $LN25@erase@3
$LN24@erase@3:
  00029	8b c2		 mov	 eax, edx
$LN25@erase@3:
  0002b	3b c7		 cmp	 eax, edi
  0002d	77 14		 ja	 SHORT $LN14@erase@3
  0002f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00032	72 04		 jb	 SHORT $LN28@erase@3
  00034	8b 02		 mov	 eax, DWORD PTR [edx]
  00036	eb 02		 jmp	 SHORT $LN29@erase@3
$LN28@erase@3:
  00038	8b c2		 mov	 eax, edx
$LN29@erase@3:
  0003a	8b 4d 14	 mov	 ecx, DWORD PTR [ebp+20]
  0003d	03 c8		 add	 ecx, eax
  0003f	3b f9		 cmp	 edi, ecx
  00041	76 05		 jbe	 SHORT $LN13@erase@3
$LN14@erase@3:
  00043	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN13@erase@3:
  00048	8b 4c 24 24	 mov	 ecx, DWORD PTR __First$[esp+24]
  0004c	8b 44 24 20	 mov	 eax, DWORD PTR __First$[esp+20]
  00050	89 44 24 10	 mov	 DWORD PTR $T158337[esp+24], eax
  00054	8b f1		 mov	 esi, ecx
  00056	85 c9		 test	 ecx, ecx
  00058	75 04		 jne	 SHORT $LN32@erase@3
  0005a	33 db		 xor	 ebx, ebx
  0005c	eb 1e		 jmp	 SHORT $LN33@erase@3
$LN32@erase@3:
  0005e	83 f8 fc	 cmp	 eax, -4			; fffffffcH
  00061	74 15		 je	 SHORT $LN34@erase@3
  00063	85 c0		 test	 eax, eax
  00065	74 04		 je	 SHORT $LN37@erase@3
  00067	3b c5		 cmp	 eax, ebp
  00069	74 0d		 je	 SHORT $LN34@erase@3
$LN37@erase@3:
  0006b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00070	8b 4c 24 24	 mov	 ecx, DWORD PTR __First$[esp+24]
  00074	8b 44 24 20	 mov	 eax, DWORD PTR __First$[esp+20]
$LN34@erase@3:
  00078	2b f7		 sub	 esi, edi
  0007a	8b de		 mov	 ebx, esi
$LN33@erase@3:

; 1287 : 		erase(_Count, _Pdif(_Last, _First));

  0007c	8b 54 24 28	 mov	 edx, DWORD PTR __Last$[esp+20]
  00080	8b f9		 mov	 edi, ecx
  00082	8b 4c 24 2c	 mov	 ecx, DWORD PTR __Last$[esp+24]
  00086	89 44 24 10	 mov	 DWORD PTR $T158378[esp+24], eax
  0008a	89 54 24 10	 mov	 DWORD PTR $T158377[esp+24], edx
  0008e	8b f1		 mov	 esi, ecx
  00090	85 c9		 test	 ecx, ecx
  00092	74 14		 je	 SHORT $LN49@erase@3
$LN48@erase@3:
  00094	83 fa fc	 cmp	 edx, -4			; fffffffcH
  00097	74 0d		 je	 SHORT $LN50@erase@3
  00099	85 d2		 test	 edx, edx
  0009b	74 04		 je	 SHORT $LN53@erase@3
  0009d	3b d0		 cmp	 edx, eax
  0009f	74 05		 je	 SHORT $LN50@erase@3
$LN53@erase@3:
  000a1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN50@erase@3:
  000a6	2b f7		 sub	 esi, edi
$LN49@erase@3:
  000a8	56		 push	 esi
  000a9	53		 push	 ebx
  000aa	8b cd		 mov	 ecx, ebp
  000ac	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1288 : 		return (_STRING_ITERATOR(_Myptr() + _Count));

  000b1	83 7d 18 10	 cmp	 DWORD PTR [ebp+24], 16	; 00000010H
  000b5	72 05		 jb	 SHORT $LN64@erase@3
  000b7	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  000ba	eb 03		 jmp	 SHORT $LN65@erase@3
$LN64@erase@3:
  000bc	8d 45 04	 lea	 eax, DWORD PTR [ebp+4]
$LN65@erase@3:
  000bf	8b 74 24 1c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+20]
  000c3	55		 push	 ebp
  000c4	03 c3		 add	 eax, ebx
  000c6	50		 push	 eax
  000c7	8b ce		 mov	 ecx, esi
  000c9	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
  000ce	5f		 pop	 edi
  000cf	8b c6		 mov	 eax, esi
  000d1	5e		 pop	 esi
  000d2	5d		 pop	 ebp
  000d3	5b		 pop	 ebx

; 1289 : 		}

  000d4	83 c4 08	 add	 esp, 8
  000d7	c2 14 00	 ret	 20			; 00000014H
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end, COMDAT
; _this$ = ecx

; 1512 : 		return (_STRING_ITERATOR(_Myptr() + _Mysize));

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 05		 jb	 SHORT $LN5@end@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	eb 03		 jmp	 SHORT $LN6@end@2
$LN5@end@2:
  0000b	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
$LN6@end@2:
  0000e	56		 push	 esi
  0000f	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  00013	51		 push	 ecx
  00014	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00017	03 c8		 add	 ecx, eax
  00019	51		 push	 ecx
  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi

; 1513 : 		}

  00024	c2 04 00	 ret	 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xlen
; Function compile flags: /Ogtpy
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	53		 push	 ebx

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  0000b	76 05		 jbe	 SHORT $LN6@Grow

; 2121 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow:

; 2122 : 		if (_Myres < _Newsize)

  00012	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00015	3b c3		 cmp	 eax, ebx
  00017	73 19		 jae	 SHORT $LN5@Grow

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001c	50		 push	 eax
  0001d	53		 push	 ebx
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c9		 xor	 ecx, ecx
  00027	3b cb		 cmp	 ecx, ebx
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5b		 pop	 ebx

; 2130 : 		}

  0002f	c2 08 00	 ret	 8
$LN5@Grow:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  00037	74 52		 je	 SHORT $LN3@Grow
  00039	83 fb 10	 cmp	 ebx, 16			; 00000010H
  0003c	73 4d		 jae	 SHORT $LN3@Grow
  0003e	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  0003f	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00042	3b df		 cmp	 ebx, edi
  00044	73 02		 jae	 SHORT $LN9@Grow
  00046	8b fb		 mov	 edi, ebx
$LN9@Grow:
  00048	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004b	72 21		 jb	 SHORT $LN33@Grow
  0004d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00050	55		 push	 ebp
  00051	8b 28		 mov	 ebp, DWORD PTR [eax]
  00053	85 ff		 test	 edi, edi
  00055	76 0d		 jbe	 SHORT $LN31@Grow
  00057	57		 push	 edi
  00058	55		 push	 ebp
  00059	6a 10		 push	 16			; 00000010H
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _memcpy_s
  00061	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@Grow:
  00064	55		 push	 ebp
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	83 c4 04	 add	 esp, 4
  0006d	5d		 pop	 ebp
$LN33@Grow:
  0006e	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00071	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00078	33 c9		 xor	 ecx, ecx
  0007a	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  0007f	3b cb		 cmp	 ecx, ebx
  00081	5f		 pop	 edi
  00082	1b c0		 sbb	 eax, eax
  00084	5e		 pop	 esi
  00085	f7 d8		 neg	 eax
  00087	5b		 pop	 ebx

; 2130 : 		}

  00088	c2 08 00	 ret	 8
$LN3@Grow:

; 2127 : 		else if (_Newsize == 0)

  0008b	85 db		 test	 ebx, ebx
  0008d	75 20		 jne	 SHORT $LN49@Grow

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  0008f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00092	83 f8 10	 cmp	 eax, 16			; 00000010H
  00095	72 12		 jb	 SHORT $LN47@Grow
  00097	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  0009a	33 c9		 xor	 ecx, ecx
  0009c	3b cb		 cmp	 ecx, ebx
  0009e	88 1e		 mov	 BYTE PTR [esi], bl
  000a0	1b c0		 sbb	 eax, eax
  000a2	5e		 pop	 esi
  000a3	f7 d8		 neg	 eax
  000a5	5b		 pop	 ebx

; 2130 : 		}

  000a6	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN47@Grow:
  000a9	83 c6 04	 add	 esi, 4
  000ac	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN49@Grow:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000af	33 c9		 xor	 ecx, ecx
  000b1	3b cb		 cmp	 ecx, ebx
  000b3	1b c0		 sbb	 eax, eax
  000b5	5e		 pop	 esi
  000b6	f7 d8		 neg	 eax
  000b8	5b		 pop	 ebx

; 2130 : 		}

  000b9	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 646  : 		return (const_iterator(_Myfirst, this));

  00004	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00015	76 05		 jbe	 SHORT $LN5@begin@3
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@begin@3:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 647  : 		}

  00028	c2 04 00	 ret	 4
?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 656  : 		return (const_iterator(_Mylast, this));

  00004	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	39 5e 0c	 cmp	 DWORD PTR [esi+12], ebx
  00015	76 05		 jbe	 SHORT $LN5@end@3
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@end@3:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 657  : 		}

  00028	c2 04 00	 ret	 4
?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::_Vector_val<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z PROC ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::_Vector_val<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@Vector_val
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 425  : 		{	// construct allocator from _Al

$LN8@Vector_val:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z ENDP ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::_Vector_val<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ; std::_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z PROC ; std::_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@Vector_val@2
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 425  : 		{	// construct allocator from _Al

$LN8@Vector_val@2:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ENDP ; std::_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Vector_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_iterator<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_iterator<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

  00000	53		 push	 ebx
  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN6@Vector_ite
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN6@Vector_ite
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN5@Vector_ite
$LN6@Vector_ite:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Vector_ite:
  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi
  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 328  : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_iterator<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??0?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PBV12@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::_Iterator<1>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PBV12@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::_Iterator<1>, COMDAT
; _this$ = ecx

; 361  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN5@Iterator
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Iterator:
  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 362  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PBV12@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::_Iterator<1>
_TEXT	ENDS
PUBLIC	??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
__ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 29   : 	explicit __CLR_OR_THIS_CALL basic_stringbuf(ios_base::openmode _Mode =

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >

; 30   : 		ios_base::in | ios_base::out)
; 31   : 		{	// construct empty character buffer from mode
; 32   : 		_Init(0, 0, _Getstate(_Mode));

  00029	8a 4c 24 1c	 mov	 cl, BYTE PTR __Mode$[esp+20]
  0002d	33 c0		 xor	 eax, eax
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00035	f6 c1 01	 test	 cl, 1
  00038	75 05		 jne	 SHORT $LN9@basic_stri@3
  0003a	b8 04 00 00 00	 mov	 eax, 4
$LN9@basic_stri@3:
  0003f	f6 c1 02	 test	 cl, 2
  00042	75 03		 jne	 SHORT $LN8@basic_stri@3
  00044	83 c8 02	 or	 eax, 2
$LN8@basic_stri@3:
  00047	f6 c1 08	 test	 cl, 8
  0004a	74 03		 je	 SHORT $LN7@basic_stri@3
  0004c	83 c8 08	 or	 eax, 8
$LN7@basic_stri@3:
  0004f	f6 c1 04	 test	 cl, 4
  00052	74 03		 je	 SHORT $LN6@basic_stri@3
  00054	83 c8 10	 or	 eax, 16			; 00000010H
$LN6@basic_stri@3:
  00057	89 46 40	 mov	 DWORD PTR [esi+64], eax
  0005a	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0

; 33   : 		}

  00061	8b c6		 mov	 eax, esi
  00063	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5e		 pop	 esi
  00070	83 c4 10	 add	 esp, 16			; 00000010H
  00073	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 951  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 952  : 		if (_Right.size() < _Roff)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR __Roff$[esp+12]
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 7d 14	 cmp	 DWORD PTR [ebp+20], edi
  00011	73 05		 jae	 SHORT $LN5@append

; 953  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@append:

; 954  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 955  : 		if (_Num < _Count)

  0001b	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Count$[esp+12]
  0001f	2b c7		 sub	 eax, edi
  00021	3b c3		 cmp	 eax, ebx
  00023	73 02		 jae	 SHORT $LN4@append

; 956  : 			_Count = _Num;	// trim _Count to size

  00025	8b d8		 mov	 ebx, eax
$LN4@append:

; 957  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00027	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002a	83 c9 ff	 or	 ecx, -1
  0002d	2b c8		 sub	 ecx, eax
  0002f	3b cb		 cmp	 ecx, ebx
  00031	76 07		 jbe	 SHORT $LN2@append
  00033	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00036	3b d0		 cmp	 edx, eax
  00038	73 05		 jae	 SHORT $LN3@append
$LN2@append:

; 958  : 			_String_base::_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append:

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 86 ab 00 00
	00		 jbe	 $LN87@append
  00047	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0004a	03 fb		 add	 edi, ebx
  0004c	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004f	76 05		 jbe	 SHORT $LN17@append
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@append:
  00056	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00059	3b c7		 cmp	 eax, edi
  0005b	73 1f		 jae	 SHORT $LN16@append
  0005d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00060	50		 push	 eax
  00061	57		 push	 edi
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ff		 test	 edi, edi
$LN88@append:
  0006b	0f 86 81 00 00
	00		 jbe	 $LN87@append

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

  00071	83 7d 18 10	 cmp	 DWORD PTR [ebp+24], 16	; 00000010H
  00075	72 2f		 jb	 SHORT $LN64@append
  00077	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]
  0007a	eb 2d		 jmp	 SHORT $LN65@append

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN16@append:
  0007c	85 ff		 test	 edi, edi
  0007e	75 eb		 jne	 SHORT $LN88@append
  00080	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00083	83 f8 10	 cmp	 eax, 16			; 00000010H
  00086	72 0f		 jb	 SHORT $LN58@append
  00088	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008b	5f		 pop	 edi
  0008c	c6 00 00	 mov	 BYTE PTR [eax], 0

; 965  : 			}
; 966  : 		return (*this);

  0008f	8b c6		 mov	 eax, esi
  00091	5e		 pop	 esi
  00092	5d		 pop	 ebp
  00093	5b		 pop	 ebx

; 967  : 		}

  00094	c2 0c 00	 ret	 12			; 0000000cH

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN58@append:
  00097	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009a	5f		 pop	 edi
  0009b	c6 00 00	 mov	 BYTE PTR [eax], 0

; 965  : 			}
; 966  : 		return (*this);

  0009e	8b c6		 mov	 eax, esi
  000a0	5e		 pop	 esi
  000a1	5d		 pop	 ebp
  000a2	5b		 pop	 ebx

; 967  : 		}

  000a3	c2 0c 00	 ret	 12			; 0000000cH

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

$LN64@append:
  000a6	83 c5 04	 add	 ebp, 4
$LN65@append:
  000a9	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000ac	83 f8 10	 cmp	 eax, 16			; 00000010H
  000af	72 05		 jb	 SHORT $LN68@append
  000b1	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000b4	eb 03		 jmp	 SHORT $LN69@append
$LN68@append:
  000b6	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN69@append:
  000b9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000bc	53		 push	 ebx
  000bd	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Roff$[esp+16]
  000c1	03 eb		 add	 ebp, ebx
  000c3	2b c1		 sub	 eax, ecx
  000c5	55		 push	 ebp
  000c6	50		 push	 eax
  000c7	03 ca		 add	 ecx, edx
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 964  : 			_Eos(_Num);

  000d2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d9	72 10		 jb	 SHORT $LN82@append
  000db	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000de	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000e2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000e3	8b c6		 mov	 eax, esi
  000e5	5e		 pop	 esi
  000e6	5d		 pop	 ebp
  000e7	5b		 pop	 ebx

; 967  : 		}

  000e8	c2 0c 00	 ret	 12			; 0000000cH

; 964  : 			_Eos(_Num);

$LN82@append:
  000eb	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ee	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN87@append:
  000f2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000f3	8b c6		 mov	 eax, esi
  000f5	5e		 pop	 esi
  000f6	5d		 pop	 ebp
  000f7	5b		 pop	 ebx

; 967  : 		}

  000f8	c2 0c 00	 ret	 12			; 0000000cH
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 971  : 
; 972  :  #if _HAS_ITERATOR_DEBUGGING
; 973  : 		if (_Count != 0)
; 974  : 			_DEBUG_POINTER(_Ptr);
; 975  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 976  : 
; 977  : 		if (_Inside(_Ptr))

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 46		 je	 SHORT $LN4@append@2
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 10	 cmp	 edi, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN14@append@2
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN15@append@2
$LN14@append@2:
  0001c	8b c8		 mov	 ecx, eax
$LN15@append@2:
  0001e	3b d1		 cmp	 edx, ecx
  00020	72 31		 jb	 SHORT $LN4@append@2
  00022	83 ff 10	 cmp	 edi, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN18@append@2
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN19@append@2
$LN18@append@2:
  0002b	8b c8		 mov	 ecx, eax
$LN19@append@2:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	03 d9		 add	 ebx, ecx
  00032	3b da		 cmp	 ebx, edx
  00034	76 1d		 jbe	 SHORT $LN4@append@2

; 978  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 ff 10	 cmp	 edi, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN22@append@2
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN22@append@2:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b d0		 sub	 edx, eax
  00044	52		 push	 edx
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx

; 989  : 		}

  00050	c2 08 00	 ret	 8
$LN4@append@2:

; 979  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	83 ca ff	 or	 edx, -1
  00059	55		 push	 ebp
  0005a	8b 6c 24 18	 mov	 ebp, DWORD PTR __Count$[esp+12]
  0005e	2b d0		 sub	 edx, eax
  00060	3b d5		 cmp	 edx, ebp
  00062	76 07		 jbe	 SHORT $LN2@append@2
  00064	8d 0c 28	 lea	 ecx, DWORD PTR [eax+ebp]
  00067	3b c8		 cmp	 ecx, eax
  00069	73 05		 jae	 SHORT $LN3@append@2
$LN2@append@2:

; 980  : 			_String_base::_Xlen();	// result too long

  0006b	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@2:

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00070	85 ed		 test	 ebp, ebp
  00072	0f 86 87 00 00
	00		 jbe	 $LN92@append@2
  00078	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0007b	03 fd		 add	 edi, ebp
  0007d	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00080	76 05		 jbe	 SHORT $LN29@append@2
  00082	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN29@append@2:
  00087	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0008a	3b c7		 cmp	 eax, edi
  0008c	73 1f		 jae	 SHORT $LN28@append@2
  0008e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00091	52		 push	 edx
  00092	57		 push	 edi
  00093	8b ce		 mov	 ecx, esi
  00095	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0009a	85 ff		 test	 edi, edi
$LN95@append@2:
  0009c	76 61		 jbe	 SHORT $LN92@append@2

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

  0009e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000a1	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a4	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a7	72 2e		 jb	 SHORT $LN76@append@2
  000a9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000ab	eb 2c		 jmp	 SHORT $LN77@append@2

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN28@append@2:
  000ad	85 ff		 test	 edi, edi
  000af	75 eb		 jne	 SHORT $LN95@append@2
  000b1	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000b4	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b7	72 0f		 jb	 SHORT $LN70@append@2
  000b9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000bc	5d		 pop	 ebp
  000bd	5f		 pop	 edi
  000be	c6 00 00	 mov	 BYTE PTR [eax], 0

; 987  : 			}
; 988  : 		return (*this);

  000c1	8b c6		 mov	 eax, esi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx

; 989  : 		}

  000c5	c2 08 00	 ret	 8

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN70@append@2:
  000c8	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000cb	5d		 pop	 ebp
  000cc	5f		 pop	 edi
  000cd	c6 00 00	 mov	 BYTE PTR [eax], 0

; 987  : 			}
; 988  : 		return (*this);

  000d0	8b c6		 mov	 eax, esi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx

; 989  : 		}

  000d4	c2 08 00	 ret	 8

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

$LN76@append@2:
  000d7	8b d3		 mov	 edx, ebx
$LN77@append@2:
  000d9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000dc	55		 push	 ebp
  000dd	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  000e1	2b c1		 sub	 eax, ecx
  000e3	55		 push	 ebp
  000e4	50		 push	 eax
  000e5	03 ca		 add	 ecx, edx
  000e7	51		 push	 ecx
  000e8	e8 00 00 00 00	 call	 _memcpy_s
  000ed	83 c4 10	 add	 esp, 16			; 00000010H

; 986  : 			_Eos(_Num);

  000f0	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000f4	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000f7	72 02		 jb	 SHORT $LN90@append@2
  000f9	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN90@append@2:
  000fb	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN92@append@2:
  000ff	5d		 pop	 ebp
  00100	5f		 pop	 edi

; 987  : 			}
; 988  : 		return (*this);

  00101	8b c6		 mov	 eax, esi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx

; 989  : 		}

  00105	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
; Function compile flags: /Ogtpy
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	81 fd fe ff ff
	7f		 cmp	 ebp, 2147483646		; 7ffffffeH
  0000e	76 05		 jbe	 SHORT $LN6@Grow@2

; 2121 : 			_String_base::_Xlen();	// result too long

  00010	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow@2:

; 2122 : 		if (_Myres < _Newsize)

  00015	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00018	3b c5		 cmp	 eax, ebp
  0001a	73 19		 jae	 SHORT $LN5@Grow@2

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  0001c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001f	50		 push	 eax
  00020	55		 push	 ebp
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00028	33 c9		 xor	 ecx, ecx
  0002a	3b cd		 cmp	 ecx, ebp
  0002c	1b c0		 sbb	 eax, eax
  0002e	5e		 pop	 esi
  0002f	f7 d8		 neg	 eax
  00031	5d		 pop	 ebp

; 2130 : 		}

  00032	c2 08 00	 ret	 8
$LN5@Grow@2:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00035	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  0003a	74 57		 je	 SHORT $LN3@Grow@2
  0003c	83 fd 08	 cmp	 ebp, 8
  0003f	73 52		 jae	 SHORT $LN3@Grow@2
  00041	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00042	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00045	3b ef		 cmp	 ebp, edi
  00047	73 02		 jae	 SHORT $LN9@Grow@2
  00049	8b fd		 mov	 edi, ebp
$LN9@Grow@2:
  0004b	83 f8 08	 cmp	 eax, 8
  0004e	72 24		 jb	 SHORT $LN35@Grow@2
  00050	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00053	53		 push	 ebx
  00054	8b 18		 mov	 ebx, DWORD PTR [eax]
  00056	85 ff		 test	 edi, edi
  00058	76 10		 jbe	 SHORT $LN33@Grow@2
  0005a	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  0005d	51		 push	 ecx
  0005e	53		 push	 ebx
  0005f	6a 10		 push	 16			; 00000010H
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _memcpy_s
  00067	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@Grow@2:
  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00070	83 c4 04	 add	 esp, 4
  00073	5b		 pop	 ebx
$LN35@Grow@2:
  00074	33 d2		 xor	 edx, edx
  00076	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00079	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00080	33 c9		 xor	 ecx, ecx
  00082	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  00087	3b cd		 cmp	 ecx, ebp
  00089	5f		 pop	 edi
  0008a	1b c0		 sbb	 eax, eax
  0008c	5e		 pop	 esi
  0008d	f7 d8		 neg	 eax
  0008f	5d		 pop	 ebp

; 2130 : 		}

  00090	c2 08 00	 ret	 8
$LN3@Grow@2:

; 2127 : 		else if (_Newsize == 0)

  00093	85 ed		 test	 ebp, ebp
  00095	75 25		 jne	 SHORT $LN51@Grow@2

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  00097	89 6e 14	 mov	 DWORD PTR [esi+20], ebp
  0009a	83 f8 08	 cmp	 eax, 8
  0009d	72 15		 jb	 SHORT $LN49@Grow@2
  0009f	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000a2	33 c0		 xor	 eax, eax

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000a4	33 c9		 xor	 ecx, ecx
  000a6	3b cd		 cmp	 ecx, ebp
  000a8	66 89 06	 mov	 WORD PTR [esi], ax
  000ab	1b c0		 sbb	 eax, eax
  000ad	5e		 pop	 esi
  000ae	f7 d8		 neg	 eax
  000b0	5d		 pop	 ebp

; 2130 : 		}

  000b1	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN49@Grow@2:
  000b4	83 c6 04	 add	 esi, 4
  000b7	33 c0		 xor	 eax, eax
  000b9	66 89 06	 mov	 WORD PTR [esi], ax
$LN51@Grow@2:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000bc	33 c9		 xor	 ecx, ecx
  000be	3b cd		 cmp	 ecx, ebp
  000c0	1b c0		 sbb	 eax, eax
  000c2	5e		 pop	 esi
  000c3	f7 d8		 neg	 eax
  000c5	5d		 pop	 ebp

; 2130 : 		}

  000c6	c2 08 00	 ret	 8
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
_TEXT	ENDS
PUBLIC	?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::end
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 651  : 		return (iterator(_Mylast, this));

  00004	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	39 5e 0c	 cmp	 DWORD PTR [esi+12], ebx
  00015	76 05		 jbe	 SHORT $LN7@end@4
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@end@4:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 652  : 		}

  00028	c2 04 00	 ret	 4
?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::end
_TEXT	ENDS
PUBLIC	??0?$_List_ptr@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_List_ptr<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_List_ptr<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_List_ptr@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_ptr@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_List_ptr<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_List_ptr<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 67   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN13@List_ptr
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 68   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 67   : 		{	// construct base, and allocator from _Al

$LN13@List_ptr:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 68   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_ptr@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_List_ptr<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_List_ptr<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAUFavoriteVolume@CipherShed@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAUFavoriteVolume@CipherShed@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAUFavoriteVolume@CipherShed@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

  00000	53		 push	 ebx
  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN6@Vector_ite@2
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN6@Vector_ite@2
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN5@Vector_ite@2
$LN6@Vector_ite@2:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Vector_ite@2:
  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi
  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 328  : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@PAUFavoriteVolume@CipherShed@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Vector_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??0?$_Iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PBV12@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Iterator<1>::_Iterator<1>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_Iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PBV12@@Z PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Iterator<1>::_Iterator<1>, COMDAT
; _this$ = ecx

; 361  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN5@Iterator@2
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Iterator@2:
  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 362  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$_Iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PBV12@@Z ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Iterator<1>::_Iterator<1>
_TEXT	ENDS
PUBLIC	?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T159854 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::falsename, COMDAT
; _this$ = ecx

; 84   : 		{	// return name for false

  00000	51		 push	 ecx

; 85   : 		return (do_falsename());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T159854[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 86   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::falsename
_TEXT	ENDS
PUBLIC	?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
; Function compile flags: /Ogtpy
;	COMDAT ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T159859 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::truename, COMDAT
; _this$ = ecx

; 89   : 		{	// return name for true

  00000	51		 push	 ecx

; 90   : 		return (do_truename());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T159859[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 91   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::truename
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 998  : 		{	// append _Count * _Ch

  00000	53		 push	 ebx

; 999  : 			if (npos - _Mysize <= _Count)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Count$[esp]
  00005	56		 push	 esi
  00006	83 c8 ff	 or	 eax, -1
  00009	8b f1		 mov	 esi, ecx
  0000b	2b 46 14	 sub	 eax, DWORD PTR [esi+20]
  0000e	3b c3		 cmp	 eax, ebx
  00010	77 05		 ja	 SHORT $LN2@append@3

; 1000 : 			_String_base::_Xlen();	// result too long

  00012	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN2@append@3:

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00017	85 db		 test	 ebx, ebx
  00019	0f 86 80 00 00
	00		 jbe	 $LN63@append@3
  0001f	57		 push	 edi
  00020	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00023	03 fb		 add	 edi, ebx
  00025	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00028	76 05		 jbe	 SHORT $LN10@append@3
  0002a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN10@append@3:
  0002f	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00032	3b c7		 cmp	 eax, edi
  00034	73 39		 jae	 SHORT $LN9@append@3
  00036	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00039	51		 push	 ecx
  0003a	57		 push	 edi
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00042	85 ff		 test	 edi, edi
$LN66@append@3:
  00044	76 58		 jbe	 SHORT $LN64@append@3

; 1004 : 			{	// make room and append new stuff using assign
; 1005 : 			_Chassign(_Mysize, _Count, _Ch);

  00046	8b 54 24 14	 mov	 edx, DWORD PTR __Ch$[esp+8]
  0004a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0004d	52		 push	 edx
  0004e	53		 push	 ebx
  0004f	50		 push	 eax
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1006 : 			_Eos(_Num);

  00057	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0005b	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0005e	72 37		 jb	 SHORT $LN59@append@3
  00060	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00063	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  00067	5f		 pop	 edi

; 1007 : 			}
; 1008 : 		return (*this);

  00068	8b c6		 mov	 eax, esi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx

; 1009 : 		}

  0006c	c2 08 00	 ret	 8

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN9@append@3:
  0006f	85 ff		 test	 edi, edi
  00071	75 d1		 jne	 SHORT $LN66@append@3
  00073	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00076	83 f8 10	 cmp	 eax, 16			; 00000010H
  00079	72 0e		 jb	 SHORT $LN51@append@3
  0007b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0007e	5f		 pop	 edi
  0007f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1007 : 			}
; 1008 : 		return (*this);

  00082	8b c6		 mov	 eax, esi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx

; 1009 : 		}

  00086	c2 08 00	 ret	 8

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN51@append@3:
  00089	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0008c	5f		 pop	 edi
  0008d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1007 : 			}
; 1008 : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 1009 : 		}

  00094	c2 08 00	 ret	 8

; 1006 : 			_Eos(_Num);

$LN59@append@3:
  00097	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009a	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN64@append@3:
  0009e	5f		 pop	 edi
$LN63@append@3:

; 1007 : 			}
; 1008 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx

; 1009 : 		}

  000a3	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
_TEXT	SEGMENT
tv188 = 8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1196 : 		{	// insert _Count * _Ch at _Off

  00000	55		 push	 ebp
  00001	56		 push	 esi
  00002	57		 push	 edi

; 1197 : 		if (_Mysize < _Off)

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR __Off$[esp+8]
  00007	8b f1		 mov	 esi, ecx
  00009	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0000c	73 05		 jae	 SHORT $LN3@insert

; 1198 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@insert:

; 1199 : 		if (npos - _Mysize <= _Count)

  00013	8b 6c 24 14	 mov	 ebp, DWORD PTR __Count$[esp+8]
  00017	83 c8 ff	 or	 eax, -1
  0001a	2b 46 14	 sub	 eax, DWORD PTR [esi+20]
  0001d	3b c5		 cmp	 eax, ebp
  0001f	77 05		 ja	 SHORT $LN2@insert

; 1200 : 			_String_base::_Xlen();	// result too long

  00021	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN2@insert:

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00026	85 ed		 test	 ebp, ebp
  00028	0f 86 c7 00 00
	00		 jbe	 $LN80@insert
  0002e	53		 push	 ebx
  0002f	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00032	03 dd		 add	 ebx, ebp
  00034	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00037	76 05		 jbe	 SHORT $LN11@insert
  00039	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN11@insert:
  0003e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00041	3b c3		 cmp	 eax, ebx
  00043	73 25		 jae	 SHORT $LN10@insert
  00045	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00048	51		 push	 ecx
  00049	53		 push	 ebx
  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00051	85 db		 test	 ebx, ebx
$LN83@insert:
  00053	0f 86 9b 00 00
	00		 jbe	 $LN81@insert

; 1203 : 			{	// make room and insert new stuff
; 1204 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1205 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

  00059	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005c	83 f8 10	 cmp	 eax, 16			; 00000010H
  0005f	72 32		 jb	 SHORT $LN58@insert
  00061	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00064	89 54 24 14	 mov	 DWORD PTR tv188[esp+12], edx
  00068	eb 30		 jmp	 SHORT $LN59@insert

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN10@insert:
  0006a	85 db		 test	 ebx, ebx
  0006c	75 e5		 jne	 SHORT $LN83@insert
  0006e	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00071	83 f8 10	 cmp	 eax, 16			; 00000010H
  00074	72 0e		 jb	 SHORT $LN52@insert
  00076	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00079	88 18		 mov	 BYTE PTR [eax], bl
  0007b	5b		 pop	 ebx
  0007c	5f		 pop	 edi

; 1208 : 			}
; 1209 : 		return (*this);

  0007d	8b c6		 mov	 eax, esi
  0007f	5e		 pop	 esi
  00080	5d		 pop	 ebp

; 1210 : 		}

  00081	c2 0c 00	 ret	 12			; 0000000cH

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN52@insert:
  00084	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00087	5b		 pop	 ebx
  00088	5f		 pop	 edi
  00089	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1208 : 			}
; 1209 : 		return (*this);

  0008c	8b c6		 mov	 eax, esi
  0008e	5e		 pop	 esi
  0008f	5d		 pop	 ebp

; 1210 : 		}

  00090	c2 0c 00	 ret	 12			; 0000000cH

; 1203 : 			{	// make room and insert new stuff
; 1204 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1205 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

$LN58@insert:
  00093	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00096	89 4c 24 14	 mov	 DWORD PTR tv188[esp+12], ecx
$LN59@insert:
  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	72 05		 jb	 SHORT $LN62@insert
  0009f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000a2	eb 03		 jmp	 SHORT $LN63@insert
$LN62@insert:
  000a4	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
$LN63@insert:
  000a7	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000aa	2b d7		 sub	 edx, edi
  000ac	52		 push	 edx
  000ad	8b 54 24 18	 mov	 edx, DWORD PTR tv188[esp+16]
  000b1	03 d7		 add	 edx, edi
  000b3	2b c7		 sub	 eax, edi
  000b5	52		 push	 edx
  000b6	2b c5		 sub	 eax, ebp
  000b8	03 cf		 add	 ecx, edi
  000ba	50		 push	 eax
  000bb	03 cd		 add	 ecx, ebp
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 _memmove_s

; 1206 : 			_Chassign(_Off, _Count, _Ch);	// fill hole

  000c3	8b 44 24 2c	 mov	 eax, DWORD PTR __Ch$[esp+28]
  000c7	83 c4 10	 add	 esp, 16			; 00000010H
  000ca	50		 push	 eax
  000cb	55		 push	 ebp
  000cc	57		 push	 edi
  000cd	8b ce		 mov	 ecx, esi
  000cf	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1207 : 			_Eos(_Num);

  000d4	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000d8	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  000db	72 10		 jb	 SHORT $LN76@insert
  000dd	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000e0	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
  000e4	5b		 pop	 ebx
  000e5	5f		 pop	 edi

; 1208 : 			}
; 1209 : 		return (*this);

  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	5d		 pop	 ebp

; 1210 : 		}

  000ea	c2 0c 00	 ret	 12			; 0000000cH

; 1207 : 			_Eos(_Num);

$LN76@insert:
  000ed	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000f0	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
$LN81@insert:
  000f4	5b		 pop	 ebx
$LN80@insert:
  000f5	5f		 pop	 edi

; 1208 : 			}
; 1209 : 		return (*this);

  000f6	8b c6		 mov	 eax, esi
  000f8	5e		 pop	 esi
  000f9	5d		 pop	 ebp

; 1210 : 		}

  000fa	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Make_iter
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

  00000	56		 push	 esi
  00001	57		 push	 edi

; 661  : 		return (iterator(_Where._Myptr, this));

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0000e	85 f6		 test	 esi, esi
  00010	74 0e		 je	 SHORT $LN8@Make_iter
  00012	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
  00016	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  00019	77 05		 ja	 SHORT $LN8@Make_iter
  0001b	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  0001e	76 09		 jbe	 SHORT $LN7@Make_iter
$LN8@Make_iter:
  00020	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00025	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
$LN7@Make_iter:
  00029	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002b	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0002e	89 0f		 mov	 DWORD PTR [edi], ecx
  00030	8b c7		 mov	 eax, edi
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi

; 662  : 		}

  00034	c2 0c 00	 ret	 12			; 0000000cH
?_Make_iter@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Make_iter
; Function compile flags: /Ogtpy
;	COMDAT ?_Make_iter@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

  00000	56		 push	 esi
  00001	57		 push	 edi

; 661  : 		return (iterator(_Where._Myptr, this));

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0000e	85 f6		 test	 esi, esi
  00010	74 0e		 je	 SHORT $LN8@Make_iter@2
  00012	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
  00016	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  00019	77 05		 ja	 SHORT $LN8@Make_iter@2
  0001b	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  0001e	76 09		 jbe	 SHORT $LN7@Make_iter@2
$LN8@Make_iter@2:
  00020	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00025	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
$LN7@Make_iter@2:
  00029	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002b	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0002e	89 0f		 mov	 DWORD PTR [edi], ecx
  00030	8b c7		 mov	 eax, edi
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi

; 662  : 		}

  00034	c2 0c 00	 ret	 12			; 0000000cH
?_Make_iter@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Make_iter
_TEXT	ENDS
PUBLIC	?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T160431 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::grouping, COMDAT
; _this$ = ecx

; 79   : 		{	// return grouping string

  00000	51		 push	 ecx

; 80   : 		return (do_grouping());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T160431[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 81   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::grouping
_TEXT	ENDS
PUBLIC	??1_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node::~_Node
; Function compile flags: /Ogtpy
;	COMDAT ??1_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node::~_Node, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $LN20@Node
  00009	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN20@Node:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH
  0001e	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00021	88 46 0c	 mov	 BYTE PTR [esi+12], al
  00024	5e		 pop	 esi
  00025	c3		 ret	 0
??1_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node::~_Node
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 941  : 		return (append((size_type)1, _Ch));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	50		 push	 eax
  00005	6a 01		 push	 1
  00007	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 942  : 		}

  0000c	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1089 : 		{	// assign _Count * _Ch

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1090 : 		if (_Count == npos)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Count$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	83 ff ff	 cmp	 edi, -1
  0000b	75 07		 jne	 SHORT $LN2@assign

; 1091 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen

; 1092 : 
; 1093 : 		if (_Grow(_Count))

  00012	eb 05		 jmp	 SHORT $LN63@assign
$LN2@assign:
  00014	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00017	76 05		 jbe	 SHORT $LN10@assign
$LN63@assign:
  00019	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN10@assign:
  0001e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00021	3b c7		 cmp	 eax, edi
  00023	73 36		 jae	 SHORT $LN9@assign
  00025	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00028	50		 push	 eax
  00029	57		 push	 edi
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00031	85 ff		 test	 edi, edi
$LN65@assign:
  00033	76 53		 jbe	 SHORT $LN64@assign

; 1094 : 			{	// make room and assign new stuff
; 1095 : 			_Chassign(0, _Count, _Ch);

  00035	8b 4c 24 10	 mov	 ecx, DWORD PTR __Ch$[esp+4]
  00039	51		 push	 ecx
  0003a	57		 push	 edi
  0003b	6a 00		 push	 0
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1096 : 			_Eos(_Count);

  00044	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00048	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0004b	72 34		 jb	 SHORT $LN59@assign
  0004d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00050	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  00054	5f		 pop	 edi

; 1097 : 			}
; 1098 : 		return (*this);

  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi

; 1099 : 		}

  00058	c2 08 00	 ret	 8

; 1092 : 
; 1093 : 		if (_Grow(_Count))

$LN9@assign:
  0005b	85 ff		 test	 edi, edi
  0005d	75 d4		 jne	 SHORT $LN65@assign
  0005f	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00062	83 f8 10	 cmp	 eax, 16			; 00000010H
  00065	72 0d		 jb	 SHORT $LN51@assign
  00067	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0006a	c6 00 00	 mov	 BYTE PTR [eax], 0
  0006d	5f		 pop	 edi

; 1097 : 			}
; 1098 : 		return (*this);

  0006e	8b c6		 mov	 eax, esi
  00070	5e		 pop	 esi

; 1099 : 		}

  00071	c2 08 00	 ret	 8

; 1092 : 
; 1093 : 		if (_Grow(_Count))

$LN51@assign:
  00074	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00077	c6 00 00	 mov	 BYTE PTR [eax], 0
  0007a	5f		 pop	 edi

; 1097 : 			}
; 1098 : 		return (*this);

  0007b	8b c6		 mov	 eax, esi
  0007d	5e		 pop	 esi

; 1099 : 		}

  0007e	c2 08 00	 ret	 8

; 1096 : 			_Eos(_Count);

$LN59@assign:
  00081	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00084	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN64@assign:
  00088	5f		 pop	 edi

; 1097 : 			}
; 1098 : 		return (*this);

  00089	8b c6		 mov	 eax, esi
  0008b	5e		 pop	 esi

; 1099 : 		}

  0008c	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?begin@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?begin@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Iterator@$00@12@XZ PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin, COMDAT
; _this$ = ecx

; 534  : 		return (iterator(_Nextnode(_Myhead), this));

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 535  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Iterator@$00@12@XZ ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
_TEXT	ENDS
PUBLIC	??0?$_List_ptr@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ; std::_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_List_ptr@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_ptr@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z PROC ; std::_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 67   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN13@List_ptr@2
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 68   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 67   : 		{	// construct base, and allocator from _Al

$LN13@List_ptr@2:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 68   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_ptr@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ENDP ; std::_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_List_ptr<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	?_Make_iter@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Make_iter
; Function compile flags: /Ogtpy
;	COMDAT ?_Make_iter@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Make_iter, COMDAT
; _this$ = ecx

; 554  : 		return (iterator(_Where._Ptr, this));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Where$[esp]
  00004	56		 push	 esi
  00005	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN7@Make_iter@3
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@Make_iter@3:
  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 555  : 		}

  00026	c2 0c 00	 ret	 12			; 0000000cH
?_Make_iter@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Make_iter
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@

; 31   : 		}

  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN19@logic_erro
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN19@logic_erro:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 35   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN7@what
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 36   : 		}

  00009	c3		 ret	 0

; 35   : 		return (_Str.c_str());

$LN7@what:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 36   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN22@scalar@18
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN22@scalar@18:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN32@scalar@18
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN32@scalar@18:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@runtime_error@std@@UBEPBDXZ		; std::runtime_error::what
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@runtime_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	ENDS
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx

; 157  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 158  : 		}

  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN19@runtime_er
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN19@runtime_er:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?what@runtime_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@runtime_error@std@@UBEPBDXZ PROC			; std::runtime_error::what, COMDAT
; _this$ = ecx

; 162  : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN7@what@2
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 163  : 		}

  00009	c3		 ret	 0

; 162  : 		return (_Str.c_str());

$LN7@what@2:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 163  : 		}

  0000d	c3		 ret	 0
?what@runtime_error@std@@UBEPBDXZ ENDP			; std::runtime_error::what
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN22@scalar@19
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN22@scalar@19:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN32@scalar@19
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN32@scalar@19:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:PROC ; std::_Locinfo::_Locinfo_ctor
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_locstr$ = 8						; size = 4
??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 96   : 		{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	33 db		 xor	 ebx, ebx
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00031	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  00036	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00039	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  0003c	89 5c 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], ebx
  00040	88 5e 08	 mov	 BYTE PTR [esi+8], bl
  00043	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00046	89 5e 34	 mov	 DWORD PTR [esi+52], ebx
  00049	88 5e 24	 mov	 BYTE PTR [esi+36], bl
  0004c	89 46 54	 mov	 DWORD PTR [esi+84], eax
  0004f	89 5e 50	 mov	 DWORD PTR [esi+80], ebx
  00052	88 5e 40	 mov	 BYTE PTR [esi+64], bl
  00055	89 46 70	 mov	 DWORD PTR [esi+112], eax
  00058	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  0005b	88 5e 5c	 mov	 BYTE PTR [esi+92], bl

; 97   :         _Locinfo_ctor(this, locstr);

  0005e	8b 44 24 20	 mov	 eax, DWORD PTR _locstr$[esp+24]
  00062	50		 push	 eax
  00063	56		 push	 esi
  00064	c6 44 24 20 04	 mov	 BYTE PTR __$EHRec$[esp+44], 4
  00069	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Locinfo::_Locinfo_ctor
  0006e	83 c4 08	 add	 esp, 8

; 98   : 		}

  00071	8b c6		 mov	 eax, esi
  00073	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	83 c4 10	 add	 esp, 16			; 00000010H
  00084	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 20	 add	 ecx, 32			; 00000020H
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 58	 add	 ecx, 88			; 00000058H
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0003b	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1_Locinfo@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1_Locinfo@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 101  :         {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1_Locinfo@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	55		 push	 ebp
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 14	 mov	 DWORD PTR _this$[esp+36], esi

; 102  :         _Locinfo_dtor(this);

  0002b	56		 push	 esi
  0002c	c7 44 24 24 04
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 4
  00034	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor

; 103  :         }

  00039	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  0003e	83 c4 04	 add	 esp, 4
  00041	39 6e 70	 cmp	 DWORD PTR [esi+112], ebp
  00044	72 0c		 jb	 SHORT $LN24@Locinfo
  00046	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004f	83 c4 04	 add	 esp, 4
$LN24@Locinfo:
  00052	33 db		 xor	 ebx, ebx
  00054	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00059	89 7e 70	 mov	 DWORD PTR [esi+112], edi
  0005c	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  0005f	88 5e 5c	 mov	 BYTE PTR [esi+92], bl
  00062	39 6e 54	 cmp	 DWORD PTR [esi+84], ebp
  00065	72 0c		 jb	 SHORT $LN50@Locinfo
  00067	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00070	83 c4 04	 add	 esp, 4
$LN50@Locinfo:
  00073	89 7e 54	 mov	 DWORD PTR [esi+84], edi
  00076	89 5e 50	 mov	 DWORD PTR [esi+80], ebx
  00079	88 5e 40	 mov	 BYTE PTR [esi+64], bl
  0007c	39 6e 38	 cmp	 DWORD PTR [esi+56], ebp
  0007f	72 0c		 jb	 SHORT $LN76@Locinfo
  00081	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008a	83 c4 04	 add	 esp, 4
$LN76@Locinfo:
  0008d	89 7e 38	 mov	 DWORD PTR [esi+56], edi
  00090	89 5e 34	 mov	 DWORD PTR [esi+52], ebx
  00093	88 5e 24	 mov	 BYTE PTR [esi+36], bl
  00096	39 6e 1c	 cmp	 DWORD PTR [esi+28], ebp
  00099	72 0c		 jb	 SHORT $LN102@Locinfo
  0009b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a4	83 c4 04	 add	 esp, 4
$LN102@Locinfo:
  000a7	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  000aa	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ad	8b ce		 mov	 ecx, esi
  000af	88 5e 08	 mov	 BYTE PTR [esi+8], bl
  000b2	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1
  000ba	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000bf	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ca	59		 pop	 ecx
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5d		 pop	 ebp
  000ce	5b		 pop	 ebx
  000cf	83 c4 10	 add	 esp, 16			; 00000010H
  000d2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 20	 add	 ecx, 32			; 00000020H
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 58	 add	 ecx, 88			; 00000058H
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0003b	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??1HostDevice@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1HostDevice@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1HostDevice@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1HostDevice@@QAE@XZ$2
__ehfuncinfo$??1HostDevice@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1HostDevice@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\common\dlgcode.h
xdata$x	ENDS
;	COMDAT ??1HostDevice@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1HostDevice@@QAE@XZ PROC				; HostDevice::~HostDevice, COMDAT
; _this$ = ecx

; 479  : 	~HostDevice () { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1HostDevice@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  0002c	c7 44 24 18 02
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 2
  00034	e8 00 00 00 00	 call	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
  00039	83 7e 58 10	 cmp	 DWORD PTR [esi+88], 16	; 00000010H
  0003d	72 0c		 jb	 SHORT $LN23@HostDevice
  0003f	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00048	83 c4 04	 add	 esp, 4
$LN23@HostDevice:
  0004b	33 db		 xor	 ebx, ebx
  0004d	c7 46 58 0f 00
	00 00		 mov	 DWORD PTR [esi+88], 15	; 0000000fH
  00054	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
  00057	88 5e 44	 mov	 BYTE PTR [esi+68], bl
  0005a	83 7e 3c 08	 cmp	 DWORD PTR [esi+60], 8
  0005e	72 0c		 jb	 SHORT $LN51@HostDevice
  00060	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00069	83 c4 04	 add	 esp, 4
$LN51@HostDevice:
  0006c	33 d2		 xor	 edx, edx
  0006e	c7 46 3c 07 00
	00 00		 mov	 DWORD PTR [esi+60], 7
  00075	89 5e 38	 mov	 DWORD PTR [esi+56], ebx
  00078	66 89 56 28	 mov	 WORD PTR [esi+40], dx
  0007c	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  00080	72 0c		 jb	 SHORT $LN77@HostDevice
  00082	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008b	83 c4 04	 add	 esp, 4
$LN77@HostDevice:
  0008e	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH
  00095	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
  00098	88 5e 0c	 mov	 BYTE PTR [esi+12], bl
  0009b	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	83 c4 10	 add	 esp, 16			; 00000010H
  000ac	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1HostDevice@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1HostDevice@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 24	 add	 ecx, 36			; 00000024H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??1HostDevice@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 40	 add	 ecx, 64			; 00000040H
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??1HostDevice@@QAE@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00028	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1HostDevice@@QAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1HostDevice@@QAE@XZ ENDP				; HostDevice::~HostDevice
PUBLIC	??0FavoriteVolume@CipherShed@@QAE@XZ		; CipherShed::FavoriteVolume::FavoriteVolume
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\favorites.h
;	COMDAT ??0FavoriteVolume@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0FavoriteVolume@CipherShed@@QAE@XZ PROC		; CipherShed::FavoriteVolume::FavoriteVolume, COMDAT
; _this$ = ecx

; 31   : 		{

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00007	ba 0f 00 00 00	 mov	 edx, 15			; 0000000fH
  0000c	89 50 18	 mov	 DWORD PTR [eax+24], edx
  0000f	88 48 04	 mov	 BYTE PTR [eax+4], cl
  00012	89 50 34	 mov	 DWORD PTR [eax+52], edx
  00015	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  00018	88 48 20	 mov	 BYTE PTR [eax+32], cl
  0001b	89 50 50	 mov	 DWORD PTR [eax+80], edx
  0001e	89 48 4c	 mov	 DWORD PTR [eax+76], ecx
  00021	88 48 3c	 mov	 BYTE PTR [eax+60], cl
  00024	c7 40 6c 07 00
	00 00		 mov	 DWORD PTR [eax+108], 7
  0002b	89 48 68	 mov	 DWORD PTR [eax+104], ecx
  0002e	33 d2		 xor	 edx, edx
  00030	66 89 50 58	 mov	 WORD PTR [eax+88], dx
  00034	88 48 70	 mov	 BYTE PTR [eax+112], cl
  00037	88 48 71	 mov	 BYTE PTR [eax+113], cl
  0003a	88 48 72	 mov	 BYTE PTR [eax+114], cl
  0003d	88 48 73	 mov	 BYTE PTR [eax+115], cl
  00040	88 48 74	 mov	 BYTE PTR [eax+116], cl
  00043	88 48 75	 mov	 BYTE PTR [eax+117], cl
  00046	88 48 76	 mov	 BYTE PTR [eax+118], cl
  00049	88 48 77	 mov	 BYTE PTR [eax+119], cl

; 32   : 		}

  0004c	c3		 ret	 0
??0FavoriteVolume@CipherShed@@QAE@XZ ENDP		; CipherShed::FavoriteVolume::FavoriteVolume
_TEXT	ENDS
PUBLIC	??1FavoriteVolume@CipherShed@@QAE@XZ		; CipherShed::FavoriteVolume::~FavoriteVolume
; Function compile flags: /Ogtpy
;	COMDAT ??1FavoriteVolume@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1FavoriteVolume@CipherShed@@QAE@XZ PROC		; CipherShed::FavoriteVolume::~FavoriteVolume, COMDAT
; _this$ = ecx
  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	83 7e 6c 08	 cmp	 DWORD PTR [esi+108], 8
  00008	72 0c		 jb	 SHORT $LN25@FavoriteVo
  0000a	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00013	83 c4 04	 add	 esp, 4
$LN25@FavoriteVo:
  00016	33 db		 xor	 ebx, ebx
  00018	33 c9		 xor	 ecx, ecx
  0001a	c7 46 6c 07 00
	00 00		 mov	 DWORD PTR [esi+108], 7
  00021	89 5e 68	 mov	 DWORD PTR [esi+104], ebx
  00024	66 89 4e 58	 mov	 WORD PTR [esi+88], cx
  00028	83 7e 50 10	 cmp	 DWORD PTR [esi+80], 16	; 00000010H
  0002c	72 0c		 jb	 SHORT $LN51@FavoriteVo
  0002e	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00037	83 c4 04	 add	 esp, 4
$LN51@FavoriteVo:
  0003a	c7 46 50 0f 00
	00 00		 mov	 DWORD PTR [esi+80], 15	; 0000000fH
  00041	89 5e 4c	 mov	 DWORD PTR [esi+76], ebx
  00044	88 5e 3c	 mov	 BYTE PTR [esi+60], bl
  00047	83 7e 34 10	 cmp	 DWORD PTR [esi+52], 16	; 00000010H
  0004b	72 0c		 jb	 SHORT $LN77@FavoriteVo
  0004d	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4
$LN77@FavoriteVo:
  00059	c7 46 34 0f 00
	00 00		 mov	 DWORD PTR [esi+52], 15	; 0000000fH
  00060	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  00063	88 5e 20	 mov	 BYTE PTR [esi+32], bl
  00066	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0006a	72 0c		 jb	 SHORT $LN103@FavoriteVo
  0006c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
$LN103@FavoriteVo:
  00078	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0007b	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00082	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	c3		 ret	 0
??1FavoriteVolume@CipherShed@@QAE@XZ ENDP		; CipherShed::FavoriteVolume::~FavoriteVolume
_TEXT	ENDS
PUBLIC	??_C@_01OGPIMHDM@?$DP?$AA@			; `string'
PUBLIC	??_C@_0BM@HDAHKLF@PROCESSED_PORTION_X_PERCENT?$AA@ ; `string'
PUBLIC	__real@4059000000000000
PUBLIC	??_C@_0CA@EPNHMBGD@ENCRYPTED_PORTION_NOT_ENCRYPTED?$AA@ ; `string'
PUBLIC	??_C@_0CC@FDEMMPMK@ENCRYPTED_PORTION_FULLY_ENCRYPTE@ ; `string'
PUBLIC	??_C@_0BC@EBMHNMJD@ENCRYPTED_PORTION?$AA@	; `string'
PUBLIC	??_C@_0BH@HPIFIMHF@TC_BOOT_LOADER_VERSION?$AA@	; `string'
PUBLIC	??_C@_0BD@JBAOAAB@TOTAL_DATA_WRITTEN?$AA@	; `string'
PUBLIC	??_C@_0BA@IKOIIHIN@TOTAL_DATA_READ?$AA@		; `string'
PUBLIC	??_C@_0O@FKDNIFFO@BACKUP_HEADER?$AA@		; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_0BG@KEFCFEKB@VOLUME_FORMAT_VERSION?$AA@	; `string'
PUBLIC	??_C@_09KAGLGJME@PKCS5_PRF?$AA@			; `string'
PUBLIC	??_C@_0BC@KECMIANL@MODE_OF_OPERATION?$AA@	; `string'
PUBLIC	??_C@_17BIBMKONG@?$AA?$CF?$AAd?$AA?5?$AA?$AA@	; `string'
PUBLIC	??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@		; `string'
PUBLIC	??_C@_17FJKOKELN@?$AA?1?$AA?$CF?$AAd?$AA?$AA@	; `string'
PUBLIC	??_C@_15KNBIKKIN@?$AA?$CF?$AAd?$AA?$AA@		; `string'
PUBLIC	??_C@_0L@PGLNCJOA@BLOCK_SIZE?$AA@		; `string'
PUBLIC	??_C@_0BH@CBHGPDIL@SECONDARY_KEY_SIZE_LRW?$AA@	; `string'
PUBLIC	??_C@_03JFLLPGCL@LRW?$AA@			; `string'
PUBLIC	??_C@_0BH@JOOMIKPF@SECONDARY_KEY_SIZE_XTS?$AA@	; `string'
PUBLIC	??_C@_03CKCBIPFF@XTS?$AA@			; `string'
PUBLIC	??_C@_1M@LCJMIND@?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_04HNBJMIH@BITS?$AA@			; `string'
PUBLIC	??_C@_08BKFDBOMO@KEY_SIZE?$AA@			; `string'
PUBLIC	??_C@_0L@NEGMAKNF@Triple?5DES?$AA@		; `string'
PUBLIC	??_C@_0BF@IHNHLCAB@ENCRYPTION_ALGORITHM?$AA@	; `string'
PUBLIC	??_C@_0BJ@JMEOPGAH@HID_VOL_DAMAGE_PREVENTED?$AA@ ; `string'
PUBLIC	??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@ ; `string'
PUBLIC	??_C@_0BG@NHADNFHI@HIDDEN_VOL_PROTECTION?$AA@	; `string'
PUBLIC	??_C@_09JHINKGCK@UISTR_YES?$AA@			; `string'
PUBLIC	??_C@_08EOJLPPDK@UISTR_NO?$AA@			; `string'
PUBLIC	??_C@_09COKLNMKA@READ_ONLY?$AA@			; `string'
PUBLIC	??_C@_06IOJAGNKJ@NORMAL?$AA@			; `string'
PUBLIC	??_C@_05PKHDEOFG@OUTER?$AA@			; `string'
PUBLIC	??_C@_06JMIOFMHI@HIDDEN?$AA@			; `string'
PUBLIC	??_C@_0BN@OIBEPDD@SYSTEM_VOLUME_TYPE_ADJECTIVE?$AA@ ; `string'
PUBLIC	??_C@_0BN@DBMDCCJC@TYPE_HIDDEN_SYSTEM_ADJECTIVE?$AA@ ; `string'
PUBLIC	??_C@_04KDPJLEDB@TYPE?$AA@			; `string'
PUBLIC	??_C@_1BC@FBJLKEEF@?$AA?$CF?$AAI?$AA6?$AA4?$AAu?$AA?5?$AA?$CF?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_05JKAGIBMI@BYTES?$AA@			; `string'
PUBLIC	??_C@_04EMFHLKGI@SIZE?$AA@			; `string'
PUBLIC	??_C@_0BB@NIFEDNAB@SYSTEM_PARTITION?$AA@	; `string'
PUBLIC	??_C@_0BI@NAKILHP@HIDDEN_SYSTEM_PARTITION?$AA@	; `string'
PUBLIC	??_C@_0N@JCIDDNEG@SYSTEM_DRIVE?$AA@		; `string'
PUBLIC	??_C@_08FOLJKLOE@LOCATION?$AA@			; `string'
PUBLIC	??_C@_08DDLBCDJK@PROPERTY?$AA@			; `string'
PUBLIC	??_C@_05MHMCHENB@VALUE?$AA@			; `string'
PUBLIC	??_C@_0BG@JEJOMNKK@IDD_VOLUME_PROPERTIES?$AA@	; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z	; VolumePropertiesDlgProc
EXTRN	__snwprintf:PROC
EXTRN	?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z:PROC ; GetUserFriendlyVersionString
EXTRN	_GetSizeString:PROC
EXTRN	_EAGetFirstMode:PROC
EXTRN	_EAGetFirstCipher:PROC
EXTRN	_EAGetModeName:PROC
EXTRN	__imp__wsprintfW:PROC
EXTRN	_EAGetKeySize:PROC
EXTRN	_ListSubItemSet:PROC
EXTRN	_EAGetName:PROC
EXTRN	_EAGetCount:PROC
EXTRN	_ListSubItemSetW:PROC
EXTRN	_ListItemAddW:PROC
EXTRN	?GetVolumeProperties@BootEncryption@CipherShed@@QAEXPAUVOLUME_PROPERTIES_STRUCT@@@Z:PROC ; CipherShed::BootEncryption::GetVolumeProperties
EXTRN	_CompensateXDPI:PROC
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_01OGPIMHDM@?$DP?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP?$AA@ DB '?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HDAHKLF@PROCESSED_PORTION_X_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BM@HDAHKLF@PROCESSED_PORTION_X_PERCENT?$AA@ DB 'PROCESSED_PORTION_'
	DB	'X_PERCENT', 00H				; `string'
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT ??_C@_0CA@EPNHMBGD@ENCRYPTED_PORTION_NOT_ENCRYPTED?$AA@
CONST	SEGMENT
??_C@_0CA@EPNHMBGD@ENCRYPTED_PORTION_NOT_ENCRYPTED?$AA@ DB 'ENCRYPTED_POR'
	DB	'TION_NOT_ENCRYPTED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FDEMMPMK@ENCRYPTED_PORTION_FULLY_ENCRYPTE@
CONST	SEGMENT
??_C@_0CC@FDEMMPMK@ENCRYPTED_PORTION_FULLY_ENCRYPTE@ DB 'ENCRYPTED_PORTIO'
	DB	'N_FULLY_ENCRYPTED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EBMHNMJD@ENCRYPTED_PORTION?$AA@
CONST	SEGMENT
??_C@_0BC@EBMHNMJD@ENCRYPTED_PORTION?$AA@ DB 'ENCRYPTED_PORTION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HPIFIMHF@TC_BOOT_LOADER_VERSION?$AA@
CONST	SEGMENT
??_C@_0BH@HPIFIMHF@TC_BOOT_LOADER_VERSION?$AA@ DB 'TC_BOOT_LOADER_VERSION'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JBAOAAB@TOTAL_DATA_WRITTEN?$AA@
CONST	SEGMENT
??_C@_0BD@JBAOAAB@TOTAL_DATA_WRITTEN?$AA@ DB 'TOTAL_DATA_WRITTEN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IKOIIHIN@TOTAL_DATA_READ?$AA@
CONST	SEGMENT
??_C@_0BA@IKOIIHIN@TOTAL_DATA_READ?$AA@ DB 'TOTAL_DATA_READ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FKDNIFFO@BACKUP_HEADER?$AA@
CONST	SEGMENT
??_C@_0O@FKDNIFFO@BACKUP_HEADER?$AA@ DB 'BACKUP_HEADER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KEFCFEKB@VOLUME_FORMAT_VERSION?$AA@
CONST	SEGMENT
??_C@_0BG@KEFCFEKB@VOLUME_FORMAT_VERSION?$AA@ DB 'VOLUME_FORMAT_VERSION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KAGLGJME@PKCS5_PRF?$AA@
CONST	SEGMENT
??_C@_09KAGLGJME@PKCS5_PRF?$AA@ DB 'PKCS5_PRF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KECMIANL@MODE_OF_OPERATION?$AA@
CONST	SEGMENT
??_C@_0BC@KECMIANL@MODE_OF_OPERATION?$AA@ DB 'MODE_OF_OPERATION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17BIBMKONG@?$AA?$CF?$AAd?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_17BIBMKONG@?$AA?$CF?$AAd?$AA?5?$AA?$AA@ DB '%', 00H, 'd', 00H, ' ', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@ DB ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_17FJKOKELN@?$AA?1?$AA?$CF?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_17FJKOKELN@?$AA?1?$AA?$CF?$AAd?$AA?$AA@ DB '/', 00H, '%', 00H, 'd', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_15KNBIKKIN@?$AA?$CF?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_15KNBIKKIN@?$AA?$CF?$AAd?$AA?$AA@ DB '%', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PGLNCJOA@BLOCK_SIZE?$AA@
CONST	SEGMENT
??_C@_0L@PGLNCJOA@BLOCK_SIZE?$AA@ DB 'BLOCK_SIZE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CBHGPDIL@SECONDARY_KEY_SIZE_LRW?$AA@
CONST	SEGMENT
??_C@_0BH@CBHGPDIL@SECONDARY_KEY_SIZE_LRW?$AA@ DB 'SECONDARY_KEY_SIZE_LRW'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03JFLLPGCL@LRW?$AA@
CONST	SEGMENT
??_C@_03JFLLPGCL@LRW?$AA@ DB 'LRW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JOOMIKPF@SECONDARY_KEY_SIZE_XTS?$AA@
CONST	SEGMENT
??_C@_0BH@JOOMIKPF@SECONDARY_KEY_SIZE_XTS?$AA@ DB 'SECONDARY_KEY_SIZE_XTS'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03CKCBIPFF@XTS?$AA@
CONST	SEGMENT
??_C@_03CKCBIPFF@XTS?$AA@ DB 'XTS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@LCJMIND@?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1M@LCJMIND@?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@ DB '%', 00H, 'd'
	DB	00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HNBJMIH@BITS?$AA@
CONST	SEGMENT
??_C@_04HNBJMIH@BITS?$AA@ DB 'BITS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BKFDBOMO@KEY_SIZE?$AA@
CONST	SEGMENT
??_C@_08BKFDBOMO@KEY_SIZE?$AA@ DB 'KEY_SIZE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NEGMAKNF@Triple?5DES?$AA@
CONST	SEGMENT
??_C@_0L@NEGMAKNF@Triple?5DES?$AA@ DB 'Triple DES', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IHNHLCAB@ENCRYPTION_ALGORITHM?$AA@
CONST	SEGMENT
??_C@_0BF@IHNHLCAB@ENCRYPTION_ALGORITHM?$AA@ DB 'ENCRYPTION_ALGORITHM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JMEOPGAH@HID_VOL_DAMAGE_PREVENTED?$AA@
CONST	SEGMENT
??_C@_0BJ@JMEOPGAH@HID_VOL_DAMAGE_PREVENTED?$AA@ DB 'HID_VOL_DAMAGE_PREVE'
	DB	'NTED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@
CONST	SEGMENT
??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@ DB 'NOT_APPLICABL'
	DB	'E_OR_NOT_AVAILABLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NHADNFHI@HIDDEN_VOL_PROTECTION?$AA@
CONST	SEGMENT
??_C@_0BG@NHADNFHI@HIDDEN_VOL_PROTECTION?$AA@ DB 'HIDDEN_VOL_PROTECTION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JHINKGCK@UISTR_YES?$AA@
CONST	SEGMENT
??_C@_09JHINKGCK@UISTR_YES?$AA@ DB 'UISTR_YES', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EOJLPPDK@UISTR_NO?$AA@
CONST	SEGMENT
??_C@_08EOJLPPDK@UISTR_NO?$AA@ DB 'UISTR_NO', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09COKLNMKA@READ_ONLY?$AA@
CONST	SEGMENT
??_C@_09COKLNMKA@READ_ONLY?$AA@ DB 'READ_ONLY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IOJAGNKJ@NORMAL?$AA@
CONST	SEGMENT
??_C@_06IOJAGNKJ@NORMAL?$AA@ DB 'NORMAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PKHDEOFG@OUTER?$AA@
CONST	SEGMENT
??_C@_05PKHDEOFG@OUTER?$AA@ DB 'OUTER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JMIOFMHI@HIDDEN?$AA@
CONST	SEGMENT
??_C@_06JMIOFMHI@HIDDEN?$AA@ DB 'HIDDEN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OIBEPDD@SYSTEM_VOLUME_TYPE_ADJECTIVE?$AA@
CONST	SEGMENT
??_C@_0BN@OIBEPDD@SYSTEM_VOLUME_TYPE_ADJECTIVE?$AA@ DB 'SYSTEM_VOLUME_TYP'
	DB	'E_ADJECTIVE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DBMDCCJC@TYPE_HIDDEN_SYSTEM_ADJECTIVE?$AA@
CONST	SEGMENT
??_C@_0BN@DBMDCCJC@TYPE_HIDDEN_SYSTEM_ADJECTIVE?$AA@ DB 'TYPE_HIDDEN_SYST'
	DB	'EM_ADJECTIVE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04KDPJLEDB@TYPE?$AA@
CONST	SEGMENT
??_C@_04KDPJLEDB@TYPE?$AA@ DB 'TYPE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@FBJLKEEF@?$AA?$CF?$AAI?$AA6?$AA4?$AAu?$AA?5?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@FBJLKEEF@?$AA?$CF?$AAI?$AA6?$AA4?$AAu?$AA?5?$AA?$CF?$AAs?$AA?$AA@ DB '%'
	DB	00H, 'I', 00H, '6', 00H, '4', 00H, 'u', 00H, ' ', 00H, '%', 00H
	DB	's', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05JKAGIBMI@BYTES?$AA@
CONST	SEGMENT
??_C@_05JKAGIBMI@BYTES?$AA@ DB 'BYTES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EMFHLKGI@SIZE?$AA@
CONST	SEGMENT
??_C@_04EMFHLKGI@SIZE?$AA@ DB 'SIZE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NIFEDNAB@SYSTEM_PARTITION?$AA@
CONST	SEGMENT
??_C@_0BB@NIFEDNAB@SYSTEM_PARTITION?$AA@ DB 'SYSTEM_PARTITION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NAKILHP@HIDDEN_SYSTEM_PARTITION?$AA@
CONST	SEGMENT
??_C@_0BI@NAKILHP@HIDDEN_SYSTEM_PARTITION?$AA@ DB 'HIDDEN_SYSTEM_PARTITIO'
	DB	'N', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JCIDDNEG@SYSTEM_DRIVE?$AA@
CONST	SEGMENT
??_C@_0N@JCIDDNEG@SYSTEM_DRIVE?$AA@ DB 'SYSTEM_DRIVE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FOLJKLOE@LOCATION?$AA@
CONST	SEGMENT
??_C@_08FOLJKLOE@LOCATION?$AA@ DB 'LOCATION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DDLBCDJK@PROPERTY?$AA@
CONST	SEGMENT
??_C@_08DDLBCDJK@PROPERTY?$AA@ DB 'PROPERTY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHMCHENB@VALUE?$AA@
CONST	SEGMENT
??_C@_05MHMCHENB@VALUE?$AA@ DB 'VALUE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JEJOMNKK@IDD_VOLUME_PROPERTIES?$AA@
CONST	SEGMENT
??_C@_0BG@JEJOMNKK@IDD_VOLUME_PROPERTIES?$AA@ DB 'IDD_VOLUME_PROPERTIES', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z$6 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffacH
	DD	FLAT:__catch$?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z$2
__catchsym$?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z$5 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffb0H
	DD	FLAT:__catch$?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z$0
__unwindtable$?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z
	DD	02H
	DD	FLAT:__tryblocktable$?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z$6
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
xdata$x	ENDS
;	COMDAT ?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
$T163921 = -300						; size = 94
$T163919 = -206						; size = 94
$T163937 = -112						; size = 28
_e$136863 = -84						; size = 4
_e$136838 = -80						; size = 4
_dwResult$136829 = -76					; size = 4
_lvCol$136830 = -72					; size = 32
_bSysEnc$ = -40						; size = 4
tv301 = -36						; size = 8
_i$136917 = -32						; size = 4
_size$136901 = -32					; size = 4
_bSysEncWholeDrive$ = -32				; size = 4
_list$136831 = -28					; size = 4
tv1052 = -24						; size = 8
tv1049 = -24						; size = 8
tv1035 = -24						; size = 8
tv1032 = -24						; size = 8
tv715 = -24						; size = 8
_hwndDlg$GSCopy$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_prop$136828 = 0					; size = 596
_szTmp$136832 = 596					; size = 1024
_sw$136833 = 1620					; size = 2048
_tmpstr$136916 = 3668					; size = 128
_name$136900 = 3668					; size = 128
__$ArrayPad$ = 3796					; size = 4
_hwndDlg$ = 3808					; size = 4
_msg$ = 3812						; size = 4
_wParam$ = 3816						; size = 4
_lParam$ = 3820						; size = 4
?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z PROC	; VolumePropertiesDlgProc, COMDAT

; 2644 : {

  00000	55		 push	 ebp
  00001	8d ac 24 28 f1
	ff ff		 lea	 ebp, DWORD PTR [esp-3800]
  00008	81 ec d8 0e 00
	00		 sub	 esp, 3800		; 00000ed8H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 d4 0e 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 2645 : 	BOOL bSysEnc = (BOOL) lParam;
; 2646 : 	BOOL bSysEncWholeDrive = FALSE;
; 2647 : 	WORD lw = LOWORD (wParam);
; 2648 : 	int i = 0;
; 2649 : 
; 2650 : 	switch (msg)

  0003f	8b 85 e4 0e 00
	00		 mov	 eax, DWORD PTR _msg$[ebp]
  00045	83 e8 10	 sub	 eax, 16			; 00000010H
  00048	8b b5 e0 0e 00
	00		 mov	 esi, DWORD PTR _hwndDlg$[ebp]
  0004e	8b bd ec 0e 00
	00		 mov	 edi, DWORD PTR _lParam$[ebp]
  00054	89 75 ec	 mov	 DWORD PTR _hwndDlg$GSCopy$[ebp], esi
  00057	89 7d d8	 mov	 DWORD PTR _bSysEnc$[ebp], edi
  0005a	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _bSysEncWholeDrive$[ebp], 0
  00061	0f 84 08 0b 00
	00		 je	 $LN1@VolumeProp
  00067	2d 00 01 00 00	 sub	 eax, 256		; 00000100H
  0006c	74 16		 je	 SHORT $LN52@VolumeProp
  0006e	83 e8 01	 sub	 eax, 1

; 2984 : 	}
; 2985 : 
; 2986 : 	return 0;

  00071	75 75		 jne	 SHORT $LN77@VolumeProp

; 2971 : 		}
; 2972 : 
; 2973 : 	case WM_COMMAND:
; 2974 : 		if (lw == IDOK)

  00073	66 83 bd e8 0e
	00 00 01	 cmp	 WORD PTR _wParam$[ebp], 1
  0007b	75 6b		 jne	 SHORT $LN77@VolumeProp

; 2975 : 		{
; 2976 : 			EndDialog (hwndDlg, lw);

  0007d	6a 01		 push	 1

; 2977 : 			return 1;

  0007f	e9 f3 0a 00 00	 jmp	 $LN119@VolumeProp
$LN52@VolumeProp:

; 2651 : 	{
; 2652 : 	case WM_INITDIALOG:
; 2653 : 		{
; 2654 : 			VOLUME_PROPERTIES_STRUCT prop;
; 2655 : 			DWORD dwResult;
; 2656 : 
; 2657 : 			LVCOLUMNW lvCol;
; 2658 : 			HWND list = GetDlgItem (hwndDlg, IDC_VOLUME_PROPERTIES_LIST);

  00084	68 f2 03 00 00	 push	 1010			; 000003f2H
  00089	56		 push	 esi
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00090	8b d8		 mov	 ebx, eax
  00092	89 5d e4	 mov	 DWORD PTR _list$136831[ebp], ebx

; 2659 : 			char szTmp[1024];
; 2660 : 			wchar_t sw[1024];
; 2661 : 			wchar_t *s;
; 2662 : 
; 2663 : 			if (bSysEnc)

  00095	85 ff		 test	 edi, edi
  00097	74 6b		 je	 SHORT $LN51@VolumeProp

; 2664 : 			{
; 2665 : 				try
; 2666 : 				{
; 2667 : 					BootEncStatus = BootEncObj->GetStatus();

  00099	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0009f	8d 85 32 ff ff
	ff		 lea	 eax, DWORD PTR $T163919[ebp]
  000a5	50		 push	 eax
  000a6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000ad	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  000b2	8b f0		 mov	 esi, eax
  000b4	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  000b9	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  000be	f3 a5		 rep movsd

; 2668 : 					bSysEncWholeDrive = WholeSysDriveEncryption(FALSE);

  000c0	6a 00		 push	 0
  000c2	66 a5		 movsw
  000c4	e8 00 00 00 00	 call	 _WholeSysDriveEncryption
  000c9	83 c4 04	 add	 esp, 4

; 2674 : 				}
; 2675 : 
; 2676 : 				if (!BootEncStatus.DriveEncrypted && !BootEncStatus.DriveMounted)

  000cc	83 3d 0e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14, 0
  000d3	89 45 e0	 mov	 DWORD PTR _bSysEncWholeDrive$[ebp], eax
  000d6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000dd	75 71		 jne	 SHORT $LN46@VolumeProp
  000df	83 3d 06 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, 0
  000e6	75 68		 jne	 SHORT $LN46@VolumeProp
$LN77@VolumeProp:

; 2677 : 					return 0;

  000e8	33 c0		 xor	 eax, eax
  000ea	e9 94 0a 00 00	 jmp	 $LN55@VolumeProp
__catch$?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z$0:

; 2669 : 				}
; 2670 : 				catch (Exception &e)
; 2671 : 				{
; 2672 : 					e.Show (MainDlg);

  000ef	8b 4d b0	 mov	 ecx, DWORD PTR _e$136838[ebp]
  000f2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f4	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000f9	8b 12		 mov	 edx, DWORD PTR [edx]
  000fb	50		 push	 eax
  000fc	ff d2		 call	 edx

; 2673 : 					return 0;

  000fe	b8 00 00 00 00	 mov	 eax, $LN77@VolumeProp
  00103	c3		 ret	 0
$LN51@VolumeProp:

; 2678 : 			}
; 2679 : 			else
; 2680 : 			{
; 2681 : 				switch (LOWORD (GetSelectedLong (GetDlgItem (GetParent(hwndDlg), IDC_DRIVELIST))))

  00104	68 ef 03 00 00	 push	 1007			; 000003efH
  00109	56		 push	 esi
  0010a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00110	50		 push	 eax
  00111	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 _GetSelectedLong
  0011d	0f b7 c0	 movzx	 eax, ax
  00120	83 c4 04	 add	 esp, 4
  00123	83 e8 00	 sub	 eax, 0
  00126	0f 84 36 0a 00
	00		 je	 $LN45@VolumeProp
  0012c	83 e8 02	 sub	 eax, 2
  0012f	74 11		 je	 SHORT $LN42@VolumeProp
  00131	b9 01 00 00 00	 mov	 ecx, 1
  00136	2b c1		 sub	 eax, ecx
  00138	75 16		 jne	 SHORT $LN46@VolumeProp

; 2688 : 
; 2689 : 				case TC_MLIST_ITEM_NONSYS_VOL:
; 2690 : 					// NOP
; 2691 : 					break;
; 2692 : 
; 2693 : 				case TC_MLIST_ITEM_SYS_DRIVE:
; 2694 : 					// Encrypted system drive
; 2695 : 					bSysEnc = TRUE;

  0013a	89 4d d8	 mov	 DWORD PTR _bSysEnc$[ebp], ecx

; 2696 : 					bSysEncWholeDrive = TRUE;

  0013d	89 4d e0	 mov	 DWORD PTR _bSysEncWholeDrive$[ebp], ecx

; 2697 : 					break;

  00140	eb 0e		 jmp	 SHORT $LN46@VolumeProp
$LN42@VolumeProp:

; 2698 : 
; 2699 : 				case TC_MLIST_ITEM_SYS_PARTITION:
; 2700 : 					// Encrypted system partition
; 2701 : 					bSysEnc = TRUE;

  00142	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _bSysEnc$[ebp], 1

; 2702 : 					bSysEncWholeDrive = FALSE;

  00149	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _bSysEncWholeDrive$[ebp], 0
$LN46@VolumeProp:

; 2703 : 					break;
; 2704 : 				}
; 2705 : 			}
; 2706 : 
; 2707 : 			LocalizeDialog (hwndDlg, "IDD_VOLUME_PROPERTIES");

  00150	8b 7d ec	 mov	 edi, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00153	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@JEJOMNKK@IDD_VOLUME_PROPERTIES?$AA@
  00158	57		 push	 edi
  00159	e8 00 00 00 00	 call	 _LocalizeDialog

; 2708 : 
; 2709 : 			SendMessage (list,LVM_SETEXTENDEDLISTVIEWSTYLE, 0,
; 2710 : 				LVS_EX_FULLROWSELECT
; 2711 : 				|LVS_EX_HEADERDRAGDROP
; 2712 : 				|LVS_EX_LABELTIP
; 2713 : 				);

  0015e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SendMessageA@16
  00164	83 c4 08	 add	 esp, 8
  00167	68 30 40 00 00	 push	 16432			; 00004030H
  0016c	6a 00		 push	 0
  0016e	68 36 10 00 00	 push	 4150			; 00001036H
  00173	53		 push	 ebx
  00174	ff d6		 call	 esi

; 2714 : 
; 2715 : 			memset (&lvCol,0,sizeof(lvCol));

  00176	33 c0		 xor	 eax, eax
  00178	89 45 b8	 mov	 DWORD PTR _lvCol$136830[ebp], eax

; 2716 : 			lvCol.mask = LVCF_TEXT|LVCF_WIDTH|LVCF_SUBITEM|LVCF_FMT;
; 2717 : 			lvCol.pszText = GetString ("VALUE");

  0017b	68 00 00 00 00	 push	 OFFSET ??_C@_05MHMCHENB@VALUE?$AA@
  00180	89 45 bc	 mov	 DWORD PTR _lvCol$136830[ebp+4], eax
  00183	89 45 c0	 mov	 DWORD PTR _lvCol$136830[ebp+8], eax
  00186	89 45 c4	 mov	 DWORD PTR _lvCol$136830[ebp+12], eax
  00189	89 45 c8	 mov	 DWORD PTR _lvCol$136830[ebp+16], eax
  0018c	89 45 cc	 mov	 DWORD PTR _lvCol$136830[ebp+20], eax
  0018f	89 45 d0	 mov	 DWORD PTR _lvCol$136830[ebp+24], eax
  00192	89 45 d4	 mov	 DWORD PTR _lvCol$136830[ebp+28], eax
  00195	c7 45 b8 0f 00
	00 00		 mov	 DWORD PTR _lvCol$136830[ebp], 15 ; 0000000fH
  0019c	e8 00 00 00 00	 call	 _GetString

; 2718 : 			lvCol.cx = CompensateXDPI (208);

  001a1	68 d0 00 00 00	 push	 208			; 000000d0H
  001a6	89 45 c4	 mov	 DWORD PTR _lvCol$136830[ebp+12], eax
  001a9	e8 00 00 00 00	 call	 _CompensateXDPI
  001ae	83 c4 08	 add	 esp, 8
  001b1	89 45 c0	 mov	 DWORD PTR _lvCol$136830[ebp+8], eax

; 2719 : 			lvCol.fmt = LVCFMT_LEFT;
; 2720 : 			SendMessage (list,LVM_INSERTCOLUMNW,0,(LPARAM)&lvCol);

  001b4	8d 45 b8	 lea	 eax, DWORD PTR _lvCol$136830[ebp]
  001b7	50		 push	 eax
  001b8	6a 00		 push	 0
  001ba	68 61 10 00 00	 push	 4193			; 00001061H
  001bf	53		 push	 ebx
  001c0	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _lvCol$136830[ebp+4], 0
  001c7	ff d6		 call	 esi

; 2721 : 
; 2722 : 			lvCol.pszText = GetString ("PROPERTY");

  001c9	68 00 00 00 00	 push	 OFFSET ??_C@_08DDLBCDJK@PROPERTY?$AA@
  001ce	e8 00 00 00 00	 call	 _GetString

; 2723 : 			lvCol.cx = CompensateXDPI (192);

  001d3	68 c0 00 00 00	 push	 192			; 000000c0H
  001d8	89 45 c4	 mov	 DWORD PTR _lvCol$136830[ebp+12], eax
  001db	e8 00 00 00 00	 call	 _CompensateXDPI
  001e0	83 c4 08	 add	 esp, 8

; 2724 : 			lvCol.fmt = LVCFMT_LEFT;
; 2725 : 			SendMessage (list,LVM_INSERTCOLUMNW,0,(LPARAM)&lvCol);

  001e3	8d 4d b8	 lea	 ecx, DWORD PTR _lvCol$136830[ebp]
  001e6	51		 push	 ecx
  001e7	6a 00		 push	 0
  001e9	68 61 10 00 00	 push	 4193			; 00001061H
  001ee	53		 push	 ebx
  001ef	89 45 c0	 mov	 DWORD PTR _lvCol$136830[ebp+8], eax
  001f2	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _lvCol$136830[ebp+4], 0
  001f9	ff d6		 call	 esi

; 2726 : 
; 2727 : 			memset (&prop, 0, sizeof(prop));

  001fb	68 54 02 00 00	 push	 596			; 00000254H
  00200	8d 55 00	 lea	 edx, DWORD PTR _prop$136828[ebp]
  00203	6a 00		 push	 0
  00205	52		 push	 edx
  00206	e8 00 00 00 00	 call	 _memset
  0020b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2728 : 			prop.driveNo = HIWORD (GetSelectedLong (GetDlgItem (GetParent(hwndDlg), IDC_DRIVELIST))) - 'A';

  0020e	68 ef 03 00 00	 push	 1007			; 000003efH
  00213	57		 push	 edi
  00214	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0021a	50		 push	 eax
  0021b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00221	50		 push	 eax
  00222	e8 00 00 00 00	 call	 _GetSelectedLong
  00227	c1 e8 10	 shr	 eax, 16			; 00000010H
  0022a	83 e8 41	 sub	 eax, 65			; 00000041H
  0022d	83 c4 04	 add	 esp, 4

; 2729 : 
; 2730 : 			if (bSysEnc)

  00230	83 7d d8 00	 cmp	 DWORD PTR _bSysEnc$[ebp], 0
  00234	89 45 00	 mov	 DWORD PTR _prop$136828[ebp], eax
  00237	74 6c		 je	 SHORT $LN41@VolumeProp

; 2731 : 			{
; 2732 : 				try
; 2733 : 				{
; 2734 : 					BootEncStatus = BootEncObj->GetStatus();

  00239	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0023f	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T163921[ebp]
  00245	50		 push	 eax
  00246	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  0024d	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00252	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00257	8b f0		 mov	 esi, eax
  00259	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  0025e	f3 a5		 rep movsd
  00260	66 a5		 movsw

; 2735 : 					if (!BootEncStatus.DriveEncrypted && !BootEncStatus.DriveMounted)

  00262	83 3d 0e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14, 0
  00269	75 0d		 jne	 SHORT $LN39@VolumeProp
  0026b	83 3d 06 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, 0

; 2736 : 						return 0;

  00272	0f 84 70 fe ff
	ff		 je	 $LN77@VolumeProp
$LN39@VolumeProp:

; 2737 : 
; 2738 : 					BootEncObj->GetVolumeProperties (&prop);

  00278	8d 4d 00	 lea	 ecx, DWORD PTR _prop$136828[ebp]
  0027b	51		 push	 ecx
  0027c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00282	e8 00 00 00 00	 call	 ?GetVolumeProperties@BootEncryption@CipherShed@@QAEXPAUVOLUME_PROPERTIES_STRUCT@@@Z ; CipherShed::BootEncryption::GetVolumeProperties
  00287	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 2744 : 				}
; 2745 : 			}
; 2746 : 			else

  0028e	eb 4f		 jmp	 SHORT $LN37@VolumeProp
__catch$?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z$2:

; 2739 : 				}
; 2740 : 				catch (Exception &e)
; 2741 : 				{
; 2742 : 					e.Show (MainDlg);

  00290	8b 4d ac	 mov	 ecx, DWORD PTR _e$136863[ebp]
  00293	8b 11		 mov	 edx, DWORD PTR [ecx]
  00295	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0029a	8b 12		 mov	 edx, DWORD PTR [edx]
  0029c	50		 push	 eax
  0029d	ff d2		 call	 edx

; 2743 : 					return 0;

  0029f	b8 00 00 00 00	 mov	 eax, $LN77@VolumeProp
  002a4	c3		 ret	 0
$LN41@VolumeProp:

; 2747 : 			{
; 2748 : 				if (!DeviceIoControl (hDriver, TC_IOCTL_GET_VOLUME_PROPERTIES, &prop, sizeof (prop), &prop, sizeof (prop), &dwResult, NULL) || dwResult == 0)

  002a5	6a 00		 push	 0
  002a7	8d 45 b4	 lea	 eax, DWORD PTR _dwResult$136829[ebp]
  002aa	50		 push	 eax
  002ab	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  002b0	68 54 02 00 00	 push	 596			; 00000254H
  002b5	8d 4d 00	 lea	 ecx, DWORD PTR _prop$136828[ebp]
  002b8	51		 push	 ecx
  002b9	68 54 02 00 00	 push	 596			; 00000254H
  002be	8b d1		 mov	 edx, ecx
  002c0	52		 push	 edx
  002c1	68 1c 20 22 00	 push	 2236444			; 0022201cH
  002c6	50		 push	 eax
  002c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  002cd	85 c0		 test	 eax, eax
  002cf	0f 84 13 fe ff
	ff		 je	 $LN77@VolumeProp
  002d5	83 7d b4 00	 cmp	 DWORD PTR _dwResult$136829[ebp], 0
  002d9	0f 84 09 fe ff
	ff		 je	 $LN77@VolumeProp
$LN37@VolumeProp:

; 2749 : 					return 0;
; 2750 : 			}
; 2751 : 
; 2752 : 			// Location
; 2753 : 			ListItemAddW (list, i, GetString ("LOCATION"));

  002df	68 00 00 00 00	 push	 OFFSET ??_C@_08FOLJKLOE@LOCATION?$AA@
  002e4	e8 00 00 00 00	 call	 _GetString
  002e9	50		 push	 eax
  002ea	6a 00		 push	 0
  002ec	53		 push	 ebx
  002ed	e8 00 00 00 00	 call	 _ListItemAddW

; 2754 : 			if (bSysEnc)

  002f2	8b 75 d8	 mov	 esi, DWORD PTR _bSysEnc$[ebp]
  002f5	83 c4 10	 add	 esp, 16			; 00000010H
  002f8	85 f6		 test	 esi, esi
  002fa	74 36		 je	 SHORT $LN35@VolumeProp

; 2755 : 				ListSubItemSetW (list, i++, 1, GetString (bSysEncWholeDrive ? "SYSTEM_DRIVE" : IsHiddenOSRunning() ? "HIDDEN_SYSTEM_PARTITION" : "SYSTEM_PARTITION"));

  002fc	83 7d e0 00	 cmp	 DWORD PTR _bSysEncWholeDrive$[ebp], 0
  00300	74 07		 je	 SHORT $LN59@VolumeProp
  00302	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@JCIDDNEG@SYSTEM_DRIVE?$AA@
  00307	eb 13		 jmp	 SHORT $LN58@VolumeProp
$LN59@VolumeProp:
  00309	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  0030e	85 c0		 test	 eax, eax
  00310	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BI@NAKILHP@HIDDEN_SYSTEM_PARTITION?$AA@
  00315	75 05		 jne	 SHORT $LN58@VolumeProp
  00317	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@NIFEDNAB@SYSTEM_PARTITION?$AA@
$LN58@VolumeProp:
  0031c	50		 push	 eax
  0031d	e8 00 00 00 00	 call	 _GetString
  00322	50		 push	 eax
  00323	6a 01		 push	 1
  00325	6a 00		 push	 0
  00327	53		 push	 ebx
  00328	e8 00 00 00 00	 call	 _ListSubItemSetW
  0032d	83 c4 14	 add	 esp, 20			; 00000014H

; 2756 : 			else

  00330	eb 1b		 jmp	 SHORT $LN34@VolumeProp
$LN35@VolumeProp:

; 2757 : 				ListSubItemSetW (list, i++, 1, (wchar_t *) (prop.wszVolume[1] != L'?' ? prop.wszVolume : prop.wszVolume + 4));

  00332	66 83 7d 0a 3f	 cmp	 WORD PTR _prop$136828[ebp+10], 63 ; 0000003fH
  00337	8d 45 08	 lea	 eax, DWORD PTR _prop$136828[ebp+8]
  0033a	75 03		 jne	 SHORT $LN62@VolumeProp
  0033c	8d 45 10	 lea	 eax, DWORD PTR _prop$136828[ebp+16]
$LN62@VolumeProp:
  0033f	50		 push	 eax
  00340	6a 01		 push	 1
  00342	6a 00		 push	 0
  00344	53		 push	 ebx
  00345	e8 00 00 00 00	 call	 _ListSubItemSetW
  0034a	83 c4 10	 add	 esp, 16			; 00000010H
$LN34@VolumeProp:

; 2758 : 
; 2759 : 			// Size
; 2760 : 			ListItemAddW (list, i, GetString ("SIZE"));

  0034d	68 00 00 00 00	 push	 OFFSET ??_C@_04EMFHLKGI@SIZE?$AA@
  00352	e8 00 00 00 00	 call	 _GetString
  00357	50		 push	 eax
  00358	6a 01		 push	 1
  0035a	53		 push	 ebx
  0035b	e8 00 00 00 00	 call	 _ListItemAddW

; 2761 : 			swprintf (sw, L"%I64u %s", prop.diskLength, GetString ("BYTES"));

  00360	68 00 00 00 00	 push	 OFFSET ??_C@_05JKAGIBMI@BYTES?$AA@
  00365	e8 00 00 00 00	 call	 _GetString
  0036a	8b 8d 14 02 00
	00		 mov	 ecx, DWORD PTR _prop$136828[ebp+532]
  00370	8b 95 10 02 00
	00		 mov	 edx, DWORD PTR _prop$136828[ebp+528]
  00376	50		 push	 eax
  00377	51		 push	 ecx
  00378	52		 push	 edx
  00379	8d 85 54 06 00
	00		 lea	 eax, DWORD PTR _sw$136833[ebp]
  0037f	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@FBJLKEEF@?$AA?$CF?$AAI?$AA6?$AA4?$AAu?$AA?5?$AA?$CF?$AAs?$AA?$AA@
  00384	50		 push	 eax
  00385	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf

; 2762 : 			ListSubItemSetW (list, i++, 1, sw);

  0038a	8d 8d 54 06 00
	00		 lea	 ecx, DWORD PTR _sw$136833[ebp]
  00390	51		 push	 ecx
  00391	6a 01		 push	 1
  00393	6a 01		 push	 1
  00395	53		 push	 ebx
  00396	e8 00 00 00 00	 call	 _ListSubItemSetW

; 2763 : 
; 2764 : 			// Type
; 2765 : 			ListItemAddW (list, i, GetString ("TYPE"));

  0039b	68 00 00 00 00	 push	 OFFSET ??_C@_04KDPJLEDB@TYPE?$AA@
  003a0	e8 00 00 00 00	 call	 _GetString
  003a5	50		 push	 eax
  003a6	6a 02		 push	 2
  003a8	53		 push	 ebx
  003a9	e8 00 00 00 00	 call	 _ListItemAddW
  003ae	83 c4 48	 add	 esp, 72			; 00000048H

; 2766 : 			if (bSysEnc)

  003b1	85 f6		 test	 esi, esi
  003b3	74 34		 je	 SHORT $LN33@VolumeProp

; 2767 : 				ListSubItemSetW (list, i++, 1, GetString (IsHiddenOSRunning() ? "TYPE_HIDDEN_SYSTEM_ADJECTIVE" : "SYSTEM_VOLUME_TYPE_ADJECTIVE"));

  003b5	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  003ba	85 c0		 test	 eax, eax
  003bc	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BN@DBMDCCJC@TYPE_HIDDEN_SYSTEM_ADJECTIVE?$AA@
  003c1	75 05		 jne	 SHORT $LN64@VolumeProp
  003c3	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BN@OIBEPDD@SYSTEM_VOLUME_TYPE_ADJECTIVE?$AA@
$LN64@VolumeProp:
  003c8	50		 push	 eax
  003c9	bb 03 00 00 00	 mov	 ebx, 3
  003ce	e8 00 00 00 00	 call	 _GetString
  003d3	8b 7d e4	 mov	 edi, DWORD PTR _list$136831[ebp]
  003d6	50		 push	 eax
  003d7	6a 01		 push	 1
  003d9	6a 02		 push	 2
  003db	57		 push	 edi
  003dc	e8 00 00 00 00	 call	 _ListSubItemSetW
  003e1	83 c4 14	 add	 esp, 20			; 00000014H

; 2768 : 			else

  003e4	e9 f1 00 00 00	 jmp	 $LN31@VolumeProp
$LN33@VolumeProp:

; 2769 : 			{
; 2770 : 				ListSubItemSetW (list, i++, 1, 
; 2771 : 					prop.hiddenVolume ? GetString ("HIDDEN") : 
; 2772 : 					(prop.hiddenVolProtection != HIDVOL_PROT_STATUS_NONE ? GetString ("OUTER") : GetString ("NORMAL")));

  003e9	83 bd 28 02 00
	00 00		 cmp	 DWORD PTR _prop$136828[ebp+552], 0
  003f0	74 07		 je	 SHORT $LN67@VolumeProp
  003f2	68 00 00 00 00	 push	 OFFSET ??_C@_06JMIOFMHI@HIDDEN?$AA@
  003f7	eb 15		 jmp	 SHORT $LN120@VolumeProp
$LN67@VolumeProp:
  003f9	83 bd 4c 02 00
	00 00		 cmp	 DWORD PTR _prop$136828[ebp+588], 0
  00400	74 07		 je	 SHORT $LN65@VolumeProp
  00402	68 00 00 00 00	 push	 OFFSET ??_C@_05PKHDEOFG@OUTER?$AA@
  00407	eb 05		 jmp	 SHORT $LN120@VolumeProp
$LN65@VolumeProp:
  00409	68 00 00 00 00	 push	 OFFSET ??_C@_06IOJAGNKJ@NORMAL?$AA@
$LN120@VolumeProp:
  0040e	e8 00 00 00 00	 call	 _GetString
  00413	83 c4 04	 add	 esp, 4
  00416	50		 push	 eax
  00417	6a 01		 push	 1
  00419	6a 02		 push	 2
  0041b	53		 push	 ebx
  0041c	e8 00 00 00 00	 call	 _ListSubItemSetW

; 2773 : 			}
; 2774 : 			
; 2775 : 			if (!bSysEnc)
; 2776 : 			{
; 2777 : 				// Write protection
; 2778 : 				ListItemAddW (list, i, GetString ("READ_ONLY"));

  00421	68 00 00 00 00	 push	 OFFSET ??_C@_09COKLNMKA@READ_ONLY?$AA@
  00426	e8 00 00 00 00	 call	 _GetString
  0042b	50		 push	 eax
  0042c	6a 03		 push	 3
  0042e	53		 push	 ebx
  0042f	e8 00 00 00 00	 call	 _ListItemAddW
  00434	83 c4 20	 add	 esp, 32			; 00000020H

; 2779 : 
; 2780 : 				if (prop.readOnly || prop.hiddenVolProtection == HIDVOL_PROT_STATUS_ACTION_TAKEN)

  00437	83 bd 2c 02 00
	00 00		 cmp	 DWORD PTR _prop$136828[ebp+556], 0
  0043e	75 10		 jne	 SHORT $LN29@VolumeProp
  00440	83 bd 4c 02 00
	00 02		 cmp	 DWORD PTR _prop$136828[ebp+588], 2
  00447	74 07		 je	 SHORT $LN29@VolumeProp

; 2782 : 				else
; 2783 : 					s = GetString ("UISTR_NO");

  00449	68 00 00 00 00	 push	 OFFSET ??_C@_08EOJLPPDK@UISTR_NO?$AA@
  0044e	eb 05		 jmp	 SHORT $LN121@VolumeProp
$LN29@VolumeProp:

; 2781 : 					s = GetString ("UISTR_YES");

  00450	68 00 00 00 00	 push	 OFFSET ??_C@_09JHINKGCK@UISTR_YES?$AA@
$LN121@VolumeProp:
  00455	e8 00 00 00 00	 call	 _GetString
  0045a	83 c4 04	 add	 esp, 4
  0045d	8b f0		 mov	 esi, eax

; 2784 : 
; 2785 : 				ListSubItemSetW (list, i++, 1, s);

  0045f	56		 push	 esi
  00460	6a 01		 push	 1
  00462	6a 03		 push	 3
  00464	53		 push	 ebx
  00465	e8 00 00 00 00	 call	 _ListSubItemSetW

; 2786 : 
; 2787 : 				// Hidden Volume Protection
; 2788 : 				ListItemAddW (list, i, GetString ("HIDDEN_VOL_PROTECTION"));

  0046a	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NHADNFHI@HIDDEN_VOL_PROTECTION?$AA@
  0046f	e8 00 00 00 00	 call	 _GetString
  00474	50		 push	 eax
  00475	6a 04		 push	 4
  00477	53		 push	 ebx
  00478	e8 00 00 00 00	 call	 _ListItemAddW
  0047d	83 c4 20	 add	 esp, 32			; 00000020H

; 2789 : 				if (prop.hiddenVolume)

  00480	83 bd 28 02 00
	00 00		 cmp	 DWORD PTR _prop$136828[ebp+552], 0
  00487	74 07		 je	 SHORT $LN27@VolumeProp

; 2790 : 					s = GetString ("NOT_APPLICABLE_OR_NOT_AVAILABLE");

  00489	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@
  0048e	eb 27		 jmp	 SHORT $LN122@VolumeProp
$LN27@VolumeProp:

; 2791 : 				else if (prop.hiddenVolProtection == HIDVOL_PROT_STATUS_NONE)

  00490	8b 85 4c 02 00
	00		 mov	 eax, DWORD PTR _prop$136828[ebp+588]
  00496	85 c0		 test	 eax, eax
  00498	75 07		 jne	 SHORT $LN25@VolumeProp

; 2792 : 					s = GetString ("UISTR_NO");

  0049a	68 00 00 00 00	 push	 OFFSET ??_C@_08EOJLPPDK@UISTR_NO?$AA@
  0049f	eb 16		 jmp	 SHORT $LN122@VolumeProp
$LN25@VolumeProp:

; 2793 : 				else if (prop.hiddenVolProtection == HIDVOL_PROT_STATUS_ACTIVE)

  004a1	83 f8 01	 cmp	 eax, 1
  004a4	75 07		 jne	 SHORT $LN23@VolumeProp

; 2794 : 					s = GetString ("UISTR_YES");

  004a6	68 00 00 00 00	 push	 OFFSET ??_C@_09JHINKGCK@UISTR_YES?$AA@
  004ab	eb 0a		 jmp	 SHORT $LN122@VolumeProp
$LN23@VolumeProp:

; 2795 : 				else if (prop.hiddenVolProtection == HIDVOL_PROT_STATUS_ACTION_TAKEN)

  004ad	83 f8 02	 cmp	 eax, 2
  004b0	75 0f		 jne	 SHORT $LN21@VolumeProp

; 2796 : 					s = GetString ("HID_VOL_DAMAGE_PREVENTED");

  004b2	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JMEOPGAH@HID_VOL_DAMAGE_PREVENTED?$AA@
$LN122@VolumeProp:
  004b7	e8 00 00 00 00	 call	 _GetString
  004bc	8b f0		 mov	 esi, eax
  004be	83 c4 04	 add	 esp, 4
$LN21@VolumeProp:

; 2797 : 
; 2798 : 				ListSubItemSetW (list, i++, 1, s);

  004c1	8b 55 e4	 mov	 edx, DWORD PTR _list$136831[ebp]
  004c4	56		 push	 esi
  004c5	6a 01		 push	 1
  004c7	6a 04		 push	 4
  004c9	52		 push	 edx
  004ca	bb 05 00 00 00	 mov	 ebx, 5
  004cf	e8 00 00 00 00	 call	 _ListSubItemSetW
  004d4	8b 7d e4	 mov	 edi, DWORD PTR _list$136831[ebp]
  004d7	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@VolumeProp:

; 2799 : 			}
; 2800 : 
; 2801 : 			// Encryption algorithm
; 2802 : 			ListItemAddW (list, i, GetString ("ENCRYPTION_ALGORITHM"));

  004da	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IHNHLCAB@ENCRYPTION_ALGORITHM?$AA@
  004df	e8 00 00 00 00	 call	 _GetString
  004e4	50		 push	 eax
  004e5	53		 push	 ebx
  004e6	57		 push	 edi
  004e7	e8 00 00 00 00	 call	 _ListItemAddW
  004ec	83 c4 10	 add	 esp, 16			; 00000010H

; 2803 : 
; 2804 : 			if (prop.ea == 0 || prop.ea > EAGetCount ())

  004ef	83 bd 18 02 00
	00 00		 cmp	 DWORD PTR _prop$136828[ebp+536], 0
  004f6	0f 84 53 06 00
	00		 je	 $LN19@VolumeProp
  004fc	e8 00 00 00 00	 call	 _EAGetCount
  00501	8b 8d 18 02 00
	00		 mov	 ecx, DWORD PTR _prop$136828[ebp+536]
  00507	3b c8		 cmp	 ecx, eax
  00509	0f 8f 40 06 00
	00		 jg	 $LN19@VolumeProp

; 2808 : 			}
; 2809 : 
; 2810 : 			EAGetName (szTmp, prop.ea);

  0050f	51		 push	 ecx
  00510	8d 85 54 02 00
	00		 lea	 eax, DWORD PTR _szTmp$136832[ebp]
  00516	50		 push	 eax
  00517	e8 00 00 00 00	 call	 _EAGetName

; 2811 : 			ListSubItemSet (list, i++, 1, szTmp);

  0051c	8d 8d 54 02 00
	00		 lea	 ecx, DWORD PTR _szTmp$136832[ebp]
  00522	51		 push	 ecx
  00523	8b c3		 mov	 eax, ebx
  00525	6a 01		 push	 1
  00527	50		 push	 eax
  00528	57		 push	 edi
  00529	43		 inc	 ebx
  0052a	e8 00 00 00 00	 call	 _ListSubItemSet

; 2812 : 
; 2813 : 			// Key size(s)
; 2814 : 			{
; 2815 : 				char name[128];
; 2816 : 				int size = EAGetKeySize (prop.ea);	

  0052f	8b 95 18 02 00
	00		 mov	 edx, DWORD PTR _prop$136828[ebp+536]
  00535	52		 push	 edx
  00536	e8 00 00 00 00	 call	 _EAGetKeySize
  0053b	89 45 e0	 mov	 DWORD PTR _size$136901[ebp], eax

; 2817 : 				EAGetName (name, prop.ea);

  0053e	8b 85 18 02 00
	00		 mov	 eax, DWORD PTR _prop$136828[ebp+536]
  00544	50		 push	 eax
  00545	8d 8d 54 0e 00
	00		 lea	 ecx, DWORD PTR _name$136900[ebp]
  0054b	51		 push	 ecx
  0054c	e8 00 00 00 00	 call	 _EAGetName
  00551	83 c4 24	 add	 esp, 36			; 00000024H

; 2818 : 
; 2819 : 				if (strcmp (name, "Triple DES") == 0)	/* Deprecated/legacy */

  00554	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0L@NEGMAKNF@Triple?5DES?$AA@
  00559	8d 85 54 0e 00
	00		 lea	 eax, DWORD PTR _name$136900[ebp]
  0055f	90		 npad	 1
$LL91@VolumeProp:
  00560	8a 08		 mov	 cl, BYTE PTR [eax]
  00562	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00564	75 1a		 jne	 SHORT $LN92@VolumeProp
  00566	84 c9		 test	 cl, cl
  00568	74 12		 je	 SHORT $LN93@VolumeProp
  0056a	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0056d	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00570	75 0e		 jne	 SHORT $LN92@VolumeProp
  00572	83 c0 02	 add	 eax, 2
  00575	83 c6 02	 add	 esi, 2
  00578	84 c9		 test	 cl, cl
  0057a	75 e4		 jne	 SHORT $LL91@VolumeProp
$LN93@VolumeProp:
  0057c	33 c0		 xor	 eax, eax
  0057e	eb 05		 jmp	 SHORT $LN94@VolumeProp
$LN92@VolumeProp:
  00580	1b c0		 sbb	 eax, eax
  00582	83 d8 ff	 sbb	 eax, -1
$LN94@VolumeProp:
  00585	85 c0		 test	 eax, eax
  00587	75 04		 jne	 SHORT $LN18@VolumeProp

; 2820 : 					size -= 3; // Compensate for parity bytes

  00589	83 6d e0 03	 sub	 DWORD PTR _size$136901[ebp], 3
$LN18@VolumeProp:

; 2821 : 
; 2822 : 				// Primary key
; 2823 : 				ListItemAddW (list, i, GetString ("KEY_SIZE"));

  0058d	68 00 00 00 00	 push	 OFFSET ??_C@_08BKFDBOMO@KEY_SIZE?$AA@
  00592	e8 00 00 00 00	 call	 _GetString
  00597	50		 push	 eax
  00598	53		 push	 ebx
  00599	57		 push	 edi
  0059a	e8 00 00 00 00	 call	 _ListItemAddW

; 2824 : 				wsprintfW (sw, L"%d %s", size * 8, GetString ("BITS"));

  0059f	68 00 00 00 00	 push	 OFFSET ??_C@_04HNBJMIH@BITS?$AA@
  005a4	e8 00 00 00 00	 call	 _GetString
  005a9	8b 55 e0	 mov	 edx, DWORD PTR _size$136901[ebp]
  005ac	50		 push	 eax
  005ad	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]
  005b4	50		 push	 eax
  005b5	8d 8d 54 06 00
	00		 lea	 ecx, DWORD PTR _sw$136833[ebp]
  005bb	68 00 00 00 00	 push	 OFFSET ??_C@_1M@LCJMIND@?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@
  005c0	51		 push	 ecx
  005c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW

; 2825 : 				ListSubItemSetW (list, i++, 1, sw);

  005c7	8d 95 54 06 00
	00		 lea	 edx, DWORD PTR _sw$136833[ebp]
  005cd	52		 push	 edx
  005ce	8b c3		 mov	 eax, ebx
  005d0	6a 01		 push	 1
  005d2	50		 push	 eax
  005d3	57		 push	 edi
  005d4	43		 inc	 ebx
  005d5	e8 00 00 00 00	 call	 _ListSubItemSetW

; 2826 : 
; 2827 : 				if (strcmp (EAGetModeName (prop.ea, prop.mode, TRUE), "XTS") == 0)

  005da	8b 85 1c 02 00
	00		 mov	 eax, DWORD PTR _prop$136828[ebp+540]
  005e0	8b 8d 18 02 00
	00		 mov	 ecx, DWORD PTR _prop$136828[ebp+536]
  005e6	6a 01		 push	 1
  005e8	50		 push	 eax
  005e9	51		 push	 ecx
  005ea	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_03CKCBIPFF@XTS?$AA@
  005ef	e8 00 00 00 00	 call	 _EAGetModeName
  005f4	83 c4 40	 add	 esp, 64			; 00000040H
$LL95@VolumeProp:
  005f7	8a 08		 mov	 cl, BYTE PTR [eax]
  005f9	3a 0e		 cmp	 cl, BYTE PTR [esi]
  005fb	75 1a		 jne	 SHORT $LN96@VolumeProp
  005fd	84 c9		 test	 cl, cl
  005ff	74 12		 je	 SHORT $LN97@VolumeProp
  00601	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00604	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00607	75 0e		 jne	 SHORT $LN96@VolumeProp
  00609	83 c0 02	 add	 eax, 2
  0060c	83 c6 02	 add	 esi, 2
  0060f	84 c9		 test	 cl, cl
  00611	75 e4		 jne	 SHORT $LL95@VolumeProp
$LN97@VolumeProp:
  00613	33 c0		 xor	 eax, eax
  00615	eb 05		 jmp	 SHORT $LN98@VolumeProp
$LN96@VolumeProp:
  00617	1b c0		 sbb	 eax, eax
  00619	83 d8 ff	 sbb	 eax, -1
$LN98@VolumeProp:
  0061c	85 c0		 test	 eax, eax
  0061e	75 1e		 jne	 SHORT $LN17@VolumeProp

; 2828 : 				{
; 2829 : 					// Secondary key (XTS)
; 2830 : 
; 2831 : 					ListItemAddW (list, i, GetString ("SECONDARY_KEY_SIZE_XTS"));

  00620	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JOOMIKPF@SECONDARY_KEY_SIZE_XTS?$AA@
  00625	e8 00 00 00 00	 call	 _GetString
  0062a	50		 push	 eax
  0062b	53		 push	 ebx
  0062c	57		 push	 edi
  0062d	e8 00 00 00 00	 call	 _ListItemAddW

; 2832 : 					ListSubItemSetW (list, i++, 1, sw);

  00632	8d 95 54 06 00
	00		 lea	 edx, DWORD PTR _sw$136833[ebp]
  00638	52		 push	 edx
  00639	e9 9f 00 00 00	 jmp	 $LN123@VolumeProp
$LN17@VolumeProp:

; 2833 : 				}
; 2834 : 				else if (strcmp (EAGetModeName (prop.ea, prop.mode, TRUE), "LRW") == 0)

  0063e	8b 85 1c 02 00
	00		 mov	 eax, DWORD PTR _prop$136828[ebp+540]
  00644	8b 8d 18 02 00
	00		 mov	 ecx, DWORD PTR _prop$136828[ebp+536]
  0064a	6a 01		 push	 1
  0064c	50		 push	 eax
  0064d	51		 push	 ecx
  0064e	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_03JFLLPGCL@LRW?$AA@
  00653	e8 00 00 00 00	 call	 _EAGetModeName
  00658	83 c4 0c	 add	 esp, 12			; 0000000cH
  0065b	eb 03 8d 49 00	 npad	 5
$LL99@VolumeProp:
  00660	8a 08		 mov	 cl, BYTE PTR [eax]
  00662	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00664	75 1a		 jne	 SHORT $LN100@VolumeProp
  00666	84 c9		 test	 cl, cl
  00668	74 12		 je	 SHORT $LN101@VolumeProp
  0066a	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0066d	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00670	75 0e		 jne	 SHORT $LN100@VolumeProp
  00672	83 c0 02	 add	 eax, 2
  00675	83 c6 02	 add	 esi, 2
  00678	84 c9		 test	 cl, cl
  0067a	75 e4		 jne	 SHORT $LL99@VolumeProp
$LN101@VolumeProp:
  0067c	33 c0		 xor	 eax, eax
  0067e	eb 05		 jmp	 SHORT $LN102@VolumeProp
$LN100@VolumeProp:
  00680	1b c0		 sbb	 eax, eax
  00682	83 d8 ff	 sbb	 eax, -1
$LN102@VolumeProp:
  00685	85 c0		 test	 eax, eax
  00687	75 63		 jne	 SHORT $LN15@VolumeProp

; 2835 : 				{
; 2836 : 					// Tweak key (LRW)
; 2837 : 
; 2838 : 					ListItemAddW (list, i, GetString ("SECONDARY_KEY_SIZE_LRW"));

  00689	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@CBHGPDIL@SECONDARY_KEY_SIZE_LRW?$AA@
  0068e	e8 00 00 00 00	 call	 _GetString
  00693	50		 push	 eax
  00694	53		 push	 ebx
  00695	57		 push	 edi
  00696	e8 00 00 00 00	 call	 _ListItemAddW

; 2839 : 					swprintf (sw, L"%d %s", CipherGetBlockSize (EAGetFirstCipher(prop.ea))*8, GetString ("BITS"));

  0069b	68 00 00 00 00	 push	 OFFSET ??_C@_04HNBJMIH@BITS?$AA@
  006a0	e8 00 00 00 00	 call	 _GetString
  006a5	8b 95 18 02 00
	00		 mov	 edx, DWORD PTR _prop$136828[ebp+536]
  006ab	83 c4 14	 add	 esp, 20			; 00000014H
  006ae	50		 push	 eax
  006af	52		 push	 edx
  006b0	e8 00 00 00 00	 call	 _EAGetFirstCipher
  006b5	50		 push	 eax
  006b6	e8 00 00 00 00	 call	 _CipherGetBlockSize
  006bb	03 c0		 add	 eax, eax
  006bd	03 c0		 add	 eax, eax
  006bf	83 c4 08	 add	 esp, 8
  006c2	03 c0		 add	 eax, eax
  006c4	50		 push	 eax
  006c5	8d 85 54 06 00
	00		 lea	 eax, DWORD PTR _sw$136833[ebp]
  006cb	68 00 00 00 00	 push	 OFFSET ??_C@_1M@LCJMIND@?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@
  006d0	50		 push	 eax
  006d1	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf

; 2840 : 					ListSubItemSetW (list, i++, 1, sw);

  006d6	8d 8d 54 06 00
	00		 lea	 ecx, DWORD PTR _sw$136833[ebp]
  006dc	51		 push	 ecx
$LN123@VolumeProp:
  006dd	8b c3		 mov	 eax, ebx
  006df	6a 01		 push	 1
  006e1	50		 push	 eax
  006e2	57		 push	 edi
  006e3	43		 inc	 ebx
  006e4	e8 00 00 00 00	 call	 _ListSubItemSetW
  006e9	83 c4 20	 add	 esp, 32			; 00000020H
$LN15@VolumeProp:

; 2841 : 				}
; 2842 : 			}
; 2843 : 
; 2844 : 			// Block size
; 2845 : 			ListItemAddW (list, i, GetString ("BLOCK_SIZE"));

  006ec	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PGLNCJOA@BLOCK_SIZE?$AA@
  006f1	e8 00 00 00 00	 call	 _GetString
  006f6	50		 push	 eax
  006f7	53		 push	 ebx
  006f8	57		 push	 edi
  006f9	e8 00 00 00 00	 call	 _ListItemAddW

; 2846 : 			if (EAGetFirstMode (prop.ea) == INNER_CBC)

  006fe	8b 95 18 02 00
	00		 mov	 edx, DWORD PTR _prop$136828[ebp+536]
  00704	52		 push	 edx
  00705	e8 00 00 00 00	 call	 _EAGetFirstMode
  0070a	83 c4 14	 add	 esp, 20			; 00000014H
  0070d	83 f8 05	 cmp	 eax, 5
  00710	0f 85 e4 00 00
	00		 jne	 $LN14@VolumeProp

; 2847 : 			{
; 2848 : 				// Cascaded ciphers with non-equal block sizes  (deprecated/legacy)
; 2849 : 				wchar_t tmpstr[64];
; 2850 : 				int i = EAGetLastCipher(prop.ea);

  00716	8b 85 18 02 00
	00		 mov	 eax, DWORD PTR _prop$136828[ebp+536]
  0071c	50		 push	 eax
  0071d	e8 00 00 00 00	 call	 _EAGetLastCipher
  00722	8b f0		 mov	 esi, eax

; 2851 : 
; 2852 : 				swprintf (sw, L"%d", CipherGetBlockSize(i)*8);

  00724	56		 push	 esi
  00725	e8 00 00 00 00	 call	 _CipherGetBlockSize
  0072a	03 c0		 add	 eax, eax
  0072c	03 c0		 add	 eax, eax
  0072e	03 c0		 add	 eax, eax
  00730	50		 push	 eax
  00731	8d 8d 54 06 00
	00		 lea	 ecx, DWORD PTR _sw$136833[ebp]
  00737	68 00 00 00 00	 push	 OFFSET ??_C@_15KNBIKKIN@?$AA?$CF?$AAd?$AA?$AA@
  0073c	51		 push	 ecx
  0073d	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf

; 2853 : 				
; 2854 : 				while (i = EAGetPreviousCipher(prop.ea, i))

  00742	8b 95 18 02 00
	00		 mov	 edx, DWORD PTR _prop$136828[ebp+536]
  00748	56		 push	 esi
  00749	52		 push	 edx
  0074a	e8 00 00 00 00	 call	 _EAGetPreviousCipher
  0074f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00752	89 45 e0	 mov	 DWORD PTR _i$136917[ebp], eax
  00755	85 c0		 test	 eax, eax
  00757	0f 84 7f 00 00
	00		 je	 $LN12@VolumeProp
  0075d	eb 04		 jmp	 SHORT $LN13@VolumeProp
  0075f	90		 npad	 1
$LL112@VolumeProp:
  00760	8b 45 e0	 mov	 eax, DWORD PTR _i$136917[ebp]
$LN13@VolumeProp:

; 2855 : 				{
; 2856 : 					swprintf (tmpstr, L"/%d", CipherGetBlockSize(i)*8);

  00763	50		 push	 eax
  00764	e8 00 00 00 00	 call	 _CipherGetBlockSize
  00769	03 c0		 add	 eax, eax
  0076b	03 c0		 add	 eax, eax
  0076d	03 c0		 add	 eax, eax
  0076f	50		 push	 eax
  00770	8d 85 54 0e 00
	00		 lea	 eax, DWORD PTR _tmpstr$136916[ebp]
  00776	68 00 00 00 00	 push	 OFFSET ??_C@_17FJKOKELN@?$AA?1?$AA?$CF?$AAd?$AA?$AA@
  0077b	50		 push	 eax
  0077c	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf

; 2857 : 					wcscat (sw, tmpstr);

  00781	8d 85 54 0e 00
	00		 lea	 eax, DWORD PTR _tmpstr$136916[ebp]
  00787	83 c4 10	 add	 esp, 16			; 00000010H
  0078a	8b d0		 mov	 edx, eax
  0078c	8d 64 24 00	 npad	 4
$LL103@VolumeProp:
  00790	66 8b 08	 mov	 cx, WORD PTR [eax]
  00793	83 c0 02	 add	 eax, 2
  00796	66 85 c9	 test	 cx, cx
  00799	75 f5		 jne	 SHORT $LL103@VolumeProp
  0079b	8d bd 54 06 00
	00		 lea	 edi, DWORD PTR _sw$136833[ebp]
  007a1	2b c2		 sub	 eax, edx
  007a3	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL104@VolumeProp:
  007a6	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  007aa	83 c7 02	 add	 edi, 2
  007ad	66 85 c9	 test	 cx, cx
  007b0	75 f4		 jne	 SHORT $LL104@VolumeProp
  007b2	8b c8		 mov	 ecx, eax
  007b4	c1 e9 02	 shr	 ecx, 2
  007b7	8b f2		 mov	 esi, edx
  007b9	8b 95 18 02 00
	00		 mov	 edx, DWORD PTR _prop$136828[ebp+536]
  007bf	f3 a5		 rep movsd
  007c1	8b c8		 mov	 ecx, eax
  007c3	83 e1 03	 and	 ecx, 3
  007c6	f3 a4		 rep movsb
  007c8	8b 4d e0	 mov	 ecx, DWORD PTR _i$136917[ebp]
  007cb	51		 push	 ecx
  007cc	52		 push	 edx
  007cd	e8 00 00 00 00	 call	 _EAGetPreviousCipher
  007d2	83 c4 08	 add	 esp, 8
  007d5	89 45 e0	 mov	 DWORD PTR _i$136917[ebp], eax
  007d8	85 c0		 test	 eax, eax
  007da	75 84		 jne	 SHORT $LL112@VolumeProp
$LN12@VolumeProp:

; 2858 : 				}
; 2859 : 				wcscat (sw, L" ");

  007dc	8d bd 54 06 00
	00		 lea	 edi, DWORD PTR _sw$136833[ebp]
  007e2	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL105@VolumeProp:
  007e5	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  007e9	83 c7 02	 add	 edi, 2
  007ec	66 85 c0	 test	 ax, ax
  007ef	75 f4		 jne	 SHORT $LL105@VolumeProp
  007f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  007f6	89 07		 mov	 DWORD PTR [edi], eax

; 2860 : 			}
; 2861 : 			else

  007f8	eb 2d		 jmp	 SHORT $LN11@VolumeProp
$LN14@VolumeProp:

; 2862 : 			{
; 2863 : 				swprintf (sw, L"%d ", CipherGetBlockSize (EAGetFirstCipher(prop.ea))*8);

  007fa	8b 8d 18 02 00
	00		 mov	 ecx, DWORD PTR _prop$136828[ebp+536]
  00800	51		 push	 ecx
  00801	e8 00 00 00 00	 call	 _EAGetFirstCipher
  00806	50		 push	 eax
  00807	e8 00 00 00 00	 call	 _CipherGetBlockSize
  0080c	03 c0		 add	 eax, eax
  0080e	03 c0		 add	 eax, eax
  00810	03 c0		 add	 eax, eax
  00812	50		 push	 eax
  00813	8d 95 54 06 00
	00		 lea	 edx, DWORD PTR _sw$136833[ebp]
  00819	68 00 00 00 00	 push	 OFFSET ??_C@_17BIBMKONG@?$AA?$CF?$AAd?$AA?5?$AA?$AA@
  0081e	52		 push	 edx
  0081f	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  00824	83 c4 14	 add	 esp, 20			; 00000014H
$LN11@VolumeProp:

; 2864 : 			}
; 2865 : 			wcscat (sw, GetString ("BITS"));

  00827	68 00 00 00 00	 push	 OFFSET ??_C@_04HNBJMIH@BITS?$AA@
  0082c	e8 00 00 00 00	 call	 _GetString
  00831	83 c4 04	 add	 esp, 4
  00834	8b f0		 mov	 esi, eax
$LL106@VolumeProp:
  00836	66 8b 08	 mov	 cx, WORD PTR [eax]
  00839	83 c0 02	 add	 eax, 2
  0083c	66 85 c9	 test	 cx, cx
  0083f	75 f5		 jne	 SHORT $LL106@VolumeProp
  00841	8d bd 54 06 00
	00		 lea	 edi, DWORD PTR _sw$136833[ebp]
  00847	2b c6		 sub	 eax, esi
  00849	83 c7 fe	 add	 edi, -2			; fffffffeH
  0084c	8d 64 24 00	 npad	 4
$LL107@VolumeProp:
  00850	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  00854	83 c7 02	 add	 edi, 2
  00857	66 85 c9	 test	 cx, cx
  0085a	75 f4		 jne	 SHORT $LL107@VolumeProp

; 2866 : 			ListSubItemSetW (list, i++, 1, sw);

  0085c	8b 55 e4	 mov	 edx, DWORD PTR _list$136831[ebp]
  0085f	8b c8		 mov	 ecx, eax
  00861	c1 e9 02	 shr	 ecx, 2
  00864	f3 a5		 rep movsd
  00866	8b c8		 mov	 ecx, eax
  00868	83 e1 03	 and	 ecx, 3
  0086b	f3 a4		 rep movsb
  0086d	8d 8d 54 06 00
	00		 lea	 ecx, DWORD PTR _sw$136833[ebp]
  00873	51		 push	 ecx
  00874	8b c3		 mov	 eax, ebx
  00876	6a 01		 push	 1
  00878	50		 push	 eax
  00879	52		 push	 edx
  0087a	43		 inc	 ebx
  0087b	e8 00 00 00 00	 call	 _ListSubItemSetW

; 2867 : 
; 2868 : 			// Mode
; 2869 : 			ListItemAddW (list, i, GetString ("MODE_OF_OPERATION"));

  00880	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KECMIANL@MODE_OF_OPERATION?$AA@
  00885	e8 00 00 00 00	 call	 _GetString
  0088a	8b 75 e4	 mov	 esi, DWORD PTR _list$136831[ebp]
  0088d	50		 push	 eax
  0088e	53		 push	 ebx
  0088f	56		 push	 esi
  00890	e8 00 00 00 00	 call	 _ListItemAddW

; 2870 : 			ListSubItemSet (list, i++, 1, EAGetModeName (prop.ea, prop.mode, TRUE));

  00895	8b 85 1c 02 00
	00		 mov	 eax, DWORD PTR _prop$136828[ebp+540]
  0089b	8b 8d 18 02 00
	00		 mov	 ecx, DWORD PTR _prop$136828[ebp+536]
  008a1	6a 01		 push	 1
  008a3	50		 push	 eax
  008a4	8b fb		 mov	 edi, ebx
  008a6	51		 push	 ecx
  008a7	43		 inc	 ebx
  008a8	e8 00 00 00 00	 call	 _EAGetModeName
  008ad	50		 push	 eax
  008ae	6a 01		 push	 1
  008b0	57		 push	 edi
  008b1	56		 push	 esi
  008b2	e8 00 00 00 00	 call	 _ListSubItemSet

; 2871 : 
; 2872 : 			// PKCS 5 PRF
; 2873 : 			ListItemAddW (list, i, GetString ("PKCS5_PRF"));

  008b7	68 00 00 00 00	 push	 OFFSET ??_C@_09KAGLGJME@PKCS5_PRF?$AA@
  008bc	e8 00 00 00 00	 call	 _GetString
  008c1	83 c4 40	 add	 esp, 64			; 00000040H
  008c4	50		 push	 eax
  008c5	53		 push	 ebx
  008c6	56		 push	 esi
  008c7	e8 00 00 00 00	 call	 _ListItemAddW

; 2874 : 			ListSubItemSet (list, i++, 1, get_pkcs5_prf_name (prop.pkcs5));

  008cc	8b 95 20 02 00
	00		 mov	 edx, DWORD PTR _prop$136828[ebp+544]
  008d2	8b fb		 mov	 edi, ebx
  008d4	52		 push	 edx
  008d5	43		 inc	 ebx
  008d6	e8 00 00 00 00	 call	 _get_pkcs5_prf_name
  008db	50		 push	 eax
  008dc	6a 01		 push	 1
  008de	57		 push	 edi
  008df	56		 push	 esi
  008e0	e8 00 00 00 00	 call	 _ListSubItemSet
  008e5	83 c4 20	 add	 esp, 32			; 00000020H

; 2875 : 
; 2876 : #if 0
; 2877 : 			// PCKS 5 iterations
; 2878 : 			ListItemAddW (list, i, GetString ("PKCS5_ITERATIONS"));
; 2879 : 			sprintf (szTmp, "%d", prop.pkcs5Iterations);
; 2880 : 			ListSubItemSet (list, i++, 1, szTmp);
; 2881 : #endif
; 2882 : 
; 2883 : #if 0
; 2884 : 			{
; 2885 : 				// Legacy
; 2886 : 
; 2887 : 				FILETIME ft, curFt;
; 2888 : 				LARGE_INTEGER ft64, curFt64;
; 2889 : 				SYSTEMTIME st;
; 2890 : 				wchar_t date[128];
; 2891 : 				memset (date, 0, sizeof (date));
; 2892 : 
; 2893 : 				// Volume date
; 2894 : 				ListItemAddW (list, i, GetString ("VOLUME_CREATE_DATE"));
; 2895 : 				*(unsigned __int64 *)(&ft) = prop.volumeCreationTime;
; 2896 : 				FileTimeToSystemTime (&ft, &st);
; 2897 : 				GetDateFormatW (LOCALE_USER_DEFAULT, 0, &st, 0, sw, sizeof (sw)/2);
; 2898 : 				swprintf (date, L"%s ", sw);
; 2899 : 				GetTimeFormatW (LOCALE_USER_DEFAULT, 0, &st, 0, sw, sizeof (sw)/2);
; 2900 : 				wcscat (date, sw);
; 2901 : 				ListSubItemSetW (list, i++, 1, date);
; 2902 : 
; 2903 : 				// Header date
; 2904 : 				ListItemAddW (list, i, GetString ("VOLUME_HEADER_DATE"));
; 2905 : 				*(unsigned __int64 *)(&ft) = prop.headerCreationTime;
; 2906 : 				FileTimeToSystemTime (&ft, &st);
; 2907 : 				GetDateFormatW (LOCALE_USER_DEFAULT, 0, &st, 0, sw, sizeof (sw)/2);
; 2908 : 				swprintf (date, L"%s ", sw);
; 2909 : 				GetTimeFormatW (LOCALE_USER_DEFAULT, 0, &st, 0, sw, sizeof (sw)/2);
; 2910 : 				wcscat (date, sw);
; 2911 : 
; 2912 : 				GetLocalTime (&st);
; 2913 : 				SystemTimeToFileTime (&st, &curFt);
; 2914 : 				curFt64.HighPart = curFt.dwHighDateTime;
; 2915 : 				curFt64.LowPart = curFt.dwLowDateTime;
; 2916 : 				ft64.HighPart = ft.dwHighDateTime;
; 2917 : 				ft64.LowPart = ft.dwLowDateTime;
; 2918 : 				swprintf (date + wcslen (date),  GetString ("VOLUME_HEADER_DAYS")
; 2919 : 					, (curFt64.QuadPart - ft64.QuadPart)/(24LL*3600*10000000));
; 2920 : 				ListSubItemSetW (list, i++, 1, date);
; 2921 : 			}
; 2922 : #endif // 0
; 2923 : 
; 2924 : 			if (!bSysEnc || IsHiddenOSRunning())

  008e8	83 7d d8 00	 cmp	 DWORD PTR _bSysEnc$[ebp], 0
  008ec	74 09		 je	 SHORT $LN9@VolumeProp
  008ee	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  008f3	85 c0		 test	 eax, eax
  008f5	74 7b		 je	 SHORT $LN10@VolumeProp
$LN9@VolumeProp:

; 2925 : 			{
; 2926 : 				// Volume format version
; 2927 : 				ListItemAddW (list, i, GetString ("VOLUME_FORMAT_VERSION"));

  008f7	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KEFCFEKB@VOLUME_FORMAT_VERSION?$AA@
  008fc	e8 00 00 00 00	 call	 _GetString
  00901	50		 push	 eax
  00902	53		 push	 ebx
  00903	56		 push	 esi
  00904	e8 00 00 00 00	 call	 _ListItemAddW

; 2928 : 				sprintf (szTmp, "%d", prop.volFormatVersion);

  00909	8b 85 50 02 00
	00		 mov	 eax, DWORD PTR _prop$136828[ebp+592]
  0090f	50		 push	 eax
  00910	8d 8d 54 02 00
	00		 lea	 ecx, DWORD PTR _szTmp$136832[ebp]
  00916	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  0091b	51		 push	 ecx
  0091c	e8 00 00 00 00	 call	 _sprintf

; 2929 : 				ListSubItemSet (list, i++, 1, szTmp);

  00921	8d 95 54 02 00
	00		 lea	 edx, DWORD PTR _szTmp$136832[ebp]
  00927	52		 push	 edx
  00928	8b c3		 mov	 eax, ebx
  0092a	6a 01		 push	 1
  0092c	50		 push	 eax
  0092d	56		 push	 esi
  0092e	43		 inc	 ebx
  0092f	e8 00 00 00 00	 call	 _ListSubItemSet

; 2930 : 
; 2931 : 				// Backup header
; 2932 : 				ListItemAddW (list, i, GetString ("BACKUP_HEADER"));

  00934	68 00 00 00 00	 push	 OFFSET ??_C@_0O@FKDNIFFO@BACKUP_HEADER?$AA@
  00939	e8 00 00 00 00	 call	 _GetString
  0093e	50		 push	 eax
  0093f	53		 push	 ebx
  00940	56		 push	 esi
  00941	e8 00 00 00 00	 call	 _ListItemAddW
  00946	83 c4 3c	 add	 esp, 60			; 0000003cH

; 2933 : 				ListSubItemSetW (list, i++, 1, GetString (prop.volFormatVersion > 1 ? "UISTR_YES" : "UISTR_NO"));

  00949	83 bd 50 02 00
	00 01		 cmp	 DWORD PTR _prop$136828[ebp+592], 1
  00950	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09JHINKGCK@UISTR_YES?$AA@
  00955	7f 05		 jg	 SHORT $LN70@VolumeProp
  00957	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08EOJLPPDK@UISTR_NO?$AA@
$LN70@VolumeProp:
  0095c	8b fb		 mov	 edi, ebx
  0095e	50		 push	 eax
  0095f	43		 inc	 ebx
  00960	e8 00 00 00 00	 call	 _GetString
  00965	50		 push	 eax
  00966	6a 01		 push	 1
  00968	57		 push	 edi
  00969	56		 push	 esi
  0096a	e8 00 00 00 00	 call	 _ListSubItemSetW
  0096f	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@VolumeProp:

; 2934 : 			}
; 2935 : 
; 2936 : 			// Total data read
; 2937 : 			ListItemAddW (list, i, GetString ("TOTAL_DATA_READ"));

  00972	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IKOIIHIN@TOTAL_DATA_READ?$AA@
  00977	e8 00 00 00 00	 call	 _GetString
  0097c	50		 push	 eax
  0097d	53		 push	 ebx
  0097e	56		 push	 esi
  0097f	e8 00 00 00 00	 call	 _ListItemAddW

; 2938 : 			GetSizeString (prop.totalBytesRead, sw);

  00984	8b 8d 40 02 00
	00		 mov	 ecx, DWORD PTR _prop$136828[ebp+576]
  0098a	8b 95 3c 02 00
	00		 mov	 edx, DWORD PTR _prop$136828[ebp+572]
  00990	8d 85 54 06 00
	00		 lea	 eax, DWORD PTR _sw$136833[ebp]
  00996	50		 push	 eax
  00997	51		 push	 ecx
  00998	52		 push	 edx
  00999	e8 00 00 00 00	 call	 _GetSizeString

; 2939 : 			ListSubItemSetW (list, i++, 1, sw);

  0099e	8d 8d 54 06 00
	00		 lea	 ecx, DWORD PTR _sw$136833[ebp]
  009a4	51		 push	 ecx
  009a5	8b c3		 mov	 eax, ebx
  009a7	6a 01		 push	 1
  009a9	50		 push	 eax
  009aa	56		 push	 esi
  009ab	43		 inc	 ebx
  009ac	e8 00 00 00 00	 call	 _ListSubItemSetW

; 2940 : 
; 2941 : 			// Total data written
; 2942 : 			ListItemAddW (list, i, GetString ("TOTAL_DATA_WRITTEN"));

  009b1	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JBAOAAB@TOTAL_DATA_WRITTEN?$AA@
  009b6	e8 00 00 00 00	 call	 _GetString
  009bb	50		 push	 eax
  009bc	53		 push	 ebx
  009bd	56		 push	 esi
  009be	e8 00 00 00 00	 call	 _ListItemAddW

; 2943 : 			GetSizeString (prop.totalBytesWritten, sw);

  009c3	8b 85 48 02 00
	00		 mov	 eax, DWORD PTR _prop$136828[ebp+584]
  009c9	8b 8d 44 02 00
	00		 mov	 ecx, DWORD PTR _prop$136828[ebp+580]
  009cf	8d 95 54 06 00
	00		 lea	 edx, DWORD PTR _sw$136833[ebp]
  009d5	52		 push	 edx
  009d6	50		 push	 eax
  009d7	51		 push	 ecx
  009d8	e8 00 00 00 00	 call	 _GetSizeString
  009dd	83 c4 48	 add	 esp, 72			; 00000048H

; 2944 : 			ListSubItemSetW (list, i++, 1, sw);

  009e0	8d 95 54 06 00
	00		 lea	 edx, DWORD PTR _sw$136833[ebp]
  009e6	52		 push	 edx
  009e7	8b c3		 mov	 eax, ebx
  009e9	6a 01		 push	 1
  009eb	50		 push	 eax
  009ec	56		 push	 esi
  009ed	43		 inc	 ebx
  009ee	e8 00 00 00 00	 call	 _ListSubItemSetW
  009f3	83 c4 10	 add	 esp, 16			; 00000010H

; 2945 : 
; 2946 : 			if (bSysEnc)

  009f6	83 7d d8 00	 cmp	 DWORD PTR _bSysEnc$[ebp], 0
  009fa	0f 84 4b 01 00
	00		 je	 $LN4@VolumeProp

; 2947 : 			{
; 2948 : 				// CipherShed Boot Loader version
; 2949 : 				ListItemAddW (list, i, GetString ("TC_BOOT_LOADER_VERSION"));

  00a00	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@HPIFIMHF@TC_BOOT_LOADER_VERSION?$AA@
  00a05	e8 00 00 00 00	 call	 _GetString
  00a0a	50		 push	 eax
  00a0b	53		 push	 ebx
  00a0c	56		 push	 esi
  00a0d	e8 00 00 00 00	 call	 _ListItemAddW

; 2950 : 				ListSubItemSet (list, i++, 1, (char *) GetUserFriendlyVersionString (BootEncStatus.BootLoaderVersion).c_str());

  00a12	0f b7 05 04 00
	00 00		 movzx	 eax, WORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+4
  00a19	50		 push	 eax
  00a1a	8d 4d 90	 lea	 ecx, DWORD PTR $T163937[ebp]
  00a1d	8b fb		 mov	 edi, ebx
  00a1f	51		 push	 ecx
  00a20	43		 inc	 ebx
  00a21	e8 00 00 00 00	 call	 ?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; GetUserFriendlyVersionString
  00a26	83 c4 18	 add	 esp, 24			; 00000018H
  00a29	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00a2d	72 05		 jb	 SHORT $LN84@VolumeProp
  00a2f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00a32	eb 03		 jmp	 SHORT $LN85@VolumeProp
$LN84@VolumeProp:
  00a34	83 c0 04	 add	 eax, 4
$LN85@VolumeProp:
  00a37	50		 push	 eax
  00a38	6a 01		 push	 1
  00a3a	57		 push	 edi
  00a3b	56		 push	 esi
  00a3c	e8 00 00 00 00	 call	 _ListSubItemSet
  00a41	83 c4 10	 add	 esp, 16			; 00000010H
  00a44	8d 4d 90	 lea	 ecx, DWORD PTR $T163937[ebp]
  00a47	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 2951 : 
; 2952 : 				// Encrypted portion
; 2953 : 				ListItemAddW (list, i, GetString ("ENCRYPTED_PORTION"));

  00a4c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EBMHNMJD@ENCRYPTED_PORTION?$AA@
  00a51	e8 00 00 00 00	 call	 _GetString
  00a56	50		 push	 eax
  00a57	53		 push	 ebx
  00a58	56		 push	 esi
  00a59	e8 00 00 00 00	 call	 _ListItemAddW

; 2954 : 				if (GetSysEncDeviceEncryptedPartSize (FALSE) == GetSysEncDeviceSize (FALSE))

  00a5e	6a 00		 push	 0
  00a60	e8 00 00 00 00	 call	 ?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z ; GetSysEncDeviceEncryptedPartSize
  00a65	6a 00		 push	 0
  00a67	8b f8		 mov	 edi, eax
  00a69	89 55 ec	 mov	 DWORD PTR tv715[ebp+4], edx
  00a6c	e8 00 00 00 00	 call	 ?GetSysEncDeviceSize@@YA_KH@Z ; GetSysEncDeviceSize
  00a71	83 c4 18	 add	 esp, 24			; 00000018H
  00a74	3b f8		 cmp	 edi, eax
  00a76	75 0c		 jne	 SHORT $LN7@VolumeProp
  00a78	39 55 ec	 cmp	 DWORD PTR tv715[ebp+4], edx
  00a7b	75 07		 jne	 SHORT $LN7@VolumeProp

; 2955 : 					ListSubItemSetW (list, i++, 1, GetString ("ENCRYPTED_PORTION_FULLY_ENCRYPTED"));

  00a7d	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FDEMMPMK@ENCRYPTED_PORTION_FULLY_ENCRYPTE@
  00a82	eb 1b		 jmp	 SHORT $LN124@VolumeProp
$LN7@VolumeProp:

; 2956 : 				else if (GetSysEncDeviceEncryptedPartSize (FALSE) <= 1)

  00a84	33 ff		 xor	 edi, edi
  00a86	57		 push	 edi
  00a87	e8 00 00 00 00	 call	 ?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z ; GetSysEncDeviceEncryptedPartSize
  00a8c	83 c4 04	 add	 esp, 4
  00a8f	3b d7		 cmp	 edx, edi
  00a91	77 25		 ja	 SHORT $LN5@VolumeProp
  00a93	72 05		 jb	 SHORT $LN108@VolumeProp
  00a95	83 f8 01	 cmp	 eax, 1
  00a98	77 1e		 ja	 SHORT $LN5@VolumeProp
$LN108@VolumeProp:

; 2957 : 					ListSubItemSetW (list, i++, 1, GetString ("ENCRYPTED_PORTION_NOT_ENCRYPTED"));

  00a9a	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@EPNHMBGD@ENCRYPTED_PORTION_NOT_ENCRYPTED?$AA@
$LN124@VolumeProp:
  00a9f	e8 00 00 00 00	 call	 _GetString
  00aa4	50		 push	 eax
  00aa5	6a 01		 push	 1
  00aa7	53		 push	 ebx
  00aa8	56		 push	 esi
  00aa9	e8 00 00 00 00	 call	 _ListSubItemSetW
  00aae	83 c4 14	 add	 esp, 20			; 00000014H

; 2967 : 				}
; 2968 : 			}
; 2969 : 
; 2970 : 			return 0;

  00ab1	33 c0		 xor	 eax, eax
  00ab3	e9 cb 00 00 00	 jmp	 $LN55@VolumeProp
$LN5@VolumeProp:

; 2958 : 				else
; 2959 : 				{
; 2960 : 
; 2961 : 					_snwprintf (sw, 
; 2962 : 						sizeof sw/2,
; 2963 : 						GetString ("PROCESSED_PORTION_X_PERCENT"),
; 2964 : 						(double) GetSysEncDeviceEncryptedPartSize (FALSE) / (double) GetSysEncDeviceSize (FALSE) * 100.0);

  00ab8	57		 push	 edi
  00ab9	e8 00 00 00 00	 call	 ?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z ; GetSysEncDeviceEncryptedPartSize
  00abe	89 45 e8	 mov	 DWORD PTR tv1032[ebp], eax
  00ac1	8b c2		 mov	 eax, edx
  00ac3	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  00ac9	89 55 ec	 mov	 DWORD PTR tv1032[ebp+4], edx
  00acc	df 6d e8	 fild	 QWORD PTR tv1032[ebp]
  00acf	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00ad4	89 45 ec	 mov	 DWORD PTR tv1035[ebp+4], eax
  00ad7	89 7d e8	 mov	 DWORD PTR tv1035[ebp], edi
  00ada	df 6d e8	 fild	 QWORD PTR tv1035[ebp]
  00add	57		 push	 edi
  00ade	d9 e0		 fchs
  00ae0	de c1		 faddp	 ST(1), ST(0)
  00ae2	dd 5d dc	 fstp	 QWORD PTR tv301[ebp]
  00ae5	e8 00 00 00 00	 call	 ?GetSysEncDeviceSize@@YA_KH@Z ; GetSysEncDeviceSize
  00aea	89 45 e8	 mov	 DWORD PTR tv1049[ebp], eax
  00aed	8b c2		 mov	 eax, edx
  00aef	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  00af5	89 55 ec	 mov	 DWORD PTR tv1049[ebp+4], edx
  00af8	df 6d e8	 fild	 QWORD PTR tv1049[ebp]
  00afb	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00b00	89 45 ec	 mov	 DWORD PTR tv1052[ebp+4], eax
  00b03	89 7d e8	 mov	 DWORD PTR tv1052[ebp], edi
  00b06	df 6d e8	 fild	 QWORD PTR tv1052[ebp]
  00b09	d9 e0		 fchs
  00b0b	de c1		 faddp	 ST(1), ST(0)
  00b0d	dc 7d dc	 fdivr	 QWORD PTR tv301[ebp]
  00b10	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  00b16	dd 1c 24	 fstp	 QWORD PTR [esp]
  00b19	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@HDAHKLF@PROCESSED_PORTION_X_PERCENT?$AA@
  00b1e	e8 00 00 00 00	 call	 _GetString
  00b23	83 c4 04	 add	 esp, 4
  00b26	50		 push	 eax
  00b27	8d 95 54 06 00
	00		 lea	 edx, DWORD PTR _sw$136833[ebp]
  00b2d	68 00 04 00 00	 push	 1024			; 00000400H
  00b32	52		 push	 edx
  00b33	e8 00 00 00 00	 call	 __snwprintf

; 2965 : 
; 2966 : 					ListSubItemSetW (list, i++, 1, sw);

  00b38	8d 85 54 06 00
	00		 lea	 eax, DWORD PTR _sw$136833[ebp]
  00b3e	50		 push	 eax
  00b3f	6a 01		 push	 1
  00b41	53		 push	 ebx
  00b42	56		 push	 esi
  00b43	e8 00 00 00 00	 call	 _ListSubItemSetW
  00b48	83 c4 24	 add	 esp, 36			; 00000024H
$LN4@VolumeProp:

; 2967 : 				}
; 2968 : 			}
; 2969 : 
; 2970 : 			return 0;

  00b4b	33 c0		 xor	 eax, eax
  00b4d	eb 34		 jmp	 SHORT $LN55@VolumeProp
$LN19@VolumeProp:

; 2805 : 			{
; 2806 : 				ListSubItemSet (list, i, 1, "?");

  00b4f	68 00 00 00 00	 push	 OFFSET ??_C@_01OGPIMHDM@?$DP?$AA@
  00b54	6a 01		 push	 1
  00b56	53		 push	 ebx
  00b57	57		 push	 edi
  00b58	e8 00 00 00 00	 call	 _ListSubItemSet
  00b5d	83 c4 10	 add	 esp, 16			; 00000010H

; 2807 : 				return 1;

  00b60	eb 1c		 jmp	 SHORT $LN125@VolumeProp
$LN45@VolumeProp:

; 2682 : 				{
; 2683 : 				case TC_MLIST_ITEM_FREE:
; 2684 : 
; 2685 : 					// No mounted volume
; 2686 : 					EndDialog (hwndDlg, IDOK);

  00b62	6a 01		 push	 1
  00b64	56		 push	 esi
  00b65	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 2687 : 					return 0;

  00b6b	33 c0		 xor	 eax, eax
  00b6d	eb 14		 jmp	 SHORT $LN55@VolumeProp
$LN1@VolumeProp:

; 2978 : 		}
; 2979 : 		return 0;
; 2980 : 
; 2981 : 	case WM_CLOSE:
; 2982 : 		EndDialog (hwndDlg, lw);

  00b6f	0f b7 8d e8 0e
	00 00		 movzx	 ecx, WORD PTR _wParam$[ebp]
  00b76	51		 push	 ecx
$LN119@VolumeProp:
  00b77	56		 push	 esi
  00b78	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
$LN125@VolumeProp:

; 2983 : 		return 1;

  00b7e	b8 01 00 00 00	 mov	 eax, 1
$LN55@VolumeProp:

; 2987 : }

  00b83	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00b86	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00b8d	59		 pop	 ecx
  00b8e	5f		 pop	 edi
  00b8f	5e		 pop	 esi
  00b90	5b		 pop	 ebx
  00b91	8b 8d d4 0e 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b97	33 cd		 xor	 ecx, ebp
  00b99	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b9e	81 c5 d8 0e 00
	00		 add	 ebp, 3800		; 00000ed8H
  00ba4	8b e5		 mov	 esp, ebp
  00ba6	5d		 pop	 ebp
  00ba7	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a d0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-304]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 8a e0 0e 00
	00		 mov	 ecx, DWORD PTR [edx+3808]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z ENDP	; VolumePropertiesDlgProc
PUBLIC	??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::~ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ$0
__ehfuncinfo$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::~ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0002b	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00033	e8 00 00 00 00	 call	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
  00038	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0003e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	5e		 pop	 esi
  0004b	83 c4 10	 add	 esp, 16			; 00000010H
  0004e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::~ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
PUBLIC	??_C@_0BHH@CINFKGAJ@Debugging?5information?5for?5system@ ; `string'
EXTRN	_DebugMsgBox:PROC
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
;	COMDAT ??_C@_0BHH@CINFKGAJ@Debugging?5information?5for?5system@
CONST	SEGMENT
??_C@_0BHH@CINFKGAJ@Debugging?5information?5for?5system@ DB 'Debugging in'
	DB	'formation for system encryption:', 0aH, 0aH, 'DeviceFilterAct'
	DB	'ive: %d', 0aH, 'BootLoaderVersion: %x', 0aH, 'SetupInProgress'
	DB	': %d', 0aH, 'SetupMode: %d', 0aH, 'VolumeHeaderPresent: %d', 0aH
	DB	'DriveMounted: %d', 0aH, 'DriveEncrypted: %d', 0aH, 'HiddenSys'
	DB	'tem: %d', 0aH, 'HiddenSystemPartitionStart: %I64d', 0aH, 'Con'
	DB	'figuredEncryptedAreaStart: %I64d', 0aH, 'ConfiguredEncryptedA'
	DB	'reaEnd: %I64d', 0aH, 'EncryptedAreaStart: %I64d', 0aH, 'Encry'
	DB	'ptedAreaEnd: %I64d', 0aH, 'Encrypted: %I64d%%', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?ShowSystemEncryptionStatus@@YAXXZ$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?ShowSystemEncryptionStatus@@YAXXZ$0
__unwindtable$?ShowSystemEncryptionStatus@@YAXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?ShowSystemEncryptionStatus@@YAXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?ShowSystemEncryptionStatus@@YAXXZ$2
__ehfuncinfo$?ShowSystemEncryptionStatus@@YAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ShowSystemEncryptionStatus@@YAXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?ShowSystemEncryptionStatus@@YAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?ShowSystemEncryptionStatus@@YAXXZ
_TEXT	SEGMENT
$T164029 = -114						; size = 94
_e$137896 = -20						; size = 4
__$EHRec$ = -16						; size = 16
?ShowSystemEncryptionStatus@@YAXXZ PROC			; ShowSystemEncryptionStatus, COMDAT

; 4358 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ShowSystemEncryptionStatus@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 4359 : 	try
; 4360 : 	{
; 4361 : 		BootEncStatus = BootEncObj->GetStatus();

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00031	8d 45 8e	 lea	 eax, DWORD PTR $T164029[ebp]
  00034	50		 push	 eax
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003c	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00041	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00046	8b f0		 mov	 esi, eax
  00048	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  0004d	f3 a5		 rep movsd
  0004f	66 a5		 movsw
$LN11@ShowSystem:

; 4367 : 
; 4368 : 	if (GetAsyncKeyState (VK_SHIFT) < 0 && GetAsyncKeyState (VK_CONTROL) < 0)

  00051	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetAsyncKeyState@4
  00057	6a 10		 push	 16			; 00000010H
  00059	ff d6		 call	 esi
  0005b	66 85 c0	 test	 ax, ax
  0005e	0f 8d 09 01 00
	00		 jge	 $LN2@ShowSystem
  00064	6a 11		 push	 17			; 00000011H
  00066	ff d6		 call	 esi
  00068	66 85 c0	 test	 ax, ax
  0006b	0f 8d fc 00 00
	00		 jge	 $LN2@ShowSystem

; 4369 : 	{
; 4370 : 		// Ctrl+Shift held (for debugging purposes)
; 4371 : 
; 4372 : 		DebugMsgBox ("Debugging information for system encryption:\n\nDeviceFilterActive: %d\nBootLoaderVersion: %x\nSetupInProgress: %d\nSetupMode: %d\nVolumeHeaderPresent: %d\nDriveMounted: %d\nDriveEncrypted: %d\n"
; 4373 : 			"HiddenSystem: %d\nHiddenSystemPartitionStart: %I64d\n"
; 4374 : 			"ConfiguredEncryptedAreaStart: %I64d\nConfiguredEncryptedAreaEnd: %I64d\nEncryptedAreaStart: %I64d\nEncryptedAreaEnd: %I64d\nEncrypted: %I64d%%",
; 4375 : 			BootEncStatus.DeviceFilterActive,
; 4376 : 			BootEncStatus.BootLoaderVersion,
; 4377 : 			BootEncStatus.SetupInProgress,
; 4378 : 			BootEncStatus.SetupMode,
; 4379 : 			BootEncStatus.VolumeHeaderPresent,
; 4380 : 			BootEncStatus.DriveMounted,
; 4381 : 			BootEncStatus.DriveEncrypted,
; 4382 : 			BootEncStatus.HiddenSystem ? 1 : 0,
; 4383 : 			BootEncStatus.HiddenSystemPartitionStart,
; 4384 : 			BootEncStatus.ConfiguredEncryptedAreaStart,
; 4385 : 			BootEncStatus.ConfiguredEncryptedAreaEnd,
; 4386 : 			BootEncStatus.EncryptedAreaStart,
; 4387 : 			BootEncStatus.EncryptedAreaEnd,
; 4388 : 			!BootEncStatus.DriveEncrypted ? 0 : (BootEncStatus.EncryptedAreaEnd + 1 - BootEncStatus.EncryptedAreaStart) * 100I64 / (BootEncStatus.ConfiguredEncryptedAreaEnd + 1 - BootEncStatus.ConfiguredEncryptedAreaStart));

  00071	8b 35 0e 00 00
	00		 mov	 esi, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14
  00077	85 f6		 test	 esi, esi
  00079	75 1b		 jne	 SHORT $LN6@ShowSystem
  0007b	33 c0		 xor	 eax, eax
  0007d	33 d2		 xor	 edx, edx
  0007f	eb 64		 jmp	 SHORT $LN7@ShowSystem
__catch$?ShowSystemEncryptionStatus@@YAXXZ$0:

; 4362 : 	}
; 4363 : 	catch (Exception &e)
; 4364 : 	{
; 4365 : 		e.Show (MainDlg);

  00081	8b 4d ec	 mov	 ecx, DWORD PTR _e$137896[ebp]
  00084	8b 11		 mov	 edx, DWORD PTR [ecx]
  00086	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0008b	8b 12		 mov	 edx, DWORD PTR [edx]
  0008d	50		 push	 eax
  0008e	ff d2		 call	 edx

; 4366 : 	}

  00090	b8 00 00 00 00	 mov	 eax, $LN11@ShowSystem
  00095	c3		 ret	 0
$LN6@ShowSystem:

; 4369 : 	{
; 4370 : 		// Ctrl+Shift held (for debugging purposes)
; 4371 : 
; 4372 : 		DebugMsgBox ("Debugging information for system encryption:\n\nDeviceFilterActive: %d\nBootLoaderVersion: %x\nSetupInProgress: %d\nSetupMode: %d\nVolumeHeaderPresent: %d\nDriveMounted: %d\nDriveEncrypted: %d\n"
; 4373 : 			"HiddenSystem: %d\nHiddenSystemPartitionStart: %I64d\n"
; 4374 : 			"ConfiguredEncryptedAreaStart: %I64d\nConfiguredEncryptedAreaEnd: %I64d\nEncryptedAreaStart: %I64d\nEncryptedAreaEnd: %I64d\nEncrypted: %I64d%%",
; 4375 : 			BootEncStatus.DeviceFilterActive,
; 4376 : 			BootEncStatus.BootLoaderVersion,
; 4377 : 			BootEncStatus.SetupInProgress,
; 4378 : 			BootEncStatus.SetupMode,
; 4379 : 			BootEncStatus.VolumeHeaderPresent,
; 4380 : 			BootEncStatus.DriveMounted,
; 4381 : 			BootEncStatus.DriveEncrypted,
; 4382 : 			BootEncStatus.HiddenSystem ? 1 : 0,
; 4383 : 			BootEncStatus.HiddenSystemPartitionStart,
; 4384 : 			BootEncStatus.ConfiguredEncryptedAreaStart,
; 4385 : 			BootEncStatus.ConfiguredEncryptedAreaEnd,
; 4386 : 			BootEncStatus.EncryptedAreaStart,
; 4387 : 			BootEncStatus.EncryptedAreaEnd,
; 4388 : 			!BootEncStatus.DriveEncrypted ? 0 : (BootEncStatus.EncryptedAreaEnd + 1 - BootEncStatus.EncryptedAreaStart) * 100I64 / (BootEncStatus.ConfiguredEncryptedAreaEnd + 1 - BootEncStatus.ConfiguredEncryptedAreaStart));

  00096	a1 32 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+50
  0009b	2b 05 2a 00 00
	00		 sub	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+42
  000a1	8b 0d 36 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+54
  000a7	1b 0d 2e 00 00
	00		 sbb	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+46
  000ad	6a 00		 push	 0
  000af	83 c0 01	 add	 eax, 1
  000b2	6a 64		 push	 100			; 00000064H
  000b4	83 d1 00	 adc	 ecx, 0
  000b7	51		 push	 ecx
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 __allmul
  000be	8b 0d 22 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+34
  000c4	2b 0d 1a 00 00
	00		 sub	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+26
  000ca	8b 3d 26 00 00
	00		 mov	 edi, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+38
  000d0	1b 3d 1e 00 00
	00		 sbb	 edi, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+30
  000d6	83 c1 01	 add	 ecx, 1
  000d9	83 d7 00	 adc	 edi, 0
  000dc	57		 push	 edi
  000dd	51		 push	 ecx
  000de	52		 push	 edx
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 __alldiv
$LN7@ShowSystem:
  000e5	8b 0d 2e 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+46
  000eb	52		 push	 edx
  000ec	8b 15 36 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+54
  000f2	50		 push	 eax
  000f3	a1 32 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+50
  000f8	52		 push	 edx
  000f9	8b 15 2a 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+42
  000ff	50		 push	 eax
  00100	a1 26 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+38
  00105	51		 push	 ecx
  00106	8b 0d 22 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+34
  0010c	52		 push	 edx
  0010d	8b 15 1e 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+30
  00113	50		 push	 eax
  00114	a1 1a 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+26
  00119	51		 push	 ecx
  0011a	8b 0d 56 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+86
  00120	52		 push	 edx
  00121	8b 15 52 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+82
  00127	50		 push	 eax
  00128	33 c0		 xor	 eax, eax
  0012a	39 05 4e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+78, eax
  00130	51		 push	 ecx
  00131	8b 0d 06 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6
  00137	52		 push	 edx
  00138	8b 15 0a 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+10
  0013e	0f 95 c0	 setne	 al
  00141	50		 push	 eax
  00142	a1 42 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+66
  00147	56		 push	 esi
  00148	51		 push	 ecx
  00149	8b 0d 3e 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62
  0014f	52		 push	 edx
  00150	0f b7 15 04 00
	00 00		 movzx	 edx, WORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+4
  00157	50		 push	 eax
  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A
  0015d	51		 push	 ecx
  0015e	52		 push	 edx
  0015f	50		 push	 eax
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_0BHH@CINFKGAJ@Debugging?5information?5for?5system@
  00165	e8 00 00 00 00	 call	 _DebugMsgBox
  0016a	83 c4 54	 add	 esp, 84			; 00000054H
$LN2@ShowSystem:

; 4389 : 	}
; 4390 : 
; 4391 : 	if (!BootEncStatus.DriveEncrypted && !BootEncStatus.DriveMounted)

  0016d	83 3d 0e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14, 0
  00174	75 28		 jne	 SHORT $LN1@ShowSystem
  00176	83 3d 06 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, 0
  0017d	75 1f		 jne	 SHORT $LN1@ShowSystem

; 4392 : 	{
; 4393 : 		Info ("SYS_DRIVE_NOT_ENCRYPTED");

  0017f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BHICMCGD@SYS_DRIVE_NOT_ENCRYPTED?$AA@
  00184	e8 00 00 00 00	 call	 _Info
  00189	83 c4 04	 add	 esp, 4

; 4400 : 
; 4401 : }

  0018c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0018f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00196	59		 pop	 ecx
  00197	5f		 pop	 edi
  00198	5e		 pop	 esi
  00199	5b		 pop	 ebx
  0019a	8b e5		 mov	 esp, ebp
  0019c	5d		 pop	 ebp
  0019d	c3		 ret	 0
$LN1@ShowSystem:

; 4394 : 		return;
; 4395 : 	}
; 4396 : 
; 4397 : 	DialogBoxParamW (hInst, 
; 4398 : 		MAKEINTRESOURCEW (IDD_VOLUME_PROPERTIES), MainDlg,
; 4399 : 		(DLGPROC) VolumePropertiesDlgProc, (LPARAM) TRUE);

  0019e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  001a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  001aa	6a 01		 push	 1
  001ac	68 00 00 00 00	 push	 OFFSET ?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z ; VolumePropertiesDlgProc
  001b1	51		 push	 ecx
  001b2	6a 6c		 push	 108			; 0000006cH
  001b4	52		 push	 edx
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 4400 : 
; 4401 : }

  001bb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001be	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c5	59		 pop	 ecx
  001c6	5f		 pop	 edi
  001c7	5e		 pop	 esi
  001c8	5b		 pop	 ebx
  001c9	8b e5		 mov	 esp, ebp
  001cb	5d		 pop	 ebp
  001cc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?ShowSystemEncryptionStatus@@YAXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ShowSystemEncryptionStatus@@YAXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ShowSystemEncryptionStatus@@YAXXZ ENDP			; ShowSystemEncryptionStatus
PUBLIC	??1Partition@CipherShed@@QAE@XZ			; CipherShed::Partition::~Partition
; Function compile flags: /Ogtpy
;	COMDAT ??1Partition@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1Partition@CipherShed@@QAE@XZ PROC			; CipherShed::Partition::~Partition, COMDAT
; _this$ = ecx
  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	83 7e 7c 08	 cmp	 DWORD PTR [esi+124], 8
  00008	72 0c		 jb	 SHORT $LN24@Partition
  0000a	8b 46 68	 mov	 eax, DWORD PTR [esi+104]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00013	83 c4 04	 add	 esp, 4
$LN24@Partition:
  00016	33 db		 xor	 ebx, ebx
  00018	33 c9		 xor	 ecx, ecx
  0001a	c7 46 7c 07 00
	00 00		 mov	 DWORD PTR [esi+124], 7
  00021	89 5e 78	 mov	 DWORD PTR [esi+120], ebx
  00024	66 89 4e 68	 mov	 WORD PTR [esi+104], cx
  00028	83 7e 58 10	 cmp	 DWORD PTR [esi+88], 16	; 00000010H
  0002c	72 0c		 jb	 SHORT $LN50@Partition
  0002e	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00037	83 c4 04	 add	 esp, 4
$LN50@Partition:
  0003a	c7 46 58 0f 00
	00 00		 mov	 DWORD PTR [esi+88], 15	; 0000000fH
  00041	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
  00044	88 5e 44	 mov	 BYTE PTR [esi+68], bl
  00047	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0004b	72 0c		 jb	 SHORT $LN76@Partition
  0004d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4
$LN76@Partition:
  00059	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0005c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00063	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	c3		 ret	 0
??1Partition@CipherShed@@QAE@XZ ENDP			; CipherShed::Partition::~Partition
_TEXT	ENDS
PUBLIC	??_C@_0BN@NCIHJKNO@ASK_DELETE_KERNEL_CRASH_DUMP?$AA@ ; `string'
EXTRN	__imp__MoveFileA@8:PROC
EXTRN	_AskYesNo:PROC
;	COMDAT ??_C@_0BN@NCIHJKNO@ASK_DELETE_KERNEL_CRASH_DUMP?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0BN@NCIHJKNO@ASK_DELETE_KERNEL_CRASH_DUMP?$AA@ DB 'ASK_DELETE_KERNE'
	DB	'L_CRASH_DUMP', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
CONST	ENDS
;	COMDAT ??1Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@XZ
_TEXT	SEGMENT
??1Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@XZ PROC ; `AnalyzeKernelMiniDump'::`17'::Finally8684::~Finally8684, COMDAT
; _this$ = esi

; 8684 : 	});

  00000	53		 push	 ebx
  00001	33 db		 xor	 ebx, ebx
  00003	55		 push	 ebp
  00004	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	74 51		 je	 SHORT $LN1@Finally868
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@NCIHJKNO@ASK_DELETE_KERNEL_CRASH_DUMP?$AA@
  00013	e8 00 00 00 00	 call	 _AskYesNo
  00018	83 c4 04	 add	 esp, 4
  0001b	83 f8 06	 cmp	 eax, 6
  0001e	75 1d		 jne	 SHORT $LN2@Finally868
  00020	39 6e 18	 cmp	 DWORD PTR [esi+24], ebp
  00023	72 0c		 jb	 SHORT $LN19@Finally868
  00025	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4
  0002f	eb 2e		 jmp	 SHORT $LN1@Finally868
$LN19@Finally868:
  00031	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00034	50		 push	 eax
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4
  0003b	eb 22		 jmp	 SHORT $LN1@Finally868
$LN2@Finally868:
  0003d	39 6e 34	 cmp	 DWORD PTR [esi+52], ebp
  00040	72 05		 jb	 SHORT $LN25@Finally868
  00042	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00045	eb 03		 jmp	 SHORT $LN26@Finally868
$LN25@Finally868:
  00047	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
$LN26@Finally868:
  0004a	39 6e 18	 cmp	 DWORD PTR [esi+24], ebp
  0004d	72 05		 jb	 SHORT $LN31@Finally868
  0004f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00052	eb 03		 jmp	 SHORT $LN32@Finally868
$LN31@Finally868:
  00054	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
$LN32@Finally868:
  00057	51		 push	 ecx
  00058	50		 push	 eax
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveFileA@8
$LN1@Finally868:
  0005f	39 6e 34	 cmp	 DWORD PTR [esi+52], ebp
  00062	72 0c		 jb	 SHORT $LN49@Finally868
  00064	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006d	83 c4 04	 add	 esp, 4
$LN49@Finally868:
  00070	c7 46 34 0f 00
	00 00		 mov	 DWORD PTR [esi+52], 15	; 0000000fH
  00077	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  0007a	88 5e 20	 mov	 BYTE PTR [esi+32], bl
  0007d	39 6e 18	 cmp	 DWORD PTR [esi+24], ebp
  00080	72 0c		 jb	 SHORT $LN75@Finally868
  00082	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008b	83 c4 04	 add	 esp, 4
$LN75@Finally868:
  0008e	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00091	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00098	5d		 pop	 ebp
  00099	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  0009c	5b		 pop	 ebx
  0009d	c3		 ret	 0
??1Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@XZ ENDP ; `AnalyzeKernelMiniDump'::`17'::Finally8684::~Finally8684
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
$T164818 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1278 : 		{	// erase element at _Where

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 1279 : 		size_type _Count = _Pdif(_Where, begin());

  00008	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0000b	57		 push	 edi
  0000c	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  0000f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00012	72 04		 jb	 SHORT $LN7@erase@4
  00014	8b 2b		 mov	 ebp, DWORD PTR [ebx]
  00016	eb 02		 jmp	 SHORT $LN8@erase@4
$LN7@erase@4:
  00018	8b eb		 mov	 ebp, ebx
$LN8@erase@4:
  0001a	85 ed		 test	 ebp, ebp
  0001c	74 23		 je	 SHORT $LN14@erase@4
  0001e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00021	72 04		 jb	 SHORT $LN24@erase@4
  00023	8b 03		 mov	 eax, DWORD PTR [ebx]
  00025	eb 02		 jmp	 SHORT $LN25@erase@4
$LN24@erase@4:
  00027	8b c3		 mov	 eax, ebx
$LN25@erase@4:
  00029	3b c5		 cmp	 eax, ebp
  0002b	77 14		 ja	 SHORT $LN14@erase@4
  0002d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00030	72 04		 jb	 SHORT $LN28@erase@4
  00032	8b 03		 mov	 eax, DWORD PTR [ebx]
  00034	eb 02		 jmp	 SHORT $LN29@erase@4
$LN28@erase@4:
  00036	8b c3		 mov	 eax, ebx
$LN29@erase@4:
  00038	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0003b	03 c8		 add	 ecx, eax
  0003d	3b e9		 cmp	 ebp, ecx
  0003f	76 05		 jbe	 SHORT $LN13@erase@4
$LN14@erase@4:
  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN13@erase@4:
  00046	8b 7c 24 24	 mov	 edi, DWORD PTR __Where$[esp+24]
  0004a	8b 44 24 20	 mov	 eax, DWORD PTR __Where$[esp+20]
  0004e	89 44 24 10	 mov	 DWORD PTR $T164818[esp+24], eax
  00052	85 ff		 test	 edi, edi
  00054	74 14		 je	 SHORT $LN33@erase@4
$LN32@erase@4:
  00056	83 f8 fc	 cmp	 eax, -4			; fffffffcH
  00059	74 0d		 je	 SHORT $LN34@erase@4
  0005b	85 c0		 test	 eax, eax
  0005d	74 04		 je	 SHORT $LN37@erase@4
  0005f	3b c6		 cmp	 eax, esi
  00061	74 05		 je	 SHORT $LN34@erase@4
$LN37@erase@4:
  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN34@erase@4:
  00068	2b fd		 sub	 edi, ebp
$LN33@erase@4:

; 1280 : 		erase(_Count, 1);

  0006a	6a 01		 push	 1
  0006c	57		 push	 edi
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1281 : 		return (_STRING_ITERATOR(_Myptr() + _Count));

  00074	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00078	72 02		 jb	 SHORT $LN48@erase@4
  0007a	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN48@erase@4:
  0007c	56		 push	 esi
  0007d	8b 74 24 20	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+24]
  00081	03 df		 add	 ebx, edi
  00083	53		 push	 ebx
  00084	8b ce		 mov	 ecx, esi
  00086	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
  0008b	5f		 pop	 edi
  0008c	8b c6		 mov	 eax, esi
  0008e	5e		 pop	 esi
  0008f	5d		 pop	 ebp
  00090	5b		 pop	 ebx

; 1282 : 		}

  00091	83 c4 08	 add	 esp, 8
  00094	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
$T164836 = -8						; size = 8
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear, COMDAT
; _this$ = ecx

; 1292 : 		{	// erase all

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 1293 : 		erase(begin(), end());

  00009	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  0000c	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  0000f	83 fa 10	 cmp	 edx, 16			; 00000010H
  00012	72 04		 jb	 SHORT $LN7@clear
  00014	8b 06		 mov	 eax, DWORD PTR [esi]
  00016	eb 02		 jmp	 SHORT $LN8@clear
$LN7@clear:
  00018	8b c6		 mov	 eax, esi
$LN8@clear:
  0001a	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0001d	8d 2c 01	 lea	 ebp, DWORD PTR [ecx+eax]
  00020	85 ed		 test	 ebp, ebp
  00022	74 20		 je	 SHORT $LN14@clear
  00024	83 fa 10	 cmp	 edx, 16			; 00000010H
  00027	72 04		 jb	 SHORT $LN24@clear
  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	eb 02		 jmp	 SHORT $LN25@clear
$LN24@clear:
  0002d	8b c6		 mov	 eax, esi
$LN25@clear:
  0002f	3b c5		 cmp	 eax, ebp
  00031	77 11		 ja	 SHORT $LN14@clear
  00033	83 fa 10	 cmp	 edx, 16			; 00000010H
  00036	72 04		 jb	 SHORT $LN28@clear
  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	eb 02		 jmp	 SHORT $LN29@clear
$LN28@clear:
  0003c	8b c6		 mov	 eax, esi
$LN29@clear:
  0003e	03 c8		 add	 ecx, eax
  00040	3b e9		 cmp	 ebp, ecx
  00042	76 05		 jbe	 SHORT $LN13@clear
$LN14@clear:
  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN13@clear:
  00049	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  0004c	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0004f	72 04		 jb	 SHORT $LN34@clear
  00051	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00053	eb 02		 jmp	 SHORT $LN35@clear
$LN34@clear:
  00055	8b de		 mov	 ebx, esi
$LN35@clear:
  00057	85 db		 test	 ebx, ebx
  00059	74 1f		 je	 SHORT $LN41@clear
  0005b	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0005e	72 04		 jb	 SHORT $LN51@clear
  00060	8b 06		 mov	 eax, DWORD PTR [esi]
  00062	eb 02		 jmp	 SHORT $LN52@clear
$LN51@clear:
  00064	8b c6		 mov	 eax, esi
$LN52@clear:
  00066	3b c3		 cmp	 eax, ebx
  00068	77 10		 ja	 SHORT $LN41@clear
  0006a	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0006d	72 02		 jb	 SHORT $LN55@clear
  0006f	8b 36		 mov	 esi, DWORD PTR [esi]
$LN55@clear:
  00071	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00074	03 c6		 add	 eax, esi
  00076	3b d8		 cmp	 ebx, eax
  00078	76 05		 jbe	 SHORT $LN40@clear
$LN41@clear:
  0007a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN40@clear:
  0007f	55		 push	 ebp
  00080	57		 push	 edi
  00081	53		 push	 ebx
  00082	57		 push	 edi
  00083	8d 4c 24 20	 lea	 ecx, DWORD PTR $T164836[esp+40]
  00087	51		 push	 ecx
  00088	8b cf		 mov	 ecx, edi
  0008a	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5d		 pop	 ebp
  00092	5b		 pop	 ebx

; 1294 : 		}

  00093	83 c4 08	 add	 esp, 8
  00096	c3		 ret	 0
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
_TEXT	ENDS
PUBLIC	?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 641  : 		return (iterator(_Myfirst, this));

  00004	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00015	76 05		 jbe	 SHORT $LN7@begin@4
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@begin@4:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 642  : 		}

  00028	c2 04 00	 ret	 4
?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?begin@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin, COMDAT
; _this$ = ecx

; 534  : 		return (iterator(_Nextnode(_Myhead), this));

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 535  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end, COMDAT
; _this$ = ecx

; 544  : 		return (iterator(_Myhead, this));

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 545  : 		}

  0000e	c2 04 00	 ret	 4
?end@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end
_TEXT	ENDS
PUBLIC	??1?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	??1?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??1?$_List_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::_List_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_List_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::_List_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_List_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::_List_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_List_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 946  : 		return (append(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 947  : 		}

  0000e	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 992  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 993  : 		_DEBUG_POINTER(_Ptr);
; 994  : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@append@4:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@append@4
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 995  : 		}

  00022	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Right$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 10	 mov	 ebp, DWORD PTR __Roff$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 6b 14	 cmp	 DWORD PTR [ebx+20], ebp
  00011	73 05		 jae	 SHORT $LN5@assign@2

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign@2:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fd		 sub	 edi, ebp
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign@2

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign@2:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f3		 cmp	 esi, ebx
  00029	75 1f		 jne	 SHORT $LN3@assign@2

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fd		 add	 edi, ebp
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	55		 push	 ebp
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign@2:

; 1055 : 		else if (_Grow(_Num))

  0004a	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004d	76 05		 jbe	 SHORT $LN17@assign@2
  0004f	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign@2:
  00054	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00057	3b c7		 cmp	 eax, edi
  00059	73 1b		 jae	 SHORT $LN16@assign@2
  0005b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005e	50		 push	 eax
  0005f	57		 push	 edi
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00067	85 ff		 test	 edi, edi
$LN87@assign@2:
  00069	76 66		 jbe	 SHORT $LN86@assign@2

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006b	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0006f	72 2f		 jb	 SHORT $LN64@assign@2
  00071	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00074	eb 2d		 jmp	 SHORT $LN65@assign@2

; 1055 : 		else if (_Grow(_Num))

$LN16@assign@2:
  00076	85 ff		 test	 edi, edi
  00078	75 ef		 jne	 SHORT $LN87@assign@2
  0007a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0007d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00080	72 0f		 jb	 SHORT $LN58@assign@2
  00082	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00085	5f		 pop	 edi
  00086	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00089	8b c6		 mov	 eax, esi
  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	5b		 pop	 ebx

; 1061 : 		}

  0008e	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN58@assign@2:
  00091	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00098	8b c6		 mov	 eax, esi
  0009a	5e		 pop	 esi
  0009b	5d		 pop	 ebp
  0009c	5b		 pop	 ebx

; 1061 : 		}

  0009d	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN64@assign@2:
  000a0	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN65@assign@2:
  000a3	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000a6	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a9	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000ac	72 04		 jb	 SHORT $LN68@assign@2
  000ae	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b0	eb 02		 jmp	 SHORT $LN69@assign@2
$LN68@assign@2:
  000b2	8b c3		 mov	 eax, ebx
$LN69@assign@2:
  000b4	57		 push	 edi
  000b5	03 d5		 add	 edx, ebp
  000b7	52		 push	 edx
  000b8	51		 push	 ecx
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _memcpy_s
  000bf	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000c2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c9	72 02		 jb	 SHORT $LN82@assign@2
  000cb	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN82@assign@2:
  000cd	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN86@assign@2:
  000d1	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000d2	8b c6		 mov	 eax, esi
  000d4	5e		 pop	 esi
  000d5	5d		 pop	 ebp
  000d6	5b		 pop	 ebx

; 1061 : 		}

  000d7	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z
_TEXT	SEGMENT
__Num$ = 8						; size = 4
__Off$ = 8						; size = 4
__Right$ = 12						; size = 4
tv140 = 16						; size = 4
__Roff$ = 16						; size = 4
__Count$ = 20						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1136 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off

  00000	53		 push	 ebx

; 1137 : 		if (_Mysize < _Off || _Right.size() < _Roff)

  00001	8b 5c 24 10	 mov	 ebx, DWORD PTR __Roff$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 10	 mov	 ebp, DWORD PTR __Right$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7c 24 14	 mov	 edi, DWORD PTR __Off$[esp+12]
  00010	8b f1		 mov	 esi, ecx
  00012	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00015	72 05		 jb	 SHORT $LN6@insert@2
  00017	39 5d 14	 cmp	 DWORD PTR [ebp+20], ebx
  0001a	73 05		 jae	 SHORT $LN7@insert@2
$LN6@insert@2:

; 1138 : 			_String_base::_Xran();	// _Off or _Roff off end

  0001c	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN7@insert@2:

; 1139 : 		size_type _Num = _Right.size() - _Roff;

  00021	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  00024	2b c3		 sub	 eax, ebx

; 1140 : 		if (_Num < _Count)

  00026	8b 5c 24 20	 mov	 ebx, DWORD PTR __Count$[esp+12]
  0002a	3b c3		 cmp	 eax, ebx
  0002c	73 02		 jae	 SHORT $LN5@insert@2

; 1141 : 			_Count = _Num;	// trim _Count to size

  0002e	8b d8		 mov	 ebx, eax
$LN5@insert@2:

; 1142 : 		if (npos - _Mysize <= _Count)

  00030	83 c8 ff	 or	 eax, -1
  00033	2b 46 14	 sub	 eax, DWORD PTR [esi+20]
  00036	3b c3		 cmp	 eax, ebx
  00038	77 05		 ja	 SHORT $LN4@insert@2

; 1143 : 			_String_base::_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN4@insert@2:

; 1144 : 
; 1145 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 86 1e 01 00
	00		 jbe	 $LN123@insert@2
  00047	8b 6e 14	 mov	 ebp, DWORD PTR [esi+20]
  0004a	03 eb		 add	 ebp, ebx
  0004c	89 6c 24 14	 mov	 DWORD PTR __Num$[esp+12], ebp
  00050	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  00053	76 05		 jbe	 SHORT $LN21@insert@2
  00055	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN21@insert@2:
  0005a	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005d	3b c5		 cmp	 eax, ebp
  0005f	73 23		 jae	 SHORT $LN20@insert@2
  00061	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00064	51		 push	 ecx
  00065	55		 push	 ebp
  00066	8b ce		 mov	 ecx, esi
  00068	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0006d	85 ed		 test	 ebp, ebp
$LN124@insert@2:
  0006f	0f 86 f0 00 00
	00		 jbe	 $LN123@insert@2

; 1146 : 			{	// make room and insert new stuff
; 1147 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1148 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

  00075	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00078	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0007b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0007e	72 2e		 jb	 SHORT $LN68@insert@2
  00080	8b 11		 mov	 edx, DWORD PTR [ecx]
  00082	eb 2c		 jmp	 SHORT $LN69@insert@2

; 1144 : 
; 1145 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN20@insert@2:
  00084	85 ed		 test	 ebp, ebp
  00086	75 e7		 jne	 SHORT $LN124@insert@2
  00088	89 6e 14	 mov	 DWORD PTR [esi+20], ebp
  0008b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008e	72 0f		 jb	 SHORT $LN62@insert@2
  00090	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00093	5f		 pop	 edi
  00094	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1157 : 			}
; 1158 : 		return (*this);

  00097	8b c6		 mov	 eax, esi
  00099	5e		 pop	 esi
  0009a	5d		 pop	 ebp
  0009b	5b		 pop	 ebx

; 1159 : 		}

  0009c	c2 10 00	 ret	 16			; 00000010H

; 1144 : 
; 1145 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN62@insert@2:
  0009f	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000a2	5f		 pop	 edi
  000a3	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1157 : 			}
; 1158 : 		return (*this);

  000a6	8b c6		 mov	 eax, esi
  000a8	5e		 pop	 esi
  000a9	5d		 pop	 ebp
  000aa	5b		 pop	 ebx

; 1159 : 		}

  000ab	c2 10 00	 ret	 16			; 00000010H

; 1146 : 			{	// make room and insert new stuff
; 1147 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1148 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

$LN68@insert@2:
  000ae	8b d1		 mov	 edx, ecx
$LN69@insert@2:
  000b0	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b3	72 02		 jb	 SHORT $LN72@insert@2
  000b5	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN72@insert@2:
  000b7	8b 6e 14	 mov	 ebp, DWORD PTR [esi+20]
  000ba	2b ef		 sub	 ebp, edi
  000bc	55		 push	 ebp
  000bd	03 d7		 add	 edx, edi
  000bf	2b c7		 sub	 eax, edi
  000c1	52		 push	 edx
  000c2	2b c3		 sub	 eax, ebx
  000c4	03 cf		 add	 ecx, edi
  000c6	50		 push	 eax
  000c7	03 cb		 add	 ecx, ebx
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 _memmove_s

; 1149 : 			if (this == &_Right)

  000cf	8b 44 24 28	 mov	 eax, DWORD PTR __Right$[esp+28]
  000d3	83 c4 10	 add	 esp, 16			; 00000010H
  000d6	3b f0		 cmp	 esi, eax
  000d8	75 41		 jne	 SHORT $LN2@insert@2

; 1150 : 				_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off,
; 1151 : 					_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1152 : 						_Count);	// substring

  000da	8b 44 24 1c	 mov	 eax, DWORD PTR __Roff$[esp+12]
  000de	3b f8		 cmp	 edi, eax
  000e0	73 02		 jae	 SHORT $LN10@insert@2
  000e2	03 c3		 add	 eax, ebx
$LN10@insert@2:
  000e4	89 44 24 1c	 mov	 DWORD PTR tv140[esp+12], eax
  000e8	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000eb	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  000ee	83 f8 10	 cmp	 eax, 16			; 00000010H
  000f1	72 05		 jb	 SHORT $LN84@insert@2
  000f3	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  000f6	eb 02		 jmp	 SHORT $LN85@insert@2
$LN84@insert@2:
  000f8	8b d5		 mov	 edx, ebp
$LN85@insert@2:
  000fa	83 f8 10	 cmp	 eax, 16			; 00000010H
  000fd	72 05		 jb	 SHORT $LN88@insert@2
  000ff	8b 4d 00	 mov	 ecx, DWORD PTR [ebp]
  00102	eb 02		 jmp	 SHORT $LN89@insert@2
$LN88@insert@2:
  00104	8b cd		 mov	 ecx, ebp
$LN89@insert@2:
  00106	53		 push	 ebx
  00107	8b 5c 24 20	 mov	 ebx, DWORD PTR tv140[esp+16]
  0010b	03 d3		 add	 edx, ebx
  0010d	52		 push	 edx
  0010e	2b c7		 sub	 eax, edi
  00110	50		 push	 eax
  00111	03 cf		 add	 ecx, edi
  00113	51		 push	 ecx
  00114	e8 00 00 00 00	 call	 _memmove_s

; 1153 : 			else

  00119	eb 33		 jmp	 SHORT $LN125@insert@2
$LN2@insert@2:

; 1154 : 				_Traits_helper::copy_s<_Traits>(_Myptr() + _Off, _Myres - _Off,
; 1155 : 					_Right._Myptr() + _Roff, _Count);	// fill hole

  0011b	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0011f	72 05		 jb	 SHORT $LN100@insert@2
  00121	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00124	eb 03		 jmp	 SHORT $LN101@insert@2
$LN100@insert@2:
  00126	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
$LN101@insert@2:
  00129	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0012c	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0012f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00132	72 05		 jb	 SHORT $LN104@insert@2
  00134	8b 4d 00	 mov	 ecx, DWORD PTR [ebp]
  00137	eb 02		 jmp	 SHORT $LN105@insert@2
$LN104@insert@2:
  00139	8b cd		 mov	 ecx, ebp
$LN105@insert@2:
  0013b	53		 push	 ebx
  0013c	8b 5c 24 20	 mov	 ebx, DWORD PTR __Roff$[esp+16]
  00140	03 d3		 add	 edx, ebx
  00142	52		 push	 edx
  00143	2b c7		 sub	 eax, edi
  00145	50		 push	 eax
  00146	03 cf		 add	 ecx, edi
  00148	51		 push	 ecx
  00149	e8 00 00 00 00	 call	 _memcpy_s
$LN125@insert@2:

; 1156 : 			_Eos(_Num);

  0014e	8b 44 24 24	 mov	 eax, DWORD PTR __Num$[esp+28]
  00152	83 c4 10	 add	 esp, 16			; 00000010H
  00155	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00159	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0015c	72 03		 jb	 SHORT $LN118@insert@2
  0015e	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN118@insert@2:
  00161	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$LN123@insert@2:
  00165	5f		 pop	 edi

; 1157 : 			}
; 1158 : 		return (*this);

  00166	8b c6		 mov	 eax, esi
  00168	5e		 pop	 esi
  00169	5d		 pop	 ebp
  0016a	5b		 pop	 ebx

; 1159 : 		}

  0016b	c2 10 00	 ret	 16			; 00000010H
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Roff$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 5d 14	 cmp	 DWORD PTR [ebp+20], ebx
  00011	73 05		 jae	 SHORT $LN5@assign@3

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign@3:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7d 14	 mov	 edi, DWORD PTR [ebp+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fb		 sub	 edi, ebx
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign@3

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign@3:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f5		 cmp	 esi, ebp
  00029	75 1f		 jne	 SHORT $LN3@assign@3

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fb		 add	 edi, ebx
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00037	53		 push	 ebx
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign@3:

; 1055 : 		else if (_Grow(_Num))

  0004a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00050	76 05		 jbe	 SHORT $LN17@assign@3
  00052	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign@3:
  00057	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005a	3b c7		 cmp	 eax, edi
  0005c	73 1b		 jae	 SHORT $LN16@assign@3
  0005e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00061	50		 push	 eax
  00062	57		 push	 edi
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0006a	85 ff		 test	 edi, edi
$LN91@assign@3:
  0006c	76 7a		 jbe	 SHORT $LN90@assign@3

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006e	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  00072	72 33		 jb	 SHORT $LN66@assign@3
  00074	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  00077	eb 31		 jmp	 SHORT $LN67@assign@3

; 1055 : 		else if (_Grow(_Num))

$LN16@assign@3:
  00079	85 ff		 test	 edi, edi
  0007b	75 ef		 jne	 SHORT $LN91@assign@3
  0007d	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00080	83 f8 08	 cmp	 eax, 8
  00083	72 11		 jb	 SHORT $LN60@assign@3
  00085	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00088	33 c9		 xor	 ecx, ecx
  0008a	5f		 pop	 edi
  0008b	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0008e	8b c6		 mov	 eax, esi
  00090	5e		 pop	 esi
  00091	5d		 pop	 ebp
  00092	5b		 pop	 ebx

; 1061 : 		}

  00093	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN60@assign@3:
  00096	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00099	33 c9		 xor	 ecx, ecx
  0009b	5f		 pop	 edi
  0009c	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5d		 pop	 ebp
  000a3	5b		 pop	 ebx

; 1061 : 		}

  000a4	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN66@assign@3:
  000a7	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
$LN67@assign@3:
  000aa	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000ae	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  000b1	72 05		 jb	 SHORT $LN70@assign@3
  000b3	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  000b6	eb 02		 jmp	 SHORT $LN71@assign@3
$LN70@assign@3:
  000b8	8b c5		 mov	 eax, ebp
$LN71@assign@3:
  000ba	8b 54 24 18	 mov	 edx, DWORD PTR __Roff$[esp+12]
  000be	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	51		 push	 ecx
  000c6	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000c9	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000cc	52		 push	 edx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _memcpy_s
  000d3	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000d6	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000da	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000dd	72 03		 jb	 SHORT $LN86@assign@3
  000df	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN86@assign@3:
  000e2	33 c0		 xor	 eax, eax
  000e4	66 89 04 2b	 mov	 WORD PTR [ebx+ebp], ax
$LN90@assign@3:
  000e8	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000e9	8b c6		 mov	 eax, esi
  000eb	5e		 pop	 esi
  000ec	5d		 pop	 ebp
  000ed	5b		 pop	 ebx

; 1061 : 		}

  000ee	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?end@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?end@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 651  : 		return (iterator(_Mylast, this));

  00004	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	39 5e 0c	 cmp	 DWORD PTR [esi+12], ebx
  00015	76 05		 jbe	 SHORT $LN7@end@5
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@end@5:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 652  : 		}

  00028	c2 04 00	 ret	 4
?end@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Make_iter
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Make_iter@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Make_iter, COMDAT
; _this$ = ecx

; 554  : 		return (iterator(_Where._Ptr, this));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Where$[esp]
  00004	56		 push	 esi
  00005	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN7@Make_iter@4
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@Make_iter@4:
  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 555  : 		}

  00026	c2 0c 00	 ret	 12			; 0000000cH
?_Make_iter@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Make_iter
_TEXT	ENDS
PUBLIC	?end@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Iterator@$00@12@XZ PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end, COMDAT
; _this$ = ecx

; 544  : 		return (iterator(_Myhead, this));

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 545  : 		}

  0000e	c2 04 00	 ret	 4
?end@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Iterator@$00@12@XZ ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
_TEXT	ENDS
PUBLIC	??0?$_List_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_List_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_List_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_List_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_List_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_List_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 85   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN18@List_val
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 86   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 85   : 		{	// construct base, and allocator from _Al

$LN18@List_val:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 86   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_List_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_List_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 ed		 test	 ebp, ebp
  0000b	74 46		 je	 SHORT $LN93@assign@4
  0000d	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 fa 10	 cmp	 edx, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN12@assign@4
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@4
$LN12@assign@4:
  0001c	8b c8		 mov	 ecx, eax
$LN13@assign@4:
  0001e	3b e9		 cmp	 ebp, ecx
  00020	72 31		 jb	 SHORT $LN93@assign@4
  00022	83 fa 10	 cmp	 edx, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN16@assign@4
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@4
$LN16@assign@4:
  0002b	8b c8		 mov	 ecx, eax
$LN17@assign@4:
  0002d	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00030	03 f9		 add	 edi, ecx
  00032	3b fd		 cmp	 edi, ebp
  00034	76 1d		 jbe	 SHORT $LN93@assign@4

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 fa 10	 cmp	 edx, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN20@assign@4
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@4:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b e8		 sub	 ebp, eax
  00044	55		 push	 ebp
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp

; 1080 : 		}

  00050	c2 08 00	 ret	 8
$LN93@assign@4:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00053	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  00057	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0005a	76 05		 jbe	 SHORT $LN27@assign@4
  0005c	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@4:
  00061	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00064	3b c7		 cmp	 eax, edi
  00066	73 20		 jae	 SHORT $LN26@assign@4
  00068	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0006b	52		 push	 edx
  0006c	57		 push	 edi
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00074	85 ff		 test	 edi, edi
$LN94@assign@4:
  00076	76 56		 jbe	 SHORT $LN90@assign@4

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  00078	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0007b	53		 push	 ebx
  0007c	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  0007f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00082	72 2c		 jb	 SHORT $LN74@assign@4
  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	eb 2a		 jmp	 SHORT $LN75@assign@4

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@4:
  00088	85 ff		 test	 edi, edi
  0008a	75 ea		 jne	 SHORT $LN94@assign@4
  0008c	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00092	72 0e		 jb	 SHORT $LN68@assign@4
  00094	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00097	5f		 pop	 edi
  00098	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5d		 pop	 ebp

; 1080 : 		}

  0009f	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN68@assign@4:
  000a2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000a5	5f		 pop	 edi
  000a6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  000a9	8b c6		 mov	 eax, esi
  000ab	5e		 pop	 esi
  000ac	5d		 pop	 ebp

; 1080 : 		}

  000ad	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN74@assign@4:
  000b0	8b c3		 mov	 eax, ebx
$LN75@assign@4:
  000b2	57		 push	 edi
  000b3	55		 push	 ebp
  000b4	51		 push	 ecx
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _memcpy_s
  000bb	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000be	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c2	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c5	72 02		 jb	 SHORT $LN88@assign@4
  000c7	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN88@assign@4:
  000c9	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
  000cd	5b		 pop	 ebx
$LN90@assign@4:
  000ce	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000cf	8b c6		 mov	 eax, esi
  000d1	5e		 pop	 esi
  000d2	5d		 pop	 ebp

; 1080 : 		}

  000d3	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 951  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 952  : 		if (_Right.size() < _Roff)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR __Roff$[esp+12]
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 7d 14	 cmp	 DWORD PTR [ebp+20], edi
  00011	73 05		 jae	 SHORT $LN5@append@5

; 953  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@append@5:

; 954  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 955  : 		if (_Num < _Count)

  0001b	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Count$[esp+12]
  0001f	2b c7		 sub	 eax, edi
  00021	3b c3		 cmp	 eax, ebx
  00023	73 02		 jae	 SHORT $LN4@append@5

; 956  : 			_Count = _Num;	// trim _Count to size

  00025	8b d8		 mov	 ebx, eax
$LN4@append@5:

; 957  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00027	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002a	83 c9 ff	 or	 ecx, -1
  0002d	2b c8		 sub	 ecx, eax
  0002f	3b cb		 cmp	 ecx, ebx
  00031	76 07		 jbe	 SHORT $LN2@append@5
  00033	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00036	3b d0		 cmp	 edx, eax
  00038	73 05		 jae	 SHORT $LN3@append@5
$LN2@append@5:

; 958  : 			_String_base::_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@5:

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 86 bd 00 00
	00		 jbe	 $LN91@append@5
  00047	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0004a	03 fb		 add	 edi, ebx
  0004c	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00052	76 05		 jbe	 SHORT $LN17@append@5
  00054	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@append@5:
  00059	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005c	3b c7		 cmp	 eax, edi
  0005e	73 1f		 jae	 SHORT $LN16@append@5
  00060	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00063	50		 push	 eax
  00064	57		 push	 edi
  00065	8b ce		 mov	 ecx, esi
  00067	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0006c	85 ff		 test	 edi, edi
$LN92@append@5:
  0006e	0f 86 90 00 00
	00		 jbe	 $LN91@append@5

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

  00074	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  00078	72 33		 jb	 SHORT $LN66@append@5
  0007a	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]
  0007d	eb 31		 jmp	 SHORT $LN67@append@5

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN16@append@5:
  0007f	85 ff		 test	 edi, edi
  00081	75 eb		 jne	 SHORT $LN92@append@5
  00083	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00086	83 f8 08	 cmp	 eax, 8
  00089	72 11		 jb	 SHORT $LN60@append@5
  0008b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008e	33 c9		 xor	 ecx, ecx
  00090	5f		 pop	 edi
  00091	66 89 08	 mov	 WORD PTR [eax], cx

; 965  : 			}
; 966  : 		return (*this);

  00094	8b c6		 mov	 eax, esi
  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	5b		 pop	 ebx

; 967  : 		}

  00099	c2 0c 00	 ret	 12			; 0000000cH

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN60@append@5:
  0009c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009f	33 c9		 xor	 ecx, ecx
  000a1	5f		 pop	 edi
  000a2	66 89 08	 mov	 WORD PTR [eax], cx

; 965  : 			}
; 966  : 		return (*this);

  000a5	8b c6		 mov	 eax, esi
  000a7	5e		 pop	 esi
  000a8	5d		 pop	 ebp
  000a9	5b		 pop	 ebx

; 967  : 		}

  000aa	c2 0c 00	 ret	 12			; 0000000cH

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

$LN66@append@5:
  000ad	83 c5 04	 add	 ebp, 4
$LN67@append@5:
  000b0	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000b3	83 f8 08	 cmp	 eax, 8
  000b6	72 05		 jb	 SHORT $LN70@append@5
  000b8	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000bb	eb 03		 jmp	 SHORT $LN71@append@5
$LN70@append@5:
  000bd	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN71@append@5:
  000c0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000c3	03 db		 add	 ebx, ebx
  000c5	53		 push	 ebx
  000c6	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Roff$[esp+16]
  000ca	2b c1		 sub	 eax, ecx
  000cc	8d 5c 5d 00	 lea	 ebx, DWORD PTR [ebp+ebx*2]
  000d0	53		 push	 ebx
  000d1	03 c0		 add	 eax, eax
  000d3	50		 push	 eax
  000d4	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  000d7	52		 push	 edx
  000d8	e8 00 00 00 00	 call	 _memcpy_s
  000dd	83 c4 10	 add	 esp, 16			; 00000010H

; 964  : 			_Eos(_Num);

  000e0	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000e4	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000e7	72 12		 jb	 SHORT $LN86@append@5
  000e9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ec	33 c9		 xor	 ecx, ecx
  000ee	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
  000f2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000f3	8b c6		 mov	 eax, esi
  000f5	5e		 pop	 esi
  000f6	5d		 pop	 ebp
  000f7	5b		 pop	 ebx

; 967  : 		}

  000f8	c2 0c 00	 ret	 12			; 0000000cH

; 964  : 			_Eos(_Num);

$LN86@append@5:
  000fb	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000fe	33 c9		 xor	 ecx, ecx
  00100	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
$LN91@append@5:
  00104	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  00105	8b c6		 mov	 eax, esi
  00107	5e		 pop	 esi
  00108	5d		 pop	 ebp
  00109	5b		 pop	 ebx

; 967  : 		}

  0010a	c2 0c 00	 ret	 12			; 0000000cH
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 970  : 		{	// append [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 971  : 
; 972  :  #if _HAS_ITERATOR_DEBUGGING
; 973  : 		if (_Count != 0)
; 974  : 			_DEBUG_POINTER(_Ptr);
; 975  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 976  : 
; 977  : 		if (_Inside(_Ptr))

  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00008	57		 push	 edi
  00009	85 c9		 test	 ecx, ecx
  0000b	74 49		 je	 SHORT $LN4@append@6
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 08	 cmp	 edi, 8
  00016	72 04		 jb	 SHORT $LN14@append@6
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN15@append@6
$LN14@append@6:
  0001c	8b d0		 mov	 edx, eax
$LN15@append@6:
  0001e	3b ca		 cmp	 ecx, edx
  00020	72 34		 jb	 SHORT $LN4@append@6
  00022	83 ff 08	 cmp	 edi, 8
  00025	72 04		 jb	 SHORT $LN18@append@6
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN19@append@6
$LN18@append@6:
  0002b	8b d0		 mov	 edx, eax
$LN19@append@6:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00033	3b d1		 cmp	 edx, ecx
  00035	76 1f		 jbe	 SHORT $LN4@append@6

; 978  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00037	83 ff 08	 cmp	 edi, 8
  0003a	72 02		 jb	 SHORT $LN22@append@6
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN22@append@6:
  0003e	8b 54 24 14	 mov	 edx, DWORD PTR __Count$[esp+8]
  00042	2b c8		 sub	 ecx, eax
  00044	52		 push	 edx
  00045	d1 f9		 sar	 ecx, 1
  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 989  : 		}

  00053	c2 08 00	 ret	 8
$LN4@append@6:

; 979  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00056	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00059	83 c9 ff	 or	 ecx, -1
  0005c	55		 push	 ebp
  0005d	8b 6c 24 18	 mov	 ebp, DWORD PTR __Count$[esp+12]
  00061	2b c8		 sub	 ecx, eax
  00063	3b cd		 cmp	 ecx, ebp
  00065	76 07		 jbe	 SHORT $LN2@append@6
  00067	8d 14 28	 lea	 edx, DWORD PTR [eax+ebp]
  0006a	3b d0		 cmp	 edx, eax
  0006c	73 05		 jae	 SHORT $LN3@append@6
$LN2@append@6:

; 980  : 			_String_base::_Xlen();	// result too long

  0006e	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@6:

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00073	85 ed		 test	 ebp, ebp
  00075	0f 86 95 00 00
	00		 jbe	 $LN96@append@6
  0007b	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0007e	03 fd		 add	 edi, ebp
  00080	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00086	76 05		 jbe	 SHORT $LN29@append@6
  00088	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN29@append@6:
  0008d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00090	3b c7		 cmp	 eax, edi
  00092	73 1f		 jae	 SHORT $LN28@append@6
  00094	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00097	50		 push	 eax
  00098	57		 push	 edi
  00099	8b ce		 mov	 ecx, esi
  0009b	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  000a0	85 ff		 test	 edi, edi
$LN99@append@6:
  000a2	76 6c		 jbe	 SHORT $LN96@append@6

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

  000a4	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000a7	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000aa	83 f8 08	 cmp	 eax, 8
  000ad	72 32		 jb	 SHORT $LN78@append@6
  000af	8b 13		 mov	 edx, DWORD PTR [ebx]
  000b1	eb 30		 jmp	 SHORT $LN79@append@6

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN28@append@6:
  000b3	85 ff		 test	 edi, edi
  000b5	75 eb		 jne	 SHORT $LN99@append@6
  000b7	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000ba	83 f8 08	 cmp	 eax, 8
  000bd	72 11		 jb	 SHORT $LN72@append@6
  000bf	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c2	5d		 pop	 ebp
  000c3	33 c9		 xor	 ecx, ecx
  000c5	5f		 pop	 edi
  000c6	66 89 08	 mov	 WORD PTR [eax], cx

; 987  : 			}
; 988  : 		return (*this);

  000c9	8b c6		 mov	 eax, esi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx

; 989  : 		}

  000cd	c2 08 00	 ret	 8

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN72@append@6:
  000d0	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000d3	5d		 pop	 ebp
  000d4	33 c9		 xor	 ecx, ecx
  000d6	5f		 pop	 edi
  000d7	66 89 08	 mov	 WORD PTR [eax], cx

; 987  : 			}
; 988  : 		return (*this);

  000da	8b c6		 mov	 eax, esi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx

; 989  : 		}

  000de	c2 08 00	 ret	 8

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

$LN78@append@6:
  000e1	8b d3		 mov	 edx, ebx
$LN79@append@6:
  000e3	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000e6	03 ed		 add	 ebp, ebp
  000e8	55		 push	 ebp
  000e9	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  000ed	2b c1		 sub	 eax, ecx
  000ef	55		 push	 ebp
  000f0	03 c0		 add	 eax, eax
  000f2	50		 push	 eax
  000f3	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  000f6	52		 push	 edx
  000f7	e8 00 00 00 00	 call	 _memcpy_s
  000fc	83 c4 10	 add	 esp, 16			; 00000010H

; 986  : 			_Eos(_Num);

  000ff	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00103	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00106	72 02		 jb	 SHORT $LN94@append@6
  00108	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN94@append@6:
  0010a	33 c0		 xor	 eax, eax
  0010c	66 89 04 7b	 mov	 WORD PTR [ebx+edi*2], ax
$LN96@append@6:
  00110	5d		 pop	 ebp
  00111	5f		 pop	 edi

; 987  : 			}
; 988  : 		return (*this);

  00112	8b c6		 mov	 eax, esi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx

; 989  : 		}

  00116	c2 08 00	 ret	 8
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00008	57		 push	 edi
  00009	85 c9		 test	 ecx, ecx
  0000b	74 49		 je	 SHORT $LN97@assign@5
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 08	 cmp	 edi, 8
  00016	72 04		 jb	 SHORT $LN12@assign@5
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@5
$LN12@assign@5:
  0001c	8b d0		 mov	 edx, eax
$LN13@assign@5:
  0001e	3b ca		 cmp	 ecx, edx
  00020	72 34		 jb	 SHORT $LN97@assign@5
  00022	83 ff 08	 cmp	 edi, 8
  00025	72 04		 jb	 SHORT $LN16@assign@5
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@5
$LN16@assign@5:
  0002b	8b d0		 mov	 edx, eax
$LN17@assign@5:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00033	3b d1		 cmp	 edx, ecx
  00035	76 1f		 jbe	 SHORT $LN97@assign@5

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00037	83 ff 08	 cmp	 edi, 8
  0003a	72 02		 jb	 SHORT $LN20@assign@5
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@5:
  0003e	8b 54 24 14	 mov	 edx, DWORD PTR __Count$[esp+8]
  00042	2b c8		 sub	 ecx, eax
  00044	52		 push	 edx
  00045	d1 f9		 sar	 ecx, 1
  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 1080 : 		}

  00053	c2 08 00	 ret	 8
$LN97@assign@5:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00056	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0005a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00060	76 05		 jbe	 SHORT $LN27@assign@5
  00062	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@5:
  00067	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0006a	3b c7		 cmp	 eax, edi
  0006c	73 21		 jae	 SHORT $LN26@assign@5
  0006e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00071	50		 push	 eax
  00072	57		 push	 edi
  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0007a	85 ff		 test	 edi, edi
$LN98@assign@5:
  0007c	76 67		 jbe	 SHORT $LN94@assign@5

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  0007e	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00081	55		 push	 ebp
  00082	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  00085	83 f9 08	 cmp	 ecx, 8
  00088	72 31		 jb	 SHORT $LN76@assign@5
  0008a	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  0008d	eb 2e		 jmp	 SHORT $LN77@assign@5

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@5:
  0008f	85 ff		 test	 edi, edi
  00091	75 e9		 jne	 SHORT $LN98@assign@5
  00093	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00096	83 f8 08	 cmp	 eax, 8
  00099	72 10		 jb	 SHORT $LN70@assign@5
  0009b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009e	33 c9		 xor	 ecx, ecx
  000a0	5f		 pop	 edi
  000a1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000a4	8b c6		 mov	 eax, esi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx

; 1080 : 		}

  000a8	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN70@assign@5:
  000ab	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ae	33 c9		 xor	 ecx, ecx
  000b0	5f		 pop	 edi
  000b1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000b4	8b c6		 mov	 eax, esi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx

; 1080 : 		}

  000b8	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN76@assign@5:
  000bb	8b c5		 mov	 eax, ebp
$LN77@assign@5:
  000bd	8b 54 24 14	 mov	 edx, DWORD PTR __Ptr$[esp+12]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	52		 push	 edx
  000c6	03 c9		 add	 ecx, ecx
  000c8	51		 push	 ecx
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000d2	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d9	72 03		 jb	 SHORT $LN92@assign@5
  000db	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN92@assign@5:
  000de	33 d2		 xor	 edx, edx
  000e0	66 89 14 2b	 mov	 WORD PTR [ebx+ebp], dx
  000e4	5d		 pop	 ebp
$LN94@assign@5:
  000e5	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx

; 1080 : 		}

  000ea	c2 08 00	 ret	 8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?begin@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 641  : 		return (iterator(_Myfirst, this));

  00004	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00015	76 05		 jbe	 SHORT $LN7@begin@5
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@begin@5:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 642  : 		}

  00028	c2 04 00	 ret	 4
?begin@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::begin
_TEXT	ENDS
PUBLIC	??_G_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAXI@Z ; std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_G_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAXI@Z PROC ; std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $LN22@scalar@20
  00009	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN22@scalar@20:
  00015	33 c0		 xor	 eax, eax
  00017	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0001c	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH
  00023	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00026	88 46 0c	 mov	 BYTE PTR [esi+12], al
  00029	74 09		 je	 SHORT $LN32@scalar@20
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00031	83 c4 04	 add	 esp, 4
$LN32@scalar@20:
  00034	8b c6		 mov	 eax, esi
  00036	5e		 pop	 esi
  00037	c2 04 00	 ret	 4
??_G_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAXI@Z ENDP ; std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node::~_Node
; Function compile flags: /Ogtpy
;	COMDAT ??1_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node::~_Node, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
??1_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node::~_Node
_TEXT	ENDS
PUBLIC	??1_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::~_Node
; Function compile flags: /Ogtpy
;	COMDAT ??1_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::~_Node, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??1Partition@CipherShed@@QAE@XZ
??1_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::~_Node
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 665  : 		{	// construct from _Count * _Ch

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 666  : 		_Tidy();
; 667  : 		assign(_Count, _Ch);

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp]
  00007	33 c0		 xor	 eax, eax
  00009	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	88 46 04	 mov	 BYTE PTR [esi+4], al
  00016	8b 44 24 0c	 mov	 eax, DWORD PTR __Ch$[esp]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 668  : 		}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ; std::_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z PROC ; std::_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 85   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN18@List_val@2
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 86   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 85   : 		{	// construct base, and allocator from _Al

$LN18@List_val@2:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 86   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@V?$allocator@UFavoriteVolume@CipherShed@@@1@@Z ENDP ; std::_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_List_val<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??_GHostDevice@@QAEPAXI@Z			; HostDevice::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GHostDevice@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GHostDevice@@QAEPAXI@Z PROC				; HostDevice::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@21
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@21:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GHostDevice@@QAEPAXI@Z ENDP				; HostDevice::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_GFavoriteVolume@CipherShed@@QAEPAXI@Z	; CipherShed::FavoriteVolume::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GFavoriteVolume@CipherShed@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GFavoriteVolume@CipherShed@@QAEPAXI@Z PROC		; CipherShed::FavoriteVolume::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@22
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@22:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GFavoriteVolume@CipherShed@@QAEPAXI@Z ENDP		; CipherShed::FavoriteVolume::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 722  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 723  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 724  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 931  : 		return (append(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 932  : 		}

  0000e	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 935  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 936  : 		return (append(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@38:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL7@operator@38
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 937  : 		}

  00022	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z
_TEXT	SEGMENT
tv232 = 8						; size = 4
__Off$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1164 : 
; 1165 :  #if _HAS_ITERATOR_DEBUGGING
; 1166 : 		if (_Count != 0)
; 1167 : 			_DEBUG_POINTER(_Ptr);
; 1168 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1169 : 
; 1170 : 		if (_Inside(_Ptr))

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 4b		 je	 SHORT $LN4@insert@3
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 10	 cmp	 edi, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN14@insert@3
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN15@insert@3
$LN14@insert@3:
  0001c	8b c8		 mov	 ecx, eax
$LN15@insert@3:
  0001e	3b d1		 cmp	 edx, ecx
  00020	72 36		 jb	 SHORT $LN4@insert@3
  00022	83 ff 10	 cmp	 edi, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN18@insert@3
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN19@insert@3
$LN18@insert@3:
  0002b	8b c8		 mov	 ecx, eax
$LN19@insert@3:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	03 d9		 add	 ebx, ecx
  00032	3b da		 cmp	 ebx, edx
  00034	76 22		 jbe	 SHORT $LN4@insert@3

; 1171 : 			return (insert(_Off, *this,
; 1172 : 				_Ptr - _Myptr(), _Count));	// substring

  00036	83 ff 10	 cmp	 edi, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN22@insert@3
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN22@insert@3:
  0003d	8b 4c 24 18	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b d0		 sub	 edx, eax
  00044	52		 push	 edx
  00045	8b 54 24 18	 mov	 edx, DWORD PTR __Off$[esp+16]
  00049	56		 push	 esi
  0004a	52		 push	 edx
  0004b	8b ce		 mov	 ecx, esi
  0004d	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx

; 1186 : 		}

  00055	c2 0c 00	 ret	 12			; 0000000cH
$LN4@insert@3:

; 1173 : 		if (_Mysize < _Off)

  00058	8b 7c 24 10	 mov	 edi, DWORD PTR __Off$[esp+8]
  0005c	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0005f	73 05		 jae	 SHORT $LN3@insert@3

; 1174 : 			_String_base::_Xran();	// _Off off end

  00061	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@insert@3:

; 1175 : 		if (npos - _Mysize <= _Count)

  00066	8b 5c 24 18	 mov	 ebx, DWORD PTR __Count$[esp+8]
  0006a	83 c8 ff	 or	 eax, -1
  0006d	2b 46 14	 sub	 eax, DWORD PTR [esi+20]
  00070	3b c3		 cmp	 eax, ebx
  00072	77 05		 ja	 SHORT $LN2@insert@3

; 1176 : 			_String_base::_Xlen();	// result too long

  00074	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN2@insert@3:

; 1177 : 		size_type _Num;
; 1178 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00079	85 db		 test	 ebx, ebx
  0007b	0f 86 de 00 00
	00		 jbe	 $LN108@insert@3
  00081	55		 push	 ebp
  00082	8b 6e 14	 mov	 ebp, DWORD PTR [esi+20]
  00085	03 eb		 add	 ebp, ebx
  00087	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  0008a	76 05		 jbe	 SHORT $LN29@insert@3
  0008c	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN29@insert@3:
  00091	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00094	3b c5		 cmp	 eax, ebp
  00096	73 25		 jae	 SHORT $LN28@insert@3
  00098	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0009b	51		 push	 ecx
  0009c	55		 push	 ebp
  0009d	8b ce		 mov	 ecx, esi
  0009f	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  000a4	85 ed		 test	 ebp, ebp
$LN112@insert@3:
  000a6	0f 86 b2 00 00
	00		 jbe	 $LN111@insert@3

; 1179 : 			{	// make room and insert new stuff
; 1180 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1181 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

  000ac	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000af	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b2	72 33		 jb	 SHORT $LN76@insert@3
  000b4	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000b7	89 54 24 14	 mov	 DWORD PTR tv232[esp+12], edx
  000bb	eb 31		 jmp	 SHORT $LN77@insert@3

; 1177 : 		size_type _Num;
; 1178 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN28@insert@3:
  000bd	85 ed		 test	 ebp, ebp
  000bf	75 e5		 jne	 SHORT $LN112@insert@3
  000c1	89 6e 14	 mov	 DWORD PTR [esi+20], ebp
  000c4	83 f8 10	 cmp	 eax, 16			; 00000010H
  000c7	72 0f		 jb	 SHORT $LN70@insert@3
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	5d		 pop	 ebp
  000cd	5f		 pop	 edi
  000ce	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1184 : 			}
; 1185 : 		return (*this);

  000d1	8b c6		 mov	 eax, esi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx

; 1186 : 		}

  000d5	c2 0c 00	 ret	 12			; 0000000cH

; 1177 : 		size_type _Num;
; 1178 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN70@insert@3:
  000d8	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000db	5d		 pop	 ebp
  000dc	5f		 pop	 edi
  000dd	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1184 : 			}
; 1185 : 		return (*this);

  000e0	8b c6		 mov	 eax, esi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx

; 1186 : 		}

  000e4	c2 0c 00	 ret	 12			; 0000000cH

; 1179 : 			{	// make room and insert new stuff
; 1180 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1181 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

$LN76@insert@3:
  000e7	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000ea	89 4c 24 14	 mov	 DWORD PTR tv232[esp+12], ecx
$LN77@insert@3:
  000ee	83 f8 10	 cmp	 eax, 16			; 00000010H
  000f1	72 05		 jb	 SHORT $LN80@insert@3
  000f3	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000f6	eb 03		 jmp	 SHORT $LN81@insert@3
$LN80@insert@3:
  000f8	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
$LN81@insert@3:
  000fb	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000fe	2b d7		 sub	 edx, edi
  00100	52		 push	 edx
  00101	8b 54 24 18	 mov	 edx, DWORD PTR tv232[esp+16]
  00105	03 d7		 add	 edx, edi
  00107	2b c7		 sub	 eax, edi
  00109	52		 push	 edx
  0010a	2b c3		 sub	 eax, ebx
  0010c	03 cf		 add	 ecx, edi
  0010e	50		 push	 eax
  0010f	03 cb		 add	 ecx, ebx
  00111	51		 push	 ecx
  00112	e8 00 00 00 00	 call	 _memmove_s

; 1182 : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Ptr, _Count);	// fill hole

  00117	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0011a	83 c4 10	 add	 esp, 16			; 00000010H
  0011d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00120	72 05		 jb	 SHORT $LN92@insert@3
  00122	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00125	eb 03		 jmp	 SHORT $LN93@insert@3
$LN92@insert@3:
  00127	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
$LN93@insert@3:
  0012a	8b 54 24 18	 mov	 edx, DWORD PTR __Ptr$[esp+12]
  0012e	53		 push	 ebx
  0012f	52		 push	 edx
  00130	2b c7		 sub	 eax, edi
  00132	50		 push	 eax
  00133	03 cf		 add	 ecx, edi
  00135	51		 push	 ecx
  00136	e8 00 00 00 00	 call	 _memcpy_s
  0013b	83 c4 10	 add	 esp, 16			; 00000010H

; 1183 : 			_Eos(_Num);

  0013e	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00142	89 6e 14	 mov	 DWORD PTR [esi+20], ebp
  00145	72 10		 jb	 SHORT $LN106@insert@3
  00147	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0014a	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  0014e	5d		 pop	 ebp
  0014f	5f		 pop	 edi

; 1184 : 			}
; 1185 : 		return (*this);

  00150	8b c6		 mov	 eax, esi
  00152	5e		 pop	 esi
  00153	5b		 pop	 ebx

; 1186 : 		}

  00154	c2 0c 00	 ret	 12			; 0000000cH

; 1183 : 			_Eos(_Num);

$LN106@insert@3:
  00157	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0015a	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$LN111@insert@3:
  0015e	5d		 pop	 ebp
$LN108@insert@3:
  0015f	5f		 pop	 edi

; 1184 : 			}
; 1185 : 		return (*this);

  00160	8b c6		 mov	 eax, esi
  00162	5e		 pop	 esi
  00163	5b		 pop	 ebx

; 1186 : 		}

  00164	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 722  : 		_Tidy();
; 723  : 		assign(_Right, 0, npos);

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR __Right$[esp]
  00007	33 c0		 xor	 eax, eax
  00009	6a ff		 push	 -1
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	8b ce		 mov	 ecx, esi
  0001d	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 724  : 		}

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 436  : 		{	// construct empty list

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	6a 04		 push	 4
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	83 c4 04	 add	 esp, 4
  00032	85 c0		 test	 eax, eax
  00034	74 04		 je	 SHORT $LN23@list
  00036	89 30		 mov	 DWORD PTR [eax], esi
  00038	eb 02		 jmp	 SHORT $LN24@list
$LN23@list:
  0003a	33 c0		 xor	 eax, eax
$LN24@list:
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	8b ce		 mov	 ecx, esi
  00040	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00048	e8 00 00 00 00	 call	 ?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Buynode
  0004d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00050	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 437  : 		}

  00057	8b c6		 mov	 eax, esi
  00059	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5e		 pop	 esi
  00066	83 c4 10	 add	 esp, 16			; 00000010H
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
__ehhandler$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
__Al$ = 20						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 625  : #if _HAS_ITERATOR_DEBUGGING
; 626  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 627  : 			{
; 628  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 629  : 			}
; 630  : #endif
; 631  : 		_Tidy();
; 632  : 		assign(_Right, _Roff, _Count);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Roff$[esp]
  0000b	33 c0		 xor	 eax, eax
  0000d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00010	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00017	88 46 04	 mov	 BYTE PTR [esi+4], al
  0001a	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 633  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	c2 10 00	 ret	 16			; 00000010H
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1041 : 		return (assign(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1042 : 		}

  0000e	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@6:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@assign@6
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 1086 : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
__Al$ = 20						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 625  : #if _HAS_ITERATOR_DEBUGGING
; 626  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 627  : 			{
; 628  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 629  : 			}
; 630  : #endif
; 631  : 		_Tidy();
; 632  : 		assign(_Right, _Roff, _Count);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Roff$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 10	 mov	 ecx, DWORD PTR __Count$[esp]
  0000b	33 c0		 xor	 eax, eax
  0000d	51		 push	 ecx
  0000e	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00015	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001c	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00020	8b 44 24 0c	 mov	 eax, DWORD PTR __Right$[esp+4]
  00024	52		 push	 edx
  00025	50		 push	 eax
  00026	8b ce		 mov	 ecx, esi
  00028	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 633  : 		}

  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	c2 10 00	 ret	 16			; 00000010H
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 946  : 		return (append(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 947  : 		}

  0000e	c2 04 00	 ret	 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 992  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 993  : 		_DEBUG_POINTER(_Ptr);
; 994  : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@append@7:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@append@7
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 995  : 		}

  00028	c2 04 00	 ret	 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1041 : 		return (assign(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 1042 : 		}

  0000e	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@7:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@assign@7
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 1086 : 		}

  00028	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 637  : 		{	// construct from [_Ptr, _Ptr + _Count)

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 638  : 		_Tidy();
; 639  : 		assign(_Ptr, _Count);

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR __Ptr$[esp]
  00007	33 c0		 xor	 eax, eax
  00009	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	88 46 04	 mov	 BYTE PTR [esi+4], al
  00016	8b 44 24 0c	 mov	 eax, DWORD PTR __Count$[esp]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 640  : 		}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
_TEXT	SEGMENT
$T169233 = -44						; size = 4
$T169230 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 53   : 	{	// return string + NTCS

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 54   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 44 24 40	 mov	 eax, DWORD PTR __Left$[esp+52]
  00029	33 db		 xor	 ebx, ebx
  0002b	6a ff		 push	 -1
  0002d	53		 push	 ebx
  0002e	50		 push	 eax
  0002f	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T169230[esp+68]
  00033	89 5c 24 18	 mov	 DWORD PTR $T169233[esp+68], ebx
  00037	c7 44 24 34 0f
	00 00 00	 mov	 DWORD PTR $T169230[esp+92], 15 ; 0000000fH
  0003f	89 5c 24 30	 mov	 DWORD PTR $T169230[esp+88], ebx
  00043	88 5c 24 20	 mov	 BYTE PTR $T169230[esp+72], bl
  00047	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004c	8b 54 24 44	 mov	 edx, DWORD PTR __Right$[esp+52]
  00050	8b c2		 mov	 eax, edx
  00052	89 5c 24 34	 mov	 DWORD PTR __$EHRec$[esp+64], ebx
  00056	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL90@operator@39:
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	40		 inc	 eax
  00063	3a cb		 cmp	 cl, bl
  00065	75 f9		 jne	 SHORT $LL90@operator@39
  00067	2b c6		 sub	 eax, esi
  00069	50		 push	 eax
  0006a	52		 push	 edx
  0006b	8d 4c 24 18	 lea	 ecx, DWORD PTR $T169230[esp+64]
  0006f	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00074	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00078	6a ff		 push	 -1
  0007a	53		 push	 ebx
  0007b	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00082	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00085	50		 push	 eax
  00086	8b ce		 mov	 ecx, esi
  00088	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  0008b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00090	83 7c 24 28 10	 cmp	 DWORD PTR $T169230[esp+80], 16 ; 00000010H
  00095	72 0d		 jb	 SHORT $LN91@operator@39
  00097	8b 4c 24 14	 mov	 ecx, DWORD PTR $T169230[esp+60]
  0009b	51		 push	 ecx
  0009c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a1	83 c4 04	 add	 esp, 4
$LN91@operator@39:
  000a4	8b c6		 mov	 eax, esi

; 55   : 	}

  000a6	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b1	59		 pop	 ecx
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	83 c4 2c	 add	 esp, 44			; 0000002cH
  000b7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T169230[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z
_TEXT	SEGMENT
$T169595 = -44						; size = 4
$T169592 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 1
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 43   : 	{	// return character + string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 44   : 	return (basic_string<_Elem, _Traits, _Alloc>(1, _Left) += _Right);

  00025	8a 44 24 40	 mov	 al, BYTE PTR __Left$[esp+52]
  00029	33 db		 xor	 ebx, ebx
  0002b	89 5c 24 0c	 mov	 DWORD PTR $T169595[esp+56], ebx
  0002f	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T169592[esp+80], 15 ; 0000000fH
  00037	88 44 24 14	 mov	 BYTE PTR $T169592[esp+60], al
  0003b	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR $T169592[esp+76], 1
  00043	88 5c 24 15	 mov	 BYTE PTR $T169592[esp+61], bl
  00047	8b 4c 24 44	 mov	 ecx, DWORD PTR __Right$[esp+52]
  0004b	6a ff		 push	 -1
  0004d	53		 push	 ebx
  0004e	51		 push	 ecx
  0004f	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T169592[esp+68]
  00053	89 5c 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], ebx
  00057	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0005c	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00060	6a ff		 push	 -1
  00062	53		 push	 ebx
  00063	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0006a	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0006d	50		 push	 eax
  0006e	8b ce		 mov	 ecx, esi
  00070	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00073	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00078	83 7c 24 28 10	 cmp	 DWORD PTR $T169592[esp+80], 16 ; 00000010H
  0007d	72 0d		 jb	 SHORT $LN172@operator@40
  0007f	8b 54 24 14	 mov	 edx, DWORD PTR $T169592[esp+60]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00089	83 c4 04	 add	 esp, 4
$LN172@operator@40:
  0008c	8b c6		 mov	 eax, esi

; 45   : 	}

  0008e	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  00092	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00099	59		 pop	 ecx
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	83 c4 2c	 add	 esp, 44			; 0000002cH
  0009f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T169592[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
_TEXT	SEGMENT
$T170385 = -44						; size = 4
$T170382 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 1
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 63   : 	{	// return string + character

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 64   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 44 24 40	 mov	 eax, DWORD PTR __Left$[esp+52]
  00029	33 db		 xor	 ebx, ebx
  0002b	6a ff		 push	 -1
  0002d	53		 push	 ebx
  0002e	50		 push	 eax
  0002f	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T170382[esp+68]
  00033	89 5c 24 18	 mov	 DWORD PTR $T170385[esp+68], ebx
  00037	c7 44 24 34 0f
	00 00 00	 mov	 DWORD PTR $T170382[esp+92], 15 ; 0000000fH
  0003f	89 5c 24 30	 mov	 DWORD PTR $T170382[esp+88], ebx
  00043	88 5c 24 20	 mov	 BYTE PTR $T170382[esp+72], bl
  00047	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004c	8b 4c 24 44	 mov	 ecx, DWORD PTR __Right$[esp+52]
  00050	51		 push	 ecx
  00051	6a 01		 push	 1
  00053	8d 4c 24 18	 lea	 ecx, DWORD PTR $T170382[esp+64]
  00057	89 5c 24 3c	 mov	 DWORD PTR __$EHRec$[esp+72], ebx
  0005b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00060	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00064	6a ff		 push	 -1
  00066	53		 push	 ebx
  00067	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0006e	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00071	50		 push	 eax
  00072	8b ce		 mov	 ecx, esi
  00074	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00077	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0007c	83 7c 24 28 10	 cmp	 DWORD PTR $T170382[esp+80], 16 ; 00000010H
  00081	72 0d		 jb	 SHORT $LN86@operator@41
  00083	8b 54 24 14	 mov	 edx, DWORD PTR $T170382[esp+60]
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008d	83 c4 04	 add	 esp, 4
$LN86@operator@41:
  00090	8b c6		 mov	 eax, esi

; 65   : 	}

  00092	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	83 c4 2c	 add	 esp, 44			; 0000002cH
  000a3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T170382[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT
$T170734 = -44						; size = 4
$T170731 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 23   : 	{	// return string + string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 24   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 44 24 40	 mov	 eax, DWORD PTR __Left$[esp+52]
  00029	33 db		 xor	 ebx, ebx
  0002b	6a ff		 push	 -1
  0002d	53		 push	 ebx
  0002e	50		 push	 eax
  0002f	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T170731[esp+68]
  00033	89 5c 24 18	 mov	 DWORD PTR $T170734[esp+68], ebx
  00037	c7 44 24 34 0f
	00 00 00	 mov	 DWORD PTR $T170731[esp+92], 15 ; 0000000fH
  0003f	89 5c 24 30	 mov	 DWORD PTR $T170731[esp+88], ebx
  00043	88 5c 24 20	 mov	 BYTE PTR $T170731[esp+72], bl
  00047	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004c	8b 4c 24 44	 mov	 ecx, DWORD PTR __Right$[esp+52]
  00050	6a ff		 push	 -1
  00052	53		 push	 ebx
  00053	51		 push	 ecx
  00054	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T170731[esp+68]
  00058	89 5c 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], ebx
  0005c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00061	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00065	6a ff		 push	 -1
  00067	53		 push	 ebx
  00068	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0006f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00072	50		 push	 eax
  00073	8b ce		 mov	 ecx, esi
  00075	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00078	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0007d	83 7c 24 28 10	 cmp	 DWORD PTR $T170731[esp+80], 16 ; 00000010H
  00082	72 0d		 jb	 SHORT $LN88@operator@42
  00084	8b 54 24 14	 mov	 edx, DWORD PTR $T170731[esp+60]
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008e	83 c4 04	 add	 esp, 4
$LN88@operator@42:
  00091	8b c6		 mov	 eax, esi

; 25   : 	}

  00093	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  00097	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009e	59		 pop	 ecx
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	83 c4 2c	 add	 esp, 44			; 0000002cH
  000a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T170731[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z$0
__ehfuncinfo$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
_TEXT	SEGMENT
$T171086 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z PROC ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00014	33 c4		 xor	 eax, esp
  00016	50		 push	 eax
  00017	8d 44 24 08	 lea	 eax, DWORD PTR __$EHRec$[esp+20]
  0001b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 51   : 	void _FARQ *_Vptr = _Ptr;

  00021	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ptr$[esp+16]
  00025	89 4c 24 18	 mov	 DWORD PTR __Vptr$[esp+16], ecx

; 52   : 	::new (_Vptr) _T1(_Val);

  00029	89 4c 24 04	 mov	 DWORD PTR $T171086[esp+20], ecx
  0002d	33 c0		 xor	 eax, eax
  0002f	89 44 24 10	 mov	 DWORD PTR __$EHRec$[esp+28], eax
  00033	3b c8		 cmp	 ecx, eax
  00035	74 1a		 je	 SHORT $LN3@Construct@3
  00037	6a ff		 push	 -1
  00039	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0003c	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00043	50		 push	 eax
  00044	88 41 04	 mov	 BYTE PTR [ecx+4], al
  00047	8b 44 24 24	 mov	 eax, DWORD PTR __Val$[esp+24]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN3@Construct@3:

; 53   : 	}

  00051	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR __Vptr$[ebp-4]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T171086[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ENDP ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Destroy@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAXPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z ; std::_Destroy<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAXPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAXPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z PROC ; std::_Destroy<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>, COMDAT

; 58   : 	{	// destroy object at _Ptr

  00000	56		 push	 esi

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  00009	72 0c		 jb	 SHORT $LN24@Destroy
  0000b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN24@Destroy:
  00017	33 c0		 xor	 eax, eax
  00019	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH
  00020	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00023	88 46 0c	 mov	 BYTE PTR [esi+12], al
  00026	5e		 pop	 esi

; 60   : 	}

  00027	c3		 ret	 0
??$_Destroy@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAXPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z ENDP ; std::_Destroy<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>
_TEXT	ENDS
PUBLIC	??_G_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEPAXI@Z ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_G_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEPAXI@Z PROC ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  0000b	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00010	74 09		 je	 SHORT $LN6@scalar@23
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar@23:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??_G_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEPAXI@Z ENDP ; std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_G_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEPAXI@Z ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_G_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEPAXI@Z PROC ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
  0000b	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00010	74 09		 je	 SHORT $LN6@scalar@24
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar@24:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??_G_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEPAXI@Z ENDP ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Destroy@UHostDevice@@@std@@YAXPAUHostDevice@@@Z ; std::_Destroy<HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@UHostDevice@@@std@@YAXPAUHostDevice@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UHostDevice@@@std@@YAXPAUHostDevice@@@Z PROC ; std::_Destroy<HostDevice>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
??$_Destroy@UHostDevice@@@std@@YAXPAUHostDevice@@@Z ENDP ; std::_Destroy<HostDevice>
_TEXT	ENDS
PUBLIC	??$_Destroy@UFavoriteVolume@CipherShed@@@std@@YAXPAUFavoriteVolume@CipherShed@@@Z ; std::_Destroy<CipherShed::FavoriteVolume>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@UFavoriteVolume@CipherShed@@@std@@YAXPAUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UFavoriteVolume@CipherShed@@@std@@YAXPAUFavoriteVolume@CipherShed@@@Z PROC ; std::_Destroy<CipherShed::FavoriteVolume>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
??$_Destroy@UFavoriteVolume@CipherShed@@@std@@YAXPAUFavoriteVolume@CipherShed@@@Z ENDP ; std::_Destroy<CipherShed::FavoriteVolume>
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@std@@QAE@XZ:PROC			; std::exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0002d	33 c0		 xor	 eax, eax
  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00038	6a ff		 push	 -1
  0003a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0003d	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00044	50		 push	 eax
  00045	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  00049	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004c	8b 44 24 24	 mov	 eax, DWORD PTR __Message$[esp+28]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 27   : 		}

  00056	8b c6		 mov	 eax, esi
  00058	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5e		 pop	 esi
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogtpy
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 110  : 		}

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN21@length_err
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN21@length_err:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN24@scalar@25
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN24@scalar@25:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN34@scalar@25
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN34@scalar@25:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 153  : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0002d	33 c0		 xor	 eax, eax
  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00038	6a ff		 push	 -1
  0003a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0003d	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00044	50		 push	 eax
  00045	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  00049	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004c	8b 44 24 24	 mov	 eax, DWORD PTR __Message$[esp+28]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 154  : 		}

  00056	8b c6		 mov	 eax, esi
  00058	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5e		 pop	 esi
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
PUBLIC	?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T171995 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::locale::name, COMDAT
; _this$ = ecx

; 407  : 		{	// return locale name

  00000	51		 push	 ecx

; 408  : 		return (_Ptr->_Name);

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	56		 push	 esi
  00004	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00008	33 d2		 xor	 edx, edx
  0000a	6a ff		 push	 -1
  0000c	83 c0 18	 add	 eax, 24			; 00000018H
  0000f	52		 push	 edx
  00010	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00017	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0001a	50		 push	 eax
  0001b	8b ce		 mov	 ecx, esi
  0001d	89 54 24 10	 mov	 DWORD PTR $T171995[esp+20], edx
  00021	88 56 04	 mov	 BYTE PTR [esi+4], dl
  00024	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi

; 409  : 		}

  0002c	59		 pop	 ecx
  0002d	c2 04 00	 ret	 4
?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::locale::name
_TEXT	ENDS
PUBLIC	?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	ENDS
;	COMDAT ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T172117 = -164						; size = 4
$T172111 = -160						; size = 4
$T172113 = -156						; size = 28
$T172112 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<char>::_Getcat, COMDAT

; 1790 : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1791 : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b bc 24 b8 00
	00 00		 mov	 edi, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T172117[esp+180], ebx
  00039	85 ff		 test	 edi, edi
  0003b	0f 84 9c 00 00
	00		 je	 $LN42@Getcat
  00041	39 1f		 cmp	 DWORD PTR [edi], ebx
  00043	0f 85 94 00 00
	00		 jne	 $LN42@Getcat

; 1792 : 			*_Ppf = _NEW_CRT ctype<_Elem>(
; 1793 : 				_Locinfo(_Ploc->name()));

  00049	6a 18		 push	 24			; 00000018H
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
  00055	89 74 24 14	 mov	 DWORD PTR $T172111[esp+180], esi
  00059	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00060	85 f6		 test	 esi, esi
  00062	74 3c		 je	 SHORT $LN4@Getcat
  00064	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006b	8d 44 24 18	 lea	 eax, DWORD PTR $T172113[esp+180]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00075	50		 push	 eax
  00076	8d 4c 24 38	 lea	 ecx, DWORD PTR $T172112[esp+184]
  0007a	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00082	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T172117[esp+184], 1
  0008a	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  0008f	6a 00		 push	 0
  00091	50		 push	 eax
  00092	8b ce		 mov	 ecx, esi
  00094	bb 03 00 00 00	 mov	 ebx, 3
  00099	e8 00 00 00 00	 call	 ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ; std::ctype<char>::ctype<char>
  0009e	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  000a0	33 c0		 xor	 eax, eax
$LN5@Getcat:
  000a2	c7 84 24 b0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 2
  000ad	89 07		 mov	 DWORD PTR [edi], eax
  000af	f6 c3 02	 test	 bl, 2
  000b2	74 10		 je	 SHORT $LN11@Getcat
  000b4	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000b7	8d 4c 24 34	 lea	 ecx, DWORD PTR $T172112[esp+180]
  000bb	89 5c 24 10	 mov	 DWORD PTR $T172117[esp+180], ebx
  000bf	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat:
  000c4	f6 c3 01	 test	 bl, 1
  000c7	74 14		 je	 SHORT $LN42@Getcat
  000c9	83 7c 24 30 10	 cmp	 DWORD PTR $T172113[esp+204], 16 ; 00000010H
  000ce	72 0d		 jb	 SHORT $LN42@Getcat
  000d0	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T172113[esp+184]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000da	83 c4 04	 add	 esp, 4
$LN42@Getcat:

; 1794 : 		return (_X_CTYPE);

  000dd	b8 02 00 00 00	 mov	 eax, 2

; 1795 : 		}

  000e2	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f0	59		 pop	 ecx
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  000fa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T172111[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T172117[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T172117[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T172113[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat:
  0002f	c3		 ret	 0
__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  0003a	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<char>::_Getcat
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::ios_base::failure::failure
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@runtime_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 220  : 			{	// construct with message

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@

; 221  : 			}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::ios_base::failure::failure
_TEXT	ENDS
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
; Function compile flags: /Ogtpy
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx

; 224  : 			{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 225  : 			}

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN21@failure
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN21@failure:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN24@scalar@26
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN24@scalar@26:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN34@scalar@26
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN34@scalar@26:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z	; CipherShed::FavoriteVolume::FavoriteVolume
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z$2
__ehfuncinfo$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z PROC		; CipherShed::FavoriteVolume::FavoriteVolume, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002a	8b 7c 24 24	 mov	 edi, DWORD PTR ___that$[esp+28]
  0002e	33 db		 xor	 ebx, ebx
  00030	6a ff		 push	 -1
  00032	53		 push	 ebx
  00033	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0003a	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0003d	57		 push	 edi
  0003e	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00041	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00046	6a ff		 push	 -1
  00048	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0004b	8d 47 1c	 lea	 eax, DWORD PTR [edi+28]
  0004e	53		 push	 ebx
  0004f	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00056	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00059	50		 push	 eax
  0005a	89 5c 24 28	 mov	 DWORD PTR __$EHRec$[esp+52], ebx
  0005e	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00061	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00066	6a ff		 push	 -1
  00068	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  0006b	8d 47 38	 lea	 eax, DWORD PTR [edi+56]
  0006e	53		 push	 ebx
  0006f	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00076	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00079	50		 push	 eax
  0007a	c6 44 24 28 01	 mov	 BYTE PTR __$EHRec$[esp+52], 1
  0007f	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00082	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00087	6a ff		 push	 -1
  00089	8d 4e 54	 lea	 ecx, DWORD PTR [esi+84]
  0008c	8d 47 54	 lea	 eax, DWORD PTR [edi+84]
  0008f	53		 push	 ebx
  00090	33 d2		 xor	 edx, edx
  00092	c7 41 18 07 00
	00 00		 mov	 DWORD PTR [ecx+24], 7
  00099	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  0009c	50		 push	 eax
  0009d	c6 44 24 28 02	 mov	 BYTE PTR __$EHRec$[esp+52], 2
  000a2	66 89 51 04	 mov	 WORD PTR [ecx+4], dx
  000a6	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  000ab	0f b6 47 70	 movzx	 eax, BYTE PTR [edi+112]
  000af	88 46 70	 mov	 BYTE PTR [esi+112], al
  000b2	0f b6 4f 71	 movzx	 ecx, BYTE PTR [edi+113]
  000b6	88 4e 71	 mov	 BYTE PTR [esi+113], cl
  000b9	0f b6 57 72	 movzx	 edx, BYTE PTR [edi+114]
  000bd	88 56 72	 mov	 BYTE PTR [esi+114], dl
  000c0	0f b6 47 73	 movzx	 eax, BYTE PTR [edi+115]
  000c4	88 46 73	 mov	 BYTE PTR [esi+115], al
  000c7	0f b6 4f 74	 movzx	 ecx, BYTE PTR [edi+116]
  000cb	88 4e 74	 mov	 BYTE PTR [esi+116], cl
  000ce	0f b6 57 75	 movzx	 edx, BYTE PTR [edi+117]
  000d2	88 56 75	 mov	 BYTE PTR [esi+117], dl
  000d5	0f b6 47 76	 movzx	 eax, BYTE PTR [edi+118]
  000d9	88 46 76	 mov	 BYTE PTR [esi+118], al
  000dc	0f b6 4f 77	 movzx	 ecx, BYTE PTR [edi+119]
  000e0	88 4e 77	 mov	 BYTE PTR [esi+119], cl
  000e3	8b c6		 mov	 eax, esi
  000e5	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  000e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f0	59		 pop	 ecx
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	83 c4 10	 add	 esp, 16			; 00000010H
  000f7	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 38	 add	 ecx, 56			; 00000038H
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z:
  0001e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00022	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  00025	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z ENDP		; CipherShed::FavoriteVolume::FavoriteVolume
PUBLIC	_this$GSCopy$
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2
__ehfuncinfo$??0Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
xdata$x	ENDS
;	COMDAT ??0Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
_this$GSCopy$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_a$ = 8							; size = 28
_a2$ = 36						; size = 28
??0Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; `AnalyzeKernelMiniDump'::`17'::Finally8684::Finally8684, COMDAT
; _this$ = esi

; 8684 : 	});

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	89 74 24 08	 mov	 DWORD PTR _this$GSCopy$[esp+24], esi
  00026	33 db		 xor	 ebx, ebx
  00028	6a ff		 push	 -1
  0002a	53		 push	 ebx
  0002b	8d 44 24 24	 lea	 eax, DWORD PTR _a$[esp+28]
  0002f	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00036	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00039	50		 push	 eax
  0003a	8b ce		 mov	 ecx, esi
  0003c	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 1
  00044	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00047	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004c	6a ff		 push	 -1
  0004e	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00051	53		 push	 ebx
  00052	8d 54 24 40	 lea	 edx, DWORD PTR _a2$[esp+28]
  00056	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0005d	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00060	52		 push	 edx
  00061	c6 44 24 20 02	 mov	 BYTE PTR __$EHRec$[esp+44], 2
  00066	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00069	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0006e	83 7c 24 34 10	 cmp	 DWORD PTR _a$[esp+44], 16 ; 00000010H
  00073	72 0d		 jb	 SHORT $LN75@Finally868@2
  00075	8b 44 24 20	 mov	 eax, DWORD PTR _a$[esp+24]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0007f	83 c4 04	 add	 esp, 4
$LN75@Finally868@2:
  00082	83 7c 24 50 10	 cmp	 DWORD PTR _a2$[esp+44], 16 ; 00000010H
  00087	c7 44 24 34 0f
	00 00 00	 mov	 DWORD PTR _a$[esp+44], 15 ; 0000000fH
  0008f	89 5c 24 30	 mov	 DWORD PTR _a$[esp+40], ebx
  00093	88 5c 24 20	 mov	 BYTE PTR _a$[esp+24], bl
  00097	72 0d		 jb	 SHORT $LN111@Finally868@2
  00099	8b 4c 24 3c	 mov	 ecx, DWORD PTR _a2$[esp+24]
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a3	83 c4 04	 add	 esp, 4
$LN111@Finally868@2:
  000a6	8b c6		 mov	 eax, esi
  000a8	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  000ac	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b3	59		 pop	 ecx
  000b4	5b		 pop	 ebx
  000b5	83 c4 10	 add	 esp, 16			; 00000010H
  000b8	c2 38 00	 ret	 56			; 00000038H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0:
  00000	8d 4d 20	 lea	 ecx, DWORD PTR _a2$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1:
  00008	8d 4d 04	 lea	 ecx, DWORD PTR _a$[ebp-4]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2:
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0001f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; `AnalyzeKernelMiniDump'::`17'::Finally8684::Finally8684
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$LL37@basic_stri@4:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL37@basic_stri@4
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 654  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 916  : 		return (assign(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 917  : 		}

  0000e	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 920  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 921  : 		return (assign(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@43:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL7@operator@43
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 922  : 		}

  00022	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
; Function compile flags: /Ogtpy
;	COMDAT ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
$T173628 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr, COMDAT
; _this$ = ecx

; 1998 : 		{	// return [_Off, _Off + _Count) as new string

  00000	51		 push	 ecx

; 1999 : 		return (_Myt(*this, _Off, _Count, get_allocator()));

  00001	8b 54 24 0c	 mov	 edx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	33 c0		 xor	 eax, eax
  0000c	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000f	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00016	89 44 24 04	 mov	 DWORD PTR $T173628[esp+8], eax
  0001a	88 46 04	 mov	 BYTE PTR [esi+4], al
  0001d	8b 44 24 14	 mov	 eax, DWORD PTR __Count$[esp+4]
  00021	50		 push	 eax
  00022	52		 push	 edx
  00023	51		 push	 ecx
  00024	8b ce		 mov	 ecx, esi
  00026	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 2000 : 		}

  0002e	59		 pop	 ecx
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c0		 xor	 eax, eax
  00009	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00010	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00017	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001b	8b c2		 mov	 eax, edx
  0001d	57		 push	 edi
  0001e	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
$LL39@basic_stri@5:
  00021	66 8b 08	 mov	 cx, WORD PTR [eax]
  00024	83 c0 02	 add	 eax, 2
  00027	66 85 c9	 test	 cx, cx
  0002a	75 f5		 jne	 SHORT $LL39@basic_stri@5
  0002c	2b c7		 sub	 eax, edi
  0002e	d1 f8		 sar	 eax, 1
  00030	50		 push	 eax
  00031	52		 push	 edx
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00039	5f		 pop	 edi

; 654  : 		}

  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 916  : 		return (assign(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 917  : 		}

  0000e	c2 04 00	 ret	 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx

; 931  : 		return (append(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 932  : 		}

  0000e	c2 04 00	 ret	 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx

; 935  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 936  : 		return (append(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@44:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL7@operator@44
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 937  : 		}

  00028	c2 04 00	 ret	 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
_TEXT	ENDS
PUBLIC	?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
; Function compile flags: /Ogtpy
;	COMDAT ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
$T173909 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr, COMDAT
; _this$ = ecx

; 1998 : 		{	// return [_Off, _Off + _Count) as new string

  00000	51		 push	 ecx

; 1999 : 		return (_Myt(*this, _Off, _Count, get_allocator()));

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Count$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	33 c0		 xor	 eax, eax
  0000c	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000f	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00016	89 44 24 04	 mov	 DWORD PTR $T173909[esp+8], eax
  0001a	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001e	8b 44 24 10	 mov	 eax, DWORD PTR __Off$[esp+4]
  00022	52		 push	 edx
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	8b ce		 mov	 ecx, esi
  00027	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi

; 2000 : 		}

  0002f	59		 pop	 ecx
  00030	c2 0c 00	 ret	 12			; 0000000cH
?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$3
__ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T174070 = -76						; size = 4
__Str$143737 = -72					; size = 28
__Str$143734 = -72					; size = 28
__Nul$143739 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 60   : 		{	// return string copy of character array

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 40	 sub	 esp, 64			; 00000040H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 3c	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c4		 xor	 eax, esp
  00026	50		 push	 eax
  00027	8d 44 24 50	 lea	 eax, DWORD PTR __$EHRec$[esp+92]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 61   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)

  00031	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00034	8b 74 24 60	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+88]
  00038	33 db		 xor	 ebx, ebx
  0003a	89 5c 24 10	 mov	 DWORD PTR $T174070[esp+92], ebx
  0003e	f6 c2 02	 test	 dl, 2
  00041	75 63		 jne	 SHORT $LN4@str
  00043	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00046	39 18		 cmp	 DWORD PTR [eax], ebx
  00048	74 5c		 je	 SHORT $LN4@str

; 62   : 			{	// writable, make string from write buffer
; 63   : 			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()
; 64   : 				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());

  0004a	8b 00		 mov	 eax, DWORD PTR [eax]
  0004c	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0004f	3b d0		 cmp	 edx, eax
  00051	72 02		 jb	 SHORT $LN8@str
  00053	8b c2		 mov	 eax, edx
$LN8@str:
  00055	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00058	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0005a	2b c1		 sub	 eax, ecx
  0005c	50		 push	 eax
  0005d	51		 push	 ecx
  0005e	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00063	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$143734[esp+100]
  00067	89 7c 24 34	 mov	 DWORD PTR __Str$143734[esp+124], edi
  0006b	89 5c 24 30	 mov	 DWORD PTR __Str$143734[esp+120], ebx
  0006f	88 5c 24 20	 mov	 BYTE PTR __Str$143734[esp+104], bl
  00073	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00078	89 5c 24 58	 mov	 DWORD PTR __$EHRec$[esp+100], ebx
$LN286@str:

; 65   : 			return (_Str);

  0007c	6a ff		 push	 -1
  0007e	53		 push	 ebx
  0007f	8d 54 24 1c	 lea	 edx, DWORD PTR __Str$143734[esp+100]
  00083	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  00086	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00089	52		 push	 edx
  0008a	8b ce		 mov	 ecx, esi
  0008c	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  0008f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00094	83 7c 24 2c 10	 cmp	 DWORD PTR __Str$143734[esp+116], 16 ; 00000010H
  00099	0f 82 8c 00 00
	00		 jb	 $LN274@str
  0009f	8b 44 24 18	 mov	 eax, DWORD PTR __Str$143734[esp+96]
  000a3	50		 push	 eax
  000a4	eb 7d		 jmp	 SHORT $LN285@str
$LN4@str:

; 66   : 			}
; 67   : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)

  000a6	f6 c2 04	 test	 dl, 4
  000a9	75 3b		 jne	 SHORT $LN2@str
  000ab	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000ae	39 1a		 cmp	 DWORD PTR [edx], ebx
  000b0	74 34		 je	 SHORT $LN2@str

; 68   : 			{	// readable, make string from read buffer
; 69   : 			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());

  000b2	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  000b5	8b 00		 mov	 eax, DWORD PTR [eax]
  000b7	03 02		 add	 eax, DWORD PTR [edx]
  000b9	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  000bc	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000be	2b c1		 sub	 eax, ecx
  000c0	50		 push	 eax
  000c1	51		 push	 ecx
  000c2	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  000c7	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$143737[esp+100]
  000cb	89 7c 24 34	 mov	 DWORD PTR __Str$143737[esp+124], edi
  000cf	89 5c 24 30	 mov	 DWORD PTR __Str$143737[esp+120], ebx
  000d3	88 5c 24 20	 mov	 BYTE PTR __Str$143737[esp+104], bl
  000d7	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000dc	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+100], 1

; 70   : 			return (_Str);

  000e4	eb 96		 jmp	 SHORT $LN286@str
$LN2@str:

; 71   : 			}
; 72   : 		else
; 73   : 			{	// inaccessible, return empty string
; 74   : 			_Mystr _Nul;

  000e6	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  000eb	89 7c 24 48	 mov	 DWORD PTR __Nul$143739[esp+116], edi
  000ef	89 5c 24 44	 mov	 DWORD PTR __Nul$143739[esp+112], ebx
  000f3	88 5c 24 34	 mov	 BYTE PTR __Nul$143739[esp+96], bl

; 75   : 			return (_Nul);

  000f7	6a ff		 push	 -1
  000f9	53		 push	 ebx
  000fa	8d 4c 24 38	 lea	 ecx, DWORD PTR __Nul$143739[esp+100]
  000fe	51		 push	 ecx
  000ff	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  00102	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00105	8b ce		 mov	 ecx, esi
  00107	c7 44 24 64 02
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+112], 2
  0010f	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00112	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00117	83 7c 24 48 10	 cmp	 DWORD PTR __Nul$143739[esp+116], 16 ; 00000010H
  0011c	72 0d		 jb	 SHORT $LN274@str
  0011e	8b 54 24 34	 mov	 edx, DWORD PTR __Nul$143739[esp+96]
  00122	52		 push	 edx
$LN285@str:
  00123	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00128	83 c4 04	 add	 esp, 4
$LN274@str:
  0012b	8b c6		 mov	 eax, esi

; 76   : 			}
; 77   : 		}

  0012d	8b 4c 24 50	 mov	 ecx, DWORD PTR __$EHRec$[esp+92]
  00131	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00138	59		 pop	 ecx
  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx
  0013c	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+76]
  00140	33 cc		 xor	 ecx, esp
  00142	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00147	83 c4 4c	 add	 esp, 76			; 0000004cH
  0014a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR __Str$143734[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$2:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR __Str$143737[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$3:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR __Nul$143739[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 b4	 lea	 eax, DWORD PTR [edx-76]
  0001f	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	83 c0 0c	 add	 eax, 12			; 0000000cH
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T175176 = -80						; size = 28
$T175175 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 48	 lea	 eax, DWORD PTR __$EHRec$[esp+84]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

  00023	6a 12		 push	 18			; 00000012H
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0002a	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T175176[esp+92]
  0002e	c7 44 24 24 0f
	00 00 00	 mov	 DWORD PTR $T175176[esp+116], 15 ; 0000000fH
  00036	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T175176[esp+112], 0
  0003e	c6 44 24 10 00	 mov	 BYTE PTR $T175176[esp+96], 0
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00048	8d 44 24 04	 lea	 eax, DWORD PTR $T175176[esp+84]
  0004c	50		 push	 eax
  0004d	8d 4c 24 24	 lea	 ecx, DWORD PTR $T175175[esp+88]
  00051	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+96], 0
  00059	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005e	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  00063	8d 4c 24 24	 lea	 ecx, DWORD PTR $T175175[esp+88]
  00067	51		 push	 ecx
  00068	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR $T175175[esp+92], OFFSET ??_7length_error@std@@6B@
  00070	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN44@Xlen:
  00075	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T175176[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 bc	 lea	 eax, DWORD PTR [edx-68]
  0000f	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	8b 7c 24 20	 mov	 edi, DWORD PTR ___that$[esp+24]
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00033	33 d2		 xor	 edx, edx
  00035	6a ff		 push	 -1
  00037	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00040	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00043	52		 push	 edx
  00044	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0004b	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  0004e	50		 push	 eax
  0004f	89 54 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], edx
  00053	88 51 04	 mov	 BYTE PTR [ecx+4], dl
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8b c6		 mov	 eax, esi
  0005d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T175457 = -80						; size = 28
$T175456 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 48	 lea	 eax, DWORD PTR __$EHRec$[esp+84]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

  00023	6a 12		 push	 18			; 00000012H
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0002a	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T175457[esp+92]
  0002e	c7 44 24 24 0f
	00 00 00	 mov	 DWORD PTR $T175457[esp+116], 15 ; 0000000fH
  00036	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T175457[esp+112], 0
  0003e	c6 44 24 10 00	 mov	 BYTE PTR $T175457[esp+96], 0
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00048	8d 44 24 04	 lea	 eax, DWORD PTR $T175457[esp+84]
  0004c	50		 push	 eax
  0004d	8d 4c 24 24	 lea	 ecx, DWORD PTR $T175456[esp+88]
  00051	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+96], 0
  00059	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005e	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  00063	8d 4c 24 24	 lea	 ecx, DWORD PTR $T175456[esp+88]
  00067	51		 push	 ecx
  00068	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR $T175456[esp+92], OFFSET ??_7length_error@std@@6B@
  00070	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN44@Xlen@2:
  00075	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T175457[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 bc	 lea	 eax, DWORD PTR [edx-68]
  0000f	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Xlen
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Incsize
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z$0
__ehfuncinfo$?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T175616 = -80						; size = 28
$T175615 = -52						; size = 40
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Incsize, COMDAT
; _this$ = ecx

; 1239 : 		{	// alter element count, with checking

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 4c	 lea	 eax, DWORD PTR __$EHRec$[esp+88]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1240 : 		if (max_size() - _Mysize < _Count)

  00024	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00027	8b 54 24 5c	 mov	 edx, DWORD PTR __Count$[esp+84]
  0002b	be 22 22 22 02	 mov	 esi, 35791394		; 02222222H
  00030	2b f0		 sub	 esi, eax
  00032	3b f2		 cmp	 esi, edx
  00034	73 52		 jae	 SHORT $LN1@Incsize

; 1241 : 			_THROW(length_error, "list<T> too long");

  00036	6a 10		 push	 16			; 00000010H
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003d	8d 4c 24 10	 lea	 ecx, DWORD PTR $T175616[esp+96]
  00041	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T175616[esp+120], 15 ; 0000000fH
  00049	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T175616[esp+116], 0
  00051	c6 44 24 14 00	 mov	 BYTE PTR $T175616[esp+100], 0
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8d 44 24 08	 lea	 eax, DWORD PTR $T175616[esp+88]
  0005f	50		 push	 eax
  00060	8d 4c 24 28	 lea	 ecx, DWORD PTR $T175615[esp+92]
  00064	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+100], 0
  0006c	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00071	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  00076	8d 4c 24 28	 lea	 ecx, DWORD PTR $T175615[esp+92]
  0007a	51		 push	 ecx
  0007b	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR $T175615[esp+96], OFFSET ??_7length_error@std@@6B@
  00083	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@Incsize:

; 1242 : 		_Mysize += _Count;

  00088	03 c2		 add	 eax, edx
  0008a	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1243 : 		}

  0008d	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$EHRec$[esp+88]
  00091	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00098	59		 pop	 ecx
  00099	5e		 pop	 esi
  0009a	83 c4 50	 add	 esp, 80			; 00000050H
  0009d	c2 04 00	 ret	 4
$LN51@Incsize:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T175616[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 b8	 lea	 eax, DWORD PTR [edx-72]
  0000f	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Incsize
PUBLIC	?_Incsize@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Incsize
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Incsize@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z$0
__ehfuncinfo$?_Incsize@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Incsize@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Incsize@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z
_TEXT	SEGMENT
$T175791 = -80						; size = 28
$T175790 = -52						; size = 40
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
?_Incsize@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Incsize, COMDAT
; _this$ = ecx

; 1239 : 		{	// alter element count, with checking

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Incsize@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 4c	 lea	 eax, DWORD PTR __$EHRec$[esp+88]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1240 : 		if (max_size() - _Mysize < _Count)

  00024	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00027	8b 54 24 5c	 mov	 edx, DWORD PTR __Count$[esp+84]
  0002b	be 49 92 24 09	 mov	 esi, 153391689		; 09249249H
  00030	2b f0		 sub	 esi, eax
  00032	3b f2		 cmp	 esi, edx
  00034	73 52		 jae	 SHORT $LN1@Incsize@2

; 1241 : 			_THROW(length_error, "list<T> too long");

  00036	6a 10		 push	 16			; 00000010H
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003d	8d 4c 24 10	 lea	 ecx, DWORD PTR $T175791[esp+96]
  00041	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T175791[esp+120], 15 ; 0000000fH
  00049	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T175791[esp+116], 0
  00051	c6 44 24 14 00	 mov	 BYTE PTR $T175791[esp+100], 0
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8d 44 24 08	 lea	 eax, DWORD PTR $T175791[esp+88]
  0005f	50		 push	 eax
  00060	8d 4c 24 28	 lea	 ecx, DWORD PTR $T175790[esp+92]
  00064	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+100], 0
  0006c	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00071	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  00076	8d 4c 24 28	 lea	 ecx, DWORD PTR $T175790[esp+92]
  0007a	51		 push	 ecx
  0007b	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR $T175790[esp+96], OFFSET ??_7length_error@std@@6B@
  00083	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@Incsize@2:

; 1242 : 		_Mysize += _Count;

  00088	03 c2		 add	 eax, edx
  0008a	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1243 : 		}

  0008d	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$EHRec$[esp+88]
  00091	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00098	59		 pop	 ecx
  00099	5e		 pop	 esi
  0009a	83 c4 50	 add	 esp, 80			; 00000050H
  0009d	c2 04 00	 ret	 4
$LN51@Incsize@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Incsize@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T175791[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Incsize@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 b8	 lea	 eax, DWORD PTR [edx-72]
  0000f	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Incsize@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Incsize@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Incsize
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T175966 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_grouping, COMDAT
; _this$ = ecx

; 174  : 		{	// return grouping string

  00000	51		 push	 ecx

; 175  : 		return (string(_Grouping));

  00001	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T175966[esp+12], 0
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL41@do_groupin:
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 d2		 test	 dl, dl
  00035	75 f9		 jne	 SHORT $LL41@do_groupin
  00037	2b c7		 sub	 eax, edi
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00042	5f		 pop	 edi
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi

; 176  : 		}

  00046	59		 pop	 ecx
  00047	c2 04 00	 ret	 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_grouping
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T176116 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_falsename, COMDAT
; _this$ = ecx

; 179  : 		{	// return name for false

  00000	51		 push	 ecx

; 180  : 		return (string_type(_Falsename));

  00001	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T176116[esp+12], 0
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL41@do_falsena:
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 d2		 test	 dl, dl
  00035	75 f9		 jne	 SHORT $LL41@do_falsena
  00037	2b c7		 sub	 eax, edi
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00042	5f		 pop	 edi
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi

; 181  : 		}

  00046	59		 pop	 ecx
  00047	c2 04 00	 ret	 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_falsename
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T176266 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_truename, COMDAT
; _this$ = ecx

; 184  : 		{	// return name for true

  00000	51		 push	 ecx

; 185  : 		return (string_type(_Truename));

  00001	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T176266[esp+12], 0
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL41@do_truenam:
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 d2		 test	 dl, dl
  00035	75 f9		 jne	 SHORT $LL41@do_truenam
  00037	2b c7		 sub	 eax, edi
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00042	5f		 pop	 edi
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi

; 186  : 		}

  00046	59		 pop	 ecx
  00047	c2 04 00	 ret	 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_truename
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	e8 00 00 00 00	 call	 ??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0000f	83 c4 08	 add	 esp, 8

; 156  : 		}

  00012	c2 08 00	 ret	 8
?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@Z ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@Z PROC ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

  00000	56		 push	 esi

; 160  : 		_Destroy(_Ptr);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  00009	72 0c		 jb	 SHORT $LN26@destroy
  0000b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN26@destroy:
  00017	33 c0		 xor	 eax, eax
  00019	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH
  00020	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00023	88 46 0c	 mov	 BYTE PTR [esi+12], al
  00026	5e		 pop	 esi

; 161  : 		}

  00027	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@Z ENDP ; std::allocator<std::_List_nod<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node>::destroy
_TEXT	ENDS
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
EXTRN	??0bad_cast@std@@QAE@PBD@Z:PROC			; std::bad_cast::bad_cast
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	??1bad_cast@std@@UAE@XZ:PROC			; std::bad_cast::~bad_cast
EXTRN	??0bad_cast@std@@QAE@ABV01@@Z:PROC		; std::bad_cast::bad_cast
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$145054 = -36					; size = 4
__Lock$176647 = -32					; size = 4
__Lock$145053 = -28					; size = 4
$T176640 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$176669 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$145053[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, 0 ; std::ctype<char>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$145054[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$176647[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, 0 ; std::ctype<char>::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, eax ; std::ctype<char>::id
$LN10@use_facet:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$176647[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet
$LN30@use_facet:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet
$LN20@use_facet:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet
$LN16@use_facet:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet
$LN31@use_facet:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet
$LN4@use_facet:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$145054[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T176640[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T176640[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$145054[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$176669[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<char> >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$176669[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$145053[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$145053[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
_TEXT	SEGMENT
$T176690 = -44						; size = 4
$T176687 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 33   : 	{	// return NTCS + string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 34   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 54 24 40	 mov	 edx, DWORD PTR __Left$[esp+52]
  00029	33 db		 xor	 ebx, ebx
  0002b	8b c2		 mov	 eax, edx
  0002d	89 5c 24 0c	 mov	 DWORD PTR $T176690[esp+56], ebx
  00031	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T176687[esp+80], 15 ; 0000000fH
  00039	89 5c 24 24	 mov	 DWORD PTR $T176687[esp+76], ebx
  0003d	88 5c 24 14	 mov	 BYTE PTR $T176687[esp+60], bl
  00041	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL98@operator@45:
  00044	8a 08		 mov	 cl, BYTE PTR [eax]
  00046	40		 inc	 eax
  00047	3a cb		 cmp	 cl, bl
  00049	75 f9		 jne	 SHORT $LL98@operator@45
  0004b	2b c6		 sub	 eax, esi
  0004d	50		 push	 eax
  0004e	52		 push	 edx
  0004f	8d 4c 24 18	 lea	 ecx, DWORD PTR $T176687[esp+64]
  00053	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00058	8b 44 24 44	 mov	 eax, DWORD PTR __Right$[esp+52]
  0005c	6a ff		 push	 -1
  0005e	53		 push	 ebx
  0005f	50		 push	 eax
  00060	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T176687[esp+68]
  00064	89 5c 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], ebx
  00068	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0006d	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00071	6a ff		 push	 -1
  00073	53		 push	 ebx
  00074	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0007b	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0007e	50		 push	 eax
  0007f	8b ce		 mov	 ecx, esi
  00081	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00084	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00089	83 7c 24 28 10	 cmp	 DWORD PTR $T176687[esp+80], 16 ; 00000010H
  0008e	72 0d		 jb	 SHORT $LN99@operator@45
  00090	8b 4c 24 14	 mov	 ecx, DWORD PTR $T176687[esp+60]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009a	83 c4 04	 add	 esp, 4
$LN99@operator@45:
  0009d	8b c6		 mov	 eax, esi

; 35   : 	}

  0009f	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000aa	59		 pop	 ecx
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	83 c4 2c	 add	 esp, 44			; 0000002cH
  000b0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T176687[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
_TEXT	SEGMENT
$T177078 = -44						; size = 4
$T177075 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 53   : 	{	// return string + NTCS

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 54   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 4c 24 40	 mov	 ecx, DWORD PTR __Left$[esp+52]
  00029	33 ff		 xor	 edi, edi
  0002b	6a ff		 push	 -1
  0002d	57		 push	 edi
  0002e	33 c0		 xor	 eax, eax
  00030	51		 push	 ecx
  00031	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T177075[esp+68]
  00035	89 7c 24 18	 mov	 DWORD PTR $T177078[esp+68], edi
  00039	c7 44 24 34 07
	00 00 00	 mov	 DWORD PTR $T177075[esp+92], 7
  00041	89 7c 24 30	 mov	 DWORD PTR $T177075[esp+88], edi
  00045	66 89 44 24 20	 mov	 WORD PTR $T177075[esp+72], ax
  0004a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0004f	8b 54 24 44	 mov	 edx, DWORD PTR __Right$[esp+52]
  00053	8b c2		 mov	 eax, edx
  00055	89 7c 24 34	 mov	 DWORD PTR __$EHRec$[esp+64], edi
  00059	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
  0005c	8d 64 24 00	 npad	 4
$LL96@operator@46:
  00060	66 8b 08	 mov	 cx, WORD PTR [eax]
  00063	83 c0 02	 add	 eax, 2
  00066	66 3b cf	 cmp	 cx, di
  00069	75 f5		 jne	 SHORT $LL96@operator@46
  0006b	2b c6		 sub	 eax, esi
  0006d	d1 f8		 sar	 eax, 1
  0006f	50		 push	 eax
  00070	52		 push	 edx
  00071	8d 4c 24 18	 lea	 ecx, DWORD PTR $T177075[esp+64]
  00075	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  0007a	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  0007e	6a ff		 push	 -1
  00080	57		 push	 edi
  00081	33 d2		 xor	 edx, edx
  00083	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0008a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008d	50		 push	 eax
  0008e	8b ce		 mov	 ecx, esi
  00090	66 89 56 04	 mov	 WORD PTR [esi+4], dx
  00094	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00099	83 7c 24 28 08	 cmp	 DWORD PTR $T177075[esp+80], 8
  0009e	72 0d		 jb	 SHORT $LN97@operator@46
  000a0	8b 44 24 14	 mov	 eax, DWORD PTR $T177075[esp+60]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000aa	83 c4 04	 add	 esp, 4
$LN97@operator@46:
  000ad	8b c6		 mov	 eax, esi

; 55   : 	}

  000af	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	83 c4 2c	 add	 esp, 44			; 0000002cH
  000c0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T177075[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
_TEXT	SEGMENT
$T177479 = -44						; size = 4
$T177476 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 23   : 	{	// return string + string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 24   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 4c 24 40	 mov	 ecx, DWORD PTR __Left$[esp+52]
  00029	33 ff		 xor	 edi, edi
  0002b	6a ff		 push	 -1
  0002d	57		 push	 edi
  0002e	33 c0		 xor	 eax, eax
  00030	51		 push	 ecx
  00031	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T177476[esp+68]
  00035	89 7c 24 18	 mov	 DWORD PTR $T177479[esp+68], edi
  00039	c7 44 24 34 07
	00 00 00	 mov	 DWORD PTR $T177476[esp+92], 7
  00041	89 7c 24 30	 mov	 DWORD PTR $T177476[esp+88], edi
  00045	66 89 44 24 20	 mov	 WORD PTR $T177476[esp+72], ax
  0004a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0004f	8b 54 24 44	 mov	 edx, DWORD PTR __Right$[esp+52]
  00053	6a ff		 push	 -1
  00055	57		 push	 edi
  00056	52		 push	 edx
  00057	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T177476[esp+68]
  0005b	89 7c 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], edi
  0005f	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00064	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00068	6a ff		 push	 -1
  0006a	33 c9		 xor	 ecx, ecx
  0006c	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00073	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00076	57		 push	 edi
  00077	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  0007b	50		 push	 eax
  0007c	8b ce		 mov	 ecx, esi
  0007e	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00083	83 7c 24 28 08	 cmp	 DWORD PTR $T177476[esp+80], 8
  00088	72 0d		 jb	 SHORT $LN94@operator@47
  0008a	8b 54 24 14	 mov	 edx, DWORD PTR $T177476[esp+60]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00094	83 c4 04	 add	 esp, 4
$LN94@operator@47:
  00097	8b c6		 mov	 eax, esi

; 25   : 	}

  00099	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  0009d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a4	59		 pop	 ecx
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	83 c4 2c	 add	 esp, 44			; 0000002cH
  000aa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T177476[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$_Destroy@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
??$_Destroy@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	e9 00 00 00 00	 jmp	 ??1Partition@CipherShed@@QAE@XZ
??$_Destroy@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z ; std::_Construct<CipherShed::FavoriteVolume,CipherShed::FavoriteVolume>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
xdata$x	SEGMENT
__unwindtable$??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z$0
__ehfuncinfo$??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z
_TEXT	SEGMENT
$T177894 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z PROC ; std::_Construct<CipherShed::FavoriteVolume,CipherShed::FavoriteVolume>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00014	33 c4		 xor	 eax, esp
  00016	50		 push	 eax
  00017	8d 44 24 08	 lea	 eax, DWORD PTR __$EHRec$[esp+20]
  0001b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 51   : 	void _FARQ *_Vptr = _Ptr;

  00021	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ptr$[esp+16]
  00025	89 4c 24 18	 mov	 DWORD PTR __Vptr$[esp+16], ecx

; 52   : 	::new (_Vptr) _T1(_Val);

  00029	89 4c 24 04	 mov	 DWORD PTR $T177894[esp+20], ecx
  0002d	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+28], 0
  00035	85 c9		 test	 ecx, ecx
  00037	74 0a		 je	 SHORT $LN3@Construct@4
  00039	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+16]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
$LN3@Construct@4:

; 53   : 	}

  00043	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00047	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004e	59		 pop	 ecx
  0004f	83 c4 10	 add	 esp, 16			; 00000010H
  00052	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR __Vptr$[ebp-4]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T177894[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z ENDP ; std::_Construct<CipherShed::FavoriteVolume,CipherShed::FavoriteVolume>
PUBLIC	?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T177916 = -164						; size = 4
$T177910 = -160						; size = 4
$T177912 = -156						; size = 28
$T177911 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat, COMDAT

; 1030 : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	55		 push	 ebp
  00016	56		 push	 esi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1031 : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b ac 24 b8 00
	00 00		 mov	 ebp, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T177916[esp+180], ebx
  00039	85 ed		 test	 ebp, ebp
  0003b	0f 84 ac 00 00
	00		 je	 $LN50@Getcat@2
  00041	39 5d 00	 cmp	 DWORD PTR [ebp], ebx
  00044	0f 85 a3 00 00
	00		 jne	 $LN50@Getcat@2

; 1032 : 			*_Ppf = _NEW_CRT num_put<_Elem, _OutIt>(
; 1033 : 				_Locinfo(_Ploc->name()));

  0004a	6a 10		 push	 16			; 00000010H
  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00051	8b f0		 mov	 esi, eax
  00053	83 c4 04	 add	 esp, 4
  00056	89 74 24 14	 mov	 DWORD PTR $T177910[esp+180], esi
  0005a	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00061	85 f6		 test	 esi, esi
  00063	74 4a		 je	 SHORT $LN4@Getcat@2
  00065	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006c	8d 44 24 18	 lea	 eax, DWORD PTR $T177912[esp+180]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00076	50		 push	 eax
  00077	8d 4c 24 38	 lea	 ecx, DWORD PTR $T177911[esp+184]
  0007b	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00083	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T177916[esp+184], 1
  0008b	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  00090	bb 03 00 00 00	 mov	 ebx, 3
  00095	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0009c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
  000a2	e8 00 00 00 00	 call	 __Getcvt
  000a7	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000aa	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  000ad	eb 02		 jmp	 SHORT $LN5@Getcat@2
$LN4@Getcat@2:
  000af	33 f6		 xor	 esi, esi
$LN5@Getcat@2:
  000b1	c7 84 24 b0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 2
  000bc	89 75 00	 mov	 DWORD PTR [ebp], esi
  000bf	f6 c3 02	 test	 bl, 2
  000c2	74 10		 je	 SHORT $LN11@Getcat@2
  000c4	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000c7	8d 4c 24 34	 lea	 ecx, DWORD PTR $T177911[esp+180]
  000cb	89 5c 24 10	 mov	 DWORD PTR $T177916[esp+180], ebx
  000cf	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat@2:
  000d4	f6 c3 01	 test	 bl, 1
  000d7	74 14		 je	 SHORT $LN50@Getcat@2
  000d9	83 7c 24 30 10	 cmp	 DWORD PTR $T177912[esp+204], 16 ; 00000010H
  000de	72 0d		 jb	 SHORT $LN50@Getcat@2
  000e0	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T177912[esp+184]
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ea	83 c4 04	 add	 esp, 4
$LN50@Getcat@2:

; 1034 : 		return (_X_NUMERIC);

  000ed	b8 04 00 00 00	 mov	 eax, 4

; 1035 : 		}

  000f2	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00100	59		 pop	 ecx
  00101	5e		 pop	 esi
  00102	5d		 pop	 ebp
  00103	5b		 pop	 ebx
  00104	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  0010a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T177910[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T177916[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat@2
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T177916[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T177912[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat@2:
  0002f	c3		 ret	 0
__ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  0003a	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
PUBLIC	?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	03H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T178079 = -164						; size = 4
$T178073 = -160						; size = 4
$T178075 = -156						; size = 28
$T178074 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::numpunct<char>::_Getcat, COMDAT

; 112  : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 113  : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b bc 24 b8 00
	00 00		 mov	 edi, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T178079[esp+180], ebx
  00039	85 ff		 test	 edi, edi
  0003b	0f 84 ad 00 00
	00		 je	 $LN42@Getcat@3
  00041	39 1f		 cmp	 DWORD PTR [edi], ebx
  00043	0f 85 a5 00 00
	00		 jne	 $LN42@Getcat@3

; 114  : 			*_Ppf = _NEW_CRT numpunct<_Elem>(
; 115  : 				_Locinfo(_Ploc->name()), 0, true);

  00049	6a 18		 push	 24			; 00000018H
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
  00055	89 74 24 14	 mov	 DWORD PTR $T178073[esp+180], esi
  00059	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00060	85 f6		 test	 esi, esi
  00062	74 4d		 je	 SHORT $LN4@Getcat@3
  00064	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006b	8d 44 24 18	 lea	 eax, DWORD PTR $T178075[esp+180]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00075	50		 push	 eax
  00076	8d 4c 24 38	 lea	 ecx, DWORD PTR $T178074[esp+184]
  0007a	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00082	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T178079[esp+184], 1
  0008a	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  0008f	6a 01		 push	 1
  00091	6a 00		 push	 0
  00093	bb 03 00 00 00	 mov	 ebx, 3
  00098	50		 push	 eax
  00099	8b ce		 mov	 ecx, esi
  0009b	c7 84 24 bc 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+200], 2
  000a6	89 5c 24 1c	 mov	 DWORD PTR $T178079[esp+192], ebx
  000aa	e8 00 00 00 00	 call	 ??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z ; std::numpunct<char>::numpunct<char>
  000af	eb 02		 jmp	 SHORT $LN5@Getcat@3
$LN4@Getcat@3:
  000b1	33 c0		 xor	 eax, eax
$LN5@Getcat@3:
  000b3	89 07		 mov	 DWORD PTR [edi], eax
  000b5	c7 84 24 b0 00
	00 00 03 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 3
  000c0	f6 c3 02	 test	 bl, 2
  000c3	74 10		 je	 SHORT $LN11@Getcat@3
  000c5	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000c8	8d 4c 24 34	 lea	 ecx, DWORD PTR $T178074[esp+180]
  000cc	89 5c 24 10	 mov	 DWORD PTR $T178079[esp+180], ebx
  000d0	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat@3:
  000d5	f6 c3 01	 test	 bl, 1
  000d8	74 14		 je	 SHORT $LN42@Getcat@3
  000da	83 7c 24 30 10	 cmp	 DWORD PTR $T178075[esp+204], 16 ; 00000010H
  000df	72 0d		 jb	 SHORT $LN42@Getcat@3
  000e1	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T178075[esp+184]
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000eb	83 c4 04	 add	 esp, 4
$LN42@Getcat@3:

; 116  : 		return (_X_NUMERIC);

  000ee	b8 04 00 00 00	 mov	 eax, 4

; 117  : 		}

  000f3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000fa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00101	59		 pop	 ecx
  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  0010b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T178073[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T178079[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat@3
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T178079[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T178075[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat@3:
  0002f	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  00030	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T178079[ebp]
  00036	83 e0 02	 and	 eax, 2
  00039	0f 84 0f 00 00
	00		 je	 $LN10@Getcat@3
  0003f	83 a5 5c ff ff
	ff fd		 and	 DWORD PTR $T178079[ebp], -3 ; fffffffdH
  00046	8d 4d 80	 lea	 ecx, DWORD PTR $T178074[ebp]
  00049	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN10@Getcat@3:
  0004e	c3		 ret	 0
__ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0004f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00053	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  00059	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  0005f	33 c8		 xor	 ecx, eax
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0006b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::numpunct<char>::_Getcat
PUBLIC	??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z	; CipherShed::FavoriteVolume::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z PROC	; CipherShed::FavoriteVolume::operator=, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR ___that$[esp+4]
  00006	6a ff		 push	 -1
  00008	6a 00		 push	 0
  0000a	57		 push	 edi
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00012	6a ff		 push	 -1
  00014	6a 00		 push	 0
  00016	8d 47 1c	 lea	 eax, DWORD PTR [edi+28]
  00019	50		 push	 eax
  0001a	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00022	6a ff		 push	 -1
  00024	6a 00		 push	 0
  00026	8d 4f 38	 lea	 ecx, DWORD PTR [edi+56]
  00029	51		 push	 ecx
  0002a	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	6a ff		 push	 -1
  00034	6a 00		 push	 0
  00036	8d 57 54	 lea	 edx, DWORD PTR [edi+84]
  00039	52		 push	 edx
  0003a	8d 4e 54	 lea	 ecx, DWORD PTR [esi+84]
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00042	0f b6 47 70	 movzx	 eax, BYTE PTR [edi+112]
  00046	88 46 70	 mov	 BYTE PTR [esi+112], al
  00049	0f b6 4f 71	 movzx	 ecx, BYTE PTR [edi+113]
  0004d	88 4e 71	 mov	 BYTE PTR [esi+113], cl
  00050	0f b6 57 72	 movzx	 edx, BYTE PTR [edi+114]
  00054	88 56 72	 mov	 BYTE PTR [esi+114], dl
  00057	0f b6 47 73	 movzx	 eax, BYTE PTR [edi+115]
  0005b	88 46 73	 mov	 BYTE PTR [esi+115], al
  0005e	0f b6 4f 74	 movzx	 ecx, BYTE PTR [edi+116]
  00062	88 4e 74	 mov	 BYTE PTR [esi+116], cl
  00065	0f b6 57 75	 movzx	 edx, BYTE PTR [edi+117]
  00069	88 56 75	 mov	 BYTE PTR [esi+117], dl
  0006c	0f b6 47 76	 movzx	 eax, BYTE PTR [edi+118]
  00070	88 46 76	 mov	 BYTE PTR [esi+118], al
  00073	0f b6 4f 77	 movzx	 ecx, BYTE PTR [edi+119]
  00077	5f		 pop	 edi
  00078	88 4e 77	 mov	 BYTE PTR [esi+119], cl
  0007b	8b c6		 mov	 eax, esi
  0007d	5e		 pop	 esi
  0007e	c2 04 00	 ret	 4
??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z ENDP	; CipherShed::FavoriteVolume::operator=
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z ; std::allocator<HostDevice>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z PROC ; std::allocator<HostDevice>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice

; 161  : 		}

  00009	c2 04 00	 ret	 4
?destroy@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z ENDP ; std::allocator<HostDevice>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@@Z ; std::allocator<CipherShed::FavoriteVolume>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@@Z PROC ; std::allocator<CipherShed::FavoriteVolume>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ

; 161  : 		}

  00009	c2 04 00	 ret	 4
?destroy@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@@Z ENDP ; std::allocator<CipherShed::FavoriteVolume>::destroy
_TEXT	ENDS
PUBLIC	??0HostDevice@@QAE@ABU0@@Z			; HostDevice::HostDevice
PUBLIC	??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7
__unwindtable$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T178646 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Vptr$178652 = 8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

  0002b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 128  : 
; 129  : 	_TRY_BEGIN

  0002e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_cop:

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

  00040	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00043	74 55		 je	 SHORT $LN4@Uninit_cop

; 131  : 		_Al.construct(_Dest, *_First);

  00045	89 75 08	 mov	 DWORD PTR __Vptr$178652[ebp], esi
  00048	89 75 e8	 mov	 DWORD PTR $T178646[ebp], esi
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004f	3b f3		 cmp	 esi, ebx
  00051	74 08		 je	 SHORT $LN18@Uninit_cop
  00053	57		 push	 edi
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN18@Uninit_cop:
  0005b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00061	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00064	89 75 10	 mov	 DWORD PTR __Dest$[ebp], esi
  00067	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  0006d	eb d1		 jmp	 SHORT $LL6@Uninit_cop
__catch$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00072	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00075	3b f7		 cmp	 esi, edi
  00077	74 18		 je	 SHORT $LN1@Uninit_cop
  00079	8d a4 24 00 00
	00 00		 npad	 7
$LL3@Uninit_cop:

; 134  : 		_Al.destroy(_Next);

  00080	8b ce		 mov	 ecx, esi
  00082	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00087	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0008d	3b f7		 cmp	 esi, edi
  0008f	75 ef		 jne	 SHORT $LL3@Uninit_cop
$LN1@Uninit_cop:

; 135  : 	_RERAISE;

  00091	33 db		 xor	 ebx, ebx
  00093	53		 push	 ebx
  00094	53		 push	 ebx
  00095	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_cop:

; 136  : 	_CATCH_END
; 137  : 	return (_Dest);

  0009a	8b c6		 mov	 eax, esi

; 138  : 	}

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
$LN121@Uninit_cop:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Vptr$178652[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T178646[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
PUBLIC	??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	53		 push	 ebx

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 1d		 je	 SHORT $LN8@Copy_opt@2
  0000e	57		 push	 edi
  0000f	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
$LL3@Copy_opt@2:

; 2472 : 		*_Dest = *_First;

  00013	56		 push	 esi
  00014	8b cf		 mov	 ecx, edi
  00016	e8 00 00 00 00	 call	 ??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z
  0001b	83 c6 78	 add	 esi, 120		; 00000078H
  0001e	83 c7 78	 add	 edi, 120		; 00000078H
  00021	3b f3		 cmp	 esi, ebx
  00023	75 ee		 jne	 SHORT $LL3@Copy_opt@2

; 2473 : 	return (_Dest);

  00025	8b c7		 mov	 eax, edi
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx

; 2474 : 	}

  0002a	c3		 ret	 0
$LN8@Copy_opt@2:

; 2473 : 	return (_Dest);

  0002b	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx

; 2474 : 	}

  00031	c3		 ret	 0
??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	?erase@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?erase@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
$T178691 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?erase@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase, COMDAT
; _this$ = ecx

; 786  : 		{	// erase element at _Where

  00000	83 ec 08	 sub	 esp, 8

; 787  : 
; 788  :  #if _HAS_ITERATOR_DEBUGGING
; 789  : 		if (_Where._Mycont != this || _Where._Ptr == _Myhead)
; 790  : 			_DEBUG_ERROR("list erase iterator outside range");
; 791  : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 792  : 		_Orphan_ptr(*this, _Pnode);
; 793  : 
; 794  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 795  : 		_Nodeptr _Pnode = (_Where++)._Mynode();

  00003	8b 44 24 10	 mov	 eax, DWORD PTR __Where$[esp+4]
  00007	56		 push	 esi
  00008	8b 74 24 18	 mov	 esi, DWORD PTR __Where$[esp+12]
  0000c	57		 push	 edi
  0000d	8b f9		 mov	 edi, ecx
  0000f	89 44 24 08	 mov	 DWORD PTR $T178691[esp+16], eax
  00013	85 c0		 test	 eax, eax
  00015	75 0d		 jne	 SHORT $LN98@erase@5
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0001c	8b 44 24 18	 mov	 eax, DWORD PTR __Where$[esp+12]
  00020	85 c0		 test	 eax, eax
  00022	74 04		 je	 SHORT $LN22@erase@5
$LN98@erase@5:
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	eb 02		 jmp	 SHORT $LN23@erase@5
$LN22@erase@5:
  00028	33 c0		 xor	 eax, eax
$LN23@erase@5:
  0002a	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Where$[esp+16]
  0002e	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00031	75 05		 jne	 SHORT $LN8@erase@5
  00033	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@erase@5:
  00038	8b 54 24 1c	 mov	 edx, DWORD PTR __Where$[esp+16]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	89 44 24 1c	 mov	 DWORD PTR __Where$[esp+16], eax

; 796  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 797  : 
; 798  : 		if (_Pnode != _Myhead)

  00042	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  00045	74 3f		 je	 SHORT $LN1@erase@5

; 799  : 			{	// not list head, safe to erase
; 800  : 			_Nextnode(_Prevnode(_Pnode)) = _Nextnode(_Pnode);

  00047	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0004a	8b 16		 mov	 edx, DWORD PTR [esi]
  0004c	89 11		 mov	 DWORD PTR [ecx], edx

; 801  : 			_Prevnode(_Nextnode(_Pnode)) = _Prevnode(_Pnode);

  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00053	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 802  : 			this->_Alnod.destroy(_Pnode);

  00056	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  0005a	72 0c		 jb	 SHORT $LN67@erase@5
  0005c	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00065	83 c4 04	 add	 esp, 4
$LN67@erase@5:
  00068	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH
  0006f	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 803  : 			this->_Alnod.deallocate(_Pnode, 1);

  00076	56		 push	 esi
  00077	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  0007b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00080	83 c4 04	 add	 esp, 4

; 804  : 			--_Mysize;

  00083	ff 4f 18	 dec	 DWORD PTR [edi+24]
$LN1@erase@5:

; 805  : 			}
; 806  : 		return (_Make_iter(_Where));

  00086	8b 17		 mov	 edx, DWORD PTR [edi]
  00088	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  0008c	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Where$[esp+16]
  00090	5f		 pop	 edi
  00091	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00094	89 10		 mov	 DWORD PTR [eax], edx
  00096	5e		 pop	 esi

; 807  : 		}

  00097	83 c4 08	 add	 esp, 8
  0009a	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	53		 push	 ebx

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __Last$[esp+4]
  0000a	3b de		 cmp	 ebx, esi
  0000c	74 1d		 je	 SHORT $LN7@Copy_backw
  0000e	57		 push	 edi
  0000f	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
$LL2@Copy_backw:

; 2676 : 		*--_Dest = *--_Last;

  00013	83 ee 78	 sub	 esi, 120		; 00000078H
  00016	83 ef 78	 sub	 edi, 120		; 00000078H
  00019	56		 push	 esi
  0001a	8b cf		 mov	 ecx, edi
  0001c	e8 00 00 00 00	 call	 ??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z
  00021	3b f3		 cmp	 esi, ebx
  00023	75 ee		 jne	 SHORT $LL2@Copy_backw

; 2677 : 	return (_Dest);

  00025	8b c7		 mov	 eax, edi
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx

; 2678 : 	}

  0002a	c3		 ret	 0
$LN7@Copy_backw:

; 2677 : 	return (_Dest);

  0002b	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx

; 2678 : 	}

  00031	c3		 ret	 0
??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ ; `string'
PUBLIC	__TI3?AVfailure@ios_base@std@@
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@	; `string'
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	__CTA3?AVfailure@ios_base@std@@
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA3?AVfailure@ios_base@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ DB 'ios_base::failbit se'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT __TI3?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI3?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?clear@ios_base@std@@QAEXH_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$2
__ehfuncinfo$?clear@ios_base@std@@QAEXH_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?clear@ios_base@std@@QAEXH_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T179127 = -148						; size = 40
$T179125 = -148						; size = 40
$T179128 = -108						; size = 28
$T179126 = -108						; size = 28
$T179129 = -80						; size = 40
$T179130 = -40						; size = 28
__$EHRec$ = -12						; size = 12
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 285  :         {	// set state, possibly reraise exception

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?clear@ios_base@std@@QAEXH_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 84 24 8c 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+152]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 286  :         _Mystate = (iostate)(_State & _Statmask);

  00029	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __State$[esp+148]
  00030	83 e0 17	 and	 eax, 23			; 00000017H
  00033	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 287  :         if ((_Mystate & _Except) == 0)

  00036	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00039	23 c8		 and	 ecx, eax
  0003b	0f 84 d7 00 00
	00		 je	 $LN1@clear@2

; 288  :             ;
; 289  :         else if (_Reraise)

  00041	80 bc 24 a0 00
	00 00 00	 cmp	 BYTE PTR __Reraise$[esp+148], 0
  00049	74 09		 je	 SHORT $LN6@clear@2

; 290  :             _RERAISE;

  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN6@clear@2:

; 291  :         else if (_Mystate & _Except & badbit)

  00054	f6 c1 04	 test	 cl, 4
  00057	74 3e		 je	 SHORT $LN4@clear@2

; 292  :             _THROW_NCEE(failure, "ios_base::badbit set");

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
  0005e	8d 4c 24 30	 lea	 ecx, DWORD PTR $T179126[esp+156]
  00062	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00067	8d 44 24 2c	 lea	 eax, DWORD PTR $T179126[esp+152]
  0006b	50		 push	 eax
  0006c	8d 4c 24 08	 lea	 ecx, DWORD PTR $T179125[esp+156]
  00070	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+164], 0
  0007b	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  00080	68 00 00 00 00	 push	 OFFSET __TI3?AVfailure@ios_base@std@@
  00085	8d 4c 24 08	 lea	 ecx, DWORD PTR $T179125[esp+156]
  00089	51		 push	 ecx
  0008a	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T179125[esp+160], OFFSET ??_7failure@ios_base@std@@6B@
  00092	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@clear@2:

; 293  :         else if (_Mystate & _Except & failbit)

  00097	f6 c1 02	 test	 cl, 2
  0009a	74 3e		 je	 SHORT $LN2@clear@2

; 294  :             _THROW_NCEE(failure, "ios_base::failbit set");

  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  000a1	8d 4c 24 30	 lea	 ecx, DWORD PTR $T179128[esp+156]
  000a5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000aa	8d 54 24 2c	 lea	 edx, DWORD PTR $T179128[esp+152]
  000ae	52		 push	 edx
  000af	8d 4c 24 08	 lea	 ecx, DWORD PTR $T179127[esp+156]
  000b3	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+164], 1
  000be	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  000c3	68 00 00 00 00	 push	 OFFSET __TI3?AVfailure@ios_base@std@@
  000c8	8d 44 24 08	 lea	 eax, DWORD PTR $T179127[esp+156]
  000cc	50		 push	 eax
  000cd	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T179127[esp+160], OFFSET ??_7failure@ios_base@std@@6B@
  000d5	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@clear@2:

; 295  :         else
; 296  :             _THROW_NCEE(failure, "ios_base::eofbit set");

  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  000df	8d 4c 24 74	 lea	 ecx, DWORD PTR $T179130[esp+156]
  000e3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e8	8d 4c 24 70	 lea	 ecx, DWORD PTR $T179130[esp+152]
  000ec	51		 push	 ecx
  000ed	8d 4c 24 4c	 lea	 ecx, DWORD PTR $T179129[esp+156]
  000f1	c7 84 24 98 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+164], 2
  000fc	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  00101	68 00 00 00 00	 push	 OFFSET __TI3?AVfailure@ios_base@std@@
  00106	8d 54 24 4c	 lea	 edx, DWORD PTR $T179129[esp+156]
  0010a	52		 push	 edx
  0010b	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR $T179129[esp+160], OFFSET ??_7failure@ios_base@std@@6B@
  00113	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@clear@2:

; 297  :         }

  00118	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+152]
  0011f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00126	59		 pop	 ecx
  00127	81 c4 94 00 00
	00		 add	 esp, 148		; 00000094H
  0012d	c2 08 00	 ret	 8
$LN24@clear@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$0:
  00000	8d 4d 94	 lea	 ecx, DWORD PTR $T179126[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$1:
  00008	8d 4d 94	 lea	 ecx, DWORD PTR $T179128[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR $T179130[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?clear@ios_base@std@@QAEXH_N@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 82 78 ff ff
	ff		 lea	 eax, DWORD PTR [edx-136]
  00022	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@ios_base@std@@QAEXH_N@Z
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	8b 7c 24 20	 mov	 edi, DWORD PTR ___that$[esp+24]
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00033	33 d2		 xor	 edx, edx
  00035	6a ff		 push	 -1
  00037	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00040	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00043	52		 push	 edx
  00044	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0004b	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  0004e	50		 push	 eax
  0004f	89 54 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], edx
  00053	88 51 04	 mov	 BYTE PTR [ecx+4], dl
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8b c6		 mov	 eax, esi
  0005d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
; Function compile flags: /Ogtpy
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
PUBLIC	?clear@ios_base@std@@QAEXH@Z			; std::ios_base::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@ios_base@std@@QAEXH@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
?clear@ios_base@std@@QAEXH@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 301  : 		clear(_State, false);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __State$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 302  : 		}

  0000c	c2 04 00	 ret	 4
?clear@ios_base@std@@QAEXH@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
PUBLIC	?_Init@ios_base@std@@IAEXXZ			; std::ios_base::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@ios_base@std@@IAEXXZ
_TEXT	SEGMENT
__Lock$179299 = -4					; size = 4
?_Init@ios_base@std@@IAEXXZ PROC			; std::ios_base::_Init, COMDAT
; _this$ = ecx

; 515  :         {	// initialize a new ios_base

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 516  :         _Ploc = 0;

  00002	33 ed		 xor	 ebp, ebp
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 517  :         _Stdstr = 0;
; 518  :         _Except = goodbit;
; 519  :         _Fmtfl = skipws | dec;
; 520  :         _Prec = 6;
; 521  :         _Wide = 0;
; 522  :         _Arr = 0;
; 523  :         _Calls = 0;
; 524  :         clear(goodbit);

  00008	55		 push	 ebp
  00009	55		 push	 ebp
  0000a	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0000d	89 6e 04	 mov	 DWORD PTR [esi+4], ebp
  00010	89 6e 0c	 mov	 DWORD PTR [esi+12], ebp
  00013	c7 46 10 01 02
	00 00		 mov	 DWORD PTR [esi+16], 513	; 00000201H
  0001a	c7 46 14 06 00
	00 00		 mov	 DWORD PTR [esi+20], 6
  00021	89 6e 18	 mov	 DWORD PTR [esi+24], ebp
  00024	89 6e 1c	 mov	 DWORD PTR [esi+28], ebp
  00027	89 6e 20	 mov	 DWORD PTR [esi+32], ebp
  0002a	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 525  :         _Ploc = _NEW_CRT locale;

  0002f	6a 04		 push	 4
  00031	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00036	8b f8		 mov	 edi, eax
  00038	83 c4 04	 add	 esp, 4
  0003b	3b fd		 cmp	 edi, ebp
  0003d	74 37		 je	 SHORT $LN3@Init@3
  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  00045	89 07		 mov	 DWORD PTR [edi], eax
  00047	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0004c	55		 push	 ebp
  0004d	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$179299[esp+24]
  00051	8b d8		 mov	 ebx, eax
  00053	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00058	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0005b	83 f8 ff	 cmp	 eax, -1
  0005e	73 04		 jae	 SHORT $LN9@Init@3
  00060	40		 inc	 eax
  00061	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN9@Init@3:
  00064	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$179299[esp+20]
  00068	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0006d	5b		 pop	 ebx
  0006e	89 7e 24	 mov	 DWORD PTR [esi+36], edi
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5d		 pop	 ebp

; 526  :         }

  00074	59		 pop	 ecx
  00075	c3		 ret	 0
$LN3@Init@3:
  00076	5f		 pop	 edi

; 525  :         _Ploc = _NEW_CRT locale;

  00077	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0007a	5e		 pop	 esi
  0007b	5d		 pop	 ebp

; 526  :         }

  0007c	59		 pop	 ecx
  0007d	c3		 ret	 0
?_Init@ios_base@std@@IAEXXZ ENDP			; std::ios_base::_Init
_TEXT	ENDS
PUBLIC	??_C@_0CC@LCDEFKJP@DAMAGE_TO_HIDDEN_VOLUME_PREVENTE@ ; `string'
PUBLIC	??_C@_13HGPDMIBE@?$AA?$DP?$AA?$AA@		; `string'
PUBLIC	??_C@_0BK@GNLJADMH@OUTER_VOL_WRITE_PREVENTED?$AA@ ; `string'
PUBLIC	??_C@_17HIGNGECK@?$AA_?$AA_?$AA_?$AA?$AA@	; `string'
PUBLIC	??_C@_0CF@LEGOPDKD@SYSTEM_PARTITION_PARTIALLY_ENCRY@ ; `string'
PUBLIC	??_C@_0BM@FCEEKADB@SYSTEM_PARTITION_DECRYPTING?$AA@ ; `string'
PUBLIC	??_C@_0BM@GLCKIEAG@SYSTEM_PARTITION_ENCRYPTING?$AA@ ; `string'
PUBLIC	??_C@_0CB@NENDIPBG@SYSTEM_DRIVE_PARTIALLY_ENCRYPTED@ ; `string'
PUBLIC	??_C@_0BI@GFAMFOII@SYSTEM_DRIVE_DECRYPTING?$AA@	; `string'
PUBLIC	??_C@_0BI@FMGCHKLP@SYSTEM_DRIVE_ENCRYPTING?$AA@	; `string'
PUBLIC	??_C@_0N@LABMODCO@DRIVELETTERS?$AA@		; `string'
PUBLIC	??_C@_02EEDMFDPC@Z?3?$AA@			; `string'
PUBLIC	??_C@_02EGHKONKL@Y?3?$AA@			; `string'
PUBLIC	??_C@_02EHLIIHJM@X?3?$AA@			; `string'
PUBLIC	??_C@_02EMOEMAKB@W?3?$AA@			; `string'
PUBLIC	??_C@_02ENCGKKJG@V?3?$AA@			; `string'
PUBLIC	??_C@_02EPGABEMP@U?3?$AA@			; `string'
PUBLIC	??_C@_02EOKCHOPI@T?3?$AA@			; `string'
PUBLIC	??_C@_02ELONGIHN@S?3?$AA@			; `string'
PUBLIC	??_C@_02EKCPACEK@R?3?$AA@			; `string'
PUBLIC	??_C@_02EIGJLMBD@Q?3?$AA@			; `string'
PUBLIC	??_C@_02EJKLNGCE@P?3?$AA@			; `string'
PUBLIC	??_C@_02FONBDCGJ@O?3?$AA@			; `string'
PUBLIC	??_C@_02FPBDFIFO@N?3?$AA@			; `string'
PUBLIC	??_C@_02FNFFOGAH@M?3?$AA@			; `string'
PUBLIC	??_C@_02FMJHIMDA@L?3?$AA@			; `string'
PUBLIC	??_C@_02FJNIJKLF@K?3?$AA@			; `string'
PUBLIC	??_C@_02FIBKPAIC@J?3?$AA@			; `string'
PUBLIC	??_C@_02FKFMEONL@I?3?$AA@			; `string'
PUBLIC	??_C@_02FLJOCEOM@H?3?$AA@			; `string'
PUBLIC	??_C@_02FAMCGDNB@G?3?$AA@			; `string'
PUBLIC	??_C@_02FBAAAJOG@F?3?$AA@			; `string'
PUBLIC	??_C@_02FDEGLHLP@E?3?$AA@			; `string'
PUBLIC	??_C@_02FCIENNII@D?3?$AA@			; `string'
PUBLIC	??_C@_02FHMLMLAN@C?3?$AA@			; `string'
PUBLIC	??_C@_02FGAJKBDK@B?3?$AA@			; `string'
PUBLIC	??_C@_02FEEPBPGD@A?3?$AA@			; `string'
PUBLIC	_hTree$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_LoadDriveLetters
EXTRN	_SetListScrollHPos:PROC
EXTRN	?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z:PROC ; FitPathInGfxWidth
EXTRN	_GetTextGfxWidth:PROC
EXTRN	_hUserFont:DWORD
EXTRN	?GetFavoriteVolumeLabel@CipherShed@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z:PROC ; CipherShed::GetFavoriteVolumeLabel
EXTRN	_ToSBCS:PROC
EXTRN	_GetSystemDriveLetter:PROC
EXTRN	__imp__GetLogicalDrives@0:PROC
EXTRN	_AbortProcessSilent:PROC
EXTRN	_memcpy:PROC
_BSS	SEGMENT
_LastKnownLogicalDrives DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0CC@LCDEFKJP@DAMAGE_TO_HIDDEN_VOLUME_PREVENTE@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0CC@LCDEFKJP@DAMAGE_TO_HIDDEN_VOLUME_PREVENTE@ DB 'DAMAGE_TO_HIDDEN'
	DB	'_VOLUME_PREVENTED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_13HGPDMIBE@?$AA?$DP?$AA?$AA@
CONST	SEGMENT
??_C@_13HGPDMIBE@?$AA?$DP?$AA?$AA@ DB '?', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GNLJADMH@OUTER_VOL_WRITE_PREVENTED?$AA@
CONST	SEGMENT
??_C@_0BK@GNLJADMH@OUTER_VOL_WRITE_PREVENTED?$AA@ DB 'OUTER_VOL_WRITE_PRE'
	DB	'VENTED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_17HIGNGECK@?$AA_?$AA_?$AA_?$AA?$AA@
CONST	SEGMENT
??_C@_17HIGNGECK@?$AA_?$AA_?$AA_?$AA?$AA@ DB '_', 00H, '_', 00H, '_', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LEGOPDKD@SYSTEM_PARTITION_PARTIALLY_ENCRY@
CONST	SEGMENT
??_C@_0CF@LEGOPDKD@SYSTEM_PARTITION_PARTIALLY_ENCRY@ DB 'SYSTEM_PARTITION'
	DB	'_PARTIALLY_ENCRYPTED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FCEEKADB@SYSTEM_PARTITION_DECRYPTING?$AA@
CONST	SEGMENT
??_C@_0BM@FCEEKADB@SYSTEM_PARTITION_DECRYPTING?$AA@ DB 'SYSTEM_PARTITION_'
	DB	'DECRYPTING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GLCKIEAG@SYSTEM_PARTITION_ENCRYPTING?$AA@
CONST	SEGMENT
??_C@_0BM@GLCKIEAG@SYSTEM_PARTITION_ENCRYPTING?$AA@ DB 'SYSTEM_PARTITION_'
	DB	'ENCRYPTING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NENDIPBG@SYSTEM_DRIVE_PARTIALLY_ENCRYPTED@
CONST	SEGMENT
??_C@_0CB@NENDIPBG@SYSTEM_DRIVE_PARTIALLY_ENCRYPTED@ DB 'SYSTEM_DRIVE_PAR'
	DB	'TIALLY_ENCRYPTED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GFAMFOII@SYSTEM_DRIVE_DECRYPTING?$AA@
CONST	SEGMENT
??_C@_0BI@GFAMFOII@SYSTEM_DRIVE_DECRYPTING?$AA@ DB 'SYSTEM_DRIVE_DECRYPTI'
	DB	'NG', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FMGCHKLP@SYSTEM_DRIVE_ENCRYPTING?$AA@
CONST	SEGMENT
??_C@_0BI@FMGCHKLP@SYSTEM_DRIVE_ENCRYPTING?$AA@ DB 'SYSTEM_DRIVE_ENCRYPTI'
	DB	'NG', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LABMODCO@DRIVELETTERS?$AA@
CONST	SEGMENT
??_C@_0N@LABMODCO@DRIVELETTERS?$AA@ DB 'DRIVELETTERS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02EEDMFDPC@Z?3?$AA@
CONST	SEGMENT
??_C@_02EEDMFDPC@Z?3?$AA@ DB 'Z:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGHKONKL@Y?3?$AA@
CONST	SEGMENT
??_C@_02EGHKONKL@Y?3?$AA@ DB 'Y:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EHLIIHJM@X?3?$AA@
CONST	SEGMENT
??_C@_02EHLIIHJM@X?3?$AA@ DB 'X:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EMOEMAKB@W?3?$AA@
CONST	SEGMENT
??_C@_02EMOEMAKB@W?3?$AA@ DB 'W:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02ENCGKKJG@V?3?$AA@
CONST	SEGMENT
??_C@_02ENCGKKJG@V?3?$AA@ DB 'V:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EPGABEMP@U?3?$AA@
CONST	SEGMENT
??_C@_02EPGABEMP@U?3?$AA@ DB 'U:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EOKCHOPI@T?3?$AA@
CONST	SEGMENT
??_C@_02EOKCHOPI@T?3?$AA@ DB 'T:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02ELONGIHN@S?3?$AA@
CONST	SEGMENT
??_C@_02ELONGIHN@S?3?$AA@ DB 'S:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EKCPACEK@R?3?$AA@
CONST	SEGMENT
??_C@_02EKCPACEK@R?3?$AA@ DB 'R:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EIGJLMBD@Q?3?$AA@
CONST	SEGMENT
??_C@_02EIGJLMBD@Q?3?$AA@ DB 'Q:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EJKLNGCE@P?3?$AA@
CONST	SEGMENT
??_C@_02EJKLNGCE@P?3?$AA@ DB 'P:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FONBDCGJ@O?3?$AA@
CONST	SEGMENT
??_C@_02FONBDCGJ@O?3?$AA@ DB 'O:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FPBDFIFO@N?3?$AA@
CONST	SEGMENT
??_C@_02FPBDFIFO@N?3?$AA@ DB 'N:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FNFFOGAH@M?3?$AA@
CONST	SEGMENT
??_C@_02FNFFOGAH@M?3?$AA@ DB 'M:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FMJHIMDA@L?3?$AA@
CONST	SEGMENT
??_C@_02FMJHIMDA@L?3?$AA@ DB 'L:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FJNIJKLF@K?3?$AA@
CONST	SEGMENT
??_C@_02FJNIJKLF@K?3?$AA@ DB 'K:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FIBKPAIC@J?3?$AA@
CONST	SEGMENT
??_C@_02FIBKPAIC@J?3?$AA@ DB 'J:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FKFMEONL@I?3?$AA@
CONST	SEGMENT
??_C@_02FKFMEONL@I?3?$AA@ DB 'I:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FLJOCEOM@H?3?$AA@
CONST	SEGMENT
??_C@_02FLJOCEOM@H?3?$AA@ DB 'H:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FAMCGDNB@G?3?$AA@
CONST	SEGMENT
??_C@_02FAMCGDNB@G?3?$AA@ DB 'G:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FBAAAJOG@F?3?$AA@
CONST	SEGMENT
??_C@_02FBAAAJOG@F?3?$AA@ DB 'F:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FDEGLHLP@E?3?$AA@
CONST	SEGMENT
??_C@_02FDEGLHLP@E?3?$AA@ DB 'E:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FCIENNII@D?3?$AA@
CONST	SEGMENT
??_C@_02FCIENNII@D?3?$AA@ DB 'D:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FHMLMLAN@C?3?$AA@
CONST	SEGMENT
??_C@_02FHMLMLAN@C?3?$AA@ DB 'C:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FGAJKBDK@B?3?$AA@
CONST	SEGMENT
??_C@_02FGAJKBDK@B?3?$AA@ DB 'B:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FEEPBPGD@A?3?$AA@
CONST	SEGMENT
??_C@_02FEEPBPGD@A?3?$AA@ DB 'A:', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_LoadDriveLetters$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_LoadDriveLetters$0
__tryblocktable$_LoadDriveLetters DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_LoadDriveLetters$6
__ehfuncinfo$_LoadDriveLetters DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$_LoadDriveLetters
	DD	01H
	DD	FLAT:__tryblocktable$_LoadDriveLetters
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$_LoadDriveLetters DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_LoadDriveLetters$2
	DD	02H
	DD	FLAT:__unwindfunclet$_LoadDriveLetters$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_LoadDriveLetters$3
	DD	04H
	DD	FLAT:__unwindfunclet$_LoadDriveLetters$4
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
xdata$x	ENDS
;	COMDAT _LoadDriveLetters
_TEXT	SEGMENT
_driver$ = -14452					; size = 13940
$T179305 = -512						; size = 94
_tmp$136143 = -472					; size = 52
_tmp$136091 = -472					; size = 52
$T179316 = -416						; size = 28
_dwResult$ = -388					; size = 4
$T179315 = -384						; size = 28
_szDriveLetters$ = -356					; size = 104
$T179314 = -252						; size = 28
tv1544 = -224						; size = 8
tv1527 = -216						; size = 8
tv1547 = -208						; size = 8
tv1569 = -200						; size = 8
tv1508 = -192						; size = 8
tv1586 = -184						; size = 8
tv1583 = -176						; size = 8
tv1459 = -168						; size = 8
tv1505 = -160						; size = 8
tv1566 = -152						; size = 8
tv1530 = -144						; size = 8
_lastTopMostVisibleItem$ = -136				; size = 4
_dwUsedDrives$ = -132					; size = 4
_bWholeSysDriveEncryption$ = -128			; size = 4
tv1130 = -124						; size = 8
tv1123 = -124						; size = 8
tv1108 = -124						; size = 8
_listItem$ = -116					; size = 52
tv1687 = -64						; size = 4
_bSysEnc$ = -60						; size = 4
tv1456 = -56						; size = 8
tv1004 = -56						; size = 8
tv997 = -56						; size = 8
tv992 = -56						; size = 8
tv1689 = -48						; size = 4
tv1548 = -44						; size = 4
_bSysEncPartition$136140 = -40				; size = 4
_item$ = -36						; size = 4
tv1732 = -32						; size = 4
_sysDriveLetter$ = -25					; size = 1
tv1739 = -24						; size = 8
tv1736 = -24						; size = 8
tv1721 = -24						; size = 8
tv1718 = -24						; size = 8
tv1701 = -24						; size = 8
tv1698 = -24						; size = 8
tv1682 = -24						; size = 8
tv1679 = -24						; size = 8
tv1660 = -24						; size = 8
tv1657 = -24						; size = 8
tv1643 = -24						; size = 8
tv1640 = -24						; size = 8
tv1116 = -20						; size = 4
_hTree$GSCopy$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_propSysEnc$ = 0					; size = 596
_label$136194 = 596					; size = 28
_szTmp$136227 = 624					; size = 8192
_szTmp$136153 = 8816					; size = 1024
_szTmp$136099 = 9840					; size = 1024
_szTmpW$136100 = 10864					; size = 2048
_szTmpW$136154 = 12912					; size = 2048
__$ArrayPad$ = 14960					; size = 4
_hTree$ = 14972						; size = 4
_drive$ = 14976						; size = 4
_LoadDriveLetters PROC					; COMDAT

; 982  : {

  00000	55		 push	 ebp
  00001	8d ac 24 8c c5
	ff ff		 lea	 ebp, DWORD PTR [esp-14964]
  00008	b8 74 3a 00 00	 mov	 eax, 14964		; 00003a74H
  0000d	e8 00 00 00 00	 call	 __chkstk
  00012	6a ff		 push	 -1
  00014	68 00 00 00 00	 push	 __ehhandler$_LoadDriveLetters
  00019	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	b8 64 38 00 00	 mov	 eax, 14436		; 00003864H
  00026	e8 00 00 00 00	 call	 __chkstk
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 85 70 3a 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	53		 push	 ebx
  00039	56		 push	 esi
  0003a	57		 push	 edi
  0003b	50		 push	 eax
  0003c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00045	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00048	8b 9d 7c 3a 00
	00		 mov	 ebx, DWORD PTR _hTree$[ebp]

; 983  : 	// Remember the top-most visible item 
; 984  : 	int lastTopMostVisibleItem = ListView_GetTopIndex (hTree);

  0004e	33 f6		 xor	 esi, esi
  00050	56		 push	 esi
  00051	56		 push	 esi
  00052	68 27 10 00 00	 push	 4135			; 00001027H
  00057	53		 push	 ebx
  00058	89 5d ec	 mov	 DWORD PTR _hTree$GSCopy$[ebp], ebx
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 985  : 
; 986  : 	char *szDriveLetters[]=
; 987  : 	{"A:", "B:", "C:", "D:",
; 988  : 	 "E:", "F:", "G:", "H:", "I:", "J:", "K:",
; 989  : 	 "L:", "M:", "N:", "O:", "P:", "Q:", "R:",
; 990  : 	 "S:", "T:", "U:", "V:", "W:", "X:", "Y:",
; 991  : 	 "Z:"};
; 992  : 
; 993  : 	DWORD dwResult;
; 994  : 	BOOL bResult;	
; 995  : 	DWORD dwUsedDrives;
; 996  : 	MOUNT_LIST_STRUCT driver;
; 997  : 	VOLUME_PROPERTIES_STRUCT propSysEnc;
; 998  : 	char sysDriveLetter = 0;
; 999  : 
; 1000 : 	BOOL bSysEnc = FALSE;
; 1001 : 	BOOL bWholeSysDriveEncryption = FALSE;
; 1002 : 
; 1003 : 	LVITEM listItem;
; 1004 : 	int item = 0;
; 1005 : 	char i;
; 1006 : 
; 1007 : 	try
; 1008 : 	{
; 1009 : 		BootEncStatus = BootEncObj->GetStatus();

  00061	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00067	89 85 78 ff ff
	ff		 mov	 DWORD PTR _lastTopMostVisibleItem$[ebp], eax
  0006d	8d 85 00 fe ff
	ff		 lea	 eax, DWORD PTR $T179305[ebp]
  00073	50		 push	 eax
  00074	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp], OFFSET ??_C@_02FEEPBPGD@A?3?$AA@
  0007e	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+4], OFFSET ??_C@_02FGAJKBDK@B?3?$AA@
  00088	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+8], OFFSET ??_C@_02FHMLMLAN@C?3?$AA@
  00092	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+12], OFFSET ??_C@_02FCIENNII@D?3?$AA@
  0009c	c7 85 ac fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+16], OFFSET ??_C@_02FDEGLHLP@E?3?$AA@
  000a6	c7 85 b0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+20], OFFSET ??_C@_02FBAAAJOG@F?3?$AA@
  000b0	c7 85 b4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+24], OFFSET ??_C@_02FAMCGDNB@G?3?$AA@
  000ba	c7 85 b8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+28], OFFSET ??_C@_02FLJOCEOM@H?3?$AA@
  000c4	c7 85 bc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+32], OFFSET ??_C@_02FKFMEONL@I?3?$AA@
  000ce	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+36], OFFSET ??_C@_02FIBKPAIC@J?3?$AA@
  000d8	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+40], OFFSET ??_C@_02FJNIJKLF@K?3?$AA@
  000e2	c7 85 c8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+44], OFFSET ??_C@_02FMJHIMDA@L?3?$AA@
  000ec	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+48], OFFSET ??_C@_02FNFFOGAH@M?3?$AA@
  000f6	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+52], OFFSET ??_C@_02FPBDFIFO@N?3?$AA@
  00100	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+56], OFFSET ??_C@_02FONBDCGJ@O?3?$AA@
  0010a	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+60], OFFSET ??_C@_02EJKLNGCE@P?3?$AA@
  00114	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+64], OFFSET ??_C@_02EIGJLMBD@Q?3?$AA@
  0011e	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+68], OFFSET ??_C@_02EKCPACEK@R?3?$AA@
  00128	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+72], OFFSET ??_C@_02ELONGIHN@S?3?$AA@
  00132	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+76], OFFSET ??_C@_02EOKCHOPI@T?3?$AA@
  0013c	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+80], OFFSET ??_C@_02EPGABEMP@U?3?$AA@
  00146	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+84], OFFSET ??_C@_02ENCGKKJG@V?3?$AA@
  00150	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+88], OFFSET ??_C@_02EMOEMAKB@W?3?$AA@
  0015a	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+92], OFFSET ??_C@_02EHLIIHJM@X?3?$AA@
  00164	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+96], OFFSET ??_C@_02EGHKONKL@Y?3?$AA@
  0016e	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDriveLetters$[ebp+100], OFFSET ??_C@_02EEDMFDPC@Z?3?$AA@
  00178	c6 45 e7 00	 mov	 BYTE PTR _sysDriveLetter$[ebp], 0
  0017c	89 75 80	 mov	 DWORD PTR _bWholeSysDriveEncryption$[ebp], esi
  0017f	89 75 dc	 mov	 DWORD PTR _item$[ebp], esi
  00182	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  00185	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0018a	8b f0		 mov	 esi, eax
  0018c	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00191	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00196	f3 a5		 rep movsd
  00198	66 a5		 movsw

; 1010 : 		if (bSysEnc = BootEncStatus.DriveMounted)

  0019a	a1 06 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6
  0019f	89 45 c4	 mov	 DWORD PTR _bSysEnc$[ebp], eax
  001a2	85 c0		 test	 eax, eax
  001a4	74 0f		 je	 SHORT $LN54@LoadDriveL

; 1011 : 		{
; 1012 : 			BootEncObj->GetVolumeProperties (&propSysEnc);

  001a6	8d 4d 00	 lea	 ecx, DWORD PTR _propSysEnc$[ebp]
  001a9	51		 push	 ecx
  001aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  001b0	e8 00 00 00 00	 call	 ?GetVolumeProperties@BootEncryption@CipherShed@@QAEXPAUVOLUME_PROPERTIES_STRUCT@@@Z ; CipherShed::BootEncryption::GetVolumeProperties
$LN54@LoadDriveL:
  001b5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001bc	eb 17		 jmp	 SHORT $LN294@LoadDriveL
__catch$_LoadDriveLetters$0:

; 1013 : 		}
; 1014 : 	}
; 1015 : 	catch (...)
; 1016 : 	{
; 1017 : 		bSysEnc = FALSE;

  001be	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _bSysEnc$[ebp], 0

; 1018 : 	}

  001c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001cc	b8 00 00 00 00	 mov	 eax, $LN283@LoadDriveL
  001d1	c3		 ret	 0
$LN283@LoadDriveL:
  001d2	8b 5d ec	 mov	 ebx, DWORD PTR _hTree$GSCopy$[ebp]
$LN294@LoadDriveL:

; 1019 : 
; 1020 : 	ZeroMemory (&driver, sizeof (driver));

  001d5	68 74 36 00 00	 push	 13940			; 00003674H
  001da	33 ff		 xor	 edi, edi
  001dc	8d 95 8c c7 ff
	ff		 lea	 edx, DWORD PTR _driver$[ebp]
  001e2	57		 push	 edi
  001e3	52		 push	 edx
  001e4	e8 00 00 00 00	 call	 _memset
  001e9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1021 : 	bResult = DeviceIoControl (hDriver, TC_IOCTL_GET_MOUNTED_VOLUMES, &driver,
; 1022 : 		sizeof (driver), &driver, sizeof (driver), &dwResult,
; 1023 : 		NULL);

  001ec	57		 push	 edi
  001ed	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _dwResult$[ebp]
  001f3	50		 push	 eax
  001f4	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  001f9	68 74 36 00 00	 push	 13940			; 00003674H
  001fe	8d 8d 8c c7 ff
	ff		 lea	 ecx, DWORD PTR _driver$[ebp]
  00204	51		 push	 ecx
  00205	68 74 36 00 00	 push	 13940			; 00003674H
  0020a	8b d1		 mov	 edx, ecx
  0020c	52		 push	 edx
  0020d	68 18 20 22 00	 push	 2236440			; 00222018H
  00212	50		 push	 eax
  00213	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 1024 : 	memcpy (&LastKnownMountList, &driver, sizeof (driver));

  00219	68 74 36 00 00	 push	 13940			; 00003674H
  0021e	8d 8d 8c c7 ff
	ff		 lea	 ecx, DWORD PTR _driver$[ebp]
  00224	51		 push	 ecx
  00225	68 00 00 00 00	 push	 OFFSET _LastKnownMountList
  0022a	8b f0		 mov	 esi, eax
  0022c	e8 00 00 00 00	 call	 _memcpy
  00231	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1025 : 
; 1026 : 	if (bResult == FALSE)

  00234	3b f7		 cmp	 esi, edi
  00236	75 20		 jne	 SHORT $LN53@LoadDriveL

; 1027 : 	{
; 1028 : 		KillTimer (MainDlg, TIMER_ID_MAIN);

  00238	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0023e	68 ff 00 00 00	 push	 255			; 000000ffH
  00243	52		 push	 edx
  00244	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 1029 : 		handleWin32Error (hTree);

  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _handleWin32Error
  00250	83 c4 04	 add	 esp, 4

; 1030 : 		AbortProcessSilent();

  00253	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN53@LoadDriveL:

; 1031 : 	}
; 1032 : 
; 1033 : 	LastKnownLogicalDrives = dwUsedDrives = GetLogicalDrives ();

  00258	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLogicalDrives@0
  0025e	89 85 7c ff ff
	ff		 mov	 DWORD PTR _dwUsedDrives$[ebp], eax
  00264	a3 00 00 00 00	 mov	 DWORD PTR _LastKnownLogicalDrives, eax

; 1034 : 	if (dwUsedDrives == 0)

  00269	3b c7		 cmp	 eax, edi
  0026b	75 0d		 jne	 SHORT $LN52@LoadDriveL

; 1035 : 			Warning ("DRIVELETTERS");

  0026d	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LABMODCO@DRIVELETTERS?$AA@
  00272	e8 00 00 00 00	 call	 _Warning
  00277	83 c4 04	 add	 esp, 4
$LN52@LoadDriveL:

; 1036 : 
; 1037 : 	if(drive == 0)

  0027a	39 bd 80 3a 00
	00		 cmp	 DWORD PTR _drive$[ebp], edi
  00280	75 0e		 jne	 SHORT $LN51@LoadDriveL

; 1038 : 		ListView_DeleteAllItems(hTree);

  00282	57		 push	 edi
  00283	57		 push	 edi
  00284	68 09 10 00 00	 push	 4105			; 00001009H
  00289	53		 push	 ebx
  0028a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN51@LoadDriveL:

; 1039 : 
; 1040 : 	if (bSysEnc)

  00290	39 7d c4	 cmp	 DWORD PTR _bSysEnc$[ebp], edi
  00293	0f 84 38 03 00
	00		 je	 $LN49@LoadDriveL

; 1041 : 	{
; 1042 : 		bWholeSysDriveEncryption = WholeSysDriveEncryption (TRUE);

  00299	6a 01		 push	 1
  0029b	e8 00 00 00 00	 call	 _WholeSysDriveEncryption
  002a0	8b f0		 mov	 esi, eax
  002a2	83 c4 04	 add	 esp, 4
  002a5	89 75 80	 mov	 DWORD PTR _bWholeSysDriveEncryption$[ebp], esi

; 1043 : 
; 1044 : 		sysDriveLetter = GetSystemDriveLetter ();

  002a8	e8 00 00 00 00	 call	 _GetSystemDriveLetter
  002ad	88 45 e7	 mov	 BYTE PTR _sysDriveLetter$[ebp], al

; 1045 : 	}
; 1046 : 
; 1047 : 	/* System drive */
; 1048 : 
; 1049 : 	if (bWholeSysDriveEncryption)

  002b0	3b f7		 cmp	 esi, edi
  002b2	0f 84 19 03 00
	00		 je	 $LN49@LoadDriveL

; 1050 : 	{
; 1051 : 		int curDrive = 0;
; 1052 : 
; 1053 : 		if (drive > 0)

  002b8	8b b5 80 3a 00
	00		 mov	 esi, DWORD PTR _drive$[ebp]
  002be	3b f7		 cmp	 esi, edi
  002c0	7e 36		 jle	 SHORT $LN47@LoadDriveL

; 1054 : 		{
; 1055 : 			LVITEM tmp;
; 1056 : 			memset(&tmp, 0, sizeof(LVITEM));

  002c2	6a 34		 push	 52			; 00000034H
  002c4	8d 85 28 fe ff
	ff		 lea	 eax, DWORD PTR _tmp$136091[ebp]
  002ca	57		 push	 edi
  002cb	50		 push	 eax
  002cc	e8 00 00 00 00	 call	 _memset
  002d1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1057 : 			tmp.mask = LVIF_PARAM;
; 1058 : 			tmp.iItem = item;
; 1059 : 			if (ListView_GetItem (hTree, &tmp))

  002d4	8d 8d 28 fe ff
	ff		 lea	 ecx, DWORD PTR _tmp$136091[ebp]
  002da	51		 push	 ecx
  002db	57		 push	 edi
  002dc	68 05 10 00 00	 push	 4101			; 00001005H
  002e1	53		 push	 ebx
  002e2	c7 85 28 fe ff
	ff 04 00 00 00	 mov	 DWORD PTR _tmp$136091[ebp], 4
  002ec	89 bd 2c fe ff
	ff		 mov	 DWORD PTR _tmp$136091[ebp+4], edi
  002f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN47@LoadDriveL:

; 1060 : 				curDrive = HIWORD(tmp.lParam);
; 1061 : 		}
; 1062 : 
; 1063 : 		{
; 1064 : 			char szTmp[1024];
; 1065 : 			wchar_t szTmpW[1024];
; 1066 : 
; 1067 : 			memset(&listItem, 0, sizeof(listItem));

  002f8	6a 34		 push	 52			; 00000034H
  002fa	8d 55 8c	 lea	 edx, DWORD PTR _listItem$[ebp]
  002fd	57		 push	 edi
  002fe	52		 push	 edx
  002ff	e8 00 00 00 00	 call	 _memset
  00304	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1068 : 
; 1069 : 			listItem.mask = LVIF_TEXT | LVIF_IMAGE | LVIF_PARAM;
; 1070 : 			listItem.iImage = 2;
; 1071 : 			listItem.iItem = item++;  
; 1072 : 
; 1073 : 			listItem.pszText = szTmp;

  00307	8d 85 70 26 00
	00		 lea	 eax, DWORD PTR _szTmp$136099[ebp]

; 1074 : 			strcpy (szTmp, " ");

  0030d	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00312	c7 45 8c 07 00
	00 00		 mov	 DWORD PTR _listItem$[ebp], 7
  00319	c7 45 a8 02 00
	00 00		 mov	 DWORD PTR _listItem$[ebp+28], 2
  00320	89 7d 90	 mov	 DWORD PTR _listItem$[ebp+4], edi
  00323	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _item$[ebp], 1
  0032a	89 45 a0	 mov	 DWORD PTR _listItem$[ebp+20], eax
  0032d	66 89 8d 70 26
	00 00		 mov	 WORD PTR _szTmp$136099[ebp], cx

; 1075 : 
; 1076 : 			listItem.lParam = MAKELONG (TC_MLIST_ITEM_SYS_DRIVE, ENC_SYSDRIVE_PSEUDO_DRIVE_LETTER);	

  00334	c7 45 ac 03 00
	40 00		 mov	 DWORD PTR _listItem$[ebp+32], 4194307 ; 00400003H

; 1077 : 
; 1078 : 			if(drive == 0) 

  0033b	3b f7		 cmp	 esi, edi
  0033d	75 0c		 jne	 SHORT $LN46@LoadDriveL

; 1079 : 				ListView_InsertItem (hTree, &listItem);

  0033f	8d 55 8c	 lea	 edx, DWORD PTR _listItem$[ebp]
  00342	52		 push	 edx
  00343	57		 push	 edi
  00344	68 07 10 00 00	 push	 4103			; 00001007H

; 1080 : 			else

  00349	eb 0a		 jmp	 SHORT $LN295@LoadDriveL
$LN46@LoadDriveL:

; 1081 : 				ListView_SetItem (hTree, &listItem);

  0034b	8d 45 8c	 lea	 eax, DWORD PTR _listItem$[ebp]
  0034e	50		 push	 eax
  0034f	57		 push	 edi
  00350	68 06 10 00 00	 push	 4102			; 00001006H
$LN295@LoadDriveL:
  00355	53		 push	 ebx
  00356	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1082 : 
; 1083 : 			listItem.mask=LVIF_TEXT;   
; 1084 : 
; 1085 : 			// Fully encrypted
; 1086 : 			if (SysDriveOrPartitionFullyEncrypted (TRUE))

  0035c	6a 01		 push	 1
  0035e	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR _listItem$[ebp], 1
  00365	e8 00 00 00 00	 call	 ?SysDriveOrPartitionFullyEncrypted@@YAHH@Z ; SysDriveOrPartitionFullyEncrypted
  0036a	83 c4 04	 add	 esp, 4
  0036d	85 c0		 test	 eax, eax
  0036f	74 29		 je	 SHORT $LN44@LoadDriveL

; 1087 : 			{
; 1088 : 				wcscpy (szTmpW, GetString ("SYSTEM_DRIVE"));

  00371	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JCIDDNEG@SYSTEM_DRIVE?$AA@
  00376	e8 00 00 00 00	 call	 _GetString
  0037b	83 c4 04	 add	 esp, 4
  0037e	8d 95 70 2a 00
	00		 lea	 edx, DWORD PTR _szTmpW$136100[ebp]
$LL58@LoadDriveL:
  00384	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00387	66 89 0a	 mov	 WORD PTR [edx], cx
  0038a	83 c0 02	 add	 eax, 2
  0038d	83 c2 02	 add	 edx, 2
  00390	66 3b cf	 cmp	 cx, di
  00393	75 ef		 jne	 SHORT $LL58@LoadDriveL

; 1089 : 			}
; 1090 : 			else

  00395	e9 9f 01 00 00	 jmp	 $LN39@LoadDriveL
$LN44@LoadDriveL:

; 1099 : 					{
; 1100 : 						_snwprintf (szTmpW, 
; 1101 : 							sizeof szTmpW/2,
; 1102 : 							GetString ("SYSTEM_DRIVE_ENCRYPTING"),
; 1103 : 							(double) GetSysEncDeviceEncryptedPartSize (TRUE) / (double) GetSysEncDeviceSize (TRUE) * 100.0);

  0039a	6a 01		 push	 1
  0039c	39 3d 3e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, edi
  003a2	0f 84 0e 01 00
	00		 je	 $LN42@LoadDriveL

; 1091 : 			{
; 1092 : 				// Partially encrypted
; 1093 : 
; 1094 : 				if (BootEncStatus.SetupInProgress)
; 1095 : 				{
; 1096 : 					// Currently encrypting/decrypting
; 1097 : 
; 1098 : 					if (BootEncStatus.SetupMode != SetupDecryption)

  003a8	83 3d 42 00 00
	00 02		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+66, 2
  003af	0f 84 80 00 00
	00		 je	 $LN41@LoadDriveL

; 1099 : 					{
; 1100 : 						_snwprintf (szTmpW, 
; 1101 : 							sizeof szTmpW/2,
; 1102 : 							GetString ("SYSTEM_DRIVE_ENCRYPTING"),
; 1103 : 							(double) GetSysEncDeviceEncryptedPartSize (TRUE) / (double) GetSysEncDeviceSize (TRUE) * 100.0);

  003b5	e8 00 00 00 00	 call	 ?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z ; GetSysEncDeviceEncryptedPartSize
  003ba	89 45 e8	 mov	 DWORD PTR tv1739[ebp], eax
  003bd	8b c2		 mov	 eax, edx
  003bf	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  003c5	89 55 ec	 mov	 DWORD PTR tv1739[ebp+4], edx
  003c8	df 6d e8	 fild	 QWORD PTR tv1739[ebp]
  003cb	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  003d0	89 45 ec	 mov	 DWORD PTR tv1736[ebp+4], eax
  003d3	89 7d e8	 mov	 DWORD PTR tv1736[ebp], edi
  003d6	df 6d e8	 fild	 QWORD PTR tv1736[ebp]
  003d9	6a 01		 push	 1
  003db	d9 e0		 fchs
  003dd	de c1		 faddp	 ST(1), ST(0)
  003df	dd 5d c8	 fstp	 QWORD PTR tv992[ebp]
  003e2	e8 00 00 00 00	 call	 ?GetSysEncDeviceSize@@YA_KH@Z ; GetSysEncDeviceSize
  003e7	89 45 e8	 mov	 DWORD PTR tv1721[ebp], eax
  003ea	8b c2		 mov	 eax, edx
  003ec	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  003f2	89 55 ec	 mov	 DWORD PTR tv1721[ebp+4], edx
  003f5	df 6d e8	 fild	 QWORD PTR tv1721[ebp]
  003f8	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  003fd	89 45 ec	 mov	 DWORD PTR tv1718[ebp+4], eax
  00400	89 7d e8	 mov	 DWORD PTR tv1718[ebp], edi
  00403	df 6d e8	 fild	 QWORD PTR tv1718[ebp]
  00406	d9 e0		 fchs
  00408	de c1		 faddp	 ST(1), ST(0)
  0040a	dc 7d c8	 fdivr	 QWORD PTR tv992[ebp]
  0040d	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  00413	dd 1c 24	 fstp	 QWORD PTR [esp]
  00416	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FMGCHKLP@SYSTEM_DRIVE_ENCRYPTING?$AA@
  0041b	e8 00 00 00 00	 call	 _GetString
  00420	83 c4 04	 add	 esp, 4
  00423	50		 push	 eax
  00424	68 00 04 00 00	 push	 1024			; 00000400H
  00429	8d 8d 70 2a 00
	00		 lea	 ecx, DWORD PTR _szTmpW$136100[ebp]
  0042f	51		 push	 ecx

; 1104 : 					}
; 1105 : 					else

  00430	e9 fc 00 00 00	 jmp	 $LN296@LoadDriveL
$LN41@LoadDriveL:

; 1106 : 					{
; 1107 : 						_snwprintf (szTmpW, 
; 1108 : 							sizeof szTmpW/2,
; 1109 : 							GetString ("SYSTEM_DRIVE_DECRYPTING"),
; 1110 : 							100.0 - ((double) GetSysEncDeviceEncryptedPartSize (TRUE) / (double) GetSysEncDeviceSize (TRUE) * 100.0));

  00435	e8 00 00 00 00	 call	 ?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z ; GetSysEncDeviceEncryptedPartSize
  0043a	89 45 e8	 mov	 DWORD PTR tv1701[ebp], eax
  0043d	8b c2		 mov	 eax, edx
  0043f	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  00445	89 55 ec	 mov	 DWORD PTR tv1701[ebp+4], edx
  00448	df 6d e8	 fild	 QWORD PTR tv1701[ebp]
  0044b	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00450	89 45 ec	 mov	 DWORD PTR tv1698[ebp+4], eax
  00453	89 7d e8	 mov	 DWORD PTR tv1698[ebp], edi
  00456	df 6d e8	 fild	 QWORD PTR tv1698[ebp]
  00459	6a 01		 push	 1
  0045b	d9 e0		 fchs
  0045d	de c1		 faddp	 ST(1), ST(0)
  0045f	dd 5d c8	 fstp	 QWORD PTR tv997[ebp]
  00462	e8 00 00 00 00	 call	 ?GetSysEncDeviceSize@@YA_KH@Z ; GetSysEncDeviceSize
  00467	89 45 e8	 mov	 DWORD PTR tv1682[ebp], eax
  0046a	8b c2		 mov	 eax, edx
  0046c	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  00472	89 55 ec	 mov	 DWORD PTR tv1682[ebp+4], edx
  00475	df 6d e8	 fild	 QWORD PTR tv1682[ebp]
  00478	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0047d	89 45 ec	 mov	 DWORD PTR tv1679[ebp+4], eax
  00480	89 7d e8	 mov	 DWORD PTR tv1679[ebp], edi
  00483	df 6d e8	 fild	 QWORD PTR tv1679[ebp]
  00486	d9 e0		 fchs
  00488	de c1		 faddp	 ST(1), ST(0)
  0048a	dc 7d c8	 fdivr	 QWORD PTR tv997[ebp]
  0048d	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4059000000000000
  00493	dc c9		 fmul	 ST(1), ST(0)
  00495	de e1		 fsubrp	 ST(1), ST(0)
  00497	dd 1c 24	 fstp	 QWORD PTR [esp]
  0049a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GFAMFOII@SYSTEM_DRIVE_DECRYPTING?$AA@
  0049f	e8 00 00 00 00	 call	 _GetString
  004a4	83 c4 04	 add	 esp, 4
  004a7	50		 push	 eax
  004a8	68 00 04 00 00	 push	 1024			; 00000400H
  004ad	8d 95 70 2a 00
	00		 lea	 edx, DWORD PTR _szTmpW$136100[ebp]
  004b3	52		 push	 edx

; 1111 : 					}
; 1112 : 				}
; 1113 : 				else

  004b4	eb 7b		 jmp	 SHORT $LN296@LoadDriveL
$LN42@LoadDriveL:

; 1114 : 				{
; 1115 : 					_snwprintf (szTmpW, 
; 1116 : 						sizeof szTmpW/2,
; 1117 : 						GetString ("SYSTEM_DRIVE_PARTIALLY_ENCRYPTED"),
; 1118 : 						(double) GetSysEncDeviceEncryptedPartSize (TRUE) / (double) GetSysEncDeviceSize (TRUE) * 100.0);

  004b6	e8 00 00 00 00	 call	 ?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z ; GetSysEncDeviceEncryptedPartSize
  004bb	89 45 e8	 mov	 DWORD PTR tv1660[ebp], eax
  004be	8b c2		 mov	 eax, edx
  004c0	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  004c6	89 55 ec	 mov	 DWORD PTR tv1660[ebp+4], edx
  004c9	df 6d e8	 fild	 QWORD PTR tv1660[ebp]
  004cc	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  004d1	89 45 ec	 mov	 DWORD PTR tv1657[ebp+4], eax
  004d4	89 7d e8	 mov	 DWORD PTR tv1657[ebp], edi
  004d7	df 6d e8	 fild	 QWORD PTR tv1657[ebp]
  004da	6a 01		 push	 1
  004dc	d9 e0		 fchs
  004de	de c1		 faddp	 ST(1), ST(0)
  004e0	dd 5d c8	 fstp	 QWORD PTR tv1004[ebp]
  004e3	e8 00 00 00 00	 call	 ?GetSysEncDeviceSize@@YA_KH@Z ; GetSysEncDeviceSize
  004e8	89 45 e8	 mov	 DWORD PTR tv1643[ebp], eax
  004eb	8b c2		 mov	 eax, edx
  004ed	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  004f3	89 55 ec	 mov	 DWORD PTR tv1643[ebp+4], edx
  004f6	df 6d e8	 fild	 QWORD PTR tv1643[ebp]
  004f9	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  004fe	89 45 ec	 mov	 DWORD PTR tv1640[ebp+4], eax
  00501	89 7d e8	 mov	 DWORD PTR tv1640[ebp], edi
  00504	df 6d e8	 fild	 QWORD PTR tv1640[ebp]
  00507	d9 e0		 fchs
  00509	de c1		 faddp	 ST(1), ST(0)
  0050b	dc 7d c8	 fdivr	 QWORD PTR tv1004[ebp]
  0050e	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  00514	dd 1c 24	 fstp	 QWORD PTR [esp]
  00517	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@NENDIPBG@SYSTEM_DRIVE_PARTIALLY_ENCRYPTED@
  0051c	e8 00 00 00 00	 call	 _GetString
  00521	83 c4 04	 add	 esp, 4
  00524	50		 push	 eax
  00525	68 00 04 00 00	 push	 1024			; 00000400H
  0052a	8d 85 70 2a 00
	00		 lea	 eax, DWORD PTR _szTmpW$136100[ebp]
  00530	50		 push	 eax
$LN296@LoadDriveL:
  00531	e8 00 00 00 00	 call	 __snwprintf
  00536	83 c4 14	 add	 esp, 20			; 00000014H
$LN39@LoadDriveL:

; 1119 : 				}
; 1120 : 			}
; 1121 : 			 
; 1122 : 			ListSubItemSetW (hTree, listItem.iItem, 1, szTmpW);

  00539	8b 55 90	 mov	 edx, DWORD PTR _listItem$[ebp+4]
  0053c	8d 8d 70 2a 00
	00		 lea	 ecx, DWORD PTR _szTmpW$136100[ebp]
  00542	51		 push	 ecx
  00543	6a 01		 push	 1
  00545	52		 push	 edx
  00546	53		 push	 ebx
  00547	e8 00 00 00 00	 call	 _ListSubItemSetW
  0054c	83 c4 10	 add	 esp, 16			; 00000010H

; 1123 : 
; 1124 : 			GetSizeString (GetSysEncDeviceSize(TRUE), szTmpW);

  0054f	8d 85 70 2a 00
	00		 lea	 eax, DWORD PTR _szTmpW$136100[ebp]
  00555	50		 push	 eax
  00556	6a 01		 push	 1
  00558	e8 00 00 00 00	 call	 ?GetSysEncDeviceSize@@YA_KH@Z ; GetSysEncDeviceSize
  0055d	83 c4 04	 add	 esp, 4
  00560	52		 push	 edx
  00561	50		 push	 eax
  00562	e8 00 00 00 00	 call	 _GetSizeString

; 1125 : 			ListSubItemSetW (hTree, listItem.iItem, 2, szTmpW);

  00567	8b 55 90	 mov	 edx, DWORD PTR _listItem$[ebp+4]
  0056a	8d 8d 70 2a 00
	00		 lea	 ecx, DWORD PTR _szTmpW$136100[ebp]
  00570	51		 push	 ecx
  00571	6a 02		 push	 2
  00573	52		 push	 edx
  00574	53		 push	 ebx
  00575	e8 00 00 00 00	 call	 _ListSubItemSetW

; 1126 : 
; 1127 : 			EAGetName (szTmp, propSysEnc.ea);

  0057a	8b 85 18 02 00
	00		 mov	 eax, DWORD PTR _propSysEnc$[ebp+536]
  00580	50		 push	 eax
  00581	8d 8d 70 26 00
	00		 lea	 ecx, DWORD PTR _szTmp$136099[ebp]
  00587	51		 push	 ecx
  00588	e8 00 00 00 00	 call	 _EAGetName
  0058d	83 c4 24	 add	 esp, 36			; 00000024H

; 1128 : 			listItem.iSubItem = 3;
; 1129 : 			ListView_SetItem (hTree, &listItem);

  00590	8d 55 8c	 lea	 edx, DWORD PTR _listItem$[ebp]
  00593	52		 push	 edx
  00594	57		 push	 edi
  00595	68 06 10 00 00	 push	 4102			; 00001006H
  0059a	53		 push	 ebx
  0059b	c7 45 94 03 00
	00 00		 mov	 DWORD PTR _listItem$[ebp+8], 3
  005a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1130 : 
; 1131 : 			ListSubItemSetW (hTree, listItem.iItem, 4, GetString (IsHiddenOSRunning() ? "HIDDEN" : "SYSTEM_VOLUME_TYPE_ADJECTIVE"));

  005a8	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  005ad	85 c0		 test	 eax, eax
  005af	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06JMIOFMHI@HIDDEN?$AA@
  005b4	75 05		 jne	 SHORT $LN60@LoadDriveL
  005b6	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BN@OIBEPDD@SYSTEM_VOLUME_TYPE_ADJECTIVE?$AA@
$LN60@LoadDriveL:
  005bb	50		 push	 eax
  005bc	e8 00 00 00 00	 call	 _GetString
  005c1	50		 push	 eax
  005c2	8b 45 90	 mov	 eax, DWORD PTR _listItem$[ebp+4]
  005c5	6a 04		 push	 4
  005c7	50		 push	 eax
  005c8	53		 push	 ebx
  005c9	e8 00 00 00 00	 call	 _ListSubItemSetW
  005ce	83 c4 14	 add	 esp, 20			; 00000014H
$LN49@LoadDriveL:

; 1132 : 		}
; 1133 : 	}
; 1134 : 
; 1135 : 	/* Drive letters */
; 1136 : 
; 1137 : 	for (i = 2; i < 26; i++)

  005d1	8d 8d 70 fc ff
	ff		 lea	 ecx, DWORD PTR _driver$[ebp+13540]
  005d7	8d 95 a0 cb ff
	ff		 lea	 edx, DWORD PTR _driver$[ebp+1044]
  005dd	c7 45 d4 02 00
	00 00		 mov	 DWORD PTR tv1548[ebp], 2
  005e4	89 4d c0	 mov	 DWORD PTR tv1687[ebp], ecx
  005e7	89 55 d0	 mov	 DWORD PTR tv1689[ebp], edx

; 1290 : 				}
; 1291 : 			}
; 1292 : 		}
; 1293 : 		else
; 1294 : 		{
; 1295 : 			VolumeNotificationsList.bHidVolDamagePrevReported[i] = FALSE;

  005ea	89 7d e0	 mov	 DWORD PTR tv1732[ebp], edi
  005ed	c7 45 ec 18 00
	00 00		 mov	 DWORD PTR tv1116[ebp], 24 ; 00000018H
$LL38@LoadDriveL:
  005f4	33 f6		 xor	 esi, esi
  005f6	39 7d c4	 cmp	 DWORD PTR _bSysEnc$[ebp], edi
  005f9	74 1d		 je	 SHORT $LN61@LoadDriveL

; 1138 : 	{
; 1139 : 		int curDrive = 0;
; 1140 : 
; 1141 : 		BOOL bSysEncPartition = (bSysEnc && !bWholeSysDriveEncryption && sysDriveLetter == *((char *) szDriveLetters[i]));

  005fb	39 7d 80	 cmp	 DWORD PTR _bWholeSysDriveEncryption$[ebp], edi
  005fe	75 18		 jne	 SHORT $LN61@LoadDriveL
  00600	8b 45 e0	 mov	 eax, DWORD PTR tv1732[ebp]
  00603	8b 8c 05 a4 fe
	ff ff		 mov	 ecx, DWORD PTR _szDriveLetters$[ebp+eax+8]
  0060a	8a 55 e7	 mov	 dl, BYTE PTR _sysDriveLetter$[ebp]
  0060d	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _bSysEncPartition$136140[ebp], 1
  00614	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00616	74 03		 je	 SHORT $LN62@LoadDriveL
$LN61@LoadDriveL:
  00618	89 7d d8	 mov	 DWORD PTR _bSysEncPartition$136140[ebp], edi
$LN62@LoadDriveL:

; 1142 : 
; 1143 : 		if (drive > 0)

  0061b	39 bd 80 3a 00
	00		 cmp	 DWORD PTR _drive$[ebp], edi
  00621	7e 46		 jle	 SHORT $LN34@LoadDriveL

; 1144 : 		{
; 1145 : 			LVITEM tmp;
; 1146 : 			memset(&tmp, 0, sizeof(LVITEM));

  00623	6a 34		 push	 52			; 00000034H
  00625	8d 85 28 fe ff
	ff		 lea	 eax, DWORD PTR _tmp$136143[ebp]
  0062b	57		 push	 edi
  0062c	50		 push	 eax
  0062d	e8 00 00 00 00	 call	 _memset

; 1147 : 			tmp.mask = LVIF_PARAM;
; 1148 : 			tmp.iItem = item;

  00632	8b 4d dc	 mov	 ecx, DWORD PTR _item$[ebp]
  00635	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1149 : 			if (ListView_GetItem (hTree, &tmp))

  00638	8d 95 28 fe ff
	ff		 lea	 edx, DWORD PTR _tmp$136143[ebp]
  0063e	52		 push	 edx
  0063f	57		 push	 edi
  00640	68 05 10 00 00	 push	 4101			; 00001005H
  00645	53		 push	 ebx
  00646	c7 85 28 fe ff
	ff 04 00 00 00	 mov	 DWORD PTR _tmp$136143[ebp], 4
  00650	89 8d 2c fe ff
	ff		 mov	 DWORD PTR _tmp$136143[ebp+4], ecx
  00656	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0065c	85 c0		 test	 eax, eax
  0065e	74 09		 je	 SHORT $LN34@LoadDriveL

; 1150 : 				curDrive = HIWORD(tmp.lParam);

  00660	8b b5 48 fe ff
	ff		 mov	 esi, DWORD PTR _tmp$136143[ebp+32]
  00666	c1 ee 10	 shr	 esi, 16			; 00000010H
$LN34@LoadDriveL:

; 1151 : 		}
; 1152 : 
; 1153 : 		if (driver.ulMountedDrives & (1 << i)
; 1154 : 			|| bSysEncPartition)

  00669	8b 4d d4	 mov	 ecx, DWORD PTR tv1548[ebp]
  0066c	b8 01 00 00 00	 mov	 eax, 1
  00671	d3 e0		 shl	 eax, cl
  00673	85 85 8c c7 ff
	ff		 test	 DWORD PTR _driver$[ebp], eax
  00679	0f 85 0a 01 00
	00		 jne	 $LN32@LoadDriveL
  0067f	39 7d d8	 cmp	 DWORD PTR _bSysEncPartition$136140[ebp], edi
  00682	0f 85 01 01 00
	00		 jne	 $LN32@LoadDriveL

; 1296 : 
; 1297 : 			if (!(dwUsedDrives & 1 << i))

  00688	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _dwUsedDrives$[ebp]
  0068e	8b 4d e0	 mov	 ecx, DWORD PTR tv1732[ebp]
  00691	89 b9 08 00 00
	00		 mov	 DWORD PTR _VolumeNotificationsList[ecx+8], edi
  00697	85 c2		 test	 eax, edx
  00699	0f 85 5b 07 00
	00		 jne	 $LN37@LoadDriveL

; 1298 : 			{
; 1299 : 				if(drive > 0 && drive != HIWORD (GetSelectedLong (hTree)))

  0069f	39 bd 80 3a 00
	00		 cmp	 DWORD PTR _drive$[ebp], edi
  006a5	7e 1c		 jle	 SHORT $LN3@LoadDriveL
  006a7	53		 push	 ebx
  006a8	e8 00 00 00 00	 call	 _GetSelectedLong
  006ad	c1 e8 10	 shr	 eax, 16			; 00000010H
  006b0	83 c4 04	 add	 esp, 4
  006b3	39 85 80 3a 00
	00		 cmp	 DWORD PTR _drive$[ebp], eax
  006b9	74 08		 je	 SHORT $LN3@LoadDriveL

; 1300 : 				{
; 1301 : 					item++;

  006bb	ff 45 dc	 inc	 DWORD PTR _item$[ebp]

; 1302 : 					continue;

  006be	e9 37 07 00 00	 jmp	 $LN37@LoadDriveL
$LN3@LoadDriveL:

; 1303 : 				}
; 1304 : 
; 1305 : 				memset(&listItem,0,sizeof(listItem));

  006c3	6a 34		 push	 52			; 00000034H
  006c5	8d 45 8c	 lea	 eax, DWORD PTR _listItem$[ebp]
  006c8	57		 push	 edi
  006c9	50		 push	 eax
  006ca	e8 00 00 00 00	 call	 _memset

; 1306 : 
; 1307 : 				listItem.mask = LVIF_TEXT | LVIF_IMAGE | LVIF_PARAM;
; 1308 : 				listItem.iImage = 0;
; 1309 : 				listItem.iItem = item++;  

  006cf	8b 45 dc	 mov	 eax, DWORD PTR _item$[ebp]

; 1310 : 				listItem.pszText = szDriveLetters[i];

  006d2	8b 4d e0	 mov	 ecx, DWORD PTR tv1732[ebp]
  006d5	8b 94 0d a4 fe
	ff ff		 mov	 edx, DWORD PTR _szDriveLetters$[ebp+ecx+8]

; 1311 : 				listItem.lParam = MAKELONG (TC_MLIST_ITEM_FREE, i + 'A');
; 1312 : 
; 1313 : 				if(drive == 0) 
; 1314 : 					ListView_InsertItem (hTree, &listItem);

  006dc	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SendMessageA@16
  006e2	89 45 90	 mov	 DWORD PTR _listItem$[ebp+4], eax
  006e5	40		 inc	 eax
  006e6	89 45 dc	 mov	 DWORD PTR _item$[ebp], eax
  006e9	8b 45 d4	 mov	 eax, DWORD PTR tv1548[ebp]
  006ec	83 c0 41	 add	 eax, 65			; 00000041H
  006ef	0f b7 c8	 movzx	 ecx, ax
  006f2	c1 e1 10	 shl	 ecx, 16			; 00000010H
  006f5	83 c4 0c	 add	 esp, 12			; 0000000cH
  006f8	c7 45 8c 07 00
	00 00		 mov	 DWORD PTR _listItem$[ebp], 7
  006ff	89 7d a8	 mov	 DWORD PTR _listItem$[ebp+28], edi
  00702	89 55 a0	 mov	 DWORD PTR _listItem$[ebp+20], edx
  00705	89 4d ac	 mov	 DWORD PTR _listItem$[ebp+32], ecx
  00708	39 bd 80 3a 00
	00		 cmp	 DWORD PTR _drive$[ebp], edi
  0070e	75 0c		 jne	 SHORT $LN2@LoadDriveL
  00710	8d 55 8c	 lea	 edx, DWORD PTR _listItem$[ebp]
  00713	52		 push	 edx
  00714	57		 push	 edi
  00715	68 07 10 00 00	 push	 4103			; 00001007H

; 1315 : 				else

  0071a	eb 0a		 jmp	 SHORT $LN297@LoadDriveL
$LN2@LoadDriveL:

; 1316 : 					ListView_SetItem (hTree, &listItem);

  0071c	8d 45 8c	 lea	 eax, DWORD PTR _listItem$[ebp]
  0071f	50		 push	 eax
  00720	57		 push	 edi
  00721	68 06 10 00 00	 push	 4102			; 00001006H
$LN297@LoadDriveL:
  00726	53		 push	 ebx
  00727	ff d6		 call	 esi

; 1317 : 
; 1318 : 				listItem.mask=LVIF_TEXT;   
; 1319 : 				listItem.pszText = "";
; 1320 : 				listItem.iSubItem = 1;
; 1321 : 				ListView_SetItem (hTree, &listItem);

  00729	8d 4d 8c	 lea	 ecx, DWORD PTR _listItem$[ebp]
  0072c	51		 push	 ecx
  0072d	57		 push	 edi
  0072e	b8 01 00 00 00	 mov	 eax, 1
  00733	68 06 10 00 00	 push	 4102			; 00001006H
  00738	53		 push	 ebx
  00739	89 45 8c	 mov	 DWORD PTR _listItem$[ebp], eax
  0073c	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _listItem$[ebp+20], OFFSET ??_C@_00CNPNBAHC@?$AA@
  00743	89 45 94	 mov	 DWORD PTR _listItem$[ebp+8], eax
  00746	ff d6		 call	 esi

; 1322 : 				listItem.iSubItem = 2;
; 1323 : 				ListView_SetItem (hTree, &listItem);

  00748	8d 55 8c	 lea	 edx, DWORD PTR _listItem$[ebp]
  0074b	52		 push	 edx
  0074c	57		 push	 edi
  0074d	68 06 10 00 00	 push	 4102			; 00001006H
  00752	53		 push	 ebx
  00753	c7 45 94 02 00
	00 00		 mov	 DWORD PTR _listItem$[ebp+8], 2
  0075a	ff d6		 call	 esi

; 1324 : 				listItem.iSubItem = 3;
; 1325 : 				ListView_SetItem (hTree, &listItem);

  0075c	8d 45 8c	 lea	 eax, DWORD PTR _listItem$[ebp]
  0075f	50		 push	 eax
  00760	57		 push	 edi
  00761	68 06 10 00 00	 push	 4102			; 00001006H
  00766	53		 push	 ebx
  00767	c7 45 94 03 00
	00 00		 mov	 DWORD PTR _listItem$[ebp+8], 3
  0076e	ff d6		 call	 esi

; 1326 : 				listItem.iSubItem = 4;
; 1327 : 				ListView_SetItem (hTree, &listItem);

  00770	8d 4d 8c	 lea	 ecx, DWORD PTR _listItem$[ebp]
  00773	51		 push	 ecx
  00774	57		 push	 edi
  00775	68 06 10 00 00	 push	 4102			; 00001006H
  0077a	53		 push	 ebx
  0077b	c7 45 94 04 00
	00 00		 mov	 DWORD PTR _listItem$[ebp+8], 4
  00782	ff d6		 call	 esi
  00784	e9 71 06 00 00	 jmp	 $LN37@LoadDriveL
$LN32@LoadDriveL:

; 1155 : 		{
; 1156 : 			char szTmp[1024];
; 1157 : 			wchar_t szTmpW[1024];
; 1158 : 			wchar_t *ws;
; 1159 : 
; 1160 : 			memset(&listItem, 0, sizeof(listItem));

  00789	6a 34		 push	 52			; 00000034H
  0078b	8d 55 8c	 lea	 edx, DWORD PTR _listItem$[ebp]
  0078e	57		 push	 edi
  0078f	52		 push	 edx
  00790	e8 00 00 00 00	 call	 _memset

; 1161 : 
; 1162 : 			listItem.mask = LVIF_TEXT | LVIF_IMAGE | LVIF_PARAM;
; 1163 : 			listItem.iImage = bSysEncPartition ? 2 : 1;
; 1164 : 			listItem.iItem = item++;  

  00795	8b 4d dc	 mov	 ecx, DWORD PTR _item$[ebp]
  00798	33 c0		 xor	 eax, eax
  0079a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0079d	39 7d d8	 cmp	 DWORD PTR _bSysEncPartition$136140[ebp], edi
  007a0	89 4d 90	 mov	 DWORD PTR _listItem$[ebp+4], ecx
  007a3	0f 95 c0	 setne	 al
  007a6	41		 inc	 ecx
  007a7	c7 45 8c 07 00
	00 00		 mov	 DWORD PTR _listItem$[ebp], 7
  007ae	89 4d dc	 mov	 DWORD PTR _item$[ebp], ecx
  007b1	40		 inc	 eax

; 1165 : 
; 1166 : 			if (drive > 0 && drive != curDrive)

  007b2	39 bd 80 3a 00
	00		 cmp	 DWORD PTR _drive$[ebp], edi
  007b8	89 45 a8	 mov	 DWORD PTR _listItem$[ebp+28], eax
  007bb	7e 0c		 jle	 SHORT $LN31@LoadDriveL
  007bd	39 b5 80 3a 00
	00		 cmp	 DWORD PTR _drive$[ebp], esi
  007c3	0f 85 31 06 00
	00		 jne	 $LN37@LoadDriveL
$LN31@LoadDriveL:

; 1167 : 				continue;
; 1168 : 
; 1169 : 			listItem.lParam = MAKELONG (
; 1170 : 				bSysEncPartition ? TC_MLIST_ITEM_SYS_PARTITION : TC_MLIST_ITEM_NONSYS_VOL, 
; 1171 : 				i + 'A');

  007c9	8b 4d d4	 mov	 ecx, DWORD PTR tv1548[ebp]
  007cc	83 c1 41	 add	 ecx, 65			; 00000041H
  007cf	0f b7 d1	 movzx	 edx, cx
  007d2	c1 e2 10	 shl	 edx, 16			; 00000010H
  007d5	0b d0		 or	 edx, eax

; 1172 : 
; 1173 : 			listItem.pszText = szDriveLetters[i];

  007d7	8b 45 e0	 mov	 eax, DWORD PTR tv1732[ebp]
  007da	8b 8c 05 a4 fe
	ff ff		 mov	 ecx, DWORD PTR _szDriveLetters$[ebp+eax+8]
  007e1	89 55 ac	 mov	 DWORD PTR _listItem$[ebp+32], edx
  007e4	89 4d a0	 mov	 DWORD PTR _listItem$[ebp+20], ecx

; 1174 : 			
; 1175 : 			if (drive == 0) 

  007e7	39 bd 80 3a 00
	00		 cmp	 DWORD PTR _drive$[ebp], edi
  007ed	75 0c		 jne	 SHORT $LN30@LoadDriveL

; 1176 : 				ListView_InsertItem (hTree, &listItem);

  007ef	8d 55 8c	 lea	 edx, DWORD PTR _listItem$[ebp]
  007f2	52		 push	 edx
  007f3	57		 push	 edi
  007f4	68 07 10 00 00	 push	 4103			; 00001007H

; 1177 : 			else

  007f9	eb 0a		 jmp	 SHORT $LN298@LoadDriveL
$LN30@LoadDriveL:

; 1178 : 				ListView_SetItem (hTree, &listItem);

  007fb	8d 45 8c	 lea	 eax, DWORD PTR _listItem$[ebp]
  007fe	50		 push	 eax
  007ff	57		 push	 edi
  00800	68 06 10 00 00	 push	 4102			; 00001006H
$LN298@LoadDriveL:
  00805	53		 push	 ebx
  00806	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1179 : 
; 1180 : 			listItem.mask=LVIF_TEXT;   
; 1181 : 			listItem.pszText = szTmp;

  0080c	8d 8d 70 22 00
	00		 lea	 ecx, DWORD PTR _szTmp$136153[ebp]
  00812	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR _listItem$[ebp], 1
  00819	89 4d a0	 mov	 DWORD PTR _listItem$[ebp+20], ecx

; 1182 : 
; 1183 : 			if (bSysEncPartition)

  0081c	39 7d d8	 cmp	 DWORD PTR _bSysEncPartition$136140[ebp], edi
  0081f	0f 84 70 02 00
	00		 je	 $LN28@LoadDriveL

; 1184 : 			{
; 1185 : 				// Fully encrypted
; 1186 : 				if (SysDriveOrPartitionFullyEncrypted (TRUE))

  00825	6a 01		 push	 1
  00827	e8 00 00 00 00	 call	 ?SysDriveOrPartitionFullyEncrypted@@YAHH@Z ; SysDriveOrPartitionFullyEncrypted
  0082c	83 c4 04	 add	 esp, 4
  0082f	85 c0		 test	 eax, eax
  00831	74 38		 je	 SHORT $LN27@LoadDriveL

; 1187 : 				{
; 1188 : 					wcscpy (szTmpW, GetString (IsHiddenOSRunning() ? "HIDDEN_SYSTEM_PARTITION" : "SYSTEM_PARTITION"));

  00833	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00838	85 c0		 test	 eax, eax
  0083a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BI@NAKILHP@HIDDEN_SYSTEM_PARTITION?$AA@
  0083f	75 05		 jne	 SHORT $LN64@LoadDriveL
  00841	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@NIFEDNAB@SYSTEM_PARTITION?$AA@
$LN64@LoadDriveL:
  00846	50		 push	 eax
  00847	e8 00 00 00 00	 call	 _GetString
  0084c	83 c4 04	 add	 esp, 4
  0084f	8d 95 70 32 00
	00		 lea	 edx, DWORD PTR _szTmpW$136154[ebp]
$LL65@LoadDriveL:
  00855	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00858	66 89 0a	 mov	 WORD PTR [edx], cx
  0085b	83 c0 02	 add	 eax, 2
  0085e	83 c2 02	 add	 edx, 2
  00861	66 3b cf	 cmp	 cx, di
  00864	75 ef		 jne	 SHORT $LL65@LoadDriveL

; 1189 : 				}
; 1190 : 				else

  00866	e9 05 02 00 00	 jmp	 $LN22@LoadDriveL
$LN27@LoadDriveL:

; 1199 : 						{
; 1200 : 							_snwprintf (szTmpW, 
; 1201 : 								sizeof szTmpW/2,
; 1202 : 								GetString ("SYSTEM_PARTITION_ENCRYPTING"),
; 1203 : 								(double) GetSysEncDeviceEncryptedPartSize (TRUE) / (double) GetSysEncDeviceSize (TRUE) * 100.0);

  0086b	6a 01		 push	 1
  0086d	39 3d 3e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, edi
  00873	0f 84 59 01 00
	00		 je	 $LN25@LoadDriveL

; 1191 : 				{
; 1192 : 					// Partially encrypted
; 1193 : 
; 1194 : 					if (BootEncStatus.SetupInProgress)
; 1195 : 					{
; 1196 : 						// Currently encrypting/decrypting
; 1197 : 
; 1198 : 						if (BootEncStatus.SetupMode != SetupDecryption)

  00879	83 3d 42 00 00
	00 02		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+66, 2
  00880	0f 84 a4 00 00
	00		 je	 $LN24@LoadDriveL

; 1199 : 						{
; 1200 : 							_snwprintf (szTmpW, 
; 1201 : 								sizeof szTmpW/2,
; 1202 : 								GetString ("SYSTEM_PARTITION_ENCRYPTING"),
; 1203 : 								(double) GetSysEncDeviceEncryptedPartSize (TRUE) / (double) GetSysEncDeviceSize (TRUE) * 100.0);

  00886	e8 00 00 00 00	 call	 ?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z ; GetSysEncDeviceEncryptedPartSize
  0088b	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv1586[ebp], eax
  00891	8b c2		 mov	 eax, edx
  00893	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  00899	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0089e	89 95 4c ff ff
	ff		 mov	 DWORD PTR tv1586[ebp+4], edx
  008a4	df ad 48 ff ff
	ff		 fild	 QWORD PTR tv1586[ebp]
  008aa	89 85 54 ff ff
	ff		 mov	 DWORD PTR tv1583[ebp+4], eax
  008b0	89 bd 50 ff ff
	ff		 mov	 DWORD PTR tv1583[ebp], edi
  008b6	df ad 50 ff ff
	ff		 fild	 QWORD PTR tv1583[ebp]
  008bc	6a 01		 push	 1
  008be	d9 e0		 fchs
  008c0	de c1		 faddp	 ST(1), ST(0)
  008c2	dd 5d 84	 fstp	 QWORD PTR tv1130[ebp]
  008c5	e8 00 00 00 00	 call	 ?GetSysEncDeviceSize@@YA_KH@Z ; GetSysEncDeviceSize
  008ca	89 85 38 ff ff
	ff		 mov	 DWORD PTR tv1569[ebp], eax
  008d0	8b c2		 mov	 eax, edx
  008d2	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  008d8	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  008dd	89 95 3c ff ff
	ff		 mov	 DWORD PTR tv1569[ebp+4], edx
  008e3	df ad 38 ff ff
	ff		 fild	 QWORD PTR tv1569[ebp]
  008e9	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv1566[ebp+4], eax
  008ef	89 bd 68 ff ff
	ff		 mov	 DWORD PTR tv1566[ebp], edi
  008f5	df ad 68 ff ff
	ff		 fild	 QWORD PTR tv1566[ebp]
  008fb	d9 e0		 fchs
  008fd	de c1		 faddp	 ST(1), ST(0)
  008ff	dc 7d 84	 fdivr	 QWORD PTR tv1130[ebp]
  00902	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  00908	dd 1c 24	 fstp	 QWORD PTR [esp]
  0090b	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@GLCKIEAG@SYSTEM_PARTITION_ENCRYPTING?$AA@
  00910	e8 00 00 00 00	 call	 _GetString
  00915	83 c4 04	 add	 esp, 4
  00918	50		 push	 eax
  00919	68 00 04 00 00	 push	 1024			; 00000400H
  0091e	8d 95 70 32 00
	00		 lea	 edx, DWORD PTR _szTmpW$136154[ebp]
  00924	52		 push	 edx

; 1204 : 						}
; 1205 : 						else

  00925	e9 3e 01 00 00	 jmp	 $LN299@LoadDriveL
$LN24@LoadDriveL:

; 1206 : 						{
; 1207 : 							_snwprintf (szTmpW, 
; 1208 : 								sizeof szTmpW/2,
; 1209 : 								GetString ("SYSTEM_PARTITION_DECRYPTING"),
; 1210 : 								100.0 - ((double) GetSysEncDeviceEncryptedPartSize (TRUE) / (double) GetSysEncDeviceSize (TRUE) * 100.0));

  0092a	e8 00 00 00 00	 call	 ?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z ; GetSysEncDeviceEncryptedPartSize
  0092f	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv1547[ebp], eax
  00935	8b c2		 mov	 eax, edx
  00937	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0093d	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00942	89 95 34 ff ff
	ff		 mov	 DWORD PTR tv1547[ebp+4], edx
  00948	df ad 30 ff ff
	ff		 fild	 QWORD PTR tv1547[ebp]
  0094e	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv1544[ebp+4], eax
  00954	89 bd 20 ff ff
	ff		 mov	 DWORD PTR tv1544[ebp], edi
  0095a	df ad 20 ff ff
	ff		 fild	 QWORD PTR tv1544[ebp]
  00960	6a 01		 push	 1
  00962	d9 e0		 fchs
  00964	de c1		 faddp	 ST(1), ST(0)
  00966	dd 5d 84	 fstp	 QWORD PTR tv1123[ebp]
  00969	e8 00 00 00 00	 call	 ?GetSysEncDeviceSize@@YA_KH@Z ; GetSysEncDeviceSize
  0096e	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv1530[ebp], eax
  00974	8b c2		 mov	 eax, edx
  00976	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0097c	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00981	89 95 74 ff ff
	ff		 mov	 DWORD PTR tv1530[ebp+4], edx
  00987	df ad 70 ff ff
	ff		 fild	 QWORD PTR tv1530[ebp]
  0098d	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv1527[ebp+4], eax
  00993	89 bd 28 ff ff
	ff		 mov	 DWORD PTR tv1527[ebp], edi
  00999	df ad 28 ff ff
	ff		 fild	 QWORD PTR tv1527[ebp]
  0099f	d9 e0		 fchs
  009a1	de c1		 faddp	 ST(1), ST(0)
  009a3	dc 7d 84	 fdivr	 QWORD PTR tv1123[ebp]
  009a6	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4059000000000000
  009ac	dc c9		 fmul	 ST(1), ST(0)
  009ae	de e1		 fsubrp	 ST(1), ST(0)
  009b0	dd 1c 24	 fstp	 QWORD PTR [esp]
  009b3	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@FCEEKADB@SYSTEM_PARTITION_DECRYPTING?$AA@
  009b8	e8 00 00 00 00	 call	 _GetString
  009bd	83 c4 04	 add	 esp, 4
  009c0	50		 push	 eax
  009c1	68 00 04 00 00	 push	 1024			; 00000400H
  009c6	8d 85 70 32 00
	00		 lea	 eax, DWORD PTR _szTmpW$136154[ebp]
  009cc	50		 push	 eax

; 1211 : 						}
; 1212 : 					}
; 1213 : 					else

  009cd	e9 96 00 00 00	 jmp	 $LN299@LoadDriveL
$LN25@LoadDriveL:

; 1214 : 					{
; 1215 : 						_snwprintf (szTmpW, 
; 1216 : 							sizeof szTmpW/2,
; 1217 : 							GetString ("SYSTEM_PARTITION_PARTIALLY_ENCRYPTED"),
; 1218 : 							(double) GetSysEncDeviceEncryptedPartSize (TRUE) / (double) GetSysEncDeviceSize (TRUE) * 100.0);

  009d2	e8 00 00 00 00	 call	 ?GetSysEncDeviceEncryptedPartSize@@YA_KH@Z ; GetSysEncDeviceEncryptedPartSize
  009d7	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv1508[ebp], eax
  009dd	8b c2		 mov	 eax, edx
  009df	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  009e5	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  009ea	89 95 44 ff ff
	ff		 mov	 DWORD PTR tv1508[ebp+4], edx
  009f0	df ad 40 ff ff
	ff		 fild	 QWORD PTR tv1508[ebp]
  009f6	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv1505[ebp+4], eax
  009fc	89 bd 60 ff ff
	ff		 mov	 DWORD PTR tv1505[ebp], edi
  00a02	df ad 60 ff ff
	ff		 fild	 QWORD PTR tv1505[ebp]
  00a08	6a 01		 push	 1
  00a0a	d9 e0		 fchs
  00a0c	de c1		 faddp	 ST(1), ST(0)
  00a0e	dd 5d 84	 fstp	 QWORD PTR tv1108[ebp]
  00a11	e8 00 00 00 00	 call	 ?GetSysEncDeviceSize@@YA_KH@Z ; GetSysEncDeviceSize
  00a16	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv1459[ebp], eax
  00a1c	8b c2		 mov	 eax, edx
  00a1e	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  00a24	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00a29	89 95 5c ff ff
	ff		 mov	 DWORD PTR tv1459[ebp+4], edx
  00a2f	df ad 58 ff ff
	ff		 fild	 QWORD PTR tv1459[ebp]
  00a35	89 45 cc	 mov	 DWORD PTR tv1456[ebp+4], eax
  00a38	89 7d c8	 mov	 DWORD PTR tv1456[ebp], edi
  00a3b	df 6d c8	 fild	 QWORD PTR tv1456[ebp]
  00a3e	d9 e0		 fchs
  00a40	de c1		 faddp	 ST(1), ST(0)
  00a42	dc 7d 84	 fdivr	 QWORD PTR tv1108[ebp]
  00a45	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  00a4b	dd 1c 24	 fstp	 QWORD PTR [esp]
  00a4e	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@LEGOPDKD@SYSTEM_PARTITION_PARTIALLY_ENCRY@
  00a53	e8 00 00 00 00	 call	 _GetString
  00a58	83 c4 04	 add	 esp, 4
  00a5b	50		 push	 eax
  00a5c	68 00 04 00 00	 push	 1024			; 00000400H
  00a61	8d 8d 70 32 00
	00		 lea	 ecx, DWORD PTR _szTmpW$136154[ebp]
  00a67	51		 push	 ecx
$LN299@LoadDriveL:
  00a68	e8 00 00 00 00	 call	 __snwprintf
  00a6d	83 c4 14	 add	 esp, 20			; 00000014H
$LN22@LoadDriveL:

; 1219 : 					}
; 1220 : 				}
; 1221 : 
; 1222 : 				ListSubItemSetW (hTree, listItem.iItem, 1, szTmpW);

  00a70	8b 45 90	 mov	 eax, DWORD PTR _listItem$[ebp+4]
  00a73	8d 95 70 32 00
	00		 lea	 edx, DWORD PTR _szTmpW$136154[ebp]
  00a79	52		 push	 edx
  00a7a	6a 01		 push	 1
  00a7c	50		 push	 eax
  00a7d	53		 push	 ebx
  00a7e	e8 00 00 00 00	 call	 _ListSubItemSetW
  00a83	83 c4 10	 add	 esp, 16			; 00000010H

; 1240 : 
; 1241 : 			GetSizeString (bSysEncPartition ? GetSysEncDeviceSize(TRUE) : driver.diskLength[i], szTmpW);

  00a86	6a 01		 push	 1
  00a88	e8 00 00 00 00	 call	 ?GetSysEncDeviceSize@@YA_KH@Z ; GetSysEncDeviceSize
  00a8d	83 c4 04	 add	 esp, 4
  00a90	e9 f2 01 00 00	 jmp	 $LN67@LoadDriveL
$LN28@LoadDriveL:

; 1223 : 			}
; 1224 : 			else
; 1225 : 			{
; 1226 : 				ToSBCS (driver.wszVolume[i]);

  00a95	8b 75 d0	 mov	 esi, DWORD PTR tv1689[ebp]
  00a98	56		 push	 esi
  00a99	e8 00 00 00 00	 call	 _ToSBCS

; 1227 : 				char *path = (char *) driver.wszVolume[i];
; 1228 : 
; 1229 : 				if (memcmp (path, "\\??\\", 4) == 0)

  00a9e	8b ce		 mov	 ecx, esi
  00aa0	83 c4 04	 add	 esp, 4
  00aa3	81 39 5c 3f 3f
	5c		 cmp	 DWORD PTR [ecx], 1547648860 ; 5c3f3f5cH
  00aa9	75 03		 jne	 SHORT $LN20@LoadDriveL

; 1230 : 					path += 4;

  00aab	83 c6 04	 add	 esi, 4
$LN20@LoadDriveL:

; 1231 : 
; 1232 : 				listItem.iSubItem = 1;
; 1233 : 
; 1234 : 				wstring label = GetFavoriteVolumeLabel (path);

  00aae	8b c6		 mov	 eax, esi
  00ab0	c7 45 94 01 00
	00 00		 mov	 DWORD PTR _listItem$[ebp+8], 1
  00ab7	c7 85 1c ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T179314[ebp+24], 15 ; 0000000fH
  00ac1	89 bd 18 ff ff
	ff		 mov	 DWORD PTR $T179314[ebp+20], edi
  00ac7	c6 85 08 ff ff
	ff 00		 mov	 BYTE PTR $T179314[ebp+4], 0
  00ace	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL281@LoadDriveL:
  00ad1	8a 08		 mov	 cl, BYTE PTR [eax]
  00ad3	40		 inc	 eax
  00ad4	84 c9		 test	 cl, cl
  00ad6	75 f9		 jne	 SHORT $LL281@LoadDriveL
  00ad8	2b c2		 sub	 eax, edx
  00ada	50		 push	 eax
  00adb	56		 push	 esi
  00adc	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR $T179314[ebp]
  00ae2	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00ae7	8d 95 04 ff ff
	ff		 lea	 edx, DWORD PTR $T179314[ebp]
  00aed	52		 push	 edx
  00aee	8d 85 54 02 00
	00		 lea	 eax, DWORD PTR _label$136194[ebp]
  00af4	50		 push	 eax
  00af5	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00afc	e8 00 00 00 00	 call	 ?GetFavoriteVolumeLabel@CipherShed@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ; CipherShed::GetFavoriteVolumeLabel
  00b01	83 c4 08	 add	 esp, 8
  00b04	83 bd 1c ff ff
	ff 10		 cmp	 DWORD PTR $T179314[ebp+24], 16 ; 00000010H
  00b0b	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  00b0f	72 0f		 jb	 SHORT $LN136@LoadDriveL
  00b11	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR $T179314[ebp+4]
  00b17	51		 push	 ecx
  00b18	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00b1d	83 c4 04	 add	 esp, 4
$LN136@LoadDriveL:
  00b20	c7 85 1c ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T179314[ebp+24], 15 ; 0000000fH
  00b2a	89 bd 18 ff ff
	ff		 mov	 DWORD PTR $T179314[ebp+20], edi
  00b30	c6 85 08 ff ff
	ff 00		 mov	 BYTE PTR $T179314[ebp+4], 0

; 1235 : 				if (!label.empty())

  00b37	39 bd 68 02 00
	00		 cmp	 DWORD PTR _label$136194[ebp+20], edi
  00b3d	74 2a		 je	 SHORT $LN19@LoadDriveL

; 1236 : 					ListSubItemSetW (hTree, listItem.iItem, 1, (wchar_t *) label.c_str());

  00b3f	83 bd 6c 02 00
	00 08		 cmp	 DWORD PTR _label$136194[ebp+24], 8
  00b46	8b 85 58 02 00
	00		 mov	 eax, DWORD PTR _label$136194[ebp+4]
  00b4c	73 06		 jae	 SHORT $LN153@LoadDriveL
  00b4e	8d 85 58 02 00
	00		 lea	 eax, DWORD PTR _label$136194[ebp+4]
$LN153@LoadDriveL:
  00b54	8b 55 90	 mov	 edx, DWORD PTR _listItem$[ebp+4]
  00b57	50		 push	 eax
  00b58	6a 01		 push	 1
  00b5a	52		 push	 edx
  00b5b	53		 push	 ebx
  00b5c	e8 00 00 00 00	 call	 _ListSubItemSetW
  00b61	83 c4 10	 add	 esp, 16			; 00000010H

; 1237 : 				else

  00b64	e9 f5 00 00 00	 jmp	 $LN238@LoadDriveL
$LN19@LoadDriveL:

; 1238 : 					ListSubItemSet (hTree, listItem.iItem, 1, (char *) FitPathInGfxWidth (hTree, hUserFont, ListView_GetColumnWidth (hTree, 1) - GetTextGfxWidth (hTree, L"___", hUserFont), path).c_str());

  00b69	8b c6		 mov	 eax, esi
  00b6b	c7 85 98 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T179315[ebp+24], 15 ; 0000000fH
  00b75	c7 85 94 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T179315[ebp+20], 0
  00b7f	c6 85 84 fe ff
	ff 00		 mov	 BYTE PTR $T179315[ebp+4], 0
  00b86	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00b89	8d a4 24 00 00
	00 00		 npad	 7
$LL282@LoadDriveL:
  00b90	8a 08		 mov	 cl, BYTE PTR [eax]
  00b92	40		 inc	 eax
  00b93	84 c9		 test	 cl, cl
  00b95	75 f9		 jne	 SHORT $LL282@LoadDriveL
  00b97	2b c7		 sub	 eax, edi
  00b99	50		 push	 eax
  00b9a	56		 push	 esi
  00b9b	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR $T179315[ebp]
  00ba1	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00ba6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserFont
  00bac	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR $T179315[ebp]
  00bb2	50		 push	 eax
  00bb3	51		 push	 ecx
  00bb4	68 00 00 00 00	 push	 OFFSET ??_C@_17HIGNGECK@?$AA_?$AA_?$AA_?$AA?$AA@
  00bb9	53		 push	 ebx
  00bba	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  00bbe	e8 00 00 00 00	 call	 _GetTextGfxWidth
  00bc3	83 c4 0c	 add	 esp, 12			; 0000000cH
  00bc6	6a 00		 push	 0
  00bc8	6a 01		 push	 1
  00bca	68 1d 10 00 00	 push	 4125			; 0000101dH
  00bcf	53		 push	 ebx
  00bd0	8b f0		 mov	 esi, eax
  00bd2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00bd8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hUserFont
  00bde	2b c6		 sub	 eax, esi
  00be0	50		 push	 eax
  00be1	52		 push	 edx
  00be2	8d 85 60 fe ff
	ff		 lea	 eax, DWORD PTR $T179316[ebp]
  00be8	53		 push	 ebx
  00be9	50		 push	 eax
  00bea	e8 00 00 00 00	 call	 ?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z ; FitPathInGfxWidth
  00bef	83 c4 14	 add	 esp, 20			; 00000014H
  00bf2	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00bf6	72 05		 jb	 SHORT $LN194@LoadDriveL
  00bf8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00bfb	eb 03		 jmp	 SHORT $LN195@LoadDriveL
$LN194@LoadDriveL:
  00bfd	83 c0 04	 add	 eax, 4
$LN195@LoadDriveL:
  00c00	8b 4d 90	 mov	 ecx, DWORD PTR _listItem$[ebp+4]
  00c03	50		 push	 eax
  00c04	6a 01		 push	 1
  00c06	51		 push	 ecx
  00c07	53		 push	 ebx
  00c08	e8 00 00 00 00	 call	 _ListSubItemSet
  00c0d	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00c12	83 c4 10	 add	 esp, 16			; 00000010H
  00c15	39 b5 78 fe ff
	ff		 cmp	 DWORD PTR $T179316[ebp+24], esi
  00c1b	72 0f		 jb	 SHORT $LN212@LoadDriveL
  00c1d	8b 95 64 fe ff
	ff		 mov	 edx, DWORD PTR $T179316[ebp+4]
  00c23	52		 push	 edx
  00c24	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00c29	83 c4 04	 add	 esp, 4
$LN212@LoadDriveL:
  00c2c	c7 85 78 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T179316[ebp+24], 15 ; 0000000fH
  00c36	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T179316[ebp+20], 0
  00c40	c6 85 64 fe ff
	ff 00		 mov	 BYTE PTR $T179316[ebp+4], 0
  00c47	39 b5 98 fe ff
	ff		 cmp	 DWORD PTR $T179315[ebp+24], esi
  00c4d	72 0f		 jb	 SHORT $LN238@LoadDriveL
  00c4f	8b 85 84 fe ff
	ff		 mov	 eax, DWORD PTR $T179315[ebp+4]
  00c55	50		 push	 eax
  00c56	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00c5b	83 c4 04	 add	 esp, 4
$LN238@LoadDriveL:

; 1239 : 			}

  00c5e	83 bd 6c 02 00
	00 08		 cmp	 DWORD PTR _label$136194[ebp+24], 8
  00c65	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00c6c	72 0f		 jb	 SHORT $LN66@LoadDriveL
  00c6e	8b 8d 58 02 00
	00		 mov	 ecx, DWORD PTR _label$136194[ebp+4]
  00c74	51		 push	 ecx
  00c75	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00c7a	83 c4 04	 add	 esp, 4
$LN66@LoadDriveL:

; 1240 : 
; 1241 : 			GetSizeString (bSysEncPartition ? GetSysEncDeviceSize(TRUE) : driver.diskLength[i], szTmpW);

  00c7d	8b 4d c0	 mov	 ecx, DWORD PTR tv1687[ebp]
  00c80	8b 01		 mov	 eax, DWORD PTR [ecx]
  00c82	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00c85	33 ff		 xor	 edi, edi
$LN67@LoadDriveL:
  00c87	8d 8d 70 32 00
	00		 lea	 ecx, DWORD PTR _szTmpW$136154[ebp]
  00c8d	51		 push	 ecx
  00c8e	52		 push	 edx
  00c8f	50		 push	 eax
  00c90	e8 00 00 00 00	 call	 _GetSizeString

; 1242 : 			ListSubItemSetW (hTree, listItem.iItem, 2, szTmpW);

  00c95	8b 45 90	 mov	 eax, DWORD PTR _listItem$[ebp+4]
  00c98	8d 95 70 32 00
	00		 lea	 edx, DWORD PTR _szTmpW$136154[ebp]
  00c9e	52		 push	 edx
  00c9f	6a 02		 push	 2
  00ca1	50		 push	 eax
  00ca2	53		 push	 ebx
  00ca3	e8 00 00 00 00	 call	 _ListSubItemSetW

; 1243 : 
; 1244 : 			EAGetName (szTmp, bSysEncPartition ? propSysEnc.ea : driver.ea[i]);

  00ca8	8b 75 e0	 mov	 esi, DWORD PTR tv1732[ebp]
  00cab	8b 85 18 02 00
	00		 mov	 eax, DWORD PTR _propSysEnc$[ebp+536]
  00cb1	83 c4 1c	 add	 esp, 28			; 0000001cH
  00cb4	39 7d d8	 cmp	 DWORD PTR _bSysEncPartition$136140[ebp], edi
  00cb7	75 07		 jne	 SHORT $LN69@LoadDriveL
  00cb9	8b 84 35 38 fd
	ff ff		 mov	 eax, DWORD PTR _driver$[ebp+esi+13740]
$LN69@LoadDriveL:
  00cc0	50		 push	 eax
  00cc1	8d 8d 70 22 00
	00		 lea	 ecx, DWORD PTR _szTmp$136153[ebp]
  00cc7	51		 push	 ecx
  00cc8	e8 00 00 00 00	 call	 _EAGetName
  00ccd	83 c4 08	 add	 esp, 8

; 1245 : 			listItem.iSubItem = 3;
; 1246 : 			ListView_SetItem (hTree, &listItem);

  00cd0	8d 55 8c	 lea	 edx, DWORD PTR _listItem$[ebp]
  00cd3	52		 push	 edx
  00cd4	57		 push	 edi
  00cd5	68 06 10 00 00	 push	 4102			; 00001006H
  00cda	53		 push	 ebx
  00cdb	c7 45 94 03 00
	00 00		 mov	 DWORD PTR _listItem$[ebp+8], 3
  00ce2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1247 : 
; 1248 : 			if (bSysEncPartition)

  00ce8	39 7d d8	 cmp	 DWORD PTR _bSysEncPartition$136140[ebp], edi
  00ceb	74 34		 je	 SHORT $LN17@LoadDriveL

; 1249 : 			{
; 1250 : 				ws = GetString (IsHiddenOSRunning() ? "HIDDEN" : "SYSTEM_VOLUME_TYPE_ADJECTIVE");

  00ced	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00cf2	85 c0		 test	 eax, eax
  00cf4	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06JMIOFMHI@HIDDEN?$AA@
  00cf9	75 05		 jne	 SHORT $LN71@LoadDriveL
  00cfb	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BN@OIBEPDD@SYSTEM_VOLUME_TYPE_ADJECTIVE?$AA@
$LN71@LoadDriveL:
  00d00	50		 push	 eax
  00d01	e8 00 00 00 00	 call	 _GetString

; 1251 : 				VolumeNotificationsList.bHidVolDamagePrevReported[i] = FALSE;
; 1252 : 				ListSubItemSetW (hTree, listItem.iItem, 4, ws);

  00d06	50		 push	 eax
  00d07	8b 45 90	 mov	 eax, DWORD PTR _listItem$[ebp+4]
  00d0a	6a 04		 push	 4
  00d0c	50		 push	 eax
  00d0d	53		 push	 ebx
  00d0e	89 be 08 00 00
	00		 mov	 DWORD PTR _VolumeNotificationsList[esi+8], edi
  00d14	e8 00 00 00 00	 call	 _ListSubItemSetW
  00d19	83 c4 14	 add	 esp, 20			; 00000014H

; 1253 : 			}
; 1254 : 			else

  00d1c	e9 d9 00 00 00	 jmp	 $LN37@LoadDriveL
$LN17@LoadDriveL:

; 1255 : 			{
; 1256 : 				switch (driver.volumeType[i])

  00d21	8b 84 35 a0 fd
	ff ff		 mov	 eax, DWORD PTR _driver$[ebp+esi+13844]
  00d28	83 f8 03	 cmp	 eax, 3
  00d2b	77 43		 ja	 SHORT $LN9@LoadDriveL
  00d2d	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN300@LoadDriveL[eax*4]
$LN13@LoadDriveL:

; 1257 : 				{
; 1258 : 				case PROP_VOL_TYPE_NORMAL:
; 1259 : 					ws = GetString ("NORMAL");

  00d34	68 00 00 00 00	 push	 OFFSET ??_C@_06IOJAGNKJ@NORMAL?$AA@
  00d39	e8 00 00 00 00	 call	 _GetString
  00d3e	83 c4 04	 add	 esp, 4

; 1260 : 					break;

  00d41	eb 32		 jmp	 SHORT $LN14@LoadDriveL
$LN12@LoadDriveL:

; 1261 : 				case PROP_VOL_TYPE_HIDDEN:
; 1262 : 					ws = GetString ("HIDDEN");

  00d43	68 00 00 00 00	 push	 OFFSET ??_C@_06JMIOFMHI@HIDDEN?$AA@
  00d48	e8 00 00 00 00	 call	 _GetString
  00d4d	83 c4 04	 add	 esp, 4

; 1263 : 					break;

  00d50	eb 23		 jmp	 SHORT $LN14@LoadDriveL
$LN11@LoadDriveL:

; 1264 : 				case PROP_VOL_TYPE_OUTER:
; 1265 : 					ws = GetString ("OUTER");		// Normal/outer volume (hidden volume protected)

  00d52	68 00 00 00 00	 push	 OFFSET ??_C@_05PKHDEOFG@OUTER?$AA@
  00d57	e8 00 00 00 00	 call	 _GetString
  00d5c	83 c4 04	 add	 esp, 4

; 1266 : 					break;

  00d5f	eb 14		 jmp	 SHORT $LN14@LoadDriveL
$LN10@LoadDriveL:

; 1267 : 				case PROP_VOL_TYPE_OUTER_VOL_WRITE_PREVENTED:
; 1268 : 					ws = GetString ("OUTER_VOL_WRITE_PREVENTED");	// Normal/outer volume (hidden volume protected AND write denied)

  00d61	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@GNLJADMH@OUTER_VOL_WRITE_PREVENTED?$AA@
  00d66	e8 00 00 00 00	 call	 _GetString
  00d6b	83 c4 04	 add	 esp, 4

; 1269 : 					break;

  00d6e	eb 05		 jmp	 SHORT $LN14@LoadDriveL
$LN9@LoadDriveL:

; 1270 : 				default:
; 1271 : 					ws = L"?";

  00d70	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_13HGPDMIBE@?$AA?$DP?$AA?$AA@
$LN14@LoadDriveL:

; 1272 : 				}
; 1273 : 				ListSubItemSetW (hTree, listItem.iItem, 4, ws);

  00d75	8b 4d 90	 mov	 ecx, DWORD PTR _listItem$[ebp+4]
  00d78	50		 push	 eax
  00d79	6a 04		 push	 4
  00d7b	51		 push	 ecx
  00d7c	53		 push	 ebx
  00d7d	e8 00 00 00 00	 call	 _ListSubItemSetW
  00d82	83 c4 10	 add	 esp, 16			; 00000010H

; 1274 : 
; 1275 : 				if (driver.volumeType[i] == PROP_VOL_TYPE_OUTER_VOL_WRITE_PREVENTED)	// Normal/outer volume (hidden volume protected AND write denied)

  00d85	83 bc 35 a0 fd
	ff ff 03	 cmp	 DWORD PTR _driver$[ebp+esi+13844], 3
  00d8d	75 65		 jne	 SHORT $LN8@LoadDriveL

; 1276 : 				{				
; 1277 : 					if (!VolumeNotificationsList.bHidVolDamagePrevReported[i])

  00d8f	39 be 08 00 00
	00		 cmp	 DWORD PTR _VolumeNotificationsList[esi+8], edi
  00d95	75 63		 jne	 SHORT $LN37@LoadDriveL

; 1278 : 					{
; 1279 : 						wchar_t szTmp[4096];
; 1280 : 
; 1281 : 						VolumeNotificationsList.bHidVolDamagePrevReported[i] = TRUE;
; 1282 : 						swprintf (szTmp, GetString ("DAMAGE_TO_HIDDEN_VOLUME_PREVENTED"), i+'A');

  00d97	8b 55 d4	 mov	 edx, DWORD PTR tv1548[ebp]
  00d9a	83 c2 41	 add	 edx, 65			; 00000041H
  00d9d	52		 push	 edx
  00d9e	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@LCDEFKJP@DAMAGE_TO_HIDDEN_VOLUME_PREVENTE@
  00da3	c7 86 08 00 00
	00 01 00 00 00	 mov	 DWORD PTR _VolumeNotificationsList[esi+8], 1
  00dad	e8 00 00 00 00	 call	 _GetString
  00db2	83 c4 04	 add	 esp, 4
  00db5	50		 push	 eax
  00db6	8d 85 70 02 00
	00		 lea	 eax, DWORD PTR _szTmp$136227[ebp]
  00dbc	50		 push	 eax
  00dbd	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf

; 1283 : 						SetForegroundWindow (GetParent(hTree));

  00dc2	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetParent@4
  00dc8	83 c4 0c	 add	 esp, 12			; 0000000cH
  00dcb	53		 push	 ebx
  00dcc	ff d6		 call	 esi
  00dce	50		 push	 eax
  00dcf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetForegroundWindow@4

; 1284 : 						MessageBoxW (GetParent(hTree), szTmp, lpszTitle, MB_ICONWARNING | MB_SETFOREGROUND | MB_TOPMOST);

  00dd5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  00ddb	68 30 00 05 00	 push	 327728			; 00050030H
  00de0	51		 push	 ecx
  00de1	8d 95 70 02 00
	00		 lea	 edx, DWORD PTR _szTmp$136227[ebp]
  00de7	52		 push	 edx
  00de8	53		 push	 ebx
  00de9	ff d6		 call	 esi
  00deb	50		 push	 eax
  00dec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 1285 : 					}
; 1286 : 				}
; 1287 : 				else

  00df2	eb 06		 jmp	 SHORT $LN37@LoadDriveL
$LN8@LoadDriveL:

; 1288 : 				{
; 1289 : 					VolumeNotificationsList.bHidVolDamagePrevReported[i] = FALSE;

  00df4	89 be 08 00 00
	00		 mov	 DWORD PTR _VolumeNotificationsList[esi+8], edi
$LN37@LoadDriveL:

; 1132 : 		}
; 1133 : 	}
; 1134 : 
; 1135 : 	/* Drive letters */
; 1136 : 
; 1137 : 	for (i = 2; i < 26; i++)

  00dfa	81 45 d0 08 02
	00 00		 add	 DWORD PTR tv1689[ebp], 520 ; 00000208H
  00e01	83 45 c0 08	 add	 DWORD PTR tv1687[ebp], 8

; 1290 : 				}
; 1291 : 			}
; 1292 : 		}
; 1293 : 		else
; 1294 : 		{
; 1295 : 			VolumeNotificationsList.bHidVolDamagePrevReported[i] = FALSE;

  00e05	83 45 e0 04	 add	 DWORD PTR tv1732[ebp], 4
  00e09	b8 01 00 00 00	 mov	 eax, 1
  00e0e	01 45 d4	 add	 DWORD PTR tv1548[ebp], eax
  00e11	29 45 ec	 sub	 DWORD PTR tv1116[ebp], eax
  00e14	0f 85 da f7 ff
	ff		 jne	 $LL38@LoadDriveL

; 1328 : 
; 1329 : 			}
; 1330 : 		}
; 1331 : 	}
; 1332 : 
; 1333 : 	// Restore the original scroll position (the topmost item that was visible when we were called) and the
; 1334 : 	// last selected item.
; 1335 : 	SetListScrollHPos (hTree, lastTopMostVisibleItem);

  00e1a	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _lastTopMostVisibleItem$[ebp]
  00e20	50		 push	 eax
  00e21	53		 push	 ebx
  00e22	e8 00 00 00 00	 call	 _SetListScrollHPos

; 1336 : 	SelectItem (hTree, 0);

  00e27	57		 push	 edi
  00e28	53		 push	 ebx
  00e29	e8 00 00 00 00	 call	 _SelectItem
  00e2e	83 c4 10	 add	 esp, 16			; 00000010H

; 1337 : }

  00e31	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00e34	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00e3b	59		 pop	 ecx
  00e3c	5f		 pop	 edi
  00e3d	5e		 pop	 esi
  00e3e	5b		 pop	 ebx
  00e3f	8b 8d 70 3a 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00e45	33 cd		 xor	 ecx, ebp
  00e47	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00e4c	81 c5 74 3a 00
	00		 add	 ebp, 14964		; 00003a74H
  00e52	8b e5		 mov	 esp, ebp
  00e54	5d		 pop	 ebp
  00e55	c3		 ret	 0
  00e56	8b ff		 npad	 2
$LN300@LoadDriveL:
  00e58	00 00 00 00	 DD	 $LN13@LoadDriveL
  00e5c	00 00 00 00	 DD	 $LN12@LoadDriveL
  00e60	00 00 00 00	 DD	 $LN11@LoadDriveL
  00e64	00 00 00 00	 DD	 $LN10@LoadDriveL
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_LoadDriveLetters$2:
  00000	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR $T179314[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_LoadDriveLetters$3:
  0000b	8d 8d 54 02 00
	00		 lea	 ecx, DWORD PTR _label$136194[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_LoadDriveLetters$4:
  00016	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR $T179315[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$_LoadDriveLetters:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 8a 88 c7 ff
	ff		 mov	 ecx, DWORD PTR [edx-14456]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	8b 8a 7c 3a 00
	00		 mov	 ecx, DWORD PTR [edx+14972]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_LoadDriveLetters
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_LoadDriveLetters ENDP
PUBLIC	??_C@_04JIMNDDED@?$CF08X?$AA@			; `string'
PUBLIC	??_C@_0BD@OPCEEDMD@ENTER_PASSWORD_FOR?$AA@	; `string'
PUBLIC	??_C@_03BHBGBHAB@___?$AA@			; `string'
PUBLIC	??_C@_0BJ@NGNFBMFD@ENTER_PASSWORD_FOR_LABEL?$AA@ ; `string'
PUBLIC	??_C@_0BB@HOAEAIOP@IDD_PASSWORD_DLG?$AA@	; `string'
PUBLIC	??_C@_0BP@BGCHIACG@CANNOT_RESTORE_KEYBOARD_LAYOUT?$AA@ ; `string'
PUBLIC	_wParam$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_PasswordDlgProc@16
EXTRN	__imp__DragFinish@4:PROC
EXTRN	__imp__DragQueryFileA@16:PROC
EXTRN	__imp__FlashWindowEx@4:PROC
EXTRN	__imp__SetWindowPos@28:PROC
EXTRN	_FavoriteMountOnArrivalInProgress:DWORD
EXTRN	_WindowTitleBarFont:DWORD
EXTRN	__imp__DragAcceptFiles@8:PROC
_BSS	SEGMENT
_PasswordDialogDisableMountOptions DD 01H DUP (?)
_PasswordDlgVolume DB 0104H DUP (?)
_PasswordDialogTitleStringId DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ?szXPwd@?1??PasswordDlgProc@@9@16@4PAUPassword@@A
; File c:\program files\microsoft sdks\windows\v7.0\include\winnt.h
_BSS	SEGMENT
?szXPwd@?1??PasswordDlgProc@@9@16@4PAUPassword@@A DD 01H DUP (?) ; `PasswordDlgProc'::`2'::szXPwd
_BSS	ENDS
;	COMDAT ??_C@_04JIMNDDED@?$CF08X?$AA@
CONST	SEGMENT
??_C@_04JIMNDDED@?$CF08X?$AA@ DB '%08X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OPCEEDMD@ENTER_PASSWORD_FOR?$AA@
CONST	SEGMENT
??_C@_0BD@OPCEEDMD@ENTER_PASSWORD_FOR?$AA@ DB 'ENTER_PASSWORD_FOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03BHBGBHAB@___?$AA@
CONST	SEGMENT
??_C@_03BHBGBHAB@___?$AA@ DB '___', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NGNFBMFD@ENTER_PASSWORD_FOR_LABEL?$AA@
CONST	SEGMENT
??_C@_0BJ@NGNFBMFD@ENTER_PASSWORD_FOR_LABEL?$AA@ DB 'ENTER_PASSWORD_FOR_L'
	DB	'ABEL', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HOAEAIOP@IDD_PASSWORD_DLG?$AA@
CONST	SEGMENT
??_C@_0BB@HOAEAIOP@IDD_PASSWORD_DLG?$AA@ DB 'IDD_PASSWORD_DLG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BGCHIACG@CANNOT_RESTORE_KEYBOARD_LAYOUT?$AA@
CONST	SEGMENT
??_C@_0BP@BGCHIACG@CANNOT_RESTORE_KEYBOARD_LAYOUT?$AA@ DB 'CANNOT_RESTORE'
	DB	'_KEYBOARD_LAYOUT', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
CONST	ENDS
;	COMDAT _PasswordDlgProc@16
_TEXT	SEGMENT
_wParam$GSCopy$ = -10820				; size = 4
_param$136601 = -10820					; size = 8
tv78 = -10820						; size = 4
_param$136641 = -10812					; size = 8
_buttonRect$136631 = -10804				; size = 16
_flash$136567 = -10788					; size = 20
_rect$136551 = -10768					; size = 16
$T180143 = -10752					; size = 28
$T180144 = -10724					; size = 28
$T180145 = -10696					; size = 28
_label$136552 = -10668					; size = 28
_tmp$136611 = -10640					; size = 130
_tmp$136570 = -10508					; size = 130
_tmp$136587 = -10376					; size = 130
_s$136550 = -10244					; size = 2048
_szTmp$136590 = -8196					; size = 8192
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_PasswordDlgProc@16 PROC				; COMDAT

; 1892 : {

  00000	b8 44 2a 00 00	 mov	 eax, 10820		; 00002a44H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 40 2a
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+10820], eax

; 1893 : 	WORD lw = LOWORD (wParam);
; 1894 : 	static Password *szXPwd;	
; 1895 : 
; 1896 : 	switch (msg)

  00018	8b 84 24 4c 2a
	00 00		 mov	 eax, DWORD PTR _msg$[esp+10816]
  0001f	53		 push	 ebx
  00020	55		 push	 ebp
  00021	8b ac 24 58 2a
	00 00		 mov	 ebp, DWORD PTR _wParam$[esp+10824]
  00028	56		 push	 esi
  00029	8b b4 24 54 2a
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+10828]
  00030	57		 push	 edi
  00031	8b bc 24 64 2a
	00 00		 mov	 edi, DWORD PTR _lParam$[esp+10832]

; 2168 : 
; 2169 : 			while (count-- > 0)

  00038	89 6c 24 10	 mov	 DWORD PTR _wParam$GSCopy$[esp+10836], ebp
  0003c	3d 13 01 00 00	 cmp	 eax, 275		; 00000113H
  00041	0f 87 7b 07 00
	00		 ja	 $LN51@PasswordDl

; 1893 : 	WORD lw = LOWORD (wParam);
; 1894 : 	static Password *szXPwd;	
; 1895 : 
; 1896 : 	switch (msg)

  00047	0f 84 f1 05 00
	00		 je	 $LN32@PasswordDl
  0004d	83 e8 7b	 sub	 eax, 123		; 0000007bH
  00050	0f 84 59 05 00
	00		 je	 $LN6@PasswordDl
  00056	2d 95 00 00 00	 sub	 eax, 149		; 00000095H
  0005b	0f 84 b5 02 00
	00		 je	 $LN45@PasswordDl
  00061	83 e8 01	 sub	 eax, 1
  00064	0f 85 3e 05 00
	00		 jne	 $LN37@PasswordDl

; 2042 : 
; 2043 : 	case WM_COMMAND:
; 2044 : 
; 2045 : 		if (lw == IDC_MOUNT_OPTIONS)

  0006a	b8 03 04 00 00	 mov	 eax, 1027		; 00000403H
  0006f	66 3b e8	 cmp	 bp, ax
  00072	75 4c		 jne	 SHORT $LN24@PasswordDl

; 2046 : 		{
; 2047 : 			DialogBoxParamW (hInst, 
; 2048 : 				MAKEINTRESOURCEW (IDD_MOUNT_OPTIONS), hwndDlg,
; 2049 : 				(DLGPROC) MountOptionsDlgProc, (LPARAM) &mountOptions);

  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  0007a	68 00 00 00 00	 push	 OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  0007f	68 00 00 00 00	 push	 OFFSET _MountOptionsDlgProc@16
  00084	56		 push	 esi
  00085	68 f8 01 00 00	 push	 504			; 000001f8H
  0008a	51		 push	 ecx
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 2050 : 
; 2051 : 			if (!bPrebootPasswordDlgMode && mountOptions.PartitionInInactiveSysEncScope)

  00091	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bPrebootPasswordDlgMode, 0
  00098	0f 85 ca 08 00
	00		 jne	 $LN23@PasswordDl
  0009e	83 3d 10 00 00
	00 00		 cmp	 DWORD PTR ?mountOptions@@3UMountOptions@@A+16, 0
  000a5	0f 84 bd 08 00
	00		 je	 $LN23@PasswordDl

; 2052 : 				SendMessage (hwndDlg, TC_APPMSG_PREBOOT_PASSWORD_MODE, 0, 0);

  000ab	6a 00		 push	 0
  000ad	6a 00		 push	 0
  000af	68 cb 80 00 00	 push	 32971			; 000080cbH
  000b4	56		 push	 esi
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 2053 : 
; 2054 : 			return 1;

  000bb	e9 a8 08 00 00	 jmp	 $LN23@PasswordDl
$LN24@PasswordDl:

; 2055 : 		}
; 2056 : 
; 2057 : 		if (lw == IDC_SHOW_PASSWORD)

  000c0	ba 49 04 00 00	 mov	 edx, 1097		; 00000449H
  000c5	66 3b ea	 cmp	 bp, dx
  000c8	75 49		 jne	 SHORT $LN22@PasswordDl

; 2058 : 		{
; 2059 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PASSWORD),
; 2060 : 						EM_SETPASSWORDCHAR,
; 2061 : 						GetCheckBox (hwndDlg, IDC_SHOW_PASSWORD) ? 0 : '*',
; 2062 : 						0);

  000ca	6a 00		 push	 0
  000cc	52		 push	 edx
  000cd	56		 push	 esi
  000ce	e8 00 00 00 00	 call	 _GetCheckBox
  000d3	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  000d9	83 c4 08	 add	 esp, 8
  000dc	f7 d8		 neg	 eax
  000de	1b c0		 sbb	 eax, eax
  000e0	83 e0 d6	 and	 eax, -42		; ffffffd6H
  000e3	83 c0 2a	 add	 eax, 42			; 0000002aH
  000e6	50		 push	 eax
  000e7	68 cc 00 00 00	 push	 204			; 000000ccH
  000ec	68 0b 04 00 00	 push	 1035			; 0000040bH
  000f1	56		 push	 esi
  000f2	ff d7		 call	 edi
  000f4	50		 push	 eax
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 2063 : 			InvalidateRect (GetDlgItem (hwndDlg, IDC_PASSWORD), NULL, TRUE);

  000fb	6a 01		 push	 1
  000fd	6a 00		 push	 0
  000ff	68 0b 04 00 00	 push	 1035			; 0000040bH
  00104	56		 push	 esi
  00105	ff d7		 call	 edi
  00107	50		 push	 eax
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 2064 : 			return 1;

  0010e	e9 55 08 00 00	 jmp	 $LN23@PasswordDl
$LN22@PasswordDl:

; 2065 : 		}
; 2066 : 
; 2067 : 		if (lw == IDC_KEY_FILES)

  00113	b8 07 04 00 00	 mov	 eax, 1031		; 00000407H
  00118	66 3b e8	 cmp	 bp, ax
  0011b	75 61		 jne	 SHORT $LN21@PasswordDl

; 2068 : 		{
; 2069 : 			KeyFilesDlgParam param;
; 2070 : 			param.EnableKeyFiles = KeyFilesEnable;

  0011d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _KeyFilesEnable

; 2071 : 			param.FirstKeyFile = FirstKeyFile;

  00123	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _FirstKeyFile

; 2072 : 
; 2073 : 			if (IDOK == DialogBoxParamW (hInst,
; 2074 : 				MAKEINTRESOURCEW (IDD_KEYFILES), hwndDlg,
; 2075 : 				(DLGPROC) KeyFilesDlgProc, (LPARAM) &param))

  00129	8d 44 24 10	 lea	 eax, DWORD PTR _param$136601[esp+10836]
  0012d	50		 push	 eax
  0012e	68 00 00 00 00	 push	 OFFSET _KeyFilesDlgProc@16
  00133	56		 push	 esi
  00134	89 4c 24 1c	 mov	 DWORD PTR _param$136601[esp+10848], ecx
  00138	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  0013e	68 f9 01 00 00	 push	 505			; 000001f9H
  00143	51		 push	 ecx
  00144	89 54 24 28	 mov	 DWORD PTR _param$136601[esp+10860], edx
  00148	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  0014e	83 f8 01	 cmp	 eax, 1
  00151	0f 85 11 08 00
	00		 jne	 $LN23@PasswordDl

; 2076 : 			{
; 2077 : 				KeyFilesEnable = param.EnableKeyFiles;

  00157	8b 44 24 10	 mov	 eax, DWORD PTR _param$136601[esp+10836]

; 2078 : 				FirstKeyFile = param.FirstKeyFile;

  0015b	8b 54 24 14	 mov	 edx, DWORD PTR _param$136601[esp+10840]

; 2079 : 
; 2080 : 				SetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE, KeyFilesEnable);

  0015f	50		 push	 eax
  00160	68 c5 13 00 00	 push	 5061			; 000013c5H
  00165	56		 push	 esi
  00166	a3 00 00 00 00	 mov	 DWORD PTR _KeyFilesEnable, eax
  0016b	89 15 00 00 00
	00		 mov	 DWORD PTR _FirstKeyFile, edx
  00171	e8 00 00 00 00	 call	 _SetCheckBox
  00176	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2081 : 			}
; 2082 : 
; 2083 : 			return 1;

  00179	e9 ea 07 00 00	 jmp	 $LN23@PasswordDl
$LN21@PasswordDl:

; 2084 : 		}
; 2085 : 
; 2086 : 		if (lw == IDC_KEYFILES_ENABLE)

  0017e	b8 c5 13 00 00	 mov	 eax, 5061		; 000013c5H
  00183	66 3b e8	 cmp	 bp, ax
  00186	75 14		 jne	 SHORT $LN19@PasswordDl

; 2087 : 		{
; 2088 : 			KeyFilesEnable = GetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE);

  00188	50		 push	 eax
  00189	56		 push	 esi
  0018a	e8 00 00 00 00	 call	 _GetCheckBox
  0018f	83 c4 08	 add	 esp, 8
  00192	a3 00 00 00 00	 mov	 DWORD PTR _KeyFilesEnable, eax

; 2089 : 
; 2090 : 			return 1;

  00197	e9 cc 07 00 00	 jmp	 $LN23@PasswordDl
$LN19@PasswordDl:

; 2091 : 		}
; 2092 : 
; 2093 : 		if (lw == IDCANCEL || lw == IDOK)

  0019c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
  001a2	66 83 fd 02	 cmp	 bp, 2
  001a6	0f 84 ba 00 00
	00		 je	 $LN98@PasswordDl
  001ac	66 83 fd 01	 cmp	 bp, 1

; 2133 : 		}
; 2134 : 		return 0;

  001b0	0f 85 f2 03 00
	00		 jne	 $LN37@PasswordDl

; 2094 : 		{
; 2095 : 			WCHAR tmp[MAX_PASSWORD+1];
; 2096 : 			
; 2097 : 			if (lw == IDOK)
; 2098 : 			{
; 2099 : 				if (mountOptions.ProtectHiddenVolume && hidVolProtKeyFilesParam.EnableKeyFiles)

  001b6	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR ?mountOptions@@3UMountOptions@@A+8, 0
  001bd	74 1d		 je	 SHORT $LN15@PasswordDl
  001bf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hidVolProtKeyFilesParam, 0
  001c6	74 14		 je	 SHORT $LN15@PasswordDl

; 2100 : 					KeyFilesApply (&mountOptions.ProtectedHidVolPassword, hidVolProtKeyFilesParam.FirstKeyFile);

  001c8	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _hidVolProtKeyFilesParam+4
  001ce	51		 push	 ecx
  001cf	68 14 00 00 00	 push	 OFFSET ?mountOptions@@3UMountOptions@@A+20
  001d4	e8 00 00 00 00	 call	 _KeyFilesApply
  001d9	83 c4 08	 add	 esp, 8
$LN15@PasswordDl:

; 2101 : 
; 2102 : 				GetWindowTextW(GetDlgItem (hwndDlg, IDC_PASSWORD), tmp, sizeof(tmp)/sizeof(*tmp));

  001dc	6a 41		 push	 65			; 00000041H
  001de	8d 94 24 c8 00
	00 00		 lea	 edx, DWORD PTR _tmp$136611[esp+10840]
  001e5	52		 push	 edx
  001e6	68 0b 04 00 00	 push	 1035			; 0000040bH
  001eb	56		 push	 esi
  001ec	ff d3		 call	 ebx
  001ee	50		 push	 eax
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextW@12

; 2103 : 				ConvertUTF16toUTF8s((const UTF16*)tmp,sizeof(tmp)/sizeof(*tmp),(UTF8*)szXPwd->Text,sizeof(szXPwd->Text)/sizeof(*szXPwd->Text),strictConversion);

  001f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?szXPwd@?1??PasswordDlgProc@@9@16@4PAUPassword@@A
  001fa	6a 00		 push	 0
  001fc	6a 41		 push	 65			; 00000041H
  001fe	83 c0 04	 add	 eax, 4
  00201	50		 push	 eax
  00202	8d 8c 24 d0 00
	00 00		 lea	 ecx, DWORD PTR _tmp$136611[esp+10848]
  00209	6a 41		 push	 65			; 00000041H
  0020b	51		 push	 ecx
  0020c	e8 00 00 00 00	 call	 _ConvertUTF16toUTF8s

; 2104 : 				burn(tmp,sizeof(tmp));

  00211	8d 94 24 d8 00
	00 00		 lea	 edx, DWORD PTR _tmp$136611[esp+10856]
  00218	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  0021d	83 c4 14	 add	 esp, 20			; 00000014H
  00220	8b f9		 mov	 edi, ecx
  00222	8b c2		 mov	 eax, edx
$LL67@PasswordDl:
  00224	c6 00 00	 mov	 BYTE PTR [eax], 0
  00227	40		 inc	 eax
  00228	83 ef 01	 sub	 edi, 1
  0022b	75 f7		 jne	 SHORT $LL67@PasswordDl
  0022d	8d 49 00	 npad	 3
$LL11@PasswordDl:
  00230	49		 dec	 ecx
  00231	c6 02 00	 mov	 BYTE PTR [edx], 0
  00234	42		 inc	 edx
  00235	85 c9		 test	 ecx, ecx
  00237	75 f7		 jne	 SHORT $LL11@PasswordDl

; 2105 : 				szXPwd->Length = strlen ((char *) szXPwd->Text);

  00239	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?szXPwd@?1??PasswordDlgProc@@9@16@4PAUPassword@@A
  0023f	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  00242	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL84@PasswordDl:
  00245	8a 08		 mov	 cl, BYTE PTR [eax]
  00247	40		 inc	 eax
  00248	84 c9		 test	 cl, cl
  0024a	75 f9		 jne	 SHORT $LL84@PasswordDl

; 2106 : 
; 2107 : 				bCacheInDriver = IsButtonChecked (GetDlgItem (hwndDlg, IDC_CACHE));	 

  0024c	68 ed 03 00 00	 push	 1005			; 000003edH
  00251	2b c7		 sub	 eax, edi
  00253	56		 push	 esi
  00254	89 02		 mov	 DWORD PTR [edx], eax
  00256	ff d3		 call	 ebx
  00258	50		 push	 eax
  00259	e8 00 00 00 00	 call	 _IsButtonChecked
  0025e	83 c4 04	 add	 esp, 4
  00261	a3 00 00 00 00	 mov	 DWORD PTR ?bCacheInDriver@@3HA, eax ; bCacheInDriver
$LN98@PasswordDl:

; 2108 : 			}
; 2109 : 
; 2110 : 			// Attempt to wipe password stored in the input field buffer
; 2111 : 			memset (tmp, 0x20, sizeof(tmp)); //0x20 = ASCII space or 0x2020 = Unicode DAGGER

  00266	68 82 00 00 00	 push	 130			; 00000082H
  0026b	8d 94 24 c8 00
	00 00		 lea	 edx, DWORD PTR _tmp$136611[esp+10840]
  00272	6a 20		 push	 32			; 00000020H
  00274	52		 push	 edx
  00275	e8 00 00 00 00	 call	 _memset
  0027a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2112 : 			tmp[MAX_PASSWORD] = 0;
; 2113 : 			SetWindowTextW(GetDlgItem (hwndDlg, IDC_PASSWORD), tmp);	

  0027d	8d 8c 24 c4 00
	00 00		 lea	 ecx, DWORD PTR _tmp$136611[esp+10836]
  00284	51		 push	 ecx
  00285	68 0b 04 00 00	 push	 1035			; 0000040bH
  0028a	33 c0		 xor	 eax, eax
  0028c	56		 push	 esi
  0028d	66 89 84 24 50
	01 00 00	 mov	 WORD PTR _tmp$136611[esp+10976], ax
  00295	ff d3		 call	 ebx
  00297	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  0029d	50		 push	 eax
  0029e	ff d7		 call	 edi

; 2114 : 			SetWindowTextW(GetDlgItem (hwndDlg, IDC_PASSWORD_PROT_HIDVOL), tmp);	

  002a0	8d 94 24 c4 00
	00 00		 lea	 edx, DWORD PTR _tmp$136611[esp+10836]
  002a7	52		 push	 edx
  002a8	68 cc 13 00 00	 push	 5068			; 000013ccH
  002ad	56		 push	 esi
  002ae	ff d3		 call	 ebx
  002b0	50		 push	 eax
  002b1	ff d7		 call	 edi

; 2115 : 
; 2116 : 			if (hidVolProtKeyFilesParam.FirstKeyFile != NULL)

  002b3	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR _hidVolProtKeyFilesParam+4, 0
  002ba	74 17		 je	 SHORT $LN99@PasswordDl

; 2117 : 			{
; 2118 : 				KeyFileRemoveAll (&hidVolProtKeyFilesParam.FirstKeyFile);

  002bc	68 04 00 00 00	 push	 OFFSET _hidVolProtKeyFilesParam+4
  002c1	e8 00 00 00 00	 call	 _KeyFileRemoveAll
  002c6	83 c4 04	 add	 esp, 4

; 2119 : 				hidVolProtKeyFilesParam.EnableKeyFiles = FALSE;

  002c9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _hidVolProtKeyFilesParam, 0
$LN99@PasswordDl:

; 2120 : 			}
; 2121 : 
; 2122 : 			if (bPrebootPasswordDlgMode)

  002d3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bPrebootPasswordDlgMode, 0
  002da	74 2a		 je	 SHORT $LN7@PasswordDl

; 2123 : 			{
; 2124 : 				KillTimer (hwndDlg, TIMER_ID_KEYB_LAYOUT_GUARD);

  002dc	68 00 01 00 00	 push	 256			; 00000100H
  002e1	56		 push	 esi
  002e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 2125 : 
; 2126 : 				// Restore the original keyboard layout
; 2127 : 				if (LoadKeyboardLayout (OrigKeyboardLayout, KLF_ACTIVATE | KLF_SUBSTITUTE_OK) == NULL) 

  002e8	6a 03		 push	 3
  002ea	68 00 00 00 00	 push	 OFFSET ?OrigKeyboardLayout@@3PADA ; OrigKeyboardLayout
  002ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadKeyboardLayoutA@8
  002f5	85 c0		 test	 eax, eax
  002f7	75 0d		 jne	 SHORT $LN7@PasswordDl

; 2128 : 					Warning ("CANNOT_RESTORE_KEYBOARD_LAYOUT");

  002f9	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BGCHIACG@CANNOT_RESTORE_KEYBOARD_LAYOUT?$AA@
  002fe	e8 00 00 00 00	 call	 _Warning
  00303	83 c4 04	 add	 esp, 4
$LN7@PasswordDl:

; 2129 : 			}
; 2130 : 
; 2131 : 			EndDialog (hwndDlg, lw);

  00306	0f b7 c5	 movzx	 eax, bp
  00309	50		 push	 eax
  0030a	56		 push	 esi
  0030b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 2132 : 			return 1;

  00311	e9 52 06 00 00	 jmp	 $LN23@PasswordDl
$LN45@PasswordDl:

; 1897 : 	{
; 1898 : 	case WM_INITDIALOG:
; 1899 : 		{
; 1900 : 			szXPwd = (Password *) lParam;
; 1901 : 			LocalizeDialog (hwndDlg, "IDD_PASSWORD_DLG");

  00316	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@HOAEAIOP@IDD_PASSWORD_DLG?$AA@
  0031b	56		 push	 esi
  0031c	89 3d 00 00 00
	00		 mov	 DWORD PTR ?szXPwd@?1??PasswordDlgProc@@9@16@4PAUPassword@@A, edi
  00322	e8 00 00 00 00	 call	 _LocalizeDialog
  00327	83 c4 08	 add	 esp, 8

; 1902 : 			DragAcceptFiles (hwndDlg, TRUE);

  0032a	6a 01		 push	 1
  0032c	56		 push	 esi
  0032d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragAcceptFiles@8

; 1903 : 
; 1904 : 			if (PasswordDialogTitleStringId)

  00333	a1 00 00 00 00	 mov	 eax, DWORD PTR _PasswordDialogTitleStringId
  00338	33 ed		 xor	 ebp, ebp
  0033a	3b c5		 cmp	 eax, ebp
  0033c	74 16		 je	 SHORT $LN44@PasswordDl

; 1905 : 			{
; 1906 : 				SetWindowTextW (hwndDlg, GetString (PasswordDialogTitleStringId));

  0033e	50		 push	 eax
  0033f	e8 00 00 00 00	 call	 _GetString
  00344	83 c4 04	 add	 esp, 4
  00347	50		 push	 eax
  00348	56		 push	 esi
  00349	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  0034f	e9 67 01 00 00	 jmp	 $LN42@PasswordDl
$LN44@PasswordDl:

; 1907 : 			}
; 1908 : 			else if (strlen (PasswordDlgVolume) > 0)

  00354	b8 00 00 00 00	 mov	 eax, OFFSET _PasswordDlgVolume
  00359	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0035c	8d 64 24 00	 npad	 4
$LL85@PasswordDl:
  00360	8a 08		 mov	 cl, BYTE PTR [eax]
  00362	40		 inc	 eax
  00363	84 c9		 test	 cl, cl
  00365	75 f9		 jne	 SHORT $LL85@PasswordDl
  00367	2b c2		 sub	 eax, edx
  00369	0f 84 4c 01 00
	00		 je	 $LN42@PasswordDl

; 1909 : 			{
; 1910 : 				wchar_t s[1024];
; 1911 : 				RECT rect;
; 1912 : 				GetWindowRect (hwndDlg, &rect);

  0036f	8d 4c 24 44	 lea	 ecx, DWORD PTR _rect$136551[esp+10836]
  00373	51		 push	 ecx
  00374	56		 push	 esi
  00375	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 1913 : 
; 1914 : 				wstring label = GetFavoriteVolumeLabel (PasswordDlgVolume);

  0037b	68 00 00 00 00	 push	 OFFSET _PasswordDlgVolume
  00380	8d 4c 24 58	 lea	 ecx, DWORD PTR $T180143[esp+10840]
  00384	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00389	8d 54 24 54	 lea	 edx, DWORD PTR $T180143[esp+10836]
  0038d	52		 push	 edx
  0038e	8d 84 24 ac 00
	00 00		 lea	 eax, DWORD PTR _label$136552[esp+10840]
  00395	50		 push	 eax
  00396	e8 00 00 00 00	 call	 ?GetFavoriteVolumeLabel@CipherShed@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ; CipherShed::GetFavoriteVolumeLabel
  0039b	83 c4 08	 add	 esp, 8
  0039e	8d 4c 24 54	 lea	 ecx, DWORD PTR $T180143[esp+10836]
  003a2	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1915 : 				if (!label.empty())

  003a7	39 ac 24 bc 00
	00 00		 cmp	 DWORD PTR _label$136552[esp+10856], ebp
  003ae	74 3d		 je	 SHORT $LN41@PasswordDl

; 1916 : 				{
; 1917 : 					wsprintfW (s, GetString ("ENTER_PASSWORD_FOR_LABEL"), label.c_str());

  003b0	83 bc 24 c0 00
	00 00 08	 cmp	 DWORD PTR _label$136552[esp+10860], 8
  003b8	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR _label$136552[esp+10840]
  003bf	73 07		 jae	 SHORT $LN59@PasswordDl
  003c1	8d 84 24 ac 00
	00 00		 lea	 eax, DWORD PTR _label$136552[esp+10840]
$LN59@PasswordDl:
  003c8	50		 push	 eax
  003c9	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@NGNFBMFD@ENTER_PASSWORD_FOR_LABEL?$AA@
  003ce	e8 00 00 00 00	 call	 _GetString
  003d3	83 c4 04	 add	 esp, 4
  003d6	50		 push	 eax
  003d7	8d 8c 24 58 02
	00 00		 lea	 ecx, DWORD PTR _s$136550[esp+10844]
  003de	51		 push	 ecx
  003df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  003e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1918 : 				}
; 1919 : 				else

  003e8	e9 b3 00 00 00	 jmp	 $LN40@PasswordDl
$LN41@PasswordDl:

; 1920 : 				{
; 1921 : 					wsprintfW (s, GetString ("ENTER_PASSWORD_FOR"), "___");

  003ed	68 00 00 00 00	 push	 OFFSET ??_C@_03BHBGBHAB@___?$AA@
  003f2	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OPCEEDMD@ENTER_PASSWORD_FOR?$AA@
  003f7	e8 00 00 00 00	 call	 _GetString
  003fc	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__wsprintfW
  00402	83 c4 04	 add	 esp, 4
  00405	50		 push	 eax
  00406	8d 94 24 58 02
	00 00		 lea	 edx, DWORD PTR _s$136550[esp+10844]
  0040d	52		 push	 edx
  0040e	ff d7		 call	 edi
  00410	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1922 : 					wsprintfW (s, GetString ("ENTER_PASSWORD_FOR"), FitPathInGfxWidth (hwndDlg, WindowTitleBarFont, rect.right - rect.left - GetTextGfxWidth (hwndDlg, s, WindowTitleBarFont), PasswordDlgVolume).c_str());

  00413	68 00 00 00 00	 push	 OFFSET _PasswordDlgVolume
  00418	8d 4c 24 74	 lea	 ecx, DWORD PTR $T180144[esp+10840]
  0041c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00421	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WindowTitleBarFont
  00427	8d 44 24 70	 lea	 eax, DWORD PTR $T180144[esp+10836]
  0042b	50		 push	 eax
  0042c	51		 push	 ecx
  0042d	8d 94 24 58 02
	00 00		 lea	 edx, DWORD PTR _s$136550[esp+10844]
  00434	52		 push	 edx
  00435	56		 push	 esi
  00436	e8 00 00 00 00	 call	 _GetTextGfxWidth
  0043b	8b 4c 24 5c	 mov	 ecx, DWORD PTR _rect$136551[esp+10860]
  0043f	2b 4c 24 54	 sub	 ecx, DWORD PTR _rect$136551[esp+10852]
  00443	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WindowTitleBarFont
  00449	83 c4 0c	 add	 esp, 12			; 0000000cH
  0044c	2b c8		 sub	 ecx, eax
  0044e	51		 push	 ecx
  0044f	52		 push	 edx
  00450	8d 84 24 98 00
	00 00		 lea	 eax, DWORD PTR $T180145[esp+10848]
  00457	56		 push	 esi
  00458	50		 push	 eax
  00459	e8 00 00 00 00	 call	 ?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z ; FitPathInGfxWidth
  0045e	83 c4 14	 add	 esp, 20			; 00000014H
  00461	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00465	72 05		 jb	 SHORT $LN64@PasswordDl
  00467	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0046a	eb 03		 jmp	 SHORT $LN65@PasswordDl
$LN64@PasswordDl:
  0046c	83 c0 04	 add	 eax, 4
$LN65@PasswordDl:
  0046f	50		 push	 eax
  00470	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OPCEEDMD@ENTER_PASSWORD_FOR?$AA@
  00475	e8 00 00 00 00	 call	 _GetString
  0047a	83 c4 04	 add	 esp, 4
  0047d	50		 push	 eax
  0047e	8d 8c 24 58 02
	00 00		 lea	 ecx, DWORD PTR _s$136550[esp+10844]
  00485	51		 push	 ecx
  00486	ff d7		 call	 edi
  00488	83 c4 0c	 add	 esp, 12			; 0000000cH
  0048b	8d 8c 24 8c 00
	00 00		 lea	 ecx, DWORD PTR $T180145[esp+10836]
  00492	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00497	8d 4c 24 70	 lea	 ecx, DWORD PTR $T180144[esp+10836]
  0049b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN40@PasswordDl:

; 1923 : 				}
; 1924 : 
; 1925 : 				SetWindowTextW (hwndDlg, s);

  004a0	8d 94 24 50 02
	00 00		 lea	 edx, DWORD PTR _s$136550[esp+10836]
  004a7	52		 push	 edx
  004a8	56		 push	 esi
  004a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 1926 : 			}

  004af	8d 8c 24 a8 00
	00 00		 lea	 ecx, DWORD PTR _label$136552[esp+10836]
  004b6	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN42@PasswordDl:

; 1927 : 
; 1928 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PASSWORD), EM_LIMITTEXT, MAX_PASSWORD, 0);

  004bb	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  004c1	55		 push	 ebp
  004c2	6a 40		 push	 64			; 00000040H
  004c4	68 c5 00 00 00	 push	 197			; 000000c5H
  004c9	68 0b 04 00 00	 push	 1035			; 0000040bH
  004ce	56		 push	 esi
  004cf	ff d7		 call	 edi
  004d1	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  004d7	50		 push	 eax
  004d8	ff d3		 call	 ebx

; 1929 : 			SendMessage (GetDlgItem (hwndDlg, IDC_CACHE), BM_SETCHECK, bCacheInDriver ? BST_CHECKED:BST_UNCHECKED, 0);

  004da	33 c0		 xor	 eax, eax
  004dc	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?bCacheInDriver@@3HA, ebp ; bCacheInDriver
  004e2	55		 push	 ebp
  004e3	0f 95 c0	 setne	 al
  004e6	50		 push	 eax
  004e7	68 f1 00 00 00	 push	 241			; 000000f1H
  004ec	68 ed 03 00 00	 push	 1005			; 000003edH
  004f1	56		 push	 esi
  004f2	ff d7		 call	 edi
  004f4	50		 push	 eax
  004f5	ff d3		 call	 ebx

; 1930 : 
; 1931 : 			SetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE, KeyFilesEnable);

  004f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _KeyFilesEnable
  004fd	51		 push	 ecx
  004fe	68 c5 13 00 00	 push	 5061			; 000013c5H
  00503	56		 push	 esi
  00504	e8 00 00 00 00	 call	 _SetCheckBox

; 1932 : 
; 1933 : 			mountOptions.PartitionInInactiveSysEncScope = bPrebootPasswordDlgMode;

  00509	a1 00 00 00 00	 mov	 eax, DWORD PTR _bPrebootPasswordDlgMode
  0050e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00511	a3 10 00 00 00	 mov	 DWORD PTR ?mountOptions@@3UMountOptions@@A+16, eax

; 1934 : 
; 1935 : 			if (bPrebootPasswordDlgMode)

  00516	3b c5		 cmp	 eax, ebp
  00518	74 0a		 je	 SHORT $LN39@PasswordDl

; 1936 : 			{
; 1937 : 				SendMessage (hwndDlg, TC_APPMSG_PREBOOT_PASSWORD_MODE, 0, 0);

  0051a	55		 push	 ebp
  0051b	55		 push	 ebp
  0051c	68 cb 80 00 00	 push	 32971			; 000080cbH
  00521	56		 push	 esi
  00522	ff d3		 call	 ebx
$LN39@PasswordDl:

; 1938 : 			}
; 1939 : 
; 1940 : 			if (PasswordDialogDisableMountOptions)

  00524	39 2d 00 00 00
	00		 cmp	 DWORD PTR _PasswordDialogDisableMountOptions, ebp
  0052a	74 1e		 je	 SHORT $LN38@PasswordDl

; 1941 : 			{
; 1942 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_CACHE), FALSE);

  0052c	55		 push	 ebp
  0052d	68 ed 03 00 00	 push	 1005			; 000003edH
  00532	56		 push	 esi
  00533	ff d7		 call	 edi
  00535	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  0053b	50		 push	 eax
  0053c	ff d3		 call	 ebx

; 1943 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_MOUNT_OPTIONS), FALSE);

  0053e	55		 push	 ebp
  0053f	68 03 04 00 00	 push	 1027			; 00000403H
  00544	56		 push	 esi
  00545	ff d7		 call	 edi
  00547	50		 push	 eax
  00548	ff d3		 call	 ebx
$LN38@PasswordDl:

; 1944 : 			}
; 1945 : 
; 1946 : 			if (!SetForegroundWindow (hwndDlg) && (FavoriteMountOnArrivalInProgress || LogOn))

  0054a	56		 push	 esi
  0054b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetForegroundWindow@4
  00551	85 c0		 test	 eax, eax
  00553	75 53		 jne	 SHORT $LN37@PasswordDl
  00555	39 2d 00 00 00
	00		 cmp	 DWORD PTR _FavoriteMountOnArrivalInProgress, ebp
  0055b	75 08		 jne	 SHORT $LN36@PasswordDl
  0055d	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?LogOn@@3HA, ebp ; LogOn
  00563	74 43		 je	 SHORT $LN37@PasswordDl
$LN36@PasswordDl:

; 1947 : 			{
; 1948 : 				SetWindowPos (hwndDlg, HWND_TOPMOST, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE);

  00565	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowPos@28
  0056b	6a 03		 push	 3
  0056d	55		 push	 ebp
  0056e	55		 push	 ebp
  0056f	55		 push	 ebp
  00570	55		 push	 ebp
  00571	6a ff		 push	 -1
  00573	56		 push	 esi
  00574	ff d7		 call	 edi

; 1949 : 
; 1950 : 				FLASHWINFO flash;
; 1951 : 				flash.cbSize = sizeof (flash);
; 1952 : 				flash.dwFlags = FLASHW_ALL | FLASHW_TIMERNOFG;
; 1953 : 				flash.dwTimeout = 0;
; 1954 : 				flash.hwnd = hwndDlg;
; 1955 : 				flash.uCount = 0;
; 1956 : 
; 1957 : 				FlashWindowEx (&flash);

  00576	8d 54 24 30	 lea	 edx, DWORD PTR _flash$136567[esp+10836]
  0057a	52		 push	 edx
  0057b	c7 44 24 34 14
	00 00 00	 mov	 DWORD PTR _flash$136567[esp+10840], 20 ; 00000014H
  00583	c7 44 24 3c 0f
	00 00 00	 mov	 DWORD PTR _flash$136567[esp+10848], 15 ; 0000000fH
  0058b	89 6c 24 44	 mov	 DWORD PTR _flash$136567[esp+10856], ebp
  0058f	89 74 24 38	 mov	 DWORD PTR _flash$136567[esp+10844], esi
  00593	89 6c 24 40	 mov	 DWORD PTR _flash$136567[esp+10852], ebp
  00597	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FlashWindowEx@4

; 1958 : 
; 1959 : 				SetWindowPos (hwndDlg, HWND_NOTOPMOST, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE);

  0059d	6a 03		 push	 3
  0059f	55		 push	 ebp
  005a0	55		 push	 ebp
  005a1	55		 push	 ebp
  005a2	55		 push	 ebp
  005a3	6a fe		 push	 -2			; fffffffeH
  005a5	56		 push	 esi
  005a6	ff d7		 call	 edi
$LN37@PasswordDl:

; 1960 : 			}
; 1961 : 		}
; 1962 : 		return 0;

  005a8	33 c0		 xor	 eax, eax
  005aa	e9 be 03 00 00	 jmp	 $LN48@PasswordDl
$LN6@PasswordDl:

; 2135 : 
; 2136 : 	case WM_CONTEXTMENU:
; 2137 : 		{
; 2138 : 			RECT buttonRect;
; 2139 : 			GetWindowRect (GetDlgItem (hwndDlg, IDC_KEY_FILES), &buttonRect);

  005af	8d 44 24 20	 lea	 eax, DWORD PTR _buttonRect$136631[esp+10836]
  005b3	50		 push	 eax
  005b4	68 07 04 00 00	 push	 1031			; 00000407H
  005b9	56		 push	 esi
  005ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  005c0	50		 push	 eax
  005c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 2140 : 
; 2141 : 			if (LOWORD (lParam) >= buttonRect.left && LOWORD (lParam) <= buttonRect.right
; 2142 : 				&& HIWORD (lParam) >= buttonRect.top && HIWORD (lParam) <= buttonRect.bottom)

  005c7	8b 54 24 20	 mov	 edx, DWORD PTR _buttonRect$136631[esp+10836]
  005cb	0f b7 c7	 movzx	 eax, di
  005ce	3b c2		 cmp	 eax, edx
  005d0	7c d6		 jl	 SHORT $LN37@PasswordDl
  005d2	3b 44 24 28	 cmp	 eax, DWORD PTR _buttonRect$136631[esp+10844]
  005d6	7f d0		 jg	 SHORT $LN37@PasswordDl
  005d8	8b 4c 24 24	 mov	 ecx, DWORD PTR _buttonRect$136631[esp+10840]
  005dc	c1 ef 10	 shr	 edi, 16			; 00000010H
  005df	3b f9		 cmp	 edi, ecx
  005e1	7c c5		 jl	 SHORT $LN37@PasswordDl
  005e3	3b 7c 24 2c	 cmp	 edi, DWORD PTR _buttonRect$136631[esp+10848]
  005e7	7f bf		 jg	 SHORT $LN37@PasswordDl

; 2143 : 			{
; 2144 : 				// The "Keyfiles" button has been right-clicked
; 2145 : 
; 2146 : 				KeyFilesDlgParam param;
; 2147 : 				param.EnableKeyFiles = KeyFilesEnable;

  005e9	a1 00 00 00 00	 mov	 eax, DWORD PTR _KeyFilesEnable
  005ee	89 44 24 18	 mov	 DWORD PTR _param$136641[esp+10836], eax

; 2148 : 				param.FirstKeyFile = FirstKeyFile;

  005f2	a1 00 00 00 00	 mov	 eax, DWORD PTR _FirstKeyFile
  005f7	89 44 24 1c	 mov	 DWORD PTR _param$136641[esp+10840], eax

; 2149 : 
; 2150 : 				POINT popupPos;
; 2151 : 				popupPos.x = buttonRect.left + 2;

  005fb	8d 42 02	 lea	 eax, DWORD PTR [edx+2]

; 2152 : 				popupPos.y = buttonRect.top + 2;
; 2153 : 
; 2154 : 				if (KeyfilesPopupMenu (hwndDlg, popupPos, &param))

  005fe	8d 54 24 18	 lea	 edx, DWORD PTR _param$136641[esp+10836]
  00602	52		 push	 edx
  00603	83 c1 02	 add	 ecx, 2
  00606	51		 push	 ecx
  00607	50		 push	 eax
  00608	56		 push	 esi
  00609	e8 00 00 00 00	 call	 _KeyfilesPopupMenu
  0060e	83 c4 10	 add	 esp, 16			; 00000010H
  00611	85 c0		 test	 eax, eax
  00613	74 93		 je	 SHORT $LN37@PasswordDl

; 2155 : 				{
; 2156 : 					KeyFilesEnable = param.EnableKeyFiles;

  00615	8b 44 24 18	 mov	 eax, DWORD PTR _param$136641[esp+10836]

; 2157 : 					FirstKeyFile = param.FirstKeyFile;

  00619	8b 4c 24 1c	 mov	 ecx, DWORD PTR _param$136641[esp+10840]

; 2158 : 					SetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE, KeyFilesEnable);

  0061d	50		 push	 eax
  0061e	68 c5 13 00 00	 push	 5061			; 000013c5H
  00623	56		 push	 esi
  00624	a3 00 00 00 00	 mov	 DWORD PTR _KeyFilesEnable, eax
  00629	89 0d 00 00 00
	00		 mov	 DWORD PTR _FirstKeyFile, ecx
  0062f	e8 00 00 00 00	 call	 _SetCheckBox
  00634	83 c4 0c	 add	 esp, 12			; 0000000cH
  00637	33 c0		 xor	 eax, eax
  00639	e9 2f 03 00 00	 jmp	 $LN48@PasswordDl
$LN32@PasswordDl:

; 2002 : 
; 2003 : 	case WM_TIMER:
; 2004 : 		switch (wParam)

  0063e	81 fd 00 01 00
	00		 cmp	 ebp, 256		; 00000100H

; 2040 : 		}
; 2041 : 		return 0;

  00644	0f 85 5e ff ff
	ff		 jne	 $LN37@PasswordDl

; 2005 : 		{
; 2006 : 		case TIMER_ID_KEYB_LAYOUT_GUARD:
; 2007 : 			if (bPrebootPasswordDlgMode)

  0064a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bPrebootPasswordDlgMode, 0
  00651	0f 84 11 03 00
	00		 je	 $LN23@PasswordDl

; 2008 : 			{
; 2009 : 				DWORD keybLayout = (DWORD) GetKeyboardLayout (NULL);

  00657	6a 00		 push	 0
  00659	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyboardLayout@4

; 2010 : 
; 2011 : 				if (keybLayout != 0x00000409 && keybLayout != 0x04090409)

  0065f	3d 09 04 00 00	 cmp	 eax, 1033		; 00000409H
  00664	0f 84 fe 02 00
	00		 je	 $LN23@PasswordDl
  0066a	3d 09 04 09 04	 cmp	 eax, 67699721		; 04090409H
  0066f	0f 84 f3 02 00
	00		 je	 $LN23@PasswordDl

; 2012 : 				{
; 2013 : 					// Keyboard layout is not standard US
; 2014 : 
; 2015 : 					// Attempt to wipe the password stored in the input field buffer
; 2016 : 					WCHAR tmp[MAX_PASSWORD+1];
; 2017 : 					memset (tmp, 0x20, sizeof(tmp)); //0x20 = ASCII space or 0x2020 = Unicode DAGGER

  00675	68 82 00 00 00	 push	 130			; 00000082H
  0067a	8d 94 24 d0 01
	00 00		 lea	 edx, DWORD PTR _tmp$136587[esp+10840]
  00681	6a 20		 push	 32			; 00000020H
  00683	52		 push	 edx
  00684	e8 00 00 00 00	 call	 _memset

; 2018 : 					tmp [MAX_PASSWORD] = 0;
; 2019 : 					SetWindowTextW(GetDlgItem (hwndDlg, IDC_PASSWORD), tmp);

  00689	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  0068f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00692	8d 8c 24 cc 01
	00 00		 lea	 ecx, DWORD PTR _tmp$136587[esp+10836]
  00699	51		 push	 ecx
  0069a	68 0b 04 00 00	 push	 1035			; 0000040bH
  0069f	33 c0		 xor	 eax, eax
  006a1	56		 push	 esi
  006a2	66 89 84 24 58
	02 00 00	 mov	 WORD PTR _tmp$136587[esp+10976], ax
  006aa	ff d7		 call	 edi
  006ac	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextW@8
  006b2	50		 push	 eax
  006b3	ff d3		 call	 ebx

; 2020 : 					SetWindowTextW(GetDlgItem (hwndDlg, IDC_PASSWORD), L"");

  006b5	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  006ba	68 0b 04 00 00	 push	 1035			; 0000040bH
  006bf	56		 push	 esi
  006c0	ff d7		 call	 edi
  006c2	50		 push	 eax
  006c3	ff d3		 call	 ebx

; 2021 : 
; 2022 : 					keybLayout = (DWORD) LoadKeyboardLayout ("00000409", KLF_ACTIVATE);

  006c5	6a 01		 push	 1
  006c7	68 00 00 00 00	 push	 OFFSET ??_C@_08OKJEGFFL@00000409?$AA@
  006cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadKeyboardLayoutA@8

; 2023 : 
; 2024 : 					if (keybLayout != 0x00000409 && keybLayout != 0x04090409)

  006d2	3d 09 04 00 00	 cmp	 eax, 1033		; 00000409H
  006d7	74 2a		 je	 SHORT $LN26@PasswordDl
  006d9	3d 09 04 09 04	 cmp	 eax, 67699721		; 04090409H
  006de	74 23		 je	 SHORT $LN26@PasswordDl

; 2025 : 					{
; 2026 : 						KillTimer (hwndDlg, TIMER_ID_KEYB_LAYOUT_GUARD);

  006e0	55		 push	 ebp
  006e1	56		 push	 esi
  006e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8
$LN108@PasswordDl:

; 2027 : 						Error ("CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_ENCRYPTION");

  006e8	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@KAEHBIEI@CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_@
$LN109@PasswordDl:
  006ed	e8 00 00 00 00	 call	 _Error
  006f2	83 c4 04	 add	 esp, 4

; 2028 : 						EndDialog (hwndDlg, IDCANCEL);

  006f5	6a 02		 push	 2
  006f7	56		 push	 esi
  006f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 2029 : 						return 1;

  006fe	e9 65 02 00 00	 jmp	 $LN23@PasswordDl
$LN26@PasswordDl:

; 2030 : 					}
; 2031 : 
; 2032 : 					wchar_t szTmp [4096];
; 2033 : 					wcscpy (szTmp, GetString ("KEYB_LAYOUT_CHANGE_PREVENTED"));

  00703	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MNCKOJDH@KEYB_LAYOUT_CHANGE_PREVENTED?$AA@
  00708	e8 00 00 00 00	 call	 _GetString
  0070d	83 c4 04	 add	 esp, 4
  00710	8d 94 24 50 0a
	00 00		 lea	 edx, DWORD PTR _szTmp$136590[esp+10836]
$LL50@PasswordDl:
  00717	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0071a	66 89 0a	 mov	 WORD PTR [edx], cx
  0071d	83 c0 02	 add	 eax, 2
  00720	83 c2 02	 add	 edx, 2
  00723	66 85 c9	 test	 cx, cx
  00726	75 ef		 jne	 SHORT $LL50@PasswordDl

; 2034 : 					wcscat (szTmp, L"\n\n");

  00728	8d 84 24 50 0a
	00 00		 lea	 eax, DWORD PTR _szTmp$136590[esp+10836]
  0072f	83 c0 fe	 add	 eax, -2			; fffffffeH
$LL86@PasswordDl:
  00732	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  00736	83 c0 02	 add	 eax, 2
  00739	66 85 c9	 test	 cx, cx
  0073c	75 f4		 jne	 SHORT $LL86@PasswordDl
  0073e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  00744	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@+4
  0074b	89 10		 mov	 DWORD PTR [eax], edx

; 2035 : 					wcscat (szTmp, GetString ("KEYB_LAYOUT_SYS_ENC_EXPLANATION"));

  0074d	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HGCGAMEK@KEYB_LAYOUT_SYS_ENC_EXPLANATION?$AA@
  00752	66 89 48 04	 mov	 WORD PTR [eax+4], cx
  00756	e8 00 00 00 00	 call	 _GetString
  0075b	83 c4 04	 add	 esp, 4
  0075e	8b d0		 mov	 edx, eax
$LL87@PasswordDl:
  00760	66 8b 08	 mov	 cx, WORD PTR [eax]
  00763	83 c0 02	 add	 eax, 2
  00766	66 85 c9	 test	 cx, cx
  00769	75 f5		 jne	 SHORT $LL87@PasswordDl
  0076b	8d bc 24 50 0a
	00 00		 lea	 edi, DWORD PTR _szTmp$136590[esp+10836]
  00772	2b c2		 sub	 eax, edx
  00774	83 c7 fe	 add	 edi, -2			; fffffffeH
  00777	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL88@PasswordDl:
  00780	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  00784	83 c7 02	 add	 edi, 2
  00787	66 85 c9	 test	 cx, cx
  0078a	75 f4		 jne	 SHORT $LL88@PasswordDl
  0078c	8b c8		 mov	 ecx, eax
  0078e	c1 e9 02	 shr	 ecx, 2
  00791	8b f2		 mov	 esi, edx

; 2036 : 					MessageBoxW (MainDlg, szTmp, lpszTitle, MB_ICONWARNING | MB_SETFOREGROUND | MB_TOPMOST);

  00793	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  00799	f3 a5		 rep movsd
  0079b	8b c8		 mov	 ecx, eax
  0079d	68 30 00 05 00	 push	 327728			; 00050030H
  007a2	83 e1 03	 and	 ecx, 3
  007a5	52		 push	 edx
  007a6	8d 84 24 58 0a
	00 00		 lea	 eax, DWORD PTR _szTmp$136590[esp+10844]
  007ad	f3 a4		 rep movsb
  007af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  007b5	50		 push	 eax
  007b6	51		 push	 ecx
  007b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 2037 : 				}
; 2038 : 			}
; 2039 : 			return 1;

  007bd	e9 a6 01 00 00	 jmp	 $LN23@PasswordDl
$LN51@PasswordDl:

; 1893 : 	WORD lw = LOWORD (wParam);
; 1894 : 	static Password *szXPwd;	
; 1895 : 
; 1896 : 	switch (msg)

  007c2	3d 33 02 00 00	 cmp	 eax, 563		; 00000233H
  007c7	0f 84 1e 01 00
	00		 je	 $LN3@PasswordDl
  007cd	3d cb 80 00 00	 cmp	 eax, 32971		; 000080cbH

; 2181 : 	}
; 2182 : 
; 2183 : 	return 0;

  007d2	0f 85 d0 fd ff
	ff		 jne	 $LN37@PasswordDl
  007d8	68 0b 04 00 00	 push	 1035			; 0000040bH
  007dd	56		 push	 esi
  007de	e8 00 00 00 00	 call	 _ToBootPwdField
  007e3	68 82 00 00 00	 push	 130			; 00000082H
  007e8	8d 94 24 54 01
	00 00		 lea	 edx, DWORD PTR _tmp$136570[esp+10848]
  007ef	6a 20		 push	 32			; 00000020H
  007f1	52		 push	 edx
  007f2	e8 00 00 00 00	 call	 _memset
  007f7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  007fd	83 c4 14	 add	 esp, 20			; 00000014H
  00800	8d 8c 24 48 01
	00 00		 lea	 ecx, DWORD PTR _tmp$136570[esp+10836]
  00807	51		 push	 ecx
  00808	68 0b 04 00 00	 push	 1035			; 0000040bH
  0080d	33 c0		 xor	 eax, eax
  0080f	56		 push	 esi
  00810	66 89 84 24 d4
	01 00 00	 mov	 WORD PTR _tmp$136570[esp+10976], ax
  00818	ff d7		 call	 edi
  0081a	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextW@8
  00820	50		 push	 eax
  00821	ff d3		 call	 ebx
  00823	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  00828	68 0b 04 00 00	 push	 1035			; 0000040bH
  0082d	56		 push	 esi
  0082e	ff d7		 call	 edi
  00830	50		 push	 eax
  00831	ff d3		 call	 ebx
  00833	6a 00		 push	 0
  00835	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyboardLayout@4
  0083b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00840	50		 push	 eax
  00841	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMNDDED@?$CF08X?$AA@
  00846	68 00 00 00 00	 push	 OFFSET ?OrigKeyboardLayout@@3PADA ; OrigKeyboardLayout
  0084b	e8 00 00 00 00	 call	 _sprintf
  00850	83 c4 0c	 add	 esp, 12			; 0000000cH
  00853	6a 01		 push	 1
  00855	68 00 00 00 00	 push	 OFFSET ??_C@_08OKJEGFFL@00000409?$AA@
  0085a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadKeyboardLayoutA@8
  00860	3d 09 04 00 00	 cmp	 eax, 1033		; 00000409H
  00865	74 0b		 je	 SHORT $LN34@PasswordDl

; 1963 : 
; 1964 : 	case TC_APPMSG_PREBOOT_PASSWORD_MODE:
; 1965 : 		{
; 1966 : 			ToBootPwdField (hwndDlg, IDC_PASSWORD);
; 1967 : 
; 1968 : 			// Attempt to wipe the password stored in the input field buffer
; 1969 : 			WCHAR tmp[MAX_PASSWORD+1];
; 1970 : 			memset (tmp, 0x20, sizeof(tmp)); //0x20 = ASCII space or 0x2020 = Unicode DAGGER
; 1971 : 			tmp [MAX_PASSWORD] = 0;
; 1972 : 			SetWindowTextW(GetDlgItem (hwndDlg, IDC_PASSWORD), tmp);
; 1973 : 			SetWindowTextW(GetDlgItem (hwndDlg, IDC_PASSWORD), L"");
; 1974 : 
; 1975 : 			sprintf (OrigKeyboardLayout, "%08X", (DWORD) GetKeyboardLayout (NULL) & 0xFFFF);
; 1976 : 
; 1977 : 			DWORD keybLayout = (DWORD) LoadKeyboardLayout ("00000409", KLF_ACTIVATE);
; 1978 : 
; 1979 : 			if (keybLayout != 0x00000409 && keybLayout != 0x04090409)

  00867	3d 09 04 09 04	 cmp	 eax, 67699721		; 04090409H

; 1980 : 			{
; 1981 : 				Error ("CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_ENCRYPTION");
; 1982 : 				EndDialog (hwndDlg, IDCANCEL);
; 1983 : 				return 1;

  0086c	0f 85 76 fe ff
	ff		 jne	 $LN108@PasswordDl
$LN34@PasswordDl:

; 1984 : 			}
; 1985 : 
; 1986 : 			if (SetTimer (hwndDlg, TIMER_ID_KEYB_LAYOUT_GUARD, TIMER_INTERVAL_KEYB_LAYOUT_GUARD, NULL) == 0)

  00872	6a 00		 push	 0
  00874	6a 0a		 push	 10			; 0000000aH
  00876	68 00 01 00 00	 push	 256			; 00000100H
  0087b	56		 push	 esi
  0087c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16
  00882	85 c0		 test	 eax, eax
  00884	75 0a		 jne	 SHORT $LN33@PasswordDl

; 1987 : 			{
; 1988 : 				Error ("CANNOT_SET_TIMER");

  00886	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MMDPAFIK@CANNOT_SET_TIMER?$AA@

; 1989 : 				EndDialog (hwndDlg, IDCANCEL);
; 1990 : 				return 1;

  0088b	e9 5d fe ff ff	 jmp	 $LN109@PasswordDl
$LN33@PasswordDl:

; 1991 : 			}
; 1992 : 
; 1993 : 			SetCheckBox (hwndDlg, IDC_SHOW_PASSWORD, FALSE);

  00890	6a 00		 push	 0
  00892	68 49 04 00 00	 push	 1097			; 00000449H
  00897	56		 push	 esi
  00898	e8 00 00 00 00	 call	 _SetCheckBox
  0089d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1994 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_SHOW_PASSWORD), FALSE);

  008a0	6a 00		 push	 0
  008a2	68 49 04 00 00	 push	 1097			; 00000449H
  008a7	56		 push	 esi
  008a8	ff d7		 call	 edi
  008aa	50		 push	 eax
  008ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 1995 : 
; 1996 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PASSWORD), EM_SETPASSWORDCHAR, '*', 0);

  008b1	6a 00		 push	 0
  008b3	6a 2a		 push	 42			; 0000002aH
  008b5	68 cc 00 00 00	 push	 204			; 000000ccH
  008ba	68 0b 04 00 00	 push	 1035			; 0000040bH
  008bf	56		 push	 esi
  008c0	ff d7		 call	 edi
  008c2	50		 push	 eax
  008c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1997 : 			InvalidateRect (GetDlgItem (hwndDlg, IDC_PASSWORD), NULL, TRUE);

  008c9	6a 01		 push	 1
  008cb	6a 00		 push	 0
  008cd	68 0b 04 00 00	 push	 1035			; 0000040bH
  008d2	56		 push	 esi
  008d3	ff d7		 call	 edi
  008d5	50		 push	 eax
  008d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 1998 : 
; 1999 : 			bPrebootPasswordDlgMode = TRUE;

  008dc	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bPrebootPasswordDlgMode, 1

; 2000 : 		}
; 2001 : 		return 1;

  008e6	e9 7d 00 00 00	 jmp	 $LN23@PasswordDl
$LN3@PasswordDl:

; 2159 : 				}
; 2160 : 			}
; 2161 : 		}
; 2162 : 		break; 
; 2163 : 
; 2164 : 	case WM_DROPFILES:
; 2165 : 		{
; 2166 : 			HDROP hdrop = (HDROP) wParam;
; 2167 : 			int i = 0, count = DragQueryFile (hdrop, 0xFFFFFFFF, NULL, 0);

  008eb	8b 54 24 10	 mov	 edx, DWORD PTR _wParam$GSCopy$[esp+10836]
  008ef	33 ed		 xor	 ebp, ebp
  008f1	55		 push	 ebp
  008f2	55		 push	 ebp
  008f3	6a ff		 push	 -1
  008f5	52		 push	 edx
  008f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragQueryFileA@16
  008fc	8b d8		 mov	 ebx, eax

; 2168 : 
; 2169 : 			while (count-- > 0)

  008fe	85 db		 test	 ebx, ebx
  00900	7e 46		 jle	 SHORT $LN97@PasswordDl
$LL2@PasswordDl:

; 2170 : 			{
; 2171 : 				KeyFile *kf = (KeyFile *) malloc (sizeof (KeyFile));

  00902	68 08 01 00 00	 push	 264			; 00000108H
  00907	4b		 dec	 ebx
  00908	e8 00 00 00 00	 call	 _malloc
  0090d	83 c4 04	 add	 esp, 4

; 2172 : 				DragQueryFile (hdrop, i++, kf->FileName, sizeof (kf->FileName));

  00910	68 04 01 00 00	 push	 260			; 00000104H
  00915	8b f8		 mov	 edi, eax
  00917	8b 44 24 14	 mov	 eax, DWORD PTR _wParam$GSCopy$[esp+10840]
  0091b	57		 push	 edi
  0091c	55		 push	 ebp
  0091d	50		 push	 eax
  0091e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragQueryFileA@16

; 2173 : 				FirstKeyFile = KeyFileAdd (FirstKeyFile, kf);

  00924	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _FirstKeyFile
  0092a	57		 push	 edi
  0092b	51		 push	 ecx
  0092c	45		 inc	 ebp
  0092d	e8 00 00 00 00	 call	 _KeyFileAdd
  00932	83 c4 08	 add	 esp, 8
  00935	a3 00 00 00 00	 mov	 DWORD PTR _FirstKeyFile, eax

; 2174 : 				KeyFilesEnable = TRUE;

  0093a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _KeyFilesEnable, 1
  00944	85 db		 test	 ebx, ebx
  00946	7f ba		 jg	 SHORT $LL2@PasswordDl
$LN97@PasswordDl:

; 2175 : 			}
; 2176 : 
; 2177 : 			SetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE, KeyFilesEnable);

  00948	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KeyFilesEnable
  0094e	52		 push	 edx
  0094f	68 c5 13 00 00	 push	 5061			; 000013c5H
  00954	56		 push	 esi
  00955	e8 00 00 00 00	 call	 _SetCheckBox

; 2178 : 			DragFinish (hdrop);

  0095a	8b 44 24 1c	 mov	 eax, DWORD PTR _wParam$GSCopy$[esp+10848]
  0095e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00961	50		 push	 eax
  00962	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragFinish@4
$LN23@PasswordDl:

; 2179 : 		}
; 2180 : 		return 1;

  00968	b8 01 00 00 00	 mov	 eax, 1
$LN48@PasswordDl:

; 2184 : }

  0096d	8b 8c 24 50 2a
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+10836]
  00974	5f		 pop	 edi
  00975	5e		 pop	 esi
  00976	5d		 pop	 ebp
  00977	5b		 pop	 ebx
  00978	33 cc		 xor	 ecx, esp
  0097a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0097f	81 c4 44 2a 00
	00		 add	 esp, 10820		; 00002a44H
  00985	c2 10 00	 ret	 16			; 00000010H
_PasswordDlgProc@16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@MJIJHAHP@ENCRYPTION_ALGORITHM_LV?$AA@	; `string'
PUBLIC	??_C@_06EIAEKLLO@VOLUME?$AA@			; `string'
PUBLIC	??_C@_05JLAEHEHI@DRIVE?$AA@			; `string'
PUBLIC	_BuildTree
EXTRN	__imp__ImageList_Add@12:PROC
EXTRN	__imp__ImageList_Create@20:PROC
EXTRN	__imp__LoadBitmapA@8:PROC
_BSS	SEGMENT
_LastDriveListVolumeColumnWidth DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BI@MJIJHAHP@ENCRYPTION_ALGORITHM_LV?$AA@
CONST	SEGMENT
??_C@_0BI@MJIJHAHP@ENCRYPTION_ALGORITHM_LV?$AA@ DB 'ENCRYPTION_ALGORITHM_'
	DB	'LV', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06EIAEKLLO@VOLUME?$AA@
CONST	SEGMENT
??_C@_06EIAEKLLO@VOLUME?$AA@ DB 'VOLUME', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JLAEHEHI@DRIVE?$AA@
CONST	SEGMENT
??_C@_05JLAEHEHI@DRIVE?$AA@ DB 'DRIVE', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _BuildTree
_TEXT	SEGMENT
_hBitmapMask$ = -40					; size = 4
_hBitmap$ = -36						; size = 4
_lvCol$ = -32						; size = 32
_hTree$ = 8						; size = 4
_BuildTree PROC						; COMDAT

; 3238 : {

  00000	83 ec 28	 sub	 esp, 40			; 00000028H
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi

; 3239 : 	HIMAGELIST hList;
; 3240 : 	HBITMAP hBitmap, hBitmapMask;
; 3241 : 	LVCOLUMNW lvCol;
; 3242 : 
; 3243 : 	ListView_DeleteColumn (hTree,0);

  00006	8b 74 24 38	 mov	 esi, DWORD PTR _hTree$[esp+48]
  0000a	57		 push	 edi
  0000b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  00011	33 ed		 xor	 ebp, ebp
  00013	55		 push	 ebp
  00014	55		 push	 ebp
  00015	68 1c 10 00 00	 push	 4124			; 0000101cH
  0001a	56		 push	 esi
  0001b	ff d7		 call	 edi

; 3244 : 	ListView_DeleteColumn (hTree,0);

  0001d	55		 push	 ebp
  0001e	55		 push	 ebp
  0001f	68 1c 10 00 00	 push	 4124			; 0000101cH
  00024	56		 push	 esi
  00025	ff d7		 call	 edi

; 3245 : 	ListView_DeleteColumn (hTree,0);

  00027	55		 push	 ebp
  00028	55		 push	 ebp
  00029	68 1c 10 00 00	 push	 4124			; 0000101cH
  0002e	56		 push	 esi
  0002f	ff d7		 call	 edi

; 3246 : 	ListView_DeleteColumn (hTree,0);

  00031	55		 push	 ebp
  00032	55		 push	 ebp
  00033	68 1c 10 00 00	 push	 4124			; 0000101cH
  00038	56		 push	 esi
  00039	ff d7		 call	 edi

; 3247 : 	ListView_DeleteColumn (hTree,0);

  0003b	55		 push	 ebp
  0003c	55		 push	 ebp
  0003d	68 1c 10 00 00	 push	 4124			; 0000101cH
  00042	56		 push	 esi
  00043	ff d7		 call	 edi

; 3248 : 	ListView_DeleteColumn (hTree,0);

  00045	55		 push	 ebp
  00046	55		 push	 ebp
  00047	68 1c 10 00 00	 push	 4124			; 0000101cH
  0004c	56		 push	 esi
  0004d	ff d7		 call	 edi

; 3249 : 
; 3250 : 	SendMessage(hTree,LVM_SETEXTENDEDLISTVIEWSTYLE,0,
; 3251 : 		LVS_EX_FULLROWSELECT
; 3252 : 		|LVS_EX_HEADERDRAGDROP 
; 3253 : 		); 

  0004f	6a 30		 push	 48			; 00000030H
  00051	55		 push	 ebp
  00052	68 36 10 00 00	 push	 4150			; 00001036H
  00057	56		 push	 esi
  00058	ff d7		 call	 edi

; 3254 : 
; 3255 : 	memset(&lvCol,0,sizeof(lvCol)); 

  0005a	33 c0		 xor	 eax, eax
  0005c	89 44 24 18	 mov	 DWORD PTR _lvCol$[esp+56], eax

; 3256 : 
; 3257 : 	lvCol.mask = LVCF_TEXT|LVCF_WIDTH|LVCF_SUBITEM|LVCF_FMT;  
; 3258 : 	lvCol.pszText = GetString ("DRIVE");                           

  00060	68 00 00 00 00	 push	 OFFSET ??_C@_05JLAEHEHI@DRIVE?$AA@
  00065	89 44 24 20	 mov	 DWORD PTR _lvCol$[esp+64], eax
  00069	89 44 24 24	 mov	 DWORD PTR _lvCol$[esp+68], eax
  0006d	89 44 24 28	 mov	 DWORD PTR _lvCol$[esp+72], eax
  00071	89 44 24 2c	 mov	 DWORD PTR _lvCol$[esp+76], eax
  00075	89 44 24 30	 mov	 DWORD PTR _lvCol$[esp+80], eax
  00079	89 44 24 34	 mov	 DWORD PTR _lvCol$[esp+84], eax
  0007d	89 44 24 38	 mov	 DWORD PTR _lvCol$[esp+88], eax
  00081	c7 44 24 1c 0f
	00 00 00	 mov	 DWORD PTR _lvCol$[esp+60], 15 ; 0000000fH
  00089	e8 00 00 00 00	 call	 _GetString

; 3259 : 	lvCol.cx = CompensateXDPI (38);

  0008e	6a 26		 push	 38			; 00000026H
  00090	89 44 24 2c	 mov	 DWORD PTR _lvCol$[esp+76], eax
  00094	e8 00 00 00 00	 call	 _CompensateXDPI
  00099	83 c4 08	 add	 esp, 8
  0009c	89 44 24 20	 mov	 DWORD PTR _lvCol$[esp+64], eax

; 3260 : 	lvCol.fmt = LVCFMT_COL_HAS_IMAGES|LVCFMT_LEFT ;
; 3261 : 	SendMessage (hTree,LVM_INSERTCOLUMNW,0,(LPARAM)&lvCol);

  000a0	8d 44 24 18	 lea	 eax, DWORD PTR _lvCol$[esp+56]
  000a4	50		 push	 eax
  000a5	55		 push	 ebp
  000a6	68 61 10 00 00	 push	 4193			; 00001061H
  000ab	56		 push	 esi
  000ac	c7 44 24 2c 00
	80 00 00	 mov	 DWORD PTR _lvCol$[esp+76], 32768 ; 00008000H
  000b4	ff d7		 call	 edi

; 3262 : 
; 3263 : 	lvCol.pszText = GetString ("VOLUME");  

  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_06EIAEKLLO@VOLUME?$AA@
  000bb	e8 00 00 00 00	 call	 _GetString

; 3264 : 	lvCol.cx = CompensateXDPI (253);           

  000c0	68 fd 00 00 00	 push	 253			; 000000fdH
  000c5	89 44 24 2c	 mov	 DWORD PTR _lvCol$[esp+76], eax
  000c9	e8 00 00 00 00	 call	 _CompensateXDPI
  000ce	83 c4 08	 add	 esp, 8

; 3265 : 	lvCol.fmt = LVCFMT_LEFT;
; 3266 : 	SendMessage (hTree,LVM_INSERTCOLUMNW,1,(LPARAM)&lvCol);

  000d1	8d 4c 24 18	 lea	 ecx, DWORD PTR _lvCol$[esp+56]
  000d5	51		 push	 ecx
  000d6	6a 01		 push	 1
  000d8	68 61 10 00 00	 push	 4193			; 00001061H
  000dd	56		 push	 esi
  000de	89 44 24 30	 mov	 DWORD PTR _lvCol$[esp+80], eax
  000e2	89 6c 24 2c	 mov	 DWORD PTR _lvCol$[esp+76], ebp
  000e6	ff d7		 call	 edi

; 3267 : 	LastDriveListVolumeColumnWidth = ListView_GetColumnWidth (hTree, 1);

  000e8	55		 push	 ebp
  000e9	6a 01		 push	 1
  000eb	68 1d 10 00 00	 push	 4125			; 0000101dH
  000f0	56		 push	 esi
  000f1	ff d7		 call	 edi

; 3268 : 
; 3269 : 	lvCol.pszText = GetString ("SIZE");  

  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_04EMFHLKGI@SIZE?$AA@
  000f8	a3 00 00 00 00	 mov	 DWORD PTR _LastDriveListVolumeColumnWidth, eax
  000fd	e8 00 00 00 00	 call	 _GetString

; 3270 : 	lvCol.cx = CompensateXDPI (55);

  00102	6a 37		 push	 55			; 00000037H
  00104	89 44 24 2c	 mov	 DWORD PTR _lvCol$[esp+76], eax
  00108	e8 00 00 00 00	 call	 _CompensateXDPI
  0010d	83 c4 08	 add	 esp, 8

; 3271 : 	lvCol.fmt = LVCFMT_RIGHT;
; 3272 : 	SendMessage (hTree,LVM_INSERTCOLUMNW,2,(LPARAM)&lvCol);

  00110	8d 54 24 18	 lea	 edx, DWORD PTR _lvCol$[esp+56]
  00114	52		 push	 edx
  00115	6a 02		 push	 2
  00117	68 61 10 00 00	 push	 4193			; 00001061H
  0011c	56		 push	 esi
  0011d	89 44 24 30	 mov	 DWORD PTR _lvCol$[esp+80], eax
  00121	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR _lvCol$[esp+76], 1
  00129	ff d7		 call	 edi

; 3273 : 
; 3274 : 	lvCol.pszText = GetString ("ENCRYPTION_ALGORITHM_LV");  

  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@MJIJHAHP@ENCRYPTION_ALGORITHM_LV?$AA@
  00130	e8 00 00 00 00	 call	 _GetString

; 3275 : 	lvCol.cx = CompensateXDPI (121);

  00135	6a 79		 push	 121			; 00000079H
  00137	89 44 24 2c	 mov	 DWORD PTR _lvCol$[esp+76], eax
  0013b	e8 00 00 00 00	 call	 _CompensateXDPI
  00140	83 c4 08	 add	 esp, 8
  00143	89 44 24 20	 mov	 DWORD PTR _lvCol$[esp+64], eax

; 3276 : 	lvCol.fmt = LVCFMT_LEFT;
; 3277 : 	SendMessage (hTree,LVM_INSERTCOLUMNW,3,(LPARAM)&lvCol);

  00147	8d 44 24 18	 lea	 eax, DWORD PTR _lvCol$[esp+56]
  0014b	50		 push	 eax
  0014c	6a 03		 push	 3
  0014e	68 61 10 00 00	 push	 4193			; 00001061H
  00153	56		 push	 esi
  00154	89 6c 24 2c	 mov	 DWORD PTR _lvCol$[esp+76], ebp
  00158	ff d7		 call	 edi

; 3278 : 
; 3279 : 	lvCol.pszText = GetString ("TYPE");  

  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_04KDPJLEDB@TYPE?$AA@
  0015f	e8 00 00 00 00	 call	 _GetString

; 3280 : 	lvCol.cx = CompensateXDPI (52);

  00164	6a 34		 push	 52			; 00000034H
  00166	89 44 24 2c	 mov	 DWORD PTR _lvCol$[esp+76], eax
  0016a	e8 00 00 00 00	 call	 _CompensateXDPI
  0016f	83 c4 08	 add	 esp, 8

; 3281 : 	lvCol.fmt = LVCFMT_LEFT;
; 3282 : 	SendMessage (hTree,LVM_INSERTCOLUMNW,4,(LPARAM)&lvCol);

  00172	8d 4c 24 18	 lea	 ecx, DWORD PTR _lvCol$[esp+56]
  00176	51		 push	 ecx
  00177	6a 04		 push	 4
  00179	68 61 10 00 00	 push	 4193			; 00001061H
  0017e	56		 push	 esi
  0017f	89 44 24 30	 mov	 DWORD PTR _lvCol$[esp+80], eax
  00183	89 6c 24 2c	 mov	 DWORD PTR _lvCol$[esp+76], ebp
  00187	ff d7		 call	 edi

; 3283 : 
; 3284 : 	// Regular drive icon
; 3285 : 
; 3286 : 	hBitmap = LoadBitmap (hInst, MAKEINTRESOURCE (IDB_DRIVEICON));

  00189	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  0018f	6a 67		 push	 103			; 00000067H
  00191	52		 push	 edx
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  00198	8b d8		 mov	 ebx, eax

; 3287 : 	if (hBitmap == NULL)

  0019a	3b dd		 cmp	 ebx, ebp
  0019c	0f 84 de 00 00
	00		 je	 $LN7@BuildTree

; 3288 : 		return;
; 3289 : 	hBitmapMask = LoadBitmap (hInst, MAKEINTRESOURCE (IDB_DRIVEICON_MASK));

  001a2	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  001a7	6a 69		 push	 105			; 00000069H
  001a9	50		 push	 eax
  001aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8

; 3290 : 
; 3291 : 	hList = ImageList_Create (16, 12, ILC_COLOR8|ILC_MASK, 2, 2);

  001b0	6a 02		 push	 2
  001b2	6a 02		 push	 2
  001b4	6a 09		 push	 9
  001b6	6a 0c		 push	 12			; 0000000cH
  001b8	6a 10		 push	 16			; 00000010H
  001ba	89 44 24 24	 mov	 DWORD PTR _hBitmapMask$[esp+76], eax
  001be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_Create@20

; 3292 : 	if (ImageList_Add (hList, hBitmap, hBitmapMask) == -1)

  001c4	8b 4c 24 10	 mov	 ecx, DWORD PTR _hBitmapMask$[esp+56]
  001c8	51		 push	 ecx
  001c9	8b e8		 mov	 ebp, eax
  001cb	53		 push	 ebx
  001cc	55		 push	 ebp
  001cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_Add@12

; 3293 : 	{
; 3294 : 		DeleteObject (hBitmap);

  001d3	53		 push	 ebx
  001d4	83 f8 ff	 cmp	 eax, -1
  001d7	75 17		 jne	 SHORT $LN5@BuildTree
  001d9	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__DeleteObject@4
  001df	ff d6		 call	 esi

; 3295 : 		DeleteObject (hBitmapMask);

  001e1	8b 54 24 10	 mov	 edx, DWORD PTR _hBitmapMask$[esp+56]
  001e5	52		 push	 edx
  001e6	ff d6		 call	 esi
  001e8	5f		 pop	 edi
  001e9	5e		 pop	 esi
  001ea	5d		 pop	 ebp
  001eb	5b		 pop	 ebx

; 3327 : }

  001ec	83 c4 28	 add	 esp, 40			; 00000028H
  001ef	c3		 ret	 0
$LN5@BuildTree:

; 3296 : 		return;
; 3297 : 	}
; 3298 : 	else
; 3299 : 	{
; 3300 : 		DeleteObject (hBitmap);

  001f0	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__DeleteObject@4
  001f6	ff d3		 call	 ebx

; 3301 : 		DeleteObject (hBitmapMask);

  001f8	8b 44 24 10	 mov	 eax, DWORD PTR _hBitmapMask$[esp+56]
  001fc	50		 push	 eax
  001fd	ff d3		 call	 ebx

; 3302 : 	}
; 3303 : 
; 3304 : 	// System drive icon
; 3305 : 
; 3306 : 	hBitmap = LoadBitmap (hInst, MAKEINTRESOURCE (IDB_SYS_DRIVEICON));

  001ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00205	6a 71		 push	 113			; 00000071H
  00207	51		 push	 ecx
  00208	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  0020e	89 44 24 14	 mov	 DWORD PTR _hBitmap$[esp+56], eax

; 3307 : 	if (hBitmap == NULL)

  00212	85 c0		 test	 eax, eax
  00214	74 6a		 je	 SHORT $LN7@BuildTree

; 3308 : 		return;
; 3309 : 	hBitmapMask = LoadBitmap (hInst, MAKEINTRESOURCE (IDB_SYS_DRIVEICON_MASK));

  00216	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  0021c	6a 72		 push	 114			; 00000072H
  0021e	52		 push	 edx
  0021f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8

; 3310 : 
; 3311 : 	if (ImageList_Add (hList, hBitmap, hBitmapMask) == -1)

  00225	50		 push	 eax
  00226	89 44 24 14	 mov	 DWORD PTR _hBitmapMask$[esp+60], eax
  0022a	8b 44 24 18	 mov	 eax, DWORD PTR _hBitmap$[esp+60]
  0022e	50		 push	 eax
  0022f	55		 push	 ebp
  00230	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_Add@12
  00236	83 f8 ff	 cmp	 eax, -1
  00239	75 16		 jne	 SHORT $LN2@BuildTree

; 3312 : 	{
; 3313 : 		DeleteObject (hBitmap);

  0023b	8b 4c 24 14	 mov	 ecx, DWORD PTR _hBitmap$[esp+56]
  0023f	51		 push	 ecx
  00240	ff d3		 call	 ebx

; 3314 : 		DeleteObject (hBitmapMask);

  00242	8b 54 24 10	 mov	 edx, DWORD PTR _hBitmapMask$[esp+56]
  00246	52		 push	 edx
  00247	ff d3		 call	 ebx
  00249	5f		 pop	 edi
  0024a	5e		 pop	 esi
  0024b	5d		 pop	 ebp
  0024c	5b		 pop	 ebx

; 3327 : }

  0024d	83 c4 28	 add	 esp, 40			; 00000028H
  00250	c3		 ret	 0
$LN2@BuildTree:

; 3315 : 		return;
; 3316 : 	}
; 3317 : 	else
; 3318 : 	{
; 3319 : 		DeleteObject (hBitmap);

  00251	8b 44 24 14	 mov	 eax, DWORD PTR _hBitmap$[esp+56]
  00255	50		 push	 eax
  00256	ff d3		 call	 ebx

; 3320 : 		DeleteObject (hBitmapMask);

  00258	8b 4c 24 10	 mov	 ecx, DWORD PTR _hBitmapMask$[esp+56]
  0025c	51		 push	 ecx
  0025d	ff d3		 call	 ebx

; 3321 : 	}
; 3322 : 
; 3323 : 	ListView_SetImageList (hTree, hList, LVSIL_NORMAL); 

  0025f	55		 push	 ebp
  00260	6a 00		 push	 0
  00262	68 03 10 00 00	 push	 4099			; 00001003H
  00267	56		 push	 esi
  00268	ff d7		 call	 edi

; 3324 : 	ListView_SetImageList (hTree, hList, LVSIL_SMALL);

  0026a	55		 push	 ebp
  0026b	6a 01		 push	 1
  0026d	68 03 10 00 00	 push	 4099			; 00001003H
  00272	56		 push	 esi
  00273	ff d7		 call	 edi

; 3325 : 
; 3326 : 	LoadDriveLetters (hTree, 0);

  00275	6a 00		 push	 0
  00277	56		 push	 esi
  00278	e8 00 00 00 00	 call	 _LoadDriveLetters
  0027d	83 c4 08	 add	 esp, 8
$LN7@BuildTree:
  00280	5f		 pop	 edi
  00281	5e		 pop	 esi
  00282	5d		 pop	 ebp
  00283	5b		 pop	 ebx

; 3327 : }

  00284	83 c4 28	 add	 esp, 40			; 00000028H
  00287	c3		 ret	 0
_BuildTree ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?AskVolumePassword@@YAHPAUHWND__@@PAUPassword@@PADH@Z
_TEXT	SEGMENT
_enableMountOptions$ = 8				; size = 4
?AskVolumePassword@@YAHPAUHWND__@@PAUPassword@@PADH@Z PROC ; AskVolumePassword, COMDAT
; _hwndDlg$ = edx
; _password$ = ecx
; _titleStringId$ = eax

; 3362 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 3363 : 	int result;
; 3364 : 
; 3365 : 	PasswordDialogTitleStringId = titleStringId;
; 3366 : 	PasswordDialogDisableMountOptions = !enableMountOptions;

  00003	33 c9		 xor	 ecx, ecx
  00005	39 4c 24 08	 cmp	 DWORD PTR _enableMountOptions$[esp], ecx

; 3367 : 
; 3368 : 	result = DialogBoxParamW (hInst, 
; 3369 : 		MAKEINTRESOURCEW (IDD_PASSWORD_DLG), hwndDlg,
; 3370 : 		(DLGPROC) PasswordDlgProc, (LPARAM) password);

  00009	56		 push	 esi
  0000a	68 00 00 00 00	 push	 OFFSET _PasswordDlgProc@16
  0000f	0f 94 c1	 sete	 cl
  00012	52		 push	 edx
  00013	a3 00 00 00 00	 mov	 DWORD PTR _PasswordDialogTitleStringId, eax
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  0001d	6a 68		 push	 104			; 00000068H
  0001f	50		 push	 eax
  00020	89 0d 00 00 00
	00		 mov	 DWORD PTR _PasswordDialogDisableMountOptions, ecx
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 3371 : 
; 3372 : 	if (result != IDOK)

  0002c	83 f8 01	 cmp	 eax, 1
  0002f	74 28		 je	 SHORT $LN3@AskVolumeP

; 3373 : 	{
; 3374 : 		password->Length = 0;

  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 3375 : 		burn (&mountOptions.ProtectedHidVolPassword, sizeof (mountOptions.ProtectedHidVolPassword));

  00037	be 14 00 00 00	 mov	 esi, OFFSET ?mountOptions@@3UMountOptions@@A+20
  0003c	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00041	57		 push	 edi
  00042	8b fa		 mov	 edi, edx
  00044	8b ce		 mov	 ecx, esi
$LL10@AskVolumeP:
  00046	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00049	41		 inc	 ecx
  0004a	83 ef 01	 sub	 edi, 1
  0004d	75 f7		 jne	 SHORT $LL10@AskVolumeP
  0004f	5f		 pop	 edi
$LL2@AskVolumeP:
  00050	4a		 dec	 edx
  00051	c6 06 00	 mov	 BYTE PTR [esi], 0
  00054	46		 inc	 esi
  00055	85 d2		 test	 edx, edx
  00057	75 f7		 jne	 SHORT $LL2@AskVolumeP
$LN3@AskVolumeP:

; 3376 : 	}
; 3377 : 
; 3378 : 	return result == IDOK;

  00059	33 c9		 xor	 ecx, ecx
  0005b	83 f8 01	 cmp	 eax, 1
  0005e	0f 94 c1	 sete	 cl
  00061	5e		 pop	 esi
  00062	8b c1		 mov	 eax, ecx

; 3379 : }

  00064	c3		 ret	 0
?AskVolumePassword@@YAHPAUHWND__@@PAUPassword@@PADH@Z ENDP ; AskVolumePassword
_TEXT	ENDS
PUBLIC	??_C@_0CA@CIGKJDHB@SYSTEM_ENCRYPTION_NOT_COMPLETED?$AA@ ; `string'
PUBLIC	??_C@_0BL@IAKJDMNN@ERROR_CREATING_RESCUE_DISK?$AA@ ; `string'
PUBLIC	??_C@_0CF@JPIEPDKB@RESCUE_DISK_NON_WIZARD_CREATION_@ ; `string'
PUBLIC	??_C@_0CM@GACCFBMA@RESCUE_DISK_NON_WIZARD_CREATION_@ ; `string'
PUBLIC	??_C@_1DG@LPBIMLFN@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?5?$AAR?$AAe?$AAs?$AAc?$AAu?$AAe?$AA?5?$AAD?$AAi?$AAs?$AAk?$AA?4?$AAi?$AAs?$AAo?$AA?$AA@ ; `string'
PUBLIC	??_C@_17LLIKADDM@?$AAi?$AAs?$AAo?$AA?$AA@	; `string'
PUBLIC	??_C@_0CM@JEBIBPGJ@RESCUE_DISK_NON_WIZARD_CREATION_@ ; `string'
PUBLIC	??_C@_0CH@DMFOBPHA@CANNOT_CREATE_RESCUE_DISK_ON_HID@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_CreateRescueDisk
EXTRN	_InfoDirect:PROC
EXTRN	_LaunchWindowsIsoBurner:PROC
EXTRN	_AskYesNoString:PROC
EXTRN	_IsWindowsIsoBurnerAvailable:PROC
EXTRN	?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CipherShed::BootEncryption::CreateRescueIsoImage
EXTRN	__imp__SHGetFolderPathA@20:PROC
EXTRN	_AskOkCancel:PROC
;	COMDAT ??_C@_0CA@CIGKJDHB@SYSTEM_ENCRYPTION_NOT_COMPLETED?$AA@
CONST	SEGMENT
??_C@_0CA@CIGKJDHB@SYSTEM_ENCRYPTION_NOT_COMPLETED?$AA@ DB 'SYSTEM_ENCRYP'
	DB	'TION_NOT_COMPLETED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IAKJDMNN@ERROR_CREATING_RESCUE_DISK?$AA@
CONST	SEGMENT
??_C@_0BL@IAKJDMNN@ERROR_CREATING_RESCUE_DISK?$AA@ DB 'ERROR_CREATING_RES'
	DB	'CUE_DISK', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JPIEPDKB@RESCUE_DISK_NON_WIZARD_CREATION_@
CONST	SEGMENT
??_C@_0CF@JPIEPDKB@RESCUE_DISK_NON_WIZARD_CREATION_@ DB 'RESCUE_DISK_NON_'
	DB	'WIZARD_CREATION_BURN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GACCFBMA@RESCUE_DISK_NON_WIZARD_CREATION_@
CONST	SEGMENT
??_C@_0CM@GACCFBMA@RESCUE_DISK_NON_WIZARD_CREATION_@ DB 'RESCUE_DISK_NON_'
	DB	'WIZARD_CREATION_WIN_ISOBURN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@LPBIMLFN@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?5?$AAR?$AAe?$AAs?$AAc?$AAu?$AAe?$AA?5?$AAD?$AAi?$AAs?$AAk?$AA?4?$AAi?$AAs?$AAo?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@LPBIMLFN@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?5?$AAR?$AAe?$AAs?$AAc?$AAu?$AAe?$AA?5?$AAD?$AAi?$AAs?$AAk?$AA?4?$AAi?$AAs?$AAo?$AA?$AA@ DB 'C'
	DB	00H, 'i', 00H, 'p', 00H, 'h', 00H, 'e', 00H, 'r', 00H, 'S', 00H
	DB	'h', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 's'
	DB	00H, 'c', 00H, 'u', 00H, 'e', 00H, ' ', 00H, 'D', 00H, 'i', 00H
	DB	's', 00H, 'k', 00H, '.', 00H, 'i', 00H, 's', 00H, 'o', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_17LLIKADDM@?$AAi?$AAs?$AAo?$AA?$AA@
CONST	SEGMENT
??_C@_17LLIKADDM@?$AAi?$AAs?$AAo?$AA?$AA@ DB 'i', 00H, 's', 00H, 'o', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@JEBIBPGJ@RESCUE_DISK_NON_WIZARD_CREATION_@
CONST	SEGMENT
??_C@_0CM@JEBIBPGJ@RESCUE_DISK_NON_WIZARD_CREATION_@ DB 'RESCUE_DISK_NON_'
	DB	'WIZARD_CREATION_SELECT_PATH', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DMFOBPHA@CANNOT_CREATE_RESCUE_DISK_ON_HID@
CONST	SEGMENT
??_C@_0CH@DMFOBPHA@CANNOT_CREATE_RESCUE_DISK_ON_HID@ DB 'CANNOT_CREATE_RE'
	DB	'SCUE_DISK_ON_HIDDEN_OS', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_CreateRescueDisk$6 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$_CreateRescueDisk$2
__catchsym$_CreateRescueDisk$5 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$_CreateRescueDisk$0
__ehfuncinfo$_CreateRescueDisk DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$_CreateRescueDisk
	DD	02H
	DD	FLAT:__tryblocktable$_CreateRescueDisk
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$_CreateRescueDisk DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_CreateRescueDisk$5
	DD	02H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$_CreateRescueDisk$6
__unwindtable$_CreateRescueDisk DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	02H
	DD	FLAT:__unwindfunclet$_CreateRescueDisk$4
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _CreateRescueDisk
_TEXT	SEGMENT
$T180253 = -146						; size = 94
$T180254 = -52						; size = 28
_e$137868 = -24						; size = 4
_e$137846 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_szTmp$137854 = 0					; size = 16192
_initialDir$137858 = 16192				; size = 260
_szRescueDiskISO$137855 = 16452				; size = 261
__$ArrayPad$ = 16716					; size = 4
_CreateRescueDisk PROC					; COMDAT

; 4216 : {

  00000	55		 push	 ebp
  00001	8d ac 24 b0 be
	ff ff		 lea	 ebp, DWORD PTR [esp-16720]
  00008	b8 50 41 00 00	 mov	 eax, 16720		; 00004150H
  0000d	e8 00 00 00 00	 call	 __chkstk
  00012	6a ff		 push	 -1
  00014	68 00 00 00 00	 push	 __ehhandler$_CreateRescueDisk
  00019	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001f	50		 push	 eax
  00020	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	89 85 4c 41 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00033	53		 push	 ebx
  00034	56		 push	 esi
  00035	57		 push	 edi
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 4217 : 	try
; 4218 : 	{
; 4219 : 		BootEncStatus = BootEncObj->GetStatus();

  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00049	8d 85 6e ff ff
	ff		 lea	 eax, DWORD PTR $T180253[ebp]
  0004f	50		 push	 eax
  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00057	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0005c	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00061	8b f0		 mov	 esi, eax
  00063	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00068	f3 a5		 rep movsd
  0006a	66 a5		 movsw
  0006c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN24@CreateResc:

; 4225 : 
; 4226 : 	if (IsHiddenOSRunning())

  00073	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00078	85 c0		 test	 eax, eax
  0007a	74 26		 je	 SHORT $LN12@CreateResc

; 4227 : 	{
; 4228 : 		Warning ("CANNOT_CREATE_RESCUE_DISK_ON_HIDDEN_OS");

  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DMFOBPHA@CANNOT_CREATE_RESCUE_DISK_ON_HID@

; 4229 : 		return;

  00081	e9 c1 01 00 00	 jmp	 $LN31@CreateResc
__catch$_CreateRescueDisk$0:

; 4220 : 	}
; 4221 : 	catch (Exception &e)
; 4222 : 	{
; 4223 : 		e.Show (MainDlg);

  00086	8b 4d ec	 mov	 ecx, DWORD PTR _e$137846[ebp]
  00089	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008b	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00090	8b 12		 mov	 edx, DWORD PTR [edx]
  00092	50		 push	 eax
  00093	ff d2		 call	 edx

; 4224 : 	}

  00095	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0009c	b8 00 00 00 00	 mov	 eax, $LN24@CreateResc
  000a1	c3		 ret	 0
$LN12@CreateResc:

; 4230 : 	}
; 4231 : 
; 4232 : 	if (!BootEncStatus.DriveEncrypted 
; 4233 : 		&& !BootEncStatus.DriveMounted
; 4234 : 		&& !BootEncStatus.VolumeHeaderPresent
; 4235 : 		&& !SysEncryptionOrDecryptionRequired ())

  000a2	83 3d 0e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14, 0
  000a9	75 25		 jne	 SHORT $LN11@CreateResc
  000ab	83 3d 06 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, 0
  000b2	75 1c		 jne	 SHORT $LN11@CreateResc
  000b4	83 3d 0a 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+10, 0
  000bb	75 13		 jne	 SHORT $LN11@CreateResc
  000bd	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  000c2	85 c0		 test	 eax, eax
  000c4	75 0a		 jne	 SHORT $LN11@CreateResc

; 4236 : 	{
; 4237 : 		Warning ("SYS_DRIVE_NOT_ENCRYPTED");

  000c6	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BHICMCGD@SYS_DRIVE_NOT_ENCRYPTED?$AA@

; 4238 : 		return;

  000cb	e9 77 01 00 00	 jmp	 $LN31@CreateResc
$LN11@CreateResc:

; 4239 : 	}
; 4240 : 
; 4241 : 	if (SysEncryptionOrDecryptionRequired () 
; 4242 : 		|| BootEncStatus.SetupInProgress)

  000d0	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  000d5	85 c0		 test	 eax, eax
  000d7	0f 85 65 01 00
	00		 jne	 $LN9@CreateResc
  000dd	39 05 3e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, eax
  000e3	0f 85 59 01 00
	00		 jne	 $LN9@CreateResc

; 4245 : 		return;
; 4246 : 	}
; 4247 : 
; 4248 : 	if (CreateSysEncMutex ())	// If no instance of the wizard is currently taking care of system encryption

  000e9	e8 00 00 00 00	 call	 _CreateSysEncMutex
  000ee	85 c0		 test	 eax, eax
  000f0	0f 84 45 01 00
	00		 je	 $LN8@CreateResc

; 4249 : 	{
; 4250 : 		try
; 4251 : 		{
; 4252 : 			wchar_t szTmp [8096];
; 4253 : 			char szRescueDiskISO [TC_MAX_PATH+1];
; 4254 : 
; 4255 : 			if (AskOkCancel ("RESCUE_DISK_NON_WIZARD_CREATION_SELECT_PATH") != IDOK)

  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@JEBIBPGJ@RESCUE_DISK_NON_WIZARD_CREATION_@
  000fb	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00102	e8 00 00 00 00	 call	 _AskOkCancel
  00107	83 c4 04	 add	 esp, 4
  0010a	83 f8 01	 cmp	 eax, 1
  0010d	74 0a		 je	 SHORT $LN6@CreateResc
$LN32@CreateResc:

; 4256 : 			{		
; 4257 : 				CloseSysEncMutex ();

  0010f	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 4258 : 				return;

  00114	e9 36 01 00 00	 jmp	 $LN1@CreateResc
$LN6@CreateResc:

; 4259 : 			}
; 4260 : 
; 4261 : 			char initialDir[MAX_PATH];
; 4262 : 			SHGetFolderPath (NULL, CSIDL_MYDOCUMENTS, NULL, 0, initialDir);

  00119	8d 85 40 3f 00
	00		 lea	 eax, DWORD PTR _initialDir$137858[ebp]
  0011f	50		 push	 eax
  00120	6a 00		 push	 0
  00122	6a 00		 push	 0
  00124	6a 05		 push	 5
  00126	6a 00		 push	 0
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetFolderPathA@20

; 4263 : 
; 4264 : 			if (!BrowseFilesInDir (MainDlg, "OPEN_TITLE", initialDir, szRescueDiskISO, FALSE, TRUE, NULL, L"CipherShed Rescue Disk.iso", L"iso"))

  0012e	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_17LLIKADDM@?$AAi?$AAs?$AAo?$AA?$AA@
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@LPBIMLFN@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?5?$AAR?$AAe?$AAs?$AAc?$AAu?$AAe?$AA?5?$AAD?$AAi?$AAs?$AAk?$AA?4?$AAi?$AAs?$AAo?$AA?$AA@
  0013d	6a 00		 push	 0
  0013f	6a 01		 push	 1
  00141	6a 00		 push	 0
  00143	8d 8d 44 40 00
	00		 lea	 ecx, DWORD PTR _szRescueDiskISO$137855[ebp]
  00149	51		 push	 ecx
  0014a	8d 95 40 3f 00
	00		 lea	 edx, DWORD PTR _initialDir$137858[ebp]
  00150	52		 push	 edx
  00151	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GHEOANHD@OPEN_TITLE?$AA@
  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 ?BrowseFilesInDir@@YAHPAUHWND__@@PAD11HHPA_WPB_W3@Z ; BrowseFilesInDir
  0015c	83 c4 24	 add	 esp, 36			; 00000024H
  0015f	85 c0		 test	 eax, eax

; 4265 : 			{		
; 4266 : 				CloseSysEncMutex ();
; 4267 : 				return;

  00161	74 ac		 je	 SHORT $LN32@CreateResc

; 4268 : 			}
; 4269 : 
; 4270 : 			WaitCursor();

  00163	e8 00 00 00 00	 call	 _WaitCursor

; 4271 : 			BootEncObj->CreateRescueIsoImage (false, szRescueDiskISO);

  00168	8d 8d 44 40 00
	00		 lea	 ecx, DWORD PTR _szRescueDiskISO$137855[ebp]
  0016e	51		 push	 ecx
  0016f	8d 4d cc	 lea	 ecx, DWORD PTR $T180254[ebp]
  00172	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00177	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0017d	8d 55 cc	 lea	 edx, DWORD PTR $T180254[ebp]
  00180	52		 push	 edx
  00181	6a 00		 push	 0
  00183	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  00187	e8 00 00 00 00	 call	 ?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::BootEncryption::CreateRescueIsoImage
  0018c	8d 4d cc	 lea	 ecx, DWORD PTR $T180254[ebp]
  0018f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 4272 : 
; 4273 : 			_snwprintf (szTmp, sizeof szTmp / 2,
; 4274 : 				GetString (IsWindowsIsoBurnerAvailable() ? "RESCUE_DISK_NON_WIZARD_CREATION_WIN_ISOBURN" : "RESCUE_DISK_NON_WIZARD_CREATION_BURN"),
; 4275 : 				szRescueDiskISO);

  00194	e8 00 00 00 00	 call	 _IsWindowsIsoBurnerAvailable
  00199	85 c0		 test	 eax, eax
  0019b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CM@GACCFBMA@RESCUE_DISK_NON_WIZARD_CREATION_@
  001a0	75 05		 jne	 SHORT $LN17@CreateResc
  001a2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CF@JPIEPDKB@RESCUE_DISK_NON_WIZARD_CREATION_@
$LN17@CreateResc:
  001a7	8d 8d 44 40 00
	00		 lea	 ecx, DWORD PTR _szRescueDiskISO$137855[ebp]
  001ad	51		 push	 ecx
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 _GetString
  001b4	83 c4 04	 add	 esp, 4
  001b7	50		 push	 eax
  001b8	8d 55 00	 lea	 edx, DWORD PTR _szTmp$137854[ebp]
  001bb	68 a0 1f 00 00	 push	 8096			; 00001fa0H
  001c0	52		 push	 edx
  001c1	e8 00 00 00 00	 call	 __snwprintf
  001c6	83 c4 10	 add	 esp, 16			; 00000010H

; 4276 : 
; 4277 : 			if (IsWindowsIsoBurnerAvailable())

  001c9	e8 00 00 00 00	 call	 _IsWindowsIsoBurnerAvailable
  001ce	85 c0		 test	 eax, eax

; 4278 : 			{
; 4279 : 				if (AskYesNoString (szTmp) == IDYES)

  001d0	8d 45 00	 lea	 eax, DWORD PTR _szTmp$137854[ebp]
  001d3	50		 push	 eax
  001d4	74 2f		 je	 SHORT $LN4@CreateResc
  001d6	e8 00 00 00 00	 call	 _AskYesNoString
  001db	83 c4 04	 add	 esp, 4
  001de	83 f8 06	 cmp	 eax, 6
  001e1	75 16		 jne	 SHORT $LN26@CreateResc

; 4280 : 					LaunchWindowsIsoBurner (MainDlg, szRescueDiskISO);

  001e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  001e9	8d 8d 44 40 00
	00		 lea	 ecx, DWORD PTR _szRescueDiskISO$137855[ebp]
  001ef	51		 push	 ecx
  001f0	52		 push	 edx
  001f1	e8 00 00 00 00	 call	 _LaunchWindowsIsoBurner
  001f6	83 c4 08	 add	 esp, 8
$LN26@CreateResc:

; 4290 : 		CloseSysEncMutex ();

  001f9	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 4291 : 
; 4292 : 		NormalCursor ();

  001fe	e8 00 00 00 00	 call	 _NormalCursor

; 4293 : 	}
; 4294 : 	else

  00203	eb 4a		 jmp	 SHORT $LN1@CreateResc
$LN4@CreateResc:

; 4281 : 			}
; 4282 : 			else
; 4283 : 				InfoDirect (szTmp);

  00205	e8 00 00 00 00	 call	 _InfoDirect
  0020a	83 c4 04	 add	 esp, 4

; 4290 : 		CloseSysEncMutex ();

  0020d	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 4291 : 
; 4292 : 		NormalCursor ();

  00212	e8 00 00 00 00	 call	 _NormalCursor

; 4293 : 	}
; 4294 : 	else

  00217	eb 36		 jmp	 SHORT $LN1@CreateResc
__catch$_CreateRescueDisk$2:

; 4284 : 		}
; 4285 : 		catch (Exception &e)
; 4286 : 		{
; 4287 : 			e.Show (MainDlg);

  00219	8b 4d e8	 mov	 ecx, DWORD PTR _e$137868[ebp]
  0021c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0021e	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00223	8b 12		 mov	 edx, DWORD PTR [edx]
  00225	50		 push	 eax
  00226	ff d2		 call	 edx

; 4288 : 			Error ("ERROR_CREATING_RESCUE_DISK");

  00228	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IAKJDMNN@ERROR_CREATING_RESCUE_DISK?$AA@
  0022d	e8 00 00 00 00	 call	 _Error
  00232	83 c4 04	 add	 esp, 4

; 4289 : 		}

  00235	b8 00 00 00 00	 mov	 eax, $LN26@CreateResc
  0023a	c3		 ret	 0
$LN8@CreateResc:

; 4295 : 		Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  0023b	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00240	eb 05		 jmp	 SHORT $LN31@CreateResc
$LN9@CreateResc:

; 4243 : 	{
; 4244 : 		Warning ("SYSTEM_ENCRYPTION_NOT_COMPLETED");

  00242	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@CIGKJDHB@SYSTEM_ENCRYPTION_NOT_COMPLETED?$AA@
$LN31@CreateResc:
  00247	e8 00 00 00 00	 call	 _Warning
  0024c	83 c4 04	 add	 esp, 4
$LN1@CreateResc:

; 4296 : }

  0024f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00252	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00259	59		 pop	 ecx
  0025a	5f		 pop	 edi
  0025b	5e		 pop	 esi
  0025c	5b		 pop	 ebx
  0025d	8b 8d 4c 41 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00263	33 cd		 xor	 ecx, ebp
  00265	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026a	81 c5 50 41 00
	00		 add	 ebp, 16720		; 00004150H
  00270	8b e5		 mov	 esp, ebp
  00272	5d		 pop	 ebp
  00273	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_CreateRescueDisk$4:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR $T180254[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$_CreateRescueDisk:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 68 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-152]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 8a 58 41 00
	00		 mov	 ecx, DWORD PTR [edx+16728]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_CreateRescueDisk
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_CreateRescueDisk ENDP
PUBLIC	??_C@_0CE@MMCPJNND@RESCUE_DISK_NON_WIZARD_CHECK_PAS@ ; `string'
PUBLIC	??_C@_0CE@OKALPMMN@RESCUE_DISK_NON_WIZARD_CHECK_FAI@ ; `string'
PUBLIC	??_C@_0CE@OJOGFJPM@RESCUE_DISK_NON_WIZARD_CHECK_INS@ ; `string'
EXTRN	?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ:PROC ; CipherShed::BootEncryption::VerifyRescueDisk
;	COMDAT ??_C@_0CE@MMCPJNND@RESCUE_DISK_NON_WIZARD_CHECK_PAS@
CONST	SEGMENT
??_C@_0CE@MMCPJNND@RESCUE_DISK_NON_WIZARD_CHECK_PAS@ DB 'RESCUE_DISK_NON_'
	DB	'WIZARD_CHECK_PASSED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OKALPMMN@RESCUE_DISK_NON_WIZARD_CHECK_FAI@
CONST	SEGMENT
??_C@_0CE@OKALPMMN@RESCUE_DISK_NON_WIZARD_CHECK_FAI@ DB 'RESCUE_DISK_NON_'
	DB	'WIZARD_CHECK_FAILED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OJOGFJPM@RESCUE_DISK_NON_WIZARD_CHECK_INS@
CONST	SEGMENT
??_C@_0CE@OJOGFJPM@RESCUE_DISK_NON_WIZARD_CHECK_INS@ DB 'RESCUE_DISK_NON_'
	DB	'WIZARD_CHECK_INSERT', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?VerifyRescueDisk@@YAXXZ$6 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?VerifyRescueDisk@@YAXXZ$2
__catchsym$?VerifyRescueDisk@@YAXXZ$5 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$?VerifyRescueDisk@@YAXXZ$0
__ehfuncinfo$?VerifyRescueDisk@@YAXXZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?VerifyRescueDisk@@YAXXZ
	DD	02H
	DD	FLAT:__tryblocktable$?VerifyRescueDisk@@YAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?VerifyRescueDisk@@YAXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?VerifyRescueDisk@@YAXXZ$5
	DD	02H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?VerifyRescueDisk@@YAXXZ$6
__unwindtable$?VerifyRescueDisk@@YAXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	02H
	DD	FLAT:__unwindfunclet$?VerifyRescueDisk@@YAXXZ$4
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?VerifyRescueDisk@@YAXXZ
_TEXT	SEGMENT
$T180282 = -146						; size = 94
$T180283 = -52						; size = 28
_e$137876 = -24						; size = 4
_e$137889 = -20						; size = 4
__$EHRec$ = -16						; size = 16
?VerifyRescueDisk@@YAXXZ PROC				; VerifyRescueDisk, COMDAT

; 4299 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?VerifyRescueDisk@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 4300 : 	try
; 4301 : 	{
; 4302 : 		BootEncStatus = BootEncObj->GetStatus();

  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00034	8d 85 6e ff ff
	ff		 lea	 eax, DWORD PTR $T180282[ebp]
  0003a	50		 push	 eax
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00042	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00047	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0004c	8b f0		 mov	 esi, eax
  0004e	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00053	f3 a5		 rep movsd
  00055	66 a5		 movsw
  00057	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN19@VerifyResc:

; 4308 : 
; 4309 : 	if (!BootEncStatus.DriveEncrypted 
; 4310 : 		&& !BootEncStatus.DriveMounted
; 4311 : 		&& !BootEncStatus.VolumeHeaderPresent
; 4312 : 		&& !SysEncryptionOrDecryptionRequired ())

  0005e	83 3d 0e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14, 0
  00065	75 41		 jne	 SHORT $LN9@VerifyResc
  00067	83 3d 06 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, 0
  0006e	75 38		 jne	 SHORT $LN9@VerifyResc
  00070	83 3d 0a 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+10, 0
  00077	75 2f		 jne	 SHORT $LN9@VerifyResc
  00079	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  0007e	85 c0		 test	 eax, eax
  00080	75 26		 jne	 SHORT $LN9@VerifyResc

; 4313 : 	{
; 4314 : 		Warning ("SYS_DRIVE_NOT_ENCRYPTED");

  00082	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BHICMCGD@SYS_DRIVE_NOT_ENCRYPTED?$AA@

; 4315 : 		return;

  00087	e9 17 01 00 00	 jmp	 $LN26@VerifyResc
__catch$?VerifyRescueDisk@@YAXXZ$0:

; 4303 : 	}
; 4304 : 	catch (Exception &e)
; 4305 : 	{
; 4306 : 		e.Show (MainDlg);

  0008c	8b 4d e8	 mov	 ecx, DWORD PTR _e$137876[ebp]
  0008f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00096	8b 12		 mov	 edx, DWORD PTR [edx]
  00098	50		 push	 eax
  00099	ff d2		 call	 edx

; 4307 : 	}

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a2	b8 00 00 00 00	 mov	 eax, $LN19@VerifyResc
  000a7	c3		 ret	 0
$LN9@VerifyResc:

; 4316 : 	}
; 4317 : 
; 4318 : 	if (SysEncryptionOrDecryptionRequired () 
; 4319 : 		|| BootEncStatus.SetupInProgress)

  000a8	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  000ad	85 c0		 test	 eax, eax
  000af	0f 85 e9 00 00
	00		 jne	 $LN7@VerifyResc
  000b5	39 05 3e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, eax
  000bb	0f 85 dd 00 00
	00		 jne	 $LN7@VerifyResc

; 4322 : 		return;
; 4323 : 	}
; 4324 : 
; 4325 : 	if (CreateSysEncMutex ())	// If no instance of the wizard is currently taking care of system encryption

  000c1	e8 00 00 00 00	 call	 _CreateSysEncMutex
  000c6	85 c0		 test	 eax, eax
  000c8	0f 84 c9 00 00
	00		 je	 $LN6@VerifyResc

; 4326 : 	{
; 4327 : 		try
; 4328 : 		{

  000ce	bb 02 00 00 00	 mov	 ebx, 2

; 4329 : 			if (AskOkCancel ("RESCUE_DISK_NON_WIZARD_CHECK_INSERT") != IDOK)

  000d3	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@OJOGFJPM@RESCUE_DISK_NON_WIZARD_CHECK_INS@
  000d8	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  000db	e8 00 00 00 00	 call	 _AskOkCancel
  000e0	83 c4 04	 add	 esp, 4
  000e3	83 f8 01	 cmp	 eax, 1
  000e6	74 17		 je	 SHORT $LN4@VerifyResc

; 4330 : 			{		
; 4331 : 				CloseSysEncMutex ();

  000e8	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 4355 : }

  000ed	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f7	59		 pop	 ecx
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	5b		 pop	 ebx
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
$LN4@VerifyResc:

; 4332 : 				return;
; 4333 : 			}
; 4334 : 
; 4335 : 			// Create a temporary up-to-date rescue disk image in RAM (with it the CD/DVD content will be compared)
; 4336 : 			BootEncObj->CreateRescueIsoImage (false, "");

  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00104	8d 4d cc	 lea	 ecx, DWORD PTR $T180283[ebp]
  00107	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0010c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00112	8d 45 cc	 lea	 eax, DWORD PTR $T180283[ebp]
  00115	50		 push	 eax
  00116	6a 00		 push	 0
  00118	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  0011c	e8 00 00 00 00	 call	 ?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::BootEncryption::CreateRescueIsoImage
  00121	8d 4d cc	 lea	 ecx, DWORD PTR $T180283[ebp]
  00124	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00127	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 4337 : 
; 4338 : 			WaitCursor();

  0012c	e8 00 00 00 00	 call	 _WaitCursor

; 4339 : 			if (!BootEncObj->VerifyRescueDisk ())

  00131	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00137	e8 00 00 00 00	 call	 ?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::VerifyRescueDisk
  0013c	84 c0		 test	 al, al
  0013e	75 29		 jne	 SHORT $LN3@VerifyResc

; 4340 : 				Error ("RESCUE_DISK_NON_WIZARD_CHECK_FAILED");

  00140	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@OKALPMMN@RESCUE_DISK_NON_WIZARD_CHECK_FAI@
  00145	e8 00 00 00 00	 call	 _Error
$LN27@VerifyResc:
  0014a	83 c4 04	 add	 esp, 4
$LN21@VerifyResc:

; 4349 : 		CloseSysEncMutex ();

  0014d	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 4350 : 
; 4351 : 		NormalCursor ();

  00152	e8 00 00 00 00	 call	 _NormalCursor

; 4355 : }

  00157	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0015a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00161	59		 pop	 ecx
  00162	5f		 pop	 edi
  00163	5e		 pop	 esi
  00164	5b		 pop	 ebx
  00165	8b e5		 mov	 esp, ebp
  00167	5d		 pop	 ebp
  00168	c3		 ret	 0
$LN3@VerifyResc:

; 4341 : 			else
; 4342 : 				Info ("RESCUE_DISK_NON_WIZARD_CHECK_PASSED");

  00169	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MMCPJNND@RESCUE_DISK_NON_WIZARD_CHECK_PAS@
  0016e	e8 00 00 00 00	 call	 _Info
  00173	eb d5		 jmp	 SHORT $LN27@VerifyResc
__catch$?VerifyRescueDisk@@YAXXZ$2:

; 4343 : 		}
; 4344 : 		catch (Exception &e)
; 4345 : 		{
; 4346 : 			e.Show (MainDlg);

  00175	8b 4d ec	 mov	 ecx, DWORD PTR _e$137889[ebp]
  00178	8b 11		 mov	 edx, DWORD PTR [ecx]
  0017a	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0017f	8b 12		 mov	 edx, DWORD PTR [edx]
  00181	50		 push	 eax
  00182	ff d2		 call	 edx

; 4347 : 			Error ("RESCUE_DISK_NON_WIZARD_CHECK_FAILED");

  00184	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@OKALPMMN@RESCUE_DISK_NON_WIZARD_CHECK_FAI@
  00189	e8 00 00 00 00	 call	 _Error
  0018e	83 c4 04	 add	 esp, 4

; 4348 : 		}

  00191	b8 00 00 00 00	 mov	 eax, $LN21@VerifyResc
  00196	c3		 ret	 0
$LN6@VerifyResc:

; 4352 : 	}
; 4353 : 	else
; 4354 : 		Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  00197	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  0019c	eb 05		 jmp	 SHORT $LN26@VerifyResc
$LN7@VerifyResc:

; 4320 : 	{
; 4321 : 		Warning ("SYSTEM_ENCRYPTION_NOT_COMPLETED");

  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@CIGKJDHB@SYSTEM_ENCRYPTION_NOT_COMPLETED?$AA@
$LN26@VerifyResc:
  001a3	e8 00 00 00 00	 call	 _Warning
  001a8	83 c4 04	 add	 esp, 4

; 4355 : }

  001ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b5	59		 pop	 ecx
  001b6	5f		 pop	 edi
  001b7	5e		 pop	 esi
  001b8	5b		 pop	 ebx
  001b9	8b e5		 mov	 esp, ebp
  001bb	5d		 pop	 ebp
  001bc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?VerifyRescueDisk@@YAXXZ$4:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR $T180283[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?VerifyRescueDisk@@YAXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 68 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-152]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?VerifyRescueDisk@@YAXXZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?VerifyRescueDisk@@YAXXZ ENDP				; VerifyRescueDisk
PUBLIC	??_C@_0BF@CNAIDNAO@VOL_HEADER_BACKED_UP?$AA@	; `string'
PUBLIC	??_C@_0BH@GJOFNIEF@CONFIRM_VOL_HEADER_BAK?$AA@	; `string'
PUBLIC	??_C@_08DDAIHKOO@IDCANCEL?$AA@			; `string'
PUBLIC	??_C@_0BP@MCBDNFBA@VOLUME_DOES_NOT_CONTAIN_HIDDEN?$AA@ ; `string'
PUBLIC	??_C@_0BH@ICMGDKFO@VOLUME_CONTAINS_HIDDEN?$AA@	; `string'
PUBLIC	??_C@_0BL@NFANNLME@DOES_VOLUME_CONTAIN_HIDDEN?$AA@ ; `string'
PUBLIC	??_C@_0BK@PFPMCGBA@ENTER_NORMAL_VOL_PASSWORD?$AA@ ; `string'
PUBLIC	??_C@_0BK@NBNNCJIA@ENTER_HIDDEN_VOL_PASSWORD?$AA@ ; `string'
PUBLIC	??_C@_0CD@BMDCPMNN@EXTERNAL_VOL_HEADER_BAK_FIRST_IN@ ; `string'
PUBLIC	??_C@_0P@MICPAHBN@DISMOUNT_FIRST?$AA@		; `string'
PUBLIC	??_C@_0CB@COFHFDLC@BACKUP_HEADER_NOT_FOR_SYS_DEVICE@ ; `string'
PUBLIC	_lpszVolume$GSCopy$
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_BackupVolumeHeader
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__close:PROC
EXTRN	__write:PROC
EXTRN	_ReEncryptVolumeHeader:PROC
EXTRN	_EncryptBuffer:PROC
EXTRN	_EAInitMode:PROC
EXTRN	_EAInit:PROC
EXTRN	_RandgetBytes:PROC
EXTRN	_UserEnrichRandomPool:PROC
EXTRN	_Randinit:PROC
EXTRN	_handleError:PROC
EXTRN	_CloseVolume:PROC
EXTRN	?_open@@YAHPBDHH@Z:PROC				; _open
EXTRN	_AskMultiChoice:PROC
EXTRN	_RandSetHashFunction:PROC
EXTRN	_OpenVolume:PROC
EXTRN	_AskErrNoYes:PROC
;	COMDAT ??_C@_0BF@CNAIDNAO@VOL_HEADER_BACKED_UP?$AA@
; File c:\program files\microsoft sdks\windows\v7.0\include\winnt.h
CONST	SEGMENT
??_C@_0BF@CNAIDNAO@VOL_HEADER_BACKED_UP?$AA@ DB 'VOL_HEADER_BACKED_UP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GJOFNIEF@CONFIRM_VOL_HEADER_BAK?$AA@
CONST	SEGMENT
??_C@_0BH@GJOFNIEF@CONFIRM_VOL_HEADER_BAK?$AA@ DB 'CONFIRM_VOL_HEADER_BAK'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08DDAIHKOO@IDCANCEL?$AA@
CONST	SEGMENT
??_C@_08DDAIHKOO@IDCANCEL?$AA@ DB 'IDCANCEL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MCBDNFBA@VOLUME_DOES_NOT_CONTAIN_HIDDEN?$AA@
CONST	SEGMENT
??_C@_0BP@MCBDNFBA@VOLUME_DOES_NOT_CONTAIN_HIDDEN?$AA@ DB 'VOLUME_DOES_NO'
	DB	'T_CONTAIN_HIDDEN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@ICMGDKFO@VOLUME_CONTAINS_HIDDEN?$AA@
CONST	SEGMENT
??_C@_0BH@ICMGDKFO@VOLUME_CONTAINS_HIDDEN?$AA@ DB 'VOLUME_CONTAINS_HIDDEN'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NFANNLME@DOES_VOLUME_CONTAIN_HIDDEN?$AA@
CONST	SEGMENT
??_C@_0BL@NFANNLME@DOES_VOLUME_CONTAIN_HIDDEN?$AA@ DB 'DOES_VOLUME_CONTAI'
	DB	'N_HIDDEN', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PFPMCGBA@ENTER_NORMAL_VOL_PASSWORD?$AA@
CONST	SEGMENT
??_C@_0BK@PFPMCGBA@ENTER_NORMAL_VOL_PASSWORD?$AA@ DB 'ENTER_NORMAL_VOL_PA'
	DB	'SSWORD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NBNNCJIA@ENTER_HIDDEN_VOL_PASSWORD?$AA@
CONST	SEGMENT
??_C@_0BK@NBNNCJIA@ENTER_HIDDEN_VOL_PASSWORD?$AA@ DB 'ENTER_HIDDEN_VOL_PA'
	DB	'SSWORD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@BMDCPMNN@EXTERNAL_VOL_HEADER_BAK_FIRST_IN@
CONST	SEGMENT
??_C@_0CD@BMDCPMNN@EXTERNAL_VOL_HEADER_BAK_FIRST_IN@ DB 'EXTERNAL_VOL_HEA'
	DB	'DER_BAK_FIRST_INFO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MICPAHBN@DISMOUNT_FIRST?$AA@
CONST	SEGMENT
??_C@_0P@MICPAHBN@DISMOUNT_FIRST?$AA@ DB 'DISMOUNT_FIRST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@COFHFDLC@BACKUP_HEADER_NOT_FOR_SYS_DEVICE@
CONST	SEGMENT
??_C@_0CB@COFHFDLC@BACKUP_HEADER_NOT_FOR_SYS_DEVICE@ DB 'BACKUP_HEADER_NO'
	DB	'T_FOR_SYS_DEVICE', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
CONST	ENDS
;	COMDAT _BackupVolumeHeader
_TEXT	SEGMENT
_type$139778 = -140004					; size = 4
_fBackup$ = -140000					; size = 4
_lpszVolume$GSCopy$ = -139996				; size = 4
_hwndDlg$GSCopy$ = -139992				; size = 4
_volTypeChoices$139797 = -139988			; size = 24
_volume$ = -139964					; size = 56
_hiddenVolume$ = -139908				; size = 56
_hiddenVolPassword$ = -139852				; size = 72
_temporaryKey$ = -139780				; size = 256
_originalK2$ = -139524					; size = 256
_szTmp$ = -139268					; size = 8192
_backup$ = -131076					; size = 131072
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_bRequireConfirmation$ = 12				; size = 4
_lpszVolume$ = 16					; size = 4
_BackupVolumeHeader PROC				; COMDAT

; 7466 : {

  00000	b8 e4 22 02 00	 mov	 eax, 140004		; 000222e4H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 e0 22
	02 00		 mov	 DWORD PTR __$ArrayPad$[esp+140004], eax
  00018	55		 push	 ebp
  00019	8b ac 24 ec 22
	02 00		 mov	 ebp, DWORD PTR _hwndDlg$[esp+140004]
  00020	56		 push	 esi
  00021	8b b4 24 f8 22
	02 00		 mov	 esi, DWORD PTR _lpszVolume$[esp+140008]
  00028	57		 push	 edi

; 7467 : 	int nStatus = ERR_OS_ERROR;
; 7468 : 	wchar_t szTmp[4096];
; 7469 : 	int fBackup = -1;
; 7470 : 	OpenVolumeContext volume;
; 7471 : 	OpenVolumeContext hiddenVolume;
; 7472 : 	Password hiddenVolPassword;
; 7473 : 	byte temporaryKey[MASTER_KEYDATA_SIZE];
; 7474 : 	byte originalK2[MASTER_KEYDATA_SIZE];
; 7475 : 
; 7476 : 	volume.VolumeIsOpen = FALSE;
; 7477 : 	hiddenVolume.VolumeIsOpen = FALSE;
; 7478 : 
; 7479 : 	switch (IsSystemDevicePath (lpszVolume, hwndDlg, TRUE))

  00029	6a 01		 push	 1
  0002b	33 ff		 xor	 edi, edi
  0002d	55		 push	 ebp
  0002e	56		 push	 esi
  0002f	89 6c 24 24	 mov	 DWORD PTR _hwndDlg$GSCopy$[esp+140028], ebp

; 7579 : 		goto ret;
; 7580 : 
; 7581 : 	/* Select backup file */
; 7582 : 	if (!BrowseFiles (hwndDlg, "OPEN_TITLE", szFileName, bHistory, TRUE, NULL))

  00033	89 74 24 20	 mov	 DWORD PTR _lpszVolume$GSCopy$[esp+140028], esi
  00037	c7 44 24 1c ff
	ff ff ff	 mov	 DWORD PTR _fBackup$[esp+140028], -1
  0003f	89 7c 24 40	 mov	 DWORD PTR _volume$[esp+140028], edi
  00043	89 7c 24 78	 mov	 DWORD PTR _hiddenVolume$[esp+140028], edi
  00047	e8 00 00 00 00	 call	 _IsSystemDevicePath
  0004c	48		 dec	 eax
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00050	83 f8 01	 cmp	 eax, 1
  00053	77 31		 ja	 SHORT $LN77@BackupVolu
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@COFHFDLC@BACKUP_HEADER_NOT_FOR_SYS_DEVICE@
  0005a	e8 00 00 00 00	 call	 _AskErrNoYes
  0005f	83 c4 04	 add	 esp, 4
  00062	83 f8 06	 cmp	 eax, 6
  00065	75 05		 jne	 SHORT $LN75@BackupVolu

; 7480 : 	{
; 7481 : 	case 1:
; 7482 : 	case 2:
; 7483 : 		if (AskErrNoYes ("BACKUP_HEADER_NOT_FOR_SYS_DEVICE") == IDYES)
; 7484 : 			CreateRescueDisk ();

  00067	e8 00 00 00 00	 call	 _CreateRescueDisk
$LN75@BackupVolu:
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi

; 7485 : 
; 7486 : 		return 0;

  0006e	33 c0		 xor	 eax, eax
  00070	5d		 pop	 ebp

; 7682 : 
; 7683 : 	return nStatus;
; 7684 : }

  00071	8b 8c 24 e0 22
	02 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140004]
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	81 c4 e4 22 02
	00		 add	 esp, 140004		; 000222e4H
  00085	c3		 ret	 0
$LN77@BackupVolu:
  00086	53		 push	 ebx

; 7487 : 	}
; 7488 : 
; 7489 : 	if (IsMountedVolume (lpszVolume))

  00087	56		 push	 esi
  00088	e8 00 00 00 00	 call	 _IsMountedVolume
  0008d	83 c4 04	 add	 esp, 4
  00090	85 c0		 test	 eax, eax
  00092	74 14		 je	 SHORT $LN74@BackupVolu

; 7490 : 	{
; 7491 : 		Warning ("DISMOUNT_FIRST");

  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MICPAHBN@DISMOUNT_FIRST?$AA@

; 7652 : 		goto error;
; 7653 : 	}
; 7654 : 
; 7655 : 	/* Backup has been successfully created */
; 7656 : 	Warning("VOL_HEADER_BACKED_UP");

  00099	e8 00 00 00 00	 call	 _Warning
  0009e	83 c4 04	 add	 esp, 4

; 7657 : 
; 7658 : ret:
; 7659 : 	nStatus = ERR_SUCCESS;

  000a1	33 f6		 xor	 esi, esi
  000a3	e9 81 04 00 00	 jmp	 $error$139813
$LN74@BackupVolu:

; 7492 : 		goto ret;
; 7493 : 	}
; 7494 : 
; 7495 : 	if (!VolumePathExists (lpszVolume))

  000a8	56		 push	 esi
  000a9	e8 00 00 00 00	 call	 _VolumePathExists
  000ae	83 c4 04	 add	 esp, 4
  000b1	85 c0		 test	 eax, eax
  000b3	75 10		 jne	 SHORT $LN72@BackupVolu

; 7496 : 	{
; 7497 : 		handleWin32Error (hwndDlg);

  000b5	55		 push	 ebp
  000b6	e8 00 00 00 00	 call	 _handleWin32Error

; 7652 : 		goto error;
; 7653 : 	}
; 7654 : 
; 7655 : 	/* Backup has been successfully created */
; 7656 : 	Warning("VOL_HEADER_BACKED_UP");

  000bb	83 c4 04	 add	 esp, 4

; 7657 : 
; 7658 : ret:
; 7659 : 	nStatus = ERR_SUCCESS;

  000be	33 f6		 xor	 esi, esi
  000c0	e9 64 04 00 00	 jmp	 $error$139813
$LN72@BackupVolu:

; 7498 : 		goto ret;
; 7499 : 	}
; 7500 : 
; 7501 : 	Info ("EXTERNAL_VOL_HEADER_BAK_FIRST_INFO");

  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@BMDCPMNN@EXTERNAL_VOL_HEADER_BAK_FIRST_IN@
  000ca	e8 00 00 00 00	 call	 _Info
  000cf	83 c4 04	 add	 esp, 4

; 7502 : 
; 7503 : 
; 7504 : 	WaitCursor();

  000d2	e8 00 00 00 00	 call	 _WaitCursor

; 7505 : 
; 7506 : 	// Open both types of volumes
; 7507 : 	for (int type = TC_VOLUME_TYPE_NORMAL; type <= TC_VOLUME_TYPE_HIDDEN; ++type)

  000d7	89 7c 24 10	 mov	 DWORD PTR _type$139778[esp+140020], edi
  000db	eb 03 8d 49 00	 npad	 5
$LL70@BackupVolu:

; 7508 : 	{
; 7509 : 		OpenVolumeContext *askVol = (type == TC_VOLUME_TYPE_HIDDEN ? &hiddenVolume : &volume);

  000e0	83 7c 24 10 01	 cmp	 DWORD PTR _type$139778[esp+140020], 1
  000e5	75 0d		 jne	 SHORT $LN81@BackupVolu
  000e7	8d 5c 24 70	 lea	 ebx, DWORD PTR _hiddenVolume$[esp+140020]

; 7510 : 		Password *askPassword = (type == TC_VOLUME_TYPE_HIDDEN ? &hiddenVolPassword : &VolumePassword);

  000eb	8d bc 24 a8 00
	00 00		 lea	 edi, DWORD PTR _hiddenVolPassword$[esp+140020]
  000f2	eb 0c		 jmp	 SHORT $LL67@BackupVolu
$LN81@BackupVolu:

; 7508 : 	{
; 7509 : 		OpenVolumeContext *askVol = (type == TC_VOLUME_TYPE_HIDDEN ? &hiddenVolume : &volume);

  000f4	8d 5c 24 38	 lea	 ebx, DWORD PTR _volume$[esp+140020]

; 7510 : 		Password *askPassword = (type == TC_VOLUME_TYPE_HIDDEN ? &hiddenVolPassword : &VolumePassword);

  000f8	bf 00 00 00 00	 mov	 edi, OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  000fd	8d 49 00	 npad	 3
$LL67@BackupVolu:

; 7511 : 
; 7512 : 		while (TRUE)
; 7513 : 		{
; 7514 : 			if (!AskVolumePassword (hwndDlg, askPassword, type == TC_VOLUME_TYPE_HIDDEN ? "ENTER_HIDDEN_VOL_PASSWORD" : "ENTER_NORMAL_VOL_PASSWORD", FALSE))

  00100	be 01 00 00 00	 mov	 esi, 1
  00105	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BK@NBNNCJIA@ENTER_HIDDEN_VOL_PASSWORD?$AA@
  0010a	39 74 24 10	 cmp	 DWORD PTR _type$139778[esp+140020], esi
  0010e	74 05		 je	 SHORT $LN86@BackupVolu
  00110	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BK@PFPMCGBA@ENTER_NORMAL_VOL_PASSWORD?$AA@
$LN86@BackupVolu:
  00115	57		 push	 edi
  00116	68 00 00 00 00	 push	 OFFSET _PasswordDlgProc@16
  0011b	55		 push	 ebp
  0011c	a3 00 00 00 00	 mov	 DWORD PTR _PasswordDialogTitleStringId, eax
  00121	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00126	6a 68		 push	 104			; 00000068H
  00128	50		 push	 eax
  00129	89 35 00 00 00
	00		 mov	 DWORD PTR _PasswordDialogDisableMountOptions, esi
  0012f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  00135	3b c6		 cmp	 eax, esi
  00137	0f 85 e0 01 00
	00		 jne	 $LN187@BackupVolu

; 7515 : 			{
; 7516 : 				nStatus = ERR_SUCCESS;
; 7517 : 				goto ret;
; 7518 : 			}
; 7519 : 
; 7520 : 			WaitCursor();

  0013d	e8 00 00 00 00	 call	 _WaitCursor

; 7521 : 
; 7522 : 			if (KeyFilesEnable && FirstKeyFile)

  00142	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  00149	74 13		 je	 SHORT $LN63@BackupVolu
  0014b	a1 00 00 00 00	 mov	 eax, DWORD PTR _FirstKeyFile
  00150	85 c0		 test	 eax, eax
  00152	74 0a		 je	 SHORT $LN63@BackupVolu

; 7523 : 				KeyFilesApply (askPassword, FirstKeyFile);

  00154	50		 push	 eax
  00155	57		 push	 edi
  00156	e8 00 00 00 00	 call	 _KeyFilesApply
  0015b	83 c4 08	 add	 esp, 8
$LN63@BackupVolu:

; 7524 : 
; 7525 : 			nStatus = OpenVolume (askVol, lpszVolume, askPassword, FALSE, bPreserveTimestamp, FALSE);

  0015e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bPreserveTimestamp
  00164	8b 54 24 18	 mov	 edx, DWORD PTR _lpszVolume$GSCopy$[esp+140020]
  00168	6a 00		 push	 0
  0016a	51		 push	 ecx
  0016b	6a 00		 push	 0
  0016d	57		 push	 edi
  0016e	52		 push	 edx
  0016f	53		 push	 ebx
  00170	e8 00 00 00 00	 call	 _OpenVolume
  00175	83 c4 18	 add	 esp, 24			; 00000018H
  00178	8b f0		 mov	 esi, eax

; 7526 : 
; 7527 : 			NormalCursor();

  0017a	e8 00 00 00 00	 call	 _NormalCursor

; 7528 : 
; 7529 : 			if (nStatus == ERR_SUCCESS)

  0017f	85 f6		 test	 esi, esi
  00181	0f 85 6e 01 00
	00		 jne	 $LN62@BackupVolu

; 7530 : 			{
; 7531 : 				if ((type == TC_VOLUME_TYPE_NORMAL && askVol->CryptoInfo->hiddenVolume)
; 7532 : 					|| (type == TC_VOLUME_TYPE_HIDDEN && !askVol->CryptoInfo->hiddenVolume))

  00187	8b 74 24 10	 mov	 esi, DWORD PTR _type$139778[esp+140020]
  0018b	85 f6		 test	 esi, esi
  0018d	0f 85 33 01 00
	00		 jne	 $LN59@BackupVolu
  00193	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00196	39 b0 a0 29 00
	00		 cmp	 DWORD PTR [eax+10656], esi
  0019c	0f 85 3d 01 00
	00		 jne	 $LN60@BackupVolu
$LN201@BackupVolu:

; 7537 : 				}
; 7538 : 
; 7539 : 				RandSetHashFunction (askVol->CryptoInfo->pkcs5);

  001a2	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  001a5	8b 82 ec 43 00
	00		 mov	 eax, DWORD PTR [edx+17388]
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 _RandSetHashFunction

; 7540 : 
; 7541 : 				if (type == TC_VOLUME_TYPE_NORMAL)

  001b1	33 ff		 xor	 edi, edi
  001b3	83 c4 04	 add	 esp, 4
  001b6	3b f7		 cmp	 esi, edi
  001b8	75 3f		 jne	 SHORT $LN69@BackupVolu

; 7542 : 				{
; 7543 : 					// Ask the user if there is a hidden volume
; 7544 : 					char *volTypeChoices[] = {0, "DOES_VOLUME_CONTAIN_HIDDEN", "VOLUME_CONTAINS_HIDDEN", "VOLUME_DOES_NOT_CONTAIN_HIDDEN", "IDCANCEL", 0};
; 7545 : 					switch (AskMultiChoice ((void **) volTypeChoices, FALSE))

  001ba	8d 4c 24 20	 lea	 ecx, DWORD PTR _volTypeChoices$139797[esp+140020]
  001be	57		 push	 edi
  001bf	51		 push	 ecx
  001c0	89 7c 24 28	 mov	 DWORD PTR _volTypeChoices$139797[esp+140028], edi
  001c4	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR _volTypeChoices$139797[esp+140032], OFFSET ??_C@_0BL@NFANNLME@DOES_VOLUME_CONTAIN_HIDDEN?$AA@
  001cc	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR _volTypeChoices$139797[esp+140036], OFFSET ??_C@_0BH@ICMGDKFO@VOLUME_CONTAINS_HIDDEN?$AA@
  001d4	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR _volTypeChoices$139797[esp+140040], OFFSET ??_C@_0BP@MCBDNFBA@VOLUME_DOES_NOT_CONTAIN_HIDDEN?$AA@
  001dc	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR _volTypeChoices$139797[esp+140044], OFFSET ??_C@_08DDAIHKOO@IDCANCEL?$AA@
  001e4	89 7c 24 3c	 mov	 DWORD PTR _volTypeChoices$139797[esp+140048], edi
  001e8	e8 00 00 00 00	 call	 _AskMultiChoice
  001ed	83 c4 08	 add	 esp, 8
  001f0	83 e8 01	 sub	 eax, 1
  001f3	0f 85 14 01 00
	00		 jne	 $LN200@BackupVolu
$LN69@BackupVolu:

; 7505 : 
; 7506 : 	// Open both types of volumes
; 7507 : 	for (int type = TC_VOLUME_TYPE_NORMAL; type <= TC_VOLUME_TYPE_HIDDEN; ++type)

  001f9	46		 inc	 esi
  001fa	83 fe 01	 cmp	 esi, 1
  001fd	89 74 24 10	 mov	 DWORD PTR _type$139778[esp+140020], esi
  00201	0f 8e d9 fe ff
	ff		 jle	 $LL70@BackupVolu
$noHidden$139808:

; 7566 : 	}
; 7567 : noHidden:
; 7568 : 
; 7569 : 	if (hiddenVolume.VolumeIsOpen && volume.CryptoInfo->LegacyVolume != hiddenVolume.CryptoInfo->LegacyVolume)

  00207	39 7c 24 70	 cmp	 DWORD PTR _hiddenVolume$[esp+140020], edi
  0020b	74 1a		 je	 SHORT $LN48@BackupVolu
  0020d	8b 54 24 3c	 mov	 edx, DWORD PTR _volume$[esp+140024]
  00211	8b 82 3c 44 00
	00		 mov	 eax, DWORD PTR [edx+17468]
  00217	8b 4c 24 74	 mov	 ecx, DWORD PTR _hiddenVolume$[esp+140024]
  0021b	3b 81 3c 44 00
	00		 cmp	 eax, DWORD PTR [ecx+17468]

; 7657 : 
; 7658 : ret:
; 7659 : 	nStatus = ERR_SUCCESS;

  00221	0f 85 fd 02 00
	00		 jne	 $LN37@BackupVolu
$LN48@BackupVolu:

; 7570 : 	{
; 7571 : 		nStatus = ERR_PARAMETER_INCORRECT;
; 7572 : 		goto error;
; 7573 : 	}
; 7574 : 
; 7575 : 	swprintf (szTmp, GetString ("CONFIRM_VOL_HEADER_BAK"), lpszVolume);

  00227	8b 54 24 18	 mov	 edx, DWORD PTR _lpszVolume$GSCopy$[esp+140020]
  0022b	52		 push	 edx
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GJOFNIEF@CONFIRM_VOL_HEADER_BAK?$AA@
  00231	e8 00 00 00 00	 call	 _GetString
  00236	83 c4 04	 add	 esp, 4
  00239	50		 push	 eax
  0023a	8d 84 24 f8 02
	00 00		 lea	 eax, DWORD PTR _szTmp$[esp+140028]
  00241	50		 push	 eax
  00242	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  00247	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7576 : 
; 7577 : 	if (bRequireConfirmation 
; 7578 : 		&& (MessageBoxW (hwndDlg, szTmp, lpszTitle, YES_NO|MB_ICONQUESTION|MB_DEFBUTTON1) == IDNO))

  0024a	39 bc 24 fc 22
	02 00		 cmp	 DWORD PTR _bRequireConfirmation$[esp+140016], edi
  00251	74 23		 je	 SHORT $LN46@BackupVolu
  00253	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  00259	6a 24		 push	 36			; 00000024H
  0025b	51		 push	 ecx
  0025c	8d 94 24 f8 02
	00 00		 lea	 edx, DWORD PTR _szTmp$[esp+140028]
  00263	52		 push	 edx
  00264	55		 push	 ebp
  00265	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  0026b	83 f8 07	 cmp	 eax, 7
  0026e	0f 84 ac 02 00
	00		 je	 $ret$139773
  00274	33 ff		 xor	 edi, edi
$LN46@BackupVolu:

; 7579 : 		goto ret;
; 7580 : 
; 7581 : 	/* Select backup file */
; 7582 : 	if (!BrowseFiles (hwndDlg, "OPEN_TITLE", szFileName, bHistory, TRUE, NULL))

  00276	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHistory
  0027b	57		 push	 edi
  0027c	6a 01		 push	 1
  0027e	50		 push	 eax
  0027f	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00284	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GHEOANHD@OPEN_TITLE?$AA@
  00289	55		 push	 ebp
  0028a	e8 00 00 00 00	 call	 _BrowseFiles
  0028f	83 c4 18	 add	 esp, 24			; 00000018H
  00292	85 c0		 test	 eax, eax
  00294	0f 84 86 02 00
	00		 je	 $ret$139773

; 7583 : 		goto ret;
; 7584 : 
; 7585 : 	/* Conceive the backup file */
; 7586 : 	if ((fBackup = _open(szFileName, _O_CREAT|_O_TRUNC|_O_WRONLY|_O_BINARY, _S_IREAD|_S_IWRITE)) == -1)

  0029a	68 80 01 00 00	 push	 384			; 00000180H
  0029f	68 01 83 00 00	 push	 33537			; 00008301H
  002a4	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  002a9	e8 00 00 00 00	 call	 ?_open@@YAHPBDHH@Z	; _open
  002ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b1	89 44 24 14	 mov	 DWORD PTR _fBackup$[esp+140020], eax
  002b5	83 f8 ff	 cmp	 eax, -1
  002b8	0f 85 92 00 00
	00		 jne	 $LN42@BackupVolu

; 7587 : 	{
; 7588 : 		nStatus = ERR_OS_ERROR;

  002be	8d 70 02	 lea	 esi, DWORD PTR [eax+2]

; 7657 : 
; 7658 : ret:
; 7659 : 	nStatus = ERR_SUCCESS;

  002c1	e9 63 02 00 00	 jmp	 $error$139813
$LN59@BackupVolu:

; 7530 : 			{
; 7531 : 				if ((type == TC_VOLUME_TYPE_NORMAL && askVol->CryptoInfo->hiddenVolume)
; 7532 : 					|| (type == TC_VOLUME_TYPE_HIDDEN && !askVol->CryptoInfo->hiddenVolume))

  002c6	83 fe 01	 cmp	 esi, 1
  002c9	0f 85 d3 fe ff
	ff		 jne	 $LN201@BackupVolu
  002cf	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  002d2	83 b9 a0 29 00
	00 00		 cmp	 DWORD PTR [ecx+10656], 0
  002d9	0f 85 c3 fe ff
	ff		 jne	 $LN201@BackupVolu
$LN60@BackupVolu:

; 7533 : 				{
; 7534 : 					CloseVolume (askVol);

  002df	53		 push	 ebx
  002e0	e8 00 00 00 00	 call	 _CloseVolume

; 7535 : 					handleError (hwndDlg, ERR_PASSWORD_WRONG);

  002e5	6a 03		 push	 3
  002e7	55		 push	 ebp
  002e8	e8 00 00 00 00	 call	 _handleError
  002ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7536 : 					continue;

  002f0	e9 0b fe ff ff	 jmp	 $LL67@BackupVolu
$LN62@BackupVolu:

; 7546 : 					{
; 7547 : 					case 1:
; 7548 : 						break;
; 7549 : 					case 2:
; 7550 : 						goto noHidden;
; 7551 : 
; 7552 : 					default:
; 7553 : 						nStatus = ERR_SUCCESS;
; 7554 : 						goto ret;
; 7555 : 					}
; 7556 : 				}
; 7557 : 
; 7558 : 				break;
; 7559 : 			}
; 7560 : 
; 7561 : 			if (nStatus != ERR_PASSWORD_WRONG)

  002f5	83 fe 03	 cmp	 esi, 3
  002f8	0f 85 2b 02 00
	00		 jne	 $error$139813

; 7562 : 				goto error;
; 7563 : 
; 7564 : 			handleError (hwndDlg, nStatus);

  002fe	56		 push	 esi
  002ff	55		 push	 ebp
  00300	e8 00 00 00 00	 call	 _handleError
  00305	83 c4 08	 add	 esp, 8

; 7565 : 		}

  00308	e9 f3 fd ff ff	 jmp	 $LL67@BackupVolu
$LN200@BackupVolu:

; 7542 : 				{
; 7543 : 					// Ask the user if there is a hidden volume
; 7544 : 					char *volTypeChoices[] = {0, "DOES_VOLUME_CONTAIN_HIDDEN", "VOLUME_CONTAINS_HIDDEN", "VOLUME_DOES_NOT_CONTAIN_HIDDEN", "IDCANCEL", 0};
; 7545 : 					switch (AskMultiChoice ((void **) volTypeChoices, FALSE))

  0030d	83 e8 01	 sub	 eax, 1
  00310	0f 84 f1 fe ff
	ff		 je	 $noHidden$139808

; 7657 : 
; 7658 : ret:
; 7659 : 	nStatus = ERR_SUCCESS;

  00316	33 f6		 xor	 esi, esi
  00318	e9 0c 02 00 00	 jmp	 $error$139813
$LN187@BackupVolu:

; 7511 : 
; 7512 : 		while (TRUE)
; 7513 : 		{
; 7514 : 			if (!AskVolumePassword (hwndDlg, askPassword, type == TC_VOLUME_TYPE_HIDDEN ? "ENTER_HIDDEN_VOL_PASSWORD" : "ENTER_NORMAL_VOL_PASSWORD", FALSE))

  0031d	ba 14 00 00 00	 mov	 edx, OFFSET ?mountOptions@@3UMountOptions@@A+20
  00322	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00327	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0032d	8b f1		 mov	 esi, ecx
  0032f	8b c2		 mov	 eax, edx
$LL96@BackupVolu:
  00331	c6 00 00	 mov	 BYTE PTR [eax], 0
  00334	40		 inc	 eax
  00335	83 ee 01	 sub	 esi, 1
  00338	75 f7		 jne	 SHORT $LL96@BackupVolu
  0033a	8d 9b 00 00 00
	00		 npad	 6
$LL88@BackupVolu:
  00340	49		 dec	 ecx
  00341	c6 02 00	 mov	 BYTE PTR [edx], 0
  00344	42		 inc	 edx
  00345	85 c9		 test	 ecx, ecx
  00347	75 f7		 jne	 SHORT $LL88@BackupVolu

; 7657 : 
; 7658 : ret:
; 7659 : 	nStatus = ERR_SUCCESS;

  00349	33 f6		 xor	 esi, esi
  0034b	e9 d9 01 00 00	 jmp	 $error$139813
$LN42@BackupVolu:

; 7589 : 		goto error;
; 7590 : 	}
; 7591 : 
; 7592 : 	// Backup headers
; 7593 : 
; 7594 : 	byte backup[TC_VOLUME_HEADER_GROUP_SIZE];
; 7595 : 
; 7596 : 	bool legacyVolume = volume.CryptoInfo->LegacyVolume ? true : false;

  00350	8b 44 24 3c	 mov	 eax, DWORD PTR _volume$[esp+140024]
  00354	83 b8 3c 44 00
	00 00		 cmp	 DWORD PTR [eax+17468], 0

; 7597 : 	int backupFileSize = legacyVolume ? TC_VOLUME_HEADER_SIZE_LEGACY * 2 : TC_VOLUME_HEADER_GROUP_SIZE;
; 7598 : 
; 7599 : 	// Fill backup buffer with random data
; 7600 : 	memcpy (originalK2, volume.CryptoInfo->k2, sizeof (volume.CryptoInfo->k2));

  0035b	8d b0 a8 42 00
	00		 lea	 esi, DWORD PTR [eax+17064]
  00361	0f 95 c3	 setne	 bl
  00364	0f b6 eb	 movzx	 ebp, bl
  00367	f7 dd		 neg	 ebp
  00369	1b ed		 sbb	 ebp, ebp
  0036b	81 e5 00 04 fe
	ff		 and	 ebp, -130048		; fffe0400H
  00371	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00376	8d bc 24 f0 01
	00 00		 lea	 edi, DWORD PTR _originalK2$[esp+140020]
  0037d	81 c5 00 00 02
	00		 add	 ebp, 131072		; 00020000H
  00383	f3 a5		 rep movsd

; 7601 : 
; 7602 : 	if (Randinit() != ERR_SUCCESS)

  00385	e8 00 00 00 00	 call	 _Randinit
  0038a	85 c0		 test	 eax, eax

; 7657 : 
; 7658 : ret:
; 7659 : 	nStatus = ERR_SUCCESS;

  0038c	0f 85 92 01 00
	00		 jne	 $LN37@BackupVolu
  00392	e8 00 00 00 00	 call	 _NormalCursor
  00397	8b 4c 24 1c	 mov	 ecx, DWORD PTR _hwndDlg$GSCopy$[esp+140020]
  0039b	51		 push	 ecx
  0039c	e8 00 00 00 00	 call	 _UserEnrichRandomPool
  003a1	83 c4 04	 add	 esp, 4
  003a4	e8 00 00 00 00	 call	 _WaitCursor
  003a9	8b 54 24 3c	 mov	 edx, DWORD PTR _volume$[esp+140024]
  003ad	8b 02		 mov	 eax, DWORD PTR [edx]
  003af	6a 01		 push	 1
  003b1	50		 push	 eax
  003b2	e8 00 00 00 00	 call	 _EAGetKeySize
  003b7	83 c4 04	 add	 esp, 4
  003ba	50		 push	 eax
  003bb	8d 8c 24 f8 00
	00 00		 lea	 ecx, DWORD PTR _temporaryKey$[esp+140028]
  003c2	51		 push	 ecx
  003c3	e8 00 00 00 00	 call	 _RandgetBytes
  003c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  003cb	85 c0		 test	 eax, eax
  003cd	0f 84 51 01 00
	00		 je	 $LN37@BackupVolu
  003d3	8b 54 24 3c	 mov	 edx, DWORD PTR _volume$[esp+140024]
  003d7	6a 00		 push	 0
  003d9	81 c2 a8 42 00
	00		 add	 edx, 17064		; 000042a8H
  003df	68 00 01 00 00	 push	 256			; 00000100H
  003e4	52		 push	 edx
  003e5	e8 00 00 00 00	 call	 _RandgetBytes
  003ea	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ed	85 c0		 test	 eax, eax
  003ef	0f 84 2f 01 00
	00		 je	 $LN37@BackupVolu
  003f5	8b 44 24 3c	 mov	 eax, DWORD PTR _volume$[esp+140024]
  003f9	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  003fc	8b 00		 mov	 eax, DWORD PTR [eax]
  003fe	51		 push	 ecx
  003ff	8d 94 24 f4 00
	00 00		 lea	 edx, DWORD PTR _temporaryKey$[esp+140024]
  00406	52		 push	 edx
  00407	50		 push	 eax
  00408	e8 00 00 00 00	 call	 _EAInit
  0040d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00410	85 c0		 test	 eax, eax
  00412	0f 85 0c 01 00
	00		 jne	 $LN37@BackupVolu
  00418	8b 4c 24 3c	 mov	 ecx, DWORD PTR _volume$[esp+140024]
  0041c	51		 push	 ecx
  0041d	e8 00 00 00 00	 call	 _EAInitMode
  00422	83 c4 04	 add	 esp, 4
  00425	85 c0		 test	 eax, eax
  00427	0f 84 f7 00 00
	00		 je	 $LN37@BackupVolu
  0042d	8b 54 24 3c	 mov	 edx, DWORD PTR _volume$[esp+140024]
  00431	52		 push	 edx
  00432	8b c5		 mov	 eax, ebp
  00434	99		 cdq
  00435	52		 push	 edx
  00436	50		 push	 eax
  00437	8d 84 24 fc 22
	00 00		 lea	 eax, DWORD PTR _backup$[esp+140032]
  0043e	50		 push	 eax
  0043f	e8 00 00 00 00	 call	 _EncryptBuffer
  00444	8b 7c 24 4c	 mov	 edi, DWORD PTR _volume$[esp+140040]
  00448	81 c7 a8 42 00
	00		 add	 edi, 17064		; 000042a8H
  0044e	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00453	8d b4 24 00 02
	00 00		 lea	 esi, DWORD PTR _originalK2$[esp+140036]
  0045a	f3 a5		 rep movsd
  0045c	8b 44 24 4c	 mov	 eax, DWORD PTR _volume$[esp+140040]
  00460	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  00463	51		 push	 ecx
  00464	8d 90 a8 41 00
	00		 lea	 edx, DWORD PTR [eax+16808]
  0046a	8b 00		 mov	 eax, DWORD PTR [eax]
  0046c	52		 push	 edx
  0046d	50		 push	 eax
  0046e	e8 00 00 00 00	 call	 _EAInit
  00473	83 c4 1c	 add	 esp, 28			; 0000001cH
  00476	85 c0		 test	 eax, eax
  00478	0f 85 a6 00 00
	00		 jne	 $LN37@BackupVolu
  0047e	8b 4c 24 3c	 mov	 ecx, DWORD PTR _volume$[esp+140024]
  00482	51		 push	 ecx
  00483	e8 00 00 00 00	 call	 _EAInitMode
  00488	83 c4 04	 add	 esp, 4
  0048b	85 c0		 test	 eax, eax
  0048d	0f 84 91 00 00
	00		 je	 $LN37@BackupVolu
  00493	8b 54 24 3c	 mov	 edx, DWORD PTR _volume$[esp+140024]
  00497	6a 00		 push	 0
  00499	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  0049e	52		 push	 edx
  0049f	8d 84 24 fc 22
	00 00		 lea	 eax, DWORD PTR _backup$[esp+140032]
  004a6	6a 00		 push	 0
  004a8	50		 push	 eax
  004a9	e8 00 00 00 00	 call	 _ReEncryptVolumeHeader
  004ae	8b f0		 mov	 esi, eax
  004b0	83 c4 14	 add	 esp, 20			; 00000014H
  004b3	85 f6		 test	 esi, esi
  004b5	75 72		 jne	 SHORT $error$139813

; 7617 : 		goto error;
; 7618 : 	}
; 7619 : 
; 7620 : 	if (EAInit (volume.CryptoInfo->ea, temporaryKey, volume.CryptoInfo->ks) != ERR_SUCCESS || !EAInitMode (volume.CryptoInfo))
; 7621 : 	{
; 7622 : 		nStatus = ERR_PARAMETER_INCORRECT;
; 7623 : 		goto error;
; 7624 : 	}
; 7625 : 
; 7626 : 	EncryptBuffer (backup, backupFileSize, volume.CryptoInfo);
; 7627 : 
; 7628 : 	memcpy (volume.CryptoInfo->k2, originalK2, sizeof (volume.CryptoInfo->k2));
; 7629 : 	if (EAInit (volume.CryptoInfo->ea, volume.CryptoInfo->master_keydata, volume.CryptoInfo->ks) != ERR_SUCCESS || !EAInitMode (volume.CryptoInfo))
; 7630 : 	{
; 7631 : 		nStatus = ERR_PARAMETER_INCORRECT;
; 7632 : 		goto error;
; 7633 : 	}
; 7634 : 
; 7635 : 	// Store header encrypted with a new key
; 7636 : 	nStatus = ReEncryptVolumeHeader ((char *) backup, FALSE, volume.CryptoInfo, &VolumePassword, FALSE);
; 7637 : 	if (nStatus != ERR_SUCCESS)
; 7638 : 		goto error;
; 7639 : 
; 7640 : 	if (hiddenVolume.VolumeIsOpen)

  004b7	39 44 24 70	 cmp	 DWORD PTR _hiddenVolume$[esp+140020], eax
  004bb	74 36		 je	 SHORT $LN26@BackupVolu

; 7641 : 	{
; 7642 : 		nStatus = ReEncryptVolumeHeader ((char *) backup + (legacyVolume ? TC_VOLUME_HEADER_SIZE_LEGACY : TC_VOLUME_HEADER_SIZE),
; 7643 : 			 FALSE, hiddenVolume.CryptoInfo, &hiddenVolPassword, FALSE);

  004bd	8b 54 24 74	 mov	 edx, DWORD PTR _hiddenVolume$[esp+140024]
  004c1	50		 push	 eax
  004c2	8d 8c 24 ac 00
	00 00		 lea	 ecx, DWORD PTR _hiddenVolPassword$[esp+140024]
  004c9	51		 push	 ecx
  004ca	52		 push	 edx
  004cb	50		 push	 eax
  004cc	0f b6 c3	 movzx	 eax, bl
  004cf	f7 d8		 neg	 eax
  004d1	1b c0		 sbb	 eax, eax
  004d3	25 00 02 ff ff	 and	 eax, -65024		; ffff0200H
  004d8	05 00 00 01 00	 add	 eax, 65536		; 00010000H
  004dd	8d 8c 04 00 23
	00 00		 lea	 ecx, DWORD PTR _backup$[esp+eax+140036]
  004e4	51		 push	 ecx
  004e5	e8 00 00 00 00	 call	 _ReEncryptVolumeHeader
  004ea	8b f0		 mov	 esi, eax
  004ec	83 c4 14	 add	 esp, 20			; 00000014H

; 7644 : 
; 7645 : 		if (nStatus != ERR_SUCCESS)

  004ef	85 f6		 test	 esi, esi
  004f1	75 36		 jne	 SHORT $error$139813
$LN26@BackupVolu:

; 7646 : 			goto error;
; 7647 : 	}
; 7648 : 
; 7649 : 	if (_write (fBackup, backup, backupFileSize) == -1)

  004f3	8b 44 24 14	 mov	 eax, DWORD PTR _fBackup$[esp+140020]
  004f7	55		 push	 ebp
  004f8	8d 94 24 f4 22
	00 00		 lea	 edx, DWORD PTR _backup$[esp+140024]
  004ff	52		 push	 edx
  00500	50		 push	 eax
  00501	e8 00 00 00 00	 call	 __write
  00506	83 c4 0c	 add	 esp, 12			; 0000000cH
  00509	83 f8 ff	 cmp	 eax, -1
  0050c	75 05		 jne	 SHORT $LN24@BackupVolu

; 7650 : 	{
; 7651 : 		nStatus = ERR_OS_ERROR;

  0050e	8d 70 02	 lea	 esi, DWORD PTR [eax+2]

; 7657 : 
; 7658 : ret:
; 7659 : 	nStatus = ERR_SUCCESS;

  00511	eb 16		 jmp	 SHORT $error$139813
$LN24@BackupVolu:

; 7652 : 		goto error;
; 7653 : 	}
; 7654 : 
; 7655 : 	/* Backup has been successfully created */
; 7656 : 	Warning("VOL_HEADER_BACKED_UP");

  00513	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@CNAIDNAO@VOL_HEADER_BACKED_UP?$AA@
  00518	e8 00 00 00 00	 call	 _Warning
  0051d	83 c4 04	 add	 esp, 4
$ret$139773:

; 7657 : 
; 7658 : ret:
; 7659 : 	nStatus = ERR_SUCCESS;

  00520	33 f6		 xor	 esi, esi
  00522	eb 05		 jmp	 SHORT $error$139813
$LN37@BackupVolu:

; 7603 : 	{
; 7604 : 		nStatus = ERR_PARAMETER_INCORRECT; 
; 7605 : 		goto error;
; 7606 : 	}
; 7607 : 
; 7608 : 	NormalCursor();
; 7609 : 	UserEnrichRandomPool (hwndDlg);
; 7610 : 	WaitCursor();
; 7611 : 
; 7612 : 	// Temporary keys
; 7613 : 	if (!RandgetBytes (temporaryKey, EAGetKeySize (volume.CryptoInfo->ea), TRUE)
; 7614 : 		|| !RandgetBytes (volume.CryptoInfo->k2, sizeof (volume.CryptoInfo->k2), FALSE))
; 7615 : 	{
; 7616 : 		nStatus = ERR_PARAMETER_INCORRECT; 

  00524	be 1e 00 00 00	 mov	 esi, 30			; 0000001eH
$error$139813:

; 7660 : 
; 7661 : error:
; 7662 : 	DWORD dwError = GetLastError ();

  00529	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 7663 : 
; 7664 : 	CloseVolume (&volume);

  0052f	8d 4c 24 38	 lea	 ecx, DWORD PTR _volume$[esp+140020]
  00533	51		 push	 ecx
  00534	8b f8		 mov	 edi, eax
  00536	e8 00 00 00 00	 call	 _CloseVolume

; 7665 : 	CloseVolume (&hiddenVolume);

  0053b	8d 54 24 74	 lea	 edx, DWORD PTR _hiddenVolume$[esp+140024]
  0053f	52		 push	 edx
  00540	e8 00 00 00 00	 call	 _CloseVolume

; 7666 : 
; 7667 : 	if (fBackup != -1)

  00545	8b 44 24 1c	 mov	 eax, DWORD PTR _fBackup$[esp+140028]
  00549	83 c4 08	 add	 esp, 8
  0054c	5b		 pop	 ebx
  0054d	83 f8 ff	 cmp	 eax, -1
  00550	74 09		 je	 SHORT $LN22@BackupVolu

; 7668 : 		_close (fBackup);

  00552	50		 push	 eax
  00553	e8 00 00 00 00	 call	 __close
  00558	83 c4 04	 add	 esp, 4
$LN22@BackupVolu:

; 7669 : 
; 7670 : 	SetLastError (dwError);

  0055b	57		 push	 edi
  0055c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 7671 : 	if (nStatus != 0)

  00562	85 f6		 test	 esi, esi
  00564	74 0e		 je	 SHORT $LN20@BackupVolu

; 7672 : 		handleError (hwndDlg, nStatus);

  00566	8b 44 24 18	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[esp+140016]
  0056a	56		 push	 esi
  0056b	50		 push	 eax
  0056c	e8 00 00 00 00	 call	 _handleError
  00571	83 c4 08	 add	 esp, 8
$LN20@BackupVolu:

; 7673 : 
; 7674 : 	burn (&VolumePassword, sizeof (VolumePassword));

  00574	ba 00 00 00 00	 mov	 edx, OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  00579	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  0057e	8b f9		 mov	 edi, ecx
  00580	8b c2		 mov	 eax, edx
$LL100@BackupVolu:
  00582	c6 00 00	 mov	 BYTE PTR [eax], 0
  00585	40		 inc	 eax
  00586	83 ef 01	 sub	 edi, 1
  00589	75 f7		 jne	 SHORT $LL100@BackupVolu
  0058b	eb 03 8d 49 00	 npad	 5
$LL17@BackupVolu:
  00590	49		 dec	 ecx
  00591	c6 02 00	 mov	 BYTE PTR [edx], 0
  00594	42		 inc	 edx
  00595	85 c9		 test	 ecx, ecx
  00597	75 f7		 jne	 SHORT $LL17@BackupVolu

; 7675 : 	burn (&hiddenVolPassword, sizeof (hiddenVolPassword));

  00599	8d 94 24 a4 00
	00 00		 lea	 edx, DWORD PTR _hiddenVolPassword$[esp+140016]
  005a0	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  005a5	8b f9		 mov	 edi, ecx
  005a7	8b c2		 mov	 eax, edx
  005a9	8d a4 24 00 00
	00 00		 npad	 7
$LL104@BackupVolu:
  005b0	c6 00 00	 mov	 BYTE PTR [eax], 0
  005b3	40		 inc	 eax
  005b4	83 ef 01	 sub	 edi, 1
  005b7	75 f7		 jne	 SHORT $LL104@BackupVolu
  005b9	8d a4 24 00 00
	00 00		 npad	 7
$LL12@BackupVolu:
  005c0	49		 dec	 ecx
  005c1	c6 02 00	 mov	 BYTE PTR [edx], 0
  005c4	42		 inc	 edx
  005c5	85 c9		 test	 ecx, ecx
  005c7	75 f7		 jne	 SHORT $LL12@BackupVolu

; 7676 : 	burn (temporaryKey, sizeof (temporaryKey));

  005c9	8d 94 24 ec 00
	00 00		 lea	 edx, DWORD PTR _temporaryKey$[esp+140016]
  005d0	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  005d5	8b f9		 mov	 edi, ecx
  005d7	8b c2		 mov	 eax, edx
  005d9	8d a4 24 00 00
	00 00		 npad	 7
$LL108@BackupVolu:
  005e0	c6 00 00	 mov	 BYTE PTR [eax], 0
  005e3	40		 inc	 eax
  005e4	83 ef 01	 sub	 edi, 1
  005e7	75 f7		 jne	 SHORT $LL108@BackupVolu
  005e9	8d a4 24 00 00
	00 00		 npad	 7
$LL7@BackupVolu:
  005f0	49		 dec	 ecx
  005f1	c6 02 00	 mov	 BYTE PTR [edx], 0
  005f4	42		 inc	 edx
  005f5	85 c9		 test	 ecx, ecx
  005f7	75 f7		 jne	 SHORT $LL7@BackupVolu

; 7677 : 	burn (originalK2, sizeof (originalK2));

  005f9	8d 94 24 ec 01
	00 00		 lea	 edx, DWORD PTR _originalK2$[esp+140016]
  00600	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00605	8b f9		 mov	 edi, ecx
  00607	8b c2		 mov	 eax, edx
  00609	8d a4 24 00 00
	00 00		 npad	 7
$LL112@BackupVolu:
  00610	c6 00 00	 mov	 BYTE PTR [eax], 0
  00613	40		 inc	 eax
  00614	83 ef 01	 sub	 edi, 1
  00617	75 f7		 jne	 SHORT $LL112@BackupVolu
  00619	8d a4 24 00 00
	00 00		 npad	 7
$LL2@BackupVolu:
  00620	49		 dec	 ecx
  00621	c6 02 00	 mov	 BYTE PTR [edx], 0
  00624	42		 inc	 edx
  00625	85 c9		 test	 ecx, ecx
  00627	75 f7		 jne	 SHORT $LL2@BackupVolu

; 7678 : 	
; 7679 : 	RestoreDefaultKeyFilesParam();

  00629	e8 00 00 00 00	 call	 _RestoreDefaultKeyFilesParam

; 7680 : 	RandStop (FALSE);

  0062e	6a 00		 push	 0
  00630	e8 00 00 00 00	 call	 _RandStop
  00635	83 c4 04	 add	 esp, 4

; 7681 : 	NormalCursor();

  00638	e8 00 00 00 00	 call	 _NormalCursor

; 7682 : 
; 7683 : 	return nStatus;
; 7684 : }

  0063d	8b 8c 24 ec 22
	02 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140016]
  00644	5f		 pop	 edi
  00645	8b c6		 mov	 eax, esi
  00647	5e		 pop	 esi
  00648	5d		 pop	 ebp
  00649	33 cc		 xor	 ecx, esp
  0064b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00650	81 c4 e4 22 02
	00		 add	 esp, 140004		; 000222e4H
  00656	c3		 ret	 0
_BackupVolumeHeader ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@KBMHKHFE@VOL_HEADER_RESTORED?$AA@	; `string'
PUBLIC	??_C@_0BN@OAEDFHDH@ENTER_HEADER_BACKUP_PASSWORD?$AA@ ; `string'
PUBLIC	??_C@_0BN@JPMMBOLE@HEADER_BACKUP_SIZE_INCORRECT?$AA@ ; `string'
PUBLIC	??_C@_0BL@LDJEOHOC@CONFIRM_VOL_HEADER_RESTORE?$AA@ ; `string'
PUBLIC	??_C@_0BM@IJOHKBBH@VOLUME_HAS_NO_BACKUP_HEADER?$AA@ ; `string'
PUBLIC	??_C@_0BI@BLBOEPDF@HEADER_RESTORE_EXTERNAL?$AA@	; `string'
PUBLIC	??_C@_0BI@EHPOIEIN@HEADER_RESTORE_INTERNAL?$AA@	; `string'
PUBLIC	??_C@_0CB@FAFBPKHB@HEADER_RESTORE_EXTERNAL_INTERNAL@ ; `string'
PUBLIC	??_C@_0CC@JDGAADHA@RESTORE_HEADER_NOT_FOR_SYS_DEVIC@ ; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_RestoreVolumeHeader
EXTRN	_RemoveFakeDosName:PROC
EXTRN	__imp__SetFileTime@16:PROC
EXTRN	_crypto_close:PROC
EXTRN	_WriteEffectiveVolumeHeader:PROC
EXTRN	_ReadVolumeHeader:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__GetFileTime@16:PROC
EXTRN	_GetPartitionInfo:PROC
EXTRN	_FakeDosNameForDevice:PROC
EXTRN	__imp__GetFileSizeEx@8:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__SetFilePointerEx@20:PROC
;	COMDAT ??_C@_0BE@KBMHKHFE@VOL_HEADER_RESTORED?$AA@
; File c:\program files\microsoft sdks\windows\v7.0\include\winnt.h
CONST	SEGMENT
??_C@_0BE@KBMHKHFE@VOL_HEADER_RESTORED?$AA@ DB 'VOL_HEADER_RESTORED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OAEDFHDH@ENTER_HEADER_BACKUP_PASSWORD?$AA@
CONST	SEGMENT
??_C@_0BN@OAEDFHDH@ENTER_HEADER_BACKUP_PASSWORD?$AA@ DB 'ENTER_HEADER_BAC'
	DB	'KUP_PASSWORD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JPMMBOLE@HEADER_BACKUP_SIZE_INCORRECT?$AA@
CONST	SEGMENT
??_C@_0BN@JPMMBOLE@HEADER_BACKUP_SIZE_INCORRECT?$AA@ DB 'HEADER_BACKUP_SI'
	DB	'ZE_INCORRECT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LDJEOHOC@CONFIRM_VOL_HEADER_RESTORE?$AA@
CONST	SEGMENT
??_C@_0BL@LDJEOHOC@CONFIRM_VOL_HEADER_RESTORE?$AA@ DB 'CONFIRM_VOL_HEADER'
	DB	'_RESTORE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IJOHKBBH@VOLUME_HAS_NO_BACKUP_HEADER?$AA@
CONST	SEGMENT
??_C@_0BM@IJOHKBBH@VOLUME_HAS_NO_BACKUP_HEADER?$AA@ DB 'VOLUME_HAS_NO_BAC'
	DB	'KUP_HEADER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BLBOEPDF@HEADER_RESTORE_EXTERNAL?$AA@
CONST	SEGMENT
??_C@_0BI@BLBOEPDF@HEADER_RESTORE_EXTERNAL?$AA@ DB 'HEADER_RESTORE_EXTERN'
	DB	'AL', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EHPOIEIN@HEADER_RESTORE_INTERNAL?$AA@
CONST	SEGMENT
??_C@_0BI@EHPOIEIN@HEADER_RESTORE_INTERNAL?$AA@ DB 'HEADER_RESTORE_INTERN'
	DB	'AL', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FAFBPKHB@HEADER_RESTORE_EXTERNAL_INTERNAL@
CONST	SEGMENT
??_C@_0CB@FAFBPKHB@HEADER_RESTORE_EXTERNAL_INTERNAL@ DB 'HEADER_RESTORE_E'
	DB	'XTERNAL_INTERNAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JDGAADHA@RESTORE_HEADER_NOT_FOR_SYS_DEVIC@
CONST	SEGMENT
??_C@_0CC@JDGAADHA@RESTORE_HEADER_NOT_FOR_SYS_DEVIC@ DB 'RESTORE_HEADER_N'
	DB	'OT_FOR_SYS_DEVICE', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
CONST	ENDS
;	COMDAT _RestoreVolumeHeader
_TEXT	SEGMENT
_headerBackupOffset$140007 = -141044			; size = 8
_hostSize$ = -141044					; size = 8
_dev$ = -141036						; size = 4
_hwndDlg$GSCopy$ = -141032				; size = 4
_restoredCryptoInfo$ = -141028				; size = 4
_bDevice$ = -141024					; size = 4
_restoreInternalBackup$ = -141020			; size = 4
_fBackup$ = -141016					; size = 4
_bTimeStampValid$ = -141012				; size = 4
_nDosLinkCreated$ = -141008				; size = 4
_bytesRead$140001 = -141004				; size = 4
_fileSize$139993 = -141000				; size = 8
_backupSize$139970 = -140992				; size = 8
_volTypeChoices$ = -140984				; size = 24
_ftLastWriteTime$ = -140960				; size = 8
_dwResult$139983 = -140952				; size = 4
_driveInfo$139987 = -140948				; size = 24
_ftCreationTime$ = -140924				; size = 8
_ftLastAccessTime$ = -140916				; size = 8
_volume$ = -140908					; size = 56
_diskInfo$139982 = -140852				; size = 32
_szDiskFile$ = -140820					; size = 260
_szCFDevice$ = -140560					; size = 260
_szDosDevice$ = -140300					; size = 260
_szFileName$ = -140040					; size = 260
_buffer$139952 = -139780				; size = 512
_szTmp$ = -139268					; size = 8192
_buffer$140000 = -131076				; size = 131072
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_lpszVolume$ = 12					; size = 4
_RestoreVolumeHeader PROC				; COMDAT

; 7688 : {

  00000	b8 f4 26 02 00	 mov	 eax, 141044		; 000226f4H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 f0 26
	02 00		 mov	 DWORD PTR __$ArrayPad$[esp+141044], eax
  00018	53		 push	 ebx
  00019	55		 push	 ebp
  0001a	8b ac 24 00 27
	02 00		 mov	 ebp, DWORD PTR _hwndDlg$[esp+141048]
  00021	56		 push	 esi

; 7689 : 	int nDosLinkCreated = -1, nStatus = ERR_OS_ERROR;

  00022	83 c8 ff	 or	 eax, -1
  00025	57		 push	 edi
  00026	8b bc 24 0c 27
	02 00		 mov	 edi, DWORD PTR _lpszVolume$[esp+141056]
  0002d	8d 70 02	 lea	 esi, DWORD PTR [eax+2]

; 7690 : 	char szDiskFile[TC_MAX_PATH], szCFDevice[TC_MAX_PATH];
; 7691 : 	char szFileName[TC_MAX_PATH];
; 7692 : 	char szDosDevice[TC_MAX_PATH];
; 7693 : 	void *dev = INVALID_HANDLE_VALUE;
; 7694 : 	DWORD dwError;
; 7695 : 	BOOL bDevice;
; 7696 : 	unsigned __int64 hostSize = 0;
; 7697 : 	FILETIME ftCreationTime;
; 7698 : 	FILETIME ftLastWriteTime;
; 7699 : 	FILETIME ftLastAccessTime;
; 7700 : 	wchar_t szTmp[4096];
; 7701 : 	BOOL bTimeStampValid = FALSE;
; 7702 : 	HANDLE fBackup = INVALID_HANDLE_VALUE;
; 7703 : 	LARGE_INTEGER headerOffset;
; 7704 : 	CRYPTO_INFO *restoredCryptoInfo = NULL;
; 7705 : 
; 7706 : 	switch (IsSystemDevicePath (lpszVolume, hwndDlg, TRUE))

  00030	56		 push	 esi
  00031	33 db		 xor	 ebx, ebx
  00033	55		 push	 ebp
  00034	57		 push	 edi
  00035	89 6c 24 28	 mov	 DWORD PTR _hwndDlg$GSCopy$[esp+141072], ebp
  00039	89 44 24 40	 mov	 DWORD PTR _nDosLinkCreated$[esp+141072], eax
  0003d	89 44 24 24	 mov	 DWORD PTR _dev$[esp+141072], eax
  00041	89 5c 24 3c	 mov	 DWORD PTR _bTimeStampValid$[esp+141072], ebx
  00045	89 44 24 38	 mov	 DWORD PTR _fBackup$[esp+141072], eax
  00049	89 5c 24 2c	 mov	 DWORD PTR _restoredCryptoInfo$[esp+141072], ebx
  0004d	e8 00 00 00 00	 call	 _IsSystemDevicePath
  00052	48		 dec	 eax
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	3b c6		 cmp	 eax, esi
  00058	77 1e		 ja	 SHORT $LN107@RestoreVol

; 7707 : 	{
; 7708 : 	case 1:
; 7709 : 	case 2:
; 7710 : 		if (AskErrNoYes ("RESTORE_HEADER_NOT_FOR_SYS_DEVICE") == IDYES)

  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@JDGAADHA@RESTORE_HEADER_NOT_FOR_SYS_DEVIC@
  0005f	e8 00 00 00 00	 call	 _AskErrNoYes
  00064	83 c4 04	 add	 esp, 4
  00067	83 f8 06	 cmp	 eax, 6
  0006a	75 05		 jne	 SHORT $LN105@RestoreVol

; 7711 : 			CreateRescueDisk ();

  0006c	e8 00 00 00 00	 call	 _CreateRescueDisk
$LN105@RestoreVol:

; 7712 : 
; 7713 : 		return 0;

  00071	33 c0		 xor	 eax, eax
  00073	e9 a7 07 00 00	 jmp	 $LN109@RestoreVol
$LN107@RestoreVol:

; 7714 : 
; 7715 : 	case -1:
; 7716 : 		// In some environments (such as PE), the system volume is not located on a hard drive.
; 7717 : 		// Therefore, we must interpret this return code as "Not a system device path" (otherwise,
; 7718 : 		// it would not be possible to restore headers on non-system devices in such environments).
; 7719 : 		// Note that this is rather safe, because bReliableRequired is set to TRUE.
; 7720 : 
; 7721 : 		// NOP
; 7722 : 		break;
; 7723 : 	}
; 7724 : 
; 7725 : 	if (IsMountedVolume (lpszVolume))

  00078	57		 push	 edi
  00079	e8 00 00 00 00	 call	 _IsMountedVolume
  0007e	83 c4 04	 add	 esp, 4
  00081	85 c0		 test	 eax, eax
  00083	74 14		 je	 SHORT $LN103@RestoreVol

; 7726 : 	{
; 7727 : 		Warning ("DISMOUNT_FIRST");

  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MICPAHBN@DISMOUNT_FIRST?$AA@
  0008a	e8 00 00 00 00	 call	 _Warning
  0008f	83 c4 04	 add	 esp, 4

; 7728 : 		return 0;

  00092	33 c0		 xor	 eax, eax
  00094	e9 86 07 00 00	 jmp	 $LN109@RestoreVol
$LN103@RestoreVol:

; 7729 : 	}
; 7730 : 
; 7731 : 	if (!VolumePathExists (lpszVolume))

  00099	57		 push	 edi
  0009a	e8 00 00 00 00	 call	 _VolumePathExists
  0009f	83 c4 04	 add	 esp, 4
  000a2	85 c0		 test	 eax, eax
  000a4	75 10		 jne	 SHORT $LN102@RestoreVol

; 7732 : 	{
; 7733 : 		handleWin32Error (hwndDlg);

  000a6	55		 push	 ebp
  000a7	e8 00 00 00 00	 call	 _handleWin32Error
  000ac	83 c4 04	 add	 esp, 4

; 7734 : 		return 0;

  000af	33 c0		 xor	 eax, eax
  000b1	e9 69 07 00 00	 jmp	 $LN109@RestoreVol
$LN102@RestoreVol:

; 7735 : 	}
; 7736 : 
; 7737 : 	BOOL restoreInternalBackup;
; 7738 : 
; 7739 : 	// Ask the user to select the type of backup (internal/external)
; 7740 : 	char *volTypeChoices[] = {0, "HEADER_RESTORE_EXTERNAL_INTERNAL", "HEADER_RESTORE_INTERNAL", "HEADER_RESTORE_EXTERNAL", "IDCANCEL", 0};
; 7741 : 	switch (AskMultiChoice ((void **) volTypeChoices, FALSE))

  000b6	8d 44 24 4c	 lea	 eax, DWORD PTR _volTypeChoices$[esp+141060]
  000ba	53		 push	 ebx
  000bb	50		 push	 eax
  000bc	89 5c 24 54	 mov	 DWORD PTR _volTypeChoices$[esp+141068], ebx
  000c0	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR _volTypeChoices$[esp+141072], OFFSET ??_C@_0CB@FAFBPKHB@HEADER_RESTORE_EXTERNAL_INTERNAL@
  000c8	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR _volTypeChoices$[esp+141076], OFFSET ??_C@_0BI@EHPOIEIN@HEADER_RESTORE_INTERNAL?$AA@
  000d0	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR _volTypeChoices$[esp+141080], OFFSET ??_C@_0BI@BLBOEPDF@HEADER_RESTORE_EXTERNAL?$AA@
  000d8	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR _volTypeChoices$[esp+141084], OFFSET ??_C@_08DDAIHKOO@IDCANCEL?$AA@
  000e0	89 5c 24 68	 mov	 DWORD PTR _volTypeChoices$[esp+141088], ebx
  000e4	e8 00 00 00 00	 call	 _AskMultiChoice
  000e9	83 c4 08	 add	 esp, 8
  000ec	83 e8 01	 sub	 eax, 1
  000ef	74 0f		 je	 SHORT $LN99@RestoreVol
  000f1	83 e8 01	 sub	 eax, 1

; 7749 : 	default:
; 7750 : 		return 0;

  000f4	0f 85 77 ff ff
	ff		 jne	 $LN105@RestoreVol

; 7745 : 		break;
; 7746 : 	case 2:
; 7747 : 		restoreInternalBackup = FALSE;

  000fa	89 5c 24 28	 mov	 DWORD PTR _restoreInternalBackup$[esp+141060], ebx

; 7748 : 		break;

  000fe	eb 04		 jmp	 SHORT $LN100@RestoreVol
$LN99@RestoreVol:

; 7742 : 	{
; 7743 : 	case 1:
; 7744 : 		restoreInternalBackup = TRUE;

  00100	89 74 24 28	 mov	 DWORD PTR _restoreInternalBackup$[esp+141060], esi
$LN100@RestoreVol:

; 7751 : 	}
; 7752 : 
; 7753 : 	OpenVolumeContext volume;
; 7754 : 	volume.VolumeIsOpen = FALSE;

  00104	89 9c 24 98 00
	00 00		 mov	 DWORD PTR _volume$[esp+141060], ebx

; 7755 : 
; 7756 : 	WaitCursor();

  0010b	e8 00 00 00 00	 call	 _WaitCursor

; 7757 : 
; 7758 : 	if (restoreInternalBackup)

  00110	39 5c 24 28	 cmp	 DWORD PTR _restoreInternalBackup$[esp+141060], ebx
  00114	0f 84 73 01 00
	00		 je	 $LN96@RestoreVol
  0011a	8d 9b 00 00 00
	00		 npad	 6
$LL95@RestoreVol:

; 7759 : 	{
; 7760 : 		// Restore header from the internal backup
; 7761 : 
; 7762 : 		// Open the volume using backup header
; 7763 : 		while (TRUE)
; 7764 : 		{
; 7765 : 			strncpy (PasswordDlgVolume, lpszVolume, sizeof (PasswordDlgVolume));

  00120	68 04 01 00 00	 push	 260			; 00000104H
  00125	57		 push	 edi
  00126	68 00 00 00 00	 push	 OFFSET _PasswordDlgVolume
  0012b	e8 00 00 00 00	 call	 _strncpy

; 7766 : 			if (!AskVolumePassword (hwndDlg, &VolumePassword, NULL, FALSE))

  00130	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00136	83 c4 0c	 add	 esp, 12			; 0000000cH
  00139	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  0013e	68 00 00 00 00	 push	 OFFSET _PasswordDlgProc@16
  00143	55		 push	 ebp
  00144	6a 68		 push	 104			; 00000068H
  00146	51		 push	 ecx
  00147	89 1d 00 00 00
	00		 mov	 DWORD PTR _PasswordDialogTitleStringId, ebx
  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _PasswordDialogDisableMountOptions, 1
  00157	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  0015d	83 f8 01	 cmp	 eax, 1
  00160	75 6e		 jne	 SHORT $LN165@RestoreVol

; 7769 : 				goto ret;
; 7770 : 			}
; 7771 : 
; 7772 : 			WaitCursor();

  00162	e8 00 00 00 00	 call	 _WaitCursor

; 7773 : 
; 7774 : 			if (KeyFilesEnable && FirstKeyFile)

  00167	39 1d 00 00 00
	00		 cmp	 DWORD PTR _KeyFilesEnable, ebx
  0016d	74 17		 je	 SHORT $LN91@RestoreVol
  0016f	a1 00 00 00 00	 mov	 eax, DWORD PTR _FirstKeyFile
  00174	3b c3		 cmp	 eax, ebx
  00176	74 0e		 je	 SHORT $LN91@RestoreVol

; 7775 : 				KeyFilesApply (&VolumePassword, FirstKeyFile);

  00178	50		 push	 eax
  00179	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  0017e	e8 00 00 00 00	 call	 _KeyFilesApply
  00183	83 c4 08	 add	 esp, 8
$LN91@RestoreVol:

; 7776 : 
; 7777 : 			nStatus = OpenVolume (&volume, lpszVolume, &VolumePassword, TRUE, bPreserveTimestamp, TRUE);

  00186	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bPreserveTimestamp
  0018c	6a 01		 push	 1
  0018e	52		 push	 edx
  0018f	6a 01		 push	 1
  00191	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  00196	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR _volume$[esp+141076]
  0019d	57		 push	 edi
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 _OpenVolume
  001a4	83 c4 18	 add	 esp, 24			; 00000018H
  001a7	8b f0		 mov	 esi, eax

; 7778 : 
; 7779 : 			NormalCursor();

  001a9	e8 00 00 00 00	 call	 _NormalCursor

; 7780 : 
; 7781 : 			if (nStatus == ERR_SUCCESS)

  001ae	3b f3		 cmp	 esi, ebx
  001b0	74 4c		 je	 SHORT $LN142@RestoreVol

; 7782 : 				break;
; 7783 : 
; 7784 : 			if (nStatus != ERR_PASSWORD_WRONG)

  001b2	83 fe 03	 cmp	 esi, 3
  001b5	0f 85 74 05 00
	00		 jne	 $error$139947

; 7785 : 				goto error;
; 7786 : 
; 7787 : 			handleError (hwndDlg, nStatus);

  001bb	8b 6c 24 1c	 mov	 ebp, DWORD PTR _hwndDlg$GSCopy$[esp+141060]
  001bf	56		 push	 esi
  001c0	55		 push	 ebp
  001c1	e8 00 00 00 00	 call	 _handleError
  001c6	83 c4 08	 add	 esp, 8

; 7788 : 		}

  001c9	33 db		 xor	 ebx, ebx
  001cb	e9 50 ff ff ff	 jmp	 $LL95@RestoreVol
$LN165@RestoreVol:

; 7766 : 			if (!AskVolumePassword (hwndDlg, &VolumePassword, NULL, FALSE))

  001d0	ba 14 00 00 00	 mov	 edx, OFFSET ?mountOptions@@3UMountOptions@@A+20
  001d5	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  001da	89 1d 00 00 00
	00		 mov	 DWORD PTR ?VolumePassword@@3UPassword@@A, ebx
  001e0	8b f1		 mov	 esi, ecx
  001e2	8b c2		 mov	 eax, edx
$LL125@RestoreVol:
  001e4	c6 00 00	 mov	 BYTE PTR [eax], 0
  001e7	40		 inc	 eax
  001e8	83 ee 01	 sub	 esi, 1
  001eb	75 f7		 jne	 SHORT $LL125@RestoreVol
  001ed	8d 49 00	 npad	 3
$LL117@RestoreVol:
  001f0	49		 dec	 ecx
  001f1	c6 02 00	 mov	 BYTE PTR [edx], 0
  001f4	42		 inc	 edx
  001f5	3b cb		 cmp	 ecx, ebx
  001f7	75 f7		 jne	 SHORT $LL117@RestoreVol

; 7767 : 			{
; 7768 : 				nStatus = ERR_SUCCESS;

  001f9	e9 2f 05 00 00	 jmp	 $ret$139942
$LN142@RestoreVol:

; 7789 : 
; 7790 : 		if (volume.CryptoInfo->LegacyVolume)

  001fe	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR _volume$[esp+141064]
  00205	39 98 3c 44 00
	00		 cmp	 DWORD PTR [eax+17468], ebx
  0020b	74 0f		 je	 SHORT $LN87@RestoreVol

; 7791 : 		{
; 7792 : 			Error ("VOLUME_HAS_NO_BACKUP_HEADER");

  0020d	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IJOHKBBH@VOLUME_HAS_NO_BACKUP_HEADER?$AA@
  00212	e8 00 00 00 00	 call	 _Error

; 8056 : 
; 8057 : error:

  00217	e9 0e 05 00 00	 jmp	 $LN185@RestoreVol
$LN87@RestoreVol:

; 7793 : 			nStatus = ERROR_SUCCESS;
; 7794 : 			goto error;
; 7795 : 		}
; 7796 : 
; 7797 : 		// Create a new header with a new salt
; 7798 : 		char buffer[TC_VOLUME_HEADER_EFFECTIVE_SIZE];
; 7799 : 
; 7800 : 		nStatus = ReEncryptVolumeHeader (buffer, FALSE, volume.CryptoInfo, &VolumePassword, FALSE);

  0021c	53		 push	 ebx
  0021d	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  00222	50		 push	 eax
  00223	8d 8c 24 0c 05
	00 00		 lea	 ecx, DWORD PTR _buffer$139952[esp+141072]
  0022a	53		 push	 ebx
  0022b	51		 push	 ecx
  0022c	e8 00 00 00 00	 call	 _ReEncryptVolumeHeader
  00231	8b f0		 mov	 esi, eax
  00233	83 c4 14	 add	 esp, 20			; 00000014H

; 7801 : 		if (nStatus != 0)

  00236	3b f3		 cmp	 esi, ebx
  00238	0f 85 f1 04 00
	00		 jne	 $error$139947

; 7802 : 			goto error;
; 7803 : 
; 7804 : 		headerOffset.QuadPart = volume.CryptoInfo->hiddenVolume ? TC_HIDDEN_VOLUME_HEADER_OFFSET : TC_VOLUME_HEADER_OFFSET;

  0023e	8b 94 24 9c 00
	00 00		 mov	 edx, DWORD PTR _volume$[esp+141064]
  00245	8b 82 a0 29 00
	00		 mov	 eax, DWORD PTR [edx+10656]
  0024b	f7 d8		 neg	 eax
  0024d	1b c0		 sbb	 eax, eax

; 7805 : 		if (!SetFilePointerEx (volume.HostFileHandle, headerOffset, NULL, FILE_BEGIN))

  0024f	6a 00		 push	 0
  00251	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  00256	99		 cdq
  00257	6a 00		 push	 0
  00259	52		 push	 edx
  0025a	50		 push	 eax
  0025b	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR _volume$[esp+141088]
  00262	50		 push	 eax
  00263	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  00269	85 c0		 test	 eax, eax

; 8056 : 
; 8057 : error:

  0026b	0f 84 a8 04 00
	00		 je	 $LN190@RestoreVol
  00271	8b 94 24 a4 00
	00 00		 mov	 edx, DWORD PTR _volume$[esp+141072]
  00278	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR _volume$[esp+141068]
  0027f	8d 8c 24 00 05
	00 00		 lea	 ecx, DWORD PTR _buffer$139952[esp+141060]
  00286	51		 push	 ecx
  00287	52		 push	 edx
  00288	e9 7f 04 00 00	 jmp	 $LN189@RestoreVol
$LN96@RestoreVol:

; 7806 : 		{
; 7807 : 			nStatus = ERR_OS_ERROR;
; 7808 : 			goto error;
; 7809 : 		}
; 7810 : 
; 7811 : 		if (!WriteEffectiveVolumeHeader (volume.IsDevice, volume.HostFileHandle, (byte *) buffer))
; 7812 : 		{
; 7813 : 			nStatus = ERR_OS_ERROR;
; 7814 : 			goto error;
; 7815 : 		}
; 7816 : 	}
; 7817 : 	else
; 7818 : 	{
; 7819 : 		// Restore header from an external backup
; 7820 : 		
; 7821 : 		swprintf (szTmp, GetString ("CONFIRM_VOL_HEADER_RESTORE"), lpszVolume);

  0028d	57		 push	 edi
  0028e	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LDJEOHOC@CONFIRM_VOL_HEADER_RESTORE?$AA@
  00293	e8 00 00 00 00	 call	 _GetString
  00298	83 c4 04	 add	 esp, 4
  0029b	50		 push	 eax
  0029c	8d 8c 24 08 07
	00 00		 lea	 ecx, DWORD PTR _szTmp$[esp+141068]
  002a3	51		 push	 ecx
  002a4	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf

; 7822 : 
; 7823 : 		if (MessageBoxW (hwndDlg, szTmp, lpszTitle, YES_NO|MB_ICONWARNING|MB_DEFBUTTON2) == IDNO)

  002a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  002af	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b2	68 34 01 00 00	 push	 308			; 00000134H
  002b7	52		 push	 edx
  002b8	8d 84 24 08 07
	00 00		 lea	 eax, DWORD PTR _szTmp$[esp+141068]
  002bf	50		 push	 eax
  002c0	55		 push	 ebp
  002c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  002c7	83 f8 07	 cmp	 eax, 7
  002ca	0f 84 5d 04 00
	00		 je	 $ret$139942

; 7824 : 		{
; 7825 : 			nStatus = ERR_SUCCESS;
; 7826 : 			goto ret;
; 7827 : 		}
; 7828 : 
; 7829 : 		/* Select backup file */
; 7830 : 		if (!BrowseFiles (hwndDlg, "OPEN_TITLE", szFileName, bHistory, FALSE, NULL))

  002d0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHistory
  002d6	6a 00		 push	 0
  002d8	6a 00		 push	 0
  002da	51		 push	 ecx
  002db	8d 94 24 08 04
	00 00		 lea	 edx, DWORD PTR _szFileName$[esp+141072]
  002e2	52		 push	 edx
  002e3	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GHEOANHD@OPEN_TITLE?$AA@
  002e8	55		 push	 ebp
  002e9	e8 00 00 00 00	 call	 _BrowseFiles
  002ee	83 c4 18	 add	 esp, 24			; 00000018H
  002f1	85 c0		 test	 eax, eax
  002f3	0f 84 34 04 00
	00		 je	 $ret$139942

; 7831 : 		{
; 7832 : 			nStatus = ERR_SUCCESS;
; 7833 : 			goto ret;
; 7834 : 		}
; 7835 : 
; 7836 : 		/* Open the backup file */
; 7837 : 		fBackup = CreateFile (szFileName, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);

  002f9	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__CreateFileA@28
  002ff	6a 00		 push	 0
  00301	6a 00		 push	 0
  00303	6a 03		 push	 3
  00305	6a 00		 push	 0
  00307	6a 01		 push	 1
  00309	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0030e	8d 84 24 14 04
	00 00		 lea	 eax, DWORD PTR _szFileName$[esp+141084]
  00315	50		 push	 eax
  00316	ff d3		 call	 ebx
  00318	89 44 24 2c	 mov	 DWORD PTR _fBackup$[esp+141060], eax

; 7838 : 		if (fBackup == INVALID_HANDLE_VALUE)

  0031c	83 f8 ff	 cmp	 eax, -1

; 8056 : 
; 8057 : error:

  0031f	0f 84 0a 04 00
	00		 je	 $error$139947
  00325	8d 4c 24 44	 lea	 ecx, DWORD PTR _backupSize$139970[esp+141060]
  00329	51		 push	 ecx
  0032a	50		 push	 eax
  0032b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSizeEx@8
  00331	85 c0		 test	 eax, eax
  00333	0f 84 f6 03 00
	00		 je	 $error$139947
  00339	8d 54 24 24	 lea	 edx, DWORD PTR _bDevice$[esp+141060]
  0033d	52		 push	 edx
  0033e	8d 84 24 f4 00
	00 00		 lea	 eax, DWORD PTR _szDiskFile$[esp+141064]
  00345	57		 push	 edi
  00346	50		 push	 eax
  00347	e8 00 00 00 00	 call	 _CreateFullVolumePath
  0034c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0034f	83 7c 24 24 00	 cmp	 DWORD PTR _bDevice$[esp+141060], 0
  00354	75 1f		 jne	 SHORT $LN70@RestoreVol

; 7839 : 		{
; 7840 : 			nStatus = ERR_OS_ERROR;
; 7841 : 			goto error;
; 7842 : 		}
; 7843 : 
; 7844 : 		// Determine size of the backup file
; 7845 : 		LARGE_INTEGER backupSize;
; 7846 : 		if (!GetFileSizeEx (fBackup, &backupSize))
; 7847 : 		{
; 7848 : 			nStatus = ERR_OS_ERROR;
; 7849 : 			goto error;
; 7850 : 		}
; 7851 : 
; 7852 : 		CreateFullVolumePath (szDiskFile, lpszVolume, &bDevice);
; 7853 : 
; 7854 : 		if (bDevice == FALSE)
; 7855 : 			strcpy (szCFDevice, szDiskFile);

  00356	33 c0		 xor	 eax, eax
  00358	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL111@RestoreVol:
  00360	8a 8c 04 f0 00
	00 00		 mov	 cl, BYTE PTR _szDiskFile$[esp+eax+141060]
  00367	88 8c 04 f4 01
	00 00		 mov	 BYTE PTR _szCFDevice$[esp+eax+141060], cl
  0036e	40		 inc	 eax
  0036f	84 c9		 test	 cl, cl
  00371	75 ed		 jne	 SHORT $LL111@RestoreVol

; 7856 : 		else

  00373	eb 2e		 jmp	 SHORT $LN68@RestoreVol
$LN70@RestoreVol:

; 7857 : 		{
; 7858 : 			nDosLinkCreated = FakeDosNameForDevice (szDiskFile, szDosDevice, szCFDevice, FALSE);

  00375	6a 00		 push	 0
  00377	8d 8c 24 f8 01
	00 00		 lea	 ecx, DWORD PTR _szCFDevice$[esp+141064]
  0037e	51		 push	 ecx
  0037f	8d 94 24 00 03
	00 00		 lea	 edx, DWORD PTR _szDosDevice$[esp+141068]
  00386	52		 push	 edx
  00387	8d 84 24 fc 00
	00 00		 lea	 eax, DWORD PTR _szDiskFile$[esp+141072]
  0038e	50		 push	 eax
  0038f	e8 00 00 00 00	 call	 _FakeDosNameForDevice
  00394	83 c4 10	 add	 esp, 16			; 00000010H
  00397	89 44 24 34	 mov	 DWORD PTR _nDosLinkCreated$[esp+141060], eax

; 7859 : 			if (nDosLinkCreated != 0)

  0039b	85 c0		 test	 eax, eax
  0039d	0f 85 8c 03 00
	00		 jne	 $error$139947
$LN68@RestoreVol:

; 7860 : 				goto error;
; 7861 : 		}
; 7862 : 
; 7863 : 		// Open the volume
; 7864 : 		dev = CreateFile (szCFDevice, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);

  003a3	6a 00		 push	 0
  003a5	6a 00		 push	 0
  003a7	6a 03		 push	 3
  003a9	6a 00		 push	 0
  003ab	6a 01		 push	 1
  003ad	68 00 00 00 c0	 push	 -1073741824		; c0000000H
  003b2	8d 8c 24 0c 02
	00 00		 lea	 ecx, DWORD PTR _szCFDevice$[esp+141084]
  003b9	51		 push	 ecx
  003ba	ff d3		 call	 ebx
  003bc	8b d8		 mov	 ebx, eax
  003be	89 5c 24 18	 mov	 DWORD PTR _dev$[esp+141060], ebx

; 7865 : 
; 7866 : 		if (dev == INVALID_HANDLE_VALUE)

  003c2	83 fb ff	 cmp	 ebx, -1

; 8056 : 
; 8057 : error:

  003c5	0f 84 64 03 00
	00		 je	 $error$139947

; 7867 : 		{
; 7868 : 			nStatus = ERR_OS_ERROR;
; 7869 : 			goto error;
; 7870 : 		}
; 7871 : 
; 7872 : 		// Determine volume host size
; 7873 : 		if (bDevice)

  003cb	83 7c 24 24 00	 cmp	 DWORD PTR _bDevice$[esp+141060], 0
  003d0	0f 84 94 00 00
	00		 je	 $LN64@RestoreVol

; 7874 : 		{
; 7875 : 			PARTITION_INFORMATION diskInfo;
; 7876 : 			DWORD dwResult;
; 7877 : 			BOOL bResult;
; 7878 : 
; 7879 : 			bResult = GetPartitionInfo (lpszVolume, &diskInfo);

  003d6	8d 94 24 d0 00
	00 00		 lea	 edx, DWORD PTR _diskInfo$139982[esp+141060]
  003dd	52		 push	 edx
  003de	57		 push	 edi
  003df	e8 00 00 00 00	 call	 _GetPartitionInfo
  003e4	83 c4 08	 add	 esp, 8

; 7880 : 
; 7881 : 			if (bResult)

  003e7	85 c0		 test	 eax, eax
  003e9	74 10		 je	 SHORT $LN63@RestoreVol

; 7882 : 			{
; 7883 : 				hostSize = diskInfo.PartitionLength.QuadPart;

  003eb	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR _diskInfo$139982[esp+141068]
  003f2	8b 94 24 dc 00
	00 00		 mov	 edx, DWORD PTR _diskInfo$139982[esp+141072]

; 7884 : 			}
; 7885 : 			else

  003f9	eb 5b		 jmp	 SHORT $LN186@RestoreVol
$LN63@RestoreVol:

; 7886 : 			{
; 7887 : 				DISK_GEOMETRY driveInfo;
; 7888 : 
; 7889 : 				bResult = DeviceIoControl (dev, IOCTL_DISK_GET_DRIVE_GEOMETRY, NULL, 0,
; 7890 : 					&driveInfo, sizeof (driveInfo), &dwResult, NULL);

  003fb	6a 00		 push	 0
  003fd	8d 4c 24 70	 lea	 ecx, DWORD PTR _dwResult$139983[esp+141064]
  00401	51		 push	 ecx
  00402	6a 18		 push	 24			; 00000018H
  00404	8d 54 24 7c	 lea	 edx, DWORD PTR _driveInfo$139987[esp+141072]
  00408	52		 push	 edx
  00409	6a 00		 push	 0
  0040b	6a 00		 push	 0
  0040d	68 00 00 07 00	 push	 458752			; 00070000H
  00412	53		 push	 ebx
  00413	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 7891 : 
; 7892 : 				if (!bResult)

  00419	85 c0		 test	 eax, eax
  0041b	0f 84 0e 03 00
	00		 je	 $error$139947

; 7893 : 					goto error;
; 7894 : 
; 7895 : 				hostSize = driveInfo.Cylinders.QuadPart * driveInfo.BytesPerSector *
; 7896 : 					driveInfo.SectorsPerTrack * driveInfo.TracksPerCylinder;

  00421	8b 44 24 7c	 mov	 eax, DWORD PTR _driveInfo$139987[esp+141072]
  00425	f7 a4 24 80 00
	00 00		 mul	 DWORD PTR _driveInfo$139987[esp+141076]
  0042c	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR _driveInfo$139987[esp+141080]
  00433	6a 00		 push	 0
  00435	51		 push	 ecx
  00436	52		 push	 edx
  00437	50		 push	 eax
  00438	e8 00 00 00 00	 call	 __allmul
  0043d	8b 4c 24 74	 mov	 ecx, DWORD PTR _driveInfo$139987[esp+141064]
  00441	51		 push	 ecx
  00442	8b 4c 24 74	 mov	 ecx, DWORD PTR _driveInfo$139987[esp+141064]
  00446	51		 push	 ecx
  00447	52		 push	 edx
  00448	50		 push	 eax
  00449	e8 00 00 00 00	 call	 __allmul
  0044e	8b 5c 24 18	 mov	 ebx, DWORD PTR _dev$[esp+141060]
  00452	8b 6c 24 1c	 mov	 ebp, DWORD PTR _hwndDlg$GSCopy$[esp+141060]
$LN186@RestoreVol:
  00456	89 44 24 10	 mov	 DWORD PTR _hostSize$[esp+141060], eax

; 7897 : 			}
; 7898 : 
; 7899 : 			if (hostSize == 0)

  0045a	0b c2		 or	 eax, edx
  0045c	89 54 24 14	 mov	 DWORD PTR _hostSize$[esp+141064], edx
  00460	75 2c		 jne	 SHORT $LN57@RestoreVol

; 7900 : 			{
; 7901 : 				nStatus =  ERR_VOL_SIZE_WRONG;

  00462	8d 70 07	 lea	 esi, DWORD PTR [eax+7]

; 8056 : 
; 8057 : error:

  00465	e9 c5 02 00 00	 jmp	 $error$139947
$LN64@RestoreVol:

; 7902 : 				goto error;
; 7903 : 			}
; 7904 : 		}
; 7905 : 		else
; 7906 : 		{
; 7907 : 			LARGE_INTEGER fileSize;
; 7908 : 			if (!GetFileSizeEx (dev, &fileSize))

  0046a	8d 4c 24 3c	 lea	 ecx, DWORD PTR _fileSize$139993[esp+141060]
  0046e	51		 push	 ecx
  0046f	53		 push	 ebx
  00470	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSizeEx@8
  00476	85 c0		 test	 eax, eax

; 8056 : 
; 8057 : error:

  00478	0f 84 b1 02 00
	00		 je	 $error$139947
  0047e	8b 54 24 3c	 mov	 edx, DWORD PTR _fileSize$139993[esp+141060]
  00482	8b 44 24 40	 mov	 eax, DWORD PTR _fileSize$139993[esp+141064]
  00486	89 54 24 10	 mov	 DWORD PTR _hostSize$[esp+141060], edx
  0048a	89 44 24 14	 mov	 DWORD PTR _hostSize$[esp+141064], eax
$LN57@RestoreVol:

; 7909 : 			{
; 7910 : 				nStatus = ERR_OS_ERROR;
; 7911 : 				goto error;
; 7912 : 			}
; 7913 : 
; 7914 : 			hostSize = fileSize.QuadPart;
; 7915 : 		}
; 7916 : 
; 7917 : 		if (!bDevice && bPreserveTimestamp)

  0048e	83 7c 24 24 00	 cmp	 DWORD PTR _bDevice$[esp+141060], 0
  00493	75 2f		 jne	 SHORT $LN53@RestoreVol
  00495	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bPreserveTimestamp, 0
  0049c	74 26		 je	 SHORT $LN53@RestoreVol

; 7918 : 		{
; 7919 : 			/* Remember the container modification/creation date and time. */
; 7920 : 
; 7921 : 			if (GetFileTime ((HANDLE) dev, &ftCreationTime, &ftLastAccessTime, &ftLastWriteTime) == 0)

  0049e	8d 4c 24 64	 lea	 ecx, DWORD PTR _ftLastWriteTime$[esp+141060]
  004a2	51		 push	 ecx
  004a3	8d 94 24 94 00
	00 00		 lea	 edx, DWORD PTR _ftLastAccessTime$[esp+141064]
  004aa	52		 push	 edx
  004ab	8d 84 24 90 00
	00 00		 lea	 eax, DWORD PTR _ftCreationTime$[esp+141068]
  004b2	50		 push	 eax
  004b3	53		 push	 ebx
  004b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileTime@16
  004ba	f7 d8		 neg	 eax
  004bc	1b c0		 sbb	 eax, eax
  004be	f7 d8		 neg	 eax
  004c0	89 44 24 30	 mov	 DWORD PTR _bTimeStampValid$[esp+141060], eax
$LN53@RestoreVol:

; 7922 : 				bTimeStampValid = FALSE;
; 7923 : 			else
; 7924 : 				bTimeStampValid = TRUE;
; 7925 : 		}
; 7926 : 
; 7927 : 		/* Read the volume header from the backup file */
; 7928 : 		char buffer[TC_VOLUME_HEADER_GROUP_SIZE];
; 7929 : 
; 7930 : 		DWORD bytesRead;
; 7931 : 		if (!ReadFile (fBackup, buffer, sizeof (buffer), &bytesRead, NULL))

  004c4	8b 44 24 2c	 mov	 eax, DWORD PTR _fBackup$[esp+141060]
  004c8	6a 00		 push	 0
  004ca	8d 4c 24 3c	 lea	 ecx, DWORD PTR _bytesRead$140001[esp+141064]
  004ce	51		 push	 ecx
  004cf	68 00 00 02 00	 push	 131072			; 00020000H
  004d4	8d 94 24 0c 27
	00 00		 lea	 edx, DWORD PTR _buffer$140000[esp+141072]
  004db	52		 push	 edx
  004dc	50		 push	 eax
  004dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  004e3	85 c0		 test	 eax, eax

; 8056 : 
; 8057 : error:

  004e5	0f 84 44 02 00
	00		 je	 $error$139947
  004eb	8b 44 24 38	 mov	 eax, DWORD PTR _bytesRead$140001[esp+141060]
  004ef	8b 54 24 44	 mov	 edx, DWORD PTR _backupSize$139970[esp+141060]
  004f3	33 c9		 xor	 ecx, ecx
  004f5	3b c2		 cmp	 eax, edx
  004f7	75 08		 jne	 SHORT $LN166@RestoreVol
  004f9	8b 44 24 48	 mov	 eax, DWORD PTR _backupSize$139970[esp+141064]
  004fd	3b c8		 cmp	 ecx, eax
  004ff	74 0a		 je	 SHORT $LN49@RestoreVol
$LN166@RestoreVol:

; 7932 : 		{
; 7933 : 			nStatus = ERR_OS_ERROR;
; 7934 : 			goto error;
; 7935 : 		}
; 7936 : 
; 7937 : 		if (bytesRead != backupSize.QuadPart)
; 7938 : 		{
; 7939 : 			nStatus = ERR_VOL_SIZE_WRONG;

  00501	be 07 00 00 00	 mov	 esi, 7

; 8056 : 
; 8057 : error:

  00506	e9 24 02 00 00	 jmp	 $error$139947
$LN49@RestoreVol:

; 7940 : 			goto error;
; 7941 : 		}
; 7942 : 
; 7943 : 		LARGE_INTEGER headerOffset;
; 7944 : 		LARGE_INTEGER headerBackupOffset;
; 7945 : 		bool legacyBackup;
; 7946 : 		int headerOffsetBackupFile;
; 7947 : 
; 7948 : 		// Determine the format of the backup file
; 7949 : 		switch (backupSize.QuadPart)

  0050b	81 fa 00 04 00
	00		 cmp	 edx, 1024		; 00000400H
  00511	75 04		 jne	 SHORT $LN167@RestoreVol
  00513	85 c0		 test	 eax, eax
  00515	74 1f		 je	 SHORT $LN44@RestoreVol
$LN167@RestoreVol:
  00517	81 fa 00 00 02
	00		 cmp	 edx, 131072		; 00020000H
  0051d	75 04		 jne	 SHORT $LN168@RestoreVol
  0051f	85 c0		 test	 eax, eax
  00521	74 0f		 je	 SHORT $LN45@RestoreVol
$LN168@RestoreVol:

; 7957 : 			break;
; 7958 : 
; 7959 : 		default:
; 7960 : 			Error ("HEADER_BACKUP_SIZE_INCORRECT");

  00523	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JPMMBOLE@HEADER_BACKUP_SIZE_INCORRECT?$AA@
  00528	e8 00 00 00 00	 call	 _Error

; 8056 : 
; 8057 : error:

  0052d	e9 f8 01 00 00	 jmp	 $LN185@RestoreVol
$LN45@RestoreVol:

; 7950 : 		{
; 7951 : 		case TC_VOLUME_HEADER_GROUP_SIZE:
; 7952 : 			legacyBackup = false;

  00532	32 db		 xor	 bl, bl

; 7953 : 			break;

  00534	eb 02		 jmp	 SHORT $LN137@RestoreVol
$LN44@RestoreVol:

; 7954 : 
; 7955 : 		case TC_VOLUME_HEADER_SIZE_LEGACY * 2:
; 7956 : 			legacyBackup = true;

  00536	b3 01		 mov	 bl, 1
$LN137@RestoreVol:

; 7961 : 			nStatus = ERR_SUCCESS;
; 7962 : 			goto error;
; 7963 : 		}
; 7964 : 
; 7965 : 		// Open the header
; 7966 : 		while (TRUE)
; 7967 : 		{
; 7968 : 			if (!AskVolumePassword (hwndDlg, &VolumePassword, "ENTER_HEADER_BACKUP_PASSWORD", FALSE))

  00538	6a 00		 push	 0
  0053a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BN@OAEDFHDH@ENTER_HEADER_BACKUP_PASSWORD?$AA@
  0053f	b9 00 00 00 00	 mov	 ecx, OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  00544	8b d5		 mov	 edx, ebp
  00546	e8 00 00 00 00	 call	 ?AskVolumePassword@@YAHPAUHWND__@@PAUPassword@@PADH@Z ; AskVolumePassword
  0054b	83 c4 04	 add	 esp, 4
  0054e	85 c0		 test	 eax, eax
  00550	0f 84 d7 01 00
	00		 je	 $ret$139942
$LL41@RestoreVol:

; 7969 : 			{
; 7970 : 				nStatus = ERR_SUCCESS;
; 7971 : 				goto ret;
; 7972 : 			}
; 7973 : 
; 7974 : 			if (KeyFilesEnable && FirstKeyFile)

  00556	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  0055d	74 17		 je	 SHORT $LN37@RestoreVol
  0055f	a1 00 00 00 00	 mov	 eax, DWORD PTR _FirstKeyFile
  00564	85 c0		 test	 eax, eax
  00566	74 0e		 je	 SHORT $LN37@RestoreVol

; 7975 : 				KeyFilesApply (&VolumePassword, FirstKeyFile);

  00568	50		 push	 eax
  00569	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  0056e	e8 00 00 00 00	 call	 _KeyFilesApply
  00573	83 c4 08	 add	 esp, 8
$LN37@RestoreVol:

; 7976 : 
; 7977 : 			// Decrypt volume header
; 7978 : 			headerOffsetBackupFile = 0;
; 7979 : 			for (int type = TC_VOLUME_TYPE_NORMAL; type <= TC_VOLUME_TYPE_HIDDEN; ++type)

  00576	33 ed		 xor	 ebp, ebp
  00578	33 ff		 xor	 edi, edi

; 7980 : 			{
; 7981 : 				if (type == TC_VOLUME_TYPE_HIDDEN)

  0057a	83 fd 01	 cmp	 ebp, 1
$LN187@RestoreVol:
  0057d	75 15		 jne	 SHORT $LN177@RestoreVol

; 7982 : 					headerOffsetBackupFile += (legacyBackup ? TC_VOLUME_HEADER_SIZE_LEGACY : TC_VOLUME_HEADER_SIZE);

  0057f	0f b6 cb	 movzx	 ecx, bl
  00582	f7 d9		 neg	 ecx
  00584	1b c9		 sbb	 ecx, ecx
  00586	81 e1 00 02 ff
	ff		 and	 ecx, -65024		; ffff0200H
  0058c	81 c1 00 00 01
	00		 add	 ecx, 65536		; 00010000H
  00592	03 f9		 add	 edi, ecx
$LN177@RestoreVol:

; 7983 : 
; 7984 : 				nStatus = ReadVolumeHeader (FALSE, buffer + headerOffsetBackupFile, &VolumePassword, &restoredCryptoInfo, NULL);

  00594	6a 00		 push	 0
  00596	8d 54 24 24	 lea	 edx, DWORD PTR _restoredCryptoInfo$[esp+141064]
  0059a	52		 push	 edx
  0059b	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  005a0	8d 84 3c 0c 27
	00 00		 lea	 eax, DWORD PTR _buffer$140000[esp+edi+141072]
  005a7	50		 push	 eax
  005a8	6a 00		 push	 0
  005aa	e8 00 00 00 00	 call	 _ReadVolumeHeader
  005af	8b f0		 mov	 esi, eax
  005b1	83 c4 14	 add	 esp, 20			; 00000014H

; 7985 : 				if (nStatus == ERR_SUCCESS)

  005b4	85 f6		 test	 esi, esi
  005b6	74 3d		 je	 SHORT $LN146@RestoreVol
  005b8	45		 inc	 ebp
  005b9	83 fd 01	 cmp	 ebp, 1
  005bc	7e bf		 jle	 SHORT $LN187@RestoreVol

; 7986 : 					break;
; 7987 : 			}
; 7988 : 
; 7989 : 			if (nStatus == ERR_SUCCESS)
; 7990 : 				break;
; 7991 : 
; 7992 : 			if (nStatus != ERR_PASSWORD_WRONG)

  005be	83 fe 03	 cmp	 esi, 3
  005c1	0f 85 68 01 00
	00		 jne	 $error$139947

; 7993 : 				goto error;
; 7994 : 
; 7995 : 			handleError (hwndDlg, nStatus);

  005c7	8b 74 24 1c	 mov	 esi, DWORD PTR _hwndDlg$GSCopy$[esp+141060]
  005cb	50		 push	 eax
  005cc	56		 push	 esi
  005cd	e8 00 00 00 00	 call	 _handleError
  005d2	6a 00		 push	 0
  005d4	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BN@OAEDFHDH@ENTER_HEADER_BACKUP_PASSWORD?$AA@
  005d9	b9 00 00 00 00	 mov	 ecx, OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  005de	8b d6		 mov	 edx, esi
  005e0	e8 00 00 00 00	 call	 ?AskVolumePassword@@YAHPAUHWND__@@PAUPassword@@PADH@Z ; AskVolumePassword
  005e5	83 c4 0c	 add	 esp, 12			; 0000000cH
  005e8	85 c0		 test	 eax, eax
  005ea	0f 85 66 ff ff
	ff		 jne	 $LL41@RestoreVol

; 8054 : ret:

  005f0	e9 38 01 00 00	 jmp	 $ret$139942
$LN146@RestoreVol:

; 7996 : 		}
; 7997 : 
; 7998 : 		BOOL hiddenVol = restoredCryptoInfo->hiddenVolume;

  005f5	8b 4c 24 20	 mov	 ecx, DWORD PTR _restoredCryptoInfo$[esp+141060]
  005f9	8b 89 a0 29 00
	00		 mov	 ecx, DWORD PTR [ecx+10656]

; 7999 : 
; 8000 : 		if (legacyBackup)

  005ff	84 db		 test	 bl, bl

; 8001 : 		{
; 8002 : 			headerOffset.QuadPart = hiddenVol ? hostSize - TC_HIDDEN_VOLUME_HEADER_OFFSET_LEGACY : TC_VOLUME_HEADER_OFFSET;

  00601	8b 5c 24 10	 mov	 ebx, DWORD PTR _headerBackupOffset$140007[esp+141060]
  00605	74 1d		 je	 SHORT $LN28@RestoreVol
  00607	85 c9		 test	 ecx, ecx
  00609	74 13		 je	 SHORT $LN112@RestoreVol
  0060b	8b 7c 24 10	 mov	 edi, DWORD PTR _hostSize$[esp+141060]
  0060f	8b 6c 24 14	 mov	 ebp, DWORD PTR _hostSize$[esp+141064]
  00613	81 ef 00 06 00
	00		 sub	 edi, 1536		; 00000600H
  00619	83 dd 00	 sbb	 ebp, 0
  0061c	eb 33		 jmp	 SHORT $LN115@RestoreVol
$LN112@RestoreVol:
  0061e	33 ff		 xor	 edi, edi
  00620	33 ed		 xor	 ebp, ebp

; 8003 : 		}
; 8004 : 		else

  00622	eb 2d		 jmp	 SHORT $LN115@RestoreVol
$LN28@RestoreVol:

; 8005 : 		{
; 8006 : 			headerOffset.QuadPart = hiddenVol ? TC_HIDDEN_VOLUME_HEADER_OFFSET : TC_VOLUME_HEADER_OFFSET;

  00624	8b c1		 mov	 eax, ecx
  00626	f7 d8		 neg	 eax
  00628	1b c0		 sbb	 eax, eax
  0062a	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  0062f	99		 cdq
  00630	8b f8		 mov	 edi, eax

; 8007 : 			headerBackupOffset.QuadPart = hiddenVol ? hostSize - TC_VOLUME_HEADER_SIZE : hostSize - TC_VOLUME_HEADER_GROUP_SIZE;

  00632	8b 44 24 14	 mov	 eax, DWORD PTR _hostSize$[esp+141064]
  00636	8b ea		 mov	 ebp, edx
  00638	85 c9		 test	 ecx, ecx
  0063a	74 08		 je	 SHORT $LN114@RestoreVol
  0063c	81 eb 00 00 01
	00		 sub	 ebx, 65536		; 00010000H
  00642	eb 06		 jmp	 SHORT $LN188@RestoreVol
$LN114@RestoreVol:
  00644	81 eb 00 00 02
	00		 sub	 ebx, 131072		; 00020000H
$LN188@RestoreVol:
  0064a	83 d8 00	 sbb	 eax, 0
  0064d	89 44 24 14	 mov	 DWORD PTR _headerBackupOffset$140007[esp+141064], eax
$LN115@RestoreVol:

; 8008 : 		}
; 8009 : 
; 8010 : 		WaitCursor();

  00651	e8 00 00 00 00	 call	 _WaitCursor

; 8011 : 
; 8012 : 		// Restore header encrypted with a new key
; 8013 : 		nStatus = ReEncryptVolumeHeader (buffer, FALSE, restoredCryptoInfo, &VolumePassword, FALSE);

  00656	8b 54 24 20	 mov	 edx, DWORD PTR _restoredCryptoInfo$[esp+141060]
  0065a	6a 00		 push	 0
  0065c	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  00661	52		 push	 edx
  00662	8d 84 24 0c 27
	00 00		 lea	 eax, DWORD PTR _buffer$140000[esp+141072]
  00669	6a 00		 push	 0
  0066b	50		 push	 eax
  0066c	e8 00 00 00 00	 call	 _ReEncryptVolumeHeader
  00671	8b f0		 mov	 esi, eax
  00673	83 c4 14	 add	 esp, 20			; 00000014H

; 8014 : 		if (nStatus != ERR_SUCCESS)

  00676	85 f6		 test	 esi, esi
  00678	0f 85 b1 00 00
	00		 jne	 $error$139947

; 8015 : 			goto error;
; 8016 : 
; 8017 : 		if (!SetFilePointerEx (dev, headerOffset, NULL, FILE_BEGIN))

  0067e	8b 74 24 18	 mov	 esi, DWORD PTR _dev$[esp+141060]
  00682	50		 push	 eax
  00683	50		 push	 eax
  00684	55		 push	 ebp
  00685	57		 push	 edi
  00686	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetFilePointerEx@20
  0068c	56		 push	 esi
  0068d	ff d7		 call	 edi
  0068f	85 c0		 test	 eax, eax
  00691	75 08		 jne	 SHORT $LN24@RestoreVol

; 8018 : 		{
; 8019 : 			nStatus = ERR_OS_ERROR;

  00693	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 8056 : 
; 8057 : error:

  00696	e9 94 00 00 00	 jmp	 $error$139947
$LN24@RestoreVol:

; 8020 : 			goto error;
; 8021 : 		}
; 8022 : 
; 8023 : 		if (!WriteEffectiveVolumeHeader (bDevice, dev, (byte *) buffer))

  0069b	8b 54 24 24	 mov	 edx, DWORD PTR _bDevice$[esp+141060]
  0069f	8d 8c 24 00 27
	00 00		 lea	 ecx, DWORD PTR _buffer$140000[esp+141060]
  006a6	51		 push	 ecx
  006a7	56		 push	 esi
  006a8	52		 push	 edx
  006a9	e8 00 00 00 00	 call	 _WriteEffectiveVolumeHeader
  006ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  006b1	85 c0		 test	 eax, eax
  006b3	75 05		 jne	 SHORT $LN22@RestoreVol

; 8024 : 		{
; 8025 : 			nStatus = ERR_OS_ERROR;

  006b5	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 8056 : 
; 8057 : error:

  006b8	eb 75		 jmp	 SHORT $error$139947
$LN22@RestoreVol:

; 8026 : 			goto error;
; 8027 : 		}
; 8028 : 
; 8029 : 		if (!restoredCryptoInfo->LegacyVolume)

  006ba	8b 44 24 20	 mov	 eax, DWORD PTR _restoredCryptoInfo$[esp+141060]
  006be	83 b8 3c 44 00
	00 00		 cmp	 DWORD PTR [eax+17468], 0
  006c5	75 59		 jne	 SHORT $LN15@RestoreVol

; 8030 : 		{
; 8031 : 			// Restore backup header encrypted with a new key
; 8032 : 			nStatus = ReEncryptVolumeHeader (buffer, FALSE, restoredCryptoInfo, &VolumePassword, FALSE);

  006c7	6a 00		 push	 0
  006c9	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  006ce	50		 push	 eax
  006cf	8d 84 24 0c 27
	00 00		 lea	 eax, DWORD PTR _buffer$140000[esp+141072]
  006d6	6a 00		 push	 0
  006d8	50		 push	 eax
  006d9	e8 00 00 00 00	 call	 _ReEncryptVolumeHeader
  006de	8b f0		 mov	 esi, eax
  006e0	83 c4 14	 add	 esp, 20			; 00000014H

; 8033 : 			if (nStatus != ERR_SUCCESS)

  006e3	85 f6		 test	 esi, esi
  006e5	75 48		 jne	 SHORT $error$139947

; 8034 : 				goto error;
; 8035 : 
; 8036 : 			if (!SetFilePointerEx (dev, headerBackupOffset, NULL, FILE_BEGIN))

  006e7	8b 4c 24 14	 mov	 ecx, DWORD PTR _headerBackupOffset$140007[esp+141064]
  006eb	8b 74 24 18	 mov	 esi, DWORD PTR _dev$[esp+141060]
  006ef	50		 push	 eax
  006f0	50		 push	 eax
  006f1	51		 push	 ecx
  006f2	53		 push	 ebx
  006f3	56		 push	 esi
  006f4	ff d7		 call	 edi
  006f6	85 c0		 test	 eax, eax
  006f8	75 05		 jne	 SHORT $LN17@RestoreVol

; 8037 : 			{
; 8038 : 				nStatus = ERR_OS_ERROR;

  006fa	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 8056 : 
; 8057 : error:

  006fd	eb 30		 jmp	 SHORT $error$139947
$LN17@RestoreVol:

; 8039 : 				goto error;
; 8040 : 			}
; 8041 : 
; 8042 : 			if (!WriteEffectiveVolumeHeader (bDevice, dev, (byte *) buffer))

  006ff	8b 44 24 24	 mov	 eax, DWORD PTR _bDevice$[esp+141060]
  00703	8d 94 24 00 27
	00 00		 lea	 edx, DWORD PTR _buffer$140000[esp+141060]
  0070a	52		 push	 edx
  0070b	56		 push	 esi
$LN189@RestoreVol:
  0070c	50		 push	 eax
  0070d	e8 00 00 00 00	 call	 _WriteEffectiveVolumeHeader
  00712	83 c4 0c	 add	 esp, 12			; 0000000cH
  00715	85 c0		 test	 eax, eax
  00717	75 07		 jne	 SHORT $LN15@RestoreVol
$LN190@RestoreVol:

; 8043 : 			{
; 8044 : 				nStatus = ERR_OS_ERROR;

  00719	be 01 00 00 00	 mov	 esi, 1

; 8056 : 
; 8057 : error:

  0071e	eb 0f		 jmp	 SHORT $error$139947
$LN15@RestoreVol:

; 8045 : 				goto error;
; 8046 : 			}
; 8047 : 		}
; 8048 : 	}
; 8049 : 
; 8050 : 
; 8051 : 	/* Volume header has been successfully restored */
; 8052 : 
; 8053 : 	Info("VOL_HEADER_RESTORED");

  00720	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KBMHKHFE@VOL_HEADER_RESTORED?$AA@
  00725	e8 00 00 00 00	 call	 _Info
$LN185@RestoreVol:
  0072a	83 c4 04	 add	 esp, 4
$ret$139942:

; 8055 : 	nStatus = ERR_SUCCESS;

  0072d	33 f6		 xor	 esi, esi
$error$139947:

; 8058 : 	dwError = GetLastError ();

  0072f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00735	8b e8		 mov	 ebp, eax

; 8059 : 	NormalCursor();

  00737	e8 00 00 00 00	 call	 _NormalCursor

; 8060 : 
; 8061 : 	if (restoreInternalBackup)

  0073c	83 7c 24 28 00	 cmp	 DWORD PTR _restoreInternalBackup$[esp+141060], 0
  00741	74 12		 je	 SHORT $LN13@RestoreVol

; 8062 : 	{
; 8063 : 		CloseVolume (&volume);

  00743	8d 8c 24 98 00
	00 00		 lea	 ecx, DWORD PTR _volume$[esp+141060]
  0074a	51		 push	 ecx
  0074b	e8 00 00 00 00	 call	 _CloseVolume
  00750	83 c4 04	 add	 esp, 4

; 8064 : 	}
; 8065 : 	else

  00753	eb 71		 jmp	 SHORT $LN178@RestoreVol
$LN13@RestoreVol:

; 8066 : 	{
; 8067 : 		if (restoredCryptoInfo)

  00755	8b 44 24 20	 mov	 eax, DWORD PTR _restoredCryptoInfo$[esp+141060]
  00759	85 c0		 test	 eax, eax
  0075b	74 09		 je	 SHORT $LN11@RestoreVol

; 8068 : 			crypto_close (restoredCryptoInfo);

  0075d	50		 push	 eax
  0075e	e8 00 00 00 00	 call	 _crypto_close
  00763	83 c4 04	 add	 esp, 4
$LN11@RestoreVol:

; 8069 : 
; 8070 : 		if (bTimeStampValid)

  00766	83 7c 24 30 00	 cmp	 DWORD PTR _bTimeStampValid$[esp+141060], 0

; 8071 : 			SetFileTime (dev, &ftCreationTime, &ftLastAccessTime, &ftLastWriteTime);

  0076b	8b 7c 24 18	 mov	 edi, DWORD PTR _dev$[esp+141060]
  0076f	74 1c		 je	 SHORT $LN10@RestoreVol
  00771	8d 54 24 64	 lea	 edx, DWORD PTR _ftLastWriteTime$[esp+141060]
  00775	52		 push	 edx
  00776	8d 84 24 94 00
	00 00		 lea	 eax, DWORD PTR _ftLastAccessTime$[esp+141064]
  0077d	50		 push	 eax
  0077e	8d 8c 24 90 00
	00 00		 lea	 ecx, DWORD PTR _ftCreationTime$[esp+141068]
  00785	51		 push	 ecx
  00786	57		 push	 edi
  00787	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFileTime@16
$LN10@RestoreVol:

; 8072 : 
; 8073 : 		if (dev != INVALID_HANDLE_VALUE)

  0078d	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__CloseHandle@4
  00793	83 ff ff	 cmp	 edi, -1
  00796	74 03		 je	 SHORT $LN9@RestoreVol

; 8074 : 			CloseHandle (dev);

  00798	57		 push	 edi
  00799	ff d3		 call	 ebx
$LN9@RestoreVol:

; 8075 : 
; 8076 : 		if (fBackup != INVALID_HANDLE_VALUE)

  0079b	8b 44 24 2c	 mov	 eax, DWORD PTR _fBackup$[esp+141060]
  0079f	83 f8 ff	 cmp	 eax, -1
  007a2	74 03		 je	 SHORT $LN8@RestoreVol

; 8077 : 			CloseHandle (fBackup);

  007a4	50		 push	 eax
  007a5	ff d3		 call	 ebx
$LN8@RestoreVol:

; 8078 : 
; 8079 : 		if (nDosLinkCreated == 0)

  007a7	83 7c 24 34 00	 cmp	 DWORD PTR _nDosLinkCreated$[esp+141060], 0
  007ac	75 18		 jne	 SHORT $LN178@RestoreVol

; 8080 : 			RemoveFakeDosName (szDiskFile, szDosDevice);

  007ae	8d 94 24 f8 02
	00 00		 lea	 edx, DWORD PTR _szDosDevice$[esp+141060]
  007b5	52		 push	 edx
  007b6	8d 84 24 f4 00
	00 00		 lea	 eax, DWORD PTR _szDiskFile$[esp+141064]
  007bd	50		 push	 eax
  007be	e8 00 00 00 00	 call	 _RemoveFakeDosName
  007c3	83 c4 08	 add	 esp, 8
$LN178@RestoreVol:

; 8081 : 	}
; 8082 : 
; 8083 : 	SetLastError (dwError);

  007c6	55		 push	 ebp
  007c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 8084 : 	if (nStatus != 0)

  007cd	85 f6		 test	 esi, esi
  007cf	74 0e		 je	 SHORT $LN5@RestoreVol

; 8085 : 		handleError (hwndDlg, nStatus);

  007d1	8b 4c 24 1c	 mov	 ecx, DWORD PTR _hwndDlg$GSCopy$[esp+141060]
  007d5	56		 push	 esi
  007d6	51		 push	 ecx
  007d7	e8 00 00 00 00	 call	 _handleError
  007dc	83 c4 08	 add	 esp, 8
$LN5@RestoreVol:

; 8086 : 
; 8087 : 	burn (&VolumePassword, sizeof (VolumePassword));

  007df	ba 00 00 00 00	 mov	 edx, OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  007e4	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  007e9	8b f9		 mov	 edi, ecx
  007eb	8b c2		 mov	 eax, edx
  007ed	8d 49 00	 npad	 3
$LL129@RestoreVol:
  007f0	c6 00 00	 mov	 BYTE PTR [eax], 0
  007f3	40		 inc	 eax
  007f4	83 ef 01	 sub	 edi, 1
  007f7	75 f7		 jne	 SHORT $LL129@RestoreVol
  007f9	8d a4 24 00 00
	00 00		 npad	 7
$LL2@RestoreVol:
  00800	49		 dec	 ecx
  00801	c6 02 00	 mov	 BYTE PTR [edx], 0
  00804	42		 inc	 edx
  00805	85 c9		 test	 ecx, ecx
  00807	75 f7		 jne	 SHORT $LL2@RestoreVol

; 8088 : 	RestoreDefaultKeyFilesParam();

  00809	e8 00 00 00 00	 call	 _RestoreDefaultKeyFilesParam

; 8089 : 	RandStop (FALSE);

  0080e	6a 00		 push	 0
  00810	e8 00 00 00 00	 call	 _RandStop
  00815	83 c4 04	 add	 esp, 4

; 8090 : 	NormalCursor();

  00818	e8 00 00 00 00	 call	 _NormalCursor

; 8091 : 
; 8092 : 	return nStatus;

  0081d	8b c6		 mov	 eax, esi
$LN109@RestoreVol:

; 8093 : }

  0081f	8b 8c 24 00 27
	02 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+141060]
  00826	5f		 pop	 edi
  00827	5e		 pop	 esi
  00828	5d		 pop	 ebp
  00829	5b		 pop	 ebx
  0082a	33 cc		 xor	 ecx, esp
  0082c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00831	81 c4 f4 26 02
	00		 add	 esp, 141044		; 000226f4H
  00837	c3		 ret	 0
_RestoreVolumeHeader ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@CFHJALGH@PKCS11_LIB_LOCATION_HELP?$AA@ ; `string'
PUBLIC	??_C@_0BG@FENNOOCF@IDD_TOKEN_PREFERENCES?$AA@	; `string'
PUBLIC	??_C@_0CE@OHLDMBDC@PKCS11_MODULE_AUTO_DETECTION_FAI@ ; `string'
PUBLIC	??_C@_0BC@GHFGDNNP@C_GetFunctionList?$AA@	; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_06GCOBGCMM@?2?$CK?4dll?$AA@		; `string'
PUBLIC	??_C@_0BF@MIOOGCMH@SELECT_PKCS11_MODULE?$AA@	; `string'
PUBLIC	??_C@_1CO@NINDPDLA@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AAd?$AAl?$AAl?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AAd?$AAl?$AAl?$AA?$CF?$AAc?$AA?$CF?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_09KCMKPLMM@DLL_FILES?$AA@			; `string'
PUBLIC	??_C@_0BK@JAOPIDPK@SELECT_PKCS11_MODULE_HELP?$AA@ ; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp__CheckDlgButton@12:PROC
EXTRN	__imp__FindClose@4:PROC
EXTRN	__imp__FindNextFileA@8:PROC
EXTRN	__imp__FreeLibrary@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	_LoadFile:PROC
EXTRN	__imp__FindFirstFileA@8:PROC
EXTRN	__imp__IsDlgButtonChecked@8:PROC
EXTRN	?CloseLibrary@SecurityToken@CipherShed@@SAXXZ:PROC ; CipherShed::SecurityToken::CloseLibrary
;	COMDAT ??_C@_0BJ@CFHJALGH@PKCS11_LIB_LOCATION_HELP?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0BJ@CFHJALGH@PKCS11_LIB_LOCATION_HELP?$AA@ DB 'PKCS11_LIB_LOCATION_'
	DB	'HELP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FENNOOCF@IDD_TOKEN_PREFERENCES?$AA@
CONST	SEGMENT
??_C@_0BG@FENNOOCF@IDD_TOKEN_PREFERENCES?$AA@ DB 'IDD_TOKEN_PREFERENCES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OHLDMBDC@PKCS11_MODULE_AUTO_DETECTION_FAI@
CONST	SEGMENT
??_C@_0CE@OHLDMBDC@PKCS11_MODULE_AUTO_DETECTION_FAI@ DB 'PKCS11_MODULE_AU'
	DB	'TO_DETECTION_FAILED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GHFGDNNP@C_GetFunctionList?$AA@
CONST	SEGMENT
??_C@_0BC@GHFGDNNP@C_GetFunctionList?$AA@ DB 'C_GetFunctionList', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06GCOBGCMM@?2?$CK?4dll?$AA@
CONST	SEGMENT
??_C@_06GCOBGCMM@?2?$CK?4dll?$AA@ DB '\*.dll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MIOOGCMH@SELECT_PKCS11_MODULE?$AA@
CONST	SEGMENT
??_C@_0BF@MIOOGCMH@SELECT_PKCS11_MODULE?$AA@ DB 'SELECT_PKCS11_MODULE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@NINDPDLA@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AAd?$AAl?$AAl?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AAd?$AAl?$AAl?$AA?$CF?$AAc?$AA?$CF?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@NINDPDLA@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AAd?$AAl?$AAl?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AAd?$AAl?$AAl?$AA?$CF?$AAc?$AA?$CF?$AAc?$AA?$AA@ DB '%'
	DB	00H, 'l', 00H, 's', 00H, ' ', 00H, '(', 00H, '*', 00H, '.', 00H
	DB	'd', 00H, 'l', 00H, 'l', 00H, ')', 00H, '%', 00H, 'c', 00H, '*'
	DB	00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, '%', 00H, 'c', 00H
	DB	'%', 00H, 'c', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09KCMKPLMM@DLL_FILES?$AA@
CONST	SEGMENT
??_C@_09KCMKPLMM@DLL_FILES?$AA@ DB 'DLL_FILES', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JAOPIDPK@SELECT_PKCS11_MODULE_HELP?$AA@
CONST	SEGMENT
??_C@_0BK@JAOPIDPK@SELECT_PKCS11_MODULE_HELP?$AA@ DB 'SELECT_PKCS11_MODUL'
	DB	'E_HELP', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z$0
__tryblocktable$?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z$7
__ehfuncinfo$?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z$5
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
xdata$x	ENDS
;	COMDAT ?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
$T180579 = -148						; size = 28
$T180578 = -120						; size = 28
$T180581 = -92						; size = 28
$T180580 = -64						; size = 28
_hwndDlg$GSCopy$ = -36					; size = 4
_file$140430 = -32					; size = 4
_fileSize$140429 = -28					; size = 4
_find$140415 = -24					; size = 4
_found$140414 = -17					; size = 1
__$EHRec$ = -16						; size = 16
_findData$140413 = 0					; size = 320
_dllPathname$140424 = 320				; size = 28
_browseFilter$140453 = 348				; size = 2048
_securityTokenLibraryPath$140451 = 2396			; size = 260
_systemDir$140452 = 2656				; size = 260
_prevSecurityTokenLibraryPath$140409 = 2656		; size = 260
_systemDir$140412 = 2916				; size = 260
_securityTokenLibraryPath$140405 = 2916			; size = 260
__$ArrayPad$ = 3176					; size = 4
_hwndDlg$ = 3188					; size = 4
_msg$ = 3192						; size = 4
_wParam$ = 3196						; size = 4
_lParam$ = 3200						; size = 4
?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z PROC ; SecurityTokenPreferencesDlgProc, COMDAT

; 8277 : {

  00000	55		 push	 ebp
  00001	8d ac 24 94 f3
	ff ff		 lea	 ebp, DWORD PTR [esp-3180]
  00008	81 ec 6c 0c 00
	00		 sub	 esp, 3180		; 00000c6cH
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 68 0c 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 8278 : 	WORD lw = LOWORD (wParam);
; 8279 : 
; 8280 : 	switch (msg)

  0003f	8b 85 78 0c 00
	00		 mov	 eax, DWORD PTR _msg$[ebp]
  00045	2d 10 01 00 00	 sub	 eax, 272		; 00000110H
  0004a	8b b5 74 0c 00
	00		 mov	 esi, DWORD PTR _hwndDlg$[ebp]
  00050	89 75 dc	 mov	 DWORD PTR _hwndDlg$GSCopy$[ebp], esi
  00053	0f 84 8e 04 00
	00		 je	 $LN26@SecurityTo
  00059	83 e8 01	 sub	 eax, 1

; 8418 : 	}
; 8419 : 
; 8420 : 	return 0;

  0005c	0f 85 dd 04 00
	00		 jne	 $LN235@SecurityTo
  00062	0f b7 85 7c 0c
	00 00		 movzx	 eax, WORD PTR _wParam$[ebp]
  00069	3d 4d 04 00 00	 cmp	 eax, 1101		; 0000044dH
  0006e	0f 8f 9c 01 00
	00		 jg	 $LN34@SecurityTo

; 8290 : 
; 8291 : 	case WM_COMMAND:
; 8292 : 
; 8293 : 		switch (lw)

  00074	0f 84 02 01 00
	00		 je	 $LN2@SecurityTo
  0007a	8b c8		 mov	 ecx, eax
  0007c	83 e9 01	 sub	 ecx, 1
  0007f	74 1b		 je	 SHORT $LN21@SecurityTo
  00081	83 e9 01	 sub	 ecx, 1
  00084	0f 85 b5 04 00
	00		 jne	 $LN235@SecurityTo

; 8294 : 		{
; 8295 : 		case IDCANCEL:
; 8296 : 			EndDialog (hwndDlg, lw);

  0008a	50		 push	 eax
  0008b	56		 push	 esi
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 8297 : 			return 1;

  00092	b8 01 00 00 00	 mov	 eax, 1
  00097	e9 a5 04 00 00	 jmp	 $LN29@SecurityTo
$LN21@SecurityTo:

; 8298 : 
; 8299 : 		case IDOK:
; 8300 : 			{
; 8301 : 				char securityTokenLibraryPath[MAX_PATH];
; 8302 : 				GetDlgItemText (hwndDlg, IDC_PKCS11_MODULE, securityTokenLibraryPath, sizeof (securityTokenLibraryPath));

  0009c	68 04 01 00 00	 push	 260			; 00000104H
  000a1	8d 85 64 0b 00
	00		 lea	 eax, DWORD PTR _securityTokenLibraryPath$140405[ebp]
  000a7	50		 push	 eax
  000a8	68 4c 04 00 00	 push	 1100			; 0000044cH
  000ad	56		 push	 esi
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemTextA@16

; 8303 : 
; 8304 : 				if (securityTokenLibraryPath[0] == 0)

  000b4	80 bd 64 0b 00
	00 00		 cmp	 BYTE PTR _securityTokenLibraryPath$140405[ebp], 0
  000bb	75 61		 jne	 SHORT $LN20@SecurityTo

; 8305 : 				{
; 8306 : 					try
; 8307 : 					{

  000bd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 8308 : 						SecurityToken::CloseLibrary();

  000c4	e8 00 00 00 00	 call	 ?CloseLibrary@SecurityToken@CipherShed@@SAXXZ ; CipherShed::SecurityToken::CloseLibrary
  000c9	eb 09		 jmp	 SHORT $LN47@SecurityTo
__catch$?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z$0:

; 8309 : 					}
; 8310 : 					catch (...) { }

  000cb	b8 00 00 00 00	 mov	 eax, $LN228@SecurityTo
  000d0	c3		 ret	 0
$LN228@SecurityTo:
  000d1	8b 75 dc	 mov	 esi, DWORD PTR _hwndDlg$GSCopy$[ebp]
$LN47@SecurityTo:

; 8311 : 
; 8312 : 					SecurityTokenLibraryPath[0] = 0;

  000d4	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _SecurityTokenLibraryPath, 0
$LN17@SecurityTo:

; 8324 : 					}
; 8325 : 				}
; 8326 : 
; 8327 : 				CloseSecurityTokenSessionsAfterMount = (IsDlgButtonChecked (hwndDlg, IDC_CLOSE_TOKEN_SESSION_AFTER_MOUNT) == BST_CHECKED);

  000db	68 4f 04 00 00	 push	 1103			; 0000044fH
  000e0	56		 push	 esi
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsDlgButtonChecked@8
  000e7	48		 dec	 eax
  000e8	f7 d8		 neg	 eax
  000ea	1b c0		 sbb	 eax, eax
  000ec	40		 inc	 eax
  000ed	a3 00 00 00 00	 mov	 DWORD PTR ?CloseSecurityTokenSessionsAfterMount@@3HA, eax ; CloseSecurityTokenSessionsAfterMount

; 8328 : 
; 8329 : 				WaitCursor ();

  000f2	e8 00 00 00 00	 call	 _WaitCursor

; 8330 : 				SaveSettings (hwndDlg);

  000f7	56		 push	 esi
  000f8	e8 00 00 00 00	 call	 _SaveSettings
  000fd	83 c4 04	 add	 esp, 4

; 8331 : 				NormalCursor ();

  00100	e8 00 00 00 00	 call	 _NormalCursor

; 8332 : 
; 8333 : 				EndDialog (hwndDlg, lw);

  00105	0f b7 8d 7c 0c
	00 00		 movzx	 ecx, WORD PTR _wParam$[ebp]
  0010c	51		 push	 ecx
  0010d	56		 push	 esi
  0010e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 8334 : 				return 1;

  00114	b8 01 00 00 00	 mov	 eax, 1
  00119	e9 23 04 00 00	 jmp	 $LN29@SecurityTo
$LN20@SecurityTo:

; 8313 : 				}
; 8314 : 				else
; 8315 : 				{
; 8316 : 					char prevSecurityTokenLibraryPath[MAX_PATH];
; 8317 : 					strcpy (prevSecurityTokenLibraryPath, SecurityTokenLibraryPath);

  0011e	33 c0		 xor	 eax, eax
$LL31@SecurityTo:
  00120	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR _SecurityTokenLibraryPath[eax]
  00126	88 8c 05 60 0a
	00 00		 mov	 BYTE PTR _prevSecurityTokenLibraryPath$140409[ebp+eax], cl
  0012d	40		 inc	 eax
  0012e	84 c9		 test	 cl, cl
  00130	75 ee		 jne	 SHORT $LL31@SecurityTo

; 8318 : 					strcpy (SecurityTokenLibraryPath, securityTokenLibraryPath);

  00132	33 c0		 xor	 eax, eax
  00134	eb 0a 8d a4 24
	00 00 00 00 8d
	49 00		 npad	 12
$LL32@SecurityTo:
  00140	8a 8c 05 64 0b
	00 00		 mov	 cl, BYTE PTR _securityTokenLibraryPath$140405[ebp+eax]
  00147	88 88 00 00 00
	00		 mov	 BYTE PTR _SecurityTokenLibraryPath[eax], cl
  0014d	40		 inc	 eax
  0014e	84 c9		 test	 cl, cl
  00150	75 ee		 jne	 SHORT $LL32@SecurityTo

; 8319 : 
; 8320 : 					if (!InitSecurityTokenLibrary())

  00152	e8 00 00 00 00	 call	 _InitSecurityTokenLibrary
  00157	85 c0		 test	 eax, eax
  00159	75 80		 jne	 SHORT $LN17@SecurityTo
  0015b	eb 03 8d 49 00	 npad	 5
$LL33@SecurityTo:

; 8321 : 					{
; 8322 : 						strcpy (SecurityTokenLibraryPath, prevSecurityTokenLibraryPath);

  00160	8a 8c 05 60 0a
	00 00		 mov	 cl, BYTE PTR _prevSecurityTokenLibraryPath$140409[ebp+eax]
  00167	88 88 00 00 00
	00		 mov	 BYTE PTR _SecurityTokenLibraryPath[eax], cl
  0016d	40		 inc	 eax
  0016e	84 c9		 test	 cl, cl
  00170	75 ee		 jne	 SHORT $LL33@SecurityTo

; 8323 : 						return 1;

  00172	b8 01 00 00 00	 mov	 eax, 1
  00177	e9 c5 03 00 00	 jmp	 $LN29@SecurityTo
$LN2@SecurityTo:

; 8399 : 			}
; 8400 : 
; 8401 : 		case IDC_SELECT_PKCS11_MODULE:
; 8402 : 			{
; 8403 : 				char securityTokenLibraryPath[MAX_PATH];
; 8404 : 				char systemDir[MAX_PATH];
; 8405 : 				wchar_t browseFilter[1024];
; 8406 : 
; 8407 : 				Info ("SELECT_PKCS11_MODULE_HELP");

  0017c	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@JAOPIDPK@SELECT_PKCS11_MODULE_HELP?$AA@
  00181	e8 00 00 00 00	 call	 _Info
  00186	83 c4 04	 add	 esp, 4

; 8408 : 
; 8409 : 				wsprintfW (browseFilter, L"%ls (*.dll)%c*.dll%c%c", GetString ("DLL_FILES"), 0, 0, 0);

  00189	6a 00		 push	 0
  0018b	6a 00		 push	 0
  0018d	6a 00		 push	 0
  0018f	68 00 00 00 00	 push	 OFFSET ??_C@_09KCMKPLMM@DLL_FILES?$AA@
  00194	e8 00 00 00 00	 call	 _GetString
  00199	83 c4 04	 add	 esp, 4
  0019c	50		 push	 eax
  0019d	8d 95 5c 01 00
	00		 lea	 edx, DWORD PTR _browseFilter$140453[ebp]
  001a3	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@NINDPDLA@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AAd?$AAl?$AAl?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AAd?$AAl?$AAl?$AA?$CF?$AAc?$AA?$CF?$AAc?$AA?$AA@
  001a8	52		 push	 edx
  001a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  001af	83 c4 18	 add	 esp, 24			; 00000018H

; 8410 : 				GetSystemDirectory (systemDir, sizeof (systemDir));

  001b2	68 04 01 00 00	 push	 260			; 00000104H
  001b7	8d 85 60 0a 00
	00		 lea	 eax, DWORD PTR _systemDir$140452[ebp]
  001bd	50		 push	 eax
  001be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDirectoryA@8

; 8411 : 
; 8412 : 				if (BrowseFilesInDir (hwndDlg, "SELECT_PKCS11_MODULE", systemDir, securityTokenLibraryPath, TRUE, FALSE, browseFilter))

  001c4	6a 00		 push	 0
  001c6	6a 00		 push	 0
  001c8	8d 8d 5c 01 00
	00		 lea	 ecx, DWORD PTR _browseFilter$140453[ebp]
  001ce	51		 push	 ecx
  001cf	6a 00		 push	 0
  001d1	6a 01		 push	 1
  001d3	8d 95 5c 09 00
	00		 lea	 edx, DWORD PTR _securityTokenLibraryPath$140451[ebp]
  001d9	52		 push	 edx
  001da	8d 85 60 0a 00
	00		 lea	 eax, DWORD PTR _systemDir$140452[ebp]
  001e0	50		 push	 eax
  001e1	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MIOOGCMH@SELECT_PKCS11_MODULE?$AA@
  001e6	56		 push	 esi
  001e7	e8 00 00 00 00	 call	 ?BrowseFilesInDir@@YAHPAUHWND__@@PAD11HHPA_WPB_W3@Z ; BrowseFilesInDir
  001ec	83 c4 24	 add	 esp, 36			; 00000024H
  001ef	85 c0		 test	 eax, eax
  001f1	74 13		 je	 SHORT $LN1@SecurityTo

; 8413 : 					SetDlgItemText (hwndDlg, IDC_PKCS11_MODULE, securityTokenLibraryPath);

  001f3	8d 8d 5c 09 00
	00		 lea	 ecx, DWORD PTR _securityTokenLibraryPath$140451[ebp]
  001f9	51		 push	 ecx
  001fa	68 4c 04 00 00	 push	 1100			; 0000044cH
  001ff	56		 push	 esi
  00200	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12
$LN1@SecurityTo:

; 8414 : 				return 1;

  00206	b8 01 00 00 00	 mov	 eax, 1
  0020b	e9 31 03 00 00	 jmp	 $LN29@SecurityTo
$LN34@SecurityTo:

; 8290 : 
; 8291 : 	case WM_COMMAND:
; 8292 : 
; 8293 : 		switch (lw)

  00210	3d 4e 04 00 00	 cmp	 eax, 1102		; 0000044eH

; 8415 : 			}
; 8416 : 		}
; 8417 : 		return 0;

  00215	0f 85 24 03 00
	00		 jne	 $LN235@SecurityTo
  0021b	68 04 01 00 00	 push	 260			; 00000104H
  00220	8d 95 64 0b 00
	00		 lea	 edx, DWORD PTR _systemDir$140412[ebp]
  00226	52		 push	 edx
  00227	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDirectoryA@8
  0022d	c6 45 ef 00	 mov	 BYTE PTR _found$140414[ebp], 0
  00231	e8 00 00 00 00	 call	 _WaitCursor
  00236	8d 85 64 0b 00
	00		 lea	 eax, DWORD PTR _systemDir$140412[ebp]
  0023c	50		 push	 eax
  0023d	8d 4d 88	 lea	 ecx, DWORD PTR $T180578[ebp]
  00240	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00245	68 00 00 00 00	 push	 OFFSET ??_C@_06GCOBGCMM@?2?$CK?4dll?$AA@
  0024a	50		 push	 eax
  0024b	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T180579[ebp]
  00251	51		 push	 ecx
  00252	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00259	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0025e	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00263	83 c4 0c	 add	 esp, 12			; 0000000cH
  00266	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  00269	72 05		 jb	 SHORT $LN52@SecurityTo

; 8335 : 			}
; 8336 : 
; 8337 : 		case IDC_AUTO_DETECT_PKCS11_MODULE:
; 8338 : 			{
; 8339 : 				char systemDir[MAX_PATH];
; 8340 : 				GetSystemDirectory (systemDir, sizeof (systemDir));
; 8341 : 				WIN32_FIND_DATA findData;
; 8342 : 				bool found = false;
; 8343 : 
; 8344 : 				WaitCursor();
; 8345 : 
; 8346 : 				HANDLE find = FindFirstFile ((string (systemDir) + "\\*.dll").c_str(), &findData);

  0026b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0026e	eb 03		 jmp	 SHORT $LN53@SecurityTo
$LN52@SecurityTo:
  00270	83 c0 04	 add	 eax, 4
$LN53@SecurityTo:
  00273	8d 55 00	 lea	 edx, DWORD PTR _findData$140413[ebp]
  00276	52		 push	 edx
  00277	50		 push	 eax
  00278	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindFirstFileA@8
  0027e	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T180579[ebp]
  00284	89 45 e8	 mov	 DWORD PTR _find$140415[ebp], eax
  00287	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0028c	8d 4d 88	 lea	 ecx, DWORD PTR $T180578[ebp]
  0028f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00296	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN15@SecurityTo:

; 8347 : 				while (!found && find != INVALID_HANDLE_VALUE)

  0029b	83 7d e8 ff	 cmp	 DWORD PTR _find$140415[ebp], -1
  0029f	0f 84 23 02 00
	00		 je	 $LN4@SecurityTo

; 8348 : 				{
; 8349 : 					string dllPathname = string (systemDir) + "\\" + findData.cFileName;

  002a5	33 db		 xor	 ebx, ebx
  002a7	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  002ac	8d 85 64 0b 00
	00		 lea	 eax, DWORD PTR _systemDir$140412[ebp]
  002b2	89 7d d8	 mov	 DWORD PTR $T180580[ebp+24], edi
  002b5	89 5d d4	 mov	 DWORD PTR $T180580[ebp+20], ebx
  002b8	88 5d c4	 mov	 BYTE PTR $T180580[ebp+4], bl
  002bb	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  002be	8b ff		 npad	 2
$LL226@SecurityTo:
  002c0	8a 08		 mov	 cl, BYTE PTR [eax]
  002c2	40		 inc	 eax
  002c3	84 c9		 test	 cl, cl
  002c5	75 f9		 jne	 SHORT $LL226@SecurityTo
  002c7	2b c2		 sub	 eax, edx
  002c9	50		 push	 eax
  002ca	8d 85 64 0b 00
	00		 lea	 eax, DWORD PTR _systemDir$140412[ebp]
  002d0	50		 push	 eax
  002d1	8d 4d c0	 lea	 ecx, DWORD PTR $T180580[ebp]
  002d4	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  002d9	68 00 00 00 00	 push	 OFFSET ??_C@_01KICIPPFI@?2?$AA@
  002de	8d 4d c0	 lea	 ecx, DWORD PTR $T180580[ebp]
  002e1	51		 push	 ecx
  002e2	8d 55 a4	 lea	 edx, DWORD PTR $T180581[ebp]
  002e5	52		 push	 edx
  002e6	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  002ed	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  002f2	8d 4d 2c	 lea	 ecx, DWORD PTR _findData$140413[ebp+44]
  002f5	51		 push	 ecx
  002f6	50		 push	 eax
  002f7	8d 95 40 01 00
	00		 lea	 edx, DWORD PTR _dllPathname$140424[ebp]
  002fd	52		 push	 edx
  002fe	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  00302	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00307	83 c4 18	 add	 esp, 24			; 00000018H
  0030a	39 75 bc	 cmp	 DWORD PTR $T180581[ebp+24], esi
  0030d	72 0c		 jb	 SHORT $LN106@SecurityTo
  0030f	8b 45 a8	 mov	 eax, DWORD PTR $T180581[ebp+4]
  00312	50		 push	 eax
  00313	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00318	83 c4 04	 add	 esp, 4
$LN106@SecurityTo:
  0031b	89 7d bc	 mov	 DWORD PTR $T180581[ebp+24], edi
  0031e	89 5d b8	 mov	 DWORD PTR $T180581[ebp+20], ebx
  00321	c6 45 a8 00	 mov	 BYTE PTR $T180581[ebp+4], 0
  00325	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0032c	39 75 d8	 cmp	 DWORD PTR $T180580[ebp+24], esi
  0032f	72 0c		 jb	 SHORT $LN132@SecurityTo
  00331	8b 4d c4	 mov	 ecx, DWORD PTR $T180580[ebp+4]
  00334	51		 push	 ecx
  00335	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0033a	83 c4 04	 add	 esp, 4
$LN132@SecurityTo:

; 8350 : 					DWORD fileSize;
; 8351 : 
; 8352 : 					char *file = LoadFile (dllPathname.c_str(), &fileSize);

  0033d	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR _dllPathname$140424[ebp+4]
  00343	89 7d d8	 mov	 DWORD PTR $T180580[ebp+24], edi
  00346	89 5d d4	 mov	 DWORD PTR $T180580[ebp+20], ebx
  00349	c6 45 c4 00	 mov	 BYTE PTR $T180580[ebp+4], 0
  0034d	39 b5 58 01 00
	00		 cmp	 DWORD PTR _dllPathname$140424[ebp+24], esi
  00353	73 06		 jae	 SHORT $LN147@SecurityTo
  00355	8d 85 44 01 00
	00		 lea	 eax, DWORD PTR _dllPathname$140424[ebp+4]
$LN147@SecurityTo:
  0035b	8d 55 e4	 lea	 edx, DWORD PTR _fileSize$140429[ebp]
  0035e	52		 push	 edx
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 _LoadFile
  00365	83 c4 08	 add	 esp, 8
  00368	89 45 e0	 mov	 DWORD PTR _file$140430[ebp], eax

; 8353 : 					if (file)

  0036b	3b c3		 cmp	 eax, ebx
  0036d	0f 84 ff 00 00
	00		 je	 $LN13@SecurityTo

; 8354 : 					{
; 8355 : 						const char *functionName = "C_GetFunctionList";
; 8356 : 						size_t strLen = strlen (functionName);

  00373	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@GHFGDNNP@C_GetFunctionList?$AA@
  00378	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0037b	eb 03 8d 49 00	 npad	 5
$LL227@SecurityTo:
  00380	8a 08		 mov	 cl, BYTE PTR [eax]
  00382	40		 inc	 eax
  00383	84 c9		 test	 cl, cl
  00385	75 f9		 jne	 SHORT $LL227@SecurityTo
  00387	2b c2		 sub	 eax, edx
  00389	8b f8		 mov	 edi, eax

; 8357 : 
; 8358 : 						if (fileSize > strLen)

  0038b	8b 45 e4	 mov	 eax, DWORD PTR _fileSize$140429[ebp]
  0038e	3b c7		 cmp	 eax, edi
  00390	0f 86 d0 00 00
	00		 jbe	 $LN9@SecurityTo

; 8359 : 						{
; 8360 : 							for (size_t i = 0; i < fileSize - strLen; ++i)

  00396	2b c7		 sub	 eax, edi
  00398	0f 84 c8 00 00
	00		 je	 $LN9@SecurityTo
$LN11@SecurityTo:

; 8361 : 							{
; 8362 : 								if (memcmp (file + i, functionName, strLen) == 0)

  0039e	8b 55 e0	 mov	 edx, DWORD PTR _file$140430[ebp]
  003a1	8b c7		 mov	 eax, edi
  003a3	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@GHFGDNNP@C_GetFunctionList?$AA@
  003a8	8d 34 13	 lea	 esi, DWORD PTR [ebx+edx]
  003ab	83 ff 04	 cmp	 edi, 4
  003ae	72 14		 jb	 SHORT $LN220@SecurityTo
$LL36@SecurityTo:
  003b0	8b 16		 mov	 edx, DWORD PTR [esi]
  003b2	3b 11		 cmp	 edx, DWORD PTR [ecx]
  003b4	75 6b		 jne	 SHORT $LN10@SecurityTo
  003b6	83 e8 04	 sub	 eax, 4
  003b9	83 c1 04	 add	 ecx, 4
  003bc	83 c6 04	 add	 esi, 4
  003bf	83 f8 04	 cmp	 eax, 4
  003c2	73 ec		 jae	 SHORT $LL36@SecurityTo
$LN220@SecurityTo:
  003c4	85 c0		 test	 eax, eax
  003c6	74 20		 je	 SHORT $LN38@SecurityTo
  003c8	8a 11		 mov	 dl, BYTE PTR [ecx]
  003ca	3a 16		 cmp	 dl, BYTE PTR [esi]
  003cc	75 53		 jne	 SHORT $LN10@SecurityTo
  003ce	83 f8 01	 cmp	 eax, 1
  003d1	76 15		 jbe	 SHORT $LN38@SecurityTo
  003d3	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  003d6	3a 56 01	 cmp	 dl, BYTE PTR [esi+1]
  003d9	75 46		 jne	 SHORT $LN10@SecurityTo
  003db	83 f8 02	 cmp	 eax, 2
  003de	76 08		 jbe	 SHORT $LN38@SecurityTo
  003e0	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  003e3	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  003e6	75 39		 jne	 SHORT $LN10@SecurityTo
$LN38@SecurityTo:

; 8363 : 								{
; 8364 : 									//This is a path from FindFirstFile / FindNextFile with a systemDir prefixed 
; 8365 : 									HMODULE module = LoadLibraryA(dllPathname.c_str());

  003e8	83 bd 58 01 00
	00 10		 cmp	 DWORD PTR _dllPathname$140424[ebp+24], 16 ; 00000010H
  003ef	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR _dllPathname$140424[ebp+4]
  003f5	73 06		 jae	 SHORT $LN153@SecurityTo
  003f7	8d 85 44 01 00
	00		 lea	 eax, DWORD PTR _dllPathname$140424[ebp+4]
$LN153@SecurityTo:
  003fd	50		 push	 eax
  003fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
  00404	8b f0		 mov	 esi, eax

; 8366 : 									if (module)

  00406	85 f6		 test	 esi, esi
  00408	74 17		 je	 SHORT $LN10@SecurityTo

; 8367 : 									{
; 8368 : 										if (GetProcAddress (module, functionName))

  0040a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GHFGDNNP@C_GetFunctionList?$AA@
  0040f	56		 push	 esi
  00410	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  00416	85 c0		 test	 eax, eax
  00418	75 17		 jne	 SHORT $LN221@SecurityTo

; 8374 : 											break;
; 8375 : 										}
; 8376 : 
; 8377 : 										FreeLibrary (module);

  0041a	56		 push	 esi
  0041b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeLibrary@4
$LN10@SecurityTo:
  00421	8b 4d e4	 mov	 ecx, DWORD PTR _fileSize$140429[ebp]
  00424	43		 inc	 ebx
  00425	2b cf		 sub	 ecx, edi
  00427	3b d9		 cmp	 ebx, ecx
  00429	0f 82 6f ff ff
	ff		 jb	 $LN11@SecurityTo

; 8384 : 					}
; 8385 : 
; 8386 : 					if (!FindNextFile (find, &findData))

  0042f	eb 30		 jmp	 SHORT $LN236@SecurityTo
$LN221@SecurityTo:

; 8369 : 										{
; 8370 : 											SetDlgItemText (hwndDlg, IDC_PKCS11_MODULE, dllPathname.c_str());

  00431	83 bd 58 01 00
	00 10		 cmp	 DWORD PTR _dllPathname$140424[ebp+24], 16 ; 00000010H
  00438	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR _dllPathname$140424[ebp+4]
  0043e	73 06		 jae	 SHORT $LN159@SecurityTo
  00440	8d 85 44 01 00
	00		 lea	 eax, DWORD PTR _dllPathname$140424[ebp+4]
$LN159@SecurityTo:
  00446	8b 55 dc	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00449	50		 push	 eax
  0044a	68 4c 04 00 00	 push	 1100			; 0000044cH
  0044f	52		 push	 edx
  00450	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12

; 8371 : 											found = true;
; 8372 : 
; 8373 : 											FreeLibrary (module);

  00456	56		 push	 esi
  00457	c6 45 ef 01	 mov	 BYTE PTR _found$140414[ebp], 1
  0045b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeLibrary@4
$LN236@SecurityTo:
  00461	be 10 00 00 00	 mov	 esi, 16			; 00000010H
$LN9@SecurityTo:

; 8378 : 									}
; 8379 : 								}
; 8380 : 							}
; 8381 : 						}
; 8382 : 
; 8383 : 						free (file);

  00466	8b 45 e0	 mov	 eax, DWORD PTR _file$140430[ebp]
  00469	50		 push	 eax
  0046a	e8 00 00 00 00	 call	 _free
  0046f	83 c4 04	 add	 esp, 4
$LN13@SecurityTo:

; 8384 : 					}
; 8385 : 
; 8386 : 					if (!FindNextFile (find, &findData))

  00472	8b 55 e8	 mov	 edx, DWORD PTR _find$140415[ebp]
  00475	8d 4d 00	 lea	 ecx, DWORD PTR _findData$140413[ebp]
  00478	51		 push	 ecx
  00479	52		 push	 edx
  0047a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindNextFileA@8
  00480	85 c0		 test	 eax, eax
  00482	74 23		 je	 SHORT $LN222@SecurityTo

; 8388 : 				}

  00484	39 b5 58 01 00
	00		 cmp	 DWORD PTR _dllPathname$140424[ebp+24], esi
  0048a	72 0f		 jb	 SHORT $LN202@SecurityTo
  0048c	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR _dllPathname$140424[ebp+4]
  00492	50		 push	 eax
  00493	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00498	83 c4 04	 add	 esp, 4
$LN202@SecurityTo:

; 8347 : 				while (!found && find != INVALID_HANDLE_VALUE)

  0049b	80 7d ef 00	 cmp	 BYTE PTR _found$140414[ebp], 0
  0049f	0f 84 f6 fd ff
	ff		 je	 $LN15@SecurityTo

; 8384 : 					}
; 8385 : 
; 8386 : 					if (!FindNextFile (find, &findData))

  004a5	eb 17		 jmp	 SHORT $LN176@SecurityTo
$LN222@SecurityTo:

; 8387 : 						break;

  004a7	39 b5 58 01 00
	00		 cmp	 DWORD PTR _dllPathname$140424[ebp+24], esi
  004ad	72 0f		 jb	 SHORT $LN176@SecurityTo
  004af	8b 8d 44 01 00
	00		 mov	 ecx, DWORD PTR _dllPathname$140424[ebp+4]
  004b5	51		 push	 ecx
  004b6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004bb	83 c4 04	 add	 esp, 4
$LN176@SecurityTo:

; 8389 : 
; 8390 : 				if (find != INVALID_HANDLE_VALUE)
; 8391 : 					FindClose (find);

  004be	8b 55 e8	 mov	 edx, DWORD PTR _find$140415[ebp]
  004c1	52		 push	 edx
  004c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindClose@4
$LN4@SecurityTo:

; 8392 : 
; 8393 : 				NormalCursor();

  004c8	e8 00 00 00 00	 call	 _NormalCursor

; 8394 : 
; 8395 : 				if (!found)

  004cd	80 7d ef 00	 cmp	 BYTE PTR _found$140414[ebp], 0
  004d1	75 0d		 jne	 SHORT $LN3@SecurityTo

; 8396 : 					Warning ("PKCS11_MODULE_AUTO_DETECTION_FAILED");

  004d3	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@OHLDMBDC@PKCS11_MODULE_AUTO_DETECTION_FAI@
  004d8	e8 00 00 00 00	 call	 _Warning
  004dd	83 c4 04	 add	 esp, 4
$LN3@SecurityTo:

; 8397 : 
; 8398 : 				return 1;

  004e0	b8 01 00 00 00	 mov	 eax, 1
  004e5	eb 5a		 jmp	 SHORT $LN29@SecurityTo
$LN26@SecurityTo:

; 8281 : 	{
; 8282 : 	case WM_INITDIALOG:
; 8283 : 		LocalizeDialog (hwndDlg, "IDD_TOKEN_PREFERENCES");

  004e7	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FENNOOCF@IDD_TOKEN_PREFERENCES?$AA@
  004ec	56		 push	 esi
  004ed	e8 00 00 00 00	 call	 _LocalizeDialog
  004f2	83 c4 08	 add	 esp, 8

; 8284 : 		SetDlgItemText (hwndDlg, IDC_PKCS11_MODULE, SecurityTokenLibraryPath);

  004f5	68 00 00 00 00	 push	 OFFSET _SecurityTokenLibraryPath
  004fa	68 4c 04 00 00	 push	 1100			; 0000044cH
  004ff	56		 push	 esi
  00500	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12

; 8285 : 		CheckDlgButton (hwndDlg, IDC_CLOSE_TOKEN_SESSION_AFTER_MOUNT, CloseSecurityTokenSessionsAfterMount ? BST_CHECKED : BST_UNCHECKED);

  00506	33 c0		 xor	 eax, eax
  00508	39 05 00 00 00
	00		 cmp	 DWORD PTR ?CloseSecurityTokenSessionsAfterMount@@3HA, eax ; CloseSecurityTokenSessionsAfterMount
  0050e	0f 95 c0	 setne	 al
  00511	50		 push	 eax
  00512	68 4f 04 00 00	 push	 1103			; 0000044fH
  00517	56		 push	 esi
  00518	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CheckDlgButton@12

; 8286 : 
; 8287 : 		SetWindowTextW (GetDlgItem (hwndDlg, IDT_PKCS11_LIB_HELP), GetString("PKCS11_LIB_LOCATION_HELP"));

  0051e	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@CFHJALGH@PKCS11_LIB_LOCATION_HELP?$AA@
  00523	e8 00 00 00 00	 call	 _GetString
  00528	83 c4 04	 add	 esp, 4
  0052b	50		 push	 eax
  0052c	68 59 04 00 00	 push	 1113			; 00000459H
  00531	56		 push	 esi
  00532	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00538	50		 push	 eax
  00539	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
$LN235@SecurityTo:

; 8288 : 
; 8289 : 		return 0;

  0053f	33 c0		 xor	 eax, eax
$LN29@SecurityTo:

; 8421 : }

  00541	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00544	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0054b	59		 pop	 ecx
  0054c	5f		 pop	 edi
  0054d	5e		 pop	 esi
  0054e	5b		 pop	 ebx
  0054f	8b 8d 68 0c 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00555	33 cd		 xor	 ecx, ebp
  00557	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0055c	81 c5 6c 0c 00
	00		 add	 ebp, 3180		; 00000c6cH
  00562	8b e5		 mov	 esp, ebp
  00564	5d		 pop	 ebp
  00565	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z$2:
  00000	8d 4d 88	 lea	 ecx, DWORD PTR $T180578[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z$4:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR $T180580[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z$5:
  00010	8d 4d a4	 lea	 ecx, DWORD PTR $T180581[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 8a 68 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-152]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	8b 8a 74 0c 00
	00		 mov	 ecx, DWORD PTR [edx+3188]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z ENDP ; SecurityTokenPreferencesDlgProc
PUBLIC	_SecurityTokenPreferencesDialog
; Function compile flags: /Ogtpy
;	COMDAT _SecurityTokenPreferencesDialog
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_SecurityTokenPreferencesDialog PROC			; COMDAT

; 8426 : 	DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_TOKEN_PREFERENCES), hwndDlg, (DLGPROC) SecurityTokenPreferencesDlgProc, 0);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _hwndDlg$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  0000a	6a 00		 push	 0
  0000c	68 00 00 00 00	 push	 OFFSET ?SecurityTokenPreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z ; SecurityTokenPreferencesDlgProc
  00011	50		 push	 eax
  00012	6a 73		 push	 115			; 00000073H
  00014	51		 push	 ecx
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 8427 : }

  0001b	c3		 ret	 0
_SecurityTokenPreferencesDialog ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@MLEEDNMP@CUSTOM_BOOT_LOADER_MESSAGE_HELP?$AA@ ; `string'
PUBLIC	??_C@_0CK@PODLKGNM@BOOT_LOADER_VERSION_INCORRECT_PR@ ; `string'
PUBLIC	??_C@_0BE@DIKHJDAL@IDD_SYSENC_SETTINGS?$AA@	; `string'
PUBLIC	??_C@_0CF@JLONOHPL@BOOT_PASSWORD_CACHE_KEYBOARD_WAR@ ; `string'
PUBLIC	??_C@_0CC@JFAOPCM@CUSTOM_BOOT_LOADER_MESSAGE_PROMP@ ; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	?WriteBootSectorUserConfig@BootEncryption@CipherShed@@QAEXEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CipherShed::BootEncryption::WriteBootSectorUserConfig
EXTRN	?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z:PROC ; CipherShed::BootEncryption::ReadBootSectorConfig
;	COMDAT ??_C@_0CA@MLEEDNMP@CUSTOM_BOOT_LOADER_MESSAGE_HELP?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0CA@MLEEDNMP@CUSTOM_BOOT_LOADER_MESSAGE_HELP?$AA@ DB 'CUSTOM_BOOT_L'
	DB	'OADER_MESSAGE_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PODLKGNM@BOOT_LOADER_VERSION_INCORRECT_PR@
CONST	SEGMENT
??_C@_0CK@PODLKGNM@BOOT_LOADER_VERSION_INCORRECT_PR@ DB 'BOOT_LOADER_VERS'
	DB	'ION_INCORRECT_PREFERENCES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DIKHJDAL@IDD_SYSENC_SETTINGS?$AA@
CONST	SEGMENT
??_C@_0BE@DIKHJDAL@IDD_SYSENC_SETTINGS?$AA@ DB 'IDD_SYSENC_SETTINGS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JLONOHPL@BOOT_PASSWORD_CACHE_KEYBOARD_WAR@
CONST	SEGMENT
??_C@_0CF@JLONOHPL@BOOT_PASSWORD_CACHE_KEYBOARD_WAR@ DB 'BOOT_PASSWORD_CA'
	DB	'CHE_KEYBOARD_WARNING', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JFAOPCM@CUSTOM_BOOT_LOADER_MESSAGE_PROMP@
CONST	SEGMENT
??_C@_0CC@JFAOPCM@CUSTOM_BOOT_LOADER_MESSAGE_PROMP@ DB 'CUSTOM_BOOT_LOADE'
	DB	'R_MESSAGE_PROMPT', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_BootLoaderPreferencesDlgProc@16$10 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffb8H
	DD	FLAT:__catch$_BootLoaderPreferencesDlgProc@16$4
__catchsym$_BootLoaderPreferencesDlgProc@16$9 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffc0H
	DD	FLAT:__catch$_BootLoaderPreferencesDlgProc@16$2
__catchsym$_BootLoaderPreferencesDlgProc@16$8 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffbcH
	DD	FLAT:__catch$_BootLoaderPreferencesDlgProc@16$0
__ehfuncinfo$_BootLoaderPreferencesDlgProc@16 DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$_BootLoaderPreferencesDlgProc@16
	DD	03H
	DD	FLAT:__tryblocktable$_BootLoaderPreferencesDlgProc@16
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$_BootLoaderPreferencesDlgProc@16 DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$_BootLoaderPreferencesDlgProc@16$8
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$_BootLoaderPreferencesDlgProc@16$9
	DD	05H
	DD	06H
	DD	07H
	DD	01H
	DD	FLAT:__catchsym$_BootLoaderPreferencesDlgProc@16$10
__unwindtable$_BootLoaderPreferencesDlgProc@16 DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$_BootLoaderPreferencesDlgProc@16$6
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	05H
	DD	FLAT:__unwindfunclet$_BootLoaderPreferencesDlgProc@16$7
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
xdata$x	ENDS
;	COMDAT _BootLoaderPreferencesDlgProc@16
_TEXT	SEGMENT
$T181274 = -288						; size = 94
$T181276 = -194						; size = 94
$T181278 = -100						; size = 28
_e$140512 = -72						; size = 4
_e$140490 = -68						; size = 4
_e$140504 = -64						; size = 4
_hwndDlg$GSCopy$ = -60					; size = 4
_userConfig$140485 = -53				; size = 1
_userConfig$140502 = -52				; size = 1
_bootLoaderVersion$140487 = -52				; size = 2
_customUserMessage$140501 = -48				; size = 25
_customUserMessage$140486 = -48				; size = 28
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_hwndDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_BootLoaderPreferencesDlgProc@16 PROC			; COMDAT

; 8431 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_BootLoaderPreferencesDlgProc@16
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 8432 : 	WORD lw = LOWORD (wParam);
; 8433 : 
; 8434 : 	switch (msg)

  00031	8b 45 0c	 mov	 eax, DWORD PTR _msg$[ebp]
  00034	2d 10 01 00 00	 sub	 eax, 272		; 00000110H
  00039	8b 75 08	 mov	 esi, DWORD PTR _hwndDlg$[ebp]
  0003c	89 75 c4	 mov	 DWORD PTR _hwndDlg$GSCopy$[ebp], esi
  0003f	0f 84 b8 01 00
	00		 je	 $LN20@BootLoader
  00045	83 e8 01	 sub	 eax, 1

; 8548 : 	}
; 8549 : 
; 8550 : 	return 0;

  00048	0f 85 d3 02 00
	00		 jne	 $LN94@BootLoader
  0004e	0f b7 7d 10	 movzx	 edi, WORD PTR _wParam$[ebp]
  00052	81 ff 51 04 00
	00		 cmp	 edi, 1105		; 00000451H
  00058	0f 8f 6f 01 00
	00		 jg	 $LN25@BootLoader

; 8476 : 
; 8477 : 	case WM_COMMAND:
; 8478 : 
; 8479 : 		switch (lw)

  0005e	0f 84 2a 01 00
	00		 je	 $LN4@BootLoader
  00064	8b c7		 mov	 eax, edi
  00066	83 e8 01	 sub	 eax, 1
  00069	74 34		 je	 SHORT $LN12@BootLoader
  0006b	83 e8 01	 sub	 eax, 1
  0006e	0f 85 ad 02 00
	00		 jne	 $LN94@BootLoader
$LN109@BootLoader:

; 8526 : 				}
; 8527 : 
; 8528 : 				EndDialog (hwndDlg, lw);

  00074	57		 push	 edi
$LN110@BootLoader:
  00075	56		 push	 esi
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
$LN35@BootLoader:

; 8472 : 				return 1;

  0007c	b8 01 00 00 00	 mov	 eax, 1
$LN23@BootLoader:

; 8551 : }

  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00092	33 cd		 xor	 ecx, ebp
  00094	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 10 00	 ret	 16			; 00000010H
$LN12@BootLoader:

; 8480 : 		{
; 8481 : 		case IDCANCEL:
; 8482 : 			EndDialog (hwndDlg, lw);
; 8483 : 			return 1;
; 8484 : 
; 8485 : 		case IDOK:
; 8486 : 			{
; 8487 : 				if (!BootEncObj->GetStatus().DriveMounted)

  0009f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000a5	8d 85 3e ff ff
	ff		 lea	 eax, DWORD PTR $T181276[ebp]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  000b1	33 db		 xor	 ebx, ebx
  000b3	39 58 06	 cmp	 DWORD PTR [eax+6], ebx

; 8488 : 				{
; 8489 : 					EndDialog (hwndDlg, IDCANCEL);
; 8490 : 					return 1;

  000b6	0f 84 67 01 00
	00		 je	 $LN108@BootLoader

; 8491 : 				}
; 8492 : 
; 8493 : 				char customUserMessage[TC_BOOT_SECTOR_USER_MESSAGE_MAX_LENGTH + 1];
; 8494 : 				GetDlgItemText (hwndDlg, IDC_CUSTOM_BOOT_LOADER_MESSAGE, customUserMessage, sizeof (customUserMessage));

  000bc	6a 19		 push	 25			; 00000019H
  000be	8d 4d d0	 lea	 ecx, DWORD PTR _customUserMessage$140501[ebp]
  000c1	51		 push	 ecx
  000c2	68 53 04 00 00	 push	 1107			; 00000453H
  000c7	56		 push	 esi
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemTextA@16

; 8495 : 
; 8496 : 				byte userConfig;
; 8497 : 				try
; 8498 : 				{
; 8499 : 					BootEncObj->ReadBootSectorConfig (nullptr, 0, &userConfig);

  000ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000d4	53		 push	 ebx
  000d5	53		 push	 ebx
  000d6	8d 55 cc	 lea	 edx, DWORD PTR _userConfig$140502[ebp]
  000d9	52		 push	 edx
  000da	53		 push	 ebx
  000db	53		 push	 ebx
  000dc	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  000e3	e8 00 00 00 00	 call	 ?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z ; CipherShed::BootEncryption::ReadBootSectorConfig

; 8500 : 				}
; 8501 : 				catch (Exception &e)
; 8502 : 				{
; 8503 : 					e.Show (hwndDlg);
; 8504 : 					return 1;
; 8505 : 				}
; 8506 : 
; 8507 : 				if (IsDlgButtonChecked (hwndDlg, IDC_DISABLE_BOOT_LOADER_OUTPUT))

  000e8	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__IsDlgButtonChecked@8
  000ee	68 51 04 00 00	 push	 1105			; 00000451H
  000f3	56		 push	 esi
  000f4	ff d3		 call	 ebx
  000f6	85 c0		 test	 eax, eax
  000f8	74 06		 je	 SHORT $LN9@BootLoader

; 8508 : 					userConfig |= TC_BOOT_USER_CFG_FLAG_SILENT_MODE;

  000fa	80 4d cc 01	 or	 BYTE PTR _userConfig$140502[ebp], 1

; 8509 : 				else

  000fe	eb 04		 jmp	 SHORT $LN8@BootLoader
$LN9@BootLoader:

; 8510 : 					userConfig &= ~TC_BOOT_USER_CFG_FLAG_SILENT_MODE;

  00100	80 65 cc fe	 and	 BYTE PTR _userConfig$140502[ebp], 254 ; 000000feH
$LN8@BootLoader:

; 8511 : 
; 8512 : 				if (!IsDlgButtonChecked (hwndDlg, IDC_ALLOW_ESC_PBA_BYPASS))

  00104	68 52 04 00 00	 push	 1106			; 00000452H
  00109	56		 push	 esi
  0010a	ff d3		 call	 ebx
  0010c	85 c0		 test	 eax, eax
  0010e	75 06		 jne	 SHORT $LN7@BootLoader

; 8513 : 					userConfig |= TC_BOOT_USER_CFG_FLAG_DISABLE_ESC;

  00110	80 4d cc 02	 or	 BYTE PTR _userConfig$140502[ebp], 2

; 8514 : 				else

  00114	eb 04		 jmp	 SHORT $LN6@BootLoader
$LN7@BootLoader:

; 8515 : 					userConfig &= ~TC_BOOT_USER_CFG_FLAG_DISABLE_ESC;

  00116	80 65 cc fd	 and	 BYTE PTR _userConfig$140502[ebp], 253 ; 000000fdH
$LN6@BootLoader:

; 8516 : 
; 8517 : 				try
; 8518 : 				{
; 8519 : 					BootEncObj->WriteBootSectorUserConfig (userConfig, customUserMessage);

  0011a	8d 45 d0	 lea	 eax, DWORD PTR _customUserMessage$140501[ebp]
  0011d	50		 push	 eax
  0011e	8d 4d 9c	 lea	 ecx, DWORD PTR $T181278[ebp]
  00121	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
  00128	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0012d	8b 55 cc	 mov	 edx, DWORD PTR _userConfig$140502[ebp]
  00130	8d 4d 9c	 lea	 ecx, DWORD PTR $T181278[ebp]
  00133	51		 push	 ecx
  00134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0013a	52		 push	 edx
  0013b	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  0013f	e8 00 00 00 00	 call	 ?WriteBootSectorUserConfig@BootEncryption@CipherShed@@QAEXEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::BootEncryption::WriteBootSectorUserConfig
  00144	8d 4d 9c	 lea	 ecx, DWORD PTR $T181278[ebp]
  00147	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  0014b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 8520 : 					SetDriverConfigurationFlag (TC_DRIVER_CONFIG_CACHE_BOOT_PASSWORD, IsDlgButtonChecked (hwndDlg, IDC_BOOT_LOADER_CACHE_PASSWORD));

  00150	68 54 04 00 00	 push	 1108			; 00000454H
  00155	56		 push	 esi
  00156	ff d3		 call	 ebx
  00158	50		 push	 eax
  00159	6a 01		 push	 1
  0015b	e8 00 00 00 00	 call	 ?SetDriverConfigurationFlag@@YAXIH@Z ; SetDriverConfigurationFlag
  00160	83 c4 08	 add	 esp, 8

; 8529 : 				return 1;

  00163	e9 0c ff ff ff	 jmp	 $LN109@BootLoader
__catch$_BootLoaderPreferencesDlgProc@16$4:

; 8521 : 				}
; 8522 : 				catch (Exception &e)
; 8523 : 				{
; 8524 : 					e.Show (hwndDlg);

  00168	8b 4d b8	 mov	 ecx, DWORD PTR _e$140512[ebp]
  0016b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0016d	8b 55 c4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00170	8b 00		 mov	 eax, DWORD PTR [eax]
  00172	52		 push	 edx
  00173	ff d0		 call	 eax

; 8525 : 					return 1;

  00175	b8 00 00 00 00	 mov	 eax, $LN35@BootLoader
  0017a	c3		 ret	 0
__catch$_BootLoaderPreferencesDlgProc@16$2:
  0017b	8b 4d c0	 mov	 ecx, DWORD PTR _e$140504[ebp]
  0017e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00180	8b 45 c4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00183	8b 12		 mov	 edx, DWORD PTR [edx]
  00185	50		 push	 eax
  00186	ff d2		 call	 edx
  00188	b8 00 00 00 00	 mov	 eax, $LN35@BootLoader
  0018d	c3		 ret	 0
$LN4@BootLoader:

; 8530 : 			}
; 8531 : 
; 8532 : 		case IDC_DISABLE_BOOT_LOADER_OUTPUT:
; 8533 : 			if ((IsDlgButtonChecked (hwndDlg, IDC_DISABLE_BOOT_LOADER_OUTPUT))
; 8534 : 				&& AskWarnYesNo ("CUSTOM_BOOT_LOADER_MESSAGE_PROMPT") == IDNO)

  0018e	68 51 04 00 00	 push	 1105			; 00000451H
  00193	56		 push	 esi
  00194	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsDlgButtonChecked@8
  0019a	85 c0		 test	 eax, eax
  0019c	0f 84 7f 01 00
	00		 je	 $LN94@BootLoader
  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@JFAOPCM@CUSTOM_BOOT_LOADER_MESSAGE_PROMP@
  001a7	e8 00 00 00 00	 call	 _AskWarnYesNo
  001ac	83 c4 04	 add	 esp, 4
  001af	83 f8 07	 cmp	 eax, 7
  001b2	0f 85 69 01 00
	00		 jne	 $LN94@BootLoader

; 8535 : 			{
; 8536 : 				CheckDlgButton (hwndDlg, IDC_DISABLE_BOOT_LOADER_OUTPUT, BST_UNCHECKED);

  001b8	6a 00		 push	 0
  001ba	68 51 04 00 00	 push	 1105			; 00000451H
  001bf	56		 push	 esi
  001c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CheckDlgButton@12
  001c6	33 c0		 xor	 eax, eax
  001c8	e9 b4 fe ff ff	 jmp	 $LN23@BootLoader
$LN25@BootLoader:

; 8476 : 
; 8477 : 	case WM_COMMAND:
; 8478 : 
; 8479 : 		switch (lw)

  001cd	81 ff 54 04 00
	00		 cmp	 edi, 1108		; 00000454H
  001d3	0f 85 48 01 00
	00		 jne	 $LN94@BootLoader

; 8537 : 			}
; 8538 : 
; 8539 : 			break;
; 8540 : 
; 8541 : 		case IDC_BOOT_LOADER_CACHE_PASSWORD:
; 8542 : 			if (IsDlgButtonChecked (hwndDlg, IDC_BOOT_LOADER_CACHE_PASSWORD))

  001d9	57		 push	 edi
  001da	56		 push	 esi
  001db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsDlgButtonChecked@8
  001e1	85 c0		 test	 eax, eax
  001e3	0f 84 38 01 00
	00		 je	 $LN94@BootLoader

; 8543 : 				Warning ("BOOT_PASSWORD_CACHE_KEYBOARD_WARNING");

  001e9	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JLONOHPL@BOOT_PASSWORD_CACHE_KEYBOARD_WAR@
  001ee	e8 00 00 00 00	 call	 _Warning
  001f3	83 c4 04	 add	 esp, 4

; 8544 : 
; 8545 : 			break;
; 8546 : 		}
; 8547 : 		return 0;

  001f6	33 c0		 xor	 eax, eax
  001f8	e9 84 fe ff ff	 jmp	 $LN23@BootLoader
$LN20@BootLoader:

; 8435 : 	{
; 8436 : 	case WM_INITDIALOG:
; 8437 : 		{
; 8438 : 			if (!BootEncObj->GetStatus().DriveMounted)

  001fd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00203	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR $T181274[ebp]
  00209	50		 push	 eax
  0020a	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0020f	33 db		 xor	 ebx, ebx
  00211	39 58 06	 cmp	 DWORD PTR [eax+6], ebx
  00214	75 14		 jne	 SHORT $LN19@BootLoader

; 8439 : 			{
; 8440 : 				Warning ("SYS_DRIVE_NOT_ENCRYPTED");

  00216	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BHICMCGD@SYS_DRIVE_NOT_ENCRYPTED?$AA@
  0021b	e8 00 00 00 00	 call	 _Warning
  00220	83 c4 04	 add	 esp, 4
$LN108@BootLoader:

; 8441 : 				EndDialog (hwndDlg, IDCANCEL);

  00223	6a 02		 push	 2

; 8442 : 				return 1;

  00225	e9 4b fe ff ff	 jmp	 $LN110@BootLoader
$LN19@BootLoader:

; 8443 : 			}
; 8444 : 
; 8445 : 			try
; 8446 : 			{
; 8447 : 				LocalizeDialog (hwndDlg, "IDD_SYSENC_SETTINGS");

  0022a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@DIKHJDAL@IDD_SYSENC_SETTINGS?$AA@
  0022f	56		 push	 esi
  00230	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00233	e8 00 00 00 00	 call	 _LocalizeDialog
  00238	83 c4 08	 add	 esp, 8

; 8448 : 
; 8449 : 				uint32 driverConfig = ReadDriverConfigurationFlags();

  0023b	e8 00 00 00 00	 call	 _ReadDriverConfigurationFlags
  00240	8b f8		 mov	 edi, eax

; 8450 : 				byte userConfig;
; 8451 : 				string customUserMessage;

  00242	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR _customUserMessage$140486[ebp+24], 15 ; 0000000fH
  00249	89 5d e4	 mov	 DWORD PTR _customUserMessage$140486[ebp+20], ebx
  0024c	88 5d d4	 mov	 BYTE PTR _customUserMessage$140486[ebp+4], bl

; 8452 : 				uint16 bootLoaderVersion;
; 8453 : 
; 8454 : 				BootEncObj->ReadBootSectorConfig (nullptr, 0, &userConfig, &customUserMessage, &bootLoaderVersion);

  0024f	8d 4d cc	 lea	 ecx, DWORD PTR _bootLoaderVersion$140487[ebp]
  00252	51		 push	 ecx
  00253	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00259	8d 55 d0	 lea	 edx, DWORD PTR _customUserMessage$140486[ebp]
  0025c	52		 push	 edx
  0025d	8d 45 cb	 lea	 eax, DWORD PTR _userConfig$140485[ebp]
  00260	50		 push	 eax
  00261	53		 push	 ebx
  00262	53		 push	 ebx
  00263	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00267	e8 00 00 00 00	 call	 ?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z ; CipherShed::BootEncryption::ReadBootSectorConfig

; 8455 : 
; 8456 : 				if (bootLoaderVersion != VERSION_NUM)

  0026c	b9 41 07 00 00	 mov	 ecx, 1857		; 00000741H
  00271	66 39 4d cc	 cmp	 WORD PTR _bootLoaderVersion$140487[ebp], cx
  00275	74 0d		 je	 SHORT $LN17@BootLoader

; 8457 : 					Warning ("BOOT_LOADER_VERSION_INCORRECT_PREFERENCES");

  00277	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PODLKGNM@BOOT_LOADER_VERSION_INCORRECT_PR@
  0027c	e8 00 00 00 00	 call	 _Warning
  00281	83 c4 04	 add	 esp, 4
$LN17@BootLoader:

; 8458 : 
; 8459 : 				SendMessage (GetDlgItem (hwndDlg, IDC_CUSTOM_BOOT_LOADER_MESSAGE), EM_LIMITTEXT, TC_BOOT_SECTOR_USER_MESSAGE_MAX_LENGTH, 0);

  00284	53		 push	 ebx
  00285	6a 18		 push	 24			; 00000018H
  00287	68 c5 00 00 00	 push	 197			; 000000c5H
  0028c	68 53 04 00 00	 push	 1107			; 00000453H
  00291	56		 push	 esi
  00292	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00298	50		 push	 eax
  00299	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 8460 : 				SetDlgItemText (hwndDlg, IDC_CUSTOM_BOOT_LOADER_MESSAGE, customUserMessage.c_str());

  0029f	83 7d e8 10	 cmp	 DWORD PTR _customUserMessage$140486[ebp+24], 16 ; 00000010H
  002a3	8b 45 d4	 mov	 eax, DWORD PTR _customUserMessage$140486[ebp+4]
  002a6	73 03		 jae	 SHORT $LN77@BootLoader
  002a8	8d 45 d4	 lea	 eax, DWORD PTR _customUserMessage$140486[ebp+4]
$LN77@BootLoader:
  002ab	50		 push	 eax
  002ac	68 53 04 00 00	 push	 1107			; 00000453H
  002b1	56		 push	 esi
  002b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12

; 8461 : 
; 8462 : 				CheckDlgButton (hwndDlg, IDC_DISABLE_BOOT_LOADER_OUTPUT, (userConfig & TC_BOOT_USER_CFG_FLAG_SILENT_MODE) ? BST_CHECKED : BST_UNCHECKED);

  002b8	0f b6 55 cb	 movzx	 edx, BYTE PTR _userConfig$140485[ebp]
  002bc	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__CheckDlgButton@12
  002c2	83 e2 01	 and	 edx, 1
  002c5	52		 push	 edx
  002c6	68 51 04 00 00	 push	 1105			; 00000451H
  002cb	56		 push	 esi
  002cc	ff d3		 call	 ebx

; 8463 : 				CheckDlgButton (hwndDlg, IDC_ALLOW_ESC_PBA_BYPASS, (userConfig & TC_BOOT_USER_CFG_FLAG_DISABLE_ESC) ? BST_UNCHECKED : BST_CHECKED);

  002ce	0f b6 45 cb	 movzx	 eax, BYTE PTR _userConfig$140485[ebp]
  002d2	d1 e8		 shr	 eax, 1
  002d4	f7 d0		 not	 eax
  002d6	83 e0 01	 and	 eax, 1
  002d9	50		 push	 eax
  002da	68 52 04 00 00	 push	 1106			; 00000452H
  002df	56		 push	 esi
  002e0	ff d3		 call	 ebx

; 8464 : 				CheckDlgButton (hwndDlg, IDC_BOOT_LOADER_CACHE_PASSWORD, (driverConfig & TC_DRIVER_CONFIG_CACHE_BOOT_PASSWORD) ? BST_CHECKED : BST_UNCHECKED);

  002e2	83 e7 01	 and	 edi, 1
  002e5	57		 push	 edi
  002e6	68 54 04 00 00	 push	 1108			; 00000454H
  002eb	56		 push	 esi
  002ec	ff d3		 call	 ebx

; 8465 : 
; 8466 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_CUSTOM_BOOT_LOADER_MESSAGE_HELP), GetString("CUSTOM_BOOT_LOADER_MESSAGE_HELP"));

  002ee	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@MLEEDNMP@CUSTOM_BOOT_LOADER_MESSAGE_HELP?$AA@
  002f3	e8 00 00 00 00	 call	 _GetString
  002f8	83 c4 04	 add	 esp, 4
  002fb	50		 push	 eax
  002fc	68 57 04 00 00	 push	 1111			; 00000457H
  00301	56		 push	 esi
  00302	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00308	50		 push	 eax
  00309	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 8467 : 			}

  0030f	83 7d e8 10	 cmp	 DWORD PTR _customUserMessage$140486[ebp+24], 16 ; 00000010H
  00313	72 0c		 jb	 SHORT $LN94@BootLoader
  00315	8b 4d d4	 mov	 ecx, DWORD PTR _customUserMessage$140486[ebp+4]
  00318	51		 push	 ecx
  00319	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0031e	83 c4 04	 add	 esp, 4
$LN94@BootLoader:

; 8473 : 			}
; 8474 : 		}
; 8475 : 		return 0;

  00321	33 c0		 xor	 eax, eax
  00323	e9 59 fd ff ff	 jmp	 $LN23@BootLoader
__catch$_BootLoaderPreferencesDlgProc@16$0:

; 8468 : 			catch (Exception &e)
; 8469 : 			{
; 8470 : 				e.Show (hwndDlg);

  00328	8b 4d bc	 mov	 ecx, DWORD PTR _e$140490[ebp]
  0032b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0032d	8b 75 c4	 mov	 esi, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00330	8b 02		 mov	 eax, DWORD PTR [edx]
  00332	56		 push	 esi
  00333	ff d0		 call	 eax

; 8471 : 				EndDialog (hwndDlg, IDCANCEL);

  00335	6a 02		 push	 2
  00337	56		 push	 esi
  00338	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 8472 : 				return 1;

  0033e	b8 00 00 00 00	 mov	 eax, $LN35@BootLoader
  00343	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_BootLoaderPreferencesDlgProc@16$7:
  00000	8d 4d 9c	 lea	 ecx, DWORD PTR $T181278[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_BootLoaderPreferencesDlgProc@16$6:
  00008	8d 4d d0	 lea	 ecx, DWORD PTR _customUserMessage$140486[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$_BootLoaderPreferencesDlgProc@16:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 8a dc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-292]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_BootLoaderPreferencesDlgProc@16
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_BootLoaderPreferencesDlgProc@16 ENDP
PUBLIC	?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T181569 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 504  : 		{	// return string copy of character array

  00000	51		 push	 ecx
  00001	56		 push	 esi

; 505  : 		return (_Stringbuffer.str());

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	56		 push	 esi
  00007	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T181569[esp+12], 0
  00012	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi

; 506  : 		}

  0001a	59		 pop	 ecx
  0001b	c2 04 00	 ret	 4
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
PUBLIC	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::clear, COMDAT
; _this$ = ecx

; 43   : 		ios_base::clear((iostate)(_Mystrbuf == 0
; 44   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00000	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __State$[esp-4]
  00008	75 03		 jne	 SHORT $LN4@clear@3
  0000a	83 c8 04	 or	 eax, 4
$LN4@clear@3:
  0000d	89 44 24 04	 mov	 DWORD PTR __State$[esp-4], eax
  00011	e9 00 00 00 00	 jmp	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::clear
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

  00000	56		 push	 esi

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;
; 1104 : 		if (_Capacity == 0)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Capacity$[esp]
  00005	33 c0		 xor	 eax, eax
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  0000d	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00010	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00013	3b f0		 cmp	 esi, eax
  00015	75 07		 jne	 SHORT $LN4@Buy
  00017	5f		 pop	 edi

; 1105 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	5e		 pop	 esi

; 1115 : 		}

  0001b	c2 04 00	 ret	 4
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

  0001e	81 fe e1 e1 e1
	01		 cmp	 esi, 31580641		; 01e1e1e1H
  00024	76 05		 jbe	 SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

  00026	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
$LN2@Buy:

; 1108 : 		else
; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	50		 push	 eax
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>

; 1111 : 			_Mylast = _Myfirst;
; 1112 : 			_Myend = _Myfirst + _Capacity;

  00032	69 f6 88 00 00
	00		 imul	 esi, 136		; 00000088H
  00038	03 f0		 add	 esi, eax
  0003a	83 c4 08	 add	 esp, 8
  0003d	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00040	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00043	89 77 14	 mov	 DWORD PTR [edi+20], esi
  00046	5f		 pop	 edi

; 1113 : 			}
; 1114 : 		return (true);

  00047	b0 01		 mov	 al, 1
  00049	5e		 pop	 esi

; 1115 : 		}

  0004a	c2 04 00	 ret	 4
$LN15@Buy:
?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE_NI@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buy
; Function compile flags: /Ogtpy
;	COMDAT ?_Buy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

  00000	56		 push	 esi

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00001	33 c0		 xor	 eax, eax
  00003	57		 push	 edi

; 1104 : 		if (_Capacity == 0)

  00004	8b 7c 24 0c	 mov	 edi, DWORD PTR __Capacity$[esp+4]
  00008	8b f1		 mov	 esi, ecx
  0000a	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0000d	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00010	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00013	3b f8		 cmp	 edi, eax
  00015	75 07		 jne	 SHORT $LN4@Buy@2
  00017	5f		 pop	 edi

; 1105 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	5e		 pop	 esi

; 1115 : 		}

  0001b	c2 04 00	 ret	 4
$LN4@Buy@2:

; 1106 : 		else if (max_size() < _Capacity)

  0001e	81 ff 22 22 22
	02		 cmp	 edi, 35791394		; 02222222H
  00024	76 05		 jbe	 SHORT $LN2@Buy@2

; 1107 : 			_Xlen();	// result too long

  00026	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Xlen
$LN2@Buy@2:

; 1108 : 		else
; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	50		 push	 eax
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ??$_Allocate@UFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@IPAU12@@Z ; std::_Allocate<CipherShed::FavoriteVolume>

; 1111 : 			_Mylast = _Myfirst;
; 1112 : 			_Myend = _Myfirst + _Capacity;

  00032	8b cf		 mov	 ecx, edi
  00034	c1 e1 04	 shl	 ecx, 4
  00037	2b cf		 sub	 ecx, edi
  00039	83 c4 08	 add	 esp, 8
  0003c	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
  0003f	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00042	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00045	5f		 pop	 edi
  00046	89 56 14	 mov	 DWORD PTR [esi+20], edx

; 1113 : 			}
; 1114 : 		return (true);

  00049	b0 01		 mov	 al, 1
  0004b	5e		 pop	 esi

; 1115 : 		}

  0004c	c2 04 00	 ret	 4
$LN15@Buy@2:
?_Buy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ

; 161  : 		}

  0000c	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear, COMDAT
; _this$ = ecx

; 825  : 		{	// erase all

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 826  : 
; 827  :  #if _HAS_ITERATOR_DEBUGGING
; 828  : 		this->_Orphan_ptr(*this, 0);
; 829  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 830  : 
; 831  : 		_Nodeptr _Pnext;
; 832  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

  00004	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00007	8b 30		 mov	 esi, DWORD PTR [eax]

; 833  : 		_Nextnode(_Myhead) = _Myhead;

  00009	89 00		 mov	 DWORD PTR [eax], eax

; 834  : 		_Prevnode(_Myhead) = _Myhead;

  0000b	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000e	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 835  : 		_Mysize = 0;

  00011	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 836  : 
; 837  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

  00018	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  0001b	74 1e		 je	 SHORT $LN1@clear@4
  0001d	53		 push	 ebx
  0001e	8b ff		 npad	 2
$LL3@clear@4:

; 838  : 			{	// delete an element
; 839  : 			_Pnext = _Nextnode(_Pnode);

  00020	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 840  : 			this->_Alnod.destroy(_Pnode);

  00022	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00025	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ

; 841  : 			this->_Alnod.deallocate(_Pnode, 1);

  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
  00033	8b f3		 mov	 esi, ebx
  00035	3b 5f 14	 cmp	 ebx, DWORD PTR [edi+20]
  00038	75 e6		 jne	 SHORT $LL3@clear@4
  0003a	5b		 pop	 ebx
$LN1@clear@4:
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 842  : 			}
; 843  : 		}

  0003d	c3		 ret	 0
?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear
_TEXT	ENDS
PUBLIC	?clear@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear, COMDAT
; _this$ = ecx

; 825  : 		{	// erase all

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 826  : 
; 827  :  #if _HAS_ITERATOR_DEBUGGING
; 828  : 		this->_Orphan_ptr(*this, 0);
; 829  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 830  : 
; 831  : 		_Nodeptr _Pnext;
; 832  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

  00005	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00008	8b 30		 mov	 esi, DWORD PTR [eax]

; 833  : 		_Nextnode(_Myhead) = _Myhead;

  0000a	89 00		 mov	 DWORD PTR [eax], eax

; 834  : 		_Prevnode(_Myhead) = _Myhead;

  0000c	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 835  : 		_Mysize = 0;

  00012	33 db		 xor	 ebx, ebx
  00014	89 5f 18	 mov	 DWORD PTR [edi+24], ebx

; 836  : 
; 837  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

  00017	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  0001a	74 36		 je	 SHORT $LN1@clear@5
  0001c	55		 push	 ebp
  0001d	8d 49 00	 npad	 3
$LL3@clear@5:

; 838  : 			{	// delete an element
; 839  : 			_Pnext = _Nextnode(_Pnode);
; 840  : 			this->_Alnod.destroy(_Pnode);

  00020	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  00024	8b 2e		 mov	 ebp, DWORD PTR [esi]
  00026	72 0c		 jb	 SHORT $LN39@clear@5
  00028	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00031	83 c4 04	 add	 esp, 4
$LN39@clear@5:
  00034	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH
  0003b	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx

; 841  : 			this->_Alnod.deallocate(_Pnode, 1);

  0003e	56		 push	 esi
  0003f	88 5e 0c	 mov	 BYTE PTR [esi+12], bl
  00042	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00047	83 c4 04	 add	 esp, 4
  0004a	8b f5		 mov	 esi, ebp
  0004c	3b 6f 14	 cmp	 ebp, DWORD PTR [edi+20]
  0004f	75 cf		 jne	 SHORT $LL3@clear@5
  00051	5d		 pop	 ebp
$LN1@clear@5:
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx

; 842  : 			}
; 843  : 		}

  00055	c3		 ret	 0
?clear@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Buynode
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$0
__unwindtable$?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$2
__ehfuncinfo$?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Pnode$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Buynode, COMDAT
; _this$ = ecx

; 1190 : 		{	// allocate a node and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1191 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  0002b	6a 24		 push	 36			; 00000024H
  0002d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00032	8b f0		 mov	 esi, eax
  00034	83 c4 04	 add	 esp, 4
  00037	89 75 ec	 mov	 DWORD PTR __Pnode$[ebp], esi

; 1192 : 		int _Linkcnt = 0;
; 1193 : 
; 1194 : 		_TRY_BEGIN

  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1195 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Next);

  00041	85 f6		 test	 esi, esi
  00043	74 05		 je	 SHORT $LN27@Buynode@3
  00045	8b 45 08	 mov	 eax, DWORD PTR __Next$[ebp]
  00048	89 06		 mov	 DWORD PTR [esi], eax
$LN27@Buynode@3:

; 1196 : 		++_Linkcnt;
; 1197 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Prev);

  0004a	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0004d	85 c0		 test	 eax, eax
  0004f	74 05		 je	 SHORT $LN37@Buynode@3
  00051	8b 4d 0c	 mov	 ecx, DWORD PTR __Prev$[ebp]
  00054	89 08		 mov	 DWORD PTR [eax], ecx
$LN37@Buynode@3:

; 1198 : 		++_Linkcnt;
; 1199 : 		this->_Alval.construct(&_Myval(_Pnode), _Val);

  00056	8b 55 10	 mov	 edx, DWORD PTR __Val$[ebp]
  00059	52		 push	 edx
  0005a	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00063	83 c4 08	 add	 esp, 8

; 1207 : 		_CATCH_END
; 1208 : 		return (_Pnode);

  00066	8b c6		 mov	 eax, esi

; 1209 : 		}

  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 0c 00	 ret	 12			; 0000000cH
__catch$?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$0:

; 1200 : 		_CATCH_ALL
; 1201 : 		if (1 < _Linkcnt)
; 1202 : 			this->_Alptr.destroy(&_Prevnode(_Pnode));
; 1203 : 		if (0 < _Linkcnt)
; 1204 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1205 : 		this->_Alnod.deallocate(_Pnode, 1);

  0007c	8b 4d ec	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00085	83 c4 04	 add	 esp, 4

; 1206 : 		_RERAISE;

  00088	6a 00		 push	 0
  0008a	6a 00		 push	 0
  0008c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN53@Buynode@3:
  00091	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Buynode
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ

; 161  : 		}

  0000c	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@ABU34@@Z ; std::allocator<CipherShed::FavoriteVolume>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@ABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@ABU34@@Z PROC ; std::allocator<CipherShed::FavoriteVolume>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	e8 00 00 00 00	 call	 ??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z ; std::_Construct<CipherShed::FavoriteVolume,CipherShed::FavoriteVolume>
  0000f	83 c4 08	 add	 esp, 8

; 156  : 		}

  00012	c2 08 00	 ret	 8
?construct@?$allocator@UFavoriteVolume@CipherShed@@@std@@QAEXPAUFavoriteVolume@CipherShed@@ABU34@@Z ENDP ; std::allocator<CipherShed::FavoriteVolume>::construct
_TEXT	ENDS
PUBLIC	?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0
__ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	ENDS
;	COMDAT ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
_TEXT	SEGMENT
$T182106 = -20						; size = 4
__Lock$182130 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Byte$ = 8						; size = 1
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z PROC ; std::basic_ios<char,std::char_traits<char> >::widen, COMDAT
; _this$ = ecx

; 123  : 		{	// convert _Byte to character using imbued locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 124  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T182106[esp+36]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00030	50		 push	 eax
  00031	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  00039	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  0003e	8b 7c 24 14	 mov	 edi, DWORD PTR $T182106[esp+40]
  00042	83 c4 04	 add	 esp, 4
  00045	8b d8		 mov	 ebx, eax
  00047	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1
  0004f	85 ff		 test	 edi, edi
  00051	74 3d		 je	 SHORT $LN7@widen
  00053	6a 00		 push	 0
  00055	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$182130[esp+40]
  00059	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0005e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00061	85 c0		 test	 eax, eax
  00063	76 09		 jbe	 SHORT $LN9@widen
  00065	83 f8 ff	 cmp	 eax, -1
  00068	73 04		 jae	 SHORT $LN9@widen
  0006a	48		 dec	 eax
  0006b	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN9@widen:
  0006e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00071	f7 de		 neg	 esi
  00073	1b f6		 sbb	 esi, esi
  00075	f7 d6		 not	 esi
  00077	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$182130[esp+36]
  0007b	23 f7		 and	 esi, edi
  0007d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00082	85 f6		 test	 esi, esi
  00084	74 0a		 je	 SHORT $LN7@widen
  00086	8b 16		 mov	 edx, DWORD PTR [esi]
  00088	8b 02		 mov	 eax, DWORD PTR [edx]
  0008a	6a 01		 push	 1
  0008c	8b ce		 mov	 ecx, esi
  0008e	ff d0		 call	 eax
$LN7@widen:

; 125  : 		return (_Ctype_fac.widen(_Byte));

  00090	8b 13		 mov	 edx, DWORD PTR [ebx]
  00092	8b 44 24 28	 mov	 eax, DWORD PTR __Byte$[esp+32]
  00096	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00099	50		 push	 eax
  0009a	8b cb		 mov	 ecx, ebx
  0009c	ff d2		 call	 edx

; 126  : 		}

  0009e	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	83 c4 14	 add	 esp, 20			; 00000014H
  000b0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T182106[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::widen
PUBLIC	?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
PUBLIC	??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
;	COMDAT ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$145420 = -36					; size = 4
__Lock$182152 = -32					; size = 4
__Lock$145419 = -28					; size = 4
$T182145 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$182174 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$145419[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, 0 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$145420[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet@2
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$182152[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, 0 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet@2
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, eax ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
$LN10@use_facet@2:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$182152[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet@2:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet@2
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet@2
$LN30@use_facet@2:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet@2
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet@2
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet@2
$LN20@use_facet@2:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet@2
$LN16@use_facet@2:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet@2:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet@2
$LN31@use_facet@2:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet@2

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet@2
$LN4@use_facet@2:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$145420[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet@2

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T182145[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T182145[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet@2:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$145420[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$182174[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet@2
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet@2:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$182174[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet@2:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$145419[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$145419[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
PUBLIC	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::numpunct<char> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$146011 = -36					; size = 4
__Lock$182199 = -32					; size = 4
__Lock$146010 = -28					; size = 4
$T182192 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$182221 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::numpunct<char> >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$146010[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, 0 ; std::numpunct<char>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$146011[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet@3
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$182199[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, 0 ; std::numpunct<char>::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet@3
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, eax ; std::numpunct<char>::id
$LN10@use_facet@3:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$182199[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet@3:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet@3
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet@3
$LN30@use_facet@3:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet@3
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet@3
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet@3
$LN20@use_facet@3:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet@3
$LN16@use_facet@3:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet@3:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet@3
$LN31@use_facet@3:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet@3

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet@3
$LN4@use_facet@3:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$146011[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet@3

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T182192[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T182192[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet@3:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$146011[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$182221[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::numpunct<char> >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet@3
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet@3:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$182221[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet@3:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$146010[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$146010[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<char> >
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@stdext@@YAPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@0PAU1@AAV?$allocator@UHostDevice@@@3@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@stdext@@YAPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@0PAU1@AAV?$allocator@UHostDevice@@@3@@Z
_TEXT	SEGMENT
$T182239 = -4						; size = 1
__First$ = 8						; size = 8
__Cat$182243 = 16					; size = 1
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@stdext@@YAPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@0PAU1@AAV?$allocator@UHostDevice@@@3@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$182243[esp]
  00005	8b 54 24 1c	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T182239[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T182239[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 1c	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001a	52		 push	 edx
  0001b	8b 54 24 18	 mov	 edx, DWORD PTR __First$[esp+16]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >

; 823  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@stdext@@YAPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@0PAU1@AAV?$allocator@UHostDevice@@@3@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

  00003	8b 74 24 10	 mov	 esi, DWORD PTR __First$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR __Last$[esp+12]
  0000c	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Dest$[esp+12]
  00010	8b cf		 mov	 ecx, edi
  00012	2b ce		 sub	 ecx, esi
  00014	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00019	f7 e9		 imul	 ecx
  0001b	03 d1		 add	 edx, ecx
  0001d	c1 fa 06	 sar	 edx, 6
  00020	8b c2		 mov	 eax, edx
  00022	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00025	03 c2		 add	 eax, edx
  00027	8b c8		 mov	 ecx, eax
  00029	c1 e1 04	 shl	 ecx, 4
  0002c	2b c8		 sub	 ecx, eax
  0002e	8d 2c cb	 lea	 ebp, DWORD PTR [ebx+ecx*8]

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

  00031	3b f7		 cmp	 esi, edi
  00033	74 12		 je	 SHORT $LN14@Copy_opt@3
  00035	2b de		 sub	 ebx, esi
$LL9@Copy_opt@3:
  00037	56		 push	 esi
  00038	8d 0c 33	 lea	 ecx, DWORD PTR [ebx+esi]
  0003b	e8 00 00 00 00	 call	 ??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z
  00040	83 c6 78	 add	 esi, 120		; 00000078H
  00043	3b f7		 cmp	 esi, edi
  00045	75 f0		 jne	 SHORT $LL9@Copy_opt@3
$LN14@Copy_opt@3:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 2486 : 	return _Result;

  00049	8b c5		 mov	 eax, ebp
  0004b	5d		 pop	 ebp
  0004c	5b		 pop	 ebx

; 2487 : 	}

  0004d	c3		 ret	 0
??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<HostDevice> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

  00000	56		 push	 esi

; 233  : 	for (; _First != _Last; ++_First)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 13		 je	 SHORT $LN1@Destroy_ra
  0000e	8b ff		 npad	 2
$LL3@Destroy_ra:

; 234  : 		_Al.destroy(_First);

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00017	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0001d	3b f7		 cmp	 esi, edi
  0001f	75 ef		 jne	 SHORT $LL3@Destroy_ra
$LN1@Destroy_ra:
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 235  : 	}

  00023	c3		 ret	 0
??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@0AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy_range@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@0AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@0AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<CipherShed::FavoriteVolume> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

  00000	56		 push	 esi

; 233  : 	for (; _First != _Last; ++_First)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 10		 je	 SHORT $LN1@Destroy_ra@2
  0000e	8b ff		 npad	 2
$LL3@Destroy_ra@2:

; 234  : 		_Al.destroy(_First);

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00017	83 c6 78	 add	 esi, 120		; 00000078H
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL3@Destroy_ra@2
$LN1@Destroy_ra@2:
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 235  : 	}

  00020	c3		 ret	 0
??$_Destroy_range@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@0AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CipherShed::FavoriteVolume *,unsigned int,CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T182378 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Vptr$182384 = 12					; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<CipherShed::FavoriteVolume *,unsigned int,CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

  0002b	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]

; 401  : 
; 402  : 	_TRY_BEGIN

  0002e	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_fil:

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

  00040	3b fb		 cmp	 edi, ebx
  00042	76 46		 jbe	 SHORT $LN4@Uninit_fil

; 404  : 		_Al.construct(_First, _Val);

  00044	89 75 0c	 mov	 DWORD PTR __Vptr$182384[ebp], esi
  00047	89 75 e8	 mov	 DWORD PTR $T182378[ebp], esi
  0004a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004e	3b f3		 cmp	 esi, ebx
  00050	74 0b		 je	 SHORT $LN18@Uninit_fil
  00052	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00055	50		 push	 eax
  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
$LN18@Uninit_fil:
  0005d	4f		 dec	 edi
  0005e	83 c6 78	 add	 esi, 120		; 00000078H
  00061	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00064	89 75 08	 mov	 DWORD PTR __First$[ebp], esi
  00067	eb d7		 jmp	 SHORT $LL6@Uninit_fil
__catch$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

  00069	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  0006c	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0006f	3b f7		 cmp	 esi, edi
  00071	74 0e		 je	 SHORT $LN1@Uninit_fil
$LL3@Uninit_fil:

; 407  : 		_Al.destroy(_Next);

  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  0007a	83 c6 78	 add	 esi, 120		; 00000078H
  0007d	3b f7		 cmp	 esi, edi
  0007f	75 f2		 jne	 SHORT $LL3@Uninit_fil
$LN1@Uninit_fil:

; 408  : 	_RERAISE;

  00081	33 db		 xor	 ebx, ebx
  00083	53		 push	 ebx
  00084	53		 push	 ebx
  00085	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_fil:

; 409  : 	_CATCH_END
; 410  : 	}

  0008a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
$LN35@Uninit_fil:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 0c	 mov	 eax, DWORD PTR __Vptr$182384[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T182378[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<CipherShed::FavoriteVolume *,unsigned int,CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
PUBLIC	??$_Fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z ; std::_Fill<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z PROC ; std::_Fill<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

  00000	56		 push	 esi

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 15		 je	 SHORT $LN1@Fill
  0000e	53		 push	 ebx
  0000f	8b 5c 24 18	 mov	 ebx, DWORD PTR __Val$[esp+8]
$LL3@Fill:

; 3159 : 		*_First = _Val;

  00013	53		 push	 ebx
  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z
  0001b	83 c6 78	 add	 esi, 120		; 00000078H
  0001e	3b f7		 cmp	 esi, edi
  00020	75 f1		 jne	 SHORT $LL3@Fill
  00022	5b		 pop	 ebx
$LN1@Fill:
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi

; 3160 : 	}

  00025	c3		 ret	 0
??$_Fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z ENDP ; std::_Fill<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T182448 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Vptr$182454 = 8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

  0002b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 128  : 
; 129  : 	_TRY_BEGIN

  0002e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_cop@2:

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

  00040	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00043	74 45		 je	 SHORT $LN4@Uninit_cop@2

; 131  : 		_Al.construct(_Dest, *_First);

  00045	89 75 08	 mov	 DWORD PTR __Vptr$182454[ebp], esi
  00048	89 75 e8	 mov	 DWORD PTR $T182448[ebp], esi
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004f	3b f3		 cmp	 esi, ebx
  00051	74 08		 je	 SHORT $LN18@Uninit_cop@2
  00053	57		 push	 edi
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
$LN18@Uninit_cop@2:
  0005b	83 c6 78	 add	 esi, 120		; 00000078H
  0005e	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00061	89 75 10	 mov	 DWORD PTR __Dest$[ebp], esi
  00064	83 c7 78	 add	 edi, 120		; 00000078H
  00067	eb d7		 jmp	 SHORT $LL6@Uninit_cop@2
__catch$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

  00069	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  0006c	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0006f	3b f7		 cmp	 esi, edi
  00071	74 0e		 je	 SHORT $LN1@Uninit_cop@2
$LL3@Uninit_cop@2:

; 134  : 		_Al.destroy(_Next);

  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  0007a	83 c6 78	 add	 esi, 120		; 00000078H
  0007d	3b f7		 cmp	 esi, edi
  0007f	75 f2		 jne	 SHORT $LL3@Uninit_cop@2
$LN1@Uninit_cop@2:

; 135  : 	_RERAISE;

  00081	33 db		 xor	 ebx, ebx
  00083	53		 push	 ebx
  00084	53		 push	 ebx
  00085	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_cop@2:

; 136  : 	_CATCH_END
; 137  : 	return (_Dest);

  0008a	8b c6		 mov	 eax, esi

; 138  : 	}

  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
$LN35@Uninit_cop@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Vptr$182454[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T182448[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
PUBLIC	??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);

  00003	8b 74 24 14	 mov	 esi, DWORD PTR __Last$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 14	 mov	 edi, DWORD PTR __First$[esp+12]
  0000c	8b ce		 mov	 ecx, esi
  0000e	2b cf		 sub	 ecx, edi
  00010	8b 6c 24 1c	 mov	 ebp, DWORD PTR __Dest$[esp+12]
  00014	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00019	f7 e9		 imul	 ecx
  0001b	03 d1		 add	 edx, ecx
  0001d	c1 fa 06	 sar	 edx, 6
  00020	8b c2		 mov	 eax, edx
  00022	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00025	03 c2		 add	 eax, edx
  00027	8b c8		 mov	 ecx, eax
  00029	c1 e1 04	 shl	 ecx, 4
  0002c	2b c8		 sub	 ecx, eax
  0002e	03 c9		 add	 ecx, ecx
  00030	03 c9		 add	 ecx, ecx
  00032	03 c9		 add	 ecx, ecx
  00034	8b dd		 mov	 ebx, ebp
  00036	2b d9		 sub	 ebx, ecx

; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

  00038	3b fe		 cmp	 edi, esi
  0003a	74 14		 je	 SHORT $LN13@Copy_backw@2
  0003c	2b ee		 sub	 ebp, esi
  0003e	8b ff		 npad	 2
$LL8@Copy_backw@2:
  00040	83 ee 78	 sub	 esi, 120		; 00000078H
  00043	56		 push	 esi
  00044	8d 0c 2e	 lea	 ecx, DWORD PTR [esi+ebp]
  00047	e8 00 00 00 00	 call	 ??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z
  0004c	3b f7		 cmp	 esi, edi
  0004e	75 f0		 jne	 SHORT $LL8@Copy_backw@2
$LN13@Copy_backw@2:
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5d		 pop	 ebp

; 2690 : 	return _Result;

  00053	8b c3		 mov	 eax, ebx
  00055	5b		 pop	 ebx

; 2691 : 	}

  00056	c3		 ret	 0
??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T182540 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Vptr$182546 = 8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

  0002b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 128  : 
; 129  : 	_TRY_BEGIN

  0002e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_cop@3:

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

  00040	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00043	74 45		 je	 SHORT $LN4@Uninit_cop@3

; 131  : 		_Al.construct(_Dest, *_First);

  00045	89 75 08	 mov	 DWORD PTR __Vptr$182546[ebp], esi
  00048	89 75 e8	 mov	 DWORD PTR $T182540[ebp], esi
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004f	3b f3		 cmp	 esi, ebx
  00051	74 08		 je	 SHORT $LN18@Uninit_cop@3
  00053	57		 push	 edi
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
$LN18@Uninit_cop@3:
  0005b	83 c6 78	 add	 esi, 120		; 00000078H
  0005e	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00061	89 75 10	 mov	 DWORD PTR __Dest$[ebp], esi
  00064	83 c7 78	 add	 edi, 120		; 00000078H
  00067	eb d7		 jmp	 SHORT $LL6@Uninit_cop@3
__catch$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

  00069	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  0006c	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0006f	3b f7		 cmp	 esi, edi
  00071	74 0e		 je	 SHORT $LN1@Uninit_cop@3
$LL3@Uninit_cop@3:

; 134  : 		_Al.destroy(_Next);

  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  0007a	83 c6 78	 add	 esi, 120		; 00000078H
  0007d	3b f7		 cmp	 esi, edi
  0007f	75 f2		 jne	 SHORT $LL3@Uninit_cop@3
$LN1@Uninit_cop@3:

; 135  : 	_RERAISE;

  00081	33 db		 xor	 ebx, ebx
  00083	53		 push	 ebx
  00084	53		 push	 ebx
  00085	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_cop@3:

; 136  : 	_CATCH_END
; 137  : 	return (_Dest);

  0008a	8b c6		 mov	 eax, esi

; 138  : 	}

  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
$LN35@Uninit_cop@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Vptr$182546[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T182540[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
PUBLIC	?RefreshMainDlg@@YAXPAUHWND__@@@Z		; RefreshMainDlg
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
;	COMDAT ?RefreshMainDlg@@YAXPAUHWND__@@@Z
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
?RefreshMainDlg@@YAXPAUHWND__@@@Z PROC			; RefreshMainDlg, COMDAT

; 183  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 184  : 	int drive = (char) (HIWORD (GetSelectedLong (GetDlgItem (hwndDlg, IDC_DRIVELIST))));

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR _hwndDlg$[esp+4]
  00006	57		 push	 edi
  00007	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  0000d	68 ef 03 00 00	 push	 1007			; 000003efH
  00012	56		 push	 esi
  00013	ff d7		 call	 edi
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 _GetSelectedLong
  0001b	c1 e8 10	 shr	 eax, 16			; 00000010H
  0001e	83 c4 04	 add	 esp, 4
  00021	0f be d8	 movsx	 ebx, al

; 185  : 
; 186  : 	MoveEditToCombo (GetDlgItem (hwndDlg, IDC_VOLUME), bHistory);

  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHistory
  00029	50		 push	 eax
  0002a	68 0a 04 00 00	 push	 1034			; 0000040aH
  0002f	56		 push	 esi
  00030	ff d7		 call	 edi
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 _MoveEditToCombo
  00038	83 c4 08	 add	 esp, 8

; 187  : 	LoadDriveLetters (GetDlgItem (hwndDlg, IDC_DRIVELIST), drive);

  0003b	53		 push	 ebx
  0003c	68 ef 03 00 00	 push	 1007			; 000003efH
  00041	56		 push	 esi
  00042	ff d7		 call	 edi
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _LoadDriveLetters

; 188  : 	EnableDisableButtons (hwndDlg);

  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 _EnableDisableButtons
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx

; 189  : }

  00056	c3		 ret	 0
?RefreshMainDlg@@YAXPAUHWND__@@@Z ENDP			; RefreshMainDlg
_TEXT	ENDS
PUBLIC	??_C@_13OHNMPHJM@?$AA?$FN?$AA?$AA@		; `string'
PUBLIC	??_C@_0O@OBIPPEOD@ADMINISTRATOR?$AA@		; `string'
PUBLIC	??_C@_15FFJNNDMJ@?$AA?5?$AA?$FL?$AA?$AA@	; `string'
PUBLIC	??_C@_0N@KAFGONOM@MENU_WEBSITE?$AA@		; `string'
PUBLIC	??_C@_09FEGEGDEL@MENU_HELP?$AA@			; `string'
PUBLIC	??_C@_0O@EAENFNPM@MENU_SETTINGS?$AA@		; `string'
PUBLIC	??_C@_0L@EJOBNNFH@MENU_TOOLS?$AA@		; `string'
PUBLIC	??_C@_0P@BPHMCAOP@MENU_FAVORITES?$AA@		; `string'
PUBLIC	??_C@_0BH@MEKCCHEP@MENU_SYSTEM_ENCRYPTION?$AA@	; `string'
PUBLIC	??_C@_0N@PDNIMNCL@MENU_VOLUMES?$AA@		; `string'
EXTRN	_RenderBitmap:PROC
EXTRN	?LoadFavoriteVolumes@CipherShed@@YAXXZ:PROC	; CipherShed::LoadFavoriteVolumes
EXTRN	?FavoriteVolumesMenu@CipherShed@@3PAUHMENU__@@A:DWORD ; CipherShed::FavoriteVolumesMenu
EXTRN	__imp__GetSubMenu@8:PROC
EXTRN	__imp__SetMenuItemInfoW@16:PROC
EXTRN	_GetDictionaryValueByInt:PROC
EXTRN	_InitHelpFileName:PROC
EXTRN	_IsBuiltInAdmin:PROC
EXTRN	_InitDialog:PROC
;	COMDAT ??_C@_13OHNMPHJM@?$AA?$FN?$AA?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_13OHNMPHJM@?$AA?$FN?$AA?$AA@ DB ']', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OBIPPEOD@ADMINISTRATOR?$AA@
CONST	SEGMENT
??_C@_0O@OBIPPEOD@ADMINISTRATOR?$AA@ DB 'ADMINISTRATOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15FFJNNDMJ@?$AA?5?$AA?$FL?$AA?$AA@
CONST	SEGMENT
??_C@_15FFJNNDMJ@?$AA?5?$AA?$FL?$AA?$AA@ DB ' ', 00H, '[', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KAFGONOM@MENU_WEBSITE?$AA@
CONST	SEGMENT
??_C@_0N@KAFGONOM@MENU_WEBSITE?$AA@ DB 'MENU_WEBSITE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FEGEGDEL@MENU_HELP?$AA@
CONST	SEGMENT
??_C@_09FEGEGDEL@MENU_HELP?$AA@ DB 'MENU_HELP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EAENFNPM@MENU_SETTINGS?$AA@
CONST	SEGMENT
??_C@_0O@EAENFNPM@MENU_SETTINGS?$AA@ DB 'MENU_SETTINGS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EJOBNNFH@MENU_TOOLS?$AA@
CONST	SEGMENT
??_C@_0L@EJOBNNFH@MENU_TOOLS?$AA@ DB 'MENU_TOOLS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BPHMCAOP@MENU_FAVORITES?$AA@
CONST	SEGMENT
??_C@_0P@BPHMCAOP@MENU_FAVORITES?$AA@ DB 'MENU_FAVORITES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MEKCCHEP@MENU_SYSTEM_ENCRYPTION?$AA@
CONST	SEGMENT
??_C@_0BH@MEKCCHEP@MENU_SYSTEM_ENCRYPTION?$AA@ DB 'MENU_SYSTEM_ENCRYPTION'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PDNIMNCL@MENU_VOLUMES?$AA@
CONST	SEGMENT
??_C@_0N@PDNIMNCL@MENU_VOLUMES?$AA@ DB 'MENU_VOLUMES', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?InitMainDialog@@YAXPAUHWND__@@@Z$6 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	04cH
	DD	FLAT:__catch$?InitMainDialog@@YAXPAUHWND__@@@Z$0
__tryblocktable$?InitMainDialog@@YAXPAUHWND__@@@Z DD 03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?InitMainDialog@@YAXPAUHWND__@@@Z$6
__ehfuncinfo$?InitMainDialog@@YAXPAUHWND__@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?InitMainDialog@@YAXPAUHWND__@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?InitMainDialog@@YAXPAUHWND__@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?InitMainDialog@@YAXPAUHWND__@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitMainDialog@@YAXPAUHWND__@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?InitMainDialog@@YAXPAUHWND__@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?InitMainDialog@@YAXPAUHWND__@@@Z$4
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
xdata$x	ENDS
;	COMDAT ?InitMainDialog@@YAXPAUHWND__@@@Z
_TEXT	SEGMENT
$T182583 = -100						; size = 28
$T182584 = -72						; size = 28
$T182586 = -44						; size = 28
__$EHRec$ = -16						; size = 16
$T182585 = 0						; size = 28
_info$ = 28						; size = 48
_e$135767 = 76						; size = 4
_popupTexts$ = 80					; size = 32
$T182590 = 112						; size = 4
_str$ = 112						; size = 4
_hwndDlg$ = 124						; size = 4
?InitMainDialog@@YAXPAUHWND__@@@Z PROC			; InitMainDialog, COMDAT

; 224  : {

  00000	55		 push	 ebp
  00001	8d 6c 24 8c	 lea	 ebp, DWORD PTR [esp-116]
  00005	83 ec 74	 sub	 esp, 116		; 00000074H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$?InitMainDialog@@YAXPAUHWND__@@@Z
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 58	 sub	 esp, 88			; 00000058H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00030	8b 7d 7c	 mov	 edi, DWORD PTR _hwndDlg$[ebp]
  00033	33 db		 xor	 ebx, ebx

; 225  : 	MENUITEMINFOW info;
; 226  : 	char *popupTexts[] = {"MENU_VOLUMES", "MENU_SYSTEM_ENCRYPTION", "MENU_FAVORITES", "MENU_TOOLS", "MENU_SETTINGS", "MENU_HELP", "MENU_WEBSITE", 0};

  00035	89 5d 70	 mov	 DWORD PTR $T182590[ebp], ebx

; 303  : 	}
; 304  : 
; 305  : 	SendMessage (GetDlgItem (hwndDlg, IDC_NO_HISTORY), BM_SETCHECK, bHistory ? BST_UNCHECKED : BST_CHECKED, 0);

  00038	33 f6		 xor	 esi, esi
  0003a	57		 push	 edi
  0003b	c7 45 50 00 00
	00 00		 mov	 DWORD PTR _popupTexts$[ebp], OFFSET ??_C@_0N@PDNIMNCL@MENU_VOLUMES?$AA@
  00042	c7 45 54 00 00
	00 00		 mov	 DWORD PTR _popupTexts$[ebp+4], OFFSET ??_C@_0BH@MEKCCHEP@MENU_SYSTEM_ENCRYPTION?$AA@
  00049	c7 45 58 00 00
	00 00		 mov	 DWORD PTR _popupTexts$[ebp+8], OFFSET ??_C@_0P@BPHMCAOP@MENU_FAVORITES?$AA@
  00050	c7 45 5c 00 00
	00 00		 mov	 DWORD PTR _popupTexts$[ebp+12], OFFSET ??_C@_0L@EJOBNNFH@MENU_TOOLS?$AA@
  00057	c7 45 60 00 00
	00 00		 mov	 DWORD PTR _popupTexts$[ebp+16], OFFSET ??_C@_0O@EAENFNPM@MENU_SETTINGS?$AA@
  0005e	c7 45 64 00 00
	00 00		 mov	 DWORD PTR _popupTexts$[ebp+20], OFFSET ??_C@_09FEGEGDEL@MENU_HELP?$AA@
  00065	c7 45 68 00 00
	00 00		 mov	 DWORD PTR _popupTexts$[ebp+24], OFFSET ??_C@_0N@KAFGONOM@MENU_WEBSITE?$AA@
  0006c	89 75 6c	 mov	 DWORD PTR _popupTexts$[ebp+28], esi
  0006f	e8 00 00 00 00	 call	 _InitDialog
  00074	56		 push	 esi
  00075	57		 push	 edi
  00076	e8 00 00 00 00	 call	 _LocalizeDialog
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007e	e8 00 00 00 00	 call	 _IsAdmin
  00083	f7 d8		 neg	 eax
  00085	1b c0		 sbb	 eax, eax
  00087	f7 d8		 neg	 eax
  00089	50		 push	 eax
  0008a	6a 08		 push	 8
  0008c	57		 push	 edi
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  00093	6a 01		 push	 1
  00095	57		 push	 edi
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragAcceptFiles@8
  0009c	56		 push	 esi
  0009d	68 04 01 00 00	 push	 260			; 00000104H
  000a2	68 41 01 00 00	 push	 321			; 00000141H
  000a7	68 0a 04 00 00	 push	 1034			; 0000040aH
  000ac	57		 push	 edi
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  000b3	50		 push	 eax
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  000ba	e8 00 00 00 00	 call	 _IsAdmin
  000bf	85 c0		 test	 eax, eax
  000c1	0f 84 ac 00 00
	00		 je	 $LN16@InitMainDi
  000c7	e8 00 00 00 00	 call	 _IsBuiltInAdmin
  000cc	85 c0		 test	 eax, eax
  000ce	0f 85 9f 00 00
	00		 jne	 $LN16@InitMainDi
  000d4	e8 00 00 00 00	 call	 _IsUacSupported
  000d9	85 c0		 test	 eax, eax
  000db	0f 84 92 00 00
	00		 je	 $LN16@InitMainDi
  000e1	e8 00 00 00 00	 call	 _IsNonInstallMode
  000e6	85 c0		 test	 eax, eax
  000e8	0f 85 85 00 00
	00		 jne	 $LN16@InitMainDi
  000ee	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  000f3	50		 push	 eax
  000f4	8d 4d 9c	 lea	 ecx, DWORD PTR $T182583[ebp]
  000f7	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000fc	68 00 00 00 00	 push	 OFFSET ??_C@_15FFJNNDMJ@?$AA?5?$AA?$FL?$AA?$AA@
  00101	50		 push	 eax
  00102	8d 4d b8	 lea	 ecx, DWORD PTR $T182584[ebp]
  00105	51		 push	 ecx
  00106	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  00109	c7 45 70 01 00
	00 00		 mov	 DWORD PTR $T182590[ebp], 1
  00110	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00115	8b f0		 mov	 esi, eax
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OBIPPEOD@ADMINISTRATOR?$AA@
  0011c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  00123	c7 45 70 03 00
	00 00		 mov	 DWORD PTR $T182590[ebp], 3
  0012a	e8 00 00 00 00	 call	 _GetString
  0012f	50		 push	 eax
  00130	8d 55 00	 lea	 edx, DWORD PTR $T182585[ebp]
  00133	56		 push	 esi
  00134	52		 push	 edx
  00135	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0013a	68 00 00 00 00	 push	 OFFSET ??_C@_13OHNMPHJM@?$AA?$FN?$AA?$AA@
  0013f	50		 push	 eax
  00140	8d 45 d4	 lea	 eax, DWORD PTR $T182586[ebp]
  00143	50		 push	 eax
  00144	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  0014b	c7 45 70 07 00
	00 00		 mov	 DWORD PTR $T182590[ebp], 7
  00152	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00157	83 c4 28	 add	 esp, 40			; 00000028H
  0015a	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  0015e	bb 0f 00 00 00	 mov	 ebx, 15			; 0000000fH
  00163	72 07		 jb	 SHORT $LN38@InitMainDi
  00165	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00168	33 f6		 xor	 esi, esi
  0016a	eb 0c		 jmp	 SHORT $LN17@InitMainDi

; 227  : 	wchar_t *str;
; 228  : 	int i;
; 229  : 
; 230  : 	/* Call the common dialog init code */
; 231  : 	InitDialog (hwndDlg);
; 232  : 	LocalizeDialog (hwndDlg, NULL);
; 233  : 
; 234  : 	SetWindowLongPtr (hwndDlg, DWLP_USER, (LONG_PTR) (IsAdmin() ? TC_MAIN_WINDOW_FLAG_ADMIN_PRIVILEGES : 0));
; 235  : 
; 236  : 	DragAcceptFiles (hwndDlg, TRUE);
; 237  : 
; 238  : 	SendMessage (GetDlgItem (hwndDlg, IDC_VOLUME), CB_LIMITTEXT, TC_MAX_PATH, 0);
; 239  : 	SetWindowTextW (hwndDlg, (IsAdmin() && !IsBuiltInAdmin() && IsUacSupported() && !IsNonInstallMode()) ? (wstring (lpszTitle) + L" [" + GetString ("ADMINISTRATOR") + L"]").c_str() : lpszTitle);

$LN38@InitMainDi:
  0016c	83 c0 04	 add	 eax, 4
  0016f	33 f6		 xor	 esi, esi
  00171	eb 05		 jmp	 SHORT $LN17@InitMainDi
$LN16@InitMainDi:
  00173	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
$LN17@InitMainDi:
  00178	50		 push	 eax
  00179	57		 push	 edi
  0017a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  00180	f6 c3 08	 test	 bl, 8
  00183	74 25		 je	 SHORT $LN66@InitMainDi
  00185	83 e3 f7	 and	 ebx, -9			; fffffff7H
  00188	83 7d ec 08	 cmp	 DWORD PTR $T182586[ebp+24], 8
  0018c	72 0c		 jb	 SHORT $LN58@InitMainDi
  0018e	8b 4d d8	 mov	 ecx, DWORD PTR $T182586[ebp+4]
  00191	51		 push	 ecx
  00192	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00197	83 c4 04	 add	 esp, 4
$LN58@InitMainDi:
  0019a	33 d2		 xor	 edx, edx
  0019c	c7 45 ec 07 00
	00 00		 mov	 DWORD PTR $T182586[ebp+24], 7
  001a3	89 75 e8	 mov	 DWORD PTR $T182586[ebp+20], esi
  001a6	66 89 55 d8	 mov	 WORD PTR $T182586[ebp+4], dx
$LN66@InitMainDi:
  001aa	f6 c3 04	 test	 bl, 4
  001ad	74 25		 je	 SHORT $LN94@InitMainDi
  001af	83 e3 fb	 and	 ebx, -5			; fffffffbH
  001b2	83 7d 18 08	 cmp	 DWORD PTR $T182585[ebp+24], 8
  001b6	72 0c		 jb	 SHORT $LN86@InitMainDi
  001b8	8b 45 04	 mov	 eax, DWORD PTR $T182585[ebp+4]
  001bb	50		 push	 eax
  001bc	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001c1	83 c4 04	 add	 esp, 4
$LN86@InitMainDi:
  001c4	33 c9		 xor	 ecx, ecx
  001c6	c7 45 18 07 00
	00 00		 mov	 DWORD PTR $T182585[ebp+24], 7
  001cd	89 75 14	 mov	 DWORD PTR $T182585[ebp+20], esi
  001d0	66 89 4d 04	 mov	 WORD PTR $T182585[ebp+4], cx
$LN94@InitMainDi:
  001d4	f6 c3 02	 test	 bl, 2
  001d7	74 25		 je	 SHORT $LN122@InitMainDi
  001d9	83 e3 fd	 and	 ebx, -3			; fffffffdH
  001dc	83 7d d0 08	 cmp	 DWORD PTR $T182584[ebp+24], 8
  001e0	72 0c		 jb	 SHORT $LN114@InitMainDi
  001e2	8b 55 bc	 mov	 edx, DWORD PTR $T182584[ebp+4]
  001e5	52		 push	 edx
  001e6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001eb	83 c4 04	 add	 esp, 4
$LN114@InitMainDi:
  001ee	33 c0		 xor	 eax, eax
  001f0	c7 45 d0 07 00
	00 00		 mov	 DWORD PTR $T182584[ebp+24], 7
  001f7	89 75 cc	 mov	 DWORD PTR $T182584[ebp+20], esi
  001fa	66 89 45 bc	 mov	 WORD PTR $T182584[ebp+4], ax
$LN122@InitMainDi:
  001fe	f6 c3 01	 test	 bl, 1
  00201	74 12		 je	 SHORT $LN142@InitMainDi
  00203	83 7d b4 08	 cmp	 DWORD PTR $T182583[ebp+24], 8
  00207	72 0c		 jb	 SHORT $LN142@InitMainDi
  00209	8b 4d a0	 mov	 ecx, DWORD PTR $T182583[ebp+4]
  0020c	51		 push	 ecx
  0020d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00212	83 c4 04	 add	 esp, 4
$LN142@InitMainDi:

; 240  : 
; 241  : 	// Help file name
; 242  : 	InitHelpFileName();

  00215	e8 00 00 00 00	 call	 _InitHelpFileName

; 243  : 
; 244  : 	// Localize menu strings
; 245  : 	for (i = 40001; str = (wchar_t *)GetDictionaryValueByInt (i); i++)

  0021a	be 41 9c 00 00	 mov	 esi, 40001		; 00009c41H
  0021f	56		 push	 esi
  00220	e8 00 00 00 00	 call	 _GetDictionaryValueByInt
  00225	83 c4 04	 add	 esp, 4
  00228	85 c0		 test	 eax, eax
  0022a	74 50		 je	 SHORT $LN11@InitMainDi
$LN13@InitMainDi:

; 246  : 	{
; 247  : 		info.cbSize = sizeof (info);

  0022c	c7 45 1c 30 00
	00 00		 mov	 DWORD PTR _info$[ebp], 48 ; 00000030H

; 248  : 		info.fMask = MIIM_TYPE;

  00233	c7 45 20 10 00
	00 00		 mov	 DWORD PTR _info$[ebp+4], 16 ; 00000010H

; 249  : 		info.fType = MFT_STRING;

  0023a	c7 45 24 00 00
	00 00		 mov	 DWORD PTR _info$[ebp+8], 0

; 250  : 		info.dwTypeData = str;

  00241	89 45 40	 mov	 DWORD PTR _info$[ebp+36], eax

; 251  : 		info.cch = wcslen (str);

  00244	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL157@InitMainDi:
  00247	66 8b 08	 mov	 cx, WORD PTR [eax]
  0024a	83 c0 02	 add	 eax, 2
  0024d	66 85 c9	 test	 cx, cx
  00250	75 f5		 jne	 SHORT $LL157@InitMainDi
  00252	2b c2		 sub	 eax, edx

; 252  : 
; 253  : 		SetMenuItemInfoW (GetMenu (hwndDlg), i, FALSE,  &info); 

  00254	8d 55 1c	 lea	 edx, DWORD PTR _info$[ebp]
  00257	52		 push	 edx
  00258	6a 00		 push	 0
  0025a	56		 push	 esi
  0025b	d1 f8		 sar	 eax, 1
  0025d	57		 push	 edi
  0025e	89 45 44	 mov	 DWORD PTR _info$[ebp+40], eax
  00261	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMenu@4
  00267	50		 push	 eax
  00268	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemInfoW@16
  0026e	46		 inc	 esi
  0026f	56		 push	 esi
  00270	e8 00 00 00 00	 call	 _GetDictionaryValueByInt
  00275	83 c4 04	 add	 esp, 4
  00278	85 c0		 test	 eax, eax
  0027a	75 b0		 jne	 SHORT $LN13@InitMainDi
$LN11@InitMainDi:

; 254  : 	}
; 255  : 
; 256  : 	for (i = 0; popupTexts[i] != 0; i++)

  0027c	33 db		 xor	 ebx, ebx
  0027e	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0N@PDNIMNCL@MENU_VOLUMES?$AA@
$LL10@InitMainDi:

; 257  : 	{
; 258  : 		str = GetString (popupTexts[i]);

  00283	56		 push	 esi
  00284	e8 00 00 00 00	 call	 _GetString
  00289	89 45 70	 mov	 DWORD PTR _str$[ebp], eax
  0028c	83 c4 04	 add	 esp, 4

; 259  : 
; 260  : 		info.cbSize = sizeof (info);

  0028f	c7 45 1c 30 00
	00 00		 mov	 DWORD PTR _info$[ebp], 48 ; 00000030H

; 261  : 		info.fMask = MIIM_TYPE;

  00296	c7 45 20 10 00
	00 00		 mov	 DWORD PTR _info$[ebp+4], 16 ; 00000010H

; 262  : 
; 263  : 		if (strcmp (popupTexts[i], "MENU_WEBSITE") == 0)

  0029d	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0N@KAFGONOM@MENU_WEBSITE?$AA@
  002a2	8b c6		 mov	 eax, esi
$LL158@InitMainDi:
  002a4	8a 10		 mov	 dl, BYTE PTR [eax]
  002a6	3a 11		 cmp	 dl, BYTE PTR [ecx]
  002a8	75 1a		 jne	 SHORT $LN159@InitMainDi
  002aa	84 d2		 test	 dl, dl
  002ac	74 12		 je	 SHORT $LN160@InitMainDi
  002ae	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  002b1	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  002b4	75 0e		 jne	 SHORT $LN159@InitMainDi
  002b6	83 c0 02	 add	 eax, 2
  002b9	83 c1 02	 add	 ecx, 2
  002bc	84 d2		 test	 dl, dl
  002be	75 e4		 jne	 SHORT $LL158@InitMainDi
$LN160@InitMainDi:
  002c0	33 c0		 xor	 eax, eax
  002c2	eb 05		 jmp	 SHORT $LN161@InitMainDi
$LN159@InitMainDi:
  002c4	1b c0		 sbb	 eax, eax
  002c6	83 d8 ff	 sbb	 eax, -1
$LN161@InitMainDi:
  002c9	f7 d8		 neg	 eax
  002cb	1b c0		 sbb	 eax, eax
  002cd	25 00 c0 ff ff	 and	 eax, -16384		; ffffc000H
  002d2	05 00 40 00 00	 add	 eax, 16384		; 00004000H
  002d7	89 45 24	 mov	 DWORD PTR _info$[ebp+8], eax

; 264  : 			info.fType = MFT_STRING | MFT_RIGHTJUSTIFY;
; 265  : 		else
; 266  : 			info.fType = MFT_STRING;
; 267  : 
; 268  : 		if (strcmp (popupTexts[i], "MENU_FAVORITES") == 0)

  002da	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0P@BPHMCAOP@MENU_FAVORITES?$AA@
  002df	8b c6		 mov	 eax, esi
$LL162@InitMainDi:
  002e1	8a 10		 mov	 dl, BYTE PTR [eax]
  002e3	3a 11		 cmp	 dl, BYTE PTR [ecx]
  002e5	75 1a		 jne	 SHORT $LN163@InitMainDi
  002e7	84 d2		 test	 dl, dl
  002e9	74 12		 je	 SHORT $LN164@InitMainDi
  002eb	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  002ee	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  002f1	75 0e		 jne	 SHORT $LN163@InitMainDi
  002f3	83 c0 02	 add	 eax, 2
  002f6	83 c1 02	 add	 ecx, 2
  002f9	84 d2		 test	 dl, dl
  002fb	75 e4		 jne	 SHORT $LL162@InitMainDi
$LN164@InitMainDi:
  002fd	33 c0		 xor	 eax, eax
  002ff	eb 05		 jmp	 SHORT $LN165@InitMainDi
$LN163@InitMainDi:
  00301	1b c0		 sbb	 eax, eax
  00303	83 d8 ff	 sbb	 eax, -1
$LN165@InitMainDi:
  00306	85 c0		 test	 eax, eax
  00308	75 14		 jne	 SHORT $LN5@InitMainDi

; 269  : 			FavoriteVolumesMenu = GetSubMenu (GetMenu (hwndDlg), i);

  0030a	53		 push	 ebx
  0030b	57		 push	 edi
  0030c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMenu@4
  00312	50		 push	 eax
  00313	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSubMenu@8
  00319	a3 00 00 00 00	 mov	 DWORD PTR ?FavoriteVolumesMenu@CipherShed@@3PAUHMENU__@@A, eax ; CipherShed::FavoriteVolumesMenu
$LN5@InitMainDi:

; 270  : 
; 271  : 		info.dwTypeData = str;

  0031e	8b 45 70	 mov	 eax, DWORD PTR _str$[ebp]
  00321	89 45 40	 mov	 DWORD PTR _info$[ebp+36], eax

; 272  : 		info.cch = wcslen (str);

  00324	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL166@InitMainDi:
  00327	66 8b 08	 mov	 cx, WORD PTR [eax]
  0032a	83 c0 02	 add	 eax, 2
  0032d	66 85 c9	 test	 cx, cx
  00330	75 f5		 jne	 SHORT $LL166@InitMainDi
  00332	2b c2		 sub	 eax, edx
  00334	d1 f8		 sar	 eax, 1
  00336	89 45 44	 mov	 DWORD PTR _info$[ebp+40], eax

; 273  : 
; 274  : 		SetMenuItemInfoW (GetMenu (hwndDlg), i, TRUE,  &info); 

  00339	8d 45 1c	 lea	 eax, DWORD PTR _info$[ebp]
  0033c	50		 push	 eax
  0033d	6a 01		 push	 1
  0033f	53		 push	 ebx
  00340	57		 push	 edi
  00341	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMenu@4
  00347	50		 push	 eax
  00348	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemInfoW@16
  0034e	8b 74 9d 54	 mov	 esi, DWORD PTR _popupTexts$[ebp+ebx*4+4]
  00352	43		 inc	 ebx
  00353	85 f6		 test	 esi, esi
  00355	0f 85 28 ff ff
	ff		 jne	 $LL10@InitMainDi

; 275  : 	}

  0035b	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3

; 276  : 
; 277  : 	try
; 278  : 	{
; 279  : 		LoadFavoriteVolumes();

  00362	e8 00 00 00 00	 call	 ?LoadFavoriteVolumes@CipherShed@@YAXXZ ; CipherShed::LoadFavoriteVolumes
  00367	eb 14		 jmp	 SHORT $LN33@InitMainDi
__catch$?InitMainDialog@@YAXPAUHWND__@@@Z$0:

; 280  : 	}
; 281  : 	catch (Exception &e)
; 282  : 	{
; 283  : 		e.Show (NULL);

  00369	8b 4d 4c	 mov	 ecx, DWORD PTR _e$135767[ebp]
  0036c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0036e	8b 02		 mov	 eax, DWORD PTR [edx]
  00370	6a 00		 push	 0
  00372	ff d0		 call	 eax

; 284  : 	}

  00374	b8 00 00 00 00	 mov	 eax, $LN168@InitMainDi
  00379	c3		 ret	 0
$LN168@InitMainDi:
  0037a	8b 7d 7c	 mov	 edi, DWORD PTR _hwndDlg$[ebp]
$LN33@InitMainDi:

; 285  : 
; 286  : 	// Resize the logo bitmap if the user has a non-default DPI
; 287  : 	if (ScreenDPI != USER_DEFAULT_SCREEN_DPI
; 288  : 		&& hbmLogoBitmapRescaled == NULL)	// If not re-called (e.g. after language pack change)

  0037d	83 3d 00 00 00
	00 60		 cmp	 DWORD PTR _ScreenDPI, 96 ; 00000060H
  00384	74 35		 je	 SHORT $LN169@InitMainDi
  00386	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hbmLogoBitmapRescaled@@3PAUHBITMAP__@@A, 0 ; hbmLogoBitmapRescaled
  0038d	75 2c		 jne	 SHORT $LN169@InitMainDi

; 289  : 	{
; 290  : 		hbmLogoBitmapRescaled = RenderBitmap (MAKEINTRESOURCE (IDB_LOGO_288DPI),
; 291  : 			GetDlgItem (hwndDlg, IDC_LOGO),
; 292  : 			0, 0, 0, 0, FALSE, TRUE);

  0038f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00395	6a 01		 push	 1
  00397	6a 00		 push	 0
  00399	6a 00		 push	 0
  0039b	6a 00		 push	 0
  0039d	6a 00		 push	 0
  0039f	6a 00		 push	 0
  003a1	68 4a 04 00 00	 push	 1098			; 0000044aH
  003a6	57		 push	 edi
  003a7	ff d6		 call	 esi
  003a9	50		 push	 eax
  003aa	6a 6f		 push	 111			; 0000006fH
  003ac	e8 00 00 00 00	 call	 _RenderBitmap
  003b1	83 c4 20	 add	 esp, 32			; 00000020H
  003b4	a3 00 00 00 00	 mov	 DWORD PTR ?hbmLogoBitmapRescaled@@3PAUHBITMAP__@@A, eax ; hbmLogoBitmapRescaled
  003b9	eb 06		 jmp	 SHORT $LN3@InitMainDi
$LN169@InitMainDi:
  003bb	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
$LN3@InitMainDi:

; 293  : 	}
; 294  : 
; 295  : 	BuildTree (GetDlgItem (hwndDlg, IDC_DRIVELIST));

  003c1	68 ef 03 00 00	 push	 1007			; 000003efH
  003c6	57		 push	 edi
  003c7	ff d6		 call	 esi
  003c9	50		 push	 eax
  003ca	e8 00 00 00 00	 call	 _BuildTree

; 296  : 
; 297  : 	if (*szDriveLetter != 0)

  003cf	a0 00 00 00 00	 mov	 al, BYTE PTR ?szDriveLetter@@3PADA
  003d4	83 c4 04	 add	 esp, 4
  003d7	84 c0		 test	 al, al
  003d9	74 55		 je	 SHORT $LN170@InitMainDi

; 298  : 	{
; 299  : 		SelectItem (GetDlgItem (hwndDlg, IDC_DRIVELIST), *szDriveLetter);

  003db	0f b6 c8	 movzx	 ecx, al
  003de	51		 push	 ecx
  003df	68 ef 03 00 00	 push	 1007			; 000003efH
  003e4	57		 push	 edi
  003e5	ff d6		 call	 esi
  003e7	50		 push	 eax
  003e8	e8 00 00 00 00	 call	 _SelectItem
  003ed	83 c4 08	 add	 esp, 8

; 300  : 
; 301  : 		if(nSelectedDriveIndex > SendMessage (GetDlgItem (hwndDlg, IDC_DRIVELIST), LVM_GETITEMCOUNT, 0, 0)/2) 

  003f0	6a 00		 push	 0
  003f2	6a 00		 push	 0
  003f4	68 04 10 00 00	 push	 4100			; 00001004H
  003f9	68 ef 03 00 00	 push	 1007			; 000003efH
  003fe	57		 push	 edi
  003ff	ff d6		 call	 esi
  00401	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  00407	50		 push	 eax
  00408	ff d3		 call	 ebx
  0040a	99		 cdq
  0040b	2b c2		 sub	 eax, edx
  0040d	d1 f8		 sar	 eax, 1
  0040f	39 05 00 00 00
	00		 cmp	 DWORD PTR ?nSelectedDriveIndex@@3HA, eax ; nSelectedDriveIndex
  00415	7e 1f		 jle	 SHORT $LN1@InitMainDi

; 302  : 			SendMessage(GetDlgItem (hwndDlg, IDC_DRIVELIST), LVM_SCROLL, 0, 10000);

  00417	68 10 27 00 00	 push	 10000			; 00002710H
  0041c	6a 00		 push	 0
  0041e	68 14 10 00 00	 push	 4116			; 00001014H
  00423	68 ef 03 00 00	 push	 1007			; 000003efH
  00428	57		 push	 edi
  00429	ff d6		 call	 esi
  0042b	50		 push	 eax
  0042c	ff d3		 call	 ebx
  0042e	eb 06		 jmp	 SHORT $LN1@InitMainDi
$LN170@InitMainDi:
  00430	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
$LN1@InitMainDi:

; 303  : 	}
; 304  : 
; 305  : 	SendMessage (GetDlgItem (hwndDlg, IDC_NO_HISTORY), BM_SETCHECK, bHistory ? BST_UNCHECKED : BST_CHECKED, 0);

  00436	33 d2		 xor	 edx, edx
  00438	39 15 00 00 00
	00		 cmp	 DWORD PTR _bHistory, edx
  0043e	6a 00		 push	 0
  00440	0f 94 c2	 sete	 dl
  00443	52		 push	 edx
  00444	68 f1 00 00 00	 push	 241			; 000000f1H
  00449	68 ee 03 00 00	 push	 1006			; 000003eeH
  0044e	57		 push	 edi
  0044f	ff d6		 call	 esi
  00451	50		 push	 eax
  00452	ff d3		 call	 ebx

; 306  : 	EnableDisableButtons (hwndDlg);

  00454	57		 push	 edi
  00455	e8 00 00 00 00	 call	 _EnableDisableButtons
  0045a	83 c4 04	 add	 esp, 4

; 307  : }

  0045d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00460	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00467	59		 pop	 ecx
  00468	5f		 pop	 edi
  00469	5e		 pop	 esi
  0046a	5b		 pop	 ebx
  0046b	83 c5 74	 add	 ebp, 116		; 00000074H
  0046e	8b e5		 mov	 esp, ebp
  00470	5d		 pop	 ebp
  00471	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitMainDialog@@YAXPAUHWND__@@@Z$2:
  00000	8b 45 70	 mov	 eax, DWORD PTR $T182590[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN21@InitMainDi
  0000c	83 65 70 fe	 and	 DWORD PTR $T182590[ebp], -2 ; fffffffeH
  00010	8d 4d 9c	 lea	 ecx, DWORD PTR $T182583[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN21@InitMainDi:
  00018	c3		 ret	 0
__unwindfunclet$?InitMainDialog@@YAXPAUHWND__@@@Z$3:
  00019	8b 45 70	 mov	 eax, DWORD PTR $T182590[ebp]
  0001c	83 e0 02	 and	 eax, 2
  0001f	0f 84 0c 00 00
	00		 je	 $LN23@InitMainDi
  00025	83 65 70 fd	 and	 DWORD PTR $T182590[ebp], -3 ; fffffffdH
  00029	8d 4d b8	 lea	 ecx, DWORD PTR $T182584[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN23@InitMainDi:
  00031	c3		 ret	 0
__unwindfunclet$?InitMainDialog@@YAXPAUHWND__@@@Z$4:
  00032	8b 45 70	 mov	 eax, DWORD PTR $T182590[ebp]
  00035	83 e0 04	 and	 eax, 4
  00038	0f 84 0c 00 00
	00		 je	 $LN25@InitMainDi
  0003e	83 65 70 fb	 and	 DWORD PTR $T182590[ebp], -5 ; fffffffbH
  00042	8d 4d 00	 lea	 ecx, DWORD PTR $T182585[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN25@InitMainDi:
  0004a	c3		 ret	 0
__ehhandler$?InitMainDialog@@YAXPAUHWND__@@@Z:
  0004b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00052	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00055	33 c8		 xor	 ecx, eax
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InitMainDialog@@YAXPAUHWND__@@@Z
  00061	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InitMainDialog@@YAXPAUHWND__@@@Z ENDP			; InitMainDialog
PUBLIC	??_C@_0BN@OHAMCJFH@HIDVOL_PROT_WARN_AFTER_MOUNT?$AA@ ; `string'
PUBLIC	??_C@_0BP@MPHFEMNC@UNSUPPORTED_CHARS_IN_PWD_RECOM?$AA@ ; `string'
PUBLIC	??_C@_0CB@FLEKEKLI@EXE_FILE_EXTENSION_MOUNT_WARNING@ ; `string'
PUBLIC	??_C@_0BJ@IFBNLIAJ@WARN_64_BIT_BLOCK_CIPHER?$AA@ ; `string'
PUBLIC	??_C@_0O@INONOBKP@WARN_CBC_MODE?$AA@		; `string'
PUBLIC	??_C@_0BE@NEFDJEPG@VOL_ALREADY_MOUNTED?$AA@	; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	_OpenVolumeExplorerWindow:PROC
EXTRN	__imp__MessageBeep@4:PROC
EXTRN	_CheckFileExtension:PROC
EXTRN	_MountVolume:PROC
EXTRN	_ResetWrongPwdRetryCount:PROC
EXTRN	_MultipleMountOperationInProgress:DWORD
;	COMDAT ??_C@_0BN@OHAMCJFH@HIDVOL_PROT_WARN_AFTER_MOUNT?$AA@
; File c:\program files\microsoft sdks\windows\v7.0\include\winnt.h
CONST	SEGMENT
??_C@_0BN@OHAMCJFH@HIDVOL_PROT_WARN_AFTER_MOUNT?$AA@ DB 'HIDVOL_PROT_WARN'
	DB	'_AFTER_MOUNT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MPHFEMNC@UNSUPPORTED_CHARS_IN_PWD_RECOM?$AA@
CONST	SEGMENT
??_C@_0BP@MPHFEMNC@UNSUPPORTED_CHARS_IN_PWD_RECOM?$AA@ DB 'UNSUPPORTED_CH'
	DB	'ARS_IN_PWD_RECOM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FLEKEKLI@EXE_FILE_EXTENSION_MOUNT_WARNING@
CONST	SEGMENT
??_C@_0CB@FLEKEKLI@EXE_FILE_EXTENSION_MOUNT_WARNING@ DB 'EXE_FILE_EXTENSI'
	DB	'ON_MOUNT_WARNING', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IFBNLIAJ@WARN_64_BIT_BLOCK_CIPHER?$AA@
CONST	SEGMENT
??_C@_0BJ@IFBNLIAJ@WARN_64_BIT_BLOCK_CIPHER?$AA@ DB 'WARN_64_BIT_BLOCK_CI'
	DB	'PHER', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@INONOBKP@WARN_CBC_MODE?$AA@
CONST	SEGMENT
??_C@_0O@INONOBKP@WARN_CBC_MODE?$AA@ DB 'WARN_CBC_MODE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NEFDJEPG@VOL_ALREADY_MOUNTED?$AA@
CONST	SEGMENT
??_C@_0BE@NEFDJEPG@VOL_ALREADY_MOUNTED?$AA@ DB 'VOL_ALREADY_MOUNTED', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
CONST	ENDS
;	COMDAT ?Mount@@YAHPAUHWND__@@HPAD@Z
_TEXT	SEGMENT
_hwndDlg$GSCopy$ = -348					; size = 4
_status$ = -344						; size = 4
tv85 = -340						; size = 4
_emptyPassword$137212 = -336				; size = 72
_fileName$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_szFileName$ = 8					; size = 4
?Mount@@YAHPAUHWND__@@HPAD@Z PROC			; Mount, COMDAT
; _hwndDlg$ = edx
; _nDosDriveNo$ = ecx

; 3384 : {

  00000	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 58 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+348], eax

; 3385 : 	BOOL status = FALSE;
; 3386 : 	char fileName[MAX_PATH];
; 3387 : 	int mounted = 0, modeOfOperation;
; 3388 : 
; 3389 : 	bPrebootPasswordDlgMode = mountOptions.PartitionInInactiveSysEncScope;

  00014	a1 10 00 00 00	 mov	 eax, DWORD PTR ?mountOptions@@3UMountOptions@@A+16
  00019	53		 push	 ebx
  0001a	55		 push	 ebp
  0001b	8b ac 24 68 01
	00 00		 mov	 ebp, DWORD PTR _szFileName$[esp+352]
  00022	56		 push	 esi

; 3390 : 
; 3391 : 	if (nDosDriveNo == 0)

  00023	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00029	57		 push	 edi
  0002a	8b d9		 mov	 ebx, ecx
  0002c	8b fa		 mov	 edi, edx
  0002e	89 7c 24 10	 mov	 DWORD PTR _hwndDlg$GSCopy$[esp+364], edi
  00032	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR _status$[esp+364], 0
  0003a	a3 00 00 00 00	 mov	 DWORD PTR _bPrebootPasswordDlgMode, eax
  0003f	85 db		 test	 ebx, ebx
  00041	75 19		 jne	 SHORT $LN65@Mount

; 3392 : 		nDosDriveNo = HIWORD (GetSelectedLong (GetDlgItem (hwndDlg, IDC_DRIVELIST))) - 'A';

  00043	68 ef 03 00 00	 push	 1007			; 000003efH
  00048	57		 push	 edi
  00049	ff d6		 call	 esi
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 _GetSelectedLong
  00051	8b d8		 mov	 ebx, eax
  00053	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00056	83 c4 04	 add	 esp, 4
  00059	83 eb 41	 sub	 ebx, 65			; 00000041H
$LN65@Mount:

; 3393 : 
; 3394 : 	if (!MultipleMountOperationInProgress)

  0005c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _MultipleMountOperationInProgress, 0
  00063	75 0a		 jne	 SHORT $LN64@Mount

; 3395 : 		VolumePassword.Length = 0;

  00065	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?VolumePassword@@3UPassword@@A, 0
$LN64@Mount:

; 3396 : 
; 3397 : 	if (szFileName == NULL)

  0006f	85 ed		 test	 ebp, ebp
  00071	75 1d		 jne	 SHORT $LN63@Mount

; 3398 : 	{
; 3399 : 		GetWindowTextA(GetDlgItem (hwndDlg, IDC_VOLUME), fileName, sizeof (fileName));

  00073	68 04 01 00 00	 push	 260			; 00000104H
  00078	8d 4c 24 68	 lea	 ecx, DWORD PTR _fileName$[esp+368]
  0007c	51		 push	 ecx
  0007d	68 0a 04 00 00	 push	 1034			; 0000040aH
  00082	57		 push	 edi
  00083	ff d6		 call	 esi
  00085	50		 push	 eax
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 3400 : 		szFileName = fileName;

  0008c	8d 6c 24 64	 lea	 ebp, DWORD PTR _fileName$[esp+364]
$LN63@Mount:

; 3401 : 	}
; 3402 : 
; 3403 : 	if (strlen(szFileName) == 0)

  00090	8b c5		 mov	 eax, ebp
  00092	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL146@Mount:
  00095	8a 08		 mov	 cl, BYTE PTR [eax]
  00097	40		 inc	 eax
  00098	84 c9		 test	 cl, cl
  0009a	75 f9		 jne	 SHORT $LL146@Mount
  0009c	2b c2		 sub	 eax, edx
  0009e	75 09		 jne	 SHORT $LN62@Mount

; 3404 : 	{
; 3405 : 		status = FALSE;

  000a0	89 44 24 14	 mov	 DWORD PTR _status$[esp+364], eax
  000a4	e9 a7 03 00 00	 jmp	 $ret$137203
$LN62@Mount:

; 3406 : 		goto ret;
; 3407 : 	}
; 3408 : 
; 3409 : 	if (IsMountedVolume (szFileName))

  000a9	55		 push	 ebp
  000aa	e8 00 00 00 00	 call	 _IsMountedVolume
  000af	83 c4 04	 add	 esp, 4
  000b2	85 c0		 test	 eax, eax
  000b4	74 17		 je	 SHORT $LN60@Mount

; 3410 : 	{
; 3411 : 		Warning ("VOL_ALREADY_MOUNTED");

  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NEFDJEPG@VOL_ALREADY_MOUNTED?$AA@
  000bb	e8 00 00 00 00	 call	 _Warning

; 3412 : 		status = FALSE;

  000c0	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _status$[esp+368], 0

; 3532 : 	}
; 3533 : 
; 3534 : ret:

  000c8	e9 80 03 00 00	 jmp	 $LN179@Mount
$LN60@Mount:

; 3413 : 		goto ret;
; 3414 : 	}
; 3415 : 
; 3416 : 	if (!VolumePathExists (szFileName))

  000cd	55		 push	 ebp
  000ce	e8 00 00 00 00	 call	 _VolumePathExists
  000d3	83 c4 04	 add	 esp, 4
  000d6	85 c0		 test	 eax, eax
  000d8	75 1e		 jne	 SHORT $LN58@Mount

; 3417 : 	{
; 3418 : 		if (!MultipleMountOperationInProgress)

  000da	39 05 00 00 00
	00		 cmp	 DWORD PTR _MultipleMountOperationInProgress, eax
  000e0	75 09		 jne	 SHORT $LN57@Mount

; 3419 : 			handleWin32Error (hwndDlg);

  000e2	57		 push	 edi
  000e3	e8 00 00 00 00	 call	 _handleWin32Error
  000e8	83 c4 04	 add	 esp, 4
$LN57@Mount:

; 3420 : 
; 3421 : 		status = FALSE;

  000eb	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR _status$[esp+364], 0

; 3532 : 	}
; 3533 : 
; 3534 : ret:

  000f3	e9 58 03 00 00	 jmp	 $ret$137203
$LN58@Mount:

; 3422 : 		goto ret;
; 3423 : 	}
; 3424 : 
; 3425 : 	ResetWrongPwdRetryCount ();

  000f8	e8 00 00 00 00	 call	 _ResetWrongPwdRetryCount

; 3426 : 
; 3427 : 	// First try cached passwords and if they fail ask user for a new one
; 3428 : 	WaitCursor ();

  000fd	e8 00 00 00 00	 call	 _WaitCursor

; 3429 : 
; 3430 : 	mounted = MountVolume (hwndDlg, nDosDriveNo, szFileName, NULL, bCacheInDriver, bForceMount, &mountOptions, Silent, FALSE);

  00102	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _Silent
  00108	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bForceMount@@3HA ; bForceMount
  0010d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bCacheInDriver@@3HA ; bCacheInDriver
  00113	6a 00		 push	 0
  00115	52		 push	 edx
  00116	68 00 00 00 00	 push	 OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  0011b	50		 push	 eax
  0011c	51		 push	 ecx
  0011d	6a 00		 push	 0
  0011f	55		 push	 ebp
  00120	8b d7		 mov	 edx, edi
  00122	53		 push	 ebx
  00123	52		 push	 edx
  00124	e8 00 00 00 00	 call	 _MountVolume
  00129	8b f8		 mov	 edi, eax
  0012b	83 c4 24	 add	 esp, 36			; 00000024H

; 3431 : 	
; 3432 : 	// If keyfiles are enabled, test empty password first
; 3433 : 	if (!mounted && KeyFilesEnable && FirstKeyFile)

  0012e	85 ff		 test	 edi, edi
  00130	0f 85 ba 00 00
	00		 jne	 $LN49@Mount
  00136	39 05 00 00 00
	00		 cmp	 DWORD PTR _KeyFilesEnable, eax
  0013c	74 6f		 je	 SHORT $LN129@Mount
  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR _FirstKeyFile
  00143	85 c0		 test	 eax, eax
  00145	74 66		 je	 SHORT $LN129@Mount

; 3434 : 	{
; 3435 : 		Password emptyPassword;
; 3436 : 		emptyPassword.Length = 0;
; 3437 : 
; 3438 : 		KeyFilesApply (&emptyPassword, FirstKeyFile);

  00147	50		 push	 eax
  00148	8d 44 24 20	 lea	 eax, DWORD PTR _emptyPassword$137212[esp+368]
  0014c	50		 push	 eax
  0014d	89 7c 24 24	 mov	 DWORD PTR _emptyPassword$137212[esp+372], edi
  00151	e8 00 00 00 00	 call	 _KeyFilesApply

; 3439 : 		mounted = MountVolume (hwndDlg, nDosDriveNo, szFileName, &emptyPassword, bCacheInDriver, bForceMount, &mountOptions, Silent, FALSE);

  00156	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Silent
  0015c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bForceMount@@3HA ; bForceMount
  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bCacheInDriver@@3HA ; bCacheInDriver
  00167	57		 push	 edi
  00168	51		 push	 ecx
  00169	68 00 00 00 00	 push	 OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  0016e	52		 push	 edx
  0016f	8b 54 24 28	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[esp+388]
  00173	50		 push	 eax
  00174	8d 4c 24 38	 lea	 ecx, DWORD PTR _emptyPassword$137212[esp+392]
  00178	51		 push	 ecx
  00179	55		 push	 ebp
  0017a	53		 push	 ebx
  0017b	52		 push	 edx
  0017c	e8 00 00 00 00	 call	 _MountVolume

; 3440 : 		
; 3441 : 		burn (&emptyPassword, sizeof (emptyPassword));

  00181	8d 54 24 48	 lea	 edx, DWORD PTR _emptyPassword$137212[esp+408]
  00185	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  0018a	8b f8		 mov	 edi, eax
  0018c	83 c4 2c	 add	 esp, 44			; 0000002cH
  0018f	8b f1		 mov	 esi, ecx
  00191	8b c2		 mov	 eax, edx
$LL70@Mount:
  00193	c6 00 00	 mov	 BYTE PTR [eax], 0
  00196	40		 inc	 eax
  00197	83 ee 01	 sub	 esi, 1
  0019a	75 f7		 jne	 SHORT $LL70@Mount
  0019c	8d 64 24 00	 npad	 4
$LL51@Mount:
  001a0	49		 dec	 ecx
  001a1	c6 02 00	 mov	 BYTE PTR [edx], 0
  001a4	42		 inc	 edx
  001a5	85 c9		 test	 ecx, ecx
  001a7	75 f7		 jne	 SHORT $LL51@Mount

; 3442 : 	}
; 3443 : 
; 3444 : 	// Test password and/or keyfiles used for the previous volume
; 3445 : 	if (!mounted && MultipleMountOperationInProgress && VolumePassword.Length != 0)

  001a9	85 ff		 test	 edi, edi
  001ab	75 43		 jne	 SHORT $LN49@Mount
$LN129@Mount:
  001ad	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _MultipleMountOperationInProgress, 0
  001b4	74 3a		 je	 SHORT $LN49@Mount
  001b6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?VolumePassword@@3UPassword@@A, 0
  001bd	74 31		 je	 SHORT $LN49@Mount

; 3446 : 		mounted = MountVolume (hwndDlg, nDosDriveNo, szFileName, &VolumePassword, bCacheInDriver, bForceMount, &mountOptions, Silent, FALSE);

  001bf	a1 00 00 00 00	 mov	 eax, DWORD PTR _Silent
  001c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bForceMount@@3HA ; bForceMount
  001ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bCacheInDriver@@3HA ; bCacheInDriver
  001d0	6a 00		 push	 0
  001d2	50		 push	 eax
  001d3	8b 44 24 18	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[esp+372]
  001d7	68 00 00 00 00	 push	 OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  001dc	51		 push	 ecx
  001dd	52		 push	 edx
  001de	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  001e3	55		 push	 ebp
  001e4	53		 push	 ebx
  001e5	50		 push	 eax
  001e6	e8 00 00 00 00	 call	 _MountVolume
  001eb	83 c4 24	 add	 esp, 36			; 00000024H
  001ee	8b f8		 mov	 edi, eax
$LN49@Mount:

; 3447 : 
; 3448 : 	NormalCursor ();

  001f0	e8 00 00 00 00	 call	 _NormalCursor

; 3449 : 
; 3450 : 	if (mounted)

  001f5	85 ff		 test	 edi, edi
  001f7	74 5e		 je	 SHORT $LN148@Mount

; 3451 : 	{
; 3452 : 		// Check for deprecated CBC mode
; 3453 : 		modeOfOperation = GetModeOfOperationByDriveNo (nDosDriveNo);

  001f9	53		 push	 ebx
  001fa	e8 00 00 00 00	 call	 _GetModeOfOperationByDriveNo
  001ff	83 c4 04	 add	 esp, 4

; 3454 : 		if (modeOfOperation == CBC || modeOfOperation == OUTER_CBC)

  00202	83 f8 03	 cmp	 eax, 3
  00205	74 05		 je	 SHORT $LN46@Mount
  00207	83 f8 04	 cmp	 eax, 4
  0020a	75 0d		 jne	 SHORT $LN47@Mount
$LN46@Mount:

; 3455 : 			Warning("WARN_CBC_MODE");

  0020c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@INONOBKP@WARN_CBC_MODE?$AA@
  00211	e8 00 00 00 00	 call	 _Warning
  00216	83 c4 04	 add	 esp, 4
$LN47@Mount:

; 3456 : 
; 3457 : 		// Check for deprecated 64-bit-block ciphers
; 3458 : 		if (GetCipherBlockSizeByDriveNo (nDosDriveNo) == 64)

  00219	53		 push	 ebx
  0021a	e8 00 00 00 00	 call	 _GetCipherBlockSizeByDriveNo
  0021f	83 c4 04	 add	 esp, 4
  00222	83 f8 40	 cmp	 eax, 64			; 00000040H
  00225	75 0d		 jne	 SHORT $LN45@Mount

; 3459 : 			Warning("WARN_64_BIT_BLOCK_CIPHER");

  00227	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@IFBNLIAJ@WARN_64_BIT_BLOCK_CIPHER?$AA@
  0022c	e8 00 00 00 00	 call	 _Warning
  00231	83 c4 04	 add	 esp, 4
$LN45@Mount:

; 3460 : 
; 3461 : 		// Check for problematic file extensions (exe, dll, sys)
; 3462 : 		if (CheckFileExtension(szFileName))

  00234	55		 push	 ebp
  00235	e8 00 00 00 00	 call	 _CheckFileExtension
  0023a	83 c4 04	 add	 esp, 4
  0023d	85 c0		 test	 eax, eax
  0023f	0f 84 af 01 00
	00		 je	 $LN161@Mount

; 3463 : 			Warning ("EXE_FILE_EXTENSION_MOUNT_WARNING");

  00245	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@FLEKEKLI@EXE_FILE_EXTENSION_MOUNT_WARNING@
  0024a	e8 00 00 00 00	 call	 _Warning
  0024f	83 c4 04	 add	 esp, 4

; 3464 : 	}
; 3465 : 
; 3466 : 	while (mounted == 0)

  00252	e9 9d 01 00 00	 jmp	 $LN161@Mount
$LN148@Mount:
  00257	a1 00 00 00 00	 mov	 eax, DWORD PTR _Silent
  0025c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?CmdVolumePassword@@3UPassword@@A
$LL43@Mount:

; 3467 : 	{
; 3468 : 		if (CmdVolumePassword.Length > 0)

  00262	85 c9		 test	 ecx, ecx
  00264	76 13		 jbe	 SHORT $LN41@Mount

; 3469 : 		{
; 3470 : 			VolumePassword = CmdVolumePassword;

  00266	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  0026b	be 00 00 00 00	 mov	 esi, OFFSET ?CmdVolumePassword@@3UPassword@@A ; CmdVolumePassword
  00270	bf 00 00 00 00	 mov	 edi, OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  00275	f3 a5		 rep movsd
  00277	eb 34		 jmp	 SHORT $LN164@Mount
$LN41@Mount:

; 3471 : 		}
; 3472 : 		else if (!Silent)

  00279	85 c0		 test	 eax, eax
  0027b	75 30		 jne	 SHORT $LN164@Mount

; 3473 : 		{
; 3474 : 			strcpy (PasswordDlgVolume, szFileName);

  0027d	ba 00 00 00 00	 mov	 edx, OFFSET _PasswordDlgVolume
  00282	8b c5		 mov	 eax, ebp
  00284	2b d5		 sub	 edx, ebp
$LL68@Mount:
  00286	8a 08		 mov	 cl, BYTE PTR [eax]
  00288	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0028b	40		 inc	 eax
  0028c	84 c9		 test	 cl, cl
  0028e	75 f6		 jne	 SHORT $LL68@Mount

; 3475 : 
; 3476 : 			if (!AskVolumePassword (hwndDlg, &VolumePassword, NULL, TRUE))

  00290	8b 54 24 10	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[esp+364]
  00294	6a 01		 push	 1
  00296	33 c0		 xor	 eax, eax
  00298	b9 00 00 00 00	 mov	 ecx, OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  0029d	e8 00 00 00 00	 call	 ?AskVolumePassword@@YAHPAUHWND__@@PAUPassword@@PADH@Z ; AskVolumePassword
  002a2	83 c4 04	 add	 esp, 4
  002a5	85 c0		 test	 eax, eax
  002a7	0f 84 a3 01 00
	00		 je	 $ret$137203
$LN164@Mount:

; 3477 : 				goto ret;
; 3478 : 		}
; 3479 : 		
; 3480 : 		WaitCursor ();

  002ad	e8 00 00 00 00	 call	 _WaitCursor

; 3481 : 
; 3482 : 		if (KeyFilesEnable)

  002b2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  002b9	74 14		 je	 SHORT $LN167@Mount

; 3483 : 			KeyFilesApply (&VolumePassword, FirstKeyFile);

  002bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _FirstKeyFile
  002c1	51		 push	 ecx
  002c2	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  002c7	e8 00 00 00 00	 call	 _KeyFilesApply
  002cc	83 c4 08	 add	 esp, 8
$LN167@Mount:

; 3484 : 
; 3485 : 		mounted = MountVolume (hwndDlg, nDosDriveNo, szFileName, &VolumePassword, bCacheInDriver, bForceMount, &mountOptions, Silent, !Silent);

  002cf	a1 00 00 00 00	 mov	 eax, DWORD PTR _Silent
  002d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bCacheInDriver@@3HA ; bCacheInDriver
  002da	33 d2		 xor	 edx, edx
  002dc	85 c0		 test	 eax, eax
  002de	0f 94 c2	 sete	 dl
  002e1	52		 push	 edx
  002e2	8b 54 24 14	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[esp+368]
  002e6	50		 push	 eax
  002e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bForceMount@@3HA ; bForceMount
  002ec	68 00 00 00 00	 push	 OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  002f1	50		 push	 eax
  002f2	51		 push	 ecx
  002f3	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  002f8	55		 push	 ebp
  002f9	53		 push	 ebx
  002fa	52		 push	 edx
  002fb	e8 00 00 00 00	 call	 _MountVolume
  00300	8b f8		 mov	 edi, eax

; 3486 : 		NormalCursor ();

  00302	e8 00 00 00 00	 call	 _NormalCursor

; 3487 : 
; 3488 : 		// Check for deprecated CBC mode
; 3489 : 		modeOfOperation = GetModeOfOperationByDriveNo (nDosDriveNo);

  00307	53		 push	 ebx
  00308	e8 00 00 00 00	 call	 _GetModeOfOperationByDriveNo
  0030d	83 c4 28	 add	 esp, 40			; 00000028H

; 3490 : 		if (modeOfOperation == CBC || modeOfOperation == OUTER_CBC)

  00310	83 f8 03	 cmp	 eax, 3
  00313	74 05		 je	 SHORT $LN34@Mount
  00315	83 f8 04	 cmp	 eax, 4
  00318	75 0d		 jne	 SHORT $LN35@Mount
$LN34@Mount:

; 3491 : 			Warning("WARN_CBC_MODE");

  0031a	68 00 00 00 00	 push	 OFFSET ??_C@_0O@INONOBKP@WARN_CBC_MODE?$AA@
  0031f	e8 00 00 00 00	 call	 _Warning
  00324	83 c4 04	 add	 esp, 4
$LN35@Mount:

; 3492 : 
; 3493 : 		// Check for deprecated 64-bit-block ciphers
; 3494 : 		if (GetCipherBlockSizeByDriveNo (nDosDriveNo) == 64)

  00327	53		 push	 ebx
  00328	e8 00 00 00 00	 call	 _GetCipherBlockSizeByDriveNo
  0032d	83 c4 04	 add	 esp, 4
  00330	83 f8 40	 cmp	 eax, 64			; 00000040H
  00333	75 0d		 jne	 SHORT $LN33@Mount

; 3495 : 			Warning("WARN_64_BIT_BLOCK_CIPHER");

  00335	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@IFBNLIAJ@WARN_64_BIT_BLOCK_CIPHER?$AA@
  0033a	e8 00 00 00 00	 call	 _Warning
  0033f	83 c4 04	 add	 esp, 4
$LN33@Mount:

; 3496 : 
; 3497 : 		// Check for legacy non-ASCII passwords
; 3498 : 		if (mounted > 0 && !KeyFilesEnable && !CheckPasswordCharEncoding (NULL, &VolumePassword))

  00342	85 ff		 test	 edi, edi
  00344	7e 43		 jle	 SHORT $LN31@Mount
  00346	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  0034d	75 20		 jne	 SHORT $LN32@Mount
  0034f	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  00354	6a 00		 push	 0
  00356	e8 00 00 00 00	 call	 _CheckPasswordCharEncoding
  0035b	83 c4 08	 add	 esp, 8
  0035e	85 c0		 test	 eax, eax
  00360	75 0d		 jne	 SHORT $LN32@Mount

; 3499 : 			Warning ("UNSUPPORTED_CHARS_IN_PWD_RECOM");

  00362	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MPHFEMNC@UNSUPPORTED_CHARS_IN_PWD_RECOM?$AA@
  00367	e8 00 00 00 00	 call	 _Warning
  0036c	83 c4 04	 add	 esp, 4
$LN32@Mount:

; 3500 : 
; 3501 : 		// Check for problematic file extensions (exe, dll, sys)
; 3502 : 		if (mounted > 0 && CheckFileExtension (szFileName))

  0036f	55		 push	 ebp
  00370	e8 00 00 00 00	 call	 _CheckFileExtension
  00375	83 c4 04	 add	 esp, 4
  00378	85 c0		 test	 eax, eax
  0037a	74 0d		 je	 SHORT $LN31@Mount

; 3503 : 			Warning ("EXE_FILE_EXTENSION_MOUNT_WARNING");

  0037c	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@FLEKEKLI@EXE_FILE_EXTENSION_MOUNT_WARNING@
  00381	e8 00 00 00 00	 call	 _Warning
  00386	83 c4 04	 add	 esp, 4
$LN31@Mount:

; 3504 : 
; 3505 : 		if (!MultipleMountOperationInProgress)

  00389	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _MultipleMountOperationInProgress, 0
  00390	75 27		 jne	 SHORT $LN27@Mount

; 3506 : 			burn (&VolumePassword, sizeof (VolumePassword));

  00392	ba 00 00 00 00	 mov	 edx, OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  00397	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  0039c	8b f1		 mov	 esi, ecx
  0039e	8b c2		 mov	 eax, edx
$LL74@Mount:
  003a0	c6 00 00	 mov	 BYTE PTR [eax], 0
  003a3	40		 inc	 eax
  003a4	83 ee 01	 sub	 esi, 1
  003a7	75 f7		 jne	 SHORT $LL74@Mount
  003a9	8d a4 24 00 00
	00 00		 npad	 7
$LL26@Mount:
  003b0	49		 dec	 ecx
  003b1	c6 02 00	 mov	 BYTE PTR [edx], 0
  003b4	42		 inc	 edx
  003b5	85 c9		 test	 ecx, ecx
  003b7	75 f7		 jne	 SHORT $LL26@Mount
$LN27@Mount:

; 3507 : 
; 3508 : 		burn (&mountOptions.ProtectedHidVolPassword, sizeof (mountOptions.ProtectedHidVolPassword));

  003b9	ba 14 00 00 00	 mov	 edx, OFFSET ?mountOptions@@3UMountOptions@@A+20
  003be	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  003c3	8b f1		 mov	 esi, ecx
  003c5	8b c2		 mov	 eax, edx
$LL78@Mount:
  003c7	c6 00 00	 mov	 BYTE PTR [eax], 0
  003ca	40		 inc	 eax
  003cb	83 ee 01	 sub	 esi, 1
  003ce	75 f7		 jne	 SHORT $LL78@Mount
$LL21@Mount:
  003d0	49		 dec	 ecx
  003d1	c6 02 00	 mov	 BYTE PTR [edx], 0
  003d4	42		 inc	 edx
  003d5	85 c9		 test	 ecx, ecx
  003d7	75 f7		 jne	 SHORT $LL21@Mount

; 3509 : 
; 3510 : 		if (CmdVolumePassword.Length > 0 || Silent)

  003d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?CmdVolumePassword@@3UPassword@@A
  003df	85 c9		 test	 ecx, ecx
  003e1	77 11		 ja	 SHORT $LN161@Mount
  003e3	a1 00 00 00 00	 mov	 eax, DWORD PTR _Silent
  003e8	85 c0		 test	 eax, eax
  003ea	75 08		 jne	 SHORT $LN161@Mount

; 3464 : 	}
; 3465 : 
; 3466 : 	while (mounted == 0)

  003ec	85 ff		 test	 edi, edi
  003ee	0f 84 6e fe ff
	ff		 je	 $LL43@Mount
$LN161@Mount:

; 3511 : 			break;
; 3512 : 	}
; 3513 : 
; 3514 : 	if (mounted > 0)

  003f4	85 ff		 test	 edi, edi
  003f6	7e 58		 jle	 SHORT $ret$137203

; 3515 : 	{
; 3516 : 		status = TRUE;
; 3517 : 
; 3518 : 		if (bBeep)

  003f8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bBeep@@3HA, 0 ; bBeep
  003ff	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR _status$[esp+364], 1
  00407	74 08		 je	 SHORT $LN16@Mount

; 3519 : 			MessageBeep (0xFFFFFFFF);

  00409	6a ff		 push	 -1
  0040b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBeep@4
$LN16@Mount:

; 3520 : 
; 3521 : 		RefreshMainDlg(hwndDlg);

  00411	8b 44 24 10	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[esp+364]
  00415	50		 push	 eax
  00416	e8 00 00 00 00	 call	 ?RefreshMainDlg@@YAXPAUHWND__@@@Z ; RefreshMainDlg
  0041b	83 c4 04	 add	 esp, 4

; 3522 : 
; 3523 : 		if (bExplore)

  0041e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bExplore, 0
  00425	74 13		 je	 SHORT $LN15@Mount

; 3524 : 		{	
; 3525 : 			WaitCursor();

  00427	e8 00 00 00 00	 call	 _WaitCursor

; 3526 : 			OpenVolumeExplorerWindow (nDosDriveNo);

  0042c	53		 push	 ebx
  0042d	e8 00 00 00 00	 call	 _OpenVolumeExplorerWindow
  00432	83 c4 04	 add	 esp, 4

; 3527 : 			NormalCursor();

  00435	e8 00 00 00 00	 call	 _NormalCursor
$LN15@Mount:

; 3528 : 		}
; 3529 : 
; 3530 : 		if (mountOptions.ProtectHiddenVolume)

  0043a	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR ?mountOptions@@3UMountOptions@@A+8, 0
  00441	74 0d		 je	 SHORT $ret$137203

; 3531 : 			Info ("HIDVOL_PROT_WARN_AFTER_MOUNT");

  00443	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OHAMCJFH@HIDVOL_PROT_WARN_AFTER_MOUNT?$AA@
  00448	e8 00 00 00 00	 call	 _Info
$LN179@Mount:
  0044d	83 c4 04	 add	 esp, 4
$ret$137203:

; 3535 : 	if (!MultipleMountOperationInProgress)

  00450	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _MultipleMountOperationInProgress, 0
  00457	75 20		 jne	 SHORT $LN10@Mount

; 3536 : 		burn (&VolumePassword, sizeof (VolumePassword));

  00459	ba 00 00 00 00	 mov	 edx, OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  0045e	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00463	8b f1		 mov	 esi, ecx
  00465	8b c2		 mov	 eax, edx
$LL82@Mount:
  00467	c6 00 00	 mov	 BYTE PTR [eax], 0
  0046a	40		 inc	 eax
  0046b	83 ee 01	 sub	 esi, 1
  0046e	75 f7		 jne	 SHORT $LL82@Mount
$LL9@Mount:
  00470	49		 dec	 ecx
  00471	c6 02 00	 mov	 BYTE PTR [edx], 0
  00474	42		 inc	 edx
  00475	85 c9		 test	 ecx, ecx
  00477	75 f7		 jne	 SHORT $LL9@Mount
$LN10@Mount:

; 3537 : 
; 3538 : 	burn (&mountOptions.ProtectedHidVolPassword, sizeof (mountOptions.ProtectedHidVolPassword));

  00479	ba 14 00 00 00	 mov	 edx, OFFSET ?mountOptions@@3UMountOptions@@A+20
  0047e	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00483	8b f1		 mov	 esi, ecx
  00485	8b c2		 mov	 eax, edx
$LL86@Mount:
  00487	c6 00 00	 mov	 BYTE PTR [eax], 0
  0048a	40		 inc	 eax
  0048b	83 ee 01	 sub	 esi, 1
  0048e	75 f7		 jne	 SHORT $LL86@Mount
$LL4@Mount:
  00490	49		 dec	 ecx
  00491	c6 02 00	 mov	 BYTE PTR [edx], 0
  00494	42		 inc	 edx
  00495	85 c9		 test	 ecx, ecx
  00497	75 f7		 jne	 SHORT $LL4@Mount

; 3539 : 
; 3540 : 	RestoreDefaultKeyFilesParam ();

  00499	e8 00 00 00 00	 call	 _RestoreDefaultKeyFilesParam

; 3541 : 
; 3542 : 	if (UsePreferences)

  0049e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?UsePreferences@@3HA, 0 ; UsePreferences
  004a5	74 0c		 je	 SHORT $LN2@Mount

; 3543 : 		bCacheInDriver = bCacheInDriverDefault;

  004a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bCacheInDriverDefault@@3HA ; bCacheInDriverDefault
  004ad	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bCacheInDriver@@3HA, ecx ; bCacheInDriver
$LN2@Mount:

; 3544 : 
; 3545 : 	if (status && CloseSecurityTokenSessionsAfterMount && !MultipleMountOperationInProgress)

  004b3	8b 74 24 14	 mov	 esi, DWORD PTR _status$[esp+364]
  004b7	85 f6		 test	 esi, esi
  004b9	74 17		 je	 SHORT $LN160@Mount
  004bb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?CloseSecurityTokenSessionsAfterMount@@3HA, 0 ; CloseSecurityTokenSessionsAfterMount
  004c2	74 0e		 je	 SHORT $LN160@Mount
  004c4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _MultipleMountOperationInProgress, 0
  004cb	75 05		 jne	 SHORT $LN160@Mount

; 3546 : 		SecurityToken::CloseAllSessions();

  004cd	e8 00 00 00 00	 call	 ?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ ; CipherShed::SecurityToken::CloseAllSessions
$LN160@Mount:

; 3547 : 
; 3548 : 	return status;
; 3549 : }

  004d2	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+364]
  004d9	5f		 pop	 edi
  004da	8b c6		 mov	 eax, esi
  004dc	5e		 pop	 esi
  004dd	5d		 pop	 ebp
  004de	5b		 pop	 ebx
  004df	33 cc		 xor	 ecx, esp
  004e1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004e6	81 c4 5c 01 00
	00		 add	 esp, 348		; 0000015cH
  004ec	c3		 ret	 0
?Mount@@YAHPAUHWND__@@HPAD@Z ENDP			; Mount
_TEXT	ENDS
EXTRN	_RemoteSession:DWORD
EXTRN	_UnmountVolume:PROC
; Function compile flags: /Ogtpy
;	COMDAT _Dismount
_TEXT	SEGMENT
_Dismount PROC						; COMDAT
; _hwndDlg$ = edi
; _nDosDriveNo$ = eax

; 3553 : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi
  00003	8b f0		 mov	 esi, eax

; 3554 : 	BOOL status = FALSE;

  00005	33 ed		 xor	 ebp, ebp

; 3555 : 	WaitCursor ();

  00007	e8 00 00 00 00	 call	 _WaitCursor

; 3556 : 
; 3557 : 	if (nDosDriveNo == 0)

  0000c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
  00012	85 f6		 test	 esi, esi
  00014	75 19		 jne	 SHORT $LN5@Dismount

; 3558 : 		nDosDriveNo = (char) (HIWORD (GetSelectedLong (GetDlgItem (hwndDlg, IDC_DRIVELIST))) - 'A');

  00016	68 ef 03 00 00	 push	 1007			; 000003efH
  0001b	57		 push	 edi
  0001c	ff d3		 call	 ebx
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _GetSelectedLong
  00024	c1 e8 10	 shr	 eax, 16			; 00000010H
  00027	83 c4 04	 add	 esp, 4
  0002a	2c 41		 sub	 al, 65			; 00000041H
  0002c	0f be f0	 movsx	 esi, al
$LN5@Dismount:

; 3559 : 
; 3560 : 	if (bCloseDismountedWindows)

  0002f	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?bCloseDismountedWindows@@3HA, ebp ; bCloseDismountedWindows
  00035	74 0a		 je	 SHORT $LN4@Dismount

; 3561 : 	{
; 3562 : 		CloseVolumeExplorerWindows (hwndDlg, nDosDriveNo);

  00037	56		 push	 esi
  00038	57		 push	 edi
  00039	e8 00 00 00 00	 call	 _CloseVolumeExplorerWindows
  0003e	83 c4 08	 add	 esp, 8
$LN4@Dismount:

; 3563 : 	}
; 3564 : 
; 3565 : 	if (UnmountVolume (hwndDlg, nDosDriveNo, bForceUnmount))

  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bForceUnmount@@3HA ; bForceUnmount
  00046	50		 push	 eax
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	e8 00 00 00 00	 call	 _UnmountVolume
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	85 c0		 test	 eax, eax
  00053	74 4c		 je	 SHORT $LN1@Dismount

; 3566 : 	{
; 3567 : 		status = TRUE;
; 3568 : 
; 3569 : 		if (bBeep)

  00055	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bBeep@@3HA, 0 ; bBeep
  0005c	bd 01 00 00 00	 mov	 ebp, 1
  00061	74 08		 je	 SHORT $LN2@Dismount

; 3570 : 			MessageBeep (0xFFFFFFFF);

  00063	6a ff		 push	 -1
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBeep@4
$LN2@Dismount:

; 3571 : 		RefreshMainDlg (hwndDlg);

  0006b	57		 push	 edi
  0006c	e8 00 00 00 00	 call	 ?RefreshMainDlg@@YAXPAUHWND__@@@Z ; RefreshMainDlg
  00071	83 c4 04	 add	 esp, 4

; 3572 : 
; 3573 : 		if (nCurrentOS == WIN_2000 && RemoteSession && !IsAdmin ())

  00074	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _nCurrentOS, 7
  0007b	75 24		 jne	 SHORT $LN1@Dismount
  0007d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _RemoteSession, 0
  00084	74 1b		 je	 SHORT $LN1@Dismount
  00086	e8 00 00 00 00	 call	 _IsAdmin
  0008b	85 c0		 test	 eax, eax
  0008d	75 12		 jne	 SHORT $LN1@Dismount

; 3574 : 			LoadDriveLetters (GetDlgItem (hwndDlg, IDC_DRIVELIST), 0);

  0008f	50		 push	 eax
  00090	68 ef 03 00 00	 push	 1007			; 000003efH
  00095	57		 push	 edi
  00096	ff d3		 call	 ebx
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 _LoadDriveLetters
  0009e	83 c4 08	 add	 esp, 8
$LN1@Dismount:

; 3575 : 	}
; 3576 : 
; 3577 : 	NormalCursor ();

  000a1	e8 00 00 00 00	 call	 _NormalCursor
  000a6	5e		 pop	 esi

; 3578 : 	return status;

  000a7	8b c5		 mov	 eax, ebp
  000a9	5d		 pop	 ebp
  000aa	5b		 pop	 ebx

; 3579 : }

  000ab	c3		 ret	 0
_Dismount ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@INOOLPM@UNMOUNT_FAILED?$AA@		; `string'
PUBLIC	??_C@_0BH@OGJNMHFJ@UNMOUNTALL_LOCK_FAILED?$AA@	; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__SHChangeNotify@16:PROC
EXTRN	_IsOSAtLeast:PROC
EXTRN	_AskWarnYesNoTopmost:PROC
;	COMDAT ??_C@_0P@INOOLPM@UNMOUNT_FAILED?$AA@
CONST	SEGMENT
??_C@_0P@INOOLPM@UNMOUNT_FAILED?$AA@ DB 'UNMOUNT_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OGJNMHFJ@UNMOUNTALL_LOCK_FAILED?$AA@
CONST	SEGMENT
??_C@_0BH@OGJNMHFJ@UNMOUNTALL_LOCK_FAILED?$AA@ DB 'UNMOUNTALL_LOCK_FAILED'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _DismountAll
_TEXT	SEGMENT
_root$137346 = -22216					; size = 4
_status$ = -22216					; size = 4
_dwResult$ = -22212					; size = 4
_unmount$ = -22208					; size = 16
_prevMountedDrives$ = -22192				; size = 4
_item$183296 = -22188					; size = 52
_mountList$ = -22136					; size = 13940
_msg$137332 = -8196					; size = 8192
__$ArrayPad$ = -4					; size = 4
_forceUnmount$ = 8					; size = 4
_interact$ = 12						; size = 4
_dismountMaxRetries$ = 16				; size = 4
_dismountAutoRetryDelay$ = 20				; size = 4
_DismountAll PROC					; COMDAT
; _hwndDlg$ = edi

; 3582 : {

  00000	b8 c8 56 00 00	 mov	 eax, 22216		; 000056c8H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 c4 56
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+22216], eax
  00018	53		 push	 ebx
  00019	55		 push	 ebp
  0001a	56		 push	 esi

; 3583 : 	BOOL status = TRUE;

  0001b	c7 44 24 0c 01
	00 00 00	 mov	 DWORD PTR _status$[esp+22228], 1

; 3584 : 	MOUNT_LIST_STRUCT mountList;
; 3585 : 	DWORD dwResult;
; 3586 : 	UNMOUNT_STRUCT unmount;
; 3587 : 	BOOL bResult;
; 3588 : 	unsigned __int32 prevMountedDrives = 0;
; 3589 : 	int i;
; 3590 : 
; 3591 : retry:
; 3592 : 	WaitCursor();

  00023	e8 00 00 00 00	 call	 _WaitCursor

; 3593 : 
; 3594 : 	DeviceIoControl (hDriver, TC_IOCTL_GET_MOUNTED_VOLUMES, &mountList, sizeof (mountList), &mountList, sizeof (mountList), &dwResult, NULL);

  00028	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__DeviceIoControl@32
  0002e	33 db		 xor	 ebx, ebx
  00030	53		 push	 ebx
  00031	8d 44 24 14	 lea	 eax, DWORD PTR _dwResult$[esp+22232]
  00035	50		 push	 eax
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  0003b	68 74 36 00 00	 push	 13940			; 00003674H
  00040	8d 4c 24 68	 lea	 ecx, DWORD PTR _mountList$[esp+22240]
  00044	51		 push	 ecx
  00045	68 74 36 00 00	 push	 13940			; 00003674H
  0004a	8b d1		 mov	 edx, ecx
  0004c	52		 push	 edx
  0004d	68 18 20 22 00	 push	 2236440			; 00222018H
  00052	50		 push	 eax
  00053	ff d5		 call	 ebp

; 3595 : 
; 3596 : 	if (mountList.ulMountedDrives == 0)

  00055	8b 44 24 5c	 mov	 eax, DWORD PTR _mountList$[esp+22228]
  00059	3b c3		 cmp	 eax, ebx
  0005b	0f 84 d3 02 00
	00		 je	 $LN42@DismountAl
  00061	eb 06		 jmp	 SHORT $retry$137320
$LL46@DismountAl:
  00063	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__DeviceIoControl@32
$retry$137320:

; 3600 : 	}
; 3601 : 
; 3602 : 	BroadcastDeviceChange (DBT_DEVICEREMOVEPENDING, 0, mountList.ulMountedDrives);

  00069	50		 push	 eax
  0006a	53		 push	 ebx
  0006b	68 03 80 00 00	 push	 32771			; 00008003H
  00070	e8 00 00 00 00	 call	 _BroadcastDeviceChange

; 3603 : 
; 3604 : 	prevMountedDrives = mountList.ulMountedDrives;

  00075	8b 4c 24 68	 mov	 ecx, DWORD PTR _mountList$[esp+22240]
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007c	89 4c 24 24	 mov	 DWORD PTR _prevMountedDrives$[esp+22228], ecx

; 3605 : 
; 3606 : 	for (i = 0; i < 26; i++)

  00080	33 f6		 xor	 esi, esi
$LL49@DismountAl:

; 3607 : 	{
; 3608 : 		if (mountList.ulMountedDrives & (1 << i))

  00082	8b 44 24 5c	 mov	 eax, DWORD PTR _mountList$[esp+22228]
  00086	ba 01 00 00 00	 mov	 edx, 1
  0008b	8b ce		 mov	 ecx, esi
  0008d	d3 e2		 shl	 edx, cl
  0008f	85 d0		 test	 edx, eax
  00091	74 12		 je	 SHORT $LN24@DismountAl

; 3609 : 		{
; 3610 : 			if (bCloseDismountedWindows)

  00093	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bCloseDismountedWindows@@3HA, ebx ; bCloseDismountedWindows
  00099	74 0a		 je	 SHORT $LN24@DismountAl

; 3611 : 				CloseVolumeExplorerWindows (hwndDlg, i);

  0009b	56		 push	 esi
  0009c	57		 push	 edi
  0009d	e8 00 00 00 00	 call	 _CloseVolumeExplorerWindows
  000a2	83 c4 08	 add	 esp, 8
$LN24@DismountAl:
  000a5	46		 inc	 esi
  000a6	83 fe 1a	 cmp	 esi, 26			; 0000001aH
  000a9	7c d7		 jl	 SHORT $LL49@DismountAl

; 3612 : 		}
; 3613 : 	}
; 3614 : 
; 3615 : 	unmount.nDosDriveNo = 0;
; 3616 : 	unmount.ignoreOpenFiles = forceUnmount;

  000ab	8b 8c 24 d8 56
	00 00		 mov	 ecx, DWORD PTR _forceUnmount$[esp+22224]
  000b2	89 5c 24 14	 mov	 DWORD PTR _unmount$[esp+22228], ebx
  000b6	89 4c 24 18	 mov	 DWORD PTR _unmount$[esp+22232], ecx
  000ba	8d 9b 00 00 00
	00		 npad	 6
$LL20@DismountAl:

; 3617 : 
; 3618 : 	do
; 3619 : 	{
; 3620 : 		bResult = DeviceIoControl (hDriver, TC_IOCTL_DISMOUNT_ALL_VOLUMES, &unmount,
; 3621 : 			sizeof (unmount), &unmount, sizeof (unmount), &dwResult, NULL);

  000c0	53		 push	 ebx
  000c1	8d 54 24 14	 lea	 edx, DWORD PTR _dwResult$[esp+22232]
  000c5	52		 push	 edx
  000c6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDriver
  000cc	6a 10		 push	 16			; 00000010H
  000ce	8d 44 24 20	 lea	 eax, DWORD PTR _unmount$[esp+22240]
  000d2	50		 push	 eax
  000d3	6a 10		 push	 16			; 00000010H
  000d5	8b c8		 mov	 ecx, eax
  000d7	51		 push	 ecx
  000d8	68 14 20 22 00	 push	 2236436			; 00222014H
  000dd	52		 push	 edx
  000de	ff d5		 call	 ebp

; 3622 : 
; 3623 : 		if (bResult == FALSE)

  000e0	85 c0		 test	 eax, eax
  000e2	0f 84 6e 02 00
	00		 je	 $LN40@DismountAl

; 3628 : 		}
; 3629 : 
; 3630 : 		if (unmount.nReturnCode == ERR_SUCCESS
; 3631 : 			&& unmount.HiddenVolumeProtectionTriggered
; 3632 : 			&& !VolumeNotificationsList.bHidVolDamagePrevReported [unmount.nDosDriveNo])

  000e8	8b 44 24 20	 mov	 eax, DWORD PTR _unmount$[esp+22240]
  000ec	3b c3		 cmp	 eax, ebx
  000ee	75 6c		 jne	 SHORT $LN16@DismountAl
  000f0	39 5c 24 1c	 cmp	 DWORD PTR _unmount$[esp+22236], ebx
  000f4	0f 84 8c 00 00
	00		 je	 $LN18@DismountAl
  000fa	8b 44 24 14	 mov	 eax, DWORD PTR _unmount$[esp+22228]
  000fe	39 1c 85 00 00
	00 00		 cmp	 DWORD PTR _VolumeNotificationsList[eax*4], ebx
  00105	75 7f		 jne	 SHORT $LN18@DismountAl

; 3633 : 		{
; 3634 : 			wchar_t msg[4096];
; 3635 : 
; 3636 : 			VolumeNotificationsList.bHidVolDamagePrevReported [unmount.nDosDriveNo] = TRUE;

  00107	c7 04 85 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR _VolumeNotificationsList[eax*4], 1

; 3637 : 			swprintf (msg, GetString ("DAMAGE_TO_HIDDEN_VOLUME_PREVENTED"), unmount.nDosDriveNo + 'A');

  00112	83 c0 41	 add	 eax, 65			; 00000041H
  00115	50		 push	 eax
  00116	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@LCDEFKJP@DAMAGE_TO_HIDDEN_VOLUME_PREVENTE@
  0011b	e8 00 00 00 00	 call	 _GetString
  00120	83 c4 04	 add	 esp, 4
  00123	50		 push	 eax
  00124	8d 84 24 d8 36
	00 00		 lea	 eax, DWORD PTR _msg$137332[esp+22236]
  0012b	50		 push	 eax
  0012c	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  00131	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3638 : 			SetForegroundWindow (hwndDlg);

  00134	57		 push	 edi
  00135	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetForegroundWindow@4

; 3639 : 			MessageBoxW (hwndDlg, msg, lpszTitle, MB_ICONWARNING | MB_SETFOREGROUND | MB_TOPMOST);

  0013b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  00141	68 30 00 05 00	 push	 327728			; 00050030H
  00146	51		 push	 ecx
  00147	8d 94 24 d8 36
	00 00		 lea	 edx, DWORD PTR _msg$137332[esp+22236]
  0014e	52		 push	 edx
  0014f	57		 push	 edi
  00150	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 3640 : 
; 3641 : 			unmount.HiddenVolumeProtectionTriggered = FALSE;

  00156	89 5c 24 1c	 mov	 DWORD PTR _unmount$[esp+22236], ebx

; 3642 : 			continue;

  0015a	eb 13		 jmp	 SHORT $LN19@DismountAl
$LN16@DismountAl:

; 3643 : 		}
; 3644 : 
; 3645 : 		if (unmount.nReturnCode == ERR_FILES_OPEN)

  0015c	83 f8 06	 cmp	 eax, 6
  0015f	75 25		 jne	 SHORT $LN18@DismountAl

; 3646 : 			Sleep (dismountAutoRetryDelay);

  00161	8b 84 24 e4 56
	00 00		 mov	 eax, DWORD PTR _dismountAutoRetryDelay$[esp+22224]
  00168	50		 push	 eax
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
$LN19@DismountAl:

; 3647 : 		else
; 3648 : 			break;
; 3649 : 
; 3650 : 	} while (--dismountMaxRetries > 0);

  0016f	8b 84 24 e0 56
	00 00		 mov	 eax, DWORD PTR _dismountMaxRetries$[esp+22224]
  00176	48		 dec	 eax
  00177	3b c3		 cmp	 eax, ebx
  00179	89 84 24 e0 56
	00 00		 mov	 DWORD PTR _dismountMaxRetries$[esp+22224], eax
  00180	0f 8f 3a ff ff
	ff		 jg	 $LL20@DismountAl
$LN18@DismountAl:

; 3651 : 
; 3652 : 	memset (&mountList, 0, sizeof (mountList));

  00186	68 74 36 00 00	 push	 13940			; 00003674H
  0018b	8d 4c 24 60	 lea	 ecx, DWORD PTR _mountList$[esp+22232]
  0018f	53		 push	 ebx
  00190	51		 push	 ecx
  00191	e8 00 00 00 00	 call	 _memset
  00196	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3653 : 	DeviceIoControl (hDriver, TC_IOCTL_GET_MOUNTED_VOLUMES, &mountList, sizeof (mountList), &mountList, sizeof (mountList), &dwResult, NULL);

  00199	53		 push	 ebx
  0019a	8d 54 24 14	 lea	 edx, DWORD PTR _dwResult$[esp+22232]
  0019e	52		 push	 edx
  0019f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDriver
  001a5	68 74 36 00 00	 push	 13940			; 00003674H
  001aa	8d 44 24 68	 lea	 eax, DWORD PTR _mountList$[esp+22240]
  001ae	50		 push	 eax
  001af	68 74 36 00 00	 push	 13940			; 00003674H
  001b4	8b c8		 mov	 ecx, eax
  001b6	51		 push	 ecx
  001b7	68 18 20 22 00	 push	 2236440			; 00222018H
  001bc	52		 push	 edx
  001bd	ff d5		 call	 ebp

; 3654 : 	BroadcastDeviceChange (DBT_DEVICEREMOVECOMPLETE, 0, prevMountedDrives & ~mountList.ulMountedDrives);

  001bf	8b 44 24 5c	 mov	 eax, DWORD PTR _mountList$[esp+22228]
  001c3	f7 d0		 not	 eax
  001c5	23 44 24 24	 and	 eax, DWORD PTR _prevMountedDrives$[esp+22228]
  001c9	50		 push	 eax
  001ca	53		 push	 ebx
  001cb	68 04 80 00 00	 push	 32772			; 00008004H
  001d0	e8 00 00 00 00	 call	 _BroadcastDeviceChange
  001d5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3655 : 
; 3656 : 	RefreshMainDlg (hwndDlg);

  001d8	68 ef 03 00 00	 push	 1007			; 000003efH
  001dd	57		 push	 edi
  001de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001e4	53		 push	 ebx
  001e5	53		 push	 ebx
  001e6	8b f0		 mov	 esi, eax
  001e8	68 42 10 00 00	 push	 4162			; 00001042H
  001ed	56		 push	 esi
  001ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  001f4	8b e8		 mov	 ebp, eax
  001f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nSelectedDriveIndex@@3HA ; nSelectedDriveIndex
  001fb	3b c3		 cmp	 eax, ebx
  001fd	7c 02		 jl	 SHORT $LN33@DismountAl
  001ff	8b e8		 mov	 ebp, eax
$LN33@DismountAl:
  00201	6a 34		 push	 52			; 00000034H
  00203	8d 4c 24 2c	 lea	 ecx, DWORD PTR _item$183296[esp+22232]
  00207	53		 push	 ebx
  00208	51		 push	 ecx
  00209	e8 00 00 00 00	 call	 _memset
  0020e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00211	8d 54 24 28	 lea	 edx, DWORD PTR _item$183296[esp+22228]
  00215	52		 push	 edx
  00216	53		 push	 ebx
  00217	68 05 10 00 00	 push	 4101			; 00001005H
  0021c	56		 push	 esi
  0021d	c7 44 24 38 04
	00 00 00	 mov	 DWORD PTR _item$183296[esp+22244], 4
  00225	89 6c 24 3c	 mov	 DWORD PTR _item$183296[esp+22248], ebp
  00229	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0022f	85 c0		 test	 eax, eax
  00231	75 05		 jne	 SHORT $LN32@DismountAl
  00233	83 ce ff	 or	 esi, -1
  00236	eb 04		 jmp	 SHORT $LN31@DismountAl
$LN32@DismountAl:
  00238	8b 74 24 48	 mov	 esi, DWORD PTR _item$183296[esp+22260]
$LN31@DismountAl:
  0023c	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHistory
  00241	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__GetDlgItem@8
  00247	50		 push	 eax
  00248	68 0a 04 00 00	 push	 1034			; 0000040aH
  0024d	57		 push	 edi
  0024e	ff d5		 call	 ebp
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 _MoveEditToCombo
  00256	8b ce		 mov	 ecx, esi
  00258	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0025b	83 c4 08	 add	 esp, 8
  0025e	0f be d1	 movsx	 edx, cl
  00261	52		 push	 edx
  00262	68 ef 03 00 00	 push	 1007			; 000003efH
  00267	57		 push	 edi
  00268	ff d5		 call	 ebp
  0026a	50		 push	 eax
  0026b	e8 00 00 00 00	 call	 _LoadDriveLetters
  00270	57		 push	 edi
  00271	e8 00 00 00 00	 call	 _EnableDisableButtons
  00276	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3657 : 
; 3658 : 	if (nCurrentOS == WIN_2000 && RemoteSession && !IsAdmin ())

  00279	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _nCurrentOS, 7
  00280	75 23		 jne	 SHORT $LN13@DismountAl
  00282	39 1d 00 00 00
	00		 cmp	 DWORD PTR _RemoteSession, ebx
  00288	74 1b		 je	 SHORT $LN13@DismountAl
  0028a	e8 00 00 00 00	 call	 _IsAdmin
  0028f	85 c0		 test	 eax, eax
  00291	75 12		 jne	 SHORT $LN13@DismountAl

; 3659 : 		LoadDriveLetters (GetDlgItem (hwndDlg, IDC_DRIVELIST), 0);

  00293	53		 push	 ebx
  00294	68 ef 03 00 00	 push	 1007			; 000003efH
  00299	57		 push	 edi
  0029a	ff d5		 call	 ebp
  0029c	50		 push	 eax
  0029d	e8 00 00 00 00	 call	 _LoadDriveLetters
  002a2	83 c4 08	 add	 esp, 8
$LN13@DismountAl:

; 3660 : 
; 3661 : 	NormalCursor();

  002a5	e8 00 00 00 00	 call	 _NormalCursor

; 3662 : 
; 3663 : 	if (unmount.nReturnCode != 0)

  002aa	8b 44 24 20	 mov	 eax, DWORD PTR _unmount$[esp+22240]
  002ae	3b c3		 cmp	 eax, ebx
  002b0	0f 84 7e 01 00
	00		 je	 $LN12@DismountAl

; 3664 : 	{
; 3665 : 		if (forceUnmount)

  002b6	39 9c 24 d8 56
	00 00		 cmp	 DWORD PTR _forceUnmount$[esp+22224], ebx
  002bd	74 04		 je	 SHORT $LN47@DismountAl

; 3666 : 			status = FALSE;

  002bf	89 5c 24 0c	 mov	 DWORD PTR _status$[esp+22228], ebx
$LN47@DismountAl:

; 3667 : 
; 3668 : 		if (unmount.nReturnCode == ERR_FILES_OPEN)

  002c3	83 f8 06	 cmp	 eax, 6
  002c6	0f 85 3f 01 00
	00		 jne	 $LN10@DismountAl

; 3669 : 		{
; 3670 : 			if (interact && IDYES == AskWarnYesNoTopmost ("UNMOUNTALL_LOCK_FAILED"))

  002cc	39 9c 24 dc 56
	00 00		 cmp	 DWORD PTR _interact$[esp+22224], ebx
  002d3	0f 84 a5 00 00
	00		 je	 $LN9@DismountAl
  002d9	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@OGJNMHFJ@UNMOUNTALL_LOCK_FAILED?$AA@
  002de	e8 00 00 00 00	 call	 _AskWarnYesNoTopmost
  002e3	83 c4 04	 add	 esp, 4
  002e6	83 f8 06	 cmp	 eax, 6
  002e9	0f 85 8f 00 00
	00		 jne	 $LN9@DismountAl

; 3671 : 			{
; 3672 : 				forceUnmount = TRUE;

  002ef	c7 84 24 d8 56
	00 00 01 00 00
	00		 mov	 DWORD PTR _forceUnmount$[esp+22224], 1
  002fa	e8 00 00 00 00	 call	 _WaitCursor
  002ff	53		 push	 ebx
  00300	8d 44 24 14	 lea	 eax, DWORD PTR _dwResult$[esp+22232]
  00304	50		 push	 eax
  00305	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  0030a	68 74 36 00 00	 push	 13940			; 00003674H
  0030f	8d 4c 24 68	 lea	 ecx, DWORD PTR _mountList$[esp+22240]
  00313	51		 push	 ecx
  00314	68 74 36 00 00	 push	 13940			; 00003674H
  00319	8b d1		 mov	 edx, ecx
  0031b	52		 push	 edx
  0031c	68 18 20 22 00	 push	 2236440			; 00222018H
  00321	50		 push	 eax
  00322	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  00328	8b 44 24 5c	 mov	 eax, DWORD PTR _mountList$[esp+22228]
  0032c	3b c3		 cmp	 eax, ebx
  0032e	0f 85 2f fd ff
	ff		 jne	 $LL46@DismountAl
$LN42@DismountAl:

; 3597 : 	{
; 3598 : 		NormalCursor();

  00334	e8 00 00 00 00	 call	 _NormalCursor
  00339	5e		 pop	 esi
  0033a	5d		 pop	 ebp

; 3599 : 		return TRUE;

  0033b	b8 01 00 00 00	 mov	 eax, 1
  00340	5b		 pop	 ebx

; 3701 : 	}
; 3702 : 
; 3703 : 	return status;
; 3704 : }

  00341	8b 8c 24 c4 56
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+22216]
  00348	33 cc		 xor	 ecx, esp
  0034a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0034f	81 c4 c8 56 00
	00		 add	 esp, 22216		; 000056c8H
  00355	c3		 ret	 0
$LN40@DismountAl:

; 3624 : 		{
; 3625 : 			NormalCursor();

  00356	e8 00 00 00 00	 call	 _NormalCursor

; 3626 : 			handleWin32Error (hwndDlg);

  0035b	57		 push	 edi
  0035c	e8 00 00 00 00	 call	 _handleWin32Error
  00361	83 c4 04	 add	 esp, 4
  00364	5e		 pop	 esi
  00365	5d		 pop	 ebp

; 3627 : 			return FALSE;

  00366	33 c0		 xor	 eax, eax
  00368	5b		 pop	 ebx

; 3701 : 	}
; 3702 : 
; 3703 : 	return status;
; 3704 : }

  00369	8b 8c 24 c4 56
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+22216]
  00370	33 cc		 xor	 ecx, esp
  00372	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00377	81 c4 c8 56 00
	00		 add	 esp, 22216		; 000056c8H
  0037d	c3		 ret	 0
$LN9@DismountAl:

; 3673 : 				goto retry;
; 3674 : 			}
; 3675 : 
; 3676 : 			if (IsOSAtLeast (WIN_7))

  0037e	6a 0d		 push	 13			; 0000000dH
  00380	e8 00 00 00 00	 call	 _IsOSAtLeast
  00385	83 c4 04	 add	 esp, 4
  00388	85 c0		 test	 eax, eax
  0038a	74 65		 je	 SHORT $LN5@DismountAl

; 3677 : 			{
; 3678 : 				// Undo SHCNE_DRIVEREMOVED
; 3679 : 				DeviceIoControl (hDriver, TC_IOCTL_GET_MOUNTED_VOLUMES, NULL, 0, &mountList, sizeof (mountList), &dwResult, NULL);

  0038c	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  00391	53		 push	 ebx
  00392	8d 4c 24 14	 lea	 ecx, DWORD PTR _dwResult$[esp+22232]
  00396	51		 push	 ecx
  00397	68 74 36 00 00	 push	 13940			; 00003674H
  0039c	8d 54 24 68	 lea	 edx, DWORD PTR _mountList$[esp+22240]
  003a0	52		 push	 edx
  003a1	53		 push	 ebx
  003a2	53		 push	 ebx
  003a3	68 18 20 22 00	 push	 2236440			; 00222018H
  003a8	50		 push	 eax
  003a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 3680 : 
; 3681 : 				for (i = 0; i < 26; i++)

  003af	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SHChangeNotify@16
$LL7@DismountAl:

; 3682 : 				{
; 3683 : 					if (mountList.ulMountedDrives & (1 << i))

  003b5	ba 01 00 00 00	 mov	 edx, 1
  003ba	8b cb		 mov	 ecx, ebx
  003bc	d3 e2		 shl	 edx, cl
  003be	85 54 24 5c	 test	 DWORD PTR _mountList$[esp+22228], edx
  003c2	74 27		 je	 SHORT $LN6@DismountAl

; 3684 : 					{
; 3685 : 						char root[] = { (char) i + 'A', ':', '\\', 0 };
; 3686 : 						SHChangeNotify (SHCNE_DRIVEADD, SHCNF_PATH, root, NULL);

  003c4	6a 00		 push	 0
  003c6	8d 4c 24 10	 lea	 ecx, DWORD PTR _root$137346[esp+22232]
  003ca	51		 push	 ecx
  003cb	8a c3		 mov	 al, bl
  003cd	6a 01		 push	 1
  003cf	04 41		 add	 al, 65			; 00000041H
  003d1	68 00 01 00 00	 push	 256			; 00000100H
  003d6	88 44 24 1c	 mov	 BYTE PTR _root$137346[esp+22244], al
  003da	c6 44 24 1d 3a	 mov	 BYTE PTR _root$137346[esp+22245], 58 ; 0000003aH
  003df	c6 44 24 1e 5c	 mov	 BYTE PTR _root$137346[esp+22246], 92 ; 0000005cH
  003e4	c6 44 24 1f 00	 mov	 BYTE PTR _root$137346[esp+22247], 0
  003e9	ff d6		 call	 esi
$LN6@DismountAl:
  003eb	43		 inc	 ebx
  003ec	83 fb 1a	 cmp	 ebx, 26			; 0000001aH
  003ef	7c c4		 jl	 SHORT $LL7@DismountAl
$LN5@DismountAl:
  003f1	5e		 pop	 esi
  003f2	5d		 pop	 ebp

; 3687 : 					}
; 3688 : 				}
; 3689 : 			}
; 3690 : 
; 3691 : 			return FALSE;

  003f3	33 c0		 xor	 eax, eax
  003f5	5b		 pop	 ebx

; 3701 : 	}
; 3702 : 
; 3703 : 	return status;
; 3704 : }

  003f6	8b 8c 24 c4 56
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+22216]
  003fd	33 cc		 xor	 ecx, esp
  003ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00404	81 c4 c8 56 00
	00		 add	 esp, 22216		; 000056c8H
  0040a	c3		 ret	 0
$LN10@DismountAl:

; 3692 : 		}
; 3693 : 		
; 3694 : 		if (interact)

  0040b	39 9c 24 dc 56
	00 00		 cmp	 DWORD PTR _interact$[esp+22224], ebx
  00412	74 30		 je	 SHORT $LN48@DismountAl

; 3695 : 			MessageBoxW (hwndDlg, GetString ("UNMOUNT_FAILED"), lpszTitle, MB_ICONERROR);

  00414	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  0041a	6a 10		 push	 16			; 00000010H
  0041c	52		 push	 edx
  0041d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@INOOLPM@UNMOUNT_FAILED?$AA@
  00422	e8 00 00 00 00	 call	 _GetString
  00427	83 c4 04	 add	 esp, 4
  0042a	50		 push	 eax
  0042b	57		 push	 edi
  0042c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 3696 : 	}
; 3697 : 	else

  00432	eb 10		 jmp	 SHORT $LN48@DismountAl
$LN12@DismountAl:

; 3698 : 	{
; 3699 : 		if (bBeep)

  00434	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bBeep@@3HA, ebx ; bBeep
  0043a	74 08		 je	 SHORT $LN48@DismountAl

; 3700 : 			MessageBeep (0xFFFFFFFF);

  0043c	6a ff		 push	 -1
  0043e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBeep@4
$LN48@DismountAl:

; 3701 : 	}
; 3702 : 
; 3703 : 	return status;
; 3704 : }

  00444	8b 8c 24 d0 56
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+22228]
  0044b	8b 44 24 0c	 mov	 eax, DWORD PTR _status$[esp+22228]
  0044f	5e		 pop	 esi
  00450	5d		 pop	 ebp
  00451	5b		 pop	 ebx
  00452	33 cc		 xor	 ecx, esp
  00454	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00459	81 c4 c8 56 00
	00		 add	 esp, 22216		; 000056c8H
  0045f	c3		 ret	 0
_DismountAll ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@EKDDCIEI@SYS_HKD_ALGO_CHANGED_ASK_RESCUE_@ ; `string'
PUBLIC	??_C@_0CF@MIEAFHMK@SYS_PASSWORD_CHANGED_ASK_RESCUE_@ ; `string'
;	COMDAT ??_C@_0CF@EKDDCIEI@SYS_HKD_ALGO_CHANGED_ASK_RESCUE_@
CONST	SEGMENT
??_C@_0CF@EKDDCIEI@SYS_HKD_ALGO_CHANGED_ASK_RESCUE_@ DB 'SYS_HKD_ALGO_CHA'
	DB	'NGED_ASK_RESCUE_DISK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MIEAFHMK@SYS_PASSWORD_CHANGED_ASK_RESCUE_@
CONST	SEGMENT
??_C@_0CF@MIEAFHMK@SYS_PASSWORD_CHANGED_ASK_RESCUE_@ DB 'SYS_PASSWORD_CHA'
	DB	'NGED_ASK_RESCUE_DISK', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z$0
__unwindtable$?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z$2
__ehfuncinfo$?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z
	DD	01H
	DD	FLAT:__tryblocktable$?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z
_TEXT	SEGMENT
$T183318 = -114						; size = 94
_e$137752 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_hwndDlg$ = 8						; size = 4
_bOnlyChangeKDF$ = 12					; size = 4
?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z PROC		; ChangeSysEncPassword, COMDAT

; 3980 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 3981 : 	try
; 3982 : 	{
; 3983 : 		BootEncStatus = BootEncObj->GetStatus();

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00031	8d 45 8e	 lea	 eax, DWORD PTR $T183318[ebp]
  00034	33 db		 xor	 ebx, ebx
  00036	50		 push	 eax
  00037	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  0003a	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0003f	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00044	8b f0		 mov	 esi, eax
  00046	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  0004b	f3 a5		 rep movsd
  0004d	66 a5		 movsw
  0004f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00056	eb 1e		 jmp	 SHORT $LN27@ChangeSysE
__catch$?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z$0:

; 3984 : 	}
; 3985 : 	catch (Exception &e)
; 3986 : 	{
; 3987 : 		e.Show (MainDlg);

  00058	8b 4d ec	 mov	 ecx, DWORD PTR _e$137752[ebp]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00062	8b 12		 mov	 edx, DWORD PTR [edx]
  00064	50		 push	 eax
  00065	ff d2		 call	 edx

; 3988 : 	}

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0006e	b8 00 00 00 00	 mov	 eax, $LN29@ChangeSysE
  00073	c3		 ret	 0
$LN29@ChangeSysE:
  00074	33 db		 xor	 ebx, ebx
$LN27@ChangeSysE:

; 3989 : 
; 3990 : 	if (!BootEncStatus.DriveEncrypted 
; 3991 : 		&& !BootEncStatus.DriveMounted
; 3992 : 		&& !BootEncStatus.VolumeHeaderPresent
; 3993 : 		&& !SysEncryptionOrDecryptionRequired ())

  00076	39 1d 0e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14, ebx
  0007c	75 23		 jne	 SHORT $LN20@ChangeSysE
  0007e	39 1d 06 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, ebx
  00084	75 1b		 jne	 SHORT $LN20@ChangeSysE
  00086	39 1d 0a 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+10, ebx
  0008c	75 13		 jne	 SHORT $LN20@ChangeSysE
  0008e	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  00093	85 c0		 test	 eax, eax
  00095	75 0a		 jne	 SHORT $LN20@ChangeSysE

; 3994 : 	{
; 3995 : 		Warning ("SYS_DRIVE_NOT_ENCRYPTED");

  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BHICMCGD@SYS_DRIVE_NOT_ENCRYPTED?$AA@

; 3996 : 		return;

  0009c	e9 33 01 00 00	 jmp	 $LN32@ChangeSysE
$LN20@ChangeSysE:

; 3997 : 	}
; 3998 : 
; 3999 : 	if (SysEncryptionOrDecryptionRequired () 
; 4000 : 		|| BootEncStatus.SetupInProgress)

  000a1	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  000a6	85 c0		 test	 eax, eax
  000a8	0f 85 21 01 00
	00		 jne	 $LN18@ChangeSysE
  000ae	39 1d 3e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, ebx
  000b4	0f 85 15 01 00
	00		 jne	 $LN18@ChangeSysE

; 4003 : 		return;
; 4004 : 	}
; 4005 : 
; 4006 : 	if (CreateSysEncMutex ())	// If no instance of the wizard is currently taking care of system encryption

  000ba	e8 00 00 00 00	 call	 _CreateSysEncMutex
  000bf	85 c0		 test	 eax, eax
  000c1	0f 84 01 01 00
	00		 je	 $LN17@ChangeSysE

; 4007 : 	{
; 4008 : 		sprintf (OrigKeyboardLayout, "%08X", (DWORD) GetKeyboardLayout (NULL) & 0xFFFF);

  000c7	53		 push	 ebx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyboardLayout@4
  000ce	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000d3	50		 push	 eax
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMNDDED@?$CF08X?$AA@
  000d9	68 00 00 00 00	 push	 OFFSET ?OrigKeyboardLayout@@3PADA ; OrigKeyboardLayout
  000de	e8 00 00 00 00	 call	 _sprintf

; 4009 : 
; 4010 : 		bSysEncPwdChangeDlgMode = TRUE;
; 4011 : 
; 4012 : 		if (bOnlyChangeKDF)
; 4013 : 			pwdChangeDlgMode = PCDM_CHANGE_PKCS5_PRF;
; 4014 : 		else
; 4015 : 			pwdChangeDlgMode = PCDM_CHANGE_PASSWORD;
; 4016 : 
; 4017 : 
; 4018 : 		INT_PTR result = DialogBoxW (hInst, MAKEINTRESOURCEW (IDD_PASSWORDCHANGE_DLG), hwndDlg, (DLGPROC) PasswordChangeDlgProc);

  000e3	8b 4d 08	 mov	 ecx, DWORD PTR _hwndDlg$[ebp]
  000e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  000ec	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ef	33 c0		 xor	 eax, eax
  000f1	39 5d 0c	 cmp	 DWORD PTR _bOnlyChangeKDF$[ebp], ebx
  000f4	53		 push	 ebx
  000f5	68 00 00 00 00	 push	 OFFSET _PasswordChangeDlgProc@16
  000fa	0f 95 c0	 setne	 al
  000fd	51		 push	 ecx
  000fe	6a 66		 push	 102			; 00000066H
  00100	52		 push	 edx
  00101	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bSysEncPwdChangeDlgMode, 1
  0010b	a3 00 00 00 00	 mov	 DWORD PTR _pwdChangeDlgMode, eax
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  00116	8b f0		 mov	 esi, eax

; 4019 : 
; 4020 : 		bSysEncPwdChangeDlgMode = FALSE;

  00118	89 1d 00 00 00
	00		 mov	 DWORD PTR _bSysEncPwdChangeDlgMode, ebx

; 4021 : 
; 4022 : 		if (bKeyboardLayoutChanged)

  0011e	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, ebx ; bKeyboardLayoutChanged
  00124	74 26		 je	 SHORT $LN12@ChangeSysE

; 4023 : 		{
; 4024 : 			// Restore the original keyboard layout
; 4025 : 			if (LoadKeyboardLayout (OrigKeyboardLayout, KLF_ACTIVATE | KLF_SUBSTITUTE_OK) == NULL) 

  00126	6a 03		 push	 3
  00128	68 00 00 00 00	 push	 OFFSET ?OrigKeyboardLayout@@3PADA ; OrigKeyboardLayout
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadKeyboardLayoutA@8
  00133	85 c0		 test	 eax, eax
  00135	75 0f		 jne	 SHORT $LN13@ChangeSysE

; 4026 : 				Warning ("CANNOT_RESTORE_KEYBOARD_LAYOUT");

  00137	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BGCHIACG@CANNOT_RESTORE_KEYBOARD_LAYOUT?$AA@
  0013c	e8 00 00 00 00	 call	 _Warning
  00141	83 c4 04	 add	 esp, 4

; 4027 : 			else

  00144	eb 06		 jmp	 SHORT $LN12@ChangeSysE
$LN13@ChangeSysE:

; 4028 : 				bKeyboardLayoutChanged = FALSE;

  00146	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, ebx ; bKeyboardLayoutChanged
$LN12@ChangeSysE:

; 4029 : 		}
; 4030 : 
; 4031 : 		bKeybLayoutAltKeyWarningShown = FALSE;

  0014c	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bKeybLayoutAltKeyWarningShown@@3HA, ebx ; bKeybLayoutAltKeyWarningShown

; 4032 : 
; 4033 : 		if (result == IDOK)

  00152	83 fe 01	 cmp	 esi, 1
  00155	75 5a		 jne	 SHORT $LN6@ChangeSysE

; 4034 : 		{
; 4035 : 			switch (pwdChangeDlgMode)

  00157	a1 00 00 00 00	 mov	 eax, DWORD PTR _pwdChangeDlgMode
  0015c	3b c6		 cmp	 eax, esi
  0015e	74 24		 je	 SHORT $LN8@ChangeSysE
  00160	7e 05		 jle	 SHORT $LN4@ChangeSysE
  00162	83 f8 03	 cmp	 eax, 3
  00165	7e 4a		 jle	 SHORT $LN6@ChangeSysE
$LN4@ChangeSysE:

; 4044 : 				}
; 4045 : 
; 4046 : 				break;
; 4047 : 
; 4048 : 			case PCDM_ADD_REMOVE_VOL_KEYFILES:
; 4049 : 			case PCDM_REMOVE_ALL_KEYFILES_FROM_VOL:
; 4050 : 				// NOP - Keyfiles are not supported for system encryption
; 4051 : 				break;
; 4052 : 
; 4053 : 			case PCDM_CHANGE_PASSWORD:
; 4054 : 			default:
; 4055 : 				Info ("PASSWORD_CHANGED");

  00167	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DEPMFMC@PASSWORD_CHANGED?$AA@
  0016c	e8 00 00 00 00	 call	 _Info
  00171	83 c4 04	 add	 esp, 4

; 4056 : 
; 4057 : 				if (!IsHiddenOSRunning())

  00174	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00179	85 c0		 test	 eax, eax
  0017b	75 34		 jne	 SHORT $LN6@ChangeSysE

; 4058 : 				{
; 4059 : 					if (AskWarnYesNo ("SYS_PASSWORD_CHANGED_ASK_RESCUE_DISK") == IDYES)

  0017d	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@MIEAFHMK@SYS_PASSWORD_CHANGED_ASK_RESCUE_@

; 4060 : 						CreateRescueDisk ();

  00182	eb 1b		 jmp	 SHORT $LN34@ChangeSysE
$LN8@ChangeSysE:

; 4036 : 			{
; 4037 : 			case PCDM_CHANGE_PKCS5_PRF:
; 4038 : 				Info ("PKCS5_PRF_CHANGED");

  00184	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EIILMKAM@PKCS5_PRF_CHANGED?$AA@
  00189	e8 00 00 00 00	 call	 _Info
  0018e	83 c4 04	 add	 esp, 4

; 4039 : 
; 4040 : 				if (!IsHiddenOSRunning())

  00191	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00196	85 c0		 test	 eax, eax
  00198	75 17		 jne	 SHORT $LN6@ChangeSysE

; 4041 : 				{
; 4042 : 					if (AskWarnYesNo ("SYS_HKD_ALGO_CHANGED_ASK_RESCUE_DISK") == IDYES)

  0019a	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@EKDDCIEI@SYS_HKD_ALGO_CHANGED_ASK_RESCUE_@
$LN34@ChangeSysE:
  0019f	e8 00 00 00 00	 call	 _AskWarnYesNo
  001a4	83 c4 04	 add	 esp, 4
  001a7	83 f8 06	 cmp	 eax, 6
  001aa	75 05		 jne	 SHORT $LN6@ChangeSysE

; 4043 : 						CreateRescueDisk ();

  001ac	e8 00 00 00 00	 call	 _CreateRescueDisk
$LN6@ChangeSysE:

; 4061 : 				}
; 4062 : 			}
; 4063 : 		}
; 4064 : 
; 4065 : 		CloseSysEncMutex ();

  001b1	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 4069 : }

  001b6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001b9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c0	59		 pop	 ecx
  001c1	5f		 pop	 edi
  001c2	5e		 pop	 esi
  001c3	5b		 pop	 ebx
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN17@ChangeSysE:

; 4066 : 	}
; 4067 : 	else
; 4068 : 		Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  001c8	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  001cd	eb 05		 jmp	 SHORT $LN32@ChangeSysE
$LN18@ChangeSysE:

; 4001 : 	{
; 4002 : 		Warning ("SYSTEM_ENCRYPTION_NOT_COMPLETED");

  001cf	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@CIGKJDHB@SYSTEM_ENCRYPTION_NOT_COMPLETED?$AA@
$LN32@ChangeSysE:
  001d4	e8 00 00 00 00	 call	 _Warning
  001d9	83 c4 04	 add	 esp, 4

; 4069 : }

  001dc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001df	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e6	59		 pop	 ecx
  001e7	5f		 pop	 edi
  001e8	5e		 pop	 esi
  001e9	5b		 pop	 ebx
  001ea	8b e5		 mov	 esp, ebp
  001ec	5d		 pop	 ebp
  001ed	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z ENDP		; ChangeSysEncPassword
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx

; 54   : 		if (_State != goodbit)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __State$[esp-4]
  00004	85 d2		 test	 edx, edx
  00006	74 17		 je	 SHORT $LN6@setstate

; 55   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00008	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000b	0b c2		 or	 eax, edx
  0000d	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00011	75 03		 jne	 SHORT $LN8@setstate
  00013	83 c8 04	 or	 eax, 4
$LN8@setstate:
  00016	89 44 24 04	 mov	 DWORD PTR __State$[esp-4], eax
  0001a	e9 00 00 00 00	 jmp	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN6@setstate:

; 56   : 		}

  0001f	c2 08 00	 ret	 8
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
PUBLIC	??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	6a 04		 push	 4
  00026	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002b	33 c9		 xor	 ecx, ecx
  0002d	83 c4 04	 add	 esp, 4
  00030	3b c1		 cmp	 eax, ecx
  00032	74 04		 je	 SHORT $LN13@vector
  00034	89 30		 mov	 DWORD PTR [eax], esi
  00036	eb 02		 jmp	 SHORT $LN14@vector
$LN13@vector:
  00038	33 c0		 xor	 eax, eax
$LN14@vector:
  0003a	89 06		 mov	 DWORD PTR [esi], eax

; 471  : 		_Buy(0);

  0003c	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0003f	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00042	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 472  : 		}

  00045	8b c6		 mov	 eax, esi
  00047	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
PUBLIC	??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	6a 04		 push	 4
  00026	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002b	33 c9		 xor	 ecx, ecx
  0002d	83 c4 04	 add	 esp, 4
  00030	3b c1		 cmp	 eax, ecx
  00032	74 04		 je	 SHORT $LN13@vector@2
  00034	89 30		 mov	 DWORD PTR [eax], esi
  00036	eb 02		 jmp	 SHORT $LN14@vector@2
$LN13@vector@2:
  00038	33 c0		 xor	 eax, eax
$LN14@vector@2:
  0003a	89 06		 mov	 DWORD PTR [esi], eax

; 471  : 		_Buy(0);

  0003c	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0003f	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00042	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 472  : 		}

  00045	8b c6		 mov	 eax, esi
  00047	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
PUBLIC	?erase@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?erase@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
$T183745 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?erase@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase, COMDAT
; _this$ = ecx

; 786  : 		{	// erase element at _Where

  00000	83 ec 08	 sub	 esp, 8

; 787  : 
; 788  :  #if _HAS_ITERATOR_DEBUGGING
; 789  : 		if (_Where._Mycont != this || _Where._Ptr == _Myhead)
; 790  : 			_DEBUG_ERROR("list erase iterator outside range");
; 791  : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 792  : 		_Orphan_ptr(*this, _Pnode);
; 793  : 
; 794  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 795  : 		_Nodeptr _Pnode = (_Where++)._Mynode();

  00003	8b 44 24 10	 mov	 eax, DWORD PTR __Where$[esp+4]
  00007	56		 push	 esi
  00008	8b 74 24 18	 mov	 esi, DWORD PTR __Where$[esp+12]
  0000c	57		 push	 edi
  0000d	8b f9		 mov	 edi, ecx
  0000f	89 44 24 08	 mov	 DWORD PTR $T183745[esp+16], eax
  00013	85 c0		 test	 eax, eax
  00015	75 0d		 jne	 SHORT $LN72@erase@6
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0001c	8b 44 24 18	 mov	 eax, DWORD PTR __Where$[esp+12]
  00020	85 c0		 test	 eax, eax
  00022	74 04		 je	 SHORT $LN22@erase@6
$LN72@erase@6:
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	eb 02		 jmp	 SHORT $LN23@erase@6
$LN22@erase@6:
  00028	33 c0		 xor	 eax, eax
$LN23@erase@6:
  0002a	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Where$[esp+16]
  0002e	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00031	75 05		 jne	 SHORT $LN8@erase@6
  00033	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@erase@6:
  00038	8b 54 24 1c	 mov	 edx, DWORD PTR __Where$[esp+16]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	89 44 24 1c	 mov	 DWORD PTR __Where$[esp+16], eax

; 796  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 797  : 
; 798  : 		if (_Pnode != _Myhead)

  00042	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  00045	74 23		 je	 SHORT $LN1@erase@6

; 799  : 			{	// not list head, safe to erase
; 800  : 			_Nextnode(_Prevnode(_Pnode)) = _Nextnode(_Pnode);

  00047	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0004a	8b 16		 mov	 edx, DWORD PTR [esi]
  0004c	89 11		 mov	 DWORD PTR [ecx], edx

; 801  : 			_Prevnode(_Nextnode(_Pnode)) = _Prevnode(_Pnode);

  0004e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00051	8b 06		 mov	 eax, DWORD PTR [esi]
  00053	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 802  : 			this->_Alnod.destroy(_Pnode);

  00056	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00059	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ

; 803  : 			this->_Alnod.deallocate(_Pnode, 1);

  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00064	83 c4 04	 add	 esp, 4

; 804  : 			--_Mysize;

  00067	ff 4f 18	 dec	 DWORD PTR [edi+24]
$LN1@erase@6:

; 805  : 			}
; 806  : 		return (_Make_iter(_Where));

  0006a	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0006c	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  00070	8b 54 24 1c	 mov	 edx, DWORD PTR __Where$[esp+16]
  00074	5f		 pop	 edi
  00075	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00078	89 08		 mov	 DWORD PTR [eax], ecx
  0007a	5e		 pop	 esi

; 807  : 		}

  0007b	83 c4 08	 add	 esp, 8
  0007e	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy, COMDAT
; _this$ = ecx

; 1212 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1213 : 		clear();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear

; 1214 : 		this->_Alptr.destroy(&_Nextnode(_Myhead));
; 1215 : 		this->_Alptr.destroy(&_Prevnode(_Myhead));
; 1216 : 		this->_Alnod.deallocate(_Myhead, 1);

  00008	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	83 c4 04	 add	 esp, 4

; 1217 : 		_Myhead = 0;

  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	5e		 pop	 esi

; 1218 : 		}

  0001c	c3		 ret	 0
?_Tidy@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Insert@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Insert
; Function compile flags: /Ogtpy
;	COMDAT ?_Insert@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
__Val$ = 16						; size = 4
?_Insert@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Insert, COMDAT
; _this$ = ecx

; 711  : 
; 712  :  #if _HAS_ITERATOR_DEBUGGING
; 713  : 		if (_Where._Mycont != this)
; 714  : 			_DEBUG_ERROR("list insert iterator outside range");
; 715  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 716  : 
; 717  : 		_Nodeptr _Pnode = _Where._Mynode();
; 718  : 		_Nodeptr _Newnode = _Buynode(_Pnode, _Prevnode(_Pnode), _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Where$[esp]
  00004	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 4c 24 18	 mov	 ecx, DWORD PTR __Val$[esp+8]
  00010	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  00013	51		 push	 ecx
  00014	52		 push	 edx
  00015	50		 push	 eax
  00016	8b cf		 mov	 ecx, edi
  00018	e8 00 00 00 00	 call	 ?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Buynode

; 719  : 		_Incsize(1);

  0001d	6a 01		 push	 1
  0001f	8b cf		 mov	 ecx, edi
  00021	8b f0		 mov	 esi, eax
  00023	e8 00 00 00 00	 call	 ?_Incsize@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Incsize

; 720  : 		_Prevnode(_Pnode) = _Newnode;

  00028	89 33		 mov	 DWORD PTR [ebx], esi

; 721  : 		_Nextnode(_Prevnode(_Newnode)) = _Newnode;

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	5f		 pop	 edi
  0002e	89 30		 mov	 DWORD PTR [eax], esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx

; 722  : 		}

  00032	c2 0c 00	 ret	 12			; 0000000cH
?_Insert@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Insert
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1212 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1213 : 		clear();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear

; 1214 : 		this->_Alptr.destroy(&_Nextnode(_Myhead));
; 1215 : 		this->_Alptr.destroy(&_Prevnode(_Myhead));
; 1216 : 		this->_Alnod.deallocate(_Myhead, 1);

  00008	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	83 c4 04	 add	 esp, 4

; 1217 : 		_Myhead = 0;

  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	5e		 pop	 esi

; 1218 : 		}

  0001c	c3		 ret	 0
?_Tidy@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
_TEXT	ENDS
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$3
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -92				; size = 4
$T183993 = -88						; size = 8
$T183988 = -88						; size = 4
$T183990 = -80						; size = 28
$T183989 = -80						; size = 28
$T183994 = -52						; size = 8
__Str$143838 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 1
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1123 : 		{	// put formatted bool to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 50	 sub	 esp, 80			; 00000050H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 4c	 mov	 DWORD PTR __$ArrayPad$[esp+92], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 64	 lea	 eax, DWORD PTR __$EHRec$[esp+112]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+108]

; 1124 : 		_DEBUG_POINTER(_Dest);
; 1125 : 		if (!(_Iosbase.flags() & ios_base::boolalpha))

  00039	f7 45 10 00 40
	00 00		 test	 DWORD PTR [ebp+16], 16384 ; 00004000H
  00040	8b 74 24 74	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+108]
  00044	8b f9		 mov	 edi, ecx

; 1144 : 				}
; 1145 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  00046	89 74 24 14	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+112], esi
  0004a	75 31		 jne	 SHORT $LN5@do_put
  0004c	0f b6 8c 24 88
	00 00 00	 movzx	 ecx, BYTE PTR __Val$[esp+108]
  00054	8b 94 24 84 00
	00 00		 mov	 edx, DWORD PTR __Fill$[esp+108]
  0005b	8b 07		 mov	 eax, DWORD PTR [edi]
  0005d	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00060	51		 push	 ecx
  00061	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+116]
  00068	52		 push	 edx
  00069	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+116]
  00070	55		 push	 ebp
  00071	51		 push	 ecx
  00072	52		 push	 edx
  00073	56		 push	 esi
  00074	8b cf		 mov	 ecx, edi
  00076	ff d0		 call	 eax
  00078	e9 75 01 00 00	 jmp	 $LN142@do_put
$LN5@do_put:

; 1126 : 			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
; 1127 : 		else
; 1128 : 			{	// put "false" or "true"
; 1129 : 			const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  0007d	8d 4c 24 18	 lea	 ecx, DWORD PTR $T183988[esp+112]
  00081	51		 push	 ecx
  00082	8b cd		 mov	 ecx, ebp
  00084	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00089	33 db		 xor	 ebx, ebx
  0008b	50		 push	 eax
  0008c	89 5c 24 70	 mov	 DWORD PTR __$EHRec$[esp+124], ebx
  00090	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  00095	83 c4 04	 add	 esp, 4
  00098	8d 4c 24 18	 lea	 ecx, DWORD PTR $T183988[esp+112]
  0009c	8b f0		 mov	 esi, eax
  0009e	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 1130 : 			_Mystr _Str;

  000a3	c7 44 24 5c 0f
	00 00 00	 mov	 DWORD PTR __Str$143838[esp+136], 15 ; 0000000fH
  000ab	89 5c 24 58	 mov	 DWORD PTR __Str$143838[esp+132], ebx
  000af	88 5c 24 48	 mov	 BYTE PTR __Str$143838[esp+116], bl

; 1131 : 			if (_Val)

  000b3	80 bc 24 88 00
	00 00 00	 cmp	 BYTE PTR __Val$[esp+108], 0
  000bb	bb 01 00 00 00	 mov	 ebx, 1
  000c0	89 5c 24 6c	 mov	 DWORD PTR __$EHRec$[esp+120], ebx
  000c4	74 31		 je	 SHORT $LN3@do_put

; 1132 : 				_Str.assign(_Punct_fac.truename());

  000c6	8d 54 24 20	 lea	 edx, DWORD PTR $T183989[esp+112]
  000ca	52		 push	 edx
  000cb	8b ce		 mov	 ecx, esi
  000cd	e8 00 00 00 00	 call	 ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
  000d2	6a ff		 push	 -1
  000d4	6a 00		 push	 0
  000d6	50		 push	 eax
  000d7	8d 4c 24 50	 lea	 ecx, DWORD PTR __Str$143838[esp+124]
  000db	c6 44 24 78 02	 mov	 BYTE PTR __$EHRec$[esp+132], 2
  000e0	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000e5	83 7c 24 38 10	 cmp	 DWORD PTR $T183989[esp+136], 16 ; 00000010H
  000ea	88 5c 24 6c	 mov	 BYTE PTR __$EHRec$[esp+120], bl
  000ee	72 3e		 jb	 SHORT $LN94@do_put
  000f0	8b 44 24 24	 mov	 eax, DWORD PTR $T183989[esp+116]
  000f4	50		 push	 eax

; 1133 : 			else

  000f5	eb 2f		 jmp	 SHORT $LN155@do_put
$LN3@do_put:

; 1134 : 				_Str.assign(_Punct_fac.falsename());

  000f7	8d 4c 24 20	 lea	 ecx, DWORD PTR $T183990[esp+112]
  000fb	51		 push	 ecx
  000fc	8b ce		 mov	 ecx, esi
  000fe	e8 00 00 00 00	 call	 ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
  00103	6a ff		 push	 -1
  00105	6a 00		 push	 0
  00107	50		 push	 eax
  00108	8d 4c 24 50	 lea	 ecx, DWORD PTR __Str$143838[esp+124]
  0010c	c6 44 24 78 03	 mov	 BYTE PTR __$EHRec$[esp+132], 3
  00111	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00116	83 7c 24 38 10	 cmp	 DWORD PTR $T183990[esp+136], 16 ; 00000010H
  0011b	88 5c 24 6c	 mov	 BYTE PTR __$EHRec$[esp+120], bl
  0011f	72 0d		 jb	 SHORT $LN94@do_put
  00121	8b 54 24 24	 mov	 edx, DWORD PTR $T183990[esp+116]
  00125	52		 push	 edx
$LN155@do_put:
  00126	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012b	83 c4 04	 add	 esp, 4
$LN94@do_put:

; 1135 : 
; 1136 : 			size_t _Fillcount = _Iosbase.width() <= 0
; 1137 : 				|| (size_t)_Iosbase.width() <= _Str.size()
; 1138 : 					? 0 : (size_t)_Iosbase.width() - _Str.size();

  0012e	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00131	8b 4c 24 58	 mov	 ecx, DWORD PTR __Str$143838[esp+132]
  00135	85 c0		 test	 eax, eax
  00137	7e 0a		 jle	 SHORT $LN8@do_put
  00139	3b c1		 cmp	 eax, ecx
  0013b	76 06		 jbe	 SHORT $LN8@do_put
  0013d	2b c1		 sub	 eax, ecx
  0013f	8b f0		 mov	 esi, eax
  00141	eb 02		 jmp	 SHORT $LN9@do_put
$LN8@do_put:
  00143	33 f6		 xor	 esi, esi
$LN9@do_put:

; 1139 : 
; 1140 : 			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)

  00145	8b 45 10	 mov	 eax, DWORD PTR [ebp+16]
  00148	8b 9c 24 84 00
	00 00		 mov	 ebx, DWORD PTR __Fill$[esp+108]
  0014f	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00154	83 f8 40	 cmp	 eax, 64			; 00000040H
  00157	74 30		 je	 SHORT $LN1@do_put

; 1141 : 				{	// put leading fill
; 1142 : 				_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00159	8b 4c 24 7c	 mov	 ecx, DWORD PTR __Dest$[esp+112]
  0015d	8b 54 24 78	 mov	 edx, DWORD PTR __Dest$[esp+108]
  00161	56		 push	 esi
  00162	53		 push	 ebx
  00163	51		 push	 ecx
  00164	52		 push	 edx
  00165	8d 44 24 28	 lea	 eax, DWORD PTR $T183993[esp+128]
  00169	50		 push	 eax
  0016a	57		 push	 edi
  0016b	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00170	8b 08		 mov	 ecx, DWORD PTR [eax]
  00172	89 8c 24 90 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], ecx
  00179	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1143 : 				_Fillcount = 0;

  0017c	8b 4c 24 70	 mov	 ecx, DWORD PTR __Str$143838[esp+156]
  00180	83 c4 18	 add	 esp, 24			; 00000018H
  00183	89 54 24 7c	 mov	 DWORD PTR __Dest$[esp+112], edx
  00187	33 f6		 xor	 esi, esi
$LN1@do_put:

; 1144 : 				}
; 1145 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  00189	83 7c 24 5c 10	 cmp	 DWORD PTR __Str$143838[esp+136], 16 ; 00000010H
  0018e	8b 44 24 48	 mov	 eax, DWORD PTR __Str$143838[esp+116]
  00192	73 04		 jae	 SHORT $LN123@do_put
  00194	8d 44 24 48	 lea	 eax, DWORD PTR __Str$143838[esp+116]
$LN123@do_put:
  00198	51		 push	 ecx
  00199	8b 4c 24 7c	 mov	 ecx, DWORD PTR __Dest$[esp+112]
  0019d	50		 push	 eax
  0019e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+120]
  001a5	50		 push	 eax
  001a6	51		 push	 ecx
  001a7	8d 54 24 4c	 lea	 edx, DWORD PTR $T183994[esp+128]
  001ab	52		 push	 edx
  001ac	57		 push	 edi
  001ad	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  001b2	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1146 : 			_Iosbase.width(0);
; 1147 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  001b4	56		 push	 esi
  001b5	8b 74 24 30	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+140]
  001b9	53		 push	 ebx
  001ba	89 8c 24 98 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], ecx
  001c1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001c4	50		 push	 eax
  001c5	51		 push	 ecx
  001c6	56		 push	 esi
  001c7	57		 push	 edi
  001c8	89 84 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], eax
  001cf	c7 45 18 00 00
	00 00		 mov	 DWORD PTR [ebp+24], 0
  001d6	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  001db	83 c4 30	 add	 esp, 48			; 00000030H
  001de	83 7c 24 5c 10	 cmp	 DWORD PTR __Str$143838[esp+136], 16 ; 00000010H
  001e3	72 0d		 jb	 SHORT $LN142@do_put
  001e5	8b 44 24 48	 mov	 eax, DWORD PTR __Str$143838[esp+116]
  001e9	50		 push	 eax
  001ea	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001ef	83 c4 04	 add	 esp, 4
$LN142@do_put:
  001f2	8b c6		 mov	 eax, esi

; 1148 : 			}
; 1149 : 		}

  001f4	8b 4c 24 64	 mov	 ecx, DWORD PTR __$EHRec$[esp+112]
  001f8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ff	59		 pop	 ecx
  00200	5f		 pop	 edi
  00201	5e		 pop	 esi
  00202	5d		 pop	 ebp
  00203	5b		 pop	 ebx
  00204	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+92]
  00208	33 cc		 xor	 ecx, esp
  0020a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020f	83 c4 5c	 add	 esp, 92			; 0000005cH
  00212	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR $T183988[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Str$143838[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$2:
  00010	8d 4d b0	 lea	 ecx, DWORD PTR $T183989[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$3:
  00018	8d 4d b0	 lea	 ecx, DWORD PTR $T183990[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  00027	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	83 c0 10	 add	 eax, 16			; 00000010H
  00034	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00037	33 c8		 xor	 ecx, eax
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  00043	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear, COMDAT
; _this$ = ecx

; 825  : 		{	// erase all

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 826  : 
; 827  :  #if _HAS_ITERATOR_DEBUGGING
; 828  : 		this->_Orphan_ptr(*this, 0);
; 829  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 830  : 
; 831  : 		_Nodeptr _Pnext;
; 832  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

  00004	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00007	8b 30		 mov	 esi, DWORD PTR [eax]

; 833  : 		_Nextnode(_Myhead) = _Myhead;

  00009	89 00		 mov	 DWORD PTR [eax], eax

; 834  : 		_Prevnode(_Myhead) = _Myhead;

  0000b	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000e	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 835  : 		_Mysize = 0;

  00011	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 836  : 
; 837  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

  00018	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  0001b	74 1e		 je	 SHORT $LN1@clear@6
  0001d	53		 push	 ebx
  0001e	8b ff		 npad	 2
$LL3@clear@6:

; 838  : 			{	// delete an element
; 839  : 			_Pnext = _Nextnode(_Pnode);

  00020	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 840  : 			this->_Alnod.destroy(_Pnode);

  00022	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00025	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ

; 841  : 			this->_Alnod.deallocate(_Pnode, 1);

  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
  00033	8b f3		 mov	 esi, ebx
  00035	3b 5f 14	 cmp	 ebx, DWORD PTR [edi+20]
  00038	75 e6		 jne	 SHORT $LL3@clear@6
  0003a	5b		 pop	 ebx
$LN1@clear@6:
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 842  : 			}
; 843  : 		}

  0003d	c3		 ret	 0
?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z$0
__unwindtable$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z$2
__ehfuncinfo$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
__Pnode$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode, COMDAT
; _this$ = ecx

; 1190 : 		{	// allocate a node and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1191 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  0002b	68 80 00 00 00	 push	 128			; 00000080H
  00030	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00035	8b f0		 mov	 esi, eax
  00037	83 c4 04	 add	 esp, 4
  0003a	89 75 ec	 mov	 DWORD PTR __Pnode$[ebp], esi

; 1192 : 		int _Linkcnt = 0;
; 1193 : 
; 1194 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1195 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Next);

  00044	85 f6		 test	 esi, esi
  00046	74 05		 je	 SHORT $LN27@Buynode@4
  00048	8b 45 08	 mov	 eax, DWORD PTR __Next$[ebp]
  0004b	89 06		 mov	 DWORD PTR [esi], eax
$LN27@Buynode@4:

; 1196 : 		++_Linkcnt;
; 1197 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Prev);

  0004d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00050	85 c0		 test	 eax, eax
  00052	74 05		 je	 SHORT $LN37@Buynode@4
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR __Prev$[ebp]
  00057	89 08		 mov	 DWORD PTR [eax], ecx
$LN37@Buynode@4:

; 1198 : 		++_Linkcnt;
; 1199 : 		this->_Alval.construct(&_Myval(_Pnode), _Val);

  00059	8b 55 10	 mov	 edx, DWORD PTR __Val$[ebp]
  0005c	52		 push	 edx
  0005d	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??$_Construct@UFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@ABU12@@Z ; std::_Construct<CipherShed::FavoriteVolume,CipherShed::FavoriteVolume>
  00066	83 c4 08	 add	 esp, 8

; 1207 : 		_CATCH_END
; 1208 : 		return (_Pnode);

  00069	8b c6		 mov	 eax, esi

; 1209 : 		}

  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 0c 00	 ret	 12			; 0000000cH
__catch$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z$0:

; 1200 : 		_CATCH_ALL
; 1201 : 		if (1 < _Linkcnt)
; 1202 : 			this->_Alptr.destroy(&_Prevnode(_Pnode));
; 1203 : 		if (0 < _Linkcnt)
; 1204 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1205 : 		this->_Alnod.deallocate(_Pnode, 1);

  0007f	8b 4d ec	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00088	83 c4 04	 add	 esp, 4

; 1206 : 		_RERAISE;

  0008b	6a 00		 push	 0
  0008d	6a 00		 push	 0
  0008f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN53@Buynode@4:
  00094	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode
PUBLIC	??_C@_01KGKMHCOC@e?$AA@				; `string'
PUBLIC	??_C@_01DDCIFGEA@E?$AA@				; `string'
PUBLIC	__Iosbase$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
EXTRN	_strcspn:PROC
;	COMDAT ??_C@_01KGKMHCOC@e?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_01KGKMHCOC@e?$AA@ DB 'e', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT
??_C@_01DDCIFGEA@E?$AA@ DB 'E', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$2
__ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
_TEXT	SEGMENT
__Enders$ = -112					; size = 3
__Fillcount$ = -108					; size = 4
__Kseparator$ = -104					; size = 1
__Lock$184742 = -104					; size = 4
$T184708 = -100						; size = 8
$T184707 = -100						; size = 8
$T184706 = -100						; size = 8
$T184705 = -100						; size = 8
$T184704 = -100						; size = 8
$T184703 = -100						; size = 8
__Prefix$ = -100					; size = 4
$T184983 = -92						; size = 1
$T184716 = -92						; size = 8
$T184715 = -92						; size = 8
$T184714 = -92						; size = 8
$T184711 = -92						; size = 8
$T184710 = -92						; size = 8
$T184709 = -92						; size = 8
__Punct_fac$ = -92					; size = 4
__Iosbase$GSCopy$ = -84					; size = 4
___$ReturnUdt$GSCopy$ = -80				; size = 4
$T184698 = -76						; size = 4
__Groupstring$ = -72					; size = 28
__Grouping$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Beforepoint$ = 36					; size = 4
__Afterpoint$ = 40					; size = 4
__Trailing$ = 44					; size = 4
__Count$ = 48						; size = 4
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput, COMDAT

; 1313 : 		{	// put formatted floating-point to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 64	 sub	 esp, 100		; 00000064H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 60	 mov	 DWORD PTR __$ArrayPad$[esp+112], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 78	 lea	 eax, DWORD PTR __$EHRec$[esp+132]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1426 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00032	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+128]
  00039	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR __Iosbase$[esp+128]
  00040	8b bc 24 a0 00
	00 00		 mov	 edi, DWORD PTR __Buf$[esp+128]
  00047	8d 54 24 38	 lea	 edx, DWORD PTR $T184698[esp+132]
  0004b	52		 push	 edx
  0004c	89 44 24 38	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+136], eax
  00050	89 4c 24 34	 mov	 DWORD PTR __Iosbase$GSCopy$[esp+136], ecx
  00054	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00059	50		 push	 eax
  0005a	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+144], 0
  00065	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  0006a	8b 6c 24 3c	 mov	 ebp, DWORD PTR $T184698[esp+136]
  0006e	83 c4 04	 add	 esp, 4
  00071	8b d8		 mov	 ebx, eax
  00073	89 5c 24 28	 mov	 DWORD PTR __Punct_fac$[esp+132], ebx
  00077	c7 84 24 80 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+140], -1
  00082	85 ed		 test	 ebp, ebp
  00084	74 3d		 je	 SHORT $LN31@Fput
  00086	6a 00		 push	 0
  00088	8d 4c 24 20	 lea	 ecx, DWORD PTR __Lock$184742[esp+136]
  0008c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00091	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00094	85 c0		 test	 eax, eax
  00096	76 09		 jbe	 SHORT $LN33@Fput

; 1314 : 		_DEBUG_POINTER(_Dest);
; 1315 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  00098	83 f8 ff	 cmp	 eax, -1
  0009b	73 04		 jae	 SHORT $LN33@Fput
  0009d	48		 dec	 eax
  0009e	89 45 04	 mov	 DWORD PTR [ebp+4], eax
$LN33@Fput:
  000a1	8b 75 04	 mov	 esi, DWORD PTR [ebp+4]
  000a4	f7 de		 neg	 esi
  000a6	1b f6		 sbb	 esi, esi
  000a8	f7 d6		 not	 esi
  000aa	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$184742[esp+132]
  000ae	23 f5		 and	 esi, ebp
  000b0	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000b5	85 f6		 test	 esi, esi
  000b7	74 0a		 je	 SHORT $LN31@Fput
  000b9	8b 06		 mov	 eax, DWORD PTR [esi]
  000bb	8b 10		 mov	 edx, DWORD PTR [eax]
  000bd	6a 01		 push	 1
  000bf	8b ce		 mov	 ecx, esi
  000c1	ff d2		 call	 edx
$LN31@Fput:

; 1316 : 		const string _Grouping = _Punct_fac.grouping();

  000c3	8d 44 24 58	 lea	 eax, DWORD PTR __Grouping$[esp+132]
  000c7	50		 push	 eax
  000c8	8b cb		 mov	 ecx, ebx
  000ca	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping

; 1317 : 		const _Elem _Kseparator = _Punct_fac.thousands_sep();

  000cf	8b 13		 mov	 edx, DWORD PTR [ebx]
  000d1	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000d4	be 01 00 00 00	 mov	 esi, 1
  000d9	8b cb		 mov	 ecx, ebx
  000db	89 b4 24 80 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+140], esi
  000e2	ff d0		 call	 eax

; 1318 : 		string _Groupstring;

  000e4	33 c9		 xor	 ecx, ecx
  000e6	88 44 24 1c	 mov	 BYTE PTR __Kseparator$[esp+132], al
  000ea	c7 44 24 54 0f
	00 00 00	 mov	 DWORD PTR __Groupstring$[esp+156], 15 ; 0000000fH
  000f2	89 4c 24 50	 mov	 DWORD PTR __Groupstring$[esp+152], ecx
  000f6	88 4c 24 40	 mov	 BYTE PTR __Groupstring$[esp+136], cl

; 1319 : 		const _Elem _E0 = _MAKLOCCHR(_Elem, '0', _Cvt);
; 1320 : 		size_t _Prefix = _Buf[0] == '+' || _Buf[0] == '-' ? 1 : 0;

  000fa	8a 07		 mov	 al, BYTE PTR [edi]
  000fc	c6 84 24 80 00
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+140], 2
  00104	3c 2b		 cmp	 al, 43			; 0000002bH
  00106	74 08		 je	 SHORT $LN19@Fput
  00108	89 4c 24 20	 mov	 DWORD PTR __Prefix$[esp+132], ecx
  0010c	3c 2d		 cmp	 al, 45			; 0000002dH
  0010e	75 04		 jne	 SHORT $LN20@Fput
$LN19@Fput:
  00110	89 74 24 20	 mov	 DWORD PTR __Prefix$[esp+132], esi
$LN20@Fput:

; 1321 : 
; 1322 : 		char _Enders[3];
; 1323 : 		_Enders[0] = ::localeconv()->decimal_point[0];

  00114	e8 00 00 00 00	 call	 _localeconv
  00119	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1324 : 		_Enders[1] = 'e';
; 1325 : 		_Enders[2] = '\0';
; 1326 : 
; 1327 : 		const char *_Eptr = (const char *)::memchr(_Buf,
; 1328 : 			'e', _Count);	// find exponent

  0011b	8b 9c 24 b0 00
	00 00		 mov	 ebx, DWORD PTR __Count$[esp+128]
  00122	8a 11		 mov	 dl, BYTE PTR [ecx]
  00124	53		 push	 ebx
  00125	6a 65		 push	 101			; 00000065H
  00127	57		 push	 edi
  00128	88 54 24 20	 mov	 BYTE PTR __Enders$[esp+144], dl
  0012c	c6 44 24 21 65	 mov	 BYTE PTR __Enders$[esp+145], 101 ; 00000065H
  00131	c6 44 24 22 00	 mov	 BYTE PTR __Enders$[esp+146], 0
  00136	e8 00 00 00 00	 call	 _memchr
  0013b	8b f0		 mov	 esi, eax

; 1329 : 		const char *_Pointptr = (const char *)::memchr(_Buf,
; 1330 : 			_Enders[0], _Count);	// find decimal point

  0013d	0f be 44 24 20	 movsx	 eax, BYTE PTR __Enders$[esp+144]
  00142	53		 push	 ebx
  00143	50		 push	 eax
  00144	57		 push	 edi
  00145	e8 00 00 00 00	 call	 _memchr
  0014a	8b e8		 mov	 ebp, eax
  0014c	83 c4 18	 add	 esp, 24			; 00000018H

; 1331 : 		if (_Pointptr == 0)

  0014f	85 ed		 test	 ebp, ebp
  00151	75 07		 jne	 SHORT $LN16@Fput

; 1332 : 			_Trailing = 0;

  00153	89 84 24 ac 00
	00 00		 mov	 DWORD PTR __Trailing$[esp+128], eax
$LN16@Fput:

; 1333 : 
; 1334 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  0015a	8b 4c 24 70	 mov	 ecx, DWORD PTR __Grouping$[esp+156]
  0015e	8b 54 24 5c	 mov	 edx, DWORD PTR __Grouping$[esp+136]
  00162	8b c2		 mov	 eax, edx
  00164	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00167	73 04		 jae	 SHORT $LN78@Fput
  00169	8d 44 24 5c	 lea	 eax, DWORD PTR __Grouping$[esp+136]
$LN78@Fput:
  0016d	80 38 7f	 cmp	 BYTE PTR [eax], 127	; 0000007fH
  00170	0f 84 47 01 00
	00		 je	 $LN111@Fput
  00176	8b c2		 mov	 eax, edx
  00178	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0017b	73 04		 jae	 SHORT $LN84@Fput
  0017d	8d 44 24 5c	 lea	 eax, DWORD PTR __Grouping$[esp+136]
$LN84@Fput:
  00181	80 38 00	 cmp	 BYTE PTR [eax], 0
  00184	0f 8e 33 01 00
	00		 jle	 $LN111@Fput

; 1335 : 			{	// grouping specified, add thousands separators
; 1336 : 			_Groupstring.append(_Buf, _Count);	// assemble field into string

  0018a	53		 push	 ebx
  0018b	57		 push	 edi
  0018c	8d 4c 24 44	 lea	 ecx, DWORD PTR __Groupstring$[esp+140]
  00190	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1337 : 			if (_Eptr == 0)

  00195	85 f6		 test	 esi, esi
  00197	75 1c		 jne	 SHORT $LN14@Fput

; 1338 : 				_Groupstring.append(_Trailing, '0');

  00199	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR __Trailing$[esp+128]
  001a0	6a 30		 push	 48			; 00000030H
  001a2	51		 push	 ecx
  001a3	8d 4c 24 44	 lea	 ecx, DWORD PTR __Groupstring$[esp+140]
  001a7	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1339 : 			else

  001ac	8b 9c 24 a4 00
	00 00		 mov	 ebx, DWORD PTR __Beforepoint$[esp+128]
  001b3	eb 38		 jmp	 SHORT $LN13@Fput
$LN14@Fput:

; 1340 : 				{	/* dispose of any zeros before exponent */
; 1341 : 				if (_Pointptr == 0)

  001b5	85 ed		 test	 ebp, ebp
  001b7	75 17		 jne	 SHORT $LN183@Fput

; 1342 : 					{	/* no point but exponent, put scaling zeros */
; 1343 : 					_Groupstring.append(_Beforepoint, '0');

  001b9	8b 94 24 a4 00
	00 00		 mov	 edx, DWORD PTR __Beforepoint$[esp+128]
  001c0	6a 30		 push	 48			; 00000030H
  001c2	52		 push	 edx
  001c3	8d 4c 24 44	 lea	 ecx, DWORD PTR __Groupstring$[esp+140]
  001c7	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1344 : 					_Beforepoint = 0;

  001cc	33 db		 xor	 ebx, ebx
  001ce	eb 07		 jmp	 SHORT $LN12@Fput
$LN183@Fput:
  001d0	8b 9c 24 a4 00
	00 00		 mov	 ebx, DWORD PTR __Beforepoint$[esp+128]
$LN12@Fput:

; 1345 : 					}
; 1346 : 				_Groupstring.insert(_Eptr - _Buf, _Trailing, '0');

  001d7	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR __Trailing$[esp+128]
  001de	6a 30		 push	 48			; 00000030H
  001e0	50		 push	 eax
  001e1	2b f7		 sub	 esi, edi
  001e3	56		 push	 esi
  001e4	8d 4c 24 48	 lea	 ecx, DWORD PTR __Groupstring$[esp+144]
  001e8	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
$LN13@Fput:

; 1347 : 				}
; 1348 : 			_Trailing = 0;
; 1349 : 
; 1350 : 			if (_Pointptr == 0)
; 1351 : 				_Groupstring.append(_Beforepoint, '0');

  001ed	6a 30		 push	 48			; 00000030H
  001ef	85 ed		 test	 ebp, ebp
  001f1	75 0c		 jne	 SHORT $LN11@Fput
  001f3	53		 push	 ebx
  001f4	8d 4c 24 44	 lea	 ecx, DWORD PTR __Groupstring$[esp+140]
  001f8	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1352 : 			else

  001fd	eb 31		 jmp	 SHORT $LN10@Fput
$LN11@Fput:

; 1353 : 				{	// fill in zeros around decimal point
; 1354 : 				_Groupstring.insert(_Pointptr - _Buf + 1, _Afterpoint, '0');

  001ff	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR __Afterpoint$[esp+132]
  00206	8b f5		 mov	 esi, ebp
  00208	2b f7		 sub	 esi, edi
  0020a	51		 push	 ecx
  0020b	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  0020e	52		 push	 edx
  0020f	8d 4c 24 48	 lea	 ecx, DWORD PTR __Groupstring$[esp+144]
  00213	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1355 : 				_Groupstring.insert(_Pointptr - _Buf, _Beforepoint, '0');

  00218	6a 30		 push	 48			; 00000030H
  0021a	53		 push	 ebx
  0021b	56		 push	 esi
  0021c	8d 4c 24 48	 lea	 ecx, DWORD PTR __Groupstring$[esp+144]
  00220	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1356 : 				_Afterpoint = 0;

  00225	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Afterpoint$[esp+128], 0
$LN10@Fput:

; 1357 : 				}
; 1358 : 			_Beforepoint = 0;
; 1359 : 
; 1360 : 			const char *_Pg = _Grouping.c_str();

  00230	8b 7c 24 5c	 mov	 edi, DWORD PTR __Grouping$[esp+136]
  00234	bb 10 00 00 00	 mov	 ebx, 16			; 00000010H
  00239	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Beforepoint$[esp+128], 0
  00244	39 5c 24 70	 cmp	 DWORD PTR __Grouping$[esp+156], ebx
  00248	73 04		 jae	 SHORT $LN90@Fput
  0024a	8d 7c 24 5c	 lea	 edi, DWORD PTR __Grouping$[esp+136]
$LN90@Fput:

; 1361 : 			size_t _Off = ::strcspn(&_Groupstring[0], &_Enders[0]);

  0024e	8b 44 24 40	 mov	 eax, DWORD PTR __Groupstring$[esp+136]
  00252	39 5c 24 54	 cmp	 DWORD PTR __Groupstring$[esp+156], ebx
  00256	73 04		 jae	 SHORT $LN100@Fput
  00258	8d 44 24 40	 lea	 eax, DWORD PTR __Groupstring$[esp+136]
$LN100@Fput:
  0025c	8d 4c 24 14	 lea	 ecx, DWORD PTR __Enders$[esp+132]
  00260	51		 push	 ecx
  00261	50		 push	 eax
  00262	e8 00 00 00 00	 call	 _strcspn
  00267	8b f0		 mov	 esi, eax

; 1362 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1363 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00269	8a 07		 mov	 al, BYTE PTR [edi]
  0026b	83 c4 08	 add	 esp, 8
  0026e	3c 7f		 cmp	 al, 127			; 0000007fH
  00270	74 2e		 je	 SHORT $LN8@Fput
$LL9@Fput:
  00272	84 c0		 test	 al, al
  00274	7e 2a		 jle	 SHORT $LN8@Fput
  00276	8b d6		 mov	 edx, esi
  00278	2b 54 24 20	 sub	 edx, DWORD PTR __Prefix$[esp+132]
  0027c	0f be c0	 movsx	 eax, al
  0027f	3b c2		 cmp	 eax, edx
  00281	73 1d		 jae	 SHORT $LN8@Fput

; 1364 : 				{	// add a NUL to mark thousands separator
; 1365 : 				_Groupstring.insert(_Off -= *_Pg, (size_t)1, '\0');

  00283	6a 00		 push	 0
  00285	2b f0		 sub	 esi, eax
  00287	6a 01		 push	 1
  00289	56		 push	 esi
  0028a	8d 4c 24 48	 lea	 ecx, DWORD PTR __Groupstring$[esp+144]
  0028e	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1366 : 				if ('\0' < _Pg[1])

  00293	80 7f 01 00	 cmp	 BYTE PTR [edi+1], 0
  00297	7e 01		 jle	 SHORT $LN7@Fput

; 1362 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1363 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00299	47		 inc	 edi
$LN7@Fput:
  0029a	8a 07		 mov	 al, BYTE PTR [edi]
  0029c	3c 7f		 cmp	 al, 127			; 0000007fH
  0029e	75 d2		 jne	 SHORT $LL9@Fput
$LN8@Fput:

; 1367 : 					++_Pg;	// not last group, advance
; 1368 : 				}
; 1369 : 
; 1370 : 			_Buf = &_Groupstring[0];

  002a0	8b 7c 24 40	 mov	 edi, DWORD PTR __Groupstring$[esp+136]
  002a4	39 5c 24 54	 cmp	 DWORD PTR __Groupstring$[esp+156], ebx
  002a8	73 04		 jae	 SHORT $LN110@Fput
  002aa	8d 7c 24 40	 lea	 edi, DWORD PTR __Groupstring$[esp+136]
$LN110@Fput:

; 1371 : 			_Trailing = 0;
; 1372 : 			_Count = _Groupstring.size();

  002ae	8b 5c 24 50	 mov	 ebx, DWORD PTR __Groupstring$[esp+152]
  002b2	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Trailing$[esp+128], 0
$LN111@Fput:

; 1373 : 			}
; 1374 : 
; 1375 : 		size_t _Fillcount = _Beforepoint + _Afterpoint + _Trailing + _Count;

  002bd	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __Afterpoint$[esp+128]
  002c4	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR __Beforepoint$[esp+128]

; 1376 : 		_Fillcount = _Iosbase.width() <= 0
; 1377 : 			|| (size_t)_Iosbase.width() <= _Fillcount
; 1378 : 				? 0 : (size_t)_Iosbase.width() - _Fillcount;

  002cb	8b 54 24 30	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+132]
  002cf	03 c1		 add	 eax, ecx
  002d1	03 84 24 ac 00
	00 00		 add	 eax, DWORD PTR __Trailing$[esp+128]
  002d8	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  002db	03 c3		 add	 eax, ebx
  002dd	85 c9		 test	 ecx, ecx
  002df	7e 0c		 jle	 SHORT $LN21@Fput
  002e1	3b c8		 cmp	 ecx, eax
  002e3	76 08		 jbe	 SHORT $LN21@Fput
  002e5	2b c8		 sub	 ecx, eax
  002e7	89 4c 24 18	 mov	 DWORD PTR __Fillcount$[esp+132], ecx
  002eb	eb 08		 jmp	 SHORT $LN22@Fput
$LN21@Fput:
  002ed	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __Fillcount$[esp+132], 0
$LN22@Fput:

; 1379 : 		ios_base::fmtflags _Adjustfield =
; 1380 : 			_Iosbase.flags() & ios_base::adjustfield;

  002f5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]

; 1381 : 		if (_Adjustfield != ios_base::left
; 1382 : 			&& _Adjustfield != ios_base::internal)

  002f8	8b b4 24 88 00
	00 00		 mov	 esi, DWORD PTR _this$[esp+128]
  002ff	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00304	83 f8 40	 cmp	 eax, 64			; 00000040H
  00307	0f 84 c7 00 00
	00		 je	 $LN4@Fput
  0030d	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00312	74 3d		 je	 SHORT $LN180@Fput

; 1383 : 			{	// put leading fill
; 1384 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00314	8b 54 24 18	 mov	 edx, DWORD PTR __Fillcount$[esp+132]
  00318	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+128]
  0031f	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+132]
  00326	52		 push	 edx
  00327	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  0032e	50		 push	 eax
  0032f	51		 push	 ecx
  00330	52		 push	 edx
  00331	8d 44 24 30	 lea	 eax, DWORD PTR $T184703[esp+148]
  00335	50		 push	 eax
  00336	56		 push	 esi
  00337	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0033c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033e	89 8c 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], ecx
  00345	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00348	89 94 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], edx

; 1385 : 			_Fillcount = 0;

  0034f	eb 78		 jmp	 SHORT $LN192@Fput
$LN180@Fput:

; 1386 : 			}
; 1387 : 		else if (_Adjustfield == ios_base::internal)
; 1388 : 			{	// put internal fill
; 1389 : 			if (0 < _Prefix)

  00351	83 7c 24 20 00	 cmp	 DWORD PTR __Prefix$[esp+132], 0
  00356	76 36		 jbe	 SHORT $LN3@Fput

; 1390 : 				{	// but first put sign
; 1391 : 				_Dest = _Putc(_Dest, _Buf, 1);

  00358	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+132]
  0035f	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+128]
  00366	6a 01		 push	 1
  00368	57		 push	 edi
  00369	50		 push	 eax
  0036a	51		 push	 ecx
  0036b	8d 54 24 30	 lea	 edx, DWORD PTR $T184704[esp+148]
  0036f	52		 push	 edx
  00370	56		 push	 esi
  00371	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  00376	8b 08		 mov	 ecx, DWORD PTR [eax]
  00378	89 8c 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], ecx
  0037f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00382	83 c4 18	 add	 esp, 24			; 00000018H

; 1392 : 				++_Buf, --_Count;

  00385	47		 inc	 edi
  00386	89 94 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], edx
  0038d	4b		 dec	 ebx
$LN3@Fput:

; 1393 : 				}
; 1394 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  0038e	8b 44 24 18	 mov	 eax, DWORD PTR __Fillcount$[esp+132]
  00392	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+128]
  00399	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  003a0	50		 push	 eax
  003a1	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+132]
  003a8	51		 push	 ecx
  003a9	52		 push	 edx
  003aa	50		 push	 eax
  003ab	8d 4c 24 30	 lea	 ecx, DWORD PTR $T184705[esp+148]
  003af	51		 push	 ecx
  003b0	56		 push	 esi
  003b1	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  003b6	8b 10		 mov	 edx, DWORD PTR [eax]
  003b8	89 94 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], edx
  003bf	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  003c2	89 84 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], eax
$LN192@Fput:

; 1395 : 			_Fillcount = 0;

  003c9	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __Fillcount$[esp+156], 0
  003d1	83 c4 18	 add	 esp, 24			; 00000018H
$LN4@Fput:

; 1396 : 			}
; 1397 : 
; 1398 : 		_Pointptr = (const char *)::memchr(_Buf,
; 1399 : 			_Enders[0], _Count);	// find decimal point again

  003d4	0f be 4c 24 14	 movsx	 ecx, BYTE PTR __Enders$[esp+132]
  003d9	53		 push	 ebx
  003da	51		 push	 ecx
  003db	57		 push	 edi
  003dc	e8 00 00 00 00	 call	 _memchr
  003e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1400 : 		if (_Pointptr != 0)

  003e4	85 c0		 test	 eax, eax
  003e6	0f 84 e9 00 00
	00		 je	 $LN2@Fput

; 1401 : 			{	// has decimal point, put pieces and zero fills
; 1402 : 			size_t _Fracoffset = _Pointptr - _Buf + 1;
; 1403 : 			_Dest = _Putgrouped(_Dest, _Buf, _Fracoffset - 1, _Kseparator);

  003ec	8b 54 24 1c	 mov	 edx, DWORD PTR __Kseparator$[esp+132]
  003f0	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+132]
  003f7	2b c7		 sub	 eax, edi
  003f9	40		 inc	 eax
  003fa	52		 push	 edx
  003fb	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  00402	8b e8		 mov	 ebp, eax
  00404	8d 45 ff	 lea	 eax, DWORD PTR [ebp-1]
  00407	50		 push	 eax
  00408	57		 push	 edi
  00409	51		 push	 ecx
  0040a	52		 push	 edx
  0040b	8d 44 24 34	 lea	 eax, DWORD PTR $T184706[esp+152]
  0040f	50		 push	 eax
  00410	56		 push	 esi
  00411	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  00416	8b 08		 mov	 ecx, DWORD PTR [eax]
  00418	89 8c 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], ecx
  0041f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1404 : 			_Dest = _Rep(_Dest, _E0, _Beforepoint);

  00422	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __Beforepoint$[esp+156]
  00429	51		 push	 ecx
  0042a	89 94 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], edx
  00431	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00434	8b 00		 mov	 eax, DWORD PTR [eax]
  00436	6a 30		 push	 48			; 00000030H
  00438	52		 push	 edx
  00439	50		 push	 eax
  0043a	8d 4c 24 4c	 lea	 ecx, DWORD PTR $T184707[esp+176]
  0043e	51		 push	 ecx
  0043f	56		 push	 esi
  00440	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00445	8b 10		 mov	 edx, DWORD PTR [eax]

; 1405 : 			_Dest = _Rep(_Dest, _Punct_fac.decimal_point(), 1);

  00447	8b 4c 24 5c	 mov	 ecx, DWORD PTR __Punct_fac$[esp+184]
  0044b	89 94 24 c4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+180], edx
  00452	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00455	89 84 24 c8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+184], eax
  0045c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0045e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00461	83 c4 34	 add	 esp, 52			; 00000034H
  00464	ff d0		 call	 eax
  00466	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  0046d	6a 01		 push	 1
  0046f	88 44 24 2c	 mov	 BYTE PTR $T184983[esp+136], al
  00473	8b 4c 24 2c	 mov	 ecx, DWORD PTR $T184983[esp+136]
  00477	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+132]
  0047e	51		 push	 ecx
  0047f	52		 push	 edx
  00480	50		 push	 eax
  00481	8d 4c 24 30	 lea	 ecx, DWORD PTR $T184708[esp+148]
  00485	51		 push	 ecx
  00486	56		 push	 esi
  00487	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0048c	8b 10		 mov	 edx, DWORD PTR [eax]
  0048e	89 94 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], edx
  00495	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1406 : 			_Dest = _Rep(_Dest, _E0, _Afterpoint);

  00498	8b 94 24 c0 00
	00 00		 mov	 edx, DWORD PTR __Afterpoint$[esp+152]
  0049f	52		 push	 edx
  004a0	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], ecx
  004a7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004aa	8b 10		 mov	 edx, DWORD PTR [eax]
  004ac	6a 30		 push	 48			; 00000030H
  004ae	51		 push	 ecx
  004af	52		 push	 edx
  004b0	8d 44 24 50	 lea	 eax, DWORD PTR $T184709[esp+172]
  004b4	50		 push	 eax
  004b5	56		 push	 esi
  004b6	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  004bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  004bd	89 8c 24 c0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+176], ecx
  004c4	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  004c7	83 c4 30	 add	 esp, 48			; 00000030H

; 1407 : 			_Buf += _Fracoffset, _Count -= _Fracoffset;

  004ca	03 fd		 add	 edi, ebp
  004cc	89 94 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], edx
  004d3	2b dd		 sub	 ebx, ebp
$LN2@Fput:

; 1408 : 			}
; 1409 : 
; 1410 : 		_Eptr = (const char *)::memchr(_Buf,
; 1411 : 			'e', _Count);	// find exponent again

  004d5	53		 push	 ebx
  004d6	6a 65		 push	 101			; 00000065H
  004d8	57		 push	 edi
  004d9	e8 00 00 00 00	 call	 _memchr
  004de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1412 : 		if (_Eptr != 0)

  004e1	85 c0		 test	 eax, eax
  004e3	0f 84 bd 00 00
	00		 je	 $LN1@Fput

; 1413 : 			{	// has exponent field, put it out
; 1414 : 			size_t _Expoffset = _Eptr - _Buf + 1;
; 1415 : 			_Dest = _Putgrouped(_Dest, _Buf, _Expoffset - 1, _Kseparator);

  004e9	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  004f0	2b c7		 sub	 eax, edi
  004f2	40		 inc	 eax
  004f3	8b e8		 mov	 ebp, eax
  004f5	8b 44 24 1c	 mov	 eax, DWORD PTR __Kseparator$[esp+132]
  004f9	50		 push	 eax
  004fa	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+132]
  00501	8d 4d ff	 lea	 ecx, DWORD PTR [ebp-1]
  00504	51		 push	 ecx
  00505	57		 push	 edi
  00506	52		 push	 edx
  00507	50		 push	 eax
  00508	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T184710[esp+152]
  0050c	51		 push	 ecx
  0050d	56		 push	 esi
  0050e	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  00513	8b 10		 mov	 edx, DWORD PTR [eax]
  00515	89 94 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], edx
  0051c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1416 : 			_Dest = _Rep(_Dest, _E0, _Trailing), _Trailing = 0;

  0051f	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR __Trailing$[esp+156]
  00526	52		 push	 edx
  00527	89 8c 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], ecx
  0052e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00531	8b 10		 mov	 edx, DWORD PTR [eax]
  00533	6a 30		 push	 48			; 00000030H
  00535	51		 push	 ecx
  00536	52		 push	 edx
  00537	8d 44 24 54	 lea	 eax, DWORD PTR $T184711[esp+176]
  0053b	50		 push	 eax
  0053c	56		 push	 esi
  0053d	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00542	8b 08		 mov	 ecx, DWORD PTR [eax]
  00544	89 8c 24 c4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+180], ecx

; 1417 : 			_Dest = _Putc(_Dest, _Iosbase.flags() & ios_base::uppercase
; 1418 : 				? "E" : "e", 1);

  0054b	8b 4c 24 64	 mov	 ecx, DWORD PTR __Iosbase$GSCopy$[esp+184]
  0054f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00552	83 c4 34	 add	 esp, 52			; 00000034H
  00555	f6 41 10 04	 test	 BYTE PTR [ecx+16], 4
  00559	89 94 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], edx
  00560	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Trailing$[esp+128], 0
  0056b	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01DDCIFGEA@E?$AA@
  00570	75 05		 jne	 SHORT $LN24@Fput
  00572	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01KGKMHCOC@e?$AA@
$LN24@Fput:
  00577	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0057a	8b 00		 mov	 eax, DWORD PTR [eax]
  0057c	6a 01		 push	 1
  0057e	51		 push	 ecx
  0057f	52		 push	 edx
  00580	50		 push	 eax
  00581	8d 4c 24 38	 lea	 ecx, DWORD PTR $T184714[esp+148]
  00585	51		 push	 ecx
  00586	56		 push	 esi
  00587	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  0058c	8b 10		 mov	 edx, DWORD PTR [eax]
  0058e	89 94 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], edx
  00595	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00598	83 c4 18	 add	 esp, 24			; 00000018H

; 1419 : 			_Buf += _Expoffset, _Count -= _Expoffset;

  0059b	03 fd		 add	 edi, ebp
  0059d	89 84 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], eax
  005a4	2b dd		 sub	 ebx, ebp
$LN1@Fput:

; 1420 : 			}
; 1421 : 
; 1422 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1423 : 			_Kseparator);	// put leftover field

  005a6	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Kseparator$[esp+132]
  005aa	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  005b1	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+128]
  005b8	51		 push	 ecx
  005b9	53		 push	 ebx
  005ba	57		 push	 edi
  005bb	52		 push	 edx
  005bc	50		 push	 eax
  005bd	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T184715[esp+152]
  005c1	51		 push	 ecx
  005c2	56		 push	 esi
  005c3	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  005c8	8b 10		 mov	 edx, DWORD PTR [eax]
  005ca	89 94 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], edx
  005d1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1424 : 		_Dest = _Rep(_Dest, _E0, _Trailing);	// put trailing zeros

  005d4	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR __Trailing$[esp+156]
  005db	52		 push	 edx
  005dc	89 8c 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], ecx
  005e3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005e6	8b 10		 mov	 edx, DWORD PTR [eax]
  005e8	6a 30		 push	 48			; 00000030H
  005ea	51		 push	 ecx
  005eb	52		 push	 edx
  005ec	8d 44 24 54	 lea	 eax, DWORD PTR $T184716[esp+176]
  005f0	50		 push	 eax
  005f1	56		 push	 esi
  005f2	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  005f7	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1425 : 		_Iosbase.width(0);

  005f9	8b 54 24 64	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+184]

; 1426 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  005fd	8b 7c 24 68	 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+184]
  00601	89 8c 24 c4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+180], ecx
  00608	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0060b	33 db		 xor	 ebx, ebx
  0060d	89 5a 18	 mov	 DWORD PTR [edx+24], ebx
  00610	8b 54 24 4c	 mov	 edx, DWORD PTR __Fillcount$[esp+184]
  00614	52		 push	 edx
  00615	8b 94 24 d4 00
	00 00		 mov	 edx, DWORD PTR __Fill$[esp+184]
  0061c	52		 push	 edx
  0061d	50		 push	 eax
  0061e	51		 push	 ecx
  0061f	57		 push	 edi
  00620	56		 push	 esi
  00621	89 84 24 e0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+208], eax
  00628	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0062d	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00632	83 c4 4c	 add	 esp, 76			; 0000004cH
  00635	39 74 24 54	 cmp	 DWORD PTR __Groupstring$[esp+156], esi
  00639	72 0d		 jb	 SHORT $LN143@Fput
  0063b	8b 44 24 40	 mov	 eax, DWORD PTR __Groupstring$[esp+136]
  0063f	50		 push	 eax
  00640	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00645	83 c4 04	 add	 esp, 4
$LN143@Fput:
  00648	c7 44 24 54 0f
	00 00 00	 mov	 DWORD PTR __Groupstring$[esp+156], 15 ; 0000000fH
  00650	89 5c 24 50	 mov	 DWORD PTR __Groupstring$[esp+152], ebx
  00654	c6 44 24 40 00	 mov	 BYTE PTR __Groupstring$[esp+136], 0
  00659	39 74 24 70	 cmp	 DWORD PTR __Grouping$[esp+156], esi
  0065d	72 0d		 jb	 SHORT $LN181@Fput
  0065f	8b 4c 24 5c	 mov	 ecx, DWORD PTR __Grouping$[esp+136]
  00663	51		 push	 ecx
  00664	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00669	83 c4 04	 add	 esp, 4
$LN181@Fput:
  0066c	8b c7		 mov	 eax, edi

; 1427 : 		}

  0066e	8b 4c 24 78	 mov	 ecx, DWORD PTR __$EHRec$[esp+132]
  00672	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00679	59		 pop	 ecx
  0067a	5f		 pop	 edi
  0067b	5e		 pop	 esi
  0067c	5d		 pop	 ebp
  0067d	5b		 pop	 ebx
  0067e	8b 4c 24 60	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+112]
  00682	33 cc		 xor	 ecx, esp
  00684	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00689	83 c4 70	 add	 esp, 112		; 00000070H
  0068c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$0:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR $T184698[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$2:
  00010	8d 4d b8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 8c	 lea	 eax, DWORD PTR [edx-116]
  0001f	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	83 c0 10	 add	 eax, 16			; 00000010H
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
PUBLIC	__Iosbase$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1
__ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
_TEXT	SEGMENT
__Lock$185273 = -76					; size = 4
$T185247 = -76						; size = 8
$T185245 = -76						; size = 8
__Prefix$ = -76						; size = 4
__Iosbase$GSCopy$ = -68					; size = 4
$T185338 = -64						; size = 1
__Punct_fac$ = -64					; size = 4
$T185248 = -60						; size = 8
$T185246 = -60						; size = 8
__Pg$144631 = -60					; size = 4
$T185237 = -52						; size = 4
___$ReturnUdt$GSCopy$ = -48				; size = 4
__Grouping$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput, COMDAT

; 1458 : 		{	// put formatted integer to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 40	 sub	 esp, 64			; 00000040H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 3c	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 54	 lea	 eax, DWORD PTR __$EHRec$[esp+96]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 44 24 68	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+92]
  00036	8b 4c 24 74	 mov	 ecx, DWORD PTR __Iosbase$[esp+92]
  0003a	8b 5c 24 7c	 mov	 ebx, DWORD PTR __Buf$[esp+92]

; 1459 : 		_DEBUG_POINTER(_Dest);
; 1460 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  0003e	8d 54 24 2c	 lea	 edx, DWORD PTR $T185237[esp+96]
  00042	52		 push	 edx
  00043	89 44 24 34	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+100], eax
  00047	89 4c 24 20	 mov	 DWORD PTR __Iosbase$GSCopy$[esp+100], ecx
  0004b	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00050	50		 push	 eax
  00051	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+108], 0
  00059	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  0005e	8b 6c 24 30	 mov	 ebp, DWORD PTR $T185237[esp+100]
  00062	83 c4 04	 add	 esp, 4
  00065	8b f0		 mov	 esi, eax
  00067	89 74 24 20	 mov	 DWORD PTR __Punct_fac$[esp+96], esi
  0006b	c7 44 24 5c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+104], -1
  00073	85 ed		 test	 ebp, ebp
  00075	74 3d		 je	 SHORT $LN22@Iput
  00077	6a 00		 push	 0
  00079	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$185273[esp+100]
  0007d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00082	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00085	85 c0		 test	 eax, eax
  00087	76 09		 jbe	 SHORT $LN24@Iput
  00089	83 f8 ff	 cmp	 eax, -1
  0008c	73 04		 jae	 SHORT $LN24@Iput
  0008e	48		 dec	 eax
  0008f	89 45 04	 mov	 DWORD PTR [ebp+4], eax
$LN24@Iput:
  00092	8b 7d 04	 mov	 edi, DWORD PTR [ebp+4]
  00095	f7 df		 neg	 edi
  00097	1b ff		 sbb	 edi, edi
  00099	f7 d7		 not	 edi
  0009b	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$185273[esp+96]
  0009f	23 fd		 and	 edi, ebp
  000a1	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000a6	85 ff		 test	 edi, edi
  000a8	74 0a		 je	 SHORT $LN22@Iput
  000aa	8b 07		 mov	 eax, DWORD PTR [edi]
  000ac	8b 10		 mov	 edx, DWORD PTR [eax]
  000ae	6a 01		 push	 1
  000b0	8b cf		 mov	 ecx, edi
  000b2	ff d2		 call	 edx
$LN22@Iput:

; 1461 : 		const string _Grouping = _Punct_fac.grouping();

  000b4	8d 44 24 34	 lea	 eax, DWORD PTR __Grouping$[esp+96]
  000b8	50		 push	 eax
  000b9	8b ce		 mov	 ecx, esi
  000bb	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping

; 1462 : 		const size_t _Prefix = *_Buf == '+' || *_Buf == '-' ? 1
; 1463 : 			: *_Buf == '0' && (_Buf[1] == 'x' || _Buf[1] == 'X') ? 2
; 1464 : 			: 0;

  000c0	8a 03		 mov	 al, BYTE PTR [ebx]
  000c2	b9 01 00 00 00	 mov	 ecx, 1
  000c7	89 4c 24 5c	 mov	 DWORD PTR __$EHRec$[esp+104], ecx
  000cb	3c 2b		 cmp	 al, 43			; 0000002bH
  000cd	74 27		 je	 SHORT $LN10@Iput
  000cf	3c 2d		 cmp	 al, 45			; 0000002dH
  000d1	74 23		 je	 SHORT $LN10@Iput
  000d3	3c 30		 cmp	 al, 48			; 00000030H
  000d5	75 15		 jne	 SHORT $LN12@Iput
  000d7	8a 43 01	 mov	 al, BYTE PTR [ebx+1]
  000da	3c 78		 cmp	 al, 120			; 00000078H
  000dc	74 04		 je	 SHORT $LN11@Iput
  000de	3c 58		 cmp	 al, 88			; 00000058H
  000e0	75 0a		 jne	 SHORT $LN12@Iput
$LN11@Iput:
  000e2	c7 44 24 14 02
	00 00 00	 mov	 DWORD PTR __Prefix$[esp+96], 2
  000ea	eb 0e		 jmp	 SHORT $LN14@Iput
$LN12@Iput:
  000ec	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __Prefix$[esp+96], 0
  000f4	eb 04		 jmp	 SHORT $LN14@Iput
$LN10@Iput:
  000f6	89 4c 24 14	 mov	 DWORD PTR __Prefix$[esp+96], ecx
$LN14@Iput:

; 1465 : 
; 1466 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  000fa	8b 4c 24 4c	 mov	 ecx, DWORD PTR __Grouping$[esp+120]
  000fe	8b 54 24 38	 mov	 edx, DWORD PTR __Grouping$[esp+100]
  00102	8b c2		 mov	 eax, edx
  00104	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00107	73 04		 jae	 SHORT $LN33@Iput
  00109	8d 44 24 38	 lea	 eax, DWORD PTR __Grouping$[esp+100]
$LN33@Iput:
  0010d	80 38 7f	 cmp	 BYTE PTR [eax], 127	; 0000007fH
  00110	74 7e		 je	 SHORT $LN87@Iput
  00112	8b c2		 mov	 eax, edx
  00114	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00117	73 04		 jae	 SHORT $LN39@Iput
  00119	8d 44 24 38	 lea	 eax, DWORD PTR __Grouping$[esp+100]
$LN39@Iput:
  0011d	80 38 00	 cmp	 BYTE PTR [eax], 0
  00120	7e 6e		 jle	 SHORT $LN87@Iput

; 1467 : 			{	// grouping specified, add thousands separators
; 1468 : 			const char *_Pg = _Grouping.c_str();

  00122	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00125	72 06		 jb	 SHORT $LN44@Iput
  00127	89 54 24 24	 mov	 DWORD PTR __Pg$144631[esp+96], edx
  0012b	eb 08		 jmp	 SHORT $LN45@Iput
$LN44@Iput:
  0012d	8d 4c 24 38	 lea	 ecx, DWORD PTR __Grouping$[esp+100]
  00131	89 4c 24 24	 mov	 DWORD PTR __Pg$144631[esp+96], ecx
$LN45@Iput:

; 1469 : 			size_t _Off = _Count;
; 1470 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1471 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00135	8b 54 24 24	 mov	 edx, DWORD PTR __Pg$144631[esp+96]
  00139	8a 02		 mov	 al, BYTE PTR [edx]
  0013b	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR __Count$[esp+92]
  00142	8b f5		 mov	 esi, ebp
  00144	3c 7f		 cmp	 al, 127			; 0000007fH
  00146	74 4f		 je	 SHORT $LN5@Iput
$LN6@Iput:
  00148	84 c0		 test	 al, al
  0014a	7e 4b		 jle	 SHORT $LN5@Iput
  0014c	8b ce		 mov	 ecx, esi
  0014e	2b 4c 24 14	 sub	 ecx, DWORD PTR __Prefix$[esp+96]
  00152	0f be c0	 movsx	 eax, al
  00155	3b c1		 cmp	 eax, ecx
  00157	73 3e		 jae	 SHORT $LN5@Iput

; 1472 : 				{	// add a NUL to mark thousands separator
; 1473 : 				_Off -= *_Pg;

  00159	2b f0		 sub	 esi, eax

; 1474 : 				_CRT_SECURE_MEMMOVE(&_Buf[_Off + 1], _Count + 1 - _Off,

  0015b	8b d5		 mov	 edx, ebp
  0015d	2b d6		 sub	 edx, esi
  0015f	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00162	50		 push	 eax
  00163	8d 3c 33	 lea	 edi, DWORD PTR [ebx+esi]
  00166	57		 push	 edi
  00167	50		 push	 eax
  00168	8d 44 33 01	 lea	 eax, DWORD PTR [ebx+esi+1]
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 _memmove_s

; 1475 : 					&_Buf[_Off],	 _Count + 1 - _Off);
; 1476 : 				_Buf[_Off] = '\0', ++_Count;
; 1477 : 				if ('\0' < _Pg[1])

  00172	8b 44 24 34	 mov	 eax, DWORD PTR __Pg$144631[esp+112]
  00176	83 c4 10	 add	 esp, 16			; 00000010H
  00179	c6 07 00	 mov	 BYTE PTR [edi], 0
  0017c	45		 inc	 ebp
  0017d	80 78 01 00	 cmp	 BYTE PTR [eax+1], 0
  00181	7e 05		 jle	 SHORT $LN4@Iput
  00183	40		 inc	 eax
  00184	89 44 24 24	 mov	 DWORD PTR __Pg$144631[esp+96], eax
$LN4@Iput:
  00188	8a 00		 mov	 al, BYTE PTR [eax]
  0018a	3c 7f		 cmp	 al, 127			; 0000007fH
  0018c	75 ba		 jne	 SHORT $LN6@Iput

; 1469 : 			size_t _Off = _Count;
; 1470 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1471 : 				&& (size_t)*_Pg < _Off - _Prefix)

  0018e	eb 07		 jmp	 SHORT $LN5@Iput
$LN87@Iput:
  00190	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR __Count$[esp+92]
$LN5@Iput:

; 1478 : 					++_Pg;	// not last group, advance
; 1479 : 				}
; 1480 : 			}
; 1481 : 
; 1482 : 		size_t _Fillcount = _Iosbase.width() <= 0
; 1483 : 			|| (size_t)_Iosbase.width() <= _Count
; 1484 : 				? 0 : (size_t)_Iosbase.width() - _Count;

  00197	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Iosbase$GSCopy$[esp+96]
  0019b	8b 79 18	 mov	 edi, DWORD PTR [ecx+24]
  0019e	85 ff		 test	 edi, edi
  001a0	7e 08		 jle	 SHORT $LN15@Iput
  001a2	3b fd		 cmp	 edi, ebp
  001a4	76 04		 jbe	 SHORT $LN15@Iput
  001a6	2b fd		 sub	 edi, ebp
  001a8	eb 02		 jmp	 SHORT $LN16@Iput
$LN15@Iput:
  001aa	33 ff		 xor	 edi, edi
$LN16@Iput:

; 1485 : 
; 1486 : 		ios_base::fmtflags _Adjustfield =
; 1487 : 			_Iosbase.flags() & ios_base::adjustfield;
; 1488 : 		if (_Adjustfield != ios_base::left
; 1489 : 			&& _Adjustfield != ios_base::internal)

  001ac	8b 74 24 64	 mov	 esi, DWORD PTR _this$[esp+92]
  001b0	8b d1		 mov	 edx, ecx
  001b2	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001b5	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  001ba	83 f8 40	 cmp	 eax, 64			; 00000040H
  001bd	0f 84 95 00 00
	00		 je	 $LN1@Iput

; 1490 : 			{	// put leading fill
; 1491 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  001c3	8b 4c 24 70	 mov	 ecx, DWORD PTR __Dest$[esp+96]
  001c7	8b 54 24 6c	 mov	 edx, DWORD PTR __Dest$[esp+92]
  001cb	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  001d0	74 28		 je	 SHORT $LN85@Iput
  001d2	8b 44 24 78	 mov	 eax, DWORD PTR __Fill$[esp+92]
  001d6	57		 push	 edi
  001d7	50		 push	 eax
  001d8	51		 push	 ecx
  001d9	52		 push	 edx
  001da	8d 44 24 24	 lea	 eax, DWORD PTR $T185245[esp+112]
  001de	50		 push	 eax
  001df	56		 push	 esi
  001e0	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  001e5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e7	89 8c 24 84 00
	00 00		 mov	 DWORD PTR __Dest$[esp+116], ecx
  001ee	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001f1	83 c4 18	 add	 esp, 24			; 00000018H
  001f4	89 54 24 70	 mov	 DWORD PTR __Dest$[esp+96], edx

; 1492 : 			_Fillcount = 0;

  001f8	eb 5c		 jmp	 SHORT $LN94@Iput
$LN85@Iput:

; 1493 : 			}
; 1494 : 		else if (_Adjustfield == ios_base::internal)
; 1495 : 			{	// put internal fill
; 1496 : 			_Dest = _Putc(_Dest, _Buf, _Prefix);	// put prefix

  001fa	8b 44 24 14	 mov	 eax, DWORD PTR __Prefix$[esp+96]
  001fe	50		 push	 eax
  001ff	53		 push	 ebx
  00200	51		 push	 ecx
  00201	52		 push	 edx
  00202	8d 44 24 34	 lea	 eax, DWORD PTR $T185246[esp+112]
  00206	50		 push	 eax
  00207	56		 push	 esi
  00208	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  0020d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0020f	89 8c 24 84 00
	00 00		 mov	 DWORD PTR __Dest$[esp+116], ecx

; 1497 : 			_Buf += _Prefix, _Count -= _Prefix;

  00216	8b 4c 24 2c	 mov	 ecx, DWORD PTR __Prefix$[esp+120]
  0021a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1498 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount), _Fillcount = 0;

  0021d	57		 push	 edi
  0021e	03 d9		 add	 ebx, ecx
  00220	2b e9		 sub	 ebp, ecx
  00222	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+120]
  00229	51		 push	 ecx
  0022a	89 94 24 90 00
	00 00		 mov	 DWORD PTR __Dest$[esp+128], edx
  00231	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00234	8b 00		 mov	 eax, DWORD PTR [eax]
  00236	52		 push	 edx
  00237	50		 push	 eax
  00238	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T185247[esp+136]
  0023c	51		 push	 ecx
  0023d	56		 push	 esi
  0023e	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00243	8b 10		 mov	 edx, DWORD PTR [eax]
  00245	89 94 24 9c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], edx
  0024c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0024f	83 c4 30	 add	 esp, 48			; 00000030H
  00252	89 44 24 70	 mov	 DWORD PTR __Dest$[esp+96], eax
$LN94@Iput:
  00256	33 ff		 xor	 edi, edi
$LN1@Iput:

; 1499 : 			}
; 1500 : 
; 1501 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1502 : 			_Punct_fac.thousands_sep());	// put field

  00258	8b 4c 24 20	 mov	 ecx, DWORD PTR __Punct_fac$[esp+96]
  0025c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0025e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00261	ff d0		 call	 eax
  00263	8b 54 24 70	 mov	 edx, DWORD PTR __Dest$[esp+96]
  00267	88 44 24 20	 mov	 BYTE PTR $T185338[esp+96], al
  0026b	8b 4c 24 20	 mov	 ecx, DWORD PTR $T185338[esp+96]
  0026f	8b 44 24 6c	 mov	 eax, DWORD PTR __Dest$[esp+92]
  00273	51		 push	 ecx
  00274	55		 push	 ebp
  00275	53		 push	 ebx
  00276	52		 push	 edx
  00277	50		 push	 eax
  00278	8d 4c 24 38	 lea	 ecx, DWORD PTR $T185248[esp+116]
  0027c	51		 push	 ecx
  0027d	56		 push	 esi
  0027e	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  00283	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1503 : 		_Iosbase.width(0);

  00285	8b 54 24 38	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+124]

; 1504 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00289	57		 push	 edi
  0028a	8b 7c 24 50	 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+128]
  0028e	89 8c 24 8c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+124], ecx
  00295	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00298	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], 0
  0029f	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR __Fill$[esp+124]
  002a6	52		 push	 edx
  002a7	50		 push	 eax
  002a8	51		 push	 ecx
  002a9	57		 push	 edi
  002aa	56		 push	 esi
  002ab	89 84 24 a4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+148], eax
  002b2	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  002b7	83 c4 34	 add	 esp, 52			; 00000034H
  002ba	83 7c 24 4c 10	 cmp	 DWORD PTR __Grouping$[esp+120], 16 ; 00000010H
  002bf	72 0d		 jb	 SHORT $LN86@Iput
  002c1	8b 44 24 38	 mov	 eax, DWORD PTR __Grouping$[esp+100]
  002c5	50		 push	 eax
  002c6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002cb	83 c4 04	 add	 esp, 4
$LN86@Iput:
  002ce	8b c7		 mov	 eax, edi

; 1505 : 		}

  002d0	8b 4c 24 54	 mov	 ecx, DWORD PTR __$EHRec$[esp+96]
  002d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002db	59		 pop	 ecx
  002dc	5f		 pop	 edi
  002dd	5e		 pop	 esi
  002de	5d		 pop	 ebp
  002df	5b		 pop	 ebx
  002e0	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+76]
  002e4	33 cc		 xor	 ecx, esp
  002e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002eb	83 c4 4c	 add	 esp, 76			; 0000004cH
  002ee	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR $T185237[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 b0	 lea	 eax, DWORD PTR [edx-80]
  00017	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	83 c0 10	 add	 eax, 16			; 00000010H
  00024	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
PUBLIC	?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
_TEXT	SEGMENT
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::init, COMDAT
; _this$ = ecx

; 131  : 		{	// initialize with stream buffer pointer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 132  : 		_Init();	// initialize ios_base

  00003	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init

; 133  : 		_Mystrbuf = _Strbuf;

  00008	8b 44 24 08	 mov	 eax, DWORD PTR __Strbuf$[esp]

; 134  : 		_Tiestr = 0;
; 135  : 		_Fillch = widen(' ');

  0000c	6a 20		 push	 32			; 00000020H
  0000e	8b ce		 mov	 ecx, esi
  00010	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00013	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  0001a	e8 00 00 00 00	 call	 ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen

; 136  : 
; 137  : 		if (_Mystrbuf == 0)

  0001f	83 7e 28 00	 cmp	 DWORD PTR [esi+40], 0
  00023	88 46 30	 mov	 BYTE PTR [esi+48], al
  00026	75 10		 jne	 SHORT $LN11@init

; 138  : 			setstate(badbit);

  00028	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002b	83 c8 04	 or	 eax, 4
  0002e	6a 00		 push	 0
  00030	50		 push	 eax
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN11@init:

; 139  : 
; 140  : 		if (_Isstd)

  00038	80 7c 24 0c 00	 cmp	 BYTE PTR __Isstd$[esp], 0
  0003d	74 0d		 je	 SHORT $LN2@init

; 141  : 			_Addstd(this);	// special handling for standard streams

  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  00045	83 c4 04	 add	 esp, 4
  00048	5e		 pop	 esi

; 144  : 		}

  00049	c2 08 00	 ret	 8
$LN2@init:

; 142  : 		else
; 143  : 		_Stdstr = 0;

  0004c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00053	5e		 pop	 esi

; 144  : 		}

  00054	c2 08 00	 ret	 8
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::init
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@1@0PAU2@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
$T185541 = -4						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Cat$185545 = 24					; size = 1
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@1@0PAU2@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

  00001	8b 54 24 18	 mov	 edx, DWORD PTR __Cat$185545[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T185541[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T185541[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 1c	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 20	 mov	 ecx, DWORD PTR __Last$[esp+16]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >

; 1142 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 14 00	 ret	 20			; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@1@0PAU2@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z ; stdext::unchecked_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z
_TEXT	SEGMENT
$T185565 = -4						; size = 1
__First$ = 8						; size = 4
__Cat$185571 = 12					; size = 1
$T185567 = 12						; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z PROC ; stdext::unchecked_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

  00000	51		 push	 ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Cat$185571[esp]
  00005	8b 54 24 0c	 mov	 edx, DWORD PTR $T185567[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T185565[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T185565[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>

; 3607 : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_copy@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z ENDP ; stdext::unchecked_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@@Z ; std::_Destroy_range<std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@@Z PROC ; std::_Destroy_range<std::allocator<HostDevice> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

  00000	56		 push	 esi

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 13		 je	 SHORT $LN5@Destroy_ra@3
  0000e	8b ff		 npad	 2
$LL7@Destroy_ra@3:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00017	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0001d	3b f7		 cmp	 esi, edi
  0001f	75 ef		 jne	 SHORT $LL7@Destroy_ra@3
$LN5@Destroy_ra@3:
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 226  : 	}

  00023	c3		 ret	 0
??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@0AAV?$allocator@UFavoriteVolume@CipherShed@@@0@@Z ; std::_Destroy_range<std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy_range@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@0AAV?$allocator@UFavoriteVolume@CipherShed@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@0AAV?$allocator@UFavoriteVolume@CipherShed@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CipherShed::FavoriteVolume> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

  00000	56		 push	 esi

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 10		 je	 SHORT $LN5@Destroy_ra@4
  0000e	8b ff		 npad	 2
$LL7@Destroy_ra@4:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00017	83 c6 78	 add	 esi, 120		; 00000078H
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL7@Destroy_ra@4
$LN5@Destroy_ra@4:
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 226  : 	}

  00020	c3		 ret	 0
??$_Destroy_range@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@0AAV?$allocator@UFavoriteVolume@CipherShed@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<CipherShed::FavoriteVolume *,unsigned int,CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z
_TEXT	SEGMENT
$T185682 = -4						; size = 1
__Cat$185687 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<CipherShed::FavoriteVolume *,unsigned int,CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

  00000	51		 push	 ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

  00001	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T185682[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T185682[esp+4]
  0000c	8b 0c 24	 mov	 ecx, DWORD PTR __Cat$185687[esp+4]
  0000f	50		 push	 eax
  00010	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+4]
  00014	51		 push	 ecx
  00015	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00019	52		 push	 edx
  0001a	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CipherShed::FavoriteVolume *,unsigned int,CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >

; 943  : 	}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c3		 ret	 0
??$unchecked_uninitialized_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<CipherShed::FavoriteVolume *,unsigned int,CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??$fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z ; std::fill<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z PROC ; std::fill<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

  00000	56		 push	 esi

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 15		 je	 SHORT $LN11@fill
  0000e	53		 push	 ebx
  0000f	8b 5c 24 18	 mov	 ebx, DWORD PTR __Val$[esp+8]
$LL13@fill:
  00013	53		 push	 ebx
  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ??4FavoriteVolume@CipherShed@@QAEAAU01@ABU01@@Z
  0001b	83 c6 78	 add	 esi, 120		; 00000078H
  0001e	3b f7		 cmp	 esi, edi
  00020	75 f1		 jne	 SHORT $LL13@fill
  00022	5b		 pop	 ebx
$LN11@fill:
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi

; 3188 : 	}

  00025	c3		 ret	 0
??$fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z ENDP ; std::fill<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z
_TEXT	SEGMENT
$T185720 = -4						; size = 1
__First$ = 8						; size = 4
__Cat$185724 = 12					; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Cat$185724[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T185720[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T185720[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >

; 823  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_uninitialized_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Move_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T185748 = -4						; size = 1
__Cat$185752 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

  00000	51		 push	 ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

  00001	8b 54 24 14	 mov	 edx, DWORD PTR __First_dest_cat$[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T185748[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T185748[esp+4]
  0000c	8b 0c 24	 mov	 ecx, DWORD PTR __Cat$185752[esp+4]
  0000f	50		 push	 eax
  00010	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00014	51		 push	 ecx
  00015	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  00019	52		 push	 edx
  0001a	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>

; 2755 : 	}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c3		 ret	 0
??$_Move_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@U_Undefined_move_tag@4@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume>,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@U_Undefined_move_tag@4@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T185785 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$185788 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@U_Undefined_move_tag@4@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

  00000	51		 push	 ecx

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$185788[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T185785[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T185785[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >

; 208  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Uninit_move@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@U_Undefined_move_tag@4@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAUFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@2@@stdext@@YAPAUFavoriteVolume@CipherShed@@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAUFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@2@@stdext@@YAPAUFavoriteVolume@CipherShed@@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@4@@Z
_TEXT	SEGMENT
$T185805 = -4						; size = 1
__First$ = 8						; size = 8
__Cat$185809 = 16					; size = 1
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAUFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@2@@stdext@@YAPAUFavoriteVolume@CipherShed@@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$185809[esp]
  00005	8b 54 24 1c	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T185805[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T185805[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 1c	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001a	52		 push	 edx
  0001b	8b 54 24 18	 mov	 edx, DWORD PTR __First$[esp+16]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >

; 823  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@PAUFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@2@@stdext@@YAPAUFavoriteVolume@CipherShed@@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??$_Insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Insert<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	SEGMENT
__catchsym$??$_Insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$0
__unwindtable$??$_Insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$2
__ehfuncinfo$??$_Insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$_Insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
$T185847 = -40						; size = 8
__Next$ = -32						; size = 8
__Before$147422 = -24					; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__First$ = 16						; size = 8
__Last$ = 24						; size = 8
___formal$ = 32						; size = 1
??$_Insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Insert<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 762  : 		void _Insert(const_iterator _Where,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d ec	 mov	 DWORD PTR _this$[ebp], ebx

; 763  : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 764  : 		{	// insert [_First, _Last) at _Where, forward iterators
; 765  : 
; 766  :  #if _HAS_ITERATOR_DEBUGGING
; 767  : 		_DEBUG_RANGE(_First, _Last);
; 768  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 769  : 
; 770  : 		_Iter _Next = _First;

  00030	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  00033	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  00036	89 45 e0	 mov	 DWORD PTR __Next$[ebp], eax
  00039	89 4d e4	 mov	 DWORD PTR __Next$[ebp+4], ecx

; 771  : 
; 772  : 		_TRY_BEGIN

  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 773  : 		for (; _First != _Last; ++_First)

$LL24@Insert:
  00043	85 c0		 test	 eax, eax
  00045	74 05		 je	 SHORT $LN41@Insert
  00047	3b 45 18	 cmp	 eax, DWORD PTR __Last$[ebp]
  0004a	74 08		 je	 SHORT $LN40@Insert
$LN41@Insert:
  0004c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00051	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
$LN40@Insert:
  00054	8b 55 14	 mov	 edx, DWORD PTR __First$[ebp+4]
  00057	3b 55 1c	 cmp	 edx, DWORD PTR __Last$[ebp+4]
  0005a	0f 84 de 00 00
	00		 je	 $LN4@Insert

; 774  : 			_Insert(_Where, *_First);

  00060	85 c0		 test	 eax, eax
  00062	75 0c		 jne	 SHORT $LN89@Insert
  00064	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00069	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  0006c	85 c0		 test	 eax, eax
  0006e	74 04		 je	 SHORT $LN66@Insert
$LN89@Insert:
  00070	8b 00		 mov	 eax, DWORD PTR [eax]
  00072	eb 02		 jmp	 SHORT $LN67@Insert
$LN66@Insert:
  00074	33 c0		 xor	 eax, eax
$LN67@Insert:
  00076	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  00079	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0007c	75 05		 jne	 SHORT $LN52@Insert
  0007e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN52@Insert:
  00083	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp+4]
  00086	8b 45 14	 mov	 eax, DWORD PTR __First$[ebp+4]
  00089	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0008c	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
  0008f	83 c0 08	 add	 eax, 8
  00092	50		 push	 eax
  00093	52		 push	 edx
  00094	51		 push	 ecx
  00095	8b cb		 mov	 ecx, ebx
  00097	e8 00 00 00 00	 call	 ?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Buynode
  0009c	6a 01		 push	 1
  0009e	8b cb		 mov	 ecx, ebx
  000a0	8b f0		 mov	 esi, eax
  000a2	e8 00 00 00 00	 call	 ?_Incsize@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Incsize
  000a7	89 37		 mov	 DWORD PTR [edi], esi
  000a9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ac	89 30		 mov	 DWORD PTR [eax], esi
  000ae	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  000b1	85 c0		 test	 eax, eax
  000b3	75 0c		 jne	 SHORT $LN88@Insert
  000b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000ba	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  000bd	85 c0		 test	 eax, eax
  000bf	74 04		 je	 SHORT $LN30@Insert
$LN88@Insert:

; 773  : 		for (; _First != _Last; ++_First)

  000c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c3	eb 02		 jmp	 SHORT $LN31@Insert
$LN30@Insert:
  000c5	33 c9		 xor	 ecx, ecx
$LN31@Insert:
  000c7	8b 55 14	 mov	 edx, DWORD PTR __First$[ebp+4]
  000ca	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  000cd	75 08		 jne	 SHORT $LN16@Insert
  000cf	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000d4	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
$LN16@Insert:
  000d7	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	89 55 14	 mov	 DWORD PTR __First$[ebp+4], edx
  000df	e9 5f ff ff ff	 jmp	 $LL24@Insert
__catch$??$_Insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$0:

; 775  : 		_CATCH_ALL
; 776  : 		for (; _Next != _First; ++_Next)

  000e4	8d 45 10	 lea	 eax, DWORD PTR __First$[ebp]
  000e7	50		 push	 eax
  000e8	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  000eb	e8 00 00 00 00	 call	 ??9?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NABV012@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator!=
  000f0	84 c0		 test	 al, al
  000f2	74 41		 je	 SHORT $LN1@Insert
  000f4	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
$LL3@Insert:

; 777  : 			{	// undo inserts
; 778  : 			const_iterator _Before = _Where;

  000f7	8b 4d 08	 mov	 ecx, DWORD PTR __Where$[ebp]
  000fa	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp+4]
  000fd	89 4d e8	 mov	 DWORD PTR __Before$147422[ebp], ecx

; 779  : 			erase(--_Before);

  00100	8d 4d e8	 lea	 ecx, DWORD PTR __Before$147422[ebp]
  00103	89 55 ec	 mov	 DWORD PTR __Before$147422[ebp+4], edx
  00106	e8 00 00 00 00	 call	 ??F?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV012@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator--
  0010b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0010e	8b 10		 mov	 edx, DWORD PTR [eax]
  00110	51		 push	 ecx
  00111	52		 push	 edx
  00112	8d 45 d8	 lea	 eax, DWORD PTR $T185847[ebp]
  00115	50		 push	 eax
  00116	8b ce		 mov	 ecx, esi
  00118	e8 00 00 00 00	 call	 ?erase@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase
  0011d	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00120	e8 00 00 00 00	 call	 ??E?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV012@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator++
  00125	8d 4d 10	 lea	 ecx, DWORD PTR __First$[ebp]
  00128	51		 push	 ecx
  00129	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  0012c	e8 00 00 00 00	 call	 ??9?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NABV012@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator!=
  00131	84 c0		 test	 al, al
  00133	75 c2		 jne	 SHORT $LL3@Insert
$LN1@Insert:

; 780  : 			}
; 781  : 		_RERAISE;

  00135	6a 00		 push	 0
  00137	6a 00		 push	 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Insert:

; 782  : 		_CATCH_END
; 783  : 		}

  0013e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00141	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00148	59		 pop	 ecx
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 1c 00	 ret	 28			; 0000001cH
$LN91@Insert:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Insert<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1> >
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT
; _this$ = ecx

; 550  : 		{	// flush output stream

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 551  : 		ios_base::iostate _State = ios_base::goodbit;
; 552  : 		if (!ios_base::fail() && _Myios::rdbuf()->pubsync() == -1)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00008	57		 push	 edi
  00009	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  0000c	33 ff		 xor	 edi, edi
  0000e	f6 40 08 06	 test	 BYTE PTR [eax+8], 6
  00012	75 16		 jne	 SHORT $LN1@flush
  00014	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00017	8b 10		 mov	 edx, DWORD PTR [eax]
  00019	8b c8		 mov	 ecx, eax
  0001b	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0001e	ff d0		 call	 eax
  00020	83 f8 ff	 cmp	 eax, -1
  00023	75 05		 jne	 SHORT $LN1@flush

; 553  : 			_State |= ios_base::badbit;	// sync failed

  00025	bf 04 00 00 00	 mov	 edi, 4
$LN1@flush:

; 554  : 		_Myios::setstate(_State);

  0002a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0002f	03 ce		 add	 ecx, esi
  00031	85 ff		 test	 edi, edi
  00033	74 16		 je	 SHORT $LN21@flush
  00035	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00038	0b c7		 or	 eax, edi
  0003a	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  0003e	75 03		 jne	 SHORT $LN19@flush
  00040	83 c8 04	 or	 eax, 4
$LN19@flush:
  00043	6a 00		 push	 0
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN21@flush:
  0004b	5f		 pop	 edi

; 555  : 		return (*this);

  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi

; 556  : 		}

  0004f	c3		 ret	 0
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
_TEXT	ENDS
PUBLIC	??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$5
__unwindtable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T186261 = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T186406 = 8						; size = 1
__Cat$186409 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
  00030	6a 04		 push	 4
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	85 c0		 test	 eax, eax
  0003c	74 04		 je	 SHORT $LN19@vector@3
  0003e	89 30		 mov	 DWORD PTR [eax], esi
  00040	eb 02		 jmp	 SHORT $LN20@vector@3
$LN19@vector@3:
  00042	33 c0		 xor	 eax, eax
$LN20@vector@3:
  00044	89 06		 mov	 DWORD PTR [esi], eax

; 501  : 		if (_Buy(_Right.size()))

  00046	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00049	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  0004c	2b 4b 0c	 sub	 ecx, DWORD PTR [ebx+12]
  0004f	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00054	f7 e9		 imul	 ecx
  00056	c1 fa 06	 sar	 edx, 6
  00059	8b fa		 mov	 edi, edx
  0005b	b8 00 00 00 00	 mov	 eax, 0
  00060	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00063	03 fa		 add	 edi, edx
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0006c	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0006f	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00072	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00075	74 6d		 je	 SHORT $LN8@vector@3
  00077	81 ff e1 e1 e1
	01		 cmp	 edi, 31580641		; 01e1e1e1H
  0007d	76 05		 jbe	 SHORT $LN46@vector@3
  0007f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
$LN46@vector@3:
  00084	50		 push	 eax
  00085	57		 push	 edi
  00086	e8 00 00 00 00	 call	 ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>
  0008b	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  00091	03 f8		 add	 edi, eax
  00093	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00096	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00099	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 502  : 			_TRY_BEGIN
; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

  0009c	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0009f	83 c4 08	 add	 esp, 8
  000a2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000a6	89 45 ec	 mov	 DWORD PTR $T186261[ebp], eax
  000a9	39 43 0c	 cmp	 DWORD PTR [ebx+12], eax
  000ac	76 05		 jbe	 SHORT $LN63@vector@3
  000ae	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN63@vector@3:
  000b3	8b 7b 0c	 mov	 edi, DWORD PTR [ebx+12]
  000b6	3b 7b 10	 cmp	 edi, DWORD PTR [ebx+16]
  000b9	76 05		 jbe	 SHORT $LN80@vector@3
  000bb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN80@vector@3:
  000c0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000c3	c6 45 08 00	 mov	 BYTE PTR $T186406[ebp], 0
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR $T186406[ebp]
  000ca	8b 55 08	 mov	 edx, DWORD PTR __Cat$186409[ebp]
  000cd	51		 push	 ecx
  000ce	52		 push	 edx
  000cf	8b 55 ec	 mov	 edx, DWORD PTR $T186261[ebp]
  000d2	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  000d5	51		 push	 ecx
  000d6	50		 push	 eax
  000d7	52		 push	 edx
  000d8	57		 push	 edi
  000d9	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
  000de	83 c4 18	 add	 esp, 24			; 00000018H
  000e1	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN8@vector@3:

; 507  : 			_CATCH_END
; 508  : 		}

  000e4	8b c6		 mov	 eax, esi
  000e6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f0	59		 pop	 ecx
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c2 04 00	 ret	 4
__catch$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

  000fa	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000fd	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy

; 506  : 			_RERAISE;

  00102	6a 00		 push	 0
  00104	6a 00		 push	 0
  00106	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN114@vector@3:
  0010b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
PUBLIC	??1?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??1?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 520  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 521  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear
  00008	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 522  : 		}

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	51		 push	 ecx
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 08	 add	 esp, 8
  00023	5e		 pop	 esi
  00024	c3		 ret	 0
??1?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??1?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 520  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 521  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
  00008	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 522  : 		}

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	51		 push	 ecx
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 08	 add	 esp, 8
  00023	5e		 pop	 esi
  00024	c3		 ret	 0
??1?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?push_back@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back, COMDAT
; _this$ = ecx

; 670  : 		_Insert(end(), _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0000c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000f	50		 push	 eax
  00010	51		 push	 ecx
  00011	57		 push	 edi
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@PAU342@0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Buynode
  00019	6a 01		 push	 1
  0001b	8b ce		 mov	 ecx, esi
  0001d	8b d8		 mov	 ebx, eax
  0001f	e8 00 00 00 00	 call	 ?_Incsize@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Incsize
  00024	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00027	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	89 1a		 mov	 DWORD PTR [edx], ebx
  0002e	5b		 pop	 ebx

; 671  : 		}

  0002f	c2 04 00	 ret	 4
?push_back@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

  00000	56		 push	 esi

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 13		 je	 SHORT $LN7@Destroy@2
  0000e	8b ff		 npad	 2
$LL9@Destroy@2:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00017	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0001d	3b f7		 cmp	 esi, edi
  0001f	75 ef		 jne	 SHORT $LL9@Destroy@2
$LN7@Destroy@2:
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 1120 : 		}

  00023	c2 08 00	 ret	 8
?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Tidy@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXXZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Tidy, COMDAT
; _this$ = ecx

; 1212 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1213 : 		clear();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear

; 1214 : 		this->_Alptr.destroy(&_Nextnode(_Myhead));
; 1215 : 		this->_Alptr.destroy(&_Prevnode(_Myhead));
; 1216 : 		this->_Alnod.deallocate(_Myhead, 1);

  00008	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	83 c4 04	 add	 esp, 4

; 1217 : 		_Myhead = 0;

  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	5e		 pop	 esi

; 1218 : 		}

  0001c	c3		 ret	 0
?_Tidy@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXXZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

  00000	56		 push	 esi

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 10		 je	 SHORT $LN7@Destroy@3
  0000e	8b ff		 npad	 2
$LL9@Destroy@3:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00017	83 c6 78	 add	 esi, 120		; 00000078H
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL9@Destroy@3
$LN7@Destroy@3:
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1120 : 		}

  00020	c2 08 00	 ret	 8
?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 1124 : 		if (_Myfirst != 0)

  00004	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]
  00007	85 f6		 test	 esi, esi
  00009	74 23		 je	 SHORT $LN22@Tidy@6
  0000b	57		 push	 edi

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

  0000c	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  0000f	3b f7		 cmp	 esi, edi
  00011	74 0e		 je	 SHORT $LN10@Tidy@6
$LL12@Tidy@6:
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  0001a	83 c6 78	 add	 esi, 120		; 00000078H
  0001d	3b f7		 cmp	 esi, edi
  0001f	75 f2		 jne	 SHORT $LL12@Tidy@6
$LN10@Tidy@6:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  00021	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002a	83 c4 04	 add	 esp, 4
  0002d	5f		 pop	 edi
$LN22@Tidy@6:
  0002e	5e		 pop	 esi

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  0002f	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  00036	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  0003d	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
  00044	5b		 pop	 ebx

; 1135 : 		}

  00045	c3		 ret	 0
?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU34@IABU34@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ufill
; Function compile flags: /Ogtpy
;	COMDAT ?_Ufill@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU34@IABU34@@Z
_TEXT	SEGMENT
$T186923 = -4						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Cat$186926 = 16					; size = 1
__Val$ = 16						; size = 4
?_Ufill@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU34@IABU34@@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

  00000	51		 push	 ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$186926[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __Count$[esp+4]
  0000a	57		 push	 edi
  0000b	8b 7c 24 10	 mov	 edi, DWORD PTR __Ptr$[esp+8]
  0000f	c6 44 24 08 00	 mov	 BYTE PTR $T186923[esp+12], 0
  00014	8b 44 24 08	 mov	 eax, DWORD PTR $T186923[esp+12]
  00018	50		 push	 eax
  00019	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+12]
  0001d	52		 push	 edx
  0001e	83 c1 08	 add	 ecx, 8
  00021	51		 push	 ecx
  00022	50		 push	 eax
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CipherShed::FavoriteVolume *,unsigned int,CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >

; 1255 : 		return (_Ptr + _Count);

  0002a	8b ce		 mov	 ecx, esi
  0002c	83 c4 18	 add	 esp, 24			; 00000018H
  0002f	c1 e1 04	 shl	 ecx, 4
  00032	2b ce		 sub	 ecx, esi
  00034	8d 04 cf	 lea	 eax, DWORD PTR [edi+ecx*8]
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi

; 1256 : 		}

  00039	59		 pop	 ecx
  0003a	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU34@IABU34@@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ufill
_TEXT	ENDS
PUBLIC	?_Insert@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUFavoriteVolume@CipherShed@@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Insert@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
__Val$ = 16						; size = 4
?_Insert@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUFavoriteVolume@CipherShed@@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert, COMDAT
; _this$ = ecx

; 711  : 
; 712  :  #if _HAS_ITERATOR_DEBUGGING
; 713  : 		if (_Where._Mycont != this)
; 714  : 			_DEBUG_ERROR("list insert iterator outside range");
; 715  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 716  : 
; 717  : 		_Nodeptr _Pnode = _Where._Mynode();
; 718  : 		_Nodeptr _Newnode = _Buynode(_Pnode, _Prevnode(_Pnode), _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Where$[esp]
  00004	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 4c 24 18	 mov	 ecx, DWORD PTR __Val$[esp+8]
  00010	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  00013	51		 push	 ecx
  00014	52		 push	 edx
  00015	50		 push	 eax
  00016	8b cf		 mov	 ecx, edi
  00018	e8 00 00 00 00	 call	 ?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode

; 719  : 		_Incsize(1);

  0001d	6a 01		 push	 1
  0001f	8b cf		 mov	 ecx, edi
  00021	8b f0		 mov	 esi, eax
  00023	e8 00 00 00 00	 call	 ?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Incsize

; 720  : 		_Prevnode(_Pnode) = _Newnode;

  00028	89 33		 mov	 DWORD PTR [ebx], esi

; 721  : 		_Nextnode(_Prevnode(_Newnode)) = _Newnode;

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	5f		 pop	 edi
  0002e	89 30		 mov	 DWORD PTR [eax], esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx

; 722  : 		}

  00032	c2 0c 00	 ret	 12			; 0000000cH
?_Insert@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUFavoriteVolume@CipherShed@@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert
_TEXT	ENDS
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 95   : 			{	// construct locking and testing stream

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f9		 mov	 edi, ecx
  00025	89 7c 24 0c	 mov	 DWORD PTR _this$[esp+28], edi
  00029	8b 74 24 20	 mov	 esi, DWORD PTR __Ostr$[esp+24]
  0002d	89 37		 mov	 DWORD PTR [edi], esi
  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	8b 44 31 28	 mov	 eax, DWORD PTR [ecx+esi+40]
  00038	85 c0		 test	 eax, eax
  0003a	74 08		 je	 SHORT $LN12@sentry
  0003c	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0003f	e8 00 00 00 00	 call	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
$LN12@sentry:

; 96   : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00044	8b 16		 mov	 edx, DWORD PTR [esi]
  00046	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00049	03 c6		 add	 eax, esi
  0004b	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0004f	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 0
  00057	75 0e		 jne	 SHORT $LN1@sentry
  00059	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  0005c	85 c0		 test	 eax, eax
  0005e	74 07		 je	 SHORT $LN1@sentry

; 97   : 				_Ostr.tie()->flush();

  00060	8b c8		 mov	 ecx, eax
  00062	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN1@sentry:

; 98   : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006c	83 7c 32 08 00	 cmp	 DWORD PTR [edx+esi+8], 0
  00071	0f 94 c0	 sete	 al
  00074	88 47 04	 mov	 BYTE PTR [edi+4], al

; 99   : 			}

  00077	8b c7		 mov	 eax, edi
  00079	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0007d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00084	59		 pop	 ecx
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	83 c4 10	 add	 esp, 16			; 00000010H
  0008a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??_C@_02EAOCLKAK@ld?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	_sprintf_s:PROC
;	COMDAT ??_C@_02EAOCLKAK@ld?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02EAOCLKAK@ld?$AA@ DB 'ld', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 6
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1153 : 		{	// put formatted long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]

; 1154 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1155 : 		char _Buf[_Buf_size], _Fmt[6];
; 1156 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1157 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "ld",
; 1158 : 				_Iosbase.flags()), _Val)));

  00013	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  0001c	8b f1		 mov	 esi, ecx
  0001e	8b 4c 24 70	 mov	 ecx, DWORD PTR __Val$[esp+84]
  00022	51		 push	 ecx
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02EAOCLKAK@ld?$AA@
  00029	8d 54 24 18	 lea	 edx, DWORD PTR __Fmt$[esp+100]
  0002d	52		 push	 edx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 44 24 1c	 lea	 eax, DWORD PTR __Buf$[esp+96]
  0003c	6a 40		 push	 64			; 00000040H
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _sprintf_s
  00044	8b 54 24 7c	 mov	 edx, DWORD PTR __Fill$[esp+100]
  00048	50		 push	 eax
  00049	8b 44 24 78	 mov	 eax, DWORD PTR __Dest$[esp+108]
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR __Buf$[esp+108]
  00051	51		 push	 ecx
  00052	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  00056	52		 push	 edx
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	51		 push	 ecx
  0005a	57		 push	 edi
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1159 : 		}

  00061	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  00068	83 c4 30	 add	 esp, 48			; 00000030H
  0006b	8b c7		 mov	 eax, edi
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	33 cc		 xor	 ecx, esp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	83 c4 4c	 add	 esp, 76			; 0000004cH
  0007a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02BDDLJJBK@lu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02BDDLJJBK@lu?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02BDDLJJBK@lu?$AA@ DB 'lu', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 6
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1163 : 		{	// put formatted unsigned long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]

; 1164 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1165 : 		char _Buf[_Buf_size], _Fmt[6];
; 1166 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1167 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "lu",
; 1168 : 				_Iosbase.flags()), _Val)));

  00013	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  0001c	8b f1		 mov	 esi, ecx
  0001e	8b 4c 24 70	 mov	 ecx, DWORD PTR __Val$[esp+84]
  00022	51		 push	 ecx
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02BDDLJJBK@lu?$AA@
  00029	8d 54 24 18	 lea	 edx, DWORD PTR __Fmt$[esp+100]
  0002d	52		 push	 edx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 44 24 1c	 lea	 eax, DWORD PTR __Buf$[esp+96]
  0003c	6a 40		 push	 64			; 00000040H
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _sprintf_s
  00044	8b 54 24 7c	 mov	 edx, DWORD PTR __Fill$[esp+100]
  00048	50		 push	 eax
  00049	8b 44 24 78	 mov	 eax, DWORD PTR __Dest$[esp+108]
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR __Buf$[esp+108]
  00051	51		 push	 ecx
  00052	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  00056	52		 push	 edx
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	51		 push	 ecx
  0005a	57		 push	 edi
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1169 : 		}

  00061	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  00068	83 c4 30	 add	 esp, 48			; 00000030H
  0006b	8b c7		 mov	 eax, edi
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	33 cc		 xor	 ecx, esp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	83 c4 4c	 add	 esp, 76			; 0000004cH
  0007a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02HIKPPMOK@Ld?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02HIKPPMOK@Ld?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02HIKPPMOK@Ld?$AA@ DB 'Ld', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 8
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1174 : 		{	// put formatted long long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax

; 1175 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1176 : 		char _Buf[_Buf_size], _Fmt[8];
; 1177 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1178 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "Ld",
; 1179 : 				_Iosbase.flags()), _Val)));

  0000e	8b 54 24 64	 mov	 edx, DWORD PTR __Val$[esp+72]
  00012	53		 push	 ebx
  00013	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]
  00017	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  00020	8b f1		 mov	 esi, ecx
  00022	8b 4c 24 74	 mov	 ecx, DWORD PTR __Val$[esp+88]
  00026	51		 push	 ecx
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02HIKPPMOK@Ld?$AA@
  0002e	8d 44 24 1c	 lea	 eax, DWORD PTR __Fmt$[esp+104]
  00032	50		 push	 eax
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	50		 push	 eax
  0003d	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  00041	6a 40		 push	 64			; 00000040H
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _sprintf_s
  00049	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  0004d	50		 push	 eax
  0004e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+108]
  00055	8d 54 24 2c	 lea	 edx, DWORD PTR __Buf$[esp+112]
  00059	52		 push	 edx
  0005a	8b 54 24 7c	 mov	 edx, DWORD PTR __Dest$[esp+112]
  0005e	50		 push	 eax
  0005f	53		 push	 ebx
  00060	51		 push	 ecx
  00061	52		 push	 edx
  00062	57		 push	 edi
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1180 : 		}

  00069	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140]
  00070	83 c4 34	 add	 esp, 52			; 00000034H
  00073	8b c7		 mov	 eax, edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 4c	 add	 esp, 76			; 0000004cH
  00082	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02CLHGNPPK@Lu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02CLHGNPPK@Lu?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02CLHGNPPK@Lu?$AA@ DB 'Lu', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 8
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1184 : 		{	// put formatted unsigned long long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax

; 1185 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1186 : 		char _Buf[_Buf_size], _Fmt[8];
; 1187 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1188 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "Lu",
; 1189 : 				_Iosbase.flags()), _Val)));

  0000e	8b 54 24 64	 mov	 edx, DWORD PTR __Val$[esp+72]
  00012	53		 push	 ebx
  00013	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]
  00017	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  00020	8b f1		 mov	 esi, ecx
  00022	8b 4c 24 74	 mov	 ecx, DWORD PTR __Val$[esp+88]
  00026	51		 push	 ecx
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02CLHGNPPK@Lu?$AA@
  0002e	8d 44 24 1c	 lea	 eax, DWORD PTR __Fmt$[esp+104]
  00032	50		 push	 eax
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	50		 push	 eax
  0003d	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  00041	6a 40		 push	 64			; 00000040H
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _sprintf_s
  00049	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  0004d	50		 push	 eax
  0004e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+108]
  00055	8d 54 24 2c	 lea	 edx, DWORD PTR __Buf$[esp+112]
  00059	52		 push	 edx
  0005a	8b 54 24 7c	 mov	 edx, DWORD PTR __Dest$[esp+112]
  0005e	50		 push	 eax
  0005f	53		 push	 ebx
  00060	51		 push	 ecx
  00061	52		 push	 edx
  00062	57		 push	 edi
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1190 : 		}

  00069	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140]
  00070	83 c4 34	 add	 esp, 52			; 00000034H
  00073	8b c7		 mov	 eax, edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 4c	 add	 esp, 76			; 0000004cH
  00082	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	__real@38aa95a5b7f87a0f
PUBLIC	__real@4202a05f20000000
PUBLIC	__real@4733426172c74d82
PUBLIC	__real@0000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT __real@38aa95a5b7f87a0f
CONST	SEGMENT
__real@38aa95a5b7f87a0f DQ 038aa95a5b7f87a0fr	; 1e-035
CONST	ENDS
;	COMDAT __real@4202a05f20000000
CONST	SEGMENT
__real@4202a05f20000000 DQ 04202a05f20000000r	; 1e+010
CONST	ENDS
;	COMDAT __real@4733426172c74d82
CONST	SEGMENT
__real@4733426172c74d82 DQ 04733426172c74d82r	; 1e+035
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
_TEXT	SEGMENT
__Signed$143954 = -129					; size = 1
_this$ = -128						; size = 4
___$ReturnUdt$GSCopy$ = -124				; size = 4
__Fmt$ = -120						; size = 8
__Buf$ = -112						; size = 108
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1195 : 		{	// put formatted double to _Dest

  00000	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 80 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+132], eax
  00014	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+128]
  0001b	53		 push	 ebx
  0001c	55		 push	 ebp
  0001d	8b ac 24 9c 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+136]

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

  00024	89 44 24 10	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+140], eax
  00028	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	89 4c 24 14	 mov	 DWORD PTR _this$[esp+148], ecx
  00031	85 c0		 test	 eax, eax
  00033	7f 0e		 jg	 SHORT $LN13@do_put@2

; 1196 : 		const size_t _Buf_size = _MAX_EXP_DIG + _MAX_SIG_DIG + 64;
; 1197 : 		char _Buf[_Buf_size], _Fmt[8];
; 1198 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1199 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1200 : 				? 6 : _Iosbase.precision();	// desired precision

  00035	f7 45 10 00 20
	00 00		 test	 DWORD PTR [ebp+16], 8192 ; 00002000H
  0003c	75 05		 jne	 SHORT $LN13@do_put@2
  0003e	b8 06 00 00 00	 mov	 eax, 6
$LN13@do_put@2:
  00043	8b f0		 mov	 esi, eax

; 1201 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1202 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  00045	83 fe 24	 cmp	 esi, 36			; 00000024H
  00048	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  0004d	7f 02		 jg	 SHORT $LN16@do_put@2
  0004f	8b d6		 mov	 edx, esi
$LN16@do_put@2:

; 1203 : 		_Precision -= _Significance;
; 1204 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1205 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1206 : 
; 1207 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed
; 1208 : 			&& _Val * 0.5 != _Val)	// skip -Inf, 0, Inf

  00051	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  00054	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
  0005b	8b c1		 mov	 eax, ecx
  0005d	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00062	2b f2		 sub	 esi, edx
  00064	33 db		 xor	 ebx, ebx
  00066	33 ff		 xor	 edi, edi
  00068	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0006d	0f 85 ad 00 00
	00		 jne	 $LN1@do_put@2
  00073	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe0000000000000
  00079	d8 c9		 fmul	 ST(0), ST(1)
  0007b	dd e9		 fucomp	 ST(1)
  0007d	df e0		 fnstsw	 ax
  0007f	f6 c4 44	 test	 ah, 68			; 00000044H
  00082	0f 8b 98 00 00
	00		 jnp	 $LN1@do_put@2

; 1209 : 			{	// scale silly fixed-point value
; 1210 : 			bool _Signed = _Val < 0;

  00088	d9 ee		 fldz
  0008a	d8 d1		 fcom	 ST(1)
  0008c	df e0		 fnstsw	 ax
  0008e	f6 c4 41	 test	 ah, 65			; 00000041H
  00091	75 0b		 jne	 SHORT $LN17@do_put@2

; 1211 : 			if (_Signed)
; 1212 : 				_Val = -_Val;

  00093	d9 c9		 fxch	 ST(1)
  00095	c6 44 24 13 01	 mov	 BYTE PTR __Signed$143954[esp+148], 1
  0009a	d9 e0		 fchs
  0009c	eb 06		 jmp	 SHORT $LN9@do_put@2
$LN17@do_put@2:

; 1209 : 			{	// scale silly fixed-point value
; 1210 : 			bool _Signed = _Val < 0;

  0009e	88 5c 24 13	 mov	 BYTE PTR __Signed$143954[esp+148], bl

; 1226 : 				_Val = -_Val;

  000a2	d9 c9		 fxch	 ST(1)
$LN9@do_put@2:
  000a4	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  000aa	d8 d1		 fcom	 ST(1)
  000ac	df e0		 fnstsw	 ax
  000ae	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  000b4	f6 c4 41	 test	 ah, 65			; 00000041H
  000b7	7b 06		 jnp	 SHORT $LN8@do_put@2
$LN52@do_put@2:

; 1213 : 
; 1214 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000b9	dd d9		 fstp	 ST(1)
  000bb	eb 1c		 jmp	 SHORT $LN6@do_put@2
$LN58@do_put@2:
  000bd	d9 c9		 fxch	 ST(1)
$LN8@do_put@2:
  000bf	81 fb 88 13 00
	00		 cmp	 ebx, 5000		; 00001388H
  000c5	73 f2		 jae	 SHORT $LN52@do_put@2

; 1215 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000c7	dc fa		 fdiv	 ST(2), ST(0)
  000c9	83 c3 0a	 add	 ebx, 10			; 0000000aH
  000cc	d9 c9		 fxch	 ST(1)
  000ce	d8 d2		 fcom	 ST(2)
  000d0	df e0		 fnstsw	 ax
  000d2	f6 c4 41	 test	 ah, 65			; 00000041H
  000d5	7b e6		 jnp	 SHORT $LN58@do_put@2

; 1213 : 
; 1214 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000d7	dd d8		 fstp	 ST(0)
$LN6@do_put@2:

; 1216 : 
; 1217 : 			if (0 < _Val)

  000d9	d9 ca		 fxch	 ST(2)
  000db	d8 d9		 fcomp	 ST(1)
  000dd	df e0		 fnstsw	 ax
  000df	f6 c4 05	 test	 ah, 5
  000e2	7a 31		 jp	 SHORT $LN60@do_put@2

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000e4	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000e7	7c 2c		 jl	 SHORT $LN60@do_put@2
  000e9	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  000ef	eb 02		 jmp	 SHORT $LN4@do_put@2
$LN73@do_put@2:
  000f1	d9 c9		 fxch	 ST(1)
$LN4@do_put@2:
  000f3	d8 d1		 fcom	 ST(1)
  000f5	df e0		 fnstsw	 ax
  000f7	f6 c4 01	 test	 ah, 1
  000fa	75 5e		 jne	 SHORT $LN67@do_put@2
  000fc	81 ff 88 13 00
	00		 cmp	 edi, 5000		; 00001388H
  00102	73 56		 jae	 SHORT $LN67@do_put@2

; 1220 : 					{	// drop 10 zeros after decimal point
; 1221 : 					_Val *= 1e10;
; 1222 : 					_Precision -= 10;

  00104	83 ee 0a	 sub	 esi, 10			; 0000000aH
  00107	d9 c9		 fxch	 ST(1)
  00109	83 c7 0a	 add	 edi, 10			; 0000000aH
  0010c	d8 ca		 fmul	 ST(0), ST(2)
  0010e	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00111	7d de		 jge	 SHORT $LN73@do_put@2

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00113	dd d9		 fstp	 ST(1)
$LN60@do_put@2:

; 1223 : 					}
; 1224 : 
; 1225 : 			if (_Signed)

  00115	80 7c 24 13 00	 cmp	 BYTE PTR __Signed$143954[esp+148], 0
  0011a	dd d9		 fstp	 ST(1)
  0011c	74 02		 je	 SHORT $LN1@do_put@2

; 1226 : 				_Val = -_Val;

  0011e	d9 e0		 fchs
$LN1@do_put@2:

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

  00120	c6 44 24 1c 25	 mov	 BYTE PTR __Fmt$[esp+148], 37 ; 00000025H
  00125	8d 44 24 1d	 lea	 eax, DWORD PTR __Fmt$[esp+149]
  00129	f6 c1 20	 test	 cl, 32			; 00000020H
  0012c	74 09		 je	 SHORT $LN31@do_put@2
  0012e	c6 44 24 1d 2b	 mov	 BYTE PTR __Fmt$[esp+149], 43 ; 0000002bH
  00133	8d 44 24 1e	 lea	 eax, DWORD PTR __Fmt$[esp+150]
$LN31@do_put@2:
  00137	f6 c1 10	 test	 cl, 16			; 00000010H
  0013a	74 04		 je	 SHORT $LN30@do_put@2
  0013c	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  0013f	40		 inc	 eax
$LN30@do_put@2:
  00140	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
  00143	40		 inc	 eax
  00144	c6 00 2a	 mov	 BYTE PTR [eax], 42	; 0000002aH
  00147	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  0014d	40		 inc	 eax
  0014e	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  00154	75 08		 jne	 SHORT $LN36@do_put@2
  00156	b1 66		 mov	 cl, 102			; 00000066H
  00158	eb 1d		 jmp	 SHORT $LN35@do_put@2
$LN67@do_put@2:

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  0015a	dd d8		 fstp	 ST(0)
  0015c	eb b7		 jmp	 SHORT $LN60@do_put@2

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

$LN36@do_put@2:
  0015e	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  00164	75 04		 jne	 SHORT $LN34@do_put@2
  00166	b1 61		 mov	 cl, 97			; 00000061H
  00168	eb 0d		 jmp	 SHORT $LN35@do_put@2
$LN34@do_put@2:
  0016a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00170	0f 95 c1	 setne	 cl
  00173	8d 4c 09 65	 lea	 ecx, DWORD PTR [ecx+ecx+101]
$LN35@do_put@2:
  00177	83 ec 08	 sub	 esp, 8
  0017a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0017d	52		 push	 edx
  0017e	88 08		 mov	 BYTE PTR [eax], cl
  00180	8d 4c 24 28	 lea	 ecx, DWORD PTR __Fmt$[esp+160]
  00184	51		 push	 ecx
  00185	8d 54 24 34	 lea	 edx, DWORD PTR __Buf$[esp+164]
  00189	6a 6c		 push	 108			; 0000006cH
  0018b	52		 push	 edx
  0018c	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  00190	e8 00 00 00 00	 call	 _sprintf_s
  00195	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+168]
  0019c	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+172]
  001a3	50		 push	 eax
  001a4	56		 push	 esi
  001a5	8b 74 24 38	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+180]
  001a9	57		 push	 edi
  001aa	53		 push	 ebx
  001ab	8d 44 24 4c	 lea	 eax, DWORD PTR __Buf$[esp+188]
  001af	50		 push	 eax
  001b0	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+188]
  001b7	51		 push	 ecx
  001b8	8b 4c 24 44	 mov	 ecx, DWORD PTR _this$[esp+196]
  001bc	55		 push	 ebp
  001bd	52		 push	 edx
  001be	50		 push	 eax
  001bf	56		 push	 esi
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput

; 1233 : 		}

  001c6	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+216]
  001cd	83 c4 44	 add	 esp, 68			; 00000044H
  001d0	5f		 pop	 edi
  001d1	8b c6		 mov	 eax, esi
  001d3	5e		 pop	 esi
  001d4	5d		 pop	 ebp
  001d5	5b		 pop	 ebx
  001d6	33 cc		 xor	 ecx, esp
  001d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001dd	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H
  001e3	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
_TEXT	SEGMENT
__Signed$143982 = -129					; size = 1
_this$ = -128						; size = 4
___$ReturnUdt$GSCopy$ = -124				; size = 4
__Fmt$ = -120						; size = 8
__Buf$ = -112						; size = 108
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1237 : 		{	// put formatted long double to _Dest

  00000	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 80 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+132], eax
  00014	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+128]
  0001b	53		 push	 ebx
  0001c	55		 push	 ebp
  0001d	8b ac 24 9c 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+136]

; 1268 : 			}
; 1269 : 
; 1270 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1271 : 			_Beforepoint, _Afterpoint, _Precision,
; 1272 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1273 : 					_Significance, _Val)));	// convert and put

  00024	89 44 24 10	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+140], eax
  00028	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	89 4c 24 14	 mov	 DWORD PTR _this$[esp+148], ecx
  00031	85 c0		 test	 eax, eax
  00033	7f 0e		 jg	 SHORT $LN13@do_put@3

; 1238 : 		const size_t _Buf_size = _MAX_EXP_DIG + _MAX_SIG_DIG + 64;
; 1239 : 		char _Buf[_Buf_size], _Fmt[8];
; 1240 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1241 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1242 : 				? 6 : _Iosbase.precision();	// desired precision

  00035	f7 45 10 00 20
	00 00		 test	 DWORD PTR [ebp+16], 8192 ; 00002000H
  0003c	75 05		 jne	 SHORT $LN13@do_put@3
  0003e	b8 06 00 00 00	 mov	 eax, 6
$LN13@do_put@3:
  00043	8b f0		 mov	 esi, eax

; 1243 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1244 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  00045	83 fe 24	 cmp	 esi, 36			; 00000024H
  00048	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  0004d	7f 02		 jg	 SHORT $LN16@do_put@3
  0004f	8b d6		 mov	 edx, esi
$LN16@do_put@3:

; 1245 : 		_Precision -= _Significance;
; 1246 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1247 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1248 : 
; 1249 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed)

  00051	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  00054	8b c1		 mov	 eax, ecx
  00056	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  0005b	2b f2		 sub	 esi, edx
  0005d	33 db		 xor	 ebx, ebx
  0005f	33 ff		 xor	 edi, edi
  00061	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  00066	0f 85 a1 00 00
	00		 jne	 $LN43@do_put@3

; 1250 : 			{	// scale silly fixed-point value
; 1251 : 			bool _Signed = _Val < 0;

  0006c	d9 ee		 fldz
  0006e	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
  00075	d8 d1		 fcom	 ST(1)
  00077	df e0		 fnstsw	 ax
  00079	f6 c4 05	 test	 ah, 5
  0007c	7a 20		 jp	 SHORT $LN17@do_put@3
  0007e	c6 44 24 13 01	 mov	 BYTE PTR __Signed$143982[esp+148], 1

; 1253 : 				_Val = -_Val;

  00083	d9 e0		 fchs
$LN9@do_put@3:

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  00085	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  0008b	d8 d1		 fcom	 ST(1)
  0008d	df e0		 fnstsw	 ax
  0008f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  00095	f6 c4 41	 test	 ah, 65			; 00000041H
  00098	7b 0c		 jnp	 SHORT $LN8@do_put@3
$LN49@do_put@3:
  0009a	dd d9		 fstp	 ST(1)
  0009c	eb 22		 jmp	 SHORT $LN6@do_put@3
$LN17@do_put@3:

; 1250 : 			{	// scale silly fixed-point value
; 1251 : 			bool _Signed = _Val < 0;

  0009e	88 5c 24 13	 mov	 BYTE PTR __Signed$143982[esp+148], bl

; 1252 : 			if (_Signed)

  000a2	eb e1		 jmp	 SHORT $LN9@do_put@3
$LN55@do_put@3:

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000a4	d9 c9		 fxch	 ST(1)
$LN8@do_put@3:
  000a6	81 fb 88 13 00
	00		 cmp	 ebx, 5000		; 00001388H
  000ac	73 ec		 jae	 SHORT $LN49@do_put@3

; 1256 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000ae	dc fa		 fdiv	 ST(2), ST(0)
  000b0	83 c3 0a	 add	 ebx, 10			; 0000000aH
  000b3	d9 c9		 fxch	 ST(1)
  000b5	d8 d2		 fcom	 ST(2)
  000b7	df e0		 fnstsw	 ax
  000b9	f6 c4 41	 test	 ah, 65			; 00000041H
  000bc	7b e6		 jnp	 SHORT $LN55@do_put@3

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000be	dd d8		 fstp	 ST(0)
$LN6@do_put@3:

; 1257 : 
; 1258 : 			if (0 < _Val)

  000c0	d9 ca		 fxch	 ST(2)
  000c2	d8 d9		 fcomp	 ST(1)
  000c4	df e0		 fnstsw	 ax
  000c6	f6 c4 05	 test	 ah, 5
  000c9	7a 31		 jp	 SHORT $LN57@do_put@3

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000cb	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000ce	7c 2c		 jl	 SHORT $LN57@do_put@3
  000d0	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  000d6	eb 02		 jmp	 SHORT $LN4@do_put@3
$LN70@do_put@3:
  000d8	d9 c9		 fxch	 ST(1)
$LN4@do_put@3:
  000da	d8 d1		 fcom	 ST(1)
  000dc	df e0		 fnstsw	 ax
  000de	f6 c4 01	 test	 ah, 1
  000e1	75 26		 jne	 SHORT $LN64@do_put@3
  000e3	81 ff 88 13 00
	00		 cmp	 edi, 5000		; 00001388H
  000e9	73 1e		 jae	 SHORT $LN64@do_put@3

; 1261 : 					{	// drop 10 zeros after decimal point
; 1262 : 					_Val *= 1e10;
; 1263 : 					_Precision -= 10;

  000eb	83 ee 0a	 sub	 esi, 10			; 0000000aH
  000ee	d9 c9		 fxch	 ST(1)
  000f0	83 c7 0a	 add	 edi, 10			; 0000000aH
  000f3	d8 ca		 fmul	 ST(0), ST(2)
  000f5	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000f8	7d de		 jge	 SHORT $LN70@do_put@3

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000fa	dd d9		 fstp	 ST(1)
$LN57@do_put@3:

; 1264 : 					}
; 1265 : 
; 1266 : 			if (_Signed)

  000fc	80 7c 24 13 00	 cmp	 BYTE PTR __Signed$143982[esp+148], 0
  00101	dd d9		 fstp	 ST(1)
  00103	74 0f		 je	 SHORT $LN1@do_put@3

; 1267 : 				_Val = -_Val;

  00105	d9 e0		 fchs
  00107	eb 0b		 jmp	 SHORT $LN1@do_put@3
$LN64@do_put@3:

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00109	dd d8		 fstp	 ST(0)
  0010b	eb ef		 jmp	 SHORT $LN57@do_put@3
$LN43@do_put@3:

; 1267 : 				_Val = -_Val;

  0010d	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
$LN1@do_put@3:

; 1268 : 			}
; 1269 : 
; 1270 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1271 : 			_Beforepoint, _Afterpoint, _Precision,
; 1272 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1273 : 					_Significance, _Val)));	// convert and put

  00114	c6 44 24 1c 25	 mov	 BYTE PTR __Fmt$[esp+148], 37 ; 00000025H
  00119	8d 44 24 1d	 lea	 eax, DWORD PTR __Fmt$[esp+149]
  0011d	f6 c1 20	 test	 cl, 32			; 00000020H
  00120	74 09		 je	 SHORT $LN31@do_put@3
  00122	c6 44 24 1d 2b	 mov	 BYTE PTR __Fmt$[esp+149], 43 ; 0000002bH
  00127	8d 44 24 1e	 lea	 eax, DWORD PTR __Fmt$[esp+150]
$LN31@do_put@3:
  0012b	f6 c1 10	 test	 cl, 16			; 00000010H
  0012e	74 04		 je	 SHORT $LN30@do_put@3
  00130	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  00133	40		 inc	 eax
$LN30@do_put@3:
  00134	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
  00137	40		 inc	 eax
  00138	c6 00 2a	 mov	 BYTE PTR [eax], 42	; 0000002aH
  0013b	40		 inc	 eax
  0013c	c6 00 4c	 mov	 BYTE PTR [eax], 76	; 0000004cH
  0013f	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  00145	40		 inc	 eax
  00146	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  0014c	75 04		 jne	 SHORT $LN36@do_put@3
  0014e	b1 66		 mov	 cl, 102			; 00000066H
  00150	eb 19		 jmp	 SHORT $LN35@do_put@3
$LN36@do_put@3:
  00152	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  00158	75 04		 jne	 SHORT $LN34@do_put@3
  0015a	b1 61		 mov	 cl, 97			; 00000061H
  0015c	eb 0d		 jmp	 SHORT $LN35@do_put@3
$LN34@do_put@3:
  0015e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00164	0f 95 c1	 setne	 cl
  00167	8d 4c 09 65	 lea	 ecx, DWORD PTR [ecx+ecx+101]
$LN35@do_put@3:
  0016b	83 ec 08	 sub	 esp, 8
  0016e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00171	52		 push	 edx
  00172	88 08		 mov	 BYTE PTR [eax], cl
  00174	8d 4c 24 28	 lea	 ecx, DWORD PTR __Fmt$[esp+160]
  00178	51		 push	 ecx
  00179	8d 54 24 34	 lea	 edx, DWORD PTR __Buf$[esp+164]
  0017d	6a 6c		 push	 108			; 0000006cH
  0017f	52		 push	 edx
  00180	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  00184	e8 00 00 00 00	 call	 _sprintf_s
  00189	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+168]
  00190	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+172]
  00197	50		 push	 eax
  00198	56		 push	 esi
  00199	8b 74 24 38	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+180]
  0019d	57		 push	 edi
  0019e	53		 push	 ebx
  0019f	8d 44 24 4c	 lea	 eax, DWORD PTR __Buf$[esp+188]
  001a3	50		 push	 eax
  001a4	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+188]
  001ab	51		 push	 ecx
  001ac	8b 4c 24 44	 mov	 ecx, DWORD PTR _this$[esp+196]
  001b0	55		 push	 ebp
  001b1	52		 push	 edx
  001b2	50		 push	 eax
  001b3	56		 push	 esi
  001b4	51		 push	 ecx
  001b5	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput

; 1274 : 		}

  001ba	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+216]
  001c1	83 c4 44	 add	 esp, 68			; 00000044H
  001c4	5f		 pop	 edi
  001c5	8b c6		 mov	 eax, esi
  001c7	5e		 pop	 esi
  001c8	5d		 pop	 ebp
  001c9	5b		 pop	 ebx
  001ca	33 cc		 xor	 ecx, esp
  001cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d1	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H
  001d7	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02BBAHNLBA@?$CFp?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp?$AA@ DB '%p', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
_TEXT	SEGMENT
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1278 : 		{	// put formatted void pointer to _Dest

  00000	83 ec 44	 sub	 esp, 68			; 00000044H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 40	 mov	 DWORD PTR __$ArrayPad$[esp+68], eax
  0000e	8b 44 24 5c	 mov	 eax, DWORD PTR __Val$[esp+64]
  00012	53		 push	 ebx
  00013	8b 5c 24 58	 mov	 ebx, DWORD PTR __Iosbase$[esp+68]
  00017	56		 push	 esi
  00018	8b 74 24 50	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+72]
  0001c	57		 push	 edi

; 1279 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1280 : 		char _Buf[_Buf_size];
; 1281 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1282 : 			::sprintf_s(_Buf, _Buf_size, "%p", _Val)));

  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_02BBAHNLBA@?$CFp?$AA@
  00023	8d 44 24 14	 lea	 eax, DWORD PTR __Buf$[esp+88]
  00027	6a 40		 push	 64			; 00000040H
  00029	50		 push	 eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	e8 00 00 00 00	 call	 _sprintf_s
  00031	8b 54 24 74	 mov	 edx, DWORD PTR __Fill$[esp+92]
  00035	50		 push	 eax
  00036	8b 44 24 70	 mov	 eax, DWORD PTR __Dest$[esp+100]
  0003a	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  0003e	51		 push	 ecx
  0003f	8b 4c 24 70	 mov	 ecx, DWORD PTR __Dest$[esp+100]
  00043	52		 push	 edx
  00044	53		 push	 ebx
  00045	50		 push	 eax
  00046	51		 push	 ecx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1283 : 		}

  0004e	8b 4c 24 7c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+128]
  00052	83 c4 30	 add	 esp, 48			; 00000030H
  00055	5f		 pop	 edi
  00056	8b c6		 mov	 eax, esi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	33 cc		 xor	 ecx, esp
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	83 c4 44	 add	 esp, 68			; 00000044H
  00064	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0HostDevice@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$2
__ehfuncinfo$??0HostDevice@@QAE@ABU0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0HostDevice@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0HostDevice@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0HostDevice@@QAE@ABU0@@Z PROC				; HostDevice::HostDevice, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0HostDevice@@QAE@ABU0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002a	8b 7c 24 24	 mov	 edi, DWORD PTR ___that$[esp+28]
  0002e	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00031	88 06		 mov	 BYTE PTR [esi], al
  00033	0f b6 4f 01	 movzx	 ecx, BYTE PTR [edi+1]
  00037	88 4e 01	 mov	 BYTE PTR [esi+1], cl
  0003a	0f b6 57 02	 movzx	 edx, BYTE PTR [edi+2]
  0003e	88 56 02	 mov	 BYTE PTR [esi+2], dl
  00041	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  00045	88 46 03	 mov	 BYTE PTR [esi+3], al
  00048	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  0004c	88 4e 04	 mov	 BYTE PTR [esi+4], cl
  0004f	0f b6 57 05	 movzx	 edx, BYTE PTR [edi+5]
  00053	88 56 05	 mov	 BYTE PTR [esi+5], dl
  00056	0f b6 47 06	 movzx	 eax, BYTE PTR [edi+6]
  0005a	88 46 06	 mov	 BYTE PTR [esi+6], al
  0005d	33 db		 xor	 ebx, ebx
  0005f	6a ff		 push	 -1
  00061	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00064	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00067	53		 push	 ebx
  00068	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0006f	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00072	50		 push	 eax
  00073	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00076	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0007b	6a ff		 push	 -1
  0007d	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00080	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  00083	53		 push	 ebx
  00084	33 d2		 xor	 edx, edx
  00086	c7 41 18 07 00
	00 00		 mov	 DWORD PTR [ecx+24], 7
  0008d	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00090	50		 push	 eax
  00091	89 5c 24 28	 mov	 DWORD PTR __$EHRec$[esp+52], ebx
  00095	66 89 51 04	 mov	 WORD PTR [ecx+4], dx
  00099	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0009e	6a ff		 push	 -1
  000a0	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  000a3	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  000a6	53		 push	 ebx
  000a7	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  000ae	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  000b1	50		 push	 eax
  000b2	c6 44 24 28 01	 mov	 BYTE PTR __$EHRec$[esp+52], 1
  000b7	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  000ba	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000bf	0f b6 47 5c	 movzx	 eax, BYTE PTR [edi+92]
  000c3	88 46 5c	 mov	 BYTE PTR [esi+92], al
  000c6	8b 4f 60	 mov	 ecx, DWORD PTR [edi+96]
  000c9	89 4e 60	 mov	 DWORD PTR [esi+96], ecx
  000cc	8b 57 64	 mov	 edx, DWORD PTR [edi+100]
  000cf	89 56 64	 mov	 DWORD PTR [esi+100], edx
  000d2	8b 47 68	 mov	 eax, DWORD PTR [edi+104]
  000d5	83 c7 6c	 add	 edi, 108		; 0000006cH
  000d8	57		 push	 edi
  000d9	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  000dc	c6 44 24 20 02	 mov	 BYTE PTR __$EHRec$[esp+44], 2
  000e1	89 46 68	 mov	 DWORD PTR [esi+104], eax
  000e4	e8 00 00 00 00	 call	 ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
  000e9	8b c6		 mov	 eax, esi
  000eb	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  000ef	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f6	59		 pop	 ecx
  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx
  000fa	83 c4 10	 add	 esp, 16			; 00000010H
  000fd	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 24	 add	 ecx, 36			; 00000024H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 40	 add	 ecx, 64			; 00000040H
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0HostDevice@@QAE@ABU0@@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  00028	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0HostDevice@@QAE@ABU0@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0HostDevice@@QAE@ABU0@@Z ENDP				; HostDevice::HostDevice
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 139  : 		{	// perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 140  : 		_TRY_BEGIN
; 141  : 		if (ios_base::flags() & ios_base::unitbuf)

  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002e	f6 44 0a 10 02	 test	 BYTE PTR [edx+ecx+16], 2
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003a	74 05		 je	 SHORT $LN8@Osfx

; 142  : 			flush();	// flush stream as needed

  0003c	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN8@Osfx:

; 145  : 		}

  00041	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00044	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004b	59		 pop	 ecx
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:

; 143  : 		_CATCH_ALL
; 144  : 		_CATCH_END

  00053	b8 00 00 00 00	 mov	 eax, $LN8@Osfx
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
;	COMDAT ??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0
__ehfuncinfo$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
xdata$x	ENDS
;	COMDAT ??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
_TEXT	SEGMENT
$T187636 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 32   : 		{	// construct from stream buffer pointer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 08	 mov	 DWORD PTR $T187636[esp+28], eax
  00030	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+24], eax
  00034	74 19		 je	 SHORT $LN1@basic_istr
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  00043	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  00047	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR $T187636[esp+28], 1
$LN1@basic_istr:
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 33   : 		_Myios::init(_Strbuf, _Isstd);

  00054	8b 4c 24 20	 mov	 ecx, DWORD PTR __Strbuf$[esp+24]
  00058	c7 04 16 00 00
	00 00		 mov	 DWORD PTR [esi+edx], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0005f	8b 16		 mov	 edx, DWORD PTR [esi]
  00061	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00064	8b 44 24 24	 mov	 eax, DWORD PTR __Isstd$[esp+24]
  00068	50		 push	 eax
  00069	51		 push	 ecx
  0006a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0006d	03 ce		 add	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init

; 34   : 		}

  00074	8b c6		 mov	 eax, esi
  00076	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5e		 pop	 esi
  00083	83 c4 14	 add	 esp, 20			; 00000014H
  00086	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T187636[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_istr
  0000c	83 65 ec fe	 and	 DWORD PTR $T187636[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_istr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
PUBLIC	?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z
_TEXT	SEGMENT
$T187866 = -4						; size = 1
__Cat$187870 = 8					; size = 1
$T187868 = 8						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

  00000	51		 push	 ecx
  00001	53		 push	 ebx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

  00002	8b 5c 24 0c	 mov	 ebx, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi
  0000a	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00010	85 f6		 test	 esi, esi
  00012	74 0e		 je	 SHORT $LN11@erase@7
  00014	8b 44 24 1c	 mov	 eax, DWORD PTR __First_arg$[esp+16]
  00018	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  0001b	77 05		 ja	 SHORT $LN11@erase@7
  0001d	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  00020	76 09		 jbe	 SHORT $LN10@erase@7
$LN11@erase@7:
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00027	8b 44 24 1c	 mov	 eax, DWORD PTR __First_arg$[esp+16]
$LN10@erase@7:

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

  0002b	8b 7c 24 24	 mov	 edi, DWORD PTR __Last_arg$[esp+16]
  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00031	89 0b		 mov	 DWORD PTR [ebx], ecx
  00033	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00036	39 7e 0c	 cmp	 DWORD PTR [esi+12], edi
  00039	77 05		 ja	 SHORT $LN30@erase@7
  0003b	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0003e	76 09		 jbe	 SHORT $LN29@erase@7
$LN30@erase@7:
  00040	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00045	8b 7c 24 24	 mov	 edi, DWORD PTR __Last_arg$[esp+16]
$LN29@erase@7:

; 1031 : 
; 1032 : 		if (_First != _Last)

  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004d	85 c0		 test	 eax, eax
  0004f	74 04		 je	 SHORT $LN47@erase@7
  00051	3b c1		 cmp	 eax, ecx
  00053	74 05		 je	 SHORT $LN46@erase@7
$LN47@erase@7:
  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN46@erase@7:
  0005a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0005d	3b cf		 cmp	 ecx, edi
  0005f	74 4f		 je	 SHORT $LN89@erase@7

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

  00061	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00064	55		 push	 ebp
  00065	c6 44 24 10 00	 mov	 BYTE PTR $T187866[esp+20], 0
  0006a	8b 54 24 10	 mov	 edx, DWORD PTR $T187866[esp+20]
  0006e	52		 push	 edx
  0006f	8b 54 24 1c	 mov	 edx, DWORD PTR __Cat$187870[esp+20]
  00073	52		 push	 edx
  00074	8b 54 24 20	 mov	 edx, DWORD PTR $T187868[esp+24]
  00078	52		 push	 edx
  00079	51		 push	 ecx
  0007a	50		 push	 eax
  0007b	57		 push	 edi
  0007c	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *>

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

  00081	8b 6e 10	 mov	 ebp, DWORD PTR [esi+16]
  00084	8b d8		 mov	 ebx, eax
  00086	83 c4 18	 add	 esp, 24			; 00000018H
  00089	8b fb		 mov	 edi, ebx
  0008b	3b dd		 cmp	 ebx, ebp
  0008d	74 12		 je	 SHORT $LN75@erase@7
  0008f	90		 npad	 1
$LL77@erase@7:
  00090	8b cf		 mov	 ecx, edi
  00092	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00097	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  0009d	3b fd		 cmp	 edi, ebp
  0009f	75 ef		 jne	 SHORT $LL77@erase@7
$LN75@erase@7:

; 1049 : 			_Mylast = _Ptr;
; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

  000a1	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  000a5	5d		 pop	 ebp
  000a6	5f		 pop	 edi
  000a7	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx

; 1055 : #endif
; 1056 : 		}

  000ac	59		 pop	 ecx
  000ad	c2 14 00	 ret	 20			; 00000014H
$LN89@erase@7:
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi

; 1049 : 			_Mylast = _Ptr;
; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

  000b2	8b c3		 mov	 eax, ebx
  000b4	5b		 pop	 ebx

; 1055 : #endif
; 1056 : 		}

  000b5	59		 pop	 ecx
  000b6	c2 14 00	 ret	 20			; 00000014H
?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@0@Z
_TEXT	SEGMENT
$T188184 = -4						; size = 1
__Cat$188188 = 8					; size = 1
$T188186 = 8						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@0@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

  00000	51		 push	 ecx
  00001	53		 push	 ebx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

  00002	8b 5c 24 0c	 mov	 ebx, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi
  0000a	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00010	85 f6		 test	 esi, esi
  00012	74 0e		 je	 SHORT $LN11@erase@8
  00014	8b 44 24 1c	 mov	 eax, DWORD PTR __First_arg$[esp+16]
  00018	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  0001b	77 05		 ja	 SHORT $LN11@erase@8
  0001d	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  00020	76 09		 jbe	 SHORT $LN10@erase@8
$LN11@erase@8:
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00027	8b 44 24 1c	 mov	 eax, DWORD PTR __First_arg$[esp+16]
$LN10@erase@8:

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

  0002b	8b 7c 24 24	 mov	 edi, DWORD PTR __Last_arg$[esp+16]
  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00031	89 0b		 mov	 DWORD PTR [ebx], ecx
  00033	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00036	39 7e 0c	 cmp	 DWORD PTR [esi+12], edi
  00039	77 05		 ja	 SHORT $LN30@erase@8
  0003b	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0003e	76 09		 jbe	 SHORT $LN29@erase@8
$LN30@erase@8:
  00040	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00045	8b 7c 24 24	 mov	 edi, DWORD PTR __Last_arg$[esp+16]
$LN29@erase@8:

; 1031 : 
; 1032 : 		if (_First != _Last)

  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004d	85 c0		 test	 eax, eax
  0004f	74 04		 je	 SHORT $LN47@erase@8
  00051	3b c1		 cmp	 eax, ecx
  00053	74 05		 je	 SHORT $LN46@erase@8
$LN47@erase@8:
  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN46@erase@8:
  0005a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0005d	3b cf		 cmp	 ecx, edi
  0005f	74 4c		 je	 SHORT $LN89@erase@8

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

  00061	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00064	55		 push	 ebp
  00065	c6 44 24 10 00	 mov	 BYTE PTR $T188184[esp+20], 0
  0006a	8b 54 24 10	 mov	 edx, DWORD PTR $T188184[esp+20]
  0006e	52		 push	 edx
  0006f	8b 54 24 1c	 mov	 edx, DWORD PTR __Cat$188188[esp+20]
  00073	52		 push	 edx
  00074	8b 54 24 20	 mov	 edx, DWORD PTR $T188186[esp+24]
  00078	52		 push	 edx
  00079	51		 push	 ecx
  0007a	50		 push	 eax
  0007b	57		 push	 edi
  0007c	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

  00081	8b 6e 10	 mov	 ebp, DWORD PTR [esi+16]
  00084	8b d8		 mov	 ebx, eax
  00086	83 c4 18	 add	 esp, 24			; 00000018H
  00089	8b fb		 mov	 edi, ebx
  0008b	3b dd		 cmp	 ebx, ebp
  0008d	74 0f		 je	 SHORT $LN75@erase@8
  0008f	90		 npad	 1
$LL77@erase@8:
  00090	8b cf		 mov	 ecx, edi
  00092	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00097	83 c7 78	 add	 edi, 120		; 00000078H
  0009a	3b fd		 cmp	 edi, ebp
  0009c	75 f2		 jne	 SHORT $LL77@erase@8
$LN75@erase@8:

; 1049 : 			_Mylast = _Ptr;
; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

  0009e	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  000a2	5d		 pop	 ebp
  000a3	5f		 pop	 edi
  000a4	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx

; 1055 : #endif
; 1056 : 		}

  000a9	59		 pop	 ecx
  000aa	c2 14 00	 ret	 20			; 00000014H
$LN89@erase@8:
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi

; 1049 : 			_Mylast = _Ptr;
; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

  000af	8b c3		 mov	 eax, ebx
  000b1	5b		 pop	 ebx

; 1055 : #endif
; 1056 : 		}

  000b2	59		 pop	 ecx
  000b3	c2 14 00	 ret	 20			; 00000014H
?erase@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@0@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ucopy<CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ucopy@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z
_TEXT	SEGMENT
$T188321 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$188324 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ucopy<CipherShed::FavoriteVolume *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$188324[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T188321[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T188321[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 14	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 10	 mov	 edx, DWORD PTR __First$[esp+8]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 18	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >

; 1142 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ucopy<CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z ; stdext::_Unchecked_move_backward<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Unchecked_move_backward@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z
_TEXT	SEGMENT
$T188381 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$188384 = 16					; size = 1
$T188343 = 16						; size = 1
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z PROC ; stdext::_Unchecked_move_backward<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

  00000	51		 push	 ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$188384[esp]
  00005	8b 54 24 10	 mov	 edx, DWORD PTR $T188343[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T188381[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T188381[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>

; 3697 : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Unchecked_move_backward@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z ENDP ; stdext::_Unchecked_move_backward<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`vftable'
PUBLIC	??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
PUBLIC	??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::Next
EXTRN	??_E?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 DD 00H ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocat'
	DB	'or@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ DD 00H ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ DD FLAT:??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\platform\foreach.h
xdata$x	ENDS
;	COMDAT ??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	55		 push	 ebp
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 14	 mov	 DWORD PTR _this$[esp+36], esi
  0002b	33 db		 xor	 ebx, ebx
  0002d	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00031	88 5e 05	 mov	 BYTE PTR [esi+5], bl
  00034	8b 44 24 28	 mov	 eax, DWORD PTR _container$[esp+32]
  00038	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0003b	50		 push	 eax
  0003c	8b cf		 mov	 ecx, edi
  0003e	89 5c 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], ebx
  00042	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@
  00048	e8 00 00 00 00	 call	 ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
  0004d	8b 6f 10	 mov	 ebp, DWORD PTR [edi+16]
  00050	89 5e 20	 mov	 DWORD PTR [esi+32], ebx
  00053	39 6f 0c	 cmp	 DWORD PTR [edi+12], ebp
  00056	77 05		 ja	 SHORT $LN12@ContainerF
  00058	3b 6f 10	 cmp	 ebp, DWORD PTR [edi+16]
  0005b	76 05		 jbe	 SHORT $LN11@ContainerF
$LN12@ContainerF:
  0005d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN11@ContainerF:
  00062	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00064	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00067	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0006a	8b 6f 0c	 mov	 ebp, DWORD PTR [edi+12]
  0006d	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00070	39 6f 0c	 cmp	 DWORD PTR [edi+12], ebp
  00073	77 05		 ja	 SHORT $LN29@ContainerF
  00075	3b 6f 10	 cmp	 ebp, DWORD PTR [edi+16]
  00078	76 05		 jbe	 SHORT $LN28@ContainerF
$LN29@ContainerF:
  0007a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@ContainerF:
  0007f	8b 17		 mov	 edx, DWORD PTR [edi]
  00081	89 56 28	 mov	 DWORD PTR [esi+40], edx
  00084	89 6e 2c	 mov	 DWORD PTR [esi+44], ebp
  00087	8b c6		 mov	 eax, esi
  00089	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	5b		 pop	 ebx
  00099	83 c4 10	 add	 esp, 16			; 00000010H
  0009c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
PUBLIC	??E?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator++, COMDAT
; _this$ = ecx

; 115  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 116  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN19@operator@48
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 117  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN15@operator@48
$LN19@operator@48:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN16@operator@48
$LN15@operator@48:
  00018	33 c0		 xor	 eax, eax
$LN16@operator@48:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 05		 jb	 SHORT $LN20@operator@48
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN20@operator@48:

; 118  : 
; 119  :  #if _HAS_ITERATOR_DEBUGGING
; 120  : 		if (this->_Mycont == 0
; 121  : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 122  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 123  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 124  : 
; 125  : 		++_Myptr;

  00027	81 46 04 88 00
	00 00		 add	 DWORD PTR [esi+4], 136	; 00000088H

; 126  : 		return (*this);

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi

; 127  : 		}

  00031	c3		 ret	 0
??E?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator++
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\platform\foreach.h
_TEXT	ENDS
;	COMDAT ?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00006	85 c0		 test	 eax, eax
  00008	75 0c		 jne	 SHORT $LN21@Next
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN17@Next
$LN21@Next:
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	eb 02		 jmp	 SHORT $LN18@Next
$LN17@Next:
  0001a	33 c0		 xor	 eax, eax
$LN18@Next:
  0001c	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0001f	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00022	72 05		 jb	 SHORT $LN22@Next
  00024	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN22@Next:
  00029	81 46 2c 88 00
	00 00		 add	 DWORD PTR [esi+44], 136	; 00000088H
  00030	5e		 pop	 esi
  00031	c3		 ret	 0
?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::Next
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00007	74 21		 je	 SHORT $LN3@IsNotEnd
  00009	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0000c	85 c0		 test	 eax, eax
  0000e	74 05		 je	 SHORT $LN10@IsNotEnd
  00010	3b 46 20	 cmp	 eax, DWORD PTR [esi+32]
  00013	74 05		 je	 SHORT $LN9@IsNotEnd
$LN10@IsNotEnd:
  00015	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@IsNotEnd:
  0001a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001d	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00020	74 08		 je	 SHORT $LN3@IsNotEnd
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
$LN3@IsNotEnd:
  0002a	32 c0		 xor	 al, al
  0002c	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::IsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@27
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@27:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z
_TEXT	SEGMENT
$T188695 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$188699 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$188699[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T188695[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T188695[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >

; 865  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Unchecked_uninitialized_move@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@1@0PAU23@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ucopy<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@1@0PAU23@@Z
_TEXT	SEGMENT
$T188758 = -4						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Cat$188761 = 24					; size = 1
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@1@0PAU23@@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ucopy<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

  00001	8b 54 24 18	 mov	 edx, DWORD PTR __Cat$188761[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T188758[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T188758[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 1c	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 20	 mov	 ecx, DWORD PTR __Last$[esp+16]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >

; 1142 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 14 00	 ret	 20			; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@1@0PAU23@@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ucopy<std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??$insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::insert<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??$insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
__First$ = 16						; size = 8
$T188784 = 24						; size = 1
__Last$ = 24						; size = 8
??$insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00@Z PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::insert<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 731  : 		{	// insert [_First, _Last) at _Where
; 732  : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));

  00000	8b 44 24 14	 mov	 eax, DWORD PTR $T188784[esp-4]
  00004	8b 54 24 18	 mov	 edx, DWORD PTR __Last$[esp]
  00008	50		 push	 eax
  00009	8b 44 24 18	 mov	 eax, DWORD PTR __Last$[esp]
  0000d	52		 push	 edx
  0000e	8b 54 24 18	 mov	 edx, DWORD PTR __First$[esp+8]
  00012	50		 push	 eax
  00013	8b 44 24 18	 mov	 eax, DWORD PTR __First$[esp+8]
  00017	52		 push	 edx
  00018	8b 54 24 18	 mov	 edx, DWORD PTR __Where$[esp+16]
  0001c	50		 push	 eax
  0001d	8b 44 24 18	 mov	 eax, DWORD PTR __Where$[esp+16]
  00021	52		 push	 edx
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Insert<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1> >

; 733  : 		}

  00028	c2 18 00	 ret	 24			; 00000018H
??$insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::insert<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$0
__unwindtable$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$2
__ehfuncinfo$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
$T188791 = -40						; size = 8
__Next$ = -32						; size = 8
__Before$147406 = -24					; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__First$ = 16						; size = 8
__Last$ = 24						; size = 8
___formal$ = 32						; size = 1
??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 762  : 		void _Insert(const_iterator _Where,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d ec	 mov	 DWORD PTR _this$[ebp], ebx

; 763  : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 764  : 		{	// insert [_First, _Last) at _Where, forward iterators
; 765  : 
; 766  :  #if _HAS_ITERATOR_DEBUGGING
; 767  : 		_DEBUG_RANGE(_First, _Last);
; 768  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 769  : 
; 770  : 		_Iter _Next = _First;

  00030	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  00033	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  00036	89 45 e0	 mov	 DWORD PTR __Next$[ebp], eax
  00039	89 4d e4	 mov	 DWORD PTR __Next$[ebp+4], ecx

; 771  : 
; 772  : 		_TRY_BEGIN

  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 773  : 		for (; _First != _Last; ++_First)

$LL24@Insert@2:
  00043	85 c0		 test	 eax, eax
  00045	74 05		 je	 SHORT $LN41@Insert@2
  00047	3b 45 18	 cmp	 eax, DWORD PTR __Last$[ebp]
  0004a	74 08		 je	 SHORT $LN40@Insert@2
$LN41@Insert@2:
  0004c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00051	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
$LN40@Insert@2:
  00054	8b 55 14	 mov	 edx, DWORD PTR __First$[ebp+4]
  00057	3b 55 1c	 cmp	 edx, DWORD PTR __Last$[ebp+4]
  0005a	0f 84 de 00 00
	00		 je	 $LN4@Insert@2

; 774  : 			_Insert(_Where, *_First);

  00060	85 c0		 test	 eax, eax
  00062	75 0c		 jne	 SHORT $LN89@Insert@2
  00064	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00069	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  0006c	85 c0		 test	 eax, eax
  0006e	74 04		 je	 SHORT $LN66@Insert@2
$LN89@Insert@2:
  00070	8b 00		 mov	 eax, DWORD PTR [eax]
  00072	eb 02		 jmp	 SHORT $LN67@Insert@2
$LN66@Insert@2:
  00074	33 c0		 xor	 eax, eax
$LN67@Insert@2:
  00076	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  00079	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0007c	75 05		 jne	 SHORT $LN52@Insert@2
  0007e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN52@Insert@2:
  00083	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp+4]
  00086	8b 45 14	 mov	 eax, DWORD PTR __First$[ebp+4]
  00089	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0008c	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
  0008f	83 c0 08	 add	 eax, 8
  00092	50		 push	 eax
  00093	52		 push	 edx
  00094	51		 push	 ecx
  00095	8b cb		 mov	 ecx, ebx
  00097	e8 00 00 00 00	 call	 ?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode
  0009c	6a 01		 push	 1
  0009e	8b cb		 mov	 ecx, ebx
  000a0	8b f0		 mov	 esi, eax
  000a2	e8 00 00 00 00	 call	 ?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Incsize
  000a7	89 37		 mov	 DWORD PTR [edi], esi
  000a9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ac	89 30		 mov	 DWORD PTR [eax], esi
  000ae	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  000b1	85 c0		 test	 eax, eax
  000b3	75 0c		 jne	 SHORT $LN88@Insert@2
  000b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000ba	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  000bd	85 c0		 test	 eax, eax
  000bf	74 04		 je	 SHORT $LN30@Insert@2
$LN88@Insert@2:

; 773  : 		for (; _First != _Last; ++_First)

  000c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c3	eb 02		 jmp	 SHORT $LN31@Insert@2
$LN30@Insert@2:
  000c5	33 c9		 xor	 ecx, ecx
$LN31@Insert@2:
  000c7	8b 55 14	 mov	 edx, DWORD PTR __First$[ebp+4]
  000ca	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  000cd	75 08		 jne	 SHORT $LN16@Insert@2
  000cf	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000d4	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
$LN16@Insert@2:
  000d7	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	89 55 14	 mov	 DWORD PTR __First$[ebp+4], edx
  000df	e9 5f ff ff ff	 jmp	 $LL24@Insert@2
__catch$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$0:

; 775  : 		_CATCH_ALL
; 776  : 		for (; _Next != _First; ++_Next)

  000e4	8d 45 10	 lea	 eax, DWORD PTR __First$[ebp]
  000e7	50		 push	 eax
  000e8	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  000eb	e8 00 00 00 00	 call	 ??9?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator!=
  000f0	84 c0		 test	 al, al
  000f2	74 41		 je	 SHORT $LN1@Insert@2
  000f4	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
$LL3@Insert@2:

; 777  : 			{	// undo inserts
; 778  : 			const_iterator _Before = _Where;

  000f7	8b 4d 08	 mov	 ecx, DWORD PTR __Where$[ebp]
  000fa	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp+4]
  000fd	89 4d e8	 mov	 DWORD PTR __Before$147406[ebp], ecx

; 779  : 			erase(--_Before);

  00100	8d 4d e8	 lea	 ecx, DWORD PTR __Before$147406[ebp]
  00103	89 55 ec	 mov	 DWORD PTR __Before$147406[ebp+4], edx
  00106	e8 00 00 00 00	 call	 ??F?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator--
  0010b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0010e	8b 10		 mov	 edx, DWORD PTR [eax]
  00110	51		 push	 ecx
  00111	52		 push	 edx
  00112	8d 45 d8	 lea	 eax, DWORD PTR $T188791[ebp]
  00115	50		 push	 eax
  00116	8b ce		 mov	 ecx, esi
  00118	e8 00 00 00 00	 call	 ?erase@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase
  0011d	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00120	e8 00 00 00 00	 call	 ??E?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator++
  00125	8d 4d 10	 lea	 ecx, DWORD PTR __First$[ebp]
  00128	51		 push	 ecx
  00129	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  0012c	e8 00 00 00 00	 call	 ??9?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator!=
  00131	84 c0		 test	 al, al
  00133	75 c2		 jne	 SHORT $LL3@Insert@2
$LN1@Insert@2:

; 780  : 			}
; 781  : 		_RERAISE;

  00135	6a 00		 push	 0
  00137	6a 00		 push	 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Insert@2:

; 782  : 		_CATCH_END
; 783  : 		}

  0013e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00141	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00148	59		 pop	 ecx
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 1c 00	 ret	 28			; 0000001cH
$LN91@Insert@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >
PUBLIC	??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z ; std::_Construct<HostDevice,HostDevice>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
xdata$x	SEGMENT
__unwindtable$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z
_TEXT	SEGMENT
$T188965 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z PROC ; std::_Construct<HostDevice,HostDevice>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00014	33 c4		 xor	 eax, esp
  00016	50		 push	 eax
  00017	8d 44 24 08	 lea	 eax, DWORD PTR __$EHRec$[esp+20]
  0001b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 51   : 	void _FARQ *_Vptr = _Ptr;

  00021	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ptr$[esp+16]
  00025	89 4c 24 18	 mov	 DWORD PTR __Vptr$[esp+16], ecx

; 52   : 	::new (_Vptr) _T1(_Val);

  00029	89 4c 24 04	 mov	 DWORD PTR $T188965[esp+20], ecx
  0002d	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+28], 0
  00035	85 c9		 test	 ecx, ecx
  00037	74 0a		 je	 SHORT $LN3@Construct@5
  00039	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+16]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN3@Construct@5:

; 53   : 	}

  00043	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00047	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004e	59		 pop	 ecx
  0004f	83 c4 10	 add	 esp, 16			; 00000010H
  00052	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR __Vptr$[ebp-4]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T188965[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z ENDP ; std::_Construct<HostDevice,HostDevice>
PUBLIC	??1?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::~ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::~ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear
  0000e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00019	51		 push	 ecx
  0001a	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
  00029	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	c3		 ret	 0
??1?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::~ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??1?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UAE@XZ PROC ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?clear@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
  0000e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00019	51		 push	 ecx
  0001a	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
  00029	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	c3		 ret	 0
??1?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UAE@XZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~list<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~list<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx

; 520  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 521  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
  00008	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 522  : 		}

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	51		 push	 ecx
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 08	 add	 esp, 8
  00023	5e		 pop	 esi
  00024	c3		 ret	 0
??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~list<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	??1?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??1?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 559  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy

; 560  : 		}

  00008	8b 06		 mov	 eax, DWORD PTR [esi]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
  00013	5e		 pop	 esi
  00014	c3		 ret	 0
??1?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
_TEXT	ENDS
PUBLIC	?push_back@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::push_back
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?push_back@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::push_back, COMDAT
; _this$ = ecx

; 670  : 		_Insert(end(), _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0000c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000f	50		 push	 eax
  00010	51		 push	 ecx
  00011	57		 push	 edi
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@PAU342@0ABUFavoriteVolume@CipherShed@@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode
  00019	6a 01		 push	 1
  0001b	8b ce		 mov	 ecx, esi
  0001d	8b d8		 mov	 ebx, eax
  0001f	e8 00 00 00 00	 call	 ?_Incsize@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Incsize
  00024	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00027	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	89 1a		 mov	 DWORD PTR [edx], ebx
  0002e	5b		 pop	 ebx

; 671  : 		}

  0002f	c2 04 00	 ret	 4
?push_back@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::push_back
_TEXT	ENDS
PUBLIC	?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T189385 = -8						; size = 8
?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 1060 : 		erase(begin(), end());

  00008	8b 6e 10	 mov	 ebp, DWORD PTR [esi+16]
  0000b	57		 push	 edi
  0000c	39 6e 0c	 cmp	 DWORD PTR [esi+12], ebp
  0000f	76 05		 jbe	 SHORT $LN9@clear@7
  00011	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@clear@7:
  00016	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00019	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0001b	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0001e	76 05		 jbe	 SHORT $LN28@clear@7
  00020	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@clear@7:
  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	55		 push	 ebp
  00028	53		 push	 ebx
  00029	57		 push	 edi
  0002a	50		 push	 eax
  0002b	8d 44 24 20	 lea	 eax, DWORD PTR $T189385[esp+40]
  0002f	50		 push	 eax
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::erase
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5d		 pop	 ebp
  0003a	5b		 pop	 ebx

; 1061 : 		}

  0003b	83 c4 08	 add	 esp, 8
  0003e	c3		 ret	 0
?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::clear
_TEXT	ENDS
PUBLIC	?clear@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T189538 = -8						; size = 8
?clear@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 1060 : 		erase(begin(), end());

  00008	8b 6e 10	 mov	 ebp, DWORD PTR [esi+16]
  0000b	57		 push	 edi
  0000c	39 6e 0c	 cmp	 DWORD PTR [esi+12], ebp
  0000f	76 05		 jbe	 SHORT $LN9@clear@8
  00011	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@clear@8:
  00016	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00019	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0001b	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0001e	76 05		 jbe	 SHORT $LN28@clear@8
  00020	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@clear@8:
  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	55		 push	 ebp
  00028	53		 push	 ebx
  00029	57		 push	 edi
  0002a	50		 push	 eax
  0002b	8d 44 24 20	 lea	 eax, DWORD PTR $T189538[esp+40]
  0002f	50		 push	 eax
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5d		 pop	 ebp
  0003a	5b		 pop	 ebx

; 1061 : 		}

  0003b	83 c4 08	 add	 esp, 8
  0003e	c3		 ret	 0
?clear@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear
_TEXT	ENDS
PUBLIC	??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
;	COMDAT ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
	DD	0cH
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$0
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$1
	DD	02H
	DD	00H
__ehfuncinfo$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
xdata$x	ENDS
;	COMDAT ??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
$T189687 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 914  : 		{	// construct from stream buffer pointer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx
  00028	89 7c 24 14	 mov	 DWORD PTR _this$[esp+36], edi
  0002c	33 db		 xor	 ebx, ebx
  0002e	89 5c 24 10	 mov	 DWORD PTR $T189687[esp+36], ebx
  00032	39 5c 24 2c	 cmp	 DWORD PTR _$initVBases$[esp+32], ebx
  00036	74 20		 je	 SHORT $LN1@basic_iost
  00038	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0003e	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00045	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  0004c	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00050	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR $T189687[esp+36], 1
$LN1@basic_iost:
  00058	8b 07		 mov	 eax, DWORD PTR [edi]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005d	c7 04 0f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00064	8b 17		 mov	 edx, DWORD PTR [edi]
  00066	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00069	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0006c	03 f7		 add	 esi, edi
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init
  00075	8b 44 24 28	 mov	 eax, DWORD PTR __Strbuf$[esp+32]
  00079	6a 20		 push	 32			; 00000020H
  0007b	8b ce		 mov	 ecx, esi
  0007d	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00080	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00083	e8 00 00 00 00	 call	 ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
  00088	88 46 30	 mov	 BYTE PTR [esi+48], al
  0008b	39 5e 28	 cmp	 DWORD PTR [esi+40], ebx
  0008e	75 12		 jne	 SHORT $LN31@basic_iost
  00090	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00093	83 c8 04	 or	 eax, 4
  00096	83 c8 04	 or	 eax, 4
  00099	53		 push	 ebx
  0009a	50		 push	 eax
  0009b	8b ce		 mov	 ecx, esi
  0009d	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN31@basic_iost:
  000a2	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  000a5	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000a8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ab	c7 44 17 08 00
	00 00 00	 mov	 DWORD PTR [edi+edx+8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  000b3	8b 07		 mov	 eax, DWORD PTR [edi]
  000b5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b8	c7 04 0f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@

; 915  : 		}

  000bf	8b c7		 mov	 eax, edi
  000c1	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cc	59		 pop	 ecx
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	83 c4 14	 add	 esp, 20			; 00000014H
  000d3	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T189687[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_iost
  0000c	83 65 ec fe	 and	 DWORD PTR $T189687[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_iost:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 08	 add	 ecx, 8
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
__ehhandler$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0002e	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 102  : 			{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0

; 103  : 
; 104  :  #if _HAS_EXCEPTIONS
; 105  : 			if (!_XSTD uncaught_exception())

  00030	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00035	84 c0		 test	 al, al
  00037	75 07		 jne	 SHORT $LN1@sentry@2

; 106  : 				this->_Myostr._Osfx();

  00039	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003b	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN1@sentry@2:

; 107  : 			}

  00040	8b 06		 mov	 eax, DWORD PTR [esi]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00047	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  0004b	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+32], -1
  00053	85 c0		 test	 eax, eax
  00055	74 08		 je	 SHORT $LN12@sentry@2
  00057	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0005a	e8 00 00 00 00	 call	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN12@sentry@2:
  0005f	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	5e		 pop	 esi
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
_TEXT	SEGMENT
$T189836 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 69   : 		{

  00000	51		 push	 ecx

; 70   : 			return ContainerForward <T> (container);

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR _container$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	50		 push	 eax
  0000b	8b ce		 mov	 ecx, esi
  0000d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T189836[esp+12], 0
  00015	e8 00 00 00 00	 call	 ??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi

; 71   : 		}

  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 01H
	DD	01H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$10
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$9
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
_TEXT	SEGMENT
__Ok$ = -32						; size = 8
__State$ = -24						; size = 4
__Pad$145221 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Ch$ = 12						; size = 1
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 787  : 	{	// insert a char into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 788  : 	typedef char _Elem;
; 789  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 790  : 	ios_base::iostate _State = ios_base::goodbit;
; 791  : 	const typename _Myos::sentry _Ok(_Ostr);

  0002b	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0002e	33 ff		 xor	 edi, edi
  00030	56		 push	 esi
  00031	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00034	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
  00037	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 792  : 
; 793  : 	if (_Ok)

  0003c	80 7d e4 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00040	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  00043	0f 84 74 01 00
	00		 je	 $LN20@operator@49

; 794  : 		{	// state okay, insert
; 795  : 		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  00049	8b 06		 mov	 eax, DWORD PTR [esi]
  0004b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004e	8b 44 31 18	 mov	 eax, DWORD PTR [ecx+esi+24]
  00052	03 ce		 add	 ecx, esi
  00054	83 f8 01	 cmp	 eax, 1
  00057	7f 05		 jg	 SHORT $LN15@operator@49
  00059	89 7d ec	 mov	 DWORD PTR __Pad$145221[ebp], edi
  0005c	eb 04		 jmp	 SHORT $LN16@operator@49
$LN15@operator@49:
  0005e	48		 dec	 eax
  0005f	89 45 ec	 mov	 DWORD PTR __Pad$145221[ebp], eax
$LN16@operator@49:

; 796  : 
; 797  : 		_TRY_IO_BEGIN
; 798  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00062	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00065	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0006a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0006e	83 f8 40	 cmp	 eax, 64			; 00000040H
  00071	74 59		 je	 SHORT $LN157@operator@49
$LL9@operator@49:

; 799  : 			for (; _State == ios_base::goodbit && 0 < _Pad;
; 800  : 				--_Pad)	// pad on left

  00073	85 ff		 test	 edi, edi
  00075	0f 85 3b 01 00
	00		 jne	 $LN2@operator@49
  0007b	39 7d ec	 cmp	 DWORD PTR __Pad$145221[ebp], edi
  0007e	7e 4c		 jle	 SHORT $LN157@operator@49

; 801  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 802  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00080	8b 16		 mov	 edx, DWORD PTR [esi]
  00082	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00085	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  00088	8a 41 30	 mov	 al, BYTE PTR [ecx+48]
  0008b	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  0008e	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00091	39 3a		 cmp	 DWORD PTR [edx], edi
  00093	74 1a		 je	 SHORT $LN36@operator@49
  00095	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00098	39 3a		 cmp	 DWORD PTR [edx], edi
  0009a	7e 13		 jle	 SHORT $LN36@operator@49
  0009c	ff 0a		 dec	 DWORD PTR [edx]
  0009e	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000a1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a3	8d 5a 01	 lea	 ebx, DWORD PTR [edx+1]
  000a6	89 19		 mov	 DWORD PTR [ecx], ebx
  000a8	88 02		 mov	 BYTE PTR [edx], al
  000aa	0f b6 c0	 movzx	 eax, al
  000ad	eb 0b		 jmp	 SHORT $LN37@operator@49
$LN36@operator@49:
  000af	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b1	0f b6 c0	 movzx	 eax, al
  000b4	50		 push	 eax
  000b5	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000b8	ff d0		 call	 eax
$LN37@operator@49:
  000ba	83 f8 ff	 cmp	 eax, -1
  000bd	75 08		 jne	 SHORT $LN8@operator@49

; 803  : 					_State |= ios_base::badbit;

  000bf	bf 04 00 00 00	 mov	 edi, 4
  000c4	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
$LN8@operator@49:

; 799  : 			for (; _State == ios_base::goodbit && 0 < _Pad;
; 800  : 				--_Pad)	// pad on left

  000c7	ff 4d ec	 dec	 DWORD PTR __Pad$145221[ebp]
  000ca	eb a7		 jmp	 SHORT $LL9@operator@49
$LN157@operator@49:

; 804  : 
; 805  : 		if (_State == ios_base::goodbit
; 806  : 			&& _Traits::eq_int_type(_Traits::eof(),
; 807  : 				_Ostr.rdbuf()->sputc(_Ch)))

  000cc	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ce	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d1	8b 4c 32 28	 mov	 ecx, DWORD PTR [edx+esi+40]
  000d5	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  000d8	83 38 00	 cmp	 DWORD PTR [eax], 0
  000db	74 20		 je	 SHORT $LN56@operator@49
  000dd	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000e0	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000e3	7e 18		 jle	 SHORT $LN56@operator@49
  000e5	8b c2		 mov	 eax, edx
  000e7	ff 08		 dec	 DWORD PTR [eax]
  000e9	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000ec	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ee	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  000f1	89 11		 mov	 DWORD PTR [ecx], edx
  000f3	8a 4d 0c	 mov	 cl, BYTE PTR __Ch$[ebp]
  000f6	88 08		 mov	 BYTE PTR [eax], cl
  000f8	0f b6 c1	 movzx	 eax, cl
  000fb	eb 0c		 jmp	 SHORT $LN57@operator@49
$LN56@operator@49:
  000fd	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00101	8b 11		 mov	 edx, DWORD PTR [ecx]
  00103	50		 push	 eax
  00104	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00107	ff d0		 call	 eax
$LN57@operator@49:
  00109	83 f8 ff	 cmp	 eax, -1
  0010c	75 08		 jne	 SHORT $LL158@operator@49

; 808  : 			_State |= ios_base::badbit;

  0010e	bf 04 00 00 00	 mov	 edi, 4
  00113	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
$LL158@operator@49:

; 809  : 
; 810  : 		for (; _State == ios_base::goodbit && 0 < _Pad;
; 811  : 			--_Pad)	// pad on right

  00116	85 ff		 test	 edi, edi
  00118	0f 85 98 00 00
	00		 jne	 $LN2@operator@49
  0011e	39 7d ec	 cmp	 DWORD PTR __Pad$145221[ebp], edi
  00121	0f 8e 8f 00 00
	00		 jle	 $LN2@operator@49

; 812  : 			if (_Traits::eq_int_type(_Traits::eof(),
; 813  : 				_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00127	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00129	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012c	8a 44 32 30	 mov	 al, BYTE PTR [edx+esi+48]
  00130	8d 0c 32	 lea	 ecx, DWORD PTR [edx+esi]
  00133	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00136	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00139	39 3a		 cmp	 DWORD PTR [edx], edi
  0013b	74 1a		 je	 SHORT $LN78@operator@49
  0013d	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00140	39 3a		 cmp	 DWORD PTR [edx], edi
  00142	7e 13		 jle	 SHORT $LN78@operator@49
  00144	ff 0a		 dec	 DWORD PTR [edx]
  00146	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00149	8b 11		 mov	 edx, DWORD PTR [ecx]
  0014b	8d 5a 01	 lea	 ebx, DWORD PTR [edx+1]
  0014e	89 19		 mov	 DWORD PTR [ecx], ebx
  00150	88 02		 mov	 BYTE PTR [edx], al
  00152	0f b6 c0	 movzx	 eax, al
  00155	eb 0b		 jmp	 SHORT $LN79@operator@49
$LN78@operator@49:
  00157	8b 11		 mov	 edx, DWORD PTR [ecx]
  00159	0f b6 c0	 movzx	 eax, al
  0015c	50		 push	 eax
  0015d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00160	ff d0		 call	 eax
$LN79@operator@49:
  00162	83 f8 ff	 cmp	 eax, -1
  00165	75 08		 jne	 SHORT $LN3@operator@49

; 814  : 				_State |= ios_base::badbit;

  00167	bf 04 00 00 00	 mov	 edi, 4
  0016c	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
$LN3@operator@49:

; 809  : 
; 810  : 		for (; _State == ios_base::goodbit && 0 < _Pad;
; 811  : 			--_Pad)	// pad on right

  0016f	ff 4d ec	 dec	 DWORD PTR __Pad$145221[ebp]
  00172	eb a2		 jmp	 SHORT $LL158@operator@49
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0:

; 815  : 		_CATCH_IO_(_Ostr)

  00174	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00177	8b 11		 mov	 edx, DWORD PTR [ecx]
  00179	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0017c	03 c1		 add	 eax, ecx
  0017e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00181	83 c9 04	 or	 ecx, 4
  00184	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00188	75 03		 jne	 SHORT $LN101@operator@49
  0018a	83 c9 04	 or	 ecx, 4
$LN101@operator@49:
  0018d	83 e1 17	 and	 ecx, 23			; 00000017H
  00190	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00193	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  00196	75 15		 jne	 SHORT $LN110@operator@49
  00198	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0019f	b8 00 00 00 00	 mov	 eax, $LN21@operator@49
  001a4	c3		 ret	 0
$LN21@operator@49:
  001a5	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  001a8	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
  001ab	eb 10		 jmp	 SHORT $LN20@operator@49
$LN110@operator@49:
  001ad	6a 00		 push	 0
  001af	6a 00		 push	 0
  001b1	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@operator@49:
  001b6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN20@operator@49:

; 816  : 		}
; 817  : 
; 818  : 	_Ostr.width(0);

  001bd	8b 06		 mov	 eax, DWORD PTR [esi]
  001bf	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001c2	03 c6		 add	 eax, esi
  001c4	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 819  : 	_Ostr.setstate(_State);

  001cb	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001cd	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  001d0	03 ce		 add	 ecx, esi
  001d2	85 ff		 test	 edi, edi
  001d4	74 16		 je	 SHORT $LN135@operator@49
  001d6	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001d9	0b c7		 or	 eax, edi
  001db	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  001df	75 03		 jne	 SHORT $LN137@operator@49
  001e1	83 c8 04	 or	 eax, 4
$LN137@operator@49:
  001e4	6a 00		 push	 0
  001e6	50		 push	 eax
  001e7	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN135@operator@49:

; 820  : 	return (_Ostr);

  001ec	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 6
  001f3	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  001f8	84 c0		 test	 al, al
  001fa	75 08		 jne	 SHORT $LN139@operator@49
  001fc	8b 4d e0	 mov	 ecx, DWORD PTR __Ok$[ebp]
  001ff	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN139@operator@49:
  00204	8b 45 e0	 mov	 eax, DWORD PTR __Ok$[ebp]
  00207	8b 10		 mov	 edx, DWORD PTR [eax]
  00209	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0020c	8b 44 01 28	 mov	 eax, DWORD PTR [ecx+eax+40]
  00210	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00217	85 c0		 test	 eax, eax
  00219	74 08		 je	 SHORT $LN150@operator@49
  0021b	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0021e	e8 00 00 00 00	 call	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN150@operator@49:
  00223	8b c6		 mov	 eax, esi

; 821  : 	}

  00225	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00228	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0022f	59		 pop	 ecx
  00230	5f		 pop	 edi
  00231	5e		 pop	 esi
  00232	5b		 pop	 ebx
  00233	8b e5		 mov	 esp, ebp
  00235	5d		 pop	 ebp
  00236	c3		 ret	 0
$LN163@operator@49:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$9:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ENDP ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$9 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$9
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -32						; size = 8
__Pad$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 741  : 	{	// insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 742  : 	typedef char _Elem;
; 743  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 744  : 	ios_base::iostate _State = ios_base::goodbit;
; 745  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0002e	33 db		 xor	 ebx, ebx
  00030	89 5d ec	 mov	 DWORD PTR __State$[ebp], ebx
  00033	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL134@operator@50:
  00036	8a 08		 mov	 cl, BYTE PTR [eax]
  00038	40		 inc	 eax
  00039	84 c9		 test	 cl, cl
  0003b	75 f9		 jne	 SHORT $LL134@operator@50

; 746  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 747  : 		? 0 : _Ostr.width() - _Count;

  0003d	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00040	2b c2		 sub	 eax, edx
  00042	8b f8		 mov	 edi, eax
  00044	8b 06		 mov	 eax, DWORD PTR [esi]
  00046	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00049	8b 44 31 18	 mov	 eax, DWORD PTR [ecx+esi+24]
  0004d	3b c3		 cmp	 eax, ebx
  0004f	7e 0d		 jle	 SHORT $LN17@operator@50
  00051	3b c7		 cmp	 eax, edi
  00053	7e 09		 jle	 SHORT $LN17@operator@50
  00055	2b c7		 sub	 eax, edi
  00057	8b d8		 mov	 ebx, eax
  00059	89 45 e8	 mov	 DWORD PTR __Pad$[ebp], eax
  0005c	eb 03		 jmp	 SHORT $LN18@operator@50
$LN17@operator@50:
  0005e	89 5d e8	 mov	 DWORD PTR __Pad$[ebp], ebx
$LN18@operator@50:

; 748  : 	const typename _Myos::sentry _Ok(_Ostr);

  00061	56		 push	 esi
  00062	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00065	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 749  : 
; 750  : 	if (!_Ok)

  0006a	80 7d e4 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00075	75 0a		 jne	 SHORT $LN14@operator@50

; 751  : 		_State |= ios_base::badbit;

  00077	ba 04 00 00 00	 mov	 edx, 4

; 752  : 	else

  0007c	e9 9b 00 00 00	 jmp	 $LN22@operator@50
$LN14@operator@50:

; 753  : 		{	// state okay, insert
; 754  : 		_TRY_IO_BEGIN
; 755  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00081	8b 16		 mov	 edx, DWORD PTR [esi]
  00083	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00086	8b 44 30 10	 mov	 eax, DWORD PTR [eax+esi+16]
  0008a	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0008f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00093	83 f8 40	 cmp	 eax, 64			; 00000040H
  00096	74 53		 je	 SHORT $LN132@operator@50
$LL10@operator@50:

; 756  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00098	85 db		 test	 ebx, ebx
  0009a	7e 49		 jle	 SHORT $LN8@operator@50

; 757  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 758  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  0009c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0009e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a1	8a 44 32 30	 mov	 al, BYTE PTR [edx+esi+48]
  000a5	8d 0c 32	 lea	 ecx, DWORD PTR [edx+esi]
  000a8	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  000ab	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000ae	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000b1	74 1e		 je	 SHORT $LN42@operator@50
  000b3	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000b6	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000b9	7e 16		 jle	 SHORT $LN42@operator@50
  000bb	ff 0a		 dec	 DWORD PTR [edx]
  000bd	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000c0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c2	8d 5a 01	 lea	 ebx, DWORD PTR [edx+1]
  000c5	89 19		 mov	 DWORD PTR [ecx], ebx
  000c7	8b 5d e8	 mov	 ebx, DWORD PTR __Pad$[ebp]
  000ca	88 02		 mov	 BYTE PTR [edx], al
  000cc	0f b6 c0	 movzx	 eax, al
  000cf	eb 0b		 jmp	 SHORT $LN43@operator@50
$LN42@operator@50:
  000d1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	50		 push	 eax
  000d7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000da	ff d0		 call	 eax
$LN43@operator@50:
  000dc	83 f8 ff	 cmp	 eax, -1
  000df	75 7f		 jne	 SHORT $LN9@operator@50

; 759  : 					{	// insertion failed, quit
; 760  : 					_State |= ios_base::badbit;

  000e1	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN8@operator@50:

; 761  : 					break;
; 762  : 					}
; 763  : 
; 764  : 		if (_State == ios_base::goodbit
; 765  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  000e5	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  000e9	75 1f		 jne	 SHORT $LN2@operator@50
$LN132@operator@50:
  000eb	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ed	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000f0	8b 4c 32 28	 mov	 ecx, DWORD PTR [edx+esi+40]
  000f4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f6	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  000f9	57		 push	 edi
  000fa	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  000fd	ff d2		 call	 edx
  000ff	3b c7		 cmp	 eax, edi
  00101	74 6d		 je	 SHORT $LL133@operator@50

; 766  : 			_State |= ios_base::badbit;

  00103	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN2@operator@50:

; 775  : 					}
; 776  : 		_Ostr.width(0);

  0010a	8b 06		 mov	 eax, DWORD PTR [esi]
  0010c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010f	03 c6		 add	 eax, esi
  00111	33 c9		 xor	 ecx, ecx
  00113	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00116	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
$LN141@operator@50:
  00119	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
$LN22@operator@50:

; 778  : 		}
; 779  : 
; 780  : 	_Ostr.setstate(_State);

  0011c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0011e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00121	03 ce		 add	 ecx, esi
  00123	85 d2		 test	 edx, edx
  00125	74 16		 je	 SHORT $LN125@operator@50
  00127	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0012a	0b c2		 or	 eax, edx
  0012c	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00130	75 03		 jne	 SHORT $LN127@operator@50
  00132	83 c8 04	 or	 eax, 4
$LN127@operator@50:
  00135	6a 00		 push	 0
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN125@operator@50:

; 781  : 	return (_Ostr);

  0013d	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00140	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00147	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0014c	8b c6		 mov	 eax, esi

; 782  : 	}

  0014e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00151	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00158	59		 pop	 ecx
  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi
  0015b	5b		 pop	 ebx
  0015c	8b e5		 mov	 esp, ebp
  0015e	5d		 pop	 ebp
  0015f	c3		 ret	 0
$LN9@operator@50:

; 756  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00160	4b		 dec	 ebx
  00161	89 5d e8	 mov	 DWORD PTR __Pad$[ebp], ebx
  00164	e9 2f ff ff ff	 jmp	 $LL10@operator@50
  00169	8d a4 24 00 00
	00 00		 npad	 7
$LL133@operator@50:

; 767  : 
; 768  : 		if (_State == ios_base::goodbit)
; 769  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00170	85 db		 test	 ebx, ebx
  00172	7e 96		 jle	 SHORT $LN2@operator@50

; 770  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 771  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00174	8b 06		 mov	 eax, DWORD PTR [esi]
  00176	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00179	8a 44 31 30	 mov	 al, BYTE PTR [ecx+esi+48]
  0017d	03 ce		 add	 ecx, esi
  0017f	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00182	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00185	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00188	74 1b		 je	 SHORT $LN68@operator@50
  0018a	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0018d	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00190	7e 13		 jle	 SHORT $LN68@operator@50
  00192	ff 0a		 dec	 DWORD PTR [edx]
  00194	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00197	8b 11		 mov	 edx, DWORD PTR [ecx]
  00199	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
  0019c	89 39		 mov	 DWORD PTR [ecx], edi
  0019e	88 02		 mov	 BYTE PTR [edx], al
  001a0	0f b6 c0	 movzx	 eax, al
  001a3	eb 0b		 jmp	 SHORT $LN69@operator@50
$LN68@operator@50:
  001a5	8b 11		 mov	 edx, DWORD PTR [ecx]
  001a7	0f b6 c0	 movzx	 eax, al
  001aa	50		 push	 eax
  001ab	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001ae	ff d0		 call	 eax
$LN69@operator@50:
  001b0	83 f8 ff	 cmp	 eax, -1
  001b3	75 09		 jne	 SHORT $LN3@operator@50

; 772  : 					{	// insertion failed, quit
; 773  : 					_State |= ios_base::badbit;

  001b5	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4

; 774  : 					break;

  001b9	e9 4c ff ff ff	 jmp	 $LN2@operator@50
$LN3@operator@50:

; 767  : 
; 768  : 		if (_State == ios_base::goodbit)
; 769  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  001be	4b		 dec	 ebx
  001bf	eb af		 jmp	 SHORT $LL133@operator@50
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 777  : 		_CATCH_IO_(_Ostr)

  001c1	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  001c4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001c9	03 c1		 add	 eax, ecx
  001cb	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001ce	83 c9 04	 or	 ecx, 4
  001d1	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  001d5	75 03		 jne	 SHORT $LN93@operator@50
  001d7	83 c9 04	 or	 ecx, 4
$LN93@operator@50:
  001da	83 e1 17	 and	 ecx, 23			; 00000017H
  001dd	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  001e0	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  001e3	75 15		 jne	 SHORT $LN102@operator@50
  001e5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  001ec	b8 00 00 00 00	 mov	 eax, $LN23@operator@50
  001f1	c3		 ret	 0
$LN23@operator@50:
  001f2	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  001f5	e9 1f ff ff ff	 jmp	 $LN141@operator@50
$LN102@operator@50:
  001fa	6a 00		 push	 0
  001fc	6a 00		 push	 0
  001fe	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN140@operator@50:
  00203	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__catchsym$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0
__tryblocktable$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 01H
	DD	01H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$10
__ehfuncinfo$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$9
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Ok$ = -36						; size = 8
__Size$ = -28						; size = 4
__Pad$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 540  : 	{	// insert a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 541  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 542  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 543  : 	typedef typename _Mystr::size_type _Mysizt;
; 544  : 
; 545  : 	ios_base::iostate _State = ios_base::goodbit;
; 546  : 	_Mysizt _Size = _Str.size();
; 547  : 	_Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
; 548  : 			? 0 : (_Mysizt)_Ostr.width() - _Size;

  0002b	8b 7d 08	 mov	 edi, DWORD PTR __Ostr$[ebp]
  0002e	8b 07		 mov	 eax, DWORD PTR [edi]
  00030	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00033	8b 5d 0c	 mov	 ebx, DWORD PTR __Str$[ebp]
  00036	8b 44 3a 18	 mov	 eax, DWORD PTR [edx+edi+24]
  0003a	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  0003d	33 f6		 xor	 esi, esi
  0003f	3b c6		 cmp	 eax, esi
  00041	89 75 ec	 mov	 DWORD PTR __State$[ebp], esi
  00044	89 4d e4	 mov	 DWORD PTR __Size$[ebp], ecx
  00047	7e 0b		 jle	 SHORT $LN21@operator@51
  00049	3b c1		 cmp	 eax, ecx
  0004b	76 07		 jbe	 SHORT $LN21@operator@51
  0004d	2b c1		 sub	 eax, ecx
  0004f	89 45 e8	 mov	 DWORD PTR __Pad$[ebp], eax
  00052	eb 03		 jmp	 SHORT $LN22@operator@51
$LN21@operator@51:
  00054	89 75 e8	 mov	 DWORD PTR __Pad$[ebp], esi
$LN22@operator@51:

; 549  : 	const typename _Myos::sentry _Ok(_Ostr);

  00057	57		 push	 edi
  00058	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0005b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 550  : 
; 551  : 	if (!_Ok)

  00060	80 7d e0 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00064	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  00067	75 0c		 jne	 SHORT $LN18@operator@51

; 552  : 		_State |= ios_base::badbit;

  00069	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4

; 553  : 	else

  00070	e9 44 01 00 00	 jmp	 $LN26@operator@51
$LN18@operator@51:

; 554  : 		{	// state okay, insert characters
; 555  : 	_TRY_IO_BEGIN
; 556  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00075	8b 07		 mov	 eax, DWORD PTR [edi]
  00077	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007a	8b 44 39 10	 mov	 eax, DWORD PTR [ecx+edi+16]
  0007e	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00083	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00087	83 f8 40	 cmp	 eax, 64			; 00000040H
  0008a	74 5a		 je	 SHORT $LL176@operator@51
  0008c	8d 64 24 00	 npad	 4
$LL14@operator@51:

; 557  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00090	83 7d e8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00094	76 45		 jbe	 SHORT $LN12@operator@51

; 558  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 559  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00096	8b 17		 mov	 edx, DWORD PTR [edi]
  00098	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009b	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  0009e	8a 41 30	 mov	 al, BYTE PTR [ecx+48]
  000a1	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  000a4	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000a7	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000aa	74 1b		 je	 SHORT $LN46@operator@51
  000ac	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000af	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000b2	7e 13		 jle	 SHORT $LN46@operator@51
  000b4	ff 0a		 dec	 DWORD PTR [edx]
  000b6	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000b9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bb	8d 72 01	 lea	 esi, DWORD PTR [edx+1]
  000be	89 31		 mov	 DWORD PTR [ecx], esi
  000c0	88 02		 mov	 BYTE PTR [edx], al
  000c2	0f b6 c0	 movzx	 eax, al
  000c5	eb 0b		 jmp	 SHORT $LN47@operator@51
$LN46@operator@51:
  000c7	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c9	0f b6 c0	 movzx	 eax, al
  000cc	50		 push	 eax
  000cd	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000d0	ff d0		 call	 eax
$LN47@operator@51:
  000d2	83 f8 ff	 cmp	 eax, -1
  000d5	75 29		 jne	 SHORT $LN13@operator@51

; 560  : 					{	// insertion failed, quit
; 561  : 					_State |= ios_base::badbit;

  000d7	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN12@operator@51:

; 562  : 					break;
; 563  : 					}
; 564  : 
; 565  : 		if (_State == ios_base::goodbit)

  000db	33 f6		 xor	 esi, esi
  000dd	39 75 ec	 cmp	 DWORD PTR __State$[ebp], esi
  000e0	0f 85 c4 00 00
	00		 jne	 $LN2@operator@51
$LL176@operator@51:

; 566  : 			for (_Mysizt _Count = 0; _Count < _Size; ++_Count)

  000e6	3b 75 e4	 cmp	 esi, DWORD PTR __Size$[ebp]
  000e9	73 63		 jae	 SHORT $LN7@operator@51

; 567  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 568  : 					_Ostr.rdbuf()->sputc(_Str[_Count])))

  000eb	3b 73 14	 cmp	 esi, DWORD PTR [ebx+20]
  000ee	76 05		 jbe	 SHORT $LN64@operator@51
  000f0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN64@operator@51:
  000f5	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000f9	72 0a		 jb	 SHORT $LN70@operator@51
  000fb	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000fe	eb 08		 jmp	 SHORT $LN71@operator@51
$LN13@operator@51:

; 557  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00100	ff 4d e8	 dec	 DWORD PTR __Pad$[ebp]
  00103	eb 8b		 jmp	 SHORT $LL14@operator@51

; 567  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 568  : 					_Ostr.rdbuf()->sputc(_Str[_Count])))

$LN70@operator@51:
  00105	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN71@operator@51:
  00108	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0010a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0010d	8b 4c 3a 28	 mov	 ecx, DWORD PTR [edx+edi+40]
  00111	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00114	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00117	8a 04 30	 mov	 al, BYTE PTR [eax+esi]
  0011a	74 1e		 je	 SHORT $LN76@operator@51
  0011c	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0011f	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00122	7e 16		 jle	 SHORT $LN76@operator@51
  00124	ff 0a		 dec	 DWORD PTR [edx]
  00126	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00129	8b 11		 mov	 edx, DWORD PTR [ecx]
  0012b	8d 5a 01	 lea	 ebx, DWORD PTR [edx+1]
  0012e	89 19		 mov	 DWORD PTR [ecx], ebx
  00130	8b 5d 0c	 mov	 ebx, DWORD PTR __Str$[ebp]
  00133	88 02		 mov	 BYTE PTR [edx], al
  00135	0f b6 c0	 movzx	 eax, al
  00138	eb 0b		 jmp	 SHORT $LN77@operator@51
$LN76@operator@51:
  0013a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013c	0f b6 c0	 movzx	 eax, al
  0013f	50		 push	 eax
  00140	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00143	ff d0		 call	 eax
$LN77@operator@51:
  00145	83 f8 ff	 cmp	 eax, -1
  00148	75 42		 jne	 SHORT $LN8@operator@51

; 569  : 					{	// insertion failed, quit
; 570  : 					_State |= ios_base::badbit;

  0014a	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN7@operator@51:

; 571  : 					break;
; 572  : 					}
; 573  : 
; 574  : 		if (_State == ios_base::goodbit)

  0014e	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  00152	75 56		 jne	 SHORT $LN2@operator@51
$LL4@operator@51:

; 575  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00154	83 7d e8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00158	76 50		 jbe	 SHORT $LN2@operator@51

; 576  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 577  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  0015a	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0015c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0015f	8a 44 3a 30	 mov	 al, BYTE PTR [edx+edi+48]
  00163	8d 0c 3a	 lea	 ecx, DWORD PTR [edx+edi]
  00166	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00169	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0016c	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0016f	74 21		 je	 SHORT $LN98@operator@51
  00171	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00174	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00177	7e 19		 jle	 SHORT $LN98@operator@51
  00179	ff 0a		 dec	 DWORD PTR [edx]
  0017b	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0017e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00180	8d 72 01	 lea	 esi, DWORD PTR [edx+1]
  00183	89 31		 mov	 DWORD PTR [ecx], esi
  00185	88 02		 mov	 BYTE PTR [edx], al
  00187	0f b6 c0	 movzx	 eax, al
  0018a	eb 11		 jmp	 SHORT $LN99@operator@51
$LN8@operator@51:

; 566  : 			for (_Mysizt _Count = 0; _Count < _Size; ++_Count)

  0018c	46		 inc	 esi
  0018d	e9 54 ff ff ff	 jmp	 $LL176@operator@51

; 576  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 577  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

$LN98@operator@51:
  00192	8b 11		 mov	 edx, DWORD PTR [ecx]
  00194	0f b6 c0	 movzx	 eax, al
  00197	50		 push	 eax
  00198	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0019b	ff d0		 call	 eax
$LN99@operator@51:
  0019d	83 f8 ff	 cmp	 eax, -1
  001a0	0f 85 82 00 00
	00		 jne	 $LN3@operator@51

; 578  : 					{	// insertion failed, quit
; 579  : 					_State |= ios_base::badbit;

  001a6	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN2@operator@51:

; 580  : 					break;
; 581  : 					}
; 582  : 		_Ostr.width(0);

  001aa	8b 07		 mov	 eax, DWORD PTR [edi]
  001ac	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001af	03 c7		 add	 eax, edi
  001b1	33 c9		 xor	 ecx, ecx
  001b3	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  001b6	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
$LN26@operator@51:

; 584  : 		}
; 585  : 
; 586  : 	_Ostr.setstate(_State);

  001b9	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001bb	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  001be	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  001c1	03 cf		 add	 ecx, edi
  001c3	85 d2		 test	 edx, edx
  001c5	74 16		 je	 SHORT $LN155@operator@51
  001c7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001ca	0b c2		 or	 eax, edx
  001cc	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  001d0	75 03		 jne	 SHORT $LN157@operator@51
  001d2	83 c8 04	 or	 eax, 4
$LN157@operator@51:
  001d5	6a 00		 push	 0
  001d7	50		 push	 eax
  001d8	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN155@operator@51:

; 587  : 	return (_Ostr);

  001dd	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 6
  001e4	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  001e9	84 c0		 test	 al, al
  001eb	75 08		 jne	 SHORT $LN159@operator@51
  001ed	8b 4d dc	 mov	 ecx, DWORD PTR __Ok$[ebp]
  001f0	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN159@operator@51:
  001f5	8b 45 dc	 mov	 eax, DWORD PTR __Ok$[ebp]
  001f8	8b 10		 mov	 edx, DWORD PTR [eax]
  001fa	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001fd	8b 44 01 28	 mov	 eax, DWORD PTR [ecx+eax+40]
  00201	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00208	85 c0		 test	 eax, eax
  0020a	74 08		 je	 SHORT $LN170@operator@51
  0020c	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0020f	e8 00 00 00 00	 call	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN170@operator@51:
  00214	8b c7		 mov	 eax, edi

; 588  : 	}

  00216	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00219	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00220	59		 pop	 ecx
  00221	5f		 pop	 edi
  00222	5e		 pop	 esi
  00223	5b		 pop	 ebx
  00224	8b e5		 mov	 esp, ebp
  00226	5d		 pop	 ebp
  00227	c3		 ret	 0
$LN3@operator@51:

; 575  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00228	ff 4d e8	 dec	 DWORD PTR __Pad$[ebp]
  0022b	e9 24 ff ff ff	 jmp	 $LL4@operator@51
__catch$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0:

; 583  : 		_CATCH_IO_(_Ostr)

  00230	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00233	8b 11		 mov	 edx, DWORD PTR [ecx]
  00235	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00238	03 c1		 add	 eax, ecx
  0023a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0023d	83 c9 04	 or	 ecx, 4
  00240	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00244	75 03		 jne	 SHORT $LN123@operator@51
  00246	83 c9 04	 or	 ecx, 4
$LN123@operator@51:
  00249	83 e1 17	 and	 ecx, 23			; 00000017H
  0024c	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0024f	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  00252	75 15		 jne	 SHORT $LN132@operator@51
  00254	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0025b	b8 00 00 00 00	 mov	 eax, $LN27@operator@51
  00260	c3		 ret	 0
$LN27@operator@51:
  00261	8b 7d 08	 mov	 edi, DWORD PTR __Ostr$[ebp]
  00264	e9 50 ff ff ff	 jmp	 $LN26@operator@51
$LN132@operator@51:
  00269	6a 00		 push	 0
  0026b	6a 00		 push	 0
  0026d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN182@operator@51:
  00272	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$2:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$9:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Umove@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Umove<CipherShed::FavoriteVolume *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z
_TEXT	SEGMENT
$T191042 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$191045 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Umove<CipherShed::FavoriteVolume *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$191045[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T191042[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T191042[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 14	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 10	 mov	 edx, DWORD PTR __First$[esp+8]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 18	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >

; 1149 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Umove<CipherShed::FavoriteVolume *>
_TEXT	ENDS
PUBLIC	??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$5
__unwindtable$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T191226 = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T191367 = 8						; size = 1
__Cat$191370 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
  00030	6a 04		 push	 4
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	85 c0		 test	 eax, eax
  0003c	74 04		 je	 SHORT $LN19@vector@4
  0003e	89 30		 mov	 DWORD PTR [eax], esi
  00040	eb 02		 jmp	 SHORT $LN20@vector@4
$LN19@vector@4:
  00042	33 c0		 xor	 eax, eax
$LN20@vector@4:
  00044	89 06		 mov	 DWORD PTR [esi], eax

; 501  : 		if (_Buy(_Right.size()))

  00046	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00049	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0004c	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  0004f	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00054	f7 e9		 imul	 ecx
  00056	03 d1		 add	 edx, ecx
  00058	c1 fa 06	 sar	 edx, 6
  0005b	8b c2		 mov	 eax, edx
  0005d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00060	03 c2		 add	 eax, edx
  00062	50		 push	 eax
  00063	8b ce		 mov	 ecx, esi
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0006c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE_NI@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buy
  00071	84 c0		 test	 al, al
  00073	74 45		 je	 SHORT $LN8@vector@4

; 502  : 			_TRY_BEGIN
; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

  00075	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00078	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0007c	89 45 ec	 mov	 DWORD PTR $T191226[ebp], eax
  0007f	39 47 0c	 cmp	 DWORD PTR [edi+12], eax
  00082	76 05		 jbe	 SHORT $LN49@vector@4
  00084	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN49@vector@4:
  00089	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  0008c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0008f	76 05		 jbe	 SHORT $LN66@vector@4
  00091	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN66@vector@4:
  00096	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00099	c6 45 08 00	 mov	 BYTE PTR $T191367[ebp], 0
  0009d	8b 4d 08	 mov	 ecx, DWORD PTR $T191367[ebp]
  000a0	8b 55 08	 mov	 edx, DWORD PTR __Cat$191370[ebp]
  000a3	51		 push	 ecx
  000a4	52		 push	 edx
  000a5	8b 55 ec	 mov	 edx, DWORD PTR $T191226[ebp]
  000a8	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  000ab	51		 push	 ecx
  000ac	50		 push	 eax
  000ad	52		 push	 edx
  000ae	53		 push	 ebx
  000af	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PBU12@0PAU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume const *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >
  000b4	83 c4 18	 add	 esp, 24			; 00000018H
  000b7	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN8@vector@4:

; 507  : 			_CATCH_END
; 508  : 		}

  000ba	8b c6		 mov	 eax, esi
  000bc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000bf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c6	59		 pop	 ecx
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 04 00	 ret	 4
__catch$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

  000d0	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d3	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy

; 506  : 			_RERAISE;

  000d8	6a 00		 push	 0
  000da	6a 00		 push	 0
  000dc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN99@vector@4:
  000e1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
PUBLIC	??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z$7
__unwindtable$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T191402 = -28						; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T191831 = 8						; size = 1
__Right$ = 8						; size = 4
??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z PROC ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 467  : 		{	// construct list by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00030	6a 04		 push	 4
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	85 c0		 test	 eax, eax
  0003c	74 04		 je	 SHORT $LN28@list@2
  0003e	89 30		 mov	 DWORD PTR [eax], esi
  00040	eb 02		 jmp	 SHORT $LN29@list@2
$LN28@list@2:
  00042	33 c0		 xor	 eax, eax
$LN29@list@2:
  00044	89 06		 mov	 DWORD PTR [esi], eax
  00046	8b ce		 mov	 ecx, esi
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0004f	e8 00 00 00 00	 call	 ?_Buynode@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAU_Node@?$_List_nod@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Buynode

; 468  : 		_TRY_BEGIN
; 469  : 		insert(begin(), _Right.begin(), _Right.end());

  00054	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00057	8b 3e		 mov	 edi, DWORD PTR [esi]
  00059	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0005c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00063	8b 10		 mov	 edx, DWORD PTR [eax]
  00065	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00068	8b 18		 mov	 ebx, DWORD PTR [eax]
  0006a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0006c	89 5d e8	 mov	 DWORD PTR $T191402[ebp+4], ebx
  0006f	8b 5d 08	 mov	 ebx, DWORD PTR $T191831[ebp]
  00072	53		 push	 ebx
  00073	50		 push	 eax
  00074	8b 45 e8	 mov	 eax, DWORD PTR $T191402[ebp+4]
  00077	51		 push	 ecx
  00078	50		 push	 eax
  00079	51		 push	 ecx
  0007a	52		 push	 edx
  0007b	57		 push	 edi
  0007c	8b ce		 mov	 ecx, esi
  0007e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00082	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Insert<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1> >

; 473  : 		_CATCH_END
; 474  : 		}

  00087	8b c6		 mov	 eax, esi
  00089	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00093	59		 pop	 ecx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
__catch$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z$0:

; 470  : 		_CATCH_ALL
; 471  : 		_Tidy();

  0009d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	e8 00 00 00 00	 call	 ?_Tidy@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy

; 472  : 		_RERAISE;

  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN121@list@2:
  000ae	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
__ehhandler$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z ENDP ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::insert<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
;	COMDAT ??$insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
__First$ = 16						; size = 8
$T191850 = 24						; size = 1
__Last$ = 24						; size = 8
??$insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::insert<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 731  : 		{	// insert [_First, _Last) at _Where
; 732  : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));

  00000	8b 44 24 14	 mov	 eax, DWORD PTR $T191850[esp-4]
  00004	8b 54 24 18	 mov	 edx, DWORD PTR __Last$[esp]
  00008	50		 push	 eax
  00009	8b 44 24 18	 mov	 eax, DWORD PTR __Last$[esp]
  0000d	52		 push	 edx
  0000e	8b 54 24 18	 mov	 edx, DWORD PTR __First$[esp+8]
  00012	50		 push	 eax
  00013	8b 44 24 18	 mov	 eax, DWORD PTR __First$[esp+8]
  00017	52		 push	 edx
  00018	8b 54 24 18	 mov	 edx, DWORD PTR __Where$[esp+16]
  0001c	50		 push	 eax
  0001d	8b 44 24 18	 mov	 eax, DWORD PTR __Where$[esp+16]
  00021	52		 push	 edx
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >

; 733  : 		}

  00028	c2 18 00	 ret	 24			; 00000018H
??$insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::insert<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU3@@Z ; std::allocator<HostDevice>::construct
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU3@@Z PROC ; std::allocator<HostDevice>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	e8 00 00 00 00	 call	 ??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z ; std::_Construct<HostDevice,HostDevice>
  0000f	83 c4 08	 add	 esp, 8

; 156  : 		}

  00012	c2 08 00	 ret	 8
?construct@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU3@@Z ENDP ; std::allocator<HostDevice>::construct
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T191885 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Vptr$191891 = 8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

  0002b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 128  : 
; 129  : 	_TRY_BEGIN

  0002e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_cop@4:

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

  00040	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00043	74 55		 je	 SHORT $LN4@Uninit_cop@4

; 131  : 		_Al.construct(_Dest, *_First);

  00045	89 75 08	 mov	 DWORD PTR __Vptr$191891[ebp], esi
  00048	89 75 e8	 mov	 DWORD PTR $T191885[ebp], esi
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004f	3b f3		 cmp	 esi, ebx
  00051	74 08		 je	 SHORT $LN18@Uninit_cop@4
  00053	57		 push	 edi
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN18@Uninit_cop@4:
  0005b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00061	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00064	89 75 10	 mov	 DWORD PTR __Dest$[ebp], esi
  00067	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  0006d	eb d1		 jmp	 SHORT $LL6@Uninit_cop@4
__catch$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00072	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00075	3b f7		 cmp	 esi, edi
  00077	74 18		 je	 SHORT $LN1@Uninit_cop@4
  00079	8d a4 24 00 00
	00 00		 npad	 7
$LL3@Uninit_cop@4:

; 134  : 		_Al.destroy(_Next);

  00080	8b ce		 mov	 ecx, esi
  00082	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00087	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0008d	3b f7		 cmp	 esi, edi
  0008f	75 ef		 jne	 SHORT $LL3@Uninit_cop@4
$LN1@Uninit_cop@4:

; 135  : 	_RERAISE;

  00091	33 db		 xor	 ebx, ebx
  00093	53		 push	 ebx
  00094	53		 push	 ebx
  00095	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_cop@4:

; 136  : 	_CATCH_END
; 137  : 	return (_Dest);

  0009a	8b c6		 mov	 eax, esi

; 138  : 	}

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
$LN35@Uninit_cop@4:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Vptr$191891[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T191885[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >
PUBLIC	??1SystemDriveConfiguration@CipherShed@@QAE@XZ	; CipherShed::SystemDriveConfiguration::~SystemDriveConfiguration
; Function compile flags: /Ogtpy
;	COMDAT ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1SystemDriveConfiguration@CipherShed@@QAE@XZ PROC	; CipherShed::SystemDriveConfiguration::~SystemDriveConfiguration, COMDAT
; _this$ = ecx
  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi
  00005	8d 8e f0 00 00
	00		 lea	 ecx, DWORD PTR [esi+240]
  0000b	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
  00010	8d be d0 00 00
	00		 lea	 edi, DWORD PTR [esi+208]
  00016	8b cf		 mov	 ecx, edi
  00018	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
  0001d	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00028	33 db		 xor	 ebx, ebx
  0002a	51		 push	 ecx
  0002b	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00033	83 c4 08	 add	 esp, 8
  00036	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00039	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
  0003e	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  00043	39 7e 34	 cmp	 DWORD PTR [esi+52], edi
  00046	72 0c		 jb	 SHORT $LN46@SystemDriv
  00048	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00051	83 c4 04	 add	 esp, 4
$LN46@SystemDriv:
  00054	c7 46 34 0f 00
	00 00		 mov	 DWORD PTR [esi+52], 15	; 0000000fH
  0005b	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  0005e	88 5e 20	 mov	 BYTE PTR [esi+32], bl
  00061	39 7e 18	 cmp	 DWORD PTR [esi+24], edi
  00064	72 0c		 jb	 SHORT $LN72@SystemDriv
  00066	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006f	83 c4 04	 add	 esp, 4
$LN72@SystemDriv:
  00072	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00075	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0007c	5f		 pop	 edi
  0007d	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	c3		 ret	 0
??1SystemDriveConfiguration@CipherShed@@QAE@XZ ENDP	; CipherShed::SystemDriveConfiguration::~SystemDriveConfiguration
_TEXT	ENDS
PUBLIC	??1?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::~ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::~ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
  00004	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy
  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
  00019	5f		 pop	 edi
  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00020	5e		 pop	 esi
  00021	c3		 ret	 0
??1?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::~ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z DD 02H
	DD	02H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$10
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
_TEXT	SEGMENT
$T192290 = -48						; size = 8
$T192289 = -48						; size = 8
__Ok$ = -40						; size = 8
$T192305 = -32						; size = 1
$T192286 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 2
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 244  : 		{	// insert an unsigned short

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 245  : 		ios_base::iostate _State = ios_base::goodbit;

  00030	33 ff		 xor	 edi, edi

; 246  : 		const sentry _Ok(*this);

  00032	56		 push	 esi
  00033	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00036	33 db		 xor	 ebx, ebx
  00038	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
  0003b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00040	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 247  : 
; 248  : 		if (_Ok)

  00043	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00046	74 75		 je	 SHORT $LN12@operator@52

; 249  : 			{	// state okay, use facet to insert
; 250  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00048	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004d	8d 45 e4	 lea	 eax, DWORD PTR $T192286[ebp]
  00050	50		 push	 eax
  00051	03 ce		 add	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00058	50		 push	 eax
  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0005d	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00062	83 c4 04	 add	 esp, 4
  00065	8d 4d e4	 lea	 ecx, DWORD PTR $T192286[ebp]
  00068	8b f8		 mov	 edi, eax
  0006a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 251  : 
; 252  : 			_TRY_IO_BEGIN
; 253  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 254  : 				_Myios::fill(), (unsigned long)_Val).failed())

  0006f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00071	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00074	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00077	8d 0c 32	 lea	 ecx, DWORD PTR [edx+esi]
  0007a	8a 51 30	 mov	 dl, BYTE PTR [ecx+48]
  0007d	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00080	88 5d d0	 mov	 BYTE PTR $T192289[ebp], bl
  00083	0f b7 5d 08	 movzx	 ebx, WORD PTR __Val$[ebp]
  00087	53		 push	 ebx
  00088	88 55 e0	 mov	 BYTE PTR $T192305[ebp], dl
  0008b	8b 5d e0	 mov	 ebx, DWORD PTR $T192305[ebp]
  0008e	8b 17		 mov	 edx, DWORD PTR [edi]
  00090	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00093	53		 push	 ebx
  00094	03 c6		 add	 eax, esi
  00096	50		 push	 eax
  00097	8b 45 d0	 mov	 eax, DWORD PTR $T192289[ebp]
  0009a	51		 push	 ecx
  0009b	50		 push	 eax
  0009c	8d 4d d0	 lea	 ecx, DWORD PTR $T192290[ebp]
  0009f	51		 push	 ecx
  000a0	8b cf		 mov	 ecx, edi
  000a2	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000a6	ff d2		 call	 edx
  000a8	80 7d d0 00	 cmp	 BYTE PTR $T192290[ebp], 0

; 255  : 				_State |= ios_base::badbit;

  000ac	bf 04 00 00 00	 mov	 edi, 4
  000b1	75 03		 jne	 SHORT $LN1@operator@52
  000b3	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
$LN1@operator@52:
  000b6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN12@operator@52:

; 257  : 			}
; 258  : 
; 259  : 		_Myios::setstate(_State);

  000bd	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000bf	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c2	03 ce		 add	 ecx, esi
  000c4	85 ff		 test	 edi, edi
  000c6	74 16		 je	 SHORT $LN65@operator@52
  000c8	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000cb	0b c7		 or	 eax, edi
  000cd	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  000d1	75 03		 jne	 SHORT $LN67@operator@52
  000d3	83 c8 04	 or	 eax, 4
$LN67@operator@52:
  000d6	6a 00		 push	 0
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN65@operator@52:

; 260  : 		return (*this);

  000de	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000e8	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000ed	8b c6		 mov	 eax, esi

; 261  : 		}

  000ef	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f9	59		 pop	 ecx
  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 04 00	 ret	 4
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$0:

; 256  : 			_CATCH_IO_END

  00103	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00106	8b 01		 mov	 eax, DWORD PTR [ecx]
  00108	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010b	03 c1		 add	 eax, ecx
  0010d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00110	83 c9 04	 or	 ecx, 4
  00113	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00117	75 03		 jne	 SHORT $LN33@operator@52
  00119	83 c9 04	 or	 ecx, 4
$LN33@operator@52:
  0011c	83 e1 17	 and	 ecx, 23			; 00000017H
  0011f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00122	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  00125	75 15		 jne	 SHORT $LN42@operator@52
  00127	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0012e	b8 00 00 00 00	 mov	 eax, $LN13@operator@52
  00133	c3		 ret	 0
$LN13@operator@52:
  00134	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00137	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
  0013a	eb 81		 jmp	 SHORT $LN12@operator@52
$LN42@operator@52:
  0013c	6a 00		 push	 0
  0013e	6a 00		 push	 0
  00140	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN73@operator@52:
  00145	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T192286[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 02H
	DD	02H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$10
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
$T192478 = -48						; size = 8
$T192477 = -48						; size = 8
__Ok$ = -40						; size = 8
$T192497 = -32						; size = 1
$T192472 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 264  : 		{	// insert an int

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 265  : 		ios_base::iostate _State = ios_base::goodbit;

  00030	33 ff		 xor	 edi, edi

; 266  : 		const sentry _Ok(*this);

  00032	56		 push	 esi
  00033	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00036	33 db		 xor	 ebx, ebx
  00038	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
  0003b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00040	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 267  : 
; 268  : 		if (_Ok)

  00043	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00046	74 74		 je	 SHORT $LN14@operator@53

; 269  : 			{	// state okay, use facet to insert
; 270  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00048	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004d	8d 45 e4	 lea	 eax, DWORD PTR $T192472[ebp]
  00050	50		 push	 eax
  00051	03 ce		 add	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00058	50		 push	 eax
  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0005d	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00062	83 c4 04	 add	 esp, 4
  00065	8d 4d e4	 lea	 ecx, DWORD PTR $T192472[ebp]
  00068	8b f8		 mov	 edi, eax
  0006a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 271  : 			ios_base::fmtflags _Bfl =
; 272  : 				ios_base::flags() & ios_base::basefield;

  0006f	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 273  : 			long _Tmp = (_Bfl == ios_base::oct
; 274  : 				|| _Bfl == ios_base::hex)
; 275  : 				? (long)(unsigned int)_Val : (long)_Val;
; 276  : 
; 277  : 			_TRY_IO_BEGIN
; 278  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 279  : 				_Myios::fill(), _Tmp).failed())

  00071	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00074	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00077	8d 0c 32	 lea	 ecx, DWORD PTR [edx+esi]
  0007a	8a 51 30	 mov	 dl, BYTE PTR [ecx+48]
  0007d	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00080	88 5d d0	 mov	 BYTE PTR $T192477[ebp], bl
  00083	8b 5d 08	 mov	 ebx, DWORD PTR __Val$[ebp]
  00086	53		 push	 ebx
  00087	88 55 e0	 mov	 BYTE PTR $T192497[ebp], dl
  0008a	8b 5d e0	 mov	 ebx, DWORD PTR $T192497[ebp]
  0008d	8b 17		 mov	 edx, DWORD PTR [edi]
  0008f	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  00092	53		 push	 ebx
  00093	03 c6		 add	 eax, esi
  00095	50		 push	 eax
  00096	8b 45 d0	 mov	 eax, DWORD PTR $T192477[ebp]
  00099	51		 push	 ecx
  0009a	50		 push	 eax
  0009b	8d 4d d0	 lea	 ecx, DWORD PTR $T192478[ebp]
  0009e	51		 push	 ecx
  0009f	8b cf		 mov	 ecx, edi
  000a1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000a5	ff d2		 call	 edx
  000a7	80 7d d0 00	 cmp	 BYTE PTR $T192478[ebp], 0

; 280  : 				_State |= ios_base::badbit;

  000ab	bf 04 00 00 00	 mov	 edi, 4
  000b0	75 03		 jne	 SHORT $LN1@operator@53
  000b2	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
$LN1@operator@53:
  000b5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN14@operator@53:

; 282  : 			}
; 283  : 
; 284  : 		_Myios::setstate(_State);

  000bc	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000be	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c1	03 ce		 add	 ecx, esi
  000c3	85 ff		 test	 edi, edi
  000c5	74 16		 je	 SHORT $LN69@operator@53
  000c7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ca	0b c7		 or	 eax, edi
  000cc	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  000d0	75 03		 jne	 SHORT $LN71@operator@53
  000d2	83 c8 04	 or	 eax, 4
$LN71@operator@53:
  000d5	6a 00		 push	 0
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN69@operator@53:

; 285  : 		return (*this);

  000dd	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000e7	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000ec	8b c6		 mov	 eax, esi

; 286  : 		}

  000ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f8	59		 pop	 ecx
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 04 00	 ret	 4
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$0:

; 281  : 			_CATCH_IO_END

  00102	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	8b 01		 mov	 eax, DWORD PTR [ecx]
  00107	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010a	03 c1		 add	 eax, ecx
  0010c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0010f	83 c9 04	 or	 ecx, 4
  00112	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00116	75 03		 jne	 SHORT $LN37@operator@53
  00118	83 c9 04	 or	 ecx, 4
$LN37@operator@53:
  0011b	83 e1 17	 and	 ecx, 23			; 00000017H
  0011e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00121	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  00124	75 15		 jne	 SHORT $LN46@operator@53
  00126	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0012d	b8 00 00 00 00	 mov	 eax, $LN15@operator@53
  00132	c3		 ret	 0
$LN15@operator@53:
  00133	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00136	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
  00139	eb 81		 jmp	 SHORT $LN14@operator@53
$LN46@operator@53:
  0013b	6a 00		 push	 0
  0013d	6a 00		 push	 0
  0013f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN77@operator@53:
  00144	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T192472[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z DD 02H
	DD	02H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$10
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
_TEXT	SEGMENT
$T192668 = -48						; size = 8
$T192667 = -48						; size = 8
__Ok$ = -40						; size = 8
$T192683 = -32						; size = 1
$T192664 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 289  : 		{	// insert an unsigned int

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 290  : 		ios_base::iostate _State = ios_base::goodbit;

  00030	33 ff		 xor	 edi, edi

; 291  : 		const sentry _Ok(*this);

  00032	56		 push	 esi
  00033	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00036	33 db		 xor	 ebx, ebx
  00038	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
  0003b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00040	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 292  : 
; 293  : 		if (_Ok)

  00043	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00046	74 74		 je	 SHORT $LN12@operator@54

; 294  : 			{	// state okay, use facet to insert
; 295  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00048	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004d	8d 45 e4	 lea	 eax, DWORD PTR $T192664[ebp]
  00050	50		 push	 eax
  00051	03 ce		 add	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00058	50		 push	 eax
  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0005d	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00062	83 c4 04	 add	 esp, 4
  00065	8d 4d e4	 lea	 ecx, DWORD PTR $T192664[ebp]
  00068	8b f8		 mov	 edi, eax
  0006a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 296  : 
; 297  : 			_TRY_IO_BEGIN
; 298  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 299  : 				_Myios::fill(), (unsigned long)_Val).failed())

  0006f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00071	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00074	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00077	8d 0c 32	 lea	 ecx, DWORD PTR [edx+esi]
  0007a	8a 51 30	 mov	 dl, BYTE PTR [ecx+48]
  0007d	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00080	88 5d d0	 mov	 BYTE PTR $T192667[ebp], bl
  00083	8b 5d 08	 mov	 ebx, DWORD PTR __Val$[ebp]
  00086	53		 push	 ebx
  00087	88 55 e0	 mov	 BYTE PTR $T192683[ebp], dl
  0008a	8b 5d e0	 mov	 ebx, DWORD PTR $T192683[ebp]
  0008d	8b 17		 mov	 edx, DWORD PTR [edi]
  0008f	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00092	53		 push	 ebx
  00093	03 c6		 add	 eax, esi
  00095	50		 push	 eax
  00096	8b 45 d0	 mov	 eax, DWORD PTR $T192667[ebp]
  00099	51		 push	 ecx
  0009a	50		 push	 eax
  0009b	8d 4d d0	 lea	 ecx, DWORD PTR $T192668[ebp]
  0009e	51		 push	 ecx
  0009f	8b cf		 mov	 ecx, edi
  000a1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000a5	ff d2		 call	 edx
  000a7	80 7d d0 00	 cmp	 BYTE PTR $T192668[ebp], 0

; 300  : 				_State |= ios_base::badbit;

  000ab	bf 04 00 00 00	 mov	 edi, 4
  000b0	75 03		 jne	 SHORT $LN1@operator@54
  000b2	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
$LN1@operator@54:
  000b5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN12@operator@54:

; 302  : 			}
; 303  : 
; 304  : 		_Myios::setstate(_State);

  000bc	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000be	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c1	03 ce		 add	 ecx, esi
  000c3	85 ff		 test	 edi, edi
  000c5	74 16		 je	 SHORT $LN65@operator@54
  000c7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ca	0b c7		 or	 eax, edi
  000cc	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  000d0	75 03		 jne	 SHORT $LN67@operator@54
  000d2	83 c8 04	 or	 eax, 4
$LN67@operator@54:
  000d5	6a 00		 push	 0
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN65@operator@54:

; 305  : 		return (*this);

  000dd	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000e7	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000ec	8b c6		 mov	 eax, esi

; 306  : 		}

  000ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f8	59		 pop	 ecx
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 04 00	 ret	 4
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$0:

; 301  : 			_CATCH_IO_END

  00102	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	8b 01		 mov	 eax, DWORD PTR [ecx]
  00107	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010a	03 c1		 add	 eax, ecx
  0010c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0010f	83 c9 04	 or	 ecx, 4
  00112	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00116	75 03		 jne	 SHORT $LN33@operator@54
  00118	83 c9 04	 or	 ecx, 4
$LN33@operator@54:
  0011b	83 e1 17	 and	 ecx, 23			; 00000017H
  0011e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00121	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  00124	75 15		 jne	 SHORT $LN42@operator@54
  00126	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0012d	b8 00 00 00 00	 mov	 eax, $LN13@operator@54
  00132	c3		 ret	 0
$LN13@operator@54:
  00133	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00136	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
  00139	eb 81		 jmp	 SHORT $LN12@operator@54
$LN42@operator@54:
  0013b	6a 00		 push	 0
  0013d	6a 00		 push	 0
  0013f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN73@operator@54:
  00144	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T192664[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??4?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??4?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
tv317 = 8						; size = 4
$T192893 = 8						; size = 1
__Cat$192897 = 8					; size = 1
$T192895 = 8						; size = 1
__Right$ = 8						; size = 4
??4?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

  00000	56		 push	 esi
  00001	57		 push	 edi

; 564  : 		if (this != &_Right)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	3b f7		 cmp	 esi, edi
  0000a	0f 84 67 01 00
	00		 je	 $LN47@operator@55

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

  00010	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c8		 sub	 ecx, eax
  00018	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0001d	f7 e9		 imul	 ecx
  0001f	03 d1		 add	 edx, ecx
  00021	55		 push	 ebp
  00022	c1 fa 06	 sar	 edx, 6
  00025	8b ea		 mov	 ebp, edx
  00027	c1 ed 1f	 shr	 ebp, 31			; 0000001fH
  0002a	03 ea		 add	 ebp, edx
  0002c	75 0f		 jne	 SHORT $LN8@operator@55

; 572  : 				clear();	// new sequence empty, erase existing sequence

  0002e	8b ce		 mov	 ecx, esi
  00030	e8 00 00 00 00	 call	 ?clear@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear
  00035	5d		 pop	 ebp
  00036	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi

; 599  : 		}

  0003a	c2 04 00	 ret	 4
$LN8@operator@55:

; 573  : 			else if (_Right.size() <= size())

  0003d	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00040	53		 push	 ebx
  00041	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00044	2b cb		 sub	 ecx, ebx
  00046	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0004b	f7 e9		 imul	 ecx
  0004d	03 d1		 add	 edx, ecx
  0004f	c1 fa 06	 sar	 edx, 6
  00052	8b ca		 mov	 ecx, edx
  00054	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00057	03 ca		 add	 ecx, edx
  00059	3b e9		 cmp	 ebp, ecx
  0005b	77 63		 ja	 SHORT $LN6@operator@55

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

  0005d	c6 44 24 14 00	 mov	 BYTE PTR $T192893[esp+12], 0
  00062	8b 44 24 14	 mov	 eax, DWORD PTR $T192893[esp+12]
  00066	8b 4c 24 14	 mov	 ecx, DWORD PTR __Cat$192897[esp+12]
  0006a	8b 54 24 14	 mov	 edx, DWORD PTR $T192895[esp+12]
  0006e	50		 push	 eax
  0006f	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00072	51		 push	 ecx
  00073	52		 push	 edx
  00074	53		 push	 ebx
  00075	50		 push	 eax
  00076	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUFavoriteVolume@CipherShed@@PAU12@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

  0007f	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00082	83 c4 18	 add	 esp, 24			; 00000018H
  00085	51		 push	 ecx
  00086	50		 push	 eax
  00087	8b ce		 mov	 ecx, esi
  00089	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

  0008e	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00091	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  00094	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00099	f7 e9		 imul	 ecx
  0009b	03 d1		 add	 edx, ecx
  0009d	c1 fa 06	 sar	 edx, 6
  000a0	8b c2		 mov	 eax, edx
  000a2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a5	03 c2		 add	 eax, edx
  000a7	8b d0		 mov	 edx, eax
  000a9	c1 e2 04	 shl	 edx, 4
  000ac	2b d0		 sub	 edx, eax
  000ae	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000b1	5b		 pop	 ebx
  000b2	5d		 pop	 ebp
  000b3	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  000b6	5f		 pop	 edi
  000b7	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  000ba	8b c6		 mov	 eax, esi
  000bc	5e		 pop	 esi

; 599  : 		}

  000bd	c2 04 00	 ret	 4
$LN6@operator@55:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

  000c0	85 db		 test	 ebx, ebx
  000c2	75 04		 jne	 SHORT $LN38@operator@55
  000c4	33 c0		 xor	 eax, eax
  000c6	eb 1e		 jmp	 SHORT $LN39@operator@55
$LN38@operator@55:
  000c8	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000cb	2b d3		 sub	 edx, ebx
  000cd	89 54 24 14	 mov	 DWORD PTR tv317[esp+12], edx
  000d1	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  000d6	f7 ea		 imul	 edx
  000d8	03 54 24 14	 add	 edx, DWORD PTR tv317[esp+12]
  000dc	c1 fa 06	 sar	 edx, 6
  000df	8b c2		 mov	 eax, edx
  000e1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e4	03 c2		 add	 eax, edx
$LN39@operator@55:
  000e6	3b e8		 cmp	 ebp, eax
  000e8	77 34		 ja	 SHORT $LN4@operator@55

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

  000ea	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000ed	8b d1		 mov	 edx, ecx
  000ef	c1 e2 04	 shl	 edx, 4
  000f2	2b d1		 sub	 edx, ecx
  000f4	8d 2c d0	 lea	 ebp, DWORD PTR [eax+edx*8]

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

  000f7	53		 push	 ebx
  000f8	55		 push	 ebp
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ??$unchecked_copy@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z ; stdext::unchecked_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

  000ff	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00102	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00105	83 c4 0c	 add	 esp, 12			; 0000000cH
  00108	50		 push	 eax
  00109	51		 push	 ecx
  0010a	55		 push	 ebp
  0010b	8b ce		 mov	 ecx, esi
  0010d	e8 00 00 00 00	 call	 ??$_Ucopy@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ucopy<CipherShed::FavoriteVolume *>
  00112	5b		 pop	 ebx
  00113	5d		 pop	 ebp
  00114	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00117	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00118	8b c6		 mov	 eax, esi
  0011a	5e		 pop	 esi

; 599  : 		}

  0011b	c2 04 00	 ret	 4
$LN4@operator@55:

; 585  : 				}
; 586  : 			else
; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

  0011e	85 db		 test	 ebx, ebx
  00120	74 18		 je	 SHORT $LN42@operator@55

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

  00122	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00125	50		 push	 eax
  00126	53		 push	 ebx
  00127	8b ce		 mov	 ecx, esi
  00129	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0012e	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00131	52		 push	 edx
  00132	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00137	83 c4 04	 add	 esp, 4
$LN42@operator@55:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

  0013a	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0013d	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  00140	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00145	f7 e9		 imul	 ecx
  00147	03 d1		 add	 edx, ecx
  00149	c1 fa 06	 sar	 edx, 6
  0014c	8b c2		 mov	 eax, edx
  0014e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00151	03 c2		 add	 eax, edx
  00153	50		 push	 eax
  00154	8b ce		 mov	 ecx, esi
  00156	e8 00 00 00 00	 call	 ?_Buy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAE_NI@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buy
  0015b	84 c0		 test	 al, al
  0015d	74 16		 je	 SHORT $LN46@operator@55

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

  0015f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00162	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00165	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00168	50		 push	 eax
  00169	51		 push	 ecx
  0016a	52		 push	 edx
  0016b	8b ce		 mov	 ecx, esi
  0016d	e8 00 00 00 00	 call	 ??$_Ucopy@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ucopy<CipherShed::FavoriteVolume *>
  00172	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN46@operator@55:
  00175	5b		 pop	 ebx
  00176	5d		 pop	 ebp
$LN47@operator@55:
  00177	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00178	8b c6		 mov	 eax, esi
  0017a	5e		 pop	 esi

; 599  : 		}

  0017b	c2 04 00	 ret	 4
??4?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator=
_TEXT	ENDS
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	04cH
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	054H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1
__ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
$T192948 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 484  : 		{	// construct empty character buffer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002b	33 c0		 xor	 eax, eax
  0002d	89 44 24 0c	 mov	 DWORD PTR $T192948[esp+32], eax
  00031	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+28], eax
  00035	74 20		 je	 SHORT $LN1@basic_stri@6
  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0003d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00044	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  0004b	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  0004f	c7 44 24 0c 01
	00 00 00	 mov	 DWORD PTR $T192948[esp+32], 1
$LN1@basic_stri@6:
  00057	50		 push	 eax
  00058	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  0005b	57		 push	 edi
  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
  00063	8b 06		 mov	 eax, DWORD PTR [esi]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00068	8b 54 24 24	 mov	 edx, DWORD PTR __Mode$[esp+28]
  0006c	c7 04 0e 00 00
	00 00		 mov	 DWORD PTR [esi+ecx], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00073	52		 push	 edx
  00074	8b cf		 mov	 ecx, edi
  00076	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 1
  0007e	e8 00 00 00 00	 call	 ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >

; 485  : 		}

  00083	8b c6		 mov	 eax, esi
  00085	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	83 c4 14	 add	 esp, 20			; 00000014H
  00096	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T192948[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_stri@6
  0000c	83 65 ec fe	 and	 DWORD PTR $T192948[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 54	 add	 ecx, 84			; 00000054H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_stri@6:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0002e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	_this$GSCopy$
PUBLIC	__Val$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$2
__catchsym$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$0
__ehfuncinfo$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$6
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$7
__unwindtable$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$4
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
__Ncopied$144267 = -40					; size = 4
_this$GSCopy$ = -36					; size = 4
__Newvec$144265 = -32					; size = 4
tv557 = -28						; size = 4
__Cat$193373 = -28					; size = 1
__Cat$193197 = -28					; size = 1
__Whereoff$144266 = -28					; size = 4
$T193370 = -24						; size = 1
$T193194 = -24						; size = 1
__Val$GSCopy$ = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Tmp$144290 = 0					; size = 120
__Tmp$144280 = 120					; size = 120
__$ArrayPad$ = 240					; size = 4
__Where$ = 252						; size = 8
__Count$ = 260						; size = 4
__Val$ = 264						; size = 4
?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

  00000	55		 push	 ebp
  00001	8d ac 24 0c ff
	ff ff		 lea	 ebp, DWORD PTR [esp-244]
  00008	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 85 f0 00 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002c	53		 push	 ebx
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1249 : 			}

  0003c	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR __Val$[ebp]
  00042	8b f1		 mov	 esi, ecx
  00044	89 45 e8	 mov	 DWORD PTR __Val$GSCopy$[ebp], eax
  00047	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0004a	89 75 dc	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0004d	85 c0		 test	 eax, eax
  0004f	75 05		 jne	 SHORT $LN31@Insert_n

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

  00051	89 45 ec	 mov	 DWORD PTR __Capacity$[ebp], eax
  00054	eb 1b		 jmp	 SHORT $LN32@Insert_n
$LN31@Insert_n:
  00056	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00059	2b c8		 sub	 ecx, eax
  0005b	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00060	f7 e9		 imul	 ecx
  00062	03 d1		 add	 edx, ecx
  00064	c1 fa 06	 sar	 edx, 6
  00067	8b c2		 mov	 eax, edx
  00069	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0006c	03 c2		 add	 eax, edx
  0006e	89 45 ec	 mov	 DWORD PTR __Capacity$[ebp], eax
$LN32@Insert_n:

; 1162 : 
; 1163 : 		if (_Count == 0)

  00071	8b bd 04 01 00
	00		 mov	 edi, DWORD PTR __Count$[ebp]
  00077	85 ff		 test	 edi, edi
  00079	0f 84 24 03 00
	00		 je	 $LN1@Insert_n

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

  0007f	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00082	8b cb		 mov	 ecx, ebx
  00084	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  00087	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0008c	f7 e9		 imul	 ecx
  0008e	03 d1		 add	 edx, ecx
  00090	c1 fa 06	 sar	 edx, 6
  00093	8b c2		 mov	 eax, edx
  00095	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00098	03 c2		 add	 eax, edx
  0009a	b9 22 22 22 02	 mov	 ecx, 35791394		; 02222222H
  0009f	2b c8		 sub	 ecx, eax
  000a1	3b cf		 cmp	 ecx, edi
  000a3	73 05		 jae	 SHORT $LN12@Insert_n

; 1166 : 			_Xlen();	// result too long

  000a5	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@KAXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Xlen
$LN12@Insert_n:

; 1167 : 		else if (_Capacity < size() + _Count)

  000aa	8b 4d ec	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  000ad	03 c7		 add	 eax, edi
  000af	3b c8		 cmp	 ecx, eax
  000b1	0f 83 9f 01 00
	00		 jae	 $LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  000b7	8b d1		 mov	 edx, ecx
  000b9	d1 ea		 shr	 edx, 1
  000bb	bb 22 22 22 02	 mov	 ebx, 35791394		; 02222222H
  000c0	2b da		 sub	 ebx, edx
  000c2	3b d9		 cmp	 ebx, ecx
  000c4	73 0c		 jae	 SHORT $LN17@Insert_n
  000c6	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Capacity$[ebp], 0
  000cd	8b 4d ec	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  000d0	eb 05		 jmp	 SHORT $LN18@Insert_n
$LN17@Insert_n:
  000d2	03 ca		 add	 ecx, edx
  000d4	89 4d ec	 mov	 DWORD PTR __Capacity$[ebp], ecx
$LN18@Insert_n:

; 1171 : 			if (_Capacity < size() + _Count)

  000d7	3b c8		 cmp	 ecx, eax
  000d9	73 05		 jae	 SHORT $LN9@Insert_n

; 1172 : 				_Capacity = size() + _Count;

  000db	89 45 ec	 mov	 DWORD PTR __Capacity$[ebp], eax
  000de	8b c8		 mov	 ecx, eax
$LN9@Insert_n:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000e0	6a 00		 push	 0
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 ??$_Allocate@UFavoriteVolume@CipherShed@@@std@@YAPAUFavoriteVolume@CipherShed@@IPAU12@@Z ; std::_Allocate<CipherShed::FavoriteVolume>

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

  000e8	8b 9d 00 01 00
	00		 mov	 ebx, DWORD PTR __Where$[ebp+4]
  000ee	2b 5e 0c	 sub	 ebx, DWORD PTR [esi+12]
  000f1	8b c8		 mov	 ecx, eax
  000f3	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  000f8	f7 eb		 imul	 ebx
  000fa	03 d3		 add	 edx, ebx
  000fc	c1 fa 06	 sar	 edx, 6
  000ff	8b da		 mov	 ebx, edx

; 1175 : 			int _Ncopied = 0;

  00101	33 c0		 xor	 eax, eax
  00103	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00106	03 da		 add	 ebx, edx

; 1176 : 
; 1177 : 			_TRY_BEGIN
; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

  00108	8b 55 e8	 mov	 edx, DWORD PTR __Val$GSCopy$[ebp]
  0010b	89 45 d8	 mov	 DWORD PTR __Ncopied$144267[ebp], eax
  0010e	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], eax
  00111	83 c4 08	 add	 esp, 8
  00114	8b c3		 mov	 eax, ebx
  00116	c1 e0 04	 shl	 eax, 4
  00119	52		 push	 edx
  0011a	89 4d e0	 mov	 DWORD PTR __Newvec$144265[ebp], ecx
  0011d	2b c3		 sub	 eax, ebx
  0011f	8d 0c c1	 lea	 ecx, DWORD PTR [ecx+eax*8]
  00122	57		 push	 edi
  00123	51		 push	 ecx
  00124	8b ce		 mov	 ecx, esi
  00126	89 5d e4	 mov	 DWORD PTR __Whereoff$144266[ebp], ebx
  00129	e8 00 00 00 00	 call	 ?_Ufill@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU34@IABU34@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ufill

; 1179 : 			++_Ncopied;
; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

  0012e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00131	c6 45 e8 00	 mov	 BYTE PTR $T193194[ebp], 0
  00135	8b 55 e8	 mov	 edx, DWORD PTR $T193194[ebp]
  00138	52		 push	 edx
  00139	8b 55 e4	 mov	 edx, DWORD PTR __Cat$193197[ebp]
  0013c	52		 push	 edx
  0013d	8b 95 00 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  00143	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00146	51		 push	 ecx
  00147	8b 4d e0	 mov	 ecx, DWORD PTR __Newvec$144265[ebp]
  0014a	51		 push	 ecx
  0014b	52		 push	 edx
  0014c	50		 push	 eax
  0014d	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR __Ncopied$144267[ebp], 1
  00154	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >

; 1182 : 			++_Ncopied;
; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

  00159	8b 55 e0	 mov	 edx, DWORD PTR __Newvec$144265[ebp]
  0015c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0015f	03 df		 add	 ebx, edi
  00161	8b cb		 mov	 ecx, ebx
  00163	c1 e1 04	 shl	 ecx, 4
  00166	83 c4 18	 add	 esp, 24			; 00000018H
  00169	2b cb		 sub	 ecx, ebx
  0016b	8d 0c ca	 lea	 ecx, DWORD PTR [edx+ecx*8]
  0016e	c6 45 e8 00	 mov	 BYTE PTR $T193370[ebp], 0
  00172	8b 55 e8	 mov	 edx, DWORD PTR $T193370[ebp]
  00175	52		 push	 edx
  00176	8b 55 e4	 mov	 edx, DWORD PTR __Cat$193373[ebp]
  00179	52		 push	 edx
  0017a	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
  0017d	52		 push	 edx
  0017e	51		 push	 ecx
  0017f	50		 push	 eax
  00180	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  00186	50		 push	 eax
  00187	c7 45 d8 02 00
	00 00		 mov	 DWORD PTR __Ncopied$144267[ebp], 2
  0018e	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUFavoriteVolume@CipherShed@@PAU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAPAUFavoriteVolume@CipherShed@@PAU12@00AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *,std::allocator<CipherShed::FavoriteVolume> >

; 1192 : 			_CATCH_END
; 1193 : 
; 1194 : 			_Count += size();

  00193	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00196	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00199	2b cb		 sub	 ecx, ebx
  0019b	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  001a0	f7 e9		 imul	 ecx
  001a2	03 d1		 add	 edx, ecx
  001a4	c1 fa 06	 sar	 edx, 6
  001a7	8b ca		 mov	 ecx, edx
  001a9	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  001ac	03 ca		 add	 ecx, edx
  001ae	83 c4 18	 add	 esp, 24			; 00000018H
  001b1	03 f9		 add	 edi, ecx

; 1195 : 			if (_Myfirst != 0)

  001b3	85 db		 test	 ebx, ebx
  001b5	74 18		 je	 SHORT $LN115@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

  001b7	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  001ba	52		 push	 edx
  001bb	53		 push	 ebx
  001bc	8b ce		 mov	 ecx, esi
  001be	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  001c3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001c6	50		 push	 eax
  001c7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001cc	83 c4 04	 add	 esp, 4
$LN115@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

  001cf	8b 45 ec	 mov	 eax, DWORD PTR __Capacity$[ebp]
  001d2	8b c8		 mov	 ecx, eax
  001d4	c1 e1 04	 shl	 ecx, 4
  001d7	2b c8		 sub	 ecx, eax
  001d9	8b 45 e0	 mov	 eax, DWORD PTR __Newvec$144265[ebp]
  001dc	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]

; 1206 : 			_Mylast = _Newvec + _Count;

  001df	8b cf		 mov	 ecx, edi
  001e1	c1 e1 04	 shl	 ecx, 4
  001e4	2b cf		 sub	 ecx, edi
  001e6	89 56 14	 mov	 DWORD PTR [esi+20], edx
  001e9	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
  001ec	89 56 10	 mov	 DWORD PTR [esi+16], edx

; 1207 : 			_Myfirst = _Newvec;

  001ef	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  001f2	e9 ac 01 00 00	 jmp	 $LN1@Insert_n
__catch$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

  001f7	8b 5d d8	 mov	 ebx, DWORD PTR __Ncopied$144267[ebp]
  001fa	83 fb 01	 cmp	 ebx, 1

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

  001fd	8b 75 e4	 mov	 esi, DWORD PTR __Whereoff$144266[ebp]
  00200	8b 7d e0	 mov	 edi, DWORD PTR __Newvec$144265[ebp]
  00203	7e 14		 jle	 SHORT $LN7@Insert_n
  00205	8b c6		 mov	 eax, esi
  00207	c1 e0 04	 shl	 eax, 4
  0020a	2b c6		 sub	 eax, esi
  0020c	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]
  0020f	51		 push	 ecx
  00210	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00213	57		 push	 edi
  00214	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Destroy
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

  00219	85 db		 test	 ebx, ebx
  0021b	7e 27		 jle	 SHORT $LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

  0021d	8b 95 04 01 00
	00		 mov	 edx, DWORD PTR __Count$[ebp]
  00223	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  00226	8b c8		 mov	 ecx, eax
  00228	c1 e1 04	 shl	 ecx, 4
  0022b	2b c8		 sub	 ecx, eax
  0022d	8b c6		 mov	 eax, esi
  0022f	8d 14 cf	 lea	 edx, DWORD PTR [edi+ecx*8]
  00232	c1 e0 04	 shl	 eax, 4
  00235	2b c6		 sub	 eax, esi
  00237	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]
  0023a	52		 push	 edx
  0023b	51		 push	 ecx
  0023c	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0023f	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Destroy
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

  00244	57		 push	 edi
  00245	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0024a	83 c4 04	 add	 esp, 4

; 1191 : 			_RERAISE;

  0024d	6a 00		 push	 0
  0024f	6a 00		 push	 0
  00251	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

  00256	2b 9d 00 01 00
	00		 sub	 ebx, DWORD PTR __Where$[ebp+4]
  0025c	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00261	f7 eb		 imul	 ebx
  00263	03 d3		 add	 edx, ebx
  00265	c1 fa 06	 sar	 edx, 6
  00268	8b c2		 mov	 eax, edx
  0026a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0026d	03 c2		 add	 eax, edx
  0026f	3b c7		 cmp	 eax, edi
  00271	0f 83 c6 00 00
	00		 jae	 $LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

  00277	8b 4d e8	 mov	 ecx, DWORD PTR __Val$GSCopy$[ebp]
  0027a	51		 push	 ecx
  0027b	8d 4d 78	 lea	 ecx, DWORD PTR __Tmp$144280[ebp]
  0027e	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

  00283	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  00289	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0028c	8b df		 mov	 ebx, edi
  0028e	c1 e3 04	 shl	 ebx, 4
  00291	2b df		 sub	 ebx, edi
  00293	03 db		 add	 ebx, ebx
  00295	03 db		 add	 ebx, ebx
  00297	03 db		 add	 ebx, ebx
  00299	8d 14 03	 lea	 edx, DWORD PTR [ebx+eax]
  0029c	52		 push	 edx
  0029d	51		 push	 ecx
  0029e	50		 push	 eax
  0029f	8b ce		 mov	 ecx, esi
  002a1	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  002a8	e8 00 00 00 00	 call	 ??$_Umove@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Umove<CipherShed::FavoriteVolume *>

; 1215 : 
; 1216 : 			_TRY_BEGIN
; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

  002ad	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  002b0	2b 8d 00 01 00
	00		 sub	 ecx, DWORD PTR __Where$[ebp+4]
  002b6	8d 55 78	 lea	 edx, DWORD PTR __Tmp$144280[ebp]
  002b9	52		 push	 edx
  002ba	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  002bf	f7 e9		 imul	 ecx
  002c1	03 d1		 add	 edx, ecx
  002c3	c1 fa 06	 sar	 edx, 6
  002c6	8b c2		 mov	 eax, edx
  002c8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002cb	03 c2		 add	 eax, edx
  002cd	2b f8		 sub	 edi, eax
  002cf	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  002d2	57		 push	 edi
  002d3	50		 push	 eax
  002d4	8b ce		 mov	 ecx, esi
  002d6	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  002da	e8 00 00 00 00	 call	 ?_Ufill@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU34@IABU34@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Ufill

; 1222 : 			_CATCH_END
; 1223 : 
; 1224 : 			_Mylast += _Count;

  002df	01 5e 10	 add	 DWORD PTR [esi+16], ebx
  002e2	8b 76 10	 mov	 esi, DWORD PTR [esi+16]

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

  002e5	8b 95 00 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  002eb	8d 4d 78	 lea	 ecx, DWORD PTR __Tmp$144280[ebp]
  002ee	51		 push	 ecx
  002ef	2b f3		 sub	 esi, ebx
  002f1	56		 push	 esi
  002f2	52		 push	 edx
  002f3	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  002fa	e8 00 00 00 00	 call	 ??$fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z ; std::fill<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume>
  002ff	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1232 : 			}

  00302	8d 4d 78	 lea	 ecx, DWORD PTR __Tmp$144280[ebp]

; 1233 : 		else

  00305	e9 94 00 00 00	 jmp	 $LN122@Insert_n
__catch$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

  0030a	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR __Count$[ebp]
  00310	8b c1		 mov	 eax, ecx
  00312	c1 e0 04	 shl	 eax, 4
  00315	2b c1		 sub	 eax, ecx
  00317	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0031a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0031d	03 c0		 add	 eax, eax
  0031f	03 c0		 add	 eax, eax
  00321	03 c0		 add	 eax, eax
  00323	03 d0		 add	 edx, eax
  00325	52		 push	 edx
  00326	8b 95 00 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  0032c	03 c2		 add	 eax, edx
  0032e	50		 push	 eax
  0032f	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXPAUFavoriteVolume@CipherShed@@0@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Destroy

; 1221 : 			_RERAISE;

  00334	6a 00		 push	 0
  00336	6a 00		 push	 0
  00338	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

  0033d	8b 45 e8	 mov	 eax, DWORD PTR __Val$GSCopy$[ebp]
  00340	50		 push	 eax
  00341	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$144290[ebp]
  00344	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

  00349	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

  0034c	8b df		 mov	 ebx, edi
  0034e	c1 e3 04	 shl	 ebx, 4
  00351	2b df		 sub	 ebx, edi
  00353	03 db		 add	 ebx, ebx
  00355	03 db		 add	 ebx, ebx
  00357	50		 push	 eax
  00358	8b f8		 mov	 edi, eax
  0035a	03 db		 add	 ebx, ebx
  0035c	50		 push	 eax
  0035d	2b fb		 sub	 edi, ebx
  0035f	57		 push	 edi
  00360	8b ce		 mov	 ecx, esi
  00362	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
  00369	89 45 e4	 mov	 DWORD PTR tv557[ebp], eax
  0036c	e8 00 00 00 00	 call	 ??$_Umove@PAUFavoriteVolume@CipherShed@@@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAUFavoriteVolume@CipherShed@@PAU23@00@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Umove<CipherShed::FavoriteVolume *>

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

  00371	8b 4d e4	 mov	 ecx, DWORD PTR tv557[ebp]
  00374	8b 95 00 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  0037a	51		 push	 ecx
  0037b	57		 push	 edi
  0037c	52		 push	 edx
  0037d	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00380	e8 00 00 00 00	 call	 ??$_Unchecked_move_backward@PAUFavoriteVolume@CipherShed@@PAU12@@stdext@@YAPAUFavoriteVolume@CipherShed@@PAU12@00@Z ; stdext::_Unchecked_move_backward<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume *>

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

  00385	8d 45 00	 lea	 eax, DWORD PTR __Tmp$144290[ebp]
  00388	50		 push	 eax
  00389	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  0038f	03 d8		 add	 ebx, eax
  00391	53		 push	 ebx
  00392	50		 push	 eax
  00393	e8 00 00 00 00	 call	 ??$fill@PAUFavoriteVolume@CipherShed@@U12@@std@@YAXPAUFavoriteVolume@CipherShed@@0ABU12@@Z ; std::fill<CipherShed::FavoriteVolume *,CipherShed::FavoriteVolume>
  00398	83 c4 18	 add	 esp, 24			; 00000018H

; 1249 : 			}

  0039b	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$144290[ebp]
$LN122@Insert_n:
  0039e	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
$LN1@Insert_n:

; 1250 : 		}

  003a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  003a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003ad	59		 pop	 ecx
  003ae	5f		 pop	 edi
  003af	5e		 pop	 esi
  003b0	5b		 pop	 ebx
  003b1	8b 8d f0 00 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003b7	33 cd		 xor	 ecx, ebp
  003b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003be	81 c5 f4 00 00
	00		 add	 ebp, 244		; 000000f4H
  003c4	8b e5		 mov	 esp, ebp
  003c6	5d		 pop	 ebp
  003c7	c2 10 00	 ret	 16			; 00000010H
$LN121@Insert_n:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$4:
  00000	8d 4d 78	 lea	 ecx, DWORD PTR __Tmp$144280[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
__unwindfunclet$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z$5:
  00008	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$144290[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
__ehhandler$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 8a fc 00 00
	00		 mov	 ecx, DWORD PTR [edx+252]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert_n
PUBLIC	??_7?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`vftable'
PUBLIC	??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
PUBLIC	??_R4?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?IsNotEnd@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::Next
EXTRN	??_E?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD 00H ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherS'
	DB	'hed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Fo'
	DB	'rEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ DD 00H ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ DD FLAT:??_R4?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\platform\foreach.h
xdata$x	ENDS
;	COMDAT ??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	55		 push	 ebp
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 14	 mov	 DWORD PTR _this$[esp+36], esi
  0002b	33 db		 xor	 ebx, ebx
  0002d	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00031	88 5e 05	 mov	 BYTE PTR [esi+5], bl
  00034	8b 44 24 28	 mov	 eax, DWORD PTR _container$[esp+32]
  00038	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0003b	50		 push	 eax
  0003c	8b cf		 mov	 ecx, edi
  0003e	89 5c 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], ebx
  00042	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
  00048	e8 00 00 00 00	 call	 ??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
  0004d	8b 6f 10	 mov	 ebp, DWORD PTR [edi+16]
  00050	89 5e 20	 mov	 DWORD PTR [esi+32], ebx
  00053	39 6f 0c	 cmp	 DWORD PTR [edi+12], ebp
  00056	77 05		 ja	 SHORT $LN12@ContainerF@2
  00058	3b 6f 10	 cmp	 ebp, DWORD PTR [edi+16]
  0005b	76 05		 jbe	 SHORT $LN11@ContainerF@2
$LN12@ContainerF@2:
  0005d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN11@ContainerF@2:
  00062	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00064	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00067	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0006a	8b 6f 0c	 mov	 ebp, DWORD PTR [edi+12]
  0006d	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00070	39 6f 0c	 cmp	 DWORD PTR [edi+12], ebp
  00073	77 05		 ja	 SHORT $LN29@ContainerF@2
  00075	3b 6f 10	 cmp	 ebp, DWORD PTR [edi+16]
  00078	76 05		 jbe	 SHORT $LN28@ContainerF@2
$LN29@ContainerF@2:
  0007a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@ContainerF@2:
  0007f	8b 17		 mov	 edx, DWORD PTR [edi]
  00081	89 56 28	 mov	 DWORD PTR [esi+40], edx
  00084	89 6e 2c	 mov	 DWORD PTR [esi+44], ebp
  00087	8b c6		 mov	 eax, esi
  00089	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	5b		 pop	 ebx
  00099	83 c4 10	 add	 esp, 16			; 00000010H
  0009c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
PUBLIC	??E?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator++, COMDAT
; _this$ = ecx

; 115  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 116  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN19@operator@56
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 117  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN15@operator@56
$LN19@operator@56:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN16@operator@56
$LN15@operator@56:
  00018	33 c0		 xor	 eax, eax
$LN16@operator@56:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 05		 jb	 SHORT $LN20@operator@56
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN20@operator@56:

; 118  : 
; 119  :  #if _HAS_ITERATOR_DEBUGGING
; 120  : 		if (this->_Mycont == 0
; 121  : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 122  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 123  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 124  : 
; 125  : 		++_Myptr;

  00027	83 46 04 78	 add	 DWORD PTR [esi+4], 120	; 00000078H

; 126  : 		return (*this);

  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 127  : 		}

  0002e	c3		 ret	 0
??E?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator++
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\platform\foreach.h
_TEXT	ENDS
;	COMDAT ?Next@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00006	85 c0		 test	 eax, eax
  00008	75 0c		 jne	 SHORT $LN21@Next@2
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN17@Next@2
$LN21@Next@2:
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	eb 02		 jmp	 SHORT $LN18@Next@2
$LN17@Next@2:
  0001a	33 c0		 xor	 eax, eax
$LN18@Next@2:
  0001c	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0001f	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00022	72 05		 jb	 SHORT $LN22@Next@2
  00024	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN22@Next@2:
  00029	83 46 2c 78	 add	 DWORD PTR [esi+44], 120	; 00000078H
  0002d	5e		 pop	 esi
  0002e	c3		 ret	 0
?Next@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::Next
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00007	74 21		 je	 SHORT $LN3@IsNotEnd@2
  00009	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0000c	85 c0		 test	 eax, eax
  0000e	74 05		 je	 SHORT $LN10@IsNotEnd@2
  00010	3b 46 20	 cmp	 eax, DWORD PTR [esi+32]
  00013	74 05		 je	 SHORT $LN9@IsNotEnd@2
$LN10@IsNotEnd@2:
  00015	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@IsNotEnd@2:
  0001a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001d	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00020	74 08		 je	 SHORT $LN3@IsNotEnd@2
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
$LN3@IsNotEnd@2:
  0002a	32 c0		 xor	 al, al
  0002c	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::IsNotEnd
_TEXT	ENDS
PUBLIC	??_7?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::`vftable'
PUBLIC	??0?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@QAE@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??_R4?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?IsNotEnd@?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UBE_NXZ ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UBEXXZ ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::Next
EXTRN	??_E?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@8 DD 00H ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AU?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$list@V?$basic_string@DU?$char_'
	DB	'traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_st'
	DB	'ring@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@'
	DB	'ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@6B@ DD 00H ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@6B@ DD FLAT:??_R4?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UBEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@QAE@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@QAE@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@QAE@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@QAE@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\platform\foreach.h
xdata$x	ENDS
;	COMDAT ??0?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@QAE@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@QAE@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z PROC ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@QAE@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002a	33 db		 xor	 ebx, ebx
  0002c	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00030	88 5e 05	 mov	 BYTE PTR [esi+5], bl
  00033	8b 44 24 24	 mov	 eax, DWORD PTR _container$[esp+28]
  00037	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0003a	50		 push	 eax
  0003b	8b cf		 mov	 ecx, edi
  0003d	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@6B@
  00047	e8 00 00 00 00	 call	 ??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0004c	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0004f	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
  00052	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00055	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00057	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
  0005a	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00062	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00065	8b 07		 mov	 eax, DWORD PTR [edi]
  00067	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0006a	8b c6		 mov	 eax, esi
  0006c	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00070	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00077	59		 pop	 ecx
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@QAE@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@QAE@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@QAE@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@QAE@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ENDP ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogtpy
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UBE_NXZ PROC ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00007	74 21		 je	 SHORT $LN3@IsNotEnd@3
  00009	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0000c	85 c0		 test	 eax, eax
  0000e	74 05		 je	 SHORT $LN10@IsNotEnd@3
  00010	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00013	74 05		 je	 SHORT $LN9@IsNotEnd@3
$LN10@IsNotEnd@3:
  00015	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@IsNotEnd@3:
  0001a	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0001d	3b 46 28	 cmp	 eax, DWORD PTR [esi+40]
  00020	74 08		 je	 SHORT $LN3@IsNotEnd@3
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
$LN3@IsNotEnd@3:
  0002a	32 c0		 xor	 al, al
  0002c	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UBE_NXZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::IsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Next@?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UBEXXZ PROC ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00006	85 c0		 test	 eax, eax
  00008	75 0c		 jne	 SHORT $LN25@Next@3
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN19@Next@3
$LN25@Next@3:
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	eb 02		 jmp	 SHORT $LN20@Next@3
$LN19@Next@3:
  0001a	33 c0		 xor	 eax, eax
$LN20@Next@3:
  0001c	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0001f	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00022	75 05		 jne	 SHORT $LN5@Next@3
  00024	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Next@3:
  00029	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00031	5e		 pop	 esi
  00032	c3		 ret	 0
?Next@?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UBEXXZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::Next
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UAEPAXI@Z PROC ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?clear@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
  0000e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00019	51		 push	 ecx
  0001a	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
  00029	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  0002e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00034	74 09		 je	 SHORT $LN30@scalar@28
  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003c	83 c4 04	 add	 esp, 4
$LN30@scalar@28:
  0003f	8b c7		 mov	 eax, edi
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UAEPAXI@Z ENDP ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z PROC ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
  00004	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy
  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
  00019	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00024	74 09		 je	 SHORT $LN18@scalar@29
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	83 c4 04	 add	 esp, 4
$LN18@scalar@29:
  0002f	5f		 pop	 edi
  00030	8b c6		 mov	 eax, esi
  00032	5e		 pop	 esi
  00033	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z ENDP ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$7
__unwindtable$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T194040 = -28						; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T194470 = 8						; size = 1
__Right$ = 8						; size = 4
??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z PROC ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >, COMDAT
; _this$ = ecx

; 467  : 		{	// construct list by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00030	6a 04		 push	 4
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	85 c0		 test	 eax, eax
  0003c	74 04		 je	 SHORT $LN28@list@3
  0003e	89 30		 mov	 DWORD PTR [eax], esi
  00040	eb 02		 jmp	 SHORT $LN29@list@3
$LN28@list@3:
  00042	33 c0		 xor	 eax, eax
$LN29@list@3:
  00044	89 06		 mov	 DWORD PTR [esi], eax
  00046	8b ce		 mov	 ecx, esi
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0004f	e8 00 00 00 00	 call	 ?_Buynode@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Buynode

; 468  : 		_TRY_BEGIN
; 469  : 		insert(begin(), _Right.begin(), _Right.end());

  00054	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00057	8b 3e		 mov	 edi, DWORD PTR [esi]
  00059	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0005c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00063	8b 10		 mov	 edx, DWORD PTR [eax]
  00065	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00068	8b 18		 mov	 ebx, DWORD PTR [eax]
  0006a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0006c	89 5d e8	 mov	 DWORD PTR $T194040[ebp+4], ebx
  0006f	8b 5d 08	 mov	 ebx, DWORD PTR $T194470[ebp]
  00072	53		 push	 ebx
  00073	50		 push	 eax
  00074	8b 45 e8	 mov	 eax, DWORD PTR $T194040[ebp+4]
  00077	51		 push	 ecx
  00078	50		 push	 eax
  00079	51		 push	 ecx
  0007a	52		 push	 edx
  0007b	57		 push	 edi
  0007c	8b ce		 mov	 ecx, esi
  0007e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00082	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1> >

; 473  : 		_CATCH_END
; 474  : 		}

  00087	8b c6		 mov	 eax, esi
  00089	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00093	59		 pop	 ecx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
__catch$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$0:

; 470  : 		_CATCH_ALL
; 471  : 		_Tidy();

  0009d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	e8 00 00 00 00	 call	 ?_Tidy@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Tidy

; 472  : 		_RERAISE;

  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN121@list@3:
  000ae	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_val@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ
__ehhandler$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
PUBLIC	??$unchecked_uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z ; stdext::unchecked_uninitialized_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z
_TEXT	SEGMENT
$T194487 = -4						; size = 1
__First$ = 8						; size = 4
__Cat$194491 = 12					; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Cat$194491[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T194487[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T194487[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 823  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T194542 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Vptr$194548 = 12					; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

  0002b	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]

; 401  : 
; 402  : 	_TRY_BEGIN

  0002e	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_fil@2:

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

  00040	3b fb		 cmp	 edi, ebx
  00042	76 4c		 jbe	 SHORT $LN4@Uninit_fil@2

; 404  : 		_Al.construct(_First, _Val);

  00044	89 75 0c	 mov	 DWORD PTR __Vptr$194548[ebp], esi
  00047	89 75 e8	 mov	 DWORD PTR $T194542[ebp], esi
  0004a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004e	3b f3		 cmp	 esi, ebx
  00050	74 0b		 je	 SHORT $LN18@Uninit_fil@2
  00052	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00055	50		 push	 eax
  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN18@Uninit_fil@2:
  0005d	4f		 dec	 edi
  0005e	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00064	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00067	89 75 08	 mov	 DWORD PTR __First$[ebp], esi
  0006a	eb d4		 jmp	 SHORT $LL6@Uninit_fil@2
__catch$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

  0006c	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  0006f	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00072	3b f7		 cmp	 esi, edi
  00074	74 11		 je	 SHORT $LN1@Uninit_fil@2
$LL3@Uninit_fil@2:

; 407  : 		_Al.destroy(_Next);

  00076	8b ce		 mov	 ecx, esi
  00078	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  0007d	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00083	3b f7		 cmp	 esi, edi
  00085	75 ef		 jne	 SHORT $LL3@Uninit_fil@2
$LN1@Uninit_fil@2:

; 408  : 	_RERAISE;

  00087	33 db		 xor	 ebx, ebx
  00089	53		 push	 ebx
  0008a	53		 push	 ebx
  0008b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_fil@2:

; 409  : 	_CATCH_END
; 410  : 	}

  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
$LN35@Uninit_fil@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 0c	 mov	 eax, DWORD PTR __Vptr$194548[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T194542[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
PUBLIC	??$_Uninit_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<HostDevice *,HostDevice *,std::allocator<HostDevice>,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninit_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T194609 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$194613 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<HostDevice *,HostDevice *,std::allocator<HostDevice>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

  00000	51		 push	 ecx

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$194613[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T194609[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T194609[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 208  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Uninit_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<HostDevice *,HostDevice *,std::allocator<HostDevice>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??_C@_08EECOACDK@CONTINUE?$AA@			; `string'
PUBLIC	??_C@_0BH@LAJANGPP@DO_NOT_SHOW_THIS_AGAIN?$AA@	; `string'
PUBLIC	??_C@_0BG@LCMGFIPF@SHOW_MORE_INFORMATION?$AA@	; `string'
PUBLIC	??_C@_0CH@BNCMPPOG@DECOY_TO_HIDDEN_OS_DATA_TRANSFER@ ; `string'
PUBLIC	??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@	; `string'
PUBLIC	??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@ ; `string'
PUBLIC	??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@ ; `string'
PUBLIC	??_C@_0BO@KKNHDDJP@SYS_ENC_HIBERNATION_PREVENTED?$AA@ ; `string'
PUBLIC	??_C@_0CA@JEBBJKJG@HIDDEN_OS_HIBERNATION_PREVENTED?$AA@ ; `string'
EXTRN	_WarningTopMost:PROC
EXTRN	?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ:PROC ; CipherShed::BootEncryption::GetSystemDriveConfiguration
EXTRN	_IsDriveAvailable:PROC
EXTRN	_GetMountList:PROC
;	COMDAT ?newBootEncStatus@?1??CheckMountList@@9@4UBootEncryptionStatus@@A
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
_BSS	SEGMENT
?newBootEncStatus@?1??CheckMountList@@9@4UBootEncryptionStatus@@A DB 05eH DUP (?) ; `CheckMountList'::`2'::newBootEncStatus
_BSS	ENDS
;	COMDAT ?lastUlMountedDrives@?1??CheckMountList@@9@4IA
_BSS	SEGMENT
?lastUlMountedDrives@?1??CheckMountList@@9@4IA DD 01H DUP (?) ; `CheckMountList'::`2'::lastUlMountedDrives
_BSS	ENDS
;	COMDAT ?lastbUseDifferentTrayIconIfVolMounted@?1??CheckMountList@@9@4HA
_BSS	SEGMENT
?lastbUseDifferentTrayIconIfVolMounted@?1??CheckMountList@@9@4HA DD 01H DUP (?) ; `CheckMountList'::`2'::lastbUseDifferentTrayIconIfVolMounted
_BSS	ENDS
;	COMDAT ?$S3@?1??CheckMountList@@9@4IA
_BSS	SEGMENT
?$S3@?1??CheckMountList@@9@4IA DD 01H DUP (?)		; `CheckMountList'::`2'::$S3
_BSS	ENDS
;	COMDAT ??_C@_08EECOACDK@CONTINUE?$AA@
CONST	SEGMENT
??_C@_08EECOACDK@CONTINUE?$AA@ DB 'CONTINUE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LAJANGPP@DO_NOT_SHOW_THIS_AGAIN?$AA@
CONST	SEGMENT
??_C@_0BH@LAJANGPP@DO_NOT_SHOW_THIS_AGAIN?$AA@ DB 'DO_NOT_SHOW_THIS_AGAIN'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LCMGFIPF@SHOW_MORE_INFORMATION?$AA@
CONST	SEGMENT
??_C@_0BG@LCMGFIPF@SHOW_MORE_INFORMATION?$AA@ DB 'SHOW_MORE_INFORMATION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BNCMPPOG@DECOY_TO_HIDDEN_OS_DATA_TRANSFER@
CONST	SEGMENT
??_C@_0CH@BNCMPPOG@DECOY_TO_HIDDEN_OS_DATA_TRANSFER@ DB 'DECOY_TO_HIDDEN_'
	DB	'OS_DATA_TRANSFER_HOWTO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@ DB 0aH, 00H, 0aH, 00H, 0aH, 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@
CONST	SEGMENT
??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@ DB 'HIDDEN_OS_WRITE_'
	DB	'PROTECTION_EXPLANATION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@
CONST	SEGMENT
??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@ DB 'HIDDEN_OS_WRITE_'
	DB	'PROTECTION_BRIEF_INFO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KKNHDDJP@SYS_ENC_HIBERNATION_PREVENTED?$AA@
CONST	SEGMENT
??_C@_0BO@KKNHDDJP@SYS_ENC_HIBERNATION_PREVENTED?$AA@ DB 'SYS_ENC_HIBERNA'
	DB	'TION_PREVENTED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JEBBJKJG@HIDDEN_OS_HIBERNATION_PREVENTED?$AA@
CONST	SEGMENT
??_C@_0CA@JEBBJKJG@HIDDEN_OS_HIBERNATION_PREVENTED?$AA@ DB 'HIDDEN_OS_HIB'
	DB	'ERNATION_PREVENTED', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_CheckMountList$13 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_CheckMountList$0
__tryblocktable$_CheckMountList DD 00H
	DD	08H
	DD	09H
	DD	01H
	DD	FLAT:__catchsym$_CheckMountList$13
__ehfuncinfo$_CheckMountList DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$_CheckMountList
	DD	01H
	DD	FLAT:__tryblocktable$_CheckMountList
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$_CheckMountList DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$_CheckMountList$3
	DD	01H
	DD	FLAT:__unwindfunclet$_CheckMountList$4
	DD	02H
	DD	FLAT:__unwindfunclet$_CheckMountList$5
	DD	03H
	DD	FLAT:__unwindfunclet$_CheckMountList$6
	DD	00H
	DD	FLAT:__unwindfunclet$_CheckMountList$8
	DD	05H
	DD	FLAT:__unwindfunclet$_CheckMountList$9
	DD	06H
	DD	FLAT:__unwindfunclet$_CheckMountList$10
	DD	07H
	DD	FLAT:__unwindfunclet$_CheckMountList$11
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
xdata$x	ENDS
;	COMDAT _CheckMountList
_TEXT	SEGMENT
_current$ = -14632					; size = 13940
$T194634 = -692						; size = 384
$T194632 = -306						; size = 94
$T194639 = -212						; size = 28
$T194638 = -184						; size = 28
$T194641 = -156						; size = 28
$T194637 = -128						; size = 28
$T194640 = -100						; size = 28
$T194646 = -72						; size = 28
$T194645 = -44						; size = 28
__$EHRec$ = -16						; size = 16
$T194643 = 0						; size = 28
$T194644 = 28						; size = 28
$T194642 = 56						; size = 28
_tmp$137995 = 84					; size = 24
$T194653 = 108						; size = 4
_selDrive$137970 = 112					; size = 1
_selDrive$137960 = 112					; size = 1
_CheckMountList PROC					; COMDAT

; 4465 : {

  00000	55		 push	 ebp
  00001	8d 6c 24 8c	 lea	 ebp, DWORD PTR [esp-116]
  00005	83 ec 74	 sub	 esp, 116		; 00000074H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$_CheckMountList
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	b8 18 39 00 00	 mov	 eax, 14616		; 00003918H
  0001c	e8 00 00 00 00	 call	 __chkstk
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 4493 : 
; 4494 : 		if (selDrive != -1 && (current.ulMountedDrives & (1 << (selDrive - 'A'))) == 0 && !IsDriveAvailable (selDrive - 'A'))

  00038	33 ff		 xor	 edi, edi
  0003a	f6 05 00 00 00
	00 01		 test	 BYTE PTR ?$S3@?1??CheckMountList@@9@4IA, 1
  00041	89 7d 6c	 mov	 DWORD PTR $T194653[ebp], edi
  00044	75 11		 jne	 SHORT $LN33@CheckMount
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bUseDifferentTrayIconIfVolMounted@@3HA ; bUseDifferentTrayIconIfVolMounted
  0004b	83 0d 00 00 00
	00 01		 or	 DWORD PTR ?$S3@?1??CheckMountList@@9@4IA, 1
  00052	a3 00 00 00 00	 mov	 DWORD PTR ?lastbUseDifferentTrayIconIfVolMounted@?1??CheckMountList@@9@4HA, eax
$LN33@CheckMount:
  00057	8d 8d d8 c6 ff
	ff		 lea	 ecx, DWORD PTR _current$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 _GetMountList
  00063	8b 8d d8 c6 ff
	ff		 mov	 ecx, DWORD PTR _current$[ebp]
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bUseDifferentTrayIconIfVolMounted@@3HA ; bUseDifferentTrayIconIfVolMounted
  0006e	83 c4 04	 add	 esp, 4
  00071	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?lastUlMountedDrives@?1??CheckMountList@@9@4IA
  00077	75 08		 jne	 SHORT $LN31@CheckMount

; 4466 : 	MOUNT_LIST_STRUCT current;
; 4467 : 	static BootEncryptionStatus newBootEncStatus;
; 4468 : 	static BOOL lastbUseDifferentTrayIconIfVolMounted = bUseDifferentTrayIconIfVolMounted;
; 4469 : 	static uint32 lastUlMountedDrives = 0;
; 4470 : 
; 4471 : 	GetMountList (&current);
; 4472 : 
; 4473 : 	if ((current.ulMountedDrives != lastUlMountedDrives || bUseDifferentTrayIconIfVolMounted != lastbUseDifferentTrayIconIfVolMounted)
; 4474 : 		&& TaskBarIconMutex != NULL)

  00079	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?lastbUseDifferentTrayIconIfVolMounted@?1??CheckMountList@@9@4HA
  0007f	74 35		 je	 SHORT $LN32@CheckMount
$LN31@CheckMount:
  00081	39 3d 00 00 00
	00		 cmp	 DWORD PTR _TaskBarIconMutex, edi
  00087	74 2d		 je	 SHORT $LN32@CheckMount

; 4475 : 	{
; 4476 : 		lastUlMountedDrives = current.ulMountedDrives;

  00089	89 0d 00 00 00
	00		 mov	 DWORD PTR ?lastUlMountedDrives@?1??CheckMountList@@9@4IA, ecx

; 4477 : 		lastbUseDifferentTrayIconIfVolMounted = bUseDifferentTrayIconIfVolMounted;

  0008f	a3 00 00 00 00	 mov	 DWORD PTR ?lastbUseDifferentTrayIconIfVolMounted@?1??CheckMountList@@9@4HA, eax

; 4478 : 
; 4479 : 		TaskBarIconChange (MainDlg, current.ulMountedDrives != 0 && bUseDifferentTrayIconIfVolMounted ? IDI_CIPHERSHED_MOUNTED_ICON : IDI_CIPHERSHED_ICON);

  00094	3b cf		 cmp	 ecx, edi
  00096	74 09		 je	 SHORT $LN36@CheckMount
  00098	3b c7		 cmp	 eax, edi
  0009a	b8 1d 02 00 00	 mov	 eax, 541		; 0000021dH
  0009f	75 05		 jne	 SHORT $LN37@CheckMount
$LN36@CheckMount:
  000a1	b8 f5 01 00 00	 mov	 eax, 501		; 000001f5H
$LN37@CheckMount:
  000a6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  000ac	50		 push	 eax
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 _TaskBarIconChange
  000b3	83 c4 08	 add	 esp, 8
$LN32@CheckMount:

; 4480 : 	}
; 4481 : 
; 4482 : 	if (LastKnownLogicalDrives != GetLogicalDrives()
; 4483 : 		|| memcmp (&LastKnownMountList, &current, sizeof (current)) != 0)

  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLogicalDrives@0
  000bc	39 05 00 00 00
	00		 cmp	 DWORD PTR _LastKnownLogicalDrives, eax
  000c2	75 2b		 jne	 SHORT $LN43@CheckMount
  000c4	b8 74 36 00 00	 mov	 eax, 13940		; 00003674H
  000c9	33 c9		 xor	 ecx, ecx
  000cb	eb 03 8d 49 00	 npad	 5
$LL41@CheckMount:
  000d0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _LastKnownMountList[ecx]
  000d6	3b 94 0d d8 c6
	ff ff		 cmp	 edx, DWORD PTR _current$[ebp+ecx]
  000dd	75 10		 jne	 SHORT $LN43@CheckMount
  000df	83 e8 04	 sub	 eax, 4
  000e2	83 c1 04	 add	 ecx, 4
  000e5	83 f8 04	 cmp	 eax, 4
  000e8	73 e6		 jae	 SHORT $LL41@CheckMount
  000ea	e9 b1 00 00 00	 jmp	 $LN27@CheckMount
$LN43@CheckMount:

; 4484 : 	{
; 4485 : 		char selDrive;
; 4486 : 
; 4487 : 		WaitCursor ();

  000ef	e8 00 00 00 00	 call	 _WaitCursor

; 4488 : 		LastKnownMountList = current;

  000f4	68 74 36 00 00	 push	 13940			; 00003674H
  000f9	8d 85 d8 c6 ff
	ff		 lea	 eax, DWORD PTR _current$[ebp]
  000ff	50		 push	 eax
  00100	68 00 00 00 00	 push	 OFFSET _LastKnownMountList
  00105	e8 00 00 00 00	 call	 _memcpy

; 4489 : 
; 4490 : 		selDrive = (char) HIWORD (GetSelectedLong (GetDlgItem (MainDlg, IDC_DRIVELIST)));

  0010a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00110	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00116	83 c4 0c	 add	 esp, 12			; 0000000cH
  00119	68 ef 03 00 00	 push	 1007			; 000003efH
  0011e	51		 push	 ecx
  0011f	ff d6		 call	 esi
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 _GetSelectedLong

; 4491 : 		LoadDriveLetters (GetDlgItem (MainDlg, IDC_DRIVELIST), 0);

  00127	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0012d	83 c4 04	 add	 esp, 4
  00130	57		 push	 edi
  00131	8b d8		 mov	 ebx, eax
  00133	68 ef 03 00 00	 push	 1007			; 000003efH
  00138	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0013b	52		 push	 edx
  0013c	88 5d 70	 mov	 BYTE PTR _selDrive$137960[ebp], bl
  0013f	ff d6		 call	 esi
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 _LoadDriveLetters
  00147	83 c4 08	 add	 esp, 8

; 4492 : 		NormalCursor ();

  0014a	e8 00 00 00 00	 call	 _NormalCursor

; 4493 : 
; 4494 : 		if (selDrive != -1 && (current.ulMountedDrives & (1 << (selDrive - 'A'))) == 0 && !IsDriveAvailable (selDrive - 'A'))

  0014f	80 fb ff	 cmp	 bl, -1
  00152	74 4c		 je	 SHORT $LN27@CheckMount
  00154	0f be c3	 movsx	 eax, bl
  00157	8d 48 bf	 lea	 ecx, DWORD PTR [eax-65]
  0015a	b8 01 00 00 00	 mov	 eax, 1
  0015f	d3 e0		 shl	 eax, cl
  00161	85 85 d8 c6 ff
	ff		 test	 DWORD PTR _current$[ebp], eax
  00167	75 1c		 jne	 SHORT $LN28@CheckMount
  00169	51		 push	 ecx
  0016a	e8 00 00 00 00	 call	 _IsDriveAvailable
  0016f	83 c4 04	 add	 esp, 4
  00172	85 c0		 test	 eax, eax
  00174	75 0f		 jne	 SHORT $LN28@CheckMount

; 4495 : 		{
; 4496 : 			nSelectedDriveIndex = -1;

  00176	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nSelectedDriveIndex@@3HA, -1 ; nSelectedDriveIndex

; 4497 : 			return FALSE;

  00180	e9 bc 03 00 00	 jmp	 $LN34@CheckMount
$LN28@CheckMount:

; 4498 : 		}
; 4499 : 
; 4500 : 		if (selDrive != -1)
; 4501 : 			SelectItem (GetDlgItem (MainDlg, IDC_DRIVELIST),selDrive);

  00185	8b 4d 70	 mov	 ecx, DWORD PTR _selDrive$137960[ebp]
  00188	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0018e	51		 push	 ecx
  0018f	68 ef 03 00 00	 push	 1007			; 000003efH
  00194	52		 push	 edx
  00195	ff d6		 call	 esi
  00197	50		 push	 eax
  00198	e8 00 00 00 00	 call	 _SelectItem
  0019d	83 c4 08	 add	 esp, 8
$LN27@CheckMount:

; 4502 : 	}
; 4503 : 
; 4504 : 	try
; 4505 : 	{
; 4506 : 		newBootEncStatus = BootEncObj->GetStatus();

  001a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  001a6	8d 85 ce fe ff
	ff		 lea	 eax, DWORD PTR $T194632[ebp]
  001ac	50		 push	 eax
  001ad	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  001b0	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  001b5	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  001ba	8b f0		 mov	 esi, eax
  001bc	bf 00 00 00 00	 mov	 edi, OFFSET ?newBootEncStatus@?1??CheckMountList@@9@4UBootEncryptionStatus@@A
  001c1	f3 a5		 rep movsd
  001c3	66 a5		 movsw

; 4507 : 
; 4508 : 		if (newBootEncStatus.SetupInProgress != RecentBootEncStatus.SetupInProgress
; 4509 : 			|| newBootEncStatus.EncryptedAreaEnd != RecentBootEncStatus.EncryptedAreaEnd
; 4510 : 			|| newBootEncStatus.DriveEncrypted != RecentBootEncStatus.DriveEncrypted
; 4511 : 			|| newBootEncStatus.DriveMounted != RecentBootEncStatus.DriveMounted
; 4512 : 			|| newBootEncStatus.SetupMode != RecentBootEncStatus.SetupMode
; 4513 : 			|| newBootEncStatus.EncryptedAreaStart != RecentBootEncStatus.EncryptedAreaStart)

  001c5	8b 0d 3e 00 00
	00		 mov	 ecx, DWORD PTR ?newBootEncStatus@?1??CheckMountList@@9@4UBootEncryptionStatus@@A+62
  001cb	3b 0d 3e 00 00
	00		 cmp	 ecx, DWORD PTR ?RecentBootEncStatus@@3UBootEncryptionStatus@@A+62
  001d1	75 64		 jne	 SHORT $LN218@CheckMount
  001d3	8b 15 32 00 00
	00		 mov	 edx, DWORD PTR ?newBootEncStatus@?1??CheckMountList@@9@4UBootEncryptionStatus@@A+50
  001d9	3b 15 32 00 00
	00		 cmp	 edx, DWORD PTR ?RecentBootEncStatus@@3UBootEncryptionStatus@@A+50
  001df	75 56		 jne	 SHORT $LN218@CheckMount
  001e1	a1 36 00 00 00	 mov	 eax, DWORD PTR ?newBootEncStatus@?1??CheckMountList@@9@4UBootEncryptionStatus@@A+54
  001e6	3b 05 36 00 00
	00		 cmp	 eax, DWORD PTR ?RecentBootEncStatus@@3UBootEncryptionStatus@@A+54
  001ec	75 49		 jne	 SHORT $LN218@CheckMount
  001ee	8b 0d 0e 00 00
	00		 mov	 ecx, DWORD PTR ?newBootEncStatus@?1??CheckMountList@@9@4UBootEncryptionStatus@@A+14
  001f4	3b 0d 0e 00 00
	00		 cmp	 ecx, DWORD PTR ?RecentBootEncStatus@@3UBootEncryptionStatus@@A+14
  001fa	75 3b		 jne	 SHORT $LN218@CheckMount
  001fc	8b 15 06 00 00
	00		 mov	 edx, DWORD PTR ?newBootEncStatus@?1??CheckMountList@@9@4UBootEncryptionStatus@@A+6
  00202	3b 15 06 00 00
	00		 cmp	 edx, DWORD PTR ?RecentBootEncStatus@@3UBootEncryptionStatus@@A+6
  00208	75 59		 jne	 SHORT $LN23@CheckMount
  0020a	a1 42 00 00 00	 mov	 eax, DWORD PTR ?newBootEncStatus@?1??CheckMountList@@9@4UBootEncryptionStatus@@A+66
  0020f	3b 05 42 00 00
	00		 cmp	 eax, DWORD PTR ?RecentBootEncStatus@@3UBootEncryptionStatus@@A+66
  00215	75 20		 jne	 SHORT $LN218@CheckMount
  00217	8b 0d 2a 00 00
	00		 mov	 ecx, DWORD PTR ?newBootEncStatus@?1??CheckMountList@@9@4UBootEncryptionStatus@@A+42
  0021d	3b 0d 2a 00 00
	00		 cmp	 ecx, DWORD PTR ?RecentBootEncStatus@@3UBootEncryptionStatus@@A+42
  00223	75 12		 jne	 SHORT $LN218@CheckMount
  00225	8b 15 2e 00 00
	00		 mov	 edx, DWORD PTR ?newBootEncStatus@?1??CheckMountList@@9@4UBootEncryptionStatus@@A+46
  0022b	3b 15 2e 00 00
	00		 cmp	 edx, DWORD PTR ?RecentBootEncStatus@@3UBootEncryptionStatus@@A+46
  00231	0f 84 d2 00 00
	00		 je	 $LN18@CheckMount
$LN218@CheckMount:

; 4514 : 		{
; 4515 : 			/* System encryption status change */
; 4516 : 
; 4517 : 			char selDrive;
; 4518 : 			int driveLetterToRefresh;
; 4519 : 
; 4520 : 			if (RecentBootEncStatus.DriveMounted == newBootEncStatus.DriveMounted)	// If an icon (and whole new line) for a system device isn't to be added/removed

  00237	a1 06 00 00 00	 mov	 eax, DWORD PTR ?newBootEncStatus@?1??CheckMountList@@9@4UBootEncryptionStatus@@A+6
  0023c	39 05 06 00 00
	00		 cmp	 DWORD PTR ?RecentBootEncStatus@@3UBootEncryptionStatus@@A+6, eax
  00242	75 1f		 jne	 SHORT $LN23@CheckMount

; 4521 : 			{
; 4522 : 				// Partial refresh
; 4523 : 				if (WholeSysDriveEncryption (TRUE))

  00244	6a 01		 push	 1
  00246	e8 00 00 00 00	 call	 _WholeSysDriveEncryption
  0024b	83 c4 04	 add	 esp, 4
  0024e	85 c0		 test	 eax, eax
  00250	74 07		 je	 SHORT $LN22@CheckMount

; 4524 : 				{
; 4525 : 					// System drive (not just partition)
; 4526 : 					driveLetterToRefresh = ENC_SYSDRIVE_PSEUDO_DRIVE_LETTER;

  00252	be 40 00 00 00	 mov	 esi, 64			; 00000040H

; 4527 : 				}
; 4528 : 				else

  00257	eb 0c		 jmp	 SHORT $LN20@CheckMount
$LN22@CheckMount:

; 4529 : 				{
; 4530 : 					// System partition 
; 4531 : 					driveLetterToRefresh = GetSystemDriveLetter ();

  00259	e8 00 00 00 00	 call	 _GetSystemDriveLetter
  0025e	0f be f0	 movsx	 esi, al

; 4532 : 				}
; 4533 : 			}
; 4534 : 			else

  00261	eb 02		 jmp	 SHORT $LN20@CheckMount
$LN23@CheckMount:

; 4535 : 			{
; 4536 : 				// Full rebuild of the mount list
; 4537 : 				driveLetterToRefresh = 0;	

  00263	33 f6		 xor	 esi, esi
$LN20@CheckMount:

; 4538 : 			}
; 4539 : 
; 4540 : 			selDrive = (char) HIWORD (GetSelectedLong (GetDlgItem (MainDlg, IDC_DRIVELIST)));

  00265	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0026b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00271	68 ef 03 00 00	 push	 1007			; 000003efH
  00276	51		 push	 ecx
  00277	ff d7		 call	 edi
  00279	50		 push	 eax
  0027a	e8 00 00 00 00	 call	 _GetSelectedLong

; 4541 : 			LoadDriveLetters (GetDlgItem (MainDlg, IDC_DRIVELIST), driveLetterToRefresh);

  0027f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00285	83 c4 04	 add	 esp, 4
  00288	56		 push	 esi
  00289	8b d8		 mov	 ebx, eax
  0028b	68 ef 03 00 00	 push	 1007			; 000003efH
  00290	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00293	52		 push	 edx
  00294	88 5d 70	 mov	 BYTE PTR _selDrive$137970[ebp], bl
  00297	ff d7		 call	 edi
  00299	50		 push	 eax
  0029a	e8 00 00 00 00	 call	 _LoadDriveLetters

; 4542 : 
; 4543 : 			RecentBootEncStatus = newBootEncStatus;

  0029f	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  002a4	be 00 00 00 00	 mov	 esi, OFFSET ?newBootEncStatus@?1??CheckMountList@@9@4UBootEncryptionStatus@@A
  002a9	bf 00 00 00 00	 mov	 edi, OFFSET ?RecentBootEncStatus@@3UBootEncryptionStatus@@A ; RecentBootEncStatus
  002ae	f3 a5		 rep movsd
  002b0	83 c4 08	 add	 esp, 8
  002b3	66 a5		 movsw

; 4544 : 
; 4545 : 			if (selDrive != -1 && (current.ulMountedDrives & (1 << (selDrive - 'A'))) == 0 && !IsDriveAvailable (selDrive - 'A'))

  002b5	80 fb ff	 cmp	 bl, -1
  002b8	0f 84 d2 00 00
	00		 je	 $LN224@CheckMount
  002be	0f be c3	 movsx	 eax, bl
  002c1	8d 48 bf	 lea	 ecx, DWORD PTR [eax-65]
  002c4	b8 01 00 00 00	 mov	 eax, 1
  002c9	d3 e0		 shl	 eax, cl
  002cb	85 85 d8 c6 ff
	ff		 test	 DWORD PTR _current$[ebp], eax
  002d1	75 17		 jne	 SHORT $LN19@CheckMount
  002d3	51		 push	 ecx
  002d4	e8 00 00 00 00	 call	 _IsDriveAvailable
  002d9	83 c4 04	 add	 esp, 4
  002dc	85 c0		 test	 eax, eax
  002de	75 0a		 jne	 SHORT $LN19@CheckMount

; 4546 : 			{
; 4547 : 				nSelectedDriveIndex = -1;

  002e0	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nSelectedDriveIndex@@3HA, -1 ; nSelectedDriveIndex
$LN19@CheckMount:

; 4548 : 			}
; 4549 : 
; 4550 : 			if (selDrive != -1)
; 4551 : 			{
; 4552 : 				SelectItem (GetDlgItem (MainDlg, IDC_DRIVELIST),selDrive);

  002ea	8b 4d 70	 mov	 ecx, DWORD PTR _selDrive$137970[ebp]
  002ed	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  002f3	51		 push	 ecx
  002f4	68 ef 03 00 00	 push	 1007			; 000003efH
  002f9	52		 push	 edx
  002fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00300	50		 push	 eax
  00301	e8 00 00 00 00	 call	 _SelectItem
  00306	83 c4 08	 add	 esp, 8
$LN18@CheckMount:

; 4553 : 			}
; 4554 : 		}
; 4555 : 
; 4556 : 		/* Miscellaneous notifications */
; 4557 : 
; 4558 : 		// Hibernation prevention notifications
; 4559 : 		if (newBootEncStatus.HibernationPreventionCount != RecentBootEncStatus.HibernationPreventionCount
; 4560 : 			&& !bHibernationPreventionNotified)

  00309	a1 4a 00 00 00	 mov	 eax, DWORD PTR ?newBootEncStatus@?1??CheckMountList@@9@4UBootEncryptionStatus@@A+74
  0030e	33 ff		 xor	 edi, edi
  00310	3b 05 4a 00 00
	00		 cmp	 eax, DWORD PTR ?RecentBootEncStatus@@3UBootEncryptionStatus@@A+74
  00316	74 7a		 je	 SHORT $LN15@CheckMount
  00318	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?bHibernationPreventionNotified@@3HA, edi ; bHibernationPreventionNotified
  0031e	75 72		 jne	 SHORT $LN15@CheckMount

; 4561 : 		{
; 4562 : 			bHibernationPreventionNotified = TRUE;

  00320	be 01 00 00 00	 mov	 esi, 1
  00325	89 35 00 00 00
	00		 mov	 DWORD PTR ?bHibernationPreventionNotified@@3HA, esi ; bHibernationPreventionNotified

; 4563 : 			RecentBootEncStatus.HibernationPreventionCount = newBootEncStatus.HibernationPreventionCount;

  0032b	a3 4a 00 00 00	 mov	 DWORD PTR ?RecentBootEncStatus@@3UBootEncryptionStatus@@A+74, eax

; 4564 : 
; 4565 : 			if (IsHiddenOSRunning() && BootEncObj->GetSystemDriveConfiguration().ExtraBootPartitionPresent)

  00330	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00335	85 c0		 test	 eax, eax
  00337	74 22		 je	 SHORT $LN38@CheckMount
  00339	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0033f	8d 85 4c fd ff
	ff		 lea	 eax, DWORD PTR $T194634[ebp]
  00345	50		 push	 eax
  00346	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  0034b	80 b8 c0 00 00
	00 00		 cmp	 BYTE PTR [eax+192], 0
  00352	89 75 6c	 mov	 DWORD PTR $T194653[ebp], esi
  00355	74 04		 je	 SHORT $LN38@CheckMount
  00357	b3 01		 mov	 bl, 1
  00359	eb 02		 jmp	 SHORT $LN39@CheckMount
$LN38@CheckMount:
  0035b	32 db		 xor	 bl, bl
$LN39@CheckMount:
  0035d	f6 45 6c 01	 test	 BYTE PTR $T194653[ebp], 1
  00361	74 0b		 je	 SHORT $LN48@CheckMount
  00363	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR $T194634[ebp]
  00369	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
$LN48@CheckMount:
  0036e	84 db		 test	 bl, bl
  00370	74 0f		 je	 SHORT $LN16@CheckMount

; 4566 : 				WarningTopMost ("HIDDEN_OS_HIBERNATION_PREVENTED");

  00372	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JEBBJKJG@HIDDEN_OS_HIBERNATION_PREVENTED?$AA@
  00377	e8 00 00 00 00	 call	 _WarningTopMost
  0037c	83 c4 04	 add	 esp, 4

; 4567 : 			else

  0037f	eb 11		 jmp	 SHORT $LN15@CheckMount
$LN16@CheckMount:

; 4568 : 				WarningTopMost ("SYS_ENC_HIBERNATION_PREVENTED");

  00381	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@KKNHDDJP@SYS_ENC_HIBERNATION_PREVENTED?$AA@
  00386	e8 00 00 00 00	 call	 _WarningTopMost
  0038b	83 c4 04	 add	 esp, 4
  0038e	eb 02		 jmp	 SHORT $LN15@CheckMount
$LN224@CheckMount:
  00390	33 ff		 xor	 edi, edi
$LN15@CheckMount:

; 4569 : 		}
; 4570 : 
; 4571 : 		// Write mode prevention (hidden OS leak protection)
; 4572 : 		if (IsHiddenOSRunning())

  00392	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00397	85 c0		 test	 eax, eax
  00399	0f 84 9d 01 00
	00		 je	 $LN60@CheckMount

; 4573 : 		{
; 4574 : 			if (newBootEncStatus.HiddenSysLeakProtectionCount != RecentBootEncStatus.HiddenSysLeakProtectionCount
; 4575 : 				&& !bHiddenSysLeakProtNotifiedDuringSession)

  0039f	8b 0d 5a 00 00
	00		 mov	 ecx, DWORD PTR ?newBootEncStatus@?1??CheckMountList@@9@4UBootEncryptionStatus@@A+90
  003a5	3b 0d 5a 00 00
	00		 cmp	 ecx, DWORD PTR ?RecentBootEncStatus@@3UBootEncryptionStatus@@A+90
  003ab	0f 84 8b 01 00
	00		 je	 $LN60@CheckMount
  003b1	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?bHiddenSysLeakProtNotifiedDuringSession@@3HA, edi ; bHiddenSysLeakProtNotifiedDuringSession
  003b7	0f 85 7f 01 00
	00		 jne	 $LN60@CheckMount

; 4576 : 			{
; 4577 : 				bHiddenSysLeakProtNotifiedDuringSession = TRUE;
; 4578 : 
; 4579 : 				switch (HiddenSysLeakProtectionNotificationStatus)

  003bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HiddenSysLeakProtectionNotificationStatus@@3HA ; HiddenSysLeakProtectionNotificationStatus
  003c2	83 e8 01	 sub	 eax, 1
  003c5	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bHiddenSysLeakProtNotifiedDuringSession@@3HA, 1 ; bHiddenSysLeakProtNotifiedDuringSession
  003cf	0f 84 81 01 00
	00		 je	 $LN10@CheckMount
  003d5	83 e8 01	 sub	 eax, 1
  003d8	0f 84 5e 01 00
	00		 je	 $LN60@CheckMount

; 4606 : 
; 4607 : 						default:
; 4608 : 							// NOP
; 4609 : 							break;
; 4610 : 						}
; 4611 : 					}
; 4612 : 					break;
; 4613 : 
; 4614 : 				case TC_HIDDEN_OS_READ_ONLY_NOTIF_MODE_DISABLED:
; 4615 : 					// NOP
; 4616 : 					break;
; 4617 : 
; 4618 : 				case TC_HIDDEN_OS_READ_ONLY_NOTIF_MODE_NONE:
; 4619 : 				default:
; 4620 : 					{
; 4621 : 						// First time warning -- include technical explanation
; 4622 : 						InfoDirect ((wstring (GetString ("HIDDEN_OS_WRITE_PROTECTION_BRIEF_INFO"))
; 4623 : 							+ L"\n\n"
; 4624 : 							+ GetString ("HIDDEN_OS_WRITE_PROTECTION_EXPLANATION")
; 4625 : 							+ L"\n\n\n"
; 4626 : 							+ GetString ("DECOY_TO_HIDDEN_OS_DATA_TRANSFER_HOWTO")).c_str());

  003de	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@
  003e3	e8 00 00 00 00	 call	 _GetString
  003e8	83 c4 04	 add	 esp, 4
  003eb	50		 push	 eax
  003ec	8d 4d 38	 lea	 ecx, DWORD PTR $T194642[ebp]
  003ef	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  003f4	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  003f9	50		 push	 eax
  003fa	8d 55 00	 lea	 edx, DWORD PTR $T194643[ebp]
  003fd	52		 push	 edx
  003fe	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  00402	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00407	83 c4 0c	 add	 esp, 12			; 0000000cH
  0040a	8b f0		 mov	 esi, eax
  0040c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@
  00411	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  00415	e8 00 00 00 00	 call	 _GetString
  0041a	50		 push	 eax
  0041b	8d 45 1c	 lea	 eax, DWORD PTR $T194644[ebp]
  0041e	56		 push	 esi
  0041f	50		 push	 eax
  00420	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00425	83 c4 10	 add	 esp, 16			; 00000010H
  00428	68 00 00 00 00	 push	 OFFSET ??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@
  0042d	50		 push	 eax
  0042e	8d 4d d4	 lea	 ecx, DWORD PTR $T194645[ebp]
  00431	51		 push	 ecx
  00432	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  00436	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0043b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0043e	8b f0		 mov	 esi, eax
  00440	bb 08 00 00 00	 mov	 ebx, 8
  00445	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BNCMPPOG@DECOY_TO_HIDDEN_OS_DATA_TRANSFER@
  0044a	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  0044d	e8 00 00 00 00	 call	 _GetString
  00452	50		 push	 eax
  00453	8d 55 b8	 lea	 edx, DWORD PTR $T194646[ebp]
  00456	56		 push	 esi
  00457	52		 push	 edx
  00458	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0045d	83 c4 10	 add	 esp, 16			; 00000010H
  00460	39 58 18	 cmp	 DWORD PTR [eax+24], ebx
  00463	72 05		 jb	 SHORT $LN71@CheckMount
  00465	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00468	eb 03		 jmp	 SHORT $LN72@CheckMount
$LN71@CheckMount:
  0046a	83 c0 04	 add	 eax, 4
$LN72@CheckMount:
  0046d	50		 push	 eax
  0046e	e8 00 00 00 00	 call	 _InfoDirect
  00473	83 c4 04	 add	 esp, 4
  00476	39 5d d0	 cmp	 DWORD PTR $T194646[ebp+24], ebx
  00479	72 0c		 jb	 SHORT $LN91@CheckMount
  0047b	8b 45 bc	 mov	 eax, DWORD PTR $T194646[ebp+4]
  0047e	50		 push	 eax
  0047f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00484	83 c4 04	 add	 esp, 4
$LN91@CheckMount:
  00487	33 c9		 xor	 ecx, ecx
  00489	be 07 00 00 00	 mov	 esi, 7
  0048e	89 75 d0	 mov	 DWORD PTR $T194646[ebp+24], esi
  00491	89 7d cc	 mov	 DWORD PTR $T194646[ebp+20], edi
  00494	66 89 4d bc	 mov	 WORD PTR $T194646[ebp+4], cx
  00498	39 5d ec	 cmp	 DWORD PTR $T194645[ebp+24], ebx
  0049b	72 0c		 jb	 SHORT $LN119@CheckMount
  0049d	8b 55 d8	 mov	 edx, DWORD PTR $T194645[ebp+4]
  004a0	52		 push	 edx
  004a1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004a6	83 c4 04	 add	 esp, 4
$LN119@CheckMount:
  004a9	33 c0		 xor	 eax, eax
  004ab	89 75 ec	 mov	 DWORD PTR $T194645[ebp+24], esi
  004ae	89 7d e8	 mov	 DWORD PTR $T194645[ebp+20], edi
  004b1	66 89 45 d8	 mov	 WORD PTR $T194645[ebp+4], ax
  004b5	39 5d 34	 cmp	 DWORD PTR $T194644[ebp+24], ebx
  004b8	72 0c		 jb	 SHORT $LN147@CheckMount
  004ba	8b 4d 20	 mov	 ecx, DWORD PTR $T194644[ebp+4]
  004bd	51		 push	 ecx
  004be	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004c3	83 c4 04	 add	 esp, 4
$LN147@CheckMount:
  004c6	33 d2		 xor	 edx, edx
  004c8	89 75 34	 mov	 DWORD PTR $T194644[ebp+24], esi
  004cb	89 7d 30	 mov	 DWORD PTR $T194644[ebp+20], edi
  004ce	66 89 55 20	 mov	 WORD PTR $T194644[ebp+4], dx
  004d2	39 5d 18	 cmp	 DWORD PTR $T194643[ebp+24], ebx
  004d5	72 0c		 jb	 SHORT $LN175@CheckMount
  004d7	8b 45 04	 mov	 eax, DWORD PTR $T194643[ebp+4]
  004da	50		 push	 eax
  004db	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004e0	83 c4 04	 add	 esp, 4
$LN175@CheckMount:
  004e3	33 c9		 xor	 ecx, ecx
  004e5	89 75 18	 mov	 DWORD PTR $T194643[ebp+24], esi
  004e8	89 7d 14	 mov	 DWORD PTR $T194643[ebp+20], edi
  004eb	66 89 4d 04	 mov	 WORD PTR $T194643[ebp+4], cx
  004ef	39 5d 50	 cmp	 DWORD PTR $T194642[ebp+24], ebx
  004f2	72 0c		 jb	 SHORT $LN203@CheckMount
  004f4	8b 55 3c	 mov	 edx, DWORD PTR $T194642[ebp+4]
  004f7	52		 push	 edx
  004f8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004fd	83 c4 04	 add	 esp, 4
$LN203@CheckMount:
  00500	33 c0		 xor	 eax, eax
  00502	89 75 50	 mov	 DWORD PTR $T194642[ebp+24], esi
  00505	89 7d 4c	 mov	 DWORD PTR $T194642[ebp+20], edi
  00508	66 89 45 3c	 mov	 WORD PTR $T194642[ebp+4], ax

; 4627 : 
; 4628 : 						// Further warnings will not include the explanation (and will allow disabling)
; 4629 : 
; 4630 : 						if (ConfigBuffer == NULL)

  0050c	39 3d 00 00 00
	00		 cmp	 DWORD PTR _ConfigBuffer, edi
  00512	75 0f		 jne	 SHORT $LN1@CheckMount

; 4631 : 						{
; 4632 : 							// We need to load the config file because it is not done automatically when
; 4633 : 							// launched from the sys startup sequence (and SaveSettings would start by _loading_ 
; 4634 : 							// the settings to cache).
; 4635 : 							LoadSettings (MainDlg);	

  00514	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0051a	51		 push	 ecx
  0051b	e8 00 00 00 00	 call	 _LoadSettings
  00520	83 c4 04	 add	 esp, 4
$LN1@CheckMount:

; 4636 : 						}
; 4637 : 						HiddenSysLeakProtectionNotificationStatus = TC_HIDDEN_OS_READ_ONLY_NOTIF_MODE_COMPACT;

  00523	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?HiddenSysLeakProtectionNotificationStatus@@3HA, 1 ; HiddenSysLeakProtectionNotificationStatus
$LN230@CheckMount:

; 4638 : 						SaveSettings (MainDlg);

  0052d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00533	52		 push	 edx
  00534	e8 00 00 00 00	 call	 _SaveSettings
  00539	83 c4 04	 add	 esp, 4
$LN60@CheckMount:

; 4649 : 
; 4650 : 	return TRUE;

  0053c	b8 01 00 00 00	 mov	 eax, 1
$LN34@CheckMount:

; 4651 : }

  00541	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00544	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0054b	59		 pop	 ecx
  0054c	5f		 pop	 edi
  0054d	5e		 pop	 esi
  0054e	5b		 pop	 ebx
  0054f	83 c5 74	 add	 ebp, 116		; 00000074H
  00552	8b e5		 mov	 esp, ebp
  00554	5d		 pop	 ebp
  00555	c3		 ret	 0
$LN10@CheckMount:

; 4580 : 				{
; 4581 : 				case TC_HIDDEN_OS_READ_ONLY_NOTIF_MODE_COMPACT:
; 4582 : 					{
; 4583 : 						char *tmp[] = {0, "HIDDEN_OS_WRITE_PROTECTION_BRIEF_INFO", "SHOW_MORE_INFORMATION", "DO_NOT_SHOW_THIS_AGAIN", "CONTINUE", 0};
; 4584 : 						switch (AskMultiChoice ((void **) tmp, FALSE))

  00556	8d 45 54	 lea	 eax, DWORD PTR _tmp$137995[ebp]
  00559	57		 push	 edi
  0055a	50		 push	 eax
  0055b	89 7d 54	 mov	 DWORD PTR _tmp$137995[ebp], edi
  0055e	c7 45 58 00 00
	00 00		 mov	 DWORD PTR _tmp$137995[ebp+4], OFFSET ??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@
  00565	c7 45 5c 00 00
	00 00		 mov	 DWORD PTR _tmp$137995[ebp+8], OFFSET ??_C@_0BG@LCMGFIPF@SHOW_MORE_INFORMATION?$AA@
  0056c	c7 45 60 00 00
	00 00		 mov	 DWORD PTR _tmp$137995[ebp+12], OFFSET ??_C@_0BH@LAJANGPP@DO_NOT_SHOW_THIS_AGAIN?$AA@
  00573	c7 45 64 00 00
	00 00		 mov	 DWORD PTR _tmp$137995[ebp+16], OFFSET ??_C@_08EECOACDK@CONTINUE?$AA@
  0057a	89 7d 68	 mov	 DWORD PTR _tmp$137995[ebp+20], edi
  0057d	e8 00 00 00 00	 call	 _AskMultiChoice
  00582	83 c4 08	 add	 esp, 8
  00585	83 e8 01	 sub	 eax, 1
  00588	74 2b		 je	 SHORT $LN7@CheckMount
  0058a	83 e8 01	 sub	 eax, 1
  0058d	75 ad		 jne	 SHORT $LN60@CheckMount

; 4592 : 							break;
; 4593 : 
; 4594 : 						case 2:
; 4595 : 							// No more warnings will be shown
; 4596 : 							if (ConfigBuffer == NULL)

  0058f	39 3d 00 00 00
	00		 cmp	 DWORD PTR _ConfigBuffer, edi
  00595	75 0f		 jne	 SHORT $LN5@CheckMount

; 4597 : 							{
; 4598 : 								// We need to load the config file because it is not done automatically when
; 4599 : 								// launched from the sys startup sequence (and SaveSettings would start by _loading_ 
; 4600 : 								// the settings to cache).
; 4601 : 								LoadSettings (MainDlg);	

  00597	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0059d	51		 push	 ecx
  0059e	e8 00 00 00 00	 call	 _LoadSettings
  005a3	83 c4 04	 add	 esp, 4
$LN5@CheckMount:

; 4602 : 							}
; 4603 : 							HiddenSysLeakProtectionNotificationStatus = TC_HIDDEN_OS_READ_ONLY_NOTIF_MODE_DISABLED;

  005a6	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?HiddenSysLeakProtectionNotificationStatus@@3HA, 2 ; HiddenSysLeakProtectionNotificationStatus

; 4604 : 							SaveSettings (MainDlg);
; 4605 : 							break;

  005b0	e9 78 ff ff ff	 jmp	 $LN230@CheckMount
$LN7@CheckMount:

; 4585 : 						{
; 4586 : 						case 1:
; 4587 : 							InfoDirect ((wstring (GetString ("HIDDEN_OS_WRITE_PROTECTION_BRIEF_INFO"))
; 4588 : 								+ L"\n\n"
; 4589 : 								+ GetString ("HIDDEN_OS_WRITE_PROTECTION_EXPLANATION")
; 4590 : 								+ L"\n\n\n"
; 4591 : 								+ GetString ("DECOY_TO_HIDDEN_OS_DATA_TRANSFER_HOWTO")).c_str());

  005b5	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@
  005ba	e8 00 00 00 00	 call	 _GetString
  005bf	83 c4 04	 add	 esp, 4
  005c2	50		 push	 eax
  005c3	8d 4d 80	 lea	 ecx, DWORD PTR $T194637[ebp]
  005c6	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  005cb	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  005d0	50		 push	 eax
  005d1	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T194638[ebp]
  005d7	50		 push	 eax
  005d8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  005dc	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  005e1	83 c4 0c	 add	 esp, 12			; 0000000cH
  005e4	8b f0		 mov	 esi, eax
  005e6	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@
  005eb	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  005ef	e8 00 00 00 00	 call	 _GetString
  005f4	50		 push	 eax
  005f5	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T194639[ebp]
  005fb	56		 push	 esi
  005fc	51		 push	 ecx
  005fd	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00602	83 c4 10	 add	 esp, 16			; 00000010H
  00605	68 00 00 00 00	 push	 OFFSET ??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@
  0060a	50		 push	 eax
  0060b	8d 55 9c	 lea	 edx, DWORD PTR $T194640[ebp]
  0060e	52		 push	 edx
  0060f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  00613	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00618	83 c4 0c	 add	 esp, 12			; 0000000cH
  0061b	8b f0		 mov	 esi, eax
  0061d	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BNCMPPOG@DECOY_TO_HIDDEN_OS_DATA_TRANSFER@
  00622	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  00626	e8 00 00 00 00	 call	 _GetString
  0062b	50		 push	 eax
  0062c	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T194641[ebp]
  00632	56		 push	 esi
  00633	50		 push	 eax
  00634	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00639	83 c4 10	 add	 esp, 16			; 00000010H
  0063c	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  00640	72 05		 jb	 SHORT $LN65@CheckMount
  00642	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00645	eb 03		 jmp	 SHORT $LN66@CheckMount
$LN65@CheckMount:
  00647	83 c0 04	 add	 eax, 4
$LN66@CheckMount:
  0064a	50		 push	 eax
  0064b	e8 00 00 00 00	 call	 _InfoDirect
  00650	83 c4 04	 add	 esp, 4
  00653	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T194641[ebp]
  00659	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0065e	8d 4d 9c	 lea	 ecx, DWORD PTR $T194640[ebp]
  00661	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00666	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T194639[ebp]
  0066c	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00671	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T194638[ebp]
  00677	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0067c	8d 4d 80	 lea	 ecx, DWORD PTR $T194637[ebp]
  0067f	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00684	e9 b3 fe ff ff	 jmp	 $LN60@CheckMount
__catch$_CheckMountList$0:

; 4639 : 					}
; 4640 : 					break;
; 4641 : 				}
; 4642 : 			}
; 4643 : 		}
; 4644 : 	}
; 4645 : 	catch (...)
; 4646 : 	{
; 4647 : 		// NOP
; 4648 : 	}

  00689	b8 00 00 00 00	 mov	 eax, $LN60@CheckMount
  0068e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_CheckMountList$8:
  00000	8d 4d 38	 lea	 ecx, DWORD PTR $T194642[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_CheckMountList$9:
  00008	8d 4d 00	 lea	 ecx, DWORD PTR $T194643[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_CheckMountList$10:
  00010	8d 4d 1c	 lea	 ecx, DWORD PTR $T194644[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_CheckMountList$11:
  00018	8d 4d d4	 lea	 ecx, DWORD PTR $T194645[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_CheckMountList$3:
  00020	8d 4d 80	 lea	 ecx, DWORD PTR $T194637[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_CheckMountList$4:
  00028	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T194638[ebp]
  0002e	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_CheckMountList$5:
  00033	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T194639[ebp]
  00039	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_CheckMountList$6:
  0003e	8d 4d 9c	 lea	 ecx, DWORD PTR $T194640[ebp]
  00041	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$_CheckMountList:
  00046	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004d	8b 8a d4 c6 ff
	ff		 mov	 ecx, DWORD PTR [edx-14636]
  00053	33 c8		 xor	 ecx, eax
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_CheckMountList
  0005f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_CheckMountList ENDP
PUBLIC	??_C@_0BL@IHFEJFAE@LIMIT_ENC_THREAD_POOL_NOTE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@JPCOHEKF@IDD_PERFORMANCE_SETTINGS?$AA@ ; `string'
PUBLIC	??_C@_0BA@KDBBKJMB@parallelization?$AA@		; `string'
PUBLIC	??_C@_0CF@BCEFFIOG@CONFIRM_SETTING_DEGRADES_PERFORM@ ; `string'
PUBLIC	??_C@_0P@DAOCBLPH@hwacceleration?$AA@		; `string'
PUBLIC	??_C@_0BI@BHGNKFED@SETTING_REQUIRES_REBOOT?$AA@	; `string'
PUBLIC	??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@ ; `string'
PUBLIC	??_C@_0CA@NOOFMILL@TrueCryptEncryptionFreeCpuCount?$AA@ ; `string'
PUBLIC	??_C@_0BO@EPIDJGMK@FEATURE_REQUIRES_INSTALLATION?$AA@ ; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp__SetDlgItemTextW@12:PROC
EXTRN	_is_aes_hw_cpu_supported:PROC
EXTRN	_AddComboPair:PROC
EXTRN	__imp__GetSystemInfo@4:PROC
EXTRN	?WriteLocalMachineRegistryDwordValue@BootEncryption@CipherShed@@QAEXPAD0K@Z:PROC ; CipherShed::BootEncryption::WriteLocalMachineRegistryDwordValue
EXTRN	_ReadEncryptionThreadPoolFreeCpuCountLimit:PROC
;	COMDAT ??_C@_0BL@IHFEJFAE@LIMIT_ENC_THREAD_POOL_NOTE?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0BL@IHFEJFAE@LIMIT_ENC_THREAD_POOL_NOTE?$AA@ DB 'LIMIT_ENC_THREAD_P'
	DB	'OOL_NOTE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JPCOHEKF@IDD_PERFORMANCE_SETTINGS?$AA@
CONST	SEGMENT
??_C@_0BJ@JPCOHEKF@IDD_PERFORMANCE_SETTINGS?$AA@ DB 'IDD_PERFORMANCE_SETT'
	DB	'INGS', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KDBBKJMB@parallelization?$AA@
CONST	SEGMENT
??_C@_0BA@KDBBKJMB@parallelization?$AA@ DB 'parallelization', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BCEFFIOG@CONFIRM_SETTING_DEGRADES_PERFORM@
CONST	SEGMENT
??_C@_0CF@BCEFFIOG@CONFIRM_SETTING_DEGRADES_PERFORM@ DB 'CONFIRM_SETTING_'
	DB	'DEGRADES_PERFORMANCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DAOCBLPH@hwacceleration?$AA@
CONST	SEGMENT
??_C@_0P@DAOCBLPH@hwacceleration?$AA@ DB 'hwacceleration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BHGNKFED@SETTING_REQUIRES_REBOOT?$AA@
CONST	SEGMENT
??_C@_0BI@BHGNKFED@SETTING_REQUIRES_REBOOT?$AA@ DB 'SETTING_REQUIRES_REBO'
	DB	'OT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@
CONST	SEGMENT
??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@ DB 'SYSTEM\Current'
	DB	'ControlSet\Services\truecrypt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NOOFMILL@TrueCryptEncryptionFreeCpuCount?$AA@
CONST	SEGMENT
??_C@_0CA@NOOFMILL@TrueCryptEncryptionFreeCpuCount?$AA@ DB 'TrueCryptEncr'
	DB	'yptionFreeCpuCount', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EPIDJGMK@FEATURE_REQUIRES_INSTALLATION?$AA@
CONST	SEGMENT
??_C@_0BO@EPIDJGMK@FEATURE_REQUIRES_INSTALLATION?$AA@ DB 'FEATURE_REQUIRE'
	DB	'S_INSTALLATION', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_PerformanceSettingsDlgProc@16$11 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	04H
	DD	FLAT:__catch$_PerformanceSettingsDlgProc@16$2
__catchsym$_PerformanceSettingsDlgProc@16$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_PerformanceSettingsDlgProc@16$0
__ehfuncinfo$_PerformanceSettingsDlgProc@16 DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$_PerformanceSettingsDlgProc@16
	DD	02H
	DD	FLAT:__tryblocktable$_PerformanceSettingsDlgProc@16
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$_PerformanceSettingsDlgProc@16 DD 03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$_PerformanceSettingsDlgProc@16$10
	DD	02H
	DD	05H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$_PerformanceSettingsDlgProc@16$11
__unwindtable$_PerformanceSettingsDlgProc@16 DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_PerformanceSettingsDlgProc@16$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_PerformanceSettingsDlgProc@16$6
	DD	0ffffffffH
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	FLAT:__unwindfunclet$_PerformanceSettingsDlgProc@16$8
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
xdata$x	ENDS
;	COMDAT _PerformanceSettingsDlgProc@16
_TEXT	SEGMENT
$T195348 = -302						; size = 94
_s$140253 = -208					; size = 136
$T195343 = -72						; size = 28
$T195347 = -44						; size = 28
__$EHRec$ = -16						; size = 16
_bytesReturned$140357 = 0				; size = 4
_e$140368 = 4						; size = 4
$T195346 = 8						; size = 28
_hwndDlg$GSCopy$ = 36					; size = 4
_disableHW$140345 = 40					; size = 4
_bootLoaderVersion$140352 = 44				; size = 2
_freeCpuCombo$140096 = 44				; size = 4
_userConfig$140350 = 48					; size = 1
_encryptionFreeCpuCount$140097 = 48			; size = 4
_sysInfo$140095 = 52					; size = 36
_customUserMessage$140351 = 60				; size = 28
__$ArrayPad$ = 88					; size = 4
_hwndDlg$ = 100						; size = 4
_msg$ = 104						; size = 4
_wParam$ = 108						; size = 4
_lParam$ = 112						; size = 4
_PerformanceSettingsDlgProc@16 PROC			; COMDAT

; 8103 : {

  00000	55		 push	 ebp
  00001	8d 6c 24 a4	 lea	 ebp, DWORD PTR [esp-92]
  00005	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$_PerformanceSettingsDlgProc@16
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 58	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 8104 : 	WORD lw = LOWORD (wParam);
; 8105 : 
; 8106 : 	switch (msg)

  00036	8b 45 68	 mov	 eax, DWORD PTR _msg$[ebp]
  00039	2d 10 01 00 00	 sub	 eax, 272		; 00000110H
  0003e	8b 5d 64	 mov	 ebx, DWORD PTR _hwndDlg$[ebp]
  00041	89 5d 24	 mov	 DWORD PTR _hwndDlg$GSCopy$[ebp], ebx
  00044	0f 84 55 03 00
	00		 je	 $LN33@Performanc
  0004a	83 e8 01	 sub	 eax, 1

; 8270 : 	}
; 8271 : 
; 8272 : 	return 0;

  0004d	0f 85 97 05 00
	00		 jne	 $LN236@Performanc
  00053	0f b7 45 6c	 movzx	 eax, WORD PTR _wParam$[ebp]
  00057	3d 34 04 00 00	 cmp	 eax, 1076		; 00000434H
  0005c	0f 8f 45 02 00
	00		 jg	 $LN40@Performanc

; 8151 : 
; 8152 : 	case WM_COMMAND:
; 8153 : 
; 8154 : 		switch (lw)

  00062	0f 84 21 02 00
	00		 je	 $LN2@Performanc
  00068	8b c8		 mov	 ecx, eax
  0006a	83 e9 01	 sub	 ecx, 1
  0006d	74 34		 je	 SHORT $LN20@Performanc
  0006f	83 e9 01	 sub	 ecx, 1
  00072	74 1d		 je	 SHORT $LN21@Performanc
  00074	81 e9 fd 03 00
	00		 sub	 ecx, 1021		; 000003fdH
  0007a	0f 85 6a 05 00
	00		 jne	 $LN236@Performanc

; 8255 : 
; 8256 : 		case IDC_BENCHMARK:
; 8257 : 			Benchmark (hwndDlg);

  00080	8b c3		 mov	 eax, ebx
  00082	e8 00 00 00 00	 call	 ?Benchmark@@YAXPAUHWND__@@@Z ; Benchmark

; 8258 : 			return 1;

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	e9 5b 05 00 00	 jmp	 $LN36@Performanc
$LN21@Performanc:

; 8155 : 		{
; 8156 : 		case IDCANCEL:
; 8157 : 			EndDialog (hwndDlg, lw);

  00091	50		 push	 eax
  00092	53		 push	 ebx
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
$LN53@Performanc:

; 8158 : 			return 1;

  00099	b8 01 00 00 00	 mov	 eax, 1
  0009e	e9 49 05 00 00	 jmp	 $LN36@Performanc
$LN20@Performanc:

; 8159 : 
; 8160 : 		case IDOK:
; 8161 : 			{
; 8162 : 				if (IsNonInstallMode())

  000a3	e8 00 00 00 00	 call	 _IsNonInstallMode
  000a8	85 c0		 test	 eax, eax
  000aa	74 20		 je	 SHORT $LN19@Performanc

; 8163 : 				{
; 8164 : 					Error ("FEATURE_REQUIRES_INSTALLATION");

  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@EPIDJGMK@FEATURE_REQUIRES_INSTALLATION?$AA@
  000b1	e8 00 00 00 00	 call	 _Error
  000b6	83 c4 04	 add	 esp, 4

; 8165 : 					EndDialog (hwndDlg, IDCANCEL);

  000b9	6a 02		 push	 2
  000bb	53		 push	 ebx
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 8166 : 					return 1;

  000c2	b8 01 00 00 00	 mov	 eax, 1
  000c7	e9 20 05 00 00	 jmp	 $LN36@Performanc
$LN19@Performanc:

; 8167 : 				}
; 8168 : 
; 8169 : 				BOOL disableHW = !IsDlgButtonChecked (hwndDlg, IDC_ENABLE_HARDWARE_ENCRYPTION);

  000cc	68 5b 04 00 00	 push	 1115			; 0000045bH
  000d1	53		 push	 ebx
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsDlgButtonChecked@8

; 8170 : 
; 8171 : 				try
; 8172 : 				{
; 8173 : 					try
; 8174 : 					{
; 8175 : 						BootEncStatus = BootEncObj->GetStatus();

  000d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000de	f7 d8		 neg	 eax
  000e0	1b c0		 sbb	 eax, eax
  000e2	40		 inc	 eax
  000e3	89 45 28	 mov	 DWORD PTR _disableHW$140345[ebp], eax
  000e6	8d 85 d2 fe ff
	ff		 lea	 eax, DWORD PTR $T195348[ebp]
  000ec	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  000f3	50		 push	 eax
  000f4	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  000f8	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  000fd	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00102	8b f0		 mov	 esi, eax
  00104	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00109	f3 a5		 rep movsd
  0010b	66 a5		 movsw

; 8181 : 
; 8182 : 					if (BootEncStatus.DriveMounted)

  0010d	83 3d 06 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, 0
  00114	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  0011b	0f 84 94 00 00
	00		 je	 $LN16@Performanc

; 8183 : 					{
; 8184 : 						byte userConfig;
; 8185 : 						string customUserMessage;

  00121	c7 45 54 0f 00
	00 00		 mov	 DWORD PTR _customUserMessage$140351[ebp+24], 15 ; 0000000fH
  00128	c7 45 50 00 00
	00 00		 mov	 DWORD PTR _customUserMessage$140351[ebp+20], 0
  0012f	c6 45 40 00	 mov	 BYTE PTR _customUserMessage$140351[ebp+4], 0

; 8186 : 						uint16 bootLoaderVersion;
; 8187 : 
; 8188 : 						BootEncObj->ReadBootSectorConfig (nullptr, 0, &userConfig, &customUserMessage, &bootLoaderVersion);

  00133	8d 4d 2c	 lea	 ecx, DWORD PTR _bootLoaderVersion$140352[ebp]
  00136	51		 push	 ecx
  00137	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0013d	8d 55 3c	 lea	 edx, DWORD PTR _customUserMessage$140351[ebp]
  00140	52		 push	 edx
  00141	8d 45 30	 lea	 eax, DWORD PTR _userConfig$140350[ebp]
  00144	50		 push	 eax
  00145	6a 00		 push	 0
  00147	6a 00		 push	 0
  00149	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  0014d	e8 00 00 00 00	 call	 ?ReadBootSectorConfig@BootEncryption@CipherShed@@QAEXPAEI0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z ; CipherShed::BootEncryption::ReadBootSectorConfig

; 8189 : 
; 8190 : 						if (bootLoaderVersion != VERSION_NUM)

  00152	b9 41 07 00 00	 mov	 ecx, 1857		; 00000741H
  00157	66 39 4d 2c	 cmp	 WORD PTR _bootLoaderVersion$140352[ebp], cx
  0015b	74 0d		 je	 SHORT $LN15@Performanc

; 8191 : 							Warning ("BOOT_LOADER_VERSION_INCORRECT_PREFERENCES");

  0015d	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PODLKGNM@BOOT_LOADER_VERSION_INCORRECT_PR@
  00162	e8 00 00 00 00	 call	 _Warning
  00167	83 c4 04	 add	 esp, 4
$LN15@Performanc:

; 8192 : 
; 8193 : 						if (disableHW)

  0016a	83 7d 28 00	 cmp	 DWORD PTR _disableHW$140345[ebp], 0
  0016e	74 1d		 je	 SHORT $LN14@Performanc

; 8194 : 							userConfig |= TC_BOOT_USER_CFG_FLAG_DISABLE_HW_ENCRYPTION;

  00170	80 4d 30 04	 or	 BYTE PTR _userConfig$140350[ebp], 4

; 8195 : 						else

  00174	eb 1b		 jmp	 SHORT $LN13@Performanc
__catch$_PerformanceSettingsDlgProc@16$0:

; 8176 : 					}
; 8177 : 					catch (...)
; 8178 : 					{
; 8179 : 						BootEncStatus.DriveMounted = false;	

  00176	c7 05 06 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, 0

; 8180 : 					}

  00180	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00187	b8 00 00 00 00	 mov	 eax, $LN229@Performanc
  0018c	c3		 ret	 0
$LN14@Performanc:

; 8196 : 							userConfig &= ~TC_BOOT_USER_CFG_FLAG_DISABLE_HW_ENCRYPTION;

  0018d	80 65 30 fb	 and	 BYTE PTR _userConfig$140350[ebp], 251 ; 000000fbH
$LN13@Performanc:

; 8197 : 
; 8198 : 						BootEncObj->WriteBootSectorUserConfig (userConfig, customUserMessage);

  00191	8b 45 30	 mov	 eax, DWORD PTR _userConfig$140350[ebp]
  00194	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0019a	8d 55 3c	 lea	 edx, DWORD PTR _customUserMessage$140351[ebp]
  0019d	52		 push	 edx
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 ?WriteBootSectorUserConfig@BootEncryption@CipherShed@@QAEXEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::BootEncryption::WriteBootSectorUserConfig

; 8199 : 					}

  001a4	8d 4d 3c	 lea	 ecx, DWORD PTR _customUserMessage$140351[ebp]
  001a7	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  001ab	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001b0	eb 03		 jmp	 SHORT $LN16@Performanc
$LN229@Performanc:
  001b2	8b 5d 24	 mov	 ebx, DWORD PTR _hwndDlg$GSCopy$[ebp]
$LN16@Performanc:

; 8200 : 
; 8201 : 					SetDriverConfigurationFlag (TC_DRIVER_CONFIG_DISABLE_HARDWARE_ENCRYPTION, disableHW);

  001b5	8b 75 28	 mov	 esi, DWORD PTR _disableHW$140345[ebp]
  001b8	56		 push	 esi
  001b9	6a 08		 push	 8
  001bb	e8 00 00 00 00	 call	 ?SetDriverConfigurationFlag@@YAXIH@Z ; SetDriverConfigurationFlag

; 8202 : 
; 8203 : 					DWORD bytesReturned;
; 8204 : 					if (!DeviceIoControl (hDriver, TC_IOCTL_REREAD_DRIVER_CONFIG, NULL, 0, NULL, 0, &bytesReturned, NULL))

  001c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDriver
  001c6	83 c4 08	 add	 esp, 8
  001c9	6a 00		 push	 0
  001cb	8d 4d 00	 lea	 ecx, DWORD PTR _bytesReturned$140357[ebp]
  001ce	51		 push	 ecx
  001cf	6a 00		 push	 0
  001d1	6a 00		 push	 0
  001d3	6a 00		 push	 0
  001d5	6a 00		 push	 0
  001d7	68 94 20 22 00	 push	 2236564			; 00222094H
  001dc	52		 push	 edx
  001dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  001e3	85 c0		 test	 eax, eax
  001e5	75 09		 jne	 SHORT $LN12@Performanc

; 8205 : 						handleWin32Error (hwndDlg);

  001e7	53		 push	 ebx
  001e8	e8 00 00 00 00	 call	 _handleWin32Error
  001ed	83 c4 04	 add	 esp, 4
$LN12@Performanc:

; 8206 : 
; 8207 : 					EnableHwEncryption (!disableHW);

  001f0	33 c0		 xor	 eax, eax
  001f2	85 f6		 test	 esi, esi
  001f4	0f 94 c0	 sete	 al
  001f7	50		 push	 eax
  001f8	e8 00 00 00 00	 call	 _EnableHwEncryption
  001fd	83 c4 04	 add	 esp, 4

; 8208 : 
; 8209 : 					uint32 cpuFreeCount = 0;
; 8210 : 					if (IsDlgButtonChecked (hwndDlg, IDC_LIMIT_ENC_THREAD_POOL))

  00200	68 6a 04 00 00	 push	 1130			; 0000046aH
  00205	53		 push	 ebx
  00206	33 f6		 xor	 esi, esi
  00208	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsDlgButtonChecked@8
  0020e	85 c0		 test	 eax, eax
  00210	74 22		 je	 SHORT $LN10@Performanc

; 8211 : 					{
; 8212 : 						LRESULT cpuFreeItem = SendMessage (GetDlgItem (hwndDlg, IDC_ENCRYPTION_FREE_CPU_COUNT), CB_GETCURSEL, 0, 0);

  00212	56		 push	 esi
  00213	56		 push	 esi
  00214	68 47 01 00 00	 push	 327			; 00000147H
  00219	68 6b 04 00 00	 push	 1131			; 0000046bH
  0021e	53		 push	 ebx
  0021f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00225	50		 push	 eax
  00226	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 8213 : 						if (cpuFreeItem != CB_ERR)

  0022c	83 f8 ff	 cmp	 eax, -1
  0022f	74 03		 je	 SHORT $LN10@Performanc

; 8214 : 							cpuFreeCount = (uint32) (cpuFreeItem + 1);

  00231	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LN10@Performanc:

; 8215 : 					}
; 8216 : 
; 8217 : 					if (ReadEncryptionThreadPoolFreeCpuCountLimit() != cpuFreeCount)

  00234	e8 00 00 00 00	 call	 _ReadEncryptionThreadPoolFreeCpuCountLimit
  00239	3b c6		 cmp	 eax, esi
  0023b	74 23		 je	 SHORT $LN9@Performanc

; 8218 : 					{
; 8219 : 						BootEncObj->WriteLocalMachineRegistryDwordValue ("SYSTEM\\CurrentControlSet\\Services\\truecrypt", TC_ENCRYPTION_FREE_CPU_COUNT_REG_VALUE_NAME, cpuFreeCount);

  0023d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00243	56		 push	 esi
  00244	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NOOFMILL@TrueCryptEncryptionFreeCpuCount?$AA@
  00249	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@
  0024e	e8 00 00 00 00	 call	 ?WriteLocalMachineRegistryDwordValue@BootEncryption@CipherShed@@QAEXPAD0K@Z ; CipherShed::BootEncryption::WriteLocalMachineRegistryDwordValue

; 8220 : 						Warning ("SETTING_REQUIRES_REBOOT");

  00253	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BHGNKFED@SETTING_REQUIRES_REBOOT?$AA@
  00258	e8 00 00 00 00	 call	 _Warning
  0025d	83 c4 04	 add	 esp, 4
$LN9@Performanc:

; 8221 : 					}
; 8222 : 
; 8223 : 					EndDialog (hwndDlg, lw);

  00260	0f b7 4d 6c	 movzx	 ecx, WORD PTR _wParam$[ebp]
  00264	51		 push	 ecx
  00265	53		 push	 ebx
  00266	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 8224 : 					return 1;

  0026c	b8 01 00 00 00	 mov	 eax, 1
  00271	e9 76 03 00 00	 jmp	 $LN36@Performanc
__catch$_PerformanceSettingsDlgProc@16$2:

; 8225 : 				}
; 8226 : 				catch (Exception &e)
; 8227 : 				{
; 8228 : 					e.Show (hwndDlg);

  00276	8b 4d 04	 mov	 ecx, DWORD PTR _e$140368[ebp]
  00279	8b 11		 mov	 edx, DWORD PTR [ecx]
  0027b	8b 45 24	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  0027e	8b 12		 mov	 edx, DWORD PTR [edx]
  00280	50		 push	 eax
  00281	ff d2		 call	 edx

; 8229 : 				}

  00283	b8 00 00 00 00	 mov	 eax, $LN53@Performanc
  00288	c3		 ret	 0
$LN2@Performanc:

; 8259 : 
; 8260 : 		case IDC_MORE_INFO_ON_HW_ACCELERATION:
; 8261 : 			Applink ("hwacceleration", TRUE, "");

  00289	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0028e	6a 01		 push	 1
  00290	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DAOCBLPH@hwacceleration?$AA@
  00295	e8 00 00 00 00	 call	 _Applink
  0029a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8262 : 			return 1;

  0029d	b8 01 00 00 00	 mov	 eax, 1
  002a2	e9 45 03 00 00	 jmp	 $LN36@Performanc
$LN40@Performanc:

; 8151 : 
; 8152 : 	case WM_COMMAND:
; 8153 : 
; 8154 : 		switch (lw)

  002a7	2d 36 04 00 00	 sub	 eax, 1078		; 00000436H
  002ac	0f 84 cf 00 00
	00		 je	 $LN1@Performanc
  002b2	83 e8 25	 sub	 eax, 37			; 00000025H
  002b5	0f 84 8c 00 00
	00		 je	 $LN8@Performanc
  002bb	83 e8 0f	 sub	 eax, 15			; 0000000fH

; 8267 : 		}
; 8268 : 
; 8269 : 		return 0;

  002be	0f 85 26 03 00
	00		 jne	 $LN236@Performanc
  002c4	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__IsDlgButtonChecked@8
  002ca	68 6a 04 00 00	 push	 1130			; 0000046aH
  002cf	53		 push	 ebx
  002d0	ff d6		 call	 esi
  002d2	85 c0		 test	 eax, eax
  002d4	74 22		 je	 SHORT $LN5@Performanc
  002d6	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BCEFFIOG@CONFIRM_SETTING_DEGRADES_PERFORM@
  002db	e8 00 00 00 00	 call	 _AskWarnYesNo
  002e0	83 c4 04	 add	 esp, 4
  002e3	83 f8 07	 cmp	 eax, 7
  002e6	75 10		 jne	 SHORT $LN5@Performanc
  002e8	6a 00		 push	 0
  002ea	68 6a 04 00 00	 push	 1130			; 0000046aH
  002ef	53		 push	 ebx
  002f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CheckDlgButton@12
  002f6	eb 29		 jmp	 SHORT $LN4@Performanc
$LN5@Performanc:

; 8240 : 
; 8241 : 		case IDC_LIMIT_ENC_THREAD_POOL:
; 8242 : 			if (IsDlgButtonChecked (hwndDlg, IDC_LIMIT_ENC_THREAD_POOL)
; 8243 : 				&& AskWarnYesNo ("CONFIRM_SETTING_DEGRADES_PERFORMANCE") == IDNO)
; 8244 : 			{
; 8245 : 				CheckDlgButton (hwndDlg, IDC_LIMIT_ENC_THREAD_POOL, BST_UNCHECKED);
; 8246 : 			}
; 8247 : 			else
; 8248 : 			{
; 8249 : 				SendMessage (GetDlgItem (hwndDlg, IDC_ENCRYPTION_FREE_CPU_COUNT), CB_SETCURSEL, 0, 0);

  002f8	6a 00		 push	 0
  002fa	6a 00		 push	 0
  002fc	68 4e 01 00 00	 push	 334			; 0000014eH
  00301	68 6b 04 00 00	 push	 1131			; 0000046bH
  00306	53		 push	 ebx
  00307	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0030d	50		 push	 eax
  0030e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 8250 : 				Warning ("SETTING_REQUIRES_REBOOT");	// Warn the user before he thinks about benchmarking

  00314	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BHGNKFED@SETTING_REQUIRES_REBOOT?$AA@
  00319	e8 00 00 00 00	 call	 _Warning
  0031e	83 c4 04	 add	 esp, 4
$LN4@Performanc:

; 8251 : 			}
; 8252 : 
; 8253 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_ENCRYPTION_FREE_CPU_COUNT), IsDlgButtonChecked (hwndDlg, IDC_LIMIT_ENC_THREAD_POOL));

  00321	68 6a 04 00 00	 push	 1130			; 0000046aH
  00326	53		 push	 ebx
  00327	ff d6		 call	 esi
  00329	50		 push	 eax
  0032a	68 6b 04 00 00	 push	 1131			; 0000046bH
  0032f	53		 push	 ebx
  00330	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00336	50		 push	 eax
  00337	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 8254 : 			return 1;

  0033d	b8 01 00 00 00	 mov	 eax, 1
  00342	e9 a5 02 00 00	 jmp	 $LN36@Performanc
$LN8@Performanc:

; 8230 : 			}
; 8231 : 			return 1;
; 8232 : 
; 8233 : 		case IDC_ENABLE_HARDWARE_ENCRYPTION:
; 8234 : 			if (!IsDlgButtonChecked (hwndDlg, IDC_ENABLE_HARDWARE_ENCRYPTION)
; 8235 : 				&& AskWarnYesNo ("CONFIRM_SETTING_DEGRADES_PERFORMANCE") == IDNO)

  00347	68 5b 04 00 00	 push	 1115			; 0000045bH
  0034c	53		 push	 ebx
  0034d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsDlgButtonChecked@8
  00353	85 c0		 test	 eax, eax
  00355	75 20		 jne	 SHORT $LN7@Performanc
  00357	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BCEFFIOG@CONFIRM_SETTING_DEGRADES_PERFORM@
  0035c	e8 00 00 00 00	 call	 _AskWarnYesNo
  00361	83 c4 04	 add	 esp, 4
  00364	83 f8 07	 cmp	 eax, 7
  00367	75 0e		 jne	 SHORT $LN7@Performanc

; 8236 : 			{
; 8237 : 				CheckDlgButton (hwndDlg, IDC_ENABLE_HARDWARE_ENCRYPTION, BST_CHECKED);

  00369	6a 01		 push	 1
  0036b	68 5b 04 00 00	 push	 1115			; 0000045bH
  00370	53		 push	 ebx
  00371	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CheckDlgButton@12
$LN7@Performanc:

; 8238 : 			}
; 8239 : 			return 1;

  00377	b8 01 00 00 00	 mov	 eax, 1
  0037c	e9 6b 02 00 00	 jmp	 $LN36@Performanc
$LN1@Performanc:

; 8263 : 
; 8264 : 		case IDC_MORE_INFO_ON_THREAD_BASED_PARALLELIZATION:
; 8265 : 			Applink ("parallelization", TRUE, "");

  00381	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00386	6a 01		 push	 1
  00388	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KDBBKJMB@parallelization?$AA@
  0038d	e8 00 00 00 00	 call	 _Applink
  00392	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8266 : 			return 1;

  00395	b8 01 00 00 00	 mov	 eax, 1
  0039a	e9 4d 02 00 00	 jmp	 $LN36@Performanc
$LN33@Performanc:

; 8107 : 	{
; 8108 : 	case WM_INITDIALOG:
; 8109 : 		{
; 8110 : 			LocalizeDialog (hwndDlg, "IDD_PERFORMANCE_SETTINGS");

  0039f	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JPCOHEKF@IDD_PERFORMANCE_SETTINGS?$AA@
  003a4	53		 push	 ebx
  003a5	e8 00 00 00 00	 call	 _LocalizeDialog
  003aa	83 c4 08	 add	 esp, 8

; 8111 : 
; 8112 : 			uint32 driverConfig = ReadDriverConfigurationFlags();

  003ad	e8 00 00 00 00	 call	 _ReadDriverConfigurationFlags

; 8113 : 			CheckDlgButton (hwndDlg, IDC_ENABLE_HARDWARE_ENCRYPTION, (driverConfig & TC_DRIVER_CONFIG_DISABLE_HARDWARE_ENCRYPTION) ? BST_UNCHECKED : BST_CHECKED);

  003b2	c1 e8 03	 shr	 eax, 3
  003b5	f7 d0		 not	 eax
  003b7	83 e0 01	 and	 eax, 1
  003ba	50		 push	 eax
  003bb	68 5b 04 00 00	 push	 1115			; 0000045bH
  003c0	53		 push	 ebx
  003c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CheckDlgButton@12

; 8114 : 
; 8115 : 			SYSTEM_INFO sysInfo;
; 8116 : 			GetSystemInfo (&sysInfo);

  003c7	8d 45 34	 lea	 eax, DWORD PTR _sysInfo$140095[ebp]
  003ca	50		 push	 eax
  003cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemInfo@4

; 8117 : 
; 8118 : 			HWND freeCpuCombo = GetDlgItem (hwndDlg, IDC_ENCRYPTION_FREE_CPU_COUNT);

  003d1	68 6b 04 00 00	 push	 1131			; 0000046bH
  003d6	53		 push	 ebx
  003d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  003dd	89 45 2c	 mov	 DWORD PTR _freeCpuCombo$140096[ebp], eax

; 8119 : 			uint32 encryptionFreeCpuCount = ReadEncryptionThreadPoolFreeCpuCountLimit();

  003e0	e8 00 00 00 00	 call	 _ReadEncryptionThreadPoolFreeCpuCountLimit
  003e5	8b d0		 mov	 edx, eax

; 8120 : 
; 8121 : 			if (encryptionFreeCpuCount > sysInfo.dwNumberOfProcessors - 1)

  003e7	8b 45 48	 mov	 eax, DWORD PTR _sysInfo$140095[ebp+20]
  003ea	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  003ed	89 55 30	 mov	 DWORD PTR _encryptionFreeCpuCount$140097[ebp], edx
  003f0	3b d1		 cmp	 edx, ecx
  003f2	76 03		 jbe	 SHORT $LN32@Performanc

; 8122 : 				encryptionFreeCpuCount = sysInfo.dwNumberOfProcessors - 1;

  003f4	89 4d 30	 mov	 DWORD PTR _encryptionFreeCpuCount$140097[ebp], ecx
$LN32@Performanc:

; 8123 : 
; 8124 : 			for (uint32 i = 1; i < sysInfo.dwNumberOfProcessors; ++i)

  003f7	be 01 00 00 00	 mov	 esi, 1
  003fc	3b c6		 cmp	 eax, esi
  003fe	0f 86 9b 00 00
	00		 jbe	 $LN230@Performanc
$LN31@Performanc:

; 8125 : 			{
; 8126 : 				stringstream s;

  00404	6a 01		 push	 1
  00406	6a 03		 push	 3
  00408	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _s$140253[ebp]
  0040e	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00413	33 ff		 xor	 edi, edi

; 8127 : 				s << i;

  00415	56		 push	 esi
  00416	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _s$140253[ebp+8]
  0041c	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  0041f	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 8128 : 				AddComboPair (freeCpuCombo, s.str().c_str(), i);

  00424	8d 4d b8	 lea	 ecx, DWORD PTR $T195343[ebp]
  00427	51		 push	 ecx
  00428	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _s$140253[ebp]
  0042e	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00433	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00437	72 05		 jb	 SHORT $LN58@Performanc
  00439	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0043c	eb 03		 jmp	 SHORT $LN59@Performanc
$LN58@Performanc:
  0043e	83 c0 04	 add	 eax, 4
$LN59@Performanc:
  00441	8b 55 2c	 mov	 edx, DWORD PTR _freeCpuCombo$140096[ebp]
  00444	56		 push	 esi
  00445	50		 push	 eax
  00446	52		 push	 edx
  00447	e8 00 00 00 00	 call	 _AddComboPair
  0044c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0044f	83 7d d0 10	 cmp	 DWORD PTR $T195343[ebp+24], 16 ; 00000010H
  00453	72 0c		 jb	 SHORT $LN76@Performanc
  00455	8b 45 bc	 mov	 eax, DWORD PTR $T195343[ebp+4]
  00458	50		 push	 eax
  00459	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0045e	83 c4 04	 add	 esp, 4
$LN76@Performanc:

; 8129 : 			}

  00461	8d 4d 84	 lea	 ecx, DWORD PTR _s$140253[ebp+84]
  00464	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR $T195343[ebp+24], 15 ; 0000000fH
  0046b	89 7d cc	 mov	 DWORD PTR $T195343[ebp+20], edi
  0046e	c6 45 bc 00	 mov	 BYTE PTR $T195343[ebp+4], 0
  00472	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00479	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0047e	8d 4d 84	 lea	 ecx, DWORD PTR _s$140253[ebp+84]
  00481	51		 push	 ecx
  00482	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _s$140253[ebp+84], OFFSET ??_7ios_base@std@@6B@
  00489	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0048e	8b 45 48	 mov	 eax, DWORD PTR _sysInfo$140095[ebp+20]
  00491	46		 inc	 esi
  00492	83 c4 04	 add	 esp, 4
  00495	3b f0		 cmp	 esi, eax
  00497	0f 82 67 ff ff
	ff		 jb	 $LN31@Performanc

; 8123 : 
; 8124 : 			for (uint32 i = 1; i < sysInfo.dwNumberOfProcessors; ++i)

  0049d	eb 02		 jmp	 SHORT $LN29@Performanc
$LN230@Performanc:
  0049f	33 ff		 xor	 edi, edi
$LN29@Performanc:

; 8130 : 
; 8131 : 			if (sysInfo.dwNumberOfProcessors < 2 || encryptionFreeCpuCount == 0)

  004a1	83 f8 02	 cmp	 eax, 2
  004a4	72 05		 jb	 SHORT $LN27@Performanc
  004a6	39 7d 30	 cmp	 DWORD PTR _encryptionFreeCpuCount$140097[ebp], edi
  004a9	75 0e		 jne	 SHORT $LN28@Performanc
$LN27@Performanc:

; 8132 : 				EnableWindow (freeCpuCombo, FALSE);

  004ab	8b 55 2c	 mov	 edx, DWORD PTR _freeCpuCombo$140096[ebp]
  004ae	57		 push	 edi
  004af	52		 push	 edx
  004b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  004b6	8b 45 48	 mov	 eax, DWORD PTR _sysInfo$140095[ebp+20]
$LN28@Performanc:

; 8133 : 
; 8134 : 			if (sysInfo.dwNumberOfProcessors < 2)

  004b9	83 f8 02	 cmp	 eax, 2
  004bc	73 14		 jae	 SHORT $LN26@Performanc

; 8135 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_LIMIT_ENC_THREAD_POOL), FALSE);

  004be	57		 push	 edi
  004bf	68 6a 04 00 00	 push	 1130			; 0000046aH
  004c4	53		 push	 ebx
  004c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  004cb	50		 push	 eax
  004cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
$LN26@Performanc:

; 8136 : 
; 8137 : 			if (encryptionFreeCpuCount != 0)

  004d2	39 7d 30	 cmp	 DWORD PTR _encryptionFreeCpuCount$140097[ebp], edi
  004d5	74 23		 je	 SHORT $LN25@Performanc

; 8138 : 			{
; 8139 : 				CheckDlgButton (hwndDlg, IDC_LIMIT_ENC_THREAD_POOL, BST_CHECKED);

  004d7	6a 01		 push	 1
  004d9	68 6a 04 00 00	 push	 1130			; 0000046aH
  004de	53		 push	 ebx
  004df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CheckDlgButton@12

; 8140 : 				SendMessage (freeCpuCombo, CB_SETCURSEL, encryptionFreeCpuCount - 1, 0);

  004e5	8b 45 30	 mov	 eax, DWORD PTR _encryptionFreeCpuCount$140097[ebp]
  004e8	8b 4d 2c	 mov	 ecx, DWORD PTR _freeCpuCombo$140096[ebp]
  004eb	57		 push	 edi
  004ec	48		 dec	 eax
  004ed	50		 push	 eax
  004ee	68 4e 01 00 00	 push	 334			; 0000014eH
  004f3	51		 push	 ecx
  004f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN25@Performanc:

; 8141 : 			}
; 8142 : 
; 8143 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDT_LIMIT_ENC_THREAD_POOL_NOTE), GetString("LIMIT_ENC_THREAD_POOL_NOTE"));

  004fa	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IHFEJFAE@LIMIT_ENC_THREAD_POOL_NOTE?$AA@
  004ff	e8 00 00 00 00	 call	 _GetString
  00504	83 c4 04	 add	 esp, 4
  00507	50		 push	 eax
  00508	68 6d 04 00 00	 push	 1133			; 0000046dH
  0050d	53		 push	 ebx
  0050e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00514	50		 push	 eax
  00515	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 8144 : 
; 8145 : 			SetDlgItemTextW (hwndDlg, IDC_HW_AES_SUPPORTED_BY_CPU, (wstring (L" ") + (GetString (is_aes_hw_cpu_supported() ? "UISTR_YES" : "UISTR_NO"))).c_str());

  0051b	e8 00 00 00 00	 call	 _is_aes_hw_cpu_supported
  00520	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_09JHINKGCK@UISTR_YES?$AA@
  00525	84 c0		 test	 al, al
  00527	75 05		 jne	 SHORT $LN39@Performanc
  00529	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_08EOJLPPDK@UISTR_NO?$AA@
$LN39@Performanc:
  0052e	6a 01		 push	 1
  00530	33 d2		 xor	 edx, edx
  00532	bf 07 00 00 00	 mov	 edi, 7
  00537	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  0053c	8d 4d 08	 lea	 ecx, DWORD PTR $T195346[ebp]
  0053f	89 7d 20	 mov	 DWORD PTR $T195346[ebp+24], edi
  00542	c7 45 1c 00 00
	00 00		 mov	 DWORD PTR $T195346[ebp+20], 0
  00549	66 89 55 0c	 mov	 WORD PTR $T195346[ebp+4], dx
  0054d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00552	56		 push	 esi
  00553	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  0055a	e8 00 00 00 00	 call	 _GetString
  0055f	50		 push	 eax
  00560	8d 45 08	 lea	 eax, DWORD PTR $T195346[ebp]
  00563	50		 push	 eax
  00564	8d 4d d4	 lea	 ecx, DWORD PTR $T195347[ebp]
  00567	51		 push	 ecx
  00568	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0056d	be 08 00 00 00	 mov	 esi, 8
  00572	83 c4 10	 add	 esp, 16			; 00000010H
  00575	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  00578	72 05		 jb	 SHORT $LN135@Performanc
  0057a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0057d	eb 03		 jmp	 SHORT $LN136@Performanc
$LN135@Performanc:
  0057f	83 c0 04	 add	 eax, 4
$LN136@Performanc:
  00582	50		 push	 eax
  00583	68 69 04 00 00	 push	 1129			; 00000469H
  00588	53		 push	 ebx
  00589	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextW@12
  0058f	39 75 ec	 cmp	 DWORD PTR $T195347[ebp+24], esi
  00592	72 0c		 jb	 SHORT $LN155@Performanc
  00594	8b 55 d8	 mov	 edx, DWORD PTR $T195347[ebp+4]
  00597	52		 push	 edx
  00598	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0059d	83 c4 04	 add	 esp, 4
$LN155@Performanc:
  005a0	33 c0		 xor	 eax, eax
  005a2	89 7d ec	 mov	 DWORD PTR $T195347[ebp+24], edi
  005a5	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T195347[ebp+20], 0
  005ac	66 89 45 d8	 mov	 WORD PTR $T195347[ebp+4], ax
  005b0	39 75 20	 cmp	 DWORD PTR $T195346[ebp+24], esi
  005b3	72 0c		 jb	 SHORT $LN183@Performanc
  005b5	8b 4d 0c	 mov	 ecx, DWORD PTR $T195346[ebp+4]
  005b8	51		 push	 ecx
  005b9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005be	83 c4 04	 add	 esp, 4
$LN183@Performanc:
  005c1	33 d2		 xor	 edx, edx

; 8146 : 
; 8147 : 			ToHyperlink (hwndDlg, IDC_MORE_INFO_ON_HW_ACCELERATION);

  005c3	68 34 04 00 00	 push	 1076			; 00000434H
  005c8	53		 push	 ebx
  005c9	89 7d 20	 mov	 DWORD PTR $T195346[ebp+24], edi
  005cc	c7 45 1c 00 00
	00 00		 mov	 DWORD PTR $T195346[ebp+20], 0
  005d3	66 89 55 0c	 mov	 WORD PTR $T195346[ebp+4], dx
  005d7	e8 00 00 00 00	 call	 _ToHyperlink

; 8148 : 			ToHyperlink (hwndDlg, IDC_MORE_INFO_ON_THREAD_BASED_PARALLELIZATION);

  005dc	68 36 04 00 00	 push	 1078			; 00000436H
  005e1	53		 push	 ebx
  005e2	e8 00 00 00 00	 call	 _ToHyperlink
  005e7	83 c4 10	 add	 esp, 16			; 00000010H
$LN236@Performanc:

; 8149 : 		}
; 8150 : 		return 0;

  005ea	33 c0		 xor	 eax, eax
$LN36@Performanc:

; 8273 : }

  005ec	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  005ef	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  005f6	59		 pop	 ecx
  005f7	5f		 pop	 edi
  005f8	5e		 pop	 esi
  005f9	5b		 pop	 ebx
  005fa	8b 4d 58	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005fd	33 cd		 xor	 ecx, ebp
  005ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00604	83 c5 5c	 add	 ebp, 92			; 0000005cH
  00607	8b e5		 mov	 esp, ebp
  00609	5d		 pop	 ebp
  0060a	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_PerformanceSettingsDlgProc@16$8:
  00000	8d 4d 3c	 lea	 ecx, DWORD PTR _customUserMessage$140351[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_PerformanceSettingsDlgProc@16$4:
  00008	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _s$140253[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$_PerformanceSettingsDlgProc@16$6:
  00013	8d 4d 08	 lea	 ecx, DWORD PTR $T195346[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$_PerformanceSettingsDlgProc@16:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 8a cc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-308]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b 4a 64	 mov	 ecx, DWORD PTR [edx+100]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_PerformanceSettingsDlgProc@16
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_PerformanceSettingsDlgProc@16 ENDP
PUBLIC	??_C@_0BD@EIJPLIHM@NO_VOLUME_SELECTED?$AA@	; `string'
PUBLIC	_MountSelectedVolume
;	COMDAT ??_C@_0BD@EIJPLIHM@NO_VOLUME_SELECTED?$AA@
CONST	SEGMENT
??_C@_0BD@EIJPLIHM@NO_VOLUME_SELECTED?$AA@ DB 'NO_VOLUME_SELECTED', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _MountSelectedVolume
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_mountWithOptions$ = 12					; size = 4
_MountSelectedVolume PROC				; COMDAT

; 8555 : {

  00000	53		 push	 ebx

; 8556 : 	if (!VolumeSelected(hwndDlg))

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _hwndDlg$[esp]
  00005	56		 push	 esi
  00006	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0000c	68 0a 04 00 00	 push	 1034			; 0000040aH
  00011	53		 push	 ebx
  00012	ff d6		 call	 esi
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthA@4
  0001b	85 c0		 test	 eax, eax
  0001d	7f 10		 jg	 SHORT $LN9@MountSelec

; 8557 : 	{
; 8558 : 		Warning ("NO_VOLUME_SELECTED");

  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EIJPLIHM@NO_VOLUME_SELECTED?$AA@

; 8578 : 	}
; 8579 : 	else
; 8580 : 		Warning ("SELECT_FREE_DRIVE");

  00024	e8 00 00 00 00	 call	 _Warning
  00029	83 c4 04	 add	 esp, 4
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx

; 8581 : }

  0002e	c3		 ret	 0
$LN9@MountSelec:

; 8559 : 	}
; 8560 : 	else if (LOWORD (GetSelectedLong (GetDlgItem (hwndDlg, IDC_DRIVELIST))) == TC_MLIST_ITEM_FREE)

  0002f	68 ef 03 00 00	 push	 1007			; 000003efH
  00034	53		 push	 ebx
  00035	ff d6		 call	 esi
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _GetSelectedLong
  0003d	83 c4 04	 add	 esp, 4
  00040	66 85 c0	 test	 ax, ax
  00043	0f 85 92 00 00
	00		 jne	 $LN7@MountSelec

; 8561 : 	{
; 8562 : 		mountOptions = defaultMountOptions;
; 8563 : 		bPrebootPasswordDlgMode = FALSE;
; 8564 : 
; 8565 : 		if (mountWithOptions || GetAsyncKeyState (VK_CONTROL) < 0)

  00049	83 7c 24 10 00	 cmp	 DWORD PTR _mountWithOptions$[esp+4], 0
  0004e	57		 push	 edi
  0004f	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00054	be 00 00 00 00	 mov	 esi, OFFSET ?defaultMountOptions@@3UMountOptions@@A ; defaultMountOptions
  00059	bf 00 00 00 00	 mov	 edi, OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  0005e	f3 a5		 rep movsd
  00060	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bPrebootPasswordDlgMode, 0
  0006a	5f		 pop	 edi
  0006b	75 0d		 jne	 SHORT $LN5@MountSelec
  0006d	6a 11		 push	 17			; 00000011H
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetAsyncKeyState@4
  00075	66 85 c0	 test	 ax, ax
  00078	7d 47		 jge	 SHORT $LN3@MountSelec
$LN5@MountSelec:

; 8566 : 		{
; 8567 : 			if (IDCANCEL == DialogBoxParamW (hInst, 
; 8568 : 				MAKEINTRESOURCEW (IDD_MOUNT_OPTIONS), hwndDlg,
; 8569 : 				(DLGPROC) MountOptionsDlgProc, (LPARAM) &mountOptions))

  0007a	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  0007f	68 00 00 00 00	 push	 OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  00084	68 00 00 00 00	 push	 OFFSET _MountOptionsDlgProc@16
  00089	53		 push	 ebx
  0008a	68 f8 01 00 00	 push	 504			; 000001f8H
  0008f	50		 push	 eax
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  00096	83 f8 02	 cmp	 eax, 2
  00099	74 4d		 je	 SHORT $LN1@MountSelec

; 8570 : 				return;
; 8571 : 
; 8572 : 			if (mountOptions.ProtectHiddenVolume && hidVolProtKeyFilesParam.EnableKeyFiles)

  0009b	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR ?mountOptions@@3UMountOptions@@A+8, 0
  000a2	74 1d		 je	 SHORT $LN3@MountSelec
  000a4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hidVolProtKeyFilesParam, 0
  000ab	74 14		 je	 SHORT $LN3@MountSelec

; 8573 : 				KeyFilesApply (&mountOptions.ProtectedHidVolPassword, hidVolProtKeyFilesParam.FirstKeyFile);

  000ad	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _hidVolProtKeyFilesParam+4
  000b3	51		 push	 ecx
  000b4	68 14 00 00 00	 push	 OFFSET ?mountOptions@@3UMountOptions@@A+20
  000b9	e8 00 00 00 00	 call	 _KeyFilesApply
  000be	83 c4 08	 add	 esp, 8
$LN3@MountSelec:

; 8574 : 		}
; 8575 : 
; 8576 : 		if (CheckMountList ())

  000c1	e8 00 00 00 00	 call	 _CheckMountList
  000c6	85 c0		 test	 eax, eax
  000c8	74 1e		 je	 SHORT $LN1@MountSelec

; 8577 : 			Mount (hwndDlg, 0, 0);

  000ca	6a 00		 push	 0
  000cc	33 c9		 xor	 ecx, ecx
  000ce	8b d3		 mov	 edx, ebx
  000d0	e8 00 00 00 00	 call	 ?Mount@@YAHPAUHWND__@@HPAD@Z ; Mount

; 8578 : 	}
; 8579 : 	else
; 8580 : 		Warning ("SELECT_FREE_DRIVE");

  000d5	83 c4 04	 add	 esp, 4
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx

; 8581 : }

  000da	c3		 ret	 0
$LN7@MountSelec:

; 8578 : 	}
; 8579 : 	else
; 8580 : 		Warning ("SELECT_FREE_DRIVE");

  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PDEAFOMG@SELECT_FREE_DRIVE?$AA@
  000e0	e8 00 00 00 00	 call	 _Warning
  000e5	83 c4 04	 add	 esp, 4
$LN1@MountSelec:
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx

; 8581 : }

  000ea	c3		 ret	 0
_MountSelectedVolume ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@MNPNDAHP@ProductName?$AA@		; `string'
PUBLIC	??_C@_0M@DHIAIDA@CompanyName?$AA@		; `string'
PUBLIC	??_C@_0BA@IMJFJNNG@FileDescription?$AA@		; `string'
PUBLIC	??_C@_0BK@KLKDFMGB@?2StringFileInfo?2?$CF04x?$CF04x?2?$AA@ ; `string'
PUBLIC	??_C@_0BJ@KPNNKBCP@?2VarFileInfo?2Translation?$AA@ ; `string'
PUBLIC	_productName$GSCopy$
PUBLIC	_companyName$GSCopy$
PUBLIC	_description$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z ; GetExecutableImageInformation
EXTRN	_VerQueryValueA@16:PROC
EXTRN	_GetFileVersionInfoA@16:PROC
EXTRN	_err_malloc:PROC
EXTRN	_GetFileVersionInfoSizeA@8:PROC
;	COMDAT ??_C@_0M@MNPNDAHP@ProductName?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
CONST	SEGMENT
??_C@_0M@MNPNDAHP@ProductName?$AA@ DB 'ProductName', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DHIAIDA@CompanyName?$AA@
CONST	SEGMENT
??_C@_0M@DHIAIDA@CompanyName?$AA@ DB 'CompanyName', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IMJFJNNG@FileDescription?$AA@
CONST	SEGMENT
??_C@_0BA@IMJFJNNG@FileDescription?$AA@ DB 'FileDescription', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KLKDFMGB@?2StringFileInfo?2?$CF04x?$CF04x?2?$AA@
CONST	SEGMENT
??_C@_0BK@KLKDFMGB@?2StringFileInfo?2?$CF04x?$CF04x?2?$AA@ DB '\StringFil'
	DB	'eInfo\%04x%04x\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KPNNKBCP@?2VarFileInfo?2Translation?$AA@
CONST	SEGMENT
??_C@_0BJ@KPNNKBCP@?2VarFileInfo?2Translation?$AA@ DB '\VarFileInfo\Trans'
	DB	'lation', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z$7
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
xdata$x	ENDS
;	COMDAT ?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z
_TEXT	SEGMENT
_varSize$ = -244					; size = 4
_description$GSCopy$ = -240				; size = 4
_str$140610 = -240					; size = 4
$T196105 = -236						; size = 4
_buf$ = -236						; size = 4
_finally8592$ = -232					; size = 4
_productName$GSCopy$ = -228				; size = 4
_companyName$GSCopy$ = -224				; size = 4
_fileInfo$ = -220					; size = 4
_handle$ = -216						; size = 4
_langCodes$ = -212					; size = 4
$T196097 = -208						; size = 28
$T196092 = -208						; size = 28
$T196088 = -208						; size = 28
$T196085 = -208						; size = 28
$T196098 = -180						; size = 28
$T196093 = -180						; size = 28
$T196087 = -180						; size = 28
_prefix$140599 = -152					; size = 128
_s$140571 = -152					; size = 136
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_path$ = 8						; size = 4
_version$ = 12						; size = 4
_description$ = 16					; size = 4
_companyName$ = 20					; size = 4
_productName$ = 24					; size = 4
?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z PROC ; GetExecutableImageInformation, COMDAT

; 8585 : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 e4 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+244], eax
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c4		 xor	 eax, esp
  0002d	50		 push	 eax
  0002e	8d 84 24 fc 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+264]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	8b b4 24 0c 01
	00 00		 mov	 esi, DWORD PTR _path$[esp+260]
  00042	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR _description$[esp+260]
  00049	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR _companyName$[esp+260]
  00050	8b 94 24 1c 01
	00 00		 mov	 edx, DWORD PTR _productName$[esp+260]
  00057	8b bc 24 10 01
	00 00		 mov	 edi, DWORD PTR _version$[esp+260]
  0005e	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T196105[esp+264], 0

; 8586 : 	DWORD handle;
; 8587 : 	DWORD size = GetFileVersionInfoSize (path.c_str(), &handle);

  00066	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H

; 8593 : 
; 8594 : 	if (!GetFileVersionInfo (path.c_str(), handle, size, buf))

  0006a	89 44 24 18	 mov	 DWORD PTR _description$GSCopy$[esp+264], eax
  0006e	89 4c 24 28	 mov	 DWORD PTR _companyName$GSCopy$[esp+264], ecx
  00072	89 54 24 24	 mov	 DWORD PTR _productName$GSCopy$[esp+264], edx
  00076	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00079	72 04		 jb	 SHORT $LN41@GetExecuta

; 8586 : 	DWORD handle;
; 8587 : 	DWORD size = GetFileVersionInfoSize (path.c_str(), &handle);

  0007b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0007d	eb 02		 jmp	 SHORT $LN42@GetExecuta
$LN41@GetExecuta:
  0007f	8b c3		 mov	 eax, ebx
$LN42@GetExecuta:
  00081	8d 4c 24 30	 lea	 ecx, DWORD PTR _handle$[esp+264]
  00085	51		 push	 ecx
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _GetFileVersionInfoSizeA@8
  0008c	8b e8		 mov	 ebp, eax

; 8588 : 	if (size == 0)

  0008e	85 ed		 test	 ebp, ebp

; 8589 : 		return FALSE;

  00090	74 3e		 je	 SHORT $LN102@GetExecuta

; 8590 : 
; 8591 : 	void *buf = err_malloc (size);

  00092	55		 push	 ebp
  00093	e8 00 00 00 00	 call	 _err_malloc
  00098	83 c4 04	 add	 esp, 4
  0009b	89 44 24 1c	 mov	 DWORD PTR _buf$[esp+264], eax

; 8592 : 	finally_do_arg (void*, buf, { free (finally_arg); });

  0009f	89 44 24 20	 mov	 DWORD PTR _finally8592$[esp+264], eax

; 8593 : 
; 8594 : 	if (!GetFileVersionInfo (path.c_str(), handle, size, buf))

  000a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000a7	c7 84 24 04 01
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+272], 0
  000b2	72 02		 jb	 SHORT $LN49@GetExecuta
  000b4	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN49@GetExecuta:
  000b6	8b 54 24 30	 mov	 edx, DWORD PTR _handle$[esp+264]
  000ba	50		 push	 eax
  000bb	55		 push	 ebp
  000bc	52		 push	 edx
  000bd	53		 push	 ebx
  000be	e8 00 00 00 00	 call	 _GetFileVersionInfoA@16
  000c3	85 c0		 test	 eax, eax
  000c5	75 10		 jne	 SHORT $LN6@GetExecuta

; 8595 : 		return FALSE;

  000c7	8d 44 24 20	 lea	 eax, DWORD PTR _finally8592$[esp+264]
  000cb	e8 00 00 00 00	 call	 ??1Finally8592@?3??GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@111@Z@QAE@XZ ; `GetExecutableImageInformation'::`4'::Finally8592::~Finally8592
$LN102@GetExecuta:
  000d0	33 c0		 xor	 eax, eax
  000d2	e9 2e 03 00 00	 jmp	 $LN8@GetExecuta
$LN6@GetExecuta:

; 8596 : 
; 8597 : 	version = description = companyName = productName = "";

  000d7	8b 4c 24 24	 mov	 ecx, DWORD PTR _productName$GSCopy$[esp+264]
  000db	6a 00		 push	 0
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000e2	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000e7	8b 4c 24 28	 mov	 ecx, DWORD PTR _companyName$GSCopy$[esp+264]
  000eb	6a ff		 push	 -1
  000ed	6a 00		 push	 0
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000f5	8b 74 24 18	 mov	 esi, DWORD PTR _description$GSCopy$[esp+264]
  000f9	6a ff		 push	 -1
  000fb	6a 00		 push	 0
  000fd	50		 push	 eax
  000fe	8b ce		 mov	 ecx, esi
  00100	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00105	6a ff		 push	 -1
  00107	6a 00		 push	 0
  00109	50		 push	 eax
  0010a	8b cf		 mov	 ecx, edi
  0010c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 8598 : 
; 8599 : 	UINT varSize;
; 8600 : 	VS_FIXEDFILEINFO *fileInfo;
; 8601 : 	if (VerQueryValue (buf, "\\", (LPVOID *) &fileInfo, &varSize) && varSize > 0)

  00111	8b 6c 24 1c	 mov	 ebp, DWORD PTR _buf$[esp+264]
  00115	8d 44 24 14	 lea	 eax, DWORD PTR _varSize$[esp+264]
  00119	50		 push	 eax
  0011a	8d 4c 24 30	 lea	 ecx, DWORD PTR _fileInfo$[esp+268]
  0011e	51		 push	 ecx
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_01KICIPPFI@?2?$AA@
  00124	55		 push	 ebp
  00125	e8 00 00 00 00	 call	 _VerQueryValueA@16
  0012a	85 c0		 test	 eax, eax
  0012c	0f 84 d4 00 00
	00		 je	 $LN78@GetExecuta
  00132	83 7c 24 14 00	 cmp	 DWORD PTR _varSize$[esp+264], 0
  00137	0f 86 c9 00 00
	00		 jbe	 $LN78@GetExecuta

; 8602 : 	{
; 8603 : 		stringstream s;

  0013d	6a 01		 push	 1
  0013f	6a 03		 push	 3
  00141	8d 4c 24 78	 lea	 ecx, DWORD PTR _s$140571[esp+272]
  00145	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >

; 8604 : 		s << HIWORD (fileInfo->dwFileVersionMS) << '.' << LOWORD (fileInfo->dwFileVersionMS) << '.' << HIWORD (fileInfo->dwFileVersionLS) << '.' << LOWORD (fileInfo->dwFileVersionLS);

  0014a	8b 44 24 2c	 mov	 eax, DWORD PTR _fileInfo$[esp+264]
  0014e	0f b7 50 0c	 movzx	 edx, WORD PTR [eax+12]
  00152	0f b7 48 0e	 movzx	 ecx, WORD PTR [eax+14]
  00156	52		 push	 edx
  00157	0f b7 50 08	 movzx	 edx, WORD PTR [eax+8]
  0015b	0f b7 40 0a	 movzx	 eax, WORD PTR [eax+10]
  0015f	6a 2e		 push	 46			; 0000002eH
  00161	51		 push	 ecx
  00162	6a 2e		 push	 46			; 0000002eH
  00164	52		 push	 edx
  00165	6a 2e		 push	 46			; 0000002eH
  00167	50		 push	 eax
  00168	8d 8c 24 94 00
	00 00		 lea	 ecx, DWORD PTR _s$140571[esp+300]
  0016f	c6 84 24 20 01
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+300], 1
  00177	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0017c	50		 push	 eax
  0017d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00182	83 c4 08	 add	 esp, 8
  00185	8b c8		 mov	 ecx, eax
  00187	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0018c	50		 push	 eax
  0018d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00192	83 c4 08	 add	 esp, 8
  00195	8b c8		 mov	 ecx, eax
  00197	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  001a2	83 c4 08	 add	 esp, 8
  001a5	8b c8		 mov	 ecx, eax
  001a7	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 8605 : 		version = s.str();

  001ac	8d 4c 24 38	 lea	 ecx, DWORD PTR $T196085[esp+264]
  001b0	51		 push	 ecx
  001b1	8d 4c 24 74	 lea	 ecx, DWORD PTR _s$140571[esp+268]
  001b5	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  001ba	6a ff		 push	 -1
  001bc	6a 00		 push	 0
  001be	50		 push	 eax
  001bf	8b cf		 mov	 ecx, edi
  001c1	c6 84 24 10 01
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+284], 2
  001c9	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  001ce	8d 4c 24 38	 lea	 ecx, DWORD PTR $T196085[esp+264]
  001d2	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 8606 : 	}

  001d7	8d 8c 24 c4 00
	00 00		 lea	 ecx, DWORD PTR _s$140571[esp+348]
  001de	c6 84 24 04 01
	00 00 00	 mov	 BYTE PTR __$EHRec$[esp+272], 0
  001e6	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  001eb	8d 94 24 c4 00
	00 00		 lea	 edx, DWORD PTR _s$140571[esp+348]
  001f2	52		 push	 edx
  001f3	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _s$140571[esp+352], OFFSET ??_7ios_base@std@@6B@
  001fe	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00203	83 c4 04	 add	 esp, 4
$LN78@GetExecuta:

; 8607 : 
; 8608 : 	DWORD *langCodes;
; 8609 : 	if (VerQueryValue (buf, "\\VarFileInfo\\Translation", (LPVOID *) &langCodes, &varSize) && varSize >= sizeof (DWORD))

  00206	8d 44 24 14	 lea	 eax, DWORD PTR _varSize$[esp+264]
  0020a	50		 push	 eax
  0020b	8d 4c 24 38	 lea	 ecx, DWORD PTR _langCodes$[esp+268]
  0020f	51		 push	 ecx
  00210	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KPNNKBCP@?2VarFileInfo?2Translation?$AA@
  00215	55		 push	 ebp
  00216	e8 00 00 00 00	 call	 _VerQueryValueA@16
  0021b	85 c0		 test	 eax, eax
  0021d	0f 84 d4 01 00
	00		 je	 $LN1@GetExecuta
  00223	83 7c 24 14 04	 cmp	 DWORD PTR _varSize$[esp+264], 4
  00228	0f 82 c9 01 00
	00		 jb	 $LN1@GetExecuta

; 8610 : 	{
; 8611 : 		char prefix[128];
; 8612 : 		sprintf_s (prefix, sizeof (prefix), "\\StringFileInfo\\%04x%04x\\", LOWORD (langCodes[0]), HIWORD (langCodes[0]));

  0022e	8b 44 24 34	 mov	 eax, DWORD PTR _langCodes$[esp+264]
  00232	0f b7 50 02	 movzx	 edx, WORD PTR [eax+2]
  00236	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00239	52		 push	 edx
  0023a	50		 push	 eax
  0023b	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@KLKDFMGB@?2StringFileInfo?2?$CF04x?$CF04x?2?$AA@
  00240	8d 4c 24 7c	 lea	 ecx, DWORD PTR _prefix$140599[esp+276]
  00244	68 80 00 00 00	 push	 128			; 00000080H
  00249	51		 push	 ecx
  0024a	e8 00 00 00 00	 call	 _sprintf_s
  0024f	83 c4 14	 add	 esp, 20			; 00000014H

; 8613 : 
; 8614 : 		char *str;
; 8615 : 		if (VerQueryValue (buf, (string (prefix) + "FileDescription").c_str(), (LPVOID *) &str, &varSize) && varSize > 0)

  00252	8d 54 24 70	 lea	 edx, DWORD PTR _prefix$140599[esp+264]
  00256	52		 push	 edx
  00257	8d 4c 24 58	 lea	 ecx, DWORD PTR $T196087[esp+268]
  0025b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00260	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IMJFJNNG@FileDescription?$AA@
  00265	50		 push	 eax
  00266	8d 44 24 40	 lea	 eax, DWORD PTR $T196088[esp+272]
  0026a	50		 push	 eax
  0026b	c6 84 24 10 01
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+284], 3
  00273	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR $T196105[esp+276], 1
  0027b	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00280	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  00285	83 c4 0c	 add	 esp, 12			; 0000000cH
  00288	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  0028b	72 05		 jb	 SHORT $LN84@GetExecuta
  0028d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00290	eb 03		 jmp	 SHORT $LN85@GetExecuta
$LN84@GetExecuta:
  00292	83 c0 04	 add	 eax, 4
$LN85@GetExecuta:
  00295	8d 4c 24 14	 lea	 ecx, DWORD PTR _varSize$[esp+264]
  00299	51		 push	 ecx
  0029a	8d 54 24 1c	 lea	 edx, DWORD PTR _str$140610[esp+268]
  0029e	52		 push	 edx
  0029f	50		 push	 eax
  002a0	55		 push	 ebp
  002a1	e8 00 00 00 00	 call	 _VerQueryValueA@16
  002a6	85 c0		 test	 eax, eax
  002a8	74 0b		 je	 SHORT $LN10@GetExecuta
  002aa	83 7c 24 14 00	 cmp	 DWORD PTR _varSize$[esp+264], 0
  002af	76 04		 jbe	 SHORT $LN10@GetExecuta
  002b1	b3 01		 mov	 bl, 1
  002b3	eb 02		 jmp	 SHORT $LN11@GetExecuta
$LN10@GetExecuta:
  002b5	32 db		 xor	 bl, bl
$LN11@GetExecuta:
  002b7	8d 4c 24 38	 lea	 ecx, DWORD PTR $T196088[esp+264]
  002bb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002c0	8d 4c 24 54	 lea	 ecx, DWORD PTR $T196087[esp+264]
  002c4	c7 84 24 04 01
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+272], 0
  002cf	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002d4	84 db		 test	 bl, bl
  002d6	74 0c		 je	 SHORT $LN3@GetExecuta

; 8616 : 			description = str;

  002d8	8b 44 24 18	 mov	 eax, DWORD PTR _str$140610[esp+264]
  002dc	50		 push	 eax
  002dd	8b ce		 mov	 ecx, esi
  002df	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
$LN3@GetExecuta:

; 8617 : 
; 8618 : 		if (VerQueryValue (buf, (string (prefix) + "CompanyName").c_str(), (LPVOID *) &str, &varSize) && varSize > 0)

  002e4	8d 4c 24 70	 lea	 ecx, DWORD PTR _prefix$140599[esp+264]
  002e8	51		 push	 ecx
  002e9	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T196092[esp+268]
  002ed	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  002f2	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DHIAIDA@CompanyName?$AA@
  002f7	50		 push	 eax
  002f8	8d 54 24 5c	 lea	 edx, DWORD PTR $T196093[esp+272]
  002fc	52		 push	 edx
  002fd	c6 84 24 10 01
	00 00 04	 mov	 BYTE PTR __$EHRec$[esp+284], 4
  00305	c7 44 24 28 04
	00 00 00	 mov	 DWORD PTR $T196105[esp+276], 4
  0030d	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00312	83 c4 0c	 add	 esp, 12			; 0000000cH
  00315	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  00318	72 05		 jb	 SHORT $LN90@GetExecuta
  0031a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0031d	eb 03		 jmp	 SHORT $LN91@GetExecuta
$LN90@GetExecuta:
  0031f	83 c0 04	 add	 eax, 4
$LN91@GetExecuta:
  00322	8d 4c 24 14	 lea	 ecx, DWORD PTR _varSize$[esp+264]
  00326	51		 push	 ecx
  00327	8d 54 24 1c	 lea	 edx, DWORD PTR _str$140610[esp+268]
  0032b	52		 push	 edx
  0032c	50		 push	 eax
  0032d	55		 push	 ebp
  0032e	e8 00 00 00 00	 call	 _VerQueryValueA@16
  00333	85 c0		 test	 eax, eax
  00335	74 0b		 je	 SHORT $LN12@GetExecuta
  00337	83 7c 24 14 00	 cmp	 DWORD PTR _varSize$[esp+264], 0
  0033c	76 04		 jbe	 SHORT $LN12@GetExecuta
  0033e	b3 01		 mov	 bl, 1
  00340	eb 02		 jmp	 SHORT $LN13@GetExecuta
$LN12@GetExecuta:
  00342	32 db		 xor	 bl, bl
$LN13@GetExecuta:
  00344	8d 4c 24 54	 lea	 ecx, DWORD PTR $T196093[esp+264]
  00348	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0034d	33 f6		 xor	 esi, esi
  0034f	8d 4c 24 38	 lea	 ecx, DWORD PTR $T196092[esp+264]
  00353	89 b4 24 04 01
	00 00		 mov	 DWORD PTR __$EHRec$[esp+272], esi
  0035a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0035f	84 db		 test	 bl, bl
  00361	74 0e		 je	 SHORT $LN2@GetExecuta

; 8619 : 			companyName = str;

  00363	8b 44 24 18	 mov	 eax, DWORD PTR _str$140610[esp+264]
  00367	8b 4c 24 28	 mov	 ecx, DWORD PTR _companyName$GSCopy$[esp+264]
  0036b	50		 push	 eax
  0036c	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
$LN2@GetExecuta:

; 8620 : 
; 8621 : 		if (VerQueryValue (buf, (string (prefix) + "ProductName").c_str(), (LPVOID *) &str, &varSize) && varSize > 0)

  00371	8d 4c 24 70	 lea	 ecx, DWORD PTR _prefix$140599[esp+264]
  00375	51		 push	 ecx
  00376	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T196097[esp+268]
  0037a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0037f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MNPNDAHP@ProductName?$AA@
  00384	50		 push	 eax
  00385	8d 54 24 5c	 lea	 edx, DWORD PTR $T196098[esp+272]
  00389	52		 push	 edx
  0038a	c6 84 24 10 01
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+284], 5
  00392	89 7c 24 28	 mov	 DWORD PTR $T196105[esp+276], edi
  00396	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0039b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0039e	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  003a1	72 05		 jb	 SHORT $LN96@GetExecuta
  003a3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  003a6	eb 03		 jmp	 SHORT $LN97@GetExecuta
$LN96@GetExecuta:
  003a8	83 c0 04	 add	 eax, 4
$LN97@GetExecuta:
  003ab	8d 4c 24 14	 lea	 ecx, DWORD PTR _varSize$[esp+264]
  003af	51		 push	 ecx
  003b0	8d 54 24 1c	 lea	 edx, DWORD PTR _str$140610[esp+268]
  003b4	52		 push	 edx
  003b5	50		 push	 eax
  003b6	55		 push	 ebp
  003b7	e8 00 00 00 00	 call	 _VerQueryValueA@16
  003bc	85 c0		 test	 eax, eax
  003be	74 0a		 je	 SHORT $LN14@GetExecuta
  003c0	39 74 24 14	 cmp	 DWORD PTR _varSize$[esp+264], esi
  003c4	76 04		 jbe	 SHORT $LN14@GetExecuta
  003c6	b3 01		 mov	 bl, 1
  003c8	eb 02		 jmp	 SHORT $LN15@GetExecuta
$LN14@GetExecuta:
  003ca	32 db		 xor	 bl, bl
$LN15@GetExecuta:
  003cc	8d 4c 24 54	 lea	 ecx, DWORD PTR $T196098[esp+264]
  003d0	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003d5	8d 4c 24 38	 lea	 ecx, DWORD PTR $T196097[esp+264]
  003d9	89 b4 24 04 01
	00 00		 mov	 DWORD PTR __$EHRec$[esp+272], esi
  003e0	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003e5	84 db		 test	 bl, bl
  003e7	74 0e		 je	 SHORT $LN1@GetExecuta

; 8622 : 			productName = str;

  003e9	8b 44 24 18	 mov	 eax, DWORD PTR _str$140610[esp+264]
  003ed	8b 4c 24 24	 mov	 ecx, DWORD PTR _productName$GSCopy$[esp+264]
  003f1	50		 push	 eax
  003f2	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
$LN1@GetExecuta:

; 8623 : 	}
; 8624 : 
; 8625 : 	return TRUE;

  003f7	8d 44 24 20	 lea	 eax, DWORD PTR _finally8592$[esp+264]
  003fb	e8 00 00 00 00	 call	 ??1Finally8592@?3??GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@111@Z@QAE@XZ ; `GetExecutableImageInformation'::`4'::Finally8592::~Finally8592
  00400	b8 01 00 00 00	 mov	 eax, 1
$LN8@GetExecuta:

; 8626 : }

  00405	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+264]
  0040c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00413	59		 pop	 ecx
  00414	5f		 pop	 edi
  00415	5e		 pop	 esi
  00416	5d		 pop	 ebp
  00417	5b		 pop	 ebx
  00418	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+244]
  0041f	33 cc		 xor	 ecx, esp
  00421	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00426	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  0042c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z$0:
  00000	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _finally8592$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1Finally8592@?3??GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@111@Z@QAE@XZ ; `GetExecutableImageInformation'::`4'::Finally8592::~Finally8592
__unwindfunclet$?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z$1:
  0000b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _s$140571[ebp]
  00011	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z$2:
  00016	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T196085[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z$3:
  00021	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR $T196105[ebp]
  00027	83 e0 01	 and	 eax, 1
  0002a	0f 84 12 00 00
	00		 je	 $LN20@GetExecuta
  00030	83 a5 14 ff ff
	ff fe		 and	 DWORD PTR $T196105[ebp], -2 ; fffffffeH
  00037	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T196087[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN20@GetExecuta:
  00042	c3		 ret	 0
__unwindfunclet$?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z$5:
  00043	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR $T196105[ebp]
  00049	83 e0 04	 and	 eax, 4
  0004c	0f 84 12 00 00
	00		 je	 $LN26@GetExecuta
  00052	83 a5 14 ff ff
	ff fb		 and	 DWORD PTR $T196105[ebp], -5 ; fffffffbH
  00059	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T196092[ebp]
  0005f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN26@GetExecuta:
  00064	c3		 ret	 0
__unwindfunclet$?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z$7:
  00065	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR $T196105[ebp]
  0006b	83 e0 10	 and	 eax, 16			; 00000010H
  0006e	0f 84 12 00 00
	00		 je	 $LN32@GetExecuta
  00074	83 a5 14 ff ff
	ff ef		 and	 DWORD PTR $T196105[ebp], -17 ; ffffffefH
  0007b	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T196097[ebp]
  00081	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN32@GetExecuta:
  00086	c3		 ret	 0
__ehhandler$?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z:
  00087	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0008b	8d 82 08 ff ff
	ff		 lea	 eax, DWORD PTR [edx-248]
  00091	8b 8a 04 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-252]
  00097	33 c8		 xor	 ecx, eax
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	83 c0 10	 add	 eax, 16			; 00000010H
  000a1	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000a4	33 c8		 xor	 ecx, eax
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z
  000b0	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z ENDP ; GetExecutableImageInformation
PUBLIC	?insert@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@ABUFavoriteVolume@CipherShed@@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::insert
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?insert@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@ABUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
__Tmp$196461 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
__Val$ = 20						; size = 4
?insert@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@ABUFavoriteVolume@CipherShed@@@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

  00007	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0000a	57		 push	 edi
  0000b	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  0000e	8b cb		 mov	 ecx, ebx
  00010	2b cf		 sub	 ecx, edi
  00012	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00017	f7 e9		 imul	 ecx
  00019	03 d1		 add	 edx, ecx
  0001b	c1 fa 06	 sar	 edx, 6
  0001e	8b c2		 mov	 eax, edx
  00020	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00023	03 c2		 add	 eax, edx
  00025	75 04		 jne	 SHORT $LN3@insert@4
  00027	33 ff		 xor	 edi, edi
  00029	eb 35		 jmp	 SHORT $LN4@insert@4
$LN3@insert@4:
  0002b	3b fb		 cmp	 edi, ebx
  0002d	76 05		 jbe	 SHORT $LN13@insert@4
  0002f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN13@insert@4:
  00034	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Where$[esp+16]
  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 04		 je	 SHORT $LN29@insert@4
  0003e	3b c8		 cmp	 ecx, eax
  00040	74 05		 je	 SHORT $LN28@insert@4
$LN29@insert@4:
  00042	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@insert@4:
  00047	8b 4c 24 20	 mov	 ecx, DWORD PTR __Where$[esp+20]
  0004b	2b cf		 sub	 ecx, edi
  0004d	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00052	f7 e9		 imul	 ecx
  00054	03 d1		 add	 edx, ecx
  00056	c1 fa 06	 sar	 edx, 6
  00059	8b fa		 mov	 edi, edx
  0005b	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0005e	03 fa		 add	 edi, edx
$LN4@insert@4:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

  00060	8b 4c 24 24	 mov	 ecx, DWORD PTR __Val$[esp+16]
  00064	8b 54 24 20	 mov	 edx, DWORD PTR __Where$[esp+20]
  00068	8b 44 24 1c	 mov	 eax, DWORD PTR __Where$[esp+16]
  0006c	51		 push	 ecx
  0006d	6a 01		 push	 1
  0006f	52		 push	 edx
  00070	50		 push	 eax
  00071	8b ce		 mov	 ecx, esi
  00073	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@IABUFavoriteVolume@CipherShed@@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Insert_n

; 878  : 		return (begin() + _Off);

  00078	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  0007b	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  0007e	76 05		 jbe	 SHORT $LN43@insert@4
  00080	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN43@insert@4:
  00085	8b 36		 mov	 esi, DWORD PTR [esi]
  00087	57		 push	 edi
  00088	8d 4c 24 10	 lea	 ecx, DWORD PTR __Tmp$196461[esp+24]
  0008c	89 74 24 10	 mov	 DWORD PTR __Tmp$196461[esp+24], esi
  00090	89 5c 24 14	 mov	 DWORD PTR __Tmp$196461[esp+28], ebx
  00094	e8 00 00 00 00	 call	 ??Y?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator+=
  00099	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  0009d	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Tmp$196461[esp+20]
  000a1	8b 54 24 10	 mov	 edx, DWORD PTR __Tmp$196461[esp+24]
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	89 08		 mov	 DWORD PTR [eax], ecx
  000a9	89 50 04	 mov	 DWORD PTR [eax+4], edx
  000ac	5b		 pop	 ebx

; 879  : 		}

  000ad	83 c4 08	 add	 esp, 8
  000b0	c2 10 00	 ret	 16			; 00000010H
?insert@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@ABUFavoriteVolume@CipherShed@@@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::insert
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
$T196468 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT

; 69   : 		{

  00000	51		 push	 ecx

; 70   : 			return ContainerForward <T> (container);

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR _container$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	50		 push	 eax
  0000b	8b ce		 mov	 ecx, esi
  0000d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T196468[esp+12], 0
  00015	e8 00 00 00 00	 call	 ??0?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::ContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi

; 71   : 		}

  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@01@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@01@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
_TEXT	SEGMENT
$T196473 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@01@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT

; 69   : 		{

  00000	51		 push	 ecx

; 70   : 			return ContainerForward <T> (container);

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR _container$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	50		 push	 eax
  0000b	8b ce		 mov	 ecx, esi
  0000d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T196473[esp+12], 0
  00015	e8 00 00 00 00	 call	 ??0?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@QAE@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::ContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi

; 71   : 		}

  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??$GetContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@01@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z
_TEXT	SEGMENT
$T196506 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$196509 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$196509[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T196506[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T196506[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 14	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 10	 mov	 edx, DWORD PTR __First$[esp+8]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 18	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 1142 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@std@@@Z
_TEXT	SEGMENT
$T196526 = -4						; size = 1
__Cat$196530 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

  00000	51		 push	 ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

  00001	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T196526[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T196526[esp+4]
  0000c	8b 0c 24	 mov	 ecx, DWORD PTR __Cat$196530[esp+4]
  0000f	50		 push	 eax
  00010	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+4]
  00014	51		 push	 ecx
  00015	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00019	52		 push	 edx
  0001a	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >

; 943  : 	}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c3		 ret	 0
??$unchecked_uninitialized_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??_7?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`vftable'
PUBLIC	??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
PUBLIC	??_R4?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?IsNotEnd@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::Next
EXTRN	??_E?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD 00H ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShe'
	DB	'd@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForE'
	DB	'ach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ DD 00H ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ DD FLAT:??_R4?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\platform\foreach.h
xdata$x	ENDS
;	COMDAT ??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002a	33 db		 xor	 ebx, ebx
  0002c	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00030	88 5e 05	 mov	 BYTE PTR [esi+5], bl
  00033	8b 44 24 24	 mov	 eax, DWORD PTR _container$[esp+28]
  00037	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0003a	50		 push	 eax
  0003b	8b cf		 mov	 ecx, edi
  0003d	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
  00047	e8 00 00 00 00	 call	 ??0?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@ABV01@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
  0004c	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0004f	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
  00052	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00055	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00057	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
  0005a	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00062	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00065	8b 07		 mov	 eax, DWORD PTR [edi]
  00067	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0006a	8b c6		 mov	 eax, esi
  0006c	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00070	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00077	59		 pop	 ecx
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
;	COMDAT ?Next@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00006	85 c0		 test	 eax, eax
  00008	75 0c		 jne	 SHORT $LN25@Next@4
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN19@Next@4
$LN25@Next@4:
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	eb 02		 jmp	 SHORT $LN20@Next@4
$LN19@Next@4:
  0001a	33 c0		 xor	 eax, eax
$LN20@Next@4:
  0001c	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0001f	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00022	75 05		 jne	 SHORT $LN5@Next@4
  00024	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Next@4:
  00029	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00031	5e		 pop	 esi
  00032	c3		 ret	 0
?Next@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::Next
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00007	74 21		 je	 SHORT $LN3@IsNotEnd@4
  00009	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0000c	85 c0		 test	 eax, eax
  0000e	74 05		 je	 SHORT $LN10@IsNotEnd@4
  00010	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00013	74 05		 je	 SHORT $LN9@IsNotEnd@4
$LN10@IsNotEnd@4:
  00015	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@IsNotEnd@4:
  0001a	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0001d	3b 46 28	 cmp	 eax, DWORD PTR [esi+40]
  00020	74 08		 je	 SHORT $LN3@IsNotEnd@4
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
$LN3@IsNotEnd@4:
  0002a	32 c0		 xor	 al, al
  0002c	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::IsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?clear@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::clear
  0000e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00019	51		 push	 ecx
  0001a	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
  00029	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  0002e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00034	74 09		 je	 SHORT $LN30@scalar@30
  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003c	83 c4 04	 add	 esp, 4
$LN30@scalar@30:
  0003f	8b c7		 mov	 eax, edi
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<HostDevice *,HostDevice *,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z
_TEXT	SEGMENT
$T196953 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$196956 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<HostDevice *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$196956[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T196953[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T196953[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 865  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Unchecked_uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<HostDevice *,HostDevice *,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??_C@_04PMOCAHAA@open?$AA@			; `string'
PUBLIC	??_C@_0BG@PCCHGHDE@ASK_SEND_ERROR_REPORT?$AA@	; `string'
PUBLIC	??_C@_0BE@IDLEBLFG@SYSTEM_CRASH_REPORT?$AA@	; `string'
PUBLIC	??_C@_08FNMHHHDJ@?$CGdrvver?$DN?$AA@		; `string'
PUBLIC	??_C@_0BL@NBNBFOIP@SYSTEM_CRASH_NO_CIPHERSHED?$AA@ ; `string'
PUBLIC	??_C@_03BLJJGHJH@?5?5?$CI?$AA@			; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ?$AA@			; `string'
PUBLIC	??_C@_03FEFIDNAB@?$DL?5?5?$AA@			; `string'
PUBLIC	??_C@_0BD@JHJKCMBK@?2System32?2drivers?2?$AA@	; `string'
PUBLIC	??_C@_0BL@CMMKPOGK@SYSTEM_CRASH_UPDATE_DRIVER?$AA@ ; `string'
PUBLIC	??_C@_04GMGPCCGD@?4SYS?$AA@			; `string'
PUBLIC	??_C@_01NEMOKFLO@?$DN?$AA@			; `string'
PUBLIC	??_C@_03EGAGLKPK@?$CGst?$AA@			; `string'
PUBLIC	??_C@_0KE@GCNIJMJG@https?3?1?1ciphershed?4org?1applink?$DPv@ ; `string'
PUBLIC	??_C@_01HIHLOKLC@1?$AA@				; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
PUBLIC	??_C@_01MIFGBAGJ@?$CL?$AA@			; `string'
PUBLIC	??_C@_0P@NOCFBPIP@STACK_COMMAND?3?$AA@		; `string'
PUBLIC	??_C@_0N@MBCBPEAG@FOLLOWUP_IP?3?$AA@		; `string'
PUBLIC	??_C@_0M@HHAMOJPD@STACK_TEXT?3?$AA@		; `string'
PUBLIC	??_C@_0M@CBBALMMJ@IMAGE_NAME?3?$AA@		; `string'
PUBLIC	??_C@_0BI@BFMPHOAO@?$CFI64X?5?$CFI64X?5?$CFI64X?5?$CFI64X?$AA@ ; `string'
PUBLIC	??_C@_0L@BOIEBBIA@Arguments?5?$AA@		; `string'
PUBLIC	??_C@_05MIPPMNIM@?$CFI64X?$AA@			; `string'
PUBLIC	??_C@_0BI@NIGJHOFH@ERR_PARAMETER_INCORRECT?$AA@	; `string'
PUBLIC	??_C@_0P@IAENJCO@Bugcheck?5code?5?$AA@		; `string'
PUBLIC	??_C@_09EMKKFGIH@TrueCrypt?$AA@			; `string'
PUBLIC	??_C@_0BD@JOHJKMBG@DEBUGGER_NOT_FOUND?$AA@	; `string'
PUBLIC	??_C@_06JPDBKGIP@?$CC?5?9z?5?$CC?$AA@		; `string'
PUBLIC	??_C@_0EP@EEFBGPBB@?$CC?5?9y?5http?3?1?1msdl?4microsoft?4com?1d@ ; `string'
PUBLIC	??_C@_06EICGEFIM@kd?4exe?$AA@			; `string'
PUBLIC	??_C@_0BC@OEHGBEPK@?2Debuggers?2kd?4exe?$AA@	; `string'
PUBLIC	??_C@_08DPIDHLKL@?3?2WinDDK?$AA@		; `string'
PUBLIC	??_C@_01NBENCBCI@?$CK?$AA@			; `string'
PUBLIC	??_C@_0BP@EAPKEFHJ@?2Debugging?5Tools?5for?5Windows?5?$CI?$AA@ ; `string'
PUBLIC	??_C@_08BPJIFMCN@?$CJ?2kd?4exe?$AA@		; `string'
PUBLIC	??_C@_03NDFEINMN@x86?$AA@			; `string'
PUBLIC	??_C@_03OLPMMCEF@x64?$AA@			; `string'
PUBLIC	??_C@_06NOEMODMP@?5?$CIx86?$CJ?$AA@		; `string'
PUBLIC	??_C@_0BL@KIJCEJCM@SYSTEM_CRASH_ANALYSIS_INFO?$AA@ ; `string'
PUBLIC	??_C@_0FH@JCHBNCDL@msiexec?4exe?5?1qb?5?1i?5http?3?1?1cipher@ ; `string'
PUBLIC	??_C@_02KDNKADLA@86?$AA@			; `string'
PUBLIC	??_C@_02JLHCEMDI@64?$AA@			; `string'
PUBLIC	??_C@_0BF@MBNOGAIL@ASK_DEBUGGER_INSTALL?$AA@	; `string'
PUBLIC	??_C@_0CC@MBEAAPIP@Debugging?5Tools?5for?5Windows?5?$CIx86@ ; `string'
PUBLIC	??_C@_0CC@CCBLKMNC@Debugging?5Tools?5for?5Windows?5?$CIx64@ ; `string'
PUBLIC	??_C@_0BA@NBHAJNOF@?4true_crypt?4dmp?$AA@	; `string'
PUBLIC	??_C@_0BC@FCCCOAIF@NO_MINIDUMP_FOUND?$AA@	; `string'
PUBLIC	??_C@_09PEDFGHAD@?2Minidump?$AA@		; `string'
PUBLIC	??_C@_05ENIPKILI@?$CK?4dmp?$AA@			; `string'
PUBLIC	??_C@_0M@DAMBDOGJ@?2MEMORY?4DMP?$AA@		; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_AnalyzeKernelMiniDump
EXTRN	__imp__ShellExecuteA@24:PROC
EXTRN	?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:PROC ; SingleStringToWide
EXTRN	_CurrentOSMajor:DWORD
EXTRN	_CurrentOSMinor:DWORD
EXTRN	_CurrentOSServicePack:DWORD
EXTRN	?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:PROC ; GetWindowsEdition
EXTRN	?StringToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z:PROC ; StringToUpperCase
EXTRN	_EnableElevatedCursorChange:PROC
EXTRN	__access:PROC
EXTRN	__imp__SHGetSpecialFolderPathA@16:PROC
EXTRN	__imp__SetHandleInformation@12:PROC
EXTRN	__imp__CreatePipe@16:PROC
EXTRN	__imp__GetExitCodeProcess@8:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	_IsApplicationInstalled:PROC
EXTRN	_Is64BitOs:PROC
EXTRN	?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z:PROC ; FindLatestFileOrDirectory
EXTRN	__imp__GetWindowsDirectoryA@8:PROC
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
CONST	SEGMENT
??_C@_04PMOCAHAA@open?$AA@ DB 'open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PCCHGHDE@ASK_SEND_ERROR_REPORT?$AA@
CONST	SEGMENT
??_C@_0BG@PCCHGHDE@ASK_SEND_ERROR_REPORT?$AA@ DB 'ASK_SEND_ERROR_REPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IDLEBLFG@SYSTEM_CRASH_REPORT?$AA@
CONST	SEGMENT
??_C@_0BE@IDLEBLFG@SYSTEM_CRASH_REPORT?$AA@ DB 'SYSTEM_CRASH_REPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FNMHHHDJ@?$CGdrvver?$DN?$AA@
CONST	SEGMENT
??_C@_08FNMHHHDJ@?$CGdrvver?$DN?$AA@ DB '&drvver=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NBNBFOIP@SYSTEM_CRASH_NO_CIPHERSHED?$AA@
CONST	SEGMENT
??_C@_0BL@NBNBFOIP@SYSTEM_CRASH_NO_CIPHERSHED?$AA@ DB 'SYSTEM_CRASH_NO_CI'
	DB	'PHERSHED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03BLJJGHJH@?5?5?$CI?$AA@
CONST	SEGMENT
??_C@_03BLJJGHJH@?5?5?$CI?$AA@ DB '  (', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ?$AA@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ?$AA@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FEFIDNAB@?$DL?5?5?$AA@
CONST	SEGMENT
??_C@_03FEFIDNAB@?$DL?5?5?$AA@ DB ';  ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JHJKCMBK@?2System32?2drivers?2?$AA@
CONST	SEGMENT
??_C@_0BD@JHJKCMBK@?2System32?2drivers?2?$AA@ DB '\System32\drivers\', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CMMKPOGK@SYSTEM_CRASH_UPDATE_DRIVER?$AA@
CONST	SEGMENT
??_C@_0BL@CMMKPOGK@SYSTEM_CRASH_UPDATE_DRIVER?$AA@ DB 'SYSTEM_CRASH_UPDAT'
	DB	'E_DRIVER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMGPCCGD@?4SYS?$AA@
CONST	SEGMENT
??_C@_04GMGPCCGD@?4SYS?$AA@ DB '.SYS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01NEMOKFLO@?$DN?$AA@
CONST	SEGMENT
??_C@_01NEMOKFLO@?$DN?$AA@ DB '=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03EGAGLKPK@?$CGst?$AA@
CONST	SEGMENT
??_C@_03EGAGLKPK@?$CGst?$AA@ DB '&st', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0KE@GCNIJMJG@https?3?1?1ciphershed?4org?1applink?$DPv@
CONST	SEGMENT
??_C@_0KE@GCNIJMJG@https?3?1?1ciphershed?4org?1applink?$DPv@ DB 'https://'
	DB	'ciphershed.org/applink?version=0.7.4.1&dest=syserr-report&os='
	DB	'%s&osver=%d.%d.%d&arch=%s&err=%I64x&arg1=%I64x&arg2=%I64x&arg'
	DB	'3=%I64x&arg4=%I64x&flag=%s&drv=%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT
??_C@_01HIHLOKLC@1?$AA@ DB '1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MIFGBAGJ@?$CL?$AA@
CONST	SEGMENT
??_C@_01MIFGBAGJ@?$CL?$AA@ DB '+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NOCFBPIP@STACK_COMMAND?3?$AA@
CONST	SEGMENT
??_C@_0P@NOCFBPIP@STACK_COMMAND?3?$AA@ DB 'STACK_COMMAND:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MBCBPEAG@FOLLOWUP_IP?3?$AA@
CONST	SEGMENT
??_C@_0N@MBCBPEAG@FOLLOWUP_IP?3?$AA@ DB 'FOLLOWUP_IP:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HHAMOJPD@STACK_TEXT?3?$AA@
CONST	SEGMENT
??_C@_0M@HHAMOJPD@STACK_TEXT?3?$AA@ DB 'STACK_TEXT:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CBBALMMJ@IMAGE_NAME?3?$AA@
CONST	SEGMENT
??_C@_0M@CBBALMMJ@IMAGE_NAME?3?$AA@ DB 'IMAGE_NAME:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BFMPHOAO@?$CFI64X?5?$CFI64X?5?$CFI64X?5?$CFI64X?$AA@
CONST	SEGMENT
??_C@_0BI@BFMPHOAO@?$CFI64X?5?$CFI64X?5?$CFI64X?5?$CFI64X?$AA@ DB '%I64X '
	DB	'%I64X %I64X %I64X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BOIEBBIA@Arguments?5?$AA@
CONST	SEGMENT
??_C@_0L@BOIEBBIA@Arguments?5?$AA@ DB 'Arguments ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MIPPMNIM@?$CFI64X?$AA@
CONST	SEGMENT
??_C@_05MIPPMNIM@?$CFI64X?$AA@ DB '%I64X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NIGJHOFH@ERR_PARAMETER_INCORRECT?$AA@
CONST	SEGMENT
??_C@_0BI@NIGJHOFH@ERR_PARAMETER_INCORRECT?$AA@ DB 'ERR_PARAMETER_INCORRE'
	DB	'CT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IAENJCO@Bugcheck?5code?5?$AA@
CONST	SEGMENT
??_C@_0P@IAENJCO@Bugcheck?5code?5?$AA@ DB 'Bugcheck code ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EMKKFGIH@TrueCrypt?$AA@
CONST	SEGMENT
??_C@_09EMKKFGIH@TrueCrypt?$AA@ DB 'TrueCrypt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JOHJKMBG@DEBUGGER_NOT_FOUND?$AA@
CONST	SEGMENT
??_C@_0BD@JOHJKMBG@DEBUGGER_NOT_FOUND?$AA@ DB 'DEBUGGER_NOT_FOUND', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JPDBKGIP@?$CC?5?9z?5?$CC?$AA@
CONST	SEGMENT
??_C@_06JPDBKGIP@?$CC?5?9z?5?$CC?$AA@ DB '" -z "', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@EEFBGPBB@?$CC?5?9y?5http?3?1?1msdl?4microsoft?4com?1d@
CONST	SEGMENT
??_C@_0EP@EEFBGPBB@?$CC?5?9y?5http?3?1?1msdl?4microsoft?4com?1d@ DB '" -y'
	DB	' http://msdl.microsoft.com/download/symbols -c ".bugcheck; !a'
	DB	'nalyze -v; q"', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06EICGEFIM@kd?4exe?$AA@
CONST	SEGMENT
??_C@_06EICGEFIM@kd?4exe?$AA@ DB 'kd.exe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OEHGBEPK@?2Debuggers?2kd?4exe?$AA@
CONST	SEGMENT
??_C@_0BC@OEHGBEPK@?2Debuggers?2kd?4exe?$AA@ DB '\Debuggers\kd.exe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DPIDHLKL@?3?2WinDDK?$AA@
CONST	SEGMENT
??_C@_08DPIDHLKL@?3?2WinDDK?$AA@ DB ':\WinDDK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01NBENCBCI@?$CK?$AA@
CONST	SEGMENT
??_C@_01NBENCBCI@?$CK?$AA@ DB '*', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EAPKEFHJ@?2Debugging?5Tools?5for?5Windows?5?$CI?$AA@
CONST	SEGMENT
??_C@_0BP@EAPKEFHJ@?2Debugging?5Tools?5for?5Windows?5?$CI?$AA@ DB '\Debug'
	DB	'ging Tools for Windows (', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BPJIFMCN@?$CJ?2kd?4exe?$AA@
CONST	SEGMENT
??_C@_08BPJIFMCN@?$CJ?2kd?4exe?$AA@ DB ')\kd.exe', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03NDFEINMN@x86?$AA@
CONST	SEGMENT
??_C@_03NDFEINMN@x86?$AA@ DB 'x86', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OLPMMCEF@x64?$AA@
CONST	SEGMENT
??_C@_03OLPMMCEF@x64?$AA@ DB 'x64', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NOEMODMP@?5?$CIx86?$CJ?$AA@
CONST	SEGMENT
??_C@_06NOEMODMP@?5?$CIx86?$CJ?$AA@ DB ' (x86)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KIJCEJCM@SYSTEM_CRASH_ANALYSIS_INFO?$AA@
CONST	SEGMENT
??_C@_0BL@KIJCEJCM@SYSTEM_CRASH_ANALYSIS_INFO?$AA@ DB 'SYSTEM_CRASH_ANALY'
	DB	'SIS_INFO', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@JCHBNCDL@msiexec?4exe?5?1qb?5?1i?5http?3?1?1cipher@
CONST	SEGMENT
??_C@_0FH@JCHBNCDL@msiexec?4exe?5?1qb?5?1i?5http?3?1?1cipher@ DB 'msiexec'
	DB	'.exe /qb /i http://ciphershed.org/applink?version=0.7.4.1&des'
	DB	't=ms-debug-tools-x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KDNKADLA@86?$AA@
CONST	SEGMENT
??_C@_02KDNKADLA@86?$AA@ DB '86', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JLHCEMDI@64?$AA@
CONST	SEGMENT
??_C@_02JLHCEMDI@64?$AA@ DB '64', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MBNOGAIL@ASK_DEBUGGER_INSTALL?$AA@
CONST	SEGMENT
??_C@_0BF@MBNOGAIL@ASK_DEBUGGER_INSTALL?$AA@ DB 'ASK_DEBUGGER_INSTALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MBEAAPIP@Debugging?5Tools?5for?5Windows?5?$CIx86@
CONST	SEGMENT
??_C@_0CC@MBEAAPIP@Debugging?5Tools?5for?5Windows?5?$CIx86@ DB 'Debugging'
	DB	' Tools for Windows (x86)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CCBLKMNC@Debugging?5Tools?5for?5Windows?5?$CIx64@
CONST	SEGMENT
??_C@_0CC@CCBLKMNC@Debugging?5Tools?5for?5Windows?5?$CIx64@ DB 'Debugging'
	DB	' Tools for Windows (x64)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NBHAJNOF@?4true_crypt?4dmp?$AA@
CONST	SEGMENT
??_C@_0BA@NBHAJNOF@?4true_crypt?4dmp?$AA@ DB '.true_crypt.dmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FCCCOAIF@NO_MINIDUMP_FOUND?$AA@
CONST	SEGMENT
??_C@_0BC@FCCCOAIF@NO_MINIDUMP_FOUND?$AA@ DB 'NO_MINIDUMP_FOUND', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PEDFGHAD@?2Minidump?$AA@
CONST	SEGMENT
??_C@_09PEDFGHAD@?2Minidump?$AA@ DB '\Minidump', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05ENIPKILI@?$CK?4dmp?$AA@
CONST	SEGMENT
??_C@_05ENIPKILI@?$CK?4dmp?$AA@ DB '*.dmp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DAMBDOGJ@?2MEMORY?4DMP?$AA@
CONST	SEGMENT
??_C@_0M@DAMBDOGJ@?2MEMORY?4DMP?$AA@ DB '\MEMORY.DMP', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
CONST	ENDS
;	COMDAT _AnalyzeKernelMiniDump
_TEXT	SEGMENT
$T201749 = -7992					; size = 1
$T201736 = -7992					; size = 1
$T201728 = -7992					; size = 1
$T201687 = -7992					; size = 1
$T201190 = -7992					; size = 1
$T197038 = -7992					; size = 1
_kdRunning$ = -7992					; size = 1
_otherDriver$ = -7985					; size = 1
_hwndDlg$GSCopy$ = -7984				; size = 4
_bytesReceived$141445 = -7984				; size = 4
_hChildStdoutRead$ = -7980				; size = 4
_hChildStdoutWrite$ = -7976				; size = 4
_procInfo$ = -7972					; size = 16
$T197068 = -7956					; size = 4
__Tmp$201372 = -7952					; size = 8
$T197016 = -7952					; size = 8
_exitCode$140699 = -7952				; size = 4
$T196979 = -7952					; size = 4
$T196978 = -7952					; size = 4
_kdPaths$ = -7944					; size = 28
$T197067 = -7916					; size = 28
$T197066 = -7916					; size = 28
$T197058 = -7916					; size = 28
$T197055 = -7916					; size = 28
$T197054 = -7916					; size = 28
$T197053 = -7916					; size = 28
$T197052 = -7916					; size = 28
$T197045 = -7916					; size = 28
_$S7$141381 = -7888					; size = 52
_bugcheckCode$ = -7836					; size = 8
_bugcheckArgs$ = -7828					; size = 32
_securityAttrib$ = -7796				; size = 12
$T197064 = -7784					; size = 28
$T197056 = -7784					; size = 28
$T197050 = -7784					; size = 28
$T197047 = -7784					; size = 28
$T197065 = -7756					; size = 28
$T197057 = -7756					; size = 28
$T197051 = -7756					; size = 28
$T197046 = -7756					; size = 28
_$S8$141658 = -7728					; size = 52
_retAddrs$ = -7676					; size = 28
_startupInfo$ = -7648					; size = 68
_stackTraceArgs$ = -7580				; size = 136
$T197059 = -7444					; size = 28
_description$141725 = -7444				; size = 28
$T197039 = -7444					; size = 28
$T197029 = -7444					; size = 28
$T197022 = -7444					; size = 28
$T197021 = -7444					; size = 28
$T197020 = -7444					; size = 28
$T197019 = -7444					; size = 28
$T197018 = -7444					; size = 28
$T197017 = -7444					; size = 28
$T197010 = -7444					; size = 28
$T197009 = -7444					; size = 28
$T196998 = -7444					; size = 28
$T196997 = -7444					; size = 28
$T196993 = -7444					; size = 28
$T196987 = -7444					; size = 28
$T196986 = -7444					; size = 28
$T196977 = -7444					; size = 28
$T196976 = -7444					; size = 28
_s$141734 = -7416					; size = 28
$T197048 = -7416					; size = 28
$T197040 = -7416					; size = 28
_s$141642 = -7416					; size = 28
$T197006 = -7416					; size = 28
$T196994 = -7416					; size = 28
$T196990 = -7416					; size = 28
_s$141240 = -7416					; size = 28
$T196975 = -7416					; size = 28
$T196974 = -7416					; size = 28
_output$ = -7388					; size = 28
_tmpDumpPath$ = -7360					; size = 28
_dumpPath$ = -7332					; size = 28
$T197061 = -7304					; size = 28
_company$141726 = -7304					; size = 28
$T197042 = -7304					; size = 28
$T197012 = -7304					; size = 28
$T197008 = -7304					; size = 28
$T196996 = -7304					; size = 28
$T196992 = -7304					; size = 28
$T196985 = -7304					; size = 28
_memDumpPath$ = -7276					; size = 28
_product$141727 = -7248					; size = 28
$T197041 = -7248					; size = 28
$T197011 = -7248					; size = 28
$T197007 = -7248					; size = 28
$T196995 = -7248					; size = 28
$T196991 = -7248					; size = 28
_kdPath$ = -7220					; size = 28
_imageName$ = -7192					; size = 28
_msg$ = -7164						; size = 28
_urlStr$ = -7136					; size = 28
_imageVersion$ = -7108					; size = 28
_finally8684$ = -7080					; size = 56
_findData$ = -7024					; size = 320
_winDir$ = -6704					; size = 260
_progPath$ = -6444					; size = 260
_url$ = -6184						; size = 2084
_pipeBuffer$141446 = -4100				; size = 4096
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_AnalyzeKernelMiniDump PROC				; COMDAT

; 8630 : {

  00000	b8 38 1f 00 00	 mov	 eax, 7992		; 00001f38H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 34 1f
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+7992], eax

; 8960 : }

  00018	8b 84 24 3c 1f
	00 00		 mov	 eax, DWORD PTR _hwndDlg$[esp+7988]
  0001f	53		 push	 ebx
  00020	55		 push	 ebp
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	33 f6		 xor	 esi, esi
  00025	68 03 01 00 00	 push	 259			; 00000103H
  0002a	8d 8c 24 1d 05
	00 00		 lea	 ecx, DWORD PTR _winDir$[esp+8013]
  00031	56		 push	 esi
  00032	51		 push	 ecx
  00033	89 44 24 24	 mov	 DWORD PTR _hwndDlg$GSCopy$[esp+8020], eax
  00037	89 74 24 40	 mov	 DWORD PTR $T197068[esp+8020], esi
  0003b	c6 84 24 24 05
	00 00 00	 mov	 BYTE PTR _winDir$[esp+8020], 0
  00043	e8 00 00 00 00	 call	 _memset
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	68 04 01 00 00	 push	 260			; 00000104H
  00050	8d 94 24 1c 05
	00 00		 lea	 edx, DWORD PTR _winDir$[esp+8012]
  00057	52		 push	 edx
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowsDirectoryA@8
  0005e	bb 0f 00 00 00	 mov	 ebx, 15			; 0000000fH
  00063	8d 84 24 18 05
	00 00		 lea	 eax, DWORD PTR _winDir$[esp+8008]
  0006a	89 9c 24 68 02
	00 00		 mov	 DWORD PTR $T196974[esp+8032], ebx
  00071	89 b4 24 64 02
	00 00		 mov	 DWORD PTR $T196974[esp+8028], esi
  00078	c6 84 24 54 02
	00 00 00	 mov	 BYTE PTR $T196974[esp+8012], 0
  00080	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL1668@AnalyzeKer:
  00083	8a 08		 mov	 cl, BYTE PTR [eax]
  00085	40		 inc	 eax
  00086	84 c9		 test	 cl, cl
  00088	75 f9		 jne	 SHORT $LL1668@AnalyzeKer
  0008a	2b c2		 sub	 eax, edx
  0008c	50		 push	 eax
  0008d	8d 84 24 1c 05
	00 00		 lea	 eax, DWORD PTR _winDir$[esp+8012]
  00094	50		 push	 eax
  00095	8d 8c 24 58 02
	00 00		 lea	 ecx, DWORD PTR $T196974[esp+8016]
  0009c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DAMBDOGJ@?2MEMORY?4DMP?$AA@
  000a6	8d 8c 24 54 02
	00 00		 lea	 ecx, DWORD PTR $T196974[esp+8012]
  000ad	51		 push	 ecx
  000ae	8d 94 24 e4 02
	00 00		 lea	 edx, DWORD PTR _memDumpPath$[esp+8016]
  000b5	52		 push	 edx
  000b6	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000bb	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c3	39 bc 24 68 02
	00 00		 cmp	 DWORD PTR $T196974[esp+8032], edi
  000ca	72 10		 jb	 SHORT $LN145@AnalyzeKer
  000cc	8b 84 24 54 02
	00 00		 mov	 eax, DWORD PTR $T196974[esp+8012]
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d9	83 c4 04	 add	 esp, 4
$LN145@AnalyzeKer:
  000dc	8d 84 24 18 05
	00 00		 lea	 eax, DWORD PTR _winDir$[esp+8008]
  000e3	89 9c 24 a0 02
	00 00		 mov	 DWORD PTR _tmpDumpPath$[esp+8032], ebx
  000ea	89 b4 24 9c 02
	00 00		 mov	 DWORD PTR _tmpDumpPath$[esp+8028], esi
  000f1	c6 84 24 8c 02
	00 00 00	 mov	 BYTE PTR _tmpDumpPath$[esp+8012], 0
  000f9	89 9c 24 68 02
	00 00		 mov	 DWORD PTR $T196975[esp+8032], ebx
  00100	89 b4 24 64 02
	00 00		 mov	 DWORD PTR $T196975[esp+8028], esi
  00107	c6 84 24 54 02
	00 00 00	 mov	 BYTE PTR $T196975[esp+8012], 0
  0010f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL1669@AnalyzeKer:
  00112	8a 08		 mov	 cl, BYTE PTR [eax]
  00114	40		 inc	 eax
  00115	84 c9		 test	 cl, cl
  00117	75 f9		 jne	 SHORT $LL1669@AnalyzeKer
  00119	2b c2		 sub	 eax, edx
  0011b	50		 push	 eax
  0011c	8d 8c 24 1c 05
	00 00		 lea	 ecx, DWORD PTR _winDir$[esp+8012]
  00123	51		 push	 ecx
  00124	8d 8c 24 58 02
	00 00		 lea	 ecx, DWORD PTR $T196975[esp+8016]
  0012b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00130	6a 01		 push	 1
  00132	56		 push	 esi
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_05ENIPKILI@?$CK?4dmp?$AA@
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_09PEDFGHAD@?2Minidump?$AA@
  0013d	8d 94 24 60 02
	00 00		 lea	 edx, DWORD PTR $T196975[esp+8024]
  00144	52		 push	 edx
  00145	8d 84 24 48 02
	00 00		 lea	 eax, DWORD PTR $T196976[esp+8028]
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00152	83 c4 0c	 add	 esp, 12			; 0000000cH
  00155	50		 push	 eax
  00156	8d 8c 24 b4 02
	00 00		 lea	 ecx, DWORD PTR _dumpPath$[esp+8024]
  0015d	51		 push	 ecx
  0015e	e8 00 00 00 00	 call	 ?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z ; FindLatestFileOrDirectory
  00163	83 c4 14	 add	 esp, 20			; 00000014H
  00166	39 bc 24 4c 02
	00 00		 cmp	 DWORD PTR $T196976[esp+8032], edi
  0016d	72 10		 jb	 SHORT $LN239@AnalyzeKer
  0016f	8b 94 24 38 02
	00 00		 mov	 edx, DWORD PTR $T196976[esp+8012]
  00176	52		 push	 edx
  00177	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0017c	83 c4 04	 add	 esp, 4
$LN239@AnalyzeKer:
  0017f	89 9c 24 4c 02
	00 00		 mov	 DWORD PTR $T196976[esp+8032], ebx
  00186	89 b4 24 48 02
	00 00		 mov	 DWORD PTR $T196976[esp+8028], esi
  0018d	c6 84 24 38 02
	00 00 00	 mov	 BYTE PTR $T196976[esp+8012], 0
  00195	39 bc 24 68 02
	00 00		 cmp	 DWORD PTR $T196975[esp+8032], edi
  0019c	72 10		 jb	 SHORT $LN265@AnalyzeKer
  0019e	8b 84 24 54 02
	00 00		 mov	 eax, DWORD PTR $T196975[esp+8012]
  001a5	50		 push	 eax
  001a6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001ab	83 c4 04	 add	 esp, 4
$LN265@AnalyzeKer:

; 8631 : 	char winDir[MAX_PATH] = { 0 };
; 8632 : 	GetWindowsDirectory (winDir, sizeof (winDir));
; 8633 : 	string memDumpPath = string (winDir) + "\\MEMORY.DMP";
; 8634 : 	string tmpDumpPath;
; 8635 : 
; 8636 : 	string dumpPath = FindLatestFileOrDirectory (string (winDir) + "\\Minidump", "*.dmp", false, true);
; 8637 : 	if (dumpPath.empty())

  001ae	39 b4 24 b8 02
	00 00		 cmp	 DWORD PTR _dumpPath$[esp+8028], esi
  001b5	0f 85 8d 00 00
	00		 jne	 $LN63@AnalyzeKer

; 8638 : 	{
; 8639 : 		Error ("NO_MINIDUMP_FOUND");

  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FCCCOAIF@NO_MINIDUMP_FOUND?$AA@
  001c0	e8 00 00 00 00	 call	 _Error
  001c5	83 c4 04	 add	 esp, 4

; 8640 : 		return;

  001c8	39 bc 24 bc 02
	00 00		 cmp	 DWORD PTR _dumpPath$[esp+8032], edi
  001cf	72 10		 jb	 SHORT $LN293@AnalyzeKer
  001d1	8b 8c 24 a8 02
	00 00		 mov	 ecx, DWORD PTR _dumpPath$[esp+8012]
  001d8	51		 push	 ecx
  001d9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001de	83 c4 04	 add	 esp, 4
$LN293@AnalyzeKer:
  001e1	89 9c 24 bc 02
	00 00		 mov	 DWORD PTR _dumpPath$[esp+8032], ebx
  001e8	89 b4 24 b8 02
	00 00		 mov	 DWORD PTR _dumpPath$[esp+8028], esi
  001ef	c6 84 24 a8 02
	00 00 00	 mov	 BYTE PTR _dumpPath$[esp+8012], 0
  001f7	39 bc 24 a0 02
	00 00		 cmp	 DWORD PTR _tmpDumpPath$[esp+8032], edi
  001fe	72 10		 jb	 SHORT $LN319@AnalyzeKer
  00200	8b 94 24 8c 02
	00 00		 mov	 edx, DWORD PTR _tmpDumpPath$[esp+8012]
  00207	52		 push	 edx
  00208	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0020d	83 c4 04	 add	 esp, 4
$LN319@AnalyzeKer:
  00210	39 bc 24 f4 02
	00 00		 cmp	 DWORD PTR _memDumpPath$[esp+8032], edi
  00217	89 b4 24 9c 02
	00 00		 mov	 DWORD PTR _tmpDumpPath$[esp+8028], esi
$LN1688@AnalyzeKer:
  0021e	89 9c 24 a0 02
	00 00		 mov	 DWORD PTR _tmpDumpPath$[esp+8032], ebx
$LN1689@AnalyzeKer:
  00225	c6 84 24 8c 02
	00 00 00	 mov	 BYTE PTR _tmpDumpPath$[esp+8012], 0
  0022d	0f 82 fc 1a 00
	00		 jb	 $LN64@AnalyzeKer
  00233	8b 84 24 e0 02
	00 00		 mov	 eax, DWORD PTR _memDumpPath$[esp+8012]
  0023a	50		 push	 eax
  0023b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00240	83 c4 04	 add	 esp, 4
  00243	e9 e7 1a 00 00	 jmp	 $LN64@AnalyzeKer
$LN63@AnalyzeKer:

; 8641 : 	}
; 8642 : 
; 8643 : 	WIN32_FIND_DATA findData;
; 8644 : 	HANDLE find = FindFirstFile (memDumpPath.c_str(), &findData);

  00248	8b 84 24 e0 02
	00 00		 mov	 eax, DWORD PTR _memDumpPath$[esp+8012]
  0024f	39 bc 24 f4 02
	00 00		 cmp	 DWORD PTR _memDumpPath$[esp+8032], edi
  00256	73 07		 jae	 SHORT $LN360@AnalyzeKer
  00258	8d 84 24 e0 02
	00 00		 lea	 eax, DWORD PTR _memDumpPath$[esp+8012]
$LN360@AnalyzeKer:
  0025f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__FindFirstFileA@8
  00265	8d 8c 24 d8 03
	00 00		 lea	 ecx, DWORD PTR _findData$[esp+8008]
  0026c	51		 push	 ecx
  0026d	50		 push	 eax
  0026e	ff d3		 call	 ebx

; 8645 : 
; 8646 : 	if (find != INVALID_HANDLE_VALUE)

  00270	83 f8 ff	 cmp	 eax, -1
  00273	0f 84 18 01 00
	00		 je	 $LN1675@AnalyzeKer

; 8647 : 	{
; 8648 : 		ULARGE_INTEGER memDumpTime, miniDumpTime;
; 8649 : 		memDumpTime.HighPart = findData.ftLastWriteTime.dwHighDateTime;
; 8650 : 		memDumpTime.LowPart = findData.ftLastWriteTime.dwLowDateTime;
; 8651 : 
; 8652 : 		FindClose (find);

  00279	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__FindClose@4
  0027f	8b b4 24 f0 03
	00 00		 mov	 esi, DWORD PTR _findData$[esp+8032]
  00286	8b bc 24 ec 03
	00 00		 mov	 edi, DWORD PTR _findData$[esp+8028]
  0028d	50		 push	 eax
  0028e	ff d5		 call	 ebp

; 8653 : 
; 8654 : 		find = FindFirstFile (dumpPath.c_str(), &findData);

  00290	83 bc 24 bc 02
	00 00 10	 cmp	 DWORD PTR _dumpPath$[esp+8032], 16 ; 00000010H
  00298	8b 84 24 a8 02
	00 00		 mov	 eax, DWORD PTR _dumpPath$[esp+8012]
  0029f	73 07		 jae	 SHORT $LN366@AnalyzeKer
  002a1	8d 84 24 a8 02
	00 00		 lea	 eax, DWORD PTR _dumpPath$[esp+8012]
$LN366@AnalyzeKer:
  002a8	8d 94 24 d8 03
	00 00		 lea	 edx, DWORD PTR _findData$[esp+8008]
  002af	52		 push	 edx
  002b0	50		 push	 eax
  002b1	ff d3		 call	 ebx
  002b3	8b d8		 mov	 ebx, eax

; 8655 : 		if (find != INVALID_HANDLE_VALUE)

  002b5	83 fb ff	 cmp	 ebx, -1
  002b8	0f 84 d3 00 00
	00		 je	 $LN1675@AnalyzeKer

; 8656 : 		{
; 8657 : 			miniDumpTime.HighPart = findData.ftLastWriteTime.dwHighDateTime;
; 8658 : 			miniDumpTime.LowPart = findData.ftLastWriteTime.dwLowDateTime;

  002be	8b 8c 24 ec 03
	00 00		 mov	 ecx, DWORD PTR _findData$[esp+8028]
  002c5	8b 84 24 f0 03
	00 00		 mov	 eax, DWORD PTR _findData$[esp+8032]

; 8659 : 
; 8660 : 			if (_abs64 (miniDumpTime.QuadPart - memDumpTime.QuadPart) < 10I64 * 1000 * 1000 * 60 * 5)

  002cc	2b cf		 sub	 ecx, edi
  002ce	1b c6		 sbb	 eax, esi
  002d0	99		 cdq
  002d1	33 c2		 xor	 eax, edx
  002d3	33 ca		 xor	 ecx, edx
  002d5	2b ca		 sub	 ecx, edx
  002d7	1b c2		 sbb	 eax, edx
  002d9	85 c0		 test	 eax, eax
  002db	0f 8f ad 00 00
	00		 jg	 $LN58@AnalyzeKer
  002e1	7c 0c		 jl	 SHORT $LN1670@AnalyzeKer
  002e3	81 f9 00 5e d0
	b2		 cmp	 ecx, -1294967296	; b2d05e00H
  002e9	0f 83 9f 00 00
	00		 jae	 $LN58@AnalyzeKer
$LN1670@AnalyzeKer:

; 8661 : 			{
; 8662 : 				// Rename MEMORY.DMP file first as it can be deleted by Windows when system crash dialog is closed
; 8663 : 				tmpDumpPath = memDumpPath + ".true_crypt.dmp"; // Application name must be mangled to avoid interfering with crash analysis

  002ef	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NBHAJNOF@?4true_crypt?4dmp?$AA@
  002f4	8d 84 24 e0 02
	00 00		 lea	 eax, DWORD PTR _memDumpPath$[esp+8012]
  002fb	50		 push	 eax
  002fc	8d 8c 24 3c 02
	00 00		 lea	 ecx, DWORD PTR $T196977[esp+8016]
  00303	51		 push	 ecx
  00304	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00309	83 c4 0c	 add	 esp, 12			; 0000000cH
  0030c	6a ff		 push	 -1
  0030e	6a 00		 push	 0
  00310	50		 push	 eax
  00311	8d 8c 24 94 02
	00 00		 lea	 ecx, DWORD PTR _tmpDumpPath$[esp+8020]
  00318	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0031d	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR $T196977[esp+8008]
  00324	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 8664 : 
; 8665 : 				if (MoveFile (memDumpPath.c_str(), tmpDumpPath.c_str()))

  00329	8b 8c 24 8c 02
	00 00		 mov	 ecx, DWORD PTR _tmpDumpPath$[esp+8012]
  00330	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00335	39 84 24 a0 02
	00 00		 cmp	 DWORD PTR _tmpDumpPath$[esp+8032], eax
  0033c	73 07		 jae	 SHORT $LN376@AnalyzeKer
  0033e	8d 8c 24 8c 02
	00 00		 lea	 ecx, DWORD PTR _tmpDumpPath$[esp+8012]
$LN376@AnalyzeKer:
  00345	39 84 24 f4 02
	00 00		 cmp	 DWORD PTR _memDumpPath$[esp+8032], eax
  0034c	8b 84 24 e0 02
	00 00		 mov	 eax, DWORD PTR _memDumpPath$[esp+8012]
  00353	73 07		 jae	 SHORT $LN382@AnalyzeKer
  00355	8d 84 24 e0 02
	00 00		 lea	 eax, DWORD PTR _memDumpPath$[esp+8012]
$LN382@AnalyzeKer:
  0035c	51		 push	 ecx
  0035d	50		 push	 eax
  0035e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveFileA@8
  00364	85 c0		 test	 eax, eax
  00366	74 1a		 je	 SHORT $LN59@AnalyzeKer

; 8666 : 					dumpPath = tmpDumpPath;

  00368	6a ff		 push	 -1
  0036a	6a 00		 push	 0
  0036c	8d 94 24 90 02
	00 00		 lea	 edx, DWORD PTR _tmpDumpPath$[esp+8016]
  00373	52		 push	 edx
  00374	8d 8c 24 b0 02
	00 00		 lea	 ecx, DWORD PTR _dumpPath$[esp+8020]
  0037b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 8667 : 				else

  00380	eb 0c		 jmp	 SHORT $LN58@AnalyzeKer
$LN59@AnalyzeKer:

; 8668 : 					tmpDumpPath.clear();

  00382	8d 8c 24 88 02
	00 00		 lea	 ecx, DWORD PTR _tmpDumpPath$[esp+8008]
  00389	e8 00 00 00 00	 call	 ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
$LN58@AnalyzeKer:

; 8669 : 			}
; 8670 : 
; 8671 : 			FindClose (find);

  0038e	53		 push	 ebx
  0038f	ff d5		 call	 ebp
$LN1675@AnalyzeKer:

; 8672 : 		}
; 8673 : 	}
; 8674 : 
; 8675 : 	finally_do_arg2 (string, tmpDumpPath, string, memDumpPath,
; 8676 : 	{
; 8677 : 		if (!finally_arg.empty())
; 8678 : 		{
; 8679 : 			if (AskYesNo ("ASK_DELETE_KERNEL_CRASH_DUMP") == IDYES)
; 8680 : 				DeleteFile (finally_arg.c_str());
; 8681 : 			else
; 8682 : 				MoveFile (finally_arg.c_str(), finally_arg2.c_str());
; 8683 : 		}
; 8684 : 	});

  00391	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00394	8b cc		 mov	 ecx, esp
  00396	89 64 24 54	 mov	 DWORD PTR $T196978[esp+8036], esp
  0039a	6a ff		 push	 -1
  0039c	33 ff		 xor	 edi, edi
  0039e	57		 push	 edi
  0039f	8d 84 24 00 03
	00 00		 lea	 eax, DWORD PTR _memDumpPath$[esp+8044]
  003a6	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  003ab	89 71 18	 mov	 DWORD PTR [ecx+24], esi
  003ae	89 79 14	 mov	 DWORD PTR [ecx+20], edi
  003b1	50		 push	 eax
  003b2	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  003b6	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  003bb	83 ec 1c	 sub	 esp, 28			; 0000001cH
  003be	8b cc		 mov	 ecx, esp
  003c0	89 64 24 70	 mov	 DWORD PTR $T196979[esp+8064], esp
  003c4	6a ff		 push	 -1
  003c6	57		 push	 edi
  003c7	8d 94 24 c8 02
	00 00		 lea	 edx, DWORD PTR _tmpDumpPath$[esp+8072]
  003ce	89 71 18	 mov	 DWORD PTR [ecx+24], esi
  003d1	89 79 14	 mov	 DWORD PTR [ecx+20], edi
  003d4	52		 push	 edx
  003d5	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  003d9	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  003de	8d b4 24 d8 03
	00 00		 lea	 esi, DWORD PTR _finally8684$[esp+8064]
  003e5	e8 00 00 00 00	 call	 ??0Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; `AnalyzeKernelMiniDump'::`17'::Finally8684::Finally8684

; 8685 : 
; 8686 : 	STARTUPINFO startupInfo;
; 8687 : 	PROCESS_INFORMATION procInfo; 
; 8688 : 
; 8689 : 	ZeroMemory (&startupInfo, sizeof (startupInfo));

  003ea	6a 44		 push	 68			; 00000044H
  003ec	8d 84 24 6c 01
	00 00		 lea	 eax, DWORD PTR _startupInfo$[esp+8012]
  003f3	57		 push	 edi
  003f4	50		 push	 eax
  003f5	e8 00 00 00 00	 call	 _memset

; 8690 : 	ZeroMemory (&procInfo, sizeof (procInfo));

  003fa	33 c0		 xor	 eax, eax
  003fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ff	89 44 24 24	 mov	 DWORD PTR _procInfo$[esp+8008], eax
  00403	89 44 24 28	 mov	 DWORD PTR _procInfo$[esp+8012], eax
  00407	89 44 24 2c	 mov	 DWORD PTR _procInfo$[esp+8016], eax
  0040b	89 44 24 30	 mov	 DWORD PTR _procInfo$[esp+8020], eax

; 8691 : 
; 8692 : 	if (!IsApplicationInstalled (Is64BitOs() ? "Debugging Tools for Windows (x64)" : "Debugging Tools for Windows (x86)"))

  0040f	e8 00 00 00 00	 call	 _Is64BitOs
  00414	85 c0		 test	 eax, eax
  00416	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CC@CCBLKMNC@Debugging?5Tools?5for?5Windows?5?$CIx64@
  0041b	75 05		 jne	 SHORT $LN67@AnalyzeKer
  0041d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CC@MBEAAPIP@Debugging?5Tools?5for?5Windows?5?$CIx86@
$LN67@AnalyzeKer:
  00422	50		 push	 eax
  00423	e8 00 00 00 00	 call	 _IsApplicationInstalled
  00428	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__CreateProcessA@40
  0042e	83 c4 04	 add	 esp, 4
  00431	85 c0		 test	 eax, eax
  00433	0f 85 83 01 00
	00		 jne	 $LN54@AnalyzeKer

; 8693 : 	{
; 8694 : 		if (AskOkCancel ("ASK_DEBUGGER_INSTALL") != IDOK)

  00439	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MBNOGAIL@ASK_DEBUGGER_INSTALL?$AA@
  0043e	e8 00 00 00 00	 call	 _AskOkCancel
  00443	83 c4 04	 add	 esp, 4
  00446	83 f8 01	 cmp	 eax, 1
  00449	74 71		 je	 SHORT $LN56@AnalyzeKer

; 8695 : 			return;

  0044b	8d b4 24 a0 03
	00 00		 lea	 esi, DWORD PTR _finally8684$[esp+8008]
  00452	e8 00 00 00 00	 call	 ??1Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@XZ ; `AnalyzeKernelMiniDump'::`17'::Finally8684::~Finally8684
  00457	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  0045c	39 b4 24 bc 02
	00 00		 cmp	 DWORD PTR _dumpPath$[esp+8032], esi
  00463	72 10		 jb	 SHORT $LN455@AnalyzeKer
  00465	8b 8c 24 a8 02
	00 00		 mov	 ecx, DWORD PTR _dumpPath$[esp+8012]
  0046c	51		 push	 ecx
  0046d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00472	83 c4 04	 add	 esp, 4
$LN455@AnalyzeKer:
  00475	bb 0f 00 00 00	 mov	 ebx, 15			; 0000000fH
  0047a	89 9c 24 bc 02
	00 00		 mov	 DWORD PTR _dumpPath$[esp+8032], ebx
  00481	89 bc 24 b8 02
	00 00		 mov	 DWORD PTR _dumpPath$[esp+8028], edi
  00488	c6 84 24 a8 02
	00 00 00	 mov	 BYTE PTR _dumpPath$[esp+8012], 0
  00490	39 b4 24 a0 02
	00 00		 cmp	 DWORD PTR _tmpDumpPath$[esp+8032], esi
  00497	72 10		 jb	 SHORT $LN481@AnalyzeKer
  00499	8b 94 24 8c 02
	00 00		 mov	 edx, DWORD PTR _tmpDumpPath$[esp+8012]
  004a0	52		 push	 edx
  004a1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004a6	83 c4 04	 add	 esp, 4
$LN481@AnalyzeKer:
  004a9	39 b4 24 f4 02
	00 00		 cmp	 DWORD PTR _memDumpPath$[esp+8032], esi
  004b0	89 bc 24 9c 02
	00 00		 mov	 DWORD PTR _tmpDumpPath$[esp+8028], edi
  004b7	e9 62 fd ff ff	 jmp	 $LN1688@AnalyzeKer
$LN56@AnalyzeKer:

; 8696 : 
; 8697 : 		if (!CreateProcess (NULL, (LPSTR) (string ("msiexec.exe /qb /i " TC_APPLINK "&dest=ms-debug-tools-x") + (Is64BitOs() ? "64" : "86")).c_str(),
; 8698 : 			NULL, NULL, FALSE, 0, NULL, NULL, &startupInfo, &procInfo))

  004bc	e8 00 00 00 00	 call	 _Is64BitOs
  004c1	85 c0		 test	 eax, eax
  004c3	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_02JLHCEMDI@64?$AA@
  004c8	75 05		 jne	 SHORT $LN69@AnalyzeKer
  004ca	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_02KDNKADLA@86?$AA@
$LN69@AnalyzeKer:
  004cf	50		 push	 eax
  004d0	68 00 00 00 00	 push	 OFFSET ??_C@_0FH@JCHBNCDL@msiexec?4exe?5?1qb?5?1i?5http?3?1?1cipher@
  004d5	8d 8c 24 c8 02
	00 00		 lea	 ecx, DWORD PTR $T196985[esp+8016]
  004dc	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  004e1	50		 push	 eax
  004e2	8d 8c 24 3c 02
	00 00		 lea	 ecx, DWORD PTR $T196986[esp+8016]
  004e9	51		 push	 ecx
  004ea	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  004ef	83 c4 0c	 add	 esp, 12			; 0000000cH
  004f2	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  004f6	72 05		 jb	 SHORT $LN521@AnalyzeKer
  004f8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  004fb	eb 03		 jmp	 SHORT $LN522@AnalyzeKer
$LN521@AnalyzeKer:
  004fd	83 c0 04	 add	 eax, 4
$LN522@AnalyzeKer:
  00500	8d 54 24 24	 lea	 edx, DWORD PTR _procInfo$[esp+8008]
  00504	52		 push	 edx
  00505	8d 8c 24 6c 01
	00 00		 lea	 ecx, DWORD PTR _startupInfo$[esp+8012]
  0050c	51		 push	 ecx
  0050d	57		 push	 edi
  0050e	57		 push	 edi
  0050f	57		 push	 edi
  00510	57		 push	 edi
  00511	57		 push	 edi
  00512	57		 push	 edi
  00513	50		 push	 eax
  00514	57		 push	 edi
  00515	ff d5		 call	 ebp
  00517	85 c0		 test	 eax, eax
  00519	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  0051e	0f 94 c3	 sete	 bl
  00521	39 b4 24 4c 02
	00 00		 cmp	 DWORD PTR $T196986[esp+8032], esi
  00528	72 10		 jb	 SHORT $LN539@AnalyzeKer
  0052a	8b 94 24 38 02
	00 00		 mov	 edx, DWORD PTR $T196986[esp+8012]
  00531	52		 push	 edx
  00532	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00537	83 c4 04	 add	 esp, 4
$LN539@AnalyzeKer:
  0053a	c7 84 24 4c 02
	00 00 0f 00 00
	00		 mov	 DWORD PTR $T196986[esp+8032], 15 ; 0000000fH
  00545	89 bc 24 48 02
	00 00		 mov	 DWORD PTR $T196986[esp+8028], edi
  0054c	c6 84 24 38 02
	00 00 00	 mov	 BYTE PTR $T196986[esp+8012], 0
  00554	39 b4 24 d8 02
	00 00		 cmp	 DWORD PTR $T196985[esp+8032], esi
  0055b	72 10		 jb	 SHORT $LN565@AnalyzeKer
  0055d	8b 84 24 c4 02
	00 00		 mov	 eax, DWORD PTR $T196985[esp+8012]
  00564	50		 push	 eax
  00565	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0056a	83 c4 04	 add	 esp, 4
$LN565@AnalyzeKer:
  0056d	84 db		 test	 bl, bl
  0056f	74 12		 je	 SHORT $LN55@AnalyzeKer

; 8699 : 		{
; 8700 : 			handleWin32Error (hwndDlg);

  00571	8b 4c 24 18	 mov	 ecx, DWORD PTR _hwndDlg$GSCopy$[esp+8008]
  00575	51		 push	 ecx
  00576	e8 00 00 00 00	 call	 _handleWin32Error
  0057b	83 c4 04	 add	 esp, 4

; 8701 : 			return;

  0057e	e9 7c 17 00 00	 jmp	 $LN1683@AnalyzeKer
$LN55@AnalyzeKer:

; 8702 : 		}
; 8703 : 
; 8704 : 		WaitCursor();

  00583	e8 00 00 00 00	 call	 _WaitCursor

; 8705 : 		WaitForSingleObject (procInfo.hProcess, INFINITE);

  00588	8b 54 24 24	 mov	 edx, DWORD PTR _procInfo$[esp+8008]
  0058c	6a ff		 push	 -1
  0058e	52		 push	 edx
  0058f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8

; 8706 : 		NormalCursor();

  00595	e8 00 00 00 00	 call	 _NormalCursor

; 8707 : 
; 8708 : 		DWORD exitCode;
; 8709 : 		if (!GetExitCodeProcess (procInfo.hProcess, &exitCode) || exitCode != 0)

  0059a	8b 4c 24 24	 mov	 ecx, DWORD PTR _procInfo$[esp+8008]
  0059e	8d 44 24 38	 lea	 eax, DWORD PTR _exitCode$140699[esp+8008]
  005a2	50		 push	 eax
  005a3	51		 push	 ecx
  005a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetExitCodeProcess@8
  005aa	85 c0		 test	 eax, eax
  005ac	0f 84 4d 17 00
	00		 je	 $LN1683@AnalyzeKer
  005b2	39 7c 24 38	 cmp	 DWORD PTR _exitCode$140699[esp+8008], edi

; 8710 : 			return;

  005b6	0f 85 43 17 00
	00		 jne	 $LN1683@AnalyzeKer
$LN54@AnalyzeKer:

; 8711 : 	}
; 8712 : 
; 8713 : 	if (AskOkCancel ("SYSTEM_CRASH_ANALYSIS_INFO") == IDCANCEL)

  005bc	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@KIJCEJCM@SYSTEM_CRASH_ANALYSIS_INFO?$AA@
  005c1	e8 00 00 00 00	 call	 _AskOkCancel
  005c6	83 c4 04	 add	 esp, 4
  005c9	83 f8 02	 cmp	 eax, 2
  005cc	0f 85 96 00 00
	00		 jne	 $LN52@AnalyzeKer

; 8714 : 		return;

  005d2	8d b4 24 a0 03
	00 00		 lea	 esi, DWORD PTR _finally8684$[esp+8008]
  005d9	e8 00 00 00 00	 call	 ??1Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@XZ ; `AnalyzeKernelMiniDump'::`17'::Finally8684::~Finally8684
  005de	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  005e3	39 b4 24 bc 02
	00 00		 cmp	 DWORD PTR _dumpPath$[esp+8032], esi
  005ea	72 10		 jb	 SHORT $LN591@AnalyzeKer
  005ec	8b 94 24 a8 02
	00 00		 mov	 edx, DWORD PTR _dumpPath$[esp+8012]
  005f3	52		 push	 edx
  005f4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005f9	83 c4 04	 add	 esp, 4
$LN591@AnalyzeKer:
  005fc	bb 0f 00 00 00	 mov	 ebx, 15			; 0000000fH
  00601	89 9c 24 bc 02
	00 00		 mov	 DWORD PTR _dumpPath$[esp+8032], ebx
  00608	89 bc 24 b8 02
	00 00		 mov	 DWORD PTR _dumpPath$[esp+8028], edi
  0060f	c6 84 24 a8 02
	00 00 00	 mov	 BYTE PTR _dumpPath$[esp+8012], 0
  00617	39 b4 24 a0 02
	00 00		 cmp	 DWORD PTR _tmpDumpPath$[esp+8032], esi
  0061e	72 10		 jb	 SHORT $LN617@AnalyzeKer
  00620	8b 84 24 8c 02
	00 00		 mov	 eax, DWORD PTR _tmpDumpPath$[esp+8012]
  00627	50		 push	 eax
  00628	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0062d	83 c4 04	 add	 esp, 4
$LN617@AnalyzeKer:
  00630	89 9c 24 a0 02
	00 00		 mov	 DWORD PTR _tmpDumpPath$[esp+8032], ebx
  00637	89 bc 24 9c 02
	00 00		 mov	 DWORD PTR _tmpDumpPath$[esp+8028], edi
  0063e	c6 84 24 8c 02
	00 00 00	 mov	 BYTE PTR _tmpDumpPath$[esp+8012], 0
  00646	39 b4 24 f4 02
	00 00		 cmp	 DWORD PTR _memDumpPath$[esp+8032], esi
  0064d	0f 82 dc 16 00
	00		 jb	 $LN64@AnalyzeKer
  00653	8b 8c 24 e0 02
	00 00		 mov	 ecx, DWORD PTR _memDumpPath$[esp+8012]
  0065a	51		 push	 ecx
  0065b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00660	83 c4 04	 add	 esp, 4
  00663	e9 c7 16 00 00	 jmp	 $LN64@AnalyzeKer
$LN52@AnalyzeKer:

; 8715 : 
; 8716 : 	ZeroMemory (&startupInfo, sizeof (startupInfo));

  00668	6a 44		 push	 68			; 00000044H
  0066a	8d 94 24 6c 01
	00 00		 lea	 edx, DWORD PTR _startupInfo$[esp+8012]
  00671	57		 push	 edi
  00672	52		 push	 edx
  00673	e8 00 00 00 00	 call	 _memset

; 8717 : 	ZeroMemory (&procInfo, sizeof (procInfo));

  00678	33 c0		 xor	 eax, eax
  0067a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8718 : 
; 8719 : 	SECURITY_ATTRIBUTES securityAttrib; 
; 8720 : 	securityAttrib.bInheritHandle = TRUE; 
; 8721 : 	securityAttrib.nLength = sizeof (securityAttrib); 
; 8722 : 	securityAttrib.lpSecurityDescriptor = NULL; 
; 8723 : 
; 8724 : 	HANDLE hChildStdoutWrite = INVALID_HANDLE_VALUE;
; 8725 : 	HANDLE hChildStdoutRead = INVALID_HANDLE_VALUE;
; 8726 : 	if (!CreatePipe (&hChildStdoutRead, &hChildStdoutWrite, &securityAttrib, 0))

  0067d	57		 push	 edi
  0067e	89 44 24 28	 mov	 DWORD PTR _procInfo$[esp+8012], eax
  00682	89 44 24 2c	 mov	 DWORD PTR _procInfo$[esp+8016], eax
  00686	89 44 24 30	 mov	 DWORD PTR _procInfo$[esp+8020], eax
  0068a	89 44 24 34	 mov	 DWORD PTR _procInfo$[esp+8024], eax
  0068e	8d 84 24 d8 00
	00 00		 lea	 eax, DWORD PTR _securityAttrib$[esp+8012]
  00695	50		 push	 eax
  00696	8d 4c 24 28	 lea	 ecx, DWORD PTR _hChildStdoutWrite$[esp+8016]
  0069a	51		 push	 ecx
  0069b	8d 54 24 28	 lea	 edx, DWORD PTR _hChildStdoutRead$[esp+8020]
  0069f	83 ce ff	 or	 esi, -1
  006a2	52		 push	 edx
  006a3	c7 84 24 ec 00
	00 00 01 00 00
	00		 mov	 DWORD PTR _securityAttrib$[esp+8032], 1
  006ae	c7 84 24 e4 00
	00 00 0c 00 00
	00		 mov	 DWORD PTR _securityAttrib$[esp+8024], 12 ; 0000000cH
  006b9	89 bc 24 e8 00
	00 00		 mov	 DWORD PTR _securityAttrib$[esp+8028], edi
  006c0	89 74 24 30	 mov	 DWORD PTR _hChildStdoutWrite$[esp+8024], esi
  006c4	89 74 24 2c	 mov	 DWORD PTR _hChildStdoutRead$[esp+8024], esi
  006c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePipe@16
  006ce	85 c0		 test	 eax, eax
  006d0	75 12		 jne	 SHORT $LN51@AnalyzeKer

; 8727 : 	{
; 8728 : 		handleWin32Error (hwndDlg);

  006d2	8b 44 24 18	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[esp+8008]
  006d6	50		 push	 eax
  006d7	e8 00 00 00 00	 call	 _handleWin32Error
  006dc	83 c4 04	 add	 esp, 4

; 8729 : 		return;

  006df	e9 1b 16 00 00	 jmp	 $LN1683@AnalyzeKer
$LN51@AnalyzeKer:

; 8730 : 	}
; 8731 : 	SetHandleInformation (hChildStdoutRead, HANDLE_FLAG_INHERIT, 0);

  006e4	8b 4c 24 1c	 mov	 ecx, DWORD PTR _hChildStdoutRead$[esp+8008]
  006e8	57		 push	 edi
  006e9	6a 01		 push	 1
  006eb	51		 push	 ecx
  006ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetHandleInformation@12

; 8732 : 
; 8733 : 	startupInfo.hStdInput = INVALID_HANDLE_VALUE;
; 8734 : 	startupInfo.hStdOutput = hChildStdoutWrite;

  006f2	8b 44 24 20	 mov	 eax, DWORD PTR _hChildStdoutWrite$[esp+8008]

; 8735 : 	startupInfo.cb = sizeof (startupInfo); 
; 8736 : 	startupInfo.hStdError = hChildStdoutWrite;
; 8737 : 	startupInfo.dwFlags |= STARTF_USESTDHANDLES;

  006f6	81 8c 24 94 01
	00 00 00 01 00
	00		 or	 DWORD PTR _startupInfo$[esp+8052], 256 ; 00000100H

; 8738 : 
; 8739 : 	list <string> kdPaths;

  00701	8d 4c 24 40	 lea	 ecx, DWORD PTR _kdPaths$[esp+8008]
  00705	89 b4 24 a0 01
	00 00		 mov	 DWORD PTR _startupInfo$[esp+8064], esi
  0070c	89 84 24 a4 01
	00 00		 mov	 DWORD PTR _startupInfo$[esp+8068], eax
  00713	c7 84 24 68 01
	00 00 44 00 00
	00		 mov	 DWORD PTR _startupInfo$[esp+8008], 68 ; 00000044H
  0071e	89 84 24 a8 01
	00 00		 mov	 DWORD PTR _startupInfo$[esp+8072], eax
  00725	e8 00 00 00 00	 call	 ??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 8740 : 	string kdPath;
; 8741 : 	char progPath[MAX_PATH];
; 8742 : 	if (SHGetSpecialFolderPath (hwndDlg, progPath, CSIDL_PROGRAM_FILES, FALSE))

  0072a	8b 44 24 18	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[esp+8008]
  0072e	57		 push	 edi
  0072f	6a 26		 push	 38			; 00000026H
  00731	8d 94 24 24 06
	00 00		 lea	 edx, DWORD PTR _progPath$[esp+8016]
  00738	52		 push	 edx
  00739	50		 push	 eax
  0073a	c7 84 24 3c 03
	00 00 0f 00 00
	00		 mov	 DWORD PTR _kdPath$[esp+8048], 15 ; 0000000fH
  00745	89 bc 24 38 03
	00 00		 mov	 DWORD PTR _kdPath$[esp+8044], edi
  0074c	c6 84 24 28 03
	00 00 00	 mov	 BYTE PTR _kdPath$[esp+8028], 0
  00754	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetSpecialFolderPathA@16
  0075a	85 c0		 test	 eax, eax
  0075c	0f 84 84 01 00
	00		 je	 $LN50@AnalyzeKer

; 8743 : 	{
; 8744 : 		if (Is64BitOs())

  00762	e8 00 00 00 00	 call	 _Is64BitOs
  00767	85 c0		 test	 eax, eax
  00769	0f 84 c2 00 00
	00		 je	 $LN49@AnalyzeKer

; 8745 : 		{
; 8746 : 			string s = progPath;

  0076f	8d 8c 24 1c 06
	00 00		 lea	 ecx, DWORD PTR _progPath$[esp+8008]
  00776	51		 push	 ecx
  00777	8d 8c 24 54 02
	00 00		 lea	 ecx, DWORD PTR _s$141240[esp+8012]
  0077e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 8747 : 			size_t p = s.find (" (x86)");

  00783	57		 push	 edi
  00784	68 00 00 00 00	 push	 OFFSET ??_C@_06NOEMODMP@?5?$CIx86?$CJ?$AA@
  00789	8d 8c 24 58 02
	00 00		 lea	 ecx, DWORD PTR _s$141240[esp+8016]
  00790	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find

; 8748 : 			if (p != string::npos)

  00795	3b c6		 cmp	 eax, esi
  00797	0f 84 88 00 00
	00		 je	 $LN47@AnalyzeKer

; 8749 : 			{
; 8750 : 				s = s.substr (0, p);

  0079d	50		 push	 eax
  0079e	57		 push	 edi
  0079f	8d 94 24 3c 02
	00 00		 lea	 edx, DWORD PTR $T196987[esp+8016]
  007a6	52		 push	 edx
  007a7	8d 8c 24 5c 02
	00 00		 lea	 ecx, DWORD PTR _s$141240[esp+8020]
  007ae	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  007b3	56		 push	 esi
  007b4	57		 push	 edi
  007b5	50		 push	 eax
  007b6	8d 8c 24 5c 02
	00 00		 lea	 ecx, DWORD PTR _s$141240[esp+8020]
  007bd	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  007c2	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR $T196987[esp+8008]
  007c9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 8751 : 				if (_access (s.c_str(), 0) != -1)

  007ce	8b 84 24 54 02
	00 00		 mov	 eax, DWORD PTR _s$141240[esp+8012]
  007d5	bb 10 00 00 00	 mov	 ebx, 16			; 00000010H
  007da	39 9c 24 68 02
	00 00		 cmp	 DWORD PTR _s$141240[esp+8032], ebx
  007e1	73 07		 jae	 SHORT $LN694@AnalyzeKer
  007e3	8d 84 24 54 02
	00 00		 lea	 eax, DWORD PTR _s$141240[esp+8012]
$LN694@AnalyzeKer:
  007ea	57		 push	 edi
  007eb	50		 push	 eax
  007ec	e8 00 00 00 00	 call	 __access
  007f1	83 c4 08	 add	 esp, 8
  007f4	3b c6		 cmp	 eax, esi
  007f6	74 2d		 je	 SHORT $LN47@AnalyzeKer

; 8752 : 					strcpy_s (progPath, sizeof (progPath), s.c_str());

  007f8	8b 84 24 54 02
	00 00		 mov	 eax, DWORD PTR _s$141240[esp+8012]
  007ff	39 9c 24 68 02
	00 00		 cmp	 DWORD PTR _s$141240[esp+8032], ebx
  00806	73 07		 jae	 SHORT $LN700@AnalyzeKer
  00808	8d 84 24 54 02
	00 00		 lea	 eax, DWORD PTR _s$141240[esp+8012]
$LN700@AnalyzeKer:
  0080f	50		 push	 eax
  00810	8d 84 24 20 06
	00 00		 lea	 eax, DWORD PTR _progPath$[esp+8012]
  00817	68 04 01 00 00	 push	 260			; 00000104H
  0081c	50		 push	 eax
  0081d	e8 00 00 00 00	 call	 _strcpy_s
  00822	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN47@AnalyzeKer:

; 8753 : 			}
; 8754 : 		}

  00825	8d 8c 24 50 02
	00 00		 lea	 ecx, DWORD PTR _s$141240[esp+8008]
  0082c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN49@AnalyzeKer:

; 8755 : 
; 8756 : 		kdPath = string (progPath) + "\\Debugging Tools for Windows (" + (Is64BitOs() ? "x64" : "x86") + ")\\kd.exe";

  00831	e8 00 00 00 00	 call	 _Is64BitOs
  00836	85 c0		 test	 eax, eax
  00838	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03OLPMMCEF@x64?$AA@
  0083d	75 05		 jne	 SHORT $LN71@AnalyzeKer
  0083f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03NDFEINMN@x86?$AA@
$LN71@AnalyzeKer:
  00844	68 00 00 00 00	 push	 OFFSET ??_C@_08BPJIFMCN@?$CJ?2kd?4exe?$AA@
  00849	50		 push	 eax
  0084a	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EAPKEFHJ@?2Debugging?5Tools?5for?5Windows?5?$CI?$AA@
  0084f	8d 8c 24 28 06
	00 00		 lea	 ecx, DWORD PTR _progPath$[esp+8020]
  00856	51		 push	 ecx
  00857	8d 8c 24 60 02
	00 00		 lea	 ecx, DWORD PTR $T196990[esp+8024]
  0085e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00863	50		 push	 eax
  00864	8d 94 24 08 03
	00 00		 lea	 edx, DWORD PTR $T196991[esp+8024]
  0086b	52		 push	 edx
  0086c	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00871	83 c4 0c	 add	 esp, 12			; 0000000cH
  00874	50		 push	 eax
  00875	8d 84 24 cc 02
	00 00		 lea	 eax, DWORD PTR $T196992[esp+8020]
  0087c	50		 push	 eax
  0087d	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00882	83 c4 0c	 add	 esp, 12			; 0000000cH
  00885	50		 push	 eax
  00886	8d 8c 24 3c 02
	00 00		 lea	 ecx, DWORD PTR $T196993[esp+8016]
  0088d	51		 push	 ecx
  0088e	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00893	83 c4 0c	 add	 esp, 12			; 0000000cH
  00896	56		 push	 esi
  00897	57		 push	 edi
  00898	50		 push	 eax
  00899	8d 8c 24 20 03
	00 00		 lea	 ecx, DWORD PTR _kdPath$[esp+8020]
  008a0	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  008a5	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR $T196993[esp+8008]
  008ac	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  008b1	8d 8c 24 c0 02
	00 00		 lea	 ecx, DWORD PTR $T196992[esp+8008]
  008b8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  008bd	8d 8c 24 f8 02
	00 00		 lea	 ecx, DWORD PTR $T196991[esp+8008]
  008c4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  008c9	8d 8c 24 50 02
	00 00		 lea	 ecx, DWORD PTR $T196990[esp+8008]
  008d0	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 8757 : 		kdPaths.push_back (kdPath);

  008d5	8d 94 24 14 03
	00 00		 lea	 edx, DWORD PTR _kdPath$[esp+8008]
  008dc	52		 push	 edx
  008dd	8d 4c 24 44	 lea	 ecx, DWORD PTR _kdPaths$[esp+8012]
  008e1	e8 00 00 00 00	 call	 ?push_back@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
$LN50@AnalyzeKer:

; 8758 : 	}
; 8759 : 
; 8760 : 	kdPath = FindLatestFileOrDirectory (string (winDir).substr (0, 1) + ":\\WinDDK", "*", true, false);

  008e6	57		 push	 edi
  008e7	6a 01		 push	 1
  008e9	68 00 00 00 00	 push	 OFFSET ??_C@_01NBENCBCI@?$CK?$AA@
  008ee	68 00 00 00 00	 push	 OFFSET ??_C@_08DPIDHLKL@?3?2WinDDK?$AA@
  008f3	6a 01		 push	 1
  008f5	57		 push	 edi
  008f6	8d 84 24 10 03
	00 00		 lea	 eax, DWORD PTR $T196995[esp+8032]
  008fd	50		 push	 eax
  008fe	8d 8c 24 34 05
	00 00		 lea	 ecx, DWORD PTR _winDir$[esp+8036]
  00905	51		 push	 ecx
  00906	8d 8c 24 70 02
	00 00		 lea	 ecx, DWORD PTR $T196994[esp+8040]
  0090d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00912	8b c8		 mov	 ecx, eax
  00914	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  00919	50		 push	 eax
  0091a	8d 94 24 d4 02
	00 00		 lea	 edx, DWORD PTR $T196996[esp+8028]
  00921	52		 push	 edx
  00922	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00927	83 c4 0c	 add	 esp, 12			; 0000000cH
  0092a	50		 push	 eax
  0092b	8d 84 24 44 02
	00 00		 lea	 eax, DWORD PTR $T196997[esp+8024]
  00932	50		 push	 eax
  00933	e8 00 00 00 00	 call	 ?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z ; FindLatestFileOrDirectory
  00938	83 c4 14	 add	 esp, 20			; 00000014H
  0093b	56		 push	 esi
  0093c	57		 push	 edi
  0093d	50		 push	 eax
  0093e	8d 8c 24 20 03
	00 00		 lea	 ecx, DWORD PTR _kdPath$[esp+8020]
  00945	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0094a	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR $T196997[esp+8008]
  00951	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00956	8d 8c 24 c0 02
	00 00		 lea	 ecx, DWORD PTR $T196996[esp+8008]
  0095d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00962	8d 8c 24 f8 02
	00 00		 lea	 ecx, DWORD PTR $T196995[esp+8008]
  00969	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0096e	8d 8c 24 50 02
	00 00		 lea	 ecx, DWORD PTR $T196994[esp+8008]
  00975	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 8761 : 	kdPath += "\\Debuggers\\kd.exe";

  0097a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OEHGBEPK@?2Debuggers?2kd?4exe?$AA@
  0097f	8d 8c 24 18 03
	00 00		 lea	 ecx, DWORD PTR _kdPath$[esp+8012]
  00986	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 8762 : 	kdPaths.push_back (kdPath);

  0098b	8d 8c 24 14 03
	00 00		 lea	 ecx, DWORD PTR _kdPath$[esp+8008]
  00992	51		 push	 ecx
  00993	8d 4c 24 44	 lea	 ecx, DWORD PTR _kdPaths$[esp+8012]
  00997	e8 00 00 00 00	 call	 ?push_back@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back

; 8763 : 
; 8764 : 	kdPaths.push_back ("kd.exe");

  0099c	68 00 00 00 00	 push	 OFFSET ??_C@_06EICGEFIM@kd?4exe?$AA@
  009a1	8d 8c 24 38 02
	00 00		 lea	 ecx, DWORD PTR $T196998[esp+8012]
  009a8	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  009ad	8d 94 24 34 02
	00 00		 lea	 edx, DWORD PTR $T196998[esp+8008]
  009b4	52		 push	 edx
  009b5	8d 4c 24 44	 lea	 ecx, DWORD PTR _kdPaths$[esp+8012]
  009b9	e8 00 00 00 00	 call	 ?push_back@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
  009be	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR $T196998[esp+8008]
  009c5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 8765 : 
; 8766 : 	bool kdRunning = false;
; 8767 : 	foreach (const string &kdPath, kdPaths)

  009ca	8d 44 24 40	 lea	 eax, DWORD PTR _kdPaths$[esp+8008]
  009ce	50		 push	 eax
  009cf	8d 4c 24 7c	 lea	 ecx, DWORD PTR _$S7$141381[esp+8012]
  009d3	51		 push	 ecx
  009d4	c6 44 24 18 00	 mov	 BYTE PTR _kdRunning$[esp+8016], 0
  009d9	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@01@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
  009de	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR _$S7$141381[esp+8016]
  009e5	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  009e8	83 c4 08	 add	 esp, 8
  009eb	8d 4c 24 78	 lea	 ecx, DWORD PTR _$S7$141381[esp+8008]
  009ef	ff d0		 call	 eax
  009f1	84 c0		 test	 al, al
  009f3	0f 84 f6 01 00
	00		 je	 $LN44@AnalyzeKer
  009f9	8d a4 24 00 00
	00 00		 npad	 7
$LL46@AnalyzeKer:
  00a00	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR _$S7$141381[esp+8052]
  00a07	85 c0		 test	 eax, eax
  00a09	75 10		 jne	 SHORT $LN1666@AnalyzeKer
  00a0b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00a10	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR _$S7$141381[esp+8052]
  00a17	85 c0		 test	 eax, eax
  00a19	74 04		 je	 SHORT $LN731@AnalyzeKer
$LN1666@AnalyzeKer:
  00a1b	8b 00		 mov	 eax, DWORD PTR [eax]
  00a1d	eb 02		 jmp	 SHORT $LN732@AnalyzeKer
$LN731@AnalyzeKer:
  00a1f	33 c0		 xor	 eax, eax
$LN732@AnalyzeKer:
  00a21	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR _$S7$141381[esp+8056]
  00a28	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00a2b	75 05		 jne	 SHORT $LN717@AnalyzeKer
  00a2d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN717@AnalyzeKer:
  00a32	8b bc 24 a8 00
	00 00		 mov	 edi, DWORD PTR _$S7$141381[esp+8056]
  00a39	83 c7 08	 add	 edi, 8
  00a3c	80 7c 24 7d 00	 cmp	 BYTE PTR _$S7$141381[esp+8013], 0
  00a41	0f 94 c0	 sete	 al
  00a44	88 44 24 7d	 mov	 BYTE PTR _$S7$141381[esp+8013], al
  00a48	84 c0		 test	 al, al
  00a4a	0f 84 7d 01 00
	00		 je	 $LN45@AnalyzeKer
  00a50	bb 10 00 00 00	 mov	 ebx, 16			; 00000010H
  00a55	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL737@AnalyzeKer:

; 8768 : 	{
; 8769 : 		if (CreateProcess (NULL, (LPSTR) ("\"" + kdPath + "\" -z \"" + dumpPath + "\" -y http://msdl.microsoft.com/download/symbols -c \".bugcheck; !analyze -v; q\"").c_str(),
; 8770 : 			NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &startupInfo, &procInfo))

  00a60	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@EEFBGPBB@?$CC?5?9y?5http?3?1?1msdl?4microsoft?4com?1d@
  00a65	8d 94 24 a8 02
	00 00		 lea	 edx, DWORD PTR _dumpPath$[esp+8012]
  00a6c	52		 push	 edx
  00a6d	68 00 00 00 00	 push	 OFFSET ??_C@_06JPDBKGIP@?$CC?5?9z?5?$CC?$AA@
  00a72	57		 push	 edi
  00a73	8d 84 24 60 02
	00 00		 lea	 eax, DWORD PTR $T197006[esp+8024]
  00a7a	68 00 00 00 00	 push	 OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@
  00a7f	50		 push	 eax
  00a80	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00a85	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a88	50		 push	 eax
  00a89	8d 8c 24 08 03
	00 00		 lea	 ecx, DWORD PTR $T197007[esp+8024]
  00a90	51		 push	 ecx
  00a91	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00a96	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a99	50		 push	 eax
  00a9a	8d 94 24 cc 02
	00 00		 lea	 edx, DWORD PTR $T197008[esp+8020]
  00aa1	52		 push	 edx
  00aa2	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00aa7	83 c4 0c	 add	 esp, 12			; 0000000cH
  00aaa	50		 push	 eax
  00aab	8d 84 24 3c 02
	00 00		 lea	 eax, DWORD PTR $T197009[esp+8016]
  00ab2	50		 push	 eax
  00ab3	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00ab8	83 c4 0c	 add	 esp, 12			; 0000000cH
  00abb	39 58 18	 cmp	 DWORD PTR [eax+24], ebx
  00abe	72 05		 jb	 SHORT $LN745@AnalyzeKer
  00ac0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00ac3	eb 03		 jmp	 SHORT $LN746@AnalyzeKer
$LN745@AnalyzeKer:
  00ac5	83 c0 04	 add	 eax, 4
$LN746@AnalyzeKer:
  00ac8	8d 4c 24 24	 lea	 ecx, DWORD PTR _procInfo$[esp+8008]
  00acc	51		 push	 ecx
  00acd	8d 94 24 6c 01
	00 00		 lea	 edx, DWORD PTR _startupInfo$[esp+8012]
  00ad4	52		 push	 edx
  00ad5	6a 00		 push	 0
  00ad7	6a 00		 push	 0
  00ad9	68 00 00 00 08	 push	 134217728		; 08000000H
  00ade	6a 01		 push	 1
  00ae0	6a 00		 push	 0
  00ae2	6a 00		 push	 0
  00ae4	50		 push	 eax
  00ae5	6a 00		 push	 0
  00ae7	ff d5		 call	 ebp
  00ae9	8b f0		 mov	 esi, eax
  00aeb	39 9c 24 4c 02
	00 00		 cmp	 DWORD PTR $T197009[esp+8032], ebx
  00af2	72 10		 jb	 SHORT $LN763@AnalyzeKer
  00af4	8b 84 24 38 02
	00 00		 mov	 eax, DWORD PTR $T197009[esp+8012]
  00afb	50		 push	 eax
  00afc	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00b01	83 c4 04	 add	 esp, 4
$LN763@AnalyzeKer:
  00b04	c7 84 24 4c 02
	00 00 0f 00 00
	00		 mov	 DWORD PTR $T197009[esp+8032], 15 ; 0000000fH
  00b0f	c7 84 24 48 02
	00 00 00 00 00
	00		 mov	 DWORD PTR $T197009[esp+8028], 0
  00b1a	c6 84 24 38 02
	00 00 00	 mov	 BYTE PTR $T197009[esp+8012], 0
  00b22	39 9c 24 d8 02
	00 00		 cmp	 DWORD PTR $T197008[esp+8032], ebx
  00b29	72 10		 jb	 SHORT $LN789@AnalyzeKer
  00b2b	8b 8c 24 c4 02
	00 00		 mov	 ecx, DWORD PTR $T197008[esp+8012]
  00b32	51		 push	 ecx
  00b33	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00b38	83 c4 04	 add	 esp, 4
$LN789@AnalyzeKer:
  00b3b	c7 84 24 d8 02
	00 00 0f 00 00
	00		 mov	 DWORD PTR $T197008[esp+8032], 15 ; 0000000fH
  00b46	c7 84 24 d4 02
	00 00 00 00 00
	00		 mov	 DWORD PTR $T197008[esp+8028], 0
  00b51	c6 84 24 c4 02
	00 00 00	 mov	 BYTE PTR $T197008[esp+8012], 0
  00b59	39 9c 24 10 03
	00 00		 cmp	 DWORD PTR $T197007[esp+8032], ebx
  00b60	72 10		 jb	 SHORT $LN815@AnalyzeKer
  00b62	8b 94 24 fc 02
	00 00		 mov	 edx, DWORD PTR $T197007[esp+8012]
  00b69	52		 push	 edx
  00b6a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00b6f	83 c4 04	 add	 esp, 4
$LN815@AnalyzeKer:
  00b72	c7 84 24 10 03
	00 00 0f 00 00
	00		 mov	 DWORD PTR $T197007[esp+8032], 15 ; 0000000fH
  00b7d	c7 84 24 0c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR $T197007[esp+8028], 0
  00b88	c6 84 24 fc 02
	00 00 00	 mov	 BYTE PTR $T197007[esp+8012], 0
  00b90	39 9c 24 68 02
	00 00		 cmp	 DWORD PTR $T197006[esp+8032], ebx
  00b97	72 10		 jb	 SHORT $LN841@AnalyzeKer
  00b99	8b 84 24 54 02
	00 00		 mov	 eax, DWORD PTR $T197006[esp+8012]
  00ba0	50		 push	 eax
  00ba1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00ba6	83 c4 04	 add	 esp, 4
$LN841@AnalyzeKer:
  00ba9	85 f6		 test	 esi, esi
  00bab	75 1b		 jne	 SHORT $LN1655@AnalyzeKer
  00bad	80 7c 24 7d 00	 cmp	 BYTE PTR _$S7$141381[esp+8013], 0
  00bb2	c6 44 24 7c 01	 mov	 BYTE PTR _$S7$141381[esp+8012], 1
  00bb7	0f 94 c0	 sete	 al
  00bba	88 44 24 7d	 mov	 BYTE PTR _$S7$141381[esp+8013], al
  00bbe	84 c0		 test	 al, al
  00bc0	0f 85 9a fe ff
	ff		 jne	 $LL737@AnalyzeKer

; 8869 : 		if (p1 == string::npos)

  00bc6	eb 05		 jmp	 SHORT $LN45@AnalyzeKer
$LN1655@AnalyzeKer:

; 8771 : 		{
; 8772 : 			kdRunning = true;

  00bc8	c6 44 24 10 01	 mov	 BYTE PTR _kdRunning$[esp+8008], 1
$LN45@AnalyzeKer:

; 8765 : 
; 8766 : 	bool kdRunning = false;
; 8767 : 	foreach (const string &kdPath, kdPaths)

  00bcd	8b 54 24 78	 mov	 edx, DWORD PTR _$S7$141381[esp+8008]
  00bd1	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00bd4	8d 4c 24 78	 lea	 ecx, DWORD PTR _$S7$141381[esp+8008]
  00bd8	ff d0		 call	 eax
  00bda	8b 54 24 78	 mov	 edx, DWORD PTR _$S7$141381[esp+8008]
  00bde	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00be1	8d 4c 24 78	 lea	 ecx, DWORD PTR _$S7$141381[esp+8008]
  00be5	ff d0		 call	 eax
  00be7	84 c0		 test	 al, al
  00be9	0f 85 11 fe ff
	ff		 jne	 $LL46@AnalyzeKer
$LN44@AnalyzeKer:

; 8773 : 			break;
; 8774 : 		}
; 8775 : 	}

  00bef	8d 8c 24 80 00
	00 00		 lea	 ecx, DWORD PTR _$S7$141381[esp+8016]
  00bf6	e8 00 00 00 00	 call	 ?clear@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
  00bfb	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR _$S7$141381[esp+8036]
  00c02	51		 push	 ecx
  00c03	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00c08	8b 94 24 84 00
	00 00		 mov	 edx, DWORD PTR _$S7$141381[esp+8020]
  00c0f	33 ff		 xor	 edi, edi
  00c11	52		 push	 edx
  00c12	89 bc 24 9c 00
	00 00		 mov	 DWORD PTR _$S7$141381[esp+8044], edi
  00c19	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00c1e	83 c4 08	 add	 esp, 8

; 8776 : 
; 8777 : 	if (!kdRunning)

  00c21	80 7c 24 10 00	 cmp	 BYTE PTR _kdRunning$[esp+8008], 0
  00c26	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR _$S7$141381[esp+8008], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00c2e	0f 85 e2 00 00
	00		 jne	 $LN39@AnalyzeKer

; 8778 : 	{
; 8779 : 		handleWin32Error (hwndDlg);

  00c34	8b 44 24 18	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[esp+8008]
  00c38	50		 push	 eax
  00c39	e8 00 00 00 00	 call	 _handleWin32Error

; 8780 : 		Error ("DEBUGGER_NOT_FOUND");

  00c3e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JOHJKMBG@DEBUGGER_NOT_FOUND?$AA@
  00c43	e8 00 00 00 00	 call	 _Error

; 8781 : 		return;

  00c48	bb 10 00 00 00	 mov	 ebx, 16			; 00000010H
  00c4d	83 c4 08	 add	 esp, 8
  00c50	39 9c 24 2c 03
	00 00		 cmp	 DWORD PTR _kdPath$[esp+8032], ebx
  00c57	72 10		 jb	 SHORT $LN893@AnalyzeKer
  00c59	8b 8c 24 18 03
	00 00		 mov	 ecx, DWORD PTR _kdPath$[esp+8012]
  00c60	51		 push	 ecx
  00c61	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00c66	83 c4 04	 add	 esp, 4
$LN893@AnalyzeKer:
  00c69	bd 0f 00 00 00	 mov	 ebp, 15			; 0000000fH
  00c6e	8d 4c 24 40	 lea	 ecx, DWORD PTR _kdPaths$[esp+8008]
  00c72	89 ac 24 2c 03
	00 00		 mov	 DWORD PTR _kdPath$[esp+8032], ebp
  00c79	89 bc 24 28 03
	00 00		 mov	 DWORD PTR _kdPath$[esp+8028], edi
  00c80	c6 84 24 18 03
	00 00 00	 mov	 BYTE PTR _kdPath$[esp+8012], 0
  00c88	e8 00 00 00 00	 call	 ?clear@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
  00c8d	8b 54 24 54	 mov	 edx, DWORD PTR _kdPaths$[esp+8028]
  00c91	52		 push	 edx
  00c92	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00c97	8b 44 24 44	 mov	 eax, DWORD PTR _kdPaths$[esp+8012]
  00c9b	50		 push	 eax
  00c9c	89 7c 24 5c	 mov	 DWORD PTR _kdPaths$[esp+8036], edi
  00ca0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00ca5	83 c4 08	 add	 esp, 8
  00ca8	8d b4 24 a0 03
	00 00		 lea	 esi, DWORD PTR _finally8684$[esp+8008]
  00caf	e8 00 00 00 00	 call	 ??1Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@XZ ; `AnalyzeKernelMiniDump'::`17'::Finally8684::~Finally8684
  00cb4	39 9c 24 bc 02
	00 00		 cmp	 DWORD PTR _dumpPath$[esp+8032], ebx
  00cbb	72 10		 jb	 SHORT $LN941@AnalyzeKer
  00cbd	8b 8c 24 a8 02
	00 00		 mov	 ecx, DWORD PTR _dumpPath$[esp+8012]
  00cc4	51		 push	 ecx
  00cc5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00cca	83 c4 04	 add	 esp, 4
$LN941@AnalyzeKer:
  00ccd	89 ac 24 bc 02
	00 00		 mov	 DWORD PTR _dumpPath$[esp+8032], ebp
  00cd4	89 bc 24 b8 02
	00 00		 mov	 DWORD PTR _dumpPath$[esp+8028], edi
  00cdb	c6 84 24 a8 02
	00 00 00	 mov	 BYTE PTR _dumpPath$[esp+8012], 0
  00ce3	39 9c 24 a0 02
	00 00		 cmp	 DWORD PTR _tmpDumpPath$[esp+8032], ebx
  00cea	72 10		 jb	 SHORT $LN967@AnalyzeKer
  00cec	8b 94 24 8c 02
	00 00		 mov	 edx, DWORD PTR _tmpDumpPath$[esp+8012]
  00cf3	52		 push	 edx
  00cf4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00cf9	83 c4 04	 add	 esp, 4
$LN967@AnalyzeKer:
  00cfc	39 9c 24 f4 02
	00 00		 cmp	 DWORD PTR _memDumpPath$[esp+8032], ebx
  00d03	89 ac 24 a0 02
	00 00		 mov	 DWORD PTR _tmpDumpPath$[esp+8032], ebp
  00d0a	89 bc 24 9c 02
	00 00		 mov	 DWORD PTR _tmpDumpPath$[esp+8028], edi
  00d11	e9 0f f5 ff ff	 jmp	 $LN1689@AnalyzeKer
$LN39@AnalyzeKer:

; 8782 : 	}
; 8783 : 
; 8784 : 	EnableElevatedCursorChange (hwndDlg);

  00d16	8b 4c 24 18	 mov	 ecx, DWORD PTR _hwndDlg$GSCopy$[esp+8008]
  00d1a	51		 push	 ecx
  00d1b	e8 00 00 00 00	 call	 _EnableElevatedCursorChange
  00d20	83 c4 04	 add	 esp, 4

; 8785 : 	WaitCursor();

  00d23	e8 00 00 00 00	 call	 _WaitCursor

; 8786 : 
; 8787 : 	CloseHandle (procInfo.hProcess);

  00d28	8b 54 24 24	 mov	 edx, DWORD PTR _procInfo$[esp+8008]
  00d2c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__CloseHandle@4
  00d32	52		 push	 edx
  00d33	ff d6		 call	 esi

; 8788 : 	CloseHandle (procInfo.hThread);

  00d35	8b 44 24 28	 mov	 eax, DWORD PTR _procInfo$[esp+8012]
  00d39	50		 push	 eax
  00d3a	ff d6		 call	 esi

; 8789 : 	CloseHandle (hChildStdoutWrite);

  00d3c	8b 4c 24 20	 mov	 ecx, DWORD PTR _hChildStdoutWrite$[esp+8008]
  00d40	51		 push	 ecx
  00d41	ff d6		 call	 esi

; 8790 : 
; 8791 : 	string output;
; 8792 : 
; 8793 : 	while (TRUE) 
; 8794 : 	{ 
; 8795 : 		DWORD bytesReceived;
; 8796 : 		char pipeBuffer [4096];
; 8797 : 
; 8798 : 		if (!ReadFile (hChildStdoutRead, pipeBuffer, sizeof (pipeBuffer), &bytesReceived, NULL)) 

  00d43	8b 4c 24 1c	 mov	 ecx, DWORD PTR _hChildStdoutRead$[esp+8008]
  00d47	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__ReadFile@20
  00d4d	57		 push	 edi
  00d4e	8d 54 24 1c	 lea	 edx, DWORD PTR _bytesReceived$141445[esp+8012]
  00d52	52		 push	 edx
  00d53	68 00 10 00 00	 push	 4096			; 00001000H
  00d58	8d 84 24 50 0f
	00 00		 lea	 eax, DWORD PTR _pipeBuffer$141446[esp+8020]
  00d5f	50		 push	 eax
  00d60	bd 0f 00 00 00	 mov	 ebp, 15			; 0000000fH
  00d65	51		 push	 ecx
  00d66	89 ac 24 98 02
	00 00		 mov	 DWORD PTR _output$[esp+8052], ebp
  00d6d	89 bc 24 94 02
	00 00		 mov	 DWORD PTR _output$[esp+8048], edi
  00d74	c6 84 24 84 02
	00 00 00	 mov	 BYTE PTR _output$[esp+8032], 0
  00d7c	ff d6		 call	 esi
  00d7e	85 c0		 test	 eax, eax
  00d80	74 3f		 je	 SHORT $LN1656@AnalyzeKer
$LL38@AnalyzeKer:

; 8799 : 			break; 
; 8800 : 
; 8801 : 		output.insert (output.size(), pipeBuffer, bytesReceived);

  00d82	8b 54 24 18	 mov	 edx, DWORD PTR _bytesReceived$141445[esp+8008]
  00d86	8b 8c 24 80 02
	00 00		 mov	 ecx, DWORD PTR _output$[esp+8028]
  00d8d	52		 push	 edx
  00d8e	8d 84 24 48 0f
	00 00		 lea	 eax, DWORD PTR _pipeBuffer$141446[esp+8012]
  00d95	50		 push	 eax
  00d96	51		 push	 ecx
  00d97	8d 8c 24 78 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8020]
  00d9e	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  00da3	8b 4c 24 1c	 mov	 ecx, DWORD PTR _hChildStdoutRead$[esp+8008]
  00da7	57		 push	 edi
  00da8	8d 54 24 1c	 lea	 edx, DWORD PTR _bytesReceived$141445[esp+8012]
  00dac	52		 push	 edx
  00dad	68 00 10 00 00	 push	 4096			; 00001000H
  00db2	8d 84 24 50 0f
	00 00		 lea	 eax, DWORD PTR _pipeBuffer$141446[esp+8020]
  00db9	50		 push	 eax
  00dba	51		 push	 ecx
  00dbb	ff d6		 call	 esi
  00dbd	85 c0		 test	 eax, eax
  00dbf	75 c1		 jne	 SHORT $LL38@AnalyzeKer
$LN1656@AnalyzeKer:

; 8802 : 	}
; 8803 : 
; 8804 : 	NormalCursor();

  00dc1	e8 00 00 00 00	 call	 _NormalCursor

; 8805 : 
; 8806 : 	bool otherDriver = (StringToUpperCase (output).find (StringToUpperCase (TC_APP_NAME_LEGACY)) == string::npos);

  00dc6	68 00 00 00 00	 push	 OFFSET ??_C@_09EMKKFGIH@TrueCrypt?$AA@
  00dcb	8d 8c 24 fc 02
	00 00		 lea	 ecx, DWORD PTR $T197011[esp+8012]
  00dd2	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00dd7	8d 94 24 f8 02
	00 00		 lea	 edx, DWORD PTR $T197011[esp+8008]
  00dde	52		 push	 edx
  00ddf	8d 84 24 c4 02
	00 00		 lea	 eax, DWORD PTR $T197012[esp+8012]
  00de6	50		 push	 eax
  00de7	e8 00 00 00 00	 call	 ?StringToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; StringToUpperCase
  00dec	8d 8c 24 74 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8016]
  00df3	51		 push	 ecx
  00df4	8d 94 24 40 02
	00 00		 lea	 edx, DWORD PTR $T197010[esp+8020]
  00dfb	52		 push	 edx
  00dfc	8b f0		 mov	 esi, eax
  00dfe	e8 00 00 00 00	 call	 ?StringToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; StringToUpperCase
  00e03	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00e06	bb 10 00 00 00	 mov	 ebx, 16			; 00000010H
  00e0b	83 c4 10	 add	 esp, 16			; 00000010H
  00e0e	39 5e 18	 cmp	 DWORD PTR [esi+24], ebx
  00e11	72 05		 jb	 SHORT $LN1043@AnalyzeKer
  00e13	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00e16	eb 03		 jmp	 SHORT $LN1044@AnalyzeKer
$LN1043@AnalyzeKer:
  00e18	83 c6 04	 add	 esi, 4
$LN1044@AnalyzeKer:
  00e1b	51		 push	 ecx
  00e1c	57		 push	 edi
  00e1d	56		 push	 esi
  00e1e	8b c8		 mov	 ecx, eax
  00e20	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00e25	83 f8 ff	 cmp	 eax, -1
  00e28	0f 94 44 24 17	 sete	 BYTE PTR _otherDriver$[esp+8008]
  00e2d	39 9c 24 4c 02
	00 00		 cmp	 DWORD PTR $T197010[esp+8032], ebx
  00e34	72 10		 jb	 SHORT $LN1061@AnalyzeKer
  00e36	8b 84 24 38 02
	00 00		 mov	 eax, DWORD PTR $T197010[esp+8012]
  00e3d	50		 push	 eax
  00e3e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00e43	83 c4 04	 add	 esp, 4
$LN1061@AnalyzeKer:
  00e46	89 ac 24 4c 02
	00 00		 mov	 DWORD PTR $T197010[esp+8032], ebp
  00e4d	89 bc 24 48 02
	00 00		 mov	 DWORD PTR $T197010[esp+8028], edi
  00e54	c6 84 24 38 02
	00 00 00	 mov	 BYTE PTR $T197010[esp+8012], 0
  00e5c	39 9c 24 d8 02
	00 00		 cmp	 DWORD PTR $T197012[esp+8032], ebx
  00e63	72 10		 jb	 SHORT $LN1087@AnalyzeKer
  00e65	8b 8c 24 c4 02
	00 00		 mov	 ecx, DWORD PTR $T197012[esp+8012]
  00e6c	51		 push	 ecx
  00e6d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00e72	83 c4 04	 add	 esp, 4
$LN1087@AnalyzeKer:
  00e75	89 ac 24 d8 02
	00 00		 mov	 DWORD PTR $T197012[esp+8032], ebp
  00e7c	89 bc 24 d4 02
	00 00		 mov	 DWORD PTR $T197012[esp+8028], edi
  00e83	c6 84 24 c4 02
	00 00 00	 mov	 BYTE PTR $T197012[esp+8012], 0
  00e8b	39 9c 24 10 03
	00 00		 cmp	 DWORD PTR $T197011[esp+8032], ebx
  00e92	72 10		 jb	 SHORT $LN1113@AnalyzeKer
  00e94	8b 94 24 fc 02
	00 00		 mov	 edx, DWORD PTR $T197011[esp+8012]
  00e9b	52		 push	 edx
  00e9c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00ea1	83 c4 04	 add	 esp, 4
$LN1113@AnalyzeKer:

; 8807 : 
; 8808 : 	size_t p, p2;
; 8809 : 	while ((p = output.find ('`')) != string::npos)

  00ea4	6a 01		 push	 1
  00ea6	6a 00		 push	 0
  00ea8	8d 44 24 18	 lea	 eax, DWORD PTR $T201190[esp+8016]
  00eac	b3 60		 mov	 bl, 96			; 00000060H
  00eae	50		 push	 eax
  00eaf	8d 8c 24 78 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8020]
  00eb6	88 5c 24 1c	 mov	 BYTE PTR $T201190[esp+8020], bl
  00eba	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00ebf	8b f8		 mov	 edi, eax
  00ec1	83 ff ff	 cmp	 edi, -1
  00ec4	0f 84 e5 00 00
	00		 je	 $LN34@AnalyzeKer
  00eca	88 5c 24 10	 mov	 BYTE PTR $T201190[esp+8008], bl
  00ece	8b ff		 npad	 2
$LL35@AnalyzeKer:

; 8810 : 		output.erase (output.begin() + p);

  00ed0	8b 8c 24 84 02
	00 00		 mov	 ecx, DWORD PTR _output$[esp+8032]
  00ed7	8b 94 24 70 02
	00 00		 mov	 edx, DWORD PTR _output$[esp+8012]
  00ede	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00ee1	0f 82 17 01 00
	00		 jb	 $LN1129@AnalyzeKer
  00ee7	8b f2		 mov	 esi, edx
  00ee9	85 d2		 test	 edx, edx
  00eeb	74 2d		 je	 SHORT $LN1136@AnalyzeKer
$LN1667@AnalyzeKer:
  00eed	8b c2		 mov	 eax, edx
  00eef	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00ef2	73 07		 jae	 SHORT $LN1147@AnalyzeKer
  00ef4	8d 84 24 70 02
	00 00		 lea	 eax, DWORD PTR _output$[esp+8012]
$LN1147@AnalyzeKer:
  00efb	3b c6		 cmp	 eax, esi
  00efd	77 1b		 ja	 SHORT $LN1136@AnalyzeKer
  00eff	8b c2		 mov	 eax, edx
  00f01	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00f04	73 07		 jae	 SHORT $LN1151@AnalyzeKer
  00f06	8d 84 24 70 02
	00 00		 lea	 eax, DWORD PTR _output$[esp+8012]
$LN1151@AnalyzeKer:
  00f0d	8b 9c 24 80 02
	00 00		 mov	 ebx, DWORD PTR _output$[esp+8028]
  00f14	03 c3		 add	 eax, ebx
  00f16	3b f0		 cmp	 esi, eax
  00f18	76 13		 jbe	 SHORT $LN1135@AnalyzeKer
$LN1136@AnalyzeKer:
  00f1a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00f1f	8b 8c 24 84 02
	00 00		 mov	 ecx, DWORD PTR _output$[esp+8032]
  00f26	8b 94 24 70 02
	00 00		 mov	 edx, DWORD PTR _output$[esp+8012]
$LN1135@AnalyzeKer:
  00f2d	8d 9c 24 6c 02
	00 00		 lea	 ebx, DWORD PTR _output$[esp+8008]
  00f34	8b c3		 mov	 eax, ebx
  00f36	89 74 24 3c	 mov	 DWORD PTR __Tmp$201372[esp+8012], esi
  00f3a	83 f8 fc	 cmp	 eax, -4			; fffffffcH
  00f3d	74 3a		 je	 SHORT $LN1156@AnalyzeKer
  00f3f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00f42	8b ca		 mov	 ecx, edx
  00f44	73 07		 jae	 SHORT $LN1173@AnalyzeKer
  00f46	8d 8c 24 70 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8012]
$LN1173@AnalyzeKer:
  00f4d	8b ac 24 80 02
	00 00		 mov	 ebp, DWORD PTR _output$[esp+8028]
  00f54	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00f57	03 e9		 add	 ebp, ecx
  00f59	3b c5		 cmp	 eax, ebp
  00f5b	77 17		 ja	 SHORT $LN1159@AnalyzeKer
  00f5d	83 bc 24 84 02
	00 00 10	 cmp	 DWORD PTR _output$[esp+8032], 16 ; 00000010H
  00f65	8b ca		 mov	 ecx, edx
  00f67	73 07		 jae	 SHORT $LN1177@AnalyzeKer
  00f69	8d 8c 24 70 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8012]
$LN1177@AnalyzeKer:
  00f70	3b c1		 cmp	 eax, ecx
  00f72	73 05		 jae	 SHORT $LN1156@AnalyzeKer
$LN1159@AnalyzeKer:
  00f74	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN1156@AnalyzeKer:
  00f79	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00f7c	50		 push	 eax
  00f7d	53		 push	 ebx
  00f7e	8d 4c 24 40	 lea	 ecx, DWORD PTR $T197016[esp+8016]
  00f82	51		 push	 ecx
  00f83	8d 8c 24 78 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8020]
  00f8a	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00f8f	6a 01		 push	 1
  00f91	6a 00		 push	 0
  00f93	8d 54 24 18	 lea	 edx, DWORD PTR $T201190[esp+8016]
  00f97	52		 push	 edx
  00f98	8d 8c 24 78 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8020]
  00f9f	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00fa4	8b f8		 mov	 edi, eax
  00fa6	83 ff ff	 cmp	 edi, -1
  00fa9	0f 85 21 ff ff
	ff		 jne	 $LL35@AnalyzeKer
$LN34@AnalyzeKer:

; 8811 : 
; 8812 : 	p = output.find ("Bugcheck code ");

  00faf	6a 0e		 push	 14			; 0000000eH
  00fb1	6a 00		 push	 0
  00fb3	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IAENJCO@Bugcheck?5code?5?$AA@
  00fb8	8d 8c 24 78 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8020]
  00fbf	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00fc4	8b f0		 mov	 esi, eax

; 8813 : 	if (p == string::npos)

  00fc6	83 fe ff	 cmp	 esi, -1
  00fc9	75 3f		 jne	 SHORT $LN33@AnalyzeKer
$LN1684@AnalyzeKer:

; 8814 : 	{
; 8815 : 		Error ("ERR_PARAMETER_INCORRECT");

  00fcb	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NIGJHOFH@ERR_PARAMETER_INCORRECT?$AA@
  00fd0	e8 00 00 00 00	 call	 _Error
  00fd5	83 c4 04	 add	 esp, 4
$LN1685@AnalyzeKer:

; 8816 : 		return;

  00fd8	8d 8c 24 6c 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8008]
  00fdf	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00fe4	8d 8c 24 14 03
	00 00		 lea	 ecx, DWORD PTR _kdPath$[esp+8008]
  00feb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00ff0	8d 4c 24 40	 lea	 ecx, DWORD PTR _kdPaths$[esp+8008]
  00ff4	e8 00 00 00 00	 call	 ??1?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00ff9	e9 01 0d 00 00	 jmp	 $LN1683@AnalyzeKer

; 8810 : 		output.erase (output.begin() + p);

$LN1129@AnalyzeKer:
  00ffe	8d b4 24 70 02
	00 00		 lea	 esi, DWORD PTR _output$[esp+8012]
  01005	e9 e3 fe ff ff	 jmp	 $LN1667@AnalyzeKer
$LN33@AnalyzeKer:

; 8817 : 	}
; 8818 : 
; 8819 : 	uint64 bugcheckCode;
; 8820 : 	int n = sscanf (output.substr (p + 14, 8).c_str(), "%I64X", &bugcheckCode);

  0100a	6a 08		 push	 8
  0100c	8d 46 0e	 lea	 eax, DWORD PTR [esi+14]
  0100f	50		 push	 eax
  01010	8d 8c 24 3c 02
	00 00		 lea	 ecx, DWORD PTR $T197017[esp+8016]
  01017	51		 push	 ecx
  01018	8d 8c 24 78 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8020]
  0101f	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  01024	bb 10 00 00 00	 mov	 ebx, 16			; 00000010H
  01029	39 58 18	 cmp	 DWORD PTR [eax+24], ebx
  0102c	72 05		 jb	 SHORT $LN1186@AnalyzeKer
  0102e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  01031	eb 03		 jmp	 SHORT $LN1187@AnalyzeKer
$LN1186@AnalyzeKer:
  01033	83 c0 04	 add	 eax, 4
$LN1187@AnalyzeKer:
  01036	8d 94 24 ac 00
	00 00		 lea	 edx, DWORD PTR _bugcheckCode$[esp+8008]
  0103d	52		 push	 edx
  0103e	68 00 00 00 00	 push	 OFFSET ??_C@_05MIPPMNIM@?$CFI64X?$AA@
  01043	50		 push	 eax
  01044	e8 00 00 00 00	 call	 _sscanf
  01049	83 c4 0c	 add	 esp, 12			; 0000000cH
  0104c	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR $T197017[esp+8008]
  01053	8b f8		 mov	 edi, eax
  01055	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 8821 : 	if (n != 1)

  0105a	83 ff 01	 cmp	 edi, 1

; 8822 : 	{
; 8823 : 		Error ("ERR_PARAMETER_INCORRECT");
; 8824 : 		return;

  0105d	0f 85 68 ff ff
	ff		 jne	 $LN1684@AnalyzeKer

; 8825 : 	}
; 8826 : 
; 8827 : 	p = output.find ("Arguments ", p);

  01063	56		 push	 esi
  01064	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BOIEBBIA@Arguments?5?$AA@
  01069	8d 8c 24 74 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8016]
  01070	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  01075	8b f0		 mov	 esi, eax

; 8828 : 	
; 8829 : 	uint64 bugcheckArgs[4];
; 8830 : 	n = sscanf (output.substr (p + 10, (Is64BitOs() ? 17 : 9) * 4).c_str(), "%I64X %I64X %I64X %I64X", &bugcheckArgs[0], &bugcheckArgs[1], &bugcheckArgs[2], &bugcheckArgs[3]);

  01077	e8 00 00 00 00	 call	 _Is64BitOs
  0107c	f7 d8		 neg	 eax
  0107e	1b c0		 sbb	 eax, eax
  01080	83 e0 08	 and	 eax, 8
  01083	83 c0 09	 add	 eax, 9
  01086	03 c0		 add	 eax, eax
  01088	03 c0		 add	 eax, eax
  0108a	50		 push	 eax
  0108b	83 c6 0a	 add	 esi, 10			; 0000000aH
  0108e	56		 push	 esi
  0108f	8d 84 24 3c 02
	00 00		 lea	 eax, DWORD PTR $T197018[esp+8016]
  01096	50		 push	 eax
  01097	8d 8c 24 78 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8020]
  0109e	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  010a3	39 58 18	 cmp	 DWORD PTR [eax+24], ebx
  010a6	72 05		 jb	 SHORT $LN1192@AnalyzeKer
  010a8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  010ab	eb 03		 jmp	 SHORT $LN1193@AnalyzeKer
$LN1192@AnalyzeKer:
  010ad	83 c0 04	 add	 eax, 4
$LN1193@AnalyzeKer:
  010b0	8d 8c 24 cc 00
	00 00		 lea	 ecx, DWORD PTR _bugcheckArgs$[esp+8032]
  010b7	51		 push	 ecx
  010b8	8d 94 24 c8 00
	00 00		 lea	 edx, DWORD PTR _bugcheckArgs$[esp+8028]
  010bf	52		 push	 edx
  010c0	8d 8c 24 c4 00
	00 00		 lea	 ecx, DWORD PTR _bugcheckArgs$[esp+8024]
  010c7	51		 push	 ecx
  010c8	8d 94 24 c0 00
	00 00		 lea	 edx, DWORD PTR _bugcheckArgs$[esp+8020]
  010cf	52		 push	 edx
  010d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BFMPHOAO@?$CFI64X?5?$CFI64X?5?$CFI64X?5?$CFI64X?$AA@
  010d5	50		 push	 eax
  010d6	e8 00 00 00 00	 call	 _sscanf
  010db	83 c4 18	 add	 esp, 24			; 00000018H
  010de	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR $T197018[esp+8008]
  010e5	8b f0		 mov	 esi, eax
  010e7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 8831 : 	if (n != 4)

  010ec	83 fe 04	 cmp	 esi, 4

; 8832 : 	{
; 8833 : 		Error ("ERR_PARAMETER_INCORRECT");
; 8834 : 		return;

  010ef	0f 85 d6 fe ff
	ff		 jne	 $LN1684@AnalyzeKer

; 8835 : 	}
; 8836 : 
; 8837 : 	// Image name
; 8838 : 	string imageName, imageVersion;

  010f5	33 ff		 xor	 edi, edi

; 8839 : 	p = output.find ("IMAGE_NAME:");

  010f7	57		 push	 edi
  010f8	bd 0f 00 00 00	 mov	 ebp, 15			; 0000000fH
  010fd	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CBBALMMJ@IMAGE_NAME?3?$AA@
  01102	8d 8c 24 74 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8016]
  01109	89 ac 24 50 03
	00 00		 mov	 DWORD PTR _imageName$[esp+8040], ebp
  01110	89 bc 24 4c 03
	00 00		 mov	 DWORD PTR _imageName$[esp+8036], edi
  01117	c6 84 24 3c 03
	00 00 00	 mov	 BYTE PTR _imageName$[esp+8020], 0
  0111f	89 ac 24 a4 03
	00 00		 mov	 DWORD PTR _imageVersion$[esp+8040], ebp
  01126	89 bc 24 a0 03
	00 00		 mov	 DWORD PTR _imageVersion$[esp+8036], edi
  0112d	c6 84 24 90 03
	00 00 00	 mov	 BYTE PTR _imageVersion$[esp+8020], 0
  01135	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  0113a	8b f0		 mov	 esi, eax

; 8840 : 	if (p != string::npos)

  0113c	83 fe ff	 cmp	 esi, -1
  0113f	74 55		 je	 SHORT $LN29@AnalyzeKer

; 8841 : 	{
; 8842 : 		p += 13;
; 8843 : 		p2 = output.find ('\n', p);

  01141	6a 01		 push	 1
  01143	83 c6 0d	 add	 esi, 13			; 0000000dH
  01146	56		 push	 esi
  01147	8d 44 24 18	 lea	 eax, DWORD PTR $T201687[esp+8016]
  0114b	50		 push	 eax
  0114c	8d 8c 24 78 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8020]
  01153	c6 44 24 1c 0a	 mov	 BYTE PTR $T201687[esp+8020], 10 ; 0000000aH
  01158	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find

; 8844 : 		if (p2 != string::npos)

  0115d	83 f8 ff	 cmp	 eax, -1
  01160	74 34		 je	 SHORT $LN29@AnalyzeKer

; 8845 : 			imageName = output.substr (p, p2 - p);

  01162	2b c6		 sub	 eax, esi
  01164	50		 push	 eax
  01165	56		 push	 esi
  01166	8d 8c 24 3c 02
	00 00		 lea	 ecx, DWORD PTR $T197019[esp+8016]
  0116d	51		 push	 ecx
  0116e	8d 8c 24 78 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8020]
  01175	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  0117a	6a ff		 push	 -1
  0117c	57		 push	 edi
  0117d	50		 push	 eax
  0117e	8d 8c 24 3c 03
	00 00		 lea	 ecx, DWORD PTR _imageName$[esp+8020]
  01185	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0118a	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR $T197019[esp+8008]
  01191	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN29@AnalyzeKer:

; 8846 : 	}
; 8847 : 
; 8848 : 	// Stack trace
; 8849 : 	p = output.find ("STACK_TEXT:");

  01196	57		 push	 edi
  01197	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HHAMOJPD@STACK_TEXT?3?$AA@
  0119c	8d 8c 24 74 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8016]
  011a3	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  011a8	8b f0		 mov	 esi, eax

; 8850 : 	if (p == string::npos)

  011aa	83 fe ff	 cmp	 esi, -1
  011ad	75 2a		 jne	 SHORT $LN28@AnalyzeKer

; 8851 : 	{
; 8852 : 		Error ("ERR_PARAMETER_INCORRECT");

  011af	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NIGJHOFH@ERR_PARAMETER_INCORRECT?$AA@
  011b4	e8 00 00 00 00	 call	 _Error
  011b9	83 c4 04	 add	 esp, 4

; 8853 : 		return;

  011bc	8d 8c 24 84 03
	00 00		 lea	 ecx, DWORD PTR _imageVersion$[esp+8008]
  011c3	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  011c8	8d 8c 24 30 03
	00 00		 lea	 ecx, DWORD PTR _imageName$[esp+8008]
  011cf	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  011d4	e9 ff fd ff ff	 jmp	 $LN1685@AnalyzeKer
$LN28@AnalyzeKer:

; 8854 : 	}
; 8855 : 
; 8856 : 	p2 = output.find ("FOLLOWUP_IP:", p);

  011d9	56		 push	 esi
  011da	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MBCBPEAG@FOLLOWUP_IP?3?$AA@
  011df	8d 8c 24 74 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8016]
  011e6	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find

; 8857 : 	if (p2 == string::npos)

  011eb	83 f8 ff	 cmp	 eax, -1
  011ee	75 1e		 jne	 SHORT $LN1264@AnalyzeKer

; 8858 : 		p2 = output.find ("STACK_COMMAND:", p);

  011f0	56		 push	 esi
  011f1	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NOCFBPIP@STACK_COMMAND?3?$AA@
  011f6	8d 8c 24 74 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8016]
  011fd	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find

; 8859 : 	if (p2 == string::npos)

  01202	83 f8 ff	 cmp	 eax, -1
  01205	75 07		 jne	 SHORT $LN1264@AnalyzeKer

; 8860 : 		p2 = output.size();

  01207	8b 84 24 80 02
	00 00		 mov	 eax, DWORD PTR _output$[esp+8028]
$LN1264@AnalyzeKer:

; 8861 : 
; 8862 : 	output = output.substr (p, p2 - p);

  0120e	2b c6		 sub	 eax, esi
  01210	50		 push	 eax
  01211	56		 push	 esi
  01212	8d 94 24 3c 02
	00 00		 lea	 edx, DWORD PTR $T197020[esp+8016]
  01219	52		 push	 edx
  0121a	8d 8c 24 78 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8020]
  01221	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  01226	6a ff		 push	 -1
  01228	57		 push	 edi
  01229	50		 push	 eax
  0122a	8d 8c 24 78 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8020]
  01231	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  01236	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR $T197020[esp+8008]
  0123d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 8863 : 
; 8864 : 	list <string> retAddrs;

  01242	8d 8c 24 4c 01
	00 00		 lea	 ecx, DWORD PTR _retAddrs$[esp+8008]
  01249	e8 00 00 00 00	 call	 ??0?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 8865 : 	p = 0;
; 8866 : 	while ((p = output.find ("+", p)) != string::npos)

  0124e	6a 01		 push	 1
  01250	57		 push	 edi
  01251	68 00 00 00 00	 push	 OFFSET ??_C@_01MIFGBAGJ@?$CL?$AA@
  01256	8d 8c 24 78 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8020]
  0125d	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  01262	8b f0		 mov	 esi, eax
  01264	83 fe ff	 cmp	 esi, -1
  01267	0f 84 51 01 00
	00		 je	 $LN1657@AnalyzeKer
  0126d	b3 29		 mov	 bl, 41			; 00000029H
  0126f	90		 npad	 1
$LL25@AnalyzeKer:

; 8867 : 	{
; 8868 : 		size_t p1 = output.rfind (" ", p);

  01270	6a 01		 push	 1
  01272	56		 push	 esi
  01273	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  01278	8d 8c 24 78 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8020]
  0127f	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  01284	8b f8		 mov	 edi, eax

; 8869 : 		if (p1 == string::npos)

  01286	83 ff ff	 cmp	 edi, -1
  01289	0f 84 2f 01 00
	00		 je	 $LN1657@AnalyzeKer

; 8870 : 			break;
; 8871 : 
; 8872 : 		p = output.find ('\n', p);

  0128f	6a 01		 push	 1
  01291	56		 push	 esi
  01292	8d 44 24 18	 lea	 eax, DWORD PTR $T201728[esp+8016]
  01296	50		 push	 eax
  01297	8d 8c 24 78 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8020]
  0129e	c6 44 24 1c 0a	 mov	 BYTE PTR $T201728[esp+8020], 10 ; 0000000aH
  012a3	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  012a8	8b f0		 mov	 esi, eax

; 8873 : 		if (p == string::npos)

  012aa	83 fe ff	 cmp	 esi, -1
  012ad	75 08		 jne	 SHORT $LN22@AnalyzeKer

; 8874 : 			p = output.size() - 1;

  012af	8b b4 24 80 02
	00 00		 mov	 esi, DWORD PTR _output$[esp+8028]
  012b6	4e		 dec	 esi
$LN22@AnalyzeKer:

; 8875 : 
; 8876 : 		string s = output.substr (p1 + 1, p - p1 - 1);

  012b7	8b ce		 mov	 ecx, esi
  012b9	2b cf		 sub	 ecx, edi
  012bb	49		 dec	 ecx
  012bc	51		 push	 ecx
  012bd	47		 inc	 edi
  012be	57		 push	 edi
  012bf	8d 94 24 58 02
	00 00		 lea	 edx, DWORD PTR _s$141642[esp+8016]
  012c6	52		 push	 edx
  012c7	8d 8c 24 78 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8020]
  012ce	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr

; 8877 : 
; 8878 : 		if (s.find ('(') == 0)

  012d3	6a 01		 push	 1
  012d5	6a 00		 push	 0
  012d7	8d 44 24 18	 lea	 eax, DWORD PTR $T201736[esp+8016]
  012db	50		 push	 eax
  012dc	8d 8c 24 5c 02
	00 00		 lea	 ecx, DWORD PTR _s$141642[esp+8020]
  012e3	c6 44 24 1c 28	 mov	 BYTE PTR $T201736[esp+8020], 40 ; 00000028H
  012e8	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  012ed	85 c0		 test	 eax, eax
  012ef	75 35		 jne	 SHORT $LN21@AnalyzeKer

; 8879 : 			s = s.substr (1);

  012f1	6a ff		 push	 -1
  012f3	6a 01		 push	 1
  012f5	8d 8c 24 3c 02
	00 00		 lea	 ecx, DWORD PTR $T197021[esp+8016]
  012fc	51		 push	 ecx
  012fd	8d 8c 24 5c 02
	00 00		 lea	 ecx, DWORD PTR _s$141642[esp+8020]
  01304	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  01309	6a ff		 push	 -1
  0130b	6a 00		 push	 0
  0130d	50		 push	 eax
  0130e	8d 8c 24 5c 02
	00 00		 lea	 ecx, DWORD PTR _s$141642[esp+8020]
  01315	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0131a	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR $T197021[esp+8008]
  01321	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN21@AnalyzeKer:

; 8880 : 		if (s.rfind (')') == s.size() - 1)

  01326	8b bc 24 64 02
	00 00		 mov	 edi, DWORD PTR _s$141642[esp+8028]
  0132d	6a 01		 push	 1
  0132f	6a ff		 push	 -1
  01331	8d 54 24 18	 lea	 edx, DWORD PTR $T201749[esp+8016]
  01335	52		 push	 edx
  01336	8d 8c 24 5c 02
	00 00		 lea	 ecx, DWORD PTR _s$141642[esp+8020]
  0133d	88 5c 24 1c	 mov	 BYTE PTR $T201749[esp+8020], bl
  01341	4f		 dec	 edi
  01342	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  01347	3b c7		 cmp	 eax, edi
  01349	75 34		 jne	 SHORT $LN20@AnalyzeKer

; 8881 : 			s = s.substr (0, s.size() - 1);

  0134b	57		 push	 edi
  0134c	6a 00		 push	 0
  0134e	8d 84 24 3c 02
	00 00		 lea	 eax, DWORD PTR $T197022[esp+8016]
  01355	50		 push	 eax
  01356	8d 8c 24 5c 02
	00 00		 lea	 ecx, DWORD PTR _s$141642[esp+8020]
  0135d	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  01362	6a ff		 push	 -1
  01364	6a 00		 push	 0
  01366	50		 push	 eax
  01367	8d 8c 24 5c 02
	00 00		 lea	 ecx, DWORD PTR _s$141642[esp+8020]
  0136e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  01373	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR $T197022[esp+8008]
  0137a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN20@AnalyzeKer:

; 8882 : 
; 8883 : 		retAddrs.push_back (s);

  0137f	8d 8c 24 50 02
	00 00		 lea	 ecx, DWORD PTR _s$141642[esp+8008]
  01386	51		 push	 ecx
  01387	8d 8c 24 50 01
	00 00		 lea	 ecx, DWORD PTR _retAddrs$[esp+8012]
  0138e	e8 00 00 00 00	 call	 ?push_back@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back

; 8884 : 	}

  01393	8d 8c 24 50 02
	00 00		 lea	 ecx, DWORD PTR _s$141642[esp+8008]
  0139a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0139f	6a 01		 push	 1
  013a1	56		 push	 esi
  013a2	68 00 00 00 00	 push	 OFFSET ??_C@_01MIFGBAGJ@?$CL?$AA@
  013a7	8d 8c 24 78 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8020]
  013ae	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  013b3	8b f0		 mov	 esi, eax
  013b5	83 fe ff	 cmp	 esi, -1
  013b8	0f 85 b2 fe ff
	ff		 jne	 $LL25@AnalyzeKer
$LN1657@AnalyzeKer:

; 8885 : 
; 8886 : 	char url[MAX_URL_LENGTH];
; 8887 : 	sprintf (url, TC_APPLINK_SECURE "&dest=syserr-report&os=%s&osver=%d.%d.%d&arch=%s&err=%I64x&arg1=%I64x&arg2=%I64x&arg3=%I64x&arg4=%I64x&flag=%s&drv=%s",
; 8888 : 		GetWindowsEdition().c_str(),
; 8889 : 		CurrentOSMajor,
; 8890 : 		CurrentOSMinor,
; 8891 : 		CurrentOSServicePack,
; 8892 : 		Is64BitOs() ? "x64" : "x86",
; 8893 : 		bugcheckCode,
; 8894 : 		bugcheckArgs[0],
; 8895 : 		bugcheckArgs[1],
; 8896 : 		bugcheckArgs[2],
; 8897 : 		bugcheckArgs[3],
; 8898 : 		otherDriver ? "0" : "1",
; 8899 : 		imageName.empty() ? "-" : imageName.c_str()
; 8900 : 		);

  013be	83 bc 24 44 03
	00 00 00	 cmp	 DWORD PTR _imageName$[esp+8028], 0
  013c6	75 07		 jne	 SHORT $LN74@AnalyzeKer
  013c8	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_01JOAMLHOP@?9?$AA@
  013cd	eb 18		 jmp	 SHORT $LN1305@AnalyzeKer
$LN74@AnalyzeKer:
  013cf	83 bc 24 48 03
	00 00 10	 cmp	 DWORD PTR _imageName$[esp+8032], 16 ; 00000010H
  013d7	8b 9c 24 34 03
	00 00		 mov	 ebx, DWORD PTR _imageName$[esp+8012]
  013de	73 07		 jae	 SHORT $LN1305@AnalyzeKer
  013e0	8d 9c 24 34 03
	00 00		 lea	 ebx, DWORD PTR _imageName$[esp+8012]
$LN1305@AnalyzeKer:
  013e7	80 7c 24 17 00	 cmp	 BYTE PTR _otherDriver$[esp+8008], 0
  013ec	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_01GBGANLPD@0?$AA@
  013f1	75 05		 jne	 SHORT $LN77@AnalyzeKer
  013f3	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_01HIHLOKLC@1?$AA@
$LN77@AnalyzeKer:
  013f8	e8 00 00 00 00	 call	 _Is64BitOs
  013fd	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_03OLPMMCEF@x64?$AA@
  01402	85 c0		 test	 eax, eax
  01404	75 05		 jne	 SHORT $LN79@AnalyzeKer
  01406	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_03NDFEINMN@x86?$AA@
$LN79@AnalyzeKer:
  0140b	8d 94 24 34 02
	00 00		 lea	 edx, DWORD PTR $T197029[esp+8008]
  01412	52		 push	 edx
  01413	e8 00 00 00 00	 call	 ?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; GetWindowsEdition
  01418	83 c4 04	 add	 esp, 4
  0141b	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0141f	72 05		 jb	 SHORT $LN1310@AnalyzeKer
  01421	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  01424	eb 03		 jmp	 SHORT $LN1311@AnalyzeKer
$LN1310@AnalyzeKer:
  01426	83 c0 04	 add	 eax, 4
$LN1311@AnalyzeKer:
  01429	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR _bugcheckArgs$[esp+8036]
  01430	8b 94 24 cc 00
	00 00		 mov	 edx, DWORD PTR _bugcheckArgs$[esp+8032]
  01437	53		 push	 ebx
  01438	57		 push	 edi
  01439	51		 push	 ecx
  0143a	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR _bugcheckArgs$[esp+8040]
  01441	52		 push	 edx
  01442	8b 94 24 d4 00
	00 00		 mov	 edx, DWORD PTR _bugcheckArgs$[esp+8040]
  01449	51		 push	 ecx
  0144a	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR _bugcheckArgs$[esp+8040]
  01451	52		 push	 edx
  01452	8b 94 24 d4 00
	00 00		 mov	 edx, DWORD PTR _bugcheckArgs$[esp+8040]
  01459	51		 push	 ecx
  0145a	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR _bugcheckArgs$[esp+8040]
  01461	52		 push	 edx
  01462	8b 94 24 d4 00
	00 00		 mov	 edx, DWORD PTR _bugcheckArgs$[esp+8040]
  01469	51		 push	 ecx
  0146a	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR _bugcheckCode$[esp+8048]
  01471	52		 push	 edx
  01472	8b 94 24 d4 00
	00 00		 mov	 edx, DWORD PTR _bugcheckCode$[esp+8048]
  01479	51		 push	 ecx
  0147a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _CurrentOSServicePack
  01480	52		 push	 edx
  01481	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _CurrentOSMinor
  01487	56		 push	 esi
  01488	51		 push	 ecx
  01489	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _CurrentOSMajor
  0148f	52		 push	 edx
  01490	51		 push	 ecx
  01491	50		 push	 eax
  01492	8d 94 24 64 07
	00 00		 lea	 edx, DWORD PTR _url$[esp+8076]
  01499	68 00 00 00 00	 push	 OFFSET ??_C@_0KE@GCNIJMJG@https?3?1?1ciphershed?4org?1applink?$DPv@
  0149e	52		 push	 edx
  0149f	e8 00 00 00 00	 call	 _sprintf
  014a4	83 c4 4c	 add	 esp, 76			; 0000004cH
  014a7	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR $T197029[esp+8008]
  014ae	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 8901 : 
; 8902 : 	stringstream stackTraceArgs;

  014b3	6a 01		 push	 1
  014b5	6a 03		 push	 3
  014b7	8d 8c 24 b4 01
	00 00		 lea	 ecx, DWORD PTR _stackTraceArgs$[esp+8016]
  014be	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >

; 8903 : 	int i = 0;
; 8904 : 	foreach (const string &retAddr, retAddrs)

  014c3	8d 84 24 4c 01
	00 00		 lea	 eax, DWORD PTR _retAddrs$[esp+8008]
  014ca	50		 push	 eax
  014cb	8d 8c 24 1c 01
	00 00		 lea	 ecx, DWORD PTR _$S8$141658[esp+8012]
  014d2	51		 push	 ecx
  014d3	33 f6		 xor	 esi, esi
  014d5	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@01@ABV?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
  014da	8b 94 24 20 01
	00 00		 mov	 edx, DWORD PTR _$S8$141658[esp+8016]
  014e1	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  014e4	83 c4 08	 add	 esp, 8
  014e7	8d 8c 24 18 01
	00 00		 lea	 ecx, DWORD PTR _$S8$141658[esp+8008]
  014ee	ff d0		 call	 eax
  014f0	84 c0		 test	 al, al
  014f2	0f 84 b7 00 00
	00		 je	 $LN17@AnalyzeKer
  014f8	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL19@AnalyzeKer:
  01500	8d 8c 24 44 01
	00 00		 lea	 ecx, DWORD PTR _$S8$141658[esp+8052]
  01507	e8 00 00 00 00	 call	 ??D?$_Const_iterator@$00@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Const_iterator<1>::operator*
  0150c	80 bc 24 1d 01
	00 00 00	 cmp	 BYTE PTR _$S8$141658[esp+8013], 0
  01514	8b f8		 mov	 edi, eax
  01516	0f 94 c0	 sete	 al
  01519	88 84 24 1d 01
	00 00		 mov	 BYTE PTR _$S8$141658[esp+8013], al
  01520	84 c0		 test	 al, al
  01522	74 5d		 je	 SHORT $LN18@AnalyzeKer
  01524	eb 0a 8d a4 24
	00 00 00 00 8d
	49 00		 npad	 12
$LL1318@AnalyzeKer:

; 8905 : 	{
; 8906 : 		stackTraceArgs << "&st" << i++ << "=" << retAddr;

  01530	56		 push	 esi
  01531	8d 8c 24 b8 01
	00 00		 lea	 ecx, DWORD PTR _stackTraceArgs$[esp+8020]
  01538	68 00 00 00 00	 push	 OFFSET ??_C@_03EGAGLKPK@?$CGst?$AA@
  0153d	51		 push	 ecx
  0153e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  01543	83 c4 08	 add	 esp, 8
  01546	8b c8		 mov	 ecx, eax
  01548	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0154d	68 00 00 00 00	 push	 OFFSET ??_C@_01NEMOKFLO@?$DN?$AA@
  01552	50		 push	 eax
  01553	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  01558	57		 push	 edi
  01559	50		 push	 eax
  0155a	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  0155f	83 c4 10	 add	 esp, 16			; 00000010H
  01562	46		 inc	 esi
  01563	80 bc 24 1d 01
	00 00 00	 cmp	 BYTE PTR _$S8$141658[esp+8013], 0
  0156b	c6 84 24 1c 01
	00 00 01	 mov	 BYTE PTR _$S8$141658[esp+8012], 1
  01573	0f 94 c0	 sete	 al
  01576	88 84 24 1d 01
	00 00		 mov	 BYTE PTR _$S8$141658[esp+8013], al
  0157d	84 c0		 test	 al, al
  0157f	75 af		 jne	 SHORT $LL1318@AnalyzeKer
$LN18@AnalyzeKer:

; 8903 : 	int i = 0;
; 8904 : 	foreach (const string &retAddr, retAddrs)

  01581	8b 94 24 18 01
	00 00		 mov	 edx, DWORD PTR _$S8$141658[esp+8008]
  01588	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0158b	8d 8c 24 18 01
	00 00		 lea	 ecx, DWORD PTR _$S8$141658[esp+8008]
  01592	ff d0		 call	 eax
  01594	8b 94 24 18 01
	00 00		 mov	 edx, DWORD PTR _$S8$141658[esp+8008]
  0159b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0159e	8d 8c 24 18 01
	00 00		 lea	 ecx, DWORD PTR _$S8$141658[esp+8008]
  015a5	ff d0		 call	 eax
  015a7	84 c0		 test	 al, al
  015a9	0f 85 51 ff ff
	ff		 jne	 $LL19@AnalyzeKer
$LN17@AnalyzeKer:

; 8907 : 	}

  015af	8d 8c 24 18 01
	00 00		 lea	 ecx, DWORD PTR _$S8$141658[esp+8008]
  015b6	e8 00 00 00 00	 call	 ??1?$ContainerForward@V?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@ForEach@CipherShed@@UAE@XZ

; 8908 : 
; 8909 : 	wstring msg;

  015bb	33 c9		 xor	 ecx, ecx
  015bd	c7 84 24 64 03
	00 00 07 00 00
	00		 mov	 DWORD PTR _msg$[esp+8032], 7
  015c8	c7 84 24 60 03
	00 00 00 00 00
	00		 mov	 DWORD PTR _msg$[esp+8028], 0
  015d3	66 89 8c 24 50
	03 00 00	 mov	 WORD PTR _msg$[esp+8012], cx

; 8910 : 
; 8911 : 	if (!imageName.empty() && StringToUpperCase (imageName) != StringToUpperCase (TC_APP_NAME_LEGACY) + ".SYS")

  015db	39 8c 24 44 03
	00 00		 cmp	 DWORD PTR _imageName$[esp+8028], ecx
  015e2	74 6e		 je	 SHORT $LN84@AnalyzeKer
  015e4	68 00 00 00 00	 push	 OFFSET ??_C@_09EMKKFGIH@TrueCrypt?$AA@
  015e9	8d 8c 24 38 02
	00 00		 lea	 ecx, DWORD PTR $T197039[esp+8012]
  015f0	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  015f5	68 00 00 00 00	 push	 OFFSET ??_C@_04GMGPCCGD@?4SYS?$AA@
  015fa	8d 94 24 38 02
	00 00		 lea	 edx, DWORD PTR $T197039[esp+8012]
  01601	52		 push	 edx
  01602	8d 84 24 58 02
	00 00		 lea	 eax, DWORD PTR $T197040[esp+8016]
  01609	50		 push	 eax
  0160a	89 6c 24 40	 mov	 DWORD PTR $T197068[esp+8020], ebp
  0160e	e8 00 00 00 00	 call	 ?StringToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; StringToUpperCase
  01613	83 c4 08	 add	 esp, 8
  01616	50		 push	 eax
  01617	8d 8c 24 00 03
	00 00		 lea	 ecx, DWORD PTR $T197041[esp+8016]
  0161e	51		 push	 ecx
  0161f	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  01624	83 c4 0c	 add	 esp, 12			; 0000000cH
  01627	50		 push	 eax
  01628	8d 94 24 34 03
	00 00		 lea	 edx, DWORD PTR _imageName$[esp+8012]
  0162f	52		 push	 edx
  01630	8d 84 24 c8 02
	00 00		 lea	 eax, DWORD PTR $T197042[esp+8016]
  01637	50		 push	 eax
  01638	e8 00 00 00 00	 call	 ?StringToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; StringToUpperCase
  0163d	83 c4 08	 add	 esp, 8
  01640	50		 push	 eax
  01641	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  01646	83 c4 08	 add	 esp, 8
  01649	c6 44 24 10 01	 mov	 BYTE PTR $T197038[esp+8008], 1
  0164e	84 c0		 test	 al, al
  01650	75 05		 jne	 SHORT $LN85@AnalyzeKer
$LN84@AnalyzeKer:
  01652	c6 44 24 10 00	 mov	 BYTE PTR $T197038[esp+8008], 0
$LN85@AnalyzeKer:
  01657	8b 5c 24 34	 mov	 ebx, DWORD PTR $T197068[esp+8008]
  0165b	f6 c3 08	 test	 bl, 8
  0165e	74 0f		 je	 SHORT $LN88@AnalyzeKer
  01660	8d 8c 24 c0 02
	00 00		 lea	 ecx, DWORD PTR $T197042[esp+8008]
  01667	83 e3 f7	 and	 ebx, -9			; fffffff7H
  0166a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN88@AnalyzeKer:
  0166f	f6 c3 04	 test	 bl, 4
  01672	74 0f		 je	 SHORT $LN89@AnalyzeKer
  01674	8d 8c 24 f8 02
	00 00		 lea	 ecx, DWORD PTR $T197041[esp+8008]
  0167b	83 e3 fb	 and	 ebx, -5			; fffffffbH
  0167e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN89@AnalyzeKer:
  01683	f6 c3 02	 test	 bl, 2
  01686	74 0f		 je	 SHORT $LN90@AnalyzeKer
  01688	8d 8c 24 50 02
	00 00		 lea	 ecx, DWORD PTR $T197040[esp+8008]
  0168f	83 e3 fd	 and	 ebx, -3			; fffffffdH
  01692	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN90@AnalyzeKer:
  01697	f6 c3 01	 test	 bl, 1
  0169a	74 0f		 je	 SHORT $LN91@AnalyzeKer
  0169c	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR $T197039[esp+8008]
  016a3	83 e3 fe	 and	 ebx, -2			; fffffffeH
  016a6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN91@AnalyzeKer:
  016ab	80 7c 24 10 00	 cmp	 BYTE PTR $T197038[esp+8008], 0
  016b0	0f 84 0a 03 00
	00		 je	 $LN1680@AnalyzeKer

; 8912 : 	{
; 8913 : 		msg += wstring (GetString ("SYSTEM_CRASH_UPDATE_DRIVER")) + L"\n\n" + SingleStringToWide (imageName);

  016b6	8d 8c 24 30 03
	00 00		 lea	 ecx, DWORD PTR _imageName$[esp+8008]
  016bd	51		 push	 ecx
  016be	8d 54 24 60	 lea	 edx, DWORD PTR $T197045[esp+8012]
  016c2	52		 push	 edx
  016c3	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  016c8	83 c4 08	 add	 esp, 8
  016cb	50		 push	 eax
  016cc	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  016d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@CMMKPOGK@SYSTEM_CRASH_UPDATE_DRIVER?$AA@
  016d6	e8 00 00 00 00	 call	 _GetString
  016db	83 c4 04	 add	 esp, 4
  016de	50		 push	 eax
  016df	8d 8c 24 08 01
	00 00		 lea	 ecx, DWORD PTR $T197046[esp+8020]
  016e6	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  016eb	50		 push	 eax
  016ec	8d 84 24 ec 00
	00 00		 lea	 eax, DWORD PTR $T197047[esp+8020]
  016f3	50		 push	 eax
  016f4	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  016f9	83 c4 0c	 add	 esp, 12			; 0000000cH
  016fc	50		 push	 eax
  016fd	8d 8c 24 58 02
	00 00		 lea	 ecx, DWORD PTR $T197048[esp+8016]
  01704	51		 push	 ecx
  01705	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0170a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0170d	6a ff		 push	 -1
  0170f	33 ff		 xor	 edi, edi
  01711	57		 push	 edi
  01712	50		 push	 eax
  01713	8d 8c 24 58 03
	00 00		 lea	 ecx, DWORD PTR _msg$[esp+8020]
  0171a	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  0171f	8d 8c 24 50 02
	00 00		 lea	 ecx, DWORD PTR $T197048[esp+8008]
  01726	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0172b	8d 8c 24 e0 00
	00 00		 lea	 ecx, DWORD PTR $T197047[esp+8008]
  01732	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  01737	8d 8c 24 fc 00
	00 00		 lea	 ecx, DWORD PTR $T197046[esp+8008]
  0173e	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  01743	8d 4c 24 5c	 lea	 ecx, DWORD PTR $T197045[esp+8008]
  01747	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 8914 : 
; 8915 : 		string description, company, product;
; 8916 : 		if (GetExecutableImageInformation (string (winDir) + "\\System32\\drivers\\" + imageName, imageVersion, description, company, product))

  0174c	8d 94 24 f8 02
	00 00		 lea	 edx, DWORD PTR _product$141727[esp+8008]
  01753	52		 push	 edx
  01754	8d 84 24 c4 02
	00 00		 lea	 eax, DWORD PTR _company$141726[esp+8012]
  0175b	50		 push	 eax
  0175c	8d 8c 24 3c 02
	00 00		 lea	 ecx, DWORD PTR _description$141725[esp+8016]
  01763	51		 push	 ecx
  01764	8d 94 24 90 03
	00 00		 lea	 edx, DWORD PTR _imageVersion$[esp+8020]
  0176b	52		 push	 edx
  0176c	8d 84 24 40 03
	00 00		 lea	 eax, DWORD PTR _imageName$[esp+8024]
  01773	50		 push	 eax
  01774	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JHJKCMBK@?2System32?2drivers?2?$AA@
  01779	8d 8c 24 30 05
	00 00		 lea	 ecx, DWORD PTR _winDir$[esp+8032]
  01780	51		 push	 ecx
  01781	8d 8c 24 fc 00
	00 00		 lea	 ecx, DWORD PTR $T197050[esp+8036]
  01788	89 ac 24 68 02
	00 00		 mov	 DWORD PTR _description$141725[esp+8060], ebp
  0178f	89 bc 24 64 02
	00 00		 mov	 DWORD PTR _description$141725[esp+8056], edi
  01796	c6 84 24 54 02
	00 00 00	 mov	 BYTE PTR _description$141725[esp+8040], 0
  0179e	89 ac 24 f4 02
	00 00		 mov	 DWORD PTR _company$141726[esp+8060], ebp
  017a5	89 bc 24 f0 02
	00 00		 mov	 DWORD PTR _company$141726[esp+8056], edi
  017ac	c6 84 24 e0 02
	00 00 00	 mov	 BYTE PTR _company$141726[esp+8040], 0
  017b4	89 ac 24 2c 03
	00 00		 mov	 DWORD PTR _product$141727[esp+8060], ebp
  017bb	89 bc 24 28 03
	00 00		 mov	 DWORD PTR _product$141727[esp+8056], edi
  017c2	c6 84 24 18 03
	00 00 00	 mov	 BYTE PTR _product$141727[esp+8040], 0
  017ca	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  017cf	50		 push	 eax
  017d0	8d 94 24 18 01
	00 00		 lea	 edx, DWORD PTR $T197051[esp+8036]
  017d7	52		 push	 edx
  017d8	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  017dd	83 c4 0c	 add	 esp, 12			; 0000000cH
  017e0	50		 push	 eax
  017e1	8d 44 24 74	 lea	 eax, DWORD PTR $T197052[esp+8032]
  017e5	50		 push	 eax
  017e6	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  017eb	83 c4 0c	 add	 esp, 12			; 0000000cH
  017ee	50		 push	 eax
  017ef	e8 00 00 00 00	 call	 ?GetExecutableImageInformation@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@111@Z ; GetExecutableImageInformation
  017f4	83 c4 14	 add	 esp, 20			; 00000014H
  017f7	8d 4c 24 5c	 lea	 ecx, DWORD PTR $T197052[esp+8008]
  017fb	8b f0		 mov	 esi, eax
  017fd	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  01802	8d 8c 24 fc 00
	00 00		 lea	 ecx, DWORD PTR $T197051[esp+8008]
  01809	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0180e	8d 8c 24 e0 00
	00 00		 lea	 ecx, DWORD PTR $T197050[esp+8008]
  01815	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0181a	3b f7		 cmp	 esi, edi
  0181c	0f 84 67 01 00
	00		 je	 $LN12@AnalyzeKer

; 8917 : 		{
; 8918 : 			string s;

  01822	89 ac 24 68 02
	00 00		 mov	 DWORD PTR _s$141734[esp+8032], ebp
  01829	89 bc 24 64 02
	00 00		 mov	 DWORD PTR _s$141734[esp+8028], edi
  01830	c6 84 24 54 02
	00 00 00	 mov	 BYTE PTR _s$141734[esp+8012], 0

; 8919 : 			if (!description.empty())

  01838	39 bc 24 48 02
	00 00		 cmp	 DWORD PTR _description$141725[esp+8028], edi
  0183f	74 14		 je	 SHORT $LN11@AnalyzeKer

; 8920 : 				s += description;

  01841	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR _description$141725[esp+8008]
  01848	51		 push	 ecx
  01849	8d 8c 24 54 02
	00 00		 lea	 ecx, DWORD PTR _s$141734[esp+8012]
  01850	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
$LN11@AnalyzeKer:

; 8921 : 			if (!company.empty())

  01855	39 bc 24 d4 02
	00 00		 cmp	 DWORD PTR _company$141726[esp+8028], edi
  0185c	74 30		 je	 SHORT $LN10@AnalyzeKer

; 8922 : 				s += ";  " + company;

  0185e	8d 94 24 c0 02
	00 00		 lea	 edx, DWORD PTR _company$141726[esp+8008]
  01865	52		 push	 edx
  01866	8d 44 24 60	 lea	 eax, DWORD PTR $T197053[esp+8012]
  0186a	68 00 00 00 00	 push	 OFFSET ??_C@_03FEFIDNAB@?$DL?5?5?$AA@
  0186f	50		 push	 eax
  01870	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  01875	83 c4 0c	 add	 esp, 12			; 0000000cH
  01878	50		 push	 eax
  01879	8d 8c 24 54 02
	00 00		 lea	 ecx, DWORD PTR _s$141734[esp+8012]
  01880	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  01885	8d 4c 24 5c	 lea	 ecx, DWORD PTR $T197053[esp+8008]
  01889	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN10@AnalyzeKer:

; 8923 : 			if (!product.empty())

  0188e	39 bc 24 0c 03
	00 00		 cmp	 DWORD PTR _product$141727[esp+8028], edi
  01895	74 30		 je	 SHORT $LN9@AnalyzeKer

; 8924 : 				s += ";  " + product;

  01897	8d 8c 24 f8 02
	00 00		 lea	 ecx, DWORD PTR _product$141727[esp+8008]
  0189e	51		 push	 ecx
  0189f	8d 54 24 60	 lea	 edx, DWORD PTR $T197054[esp+8012]
  018a3	68 00 00 00 00	 push	 OFFSET ??_C@_03FEFIDNAB@?$DL?5?5?$AA@
  018a8	52		 push	 edx
  018a9	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  018ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  018b1	50		 push	 eax
  018b2	8d 8c 24 54 02
	00 00		 lea	 ecx, DWORD PTR _s$141734[esp+8012]
  018b9	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  018be	8d 4c 24 5c	 lea	 ecx, DWORD PTR $T197054[esp+8008]
  018c2	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN9@AnalyzeKer:

; 8925 : 
; 8926 : 			if (s.find (";  ") == 0)

  018c7	57		 push	 edi
  018c8	68 00 00 00 00	 push	 OFFSET ??_C@_03FEFIDNAB@?$DL?5?5?$AA@
  018cd	8d 8c 24 58 02
	00 00		 lea	 ecx, DWORD PTR _s$141734[esp+8016]
  018d4	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  018d9	85 c0		 test	 eax, eax
  018db	75 2b		 jne	 SHORT $LN8@AnalyzeKer

; 8927 : 				s = s.substr (3);

  018dd	6a ff		 push	 -1
  018df	6a 03		 push	 3
  018e1	8d 44 24 64	 lea	 eax, DWORD PTR $T197055[esp+8016]
  018e5	50		 push	 eax
  018e6	8d 8c 24 5c 02
	00 00		 lea	 ecx, DWORD PTR _s$141734[esp+8020]
  018ed	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  018f2	50		 push	 eax
  018f3	8d 8c 24 54 02
	00 00		 lea	 ecx, DWORD PTR _s$141734[esp+8012]
  018fa	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  018ff	8d 4c 24 5c	 lea	 ecx, DWORD PTR $T197055[esp+8008]
  01903	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@AnalyzeKer:

; 8928 : 
; 8929 : 			if (!s.empty())

  01908	39 bc 24 64 02
	00 00		 cmp	 DWORD PTR _s$141734[esp+8028], edi
  0190f	74 6c		 je	 SHORT $LN7@AnalyzeKer

; 8930 : 				msg += SingleStringToWide ("  (" + s + ")");

  01911	68 00 00 00 00	 push	 OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
  01916	8d 8c 24 54 02
	00 00		 lea	 ecx, DWORD PTR _s$141734[esp+8012]
  0191d	51		 push	 ecx
  0191e	8d 94 24 e8 00
	00 00		 lea	 edx, DWORD PTR $T197056[esp+8016]
  01925	68 00 00 00 00	 push	 OFFSET ??_C@_03BLJJGHJH@?5?5?$CI?$AA@
  0192a	52		 push	 edx
  0192b	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  01930	83 c4 0c	 add	 esp, 12			; 0000000cH
  01933	50		 push	 eax
  01934	8d 84 24 04 01
	00 00		 lea	 eax, DWORD PTR $T197057[esp+8016]
  0193b	50		 push	 eax
  0193c	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  01941	50		 push	 eax
  01942	8d 4c 24 6c	 lea	 ecx, DWORD PTR $T197058[esp+8024]
  01946	51		 push	 ecx
  01947	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  0194c	83 c4 14	 add	 esp, 20			; 00000014H
  0194f	50		 push	 eax
  01950	8d 8c 24 50 03
	00 00		 lea	 ecx, DWORD PTR _msg$[esp+8012]
  01957	e8 00 00 00 00	 call	 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
  0195c	8d 4c 24 5c	 lea	 ecx, DWORD PTR $T197058[esp+8008]
  01960	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  01965	8d 8c 24 fc 00
	00 00		 lea	 ecx, DWORD PTR $T197057[esp+8008]
  0196c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  01971	8d 8c 24 e0 00
	00 00		 lea	 ecx, DWORD PTR $T197056[esp+8008]
  01978	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN7@AnalyzeKer:

; 8931 : 		}

  0197d	8d 8c 24 50 02
	00 00		 lea	 ecx, DWORD PTR _s$141734[esp+8008]
  01984	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN12@AnalyzeKer:

; 8932 : 
; 8933 : 		msg += L"\n\n";

  01989	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  0198e	8d 8c 24 50 03
	00 00		 lea	 ecx, DWORD PTR _msg$[esp+8012]
  01995	e8 00 00 00 00	 call	 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=

; 8934 : 	}

  0199a	8d 8c 24 f8 02
	00 00		 lea	 ecx, DWORD PTR _product$141727[esp+8008]
  019a1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  019a6	8d 8c 24 c0 02
	00 00		 lea	 ecx, DWORD PTR _company$141726[esp+8008]
  019ad	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  019b2	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR _description$141725[esp+8008]
  019b9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  019be	eb 02		 jmp	 SHORT $LN13@AnalyzeKer
$LN1680@AnalyzeKer:
  019c0	33 ff		 xor	 edi, edi
$LN13@AnalyzeKer:

; 8935 : 
; 8936 : 	if (otherDriver)

  019c2	80 7c 24 17 00	 cmp	 BYTE PTR _otherDriver$[esp+8008], 0
  019c7	74 2b		 je	 SHORT $LN6@AnalyzeKer

; 8937 : 	{
; 8938 : 		msg += GetString ("SYSTEM_CRASH_NO_CIPHERSHED");

  019c9	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@NBNBFOIP@SYSTEM_CRASH_NO_CIPHERSHED?$AA@
  019ce	e8 00 00 00 00	 call	 _GetString
  019d3	83 c4 04	 add	 esp, 4
  019d6	50		 push	 eax
  019d7	8d 8c 24 50 03
	00 00		 lea	 ecx, DWORD PTR _msg$[esp+8012]
  019de	e8 00 00 00 00	 call	 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=

; 8939 : 		msg += L"\n\n";

  019e3	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  019e8	8d 8c 24 50 03
	00 00		 lea	 ecx, DWORD PTR _msg$[esp+8012]
  019ef	e8 00 00 00 00	 call	 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
$LN6@AnalyzeKer:

; 8940 : 	}
; 8941 : 
; 8942 : 	string urlStr = string (url) + "&drvver=" + (imageVersion.empty() ? "-" : imageVersion) + stackTraceArgs.str();

  019f4	39 bc 24 98 03
	00 00		 cmp	 DWORD PTR _imageVersion$[esp+8028], edi
  019fb	75 18		 jne	 SHORT $LN86@AnalyzeKer
  019fd	68 00 00 00 00	 push	 OFFSET ??_C@_01JOAMLHOP@?9?$AA@
  01a02	8d 8c 24 c4 02
	00 00		 lea	 ecx, DWORD PTR $T197061[esp+8012]
  01a09	83 cb 10	 or	 ebx, 16			; 00000010H
  01a0c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  01a11	8b f0		 mov	 esi, eax
  01a13	eb 07		 jmp	 SHORT $LN87@AnalyzeKer
$LN86@AnalyzeKer:
  01a15	8d b4 24 84 03
	00 00		 lea	 esi, DWORD PTR _imageVersion$[esp+8008]
$LN87@AnalyzeKer:
  01a1c	8d 94 24 34 02
	00 00		 lea	 edx, DWORD PTR $T197059[esp+8008]
  01a23	52		 push	 edx
  01a24	8d 8c 24 b0 01
	00 00		 lea	 ecx, DWORD PTR _stackTraceArgs$[esp+8012]
  01a2b	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  01a30	50		 push	 eax
  01a31	56		 push	 esi
  01a32	68 00 00 00 00	 push	 OFFSET ??_C@_08FNMHHHDJ@?$CGdrvver?$DN?$AA@
  01a37	8d 84 24 2c 07
	00 00		 lea	 eax, DWORD PTR _url$[esp+8020]
  01a3e	50		 push	 eax
  01a3f	8d 8c 24 f0 00
	00 00		 lea	 ecx, DWORD PTR $T197064[esp+8024]
  01a46	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  01a4b	50		 push	 eax
  01a4c	8d 8c 24 0c 01
	00 00		 lea	 ecx, DWORD PTR $T197065[esp+8024]
  01a53	51		 push	 ecx
  01a54	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  01a59	83 c4 0c	 add	 esp, 12			; 0000000cH
  01a5c	50		 push	 eax
  01a5d	8d 54 24 68	 lea	 edx, DWORD PTR $T197066[esp+8020]
  01a61	52		 push	 edx
  01a62	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  01a67	83 c4 0c	 add	 esp, 12			; 0000000cH
  01a6a	50		 push	 eax
  01a6b	8d 84 24 70 03
	00 00		 lea	 eax, DWORD PTR _urlStr$[esp+8016]
  01a72	50		 push	 eax
  01a73	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  01a78	83 c4 0c	 add	 esp, 12			; 0000000cH
  01a7b	8d 4c 24 5c	 lea	 ecx, DWORD PTR $T197066[esp+8008]
  01a7f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  01a84	8d 8c 24 fc 00
	00 00		 lea	 ecx, DWORD PTR $T197065[esp+8008]
  01a8b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  01a90	8d 8c 24 e0 00
	00 00		 lea	 ecx, DWORD PTR $T197064[esp+8008]
  01a97	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  01a9c	8d 8c 24 34 02
	00 00		 lea	 ecx, DWORD PTR $T197059[esp+8008]
  01aa3	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  01aa8	f6 c3 10	 test	 bl, 16			; 00000010H
  01aab	74 0c		 je	 SHORT $LN92@AnalyzeKer
  01aad	8d 8c 24 c0 02
	00 00		 lea	 ecx, DWORD PTR $T197061[esp+8008]
  01ab4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN92@AnalyzeKer:

; 8943 : 
; 8944 : 	for (size_t i = 0; i < urlStr.size(); ++i)

  01ab9	33 f6		 xor	 esi, esi
  01abb	39 bc 24 7c 03
	00 00		 cmp	 DWORD PTR _urlStr$[esp+8028], edi
  01ac2	76 38		 jbe	 SHORT $LN3@AnalyzeKer
  01ac4	eb 0a 8d a4 24
	00 00 00 00 8d
	49 00		 npad	 12
$LL5@AnalyzeKer:

; 8945 : 	{
; 8946 : 		if (urlStr[i] == '+')

  01ad0	56		 push	 esi
  01ad1	8d 8c 24 6c 03
	00 00		 lea	 ecx, DWORD PTR _urlStr$[esp+8012]
  01ad8	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  01add	80 38 2b	 cmp	 BYTE PTR [eax], 43	; 0000002bH
  01ae0	75 10		 jne	 SHORT $LN4@AnalyzeKer

; 8947 : 			urlStr[i] = '.';

  01ae2	56		 push	 esi
  01ae3	8d 8c 24 6c 03
	00 00		 lea	 ecx, DWORD PTR _urlStr$[esp+8012]
  01aea	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  01aef	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
$LN4@AnalyzeKer:
  01af2	46		 inc	 esi
  01af3	3b b4 24 7c 03
	00 00		 cmp	 esi, DWORD PTR _urlStr$[esp+8028]
  01afa	72 d4		 jb	 SHORT $LL5@AnalyzeKer
$LN3@AnalyzeKer:

; 8948 : 	}
; 8949 : 
; 8950 : 	msg += GetString ("SYSTEM_CRASH_REPORT");

  01afc	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@IDLEBLFG@SYSTEM_CRASH_REPORT?$AA@
  01b01	e8 00 00 00 00	 call	 _GetString
  01b06	83 c4 04	 add	 esp, 4
  01b09	50		 push	 eax
  01b0a	8d 8c 24 50 03
	00 00		 lea	 ecx, DWORD PTR _msg$[esp+8012]
  01b11	e8 00 00 00 00	 call	 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=

; 8951 : 	msg += L"\n\n";

  01b16	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  01b1b	8d 8c 24 50 03
	00 00		 lea	 ecx, DWORD PTR _msg$[esp+8012]
  01b22	e8 00 00 00 00	 call	 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=

; 8952 : 
; 8953 : 	msg += SingleStringToWide (urlStr);

  01b27	8d 8c 24 68 03
	00 00		 lea	 ecx, DWORD PTR _urlStr$[esp+8008]
  01b2e	51		 push	 ecx
  01b2f	8d 54 24 60	 lea	 edx, DWORD PTR $T197067[esp+8012]
  01b33	52		 push	 edx
  01b34	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  01b39	83 c4 08	 add	 esp, 8
  01b3c	6a ff		 push	 -1
  01b3e	57		 push	 edi
  01b3f	50		 push	 eax
  01b40	8d 8c 24 58 03
	00 00		 lea	 ecx, DWORD PTR _msg$[esp+8020]
  01b47	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  01b4c	8d 4c 24 5c	 lea	 ecx, DWORD PTR $T197067[esp+8008]
  01b50	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 8954 : 
; 8955 : 	msg += L"\n\n";

  01b55	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  01b5a	8d 8c 24 50 03
	00 00		 lea	 ecx, DWORD PTR _msg$[esp+8012]
  01b61	e8 00 00 00 00	 call	 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=

; 8956 : 	msg += GetString ("ASK_SEND_ERROR_REPORT");

  01b66	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PCCHGHDE@ASK_SEND_ERROR_REPORT?$AA@
  01b6b	e8 00 00 00 00	 call	 _GetString
  01b70	83 c4 04	 add	 esp, 4
  01b73	50		 push	 eax
  01b74	8d 8c 24 50 03
	00 00		 lea	 ecx, DWORD PTR _msg$[esp+8012]
  01b7b	e8 00 00 00 00	 call	 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=

; 8957 : 
; 8958 : 	if (AskYesNoString (msg.c_str()) == IDYES)

  01b80	83 bc 24 64 03
	00 00 08	 cmp	 DWORD PTR _msg$[esp+8032], 8
  01b88	8b 84 24 50 03
	00 00		 mov	 eax, DWORD PTR _msg$[esp+8012]
  01b8f	73 07		 jae	 SHORT $LN1511@AnalyzeKer
  01b91	8d 84 24 50 03
	00 00		 lea	 eax, DWORD PTR _msg$[esp+8012]
$LN1511@AnalyzeKer:
  01b98	50		 push	 eax
  01b99	e8 00 00 00 00	 call	 _AskYesNoString
  01b9e	83 c4 04	 add	 esp, 4

; 8959 : 		ShellExecute (NULL, "open", urlStr.c_str(), NULL, NULL, SW_SHOWNORMAL);

  01ba1	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  01ba6	83 f8 06	 cmp	 eax, 6
  01ba9	75 28		 jne	 SHORT $LN1@AnalyzeKer
  01bab	8b 84 24 6c 03
	00 00		 mov	 eax, DWORD PTR _urlStr$[esp+8012]
  01bb2	39 b4 24 80 03
	00 00		 cmp	 DWORD PTR _urlStr$[esp+8032], esi
  01bb9	73 07		 jae	 SHORT $LN1517@AnalyzeKer
  01bbb	8d 84 24 6c 03
	00 00		 lea	 eax, DWORD PTR _urlStr$[esp+8012]
$LN1517@AnalyzeKer:
  01bc2	6a 01		 push	 1
  01bc4	57		 push	 edi
  01bc5	57		 push	 edi
  01bc6	50		 push	 eax
  01bc7	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  01bcc	57		 push	 edi
  01bcd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24
$LN1@AnalyzeKer:

; 8960 : }

  01bd3	39 b4 24 80 03
	00 00		 cmp	 DWORD PTR _urlStr$[esp+8032], esi
  01bda	72 10		 jb	 SHORT $LN1534@AnalyzeKer
  01bdc	8b 84 24 6c 03
	00 00		 mov	 eax, DWORD PTR _urlStr$[esp+8012]
  01be3	50		 push	 eax
  01be4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  01be9	83 c4 04	 add	 esp, 4
$LN1534@AnalyzeKer:
  01bec	8d 8c 24 4c 03
	00 00		 lea	 ecx, DWORD PTR _msg$[esp+8008]
  01bf3	89 ac 24 80 03
	00 00		 mov	 DWORD PTR _urlStr$[esp+8032], ebp
  01bfa	89 bc 24 7c 03
	00 00		 mov	 DWORD PTR _urlStr$[esp+8028], edi
  01c01	c6 84 24 6c 03
	00 00 00	 mov	 BYTE PTR _urlStr$[esp+8012], 0
  01c09	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  01c0e	8d 8c 24 00 02
	00 00		 lea	 ecx, DWORD PTR _stackTraceArgs$[esp+8092]
  01c15	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  01c1a	8d 8c 24 00 02
	00 00		 lea	 ecx, DWORD PTR _stackTraceArgs$[esp+8092]
  01c21	51		 push	 ecx
  01c22	c7 84 24 04 02
	00 00 00 00 00
	00		 mov	 DWORD PTR _stackTraceArgs$[esp+8096], OFFSET ??_7ios_base@std@@6B@
  01c2d	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  01c32	83 c4 04	 add	 esp, 4
  01c35	8d 8c 24 4c 01
	00 00		 lea	 ecx, DWORD PTR _retAddrs$[esp+8008]
  01c3c	e8 00 00 00 00	 call	 ?clear@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
  01c41	8b 94 24 60 01
	00 00		 mov	 edx, DWORD PTR _retAddrs$[esp+8028]
  01c48	52		 push	 edx
  01c49	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  01c4e	8b 84 24 50 01
	00 00		 mov	 eax, DWORD PTR _retAddrs$[esp+8012]
  01c55	50		 push	 eax
  01c56	89 bc 24 68 01
	00 00		 mov	 DWORD PTR _retAddrs$[esp+8036], edi
  01c5d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  01c62	83 c4 08	 add	 esp, 8
  01c65	39 b4 24 9c 03
	00 00		 cmp	 DWORD PTR _imageVersion$[esp+8032], esi
  01c6c	72 10		 jb	 SHORT $LN1588@AnalyzeKer
  01c6e	8b 8c 24 88 03
	00 00		 mov	 ecx, DWORD PTR _imageVersion$[esp+8012]
  01c75	51		 push	 ecx
  01c76	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  01c7b	83 c4 04	 add	 esp, 4
$LN1588@AnalyzeKer:
  01c7e	89 ac 24 9c 03
	00 00		 mov	 DWORD PTR _imageVersion$[esp+8032], ebp
  01c85	89 bc 24 98 03
	00 00		 mov	 DWORD PTR _imageVersion$[esp+8028], edi
  01c8c	c6 84 24 88 03
	00 00 00	 mov	 BYTE PTR _imageVersion$[esp+8012], 0
  01c94	39 b4 24 48 03
	00 00		 cmp	 DWORD PTR _imageName$[esp+8032], esi
  01c9b	72 10		 jb	 SHORT $LN1614@AnalyzeKer
  01c9d	8b 94 24 34 03
	00 00		 mov	 edx, DWORD PTR _imageName$[esp+8012]
  01ca4	52		 push	 edx
  01ca5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  01caa	83 c4 04	 add	 esp, 4
$LN1614@AnalyzeKer:
  01cad	8d 8c 24 6c 02
	00 00		 lea	 ecx, DWORD PTR _output$[esp+8008]
  01cb4	89 ac 24 48 03
	00 00		 mov	 DWORD PTR _imageName$[esp+8032], ebp
  01cbb	89 bc 24 44 03
	00 00		 mov	 DWORD PTR _imageName$[esp+8028], edi
  01cc2	c6 84 24 34 03
	00 00 00	 mov	 BYTE PTR _imageName$[esp+8012], 0
  01cca	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  01ccf	8d 8c 24 14 03
	00 00		 lea	 ecx, DWORD PTR _kdPath$[esp+8008]
  01cd6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  01cdb	8d 4c 24 40	 lea	 ecx, DWORD PTR _kdPaths$[esp+8008]
  01cdf	e8 00 00 00 00	 call	 ?clear@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
  01ce4	8b 44 24 54	 mov	 eax, DWORD PTR _kdPaths$[esp+8028]
  01ce8	50		 push	 eax
  01ce9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  01cee	8b 4c 24 44	 mov	 ecx, DWORD PTR _kdPaths$[esp+8012]
  01cf2	51		 push	 ecx
  01cf3	89 7c 24 5c	 mov	 DWORD PTR _kdPaths$[esp+8036], edi
  01cf7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  01cfc	83 c4 08	 add	 esp, 8
$LN1683@AnalyzeKer:
  01cff	8d b4 24 a0 03
	00 00		 lea	 esi, DWORD PTR _finally8684$[esp+8008]
  01d06	e8 00 00 00 00	 call	 ??1Finally8684@?BB@??AnalyzeKernelMiniDump@@9@QAE@XZ ; `AnalyzeKernelMiniDump'::`17'::Finally8684::~Finally8684
  01d0b	8d 8c 24 a4 02
	00 00		 lea	 ecx, DWORD PTR _dumpPath$[esp+8008]
  01d12	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  01d17	8d 8c 24 88 02
	00 00		 lea	 ecx, DWORD PTR _tmpDumpPath$[esp+8008]
  01d1e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  01d23	8d 8c 24 dc 02
	00 00		 lea	 ecx, DWORD PTR _memDumpPath$[esp+8008]
  01d2a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN64@AnalyzeKer:
  01d2f	8b 8c 24 44 1f
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+8008]
  01d36	5f		 pop	 edi
  01d37	5e		 pop	 esi
  01d38	5d		 pop	 ebp
  01d39	5b		 pop	 ebx
  01d3a	33 cc		 xor	 ecx, esp
  01d3c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01d41	81 c4 38 1f 00
	00		 add	 esp, 7992		; 00001f38H
  01d47	c3		 ret	 0
_AnalyzeKernelMiniDump ENDP
_TEXT	ENDS
PUBLIC	??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
$T203172 = 8						; size = 1
__Cat$203176 = 8					; size = 1
$T203174 = 8						; size = 1
__Right$ = 8						; size = 4
??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

  00000	56		 push	 esi
  00001	57		 push	 edi

; 564  : 		if (this != &_Right)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	3b f7		 cmp	 esi, edi
  0000a	0f 84 53 01 00
	00		 je	 $LN47@operator@57

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

  00010	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c8		 sub	 ecx, eax
  00018	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0001d	f7 e9		 imul	 ecx
  0001f	55		 push	 ebp
  00020	c1 fa 06	 sar	 edx, 6
  00023	8b ea		 mov	 ebp, edx
  00025	c1 ed 1f	 shr	 ebp, 31			; 0000001fH
  00028	03 ea		 add	 ebp, edx
  0002a	75 0f		 jne	 SHORT $LN8@operator@57

; 572  : 				clear();	// new sequence empty, erase existing sequence

  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::clear
  00033	5d		 pop	 ebp
  00034	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi

; 599  : 		}

  00038	c2 04 00	 ret	 4
$LN8@operator@57:

; 573  : 			else if (_Right.size() <= size())

  0003b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0003e	53		 push	 ebx
  0003f	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00042	2b cb		 sub	 ecx, ebx
  00044	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00049	f7 e9		 imul	 ecx
  0004b	c1 fa 06	 sar	 edx, 6
  0004e	8b ca		 mov	 ecx, edx
  00050	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00053	03 ca		 add	 ecx, edx
  00055	3b e9		 cmp	 ebp, ecx
  00057	77 5d		 ja	 SHORT $LN6@operator@57

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

  00059	c6 44 24 14 00	 mov	 BYTE PTR $T203172[esp+12], 0
  0005e	8b 44 24 14	 mov	 eax, DWORD PTR $T203172[esp+12]
  00062	8b 4c 24 14	 mov	 ecx, DWORD PTR __Cat$203176[esp+12]
  00066	8b 54 24 14	 mov	 edx, DWORD PTR $T203174[esp+12]
  0006a	50		 push	 eax
  0006b	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0006e	51		 push	 ecx
  0006f	52		 push	 edx
  00070	53		 push	 ebx
  00071	50		 push	 eax
  00072	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *>

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

  0007b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0007e	83 c4 18	 add	 esp, 24			; 00000018H
  00081	51		 push	 ecx
  00082	50		 push	 eax
  00083	8b ce		 mov	 ecx, esi
  00085	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

  0008a	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0008d	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  00090	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00095	f7 e9		 imul	 ecx
  00097	c1 fa 06	 sar	 edx, 6
  0009a	8b c2		 mov	 eax, edx
  0009c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0009f	03 c2		 add	 eax, edx
  000a1	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  000a7	03 46 0c	 add	 eax, DWORD PTR [esi+12]
  000aa	5b		 pop	 ebx
  000ab	5d		 pop	 ebp

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

  000ac	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000af	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  000b0	8b c6		 mov	 eax, esi
  000b2	5e		 pop	 esi

; 599  : 		}

  000b3	c2 04 00	 ret	 4
$LN6@operator@57:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

  000b6	85 db		 test	 ebx, ebx
  000b8	75 04		 jne	 SHORT $LN38@operator@57
  000ba	33 c0		 xor	 eax, eax
  000bc	eb 16		 jmp	 SHORT $LN39@operator@57
$LN38@operator@57:
  000be	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000c1	2b d3		 sub	 edx, ebx
  000c3	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  000c8	f7 ea		 imul	 edx
  000ca	c1 fa 06	 sar	 edx, 6
  000cd	8b c2		 mov	 eax, edx
  000cf	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000d2	03 c2		 add	 eax, edx
$LN39@operator@57:
  000d4	3b e8		 cmp	 ebp, eax
  000d6	77 34		 ja	 SHORT $LN4@operator@57

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

  000d8	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000db	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  000e1	03 c8		 add	 ecx, eax
  000e3	8b e9		 mov	 ebp, ecx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

  000e5	53		 push	 ebx
  000e6	55		 push	 ebp
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ; stdext::unchecked_copy<HostDevice *,HostDevice *>

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

  000ed	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000f0	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  000f3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f6	51		 push	 ecx
  000f7	52		 push	 edx
  000f8	55		 push	 ebp
  000f9	8b ce		 mov	 ecx, esi
  000fb	e8 00 00 00 00	 call	 ??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
  00100	5b		 pop	 ebx
  00101	5d		 pop	 ebp
  00102	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00105	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00106	8b c6		 mov	 eax, esi
  00108	5e		 pop	 esi

; 599  : 		}

  00109	c2 04 00	 ret	 4
$LN4@operator@57:

; 585  : 				}
; 586  : 			else
; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

  0010c	85 db		 test	 ebx, ebx
  0010e	74 18		 je	 SHORT $LN42@operator@57

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

  00110	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00113	50		 push	 eax
  00114	53		 push	 ebx
  00115	8b ce		 mov	 ecx, esi
  00117	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0011c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00125	83 c4 04	 add	 esp, 4
$LN42@operator@57:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

  00128	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0012b	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  0012e	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00133	f7 e9		 imul	 ecx
  00135	c1 fa 06	 sar	 edx, 6
  00138	8b c2		 mov	 eax, edx
  0013a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0013d	03 c2		 add	 eax, edx
  0013f	50		 push	 eax
  00140	8b ce		 mov	 ecx, esi
  00142	e8 00 00 00 00	 call	 ?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy
  00147	84 c0		 test	 al, al
  00149	74 16		 je	 SHORT $LN46@operator@57

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

  0014b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0014e	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00151	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00154	51		 push	 ecx
  00155	52		 push	 edx
  00156	50		 push	 eax
  00157	8b ce		 mov	 ecx, esi
  00159	e8 00 00 00 00	 call	 ??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
  0015e	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN46@operator@57:
  00161	5b		 pop	 ebx
  00162	5d		 pop	 ebp
$LN47@operator@57:
  00163	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00164	8b c6		 mov	 eax, esi
  00166	5e		 pop	 esi

; 599  : 		}

  00167	c2 04 00	 ret	 4
??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
$T203260 = -8						; size = 1
$T203230 = -8						; size = 8
__Cat$203263 = 8					; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z PROC ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 810  : 		if (size() < capacity())

  00009	8b 6f 0c	 mov	 ebp, DWORD PTR [edi+12]
  0000c	85 ed		 test	 ebp, ebp
  0000e	75 04		 jne	 SHORT $LN9@push_back
  00010	33 f6		 xor	 esi, esi
  00012	eb 18		 jmp	 SHORT $LN10@push_back
$LN9@push_back:
  00014	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00017	2b cd		 sub	 ecx, ebp
  00019	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0001e	f7 e9		 imul	 ecx
  00020	03 d1		 add	 edx, ecx
  00022	c1 fa 06	 sar	 edx, 6
  00025	8b f2		 mov	 esi, edx
  00027	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0002a	03 f2		 add	 esi, edx
$LN10@push_back:
  0002c	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  0002f	8b cb		 mov	 ecx, ebx
  00031	2b cd		 sub	 ecx, ebp
  00033	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00038	f7 e9		 imul	 ecx
  0003a	03 d1		 add	 edx, ecx
  0003c	c1 fa 06	 sar	 edx, 6
  0003f	8b c2		 mov	 eax, edx
  00041	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00044	03 c2		 add	 eax, edx
  00046	3b c6		 cmp	 eax, esi
  00048	73 33		 jae	 SHORT $LN2@push_back

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

  0004a	8b 54 24 1c	 mov	 edx, DWORD PTR __Cat$203263[esp+20]
  0004e	c6 44 24 10 00	 mov	 BYTE PTR $T203260[esp+24], 0
  00053	8b 4c 24 10	 mov	 ecx, DWORD PTR $T203260[esp+24]
  00057	51		 push	 ecx
  00058	8b 4c 24 20	 mov	 ecx, DWORD PTR __Val$[esp+24]
  0005c	52		 push	 edx
  0005d	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00060	50		 push	 eax
  00061	51		 push	 ecx
  00062	6a 01		 push	 1
  00064	53		 push	 ebx
  00065	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUFavoriteVolume@CipherShed@@IU12@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@YAXPAUFavoriteVolume@CipherShed@@IABU12@AAV?$allocator@UFavoriteVolume@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CipherShed::FavoriteVolume *,unsigned int,CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
  0006a	83 c4 18	 add	 esp, 24			; 00000018H
  0006d	83 c3 78	 add	 ebx, 120		; 00000078H
  00070	89 5f 10	 mov	 DWORD PTR [edi+16], ebx
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5d		 pop	 ebp
  00076	5b		 pop	 ebx

; 824  : 		}

  00077	83 c4 08	 add	 esp, 8
  0007a	c2 04 00	 ret	 4
$LN2@push_back:

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else
; 823  : 			insert(end(), _Val);

  0007d	3b eb		 cmp	 ebp, ebx
  0007f	76 05		 jbe	 SHORT $LN23@push_back
  00081	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN23@push_back:
  00086	8b 54 24 1c	 mov	 edx, DWORD PTR __Val$[esp+20]
  0008a	8b 07		 mov	 eax, DWORD PTR [edi]
  0008c	52		 push	 edx
  0008d	53		 push	 ebx
  0008e	50		 push	 eax
  0008f	8d 44 24 1c	 lea	 eax, DWORD PTR $T203230[esp+36]
  00093	50		 push	 eax
  00094	8b cf		 mov	 ecx, edi
  00096	e8 00 00 00 00	 call	 ?insert@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@V?$_Vector_const_iterator@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@2@ABUFavoriteVolume@CipherShed@@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::insert
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5d		 pop	 ebp
  0009e	5b		 pop	 ebx

; 824  : 		}

  0009f	83 c4 08	 add	 esp, 8
  000a2	c2 04 00	 ret	 4
?push_back@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z ENDP ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::push_back
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill
; Function compile flags: /Ogtpy
;	COMDAT ?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z
_TEXT	SEGMENT
$T203350 = -4						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Cat$203353 = 16					; size = 1
__Val$ = 16						; size = 4
?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

  00000	51		 push	 ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$203353[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __Count$[esp+4]
  0000a	57		 push	 edi
  0000b	8b 7c 24 10	 mov	 edi, DWORD PTR __Ptr$[esp+8]
  0000f	c6 44 24 08 00	 mov	 BYTE PTR $T203350[esp+12], 0
  00014	8b 44 24 08	 mov	 eax, DWORD PTR $T203350[esp+12]
  00018	50		 push	 eax
  00019	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+12]
  0001d	52		 push	 edx
  0001e	83 c1 08	 add	 ecx, 8
  00021	51		 push	 ecx
  00022	50		 push	 eax
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >

; 1255 : 		return (_Ptr + _Count);

  0002a	8b c6		 mov	 eax, esi
  0002c	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  00032	83 c4 18	 add	 esp, 24			; 00000018H
  00035	03 c7		 add	 eax, edi
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi

; 1256 : 		}

  00039	59		 pop	 ecx
  0003a	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
$T203360 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >, COMDAT

; 69   : 		{

  00000	51		 push	 ecx

; 70   : 			return ContainerForward <T> (container);

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR _container$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	50		 push	 eax
  0000b	8b ce		 mov	 ecx, esi
  0000d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T203360[esp+12], 0
  00015	e8 00 00 00 00	 call	 ??0?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >::ContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi

; 71   : 		}

  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
_TEXT	ENDS
PUBLIC	??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z
_TEXT	SEGMENT
$T203480 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$203483 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$203483[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T203480[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T203480[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 14	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 10	 mov	 edx, DWORD PTR __First$[esp+8]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 18	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 1149 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4HostDevice@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4HostDevice@@QAEAAU0@ABU0@@Z PROC			; HostDevice::operator=, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
  00004	8b 7c 24 0c	 mov	 edi, DWORD PTR ___that$[esp+4]
  00008	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0000b	88 06		 mov	 BYTE PTR [esi], al
  0000d	0f b6 4f 01	 movzx	 ecx, BYTE PTR [edi+1]
  00011	88 4e 01	 mov	 BYTE PTR [esi+1], cl
  00014	0f b6 57 02	 movzx	 edx, BYTE PTR [edi+2]
  00018	88 56 02	 mov	 BYTE PTR [esi+2], dl
  0001b	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  0001f	88 46 03	 mov	 BYTE PTR [esi+3], al
  00022	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  00026	88 4e 04	 mov	 BYTE PTR [esi+4], cl
  00029	0f b6 57 05	 movzx	 edx, BYTE PTR [edi+5]
  0002d	6a ff		 push	 -1
  0002f	88 56 05	 mov	 BYTE PTR [esi+5], dl
  00032	0f b6 47 06	 movzx	 eax, BYTE PTR [edi+6]
  00036	6a 00		 push	 0
  00038	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0003b	51		 push	 ecx
  0003c	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003f	88 46 06	 mov	 BYTE PTR [esi+6], al
  00042	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00047	6a ff		 push	 -1
  00049	6a 00		 push	 0
  0004b	8d 57 24	 lea	 edx, DWORD PTR [edi+36]
  0004e	52		 push	 edx
  0004f	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00052	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00057	6a ff		 push	 -1
  00059	6a 00		 push	 0
  0005b	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  0005e	50		 push	 eax
  0005f	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00062	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00067	0f b6 4f 5c	 movzx	 ecx, BYTE PTR [edi+92]
  0006b	88 4e 5c	 mov	 BYTE PTR [esi+92], cl
  0006e	8b 57 60	 mov	 edx, DWORD PTR [edi+96]
  00071	89 56 60	 mov	 DWORD PTR [esi+96], edx
  00074	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  00077	89 46 64	 mov	 DWORD PTR [esi+100], eax
  0007a	8b 4f 68	 mov	 ecx, DWORD PTR [edi+104]
  0007d	89 4e 68	 mov	 DWORD PTR [esi+104], ecx
  00080	83 c7 6c	 add	 edi, 108		; 0000006cH
  00083	57		 push	 edi
  00084	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  00087	e8 00 00 00 00	 call	 ??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=
  0008c	5f		 pop	 edi
  0008d	8b c6		 mov	 eax, esi
  0008f	5e		 pop	 esi
  00090	c2 04 00	 ret	 4
??4HostDevice@@QAEAAU0@ABU0@@Z ENDP			; HostDevice::operator=
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	53		 push	 ebx

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __Last$[esp+4]
  0000a	3b de		 cmp	 ebx, esi
  0000c	74 23		 je	 SHORT $LN7@Copy_backw@3
  0000e	57		 push	 edi
  0000f	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
$LL2@Copy_backw@3:

; 2676 : 		*--_Dest = *--_Last;

  00013	81 ee 88 00 00
	00		 sub	 esi, 136		; 00000088H
  00019	81 ef 88 00 00
	00		 sub	 edi, 136		; 00000088H
  0001f	56		 push	 esi
  00020	8b cf		 mov	 ecx, edi
  00022	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL2@Copy_backw@3

; 2677 : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 2678 : 	}

  00030	c3		 ret	 0
$LN7@Copy_backw@3:

; 2677 : 	return (_Dest);

  00031	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 2678 : 	}

  00037	c3		 ret	 0
??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??_C@_0BJ@PCMNJMOK@DRIVE_LETTER_UNAVAILABLE?$AA@ ; `string'
PUBLIC	??_C@_0EB@HEILLAOI@?3?5was?5not?5cleanly?5dismounted?5and@ ; `string'
PUBLIC	??_C@_0CJ@DGLLCMFL@The?5filesystem?5of?5the?5volume?5mou@ ; `string'
PUBLIC	??_C@_02DPEMFEPD@?3?2?$AA@			; `string'
PUBLIC	_favoriteVolumeToMount$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z ; MountFavoriteVolumes
EXTRN	_LastMountedVolumeDirty:DWORD
EXTRN	__imp__SetVolumeMountPointA@8:PROC
EXTRN	_GetFirstAvailableDrive:PROC
EXTRN	__imp__DeleteVolumeMountPointA@4:PROC
EXTRN	__imp__GetVolumeNameForVolumeMountPointA@12:PROC
EXTRN	_MountVolumesAsSystemFavorite:DWORD
EXTRN	?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A:BYTE ; CipherShed::FavoriteVolumes
EXTRN	?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z:PROC ; CipherShed::LoadFavoriteVolumes
;	COMDAT ??_C@_0BJ@PCMNJMOK@DRIVE_LETTER_UNAVAILABLE?$AA@
CONST	SEGMENT
??_C@_0BJ@PCMNJMOK@DRIVE_LETTER_UNAVAILABLE?$AA@ DB 'DRIVE_LETTER_UNAVAIL'
	DB	'ABLE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@HEILLAOI@?3?5was?5not?5cleanly?5dismounted?5and@
CONST	SEGMENT
??_C@_0EB@HEILLAOI@?3?5was?5not?5cleanly?5dismounted?5and@ DB ': was not '
	DB	'cleanly dismounted and needs to be checked for errors.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@DGLLCMFL@The?5filesystem?5of?5the?5volume?5mou@
CONST	SEGMENT
??_C@_0CJ@DGLLCMFL@The?5filesystem?5of?5the?5volume?5mou@ DB 'The filesys'
	DB	'tem of the volume mounted as ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPEMFEPD@?3?2?$AA@
CONST	SEGMENT
??_C@_02DPEMFEPD@?3?2?$AA@ DB ':\', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z$0
__tryblocktable$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z$10
__ehfuncinfo$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z$8
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
xdata$x	ENDS
;	COMDAT ?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z
_TEXT	SEGMENT
$T203546 = -240						; size = 28
$T203547 = -212						; size = 28
_bytesOut$139651 = -184					; size = 4
$T203544 = -180						; size = 28
$T203545 = -152						; size = 28
tv991 = -124						; size = 4
_$S6$139569 = -120					; size = 48
tv1388 = -72						; size = 4
_favorites$ = -68					; size = 24
_userForcedReadOnly$ = -44				; size = 4
_favorite$139573 = -40					; size = 4
_drive$139605 = -36					; size = 4
$T203537 = -29						; size = 1
_favoriteVolumeToMount$GSCopy$ = -28			; size = 4
$T203570 = -21						; size = 1
_status$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_mountPoint$139609 = 0					; size = 28
_prevVolumeAtMountPoint$139627 = 28			; size = 260
__$ArrayPad$ = 288					; size = 4
_systemFavorites$ = 300					; size = 4
_logOnMount$ = 304					; size = 4
_hotKeyMount$ = 308					; size = 4
_favoriteVolumeToMount$ = 312				; size = 4
?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z PROC ; MountFavoriteVolumes, COMDAT

; 7163 : {

  00000	55		 push	 ebp
  00001	8d ac 24 dc fe
	ff ff		 lea	 ebp, DWORD PTR [esp-292]
  00008	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 20 01 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0003f	8b 85 38 01 00
	00		 mov	 eax, DWORD PTR _favoriteVolumeToMount$[ebp]

; 7164 : 	BOOL status = TRUE;
; 7165 : 	BOOL lastbExplore;
; 7166 : 	BOOL userForcedReadOnly = FALSE;

  00045	33 db		 xor	 ebx, ebx

; 7167 : 
; 7168 : 	mountOptions = defaultMountOptions;

  00047	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  0004c	be 00 00 00 00	 mov	 esi, OFFSET ?defaultMountOptions@@3UMountOptions@@A ; defaultMountOptions
  00051	bf 00 00 00 00	 mov	 edi, OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  00056	ba 01 00 00 00	 mov	 edx, 1
  0005b	f3 a5		 rep movsd

; 7169 : 
; 7170 : 	VolumePassword.Length = 0;

  0005d	89 1d 00 00 00
	00		 mov	 DWORD PTR ?VolumePassword@@3UPassword@@A, ebx
  00063	89 45 e4	 mov	 DWORD PTR _favoriteVolumeToMount$GSCopy$[ebp], eax
  00066	89 55 ec	 mov	 DWORD PTR _status$[ebp], edx
  00069	89 5d d4	 mov	 DWORD PTR _userForcedReadOnly$[ebp], ebx

; 7171 : 	MultipleMountOperationInProgress = (favoriteVolumeToMount.Path.empty() || FavoriteMountOnArrivalInProgress);

  0006c	39 58 14	 cmp	 DWORD PTR [eax+20], ebx
  0006f	74 0e		 je	 SHORT $LN41@MountFavor
  00071	89 1d 00 00 00
	00		 mov	 DWORD PTR _MultipleMountOperationInProgress, ebx
  00077	39 1d 00 00 00
	00		 cmp	 DWORD PTR _FavoriteMountOnArrivalInProgress, ebx
  0007d	74 06		 je	 SHORT $LN42@MountFavor
$LN41@MountFavor:
  0007f	89 15 00 00 00
	00		 mov	 DWORD PTR _MultipleMountOperationInProgress, edx
$LN42@MountFavor:

; 7172 : 
; 7173 : 	vector <FavoriteVolume> favorites;

  00085	8d 4d bc	 lea	 ecx, DWORD PTR _favorites$[ebp]
  00088	e8 00 00 00 00	 call	 ??0?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >

; 7174 : 
; 7175 : 	if (systemFavorites)

  0008d	8b bd 2c 01 00
	00		 mov	 edi, DWORD PTR _systemFavorites$[ebp]
  00093	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00096	3b fb		 cmp	 edi, ebx
  00098	74 2d		 je	 SHORT $LN38@MountFavor

; 7176 : 	{
; 7177 : 		try
; 7178 : 		{
; 7179 : 			LoadFavoriteVolumes (favorites, true);

  0009a	53		 push	 ebx
  0009b	8d 45 bc	 lea	 eax, DWORD PTR _favorites$[ebp]
  0009e	6a 01		 push	 1
  000a0	50		 push	 eax
  000a1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000a5	e8 00 00 00 00	 call	 ?LoadFavoriteVolumes@CipherShed@@YAXAAV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@_N1@Z ; CipherShed::LoadFavoriteVolumes
  000aa	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ad	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 7184 : 		}
; 7185 : 	}
; 7186 : 	else if (!favoriteVolumeToMount.Path.empty())

  000b0	eb 32		 jmp	 SHORT $LN34@MountFavor
__catch$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z$0:

; 7180 : 		}
; 7181 : 		catch (...)
; 7182 : 		{
; 7183 : 			return false;

  000b2	b8 00 00 00 00	 mov	 eax, $LN57@MountFavor
  000b7	c3		 ret	 0
$LN57@MountFavor:
  000b8	8d 4d bc	 lea	 ecx, DWORD PTR _favorites$[ebp]
  000bb	e8 00 00 00 00	 call	 ??1?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
  000c0	33 c0		 xor	 eax, eax
  000c2	e9 8b 05 00 00	 jmp	 $LN39@MountFavor
$LN38@MountFavor:

; 7184 : 		}
; 7185 : 	}
; 7186 : 	else if (!favoriteVolumeToMount.Path.empty())

  000c7	8b 45 e4	 mov	 eax, DWORD PTR _favoriteVolumeToMount$GSCopy$[ebp]

; 7187 : 		favorites.push_back (favoriteVolumeToMount);

  000ca	8d 4d bc	 lea	 ecx, DWORD PTR _favorites$[ebp]
  000cd	39 58 14	 cmp	 DWORD PTR [eax+20], ebx
  000d0	74 08		 je	 SHORT $LN35@MountFavor
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 ?push_back@?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::push_back

; 7188 : 	else

  000d8	eb 0a		 jmp	 SHORT $LN34@MountFavor
$LN35@MountFavor:

; 7189 : 		favorites = FavoriteVolumes;

  000da	68 00 00 00 00	 push	 OFFSET ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoriteVolumes
  000df	e8 00 00 00 00	 call	 ??4?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator=
$LN34@MountFavor:

; 7190 : 
; 7191 : 	foreach (const FavoriteVolume &favorite, favorites)

  000e4	8d 4d bc	 lea	 ecx, DWORD PTR _favorites$[ebp]
  000e7	51		 push	 ecx
  000e8	8d 55 88	 lea	 edx, DWORD PTR _$S6$139569[ebp]
  000eb	52		 push	 edx
  000ec	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
  000f1	83 c4 08	 add	 esp, 8
  000f4	8b 45 88	 mov	 eax, DWORD PTR _$S6$139569[ebp]
  000f7	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000fa	8d 4d 88	 lea	 ecx, DWORD PTR _$S6$139569[ebp]
  000fd	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  00101	ff d2		 call	 edx
  00103	84 c0		 test	 al, al
  00105	0f 84 83 04 00
	00		 je	 $LN31@MountFavor
  0010b	eb 03 8d 49 00	 npad	 5
$LL33@MountFavor:
  00110	8b 45 b0	 mov	 eax, DWORD PTR _$S6$139569[ebp+40]
  00113	88 5d e3	 mov	 BYTE PTR $T203537[ebp], bl
  00116	88 5d eb	 mov	 BYTE PTR $T203570[ebp], bl
  00119	3b c3		 cmp	 eax, ebx
  0011b	75 0c		 jne	 SHORT $LN428@MountFavor
  0011d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00122	8b 45 b0	 mov	 eax, DWORD PTR _$S6$139569[ebp+40]
  00125	3b c3		 cmp	 eax, ebx
  00127	74 04		 je	 SHORT $LN82@MountFavor
$LN428@MountFavor:
  00129	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012b	eb 02		 jmp	 SHORT $LN83@MountFavor
$LN82@MountFavor:
  0012d	33 c9		 xor	 ecx, ecx
$LN83@MountFavor:
  0012f	8b 45 b4	 mov	 eax, DWORD PTR _$S6$139569[ebp+44]
  00132	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  00135	72 08		 jb	 SHORT $LN70@MountFavor
  00137	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0013c	8b 45 b4	 mov	 eax, DWORD PTR _$S6$139569[ebp+44]
$LN70@MountFavor:
  0013f	38 5d 8d	 cmp	 BYTE PTR _$S6$139569[ebp+5], bl
  00142	8b f0		 mov	 esi, eax
  00144	0f 94 c1	 sete	 cl
  00147	89 75 d8	 mov	 DWORD PTR _favorite$139573[ebp], esi
  0014a	88 4d 8d	 mov	 BYTE PTR _$S6$139569[ebp+5], cl
  0014d	3a cb		 cmp	 cl, bl
  0014f	0f 84 1b 04 00
	00		 je	 $LN32@MountFavor
  00155	83 c0 71	 add	 eax, 113		; 00000071H
  00158	89 45 84	 mov	 DWORD PTR tv991[ebp], eax
  0015b	eb 03 8d 49 00	 npad	 5
$LL86@MountFavor:

; 7192 : 	{
; 7193 : 		if (favorite.DisconnectedDevice
; 7194 : 			|| (logOnMount && !favorite.MountOnLogOn)
; 7195 : 			|| (hotKeyMount && favorite.DisableHotkeyMount))

  00160	8b 45 84	 mov	 eax, DWORD PTR tv991[ebp]
  00163	38 18		 cmp	 BYTE PTR [eax], bl
  00165	0f 85 f0 03 00
	00		 jne	 $LN29@MountFavor
  0016b	39 9d 30 01 00
	00		 cmp	 DWORD PTR _logOnMount$[ebp], ebx
  00171	74 09		 je	 SHORT $LN25@MountFavor
  00173	38 5e 72	 cmp	 BYTE PTR [esi+114], bl
  00176	0f 84 df 03 00
	00		 je	 $LN29@MountFavor
$LN25@MountFavor:
  0017c	39 9d 34 01 00
	00		 cmp	 DWORD PTR _hotKeyMount$[ebp], ebx
  00182	74 09		 je	 SHORT $LN27@MountFavor
  00184	38 5e 70	 cmp	 BYTE PTR [esi+112], bl
  00187	0f 85 ce 03 00
	00		 jne	 $LN29@MountFavor
$LN27@MountFavor:

; 7196 : 		{
; 7197 : 			continue;
; 7198 : 		}
; 7199 : 
; 7200 : 		int drive;
; 7201 : 		drive = toupper (favorite.MountPoint[0]) - 'A';

  0018d	83 7e 34 10	 cmp	 DWORD PTR [esi+52], 16	; 00000010H
  00191	72 05		 jb	 SHORT $LN98@MountFavor
  00193	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00196	eb 03		 jmp	 SHORT $LN99@MountFavor
$LN98@MountFavor:
  00198	8d 46 20	 lea	 eax, DWORD PTR [esi+32]
$LN99@MountFavor:
  0019b	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0019e	51		 push	 ecx
  0019f	e8 00 00 00 00	 call	 _toupper
  001a4	83 e8 41	 sub	 eax, 65			; 00000041H
  001a7	83 c4 04	 add	 esp, 4
  001aa	89 45 dc	 mov	 DWORD PTR _drive$139605[ebp], eax

; 7202 : 
; 7203 : 		mountOptions.ReadOnly = favorite.ReadOnly || userForcedReadOnly;

  001ad	38 5e 75	 cmp	 BYTE PTR [esi+117], bl
  001b0	75 12		 jne	 SHORT $LN45@MountFavor
  001b2	39 5d d4	 cmp	 DWORD PTR _userForcedReadOnly$[ebp], ebx
  001b5	75 0d		 jne	 SHORT $LN45@MountFavor
  001b7	89 1d 00 00 00
	00		 mov	 DWORD PTR ?mountOptions@@3UMountOptions@@A, ebx
  001bd	b9 01 00 00 00	 mov	 ecx, 1
  001c2	eb 0b		 jmp	 SHORT $LN46@MountFavor
$LN45@MountFavor:
  001c4	b9 01 00 00 00	 mov	 ecx, 1
  001c9	89 0d 00 00 00
	00		 mov	 DWORD PTR ?mountOptions@@3UMountOptions@@A, ecx
$LN46@MountFavor:

; 7204 : 		mountOptions.Removable = favorite.Removable;

  001cf	0f b6 56 76	 movzx	 edx, BYTE PTR [esi+118]
  001d3	89 15 04 00 00
	00		 mov	 DWORD PTR ?mountOptions@@3UMountOptions@@A+4, edx

; 7205 : 
; 7206 : 		if (favorite.SystemEncryption)

  001d9	38 5e 77	 cmp	 BYTE PTR [esi+119], bl
  001dc	74 0e		 je	 SHORT $LN24@MountFavor

; 7207 : 		{
; 7208 : 			mountOptions.PartitionInInactiveSysEncScope = TRUE;

  001de	89 0d 10 00 00
	00		 mov	 DWORD PTR ?mountOptions@@3UMountOptions@@A+16, ecx

; 7209 : 			bPrebootPasswordDlgMode = TRUE;

  001e4	89 0d 00 00 00
	00		 mov	 DWORD PTR _bPrebootPasswordDlgMode, ecx

; 7210 : 		}
; 7211 : 		else

  001ea	eb 0c		 jmp	 SHORT $LN23@MountFavor
$LN24@MountFavor:

; 7212 : 		{
; 7213 : 			mountOptions.PartitionInInactiveSysEncScope = FALSE;

  001ec	89 1d 10 00 00
	00		 mov	 DWORD PTR ?mountOptions@@3UMountOptions@@A+16, ebx

; 7214 : 			bPrebootPasswordDlgMode = FALSE;

  001f2	89 1d 00 00 00
	00		 mov	 DWORD PTR _bPrebootPasswordDlgMode, ebx
$LN23@MountFavor:

; 7215 : 		}
; 7216 : 
; 7217 : 		if ((LastKnownMountList.ulMountedDrives & (1 << drive)) == 0)

  001f8	8b d1		 mov	 edx, ecx
  001fa	8b c8		 mov	 ecx, eax
  001fc	d3 e2		 shl	 edx, cl
  001fe	85 15 00 00 00
	00		 test	 DWORD PTR _LastKnownMountList, edx
  00204	0f 85 38 03 00
	00		 jne	 $LN22@MountFavor

; 7218 : 		{
; 7219 : 			MountVolumesAsSystemFavorite = systemFavorites;
; 7220 : 
; 7221 : 			string mountPoint = (char) (drive + 'A') + string (":\\");

  0020a	6a 02		 push	 2
  0020c	68 00 00 00 00	 push	 OFFSET ??_C@_02DPEMFEPD@?3?2?$AA@
  00211	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T203544[ebp]
  00217	89 3d 00 00 00
	00		 mov	 DWORD PTR _MountVolumesAsSystemFavorite, edi
  0021d	c7 85 64 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T203544[ebp+24], 15 ; 0000000fH
  00227	89 9d 60 ff ff
	ff		 mov	 DWORD PTR $T203544[ebp+20], ebx
  0022d	88 9d 50 ff ff
	ff		 mov	 BYTE PTR $T203544[ebp+4], bl
  00233	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00238	0f b6 45 dc	 movzx	 eax, BYTE PTR _drive$139605[ebp]
  0023c	04 41		 add	 al, 65			; 00000041H
  0023e	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T203544[ebp]
  00244	51		 push	 ecx
  00245	8d 55 00	 lea	 edx, DWORD PTR _mountPoint$139609[ebp]
  00248	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  0024c	88 45 b8	 mov	 BYTE PTR tv1388[ebp], al
  0024f	50		 push	 eax
  00250	52		 push	 edx
  00251	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00256	83 c4 0c	 add	 esp, 12			; 0000000cH
  00259	83 bd 64 ff ff
	ff 10		 cmp	 DWORD PTR $T203544[ebp+24], 16 ; 00000010H
  00260	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  00264	72 0f		 jb	 SHORT $LN152@MountFavor
  00266	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR $T203544[ebp+4]
  0026c	50		 push	 eax
  0026d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00272	83 c4 04	 add	 esp, 4
$LN152@MountFavor:

; 7222 : 			char prevVolumeAtMountPoint[MAX_PATH] = { 0 };

  00275	68 03 01 00 00	 push	 259			; 00000103H
  0027a	8d 4d 1d	 lea	 ecx, DWORD PTR _prevVolumeAtMountPoint$139627[ebp+1]
  0027d	53		 push	 ebx
  0027e	51		 push	 ecx
  0027f	c7 85 64 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T203544[ebp+24], 15 ; 0000000fH
  00289	89 9d 60 ff ff
	ff		 mov	 DWORD PTR $T203544[ebp+20], ebx
  0028f	88 9d 50 ff ff
	ff		 mov	 BYTE PTR $T203544[ebp+4], bl
  00295	88 5d 1c	 mov	 BYTE PTR _prevVolumeAtMountPoint$139627[ebp], bl
  00298	e8 00 00 00 00	 call	 _memset
  0029d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7223 : 
; 7224 : 			if (systemFavorites)

  002a0	3b fb		 cmp	 edi, ebx
  002a2	74 3b		 je	 SHORT $LN19@MountFavor

; 7225 : 			{
; 7226 : 				// Partitions of new drives are assigned free drive letters by Windows on boot. Make sure this does not prevent system favorite volumes
; 7227 : 				// from being mounted. Each partition (using the same drive letter as a system favorite volume) is assigned another free drive letter.
; 7228 : 
; 7229 : 				if (GetVolumeNameForVolumeMountPoint (mountPoint.c_str(), prevVolumeAtMountPoint, sizeof (prevVolumeAtMountPoint)))

  002a4	8b 45 04	 mov	 eax, DWORD PTR _mountPoint$139609[ebp+4]
  002a7	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  002ac	39 7d 18	 cmp	 DWORD PTR _mountPoint$139609[ebp+24], edi
  002af	73 03		 jae	 SHORT $LN167@MountFavor
  002b1	8d 45 04	 lea	 eax, DWORD PTR _mountPoint$139609[ebp+4]
$LN167@MountFavor:
  002b4	68 04 01 00 00	 push	 260			; 00000104H
  002b9	8d 55 1c	 lea	 edx, DWORD PTR _prevVolumeAtMountPoint$139627[ebp]
  002bc	52		 push	 edx
  002bd	50		 push	 eax
  002be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumeNameForVolumeMountPointA@12
  002c4	85 c0		 test	 eax, eax
  002c6	74 14		 je	 SHORT $LN20@MountFavor

; 7230 : 					DeleteVolumeMountPoint (mountPoint.c_str());

  002c8	8b 45 04	 mov	 eax, DWORD PTR _mountPoint$139609[ebp+4]
  002cb	39 7d 18	 cmp	 DWORD PTR _mountPoint$139609[ebp+24], edi
  002ce	73 03		 jae	 SHORT $LN173@MountFavor
  002d0	8d 45 04	 lea	 eax, DWORD PTR _mountPoint$139609[ebp+4]
$LN173@MountFavor:
  002d3	50		 push	 eax
  002d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteVolumeMountPointA@4

; 7231 : 				else

  002da	eb 03		 jmp	 SHORT $LN19@MountFavor
$LN20@MountFavor:

; 7232 : 					prevVolumeAtMountPoint[0] = 0;

  002dc	88 5d 1c	 mov	 BYTE PTR _prevVolumeAtMountPoint$139627[ebp], bl
$LN19@MountFavor:

; 7233 : 			}
; 7234 : 
; 7235 : 			lastbExplore = bExplore;
; 7236 : 
; 7237 : 			bExplore = (BOOL) favorite.OpenExplorerWindow;

  002df	0f b6 46 74	 movzx	 eax, BYTE PTR [esi+116]
  002e3	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _bExplore
  002e9	a3 00 00 00 00	 mov	 DWORD PTR _bExplore, eax

; 7238 : 
; 7239 : 			if (!systemFavorites
; 7240 : 				&& !logOnMount
; 7241 : 				&& !hotKeyMount
; 7242 : 				&& !favoriteVolumeToMount.Path.empty()
; 7243 : 				&& GetAsyncKeyState (VK_CONTROL) < 0)

  002ee	39 9d 2c 01 00
	00		 cmp	 DWORD PTR _systemFavorites$[ebp], ebx
  002f4	75 51		 jne	 SHORT $LN17@MountFavor
  002f6	39 9d 30 01 00
	00		 cmp	 DWORD PTR _logOnMount$[ebp], ebx
  002fc	75 49		 jne	 SHORT $LN17@MountFavor
  002fe	39 9d 34 01 00
	00		 cmp	 DWORD PTR _hotKeyMount$[ebp], ebx
  00304	75 41		 jne	 SHORT $LN17@MountFavor
  00306	8b 4d e4	 mov	 ecx, DWORD PTR _favoriteVolumeToMount$GSCopy$[ebp]
  00309	39 59 14	 cmp	 DWORD PTR [ecx+20], ebx
  0030c	74 39		 je	 SHORT $LN17@MountFavor
  0030e	6a 11		 push	 17			; 00000011H
  00310	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetAsyncKeyState@4
  00316	66 85 c0	 test	 ax, ax
  00319	7d 2c		 jge	 SHORT $LN17@MountFavor

; 7244 : 			{
; 7245 : 				if (DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_MOUNT_OPTIONS), MainDlg, MountOptionsDlgProc, (LPARAM) &mountOptions) == IDCANCEL)

  0031b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00321	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00326	68 00 00 00 00	 push	 OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  0032b	68 00 00 00 00	 push	 OFFSET _MountOptionsDlgProc@16
  00330	52		 push	 edx
  00331	68 f8 01 00 00	 push	 504			; 000001f8H
  00336	50		 push	 eax
  00337	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  0033d	83 f8 02	 cmp	 eax, 2
  00340	75 05		 jne	 SHORT $LN17@MountFavor

; 7246 : 				{
; 7247 : 					status = FALSE;

  00342	89 5d ec	 mov	 DWORD PTR _status$[ebp], ebx

; 7248 : 					goto skipMount;

  00345	eb 3a		 jmp	 SHORT $skipMount$139638
$LN17@MountFavor:

; 7249 : 				}
; 7250 : 			}
; 7251 : 
; 7252 : 			BOOL prevReadOnly = mountOptions.ReadOnly;
; 7253 : 
; 7254 : 			if (!Mount (MainDlg, drive, (char *) favorite.Path.c_str()))

  00347	8b 4d d8	 mov	 ecx, DWORD PTR _favorite$139573[ebp]
  0034a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?mountOptions@@3UMountOptions@@A
  00350	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00355	8b 4d dc	 mov	 ecx, DWORD PTR _drive$139605[ebp]
  00358	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0035e	50		 push	 eax
  0035f	e8 00 00 00 00	 call	 ?Mount@@YAHPAUHWND__@@HPAD@Z ; Mount
  00364	83 c4 04	 add	 esp, 4
  00367	85 c0		 test	 eax, eax
  00369	75 05		 jne	 SHORT $LN15@MountFavor

; 7255 : 				status = FALSE;

  0036b	89 5d ec	 mov	 DWORD PTR _status$[ebp], ebx

; 7256 : 
; 7257 : 			if (status && mountOptions.ReadOnly != prevReadOnly)

  0036e	eb 11		 jmp	 SHORT $skipMount$139638
$LN15@MountFavor:
  00370	39 5d ec	 cmp	 DWORD PTR _status$[ebp], ebx
  00373	74 0c		 je	 SHORT $skipMount$139638
  00375	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mountOptions@@3UMountOptions@@A
  0037a	3b c6		 cmp	 eax, esi
  0037c	74 03		 je	 SHORT $skipMount$139638

; 7258 : 				userForcedReadOnly = mountOptions.ReadOnly;

  0037e	89 45 d4	 mov	 DWORD PTR _userForcedReadOnly$[ebp], eax
$skipMount$139638:

; 7259 : 
; 7260 : skipMount:
; 7261 : 			bExplore = lastbExplore;

  00381	89 3d 00 00 00
	00		 mov	 DWORD PTR _bExplore, edi

; 7262 : 
; 7263 : 			if (systemFavorites && prevVolumeAtMountPoint[0])

  00387	39 9d 2c 01 00
	00		 cmp	 DWORD PTR _systemFavorites$[ebp], ebx
  0038d	74 50		 je	 SHORT $LN10@MountFavor
  0038f	38 5d 1c	 cmp	 BYTE PTR _prevVolumeAtMountPoint$139627[ebp], bl
  00392	74 4b		 je	 SHORT $LN10@MountFavor

; 7264 : 			{
; 7265 : 				if (status)

  00394	39 5d ec	 cmp	 DWORD PTR _status$[ebp], ebx
  00397	74 2f		 je	 SHORT $LN12@MountFavor

; 7266 : 				{
; 7267 : 					int freeDrive = GetFirstAvailableDrive();

  00399	e8 00 00 00 00	 call	 _GetFirstAvailableDrive

; 7268 : 					if (freeDrive != -1)

  0039e	83 f8 ff	 cmp	 eax, -1
  003a1	74 3c		 je	 SHORT $LN10@MountFavor

; 7269 : 					{
; 7270 : 						mountPoint[0] = (char) (freeDrive + 'A');

  003a3	8b 4d 04	 mov	 ecx, DWORD PTR _mountPoint$139609[ebp+4]
  003a6	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  003ab	39 55 18	 cmp	 DWORD PTR _mountPoint$139609[ebp+24], edx
  003ae	73 03		 jae	 SHORT $LN185@MountFavor
  003b0	8d 4d 04	 lea	 ecx, DWORD PTR _mountPoint$139609[ebp+4]
$LN185@MountFavor:
  003b3	04 41		 add	 al, 65			; 00000041H
  003b5	88 01		 mov	 BYTE PTR [ecx], al

; 7271 : 						SetVolumeMountPoint (mountPoint.c_str(), prevVolumeAtMountPoint);

  003b7	8b 45 04	 mov	 eax, DWORD PTR _mountPoint$139609[ebp+4]
  003ba	39 55 18	 cmp	 DWORD PTR _mountPoint$139609[ebp+24], edx
  003bd	73 03		 jae	 SHORT $LN191@MountFavor
  003bf	8d 45 04	 lea	 eax, DWORD PTR _mountPoint$139609[ebp+4]
$LN191@MountFavor:
  003c2	8d 4d 1c	 lea	 ecx, DWORD PTR _prevVolumeAtMountPoint$139627[ebp]
  003c5	51		 push	 ecx

; 7272 : 					}
; 7273 : 				}
; 7274 : 				else

  003c6	eb 10		 jmp	 SHORT $LN441@MountFavor
$LN12@MountFavor:

; 7275 : 					SetVolumeMountPoint (mountPoint.c_str(), prevVolumeAtMountPoint);

  003c8	83 7d 18 10	 cmp	 DWORD PTR _mountPoint$139609[ebp+24], 16 ; 00000010H
  003cc	8b 45 04	 mov	 eax, DWORD PTR _mountPoint$139609[ebp+4]
  003cf	73 03		 jae	 SHORT $LN197@MountFavor
  003d1	8d 45 04	 lea	 eax, DWORD PTR _mountPoint$139609[ebp+4]
$LN197@MountFavor:
  003d4	8d 55 1c	 lea	 edx, DWORD PTR _prevVolumeAtMountPoint$139627[ebp]
  003d7	52		 push	 edx
$LN441@MountFavor:
  003d8	50		 push	 eax
  003d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetVolumeMountPointA@8
$LN10@MountFavor:

; 7276 : 			}
; 7277 : 
; 7278 : 			LoadDriveLetters (GetDlgItem (MainDlg, IDC_DRIVELIST), 0);

  003df	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  003e4	53		 push	 ebx
  003e5	68 ef 03 00 00	 push	 1007			; 000003efH
  003ea	50		 push	 eax
  003eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  003f1	50		 push	 eax
  003f2	e8 00 00 00 00	 call	 _LoadDriveLetters
  003f7	83 c4 08	 add	 esp, 8

; 7279 : 
; 7280 : 			MountVolumesAsSystemFavorite = FALSE;

  003fa	89 1d 00 00 00
	00		 mov	 DWORD PTR _MountVolumesAsSystemFavorite, ebx

; 7281 : 
; 7282 : 			if (ServiceMode && LastMountedVolumeDirty)

  00400	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?ServiceMode@@3HA, ebx ; ServiceMode
  00406	0f 84 05 01 00
	00		 je	 $LN439@MountFavor
  0040c	39 1d 00 00 00
	00		 cmp	 DWORD PTR _LastMountedVolumeDirty, ebx
  00412	0f 84 f9 00 00
	00		 je	 $LN439@MountFavor

; 7283 : 			{
; 7284 : 				DWORD bytesOut;
; 7285 : 				DeviceIoControl (hDriver, TC_IOCTL_SET_SYSTEM_FAVORITE_VOLUME_DIRTY, NULL, 0, NULL, 0, &bytesOut, NULL);

  00418	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDriver
  0041e	53		 push	 ebx
  0041f	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _bytesOut$139651[ebp]
  00425	51		 push	 ecx
  00426	53		 push	 ebx
  00427	53		 push	 ebx
  00428	53		 push	 ebx
  00429	53		 push	 ebx
  0042a	68 90 20 22 00	 push	 2236560			; 00222090H
  0042f	52		 push	 edx
  00430	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 7286 : 
; 7287 : 				SystemFavoritesServiceLogError (string ("The filesystem of the volume mounted as ") + (char) (drive + 'A') + ": was not cleanly dismounted and needs to be checked for errors.");

  00436	6a 28		 push	 40			; 00000028H
  00438	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  0043d	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DGLLCMFL@The?5filesystem?5of?5the?5volume?5mou@
  00442	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T203545[ebp]
  00448	89 75 80	 mov	 DWORD PTR $T203545[ebp+24], esi
  0044b	89 9d 7c ff ff
	ff		 mov	 DWORD PTR $T203545[ebp+20], ebx
  00451	88 9d 6c ff ff
	ff		 mov	 BYTE PTR $T203545[ebp+4], bl
  00457	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0045c	8b 45 b8	 mov	 eax, DWORD PTR tv1388[ebp]
  0045f	50		 push	 eax
  00460	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T203545[ebp]
  00466	51		 push	 ecx
  00467	8d 95 10 ff ff
	ff		 lea	 edx, DWORD PTR $T203546[ebp]
  0046d	52		 push	 edx
  0046e	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  00472	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00477	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@HEILLAOI@?3?5was?5not?5cleanly?5dismounted?5and@
  0047c	50		 push	 eax
  0047d	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR $T203547[ebp]
  00483	50		 push	 eax
  00484	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+12], 8
  00488	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0048d	83 c4 18	 add	 esp, 24			; 00000018H
  00490	e8 00 00 00 00	 call	 ?SystemFavoritesServiceLogError@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; SystemFavoritesServiceLogError
  00495	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  0049a	39 bd 44 ff ff
	ff		 cmp	 DWORD PTR $T203547[ebp+24], edi
  004a0	72 0f		 jb	 SHORT $LN250@MountFavor
  004a2	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR $T203547[ebp+4]
  004a8	51		 push	 ecx
  004a9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004ae	83 c4 04	 add	 esp, 4
$LN250@MountFavor:
  004b1	89 b5 44 ff ff
	ff		 mov	 DWORD PTR $T203547[ebp+24], esi
  004b7	89 9d 40 ff ff
	ff		 mov	 DWORD PTR $T203547[ebp+20], ebx
  004bd	88 9d 30 ff ff
	ff		 mov	 BYTE PTR $T203547[ebp+4], bl
  004c3	39 bd 28 ff ff
	ff		 cmp	 DWORD PTR $T203546[ebp+24], edi
  004c9	72 0f		 jb	 SHORT $LN276@MountFavor
  004cb	8b 95 14 ff ff
	ff		 mov	 edx, DWORD PTR $T203546[ebp+4]
  004d1	52		 push	 edx
  004d2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004d7	83 c4 04	 add	 esp, 4
$LN276@MountFavor:
  004da	89 b5 28 ff ff
	ff		 mov	 DWORD PTR $T203546[ebp+24], esi
  004e0	89 9d 24 ff ff
	ff		 mov	 DWORD PTR $T203546[ebp+20], ebx
  004e6	88 9d 14 ff ff
	ff		 mov	 BYTE PTR $T203546[ebp+4], bl
  004ec	39 7d 80	 cmp	 DWORD PTR $T203545[ebp+24], edi
  004ef	72 0f		 jb	 SHORT $LN302@MountFavor
  004f1	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR $T203545[ebp+4]
  004f7	50		 push	 eax
  004f8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004fd	83 c4 04	 add	 esp, 4
$LN302@MountFavor:
  00500	89 75 80	 mov	 DWORD PTR $T203545[ebp+24], esi
  00503	89 9d 7c ff ff
	ff		 mov	 DWORD PTR $T203545[ebp+20], ebx
  00509	88 9d 6c ff ff
	ff		 mov	 BYTE PTR $T203545[ebp+4], bl
  0050f	eb 08		 jmp	 SHORT $LN310@MountFavor
$LN439@MountFavor:
  00511	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  00516	8d 77 ff	 lea	 esi, DWORD PTR [edi-1]
$LN310@MountFavor:

; 7288 : 			}
; 7289 : 		}

  00519	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  0051d	39 7d 18	 cmp	 DWORD PTR _mountPoint$139609[ebp+24], edi
  00520	72 0c		 jb	 SHORT $LN328@MountFavor
  00522	8b 4d 04	 mov	 ecx, DWORD PTR _mountPoint$139609[ebp+4]
  00525	51		 push	 ecx
  00526	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0052b	83 c4 04	 add	 esp, 4
$LN328@MountFavor:
  0052e	8b bd 2c 01 00
	00		 mov	 edi, DWORD PTR _systemFavorites$[ebp]
  00534	89 75 18	 mov	 DWORD PTR _mountPoint$139609[ebp+24], esi
  00537	8b 75 d8	 mov	 esi, DWORD PTR _favorite$139573[ebp]
  0053a	89 5d 14	 mov	 DWORD PTR _mountPoint$139609[ebp+20], ebx
  0053d	88 5d 04	 mov	 BYTE PTR _mountPoint$139609[ebp+4], bl
  00540	eb 19		 jmp	 SHORT $LN29@MountFavor
$LN22@MountFavor:

; 7290 : 		else if (!systemFavorites && !favoriteVolumeToMount.Path.empty())

  00542	3b fb		 cmp	 edi, ebx
  00544	75 15		 jne	 SHORT $LN29@MountFavor
  00546	8b 55 e4	 mov	 edx, DWORD PTR _favoriteVolumeToMount$GSCopy$[ebp]
  00549	39 5a 14	 cmp	 DWORD PTR [edx+20], ebx
  0054c	74 0d		 je	 SHORT $LN29@MountFavor

; 7291 : 			Error ("DRIVE_LETTER_UNAVAILABLE");

  0054e	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PCMNJMOK@DRIVE_LETTER_UNAVAILABLE?$AA@
  00553	e8 00 00 00 00	 call	 _Error
  00558	83 c4 04	 add	 esp, 4
$LN29@MountFavor:
  0055b	38 5d 8d	 cmp	 BYTE PTR _$S6$139569[ebp+5], bl
  0055e	c6 45 8c 01	 mov	 BYTE PTR _$S6$139569[ebp+4], 1
  00562	0f 94 c0	 sete	 al
  00565	88 45 8d	 mov	 BYTE PTR _$S6$139569[ebp+5], al
  00568	3a c3		 cmp	 al, bl
  0056a	0f 85 f0 fb ff
	ff		 jne	 $LL86@MountFavor
$LN32@MountFavor:

; 7190 : 
; 7191 : 	foreach (const FavoriteVolume &favorite, favorites)

  00570	8b 45 88	 mov	 eax, DWORD PTR _$S6$139569[ebp]
  00573	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00576	8d 4d 88	 lea	 ecx, DWORD PTR _$S6$139569[ebp]
  00579	ff d2		 call	 edx
  0057b	8b 45 88	 mov	 eax, DWORD PTR _$S6$139569[ebp]
  0057e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00581	8d 4d 88	 lea	 ecx, DWORD PTR _$S6$139569[ebp]
  00584	ff d2		 call	 edx
  00586	84 c0		 test	 al, al
  00588	0f 85 82 fb ff
	ff		 jne	 $LL33@MountFavor
$LN31@MountFavor:

; 7292 : 	}

  0058e	8b 75 9c	 mov	 esi, DWORD PTR _$S6$139569[ebp+20]
  00591	3b f3		 cmp	 esi, ebx
  00593	74 25		 je	 SHORT $LN365@MountFavor
  00595	8b 7d a0	 mov	 edi, DWORD PTR _$S6$139569[ebp+24]
  00598	3b f7		 cmp	 esi, edi
  0059a	74 15		 je	 SHORT $LN353@MountFavor
  0059c	8d 64 24 00	 npad	 4
$LL355@MountFavor:
  005a0	8b ce		 mov	 ecx, esi
  005a2	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  005a7	83 c6 78	 add	 esi, 120		; 00000078H
  005aa	3b f7		 cmp	 esi, edi
  005ac	75 f2		 jne	 SHORT $LL355@MountFavor
  005ae	8b 75 9c	 mov	 esi, DWORD PTR _$S6$139569[ebp+20]
$LN353@MountFavor:
  005b1	56		 push	 esi
  005b2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005b7	83 c4 04	 add	 esp, 4
$LN365@MountFavor:
  005ba	8b 45 90	 mov	 eax, DWORD PTR _$S6$139569[ebp+8]
  005bd	50		 push	 eax
  005be	89 5d 9c	 mov	 DWORD PTR _$S6$139569[ebp+20], ebx
  005c1	89 5d a0	 mov	 DWORD PTR _$S6$139569[ebp+24], ebx
  005c4	89 5d a4	 mov	 DWORD PTR _$S6$139569[ebp+28], ebx
  005c7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 7293 : 
; 7294 : 	MultipleMountOperationInProgress = FALSE;
; 7295 : 	burn (&VolumePassword, sizeof (VolumePassword));

  005cc	ba 00 00 00 00	 mov	 edx, OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  005d1	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  005d6	83 c4 04	 add	 esp, 4
  005d9	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _$S6$139569[ebp], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  005e0	89 1d 00 00 00
	00		 mov	 DWORD PTR _MultipleMountOperationInProgress, ebx
  005e6	8b f1		 mov	 esi, ecx
  005e8	8b c2		 mov	 eax, edx
  005ea	8d 9b 00 00 00
	00		 npad	 6
$LL378@MountFavor:
  005f0	88 18		 mov	 BYTE PTR [eax], bl
  005f2	40		 inc	 eax
  005f3	83 ee 01	 sub	 esi, 1
  005f6	75 f8		 jne	 SHORT $LL378@MountFavor
$LL3@MountFavor:
  005f8	49		 dec	 ecx
  005f9	88 1a		 mov	 BYTE PTR [edx], bl
  005fb	42		 inc	 edx
  005fc	3b cb		 cmp	 ecx, ebx
  005fe	75 f8		 jne	 SHORT $LL3@MountFavor

; 7296 : 
; 7297 : 	if (status && CloseSecurityTokenSessionsAfterMount)

  00600	39 5d ec	 cmp	 DWORD PTR _status$[ebp], ebx
  00603	74 0d		 je	 SHORT $LN1@MountFavor
  00605	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?CloseSecurityTokenSessionsAfterMount@@3HA, ebx ; CloseSecurityTokenSessionsAfterMount
  0060b	74 05		 je	 SHORT $LN1@MountFavor

; 7298 : 		SecurityToken::CloseAllSessions();

  0060d	e8 00 00 00 00	 call	 ?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ ; CipherShed::SecurityToken::CloseAllSessions
$LN1@MountFavor:

; 7299 : 
; 7300 : 	return status;

  00612	8b 75 c8	 mov	 esi, DWORD PTR _favorites$[ebp+12]
  00615	3b f3		 cmp	 esi, ebx
  00617	74 21		 je	 SHORT $LN404@MountFavor
  00619	8b 7d cc	 mov	 edi, DWORD PTR _favorites$[ebp+16]
  0061c	3b f7		 cmp	 esi, edi
  0061e	74 11		 je	 SHORT $LN392@MountFavor
$LL394@MountFavor:
  00620	8b ce		 mov	 ecx, esi
  00622	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00627	83 c6 78	 add	 esi, 120		; 00000078H
  0062a	3b f7		 cmp	 esi, edi
  0062c	75 f2		 jne	 SHORT $LL394@MountFavor
  0062e	8b 75 c8	 mov	 esi, DWORD PTR _favorites$[ebp+12]
$LN392@MountFavor:
  00631	56		 push	 esi
  00632	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00637	83 c4 04	 add	 esp, 4
$LN404@MountFavor:
  0063a	8b 4d bc	 mov	 ecx, DWORD PTR _favorites$[ebp]
  0063d	51		 push	 ecx
  0063e	89 5d c8	 mov	 DWORD PTR _favorites$[ebp+12], ebx
  00641	89 5d cc	 mov	 DWORD PTR _favorites$[ebp+16], ebx
  00644	89 5d d0	 mov	 DWORD PTR _favorites$[ebp+20], ebx
  00647	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0064c	8b 45 ec	 mov	 eax, DWORD PTR _status$[ebp]
  0064f	83 c4 04	 add	 esp, 4
$LN39@MountFavor:

; 7301 : }

  00652	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00655	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0065c	59		 pop	 ecx
  0065d	5f		 pop	 edi
  0065e	5e		 pop	 esi
  0065f	5b		 pop	 ebx
  00660	8b 8d 20 01 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00666	33 cd		 xor	 ecx, ebp
  00668	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0066d	81 c5 24 01 00
	00		 add	 ebp, 292		; 00000124H
  00673	8b e5		 mov	 esp, ebp
  00675	5d		 pop	 ebp
  00676	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z$3:
  00000	8d 4d bc	 lea	 ecx, DWORD PTR _favorites$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE@XZ ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::~vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >
__unwindfunclet$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z$4:
  00008	8d 4d 88	 lea	 ecx, DWORD PTR _$S6$139569[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z$5:
  00010	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T203544[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z$6:
  0001b	8d 4d 00	 lea	 ecx, DWORD PTR _mountPoint$139609[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z$7:
  00023	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T203545[ebp]
  00029	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z$8:
  0002e	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T203546[ebp]
  00034	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z:
  00039	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00040	8b 8a 0c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-244]
  00046	33 c8		 xor	 ecx, eax
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b 8a 2c 01 00
	00		 mov	 ecx, DWORD PTR [edx+300]
  00053	33 c8		 xor	 ecx, eax
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z
  0005f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z ENDP ; MountFavoriteVolumes
PUBLIC	??$_Fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ; std::_Fill<HostDevice *,HostDevice>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z PROC ; std::_Fill<HostDevice *,HostDevice>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

  00000	56		 push	 esi

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 18		 je	 SHORT $LN1@Fill@2
  0000e	53		 push	 ebx
  0000f	8b 5c 24 18	 mov	 ebx, DWORD PTR __Val$[esp+8]
$LL3@Fill@2:

; 3159 : 		*_First = _Val;

  00013	53		 push	 ebx
  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  0001b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00021	3b f7		 cmp	 esi, edi
  00023	75 ee		 jne	 SHORT $LL3@Fill@2
  00025	5b		 pop	 ebx
$LN1@Fill@2:
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 3160 : 	}

  00028	c3		 ret	 0
??$_Fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ENDP ; std::_Fill<HostDevice *,HostDevice>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T204995 = -8						; size = 1
$T204996 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
$T204997 = 16						; size = 1
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<HostDevice *,HostDevice *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	83 ec 08	 sub	 esp, 8

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);
; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

  00003	8b 54 24 14	 mov	 edx, DWORD PTR $T204997[esp+4]
  00007	53		 push	 ebx
  00008	8b 5c 24 10	 mov	 ebx, DWORD PTR __First$[esp+8]
  0000c	56		 push	 esi
  0000d	8b 74 24 18	 mov	 esi, DWORD PTR __Last$[esp+12]
  00011	57		 push	 edi
  00012	8b 7c 24 20	 mov	 edi, DWORD PTR __Dest$[esp+16]
  00016	32 c0		 xor	 al, al
  00018	88 44 24 10	 mov	 BYTE PTR $T204996[esp+20], al
  0001c	8b 4c 24 10	 mov	 ecx, DWORD PTR $T204996[esp+20]
  00020	88 44 24 0c	 mov	 BYTE PTR $T204995[esp+20], al
  00024	8b 44 24 0c	 mov	 eax, DWORD PTR $T204995[esp+20]
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	52		 push	 edx
  0002b	57		 push	 edi
  0002c	56		 push	 esi
  0002d	53		 push	 ebx
  0002e	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
  00033	2b f3		 sub	 esi, ebx
  00035	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0003a	f7 ee		 imul	 esi
  0003c	c1 fa 06	 sar	 edx, 6
  0003f	8b c2		 mov	 eax, edx
  00041	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00044	03 c2		 add	 eax, edx
  00046	8b c8		 mov	 ecx, eax
  00048	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  0004e	83 c4 18	 add	 esp, 24			; 00000018H
  00051	8b c7		 mov	 eax, edi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	2b c1		 sub	 eax, ecx
  00057	5b		 pop	 ebx

; 2690 : 	return _Result;
; 2691 : 	}

  00058	83 c4 08	 add	 esp, 8
  0005b	c3		 ret	 0
??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<HostDevice *,HostDevice *>
_TEXT	ENDS
EXTRN	__imp__RegisterServiceCtrlHandlerA@8:PROC
;	COMDAT xdata$x
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
xdata$x	SEGMENT
__catchsym$?SystemFavoritesServiceMain@@YGXKPAPAD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SystemFavoritesServiceMain@@YGXKPAPAD@Z$0
__tryblocktable$?SystemFavoritesServiceMain@@YGXKPAPAD@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?SystemFavoritesServiceMain@@YGXKPAPAD@Z$3
__unwindtable$?SystemFavoritesServiceMain@@YGXKPAPAD@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?SystemFavoritesServiceMain@@YGXKPAPAD@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?SystemFavoritesServiceMain@@YGXKPAPAD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?SystemFavoritesServiceMain@@YGXKPAPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SystemFavoritesServiceMain@@YGXKPAPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?SystemFavoritesServiceMain@@YGXKPAPAD@Z
_TEXT	SEGMENT
$T205009 = -136						; size = 120
__$EHRec$ = -16						; size = 16
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
?SystemFavoritesServiceMain@@YGXKPAPAD@Z PROC		; SystemFavoritesServiceMain, COMDAT

; 6905 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SystemFavoritesServiceMain@@YGXKPAPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 6906 : 	memset (&SystemFavoritesServiceStatus, 0, sizeof (SystemFavoritesServiceStatus));

  0002b	33 c0		 xor	 eax, eax

; 6907 : 	SystemFavoritesServiceStatus.dwServiceType = SERVICE_WIN32_OWN_PROCESS;
; 6908 : 
; 6909 : 	SystemFavoritesServiceStatusHandle = RegisterServiceCtrlHandler (TC_SYSTEM_FAVORITES_SERVICE_NAME, SystemFavoritesServiceCtrlHandler);

  0002d	68 00 00 00 00	 push	 OFFSET ?SystemFavoritesServiceCtrlHandler@@YGXK@Z ; SystemFavoritesServiceCtrlHandler
  00032	a3 00 00 00 00	 mov	 DWORD PTR _SystemFavoritesServiceStatus, eax
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PDMGJHBJ@TrueCryptSystemFavorites?$AA@
  0003c	33 db		 xor	 ebx, ebx
  0003e	a3 04 00 00 00	 mov	 DWORD PTR _SystemFavoritesServiceStatus+4, eax
  00043	a3 08 00 00 00	 mov	 DWORD PTR _SystemFavoritesServiceStatus+8, eax
  00048	a3 0c 00 00 00	 mov	 DWORD PTR _SystemFavoritesServiceStatus+12, eax
  0004d	a3 10 00 00 00	 mov	 DWORD PTR _SystemFavoritesServiceStatus+16, eax
  00052	a3 14 00 00 00	 mov	 DWORD PTR _SystemFavoritesServiceStatus+20, eax
  00057	a3 18 00 00 00	 mov	 DWORD PTR _SystemFavoritesServiceStatus+24, eax
  0005c	c7 05 00 00 00
	00 10 00 00 00	 mov	 DWORD PTR _SystemFavoritesServiceStatus, 16 ; 00000010H
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterServiceCtrlHandlerA@8
  0006c	a3 00 00 00 00	 mov	 DWORD PTR _SystemFavoritesServiceStatusHandle, eax

; 6910 : 	if (!SystemFavoritesServiceStatusHandle)

  00071	3b c3		 cmp	 eax, ebx
  00073	0f 84 ef 00 00
	00		 je	 $LN146@SystemFavo@3

; 6911 : 		return;
; 6912 : 
; 6913 : 	SystemFavoritesServiceSetStatus (SERVICE_START_PENDING, 60000);

  00079	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetServiceStatus@8
  0007f	68 00 00 00 00	 push	 OFFSET _SystemFavoritesServiceStatus
  00084	50		 push	 eax
  00085	c7 05 04 00 00
	00 02 00 00 00	 mov	 DWORD PTR _SystemFavoritesServiceStatus+4, 2
  0008f	c7 05 18 00 00
	00 60 ea 00 00	 mov	 DWORD PTR _SystemFavoritesServiceStatus+24, 60000 ; 0000ea60H
  00099	89 1d 0c 00 00
	00		 mov	 DWORD PTR _SystemFavoritesServiceStatus+12, ebx
  0009f	ff d6		 call	 esi

; 6914 : 
; 6915 : 	try
; 6916 : 	{
; 6917 : 		MountFavoriteVolumes (TRUE);

  000a1	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  000a6	89 45 90	 mov	 DWORD PTR $T205009[ebp+24], eax
  000a9	89 45 ac	 mov	 DWORD PTR $T205009[ebp+52], eax
  000ac	89 45 c8	 mov	 DWORD PTR $T205009[ebp+80], eax
  000af	33 c0		 xor	 eax, eax
  000b1	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  000b4	89 5d 8c	 mov	 DWORD PTR $T205009[ebp+20], ebx
  000b7	88 9d 7c ff ff
	ff		 mov	 BYTE PTR $T205009[ebp+4], bl
  000bd	89 5d a8	 mov	 DWORD PTR $T205009[ebp+48], ebx
  000c0	88 5d 98	 mov	 BYTE PTR $T205009[ebp+32], bl
  000c3	89 5d c4	 mov	 DWORD PTR $T205009[ebp+76], ebx
  000c6	88 5d b4	 mov	 BYTE PTR $T205009[ebp+60], bl
  000c9	c7 45 e4 07 00
	00 00		 mov	 DWORD PTR $T205009[ebp+108], 7
  000d0	89 5d e0	 mov	 DWORD PTR $T205009[ebp+104], ebx
  000d3	66 89 45 d0	 mov	 WORD PTR $T205009[ebp+88], ax
  000d7	88 5d e8	 mov	 BYTE PTR $T205009[ebp+112], bl
  000da	88 5d e9	 mov	 BYTE PTR $T205009[ebp+113], bl
  000dd	88 5d ea	 mov	 BYTE PTR $T205009[ebp+114], bl
  000e0	88 5d eb	 mov	 BYTE PTR $T205009[ebp+115], bl
  000e3	88 5d ec	 mov	 BYTE PTR $T205009[ebp+116], bl
  000e6	88 5d ed	 mov	 BYTE PTR $T205009[ebp+117], bl
  000e9	88 5d ee	 mov	 BYTE PTR $T205009[ebp+118], bl
  000ec	88 5d ef	 mov	 BYTE PTR $T205009[ebp+119], bl
  000ef	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T205009[ebp]
  000f5	51		 push	 ecx
  000f6	53		 push	 ebx
  000f7	53		 push	 ebx
  000f8	6a 01		 push	 1
  000fa	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000fe	e8 00 00 00 00	 call	 ?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z ; MountFavoriteVolumes
  00103	83 c4 10	 add	 esp, 16			; 00000010H
  00106	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T205009[ebp]
  0010c	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00111	eb 0e		 jmp	 SHORT $LN9@SystemFavo@3
__catch$?SystemFavoritesServiceMain@@YGXKPAPAD@Z$0:

; 6918 : 	}
; 6919 : 	catch (...) { }

  00113	b8 00 00 00 00	 mov	 eax, $LN149@SystemFavo@3
  00118	c3		 ret	 0
$LN149@SystemFavo@3:
  00119	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetServiceStatus@8
  0011f	33 db		 xor	 ebx, ebx
$LN9@SystemFavo@3:

; 6920 : 
; 6921 : 	SystemFavoritesServiceSetStatus (SERVICE_RUNNING);

  00121	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SystemFavoritesServiceStatusHandle
  00127	68 00 00 00 00	 push	 OFFSET _SystemFavoritesServiceStatus
  0012c	52		 push	 edx
  0012d	c7 05 04 00 00
	00 04 00 00 00	 mov	 DWORD PTR _SystemFavoritesServiceStatus+4, 4
  00137	89 1d 18 00 00
	00		 mov	 DWORD PTR _SystemFavoritesServiceStatus+24, ebx
  0013d	89 1d 0c 00 00
	00		 mov	 DWORD PTR _SystemFavoritesServiceStatus+12, ebx
  00143	ff d6		 call	 esi

; 6922 : 	SystemFavoritesServiceSetStatus (SERVICE_STOPPED);

  00145	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemFavoritesServiceStatusHandle
  0014a	68 00 00 00 00	 push	 OFFSET _SystemFavoritesServiceStatus
  0014f	50		 push	 eax
  00150	c7 05 04 00 00
	00 01 00 00 00	 mov	 DWORD PTR _SystemFavoritesServiceStatus+4, 1
  0015a	89 1d 18 00 00
	00		 mov	 DWORD PTR _SystemFavoritesServiceStatus+24, ebx
  00160	89 1d 0c 00 00
	00		 mov	 DWORD PTR _SystemFavoritesServiceStatus+12, ebx
  00166	ff d6		 call	 esi
$LN146@SystemFavo@3:

; 6923 : }

  00168	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0016b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00172	59		 pop	 ecx
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SystemFavoritesServiceMain@@YGXKPAPAD@Z$2:
  00000	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T205009[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
__ehhandler$?SystemFavoritesServiceMain@@YGXKPAPAD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SystemFavoritesServiceMain@@YGXKPAPAD@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SystemFavoritesServiceMain@@YGXKPAPAD@Z ENDP		; SystemFavoritesServiceMain
EXTRN	__imp__StartServiceCtrlDispatcherA@4:PROC
EXTRN	_DriverAttach:PROC
EXTRN	_InitOSVersionInfo:PROC
EXTRN	_DeviceChangeBroadcastDisabled:DWORD
; Function compile flags: /Ogtpy
;	COMDAT ?StartSystemFavoritesService@@YAHXZ
_TEXT	SEGMENT
_dwResult$205730 = -20					; size = 4
_serviceTable$ = -16					; size = 16
?StartSystemFavoritesService@@YAHXZ PROC		; StartSystemFavoritesService, COMDAT

; 6927 : {

  00000	83 ec 14	 sub	 esp, 20			; 00000014H

; 6928 : 	ServiceMode = TRUE;

  00003	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ServiceMode@@3HA, 1 ; ServiceMode

; 6929 : 	Silent = TRUE;

  0000d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Silent, 1

; 6930 : 	DeviceChangeBroadcastDisabled = TRUE;

  00017	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _DeviceChangeBroadcastDisabled, 1

; 6931 : 
; 6932 : 	InitOSVersionInfo();

  00021	e8 00 00 00 00	 call	 _InitOSVersionInfo

; 6933 : 
; 6934 : 	if (DriverAttach() != ERR_SUCCESS)

  00026	e8 00 00 00 00	 call	 _DriverAttach
  0002b	85 c0		 test	 eax, eax
  0002d	74 06		 je	 SHORT $LN2@StartSyste

; 6935 : 		return FALSE;

  0002f	33 c0		 xor	 eax, eax

; 6950 : }

  00031	83 c4 14	 add	 esp, 20			; 00000014H
  00034	c3		 ret	 0
$LN2@StartSyste:
  00035	56		 push	 esi

; 6936 : 
; 6937 : 	SERVICE_TABLE_ENTRY serviceTable[2];
; 6938 : 	serviceTable[0].lpServiceName = TC_SYSTEM_FAVORITES_SERVICE_NAME;
; 6939 : 	serviceTable[0].lpServiceProc = SystemFavoritesServiceMain;
; 6940 : 
; 6941 : 	serviceTable[1].lpServiceName = NULL;
; 6942 : 	serviceTable[1].lpServiceProc = NULL;
; 6943 : 
; 6944 : 	BOOL result = StartServiceCtrlDispatcher (serviceTable);

  00036	8d 44 24 08	 lea	 eax, DWORD PTR _serviceTable$[esp+24]
  0003a	50		 push	 eax
  0003b	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR _serviceTable$[esp+28], OFFSET ??_C@_0BJ@PDMGJHBJ@TrueCryptSystemFavorites?$AA@
  00043	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR _serviceTable$[esp+32], OFFSET ?SystemFavoritesServiceMain@@YGXKPAPAD@Z ; SystemFavoritesServiceMain
  0004b	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR _serviceTable$[esp+36], 0
  00053	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _serviceTable$[esp+40], 0
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__StartServiceCtrlDispatcherA@4
  00061	8b f0		 mov	 esi, eax

; 6945 : 
; 6946 : 	if (!(ReadDriverConfigurationFlags() & TC_DRIVER_CONFIG_CACHE_BOOT_PASSWORD))

  00063	e8 00 00 00 00	 call	 _ReadDriverConfigurationFlags
  00068	a8 01		 test	 al, 1
  0006a	75 21		 jne	 SHORT $LN5@StartSyste

; 6947 : 		WipeCache (NULL, TRUE);

  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDriver
  00072	6a 00		 push	 0
  00074	8d 4c 24 08	 lea	 ecx, DWORD PTR _dwResult$205730[esp+28]
  00078	51		 push	 ecx
  00079	6a 00		 push	 0
  0007b	6a 00		 push	 0
  0007d	6a 00		 push	 0
  0007f	6a 00		 push	 0
  00081	68 30 20 22 00	 push	 2236464			; 00222030H
  00086	52		 push	 edx
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
$LN5@StartSyste:

; 6948 : 
; 6949 : 	return result;

  0008d	8b c6		 mov	 eax, esi
  0008f	5e		 pop	 esi

; 6950 : }

  00090	83 c4 14	 add	 esp, 20			; 00000014H
  00093	c3		 ret	 0
?StartSystemFavoritesService@@YAHXZ ENDP		; StartSystemFavoritesService
_TEXT	ENDS
PUBLIC	??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ; std::fill<HostDevice *,HostDevice>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z PROC ; std::fill<HostDevice *,HostDevice>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

  00000	56		 push	 esi

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 18		 je	 SHORT $LN11@fill@2
  0000e	53		 push	 ebx
  0000f	8b 5c 24 18	 mov	 ebx, DWORD PTR __Val$[esp+8]
$LL13@fill@2:
  00013	53		 push	 ebx
  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  0001b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00021	3b f7		 cmp	 esi, edi
  00023	75 ee		 jne	 SHORT $LL13@fill@2
  00025	5b		 pop	 ebx
$LN11@fill@2:
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 3188 : 	}

  00028	c3		 ret	 0
??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ENDP ; std::fill<HostDevice *,HostDevice>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUHostDevice@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<HostDevice *,HostDevice *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_backward_opt@PAUHostDevice@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T205769 = -4						; size = 1
__Cat$205773 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUHostDevice@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<HostDevice *,HostDevice *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

  00000	51		 push	 ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

  00001	8b 54 24 14	 mov	 edx, DWORD PTR __First_dest_cat$[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T205769[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T205769[esp+4]
  0000c	8b 0c 24	 mov	 ecx, DWORD PTR __Cat$205773[esp+4]
  0000f	50		 push	 eax
  00010	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00014	51		 push	 ecx
  00015	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  00019	52		 push	 edx
  0001a	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *>

; 2755 : 	}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c3		 ret	 0
??$_Move_backward_opt@PAUHostDevice@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<HostDevice *,HostDevice *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ; stdext::_Unchecked_move_backward<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z
_TEXT	SEGMENT
$T205817 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$205820 = 16					; size = 1
$T205779 = 16						; size = 1
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z PROC ; stdext::_Unchecked_move_backward<HostDevice *,HostDevice *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

  00000	51		 push	 ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$205820[esp]
  00005	8b 54 24 10	 mov	 edx, DWORD PTR $T205779[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T205817[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T205817[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *>

; 3697 : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ENDP ; stdext::_Unchecked_move_backward<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__Val$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$2
__catchsym$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$0
__ehfuncinfo$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$6
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$7
__unwindtable$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$4
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
_TEXT	SEGMENT
__Whereoff$143491 = -36					; size = 4
__Ncopied$143492 = -32					; size = 4
_this$GSCopy$ = -28					; size = 4
__Newvec$143490 = -24					; size = 4
tv592 = -20						; size = 4
$T206225 = -20						; size = 1
__Cat$206228 = -20					; size = 1
$T206050 = -20						; size = 1
__Cat$206054 = -20					; size = 1
__Val$GSCopy$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Tmp$143515 = 0					; size = 136
__Tmp$143505 = 136					; size = 136
__$ArrayPad$ = 272					; size = 4
__Where$ = 284						; size = 8
__Count$ = 292						; size = 4
__Val$ = 296						; size = 4
?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

  00000	55		 push	 ebp
  00001	8d ac 24 ec fe
	ff ff		 lea	 ebp, DWORD PTR [esp-276]
  00008	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	83 ec 18	 sub	 esp, 24			; 00000018H
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 85 10 01 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002c	53		 push	 ebx
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1249 : 			}

  0003c	8b 85 28 01 00
	00		 mov	 eax, DWORD PTR __Val$[ebp]
  00042	8b f1		 mov	 esi, ecx
  00044	89 45 ec	 mov	 DWORD PTR __Val$GSCopy$[ebp], eax
  00047	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0004a	89 75 e4	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0004d	85 c0		 test	 eax, eax
  0004f	75 04		 jne	 SHORT $LN31@Insert_n@2

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

  00051	33 db		 xor	 ebx, ebx
  00053	eb 16		 jmp	 SHORT $LN32@Insert_n@2
$LN31@Insert_n@2:
  00055	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00058	2b c8		 sub	 ecx, eax
  0005a	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0005f	f7 e9		 imul	 ecx
  00061	c1 fa 06	 sar	 edx, 6
  00064	8b da		 mov	 ebx, edx
  00066	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00069	03 da		 add	 ebx, edx
$LN32@Insert_n@2:

; 1162 : 
; 1163 : 		if (_Count == 0)

  0006b	8b bd 24 01 00
	00		 mov	 edi, DWORD PTR __Count$[ebp]
  00071	85 ff		 test	 edi, edi
  00073	0f 84 02 03 00
	00		 je	 $LN1@Insert_n@2

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

  00079	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0007c	8b d1		 mov	 edx, ecx
  0007e	2b 56 0c	 sub	 edx, DWORD PTR [esi+12]
  00081	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00086	f7 ea		 imul	 edx
  00088	c1 fa 06	 sar	 edx, 6
  0008b	8b c2		 mov	 eax, edx
  0008d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00090	03 c2		 add	 eax, edx
  00092	ba e1 e1 e1 01	 mov	 edx, 31580641		; 01e1e1e1H
  00097	2b d0		 sub	 edx, eax
  00099	3b d7		 cmp	 edx, edi
  0009b	73 05		 jae	 SHORT $LN12@Insert_n@2

; 1166 : 			_Xlen();	// result too long

  0009d	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
$LN12@Insert_n@2:

; 1167 : 		else if (_Capacity < size() + _Count)

  000a2	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]
  000a5	3b da		 cmp	 ebx, edx
  000a7	0f 83 86 01 00
	00		 jae	 $LN10@Insert_n@2

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  000ad	8b c3		 mov	 eax, ebx
  000af	d1 e8		 shr	 eax, 1
  000b1	b9 e1 e1 e1 01	 mov	 ecx, 31580641		; 01e1e1e1H
  000b6	2b c8		 sub	 ecx, eax
  000b8	3b cb		 cmp	 ecx, ebx
  000ba	73 04		 jae	 SHORT $LN17@Insert_n@2
  000bc	33 db		 xor	 ebx, ebx
  000be	eb 02		 jmp	 SHORT $LN18@Insert_n@2
$LN17@Insert_n@2:
  000c0	03 d8		 add	 ebx, eax
$LN18@Insert_n@2:

; 1171 : 			if (_Capacity < size() + _Count)

  000c2	3b da		 cmp	 ebx, edx
  000c4	73 02		 jae	 SHORT $LN9@Insert_n@2

; 1172 : 				_Capacity = size() + _Count;

  000c6	8b da		 mov	 ebx, edx
$LN9@Insert_n@2:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000c8	6a 00		 push	 0
  000ca	53		 push	 ebx
  000cb	e8 00 00 00 00	 call	 ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

  000d0	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  000d6	2b 56 0c	 sub	 edx, DWORD PTR [esi+12]
  000d9	8b c8		 mov	 ecx, eax
  000db	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  000e0	f7 ea		 imul	 edx
  000e2	c1 fa 06	 sar	 edx, 6
  000e5	8b c2		 mov	 eax, edx
  000e7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ea	03 c2		 add	 eax, edx
  000ec	89 45 dc	 mov	 DWORD PTR __Whereoff$143491[ebp], eax

; 1175 : 			int _Ncopied = 0;
; 1176 : 
; 1177 : 			_TRY_BEGIN
; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

  000ef	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  000f5	33 d2		 xor	 edx, edx
  000f7	83 c4 08	 add	 esp, 8
  000fa	89 55 e0	 mov	 DWORD PTR __Ncopied$143492[ebp], edx
  000fd	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edx
  00100	8b 55 ec	 mov	 edx, DWORD PTR __Val$GSCopy$[ebp]
  00103	52		 push	 edx
  00104	03 c1		 add	 eax, ecx
  00106	57		 push	 edi
  00107	89 4d e8	 mov	 DWORD PTR __Newvec$143490[ebp], ecx
  0010a	50		 push	 eax
  0010b	8b ce		 mov	 ecx, esi
  0010d	e8 00 00 00 00	 call	 ?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill

; 1179 : 			++_Ncopied;
; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

  00112	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00115	c6 45 ec 00	 mov	 BYTE PTR $T206050[ebp], 0
  00119	8b 55 ec	 mov	 edx, DWORD PTR $T206050[ebp]
  0011c	52		 push	 edx
  0011d	8b 55 ec	 mov	 edx, DWORD PTR __Cat$206054[ebp]
  00120	52		 push	 edx
  00121	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  00127	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0012a	51		 push	 ecx
  0012b	8b 4d e8	 mov	 ecx, DWORD PTR __Newvec$143490[ebp]
  0012e	51		 push	 ecx
  0012f	52		 push	 edx
  00130	50		 push	 eax
  00131	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR __Ncopied$143492[ebp], 1
  00138	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 1182 : 			++_Ncopied;
; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

  0013d	8b 45 dc	 mov	 eax, DWORD PTR __Whereoff$143491[ebp]
  00140	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00143	03 c7		 add	 eax, edi
  00145	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  0014b	03 45 e8	 add	 eax, DWORD PTR __Newvec$143490[ebp]
  0014e	83 c4 18	 add	 esp, 24			; 00000018H
  00151	c6 45 ec 00	 mov	 BYTE PTR $T206225[ebp], 0
  00155	8b 55 ec	 mov	 edx, DWORD PTR $T206225[ebp]
  00158	52		 push	 edx
  00159	8b 55 ec	 mov	 edx, DWORD PTR __Cat$206228[ebp]
  0015c	52		 push	 edx
  0015d	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
  00160	52		 push	 edx
  00161	50		 push	 eax
  00162	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  00168	51		 push	 ecx
  00169	50		 push	 eax
  0016a	c7 45 e0 02 00
	00 00		 mov	 DWORD PTR __Ncopied$143492[ebp], 2
  00171	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 1192 : 			_CATCH_END
; 1193 : 
; 1194 : 			_Count += size();

  00176	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00179	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0017c	2b d1		 sub	 edx, ecx
  0017e	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00183	f7 ea		 imul	 edx
  00185	c1 fa 06	 sar	 edx, 6
  00188	8b c2		 mov	 eax, edx
  0018a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0018d	03 c2		 add	 eax, edx
  0018f	83 c4 18	 add	 esp, 24			; 00000018H
  00192	03 f8		 add	 edi, eax
  00194	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 1195 : 			if (_Myfirst != 0)

  0019b	85 c9		 test	 ecx, ecx
  0019d	74 18		 je	 SHORT $LN115@Insert_n@2

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

  0019f	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  001a2	52		 push	 edx
  001a3	51		 push	 ecx
  001a4	8b ce		 mov	 ecx, esi
  001a6	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  001ab	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001b4	83 c4 04	 add	 esp, 4
$LN115@Insert_n@2:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

  001b7	8b 45 e8	 mov	 eax, DWORD PTR __Newvec$143490[ebp]
  001ba	69 db 88 00 00
	00		 imul	 ebx, 136		; 00000088H

; 1206 : 			_Mylast = _Newvec + _Count;

  001c0	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  001c6	03 d8		 add	 ebx, eax
  001c8	03 f8		 add	 edi, eax
  001ca	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  001cd	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 1207 : 			_Myfirst = _Newvec;

  001d0	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  001d3	e9 a3 01 00 00	 jmp	 $LN1@Insert_n@2
__catch$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

  001d8	8b 5d e0	 mov	 ebx, DWORD PTR __Ncopied$143492[ebp]
  001db	83 fb 01	 cmp	 ebx, 1

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

  001de	8b 75 dc	 mov	 esi, DWORD PTR __Whereoff$143491[ebp]
  001e1	8b 7d e8	 mov	 edi, DWORD PTR __Newvec$143490[ebp]
  001e4	7e 14		 jle	 SHORT $LN7@Insert_n@2
  001e6	8b ce		 mov	 ecx, esi
  001e8	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  001ee	03 cf		 add	 ecx, edi
  001f0	51		 push	 ecx
  001f1	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001f4	57		 push	 edi
  001f5	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy
$LN7@Insert_n@2:

; 1188 : 			if (0 < _Ncopied)

  001fa	85 db		 test	 ebx, ebx
  001fc	7e 23		 jle	 SHORT $LN6@Insert_n@2

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

  001fe	8b 95 24 01 00
	00		 mov	 edx, DWORD PTR __Count$[ebp]
  00204	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00207	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  0020a	69 f6 88 00 00
	00		 imul	 esi, 136		; 00000088H
  00210	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  00216	03 c7		 add	 eax, edi
  00218	50		 push	 eax
  00219	03 f7		 add	 esi, edi
  0021b	56		 push	 esi
  0021c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy
$LN6@Insert_n@2:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

  00221	57		 push	 edi
  00222	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00227	83 c4 04	 add	 esp, 4

; 1191 : 			_RERAISE;

  0022a	6a 00		 push	 0
  0022c	6a 00		 push	 0
  0022e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Insert_n@2:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

  00233	2b 8d 20 01 00
	00		 sub	 ecx, DWORD PTR __Where$[ebp+4]
  00239	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0023e	f7 e9		 imul	 ecx
  00240	c1 fa 06	 sar	 edx, 6
  00243	8b ca		 mov	 ecx, edx
  00245	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00248	03 ca		 add	 ecx, edx
  0024a	3b cf		 cmp	 ecx, edi
  0024c	0f 83 c3 00 00
	00		 jae	 $LN3@Insert_n@2

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

  00252	8b 55 ec	 mov	 edx, DWORD PTR __Val$GSCopy$[ebp]
  00255	52		 push	 edx
  00256	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$143505[ebp]
  0025c	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

  00261	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  00267	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0026a	8b df		 mov	 ebx, edi
  0026c	69 db 88 00 00
	00		 imul	 ebx, 136		; 00000088H
  00272	8d 0c 03	 lea	 ecx, DWORD PTR [ebx+eax]
  00275	51		 push	 ecx
  00276	52		 push	 edx
  00277	50		 push	 eax
  00278	8b ce		 mov	 ecx, esi
  0027a	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00281	e8 00 00 00 00	 call	 ??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>

; 1215 : 
; 1216 : 			_TRY_BEGIN
; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

  00286	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00289	8b d1		 mov	 edx, ecx
  0028b	2b 95 20 01 00
	00		 sub	 edx, DWORD PTR __Where$[ebp+4]
  00291	8d 85 88 00 00
	00		 lea	 eax, DWORD PTR __Tmp$143505[ebp]
  00297	50		 push	 eax
  00298	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0029d	f7 ea		 imul	 edx
  0029f	c1 fa 06	 sar	 edx, 6
  002a2	8b c2		 mov	 eax, edx
  002a4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002a7	03 c2		 add	 eax, edx
  002a9	2b f8		 sub	 edi, eax
  002ab	57		 push	 edi
  002ac	51		 push	 ecx
  002ad	8b ce		 mov	 ecx, esi
  002af	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  002b3	e8 00 00 00 00	 call	 ?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill

; 1222 : 			_CATCH_END
; 1223 : 
; 1224 : 			_Mylast += _Count;

  002b8	01 5e 10	 add	 DWORD PTR [esi+16], ebx
  002bb	8b 76 10	 mov	 esi, DWORD PTR [esi+16]

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

  002be	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  002c4	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$143505[ebp]
  002ca	51		 push	 ecx
  002cb	2b f3		 sub	 esi, ebx
  002cd	56		 push	 esi
  002ce	52		 push	 edx
  002cf	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  002d6	e8 00 00 00 00	 call	 ??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ; std::fill<HostDevice *,HostDevice>
  002db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1232 : 			}

  002de	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$143505[ebp]

; 1233 : 		else

  002e4	e9 86 00 00 00	 jmp	 $LN122@Insert_n@2
__catch$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

  002e9	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR __Count$[ebp]
  002ef	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  002f2	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  002f8	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  002fb	03 d0		 add	 edx, eax
  002fd	52		 push	 edx
  002fe	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  00304	03 c2		 add	 eax, edx
  00306	50		 push	 eax
  00307	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy

; 1221 : 			_RERAISE;

  0030c	6a 00		 push	 0
  0030e	6a 00		 push	 0
  00310	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Insert_n@2:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

  00315	8b 45 ec	 mov	 eax, DWORD PTR __Val$GSCopy$[ebp]
  00318	50		 push	 eax
  00319	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$143515[ebp]
  0031c	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;
; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

  00321	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  00327	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0032a	53		 push	 ebx
  0032b	8b c3		 mov	 eax, ebx
  0032d	2b c7		 sub	 eax, edi
  0032f	53		 push	 ebx
  00330	50		 push	 eax
  00331	8b ce		 mov	 ecx, esi
  00333	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
  0033a	89 45 ec	 mov	 DWORD PTR tv592[ebp], eax
  0033d	e8 00 00 00 00	 call	 ??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

  00342	8b 4d ec	 mov	 ecx, DWORD PTR tv592[ebp]
  00345	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  0034b	53		 push	 ebx
  0034c	51		 push	 ecx
  0034d	52		 push	 edx
  0034e	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00351	e8 00 00 00 00	 call	 ??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ; stdext::_Unchecked_move_backward<HostDevice *,HostDevice *>

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

  00356	8d 45 00	 lea	 eax, DWORD PTR __Tmp$143515[ebp]
  00359	50		 push	 eax
  0035a	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  00360	03 f8		 add	 edi, eax
  00362	57		 push	 edi
  00363	50		 push	 eax
  00364	e8 00 00 00 00	 call	 ??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ; std::fill<HostDevice *,HostDevice>
  00369	83 c4 18	 add	 esp, 24			; 00000018H

; 1249 : 			}

  0036c	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$143515[ebp]
$LN122@Insert_n@2:
  0036f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00376	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
$LN1@Insert_n@2:

; 1250 : 		}

  0037b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0037e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00385	59		 pop	 ecx
  00386	5f		 pop	 edi
  00387	5e		 pop	 esi
  00388	5b		 pop	 ebx
  00389	8b 8d 10 01 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0038f	33 cd		 xor	 ecx, ebp
  00391	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00396	81 c5 14 01 00
	00		 add	 ebp, 276		; 00000114H
  0039c	8b e5		 mov	 esp, ebp
  0039e	5d		 pop	 ebp
  0039f	c2 10 00	 ret	 16			; 00000010H
$LN121@Insert_n@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$4:
  00000	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$143505[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
__unwindfunclet$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$5:
  0000b	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$143515[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
__ehhandler$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	8b 8a 1c 01 00
	00		 mov	 ecx, DWORD PTR [edx+284]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Insert_n
PUBLIC	?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z
_TEXT	SEGMENT
__Tmp$206530 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
__Val$ = 20						; size = 4
?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

  00009	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  0000c	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  0000f	8b cb		 mov	 ecx, ebx
  00011	2b ce		 sub	 ecx, esi
  00013	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00018	f7 e9		 imul	 ecx
  0001a	c1 fa 06	 sar	 edx, 6
  0001d	8b c2		 mov	 eax, edx
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	03 c2		 add	 eax, edx
  00024	75 04		 jne	 SHORT $LN3@insert@5
  00026	33 f6		 xor	 esi, esi
  00028	eb 33		 jmp	 SHORT $LN4@insert@5
$LN3@insert@5:
  0002a	3b f3		 cmp	 esi, ebx
  0002c	76 05		 jbe	 SHORT $LN13@insert@5
  0002e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN13@insert@5:
  00033	8b 4c 24 20	 mov	 ecx, DWORD PTR __Where$[esp+20]
  00037	8b 07		 mov	 eax, DWORD PTR [edi]
  00039	85 c9		 test	 ecx, ecx
  0003b	74 04		 je	 SHORT $LN29@insert@5
  0003d	3b c8		 cmp	 ecx, eax
  0003f	74 05		 je	 SHORT $LN28@insert@5
$LN29@insert@5:
  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@insert@5:
  00046	8b 4c 24 24	 mov	 ecx, DWORD PTR __Where$[esp+24]
  0004a	2b ce		 sub	 ecx, esi
  0004c	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00051	f7 e9		 imul	 ecx
  00053	c1 fa 06	 sar	 edx, 6
  00056	8b f2		 mov	 esi, edx
  00058	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0005b	03 f2		 add	 esi, edx
$LN4@insert@5:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

  0005d	8b 4c 24 28	 mov	 ecx, DWORD PTR __Val$[esp+20]
  00061	8b 54 24 24	 mov	 edx, DWORD PTR __Where$[esp+24]
  00065	8b 44 24 20	 mov	 eax, DWORD PTR __Where$[esp+20]
  00069	51		 push	 ecx
  0006a	6a 01		 push	 1
  0006c	52		 push	 edx
  0006d	50		 push	 eax
  0006e	8b cf		 mov	 ecx, edi
  00070	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Insert_n

; 878  : 		return (begin() + _Off);

  00075	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  00078	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0007b	76 05		 jbe	 SHORT $LN43@insert@5
  0007d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN43@insert@5:
  00082	8b 3f		 mov	 edi, DWORD PTR [edi]
  00084	8b ef		 mov	 ebp, edi
  00086	89 5c 24 14	 mov	 DWORD PTR __Tmp$206530[esp+28], ebx
  0008a	85 ff		 test	 edi, edi
  0008c	75 1c		 jne	 SHORT $LN85@insert@5
  0008e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00093	33 c0		 xor	 eax, eax
$LN76@insert@5:
  00095	69 f6 88 00 00
	00		 imul	 esi, 136		; 00000088H
  0009b	03 f3		 add	 esi, ebx
  0009d	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  000a0	77 13		 ja	 SHORT $LN63@insert@5
  000a2	85 ff		 test	 edi, edi
  000a4	74 08		 je	 SHORT $LN81@insert@5
  000a6	8b 3f		 mov	 edi, DWORD PTR [edi]
  000a8	eb 06		 jmp	 SHORT $LN82@insert@5
$LN85@insert@5:
  000aa	8b 07		 mov	 eax, DWORD PTR [edi]
  000ac	eb e7		 jmp	 SHORT $LN76@insert@5
$LN81@insert@5:
  000ae	33 ff		 xor	 edi, edi
$LN82@insert@5:
  000b0	3b 77 0c	 cmp	 esi, DWORD PTR [edi+12]
  000b3	73 05		 jae	 SHORT $LN62@insert@5
$LN63@insert@5:
  000b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN62@insert@5:
  000ba	8b 44 24 1c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+20]
  000be	5f		 pop	 edi
  000bf	89 70 04	 mov	 DWORD PTR [eax+4], esi
  000c2	5e		 pop	 esi
  000c3	89 28		 mov	 DWORD PTR [eax], ebp
  000c5	5d		 pop	 ebp
  000c6	5b		 pop	 ebx

; 879  : 		}

  000c7	83 c4 08	 add	 esp, 8
  000ca	c2 10 00	 ret	 16			; 00000010H
?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::insert
_TEXT	ENDS
PUBLIC	??_C@_0CE@CDKDLFOB@HIDVOL_PROT_WARN_AFTER_MOUNT_PLU@ ; `string'
PUBLIC	??_C@_0BD@LFBCNKIH@DEVICE_IN_USE_INFO?$AA@	; `string'
PUBLIC	??_C@_0CE@NGBHCJPO@HEADER_DAMAGED_AUTO_USED_HEADER_@ ; `string'
PUBLIC	??_C@_0BL@JMLKAJFL@PASSWORD_WRONG_CAPSLOCK_ON?$AA@ ; `string'
PUBLIC	??_C@_0CE@FPDIILIE@PASSWORD_OR_KEYFILE_WRONG_AUTOMO@ ; `string'
PUBLIC	??_C@_0BJ@FBHENHB@PASSWORD_WRONG_AUTOMOUNT?$AA@	; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	_WrongPwdRetryCountOverLimit:PROC
EXTRN	_IncreaseWrongPwdRetryCount:PROC
EXTRN	?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z:PROC ; GetAvailableHostDevices
;	COMDAT ??_C@_0CE@CDKDLFOB@HIDVOL_PROT_WARN_AFTER_MOUNT_PLU@
; File c:\program files\microsoft sdks\windows\v7.0\include\winnt.h
CONST	SEGMENT
??_C@_0CE@CDKDLFOB@HIDVOL_PROT_WARN_AFTER_MOUNT_PLU@ DB 'HIDVOL_PROT_WARN'
	DB	'_AFTER_MOUNT_PLURAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LFBCNKIH@DEVICE_IN_USE_INFO?$AA@
CONST	SEGMENT
??_C@_0BD@LFBCNKIH@DEVICE_IN_USE_INFO?$AA@ DB 'DEVICE_IN_USE_INFO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NGBHCJPO@HEADER_DAMAGED_AUTO_USED_HEADER_@
CONST	SEGMENT
??_C@_0CE@NGBHCJPO@HEADER_DAMAGED_AUTO_USED_HEADER_@ DB 'HEADER_DAMAGED_A'
	DB	'UTO_USED_HEADER_BAK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JMLKAJFL@PASSWORD_WRONG_CAPSLOCK_ON?$AA@
CONST	SEGMENT
??_C@_0BL@JMLKAJFL@PASSWORD_WRONG_CAPSLOCK_ON?$AA@ DB 'PASSWORD_WRONG_CAP'
	DB	'SLOCK_ON', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FPDIILIE@PASSWORD_OR_KEYFILE_WRONG_AUTOMO@
CONST	SEGMENT
??_C@_0CE@FPDIILIE@PASSWORD_OR_KEYFILE_WRONG_AUTOMO@ DB 'PASSWORD_OR_KEYF'
	DB	'ILE_WRONG_AUTOMOUNT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FBHENHB@PASSWORD_WRONG_AUTOMOUNT?$AA@
CONST	SEGMENT
??_C@_0BJ@FBHENHB@PASSWORD_WRONG_AUTOMOUNT?$AA@ DB 'PASSWORD_WRONG_AUTOMO'
	DB	'UNT', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?MountAllDevices@@YAHPAUHWND__@@H@Z DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$?MountAllDevices@@YAHPAUHWND__@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?MountAllDevices@@YAHPAUHWND__@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$8
	DD	00H
	DD	FLAT:__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$10
	DD	04H
	DD	FLAT:__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$12
	DD	08H
	DD	FLAT:__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$14
	DD	03H
	DD	FLAT:__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$15
	DD	00H
	DD	FLAT:__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$16
	DD	0bH
	DD	FLAT:__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$18
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
xdata$x	ENDS
;	COMDAT ?MountAllDevices@@YAHPAUHWND__@@H@Z
_TEXT	SEGMENT
_bHeaderBakRetry$ = -8980				; size = 4
_hwndDlg$GSCopy$ = -8976				; size = 4
_mountedVolCount$ = -8972				; size = 4
_nDosDriveNo$137632 = -8968				; size = 4
tv1817 = -8964						; size = 4
$T207489 = -8964					; size = 4
$T207228 = -8964					; size = 4
tv1207 = -8960						; size = 4
$T206663 = -8960					; size = 4
_status$ = -8956					; size = 4
$T206574 = -8951					; size = 1
$T206927 = -8950					; size = 1
$T206798 = -8949					; size = 1
_bCBCMode$ = -8948					; size = 4
$T206565 = -8941					; size = 1
_shared$ = -8940					; size = 4
$T207620 = -8936					; size = 4
_device$137618 = -8936					; size = 4
_driveList$ = -8932					; size = 4
_b64BitBlockCipher$ = -8928				; size = 4
_partitions$137560 = -8924				; size = 24
_$S1$137523 = -8900					; size = 48
_$S2$137614 = -8852					; size = 48
_drive$137527 = -8804					; size = 4
tv1171 = -8800						; size = 4
$T206563 = -8796					; size = 24
_devices$ = -8772					; size = 24
$T206572 = -8748					; size = 8
_item$207006 = -8740					; size = 52
_item$207020 = -8688					; size = 52
_item$207047 = -8636					; size = 52
_item$207013 = -8584					; size = 52
_item$206999 = -8532					; size = 52
_szFileName$137626 = -8480				; size = 260
_szTmp$137661 = -8216					; size = 8192
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_hwndDlg$ = 8						; size = 4
_bPasswordPrompt$ = 12					; size = 4
?MountAllDevices@@YAHPAUHWND__@@H@Z PROC		; MountAllDevices, COMDAT

; 3707 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?MountAllDevices@@YAHPAUHWND__@@H@Z
  0000d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00013	50		 push	 eax
  00014	51		 push	 ecx
  00015	b8 04 23 00 00	 mov	 eax, 8964		; 00002304H
  0001a	e8 00 00 00 00	 call	 __chkstk
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c4		 xor	 eax, esp
  00026	89 84 24 00 23
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+8980], eax
  0002d	53		 push	 ebx
  0002e	56		 push	 esi
  0002f	57		 push	 edi
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c4		 xor	 eax, esp
  00037	50		 push	 eax
  00038	8d 84 24 18 23
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+8996]
  0003f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00045	8b 45 08	 mov	 eax, DWORD PTR _hwndDlg$[ebp]

; 3708 : 	HWND driveList = GetDlgItem (hwndDlg, IDC_DRIVELIST);

  00048	68 ef 03 00 00	 push	 1007			; 000003efH
  0004d	50		 push	 eax

; 3869 : 			bHeaderBakRetry = FALSE;

  0004e	89 44 24 1c	 mov	 DWORD PTR _hwndDlg$GSCopy$[esp+9004], eax
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00058	33 f6		 xor	 esi, esi
  0005a	56		 push	 esi
  0005b	56		 push	 esi
  0005c	68 42 10 00 00	 push	 4162			; 00001042H
  00061	50		 push	 eax
  00062	89 44 24 50	 mov	 DWORD PTR _driveList$[esp+9012], eax
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0006c	8d 8c 24 e0 00
	00 00		 lea	 ecx, DWORD PTR _devices$[esp+8996]
  00073	8b d8		 mov	 ebx, eax
  00075	89 74 24 38	 mov	 DWORD PTR _shared$[esp+8996], esi
  00079	89 74 24 28	 mov	 DWORD PTR _status$[esp+8996], esi
  0007d	89 74 24 44	 mov	 DWORD PTR _b64BitBlockCipher$[esp+8996], esi
  00081	89 74 24 30	 mov	 DWORD PTR _bCBCMode$[esp+8996], esi
  00085	89 74 24 10	 mov	 DWORD PTR _bHeaderBakRetry$[esp+8996], esi
  00089	89 74 24 18	 mov	 DWORD PTR _mountedVolCount$[esp+8996], esi
  0008d	e8 00 00 00 00	 call	 ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
  00092	89 b4 24 20 23
	00 00		 mov	 DWORD PTR __$EHRec$[esp+9004], esi
  00099	89 35 00 00 00
	00		 mov	 DWORD PTR ?VolumePassword@@3UPassword@@A, esi
  0009f	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  000a4	be 00 00 00 00	 mov	 esi, OFFSET ?defaultMountOptions@@3UMountOptions@@A ; defaultMountOptions
  000a9	bf 00 00 00 00	 mov	 edi, OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  000ae	f3 a5		 rep movsd
  000b0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bPrebootPasswordDlgMode, 0
  000ba	83 fb ff	 cmp	 ebx, -1
  000bd	75 02		 jne	 SHORT $LN83@MountAllDe

; 3709 : 	int selDrive = ListView_GetSelectionMark (driveList);
; 3710 : 	BOOL shared = FALSE, status = FALSE, b64BitBlockCipher = FALSE, bCBCMode = FALSE, bHeaderBakRetry = FALSE;
; 3711 : 	int mountedVolCount = 0, modeOfOperation;
; 3712 : 	vector <HostDevice> devices;
; 3713 : 
; 3714 : 	VolumePassword.Length = 0;
; 3715 : 	mountOptions = defaultMountOptions;
; 3716 : 	bPrebootPasswordDlgMode = FALSE;
; 3717 : 
; 3718 : 	if (selDrive == -1) 
; 3719 : 		selDrive = 0;

  000bf	33 db		 xor	 ebx, ebx
$LN83@MountAllDe:

; 3720 : 
; 3721 : 	ResetWrongPwdRetryCount ();

  000c1	e8 00 00 00 00	 call	 _ResetWrongPwdRetryCount

; 3722 : 
; 3723 : 	MultipleMountOperationInProgress = TRUE;

  000c6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  000cc	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _MultipleMountOperationInProgress, 1
  000d6	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL82@MountAllDe:

; 3724 : 
; 3725 : 	do
; 3726 : 	{
; 3727 : 		if (!bHeaderBakRetry)

  000e0	33 f6		 xor	 esi, esi
  000e2	39 74 24 10	 cmp	 DWORD PTR _bHeaderBakRetry$[esp+8996], esi
  000e6	0f 85 bf 00 00
	00		 jne	 $LN71@MountAllDe

; 3728 : 		{
; 3729 : 			if (!CmdVolumePasswordValid && bPasswordPrompt)

  000ec	39 35 00 00 00
	00		 cmp	 DWORD PTR ?CmdVolumePasswordValid@@3HA, esi ; CmdVolumePasswordValid
  000f2	75 6a		 jne	 SHORT $LN443@MountAllDe
  000f4	39 75 0c	 cmp	 DWORD PTR _bPasswordPrompt$[ebp], esi
  000f7	0f 84 81 00 00
	00		 je	 $LN74@MountAllDe

; 3730 : 			{
; 3731 : 				PasswordDlgVolume[0] = '\0';
; 3732 : 				if (!AskVolumePassword (hwndDlg, &VolumePassword, NULL, TRUE))

  000fd	8b 44 24 14	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[esp+8996]
  00101	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00107	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  0010c	68 00 00 00 00	 push	 OFFSET _PasswordDlgProc@16
  00111	50		 push	 eax
  00112	6a 68		 push	 104			; 00000068H
  00114	51		 push	 ecx
  00115	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _PasswordDlgVolume, 0
  0011c	89 35 00 00 00
	00		 mov	 DWORD PTR _PasswordDialogTitleStringId, esi
  00122	89 35 00 00 00
	00		 mov	 DWORD PTR _PasswordDialogDisableMountOptions, esi
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  0012e	83 f8 01	 cmp	 eax, 1
  00131	74 4b		 je	 SHORT $LN74@MountAllDe
  00133	ba 14 00 00 00	 mov	 edx, OFFSET ?mountOptions@@3UMountOptions@@A+20
  00138	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  0013d	89 35 00 00 00
	00		 mov	 DWORD PTR ?VolumePassword@@3UPassword@@A, esi
  00143	8b f9		 mov	 edi, ecx
  00145	8b c2		 mov	 eax, edx
$LL108@MountAllDe:
  00147	c6 00 00	 mov	 BYTE PTR [eax], 0
  0014a	40		 inc	 eax
  0014b	83 ef 01	 sub	 edi, 1
  0014e	75 f7		 jne	 SHORT $LL108@MountAllDe
$LL100@MountAllDe:
  00150	49		 dec	 ecx
  00151	c6 02 00	 mov	 BYTE PTR [edx], 0
  00154	42		 inc	 edx
  00155	3b ce		 cmp	 ecx, esi
  00157	75 f7		 jne	 SHORT $LL100@MountAllDe
  00159	e9 57 0a 00 00	 jmp	 $ret$137378
$LN443@MountAllDe:

; 3733 : 					goto ret;
; 3734 : 			}
; 3735 : 			else if (CmdVolumePasswordValid)
; 3736 : 			{
; 3737 : 				bPasswordPrompt = FALSE;
; 3738 : 				VolumePassword = CmdVolumePassword;

  0015e	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  00163	be 00 00 00 00	 mov	 esi, OFFSET ?CmdVolumePassword@@3UPassword@@A ; CmdVolumePassword
  00168	bf 00 00 00 00	 mov	 edi, OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  0016d	f3 a5		 rep movsd
  0016f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  00175	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _bPasswordPrompt$[ebp], 0
  0017c	33 f6		 xor	 esi, esi
$LN74@MountAllDe:

; 3739 : 			}
; 3740 : 
; 3741 : 			WaitCursor();

  0017e	e8 00 00 00 00	 call	 _WaitCursor

; 3742 : 
; 3743 : 			if (FirstCmdKeyFile)

  00183	a1 00 00 00 00	 mov	 eax, DWORD PTR ?FirstCmdKeyFile@@3PAUKeyFileStruct@@A ; FirstCmdKeyFile
  00188	3b c6		 cmp	 eax, esi
  0018a	74 03		 je	 SHORT $LN73@MountAllDe

; 3744 : 				KeyFilesApply (&VolumePassword, FirstCmdKeyFile);

  0018c	50		 push	 eax
  0018d	eb 0f		 jmp	 SHORT $LN498@MountAllDe
$LN73@MountAllDe:

; 3745 : 			else if (KeyFilesEnable)

  0018f	39 35 00 00 00
	00		 cmp	 DWORD PTR _KeyFilesEnable, esi
  00195	74 14		 je	 SHORT $LN71@MountAllDe

; 3746 : 				KeyFilesApply (&VolumePassword, FirstKeyFile);

  00197	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _FirstKeyFile
  0019d	52		 push	 edx
$LN498@MountAllDe:
  0019e	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  001a3	e8 00 00 00 00	 call	 _KeyFilesApply
  001a8	83 c4 08	 add	 esp, 8
$LN71@MountAllDe:

; 3747 : 
; 3748 : 		}
; 3749 : 
; 3750 : 		if (devices.empty())

  001ab	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR _devices$[esp+9012]
  001b2	2b 8c 24 ec 00
	00 00		 sub	 ecx, DWORD PTR _devices$[esp+9008]
  001b9	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  001be	f7 e9		 imul	 ecx
  001c0	c1 fa 06	 sar	 edx, 6
  001c3	8b c2		 mov	 eax, edx
  001c5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001c8	03 c2		 add	 eax, edx
  001ca	0f 85 a2 00 00
	00		 jne	 $LN145@MountAllDe

; 3751 : 			devices = GetAvailableHostDevices (true, false, true, true);

  001d0	6a 01		 push	 1
  001d2	6a 01		 push	 1
  001d4	56		 push	 esi
  001d5	8d 8c 24 d4 00
	00 00		 lea	 ecx, DWORD PTR $T206563[esp+9008]
  001dc	6a 01		 push	 1
  001de	51		 push	 ecx
  001df	e8 00 00 00 00	 call	 ?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z ; GetAvailableHostDevices
  001e4	83 c4 14	 add	 esp, 20			; 00000014H
  001e7	50		 push	 eax
  001e8	8d 8c 24 e4 00
	00 00		 lea	 ecx, DWORD PTR _devices$[esp+9000]
  001ef	c6 84 24 24 23
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+9008], 1
  001f7	e8 00 00 00 00	 call	 ??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=
  001fc	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR $T206563[esp+9008]
  00203	c6 84 24 20 23
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+9004], 2
  0020b	3b c6		 cmp	 eax, esi
  0020d	74 36		 je	 SHORT $LN139@MountAllDe
  0020f	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR $T206563[esp+9012]
  00216	89 4c 24 24	 mov	 DWORD PTR $T206663[esp+8996], ecx
  0021a	8b f0		 mov	 esi, eax
  0021c	3b c1		 cmp	 eax, ecx
  0021e	74 1a		 je	 SHORT $LN127@MountAllDe
$LL129@MountAllDe:
  00220	8b ce		 mov	 ecx, esi
  00222	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00227	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0022d	3b 74 24 24	 cmp	 esi, DWORD PTR $T206663[esp+8996]
  00231	75 ed		 jne	 SHORT $LL129@MountAllDe
  00233	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR $T206563[esp+9008]
$LN127@MountAllDe:
  0023a	50		 push	 eax
  0023b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00240	83 c4 04	 add	 esp, 4
  00243	33 f6		 xor	 esi, esi
$LN139@MountAllDe:
  00245	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR $T206563[esp+8996]
  0024c	52		 push	 edx
  0024d	89 b4 24 d8 00
	00 00		 mov	 DWORD PTR $T206563[esp+9012], esi
  00254	89 b4 24 dc 00
	00 00		 mov	 DWORD PTR $T206563[esp+9016], esi
  0025b	89 b4 24 e0 00
	00 00		 mov	 DWORD PTR $T206563[esp+9020], esi
  00262	c6 84 24 24 23
	00 00 00	 mov	 BYTE PTR __$EHRec$[esp+9008], 0
  0026a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0026f	83 c4 04	 add	 esp, 4
$LN145@MountAllDe:

; 3752 : 		foreach (const HostDevice &drive, devices)

  00272	8d 84 24 e0 00
	00 00		 lea	 eax, DWORD PTR _devices$[esp+8996]
  00279	50		 push	 eax
  0027a	8d 4c 24 64	 lea	 ecx, DWORD PTR _$S1$137523[esp+9000]
  0027e	51		 push	 ecx
  0027f	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
  00284	83 c4 08	 add	 esp, 8
  00287	8b 54 24 60	 mov	 edx, DWORD PTR _$S1$137523[esp+8996]
  0028b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0028e	8d 4c 24 60	 lea	 ecx, DWORD PTR _$S1$137523[esp+8996]
  00292	c6 84 24 20 23
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+9004], 3
  0029a	ff d0		 call	 eax
  0029c	84 c0		 test	 al, al
  0029e	0f 84 11 06 00
	00		 je	 $LN67@MountAllDe
$LL69@MountAllDe:
  002a4	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR _$S1$137523[esp+9036]
  002ab	c6 44 24 37 00	 mov	 BYTE PTR $T206565[esp+8996], 0
  002b0	c6 44 24 2f 00	 mov	 BYTE PTR $T206798[esp+8996], 0
  002b5	3b c6		 cmp	 eax, esi
  002b7	75 10		 jne	 SHORT $LN445@MountAllDe
  002b9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  002be	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR _$S1$137523[esp+9036]
  002c5	3b c6		 cmp	 eax, esi
  002c7	74 04		 je	 SHORT $LN169@MountAllDe
$LN445@MountAllDe:
  002c9	8b 00		 mov	 eax, DWORD PTR [eax]
  002cb	eb 02		 jmp	 SHORT $LN170@MountAllDe
$LN169@MountAllDe:
  002cd	33 c0		 xor	 eax, eax
$LN170@MountAllDe:
  002cf	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR _$S1$137523[esp+9040]
  002d6	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  002d9	72 0c		 jb	 SHORT $LN157@MountAllDe
  002db	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  002e0	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR _$S1$137523[esp+9040]
$LN157@MountAllDe:
  002e7	80 7c 24 65 00	 cmp	 BYTE PTR _$S1$137523[esp+9001], 0
  002ec	89 8c 24 c0 00
	00 00		 mov	 DWORD PTR _drive$137527[esp+8996], ecx
  002f3	0f 94 c0	 sete	 al
  002f6	88 44 24 65	 mov	 BYTE PTR _$S1$137523[esp+9001], al
  002fa	84 c0		 test	 al, al
  002fc	0f 84 91 05 00
	00		 je	 $LN68@MountAllDe

; 3783 : 						}
; 3784 : 						nDosDriveNo = HIWORD(GetItemLong (driveList, selDrive)) - 'A';

  00302	83 c1 6c	 add	 ecx, 108		; 0000006cH
  00305	89 8c 24 c4 00
	00 00		 mov	 DWORD PTR tv1171[esp+8996], ecx
  0030c	8d 64 24 00	 npad	 4
$LL173@MountAllDe:
  00310	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv1171[esp+8996]
  00317	51		 push	 ecx
  00318	8d 4c 24 4c	 lea	 ecx, DWORD PTR _partitions$137560[esp+9000]
  0031c	e8 00 00 00 00	 call	 ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
  00321	8b 44 24 54	 mov	 eax, DWORD PTR _partitions$137560[esp+9008]
  00325	c6 84 24 20 23
	00 00 04	 mov	 BYTE PTR __$EHRec$[esp+9004], 4
  0032d	8b f0		 mov	 esi, eax
  0032f	3b 44 24 58	 cmp	 eax, DWORD PTR _partitions$137560[esp+9012]
  00333	76 05		 jbe	 SHORT $LN183@MountAllDe

; 3753 : 		{
; 3754 : 			vector <HostDevice> partitions = drive.Partitions;
; 3755 : 			partitions.insert (partitions.begin(), drive);

  00335	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN183@MountAllDe:
  0033a	8b 94 24 c0 00
	00 00		 mov	 edx, DWORD PTR _drive$137527[esp+8996]
  00341	8b 44 24 48	 mov	 eax, DWORD PTR _partitions$137560[esp+8996]
  00345	52		 push	 edx
  00346	56		 push	 esi
  00347	50		 push	 eax
  00348	8d 84 24 04 01
	00 00		 lea	 eax, DWORD PTR $T206572[esp+9008]
  0034f	50		 push	 eax
  00350	8d 4c 24 58	 lea	 ecx, DWORD PTR _partitions$137560[esp+9012]
  00354	e8 00 00 00 00	 call	 ?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::insert

; 3756 : 
; 3757 : 			foreach (const HostDevice &device, partitions)

  00359	8d 4c 24 48	 lea	 ecx, DWORD PTR _partitions$137560[esp+8996]
  0035d	51		 push	 ecx
  0035e	8d 94 24 94 00
	00 00		 lea	 edx, DWORD PTR _$S2$137614[esp+9000]
  00365	52		 push	 edx
  00366	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
  0036b	83 c4 08	 add	 esp, 8
  0036e	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR _$S2$137614[esp+8996]
  00375	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00378	8d 8c 24 90 00
	00 00		 lea	 ecx, DWORD PTR _$S2$137614[esp+8996]
  0037f	c6 84 24 20 23
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+9004], 5
  00387	ff d2		 call	 edx
  00389	84 c0		 test	 al, al
  0038b	0f 84 03 04 00
	00		 je	 $LN61@MountAllDe
$LN63@MountAllDe:
  00391	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR _$S2$137614[esp+9036]
  00398	c6 44 24 2d 00	 mov	 BYTE PTR $T206574[esp+8996], 0
  0039d	c6 44 24 2e 00	 mov	 BYTE PTR $T206927[esp+8996], 0
  003a2	85 c0		 test	 eax, eax
  003a4	75 10		 jne	 SHORT $LN446@MountAllDe
  003a6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  003ab	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR _$S2$137614[esp+9036]
  003b2	85 c0		 test	 eax, eax
  003b4	74 04		 je	 SHORT $LN216@MountAllDe
$LN446@MountAllDe:
  003b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  003b8	eb 02		 jmp	 SHORT $LN217@MountAllDe
$LN216@MountAllDe:
  003ba	33 c9		 xor	 ecx, ecx
$LN217@MountAllDe:
  003bc	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR _$S2$137614[esp+9040]
  003c3	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  003c6	72 0c		 jb	 SHORT $LN204@MountAllDe
  003c8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  003cd	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR _$S2$137614[esp+9040]
$LN204@MountAllDe:
  003d4	80 bc 24 95 00
	00 00 00	 cmp	 BYTE PTR _$S2$137614[esp+9001], 0
  003dc	89 44 24 3c	 mov	 DWORD PTR _device$137618[esp+8996], eax
  003e0	0f 94 c1	 sete	 cl
  003e3	88 8c 24 95 00
	00 00		 mov	 BYTE PTR _$S2$137614[esp+9001], cl
  003ea	84 c9		 test	 cl, cl
  003ec	0f 84 74 03 00
	00		 je	 $LN62@MountAllDe
  003f2	8d 70 40	 lea	 esi, DWORD PTR [eax+64]
  003f5	83 c0 04	 add	 eax, 4
  003f8	89 74 24 20	 mov	 DWORD PTR tv1817[esp+8996], esi
  003fc	89 44 24 24	 mov	 DWORD PTR tv1207[esp+8996], eax
$LL220@MountAllDe:

; 3758 : 			{
; 3759 : 				char szFileName[TC_MAX_PATH];
; 3760 : 				strcpy_s (szFileName, sizeof (szFileName), device.Path.c_str());

  00400	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00404	72 05		 jb	 SHORT $LN228@MountAllDe
  00406	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00409	eb 03		 jmp	 SHORT $LN229@MountAllDe
$LN228@MountAllDe:
  0040b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
$LN229@MountAllDe:
  0040e	50		 push	 eax
  0040f	8d 84 24 08 02
	00 00		 lea	 eax, DWORD PTR _szFileName$137626[esp+9000]
  00416	68 04 01 00 00	 push	 260			; 00000104H
  0041b	50		 push	 eax
  0041c	e8 00 00 00 00	 call	 _strcpy_s

; 3761 : 				BOOL mounted = IsMountedVolume (szFileName);

  00421	8d 8c 24 10 02
	00 00		 lea	 ecx, DWORD PTR _szFileName$137626[esp+9008]
  00428	51		 push	 ecx
  00429	e8 00 00 00 00	 call	 _IsMountedVolume

; 3762 : 
; 3763 : 				// Skip other partitions of the disk if partition0 (whole disk) is mounted
; 3764 : 				if (!device.IsPartition && mounted)

  0042e	8b 54 24 34	 mov	 edx, DWORD PTR tv1207[esp+9012]
  00432	83 c4 10	 add	 esp, 16			; 00000010H
  00435	80 3a 00	 cmp	 BYTE PTR [edx], 0
  00438	75 08		 jne	 SHORT $LN57@MountAllDe
  0043a	85 c0		 test	 eax, eax
  0043c	0f 85 24 03 00
	00		 jne	 $LN62@MountAllDe
$LN57@MountAllDe:

; 3765 : 					break;
; 3766 : 
; 3767 : 				if (device.Floppy)

  00442	8b 4c 24 3c	 mov	 ecx, DWORD PTR _device$137618[esp+8996]
  00446	80 79 03 00	 cmp	 BYTE PTR [ecx+3], 0
  0044a	0f 85 16 03 00
	00		 jne	 $LN62@MountAllDe

; 3768 : 					break;
; 3769 : 
; 3770 : 				if (device.HasUnencryptedFilesystem && !mountOptions.UseBackupHeader && !bHeaderBakRetry)

  00450	80 79 06 00	 cmp	 BYTE PTR [ecx+6], 0
  00454	74 14		 je	 SHORT $LN55@MountAllDe
  00456	83 3d 5c 00 00
	00 00		 cmp	 DWORD PTR ?mountOptions@@3UMountOptions@@A+92, 0
  0045d	75 0b		 jne	 SHORT $LN55@MountAllDe
  0045f	83 7c 24 10 00	 cmp	 DWORD PTR _bHeaderBakRetry$[esp+8996], 0
  00464	0f 84 da 02 00
	00		 je	 $LN59@MountAllDe
$LN55@MountAllDe:

; 3771 : 					continue;
; 3772 : 
; 3773 : 				if (!mounted)

  0046a	85 c0		 test	 eax, eax
  0046c	0f 85 d2 02 00
	00		 jne	 $LN59@MountAllDe
  00472	8b 74 24 40	 mov	 esi, DWORD PTR _driveList$[esp+8996]
  00476	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL53@MountAllDe:

; 3774 : 				{	
; 3775 : 					int nDosDriveNo;
; 3776 : 
; 3777 : 					while (LOWORD (GetItemLong (driveList, selDrive)) != 0xffff)

  00480	6a 34		 push	 52			; 00000034H
  00482	8d 84 24 d4 01
	00 00		 lea	 eax, DWORD PTR _item$206999[esp+9000]
  00489	6a 00		 push	 0
  0048b	50		 push	 eax
  0048c	e8 00 00 00 00	 call	 _memset
  00491	83 c4 0c	 add	 esp, 12			; 0000000cH
  00494	8d 8c 24 d0 01
	00 00		 lea	 ecx, DWORD PTR _item$206999[esp+8996]
  0049b	51		 push	 ecx
  0049c	6a 00		 push	 0
  0049e	68 05 10 00 00	 push	 4101			; 00001005H
  004a3	56		 push	 esi
  004a4	c7 84 24 e0 01
	00 00 04 00 00
	00		 mov	 DWORD PTR _item$206999[esp+9012], 4
  004af	89 9c 24 e4 01
	00 00		 mov	 DWORD PTR _item$206999[esp+9016], ebx
  004b6	ff d7		 call	 edi
  004b8	85 c0		 test	 eax, eax
  004ba	0f 84 b2 00 00
	00		 je	 $LN52@MountAllDe
  004c0	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  004c5	66 39 94 24 f0
	01 00 00	 cmp	 WORD PTR _item$206999[esp+9028], dx
  004cd	0f 84 9f 00 00
	00		 je	 $LN52@MountAllDe

; 3778 : 					{
; 3779 : 						if(LOWORD (GetItemLong (driveList, selDrive)) != TC_MLIST_ITEM_FREE)

  004d3	6a 34		 push	 52			; 00000034H
  004d5	8d 84 24 04 01
	00 00		 lea	 eax, DWORD PTR _item$207006[esp+9000]
  004dc	6a 00		 push	 0
  004de	50		 push	 eax
  004df	e8 00 00 00 00	 call	 _memset
  004e4	83 c4 0c	 add	 esp, 12			; 0000000cH
  004e7	8d 8c 24 00 01
	00 00		 lea	 ecx, DWORD PTR _item$207006[esp+8996]
  004ee	51		 push	 ecx
  004ef	6a 00		 push	 0
  004f1	68 05 10 00 00	 push	 4101			; 00001005H
  004f6	56		 push	 esi
  004f7	c7 84 24 10 01
	00 00 04 00 00
	00		 mov	 DWORD PTR _item$207006[esp+9012], 4
  00502	89 9c 24 14 01
	00 00		 mov	 DWORD PTR _item$207006[esp+9016], ebx
  00509	ff d7		 call	 edi
  0050b	85 c0		 test	 eax, eax
  0050d	74 0b		 je	 SHORT $LN447@MountAllDe
  0050f	66 83 bc 24 20
	01 00 00 00	 cmp	 WORD PTR _item$207006[esp+9028], 0
  00518	74 06		 je	 SHORT $LN51@MountAllDe
$LN447@MountAllDe:

; 3780 : 						{
; 3781 : 							selDrive++;

  0051a	43		 inc	 ebx

; 3782 : 							continue;

  0051b	e9 60 ff ff ff	 jmp	 $LL53@MountAllDe
$LN51@MountAllDe:

; 3783 : 						}
; 3784 : 						nDosDriveNo = HIWORD(GetItemLong (driveList, selDrive)) - 'A';

  00520	6a 34		 push	 52			; 00000034H
  00522	8d 94 24 a0 01
	00 00		 lea	 edx, DWORD PTR _item$207013[esp+9000]
  00529	6a 00		 push	 0
  0052b	52		 push	 edx
  0052c	e8 00 00 00 00	 call	 _memset
  00531	83 c4 0c	 add	 esp, 12			; 0000000cH
  00534	8d 84 24 9c 01
	00 00		 lea	 eax, DWORD PTR _item$207013[esp+8996]
  0053b	50		 push	 eax
  0053c	6a 00		 push	 0
  0053e	68 05 10 00 00	 push	 4101			; 00001005H
  00543	56		 push	 esi
  00544	c7 84 24 ac 01
	00 00 04 00 00
	00		 mov	 DWORD PTR _item$207013[esp+9012], 4
  0054f	89 9c 24 b0 01
	00 00		 mov	 DWORD PTR _item$207013[esp+9016], ebx
  00556	ff d7		 call	 edi
  00558	85 c0		 test	 eax, eax
  0055a	75 05		 jne	 SHORT $LN239@MountAllDe
  0055c	83 c8 ff	 or	 eax, -1
  0055f	eb 07		 jmp	 SHORT $LN238@MountAllDe
$LN239@MountAllDe:
  00561	8b 84 24 bc 01
	00 00		 mov	 eax, DWORD PTR _item$207013[esp+9028]
$LN238@MountAllDe:
  00568	c1 e8 10	 shr	 eax, 16			; 00000010H
  0056b	83 e8 41	 sub	 eax, 65			; 00000041H
  0056e	89 44 24 1c	 mov	 DWORD PTR _nDosDriveNo$137632[esp+8996], eax
$LN52@MountAllDe:

; 3785 : 						break;
; 3786 : 					}
; 3787 : 
; 3788 : 					if (LOWORD (GetItemLong (driveList, selDrive)) == 0xffff)

  00572	6a 34		 push	 52			; 00000034H
  00574	8d 8c 24 38 01
	00 00		 lea	 ecx, DWORD PTR _item$207020[esp+9000]
  0057b	6a 00		 push	 0
  0057d	51		 push	 ecx
  0057e	e8 00 00 00 00	 call	 _memset
  00583	83 c4 0c	 add	 esp, 12			; 0000000cH
  00586	8d 94 24 34 01
	00 00		 lea	 edx, DWORD PTR _item$207020[esp+8996]
  0058d	52		 push	 edx
  0058e	6a 00		 push	 0
  00590	68 05 10 00 00	 push	 4101			; 00001005H
  00595	56		 push	 esi
  00596	c7 84 24 44 01
	00 00 04 00 00
	00		 mov	 DWORD PTR _item$207020[esp+9012], 4
  005a1	89 9c 24 48 01
	00 00		 mov	 DWORD PTR _item$207020[esp+9016], ebx
  005a8	ff d7		 call	 edi
  005aa	85 c0		 test	 eax, eax
  005ac	0f 84 3e 05 00
	00		 je	 $LN414@MountAllDe
  005b2	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  005b7	66 39 84 24 54
	01 00 00	 cmp	 WORD PTR _item$207020[esp+9028], ax
  005bf	0f 84 2b 05 00
	00		 je	 $LN414@MountAllDe

; 3789 : 						goto ret;
; 3790 : 
; 3791 : 					// First try user password then cached passwords
; 3792 : 					if ((mounted = MountVolume (hwndDlg, nDosDriveNo, szFileName, &VolumePassword, bCacheInDriver, bForceMount, &mountOptions, TRUE, FALSE)) > 0
; 3793 : 						|| (mounted = MountVolume (hwndDlg, nDosDriveNo, szFileName, NULL, bCacheInDriver, bForceMount, &mountOptions, TRUE, FALSE)) > 0)

  005c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bForceMount@@3HA ; bForceMount
  005cb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bCacheInDriver@@3HA ; bCacheInDriver
  005d1	6a 00		 push	 0
  005d3	6a 01		 push	 1
  005d5	68 00 00 00 00	 push	 OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  005da	51		 push	 ecx
  005db	8b 4c 24 2c	 mov	 ecx, DWORD PTR _nDosDriveNo$137632[esp+9012]
  005df	52		 push	 edx
  005e0	8b 54 24 28	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[esp+9016]
  005e4	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  005e9	8d 84 24 1c 02
	00 00		 lea	 eax, DWORD PTR _szFileName$137626[esp+9020]
  005f0	50		 push	 eax
  005f1	51		 push	 ecx
  005f2	52		 push	 edx
  005f3	e8 00 00 00 00	 call	 _MountVolume
  005f8	8b f0		 mov	 esi, eax
  005fa	83 c4 24	 add	 esp, 36			; 00000024H
  005fd	85 f6		 test	 esi, esi
  005ff	7f 3c		 jg	 SHORT $LN47@MountAllDe
  00601	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bForceMount@@3HA ; bForceMount
  00606	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bCacheInDriver@@3HA ; bCacheInDriver
  0060c	6a 00		 push	 0
  0060e	6a 01		 push	 1
  00610	68 00 00 00 00	 push	 OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  00615	50		 push	 eax
  00616	8b 44 24 2c	 mov	 eax, DWORD PTR _nDosDriveNo$137632[esp+9012]
  0061a	51		 push	 ecx
  0061b	8b 4c 24 28	 mov	 ecx, DWORD PTR _hwndDlg$GSCopy$[esp+9016]
  0061f	6a 00		 push	 0
  00621	8d 94 24 1c 02
	00 00		 lea	 edx, DWORD PTR _szFileName$137626[esp+9020]
  00628	52		 push	 edx
  00629	50		 push	 eax
  0062a	51		 push	 ecx
  0062b	e8 00 00 00 00	 call	 _MountVolume
  00630	8b f0		 mov	 esi, eax
  00632	83 c4 24	 add	 esp, 36			; 00000024H
  00635	85 f6		 test	 esi, esi
  00637	0f 8e 03 01 00
	00		 jle	 $LN486@MountAllDe
$LN47@MountAllDe:

; 3794 : 					{
; 3795 : 						// A volume has been successfully mounted
; 3796 : 
; 3797 : 						ResetWrongPwdRetryCount ();

  0063d	e8 00 00 00 00	 call	 _ResetWrongPwdRetryCount

; 3798 : 
; 3799 : 						if (mounted == 2)

  00642	83 fe 02	 cmp	 esi, 2
  00645	75 08		 jne	 SHORT $LN46@MountAllDe

; 3800 : 							shared = TRUE;

  00647	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR _shared$[esp+8996], 1
$LN46@MountAllDe:

; 3801 : 
; 3802 : 						LoadDriveLetters (driveList, (HIWORD (GetItemLong (GetDlgItem (hwndDlg, IDC_DRIVELIST), selDrive))));

  0064f	8b 54 24 14	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[esp+8996]
  00653	68 ef 03 00 00	 push	 1007			; 000003efH
  00658	52		 push	 edx
  00659	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0065f	6a 34		 push	 52			; 00000034H
  00661	8b f0		 mov	 esi, eax
  00663	8d 84 24 6c 01
	00 00		 lea	 eax, DWORD PTR _item$207047[esp+9000]
  0066a	6a 00		 push	 0
  0066c	50		 push	 eax
  0066d	e8 00 00 00 00	 call	 _memset
  00672	83 c4 0c	 add	 esp, 12			; 0000000cH
  00675	8d 8c 24 68 01
	00 00		 lea	 ecx, DWORD PTR _item$207047[esp+8996]
  0067c	51		 push	 ecx
  0067d	6a 00		 push	 0
  0067f	68 05 10 00 00	 push	 4101			; 00001005H
  00684	56		 push	 esi
  00685	c7 84 24 78 01
	00 00 04 00 00
	00		 mov	 DWORD PTR _item$207047[esp+9012], 4
  00690	89 9c 24 7c 01
	00 00		 mov	 DWORD PTR _item$207047[esp+9016], ebx
  00697	ff d7		 call	 edi
  00699	85 c0		 test	 eax, eax
  0069b	75 05		 jne	 SHORT $LN259@MountAllDe
  0069d	83 c8 ff	 or	 eax, -1
  006a0	eb 07		 jmp	 SHORT $LN258@MountAllDe
$LN259@MountAllDe:
  006a2	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR _item$207047[esp+9028]
$LN258@MountAllDe:
  006a9	8b 54 24 40	 mov	 edx, DWORD PTR _driveList$[esp+8996]
  006ad	c1 e8 10	 shr	 eax, 16			; 00000010H
  006b0	50		 push	 eax
  006b1	52		 push	 edx
  006b2	e8 00 00 00 00	 call	 _LoadDriveLetters
  006b7	83 c4 08	 add	 esp, 8

; 3803 : 						selDrive++;

  006ba	43		 inc	 ebx

; 3804 : 
; 3805 : 						if (bExplore)

  006bb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bExplore, 0
  006c2	74 19		 je	 SHORT $LN485@MountAllDe

; 3806 : 						{	
; 3807 : 							WaitCursor();

  006c4	e8 00 00 00 00	 call	 _WaitCursor

; 3808 : 							OpenVolumeExplorerWindow (nDosDriveNo);

  006c9	8b 74 24 1c	 mov	 esi, DWORD PTR _nDosDriveNo$137632[esp+8996]
  006cd	56		 push	 esi
  006ce	e8 00 00 00 00	 call	 _OpenVolumeExplorerWindow
  006d3	83 c4 04	 add	 esp, 4

; 3809 : 							NormalCursor();

  006d6	e8 00 00 00 00	 call	 _NormalCursor
  006db	eb 04		 jmp	 SHORT $LN45@MountAllDe
$LN485@MountAllDe:
  006dd	8b 74 24 1c	 mov	 esi, DWORD PTR _nDosDriveNo$137632[esp+8996]
$LN45@MountAllDe:

; 3810 : 						}
; 3811 : 
; 3812 : 						if (bBeep)

  006e1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bBeep@@3HA, 0 ; bBeep
  006e8	74 08		 je	 SHORT $LN44@MountAllDe

; 3813 : 							MessageBeep (0xFFFFFFFF);

  006ea	6a ff		 push	 -1
  006ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBeep@4
$LN44@MountAllDe:

; 3814 : 
; 3815 : 						status = TRUE;
; 3816 : 
; 3817 : 						// Check for deprecated CBC mode
; 3818 : 						modeOfOperation = GetModeOfOperationByDriveNo (nDosDriveNo);

  006f2	56		 push	 esi
  006f3	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR _status$[esp+9000], 1
  006fb	e8 00 00 00 00	 call	 _GetModeOfOperationByDriveNo
  00700	83 c4 04	 add	 esp, 4

; 3819 : 						bCBCMode = (modeOfOperation == CBC || modeOfOperation == OUTER_CBC);

  00703	83 f8 03	 cmp	 eax, 3
  00706	74 0d		 je	 SHORT $LN90@MountAllDe
  00708	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR _bCBCMode$[esp+8996], 0
  00710	83 f8 04	 cmp	 eax, 4
  00713	75 08		 jne	 SHORT $LN91@MountAllDe
$LN90@MountAllDe:
  00715	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR _bCBCMode$[esp+8996], 1
$LN91@MountAllDe:

; 3820 : 
; 3821 : 						if (GetCipherBlockSizeByDriveNo(nDosDriveNo) == 64)

  0071d	56		 push	 esi
  0071e	e8 00 00 00 00	 call	 _GetCipherBlockSizeByDriveNo
  00723	83 c4 04	 add	 esp, 4
  00726	83 f8 40	 cmp	 eax, 64			; 00000040H
  00729	75 08		 jne	 SHORT $LN43@MountAllDe

; 3822 : 							b64BitBlockCipher = TRUE;

  0072b	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR _b64BitBlockCipher$[esp+8996], 1
$LN43@MountAllDe:

; 3823 : 
; 3824 : 						mountedVolCount++;
; 3825 : 
; 3826 : 						// Skip other partitions of the disk if partition0 (whole disk) has been mounted
; 3827 : 						if (!device.IsPartition)

  00733	8b 44 24 24	 mov	 eax, DWORD PTR tv1207[esp+8996]
  00737	ff 44 24 18	 inc	 DWORD PTR _mountedVolCount$[esp+8996]
  0073b	80 38 00	 cmp	 BYTE PTR [eax], 0
  0073e	74 26		 je	 SHORT $LN62@MountAllDe
$LN486@MountAllDe:
  00740	8b 74 24 20	 mov	 esi, DWORD PTR tv1817[esp+8996]
$LN59@MountAllDe:

; 3756 : 
; 3757 : 			foreach (const HostDevice &device, partitions)

  00744	80 bc 24 95 00
	00 00 00	 cmp	 BYTE PTR _$S2$137614[esp+9001], 0
  0074c	c6 84 24 94 00
	00 00 01	 mov	 BYTE PTR _$S2$137614[esp+9000], 1
  00754	0f 94 c0	 sete	 al
  00757	88 84 24 95 00
	00 00		 mov	 BYTE PTR _$S2$137614[esp+9001], al
  0075e	84 c0		 test	 al, al
  00760	0f 85 9a fc ff
	ff		 jne	 $LL220@MountAllDe
$LN62@MountAllDe:
  00766	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR _$S2$137614[esp+8996]
  0076d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00770	8d 8c 24 90 00
	00 00		 lea	 ecx, DWORD PTR _$S2$137614[esp+8996]
  00777	ff d0		 call	 eax
  00779	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR _$S2$137614[esp+8996]
  00780	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00783	8d 8c 24 90 00
	00 00		 lea	 ecx, DWORD PTR _$S2$137614[esp+8996]
  0078a	ff d0		 call	 eax
  0078c	84 c0		 test	 al, al
  0078e	0f 85 fd fb ff
	ff		 jne	 $LN63@MountAllDe
$LN61@MountAllDe:

; 3828 : 							break;
; 3829 : 					}
; 3830 : 				}
; 3831 : 			}

  00794	8d 8c 24 98 00
	00 00		 lea	 ecx, DWORD PTR _$S2$137614[esp+9004]
  0079b	89 4c 24 20	 mov	 DWORD PTR $T207228[esp+8996], ecx
  0079f	8b b4 24 a4 00
	00 00		 mov	 esi, DWORD PTR _$S2$137614[esp+9016]
  007a6	c6 84 24 20 23
	00 00 09	 mov	 BYTE PTR __$EHRec$[esp+9004], 9
  007ae	85 f6		 test	 esi, esi
  007b0	74 35		 je	 SHORT $LN290@MountAllDe
  007b2	8b bc 24 a8 00
	00 00		 mov	 edi, DWORD PTR _$S2$137614[esp+9020]
  007b9	3b f7		 cmp	 esi, edi
  007bb	74 1b		 je	 SHORT $LN278@MountAllDe
  007bd	8d 49 00	 npad	 3
$LL280@MountAllDe:
  007c0	8b ce		 mov	 ecx, esi
  007c2	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  007c7	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  007cd	3b f7		 cmp	 esi, edi
  007cf	75 ef		 jne	 SHORT $LL280@MountAllDe
  007d1	8b b4 24 a4 00
	00 00		 mov	 esi, DWORD PTR _$S2$137614[esp+9016]
$LN278@MountAllDe:
  007d8	56		 push	 esi
  007d9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  007de	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  007e4	83 c4 04	 add	 esp, 4
$LN290@MountAllDe:
  007e7	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR _$S2$137614[esp+9004]
  007ee	33 c0		 xor	 eax, eax
  007f0	52		 push	 edx
  007f1	89 84 24 a8 00
	00 00		 mov	 DWORD PTR _$S2$137614[esp+9020], eax
  007f8	89 84 24 ac 00
	00 00		 mov	 DWORD PTR _$S2$137614[esp+9024], eax
  007ff	89 84 24 b0 00
	00 00		 mov	 DWORD PTR _$S2$137614[esp+9028], eax
  00806	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0080b	83 c4 04	 add	 esp, 4
  0080e	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _$S2$137614[esp+8996], OFFSET ??_7Container@ForEach@CipherShed@@6B@

; 3832 : 		}

  00819	8b 74 24 54	 mov	 esi, DWORD PTR _partitions$137560[esp+9008]
  0081d	c6 84 24 20 23
	00 00 0a	 mov	 BYTE PTR __$EHRec$[esp+9004], 10 ; 0000000aH
  00825	85 f6		 test	 esi, esi
  00827	74 2c		 je	 SHORT $LN326@MountAllDe
  00829	8b 7c 24 58	 mov	 edi, DWORD PTR _partitions$137560[esp+9012]
  0082d	3b f7		 cmp	 esi, edi
  0082f	74 15		 je	 SHORT $LN314@MountAllDe
$LL316@MountAllDe:
  00831	8b ce		 mov	 ecx, esi
  00833	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00838	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0083e	3b f7		 cmp	 esi, edi
  00840	75 ef		 jne	 SHORT $LL316@MountAllDe
  00842	8b 74 24 54	 mov	 esi, DWORD PTR _partitions$137560[esp+9008]
$LN314@MountAllDe:
  00846	56		 push	 esi
  00847	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0084c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  00852	83 c4 04	 add	 esp, 4
$LN326@MountAllDe:
  00855	33 c0		 xor	 eax, eax
  00857	89 44 24 54	 mov	 DWORD PTR _partitions$137560[esp+9008], eax
  0085b	89 44 24 58	 mov	 DWORD PTR _partitions$137560[esp+9012], eax
  0085f	89 44 24 5c	 mov	 DWORD PTR _partitions$137560[esp+9016], eax
  00863	8b 44 24 48	 mov	 eax, DWORD PTR _partitions$137560[esp+8996]
  00867	50		 push	 eax
  00868	c6 84 24 24 23
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+9008], 3
  00870	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00875	83 c4 04	 add	 esp, 4
  00878	80 7c 24 65 00	 cmp	 BYTE PTR _$S1$137523[esp+9001], 0
  0087d	c6 44 24 64 01	 mov	 BYTE PTR _$S1$137523[esp+9000], 1
  00882	0f 94 c0	 sete	 al
  00885	88 44 24 65	 mov	 BYTE PTR _$S1$137523[esp+9001], al
  00889	84 c0		 test	 al, al
  0088b	0f 85 7f fa ff
	ff		 jne	 $LL173@MountAllDe

; 3752 : 		foreach (const HostDevice &drive, devices)

  00891	33 f6		 xor	 esi, esi
$LN68@MountAllDe:
  00893	8b 54 24 60	 mov	 edx, DWORD PTR _$S1$137523[esp+8996]
  00897	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0089a	8d 4c 24 60	 lea	 ecx, DWORD PTR _$S1$137523[esp+8996]
  0089e	ff d0		 call	 eax
  008a0	8b 54 24 60	 mov	 edx, DWORD PTR _$S1$137523[esp+8996]
  008a4	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  008a7	8d 4c 24 60	 lea	 ecx, DWORD PTR _$S1$137523[esp+8996]
  008ab	ff d0		 call	 eax
  008ad	84 c0		 test	 al, al
  008af	0f 85 ef f9 ff
	ff		 jne	 $LL69@MountAllDe
$LN67@MountAllDe:

; 3832 : 		}

  008b5	8d 4c 24 68	 lea	 ecx, DWORD PTR _$S1$137523[esp+9004]
  008b9	89 4c 24 3c	 mov	 DWORD PTR $T207620[esp+8996], ecx
  008bd	8b 44 24 74	 mov	 eax, DWORD PTR _$S1$137523[esp+9016]
  008c1	c6 84 24 20 23
	00 00 0c	 mov	 BYTE PTR __$EHRec$[esp+9004], 12 ; 0000000cH
  008c9	3b c6		 cmp	 eax, esi
  008cb	74 35		 je	 SHORT $LN364@MountAllDe
  008cd	8b 4c 24 78	 mov	 ecx, DWORD PTR _$S1$137523[esp+9020]
  008d1	89 4c 24 20	 mov	 DWORD PTR $T207489[esp+8996], ecx
  008d5	8b f0		 mov	 esi, eax
  008d7	3b c1		 cmp	 eax, ecx
  008d9	74 1c		 je	 SHORT $LN352@MountAllDe
  008db	eb 03 8d 49 00	 npad	 5
$LL354@MountAllDe:
  008e0	8b ce		 mov	 ecx, esi
  008e2	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  008e7	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  008ed	3b 74 24 20	 cmp	 esi, DWORD PTR $T207489[esp+8996]
  008f1	75 ed		 jne	 SHORT $LL354@MountAllDe
  008f3	8b 44 24 74	 mov	 eax, DWORD PTR _$S1$137523[esp+9016]
$LN352@MountAllDe:
  008f7	50		 push	 eax
  008f8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  008fd	83 c4 04	 add	 esp, 4
  00900	33 f6		 xor	 esi, esi
$LN364@MountAllDe:
  00902	8b 54 24 68	 mov	 edx, DWORD PTR _$S1$137523[esp+9004]
  00906	52		 push	 edx
  00907	89 74 24 78	 mov	 DWORD PTR _$S1$137523[esp+9020], esi
  0090b	89 74 24 7c	 mov	 DWORD PTR _$S1$137523[esp+9024], esi
  0090f	89 b4 24 80 00
	00 00		 mov	 DWORD PTR _$S1$137523[esp+9028], esi
  00916	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0091b	83 c4 04	 add	 esp, 4

; 3833 : 
; 3834 : 		if (mountedVolCount < 1)

  0091e	83 7c 24 18 01	 cmp	 DWORD PTR _mountedVolCount$[esp+8996], 1
  00923	c6 84 24 20 23
	00 00 00	 mov	 BYTE PTR __$EHRec$[esp+9004], 0
  0092b	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR _$S1$137523[esp+8996], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00933	0f 8d 06 01 00
	00		 jge	 $LN41@MountAllDe

; 3835 : 		{
; 3836 : 			// Failed to mount any volume
; 3837 : 
; 3838 : 			IncreaseWrongPwdRetryCount (1);

  00939	6a 01		 push	 1
  0093b	e8 00 00 00 00	 call	 _IncreaseWrongPwdRetryCount
  00940	83 c4 04	 add	 esp, 4

; 3839 : 
; 3840 : 			if (WrongPwdRetryCountOverLimit ()
; 3841 : 				&& !mountOptions.UseBackupHeader
; 3842 : 				&& !bHeaderBakRetry)

  00943	e8 00 00 00 00	 call	 _WrongPwdRetryCountOverLimit
  00948	85 c0		 test	 eax, eax
  0094a	74 1a		 je	 SHORT $LN40@MountAllDe
  0094c	39 35 5c 00 00
	00		 cmp	 DWORD PTR ?mountOptions@@3UMountOptions@@A+92, esi
  00952	75 12		 jne	 SHORT $LN40@MountAllDe
  00954	39 74 24 10	 cmp	 DWORD PTR _bHeaderBakRetry$[esp+8996], esi
  00958	75 14		 jne	 SHORT $LN441@MountAllDe

; 3843 : 			{
; 3844 : 				// Retry using embedded header backup (if any)
; 3845 : 				mountOptions.UseBackupHeader = TRUE;

  0095a	b8 01 00 00 00	 mov	 eax, 1
  0095f	a3 5c 00 00 00	 mov	 DWORD PTR ?mountOptions@@3UMountOptions@@A+92, eax

; 3846 : 				bHeaderBakRetry = TRUE;

  00964	eb 14		 jmp	 SHORT $LN499@MountAllDe
$LN40@MountAllDe:

; 3847 : 			}
; 3848 : 			else if (bHeaderBakRetry)

  00966	8b 44 24 10	 mov	 eax, DWORD PTR _bHeaderBakRetry$[esp+8996]
  0096a	3b c6		 cmp	 eax, esi
  0096c	74 10		 je	 SHORT $LN38@MountAllDe
$LN441@MountAllDe:

; 3849 : 			{
; 3850 : 				mountOptions.UseBackupHeader = defaultMountOptions.UseBackupHeader;

  0096e	a1 5c 00 00 00	 mov	 eax, DWORD PTR ?defaultMountOptions@@3UMountOptions@@A+92
  00973	a3 5c 00 00 00	 mov	 DWORD PTR ?mountOptions@@3UMountOptions@@A+92, eax

; 3851 : 				bHeaderBakRetry = FALSE;

  00978	33 c0		 xor	 eax, eax
$LN499@MountAllDe:
  0097a	89 44 24 10	 mov	 DWORD PTR _bHeaderBakRetry$[esp+8996], eax
$LN38@MountAllDe:

; 3852 : 			}
; 3853 : 
; 3854 : 			if (!Silent && !bHeaderBakRetry)

  0097e	39 35 00 00 00
	00		 cmp	 DWORD PTR _Silent, esi
  00984	0f 85 e0 00 00
	00		 jne	 $LN33@MountAllDe
  0098a	3b c6		 cmp	 eax, esi
  0098c	0f 85 1e 01 00
	00		 jne	 $LN24@MountAllDe

; 3855 : 			{
; 3856 : 				WCHAR szTmp[4096];
; 3857 : 
; 3858 : 				swprintf (szTmp, GetString (KeyFilesEnable || FirstCmdKeyFile ? "PASSWORD_OR_KEYFILE_WRONG_AUTOMOUNT" : "PASSWORD_WRONG_AUTOMOUNT"));

  00992	39 35 00 00 00
	00		 cmp	 DWORD PTR _KeyFilesEnable, esi
  00998	75 0d		 jne	 SHORT $LN92@MountAllDe
  0099a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BJ@FBHENHB@PASSWORD_WRONG_AUTOMOUNT?$AA@
  0099f	39 35 00 00 00
	00		 cmp	 DWORD PTR ?FirstCmdKeyFile@@3PAUKeyFileStruct@@A, esi ; FirstCmdKeyFile
  009a5	74 05		 je	 SHORT $LN93@MountAllDe
$LN92@MountAllDe:
  009a7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CE@FPDIILIE@PASSWORD_OR_KEYFILE_WRONG_AUTOMO@
$LN93@MountAllDe:
  009ac	50		 push	 eax
  009ad	e8 00 00 00 00	 call	 _GetString
  009b2	50		 push	 eax
  009b3	8d 8c 24 14 03
	00 00		 lea	 ecx, DWORD PTR _szTmp$137661[esp+9004]
  009ba	51		 push	 ecx
  009bb	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf

; 3859 : 				if (CheckCapsLock (hwndDlg, TRUE))

  009c0	8b 54 24 20	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[esp+9008]
  009c4	6a 01		 push	 1
  009c6	52		 push	 edx
  009c7	e8 00 00 00 00	 call	 _CheckCapsLock
  009cc	83 c4 14	 add	 esp, 20			; 00000014H
  009cf	85 c0		 test	 eax, eax
  009d1	74 4f		 je	 SHORT $LN36@MountAllDe

; 3860 : 					wcscat (szTmp, GetString ("PASSWORD_WRONG_CAPSLOCK_ON"));

  009d3	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JMLKAJFL@PASSWORD_WRONG_CAPSLOCK_ON?$AA@
  009d8	e8 00 00 00 00	 call	 _GetString
  009dd	83 c4 04	 add	 esp, 4
  009e0	8b d0		 mov	 edx, eax
$LL473@MountAllDe:
  009e2	66 8b 08	 mov	 cx, WORD PTR [eax]
  009e5	83 c0 02	 add	 eax, 2
  009e8	66 3b ce	 cmp	 cx, si
  009eb	75 f5		 jne	 SHORT $LL473@MountAllDe
  009ed	8d 8c 24 0c 03
	00 00		 lea	 ecx, DWORD PTR _szTmp$137661[esp+8996]
  009f4	2b c2		 sub	 eax, edx
  009f6	8b f2		 mov	 esi, edx
  009f8	83 c1 fe	 add	 ecx, -2			; fffffffeH
  009fb	eb 03 8d 49 00	 npad	 5
$LL474@MountAllDe:
  00a00	66 8b 51 02	 mov	 dx, WORD PTR [ecx+2]
  00a04	83 c1 02	 add	 ecx, 2
  00a07	66 85 d2	 test	 dx, dx
  00a0a	75 f4		 jne	 SHORT $LL474@MountAllDe
  00a0c	8b f9		 mov	 edi, ecx
  00a0e	8b c8		 mov	 ecx, eax
  00a10	c1 e9 02	 shr	 ecx, 2
  00a13	f3 a5		 rep movsd
  00a15	8b c8		 mov	 ecx, eax
  00a17	83 e1 03	 and	 ecx, 3
  00a1a	f3 a4		 rep movsb
  00a1c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
$LN36@MountAllDe:

; 3861 : 
; 3862 : 				MessageBoxW (hwndDlg, szTmp, lpszTitle, MB_ICONWARNING);

  00a22	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  00a27	8b 54 24 14	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[esp+8996]
  00a2b	6a 30		 push	 48			; 00000030H
  00a2d	50		 push	 eax
  00a2e	8d 8c 24 14 03
	00 00		 lea	 ecx, DWORD PTR _szTmp$137661[esp+9004]
  00a35	51		 push	 ecx
  00a36	52		 push	 edx
  00a37	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 3863 : 			}
; 3864 : 		}

  00a3d	eb 2f		 jmp	 SHORT $LN440@MountAllDe
$LN41@MountAllDe:

; 3865 : 		else if (bHeaderBakRetry)

  00a3f	39 74 24 10	 cmp	 DWORD PTR _bHeaderBakRetry$[esp+8996], esi
  00a43	74 29		 je	 SHORT $LN440@MountAllDe

; 3866 : 		{
; 3867 : 			// We have successfully mounted a volume using the header backup embedded in the volume (the header is damaged)
; 3868 : 			mountOptions.UseBackupHeader = defaultMountOptions.UseBackupHeader;

  00a45	a1 5c 00 00 00	 mov	 eax, DWORD PTR ?defaultMountOptions@@3UMountOptions@@A+92
  00a4a	a3 5c 00 00 00	 mov	 DWORD PTR ?mountOptions@@3UMountOptions@@A+92, eax

; 3869 : 			bHeaderBakRetry = FALSE;

  00a4f	89 74 24 10	 mov	 DWORD PTR _bHeaderBakRetry$[esp+8996], esi

; 3870 : 
; 3871 : 			if (!Silent)

  00a53	39 35 00 00 00
	00		 cmp	 DWORD PTR _Silent, esi
  00a59	75 13		 jne	 SHORT $LN440@MountAllDe

; 3872 : 				Warning ("HEADER_DAMAGED_AUTO_USED_HEADER_BAK");

  00a5b	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NGBHCJPO@HEADER_DAMAGED_AUTO_USED_HEADER_@
  00a60	e8 00 00 00 00	 call	 _Warning
  00a65	83 c4 04	 add	 esp, 4

; 3873 : 		}
; 3874 : 
; 3875 : 		if (!bHeaderBakRetry)

  00a68	eb 04		 jmp	 SHORT $LN440@MountAllDe
$LN33@MountAllDe:
  00a6a	3b c6		 cmp	 eax, esi
  00a6c	75 42		 jne	 SHORT $LN24@MountAllDe
$LN440@MountAllDe:

; 3876 : 		{
; 3877 : 			burn (&VolumePassword, sizeof (VolumePassword));

  00a6e	ba 00 00 00 00	 mov	 edx, OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  00a73	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00a78	8b f1		 mov	 esi, ecx
  00a7a	8b c2		 mov	 eax, edx
$LN377@MountAllDe:
  00a7c	c6 00 00	 mov	 BYTE PTR [eax], 0
  00a7f	40		 inc	 eax
  00a80	83 ee 01	 sub	 esi, 1
  00a83	75 f7		 jne	 SHORT $LN377@MountAllDe
$LL28@MountAllDe:
  00a85	49		 dec	 ecx
  00a86	c6 02 00	 mov	 BYTE PTR [edx], 0
  00a89	42		 inc	 edx
  00a8a	85 c9		 test	 ecx, ecx
  00a8c	75 f7		 jne	 SHORT $LL28@MountAllDe

; 3878 : 			burn (&mountOptions.ProtectedHidVolPassword, sizeof (mountOptions.ProtectedHidVolPassword));

  00a8e	ba 14 00 00 00	 mov	 edx, OFFSET ?mountOptions@@3UMountOptions@@A+20
  00a93	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00a98	8b f1		 mov	 esi, ecx
  00a9a	8b c2		 mov	 eax, edx
$LN381@MountAllDe:
  00a9c	c6 00 00	 mov	 BYTE PTR [eax], 0
  00a9f	40		 inc	 eax
  00aa0	83 ee 01	 sub	 esi, 1
  00aa3	75 f7		 jne	 SHORT $LN381@MountAllDe
$LL23@MountAllDe:
  00aa5	49		 dec	 ecx
  00aa6	c6 02 00	 mov	 BYTE PTR [edx], 0
  00aa9	42		 inc	 edx
  00aaa	85 c9		 test	 ecx, ecx
  00aac	75 f7		 jne	 SHORT $LL23@MountAllDe
  00aae	33 f6		 xor	 esi, esi
$LN24@MountAllDe:

; 3879 : 		}
; 3880 : 
; 3881 : 	} while (bPasswordPrompt && mountedVolCount < 1);

  00ab0	39 75 0c	 cmp	 DWORD PTR _bPasswordPrompt$[ebp], esi
  00ab3	74 0b		 je	 SHORT $LN21@MountAllDe
  00ab5	83 7c 24 18 01	 cmp	 DWORD PTR _mountedVolCount$[esp+8996], 1
  00aba	0f 8c 20 f6 ff
	ff		 jl	 $LL82@MountAllDe
$LN21@MountAllDe:

; 3882 : 
; 3883 : 	/* One or more volumes successfully mounted */
; 3884 : 
; 3885 : 	ResetWrongPwdRetryCount ();

  00ac0	e8 00 00 00 00	 call	 _ResetWrongPwdRetryCount

; 3886 : 
; 3887 : 	if (shared)

  00ac5	39 74 24 38	 cmp	 DWORD PTR _shared$[esp+8996], esi
  00ac9	74 0d		 je	 SHORT $LN20@MountAllDe

; 3888 : 		Warning ("DEVICE_IN_USE_INFO");

  00acb	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LFBCNKIH@DEVICE_IN_USE_INFO?$AA@
  00ad0	e8 00 00 00 00	 call	 _Warning
  00ad5	83 c4 04	 add	 esp, 4
$LN20@MountAllDe:

; 3889 : 
; 3890 : 	if (mountOptions.ProtectHiddenVolume)
; 3891 : 	{
; 3892 : 		if (mountedVolCount > 1) 

  00ad8	8b 7c 24 18	 mov	 edi, DWORD PTR _mountedVolCount$[esp+8996]
  00adc	39 35 08 00 00
	00		 cmp	 DWORD PTR ?mountOptions@@3UMountOptions@@A+8, esi
  00ae2	74 65		 je	 SHORT $LN16@MountAllDe
  00ae4	83 ff 01	 cmp	 edi, 1
  00ae7	7e 51		 jle	 SHORT $LN500@MountAllDe

; 3893 : 			Info ("HIDVOL_PROT_WARN_AFTER_MOUNT_PLURAL");

  00ae9	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@CDKDLFOB@HIDVOL_PROT_WARN_AFTER_MOUNT_PLU@
  00aee	eb 51		 jmp	 SHORT $LN501@MountAllDe
$LN414@MountAllDe:

; 3915 : 
; 3916 : ret:

  00af0	8d 8c 24 98 00
	00 00		 lea	 ecx, DWORD PTR _$S2$137614[esp+9004]
  00af7	c6 84 24 20 23
	00 00 06	 mov	 BYTE PTR __$EHRec$[esp+9004], 6
  00aff	e8 00 00 00 00	 call	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
  00b04	be 00 00 00 00	 mov	 esi, OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00b09	8d 4c 24 48	 lea	 ecx, DWORD PTR _partitions$137560[esp+8996]
  00b0d	89 b4 24 90 00
	00 00		 mov	 DWORD PTR _$S2$137614[esp+8996], esi
  00b14	c6 84 24 20 23
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+9004], 3
  00b1c	e8 00 00 00 00	 call	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
  00b21	8d 4c 24 68	 lea	 ecx, DWORD PTR _$S1$137523[esp+9004]
  00b25	c6 84 24 20 23
	00 00 07	 mov	 BYTE PTR __$EHRec$[esp+9004], 7
  00b2d	e8 00 00 00 00	 call	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
  00b32	89 74 24 60	 mov	 DWORD PTR _$S1$137523[esp+8996], esi
  00b36	33 f6		 xor	 esi, esi
  00b38	eb 7b		 jmp	 SHORT $ret$137378
$LN500@MountAllDe:

; 3894 : 		else if (mountedVolCount == 1)

  00b3a	75 0d		 jne	 SHORT $LN16@MountAllDe

; 3895 : 			Info ("HIDVOL_PROT_WARN_AFTER_MOUNT");

  00b3c	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OHAMCJFH@HIDVOL_PROT_WARN_AFTER_MOUNT?$AA@
$LN501@MountAllDe:
  00b41	e8 00 00 00 00	 call	 _Info
  00b46	83 c4 04	 add	 esp, 4
$LN16@MountAllDe:

; 3896 : 	}
; 3897 : 
; 3898 : 	// Check for deprecated CBC mode
; 3899 : 	if (bCBCMode)

  00b49	39 74 24 30	 cmp	 DWORD PTR _bCBCMode$[esp+8996], esi
  00b4d	74 0d		 je	 SHORT $LN15@MountAllDe

; 3900 : 		Warning("WARN_CBC_MODE");

  00b4f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@INONOBKP@WARN_CBC_MODE?$AA@
  00b54	e8 00 00 00 00	 call	 _Warning
  00b59	83 c4 04	 add	 esp, 4
$LN15@MountAllDe:

; 3901 : 
; 3902 : 	// Check for deprecated 64-bit-block ciphers
; 3903 : 	if (b64BitBlockCipher)

  00b5c	39 74 24 44	 cmp	 DWORD PTR _b64BitBlockCipher$[esp+8996], esi
  00b60	74 0d		 je	 SHORT $LN14@MountAllDe

; 3904 : 		Warning("WARN_64_BIT_BLOCK_CIPHER");

  00b62	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@IFBNLIAJ@WARN_64_BIT_BLOCK_CIPHER?$AA@
  00b67	e8 00 00 00 00	 call	 _Warning
  00b6c	83 c4 04	 add	 esp, 4
$LN14@MountAllDe:

; 3905 : 
; 3906 : 	// Check for legacy non-ASCII passwords
; 3907 : 	if (!KeyFilesEnable
; 3908 : 		&& !FirstCmdKeyFile
; 3909 : 		&& mountedVolCount > 0
; 3910 : 		&& !CheckPasswordCharEncoding (NULL, &VolumePassword))

  00b6f	39 35 00 00 00
	00		 cmp	 DWORD PTR _KeyFilesEnable, esi
  00b75	75 2b		 jne	 SHORT $LN13@MountAllDe
  00b77	39 35 00 00 00
	00		 cmp	 DWORD PTR ?FirstCmdKeyFile@@3PAUKeyFileStruct@@A, esi ; FirstCmdKeyFile
  00b7d	75 23		 jne	 SHORT $LN13@MountAllDe
  00b7f	3b fe		 cmp	 edi, esi
  00b81	7e 1f		 jle	 SHORT $LN13@MountAllDe
  00b83	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  00b88	56		 push	 esi
  00b89	e8 00 00 00 00	 call	 _CheckPasswordCharEncoding
  00b8e	83 c4 08	 add	 esp, 8
  00b91	85 c0		 test	 eax, eax
  00b93	75 0d		 jne	 SHORT $LN13@MountAllDe

; 3911 : 			Warning ("UNSUPPORTED_CHARS_IN_PWD_RECOM");

  00b95	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MPHFEMNC@UNSUPPORTED_CHARS_IN_PWD_RECOM?$AA@
  00b9a	e8 00 00 00 00	 call	 _Warning
  00b9f	83 c4 04	 add	 esp, 4
$LN13@MountAllDe:

; 3912 : 
; 3913 : 	if (status && CloseSecurityTokenSessionsAfterMount)

  00ba2	39 74 24 28	 cmp	 DWORD PTR _status$[esp+8996], esi
  00ba6	74 0d		 je	 SHORT $ret$137378
  00ba8	39 35 00 00 00
	00		 cmp	 DWORD PTR ?CloseSecurityTokenSessionsAfterMount@@3HA, esi ; CloseSecurityTokenSessionsAfterMount
  00bae	74 05		 je	 SHORT $ret$137378

; 3914 : 		SecurityToken::CloseAllSessions();

  00bb0	e8 00 00 00 00	 call	 ?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ ; CipherShed::SecurityToken::CloseAllSessions
$ret$137378:

; 3917 : 	MultipleMountOperationInProgress = FALSE;
; 3918 : 
; 3919 : 	burn (&VolumePassword, sizeof (VolumePassword));

  00bb5	ba 00 00 00 00	 mov	 edx, OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  00bba	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00bbf	89 35 00 00 00
	00		 mov	 DWORD PTR _MultipleMountOperationInProgress, esi
  00bc5	8b f9		 mov	 edi, ecx
  00bc7	8b c2		 mov	 eax, edx
  00bc9	8d a4 24 00 00
	00 00		 npad	 7
$LL385@MountAllDe:
  00bd0	c6 00 00	 mov	 BYTE PTR [eax], 0
  00bd3	40		 inc	 eax
  00bd4	83 ef 01	 sub	 edi, 1
  00bd7	75 f7		 jne	 SHORT $LL385@MountAllDe
  00bd9	8d a4 24 00 00
	00 00		 npad	 7
$LL8@MountAllDe:
  00be0	49		 dec	 ecx
  00be1	c6 02 00	 mov	 BYTE PTR [edx], 0
  00be4	42		 inc	 edx
  00be5	3b ce		 cmp	 ecx, esi
  00be7	75 f7		 jne	 SHORT $LL8@MountAllDe

; 3920 : 	burn (&mountOptions.ProtectedHidVolPassword, sizeof (mountOptions.ProtectedHidVolPassword));

  00be9	ba 14 00 00 00	 mov	 edx, OFFSET ?mountOptions@@3UMountOptions@@A+20
  00bee	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00bf3	8b f9		 mov	 edi, ecx
  00bf5	8b c2		 mov	 eax, edx
$LL389@MountAllDe:
  00bf7	c6 00 00	 mov	 BYTE PTR [eax], 0
  00bfa	40		 inc	 eax
  00bfb	83 ef 01	 sub	 edi, 1
  00bfe	75 f7		 jne	 SHORT $LL389@MountAllDe
$LL3@MountAllDe:
  00c00	49		 dec	 ecx
  00c01	c6 02 00	 mov	 BYTE PTR [edx], 0
  00c04	42		 inc	 edx
  00c05	3b ce		 cmp	 ecx, esi
  00c07	75 f7		 jne	 SHORT $LL3@MountAllDe

; 3921 : 
; 3922 : 	mountOptions.UseBackupHeader = defaultMountOptions.UseBackupHeader;

  00c09	8b 0d 5c 00 00
	00		 mov	 ecx, DWORD PTR ?defaultMountOptions@@3UMountOptions@@A+92
  00c0f	89 0d 5c 00 00
	00		 mov	 DWORD PTR ?mountOptions@@3UMountOptions@@A+92, ecx

; 3923 : 
; 3924 : 	RestoreDefaultKeyFilesParam ();

  00c15	e8 00 00 00 00	 call	 _RestoreDefaultKeyFilesParam

; 3925 : 
; 3926 : 	if (UsePreferences)

  00c1a	39 35 00 00 00
	00		 cmp	 DWORD PTR ?UsePreferences@@3HA, esi ; UsePreferences
  00c20	74 0c		 je	 SHORT $LN1@MountAllDe

; 3927 : 		bCacheInDriver = bCacheInDriverDefault;

  00c22	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bCacheInDriverDefault@@3HA ; bCacheInDriverDefault
  00c28	89 15 00 00 00
	00		 mov	 DWORD PTR ?bCacheInDriver@@3HA, edx ; bCacheInDriver
$LN1@MountAllDe:

; 3928 : 
; 3929 : 	EnableDisableButtons (hwndDlg);

  00c2e	8b 44 24 14	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[esp+8996]
  00c32	50		 push	 eax
  00c33	e8 00 00 00 00	 call	 _EnableDisableButtons
  00c38	83 c4 04	 add	 esp, 4

; 3930 : 
; 3931 : 	NormalCursor();

  00c3b	e8 00 00 00 00	 call	 _NormalCursor

; 3932 : 
; 3933 : 	return status;

  00c40	8d 8c 24 e0 00
	00 00		 lea	 ecx, DWORD PTR _devices$[esp+8996]
  00c47	c7 84 24 20 23
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+9004], -1
  00c52	e8 00 00 00 00	 call	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
  00c57	8b 44 24 28	 mov	 eax, DWORD PTR _status$[esp+8996]

; 3934 : }

  00c5b	8b 8c 24 18 23
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+8996]
  00c62	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00c69	59		 pop	 ecx
  00c6a	5f		 pop	 edi
  00c6b	5e		 pop	 esi
  00c6c	5b		 pop	 ebx
  00c6d	8b 8c 24 00 23
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+8980]
  00c74	33 cc		 xor	 ecx, esp
  00c76	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00c7b	8b e5		 mov	 esp, ebp
  00c7d	5d		 pop	 ebp
  00c7e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$2:
  00000	8d 8d bc dd ff
	ff		 lea	 ecx, DWORD PTR _devices$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$3:
  0000b	8d 8d a4 dd ff
	ff		 lea	 ecx, DWORD PTR $T206563[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$7:
  00016	8d 8d a4 dd ff
	ff		 lea	 ecx, DWORD PTR $T206563[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$4:
  00021	8d 8d 3c dd ff
	ff		 lea	 ecx, DWORD PTR _$S1$137523[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$5:
  0002c	8d 8d 24 dd ff
	ff		 lea	 ecx, DWORD PTR _partitions$137560[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$6:
  00037	8d 8d 6c dd ff
	ff		 lea	 ecx, DWORD PTR _$S2$137614[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$12:
  00042	8d 8d 6c dd ff
	ff		 lea	 ecx, DWORD PTR _$S2$137614[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$14:
  0004d	8b 8d fc dc ff
	ff		 mov	 ecx, DWORD PTR $T207228[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$15:
  00058	8d 8d 24 dd ff
	ff		 lea	 ecx, DWORD PTR _partitions$137560[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$16:
  00063	8d 8d 3c dd ff
	ff		 lea	 ecx, DWORD PTR _$S1$137523[ebp]
  00069	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$18:
  0006e	8b 8d 18 dd ff
	ff		 mov	 ecx, DWORD PTR $T207620[ebp]
  00074	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$8:
  00079	8d 8d 6c dd ff
	ff		 lea	 ecx, DWORD PTR _$S2$137614[ebp]
  0007f	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__unwindfunclet$?MountAllDevices@@YAHPAUHWND__@@H@Z$10:
  00084	8d 8d 3c dd ff
	ff		 lea	 ecx, DWORD PTR _$S1$137523[ebp]
  0008a	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$?MountAllDevices@@YAHPAUHWND__@@H@Z:
  0008f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00093	8d 82 ec dc ff
	ff		 lea	 eax, DWORD PTR [edx-8980]
  00099	8b 8a e8 dc ff
	ff		 mov	 ecx, DWORD PTR [edx-8984]
  0009f	33 c8		 xor	 ecx, eax
  000a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a6	83 c0 0c	 add	 eax, 12			; 0000000cH
  000a9	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  000ac	33 c8		 xor	 ecx, eax
  000ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b3	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?MountAllDevices@@YAHPAUHWND__@@H@Z
  000b8	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?MountAllDevices@@YAHPAUHWND__@@H@Z ENDP		; MountAllDevices
PUBLIC	??_C@_0BK@JIMANJGK@ALL_TOKEN_SESSIONS_CLOSED?$AA@ ; `string'
PUBLIC	??_C@_0BI@BNFOBMMN@SUCCESSFULLY_DISMOUNTED?$AA@	; `string'
PUBLIC	??_C@_0BL@FOMIGOIN@MOUNTED_VOLUMES_DISMOUNTED?$AA@ ; `string'
PUBLIC	??_C@_0BP@HODIPNNI@VOLUMES_DISMOUNTED_CACHE_WIPED?$AA@ ; `string'
;	COMDAT ??_C@_0BK@JIMANJGK@ALL_TOKEN_SESSIONS_CLOSED?$AA@
CONST	SEGMENT
??_C@_0BK@JIMANJGK@ALL_TOKEN_SESSIONS_CLOSED?$AA@ DB 'ALL_TOKEN_SESSIONS_'
	DB	'CLOSED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BNFOBMMN@SUCCESSFULLY_DISMOUNTED?$AA@
CONST	SEGMENT
??_C@_0BI@BNFOBMMN@SUCCESSFULLY_DISMOUNTED?$AA@ DB 'SUCCESSFULLY_DISMOUNT'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FOMIGOIN@MOUNTED_VOLUMES_DISMOUNTED?$AA@
CONST	SEGMENT
??_C@_0BL@FOMIGOIN@MOUNTED_VOLUMES_DISMOUNTED?$AA@ DB 'MOUNTED_VOLUMES_DI'
	DB	'SMOUNTED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HODIPNNI@VOLUMES_DISMOUNTED_CACHE_WIPED?$AA@
CONST	SEGMENT
??_C@_0BP@HODIPNNI@VOLUMES_DISMOUNTED_CACHE_WIPED?$AA@ DB 'VOLUMES_DISMOU'
	DB	'NTED_CACHE_WIPED', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _HandleHotKey
_TEXT	SEGMENT
_dwResult$ = -124					; size = 4
$T207810 = -120						; size = 120
_HandleHotKey PROC					; COMDAT
; _hwndDlg$ = eax
; _wParam$ = ebx

; 7373 : {

  00000	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00003	57		 push	 edi
  00004	8b f8		 mov	 edi, eax

; 7374 : 	DWORD dwResult;
; 7375 : 	BOOL success = TRUE;
; 7376 : 
; 7377 : 	switch (wParam)

  00006	83 fb 08	 cmp	 ebx, 8
  00009	0f 87 c4 01 00
	00		 ja	 $LN19@HandleHotK
  0000f	56		 push	 esi
  00010	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR $LN27@HandleHotK[ebx*4]
$LN18@HandleHotK:

; 7378 : 	{
; 7379 : 	case HK_AUTOMOUNT_DEVICES:
; 7380 : 		MountAllDevices (hwndDlg, TRUE);

  00017	6a 01		 push	 1
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ?MountAllDevices@@YAHPAUHWND__@@H@Z ; MountAllDevices

; 7443 : 
; 7444 : 		InfoBalloon (NULL, "ALL_TOKEN_SESSIONS_CLOSED");

  0001f	83 c4 08	 add	 esp, 8
  00022	5e		 pop	 esi
  00023	5f		 pop	 edi

; 7445 : 
; 7446 : 		break;
; 7447 : 	}
; 7448 : }

  00024	83 c4 7c	 add	 esp, 124		; 0000007cH
  00027	c3		 ret	 0
$LN17@HandleHotK:

; 7381 : 		break;
; 7382 : 
; 7383 : 	case HK_DISMOUNT_ALL:
; 7384 : 	case HK_DISMOUNT_ALL_AND_WIPE:
; 7385 : 
; 7386 : 		if (wParam == HK_DISMOUNT_ALL_AND_WIPE)

  00028	83 fb 03	 cmp	 ebx, 3
  0002b	75 0c		 jne	 SHORT $LN16@HandleHotK

; 7387 : 			WipeCache (hwndDlg, TRUE);

  0002d	6a 01		 push	 1
  0002f	8b f7		 mov	 esi, edi
  00031	e8 00 00 00 00	 call	 _WipeCache
  00036	83 c4 04	 add	 esp, 4
$LN16@HandleHotK:

; 7388 : 
; 7389 : 		if (DismountAll (hwndDlg, FALSE, TRUE, UNMOUNT_MAX_AUTO_RETRIES, UNMOUNT_AUTO_RETRY_DELAY))

  00039	6a 32		 push	 50			; 00000032H
  0003b	6a 1e		 push	 30			; 0000001eH
  0003d	6a 01		 push	 1
  0003f	6a 00		 push	 0
  00041	e8 00 00 00 00	 call	 _DismountAll
  00046	83 c4 10	 add	 esp, 16			; 00000010H
  00049	85 c0		 test	 eax, eax
  0004b	0f 84 81 01 00
	00		 je	 $LN25@HandleHotK

; 7390 : 		{
; 7391 : 			if (bDisplayBalloonOnSuccessfulHkDismount)

  00051	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bDisplayBalloonOnSuccessfulHkDismount, 0
  00058	74 1d		 je	 SHORT $LN14@HandleHotK

; 7392 : 				InfoBalloon ("SUCCESSFULLY_DISMOUNTED", (wParam == HK_DISMOUNT_ALL_AND_WIPE ? "VOLUMES_DISMOUNTED_CACHE_WIPED" : "MOUNTED_VOLUMES_DISMOUNTED"));

  0005a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BP@HODIPNNI@VOLUMES_DISMOUNTED_CACHE_WIPED?$AA@
  0005f	83 fb 03	 cmp	 ebx, 3
  00062	74 05		 je	 SHORT $LN24@HandleHotK
  00064	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BL@FOMIGOIN@MOUNTED_VOLUMES_DISMOUNTED?$AA@
$LN24@HandleHotK:
  00069	50		 push	 eax
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BNFOBMMN@SUCCESSFULLY_DISMOUNTED?$AA@
  0006f	e8 00 00 00 00	 call	 _InfoBalloon
  00074	83 c4 08	 add	 esp, 8
$LN14@HandleHotK:

; 7393 : 
; 7394 : 			if (bPlaySoundOnSuccessfulHkDismount)

  00077	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bPlaySoundOnSuccessfulHkDismount, 0
  0007e	0f 84 4e 01 00
	00		 je	 $LN25@HandleHotK

; 7395 : 				MessageBeep (0xFFFFFFFF);

  00084	6a ff		 push	 -1
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBeep@4
  0008c	5e		 pop	 esi
  0008d	5f		 pop	 edi

; 7445 : 
; 7446 : 		break;
; 7447 : 	}
; 7448 : }

  0008e	83 c4 7c	 add	 esp, 124		; 0000007cH
  00091	c3		 ret	 0
$LN12@HandleHotK:

; 7396 : 		}
; 7397 : 
; 7398 : 		break;
; 7399 : 
; 7400 : 	case HK_WIPE_CACHE:
; 7401 : 		WipeCache (hwndDlg, FALSE);

  00092	6a 00		 push	 0
  00094	8b f7		 mov	 esi, edi
  00096	e8 00 00 00 00	 call	 _WipeCache
  0009b	83 c4 04	 add	 esp, 4
  0009e	5e		 pop	 esi
  0009f	5f		 pop	 edi

; 7445 : 
; 7446 : 		break;
; 7447 : 	}
; 7448 : }

  000a0	83 c4 7c	 add	 esp, 124		; 0000007cH
  000a3	c3		 ret	 0
$LN11@HandleHotK:

; 7402 : 
; 7403 : 		break;
; 7404 : 
; 7405 : 	case HK_FORCE_DISMOUNT_ALL_AND_WIPE:
; 7406 : 		success = DismountAll (hwndDlg, TRUE, FALSE, UNMOUNT_MAX_AUTO_RETRIES, UNMOUNT_AUTO_RETRY_DELAY);

  000a4	6a 32		 push	 50			; 00000032H
  000a6	6a 1e		 push	 30			; 0000001eH
  000a8	6a 00		 push	 0
  000aa	6a 01		 push	 1
  000ac	e8 00 00 00 00	 call	 _DismountAll

; 7407 : 		success &= DeviceIoControl (hDriver, TC_IOCTL_WIPE_PASSWORD_CACHE, NULL, 0, NULL, 0, &dwResult, NULL);

  000b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hDriver
  000b7	83 c4 10	 add	 esp, 16			; 00000010H
  000ba	6a 00		 push	 0
  000bc	8b f0		 mov	 esi, eax
  000be	8d 44 24 0c	 lea	 eax, DWORD PTR _dwResult$[esp+136]
  000c2	50		 push	 eax
  000c3	6a 00		 push	 0
  000c5	6a 00		 push	 0
  000c7	6a 00		 push	 0
  000c9	6a 00		 push	 0
  000cb	68 30 20 22 00	 push	 2236464			; 00222030H
  000d0	51		 push	 ecx
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  000d7	85 c6		 test	 eax, esi

; 7408 : 		if (success)

  000d9	0f 84 f3 00 00
	00		 je	 $LN25@HandleHotK

; 7409 : 		{
; 7410 : 			if (bDisplayBalloonOnSuccessfulHkDismount)

  000df	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bDisplayBalloonOnSuccessfulHkDismount, 0
  000e6	74 12		 je	 SHORT $LN9@HandleHotK

; 7411 : 				InfoBalloon ("SUCCESSFULLY_DISMOUNTED", "VOLUMES_DISMOUNTED_CACHE_WIPED");

  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@HODIPNNI@VOLUMES_DISMOUNTED_CACHE_WIPED?$AA@
  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BNFOBMMN@SUCCESSFULLY_DISMOUNTED?$AA@
  000f2	e8 00 00 00 00	 call	 _InfoBalloon
  000f7	83 c4 08	 add	 esp, 8
$LN9@HandleHotK:

; 7412 : 
; 7413 : 			if (bPlaySoundOnSuccessfulHkDismount)

  000fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bPlaySoundOnSuccessfulHkDismount, 0
  00101	0f 84 cb 00 00
	00		 je	 $LN25@HandleHotK

; 7414 : 				MessageBeep (0xFFFFFFFF);

  00107	6a ff		 push	 -1
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBeep@4
  0010f	5e		 pop	 esi
  00110	5f		 pop	 edi

; 7445 : 
; 7446 : 		break;
; 7447 : 	}
; 7448 : }

  00111	83 c4 7c	 add	 esp, 124		; 0000007cH
  00114	c3		 ret	 0
$LN7@HandleHotK:

; 7415 : 		}
; 7416 : 		break;
; 7417 : 
; 7418 : 	case HK_FORCE_DISMOUNT_ALL_AND_WIPE_AND_EXIT:
; 7419 : 		success = DismountAll (hwndDlg, TRUE, FALSE, UNMOUNT_MAX_AUTO_RETRIES, UNMOUNT_AUTO_RETRY_DELAY);

  00115	6a 32		 push	 50			; 00000032H
  00117	6a 1e		 push	 30			; 0000001eH
  00119	6a 00		 push	 0
  0011b	6a 01		 push	 1
  0011d	e8 00 00 00 00	 call	 _DismountAll
  00122	83 c4 10	 add	 esp, 16			; 00000010H

; 7420 : 		success &= DeviceIoControl (hDriver, TC_IOCTL_WIPE_PASSWORD_CACHE, NULL, 0, NULL, 0, &dwResult, NULL);

  00125	6a 00		 push	 0
  00127	8d 54 24 0c	 lea	 edx, DWORD PTR _dwResult$[esp+136]
  0012b	52		 push	 edx
  0012c	6a 00		 push	 0
  0012e	6a 00		 push	 0
  00130	6a 00		 push	 0
  00132	6a 00		 push	 0
  00134	8b f0		 mov	 esi, eax
  00136	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  0013b	68 30 20 22 00	 push	 2236464			; 00222030H
  00140	50		 push	 eax
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  00147	85 c6		 test	 eax, esi

; 7421 : 		if (success)

  00149	74 2c		 je	 SHORT $LN4@HandleHotK

; 7422 : 		{
; 7423 : 			if (bDisplayBalloonOnSuccessfulHkDismount)

  0014b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bDisplayBalloonOnSuccessfulHkDismount, 0
  00152	74 12		 je	 SHORT $LN5@HandleHotK

; 7424 : 				InfoBalloon ("SUCCESSFULLY_DISMOUNTED", "VOLUMES_DISMOUNTED_CACHE_WIPED");

  00154	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@HODIPNNI@VOLUMES_DISMOUNTED_CACHE_WIPED?$AA@
  00159	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BNFOBMMN@SUCCESSFULLY_DISMOUNTED?$AA@
  0015e	e8 00 00 00 00	 call	 _InfoBalloon
  00163	83 c4 08	 add	 esp, 8
$LN5@HandleHotK:

; 7425 : 
; 7426 : 			if (bPlaySoundOnSuccessfulHkDismount)

  00166	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bPlaySoundOnSuccessfulHkDismount, 0
  0016d	74 08		 je	 SHORT $LN4@HandleHotK

; 7427 : 				MessageBeep (0xFFFFFFFF);

  0016f	6a ff		 push	 -1
  00171	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBeep@4
$LN4@HandleHotK:

; 7428 : 		}
; 7429 : 		TaskBarIconRemove (hwndDlg);

  00177	57		 push	 edi
  00178	e8 00 00 00 00	 call	 _TaskBarIconRemove

; 7430 : 		EndMainDlg (hwndDlg);

  0017d	57		 push	 edi
  0017e	e8 00 00 00 00	 call	 _EndMainDlg

; 7443 : 
; 7444 : 		InfoBalloon (NULL, "ALL_TOKEN_SESSIONS_CLOSED");

  00183	83 c4 08	 add	 esp, 8
  00186	5e		 pop	 esi
  00187	5f		 pop	 edi

; 7445 : 
; 7446 : 		break;
; 7447 : 	}
; 7448 : }

  00188	83 c4 7c	 add	 esp, 124		; 0000007cH
  0018b	c3		 ret	 0
$LN3@HandleHotK:

; 7431 : 		break;
; 7432 : 
; 7433 : 	case HK_MOUNT_FAVORITE_VOLUMES:
; 7434 : 		MountFavoriteVolumes (FALSE, FALSE, TRUE);

  0018c	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T207810[esp+132]
  00190	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@XZ ; CipherShed::FavoriteVolume::FavoriteVolume
  00195	50		 push	 eax
  00196	6a 01		 push	 1
  00198	6a 00		 push	 0
  0019a	6a 00		 push	 0
  0019c	e8 00 00 00 00	 call	 ?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z ; MountFavoriteVolumes
  001a1	83 c4 10	 add	 esp, 16			; 00000010H
  001a4	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T207810[esp+132]
  001a8	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  001ad	5e		 pop	 esi
  001ae	5f		 pop	 edi

; 7445 : 
; 7446 : 		break;
; 7447 : 	}
; 7448 : }

  001af	83 c4 7c	 add	 esp, 124		; 0000007cH
  001b2	c3		 ret	 0
$LN2@HandleHotK:

; 7435 : 		break;
; 7436 : 
; 7437 : 	case HK_SHOW_HIDE_MAIN_WINDOW:
; 7438 : 		ChangeMainWindowVisibility ();

  001b3	e8 00 00 00 00	 call	 _ChangeMainWindowVisibility
  001b8	5e		 pop	 esi
  001b9	5f		 pop	 edi

; 7445 : 
; 7446 : 		break;
; 7447 : 	}
; 7448 : }

  001ba	83 c4 7c	 add	 esp, 124		; 0000007cH
  001bd	c3		 ret	 0
$LN1@HandleHotK:

; 7439 : 		break;
; 7440 : 
; 7441 : 	case HK_CLOSE_SECURITY_TOKEN_SESSIONS:
; 7442 : 		SecurityToken::CloseAllSessions();

  001be	e8 00 00 00 00	 call	 ?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ ; CipherShed::SecurityToken::CloseAllSessions

; 7443 : 
; 7444 : 		InfoBalloon (NULL, "ALL_TOKEN_SESSIONS_CLOSED");

  001c3	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@JIMANJGK@ALL_TOKEN_SESSIONS_CLOSED?$AA@
  001c8	6a 00		 push	 0
  001ca	e8 00 00 00 00	 call	 _InfoBalloon
  001cf	83 c4 08	 add	 esp, 8
$LN25@HandleHotK:
  001d2	5e		 pop	 esi
$LN19@HandleHotK:
  001d3	5f		 pop	 edi

; 7445 : 
; 7446 : 		break;
; 7447 : 	}
; 7448 : }

  001d4	83 c4 7c	 add	 esp, 124		; 0000007cH
  001d7	c3		 ret	 0
$LN27@HandleHotK:
  001d8	00 00 00 00	 DD	 $LN18@HandleHotK
  001dc	00 00 00 00	 DD	 $LN1@HandleHotK
  001e0	00 00 00 00	 DD	 $LN17@HandleHotK
  001e4	00 00 00 00	 DD	 $LN17@HandleHotK
  001e8	00 00 00 00	 DD	 $LN11@HandleHotK
  001ec	00 00 00 00	 DD	 $LN7@HandleHotK
  001f0	00 00 00 00	 DD	 $LN3@HandleHotK
  001f4	00 00 00 00	 DD	 $LN2@HandleHotK
  001f8	00 00 00 00	 DD	 $LN12@HandleHotK
_HandleHotKey ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@CHKBBIIA@CONFIRM_EXIT?$AA@		; `string'
PUBLIC	??_C@_04KLFPBEKK@home?$AA@			; `string'
PUBLIC	??_C@_0CM@BLAGDCIG@VOLUME_MOUNTED_AS_DRIVE_LETTER_X@ ; `string'
PUBLIC	??_C@_04GOLNGIJ@EXIT?$AA@			; `string'
PUBLIC	??_C@_09LEBEJAK@IDM_ABOUT?$AA@			; `string'
PUBLIC	??_C@_0BA@LCMKEAHB@IDM_PREFERENCES?$AA@		; `string'
PUBLIC	??_C@_08BFCIMFPP@HOMEPAGE?$AA@			; `string'
PUBLIC	??_C@_1BI@PHBMCDGL@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAc?$AA?3?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0P@FLCKCNGO@IDC_UNMOUNTALL?$AA@		; `string'
PUBLIC	??_C@_0BL@KPKLMBF@IDM_MOUNT_FAVORITE_VOLUMES?$AA@ ; `string'
PUBLIC	??_C@_0N@KOOLLHHJ@IDC_MOUNTALL?$AA@		; `string'
PUBLIC	??_C@_07JGGDNDHJ@HIDE_TC?$AA@			; `string'
PUBLIC	??_C@_07GBCCMBJB@SHOW_TC?$AA@			; `string'
PUBLIC	??_C@_03MIIGHJO@?$CFls?$AA@			; `string'
PUBLIC	??_C@_0CI@KGJJJNAK@HOST_DEVICE_REMOVAL_DISMOUNT_WAR@ ; `string'
PUBLIC	??_C@_0CC@EMODIILJ@HOST_DEVICE_REMOVAL_DISMOUNT_WAR@ ; `string'
PUBLIC	??_C@_19JHEHLFPM@?$AA?2?$AA?$DP?$AA?$DP?$AA?2?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BI@DALIBKDK@AMBIGUOUS_VOL_SELECTION?$AA@	; `string'
PUBLIC	??_C@_17LGKOMLJ@?$AA?4?$AA?4?$AA?4?$AA?$AA@	; `string'
PUBLIC	??_C@_07FLDMKAK@contact?$AA@			; `string'
PUBLIC	??_C@_07MMNEDCBK@history?$AA@			; `string'
PUBLIC	??_C@_04EGILJCBP@news?$AA@			; `string'
PUBLIC	??_C@_09JGLNCENF@downloads?$AA@			; `string'
PUBLIC	??_C@_03LPMHGBJM@faq?$AA@			; `string'
PUBLIC	??_C@_08PEONCBFB@tutorial?$AA@			; `string'
PUBLIC	??_C@_08GKIEPLNI@homepage?$AA@			; `string'
PUBLIC	??_C@_07BDNEAIPE@website?$AA@			; `string'
PUBLIC	??_C@_0BH@FLEEOEDN@IDM_RESTORE_VOL_HEADER?$AA@	; `string'
PUBLIC	??_C@_0BG@DFAIMILK@IDM_BACKUP_VOL_HEADER?$AA@	; `string'
PUBLIC	??_C@_0CB@BLPODHKE@IDM_REMOVE_ALL_KEYFILES_FROM_VOL@ ; `string'
PUBLIC	??_C@_0BM@KEPNAEHF@IDM_ADD_REMOVE_VOL_KEYFILES?$AA@ ; `string'
PUBLIC	??_C@_0CB@KMDEDFDG@IDM_CHANGE_HEADER_KEY_DERIV_ALGO@ ; `string'
PUBLIC	??_C@_0BE@NDHENBON@IDM_CHANGE_PASSWORD?$AA@	; `string'
PUBLIC	??_C@_0BI@DPFJFJBI@SELECT_A_MOUNTED_VOLUME?$AA@	; `string'
PUBLIC	??_C@_0M@CJEJOKNC@?2?2?$DP?2Volume?$HL?$AA@	; `string'
PUBLIC	??_C@_0CA@JKMICAAI@ASK_KEEP_DETECTING_SYSTEM_CRASH?$AA@ ; `string'
PUBLIC	??_C@_0BK@FEHLLPHO@SYSTEM_CRASHED_ASK_REPORT?$AA@ ; `string'
PUBLIC	??_C@_0BP@EPKBNKHP@PAGING_FILE_CREATION_PREVENTED?$AA@ ; `string'
PUBLIC	??_C@_0BK@DDMAOGAE@SYS_FAVORITE_VOLUME_DIRTY?$AA@ ; `string'
PUBLIC	??_C@_0CA@HDGOHFPD@SYSTEM_ENCRYPTION_RESUME_PROMPT?$AA@ ; `string'
PUBLIC	??_C@_0P@HDDEAF@TaskbarCreated?$AA@		; `string'
PUBLIC	??_C@_0BK@KCJBFNOC@HOTKEY_REGISTRATION_ERROR?$AA@ ; `string'
PUBLIC	??_C@_0BL@CMJGINID@NO_VOLUME_MOUNTED_TO_DRIVE?$AA@ ; `string'
PUBLIC	??_C@_0DC@PODPMMAO@BOOT_LOADER_VERSION_DIFFERENT_FR@ ; `string'
PUBLIC	??_C@_0BL@CDBHBGFI@UPDATE_TC_IN_HIDDEN_OS_TOO?$AA@ ; `string'
PUBLIC	??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@	; `string'
PUBLIC	??_C@_0BN@DBKOJEDK@IDPM_ADD_TO_SYSTEM_FAVORITES?$AA@ ; `string'
PUBLIC	??_C@_0BG@KFNIGFKC@IDPM_ADD_TO_FAVORITES?$AA@	; `string'
PUBLIC	??_C@_0BE@FIGCPPJ@IDPM_REPAIR_FILESYS?$AA@	; `string'
PUBLIC	??_C@_0BD@LLINIPJO@IDPM_CHECK_FILESYS?$AA@	; `string'
PUBLIC	??_C@_04DANIOFHI@OPEN?$AA@			; `string'
PUBLIC	??_C@_08IPACICJG@DISMOUNT?$AA@			; `string'
PUBLIC	??_C@_0BI@IOBNBNLE@SELECT_DEVICE_AND_MOUNT?$AA@	; `string'
PUBLIC	??_C@_0BG@IDGGPDHG@SELECT_FILE_AND_MOUNT?$AA@	; `string'
PUBLIC	??_C@_0BB@PCGMGAC@IDM_MOUNT_VOLUME?$AA@		; `string'
PUBLIC	_lParam$GSCopy$
PUBLIC	_wParam$GSCopy$
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_MainDialogProc@16
EXTRN	_CloseTCWindowsEnum@8:PROC
EXTRN	_InfoBalloonDirect:PROC
EXTRN	__imp__GetCursorPos@4:PROC
EXTRN	?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z:PROC ; WideToSingleString
EXTRN	?UpdateDeviceHostedFavoriteVolumes@CipherShed@@YAXXZ:PROC ; CipherShed::UpdateDeviceHostedFavoriteVolumes
EXTRN	_OpenDevice:PROC
EXTRN	_WarningBalloon:PROC
EXTRN	_IgnoreWmDeviceChange:DWORD
EXTRN	_ToUNICODE:PROC
EXTRN	__imp__PostMessageA@16:PROC
EXTRN	_UpdateComboOrder:PROC
EXTRN	_CipherTestDialogProc@16:PROC
EXTRN	__imp__DrawMenuBar@4:PROC
EXTRN	_LocalizationActive:DWORD
EXTRN	_LoadLanguageFile:PROC
EXTRN	_LanguageDlgProc@16:PROC
EXTRN	?OrganizeFavoriteVolumes@CipherShed@@YAHPAUHWND__@@_NABUFavoriteVolume@1@@Z:PROC ; CipherShed::OrganizeFavoriteVolumes
EXTRN	_HotkeysDlgProc@16:PROC
EXTRN	_OpenOnlineHelp:PROC
EXTRN	_TextInfoDialogBox:PROC
EXTRN	_KeyfileGeneratorDlgProc@16:PROC
EXTRN	_SecurityTokenKeyfileDlgProc@16:PROC
EXTRN	_UacRestoreVolumeHeader:PROC
EXTRN	_UacBackupVolumeHeader:PROC
EXTRN	_AboutDlgProc@16:PROC
EXTRN	_GetDriverRefCount:PROC
EXTRN	?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A:BYTE ; CipherShed::FavoritesMountedOnArrivalStillConnected
EXTRN	?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z:PROC ; VolumeGuidPathToDevicePath
EXTRN	__imp__QueryDosDeviceA@12:PROC
EXTRN	?FavoritesOnArrivalMountRequired@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A:BYTE ; CipherShed::FavoritesOnArrivalMountRequired
EXTRN	__imp__SystemParametersInfoA@16:PROC
EXTRN	_UacAnalyzeKernelMiniDump:PROC
EXTRN	_AskYesNoTopmost:PROC
EXTRN	__imp__IsWindowEnabled@4:PROC
EXTRN	_ResetCurrentDirectory:PROC
EXTRN	_DoPostInstallTasks:PROC
EXTRN	__imp__SystemTimeToFileTime@8:PROC
EXTRN	__imp__GetSystemTime@4:PROC
EXTRN	_AskNonSysInPlaceEncryptionResume:PROC
EXTRN	_NonSysInplaceEncInProgressElsewhere:PROC
EXTRN	__imp__RegisterWindowMessageA@4:PROC
EXTRN	_RegisterAllHotkeys:PROC
EXTRN	__imp__EnumWindows@8:PROC
EXTRN	_FindTCWindowEnum@8:PROC
EXTRN	_GetMountedVolumeDriveNo:PROC
EXTRN	_KeyFileCloneAll:PROC
EXTRN	?GetInstalledBootLoaderVersion@BootEncryption@CipherShed@@QAEGXZ:PROC ; CipherShed::BootEncryption::GetInstalledBootLoaderVersion
EXTRN	_ComServerMain:PROC
EXTRN	_LoadDefaultKeyFilesParam:PROC
EXTRN	_IsCipherShedInstallerRunning:PROC
EXTRN	?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z:PROC ; CipherShed::AddMountedVolumeToFavorites
EXTRN	_CheckFilesystem:PROC
EXTRN	__imp__GetMessagePos@0:PROC
EXTRN	_OpenPageHelp:PROC
;	COMDAT ?reentry@?PP@??MainDialogProc@@9@16@4_NA
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
_BSS	SEGMENT
?reentry@?PP@??MainDialogProc@@9@16@4_NA DB 01H DUP (?)	; `MainDialogProc'::`255'::reentry
_BSS	ENDS
;	COMDAT ?favoritesAutoMountTimerDivisor@?PM@??MainDialogProc@@9@16@4HA
_BSS	SEGMENT
?favoritesAutoMountTimerDivisor@?PM@??MainDialogProc@@9@16@4HA DD 01H DUP (?) ; `MainDialogProc'::`252'::favoritesAutoMountTimerDivisor
_BSS	ENDS
;	COMDAT ?previousState@?PE@??MainDialogProc@@9@16@4HA
_BSS	SEGMENT
?previousState@?PE@??MainDialogProc@@9@16@4HA DD 01H DUP (?) ; `MainDialogProc'::`244'::previousState
_BSS	ENDS
;	COMDAT ?systemCrashHandlerLocked@?OC@??MainDialogProc@@9@16@4HA
_BSS	SEGMENT
?systemCrashHandlerLocked@?OC@??MainDialogProc@@9@16@4HA DD 01H DUP (?) ; `MainDialogProc'::`226'::systemCrashHandlerLocked
_BSS	ENDS
;	COMDAT ?taskBarCreatedMsg@?1??MainDialogProc@@9@16@4IA
_BSS	SEGMENT
?taskBarCreatedMsg@?1??MainDialogProc@@9@16@4IA DD 01H DUP (?) ; `MainDialogProc'::`2'::taskBarCreatedMsg
_BSS	ENDS
;	COMDAT ??_C@_0N@CHKBBIIA@CONFIRM_EXIT?$AA@
CONST	SEGMENT
??_C@_0N@CHKBBIIA@CONFIRM_EXIT?$AA@ DB 'CONFIRM_EXIT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04KLFPBEKK@home?$AA@
CONST	SEGMENT
??_C@_04KLFPBEKK@home?$AA@ DB 'home', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BLAGDCIG@VOLUME_MOUNTED_AS_DRIVE_LETTER_X@
CONST	SEGMENT
??_C@_0CM@BLAGDCIG@VOLUME_MOUNTED_AS_DRIVE_LETTER_X@ DB 'VOLUME_MOUNTED_A'
	DB	'S_DRIVE_LETTER_X_DISMOUNTED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GOLNGIJ@EXIT?$AA@
CONST	SEGMENT
??_C@_04GOLNGIJ@EXIT?$AA@ DB 'EXIT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LEBEJAK@IDM_ABOUT?$AA@
CONST	SEGMENT
??_C@_09LEBEJAK@IDM_ABOUT?$AA@ DB 'IDM_ABOUT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LCMKEAHB@IDM_PREFERENCES?$AA@
CONST	SEGMENT
??_C@_0BA@LCMKEAHB@IDM_PREFERENCES?$AA@ DB 'IDM_PREFERENCES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BFCIMFPP@HOMEPAGE?$AA@
CONST	SEGMENT
??_C@_08BFCIMFPP@HOMEPAGE?$AA@ DB 'HOMEPAGE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@PHBMCDGL@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAc?$AA?3?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@PHBMCDGL@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAc?$AA?3?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ DB '%'
	DB	00H, 's', 00H, ' ', 00H, '%', 00H, 'c', 00H, ':', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FLCKCNGO@IDC_UNMOUNTALL?$AA@
CONST	SEGMENT
??_C@_0P@FLCKCNGO@IDC_UNMOUNTALL?$AA@ DB 'IDC_UNMOUNTALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KPKLMBF@IDM_MOUNT_FAVORITE_VOLUMES?$AA@
CONST	SEGMENT
??_C@_0BL@KPKLMBF@IDM_MOUNT_FAVORITE_VOLUMES?$AA@ DB 'IDM_MOUNT_FAVORITE_'
	DB	'VOLUMES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KOOLLHHJ@IDC_MOUNTALL?$AA@
CONST	SEGMENT
??_C@_0N@KOOLLHHJ@IDC_MOUNTALL?$AA@ DB 'IDC_MOUNTALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07JGGDNDHJ@HIDE_TC?$AA@
CONST	SEGMENT
??_C@_07JGGDNDHJ@HIDE_TC?$AA@ DB 'HIDE_TC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GBCCMBJB@SHOW_TC?$AA@
CONST	SEGMENT
??_C@_07GBCCMBJB@SHOW_TC?$AA@ DB 'SHOW_TC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MIIGHJO@?$CFls?$AA@
CONST	SEGMENT
??_C@_03MIIGHJO@?$CFls?$AA@ DB '%ls', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KGJJJNAK@HOST_DEVICE_REMOVAL_DISMOUNT_WAR@
CONST	SEGMENT
??_C@_0CI@KGJJJNAK@HOST_DEVICE_REMOVAL_DISMOUNT_WAR@ DB 'HOST_DEVICE_REMO'
	DB	'VAL_DISMOUNT_WARN_TITLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EMODIILJ@HOST_DEVICE_REMOVAL_DISMOUNT_WAR@
CONST	SEGMENT
??_C@_0CC@EMODIILJ@HOST_DEVICE_REMOVAL_DISMOUNT_WAR@ DB 'HOST_DEVICE_REMO'
	DB	'VAL_DISMOUNT_WARN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_19JHEHLFPM@?$AA?2?$AA?$DP?$AA?$DP?$AA?2?$AA?$AA@
CONST	SEGMENT
??_C@_19JHEHLFPM@?$AA?2?$AA?$DP?$AA?$DP?$AA?2?$AA?$AA@ DB '\', 00H, '?', 00H
	DB	'?', 00H, '\', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DALIBKDK@AMBIGUOUS_VOL_SELECTION?$AA@
CONST	SEGMENT
??_C@_0BI@DALIBKDK@AMBIGUOUS_VOL_SELECTION?$AA@ DB 'AMBIGUOUS_VOL_SELECTI'
	DB	'ON', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_17LGKOMLJ@?$AA?4?$AA?4?$AA?4?$AA?$AA@
CONST	SEGMENT
??_C@_17LGKOMLJ@?$AA?4?$AA?4?$AA?4?$AA?$AA@ DB '.', 00H, '.', 00H, '.', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_07FLDMKAK@contact?$AA@
CONST	SEGMENT
??_C@_07FLDMKAK@contact?$AA@ DB 'contact', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MMNEDCBK@history?$AA@
CONST	SEGMENT
??_C@_07MMNEDCBK@history?$AA@ DB 'history', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EGILJCBP@news?$AA@
CONST	SEGMENT
??_C@_04EGILJCBP@news?$AA@ DB 'news', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JGLNCENF@downloads?$AA@
CONST	SEGMENT
??_C@_09JGLNCENF@downloads?$AA@ DB 'downloads', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03LPMHGBJM@faq?$AA@
CONST	SEGMENT
??_C@_03LPMHGBJM@faq?$AA@ DB 'faq', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08PEONCBFB@tutorial?$AA@
CONST	SEGMENT
??_C@_08PEONCBFB@tutorial?$AA@ DB 'tutorial', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GKIEPLNI@homepage?$AA@
CONST	SEGMENT
??_C@_08GKIEPLNI@homepage?$AA@ DB 'homepage', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BDNEAIPE@website?$AA@
CONST	SEGMENT
??_C@_07BDNEAIPE@website?$AA@ DB 'website', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FLEEOEDN@IDM_RESTORE_VOL_HEADER?$AA@
CONST	SEGMENT
??_C@_0BH@FLEEOEDN@IDM_RESTORE_VOL_HEADER?$AA@ DB 'IDM_RESTORE_VOL_HEADER'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DFAIMILK@IDM_BACKUP_VOL_HEADER?$AA@
CONST	SEGMENT
??_C@_0BG@DFAIMILK@IDM_BACKUP_VOL_HEADER?$AA@ DB 'IDM_BACKUP_VOL_HEADER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BLPODHKE@IDM_REMOVE_ALL_KEYFILES_FROM_VOL@
CONST	SEGMENT
??_C@_0CB@BLPODHKE@IDM_REMOVE_ALL_KEYFILES_FROM_VOL@ DB 'IDM_REMOVE_ALL_K'
	DB	'EYFILES_FROM_VOL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KEPNAEHF@IDM_ADD_REMOVE_VOL_KEYFILES?$AA@
CONST	SEGMENT
??_C@_0BM@KEPNAEHF@IDM_ADD_REMOVE_VOL_KEYFILES?$AA@ DB 'IDM_ADD_REMOVE_VO'
	DB	'L_KEYFILES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KMDEDFDG@IDM_CHANGE_HEADER_KEY_DERIV_ALGO@
CONST	SEGMENT
??_C@_0CB@KMDEDFDG@IDM_CHANGE_HEADER_KEY_DERIV_ALGO@ DB 'IDM_CHANGE_HEADE'
	DB	'R_KEY_DERIV_ALGO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NDHENBON@IDM_CHANGE_PASSWORD?$AA@
CONST	SEGMENT
??_C@_0BE@NDHENBON@IDM_CHANGE_PASSWORD?$AA@ DB 'IDM_CHANGE_PASSWORD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DPFJFJBI@SELECT_A_MOUNTED_VOLUME?$AA@
CONST	SEGMENT
??_C@_0BI@DPFJFJBI@SELECT_A_MOUNTED_VOLUME?$AA@ DB 'SELECT_A_MOUNTED_VOLU'
	DB	'ME', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CJEJOKNC@?2?2?$DP?2Volume?$HL?$AA@
CONST	SEGMENT
??_C@_0M@CJEJOKNC@?2?2?$DP?2Volume?$HL?$AA@ DB '\\?\Volume{', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JKMICAAI@ASK_KEEP_DETECTING_SYSTEM_CRASH?$AA@
CONST	SEGMENT
??_C@_0CA@JKMICAAI@ASK_KEEP_DETECTING_SYSTEM_CRASH?$AA@ DB 'ASK_KEEP_DETE'
	DB	'CTING_SYSTEM_CRASH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FEHLLPHO@SYSTEM_CRASHED_ASK_REPORT?$AA@
CONST	SEGMENT
??_C@_0BK@FEHLLPHO@SYSTEM_CRASHED_ASK_REPORT?$AA@ DB 'SYSTEM_CRASHED_ASK_'
	DB	'REPORT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EPKBNKHP@PAGING_FILE_CREATION_PREVENTED?$AA@
CONST	SEGMENT
??_C@_0BP@EPKBNKHP@PAGING_FILE_CREATION_PREVENTED?$AA@ DB 'PAGING_FILE_CR'
	DB	'EATION_PREVENTED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DDMAOGAE@SYS_FAVORITE_VOLUME_DIRTY?$AA@
CONST	SEGMENT
??_C@_0BK@DDMAOGAE@SYS_FAVORITE_VOLUME_DIRTY?$AA@ DB 'SYS_FAVORITE_VOLUME'
	DB	'_DIRTY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HDGOHFPD@SYSTEM_ENCRYPTION_RESUME_PROMPT?$AA@
CONST	SEGMENT
??_C@_0CA@HDGOHFPD@SYSTEM_ENCRYPTION_RESUME_PROMPT?$AA@ DB 'SYSTEM_ENCRYP'
	DB	'TION_RESUME_PROMPT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HDDEAF@TaskbarCreated?$AA@
CONST	SEGMENT
??_C@_0P@HDDEAF@TaskbarCreated?$AA@ DB 'TaskbarCreated', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KCJBFNOC@HOTKEY_REGISTRATION_ERROR?$AA@
CONST	SEGMENT
??_C@_0BK@KCJBFNOC@HOTKEY_REGISTRATION_ERROR?$AA@ DB 'HOTKEY_REGISTRATION'
	DB	'_ERROR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CMJGINID@NO_VOLUME_MOUNTED_TO_DRIVE?$AA@
CONST	SEGMENT
??_C@_0BL@CMJGINID@NO_VOLUME_MOUNTED_TO_DRIVE?$AA@ DB 'NO_VOLUME_MOUNTED_'
	DB	'TO_DRIVE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@PODPMMAO@BOOT_LOADER_VERSION_DIFFERENT_FR@
CONST	SEGMENT
??_C@_0DC@PODPMMAO@BOOT_LOADER_VERSION_DIFFERENT_FR@ DB 'BOOT_LOADER_VERS'
	DB	'ION_DIFFERENT_FROM_DRIVER_VERSION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CDBHBGFI@UPDATE_TC_IN_HIDDEN_OS_TOO?$AA@
CONST	SEGMENT
??_C@_0BL@CDBHBGFI@UPDATE_TC_IN_HIDDEN_OS_TOO?$AA@ DB 'UPDATE_TC_IN_HIDDE'
	DB	'N_OS_TOO', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@
CONST	SEGMENT
??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@ DB 'TC_INSTALLER_IS_RUNNI'
	DB	'NG', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DBKOJEDK@IDPM_ADD_TO_SYSTEM_FAVORITES?$AA@
CONST	SEGMENT
??_C@_0BN@DBKOJEDK@IDPM_ADD_TO_SYSTEM_FAVORITES?$AA@ DB 'IDPM_ADD_TO_SYST'
	DB	'EM_FAVORITES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KFNIGFKC@IDPM_ADD_TO_FAVORITES?$AA@
CONST	SEGMENT
??_C@_0BG@KFNIGFKC@IDPM_ADD_TO_FAVORITES?$AA@ DB 'IDPM_ADD_TO_FAVORITES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FIGCPPJ@IDPM_REPAIR_FILESYS?$AA@
CONST	SEGMENT
??_C@_0BE@FIGCPPJ@IDPM_REPAIR_FILESYS?$AA@ DB 'IDPM_REPAIR_FILESYS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LLINIPJO@IDPM_CHECK_FILESYS?$AA@
CONST	SEGMENT
??_C@_0BD@LLINIPJO@IDPM_CHECK_FILESYS?$AA@ DB 'IDPM_CHECK_FILESYS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DANIOFHI@OPEN?$AA@
CONST	SEGMENT
??_C@_04DANIOFHI@OPEN?$AA@ DB 'OPEN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IPACICJG@DISMOUNT?$AA@
CONST	SEGMENT
??_C@_08IPACICJG@DISMOUNT?$AA@ DB 'DISMOUNT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IOBNBNLE@SELECT_DEVICE_AND_MOUNT?$AA@
CONST	SEGMENT
??_C@_0BI@IOBNBNLE@SELECT_DEVICE_AND_MOUNT?$AA@ DB 'SELECT_DEVICE_AND_MOU'
	DB	'NT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IDGGPDHG@SELECT_FILE_AND_MOUNT?$AA@
CONST	SEGMENT
??_C@_0BG@IDGGPDHG@SELECT_FILE_AND_MOUNT?$AA@ DB 'SELECT_FILE_AND_MOUNT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PCGMGAC@IDM_MOUNT_VOLUME?$AA@
CONST	SEGMENT
??_C@_0BB@PCGMGAC@IDM_MOUNT_VOLUME?$AA@ DB 'IDM_MOUNT_VOLUME', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_MainDialogProc@16$31 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_MainDialogProc@16$2
__catchsym$_MainDialogProc@16$30 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_MainDialogProc@16$0
__ehfuncinfo$_MainDialogProc@16 DD 019930522H
	DD	018H
	DD	FLAT:__unwindtable$_MainDialogProc@16
	DD	02H
	DD	FLAT:__tryblocktable$_MainDialogProc@16
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$_MainDialogProc@16 DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$30
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$31
__unwindtable$_MainDialogProc@16 DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$7
	DD	06H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$8
	DD	07H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$11
	DD	07H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$12
	DD	09H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$13
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$15
	DD	0bH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$16
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$19
	DD	0dH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$20
	DD	0eH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$21
	DD	0fH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$22
	DD	0dH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$23
	DD	011H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$24
	DD	012H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$25
	DD	013H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$26
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$27
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$28
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$29
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
xdata$x	ENDS
;	COMDAT _MainDialogProc@16
_TEXT	SEGMENT
_mountList$138149 = -15148				; size = 13940
$T207817 = -1206					; size = 94
$T207871 = -1112					; size = 120
$T207821 = -992						; size = 120
$T207870 = -872						; size = 120
$T207869 = -752						; size = 120
$T207845 = -632						; size = 28
$T207866 = -604						; size = 28
$T207863 = -576						; size = 28
$T207864 = -548						; size = 28
$T207862 = -520						; size = 28
$T207867 = -492						; size = 28
$T207823 = -464						; size = 28
$T207865 = -436						; size = 28
$T207824 = -408						; size = 28
$T207832 = -380						; size = 28
$T207849 = -352						; size = 8
_systemTime$138206 = -344				; size = 16
_rect$138808 = -328					; size = 16
$T207851 = -312						; size = 28
_bytesReturned$138150 = -284				; size = 4
_bytesOut$138234 = -280					; size = 4
_dwResult$138230 = -276					; size = 4
$T207850 = -272						; size = 28
_systemTime$138193 = -244				; size = 16
_dwResult$138226 = -228					; size = 4
_$S5$138439 = -224					; size = 52
_$S4$138385 = -172					; size = 52
_cd$138172 = -120					; size = 12
_ft$138207 = -108					; size = 8
_pos$138538 = -100					; size = 8
$T207843 = -92						; size = 8
_warnings$138235 = -84					; size = 8
$T207833 = -76						; size = 4
_dwResult$138258 = -76					; size = 4
_tmp$138970 = -72					; size = 24
_hw$ = -48						; size = 2
_dwResult$138958 = -48					; size = 4
_favorite$138514 = -44					; size = 8
tv3993 = -36						; size = 4
_wParam$GSCopy$ = -36					; size = 4
_vol$138627 = -36					; size = 4
_running$138256 = -36					; size = 4
_hwndDlg$GSCopy$ = -32					; size = 4
_i$138608 = -32						; size = 4
_lParam$GSCopy$ = -28					; size = 4
_n$138542 = -28						; size = 4
_h$138165 = -28						; size = 4
tv5474 = -24						; size = 4
tv4991 = -24						; size = 4
$T207898 = -24						; size = 4
_m$138604 = -24						; size = 4
_exitCode$138050 = -24					; size = 4
$T207844 = -17						; size = 1
_mountedAndNotDisconnected$138436 = -17			; size = 1
__$EHRec$ = -16						; size = 16
_ots$138633 = 0						; size = 536
_findData$138198 = 536					; size = 320
_prop$138957 = 856					; size = 596
_mountedFavorite$138443 = 1452				; size = 120
_resolvedPath$138427 = 1572				; size = 28
_favorite$138389 = 1600					; size = 120
_label$138565 = 1720					; size = 28
_volPathHigher$138963 = 1748				; size = 28
_volPathLowerWStr$138993 = 1776				; size = 28
_s$138560 = 1804					; size = 2048
_txt$138582 = 3852					; size = 4096
_volDevPath$138523 = 7948				; size = 260
_volDevPath$138420 = 8208				; size = 260
_volPathLowerW$138946 = 8468				; size = 520
_volp$138629 = 8988					; size = 260
_winDir$138197 = 9248					; size = 260
_volPath$139047 = 9508					; size = 260
_volPath$139041 = 9768					; size = 260
_volPathLower$138945 = 10028				; size = 260
_volPath$138806 = 10288					; size = 260
__$ArrayPad$ = 10548					; size = 4
_hwndDlg$ = 10560					; size = 4
_uMsg$ = 10564						; size = 4
_wParam$ = 10568					; size = 4
_lParam$ = 10572					; size = 4
_MainDialogProc@16 PROC					; COMDAT

; 4657 : {

  00000	55		 push	 ebp
  00001	8d ac 24 c8 d6
	ff ff		 lea	 ebp, DWORD PTR [esp-10552]
  00008	b8 38 29 00 00	 mov	 eax, 10552		; 00002938H
  0000d	e8 00 00 00 00	 call	 __chkstk
  00012	6a ff		 push	 -1
  00014	68 00 00 00 00	 push	 __ehhandler$_MainDialogProc@16
  00019	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	b8 1c 3b 00 00	 mov	 eax, 15132		; 00003b1cH
  00026	e8 00 00 00 00	 call	 __chkstk
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 85 34 29 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	53		 push	 ebx
  00039	56		 push	 esi
  0003a	57		 push	 edi
  0003b	50		 push	 eax
  0003c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00045	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00048	8b b5 48 29 00
	00		 mov	 esi, DWORD PTR _wParam$[ebp]
  0004e	8b 9d 40 29 00
	00		 mov	 ebx, DWORD PTR _hwndDlg$[ebp]
  00054	8b bd 4c 29 00
	00		 mov	 edi, DWORD PTR _lParam$[ebp]

; 4658 : 	static UINT taskBarCreatedMsg;
; 4659 : 	WORD lw = LOWORD (wParam);
; 4660 : 	WORD hw = HIWORD (wParam);

  0005a	8b c6		 mov	 eax, esi
  0005c	c1 e8 10	 shr	 eax, 16			; 00000010H
  0005f	89 45 d0	 mov	 DWORD PTR _hw$[ebp], eax

; 4661 : 	DWORD mPos;
; 4662 : 
; 4663 : 	switch (uMsg)

  00062	8b 85 44 29 00
	00		 mov	 eax, DWORD PTR _uMsg$[ebp]
  00068	33 d2		 xor	 edx, edx
  0006a	89 5d e0	 mov	 DWORD PTR _hwndDlg$GSCopy$[ebp], ebx
  0006d	89 75 dc	 mov	 DWORD PTR _wParam$GSCopy$[ebp], esi
  00070	89 7d e4	 mov	 DWORD PTR _lParam$GSCopy$[ebp], edi
  00073	89 55 e8	 mov	 DWORD PTR $T207898[ebp], edx
  00076	3d 10 01 00 00	 cmp	 eax, 272		; 00000110H
  0007b	0f 87 19 11 00
	00		 ja	 $LN481@MainDialog
  00081	0f 84 27 06 00
	00		 je	 $LN454@MainDialog
  00087	8d 48 f0	 lea	 ecx, DWORD PTR [eax-16]
  0008a	83 f9 43	 cmp	 ecx, 67			; 00000043H
  0008d	0f 87 01 35 00
	00		 ja	 $LN2@MainDialog
  00093	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN922@MainDialog[ecx]
  0009a	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN1051@MainDialog[ecx*4]
$LN350@MainDialog:

; 5072 : 
; 5073 : 	case WM_WINDOWPOSCHANGING:
; 5074 : 		if (MainWindowHidden)

  000a1	39 15 00 00 00
	00		 cmp	 DWORD PTR _MainWindowHidden, edx
  000a7	0f 84 ef 00 00
	00		 je	 $LN349@MainDialog

; 5075 : 		{
; 5076 : 			// Prevent window from being shown
; 5077 : 			PWINDOWPOS wp = (PWINDOWPOS)lParam;
; 5078 : 			wp->flags &= ~SWP_SHOWWINDOW;

  000ad	83 67 18 bf	 and	 DWORD PTR [edi+24], -65	; ffffffbfH

; 5079 : 			return 0;

  000b1	33 c0		 xor	 eax, eax
  000b3	e9 e9 00 00 00	 jmp	 $LN458@MainDialog
$LN346@MainDialog:

; 5088 : 		}
; 5089 : 		return 0;
; 5090 : 
; 5091 : 	case WM_HELP:
; 5092 : 		OpenPageHelp (hwndDlg, 0);

  000b8	52		 push	 edx
  000b9	53		 push	 ebx
  000ba	e8 00 00 00 00	 call	 _OpenPageHelp
  000bf	83 c4 08	 add	 esp, 8

; 5093 : 		return 1;

  000c2	e9 d5 00 00 00	 jmp	 $LN349@MainDialog
$LN345@MainDialog:

; 5094 : 
; 5095 : 	case WM_ENDSESSION:
; 5096 : 		if (TaskBarIconMutex != NULL)

  000c7	39 15 00 00 00
	00		 cmp	 DWORD PTR _TaskBarIconMutex, edx
  000cd	74 4e		 je	 SHORT $LN344@MainDialog

; 5097 : 		{
; 5098 : 			if (bDismountOnLogOff)

  000cf	39 15 00 00 00
	00		 cmp	 DWORD PTR ?bDismountOnLogOff@@3HA, edx ; bDismountOnLogOff
  000d5	74 3d		 je	 SHORT $LN343@MainDialog

; 5099 : 			{
; 5100 : 				// Auto-dismount when user logs off
; 5101 : 				DWORD dwResult;
; 5102 : 
; 5103 : 				if (bWipeCacheOnAutoDismount)

  000d7	39 15 00 00 00
	00		 cmp	 DWORD PTR ?bWipeCacheOnAutoDismount@@3HA, edx ; bWipeCacheOnAutoDismount
  000dd	74 1e		 je	 SHORT $LN342@MainDialog

; 5104 : 					DeviceIoControl (hDriver, TC_IOCTL_WIPE_PASSWORD_CACHE, NULL, 0, NULL, 0, &dwResult, NULL);

  000df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hDriver
  000e5	52		 push	 edx
  000e6	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _dwResult$138226[ebp]
  000ec	50		 push	 eax
  000ed	52		 push	 edx
  000ee	52		 push	 edx
  000ef	52		 push	 edx
  000f0	52		 push	 edx
  000f1	68 30 20 22 00	 push	 2236464			; 00222030H
  000f6	51		 push	 ecx
  000f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
$LN342@MainDialog:

; 5105 : 				
; 5106 : 				DismountAll (hwndDlg, bForceAutoDismount, FALSE, 1, 0);

  000fd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bForceAutoDismount@@3HA ; bForceAutoDismount
  00103	6a 00		 push	 0
  00105	6a 01		 push	 1
  00107	6a 00		 push	 0
  00109	52		 push	 edx
  0010a	8b fb		 mov	 edi, ebx
  0010c	e8 00 00 00 00	 call	 _DismountAll
  00111	83 c4 10	 add	 esp, 16			; 00000010H
$LN343@MainDialog:

; 5107 : 			}
; 5108 : 
; 5109 : 			TaskBarIconRemove (hwndDlg);

  00114	53		 push	 ebx
  00115	e8 00 00 00 00	 call	 _TaskBarIconRemove
  0011a	83 c4 04	 add	 esp, 4
$LN344@MainDialog:

; 5110 : 		}
; 5111 : 		EndMainDlg (hwndDlg);

  0011d	53		 push	 ebx
  0011e	e8 00 00 00 00	 call	 _EndMainDlg
  00123	83 c4 04	 add	 esp, 4

; 5112 : 		localcleanup ();

  00126	e8 00 00 00 00	 call	 _localcleanup

; 5113 : 		return 0;

  0012b	33 c0		 xor	 eax, eax
  0012d	eb 72		 jmp	 SHORT $LN458@MainDialog
$LN228@MainDialog:

; 5540 : 		}
; 5541 : 		return 0;
; 5542 : 
; 5543 : 	case WM_NOTIFY:
; 5544 : 
; 5545 : 		if(wParam == IDC_DRIVELIST)

  0012f	81 fe ef 03 00
	00		 cmp	 esi, 1007		; 000003efH
  00135	0f 85 58 10 00
	00		 jne	 $LN347@MainDialog

; 5546 : 		{
; 5547 : 			if (((LPNMHDR) lParam)->code == NM_CUSTOMDRAW)

  0013b	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0013e	83 f8 f4	 cmp	 eax, -12		; fffffff4H
  00141	75 3d		 jne	 SHORT $LN226@MainDialog

; 5548 : 			{
; 5549 : 				int width = ListView_GetColumnWidth (GetDlgItem (hwndDlg, IDC_DRIVELIST), 1);

  00143	52		 push	 edx
  00144	6a 01		 push	 1
  00146	68 1d 10 00 00	 push	 4125			; 0000101dH
  0014b	56		 push	 esi
  0014c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00152	53		 push	 ebx
  00153	ff d6		 call	 esi
  00155	50		 push	 eax
  00156	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 5550 : 				if (width != LastDriveListVolumeColumnWidth)

  0015c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _LastDriveListVolumeColumnWidth
  00162	74 18		 je	 SHORT $LN225@MainDialog

; 5551 : 				{
; 5552 : 					LastDriveListVolumeColumnWidth = width;
; 5553 : 					LoadDriveLetters (GetDlgItem (hwndDlg, IDC_DRIVELIST), 0);

  00164	6a 00		 push	 0
  00166	68 ef 03 00 00	 push	 1007			; 000003efH
  0016b	53		 push	 ebx
  0016c	a3 00 00 00 00	 mov	 DWORD PTR _LastDriveListVolumeColumnWidth, eax
  00171	ff d6		 call	 esi
  00173	50		 push	 eax
  00174	e8 00 00 00 00	 call	 _LoadDriveLetters
  00179	83 c4 08	 add	 esp, 8
$LN225@MainDialog:

; 5554 : 				}
; 5555 : 				return 0;

  0017c	33 c0		 xor	 eax, eax
  0017e	eb 21		 jmp	 SHORT $LN458@MainDialog
$LN226@MainDialog:

; 5556 : 			}
; 5557 : 
; 5558 : 			/* Single click within drive list */
; 5559 : 			if (((LPNMHDR) lParam)->code == LVN_ITEMCHANGED && (((LPNMLISTVIEW) lParam)->uNewState & LVIS_FOCUSED ))

  00180	83 f8 9b	 cmp	 eax, -101		; ffffff9bH
  00183	75 43		 jne	 SHORT $LN224@MainDialog
  00185	f6 47 14 01	 test	 BYTE PTR [edi+20], 1
  00189	74 3d		 je	 SHORT $LN224@MainDialog

; 5560 : 			{
; 5561 : 				nSelectedDriveIndex = ((LPNMLISTVIEW) lParam)->iItem;

  0018b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0018e	a3 00 00 00 00	 mov	 DWORD PTR ?nSelectedDriveIndex@@3HA, eax ; nSelectedDriveIndex
$LN8@MainDialog:

; 6541 : 
; 6542 : 	case TC_APPMSG_MOUNT_ENABLE_DISABLE_CONTROLS:
; 6543 : 		EnableDisableButtons (hwndDlg);

  00193	53		 push	 ebx
  00194	e8 00 00 00 00	 call	 _EnableDisableButtons
$LN1033@MainDialog:
  00199	83 c4 04	 add	 esp, 4
$LN349@MainDialog:

; 6544 : 		return 1;

  0019c	b8 01 00 00 00	 mov	 eax, 1
$LN458@MainDialog:

; 6580 : 		}
; 6581 : 	}
; 6582 : 
; 6583 : 	return 0;
; 6584 : }

  001a1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001a4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ab	59		 pop	 ecx
  001ac	5f		 pop	 edi
  001ad	5e		 pop	 esi
  001ae	5b		 pop	 ebx
  001af	8b 8d 34 29 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b5	33 cd		 xor	 ecx, ebp
  001b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bc	81 c5 38 29 00
	00		 add	 ebp, 10552		; 00002938H
  001c2	8b e5		 mov	 esp, ebp
  001c4	5d		 pop	 ebp
  001c5	c2 10 00	 ret	 16			; 00000010H
$LN224@MainDialog:

; 5562 : 				EnableDisableButtons (hwndDlg);
; 5563 : 				return 1;
; 5564 : 			}
; 5565 : 
; 5566 : 			/* Double click within drive list */
; 5567 : 			if (((LPNMHDR) lParam)->code == LVN_ITEMACTIVATE)

  001c8	83 f8 8e	 cmp	 eax, -114		; ffffff8eH
  001cb	0f 85 07 01 00
	00		 jne	 $LN223@MainDialog

; 5568 : 			{
; 5569 : 				int state = GetItemLong (GetDlgItem (hwndDlg, IDC_DRIVELIST), ((LPNMITEMACTIVATE)lParam)->iItem );

  001d1	8b cf		 mov	 ecx, edi
  001d3	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001d6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  001dc	52		 push	 edx
  001dd	68 ef 03 00 00	 push	 1007			; 000003efH
  001e2	53		 push	 ebx
  001e3	ff d7		 call	 edi
  001e5	50		 push	 eax
  001e6	e8 00 00 00 00	 call	 _GetItemLong
  001eb	8b f0		 mov	 esi, eax

; 5570 : 				nSelectedDriveIndex = ((LPNMITEMACTIVATE)lParam)->iItem;

  001ed	8b 45 e4	 mov	 eax, DWORD PTR _lParam$GSCopy$[ebp]
  001f0	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001f3	83 c4 08	 add	 esp, 8
  001f6	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nSelectedDriveIndex@@3HA, ecx ; nSelectedDriveIndex

; 5571 : 				if (LOWORD(state) == TC_MLIST_ITEM_NONSYS_VOL || LOWORD(state) == TC_MLIST_ITEM_SYS_PARTITION)

  001fc	66 83 fe 01	 cmp	 si, 1
  00200	0f 84 b4 00 00
	00		 je	 $LN221@MainDialog
  00206	66 83 fe 02	 cmp	 si, 2
  0020a	0f 84 aa 00 00
	00		 je	 $LN221@MainDialog

; 5577 : 				}
; 5578 : 				else if (LOWORD (GetSelectedLong (GetDlgItem (hwndDlg, IDC_DRIVELIST))) == TC_MLIST_ITEM_FREE)

  00210	68 ef 03 00 00	 push	 1007			; 000003efH
  00215	53		 push	 ebx
  00216	ff d7		 call	 edi
  00218	50		 push	 eax
  00219	e8 00 00 00 00	 call	 _GetSelectedLong
  0021e	83 c4 04	 add	 esp, 4
  00221	66 85 c0	 test	 ax, ax
  00224	0f 85 72 ff ff
	ff		 jne	 $LN349@MainDialog

; 5579 : 				{
; 5580 : 					mountOptions = defaultMountOptions;

  0022a	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  0022f	be 00 00 00 00	 mov	 esi, OFFSET ?defaultMountOptions@@3UMountOptions@@A ; defaultMountOptions
  00234	bf 00 00 00 00	 mov	 edi, OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions

; 5581 : 					bPrebootPasswordDlgMode = FALSE;
; 5582 : 
; 5583 : 					if (GetAsyncKeyState (VK_CONTROL) < 0)

  00239	6a 11		 push	 17			; 00000011H
  0023b	f3 a5		 rep movsd
  0023d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bPrebootPasswordDlgMode, 0
  00247	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetAsyncKeyState@4
  0024d	66 85 c0	 test	 ax, ax
  00250	7d 4b		 jge	 SHORT $LN216@MainDialog

; 5584 : 					{
; 5585 : 						if (IDCANCEL == DialogBoxParamW (hInst, 
; 5586 : 							MAKEINTRESOURCEW (IDD_MOUNT_OPTIONS), hwndDlg,
; 5587 : 							(DLGPROC) MountOptionsDlgProc, (LPARAM) &mountOptions))

  00252	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00258	68 00 00 00 00	 push	 OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  0025d	68 00 00 00 00	 push	 OFFSET _MountOptionsDlgProc@16
  00262	53		 push	 ebx
  00263	68 f8 01 00 00	 push	 504			; 000001f8H
  00268	52		 push	 edx
  00269	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  0026f	83 f8 02	 cmp	 eax, 2

; 5588 : 							return 1;

  00272	0f 84 24 ff ff
	ff		 je	 $LN349@MainDialog

; 5589 : 
; 5590 : 						if (mountOptions.ProtectHiddenVolume && hidVolProtKeyFilesParam.EnableKeyFiles)

  00278	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR ?mountOptions@@3UMountOptions@@A+8, 0
  0027f	74 1c		 je	 SHORT $LN216@MainDialog
  00281	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hidVolProtKeyFilesParam, 0
  00288	74 13		 je	 SHORT $LN216@MainDialog

; 5591 : 							KeyFilesApply (&mountOptions.ProtectedHidVolPassword, hidVolProtKeyFilesParam.FirstKeyFile);

  0028a	a1 04 00 00 00	 mov	 eax, DWORD PTR _hidVolProtKeyFilesParam+4
  0028f	50		 push	 eax
  00290	68 14 00 00 00	 push	 OFFSET ?mountOptions@@3UMountOptions@@A+20
  00295	e8 00 00 00 00	 call	 _KeyFilesApply
  0029a	83 c4 08	 add	 esp, 8
$LN216@MainDialog:

; 5592 : 					}
; 5593 : 
; 5594 : 					if (CheckMountList ())

  0029d	e8 00 00 00 00	 call	 _CheckMountList
  002a2	85 c0		 test	 eax, eax
  002a4	0f 84 f2 fe ff
	ff		 je	 $LN349@MainDialog

; 5595 : 						Mount (hwndDlg, 0, 0);

  002aa	6a 00		 push	 0
  002ac	33 c9		 xor	 ecx, ecx
  002ae	8b d3		 mov	 edx, ebx
  002b0	e8 00 00 00 00	 call	 ?Mount@@YAHPAUHWND__@@HPAD@Z ; Mount
  002b5	e9 df fe ff ff	 jmp	 $LN1033@MainDialog
$LN221@MainDialog:

; 5572 : 				{
; 5573 : 					// Open explorer window for mounted volume
; 5574 : 					WaitCursor ();

  002ba	e8 00 00 00 00	 call	 _WaitCursor

; 5575 : 					OpenVolumeExplorerWindow (HIWORD(state) - 'A');

  002bf	c1 ee 10	 shr	 esi, 16			; 00000010H
  002c2	83 ee 41	 sub	 esi, 65			; 00000041H
  002c5	56		 push	 esi
  002c6	e8 00 00 00 00	 call	 _OpenVolumeExplorerWindow
  002cb	83 c4 04	 add	 esp, 4

; 5576 : 					NormalCursor ();

  002ce	e8 00 00 00 00	 call	 _NormalCursor

; 5596 : 				}
; 5597 : 				return 1;

  002d3	e9 c4 fe ff ff	 jmp	 $LN349@MainDialog
$LN223@MainDialog:

; 5598 : 			}
; 5599 : 
; 5600 : 			/* Right click and drag&drop operations */
; 5601 : 
; 5602 : 			switch (((NM_LISTVIEW *) lParam)->hdr.code)

  002d8	83 f8 91	 cmp	 eax, -111		; ffffff91H
  002db	74 09		 je	 SHORT $LN212@MainDialog
  002dd	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  002e0	0f 85 ad 0e 00
	00		 jne	 $LN347@MainDialog
$LN212@MainDialog:

; 5603 : 			{
; 5604 : 			case NM_RCLICK:
; 5605 : 			case LVN_BEGINRDRAG:
; 5606 : 				/* If the mouse was moving while the right mouse button is pressed, popup menu would
; 5607 : 				not open, because drag&drop operation would be initiated. Therefore, we're handling
; 5608 : 				RMB drag-and-drop operations as well. */
; 5609 : 				{
; 5610 : 
; 5611 : 					/* Drive list context menu */
; 5612 : 
; 5613 : 					int menuItem;
; 5614 : 					HMENU popup = CreatePopupMenu ();

  002e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0

; 5615 : 
; 5616 : 					SetFocus (GetDlgItem (hwndDlg, IDC_DRIVELIST));

  002ec	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  002f2	68 ef 03 00 00	 push	 1007			; 000003efH
  002f7	53		 push	 ebx
  002f8	8b f0		 mov	 esi, eax
  002fa	ff d7		 call	 edi
  002fc	50		 push	 eax
  002fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 5617 : 
; 5618 : 					switch (LOWORD (GetSelectedLong (GetDlgItem (hwndDlg, IDC_DRIVELIST))))

  00303	68 ef 03 00 00	 push	 1007			; 000003efH
  00308	53		 push	 ebx
  00309	ff d7		 call	 edi
  0030b	50		 push	 eax
  0030c	e8 00 00 00 00	 call	 _GetSelectedLong
  00311	0f b7 c0	 movzx	 eax, ax
  00314	83 c4 04	 add	 esp, 4
  00317	83 f8 03	 cmp	 eax, 3
  0031a	0f 87 55 01 00
	00		 ja	 $LN210@MainDialog
  00320	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN1052@MainDialog[eax*4]
$LN209@MainDialog:

; 5619 : 					{
; 5620 : 					case TC_MLIST_ITEM_FREE:
; 5621 : 					
; 5622 : 						// No mounted volume at this drive letter
; 5623 : 
; 5624 : 						AppendMenuW (popup, MF_STRING, IDM_MOUNT_VOLUME, GetString ("IDM_MOUNT_VOLUME"));

  00327	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@PCGMGAC@IDM_MOUNT_VOLUME?$AA@
  0032c	e8 00 00 00 00	 call	 _GetString
  00331	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__AppendMenuW@16
  00337	83 c4 04	 add	 esp, 4
  0033a	50		 push	 eax
  0033b	68 4e 9c 00 00	 push	 40014			; 00009c4eH
  00340	6a 00		 push	 0
  00342	56		 push	 esi
  00343	ff d7		 call	 edi

; 5625 : 						AppendMenu (popup, MF_SEPARATOR, 0, NULL);

  00345	6a 00		 push	 0
  00347	6a 00		 push	 0
  00349	68 00 08 00 00	 push	 2048			; 00000800H
  0034e	56		 push	 esi
  0034f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16

; 5626 : 						AppendMenuW (popup, MF_STRING, IDPM_SELECT_FILE_AND_MOUNT, GetString ("SELECT_FILE_AND_MOUNT"));

  00355	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@IDGGPDHG@SELECT_FILE_AND_MOUNT?$AA@
  0035a	e8 00 00 00 00	 call	 _GetString
  0035f	83 c4 04	 add	 esp, 4
  00362	50		 push	 eax
  00363	68 24 a1 07 00	 push	 500004			; 0007a124H
  00368	6a 00		 push	 0
  0036a	56		 push	 esi
  0036b	ff d7		 call	 edi

; 5627 : 						AppendMenuW (popup, MF_STRING, IDPM_SELECT_DEVICE_AND_MOUNT, GetString ("SELECT_DEVICE_AND_MOUNT"));

  0036d	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@IOBNBNLE@SELECT_DEVICE_AND_MOUNT?$AA@
  00372	e8 00 00 00 00	 call	 _GetString
  00377	83 c4 04	 add	 esp, 4
  0037a	50		 push	 eax
  0037b	68 25 a1 07 00	 push	 500005			; 0007a125H
  00380	6a 00		 push	 0
  00382	56		 push	 esi
  00383	ff d7		 call	 edi

; 5628 : 						break;

  00385	e9 eb 00 00 00	 jmp	 $LN210@MainDialog
$LN208@MainDialog:

; 5629 : 
; 5630 : 					case TC_MLIST_ITEM_NONSYS_VOL:
; 5631 : 
; 5632 : 						// There's a mounted non-system volume at this drive letter
; 5633 : 
; 5634 : 						AppendMenuW (popup, MF_STRING, IDM_UNMOUNT_VOLUME, GetString ("DISMOUNT"));

  0038a	68 00 00 00 00	 push	 OFFSET ??_C@_08IPACICJG@DISMOUNT?$AA@
  0038f	e8 00 00 00 00	 call	 _GetString
  00394	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__AppendMenuW@16
  0039a	83 c4 04	 add	 esp, 4
  0039d	50		 push	 eax
  0039e	68 43 9c 00 00	 push	 40003			; 00009c43H
  003a3	6a 00		 push	 0
  003a5	56		 push	 esi
  003a6	ff d7		 call	 edi

; 5635 : 						AppendMenuW (popup, MF_STRING, IDPM_OPEN_VOLUME, GetString ("OPEN"));

  003a8	68 00 00 00 00	 push	 OFFSET ??_C@_04DANIOFHI@OPEN?$AA@
  003ad	e8 00 00 00 00	 call	 _GetString
  003b2	83 c4 04	 add	 esp, 4
  003b5	50		 push	 eax
  003b6	68 23 a1 07 00	 push	 500003			; 0007a123H
  003bb	6a 00		 push	 0
  003bd	56		 push	 esi
  003be	ff d7		 call	 edi

; 5636 : 						AppendMenu (popup, MF_SEPARATOR, 0, NULL);

  003c0	6a 00		 push	 0
  003c2	6a 00		 push	 0
  003c4	68 00 08 00 00	 push	 2048			; 00000800H
  003c9	56		 push	 esi
  003ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16

; 5637 : 						AppendMenuW (popup, MF_STRING, IDPM_CHECK_FILESYS, GetString ("IDPM_CHECK_FILESYS"));

  003d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LLINIPJO@IDPM_CHECK_FILESYS?$AA@
  003d5	e8 00 00 00 00	 call	 _GetString
  003da	83 c4 04	 add	 esp, 4
  003dd	50		 push	 eax
  003de	68 21 a1 07 00	 push	 500001			; 0007a121H
  003e3	6a 00		 push	 0
  003e5	56		 push	 esi
  003e6	ff d7		 call	 edi

; 5638 : 						AppendMenuW (popup, MF_STRING, IDPM_REPAIR_FILESYS, GetString ("IDPM_REPAIR_FILESYS"));

  003e8	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@FIGCPPJ@IDPM_REPAIR_FILESYS?$AA@
  003ed	e8 00 00 00 00	 call	 _GetString
  003f2	83 c4 04	 add	 esp, 4
  003f5	50		 push	 eax
  003f6	68 22 a1 07 00	 push	 500002			; 0007a122H
  003fb	6a 00		 push	 0
  003fd	56		 push	 esi
  003fe	ff d7		 call	 edi

; 5639 : 						AppendMenu (popup, MF_SEPARATOR, 0, NULL);

  00400	6a 00		 push	 0
  00402	6a 00		 push	 0
  00404	68 00 08 00 00	 push	 2048			; 00000800H
  00409	56		 push	 esi
  0040a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16

; 5640 : 						AppendMenuW (popup, MF_STRING, IDPM_ADD_TO_FAVORITES, GetString ("IDPM_ADD_TO_FAVORITES"));

  00410	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KFNIGFKC@IDPM_ADD_TO_FAVORITES?$AA@
  00415	e8 00 00 00 00	 call	 _GetString
  0041a	83 c4 04	 add	 esp, 4
  0041d	50		 push	 eax
  0041e	68 26 a1 07 00	 push	 500006			; 0007a126H
  00423	6a 00		 push	 0
  00425	56		 push	 esi
  00426	ff d7		 call	 edi

; 5641 : 						AppendMenuW (popup, MF_STRING, IDPM_ADD_TO_SYSTEM_FAVORITES, GetString ("IDPM_ADD_TO_SYSTEM_FAVORITES"));

  00428	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DBKOJEDK@IDPM_ADD_TO_SYSTEM_FAVORITES?$AA@
  0042d	e8 00 00 00 00	 call	 _GetString
  00432	83 c4 04	 add	 esp, 4
  00435	50		 push	 eax
  00436	68 27 a1 07 00	 push	 500007			; 0007a127H
  0043b	6a 00		 push	 0
  0043d	56		 push	 esi
  0043e	ff d7		 call	 edi

; 5642 : 						AppendMenu (popup, MF_SEPARATOR, 0, NULL);

  00440	6a 00		 push	 0
  00442	6a 00		 push	 0
  00444	68 00 08 00 00	 push	 2048			; 00000800H
  00449	56		 push	 esi
  0044a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16

; 5643 : 						AppendMenuW (popup, MF_STRING, IDM_VOLUME_PROPERTIES, GetString ("IDPM_PROPERTIES"));

  00450	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DJOMNFMG@IDPM_PROPERTIES?$AA@
  00455	e8 00 00 00 00	 call	 _GetString
  0045a	83 c4 04	 add	 esp, 4
  0045d	50		 push	 eax
  0045e	68 57 9c 00 00	 push	 40023			; 00009c57H
  00463	6a 00		 push	 0
  00465	56		 push	 esi
  00466	ff d7		 call	 edi

; 5644 : 						break;

  00468	eb 0b		 jmp	 SHORT $LN210@MainDialog
$LN207@MainDialog:

; 5645 : 
; 5646 : 					case TC_MLIST_ITEM_SYS_PARTITION:
; 5647 : 					case TC_MLIST_ITEM_SYS_DRIVE:
; 5648 : 
; 5649 : 						// System partition/drive
; 5650 : 
; 5651 : 						PopulateSysEncContextMenu (popup, FALSE);

  0046a	6a 00		 push	 0
  0046c	56		 push	 esi
  0046d	e8 00 00 00 00	 call	 ?PopulateSysEncContextMenu@@YAXPAUHMENU__@@H@Z ; PopulateSysEncContextMenu
  00472	83 c4 08	 add	 esp, 8
$LN210@MainDialog:

; 5652 : 						break;
; 5653 : 					}
; 5654 : 
; 5655 : 					mPos=GetMessagePos();

  00475	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMessagePos@0

; 5656 : 
; 5657 : 					menuItem = TrackPopupMenu (popup,
; 5658 : 						TPM_RETURNCMD | TPM_LEFTBUTTON,
; 5659 : 						GET_X_LPARAM(mPos),
; 5660 : 						GET_Y_LPARAM(mPos),
; 5661 : 						0,
; 5662 : 						hwndDlg,
; 5663 : 						NULL);

  0047b	6a 00		 push	 0
  0047d	8b c8		 mov	 ecx, eax
  0047f	53		 push	 ebx
  00480	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00483	6a 00		 push	 0
  00485	0f bf d1	 movsx	 edx, cx
  00488	52		 push	 edx
  00489	98		 cwde
  0048a	50		 push	 eax
  0048b	68 00 01 00 00	 push	 256			; 00000100H
  00490	56		 push	 esi
  00491	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TrackPopupMenu@28

; 5664 : 
; 5665 : 					DestroyMenu (popup);

  00497	56		 push	 esi
  00498	8b f8		 mov	 edi, eax
  0049a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyMenu@4

; 5666 : 
; 5667 : 					switch (menuItem)

  004a0	81 ff 22 a1 07
	00		 cmp	 edi, 500002		; 0007a122H
  004a6	0f 8f cc 00 00
	00		 jg	 $LN475@MainDialog
  004ac	81 ff 21 a1 07
	00		 cmp	 edi, 500001		; 0007a121H
  004b2	7d 7e		 jge	 SHORT $LN200@MainDialog
  004b4	8b c7		 mov	 eax, edi
  004b6	2d 43 9c 00 00	 sub	 eax, 40003		; 00009c43H
  004bb	74 5a		 je	 SHORT $LN198@MainDialog
  004bd	83 e8 0b	 sub	 eax, 11			; 0000000bH
  004c0	74 24		 je	 SHORT $LN194@MainDialog
  004c2	83 e8 09	 sub	 eax, 9
  004c5	0f 85 6e 01 00
	00		 jne	 $LN188@MainDialog

; 5704 : 
; 5705 : 					case IDM_VOLUME_PROPERTIES:
; 5706 : 						DialogBoxParamW (hInst, 
; 5707 : 							MAKEINTRESOURCEW (IDD_VOLUME_PROPERTIES), hwndDlg,
; 5708 : 							(DLGPROC) VolumePropertiesDlgProc, (LPARAM) FALSE);

  004cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  004d1	50		 push	 eax
  004d2	68 00 00 00 00	 push	 OFFSET ?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z ; VolumePropertiesDlgProc
  004d7	53		 push	 ebx
  004d8	6a 6c		 push	 108			; 0000006cH
  004da	51		 push	 ecx
  004db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 5709 : 						break;

  004e1	e9 b6 fc ff ff	 jmp	 $LN349@MainDialog
$LN194@MainDialog:

; 5710 : 
; 5711 : 					case IDM_MOUNT_VOLUME:
; 5712 : 						if (!VolumeSelected(hwndDlg))

  004e6	53		 push	 ebx
  004e7	e8 00 00 00 00	 call	 _VolumeSelected
  004ec	83 c4 04	 add	 esp, 4
  004ef	85 c0		 test	 eax, eax

; 5713 : 						{
; 5714 : 							Warning ("NO_VOLUME_SELECTED");
; 5715 : 						}
; 5716 : 						else

  004f1	0f 84 4b 1b 00
	00		 je	 $LN1040@MainDialog

; 5717 : 						{
; 5718 : 							mountOptions = defaultMountOptions;

  004f7	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  004fc	be 00 00 00 00	 mov	 esi, OFFSET ?defaultMountOptions@@3UMountOptions@@A ; defaultMountOptions
  00501	bf 00 00 00 00	 mov	 edi, OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  00506	f3 a5		 rep movsd

; 5719 : 							bPrebootPasswordDlgMode = FALSE;

  00508	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bPrebootPasswordDlgMode, 0

; 5720 : 
; 5721 : 							if (CheckMountList ())
; 5722 : 								Mount (hwndDlg, 0, 0);
; 5723 : 						}
; 5724 : 						break;

  00512	e9 86 fd ff ff	 jmp	 $LN216@MainDialog
$LN198@MainDialog:

; 5686 : 						}
; 5687 : 						break;
; 5688 : 
; 5689 : 					case IDM_UNMOUNT_VOLUME:
; 5690 : 						if (CheckMountList ())

  00517	e8 00 00 00 00	 call	 _CheckMountList
  0051c	85 c0		 test	 eax, eax
  0051e	0f 84 78 fc ff
	ff		 je	 $LN349@MainDialog

; 5691 : 							Dismount (hwndDlg, 0);

  00524	33 c0		 xor	 eax, eax
  00526	8b fb		 mov	 edi, ebx
  00528	e8 00 00 00 00	 call	 _Dismount

; 5692 : 						break;

  0052d	e9 6a fc ff ff	 jmp	 $LN349@MainDialog
$LN200@MainDialog:

; 5678 : 
; 5679 : 					case IDPM_CHECK_FILESYS:
; 5680 : 					case IDPM_REPAIR_FILESYS:
; 5681 : 						{
; 5682 : 							LPARAM lLetter = GetSelectedLong (GetDlgItem (hwndDlg, IDC_DRIVELIST));

  00532	68 ef 03 00 00	 push	 1007			; 000003efH
  00537	53		 push	 ebx
  00538	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0053e	50		 push	 eax
  0053f	e8 00 00 00 00	 call	 _GetSelectedLong

; 5683 : 
; 5684 : 							if (LOWORD (lLetter) != 0xffff)

  00544	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00549	83 c4 04	 add	 esp, 4
  0054c	66 3b c2	 cmp	 ax, dx
  0054f	0f 84 47 fc ff
	ff		 je	 $LN349@MainDialog

; 5685 : 								CheckFilesystem ((char) HIWORD (lLetter) - 'A', menuItem == IDPM_REPAIR_FILESYS);

  00555	33 c9		 xor	 ecx, ecx
  00557	81 ff 22 a1 07
	00		 cmp	 edi, 500002		; 0007a122H
  0055d	0f 94 c1	 sete	 cl
  00560	c1 e8 10	 shr	 eax, 16			; 00000010H
  00563	0f be d0	 movsx	 edx, al
  00566	83 ea 41	 sub	 edx, 65			; 00000041H
  00569	51		 push	 ecx
  0056a	52		 push	 edx
  0056b	e8 00 00 00 00	 call	 _CheckFilesystem
  00570	83 c4 08	 add	 esp, 8
  00573	e9 24 fc ff ff	 jmp	 $LN349@MainDialog
$LN475@MainDialog:

; 5666 : 
; 5667 : 					switch (menuItem)

  00578	8d 87 dd 5e f8
	ff		 lea	 eax, DWORD PTR [edi-500003]
  0057e	83 f8 04	 cmp	 eax, 4
  00581	0f 87 b2 00 00
	00		 ja	 $LN188@MainDialog
  00587	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN1053@MainDialog[eax*4]
$LN204@MainDialog:

; 5668 : 					{
; 5669 : 					case IDPM_SELECT_FILE_AND_MOUNT:
; 5670 : 						if (SelectContainer (hwndDlg))

  0058e	8b f3		 mov	 esi, ebx
  00590	e8 00 00 00 00	 call	 ?SelectContainer@@YAHPAUHWND__@@@Z ; SelectContainer
$LN1031@MainDialog:
  00595	85 c0		 test	 eax, eax
  00597	0f 84 ff fb ff
	ff		 je	 $LN349@MainDialog

; 5671 : 							MountSelectedVolume (hwndDlg, FALSE);

  0059d	6a 00		 push	 0
  0059f	53		 push	 ebx
  005a0	e8 00 00 00 00	 call	 _MountSelectedVolume
  005a5	83 c4 08	 add	 esp, 8

; 5672 : 						break;

  005a8	e9 ef fb ff ff	 jmp	 $LN349@MainDialog
$LN202@MainDialog:

; 5673 : 
; 5674 : 					case IDPM_SELECT_DEVICE_AND_MOUNT:
; 5675 : 						if (SelectPartition (hwndDlg))

  005ad	8b f3		 mov	 esi, ebx
  005af	e8 00 00 00 00	 call	 ?SelectPartition@@YAHPAUHWND__@@@Z ; SelectPartition

; 5676 : 							MountSelectedVolume (hwndDlg, FALSE);
; 5677 : 						break;

  005b4	eb df		 jmp	 SHORT $LN1031@MainDialog
$LN196@MainDialog:

; 5693 : 
; 5694 : 					case IDPM_OPEN_VOLUME:
; 5695 : 						{
; 5696 : 							int state = GetItemLong(GetDlgItem (hwndDlg, IDC_DRIVELIST), ((LPNMITEMACTIVATE)lParam)->iItem );

  005b6	8b 7d e4	 mov	 edi, DWORD PTR _lParam$GSCopy$[ebp]
  005b9	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  005bc	50		 push	 eax
  005bd	68 ef 03 00 00	 push	 1007			; 000003efH
  005c2	53		 push	 ebx
  005c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  005c9	50		 push	 eax
  005ca	e8 00 00 00 00	 call	 _GetItemLong

; 5697 : 							nSelectedDriveIndex = ((LPNMITEMACTIVATE)lParam)->iItem;

  005cf	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  005d2	8b f0		 mov	 esi, eax
  005d4	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nSelectedDriveIndex@@3HA, ecx ; nSelectedDriveIndex

; 5698 : 
; 5699 : 							WaitCursor ();

  005da	e8 00 00 00 00	 call	 _WaitCursor

; 5700 : 							OpenVolumeExplorerWindow (HIWORD(state) - 'A');

  005df	c1 ee 10	 shr	 esi, 16			; 00000010H
  005e2	83 ee 41	 sub	 esi, 65			; 00000041H
  005e5	56		 push	 esi
  005e6	e8 00 00 00 00	 call	 _OpenVolumeExplorerWindow
  005eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5701 : 							NormalCursor ();

  005ee	e8 00 00 00 00	 call	 _NormalCursor

; 5702 : 						}
; 5703 : 						break;

  005f3	e9 a4 fb ff ff	 jmp	 $LN349@MainDialog
$LN190@MainDialog:

; 5725 : 
; 5726 : 					case IDPM_ADD_TO_FAVORITES:
; 5727 : 					case IDPM_ADD_TO_SYSTEM_FAVORITES:
; 5728 : 						{
; 5729 : 							LPARAM selectedDrive = GetSelectedLong (GetDlgItem (hwndDlg, IDC_DRIVELIST));

  005f8	68 ef 03 00 00	 push	 1007			; 000003efH
  005fd	53		 push	 ebx
  005fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00604	50		 push	 eax
  00605	e8 00 00 00 00	 call	 _GetSelectedLong
  0060a	83 c4 04	 add	 esp, 4

; 5730 : 
; 5731 : 							if (LOWORD (selectedDrive) == TC_MLIST_ITEM_NONSYS_VOL)

  0060d	66 83 f8 01	 cmp	 ax, 1
  00611	0f 85 85 fb ff
	ff		 jne	 $LN349@MainDialog

; 5732 : 								AddMountedVolumeToFavorites (hwndDlg, HIWORD (selectedDrive) - 'A', menuItem == IDPM_ADD_TO_SYSTEM_FAVORITES);

  00617	81 ff 27 a1 07
	00		 cmp	 edi, 500007		; 0007a127H
  0061d	0f 94 c2	 sete	 dl
  00620	0f b6 ca	 movzx	 ecx, dl
  00623	c1 e8 10	 shr	 eax, 16			; 00000010H
  00626	51		 push	 ecx
  00627	83 e8 41	 sub	 eax, 65			; 00000041H
  0062a	50		 push	 eax
  0062b	53		 push	 ebx
  0062c	e8 00 00 00 00	 call	 ?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z ; CipherShed::AddMountedVolumeToFavorites
  00631	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5733 : 						}
; 5734 : 						break;

  00634	e9 63 fb ff ff	 jmp	 $LN349@MainDialog
$LN188@MainDialog:

; 5735 : 
; 5736 : 					default:
; 5737 : 						SendMessage (MainDlg, WM_COMMAND, menuItem, NULL);

  00639	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0063f	6a 00		 push	 0
  00641	57		 push	 edi
  00642	68 11 01 00 00	 push	 273			; 00000111H
  00647	52		 push	 edx
  00648	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 5738 : 						break;
; 5739 : 					}
; 5740 : 					return 1;

  0064e	e9 49 fb ff ff	 jmp	 $LN349@MainDialog
$LN6@MainDialog:

; 6551 : 
; 6552 : 	case WM_COPYDATA:
; 6553 : 		{
; 6554 : 			PCOPYDATASTRUCT cd = (PCOPYDATASTRUCT)lParam;
; 6555 : 			if (memcmp (&cd->dwData, WM_COPY_SET_VOLUME_NAME, 4) == 0)

  00653	81 3f 56 4e 41
	4d		 cmp	 DWORD PTR [edi], 1296125526 ; 4d414e56H
  00659	0f 85 3d fb ff
	ff		 jne	 $LN349@MainDialog

; 6556 : 			{
; 6557 : 				if (cd->cbData > 0)

  0065f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00662	3b c2		 cmp	 eax, edx
  00664	76 27		 jbe	 SHORT $LN4@MainDialog

; 6558 : 				{
; 6559 : 					((char *) cd->lpData)[cd->cbData - 1] = 0;

  00666	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00669	88 54 08 ff	 mov	 BYTE PTR [eax+ecx-1], dl

; 6560 : 					AddComboItem (GetDlgItem (hwndDlg, IDC_VOLUME), (char *)cd->lpData, bHistory);

  0066d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHistory
  00673	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00676	52		 push	 edx
  00677	50		 push	 eax
  00678	68 0a 04 00 00	 push	 1034			; 0000040aH
  0067d	53		 push	 ebx
  0067e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00684	50		 push	 eax
  00685	e8 00 00 00 00	 call	 _AddComboItem
  0068a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@MainDialog:

; 6561 : 				}
; 6562 : 
; 6563 : 				EnableDisableButtons (hwndDlg);

  0068d	53		 push	 ebx
  0068e	e8 00 00 00 00	 call	 _EnableDisableButtons
  00693	83 c4 04	 add	 esp, 4

; 6564 : 				SetFocus (GetDlgItem (hwndDlg, IDC_DRIVELIST));

  00696	68 ef 03 00 00	 push	 1007			; 000003efH
  0069b	53		 push	 ebx
  0069c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  006a2	50		 push	 eax
  006a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 6565 : 			}
; 6566 : 		}
; 6567 : 		return 1;

  006a9	e9 ee fa ff ff	 jmp	 $LN349@MainDialog
$LN454@MainDialog:

; 4669 : 
; 4670 : 	case WM_INITDIALOG:
; 4671 : 		{
; 4672 : 			int exitCode = 0;

  006ae	89 55 e8	 mov	 DWORD PTR _exitCode$138050[ebp], edx

; 4673 : 			int modeOfOperation;
; 4674 : 
; 4675 : 			MainDlg = hwndDlg;

  006b1	89 1d 00 00 00
	00		 mov	 DWORD PTR _MainDlg, ebx

; 4676 : 
; 4677 : 			if (IsCipherShedInstallerRunning())

  006b7	e8 00 00 00 00	 call	 _IsCipherShedInstallerRunning
  006bc	85 c0		 test	 eax, eax
  006be	74 0d		 je	 SHORT $LN453@MainDialog

; 4678 : 				AbortProcess ("TC_INSTALLER_IS_RUNNING");

  006c0	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@
  006c5	e8 00 00 00 00	 call	 _AbortProcess
  006ca	83 c4 04	 add	 esp, 4
$LN453@MainDialog:

; 4679 : 
; 4680 : 			// Set critical default options in case UsePreferences is false
; 4681 : 			bPreserveTimestamp = defaultMountOptions.PreserveTimestamp = TRUE;

  006cd	b8 01 00 00 00	 mov	 eax, 1
  006d2	a3 0c 00 00 00	 mov	 DWORD PTR ?defaultMountOptions@@3UMountOptions@@A+12, eax
  006d7	a3 00 00 00 00	 mov	 DWORD PTR _bPreserveTimestamp, eax

; 4682 : 
; 4683 : 			ResetWrongPwdRetryCount ();

  006dc	e8 00 00 00 00	 call	 _ResetWrongPwdRetryCount

; 4684 : 
; 4685 : 			ExtractCommandLine (hwndDlg, (char *) lParam);

  006e1	57		 push	 edi
  006e2	53		 push	 ebx
  006e3	e8 00 00 00 00	 call	 _ExtractCommandLine
  006e8	83 c4 08	 add	 esp, 8

; 4686 : 
; 4687 : 			try
; 4688 : 			{
; 4689 : 				BootEncStatus = BootEncObj->GetStatus();

  006eb	8d 8d 4a fb ff
	ff		 lea	 ecx, DWORD PTR $T207817[ebp]
  006f1	51		 push	 ecx
  006f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  006f8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  006ff	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00704	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00709	8b f0		 mov	 esi, eax
  0070b	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00710	f3 a5		 rep movsd
  00712	66 a5		 movsw

; 4690 : 				RecentBootEncStatus = BootEncStatus;

  00714	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00719	be 00 00 00 00	 mov	 esi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  0071e	bf 00 00 00 00	 mov	 edi, OFFSET ?RecentBootEncStatus@@3UBootEncryptionStatus@@A ; RecentBootEncStatus
  00723	f3 a5		 rep movsd
  00725	66 a5		 movsw
  00727	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN955@MainDialog:

; 4696 : 
; 4697 : 			if (UsePreferences)

  0072e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?UsePreferences@@3HA, 0 ; UsePreferences
  00735	8b 5d e0	 mov	 ebx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00738	74 13		 je	 SHORT $LN451@MainDialog

; 4698 : 			{
; 4699 : 				// General preferences
; 4700 : 				LoadSettings (hwndDlg);

  0073a	53		 push	 ebx
  0073b	e8 00 00 00 00	 call	 _LoadSettings
  00740	83 c4 04	 add	 esp, 4

; 4701 : 
; 4702 : 				// Keyfiles
; 4703 : 				LoadDefaultKeyFilesParam ();

  00743	e8 00 00 00 00	 call	 _LoadDefaultKeyFilesParam

; 4704 : 				RestoreDefaultKeyFilesParam ();

  00748	e8 00 00 00 00	 call	 _RestoreDefaultKeyFilesParam
$LN451@MainDialog:

; 4705 : 			}
; 4706 : 
; 4707 : 			if (ComServerMode)

  0074d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ComServerMode@@3HA, 0 ; ComServerMode
  00754	74 33		 je	 SHORT $LN450@MainDialog

; 4708 : 			{
; 4709 : 				InitDialog (hwndDlg);

  00756	53		 push	 ebx
  00757	e8 00 00 00 00	 call	 _InitDialog
  0075c	83 c4 04	 add	 esp, 4

; 4710 : 
; 4711 : 				if (!ComServerMain ())

  0075f	e8 00 00 00 00	 call	 _ComServerMain
  00764	85 c0		 test	 eax, eax
  00766	0f 85 ca 07 00
	00		 jne	 $LN449@MainDialog

; 4712 : 				{
; 4713 : 					handleWin32Error (hwndDlg);

  0076c	53		 push	 ebx
  0076d	e8 00 00 00 00	 call	 _handleWin32Error
  00772	83 c4 04	 add	 esp, 4

; 4714 : 					exit (1);

  00775	6a 01		 push	 1
  00777	e8 00 00 00 00	 call	 _exit
__catch$_MainDialogProc@16$0:

; 4691 : 			}
; 4692 : 			catch (...)
; 4693 : 			{
; 4694 : 				// NOP
; 4695 : 			}

  0077c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00783	b8 00 00 00 00	 mov	 eax, $LN955@MainDialog
  00788	c3		 ret	 0
$LN450@MainDialog:

; 4715 : 				}
; 4716 : 				exit (0);
; 4717 : 			}
; 4718 : 
; 4719 : 			if (CmdMountOptionsValid)

  00789	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?CmdMountOptionsValid@@3HA, 0 ; CmdMountOptionsValid
  00790	74 11		 je	 SHORT $LN448@MainDialog

; 4720 : 				mountOptions = CmdMountOptions;

  00792	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00797	be 00 00 00 00	 mov	 esi, OFFSET ?CmdMountOptions@@3UMountOptions@@A ; CmdMountOptions
  0079c	bf 00 00 00 00	 mov	 edi, OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  007a1	f3 a5		 rep movsd
$LN448@MainDialog:

; 4721 : 
; 4722 : 			InitMainDialog (hwndDlg);

  007a3	53		 push	 ebx
  007a4	e8 00 00 00 00	 call	 ?InitMainDialog@@YAXPAUHWND__@@@Z ; InitMainDialog
  007a9	83 c4 04	 add	 esp, 4

; 4723 : 
; 4724 : 			try
; 4725 : 			{

  007ac	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2

; 4726 : 				if (IsHiddenOSRunning())

  007b3	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  007b8	85 c0		 test	 eax, eax
  007ba	74 1f		 je	 SHORT $LN446@MainDialog

; 4727 : 				{
; 4728 : 					if (BootEncObj->GetInstalledBootLoaderVersion() > VERSION_NUM)

  007bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  007c2	e8 00 00 00 00	 call	 ?GetInstalledBootLoaderVersion@BootEncryption@CipherShed@@QAEGXZ ; CipherShed::BootEncryption::GetInstalledBootLoaderVersion
  007c7	0f b7 c0	 movzx	 eax, ax
  007ca	ba 41 07 00 00	 mov	 edx, 1857		; 00000741H
  007cf	66 3b c2	 cmp	 ax, dx
  007d2	76 3a		 jbe	 SHORT $LN443@MainDialog

; 4729 : 						Warning ("UPDATE_TC_IN_HIDDEN_OS_TOO");

  007d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@CDBHBGFI@UPDATE_TC_IN_HIDDEN_OS_TOO?$AA@

; 4730 : 				}
; 4731 : 				else if (SysDriveOrPartitionFullyEncrypted (TRUE)

  007d9	eb 2b		 jmp	 SHORT $LN1034@MainDialog
$LN446@MainDialog:

; 4732 : 					&& BootEncObj->GetInstalledBootLoaderVersion() != VERSION_NUM)

  007db	6a 01		 push	 1
  007dd	e8 00 00 00 00	 call	 ?SysDriveOrPartitionFullyEncrypted@@YAHH@Z ; SysDriveOrPartitionFullyEncrypted
  007e2	83 c4 04	 add	 esp, 4
  007e5	85 c0		 test	 eax, eax
  007e7	74 25		 je	 SHORT $LN443@MainDialog
  007e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  007ef	e8 00 00 00 00	 call	 ?GetInstalledBootLoaderVersion@BootEncryption@CipherShed@@QAEGXZ ; CipherShed::BootEncryption::GetInstalledBootLoaderVersion
  007f4	0f b7 c0	 movzx	 eax, ax
  007f7	b9 41 07 00 00	 mov	 ecx, 1857		; 00000741H
  007fc	66 3b c1	 cmp	 ax, cx
  007ff	74 0d		 je	 SHORT $LN443@MainDialog

; 4733 : 				{
; 4734 : 					Warning ("BOOT_LOADER_VERSION_DIFFERENT_FROM_DRIVER_VERSION");

  00801	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PODPMMAO@BOOT_LOADER_VERSION_DIFFERENT_FR@
$LN1034@MainDialog:
  00806	e8 00 00 00 00	 call	 _Warning
  0080b	83 c4 04	 add	 esp, 4
$LN443@MainDialog:
  0080e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN957@MainDialog:

; 4738 : 
; 4739 : 			// Automount
; 4740 : 			if (bAuto || (Quit && szFileName[0] != 0))

  00815	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bAuto@@3HA, 0 ; bAuto
  0081c	8b 5d e0	 mov	 ebx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  0081f	75 1a		 jne	 SHORT $LN441@MainDialog
  00821	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?Quit@@3HA, 0	; Quit
  00828	0f 84 a6 04 00
	00		 je	 $LN395@MainDialog
  0082e	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?szFileName@@3PADA, 0
  00835	0f 84 99 04 00
	00		 je	 $LN395@MainDialog
$LN441@MainDialog:

; 4741 : 			{
; 4742 : 				// No drive letter specified on command line
; 4743 : 				if (commandLineDrive == 0)

  0083b	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?commandLineDrive@@3DA, 0 ; commandLineDrive
  00842	75 0c		 jne	 SHORT $LN440@MainDialog

; 4744 : 					szDriveLetter[0] = (char) GetFirstAvailableDrive () + 'A';

  00844	e8 00 00 00 00	 call	 _GetFirstAvailableDrive
  00849	04 41		 add	 al, 65			; 00000041H
  0084b	a2 00 00 00 00	 mov	 BYTE PTR ?szDriveLetter@@3PADA, al
$LN440@MainDialog:

; 4745 : 
; 4746 : 				if (bAutoMountDevices)

  00850	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bAutoMountDevices@@3HA, 0 ; bAutoMountDevices
  00857	0f 84 90 00 00
	00		 je	 $LN437@MainDialog

; 4747 : 				{
; 4748 : 					defaultMountOptions = mountOptions;
; 4749 : 					if (FirstCmdKeyFile)

  0085d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?FirstCmdKeyFile@@3PAUKeyFileStruct@@A ; FirstCmdKeyFile
  00862	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00867	be 00 00 00 00	 mov	 esi, OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  0086c	bf 00 00 00 00	 mov	 edi, OFFSET ?defaultMountOptions@@3UMountOptions@@A ; defaultMountOptions
  00871	f3 a5		 rep movsd
  00873	85 c0		 test	 eax, eax
  00875	74 30		 je	 SHORT $LN438@MainDialog

; 4750 : 					{
; 4751 : 						KeyFilesEnable = defaultKeyFilesParam.EnableKeyFiles = TRUE;

  00877	b9 01 00 00 00	 mov	 ecx, 1

; 4752 : 						FirstKeyFile = KeyFileCloneAll (FirstCmdKeyFile);

  0087c	50		 push	 eax
  0087d	89 0d 00 00 00
	00		 mov	 DWORD PTR _defaultKeyFilesParam, ecx
  00883	89 0d 00 00 00
	00		 mov	 DWORD PTR _KeyFilesEnable, ecx
  00889	e8 00 00 00 00	 call	 _KeyFileCloneAll

; 4753 : 						defaultKeyFilesParam.FirstKeyFile = KeyFileCloneAll (FirstCmdKeyFile);

  0088e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?FirstCmdKeyFile@@3PAUKeyFileStruct@@A ; FirstCmdKeyFile
  00894	52		 push	 edx
  00895	a3 00 00 00 00	 mov	 DWORD PTR _FirstKeyFile, eax
  0089a	e8 00 00 00 00	 call	 _KeyFileCloneAll
  0089f	83 c4 08	 add	 esp, 8
  008a2	a3 04 00 00 00	 mov	 DWORD PTR _defaultKeyFilesParam+4, eax
$LN438@MainDialog:

; 4754 : 					}
; 4755 : 
; 4756 : 					if (!MountAllDevices (hwndDlg, !Silent && !CmdVolumePasswordValid && IsPasswordCacheEmpty()))

  008a7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  008ae	75 26		 jne	 SHORT $LN460@MainDialog
  008b0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?CmdVolumePasswordValid@@3HA, 0 ; CmdVolumePasswordValid
  008b7	75 1d		 jne	 SHORT $LN460@MainDialog
  008b9	e8 00 00 00 00	 call	 _IsPasswordCacheEmpty
  008be	85 c0		 test	 eax, eax
  008c0	74 14		 je	 SHORT $LN460@MainDialog
  008c2	b8 01 00 00 00	 mov	 eax, 1
  008c7	eb 0f		 jmp	 SHORT $LN461@MainDialog
__catch$_MainDialogProc@16$2:

; 4735 : 				}
; 4736 : 			} 
; 4737 : 			catch (...) { }

  008c9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  008d0	b8 00 00 00 00	 mov	 eax, $LN957@MainDialog
  008d5	c3		 ret	 0
$LN460@MainDialog:

; 4754 : 					}
; 4755 : 
; 4756 : 					if (!MountAllDevices (hwndDlg, !Silent && !CmdVolumePasswordValid && IsPasswordCacheEmpty()))

  008d6	33 c0		 xor	 eax, eax
$LN461@MainDialog:
  008d8	50		 push	 eax
  008d9	53		 push	 ebx
  008da	e8 00 00 00 00	 call	 ?MountAllDevices@@YAHPAUHWND__@@H@Z ; MountAllDevices
  008df	83 c4 08	 add	 esp, 8
  008e2	85 c0		 test	 eax, eax
  008e4	75 07		 jne	 SHORT $LN437@MainDialog

; 4757 : 						exitCode = 1;

  008e6	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _exitCode$138050[ebp], 1
$LN437@MainDialog:

; 4758 : 				}
; 4759 : 
; 4760 : 				if (bAutoMountFavorites)

  008ed	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bAutoMountFavorites@@3HA, 0 ; bAutoMountFavorites
  008f4	0f 84 94 00 00
	00		 je	 $LN434@MainDialog

; 4761 : 				{
; 4762 : 					defaultMountOptions = mountOptions;
; 4763 : 					if (FirstCmdKeyFile)

  008fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?FirstCmdKeyFile@@3PAUKeyFileStruct@@A ; FirstCmdKeyFile
  008ff	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00904	be 00 00 00 00	 mov	 esi, OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  00909	bf 00 00 00 00	 mov	 edi, OFFSET ?defaultMountOptions@@3UMountOptions@@A ; defaultMountOptions
  0090e	f3 a5		 rep movsd
  00910	85 c0		 test	 eax, eax
  00912	74 2f		 je	 SHORT $LN435@MainDialog

; 4764 : 					{
; 4765 : 						KeyFilesEnable = defaultKeyFilesParam.EnableKeyFiles = TRUE;

  00914	b9 01 00 00 00	 mov	 ecx, 1

; 4766 : 						FirstKeyFile = KeyFileCloneAll (FirstCmdKeyFile);

  00919	50		 push	 eax
  0091a	89 0d 00 00 00
	00		 mov	 DWORD PTR _defaultKeyFilesParam, ecx
  00920	89 0d 00 00 00
	00		 mov	 DWORD PTR _KeyFilesEnable, ecx
  00926	e8 00 00 00 00	 call	 _KeyFileCloneAll
  0092b	a3 00 00 00 00	 mov	 DWORD PTR _FirstKeyFile, eax

; 4767 : 						defaultKeyFilesParam.FirstKeyFile = KeyFileCloneAll (FirstCmdKeyFile);

  00930	a1 00 00 00 00	 mov	 eax, DWORD PTR ?FirstCmdKeyFile@@3PAUKeyFileStruct@@A ; FirstCmdKeyFile
  00935	50		 push	 eax
  00936	e8 00 00 00 00	 call	 _KeyFileCloneAll
  0093b	83 c4 08	 add	 esp, 8
  0093e	a3 04 00 00 00	 mov	 DWORD PTR _defaultKeyFilesParam+4, eax
$LN435@MainDialog:

; 4768 : 					}
; 4769 : 
; 4770 : 					if (!MountFavoriteVolumes (FALSE, LogOn))

  00943	8d 8d 20 fc ff
	ff		 lea	 ecx, DWORD PTR $T207821[ebp]
  00949	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@XZ ; CipherShed::FavoriteVolume::FavoriteVolume
  0094e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?LogOn@@3HA ; LogOn
  00954	50		 push	 eax
  00955	6a 00		 push	 0
  00957	51		 push	 ecx
  00958	6a 00		 push	 0
  0095a	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  00961	e8 00 00 00 00	 call	 ?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z ; MountFavoriteVolumes
  00966	83 c4 10	 add	 esp, 16			; 00000010H
  00969	85 c0		 test	 eax, eax
  0096b	8d 8d 20 fc ff
	ff		 lea	 ecx, DWORD PTR $T207821[ebp]
  00971	0f 94 c3	 sete	 bl
  00974	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0097b	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  00980	84 db		 test	 bl, bl

; 4771 : 						exitCode = 1;

  00982	8b 5d e0	 mov	 ebx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00985	74 07		 je	 SHORT $LN434@MainDialog
  00987	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _exitCode$138050[ebp], 1
$LN434@MainDialog:

; 4772 : 				}
; 4773 : 
; 4774 : 				if (szFileName[0] != 0 && !IsMountedVolume (szFileName))

  0098e	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?szFileName@@3PADA, 0
  00995	0f 84 d0 02 00
	00		 je	 $LN433@MainDialog
  0099b	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  009a0	e8 00 00 00 00	 call	 _IsMountedVolume
  009a5	83 c4 04	 add	 esp, 4
  009a8	85 c0		 test	 eax, eax
  009aa	0f 85 bb 02 00
	00		 jne	 $LN433@MainDialog

; 4775 : 				{
; 4776 : 					BOOL mounted;
; 4777 : 
; 4778 : 					// Cached password
; 4779 : 					mounted = MountVolume (hwndDlg, szDriveLetter[0] - 'A', szFileName, NULL, bCacheInDriver, bForceMount, &mountOptions, Silent, FALSE);

  009b0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _Silent
  009b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bCacheInDriver@@3HA ; bCacheInDriver
  009bc	50		 push	 eax
  009bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bForceMount@@3HA ; bForceMount
  009c2	52		 push	 edx
  009c3	0f be 15 00 00
	00 00		 movsx	 edx, BYTE PTR ?szDriveLetter@@3PADA
  009ca	68 00 00 00 00	 push	 OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  009cf	50		 push	 eax
  009d0	51		 push	 ecx
  009d1	6a 00		 push	 0
  009d3	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  009d8	83 ea 41	 sub	 edx, 65			; 00000041H
  009db	52		 push	 edx
  009dc	53		 push	 ebx
  009dd	e8 00 00 00 00	 call	 _MountVolume
  009e2	8b f8		 mov	 edi, eax
  009e4	83 c4 24	 add	 esp, 36			; 00000024H

; 4780 : 
; 4781 : 					// Command line password or keyfiles
; 4782 : 					if (!mounted && (CmdVolumePassword.Length != 0 || FirstCmdKeyFile))

  009e7	85 ff		 test	 edi, edi
  009e9	0f 85 8b 00 00
	00		 jne	 $LN427@MainDialog
  009ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?CmdVolumePassword@@3UPassword@@A
  009f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?FirstCmdKeyFile@@3PAUKeyFileStruct@@A ; FirstCmdKeyFile
  009fa	85 c9		 test	 ecx, ecx
  009fc	75 08		 jne	 SHORT $LN431@MainDialog
  009fe	85 c0		 test	 eax, eax
  00a00	0f 84 9a 00 00
	00		 je	 $LL423@MainDialog
$LN431@MainDialog:

; 4783 : 					{
; 4784 : 						BOOL reportBadPasswd = CmdVolumePassword.Length > 0;

  00a06	33 d2		 xor	 edx, edx
  00a08	3b d1		 cmp	 edx, ecx
  00a0a	1b f6		 sbb	 esi, esi
  00a0c	f7 de		 neg	 esi

; 4785 : 
; 4786 : 						if (FirstCmdKeyFile)

  00a0e	85 c0		 test	 eax, eax
  00a10	74 0e		 je	 SHORT $LN430@MainDialog

; 4787 : 							KeyFilesApply (&CmdVolumePassword, FirstCmdKeyFile);

  00a12	50		 push	 eax
  00a13	68 00 00 00 00	 push	 OFFSET ?CmdVolumePassword@@3UPassword@@A ; CmdVolumePassword
  00a18	e8 00 00 00 00	 call	 _KeyFilesApply
  00a1d	83 c4 08	 add	 esp, 8
$LN430@MainDialog:

; 4788 : 
; 4789 : 						mounted = MountVolume (hwndDlg, szDriveLetter[0] - 'A',
; 4790 : 							szFileName, &CmdVolumePassword, bCacheInDriver, bForceMount,
; 4791 : 							&mountOptions, Silent, reportBadPasswd);

  00a20	a1 00 00 00 00	 mov	 eax, DWORD PTR _Silent
  00a25	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bForceMount@@3HA ; bForceMount
  00a2b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bCacheInDriver@@3HA ; bCacheInDriver
  00a31	56		 push	 esi
  00a32	50		 push	 eax
  00a33	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR ?szDriveLetter@@3PADA
  00a3a	68 00 00 00 00	 push	 OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  00a3f	51		 push	 ecx
  00a40	52		 push	 edx
  00a41	68 00 00 00 00	 push	 OFFSET ?CmdVolumePassword@@3UPassword@@A ; CmdVolumePassword
  00a46	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00a4b	83 e8 41	 sub	 eax, 65			; 00000041H
  00a4e	50		 push	 eax
  00a4f	53		 push	 ebx
  00a50	e8 00 00 00 00	 call	 _MountVolume

; 4792 : 
; 4793 : 						burn (&CmdVolumePassword, sizeof (CmdVolumePassword));

  00a55	ba 00 00 00 00	 mov	 edx, OFFSET ?CmdVolumePassword@@3UPassword@@A ; CmdVolumePassword
  00a5a	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00a5f	8b f8		 mov	 edi, eax
  00a61	83 c4 24	 add	 esp, 36			; 00000024H
  00a64	8b f1		 mov	 esi, ecx
  00a66	8b c2		 mov	 eax, edx
$LL530@MainDialog:
  00a68	c6 00 00	 mov	 BYTE PTR [eax], 0
  00a6b	40		 inc	 eax
  00a6c	83 ee 01	 sub	 esi, 1
  00a6f	75 f7		 jne	 SHORT $LL530@MainDialog
$LL426@MainDialog:
  00a71	49		 dec	 ecx
  00a72	c6 02 00	 mov	 BYTE PTR [edx], 0
  00a75	42		 inc	 edx
  00a76	85 c9		 test	 ecx, ecx
  00a78	75 f7		 jne	 SHORT $LL426@MainDialog
$LN427@MainDialog:

; 4794 : 					}
; 4795 : 
; 4796 : 					if (FirstCmdKeyFile)

  00a7a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?FirstCmdKeyFile@@3PAUKeyFileStruct@@A ; FirstCmdKeyFile
  00a7f	85 c0		 test	 eax, eax
  00a81	74 0f		 je	 SHORT $LN831@MainDialog

; 4797 : 					{
; 4798 : 						FirstKeyFile = FirstCmdKeyFile;

  00a83	a3 00 00 00 00	 mov	 DWORD PTR _FirstKeyFile, eax

; 4799 : 						KeyFilesEnable = TRUE;

  00a88	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _KeyFilesEnable, 1
$LN831@MainDialog:

; 4800 : 					}
; 4801 : 
; 4802 : 					// Ask user for password
; 4803 : 					while (!mounted && !Silent)

  00a92	85 ff		 test	 edi, edi
  00a94	0f 85 fc 00 00
	00		 jne	 $LN850@MainDialog
  00a9a	8d 9b 00 00 00
	00		 npad	 6
$LL423@MainDialog:
  00aa0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  00aa7	0f 85 e9 00 00
	00		 jne	 $LN850@MainDialog

; 4804 : 					{
; 4805 : 						VolumePassword.Length = 0;

  00aad	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?VolumePassword@@3UPassword@@A, 0

; 4806 : 
; 4807 : 						strcpy (PasswordDlgVolume, szFileName);

  00ab7	33 c0		 xor	 eax, eax
  00ab9	8d a4 24 00 00
	00 00		 npad	 7
$LL462@MainDialog:
  00ac0	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?szFileName@@3PADA[eax]
  00ac6	88 88 00 00 00
	00		 mov	 BYTE PTR _PasswordDlgVolume[eax], cl
  00acc	40		 inc	 eax
  00acd	84 c9		 test	 cl, cl
  00acf	75 ef		 jne	 SHORT $LL462@MainDialog

; 4808 : 						if (!AskVolumePassword (hwndDlg, &VolumePassword, NULL, TRUE))

  00ad1	6a 01		 push	 1
  00ad3	33 c0		 xor	 eax, eax
  00ad5	b9 00 00 00 00	 mov	 ecx, OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  00ada	8b d3		 mov	 edx, ebx
  00adc	e8 00 00 00 00	 call	 ?AskVolumePassword@@YAHPAUHWND__@@PAUPassword@@PADH@Z ; AskVolumePassword
  00ae1	83 c4 04	 add	 esp, 4
  00ae4	85 c0		 test	 eax, eax
  00ae6	0f 84 aa 00 00
	00		 je	 $LN850@MainDialog

; 4809 : 							break;
; 4810 : 
; 4811 : 						WaitCursor ();

  00aec	e8 00 00 00 00	 call	 _WaitCursor

; 4812 : 
; 4813 : 						if (KeyFilesEnable && FirstKeyFile)

  00af1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  00af8	74 17		 je	 SHORT $LN420@MainDialog
  00afa	a1 00 00 00 00	 mov	 eax, DWORD PTR _FirstKeyFile
  00aff	85 c0		 test	 eax, eax
  00b01	74 0e		 je	 SHORT $LN420@MainDialog

; 4814 : 							KeyFilesApply (&VolumePassword, FirstKeyFile);

  00b03	50		 push	 eax
  00b04	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  00b09	e8 00 00 00 00	 call	 _KeyFilesApply
  00b0e	83 c4 08	 add	 esp, 8
$LN420@MainDialog:

; 4815 : 
; 4816 : 						mounted = MountVolume (hwndDlg, szDriveLetter[0] - 'A', szFileName, &VolumePassword, bCacheInDriver, bForceMount, &mountOptions, FALSE, TRUE);

  00b11	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bForceMount@@3HA ; bForceMount
  00b17	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bCacheInDriver@@3HA ; bCacheInDriver
  00b1d	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR ?szDriveLetter@@3PADA
  00b24	6a 01		 push	 1
  00b26	6a 00		 push	 0
  00b28	68 00 00 00 00	 push	 OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  00b2d	51		 push	 ecx
  00b2e	52		 push	 edx
  00b2f	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  00b34	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00b39	83 e8 41	 sub	 eax, 65			; 00000041H
  00b3c	50		 push	 eax
  00b3d	53		 push	 ebx
  00b3e	e8 00 00 00 00	 call	 _MountVolume

; 4817 : 
; 4818 : 						burn (&VolumePassword, sizeof (VolumePassword));

  00b43	ba 00 00 00 00	 mov	 edx, OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  00b48	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00b4d	8b f8		 mov	 edi, eax
  00b4f	83 c4 24	 add	 esp, 36			; 00000024H
  00b52	8b f1		 mov	 esi, ecx
  00b54	8b c2		 mov	 eax, edx
$LL534@MainDialog:
  00b56	c6 00 00	 mov	 BYTE PTR [eax], 0
  00b59	40		 inc	 eax
  00b5a	83 ee 01	 sub	 esi, 1
  00b5d	75 f7		 jne	 SHORT $LL534@MainDialog
  00b5f	90		 npad	 1
$LL416@MainDialog:
  00b60	49		 dec	 ecx
  00b61	c6 02 00	 mov	 BYTE PTR [edx], 0
  00b64	42		 inc	 edx
  00b65	85 c9		 test	 ecx, ecx
  00b67	75 f7		 jne	 SHORT $LL416@MainDialog

; 4819 : 						burn (&mountOptions.ProtectedHidVolPassword, sizeof (mountOptions.ProtectedHidVolPassword));

  00b69	ba 14 00 00 00	 mov	 edx, OFFSET ?mountOptions@@3UMountOptions@@A+20
  00b6e	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00b73	8b f1		 mov	 esi, ecx
  00b75	8b c2		 mov	 eax, edx
$LL538@MainDialog:
  00b77	c6 00 00	 mov	 BYTE PTR [eax], 0
  00b7a	40		 inc	 eax
  00b7b	83 ee 01	 sub	 esi, 1
  00b7e	75 f7		 jne	 SHORT $LL538@MainDialog
$LL411@MainDialog:
  00b80	49		 dec	 ecx
  00b81	c6 02 00	 mov	 BYTE PTR [edx], 0
  00b84	42		 inc	 edx
  00b85	85 c9		 test	 ecx, ecx
  00b87	75 f7		 jne	 SHORT $LL411@MainDialog

; 4820 : 
; 4821 : 						NormalCursor ();

  00b89	e8 00 00 00 00	 call	 _NormalCursor
  00b8e	85 ff		 test	 edi, edi
  00b90	0f 84 0a ff ff
	ff		 je	 $LL423@MainDialog
$LN850@MainDialog:

; 4822 : 					}
; 4823 : 
; 4824 : 					if (UsePreferences)

  00b96	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?UsePreferences@@3HA, 0 ; UsePreferences
  00b9d	74 11		 je	 SHORT $LN409@MainDialog

; 4825 : 					{
; 4826 : 						RestoreDefaultKeyFilesParam ();

  00b9f	e8 00 00 00 00	 call	 _RestoreDefaultKeyFilesParam

; 4827 : 						bCacheInDriver = bCacheInDriverDefault;

  00ba4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bCacheInDriverDefault@@3HA ; bCacheInDriverDefault
  00baa	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bCacheInDriver@@3HA, ecx ; bCacheInDriver
$LN409@MainDialog:

; 4828 : 					}
; 4829 : 
; 4830 : 					if (mounted > 0)

  00bb0	85 ff		 test	 edi, edi
  00bb2	0f 8e aa 00 00
	00		 jle	 $LN408@MainDialog

; 4831 : 					{
; 4832 : 						if (bBeep) 

  00bb8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bBeep@@3HA, 0 ; bBeep
  00bbf	74 08		 je	 SHORT $LN407@MainDialog

; 4833 : 							MessageBeep (0xFFFFFFFF);

  00bc1	6a ff		 push	 -1
  00bc3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBeep@4
$LN407@MainDialog:

; 4834 : 
; 4835 : 						if (bExplore) 

  00bc9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bExplore, 0
  00bd0	74 13		 je	 SHORT $LN406@MainDialog

; 4836 : 							OpenVolumeExplorerWindow (szDriveLetter[0] - 'A');

  00bd2	0f be 15 00 00
	00 00		 movsx	 edx, BYTE PTR ?szDriveLetter@@3PADA
  00bd9	83 ea 41	 sub	 edx, 65			; 00000041H
  00bdc	52		 push	 edx
  00bdd	e8 00 00 00 00	 call	 _OpenVolumeExplorerWindow
  00be2	83 c4 04	 add	 esp, 4
$LN406@MainDialog:

; 4837 : 
; 4838 : 						RefreshMainDlg(hwndDlg);

  00be5	53		 push	 ebx
  00be6	e8 00 00 00 00	 call	 ?RefreshMainDlg@@YAXPAUHWND__@@@Z ; RefreshMainDlg
  00beb	83 c4 04	 add	 esp, 4

; 4839 : 
; 4840 : 						if(!Silent)

  00bee	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  00bf5	0f 85 c7 00 00
	00		 jne	 $LN396@MainDialog

; 4841 : 						{
; 4842 : 							// Check for deprecated CBC mode
; 4843 : 							modeOfOperation = GetModeOfOperationByDriveNo (szDriveLetter[0] - 'A');

  00bfb	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR ?szDriveLetter@@3PADA
  00c02	83 e8 41	 sub	 eax, 65			; 00000041H
  00c05	50		 push	 eax
  00c06	e8 00 00 00 00	 call	 _GetModeOfOperationByDriveNo
  00c0b	83 c4 04	 add	 esp, 4

; 4844 : 							if (modeOfOperation == CBC || modeOfOperation == OUTER_CBC)

  00c0e	83 f8 03	 cmp	 eax, 3
  00c11	74 05		 je	 SHORT $LN403@MainDialog
  00c13	83 f8 04	 cmp	 eax, 4
  00c16	75 0d		 jne	 SHORT $LN404@MainDialog
$LN403@MainDialog:

; 4845 : 								Warning("WARN_CBC_MODE");

  00c18	68 00 00 00 00	 push	 OFFSET ??_C@_0O@INONOBKP@WARN_CBC_MODE?$AA@
  00c1d	e8 00 00 00 00	 call	 _Warning
  00c22	83 c4 04	 add	 esp, 4
$LN404@MainDialog:

; 4846 : 
; 4847 : 							// Check for deprecated 64-bit-block ciphers
; 4848 : 							if (GetCipherBlockSizeByDriveNo (szDriveLetter[0] - 'A') == 64)

  00c25	0f be 0d 00 00
	00 00		 movsx	 ecx, BYTE PTR ?szDriveLetter@@3PADA
  00c2c	83 e9 41	 sub	 ecx, 65			; 00000041H
  00c2f	51		 push	 ecx
  00c30	e8 00 00 00 00	 call	 _GetCipherBlockSizeByDriveNo
  00c35	83 c4 04	 add	 esp, 4
  00c38	83 f8 40	 cmp	 eax, 64			; 00000040H
  00c3b	75 0d		 jne	 SHORT $LN402@MainDialog

; 4849 : 								Warning("WARN_64_BIT_BLOCK_CIPHER");

  00c3d	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@IFBNLIAJ@WARN_64_BIT_BLOCK_CIPHER?$AA@
  00c42	e8 00 00 00 00	 call	 _Warning
  00c47	83 c4 04	 add	 esp, 4
$LN402@MainDialog:

; 4850 : 
; 4851 : 							// Check for problematic file extensions (exe, dll, sys)
; 4852 : 							if (CheckFileExtension (szFileName))

  00c4a	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00c4f	e8 00 00 00 00	 call	 _CheckFileExtension
  00c54	83 c4 04	 add	 esp, 4
  00c57	85 c0		 test	 eax, eax
  00c59	74 67		 je	 SHORT $LN396@MainDialog

; 4853 : 								Warning ("EXE_FILE_EXTENSION_MOUNT_WARNING");

  00c5b	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@FLEKEKLI@EXE_FILE_EXTENSION_MOUNT_WARNING@

; 4854 : 						}
; 4855 : 					}
; 4856 : 					else

  00c60	eb 58		 jmp	 SHORT $LN1035@MainDialog
$LN408@MainDialog:

; 4857 : 						exitCode = 1;

  00c62	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _exitCode$138050[ebp], 1
  00c69	eb 57		 jmp	 SHORT $LN396@MainDialog
$LN433@MainDialog:

; 4858 : 				}
; 4859 : 				else if (bExplore && GetMountedVolumeDriveNo (szFileName) != -1)

  00c6b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bExplore, 0
  00c72	74 27		 je	 SHORT $LN398@MainDialog
  00c74	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00c79	e8 00 00 00 00	 call	 _GetMountedVolumeDriveNo
  00c7e	83 c4 04	 add	 esp, 4
  00c81	83 f8 ff	 cmp	 eax, -1
  00c84	74 15		 je	 SHORT $LN398@MainDialog

; 4860 : 					OpenVolumeExplorerWindow (GetMountedVolumeDriveNo (szFileName));

  00c86	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00c8b	e8 00 00 00 00	 call	 _GetMountedVolumeDriveNo
  00c90	50		 push	 eax
  00c91	e8 00 00 00 00	 call	 _OpenVolumeExplorerWindow
  00c96	83 c4 08	 add	 esp, 8
  00c99	eb 27		 jmp	 SHORT $LN396@MainDialog
$LN398@MainDialog:

; 4861 : 				else if (szFileName[0] != 0 && IsMountedVolume (szFileName))

  00c9b	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?szFileName@@3PADA, 0
  00ca2	74 1e		 je	 SHORT $LN396@MainDialog
  00ca4	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00ca9	e8 00 00 00 00	 call	 _IsMountedVolume
  00cae	83 c4 04	 add	 esp, 4
  00cb1	85 c0		 test	 eax, eax
  00cb3	74 0d		 je	 SHORT $LN396@MainDialog

; 4862 : 					Warning ("VOL_ALREADY_MOUNTED");

  00cb5	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NEFDJEPG@VOL_ALREADY_MOUNTED?$AA@
$LN1035@MainDialog:
  00cba	e8 00 00 00 00	 call	 _Warning
  00cbf	83 c4 04	 add	 esp, 4
$LN396@MainDialog:

; 4863 : 					
; 4864 : 				if (!Quit)

  00cc2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?Quit@@3HA, 0	; Quit
  00cc9	75 09		 jne	 SHORT $LN395@MainDialog

; 4865 : 					RefreshMainDlg(hwndDlg);

  00ccb	53		 push	 ebx
  00ccc	e8 00 00 00 00	 call	 ?RefreshMainDlg@@YAXPAUHWND__@@@Z ; RefreshMainDlg
  00cd1	83 c4 04	 add	 esp, 4
$LN395@MainDialog:

; 4866 : 			}
; 4867 : 			
; 4868 : 			// Wipe cache
; 4869 : 			if (bWipe)

  00cd4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bWipe@@3HA, 0 ; bWipe
  00cdb	74 11		 je	 SHORT $LN394@MainDialog

; 4870 : 				WipeCache (hwndDlg, Silent);

  00cdd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _Silent
  00ce3	52		 push	 edx
  00ce4	8b f3		 mov	 esi, ebx
  00ce6	e8 00 00 00 00	 call	 _WipeCache
  00ceb	83 c4 04	 add	 esp, 4
$LN394@MainDialog:

; 4871 : 
; 4872 : 			// Wipe command line password
; 4873 : 			if (CmdVolumePassword.Length != 0)

  00cee	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?CmdVolumePassword@@3UPassword@@A, 0
  00cf5	74 28		 je	 SHORT $LN393@MainDialog

; 4874 : 			{
; 4875 : 				burn (&CmdVolumePassword, sizeof (CmdVolumePassword));

  00cf7	ba 00 00 00 00	 mov	 edx, OFFSET ?CmdVolumePassword@@3UPassword@@A ; CmdVolumePassword
  00cfc	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00d01	8b f1		 mov	 esi, ecx
  00d03	8b c2		 mov	 eax, edx
$LL542@MainDialog:
  00d05	c6 00 00	 mov	 BYTE PTR [eax], 0
  00d08	40		 inc	 eax
  00d09	83 ee 01	 sub	 esi, 1
  00d0c	75 f7		 jne	 SHORT $LL542@MainDialog
  00d0e	8b ff		 npad	 2
$LL389@MainDialog:
  00d10	49		 dec	 ecx
  00d11	c6 02 00	 mov	 BYTE PTR [edx], 0
  00d14	42		 inc	 edx
  00d15	85 c9		 test	 ecx, ecx
  00d17	75 f7		 jne	 SHORT $LL389@MainDialog

; 4876 : 				CmdVolumePassword.Length = 0;

  00d19	89 0d 00 00 00
	00		 mov	 DWORD PTR ?CmdVolumePassword@@3UPassword@@A, ecx
$LN393@MainDialog:

; 4877 : 			}
; 4878 : 
; 4879 : 			// Wipe command line keyfiles
; 4880 : 			if (FirstCmdKeyFile)

  00d1f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?FirstCmdKeyFile@@3PAUKeyFileStruct@@A, 0 ; FirstCmdKeyFile
  00d26	74 3c		 je	 SHORT $LN385@MainDialog

; 4881 : 			{
; 4882 : 				if (defaultKeyFilesParam.FirstKeyFile)

  00d28	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR _defaultKeyFilesParam+4, 0
  00d2f	74 0d		 je	 SHORT $LN386@MainDialog

; 4883 : 					KeyFileRemoveAll (&defaultKeyFilesParam.FirstKeyFile);

  00d31	68 04 00 00 00	 push	 OFFSET _defaultKeyFilesParam+4
  00d36	e8 00 00 00 00	 call	 _KeyFileRemoveAll
  00d3b	83 c4 04	 add	 esp, 4
$LN386@MainDialog:

; 4884 : 
; 4885 : 				defaultKeyFilesParam.EnableKeyFiles = FALSE;
; 4886 : 
; 4887 : 				if (!Quit)

  00d3e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?Quit@@3HA, 0	; Quit
  00d45	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _defaultKeyFilesParam, 0
  00d4f	75 13		 jne	 SHORT $LN385@MainDialog

; 4888 : 				{
; 4889 : 					LoadSettings (hwndDlg);

  00d51	53		 push	 ebx
  00d52	e8 00 00 00 00	 call	 _LoadSettings
  00d57	83 c4 04	 add	 esp, 4

; 4890 : 					LoadDefaultKeyFilesParam ();

  00d5a	e8 00 00 00 00	 call	 _LoadDefaultKeyFilesParam

; 4891 : 					RestoreDefaultKeyFilesParam ();

  00d5f	e8 00 00 00 00	 call	 _RestoreDefaultKeyFilesParam
$LN385@MainDialog:

; 4892 : 				}
; 4893 : 			}
; 4894 : 
; 4895 : 			// Dismount
; 4896 : 			if (cmdUnmountDrive > 0)

  00d64	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cmdUnmountDrive@@3HA ; cmdUnmountDrive
  00d69	85 c0		 test	 eax, eax
  00d6b	7e 6d		 jle	 SHORT $LN384@MainDialog

; 4897 : 			{
; 4898 : 				MOUNT_LIST_STRUCT mountList;
; 4899 : 				DWORD bytesReturned;
; 4900 : 
; 4901 : 				if (DeviceIoControl (hDriver, TC_IOCTL_GET_MOUNTED_VOLUMES, NULL, 0, &mountList, sizeof (mountList), &bytesReturned, NULL)
; 4902 : 					&& (mountList.ulMountedDrives & (1 << cmdUnmountDrive)) == 0)

  00d6d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDriver
  00d73	6a 00		 push	 0
  00d75	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _bytesReturned$138150[ebp]
  00d7b	50		 push	 eax
  00d7c	68 74 36 00 00	 push	 13940			; 00003674H
  00d81	8d 8d d4 c4 ff
	ff		 lea	 ecx, DWORD PTR _mountList$138149[ebp]
  00d87	51		 push	 ecx
  00d88	6a 00		 push	 0
  00d8a	6a 00		 push	 0
  00d8c	68 18 20 22 00	 push	 2236440			; 00222018H
  00d91	52		 push	 edx
  00d92	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  00d98	85 c0		 test	 eax, eax
  00d9a	74 29		 je	 SHORT $LN383@MainDialog
  00d9c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?cmdUnmountDrive@@3HA ; cmdUnmountDrive
  00da2	b8 01 00 00 00	 mov	 eax, 1
  00da7	d3 e0		 shl	 eax, cl
  00da9	85 85 d4 c4 ff
	ff		 test	 DWORD PTR _mountList$138149[ebp], eax
  00daf	75 14		 jne	 SHORT $LN383@MainDialog

; 4903 : 				{
; 4904 : 					Error ("NO_VOLUME_MOUNTED_TO_DRIVE");

  00db1	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@CMJGINID@NO_VOLUME_MOUNTED_TO_DRIVE?$AA@
  00db6	e8 00 00 00 00	 call	 _Error
  00dbb	83 c4 04	 add	 esp, 4

; 4905 : 					exitCode = 1;

  00dbe	be 01 00 00 00	 mov	 esi, 1
  00dc3	eb 47		 jmp	 SHORT $LN378@MainDialog
$LN383@MainDialog:

; 4906 : 				}
; 4907 : 				else if (!Dismount (hwndDlg, cmdUnmountDrive))

  00dc5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cmdUnmountDrive@@3HA ; cmdUnmountDrive
  00dca	8b fb		 mov	 edi, ebx
  00dcc	e8 00 00 00 00	 call	 _Dismount
  00dd1	85 c0		 test	 eax, eax
  00dd3	75 34		 jne	 SHORT $LN1023@MainDialog

; 4908 : 					exitCode = 1;

  00dd5	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 4909 : 			}

  00dd8	eb 32		 jmp	 SHORT $LN378@MainDialog
$LN384@MainDialog:

; 4910 : 			else if (cmdUnmountDrive == -1)

  00dda	83 f8 ff	 cmp	 eax, -1
  00ddd	75 2a		 jne	 SHORT $LN1023@MainDialog

; 4911 : 			{
; 4912 : 				if (!DismountAll (hwndDlg, bForceUnmount, !Silent, UNMOUNT_MAX_AUTO_RETRIES, UNMOUNT_AUTO_RETRY_DELAY))

  00ddf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bForceUnmount@@3HA ; bForceUnmount
  00de5	33 c9		 xor	 ecx, ecx
  00de7	39 0d 00 00 00
	00		 cmp	 DWORD PTR _Silent, ecx
  00ded	6a 32		 push	 50			; 00000032H
  00def	0f 94 c1	 sete	 cl
  00df2	6a 1e		 push	 30			; 0000001eH
  00df4	8b fb		 mov	 edi, ebx
  00df6	51		 push	 ecx
  00df7	52		 push	 edx
  00df8	e8 00 00 00 00	 call	 _DismountAll
  00dfd	83 c4 10	 add	 esp, 16			; 00000010H

; 4913 : 					exitCode = 1;

  00e00	be 01 00 00 00	 mov	 esi, 1
  00e05	85 c0		 test	 eax, eax
  00e07	74 03		 je	 SHORT $LN378@MainDialog
$LN1023@MainDialog:
  00e09	8b 75 e8	 mov	 esi, DWORD PTR _exitCode$138050[ebp]
$LN378@MainDialog:

; 4914 : 			}
; 4915 : 
; 4916 : 			// TaskBar icon
; 4917 : 			if (bEnableBkgTask)

  00e0c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bEnableBkgTask, 0
  00e13	74 09		 je	 SHORT $LN377@MainDialog

; 4918 : 				TaskBarIconAdd (hwndDlg);

  00e15	53		 push	 ebx
  00e16	e8 00 00 00 00	 call	 _TaskBarIconAdd
  00e1b	83 c4 04	 add	 esp, 4
$LN377@MainDialog:

; 4919 : 
; 4920 : 			// Quit
; 4921 : 			if (Quit)

  00e1e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?Quit@@3HA, 0	; Quit
  00e25	74 4d		 je	 SHORT $LN374@MainDialog

; 4922 : 			{
; 4923 : 				if (TaskBarIconMutex == NULL)

  00e27	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _TaskBarIconMutex, 0
  00e2e	75 06		 jne	 SHORT $LN375@MainDialog

; 4924 : 					exit (exitCode);

  00e30	56		 push	 esi
  00e31	e8 00 00 00 00	 call	 _exit
$LN375@MainDialog:

; 4925 : 
; 4926 : 				MainWindowHidden = TRUE;
; 4927 : 
; 4928 : 				LoadSettings (hwndDlg);

  00e36	53		 push	 ebx
  00e37	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _MainWindowHidden, 1
  00e41	e8 00 00 00 00	 call	 _LoadSettings
  00e46	83 c4 04	 add	 esp, 4

; 4929 : 				LoadDefaultKeyFilesParam ();

  00e49	e8 00 00 00 00	 call	 _LoadDefaultKeyFilesParam

; 4930 : 				RestoreDefaultKeyFilesParam ();

  00e4e	e8 00 00 00 00	 call	 _RestoreDefaultKeyFilesParam

; 4931 : 
; 4932 : 				if (!bEnableBkgTask)

  00e53	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bEnableBkgTask, 0
  00e5a	75 18		 jne	 SHORT $LN374@MainDialog

; 4933 : 				{
; 4934 : 					if (TaskBarIconMutex)

  00e5c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _TaskBarIconMutex, 0
  00e63	74 09		 je	 SHORT $LN373@MainDialog

; 4935 : 						TaskBarIconRemove (hwndDlg);

  00e65	53		 push	 ebx
  00e66	e8 00 00 00 00	 call	 _TaskBarIconRemove
  00e6b	83 c4 04	 add	 esp, 4
$LN373@MainDialog:

; 4936 : 					exit (exitCode);

  00e6e	56		 push	 esi
  00e6f	e8 00 00 00 00	 call	 _exit
$LN374@MainDialog:

; 4937 : 				}
; 4938 : 			}
; 4939 : 
; 4940 : 			// No command line arguments or only /volume => bring active instance
; 4941 : 			// to foreground if available
; 4942 : 			if (NoCmdLineArgs == 0 || (CmdLineVolumeSpecified && NoCmdLineArgs <= 2))

  00e74	a1 00 00 00 00	 mov	 eax, DWORD PTR _NoCmdLineArgs
  00e79	85 c0		 test	 eax, eax
  00e7b	74 16		 je	 SHORT $LN371@MainDialog
  00e7d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _CmdLineVolumeSpecified, 0
  00e84	0f 84 b3 00 00
	00		 je	 $LN367@MainDialog
  00e8a	83 f8 02	 cmp	 eax, 2
  00e8d	0f 8f aa 00 00
	00		 jg	 $LN367@MainDialog
$LN371@MainDialog:

; 4943 : 			{
; 4944 : 				HWND h = hwndDlg;
; 4945 : 				EnumWindows (FindTCWindowEnum, (LPARAM) &h);

  00e93	8d 45 e4	 lea	 eax, DWORD PTR _h$138165[ebp]
  00e96	50		 push	 eax
  00e97	68 00 00 00 00	 push	 OFFSET _FindTCWindowEnum@8
  00e9c	89 5d e4	 mov	 DWORD PTR _h$138165[ebp], ebx
  00e9f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumWindows@8

; 4946 : 
; 4947 : 				if (h != hwndDlg
; 4948 : 					&& (!IsAdmin() || (GetWindowLongPtr (h, DWLP_USER) & TC_MAIN_WINDOW_FLAG_ADMIN_PRIVILEGES) != 0))

  00ea5	39 5d e4	 cmp	 DWORD PTR _h$138165[ebp], ebx
  00ea8	0f 84 8f 00 00
	00		 je	 $LN367@MainDialog
  00eae	e8 00 00 00 00	 call	 _IsAdmin
  00eb3	85 c0		 test	 eax, eax
  00eb5	74 14		 je	 SHORT $LN369@MainDialog
  00eb7	8b 4d e4	 mov	 ecx, DWORD PTR _h$138165[ebp]
  00eba	6a 08		 push	 8
  00ebc	51		 push	 ecx
  00ebd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00ec3	a8 01		 test	 al, 1
  00ec5	0f 84 72 00 00
	00		 je	 $LN367@MainDialog
$LN369@MainDialog:

; 4949 : 				{
; 4950 : 					if (CmdLineVolumeSpecified)

  00ecb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _CmdLineVolumeSpecified, 0
  00ed2	74 30		 je	 SHORT $LN368@MainDialog

; 4951 : 					{
; 4952 : 						COPYDATASTRUCT cd;
; 4953 : 						memcpy (&cd.dwData, WM_COPY_SET_VOLUME_NAME, 4);
; 4954 : 						cd.lpData = szFileName;

  00ed4	b8 00 00 00 00	 mov	 eax, OFFSET ?szFileName@@3PADA ; szFileName
  00ed9	c7 45 88 56 4e
	41 4d		 mov	 DWORD PTR _cd$138172[ebp], 1296125526 ; 4d414e56H
  00ee0	89 45 90	 mov	 DWORD PTR _cd$138172[ebp+8], eax

; 4955 : 						cd.cbData = strlen (szFileName) + 1;

  00ee3	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL923@MainDialog:
  00ee6	8a 08		 mov	 cl, BYTE PTR [eax]
  00ee8	40		 inc	 eax
  00ee9	84 c9		 test	 cl, cl
  00eeb	75 f9		 jne	 SHORT $LL923@MainDialog
  00eed	2b c2		 sub	 eax, edx

; 4956 : 
; 4957 : 						SendMessage (h, WM_COPYDATA, (WPARAM)hwndDlg, (LPARAM)&cd);

  00eef	8d 55 88	 lea	 edx, DWORD PTR _cd$138172[ebp]
  00ef2	52		 push	 edx
  00ef3	40		 inc	 eax
  00ef4	53		 push	 ebx
  00ef5	89 45 8c	 mov	 DWORD PTR _cd$138172[ebp+4], eax
  00ef8	8b 45 e4	 mov	 eax, DWORD PTR _h$138165[ebp]
  00efb	6a 4a		 push	 74			; 0000004aH
  00efd	50		 push	 eax
  00efe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN368@MainDialog:

; 4958 : 					}
; 4959 : 
; 4960 : 					SendMessage (h, TC_APPMSG_MOUNT_SHOW_WINDOW, 0, 0);

  00f04	8b 4d e4	 mov	 ecx, DWORD PTR _h$138165[ebp]
  00f07	6a 00		 push	 0
  00f09	6a 00		 push	 0
  00f0b	68 ca 80 00 00	 push	 32970			; 000080caH
  00f10	51		 push	 ecx
  00f11	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 4961 : 
; 4962 : 					ShowWindow (h, SW_SHOW);

  00f17	8b 55 e4	 mov	 edx, DWORD PTR _h$138165[ebp]
  00f1a	6a 05		 push	 5
  00f1c	52		 push	 edx
  00f1d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 4963 : 					SetForegroundWindow (h);

  00f23	8b 45 e4	 mov	 eax, DWORD PTR _h$138165[ebp]
  00f26	50		 push	 eax
  00f27	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetForegroundWindow@4

; 4964 : 
; 4965 : 					if (TaskBarIconMutex == NULL)

  00f2d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _TaskBarIconMutex, 0
  00f34	75 07		 jne	 SHORT $LN367@MainDialog
$LN449@MainDialog:

; 4966 : 						exit (0);

  00f36	6a 00		 push	 0
  00f38	e8 00 00 00 00	 call	 _exit
$LN367@MainDialog:

; 4967 : 				}
; 4968 : 			}
; 4969 : 
; 4970 : 			HookMouseWheel (hwndDlg, IDC_VOLUME);

  00f3d	68 0a 04 00 00	 push	 1034			; 0000040aH
  00f42	53		 push	 ebx
  00f43	e8 00 00 00 00	 call	 _HookMouseWheel

; 4971 : 
; 4972 : 			// Register hot keys
; 4973 : 			if (!RegisterAllHotkeys (hwndDlg, Hotkeys)
; 4974 : 				&& TaskBarIconMutex != NULL)	// Warn only if we are the first instance of CipherShed

  00f48	68 00 00 00 00	 push	 OFFSET _Hotkeys
  00f4d	53		 push	 ebx
  00f4e	e8 00 00 00 00	 call	 _RegisterAllHotkeys
  00f53	83 c4 10	 add	 esp, 16			; 00000010H
  00f56	85 c0		 test	 eax, eax
  00f58	75 15		 jne	 SHORT $LN366@MainDialog
  00f5a	39 05 00 00 00
	00		 cmp	 DWORD PTR _TaskBarIconMutex, eax
  00f60	74 0d		 je	 SHORT $LN366@MainDialog

; 4975 : 				Warning("HOTKEY_REGISTRATION_ERROR");

  00f62	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@KCJBFNOC@HOTKEY_REGISTRATION_ERROR?$AA@
  00f67	e8 00 00 00 00	 call	 _Warning
  00f6c	83 c4 04	 add	 esp, 4
$LN366@MainDialog:

; 4976 : 
; 4977 : 			Silent = FALSE;
; 4978 : 
; 4979 : 			GetMountList (&LastKnownMountList);

  00f6f	68 00 00 00 00	 push	 OFFSET _LastKnownMountList
  00f74	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _Silent, 0
  00f7e	e8 00 00 00 00	 call	 _GetMountList
  00f83	83 c4 04	 add	 esp, 4

; 4980 : 			SetTimer (hwndDlg, TIMER_ID_MAIN, TIMER_INTERVAL_MAIN, NULL);

  00f86	6a 00		 push	 0
  00f88	68 f4 01 00 00	 push	 500			; 000001f4H
  00f8d	68 ff 00 00 00	 push	 255			; 000000ffH
  00f92	53		 push	 ebx
  00f93	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 4981 : 
; 4982 : 			taskBarCreatedMsg = RegisterWindowMessage ("TaskbarCreated");

  00f99	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HDDEAF@TaskbarCreated?$AA@
  00f9e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4

; 4983 : 
; 4984 : 			SetFocus (GetDlgItem (hwndDlg, IDC_DRIVELIST));

  00fa4	68 ef 03 00 00	 push	 1007			; 000003efH
  00fa9	53		 push	 ebx
  00faa	a3 00 00 00 00	 mov	 DWORD PTR ?taskBarCreatedMsg@?1??MainDialogProc@@9@16@4IA, eax
  00faf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00fb5	50		 push	 eax
  00fb6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 4985 : 
; 4986 : 			/* Check system encryption status */
; 4987 : 
; 4988 : 			if (!Quit)	// Do not care about system encryption or in-place encryption if we were launched from the system startup sequence (the wizard was added to it too).

  00fbc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?Quit@@3HA, 0	; Quit
  00fc3	75 6a		 jne	 SHORT $LN359@MainDialog

; 4989 : 			{
; 4990 : 				if (SysEncryptionOrDecryptionRequired ())

  00fc5	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  00fca	85 c0		 test	 eax, eax
  00fcc	74 40		 je	 SHORT $LN362@MainDialog

; 4991 : 				{
; 4992 : 					if (!MutexExistsOnSystem (TC_MUTEX_NAME_SYSENC))	// If no instance of the wizard is currently taking care of system encryption

  00fce	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@CMNICGGD@Global?2TrueCrypt?5System?5Encrypti@
  00fd3	e8 00 00 00 00	 call	 _MutexExistsOnSystem
  00fd8	83 c4 04	 add	 esp, 4
  00fdb	85 c0		 test	 eax, eax
  00fdd	75 2f		 jne	 SHORT $LN362@MainDialog

; 4993 : 					{
; 4994 : 						// We shouldn't block the mutex at this point
; 4995 : 
; 4996 : 						if (SystemEncryptionStatus == SYSENC_STATUS_PRETEST
; 4997 : 							|| AskWarnYesNo ("SYSTEM_ENCRYPTION_RESUME_PROMPT") == IDYES)

  00fdf	81 3d 00 00 00
	00 c8 00 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 200 ; 000000c8H
  00fe9	74 12		 je	 SHORT $LN361@MainDialog
  00feb	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HDGOHFPD@SYSTEM_ENCRYPTION_RESUME_PROMPT?$AA@
  00ff0	e8 00 00 00 00	 call	 _AskWarnYesNo
  00ff5	83 c4 04	 add	 esp, 4
  00ff8	83 f8 06	 cmp	 eax, 6
  00ffb	75 11		 jne	 SHORT $LN362@MainDialog
$LN361@MainDialog:

; 4998 : 						{
; 4999 : 							// The wizard was not launched during the system startup seq, or the user may have forgotten
; 5000 : 							// to resume the encryption/decryption process.
; 5001 : 
; 5002 : 
; 5003 : 							LaunchVolCreationWizard (hwndDlg, "/csysenc");

  00ffd	8b 4d e0	 mov	 ecx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  01000	51		 push	 ecx
  01001	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_08FFGENEKE@?1csysenc?$AA@
  01006	e8 00 00 00 00	 call	 ?LaunchVolCreationWizard@@YAXPAUHWND__@@PBD@Z ; LaunchVolCreationWizard
  0100b	83 c4 04	 add	 esp, 4
$LN362@MainDialog:

; 5004 : 						}
; 5005 : 					}
; 5006 : 				}
; 5007 : 
; 5008 : 				if (bInPlaceEncNonSysPending && !NonSysInplaceEncInProgressElsewhere())

  0100e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bInPlaceEncNonSysPending, 0
  01015	74 18		 je	 SHORT $LN359@MainDialog
  01017	e8 00 00 00 00	 call	 _NonSysInplaceEncInProgressElsewhere
  0101c	85 c0		 test	 eax, eax
  0101e	75 0f		 jne	 SHORT $LN359@MainDialog

; 5009 : 				{
; 5010 : 					if (AskNonSysInPlaceEncryptionResume() == IDYES)

  01020	e8 00 00 00 00	 call	 _AskNonSysInPlaceEncryptionResume
  01025	83 f8 06	 cmp	 eax, 6
  01028	75 05		 jne	 SHORT $LN359@MainDialog

; 5011 : 						ResumeInterruptedNonSysInplaceEncProcess ();

  0102a	e8 00 00 00 00	 call	 ?ResumeInterruptedNonSysInplaceEncProcess@@YAXXZ ; ResumeInterruptedNonSysInplaceEncProcess
$LN359@MainDialog:

; 5012 : 				}
; 5013 : 			}
; 5014 : 
; 5015 : 			if (!DisableSystemCrashDetection
; 5016 : 				&& IsOSAtLeast (WIN_7))

  0102f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?DisableSystemCrashDetection@@3HA, 0 ; DisableSystemCrashDetection
  01036	0f 85 4d 01 00
	00		 jne	 $LN353@MainDialog
  0103c	6a 0d		 push	 13			; 0000000dH
  0103e	e8 00 00 00 00	 call	 _IsOSAtLeast
  01043	83 c4 04	 add	 esp, 4
  01046	85 c0		 test	 eax, eax
  01048	0f 84 3b 01 00
	00		 je	 $LN353@MainDialog

; 5017 : 			{
; 5018 : 				// Auto-detect a system crash
; 5019 : 				
; 5020 : 				const int detectionPeriodInMonthsSinceReleaseDate = 2;
; 5021 : 				int maxYear = TC_RELEASE_DATE_YEAR;
; 5022 : 				int maxMonth = TC_RELEASE_DATE_MONTH + detectionPeriodInMonthsSinceReleaseDate;
; 5023 : 				if (maxMonth > 12)
; 5024 : 				{
; 5025 : 					++maxYear;
; 5026 : 					maxMonth -= 12;
; 5027 : 				}
; 5028 : 
; 5029 : 				SYSTEMTIME systemTime;
; 5030 : 				GetSystemTime (&systemTime);

  0104e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetSystemTime@4
  01054	8d 95 0c ff ff
	ff		 lea	 edx, DWORD PTR _systemTime$138193[ebp]
  0105a	52		 push	 edx
  0105b	ff d7		 call	 edi

; 5031 : 
; 5032 : 				if (systemTime.wYear >= TC_RELEASE_DATE_YEAR
; 5033 : 					&& !(systemTime.wYear == TC_RELEASE_DATE_YEAR && systemTime.wMonth < TC_RELEASE_DATE_MONTH)
; 5034 : 					&& systemTime.wYear <= maxYear
; 5035 : 					&& !(systemTime.wYear == maxYear && systemTime.wMonth > maxMonth))

  0105d	66 8b 85 0c ff
	ff ff		 mov	 ax, WORD PTR _systemTime$138193[ebp]
  01064	b9 dc 07 00 00	 mov	 ecx, 2012		; 000007dcH
  01069	66 3b c1	 cmp	 ax, cx
  0106c	0f 82 17 01 00
	00		 jb	 $LN353@MainDialog
  01072	8b d1		 mov	 edx, ecx
  01074	66 3b c2	 cmp	 ax, dx
  01077	75 0e		 jne	 SHORT $LN355@MainDialog
  01079	66 83 bd 0e ff
	ff ff 02	 cmp	 WORD PTR _systemTime$138193[ebp+2], 2
  01081	0f 82 02 01 00
	00		 jb	 $LN353@MainDialog
$LN355@MainDialog:
  01087	0f b7 c0	 movzx	 eax, ax
  0108a	3d dc 07 00 00	 cmp	 eax, 2012		; 000007dcH
  0108f	0f 8f f4 00 00
	00		 jg	 $LN353@MainDialog
  01095	75 0e		 jne	 SHORT $LN354@MainDialog
  01097	66 83 bd 0e ff
	ff ff 04	 cmp	 WORD PTR _systemTime$138193[ebp+2], 4
  0109f	0f 87 e4 00 00
	00		 ja	 $LN353@MainDialog
$LN354@MainDialog:

; 5036 : 				{
; 5037 : 					char winDir[MAX_PATH] = { 0 };

  010a5	68 03 01 00 00	 push	 259			; 00000103H
  010aa	8d 85 21 24 00
	00		 lea	 eax, DWORD PTR _winDir$138197[ebp+1]
  010b0	6a 00		 push	 0
  010b2	50		 push	 eax
  010b3	c6 85 20 24 00
	00 00		 mov	 BYTE PTR _winDir$138197[ebp], 0
  010ba	e8 00 00 00 00	 call	 _memset
  010bf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5038 : 					GetWindowsDirectory (winDir, sizeof (winDir));

  010c2	68 04 01 00 00	 push	 260			; 00000104H
  010c7	8d 8d 20 24 00
	00		 lea	 ecx, DWORD PTR _winDir$138197[ebp]
  010cd	51		 push	 ecx
  010ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowsDirectoryA@8

; 5039 : 
; 5040 : 					WIN32_FIND_DATA findData;
; 5041 : 					HANDLE find = FindFirstFile ((string (winDir) + "\\MEMORY.DMP").c_str(), &findData);

  010d4	8d 95 20 24 00
	00		 lea	 edx, DWORD PTR _winDir$138197[ebp]
  010da	52		 push	 edx
  010db	8d 8d 30 fe ff
	ff		 lea	 ecx, DWORD PTR $T207823[ebp]
  010e1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  010e6	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DAMBDOGJ@?2MEMORY?4DMP?$AA@
  010eb	50		 push	 eax
  010ec	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR $T207824[ebp]
  010f2	50		 push	 eax
  010f3	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
  010fa	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  010ff	83 c4 0c	 add	 esp, 12			; 0000000cH
  01102	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  01106	72 05		 jb	 SHORT $LN549@MainDialog
  01108	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0110b	eb 03		 jmp	 SHORT $LN550@MainDialog
$LN549@MainDialog:
  0110d	83 c0 04	 add	 eax, 4
$LN550@MainDialog:
  01110	8d 8d 18 02 00
	00		 lea	 ecx, DWORD PTR _findData$138198[ebp]
  01116	51		 push	 ecx
  01117	50		 push	 eax
  01118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindFirstFileA@8
  0111e	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR $T207824[ebp]
  01124	8b f0		 mov	 esi, eax
  01126	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0112b	8d 8d 30 fe ff
	ff		 lea	 ecx, DWORD PTR $T207823[ebp]
  01131	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5042 : 
; 5043 : 					if (find != INVALID_HANDLE_VALUE)

  01136	83 fe ff	 cmp	 esi, -1
  01139	74 4e		 je	 SHORT $LN353@MainDialog

; 5044 : 					{
; 5045 : 						SYSTEMTIME systemTime;
; 5046 : 						FILETIME ft;
; 5047 : 						GetSystemTime (&systemTime);

  0113b	8d 95 a8 fe ff
	ff		 lea	 edx, DWORD PTR _systemTime$138206[ebp]
  01141	52		 push	 edx
  01142	ff d7		 call	 edi

; 5048 : 						SystemTimeToFileTime (&systemTime, &ft);

  01144	8d 45 94	 lea	 eax, DWORD PTR _ft$138207[ebp]
  01147	50		 push	 eax
  01148	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _systemTime$138206[ebp]
  0114e	51		 push	 ecx
  0114f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemTimeToFileTime@8

; 5049 : 
; 5050 : 						ULARGE_INTEGER sysTime, fileTime;
; 5051 : 						sysTime.HighPart = ft.dwHighDateTime;
; 5052 : 						sysTime.LowPart = ft.dwLowDateTime;

  01155	8b 4d 94	 mov	 ecx, DWORD PTR _ft$138207[ebp]

; 5053 : 						fileTime.HighPart = findData.ftLastWriteTime.dwHighDateTime;
; 5054 : 						fileTime.LowPart = findData.ftLastWriteTime.dwLowDateTime;
; 5055 : 
; 5056 : 						// Memory dump must not be older than 10 minutes
; 5057 : 						if (sysTime.QuadPart - fileTime.QuadPart < 10I64 * 1000 * 1000 * 60 * 10)

  01158	2b 8d 2c 02 00
	00		 sub	 ecx, DWORD PTR _findData$138198[ebp+20]
  0115e	8b 45 98	 mov	 eax, DWORD PTR _ft$138207[ebp+4]
  01161	8b 95 30 02 00
	00		 mov	 edx, DWORD PTR _findData$138198[ebp+24]
  01167	1b c2		 sbb	 eax, edx
  01169	83 f8 01	 cmp	 eax, 1
  0116c	77 14		 ja	 SHORT $LN352@MainDialog
  0116e	72 08		 jb	 SHORT $LN924@MainDialog
  01170	81 f9 00 bc a0
	65		 cmp	 ecx, 1705032704		; 65a0bc00H
  01176	73 0a		 jae	 SHORT $LN352@MainDialog
$LN924@MainDialog:

; 5058 : 							SystemCrashDetected = TRUE;

  01178	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?SystemCrashDetected@@3HA, 1 ; SystemCrashDetected
$LN352@MainDialog:

; 5059 : 
; 5060 : 						FindClose (find);

  01182	56		 push	 esi
  01183	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindClose@4
$LN353@MainDialog:

; 5061 : 					}
; 5062 : 				}
; 5063 : 			}
; 5064 : 
; 5065 : 			DoPostInstallTasks ();

  01189	e8 00 00 00 00	 call	 _DoPostInstallTasks

; 5066 : 			ResetCurrentDirectory ();

  0118e	e8 00 00 00 00	 call	 _ResetCurrentDirectory
$LN347@MainDialog:

; 5067 : 		}
; 5068 : 		return 0;

  01193	33 c0		 xor	 eax, eax
  01195	e9 07 f0 ff ff	 jmp	 $LN458@MainDialog
$LN481@MainDialog:

; 4661 : 	DWORD mPos;
; 4662 : 
; 4663 : 	switch (uMsg)

  0119a	3d 33 02 00 00	 cmp	 eax, 563		; 00000233H
  0119f	0f 87 a0 1e 00
	00		 ja	 $LN482@MainDialog
  011a5	0f 84 44 1e 00
	00		 je	 $LN9@MainDialog
  011ab	3d 0a 02 00 00	 cmp	 eax, 522		; 0000020aH
  011b0	0f 87 14 1c 00
	00		 ja	 $LN483@MainDialog
  011b6	0f 84 f9 1b 00
	00		 je	 $LN351@MainDialog
  011bc	8b c8		 mov	 ecx, eax
  011be	81 e9 11 01 00
	00		 sub	 ecx, 273		; 00000111H
  011c4	0f 84 dc 07 00
	00		 je	 $LN186@MainDialog
  011ca	83 e9 01	 sub	 ecx, 1
  011cd	0f 84 a7 07 00
	00		 je	 $LN348@MainDialog
  011d3	83 e9 01	 sub	 ecx, 1
  011d6	0f 85 b8 23 00
	00		 jne	 $LN2@MainDialog

; 5131 : 
; 5132 : 	case WM_TIMER:
; 5133 : 		{
; 5134 : 			// Check mount list and update GUI if needed
; 5135 : 			CheckMountList ();

  011dc	e8 00 00 00 00	 call	 _CheckMountList

; 5136 : 
; 5137 : 			// Cache status
; 5138 : 			if (IsPasswordCacheEmpty() == IsWindowEnabled (GetDlgItem (hwndDlg, IDC_WIPE_CACHE)))

  011e1	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  011e7	68 10 04 00 00	 push	 1040			; 00000410H
  011ec	53		 push	 ebx
  011ed	ff d6		 call	 esi
  011ef	50		 push	 eax
  011f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindowEnabled@4
  011f6	8b f8		 mov	 edi, eax
  011f8	e8 00 00 00 00	 call	 _IsPasswordCacheEmpty
  011fd	3b c7		 cmp	 eax, edi
  011ff	75 1a		 jne	 SHORT $LN337@MainDialog

; 5139 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_WIPE_CACHE), !IsPasswordCacheEmpty());

  01201	e8 00 00 00 00	 call	 _IsPasswordCacheEmpty
  01206	f7 d8		 neg	 eax
  01208	1b c0		 sbb	 eax, eax
  0120a	40		 inc	 eax
  0120b	50		 push	 eax
  0120c	68 10 04 00 00	 push	 1040			; 00000410H
  01211	53		 push	 ebx
  01212	ff d6		 call	 esi
  01214	50		 push	 eax
  01215	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
$LN337@MainDialog:

; 5140 : 
; 5141 : 			// Check driver warning flags
; 5142 : 			DWORD bytesOut;
; 5143 : 			GetWarningFlagsRequest warnings;
; 5144 : 			if (DeviceIoControl (hDriver, TC_IOCTL_GET_WARNING_FLAGS, NULL, 0, &warnings, sizeof (warnings), &bytesOut, NULL))

  0121b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hDriver
  01221	6a 00		 push	 0
  01223	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _bytesOut$138234[ebp]
  01229	52		 push	 edx
  0122a	6a 08		 push	 8
  0122c	8d 45 ac	 lea	 eax, DWORD PTR _warnings$138235[ebp]
  0122f	50		 push	 eax
  01230	6a 00		 push	 0
  01232	6a 00		 push	 0
  01234	68 8c 20 22 00	 push	 2236556			; 0022208cH
  01239	51		 push	 ecx
  0123a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  01240	85 c0		 test	 eax, eax
  01242	74 26		 je	 SHORT $LN334@MainDialog

; 5145 : 			{
; 5146 : 				if (warnings.SystemFavoriteVolumeDirty)

  01244	83 7d b0 00	 cmp	 DWORD PTR _warnings$138235[ebp+4], 0
  01248	74 0d		 je	 SHORT $LN335@MainDialog

; 5147 : 					WarningTopMost ("SYS_FAVORITE_VOLUME_DIRTY");

  0124a	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DDMAOGAE@SYS_FAVORITE_VOLUME_DIRTY?$AA@
  0124f	e8 00 00 00 00	 call	 _WarningTopMost
  01254	83 c4 04	 add	 esp, 4
$LN335@MainDialog:

; 5148 : 
; 5149 : 				if (warnings.PagingFileCreationPrevented)

  01257	83 7d ac 00	 cmp	 DWORD PTR _warnings$138235[ebp], 0
  0125b	74 0d		 je	 SHORT $LN334@MainDialog

; 5150 : 					WarningTopMost ("PAGING_FILE_CREATION_PREVENTED");

  0125d	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EPKBNKHP@PAGING_FILE_CREATION_PREVENTED?$AA@
  01262	e8 00 00 00 00	 call	 _WarningTopMost
  01267	83 c4 04	 add	 esp, 4
$LN334@MainDialog:

; 5151 : 			}
; 5152 : 
; 5153 : 			if (TaskBarIconMutex != NULL)

  0126a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _TaskBarIconMutex, 0
  01271	0f 84 9f 06 00
	00		 je	 $LN321@MainDialog

; 5154 : 			{
; 5155 : 				// Handle system crash
; 5156 : 				static BOOL systemCrashHandlerLocked = FALSE;
; 5157 : 				if (SystemCrashDetected && !systemCrashHandlerLocked)

  01277	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?SystemCrashDetected@@3HA, 0 ; SystemCrashDetected
  0127e	0f 84 8e 00 00
	00		 je	 $LN327@MainDialog
  01284	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?systemCrashHandlerLocked@?OC@??MainDialogProc@@9@16@4HA, 0
  0128b	0f 85 81 00 00
	00		 jne	 $LN327@MainDialog

; 5158 : 				{
; 5159 : 					systemCrashHandlerLocked = TRUE;

  01291	bf 01 00 00 00	 mov	 edi, 1

; 5160 : 
; 5161 : 					SetForegroundWindow (hwndDlg);

  01296	53		 push	 ebx
  01297	89 3d 00 00 00
	00		 mov	 DWORD PTR ?systemCrashHandlerLocked@?OC@??MainDialogProc@@9@16@4HA, edi
  0129d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetForegroundWindow@4

; 5162 : 					MainWindowHidden = FALSE;
; 5163 : 					ShowWindow (hwndDlg, SW_SHOW);

  012a3	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__ShowWindow@8
  012a9	6a 05		 push	 5
  012ab	53		 push	 ebx
  012ac	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _MainWindowHidden, 0
  012b6	ff d6		 call	 esi

; 5164 : 					ShowWindow (hwndDlg, SW_RESTORE);

  012b8	6a 09		 push	 9
  012ba	53		 push	 ebx
  012bb	ff d6		 call	 esi

; 5165 : 
; 5166 : 					if (AskYesNoTopmost ("SYSTEM_CRASHED_ASK_REPORT") == IDYES)

  012bd	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@FEHLLPHO@SYSTEM_CRASHED_ASK_REPORT?$AA@
  012c2	e8 00 00 00 00	 call	 _AskYesNoTopmost
  012c7	83 c4 04	 add	 esp, 4
  012ca	83 f8 06	 cmp	 eax, 6
  012cd	75 22		 jne	 SHORT $LN331@MainDialog

; 5167 : 					{
; 5168 : 						if (!IsAdmin() && IsUacSupported())

  012cf	e8 00 00 00 00	 call	 _IsAdmin
  012d4	85 c0		 test	 eax, eax
  012d6	75 11		 jne	 SHORT $LN330@MainDialog
  012d8	e8 00 00 00 00	 call	 _IsUacSupported
  012dd	85 c0		 test	 eax, eax
  012df	74 08		 je	 SHORT $LN330@MainDialog

; 5169 : 							UacAnalyzeKernelMiniDump (hwndDlg);

  012e1	53		 push	 ebx
  012e2	e8 00 00 00 00	 call	 _UacAnalyzeKernelMiniDump

; 5170 : 						else

  012e7	eb 26		 jmp	 SHORT $LN1036@MainDialog
$LN330@MainDialog:

; 5171 : 							AnalyzeKernelMiniDump (hwndDlg);

  012e9	53		 push	 ebx
  012ea	e8 00 00 00 00	 call	 _AnalyzeKernelMiniDump
  012ef	eb 1e		 jmp	 SHORT $LN1036@MainDialog
$LN331@MainDialog:

; 5172 : 					}
; 5173 : 					else if (AskYesNoTopmost ("ASK_KEEP_DETECTING_SYSTEM_CRASH") == IDNO)

  012f1	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JKMICAAI@ASK_KEEP_DETECTING_SYSTEM_CRASH?$AA@
  012f6	e8 00 00 00 00	 call	 _AskYesNoTopmost
  012fb	83 c4 04	 add	 esp, 4
  012fe	83 f8 07	 cmp	 eax, 7
  01301	75 0f		 jne	 SHORT $LN327@MainDialog

; 5174 : 					{
; 5175 : 						DisableSystemCrashDetection = TRUE;
; 5176 : 						SaveSettings (hwndDlg);

  01303	53		 push	 ebx
  01304	89 3d 00 00 00
	00		 mov	 DWORD PTR ?DisableSystemCrashDetection@@3HA, edi ; DisableSystemCrashDetection
  0130a	e8 00 00 00 00	 call	 _SaveSettings
$LN1036@MainDialog:
  0130f	83 c4 04	 add	 esp, 4
$LN327@MainDialog:

; 5177 : 					}
; 5178 : 				}
; 5179 : 
; 5180 : 				// Idle auto-dismount
; 5181 : 				if (MaxVolumeIdleTime > 0)

  01312	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?MaxVolumeIdleTime@@3HA, 0 ; MaxVolumeIdleTime
  01319	7e 05		 jle	 SHORT $LN326@MainDialog

; 5182 : 					DismountIdleVolumes ();

  0131b	e8 00 00 00 00	 call	 _DismountIdleVolumes
$LN326@MainDialog:

; 5183 : 
; 5184 : 				// Screen saver auto-dismount
; 5185 : 				if (bDismountOnScreenSaver)

  01320	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDismountOnScreenSaver@@3HA, 0 ; bDismountOnScreenSaver
  01327	0f 84 7d 00 00
	00		 je	 $LN322@MainDialog

; 5186 : 				{
; 5187 : 					static BOOL previousState = FALSE;
; 5188 : 					BOOL running = FALSE;
; 5189 : 					SystemParametersInfo (SPI_GETSCREENSAVERRUNNING, 0, &running, 0);

  0132d	6a 00		 push	 0
  0132f	8d 55 dc	 lea	 edx, DWORD PTR _running$138256[ebp]
  01332	52		 push	 edx
  01333	6a 00		 push	 0
  01335	6a 72		 push	 114			; 00000072H
  01337	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _running$138256[ebp], 0
  0133e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoA@16

; 5190 : 
; 5191 : 					if (running && !previousState)

  01344	8b 45 dc	 mov	 eax, DWORD PTR _running$138256[ebp]
  01347	85 c0		 test	 eax, eax
  01349	74 5a		 je	 SHORT $LN324@MainDialog
  0134b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?previousState@?PE@??MainDialogProc@@9@16@4HA, 0
  01352	75 51		 jne	 SHORT $LN324@MainDialog

; 5192 : 					{
; 5193 : 						DWORD dwResult;
; 5194 : 						previousState = TRUE;
; 5195 : 
; 5196 : 						if (bWipeCacheOnAutoDismount)

  01354	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bWipeCacheOnAutoDismount@@3HA, 0 ; bWipeCacheOnAutoDismount
  0135b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?previousState@?PE@??MainDialogProc@@9@16@4HA, 1
  01365	74 25		 je	 SHORT $LN323@MainDialog

; 5197 : 						{
; 5198 : 							DeviceIoControl (hDriver, TC_IOCTL_WIPE_PASSWORD_CACHE, NULL, 0, NULL, 0, &dwResult, NULL);

  01367	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hDriver
  0136d	6a 00		 push	 0
  0136f	8d 45 b4	 lea	 eax, DWORD PTR _dwResult$138258[ebp]
  01372	50		 push	 eax
  01373	6a 00		 push	 0
  01375	6a 00		 push	 0
  01377	6a 00		 push	 0
  01379	6a 00		 push	 0
  0137b	68 30 20 22 00	 push	 2236464			; 00222030H
  01380	51		 push	 ecx
  01381	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 5199 : 							SecurityToken::CloseAllSessions();

  01387	e8 00 00 00 00	 call	 ?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ ; CipherShed::SecurityToken::CloseAllSessions
$LN323@MainDialog:

; 5200 : 						}
; 5201 : 
; 5202 : 						DismountAll (hwndDlg, bForceAutoDismount, FALSE, UNMOUNT_MAX_AUTO_RETRIES, UNMOUNT_AUTO_RETRY_DELAY);

  0138c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bForceAutoDismount@@3HA ; bForceAutoDismount
  01392	6a 32		 push	 50			; 00000032H
  01394	6a 1e		 push	 30			; 0000001eH
  01396	6a 00		 push	 0
  01398	52		 push	 edx
  01399	8b fb		 mov	 edi, ebx
  0139b	e8 00 00 00 00	 call	 _DismountAll
  013a0	83 c4 10	 add	 esp, 16			; 00000010H

; 5203 : 					}
; 5204 : 					else

  013a3	eb 05		 jmp	 SHORT $LN322@MainDialog
$LN324@MainDialog:

; 5205 : 					{
; 5206 : 						previousState = running;

  013a5	a3 00 00 00 00	 mov	 DWORD PTR ?previousState@?PE@??MainDialogProc@@9@16@4HA, eax
$LN322@MainDialog:

; 5207 : 					}
; 5208 : 				}
; 5209 : 
; 5210 : 				// Auto-mount favorite volumes on arrival
; 5211 : #if TIMER_INTERVAL_MAIN != 500
; 5212 : #error TIMER_INTERVAL_MAIN != 500
; 5213 : #endif
; 5214 : 				static int favoritesAutoMountTimerDivisor = 0;
; 5215 : 				if ((++favoritesAutoMountTimerDivisor & 1) && !FavoritesOnArrivalMountRequired.empty())

  013aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?favoritesAutoMountTimerDivisor@?PM@??MainDialogProc@@9@16@4HA
  013af	40		 inc	 eax
  013b0	a3 00 00 00 00	 mov	 DWORD PTR ?favoritesAutoMountTimerDivisor@?PM@??MainDialogProc@@9@16@4HA, eax
  013b5	a8 01		 test	 al, 1
  013b7	0f 84 59 05 00
	00		 je	 $LN321@MainDialog
  013bd	83 3d 18 00 00
	00 00		 cmp	 DWORD PTR ?FavoritesOnArrivalMountRequired@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+24, 0
  013c4	0f 84 4c 05 00
	00		 je	 $LN321@MainDialog

; 5216 : 				{
; 5217 : 					static bool reentry = false;
; 5218 : 					if (reentry)

  013ca	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?reentry@?PP@??MainDialogProc@@9@16@4_NA, 0
  013d1	0f 85 bc fd ff
	ff		 jne	 $LN347@MainDialog

; 5219 : 						break;
; 5220 : 
; 5221 : 					reentry = true;
; 5222 : 
; 5223 : 					foreach (FavoriteVolume favorite, FavoritesOnArrivalMountRequired)

  013d7	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _$S4$138385[ebp]
  013dd	68 00 00 00 00	 push	 OFFSET ?FavoritesOnArrivalMountRequired@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoritesOnArrivalMountRequired
  013e2	50		 push	 eax
  013e3	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?reentry@?PP@??MainDialogProc@@9@16@4_NA, 1
  013ea	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
  013ef	83 c4 08	 add	 esp, 8
  013f2	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _$S4$138385[ebp]
  013f8	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  013fb	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _$S4$138385[ebp]
  01401	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 6
  01408	ff d0		 call	 eax
  0140a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__QueryDosDeviceA@12
  01410	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  01415	84 c0		 test	 al, al
  01417	0f 84 30 02 00
	00		 je	 $LN317@MainDialog
  0141d	8d 49 00	 npad	 3
$LL319@MainDialog:
  01420	8d 4d 80	 lea	 ecx, DWORD PTR _$S4$138385[ebp+44]
  01423	e8 00 00 00 00	 call	 ??D?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator*
  01428	50		 push	 eax
  01429	8d 8d 40 06 00
	00		 lea	 ecx, DWORD PTR _favorite$138389[ebp]
  0142f	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
  01434	80 bd 59 ff ff
	ff 00		 cmp	 BYTE PTR _$S4$138385[ebp+5], 0
  0143b	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  0143f	0f 94 c0	 sete	 al
  01442	88 85 59 ff ff
	ff		 mov	 BYTE PTR _$S4$138385[ebp+5], al
  01448	84 c0		 test	 al, al
  0144a	0f 84 bf 01 00
	00		 je	 $LN314@MainDialog
$LL559@MainDialog:

; 5224 : 					{
; 5225 : 						if (!favorite.VolumePathId.empty())

  01450	83 bd 8c 06 00
	00 00		 cmp	 DWORD PTR _favorite$138389[ebp+76], 0
  01457	0f 84 85 00 00
	00		 je	 $LN313@MainDialog

; 5226 : 						{
; 5227 : 							if (IsMountedVolume (favorite.Path.c_str()))

  0145d	8b 85 44 06 00
	00		 mov	 eax, DWORD PTR _favorite$138389[ebp+4]
  01463	39 b5 58 06 00
	00		 cmp	 DWORD PTR _favorite$138389[ebp+24], esi
  01469	73 06		 jae	 SHORT $LN570@MainDialog
  0146b	8d 85 44 06 00
	00		 lea	 eax, DWORD PTR _favorite$138389[ebp+4]
$LN570@MainDialog:
  01471	50		 push	 eax
  01472	e8 00 00 00 00	 call	 _IsMountedVolume
  01477	83 c4 04	 add	 esp, 4
  0147a	85 c0		 test	 eax, eax
  0147c	0f 85 6b 01 00
	00		 jne	 $LN988@MainDialog

; 5228 : 								continue;
; 5229 : 
; 5230 : 							char volDevPath[TC_MAX_PATH];
; 5231 : 							if (QueryDosDevice (favorite.VolumePathId.substr (4, favorite.VolumePathId.size() - 5).c_str(), volDevPath, TC_MAX_PATH) == 0)

  01482	8b 8d 8c 06 00
	00		 mov	 ecx, DWORD PTR _favorite$138389[ebp+76]
  01488	83 c1 fb	 add	 ecx, -5			; fffffffbH
  0148b	51		 push	 ecx
  0148c	6a 04		 push	 4
  0148e	8d 95 84 fe ff
	ff		 lea	 edx, DWORD PTR $T207832[ebp]
  01494	52		 push	 edx
  01495	8d 8d 78 06 00
	00		 lea	 ecx, DWORD PTR _favorite$138389[ebp+56]
  0149b	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  014a0	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  014a3	72 05		 jb	 SHORT $LN577@MainDialog
  014a5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  014a8	eb 03		 jmp	 SHORT $LN578@MainDialog
$LN577@MainDialog:
  014aa	83 c0 04	 add	 eax, 4
$LN578@MainDialog:
  014ad	68 04 01 00 00	 push	 260			; 00000104H
  014b2	8d 8d 10 20 00
	00		 lea	 ecx, DWORD PTR _volDevPath$138420[ebp]
  014b8	51		 push	 ecx
  014b9	50		 push	 eax
  014ba	ff d7		 call	 edi
  014bc	85 c0		 test	 eax, eax
  014be	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR $T207832[ebp]
  014c4	0f 94 c3	 sete	 bl
  014c7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  014cc	84 db		 test	 bl, bl
  014ce	0f 85 19 01 00
	00		 jne	 $LN988@MainDialog

; 5232 : 								continue;
; 5233 : 
; 5234 : 							favorite.DisconnectedDevice = false;

  014d4	88 9d b1 06 00
	00		 mov	 BYTE PTR _favorite$138389[ebp+113], bl
  014da	8b 5d e0	 mov	 ebx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  014dd	e9 a0 00 00 00	 jmp	 $LN309@MainDialog
$LN313@MainDialog:

; 5235 : 						}
; 5236 : 						else if (favorite.Path.find ("\\\\?\\Volume{") == 0)

  014e2	6a 00		 push	 0
  014e4	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CJEJOKNC@?2?2?$DP?2Volume?$HL?$AA@
  014e9	8d 8d 40 06 00
	00		 lea	 ecx, DWORD PTR _favorite$138389[ebp]
  014ef	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  014f4	85 c0		 test	 eax, eax
  014f6	0f 85 86 00 00
	00		 jne	 $LN309@MainDialog

; 5237 : 						{
; 5238 : 							string resolvedPath = VolumeGuidPathToDevicePath (favorite.Path);

  014fc	83 ec 1c	 sub	 esp, 28			; 0000001cH
  014ff	8d 95 40 06 00
	00		 lea	 edx, DWORD PTR _favorite$138389[ebp]
  01505	8b cc		 mov	 ecx, esp
  01507	89 65 b4	 mov	 DWORD PTR $T207833[ebp], esp
  0150a	52		 push	 edx
  0150b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  01510	8d 85 24 06 00
	00		 lea	 eax, DWORD PTR _resolvedPath$138427[ebp]
  01516	50		 push	 eax
  01517	e8 00 00 00 00	 call	 ?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z ; VolumeGuidPathToDevicePath
  0151c	83 c4 20	 add	 esp, 32			; 00000020H

; 5239 : 							if (resolvedPath.empty())

  0151f	83 bd 38 06 00
	00 00		 cmp	 DWORD PTR _resolvedPath$138427[ebp+20], 0
  01526	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+12], 8
  0152a	75 14		 jne	 SHORT $LN308@MainDialog

; 5240 : 								continue;

  0152c	8d 8d 24 06 00
	00		 lea	 ecx, DWORD PTR _resolvedPath$138427[ebp]
  01532	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  01536	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0153b	e9 b0 00 00 00	 jmp	 $LN315@MainDialog
$LN308@MainDialog:

; 5241 : 
; 5242 : 							favorite.DisconnectedDevice = false;
; 5243 : 							favorite.VolumePathId = favorite.Path;

  01540	6a ff		 push	 -1
  01542	6a 00		 push	 0
  01544	8d 8d 40 06 00
	00		 lea	 ecx, DWORD PTR _favorite$138389[ebp]
  0154a	51		 push	 ecx
  0154b	8d 8d 78 06 00
	00		 lea	 ecx, DWORD PTR _favorite$138389[ebp+56]
  01551	c6 85 b1 06 00
	00 00		 mov	 BYTE PTR _favorite$138389[ebp+113], 0
  01558	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 5244 : 							favorite.Path = resolvedPath;

  0155d	6a ff		 push	 -1
  0155f	6a 00		 push	 0
  01561	8d 95 24 06 00
	00		 lea	 edx, DWORD PTR _resolvedPath$138427[ebp]
  01567	52		 push	 edx
  01568	8d 8d 40 06 00
	00		 lea	 ecx, DWORD PTR _favorite$138389[ebp]
  0156e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 5245 : 						}

  01573	8d 8d 24 06 00
	00		 lea	 ecx, DWORD PTR _resolvedPath$138427[ebp]
  01579	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  0157d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN309@MainDialog:

; 5246 : 
; 5247 : 						if (IsMountedVolume (favorite.Path.c_str()))

  01582	8b 85 44 06 00
	00		 mov	 eax, DWORD PTR _favorite$138389[ebp+4]
  01588	39 b5 58 06 00
	00		 cmp	 DWORD PTR _favorite$138389[ebp+24], esi
  0158e	73 06		 jae	 SHORT $LN594@MainDialog
  01590	8d 85 44 06 00
	00		 lea	 eax, DWORD PTR _favorite$138389[ebp+4]
$LN594@MainDialog:
  01596	50		 push	 eax
  01597	e8 00 00 00 00	 call	 _IsMountedVolume
  0159c	83 c4 04	 add	 esp, 4
  0159f	85 c0		 test	 eax, eax
  015a1	75 4a		 jne	 SHORT $LN988@MainDialog

; 5248 : 							continue;
; 5249 : 
; 5250 : 						if (!IsVolumeDeviceHosted (favorite.Path.c_str()))

  015a3	8b 85 44 06 00
	00		 mov	 eax, DWORD PTR _favorite$138389[ebp+4]
  015a9	39 b5 58 06 00
	00		 cmp	 DWORD PTR _favorite$138389[ebp+24], esi
  015af	73 06		 jae	 SHORT $LN600@MainDialog
  015b1	8d 85 44 06 00
	00		 lea	 eax, DWORD PTR _favorite$138389[ebp+4]
$LN600@MainDialog:
  015b7	50		 push	 eax
  015b8	e8 00 00 00 00	 call	 _IsVolumeDeviceHosted
  015bd	83 c4 04	 add	 esp, 4
  015c0	85 c0		 test	 eax, eax
  015c2	0f 85 f7 00 00
	00		 jne	 $LN306@MainDialog

; 5251 : 						{
; 5252 : 							if (!FileExists (favorite.Path.c_str()))

  015c8	8b 85 44 06 00
	00		 mov	 eax, DWORD PTR _favorite$138389[ebp+4]
  015ce	39 b5 58 06 00
	00		 cmp	 DWORD PTR _favorite$138389[ebp+24], esi
  015d4	73 06		 jae	 SHORT $LN606@MainDialog
  015d6	8d 85 44 06 00
	00		 lea	 eax, DWORD PTR _favorite$138389[ebp+4]
$LN606@MainDialog:
  015dc	50		 push	 eax
  015dd	e8 00 00 00 00	 call	 _FileExists
  015e2	83 c4 04	 add	 esp, 4
  015e5	85 c0		 test	 eax, eax
  015e7	0f 85 df 00 00
	00		 jne	 $LN303@MainDialog
$LN988@MainDialog:

; 5240 : 								continue;

  015ed	8b 5d e0	 mov	 ebx, DWORD PTR _hwndDlg$GSCopy$[ebp]
$LN315@MainDialog:

; 5219 : 						break;
; 5220 : 
; 5221 : 					reentry = true;
; 5222 : 
; 5223 : 					foreach (FavoriteVolume favorite, FavoritesOnArrivalMountRequired)

  015f0	80 bd 59 ff ff
	ff 00		 cmp	 BYTE PTR _$S4$138385[ebp+5], 0
  015f7	c6 85 58 ff ff
	ff 01		 mov	 BYTE PTR _$S4$138385[ebp+4], 1
  015fe	0f 94 c0	 sete	 al
  01601	88 85 59 ff ff
	ff		 mov	 BYTE PTR _$S4$138385[ebp+5], al
  01607	84 c0		 test	 al, al
  01609	0f 85 41 fe ff
	ff		 jne	 $LL559@MainDialog
$LN314@MainDialog:

; 5275 : 						}
; 5276 : 					}

  0160f	8d 8d 40 06 00
	00		 lea	 ecx, DWORD PTR _favorite$138389[ebp]
  01615	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  01619	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  0161e	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _$S4$138385[ebp]
  01624	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  01627	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _$S4$138385[ebp]
  0162d	ff d0		 call	 eax
  0162f	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _$S4$138385[ebp]
  01635	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  01638	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _$S4$138385[ebp]
  0163e	ff d0		 call	 eax
  01640	84 c0		 test	 al, al
  01642	0f 85 d8 fd ff
	ff		 jne	 $LL319@MainDialog

; 5219 : 						break;
; 5220 : 
; 5221 : 					reentry = true;
; 5222 : 
; 5223 : 					foreach (FavoriteVolume favorite, FavoritesOnArrivalMountRequired)

  01648	be 10 00 00 00	 mov	 esi, 16			; 00000010H
$LN317@MainDialog:

; 5275 : 						}
; 5276 : 					}

  0164d	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _$S4$138385[ebp]
  01653	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0165a	e8 00 00 00 00	 call	 ??1?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ

; 5277 : 
; 5278 : 					bool deleted;
; 5279 : 					for (list <FavoriteVolume>::iterator favorite = FavoritesMountedOnArrivalStillConnected.begin();

  0165f	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+20
  01665	a1 00 00 00 00	 mov	 eax, DWORD PTR ?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  0166a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0166c	89 45 d4	 mov	 DWORD PTR _favorite$138514[ebp], eax
$LN1037@MainDialog:
  0166f	89 55 d8	 mov	 DWORD PTR _favorite$138514[ebp+4], edx
  01672	eb 0c 8d a4 24
	00 00 00 00 eb
	03 8d 49 00	 npad	 14
$LL468@MainDialog:

; 5280 : 						favorite != FavoritesMountedOnArrivalStillConnected.end();
; 5281 : 						deleted ? favorite : ++favorite)

  01680	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+20
  01686	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A
  0168c	8d 45 a4	 lea	 eax, DWORD PTR $T207843[ebp]
  0168f	89 4d a8	 mov	 DWORD PTR $T207843[ebp+4], ecx
  01692	50		 push	 eax
  01693	8d 4d d4	 lea	 ecx, DWORD PTR _favorite$138514[ebp]
  01696	89 55 a4	 mov	 DWORD PTR $T207843[ebp], edx
  01699	e8 00 00 00 00	 call	 ??9?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator!=
  0169e	84 c0		 test	 al, al
  016a0	0f 84 69 02 00
	00		 je	 $LN292@MainDialog

; 5282 : 					{
; 5283 : 						deleted = false;
; 5284 : 
; 5285 : 						if (IsMountedVolume (favorite->Path.c_str()))

  016a6	8d 4d d4	 lea	 ecx, DWORD PTR _favorite$138514[ebp]
  016a9	e8 00 00 00 00	 call	 ??C?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPAUFavoriteVolume@CipherShed@@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::operator->
  016ae	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  016b1	0f 82 44 01 00
	00		 jb	 $LN663@MainDialog
  016b7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  016ba	e9 3f 01 00 00	 jmp	 $LN664@MainDialog
$LN306@MainDialog:

; 5253 : 								continue;
; 5254 : 						}
; 5255 : 						else if (favorite.VolumePathId.empty())

  016bf	83 bd 8c 06 00
	00 00		 cmp	 DWORD PTR _favorite$138389[ebp+76], 0
  016c6	0f 84 24 ff ff
	ff		 je	 $LN315@MainDialog
$LN303@MainDialog:

; 5256 : 							continue;
; 5257 : 
; 5258 : 						bool mountedAndNotDisconnected = false;
; 5259 : 						foreach (FavoriteVolume mountedFavorite, FavoritesMountedOnArrivalStillConnected)

  016cc	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _$S5$138439[ebp]
  016d2	68 00 00 00 00	 push	 OFFSET ?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoritesMountedOnArrivalStillConnected
  016d7	50		 push	 eax
  016d8	c6 45 ef 00	 mov	 BYTE PTR _mountedAndNotDisconnected$138436[ebp], 0
  016dc	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@01@ABV?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> > >
  016e1	83 c4 08	 add	 esp, 8
  016e4	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _$S5$138439[ebp]
  016ea	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  016ed	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _$S5$138439[ebp]
  016f3	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+12], 9
  016f7	ff d0		 call	 eax
  016f9	84 c0		 test	 al, al
  016fb	0f 84 a2 00 00
	00		 je	 $LN300@MainDialog
$LL302@MainDialog:
  01701	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _$S5$138439[ebp+44]
  01707	e8 00 00 00 00	 call	 ??D?$_Const_iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEABUFavoriteVolume@CipherShed@@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Const_iterator<1>::operator*
  0170c	50		 push	 eax
  0170d	8d 8d ac 05 00
	00		 lea	 ecx, DWORD PTR _mountedFavorite$138443[ebp]
  01713	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@ABU01@@Z
  01718	80 bd 25 ff ff
	ff 00		 cmp	 BYTE PTR _$S5$138439[ebp+5], 0
  0171f	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+12], 10 ; 0000000aH
  01723	0f 94 c0	 sete	 al
  01726	88 85 25 ff ff
	ff		 mov	 BYTE PTR _$S5$138439[ebp+5], al
  0172c	84 c0		 test	 al, al
  0172e	74 3a		 je	 SHORT $LN297@MainDialog
$LL615@MainDialog:

; 5260 : 						{
; 5261 : 							if (favorite.Path == mountedFavorite.Path)

  01730	8d 8d ac 05 00
	00		 lea	 ecx, DWORD PTR _mountedFavorite$138443[ebp]
  01736	51		 push	 ecx
  01737	8d 95 40 06 00
	00		 lea	 edx, DWORD PTR _favorite$138389[ebp]
  0173d	52		 push	 edx
  0173e	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  01743	83 c4 08	 add	 esp, 8
  01746	84 c0		 test	 al, al
  01748	75 1c		 jne	 SHORT $LN851@MainDialog
  0174a	38 85 25 ff ff
	ff		 cmp	 BYTE PTR _$S5$138439[ebp+5], al
  01750	c6 85 24 ff ff
	ff 01		 mov	 BYTE PTR _$S5$138439[ebp+4], 1
  01757	0f 94 c0	 sete	 al
  0175a	88 85 25 ff ff
	ff		 mov	 BYTE PTR _$S5$138439[ebp+5], al
  01760	84 c0		 test	 al, al
  01762	75 cc		 jne	 SHORT $LL615@MainDialog
  01764	eb 04		 jmp	 SHORT $LN297@MainDialog
$LN851@MainDialog:

; 5262 : 							{
; 5263 : 								mountedAndNotDisconnected = true;

  01766	c6 45 ef 01	 mov	 BYTE PTR _mountedAndNotDisconnected$138436[ebp], 1
$LN297@MainDialog:

; 5264 : 								break;
; 5265 : 							}
; 5266 : 						}

  0176a	8d 8d ac 05 00
	00		 lea	 ecx, DWORD PTR _mountedFavorite$138443[ebp]
  01770	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+12], 9
  01774	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ
  01779	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _$S5$138439[ebp]
  0177f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  01782	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _$S5$138439[ebp]
  01788	ff d2		 call	 edx
  0178a	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _$S5$138439[ebp]
  01790	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  01793	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _$S5$138439[ebp]
  01799	ff d2		 call	 edx
  0179b	84 c0		 test	 al, al
  0179d	0f 85 5e ff ff
	ff		 jne	 $LL302@MainDialog
$LN300@MainDialog:
  017a3	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _$S5$138439[ebp]
  017a9	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  017ad	e8 00 00 00 00	 call	 ??1?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ

; 5267 : 
; 5268 : 						if (!mountedAndNotDisconnected)

  017b2	80 7d ef 00	 cmp	 BYTE PTR _mountedAndNotDisconnected$138436[ebp], 0
  017b6	0f 85 31 fe ff
	ff		 jne	 $LN988@MainDialog

; 5269 : 						{
; 5270 : 							FavoriteMountOnArrivalInProgress = TRUE;
; 5271 : 							MountFavoriteVolumes (FALSE, FALSE, FALSE, favorite);

  017bc	8d 85 40 06 00
	00		 lea	 eax, DWORD PTR _favorite$138389[ebp]
  017c2	50		 push	 eax
  017c3	6a 00		 push	 0
  017c5	6a 00		 push	 0
  017c7	6a 00		 push	 0
  017c9	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _FavoriteMountOnArrivalInProgress, 1
  017d3	e8 00 00 00 00	 call	 ?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z ; MountFavoriteVolumes
  017d8	83 c4 10	 add	 esp, 16			; 00000010H

; 5272 : 							FavoriteMountOnArrivalInProgress = FALSE;
; 5273 : 
; 5274 : 							FavoritesMountedOnArrivalStillConnected.push_back (favorite);

  017db	8d 8d 40 06 00
	00		 lea	 ecx, DWORD PTR _favorite$138389[ebp]
  017e1	51		 push	 ecx
  017e2	b9 00 00 00 00	 mov	 ecx, OFFSET ?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoritesMountedOnArrivalStillConnected
  017e7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _FavoriteMountOnArrivalInProgress, 0
  017f1	e8 00 00 00 00	 call	 ?push_back@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEXABUFavoriteVolume@CipherShed@@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::push_back
  017f6	e9 f5 fd ff ff	 jmp	 $LN315@MainDialog

; 5282 : 					{
; 5283 : 						deleted = false;
; 5284 : 
; 5285 : 						if (IsMountedVolume (favorite->Path.c_str()))

$LN663@MainDialog:
  017fb	83 c0 04	 add	 eax, 4
$LN664@MainDialog:
  017fe	50		 push	 eax
  017ff	e8 00 00 00 00	 call	 _IsMountedVolume
  01804	83 c4 04	 add	 esp, 4
  01807	85 c0		 test	 eax, eax
  01809	0f 85 f3 00 00
	00		 jne	 $LN881@MainDialog

; 5286 : 							continue;
; 5287 : 
; 5288 : 						if (!IsVolumeDeviceHosted (favorite->Path.c_str()))

  0180f	8d 4d d4	 lea	 ecx, DWORD PTR _favorite$138514[ebp]
  01812	e8 00 00 00 00	 call	 ??C?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPAUFavoriteVolume@CipherShed@@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::operator->
  01817	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  0181a	72 05		 jb	 SHORT $LN669@MainDialog
  0181c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0181f	eb 03		 jmp	 SHORT $LN670@MainDialog
$LN669@MainDialog:
  01821	83 c0 04	 add	 eax, 4
$LN670@MainDialog:
  01824	50		 push	 eax
  01825	e8 00 00 00 00	 call	 _IsVolumeDeviceHosted
  0182a	83 c4 04	 add	 esp, 4
  0182d	85 c0		 test	 eax, eax
  0182f	75 26		 jne	 SHORT $LN289@MainDialog

; 5289 : 						{
; 5290 : 							if (FileExists (favorite->Path.c_str()))

  01831	8d 4d d4	 lea	 ecx, DWORD PTR _favorite$138514[ebp]
  01834	e8 00 00 00 00	 call	 ??C?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPAUFavoriteVolume@CipherShed@@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::operator->
  01839	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  0183c	72 05		 jb	 SHORT $LN675@MainDialog
  0183e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  01841	eb 03		 jmp	 SHORT $LN676@MainDialog
$LN675@MainDialog:
  01843	83 c0 04	 add	 eax, 4
$LN676@MainDialog:
  01846	50		 push	 eax
  01847	e8 00 00 00 00	 call	 _FileExists
  0184c	83 c4 04	 add	 esp, 4
  0184f	85 c0		 test	 eax, eax
  01851	0f 85 ab 00 00
	00		 jne	 $LN881@MainDialog
$LN289@MainDialog:

; 5291 : 								continue;
; 5292 : 						}
; 5293 : 
; 5294 : 						char volDevPath[TC_MAX_PATH];
; 5295 : 						if (favorite->VolumePathId.size() > 5
; 5296 : 							&& QueryDosDevice (favorite->VolumePathId.substr (4, favorite->VolumePathId.size() - 5).c_str(), volDevPath, TC_MAX_PATH) != 0)

  01857	8d 4d d4	 lea	 ecx, DWORD PTR _favorite$138514[ebp]
  0185a	e8 00 00 00 00	 call	 ??C?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPAUFavoriteVolume@CipherShed@@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::operator->
  0185f	83 c0 38	 add	 eax, 56			; 00000038H
  01862	83 78 14 05	 cmp	 DWORD PTR [eax+20], 5
  01866	76 55		 jbe	 SHORT $LN469@MainDialog
  01868	8d 4d d4	 lea	 ecx, DWORD PTR _favorite$138514[ebp]
  0186b	e8 00 00 00 00	 call	 ??C?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPAUFavoriteVolume@CipherShed@@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::operator->
  01870	83 c0 38	 add	 eax, 56			; 00000038H
  01873	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  01876	83 c0 fb	 add	 eax, -5			; fffffffbH
  01879	50		 push	 eax
  0187a	6a 04		 push	 4
  0187c	8d 8d 88 fd ff
	ff		 lea	 ecx, DWORD PTR $T207845[ebp]
  01882	51		 push	 ecx
  01883	8d 4d d4	 lea	 ecx, DWORD PTR _favorite$138514[ebp]
  01886	e8 00 00 00 00	 call	 ??C?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QBEPAUFavoriteVolume@CipherShed@@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::operator->
  0188b	8b c8		 mov	 ecx, eax
  0188d	83 c1 38	 add	 ecx, 56			; 00000038H
  01890	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  01895	83 4d e8 01	 or	 DWORD PTR $T207898[ebp], 1
  01899	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  0189c	72 05		 jb	 SHORT $LN685@MainDialog
  0189e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  018a1	eb 03		 jmp	 SHORT $LN686@MainDialog
$LN685@MainDialog:
  018a3	83 c0 04	 add	 eax, 4
$LN686@MainDialog:
  018a6	68 04 01 00 00	 push	 260			; 00000104H
  018ab	8d 95 0c 1f 00
	00		 lea	 edx, DWORD PTR _volDevPath$138523[ebp]
  018b1	52		 push	 edx
  018b2	50		 push	 eax
  018b3	ff d7		 call	 edi
  018b5	c6 45 ef 01	 mov	 BYTE PTR $T207844[ebp], 1
  018b9	85 c0		 test	 eax, eax
  018bb	75 04		 jne	 SHORT $LN470@MainDialog
$LN469@MainDialog:
  018bd	c6 45 ef 00	 mov	 BYTE PTR $T207844[ebp], 0
$LN470@MainDialog:
  018c1	f6 45 e8 01	 test	 BYTE PTR $T207898[ebp], 1
  018c5	74 0f		 je	 SHORT $LN509@MainDialog
  018c7	83 65 e8 fe	 and	 DWORD PTR $T207898[ebp], -2 ; fffffffeH
  018cb	8d 8d 88 fd ff
	ff		 lea	 ecx, DWORD PTR $T207845[ebp]
  018d1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN509@MainDialog:
  018d6	80 7d ef 00	 cmp	 BYTE PTR $T207844[ebp], 0
  018da	75 26		 jne	 SHORT $LN881@MainDialog

; 5297 : 						{
; 5298 : 							continue;
; 5299 : 						}
; 5300 : 
; 5301 : 						favorite = FavoritesMountedOnArrivalStillConnected.erase (favorite);

  018dc	8b 45 d8	 mov	 eax, DWORD PTR _favorite$138514[ebp+4]
  018df	8b 4d d4	 mov	 ecx, DWORD PTR _favorite$138514[ebp]
  018e2	50		 push	 eax
  018e3	51		 push	 ecx
  018e4	8d 95 a0 fe ff
	ff		 lea	 edx, DWORD PTR $T207849[ebp]
  018ea	52		 push	 edx
  018eb	b9 00 00 00 00	 mov	 ecx, OFFSET ?FavoritesMountedOnArrivalStillConnected@CipherShed@@3V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoritesMountedOnArrivalStillConnected
  018f0	e8 00 00 00 00	 call	 ?erase@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::erase
  018f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  018f7	89 4d d4	 mov	 DWORD PTR _favorite$138514[ebp], ecx
  018fa	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  018fd	e9 6d fd ff ff	 jmp	 $LN1037@MainDialog
$LN881@MainDialog:

; 5280 : 						favorite != FavoritesMountedOnArrivalStillConnected.end();
; 5281 : 						deleted ? favorite : ++favorite)

  01902	8d 4d d4	 lea	 ecx, DWORD PTR _favorite$138514[ebp]
  01905	e8 00 00 00 00	 call	 ??E?$_Iterator@$00@?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::_Iterator<1>::operator++
  0190a	e9 71 fd ff ff	 jmp	 $LL468@MainDialog
$LN292@MainDialog:

; 5302 : 						deleted = true;
; 5303 : 					}
; 5304 : 
; 5305 : 					reentry = false;

  0190f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?reentry@?PP@??MainDialogProc@@9@16@4_NA, 0
$LN321@MainDialog:

; 5306 : 				}
; 5307 : 			}
; 5308 : 
; 5309 : 			// Exit background process in non-install mode or if no volume mounted
; 5310 : 			// and no other instance active
; 5311 : 			if (LastKnownMountList.ulMountedDrives == 0
; 5312 : 				&& MainWindowHidden
; 5313 : #ifndef _DEBUG
; 5314 : 				&& (bCloseBkgTaskWhenNoVolumes || IsNonInstallMode ()) 
; 5315 : 				&& !SysEncDeviceActive (TRUE)
; 5316 : #endif
; 5317 : 				&& GetDriverRefCount () < 2)

  01916	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _LastKnownMountList, 0
  0191d	0f 85 79 e8 ff
	ff		 jne	 $LN349@MainDialog
  01923	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _MainWindowHidden, 0
  0192a	0f 84 6c e8 ff
	ff		 je	 $LN349@MainDialog
  01930	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bCloseBkgTaskWhenNoVolumes, 0
  01937	75 0d		 jne	 SHORT $LN286@MainDialog
  01939	e8 00 00 00 00	 call	 _IsNonInstallMode
  0193e	85 c0		 test	 eax, eax
  01940	0f 84 56 e8 ff
	ff		 je	 $LN349@MainDialog
$LN286@MainDialog:
  01946	6a 01		 push	 1
  01948	e8 00 00 00 00	 call	 ?SysEncDeviceActive@@YAHH@Z ; SysEncDeviceActive
  0194d	83 c4 04	 add	 esp, 4
  01950	85 c0		 test	 eax, eax
  01952	0f 85 44 e8 ff
	ff		 jne	 $LN349@MainDialog
  01958	e8 00 00 00 00	 call	 _GetDriverRefCount
  0195d	83 f8 02	 cmp	 eax, 2
  01960	0f 8d 36 e8 ff
	ff		 jge	 $LN349@MainDialog

; 5318 : 			{
; 5319 : 				TaskBarIconRemove (hwndDlg);

  01966	53		 push	 ebx
  01967	e8 00 00 00 00	 call	 _TaskBarIconRemove

; 5320 : 				EndMainDlg (hwndDlg);

  0196c	53		 push	 ebx
  0196d	e8 00 00 00 00	 call	 _EndMainDlg
  01972	83 c4 08	 add	 esp, 8

; 5321 : 			}
; 5322 : 		}
; 5323 : 		return 1;

  01975	e9 22 e8 ff ff	 jmp	 $LN349@MainDialog
$LN348@MainDialog:

; 5080 : 		}
; 5081 : 		return 1;
; 5082 : 
; 5083 : 	case WM_SYSCOMMAND:
; 5084 : 		if (lw == IDC_ABOUT)

  0197a	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  0197f	66 3b f0	 cmp	 si, ax
  01982	0f 85 0b f8 ff
	ff		 jne	 $LN347@MainDialog

; 5085 : 		{
; 5086 : 			DialogBoxW (hInst, MAKEINTRESOURCEW (IDD_ABOUT_DLG), hwndDlg, (DLGPROC) AboutDlgProc);

  01988	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  0198e	52		 push	 edx
  0198f	68 00 00 00 00	 push	 OFFSET _AboutDlgProc@16
  01994	53		 push	 ebx
  01995	68 fc 01 00 00	 push	 508			; 000001fcH
  0199a	51		 push	 ecx
  0199b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 5087 : 			return 1;

  019a1	e9 f6 e7 ff ff	 jmp	 $LN349@MainDialog
$LN186@MainDialog:

; 5741 : 				}
; 5742 : 			}
; 5743 : 		}
; 5744 : 		return 0;
; 5745 : 
; 5746 : 	case WM_ERASEBKGND:
; 5747 : 		return 0;
; 5748 : 
; 5749 : 	case WM_COMMAND:
; 5750 : 
; 5751 : 		if (lw == IDCANCEL || lw == IDC_EXIT)

  019a6	66 83 fe 02	 cmp	 si, 2
  019aa	0f 84 10 09 00
	00		 je	 $LN3@MainDialog
  019b0	b8 26 04 00 00	 mov	 eax, 1062		; 00000426H
  019b5	66 3b f0	 cmp	 si, ax
  019b8	0f 84 02 09 00
	00		 je	 $LN3@MainDialog

; 5752 : 		{
; 5753 : 			EndMainDlg (hwndDlg);
; 5754 : 			return 1;
; 5755 : 		}
; 5756 : 
; 5757 : 		if (lw == IDHELP || lw == IDM_HELP)

  019be	66 83 fe 09	 cmp	 si, 9
  019c2	0f 84 f0 e6 ff
	ff		 je	 $LN346@MainDialog
  019c8	b9 41 9c 00 00	 mov	 ecx, 40001		; 00009c41H
  019cd	66 3b f1	 cmp	 si, cx
  019d0	0f 84 e2 e6 ff
	ff		 je	 $LN346@MainDialog

; 5758 : 		{
; 5759 : 			OpenPageHelp (hwndDlg, 0);
; 5760 : 			return 1;
; 5761 : 		}
; 5762 : 
; 5763 : 		if (lw == IDM_ABOUT || lw == IDC_LOGO)

  019d6	b8 42 9c 00 00	 mov	 eax, 40002		; 00009c42H
  019db	66 3b f0	 cmp	 si, ax
  019de	0f 84 b4 13 00
	00		 je	 $LN180@MainDialog
  019e4	b9 4a 04 00 00	 mov	 ecx, 1098		; 0000044aH
  019e9	66 3b f1	 cmp	 si, cx
  019ec	0f 84 a6 13 00
	00		 je	 $LN180@MainDialog

; 5767 : 		}
; 5768 : 
; 5769 : 		if (lw == IDOK && LOWORD (GetSelectedLong (GetDlgItem (hwndDlg, IDC_DRIVELIST))) == TC_MLIST_ITEM_NONSYS_VOL
; 5770 : 			|| lw == IDM_UNMOUNT_VOLUME)

  019f2	66 83 fe 01	 cmp	 si, 1
  019f6	75 22		 jne	 SHORT $LN177@MainDialog
  019f8	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  019fe	68 ef 03 00 00	 push	 1007			; 000003efH
  01a03	53		 push	 ebx
  01a04	ff d7		 call	 edi
  01a06	50		 push	 eax
  01a07	e8 00 00 00 00	 call	 _GetSelectedLong
  01a0c	83 c4 04	 add	 esp, 4
  01a0f	66 3b c6	 cmp	 ax, si
  01a12	0f 84 ff ea ff
	ff		 je	 $LN198@MainDialog
  01a18	eb 66		 jmp	 SHORT $LN173@MainDialog
$LN177@MainDialog:
  01a1a	ba 43 9c 00 00	 mov	 edx, 40003		; 00009c43H
  01a1f	66 3b f2	 cmp	 si, dx
  01a22	75 2e		 jne	 SHORT $LN179@MainDialog

; 5771 : 		{
; 5772 : 			if (lw == IDM_UNMOUNT_VOLUME && LOWORD (GetSelectedLong (GetDlgItem (hwndDlg, IDC_DRIVELIST))) != TC_MLIST_ITEM_NONSYS_VOL)

  01a24	68 ef 03 00 00	 push	 1007			; 000003efH
  01a29	53		 push	 ebx
  01a2a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  01a30	50		 push	 eax
  01a31	e8 00 00 00 00	 call	 _GetSelectedLong
  01a36	83 c4 04	 add	 esp, 4
  01a39	66 83 f8 01	 cmp	 ax, 1
  01a3d	0f 84 d4 ea ff
	ff		 je	 $LN198@MainDialog
$LN62@MainDialog:

; 5773 : 			{
; 5774 : 				Warning ("SELECT_A_MOUNTED_VOLUME");

  01a43	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DPFJFJBI@SELECT_A_MOUNTED_VOLUME?$AA@
  01a48	e8 00 00 00 00	 call	 _Warning

; 5775 : 				return 1;

  01a4d	e9 47 e7 ff ff	 jmp	 $LN1033@MainDialog
$LN179@MainDialog:

; 5776 : 			}
; 5777 : 
; 5778 : 			if (CheckMountList ())
; 5779 : 				Dismount (hwndDlg, 0);
; 5780 : 			return 1;
; 5781 : 		}
; 5782 : 
; 5783 : 		if ((lw == IDOK || lw == IDM_MOUNT_VOLUME || lw == IDM_MOUNT_VOLUME_OPTIONS || lw == IDC_MOUNTALL || lw == IDM_MOUNTALL) 
; 5784 : 			&& LOWORD (GetSelectedLong (GetDlgItem (hwndDlg, IDC_DRIVELIST))) == 0xffff)

  01a52	b8 4e 9c 00 00	 mov	 eax, 40014		; 00009c4eH
  01a57	66 3b f0	 cmp	 si, ax
  01a5a	74 1e		 je	 SHORT $LN993@MainDialog
  01a5c	b9 47 9c 00 00	 mov	 ecx, 40007		; 00009c47H
  01a61	66 3b f1	 cmp	 si, cx
  01a64	74 14		 je	 SHORT $LN993@MainDialog
  01a66	ba 11 04 00 00	 mov	 edx, 1041		; 00000411H
  01a6b	66 3b f2	 cmp	 si, dx
  01a6e	74 0a		 je	 SHORT $LN993@MainDialog
  01a70	b8 4c 9c 00 00	 mov	 eax, 40012		; 00009c4cH
  01a75	66 3b f0	 cmp	 si, ax
  01a78	75 42		 jne	 SHORT $LN994@MainDialog
$LN993@MainDialog:

; 5767 : 		}
; 5768 : 
; 5769 : 		if (lw == IDOK && LOWORD (GetSelectedLong (GetDlgItem (hwndDlg, IDC_DRIVELIST))) == TC_MLIST_ITEM_NONSYS_VOL
; 5770 : 			|| lw == IDM_UNMOUNT_VOLUME)

  01a7a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
$LN173@MainDialog:

; 5776 : 			}
; 5777 : 
; 5778 : 			if (CheckMountList ())
; 5779 : 				Dismount (hwndDlg, 0);
; 5780 : 			return 1;
; 5781 : 		}
; 5782 : 
; 5783 : 		if ((lw == IDOK || lw == IDM_MOUNT_VOLUME || lw == IDM_MOUNT_VOLUME_OPTIONS || lw == IDC_MOUNTALL || lw == IDM_MOUNTALL) 
; 5784 : 			&& LOWORD (GetSelectedLong (GetDlgItem (hwndDlg, IDC_DRIVELIST))) == 0xffff)

  01a80	68 ef 03 00 00	 push	 1007			; 000003efH
  01a85	53		 push	 ebx
  01a86	ff d7		 call	 edi
  01a88	50		 push	 eax
  01a89	e8 00 00 00 00	 call	 _GetSelectedLong
  01a8e	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  01a93	83 c4 04	 add	 esp, 4
  01a96	66 3b c1	 cmp	 ax, cx
  01a99	75 27		 jne	 SHORT $LN174@MainDialog

; 5785 : 		{
; 5786 : 			MessageBoxW (hwndDlg, GetString ("SELECT_FREE_DRIVE"), L"CipherShed", MB_ICONEXCLAMATION);

  01a9b	6a 30		 push	 48			; 00000030H
  01a9d	68 00 00 00 00	 push	 OFFSET ??_C@_1BG@INDNNNCG@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?$AA@
  01aa2	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PDEAFOMG@SELECT_FREE_DRIVE?$AA@
  01aa7	e8 00 00 00 00	 call	 _GetString
  01aac	83 c4 04	 add	 esp, 4
  01aaf	50		 push	 eax
  01ab0	53		 push	 ebx
  01ab1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 5787 : 			return 1;

  01ab7	e9 e0 e6 ff ff	 jmp	 $LN349@MainDialog
$LN994@MainDialog:
  01abc	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
$LN174@MainDialog:

; 5788 : 		}
; 5789 : 
; 5790 : 		if ((lw == IDOK || lw == IDM_MOUNT_VOLUME || lw == IDM_MOUNT_VOLUME_OPTIONS))

  01ac2	66 83 fe 01	 cmp	 si, 1
  01ac6	0f 84 b0 12 00
	00		 je	 $LN171@MainDialog
  01acc	ba 4e 9c 00 00	 mov	 edx, 40014		; 00009c4eH
  01ad1	66 3b f2	 cmp	 si, dx
  01ad4	0f 84 a2 12 00
	00		 je	 $LN171@MainDialog
  01ada	b8 47 9c 00 00	 mov	 eax, 40007		; 00009c47H
  01adf	66 3b f0	 cmp	 si, ax
  01ae2	0f 84 94 12 00
	00		 je	 $LN171@MainDialog

; 5794 : 		}
; 5795 : 
; 5796 : 		if (lw == IDC_UNMOUNTALL || lw == IDM_UNMOUNTALL)

  01ae8	b9 29 04 00 00	 mov	 ecx, 1065		; 00000429H
  01aed	66 3b f1	 cmp	 si, cx
  01af0	0f 84 42 12 00
	00		 je	 $LN169@MainDialog
  01af6	ba 4d 9c 00 00	 mov	 edx, 40013		; 00009c4dH
  01afb	66 3b f2	 cmp	 si, dx
  01afe	0f 84 34 12 00
	00		 je	 $LN169@MainDialog

; 5805 : 		}
; 5806 : 
; 5807 : 		if (lw == IDC_MOUNTALL || lw == IDM_MOUNTALL)

  01b04	b8 11 04 00 00	 mov	 eax, 1041		; 00000411H
  01b09	66 3b f0	 cmp	 si, ax
  01b0c	0f 84 ed 11 00
	00		 je	 $LN166@MainDialog
  01b12	b9 4c 9c 00 00	 mov	 ecx, 40012		; 00009c4cH
  01b17	66 3b f1	 cmp	 si, cx
  01b1a	0f 84 df 11 00
	00		 je	 $LN166@MainDialog

; 5812 : 		}
; 5813 : 		
; 5814 : 		if (lw == IDC_SELECT_FILE || lw == IDM_SELECT_FILE)

  01b20	ba 13 04 00 00	 mov	 edx, 1043		; 00000413H
  01b25	66 3b f2	 cmp	 si, dx
  01b28	0f 84 c5 11 00
	00		 je	 $LN164@MainDialog
  01b2e	b8 55 9c 00 00	 mov	 eax, 40021		; 00009c55H
  01b33	66 3b f0	 cmp	 si, ax
  01b36	0f 84 b7 11 00
	00		 je	 $LN164@MainDialog

; 5818 : 		}
; 5819 : 
; 5820 : 		if (lw == IDC_SELECT_DEVICE || lw == IDM_SELECT_DEVICE)

  01b3c	b9 0d 04 00 00	 mov	 ecx, 1037		; 0000040dH
  01b41	66 3b f1	 cmp	 si, cx
  01b44	0f 84 9d 11 00
	00		 je	 $LN162@MainDialog
  01b4a	ba 56 9c 00 00	 mov	 edx, 40022		; 00009c56H
  01b4f	66 3b f2	 cmp	 si, dx
  01b52	0f 84 8f 11 00
	00		 je	 $LN162@MainDialog

; 5824 : 		}
; 5825 : 
; 5826 : 		// System Encryption menu
; 5827 : 		switch (lw)

  01b58	0f b7 c6	 movzx	 eax, si
  01b5b	89 45 e8	 mov	 DWORD PTR tv4991[ebp], eax
  01b5e	05 97 63 ff ff	 add	 eax, -40041		; ffff6397H
  01b63	83 f8 09	 cmp	 eax, 9
  01b66	0f 87 d9 00 00
	00		 ja	 $LN149@MainDialog
  01b6c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN1054@MainDialog[eax*4]
$LN159@MainDialog:

; 5828 : 		{
; 5829 : 		case IDM_ENCRYPT_SYSTEM_DEVICE:
; 5830 : 			EncryptSystemDevice ();

  01b73	e8 00 00 00 00	 call	 ?EncryptSystemDevice@@YAXXZ ; EncryptSystemDevice

; 5831 : 			break;

  01b78	e9 c8 00 00 00	 jmp	 $LN149@MainDialog
$LN158@MainDialog:

; 5832 : 		case IDM_PERMANENTLY_DECRYPT_SYS:
; 5833 : 			DecryptSystemDevice ();

  01b7d	e8 00 00 00 00	 call	 ?DecryptSystemDevice@@YAXXZ ; DecryptSystemDevice

; 5834 : 			break;

  01b82	e9 be 00 00 00	 jmp	 $LN149@MainDialog
$LN157@MainDialog:

; 5835 : 		case IDM_CREATE_HIDDEN_OS:
; 5836 : 			CreateHiddenOS ();

  01b87	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FGMBBDKC@HIDDEN_OS_PREINFO?$AA@
  01b8c	e8 00 00 00 00	 call	 _Info
  01b91	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  01b96	50		 push	 eax
  01b97	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_08MEKEMIGM@?1isysenc?$AA@
  01b9c	e8 00 00 00 00	 call	 ?LaunchVolCreationWizard@@YAXPAUHWND__@@PBD@Z ; LaunchVolCreationWizard

; 5837 : 			break;

  01ba1	8b 5d e0	 mov	 ebx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  01ba4	83 c4 08	 add	 esp, 8
  01ba7	e9 99 00 00 00	 jmp	 $LN149@MainDialog
$LN156@MainDialog:

; 5838 : 		case IDM_SYSENC_RESUME:
; 5839 : 			ResumeInterruptedSysEncProcess ();

  01bac	e8 00 00 00 00	 call	 ?ResumeInterruptedSysEncProcess@@YAXXZ ; ResumeInterruptedSysEncProcess

; 5840 : 			break;

  01bb1	e9 8f 00 00 00	 jmp	 $LN149@MainDialog
$LN155@MainDialog:

; 5841 : 		case IDM_SYSTEM_ENCRYPTION_STATUS:
; 5842 : 			ShowSystemEncryptionStatus ();

  01bb6	e8 00 00 00 00	 call	 ?ShowSystemEncryptionStatus@@YAXXZ ; ShowSystemEncryptionStatus

; 5843 : 			break;

  01bbb	e9 85 00 00 00	 jmp	 $LN149@MainDialog
$LN154@MainDialog:

; 5844 : 		case IDM_CHANGE_SYS_PASSWORD:
; 5845 : 			ChangeSysEncPassword (hwndDlg, FALSE);

  01bc0	6a 00		 push	 0
  01bc2	53		 push	 ebx
  01bc3	e8 00 00 00 00	 call	 ?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z ; ChangeSysEncPassword
  01bc8	83 c4 08	 add	 esp, 8

; 5846 : 			break;

  01bcb	eb 78		 jmp	 SHORT $LN149@MainDialog
$LN153@MainDialog:

; 5847 : 		case IDM_CHANGE_SYS_HEADER_KEY_DERIV_ALGO:
; 5848 : 			ChangeSysEncPassword (hwndDlg, TRUE);

  01bcd	6a 01		 push	 1
  01bcf	53		 push	 ebx
  01bd0	e8 00 00 00 00	 call	 ?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z ; ChangeSysEncPassword
  01bd5	83 c4 08	 add	 esp, 8

; 5849 : 			break;

  01bd8	eb 6b		 jmp	 SHORT $LN149@MainDialog
$LN152@MainDialog:

; 5850 : 		case IDM_CREATE_RESCUE_DISK:
; 5851 : 			CreateRescueDisk ();

  01bda	e8 00 00 00 00	 call	 _CreateRescueDisk

; 5852 : 			break;

  01bdf	eb 64		 jmp	 SHORT $LN149@MainDialog
$LN151@MainDialog:

; 5853 : 		case IDM_VERIFY_RESCUE_DISK:
; 5854 : 			VerifyRescueDisk ();

  01be1	e8 00 00 00 00	 call	 ?VerifyRescueDisk@@YAXXZ ; VerifyRescueDisk

; 5855 : 			break;

  01be6	eb 5d		 jmp	 SHORT $LN149@MainDialog
$LN150@MainDialog:

; 5856 : 		case IDM_MOUNT_SYSENC_PART_WITHOUT_PBA:
; 5857 : 
; 5858 : 			if (CheckSysEncMountWithoutPBA ("", FALSE))

  01be8	6a 00		 push	 0
  01bea	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  01bef	e8 00 00 00 00	 call	 _CheckSysEncMountWithoutPBA
  01bf4	83 c4 08	 add	 esp, 8
  01bf7	85 c0		 test	 eax, eax
  01bf9	74 4a		 je	 SHORT $LN149@MainDialog

; 5859 : 			{
; 5860 : 				mountOptions = defaultMountOptions;
; 5861 : 				mountOptions.PartitionInInactiveSysEncScope = TRUE;

  01bfb	b8 01 00 00 00	 mov	 eax, 1
  01c00	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  01c05	be 00 00 00 00	 mov	 esi, OFFSET ?defaultMountOptions@@3UMountOptions@@A ; defaultMountOptions
  01c0a	bf 00 00 00 00	 mov	 edi, OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  01c0f	f3 a5		 rep movsd
  01c11	a3 10 00 00 00	 mov	 DWORD PTR ?mountOptions@@3UMountOptions@@A+16, eax

; 5862 : 				bPrebootPasswordDlgMode = TRUE;

  01c16	a3 00 00 00 00	 mov	 DWORD PTR _bPrebootPasswordDlgMode, eax

; 5863 : 
; 5864 : 				if (CheckMountList ())

  01c1b	e8 00 00 00 00	 call	 _CheckMountList
  01c20	85 c0		 test	 eax, eax
  01c22	74 0e		 je	 SHORT $LN148@MainDialog

; 5865 : 					Mount (hwndDlg, 0, 0);

  01c24	6a 00		 push	 0
  01c26	33 c9		 xor	 ecx, ecx
  01c28	8b d3		 mov	 edx, ebx
  01c2a	e8 00 00 00 00	 call	 ?Mount@@YAHPAUHWND__@@HPAD@Z ; Mount
  01c2f	83 c4 04	 add	 esp, 4
$LN148@MainDialog:

; 5866 : 
; 5867 : 				bPrebootPasswordDlgMode = FALSE;

  01c32	8b 75 dc	 mov	 esi, DWORD PTR _wParam$GSCopy$[ebp]
  01c35	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  01c3b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bPrebootPasswordDlgMode, 0
$LN149@MainDialog:

; 5868 : 			}
; 5869 : 			break;
; 5870 : 		}
; 5871 : 
; 5872 : 		if (lw == IDC_VOLUME_TOOLS)

  01c45	b9 0f 04 00 00	 mov	 ecx, 1039		; 0000040fH
  01c4a	66 3b f1	 cmp	 si, cx
  01c4d	0f 85 f8 02 00
	00		 jne	 $LN147@MainDialog

; 5873 : 		{
; 5874 : 			/* Volume Tools popup menu */
; 5875 : 
; 5876 : 			int menuItem;
; 5877 : 			char volPath[TC_MAX_PATH];		/* Volume to mount */
; 5878 : 			HMENU popup = CreatePopupMenu ();

  01c53	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  01c59	8b f0		 mov	 esi, eax

; 5879 : 			RECT rect;
; 5880 : 
; 5881 : 			if (ActiveSysEncDeviceSelected ())

  01c5b	e8 00 00 00 00	 call	 ?ActiveSysEncDeviceSelected@@YAHXZ ; ActiveSysEncDeviceSelected
  01c60	85 c0		 test	 eax, eax
  01c62	74 10		 je	 SHORT $LN146@MainDialog

; 5882 : 			{
; 5883 : 				PopulateSysEncContextMenu (popup, TRUE);

  01c64	6a 01		 push	 1
  01c66	56		 push	 esi
  01c67	e8 00 00 00 00	 call	 ?PopulateSysEncContextMenu@@YAXPAUHMENU__@@H@Z ; PopulateSysEncContextMenu
  01c6c	83 c4 08	 add	 esp, 8

; 5884 : 			}
; 5885 : 			else

  01c6f	e9 b6 00 00 00	 jmp	 $LN145@MainDialog
$LN146@MainDialog:

; 5886 : 			{
; 5887 : 				AppendMenuW (popup, MF_STRING, IDM_CHANGE_PASSWORD, GetString ("IDM_CHANGE_PASSWORD"));

  01c74	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NDHENBON@IDM_CHANGE_PASSWORD?$AA@
  01c79	e8 00 00 00 00	 call	 _GetString
  01c7e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__AppendMenuW@16
  01c84	83 c4 04	 add	 esp, 4
  01c87	50		 push	 eax
  01c88	68 4f 9c 00 00	 push	 40015			; 00009c4fH
  01c8d	6a 00		 push	 0
  01c8f	56		 push	 esi
  01c90	ff d7		 call	 edi

; 5888 : 				AppendMenuW (popup, MF_STRING, IDM_CHANGE_HEADER_KEY_DERIV_ALGO, GetString ("IDM_CHANGE_HEADER_KEY_DERIV_ALGO"));

  01c92	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KMDEDFDG@IDM_CHANGE_HEADER_KEY_DERIV_ALGO@
  01c97	e8 00 00 00 00	 call	 _GetString
  01c9c	83 c4 04	 add	 esp, 4
  01c9f	50		 push	 eax
  01ca0	68 65 9c 00 00	 push	 40037			; 00009c65H
  01ca5	6a 00		 push	 0
  01ca7	56		 push	 esi
  01ca8	ff d7		 call	 edi

; 5889 : 				AppendMenu (popup, MF_SEPARATOR, 0, NULL);

  01caa	6a 00		 push	 0
  01cac	6a 00		 push	 0
  01cae	68 00 08 00 00	 push	 2048			; 00000800H
  01cb3	56		 push	 esi
  01cb4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16

; 5890 : 				AppendMenuW (popup, MF_STRING, IDM_ADD_REMOVE_VOL_KEYFILES, GetString ("IDM_ADD_REMOVE_VOL_KEYFILES"));

  01cba	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@KEPNAEHF@IDM_ADD_REMOVE_VOL_KEYFILES?$AA@
  01cbf	e8 00 00 00 00	 call	 _GetString
  01cc4	83 c4 04	 add	 esp, 4
  01cc7	50		 push	 eax
  01cc8	68 63 9c 00 00	 push	 40035			; 00009c63H
  01ccd	6a 00		 push	 0
  01ccf	56		 push	 esi
  01cd0	ff d7		 call	 edi

; 5891 : 				AppendMenuW (popup, MF_STRING, IDM_REMOVE_ALL_KEYFILES_FROM_VOL, GetString ("IDM_REMOVE_ALL_KEYFILES_FROM_VOL"));

  01cd2	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@BLPODHKE@IDM_REMOVE_ALL_KEYFILES_FROM_VOL@
  01cd7	e8 00 00 00 00	 call	 _GetString
  01cdc	83 c4 04	 add	 esp, 4
  01cdf	50		 push	 eax
  01ce0	68 64 9c 00 00	 push	 40036			; 00009c64H
  01ce5	6a 00		 push	 0
  01ce7	56		 push	 esi
  01ce8	ff d7		 call	 edi

; 5892 : 				AppendMenu (popup, MF_SEPARATOR, 0, NULL);

  01cea	6a 00		 push	 0
  01cec	6a 00		 push	 0
  01cee	68 00 08 00 00	 push	 2048			; 00000800H
  01cf3	56		 push	 esi
  01cf4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16

; 5893 : 				AppendMenuW (popup, MF_STRING, IDM_BACKUP_VOL_HEADER, GetString ("IDM_BACKUP_VOL_HEADER"));

  01cfa	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DFAIMILK@IDM_BACKUP_VOL_HEADER?$AA@
  01cff	e8 00 00 00 00	 call	 _GetString
  01d04	83 c4 04	 add	 esp, 4
  01d07	50		 push	 eax
  01d08	68 5a 9c 00 00	 push	 40026			; 00009c5aH
  01d0d	6a 00		 push	 0
  01d0f	56		 push	 esi
  01d10	ff d7		 call	 edi

; 5894 : 				AppendMenuW (popup, MF_STRING, IDM_RESTORE_VOL_HEADER, GetString ("IDM_RESTORE_VOL_HEADER"));

  01d12	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FLEEOEDN@IDM_RESTORE_VOL_HEADER?$AA@
  01d17	e8 00 00 00 00	 call	 _GetString
  01d1c	83 c4 04	 add	 esp, 4
  01d1f	50		 push	 eax
  01d20	68 5b 9c 00 00	 push	 40027			; 00009c5bH
  01d25	6a 00		 push	 0
  01d27	56		 push	 esi
  01d28	ff d7		 call	 edi
$LN145@MainDialog:

; 5895 : 			}
; 5896 : 
; 5897 : 			GetWindowRect (GetDlgItem (hwndDlg, IDC_VOLUME_TOOLS), &rect);

  01d2a	8d 95 b8 fe ff
	ff		 lea	 edx, DWORD PTR _rect$138808[ebp]
  01d30	52		 push	 edx
  01d31	68 0f 04 00 00	 push	 1039			; 0000040fH
  01d36	53		 push	 ebx
  01d37	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  01d3d	50		 push	 eax
  01d3e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 5898 : 
; 5899 : 			menuItem = TrackPopupMenu (popup,
; 5900 : 				TPM_RETURNCMD | TPM_LEFTBUTTON,
; 5901 : 				rect.left + 2,
; 5902 : 				rect.top + 2,
; 5903 : 				0,
; 5904 : 				hwndDlg,
; 5905 : 				NULL);

  01d44	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _rect$138808[ebp+4]
  01d4a	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _rect$138808[ebp]
  01d50	6a 00		 push	 0
  01d52	53		 push	 ebx
  01d53	6a 00		 push	 0
  01d55	83 c0 02	 add	 eax, 2
  01d58	50		 push	 eax
  01d59	83 c1 02	 add	 ecx, 2
  01d5c	51		 push	 ecx
  01d5d	68 00 01 00 00	 push	 256			; 00000100H
  01d62	56		 push	 esi
  01d63	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TrackPopupMenu@28

; 5906 : 
; 5907 : 			DestroyMenu (popup);

  01d69	56		 push	 esi
  01d6a	8b f8		 mov	 edi, eax
  01d6c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyMenu@4

; 5908 : 
; 5909 : 			switch (menuItem)

  01d72	8d 87 b1 63 ff
	ff		 lea	 eax, DWORD PTR [edi-40015]
  01d78	83 f8 16	 cmp	 eax, 22			; 00000016H
  01d7b	0f 87 b8 e8 ff
	ff		 ja	 $LN188@MainDialog
  01d81	0f b6 90 00 00
	00 00		 movzx	 edx, BYTE PTR $LN925@MainDialog[eax]
  01d88	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN1055@MainDialog[edx*4]
$LN142@MainDialog:

; 5910 : 			{
; 5911 : 			case IDM_CHANGE_PASSWORD:
; 5912 : 				if (!VolumeSelected(hwndDlg))

  01d8f	53		 push	 ebx
  01d90	e8 00 00 00 00	 call	 _VolumeSelected
  01d95	83 c4 04	 add	 esp, 4
  01d98	85 c0		 test	 eax, eax

; 5913 : 				{
; 5914 : 					Warning ("NO_VOLUME_SELECTED");
; 5915 : 				}
; 5916 : 				else

  01d9a	0f 84 a2 02 00
	00		 je	 $LN1040@MainDialog
$LN141@MainDialog:

; 5917 : 				{
; 5918 : 					pwdChangeDlgMode = PCDM_CHANGE_PASSWORD;
; 5919 : 					ChangePassword (hwndDlg);

  01da0	8b f3		 mov	 esi, ebx
  01da2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _pwdChangeDlgMode, 0
  01dac	e8 00 00 00 00	 call	 ?ChangePassword@@YAXPAUHWND__@@@Z ; ChangePassword

; 5920 : 				}
; 5921 : 				break;

  01db1	e9 e6 e3 ff ff	 jmp	 $LN349@MainDialog
$LN139@MainDialog:

; 5922 : 
; 5923 : 			case IDM_CHANGE_HEADER_KEY_DERIV_ALGO:
; 5924 : 				if (!VolumeSelected(hwndDlg))

  01db6	53		 push	 ebx
  01db7	e8 00 00 00 00	 call	 _VolumeSelected
  01dbc	83 c4 04	 add	 esp, 4
  01dbf	85 c0		 test	 eax, eax

; 5925 : 				{
; 5926 : 					Warning ("NO_VOLUME_SELECTED");
; 5927 : 				}
; 5928 : 				else

  01dc1	0f 84 7b 02 00
	00		 je	 $LN1040@MainDialog
$LN138@MainDialog:

; 5929 : 				{
; 5930 : 					pwdChangeDlgMode = PCDM_CHANGE_PKCS5_PRF;
; 5931 : 					ChangePassword (hwndDlg);

  01dc7	8b f3		 mov	 esi, ebx
  01dc9	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _pwdChangeDlgMode, 1
  01dd3	e8 00 00 00 00	 call	 ?ChangePassword@@YAXPAUHWND__@@@Z ; ChangePassword

; 5932 : 				}
; 5933 : 				break;

  01dd8	e9 bf e3 ff ff	 jmp	 $LN349@MainDialog
$LN136@MainDialog:

; 5934 : 
; 5935 : 			case IDM_ADD_REMOVE_VOL_KEYFILES:
; 5936 : 				if (!VolumeSelected(hwndDlg))

  01ddd	53		 push	 ebx
  01dde	e8 00 00 00 00	 call	 _VolumeSelected
  01de3	83 c4 04	 add	 esp, 4
  01de6	85 c0		 test	 eax, eax

; 5937 : 				{
; 5938 : 					Warning ("NO_VOLUME_SELECTED");
; 5939 : 				}
; 5940 : 				else

  01de8	0f 84 54 02 00
	00		 je	 $LN1040@MainDialog
$LN135@MainDialog:

; 5941 : 				{
; 5942 : 					pwdChangeDlgMode = PCDM_ADD_REMOVE_VOL_KEYFILES;
; 5943 : 					ChangePassword (hwndDlg);

  01dee	8b f3		 mov	 esi, ebx
  01df0	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR _pwdChangeDlgMode, 2
  01dfa	e8 00 00 00 00	 call	 ?ChangePassword@@YAXPAUHWND__@@@Z ; ChangePassword

; 5944 : 				}
; 5945 : 				break;

  01dff	e9 98 e3 ff ff	 jmp	 $LN349@MainDialog
$LN133@MainDialog:

; 5946 : 
; 5947 : 			case IDM_REMOVE_ALL_KEYFILES_FROM_VOL:
; 5948 : 				if (!VolumeSelected(hwndDlg))

  01e04	53		 push	 ebx
  01e05	e8 00 00 00 00	 call	 _VolumeSelected
  01e0a	83 c4 04	 add	 esp, 4
  01e0d	85 c0		 test	 eax, eax

; 5949 : 				{
; 5950 : 					Warning ("NO_VOLUME_SELECTED");
; 5951 : 				}
; 5952 : 				else

  01e0f	0f 84 2d 02 00
	00		 je	 $LN1040@MainDialog
$LN132@MainDialog:

; 5953 : 				{
; 5954 : 					pwdChangeDlgMode = PCDM_REMOVE_ALL_KEYFILES_FROM_VOL;
; 5955 : 					ChangePassword (hwndDlg);

  01e15	8b f3		 mov	 esi, ebx
  01e17	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR _pwdChangeDlgMode, 3
  01e21	e8 00 00 00 00	 call	 ?ChangePassword@@YAXPAUHWND__@@@Z ; ChangePassword

; 5956 : 				}
; 5957 : 				break;

  01e26	e9 71 e3 ff ff	 jmp	 $LN349@MainDialog
$LN130@MainDialog:

; 5958 : 
; 5959 : 			case IDM_BACKUP_VOL_HEADER:
; 5960 : 				if (!VolumeSelected(hwndDlg))

  01e2b	53		 push	 ebx
  01e2c	e8 00 00 00 00	 call	 _VolumeSelected
  01e31	83 c4 04	 add	 esp, 4
  01e34	85 c0		 test	 eax, eax

; 5961 : 				{
; 5962 : 					Warning ("NO_VOLUME_SELECTED");
; 5963 : 				}
; 5964 : 				else

  01e36	0f 84 06 02 00
	00		 je	 $LN1040@MainDialog

; 5965 : 				{
; 5966 : 					GetWindowTextA(GetDlgItem (hwndDlg, IDC_VOLUME), volPath, sizeof (volPath));

  01e3c	68 04 01 00 00	 push	 260			; 00000104H
  01e41	8d 85 30 28 00
	00		 lea	 eax, DWORD PTR _volPath$138806[ebp]
  01e47	50		 push	 eax
  01e48	68 0a 04 00 00	 push	 1034			; 0000040aH
  01e4d	53		 push	 ebx
  01e4e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  01e54	50		 push	 eax
  01e55	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 5967 : 
; 5968 : 					WaitCursor ();

  01e5b	e8 00 00 00 00	 call	 _WaitCursor

; 5969 : 
; 5970 : 					if (!IsAdmin () && IsUacSupported () && IsVolumeDeviceHosted (volPath))

  01e60	e8 00 00 00 00	 call	 _IsAdmin
  01e65	85 c0		 test	 eax, eax
  01e67	75 38		 jne	 SHORT $LN127@MainDialog
  01e69	e8 00 00 00 00	 call	 _IsUacSupported
  01e6e	85 c0		 test	 eax, eax
  01e70	74 2f		 je	 SHORT $LN127@MainDialog
  01e72	8d 8d 30 28 00
	00		 lea	 ecx, DWORD PTR _volPath$138806[ebp]
  01e78	51		 push	 ecx
  01e79	e8 00 00 00 00	 call	 _IsVolumeDeviceHosted
  01e7e	83 c4 04	 add	 esp, 4
  01e81	85 c0		 test	 eax, eax
  01e83	74 1c		 je	 SHORT $LN127@MainDialog

; 5971 : 						UacBackupVolumeHeader (hwndDlg, TRUE, volPath);

  01e85	8d 95 30 28 00
	00		 lea	 edx, DWORD PTR _volPath$138806[ebp]
  01e8b	52		 push	 edx
  01e8c	6a 01		 push	 1
  01e8e	53		 push	 ebx
  01e8f	e8 00 00 00 00	 call	 _UacBackupVolumeHeader

; 5972 : 					else
; 5973 : 						BackupVolumeHeader (hwndDlg, TRUE, volPath);

  01e94	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5974 : 
; 5975 : 					NormalCursor ();

  01e97	e8 00 00 00 00	 call	 _NormalCursor

; 5976 : 				}
; 5977 : 				break;

  01e9c	e9 fb e2 ff ff	 jmp	 $LN349@MainDialog
$LN127@MainDialog:

; 5972 : 					else
; 5973 : 						BackupVolumeHeader (hwndDlg, TRUE, volPath);

  01ea1	8d 85 30 28 00
	00		 lea	 eax, DWORD PTR _volPath$138806[ebp]
$LN1048@MainDialog:
  01ea7	50		 push	 eax
  01ea8	6a 01		 push	 1
  01eaa	53		 push	 ebx
  01eab	e8 00 00 00 00	 call	 _BackupVolumeHeader
  01eb0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1049@MainDialog:

; 5974 : 
; 5975 : 					NormalCursor ();

  01eb3	e8 00 00 00 00	 call	 _NormalCursor

; 5976 : 				}
; 5977 : 				break;

  01eb8	e9 df e2 ff ff	 jmp	 $LN349@MainDialog
$LN125@MainDialog:

; 5978 : 
; 5979 : 			case IDM_RESTORE_VOL_HEADER:
; 5980 : 				if (!VolumeSelected(hwndDlg))

  01ebd	53		 push	 ebx
  01ebe	e8 00 00 00 00	 call	 _VolumeSelected
  01ec3	83 c4 04	 add	 esp, 4
  01ec6	85 c0		 test	 eax, eax

; 5981 : 				{
; 5982 : 					Warning ("NO_VOLUME_SELECTED");
; 5983 : 				}
; 5984 : 				else

  01ec8	0f 84 74 01 00
	00		 je	 $LN1040@MainDialog

; 5985 : 				{
; 5986 : 					GetWindowTextA(GetDlgItem (hwndDlg, IDC_VOLUME), volPath, sizeof (volPath));

  01ece	68 04 01 00 00	 push	 260			; 00000104H
  01ed3	8d 8d 30 28 00
	00		 lea	 ecx, DWORD PTR _volPath$138806[ebp]
  01ed9	51		 push	 ecx
  01eda	68 0a 04 00 00	 push	 1034			; 0000040aH
  01edf	53		 push	 ebx
  01ee0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  01ee6	50		 push	 eax
  01ee7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 5987 : 
; 5988 : 					WaitCursor ();

  01eed	e8 00 00 00 00	 call	 _WaitCursor

; 5989 : 
; 5990 : 					if (!IsAdmin () && IsUacSupported () && IsVolumeDeviceHosted (volPath))

  01ef2	e8 00 00 00 00	 call	 _IsAdmin
  01ef7	85 c0		 test	 eax, eax
  01ef9	75 36		 jne	 SHORT $LN122@MainDialog
  01efb	e8 00 00 00 00	 call	 _IsUacSupported
  01f00	85 c0		 test	 eax, eax
  01f02	74 2d		 je	 SHORT $LN122@MainDialog
  01f04	8d 95 30 28 00
	00		 lea	 edx, DWORD PTR _volPath$138806[ebp]
  01f0a	52		 push	 edx
  01f0b	e8 00 00 00 00	 call	 _IsVolumeDeviceHosted
  01f10	83 c4 04	 add	 esp, 4
  01f13	85 c0		 test	 eax, eax
  01f15	74 1a		 je	 SHORT $LN122@MainDialog

; 5991 : 						UacRestoreVolumeHeader (hwndDlg, volPath);

  01f17	8d 85 30 28 00
	00		 lea	 eax, DWORD PTR _volPath$138806[ebp]
  01f1d	50		 push	 eax
  01f1e	53		 push	 ebx
  01f1f	e8 00 00 00 00	 call	 _UacRestoreVolumeHeader

; 5992 : 					else
; 5993 : 						RestoreVolumeHeader (hwndDlg, volPath);

  01f24	83 c4 08	 add	 esp, 8

; 5994 : 
; 5995 : 					NormalCursor ();

  01f27	e8 00 00 00 00	 call	 _NormalCursor

; 5996 : 				}
; 5997 : 				break;

  01f2c	e9 6b e2 ff ff	 jmp	 $LN349@MainDialog
$LN122@MainDialog:

; 5992 : 					else
; 5993 : 						RestoreVolumeHeader (hwndDlg, volPath);

  01f31	8d 8d 30 28 00
	00		 lea	 ecx, DWORD PTR _volPath$138806[ebp]
  01f37	51		 push	 ecx
  01f38	53		 push	 ebx
  01f39	e8 00 00 00 00	 call	 _RestoreVolumeHeader
  01f3e	83 c4 08	 add	 esp, 8

; 5994 : 
; 5995 : 					NormalCursor ();

  01f41	e8 00 00 00 00	 call	 _NormalCursor

; 5996 : 				}
; 5997 : 				break;

  01f46	e9 51 e2 ff ff	 jmp	 $LN349@MainDialog
$LN147@MainDialog:

; 5998 : 
; 5999 : 			default:
; 6000 : 				SendMessage (MainDlg, WM_COMMAND, menuItem, NULL);
; 6001 : 				break;
; 6002 : 			}
; 6003 : 			return 1;
; 6004 : 		}
; 6005 : 
; 6006 : 		if (lw == IDM_CHANGE_PASSWORD)

  01f4b	b8 4f 9c 00 00	 mov	 eax, 40015		; 00009c4fH
  01f50	66 3b f0	 cmp	 si, ax
  01f53	75 2e		 jne	 SHORT $LN119@MainDialog

; 6007 : 		{
; 6008 : 			if (!VolumeSelected(hwndDlg))

  01f55	53		 push	 ebx
  01f56	e8 00 00 00 00	 call	 _VolumeSelected
  01f5b	83 c4 04	 add	 esp, 4
  01f5e	85 c0		 test	 eax, eax

; 6009 : 			{
; 6010 : 				Warning ("NO_VOLUME_SELECTED");
; 6011 : 			}
; 6012 : 			else

  01f60	0f 84 dc 00 00
	00		 je	 $LN1040@MainDialog

; 6013 : 			{
; 6014 : 				if (ActiveSysEncDeviceSelected ())

  01f66	e8 00 00 00 00	 call	 ?ActiveSysEncDeviceSelected@@YAHXZ ; ActiveSysEncDeviceSelected
  01f6b	85 c0		 test	 eax, eax
  01f6d	0f 84 2d fe ff
	ff		 je	 $LN141@MainDialog

; 6015 : 				{
; 6016 : 					ChangeSysEncPassword (hwndDlg, FALSE);

  01f73	6a 00		 push	 0
  01f75	53		 push	 ebx
  01f76	e8 00 00 00 00	 call	 ?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z ; ChangeSysEncPassword
  01f7b	83 c4 08	 add	 esp, 8

; 6017 : 				}
; 6018 : 				else

  01f7e	e9 19 e2 ff ff	 jmp	 $LN349@MainDialog
$LN119@MainDialog:

; 6019 : 				{
; 6020 : 					pwdChangeDlgMode = PCDM_CHANGE_PASSWORD;
; 6021 : 					ChangePassword (hwndDlg);
; 6022 : 				}
; 6023 : 			}
; 6024 : 			return 1;
; 6025 : 		}
; 6026 : 
; 6027 : 		if (lw == IDM_CHANGE_HEADER_KEY_DERIV_ALGO)

  01f83	b9 65 9c 00 00	 mov	 ecx, 40037		; 00009c65H
  01f88	66 3b f1	 cmp	 si, cx
  01f8b	75 2e		 jne	 SHORT $LN114@MainDialog

; 6028 : 		{
; 6029 : 			if (!VolumeSelected(hwndDlg))

  01f8d	53		 push	 ebx
  01f8e	e8 00 00 00 00	 call	 _VolumeSelected
  01f93	83 c4 04	 add	 esp, 4
  01f96	85 c0		 test	 eax, eax

; 6030 : 			{
; 6031 : 				Warning ("NO_VOLUME_SELECTED");
; 6032 : 			}
; 6033 : 			else

  01f98	0f 84 a4 00 00
	00		 je	 $LN1040@MainDialog

; 6034 : 			{
; 6035 : 				if (ActiveSysEncDeviceSelected ())

  01f9e	e8 00 00 00 00	 call	 ?ActiveSysEncDeviceSelected@@YAHXZ ; ActiveSysEncDeviceSelected
  01fa3	85 c0		 test	 eax, eax
  01fa5	0f 84 1c fe ff
	ff		 je	 $LN138@MainDialog

; 6036 : 				{
; 6037 : 					ChangeSysEncPassword (hwndDlg, TRUE);

  01fab	6a 01		 push	 1
  01fad	53		 push	 ebx
  01fae	e8 00 00 00 00	 call	 ?ChangeSysEncPassword@@YAXPAUHWND__@@H@Z ; ChangeSysEncPassword
  01fb3	83 c4 08	 add	 esp, 8

; 6038 : 				}
; 6039 : 				else

  01fb6	e9 e1 e1 ff ff	 jmp	 $LN349@MainDialog
$LN114@MainDialog:

; 6040 : 				{
; 6041 : 					pwdChangeDlgMode = PCDM_CHANGE_PKCS5_PRF;
; 6042 : 					ChangePassword (hwndDlg);
; 6043 : 				}
; 6044 : 			}
; 6045 : 			return 1;
; 6046 : 		}
; 6047 : 
; 6048 : 		if (lw == IDC_WIPE_CACHE || lw == IDM_WIPE_CACHE)

  01fbb	ba 10 04 00 00	 mov	 edx, 1040		; 00000410H
  01fc0	66 3b f2	 cmp	 si, dx
  01fc3	0f 84 10 0d 00
	00		 je	 $LN108@MainDialog
  01fc9	b8 52 9c 00 00	 mov	 eax, 40018		; 00009c52H
  01fce	66 3b f0	 cmp	 si, ax
  01fd1	0f 84 02 0d 00
	00		 je	 $LN108@MainDialog

; 6052 : 		}
; 6053 : 
; 6054 : 		if (lw == IDM_CLEAR_HISTORY)

  01fd7	b9 44 9c 00 00	 mov	 ecx, 40004		; 00009c44H
  01fdc	66 3b f1	 cmp	 si, cx
  01fdf	75 1c		 jne	 SHORT $LN107@MainDialog

; 6055 : 		{
; 6056 : 			ClearHistory (GetDlgItem (hwndDlg, IDC_VOLUME));

  01fe1	68 0a 04 00 00	 push	 1034			; 0000040aH
  01fe6	53		 push	 ebx
  01fe7	ff d7		 call	 edi
  01fe9	50		 push	 eax
  01fea	e8 00 00 00 00	 call	 _ClearHistory

; 6057 : 			EnableDisableButtons (hwndDlg);

  01fef	53		 push	 ebx
  01ff0	e8 00 00 00 00	 call	 _EnableDisableButtons
  01ff5	83 c4 08	 add	 esp, 8

; 6058 : 			return 1;

  01ff8	e9 9f e1 ff ff	 jmp	 $LN349@MainDialog
$LN107@MainDialog:

; 6059 : 		}
; 6060 : 
; 6061 : 		if (lw == IDC_CREATE_VOLUME || lw == IDM_CREATE_VOLUME || lw == IDM_VOLUME_WIZARD)

  01ffd	ba 0e 04 00 00	 mov	 edx, 1038		; 0000040eH
  02002	66 3b f2	 cmp	 si, dx
  02005	0f 84 bb 0c 00
	00		 je	 $LN105@MainDialog
  0200b	b8 51 9c 00 00	 mov	 eax, 40017		; 00009c51H
  02010	66 3b f0	 cmp	 si, ax
  02013	0f 84 ad 0c 00
	00		 je	 $LN105@MainDialog
  02019	b9 50 9c 00 00	 mov	 ecx, 40016		; 00009c50H
  0201e	66 3b f1	 cmp	 si, cx
  02021	0f 84 9f 0c 00
	00		 je	 $LN105@MainDialog

; 6065 : 		}
; 6066 : 
; 6067 : 		if (lw == IDM_ADD_REMOVE_VOL_KEYFILES)

  02027	ba 63 9c 00 00	 mov	 edx, 40035		; 00009c63H
  0202c	66 3b f2	 cmp	 si, dx
  0202f	75 20		 jne	 SHORT $LN104@MainDialog

; 6068 : 		{
; 6069 : 			if (!VolumeSelected(hwndDlg))

  02031	53		 push	 ebx
  02032	e8 00 00 00 00	 call	 _VolumeSelected
  02037	83 c4 04	 add	 esp, 4
  0203a	85 c0		 test	 eax, eax
  0203c	0f 85 ac fd ff
	ff		 jne	 $LN135@MainDialog
$LN1040@MainDialog:

; 6070 : 			{
; 6071 : 				Warning ("NO_VOLUME_SELECTED");

  02042	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EIJPLIHM@NO_VOLUME_SELECTED?$AA@
  02047	e8 00 00 00 00	 call	 _Warning

; 6072 : 			}
; 6073 : 			else

  0204c	e9 48 e1 ff ff	 jmp	 $LN1033@MainDialog
$LN104@MainDialog:

; 6074 : 			{
; 6075 : 				pwdChangeDlgMode = PCDM_ADD_REMOVE_VOL_KEYFILES;
; 6076 : 				ChangePassword (hwndDlg);
; 6077 : 			}
; 6078 : 			return 1;
; 6079 : 		}
; 6080 : 
; 6081 : 		if (lw == IDM_REMOVE_ALL_KEYFILES_FROM_VOL)

  02051	b8 64 9c 00 00	 mov	 eax, 40036		; 00009c64H
  02056	66 3b f0	 cmp	 si, ax
  02059	75 20		 jne	 SHORT $LN101@MainDialog

; 6082 : 		{
; 6083 : 			if (!VolumeSelected(hwndDlg))

  0205b	53		 push	 ebx
  0205c	e8 00 00 00 00	 call	 _VolumeSelected
  02061	83 c4 04	 add	 esp, 4
  02064	85 c0		 test	 eax, eax
  02066	0f 85 a9 fd ff
	ff		 jne	 $LN132@MainDialog

; 6084 : 			{
; 6085 : 				Warning ("NO_VOLUME_SELECTED");

  0206c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EIJPLIHM@NO_VOLUME_SELECTED?$AA@
  02071	e8 00 00 00 00	 call	 _Warning

; 6086 : 			}
; 6087 : 			else

  02076	e9 1e e1 ff ff	 jmp	 $LN1033@MainDialog
$LN101@MainDialog:

; 6088 : 			{		
; 6089 : 				pwdChangeDlgMode = PCDM_REMOVE_ALL_KEYFILES_FROM_VOL;
; 6090 : 				ChangePassword (hwndDlg);
; 6091 : 			}
; 6092 : 			return 1;
; 6093 : 		}
; 6094 : 
; 6095 : 		if (lw == IDM_MANAGE_TOKEN_KEYFILES)

  0207b	b9 78 9c 00 00	 mov	 ecx, 40056		; 00009c78H
  02080	66 3b f1	 cmp	 si, cx
  02083	75 1f		 jne	 SHORT $LN98@MainDialog

; 6096 : 		{
; 6097 : 			DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_TOKEN_KEYFILES), hwndDlg, (DLGPROC) SecurityTokenKeyfileDlgProc, NULL);

  02085	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  0208b	6a 00		 push	 0
  0208d	68 00 00 00 00	 push	 OFFSET _SecurityTokenKeyfileDlgProc@16
  02092	53		 push	 ebx
  02093	68 1a 02 00 00	 push	 538			; 0000021aH
  02098	52		 push	 edx
  02099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 6098 : 			return 1;

  0209f	e9 f8 e0 ff ff	 jmp	 $LN349@MainDialog
$LN98@MainDialog:

; 6099 : 		}
; 6100 : 
; 6101 : 		if (lw == IDM_CLOSE_ALL_TOKEN_SESSIONS)

  020a4	b8 74 9c 00 00	 mov	 eax, 40052		; 00009c74H
  020a9	66 3b f0	 cmp	 si, ax
  020ac	75 23		 jne	 SHORT $LN97@MainDialog

; 6102 : 		{
; 6103 : 			{
; 6104 : 				WaitCursor();

  020ae	e8 00 00 00 00	 call	 _WaitCursor

; 6105 : 				finally_do ({ NormalCursor(); });
; 6106 : 
; 6107 : 				SecurityToken::CloseAllSessions();

  020b3	e8 00 00 00 00	 call	 ?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ ; CipherShed::SecurityToken::CloseAllSessions

; 6108 : 			}

  020b8	e8 00 00 00 00	 call	 ??1Finally6105@?CFK@??MainDialogProc@@9@16@QAE@XZ ; `MainDialogProc'::`602'::Finally6105::~Finally6105

; 6109 : 
; 6110 : 			InfoBalloon (NULL, "ALL_TOKEN_SESSIONS_CLOSED");

  020bd	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@JIMANJGK@ALL_TOKEN_SESSIONS_CLOSED?$AA@
  020c2	6a 00		 push	 0
  020c4	e8 00 00 00 00	 call	 _InfoBalloon
  020c9	83 c4 08	 add	 esp, 8

; 6111 : 
; 6112 : 			return 1;

  020cc	e9 cb e0 ff ff	 jmp	 $LN349@MainDialog
$LN97@MainDialog:

; 6113 : 		}
; 6114 : 
; 6115 : 		if (lw == IDM_KEYFILE_GENERATOR)

  020d1	b9 66 9c 00 00	 mov	 ecx, 40038		; 00009c66H
  020d6	66 3b f1	 cmp	 si, cx
  020d9	75 1f		 jne	 SHORT $LN96@MainDialog

; 6116 : 		{
; 6117 : 			DialogBoxParamW (hInst, 
; 6118 : 				MAKEINTRESOURCEW (IDD_KEYFILE_GENERATOR), hwndDlg,
; 6119 : 				(DLGPROC) KeyfileGeneratorDlgProc, (LPARAM) 0);

  020db	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  020e1	6a 00		 push	 0
  020e3	68 00 00 00 00	 push	 OFFSET _KeyfileGeneratorDlgProc@16
  020e8	53		 push	 ebx
  020e9	68 95 13 00 00	 push	 5013			; 00001395H
  020ee	52		 push	 edx
  020ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 6120 : 
; 6121 : 				return 1;

  020f5	e9 a2 e0 ff ff	 jmp	 $LN349@MainDialog
$LN96@MainDialog:

; 6122 : 		}
; 6123 : 
; 6124 : 		if (lw == IDM_LICENSE)

  020fa	b8 54 9c 00 00	 mov	 eax, 40020		; 00009c54H
  020ff	66 3b f0	 cmp	 si, ax
  02102	75 0c		 jne	 SHORT $LN95@MainDialog

; 6125 : 		{
; 6126 : 			TextInfoDialogBox (TC_TBXID_LEGAL_NOTICES);

  02104	6a 00		 push	 0
  02106	e8 00 00 00 00	 call	 _TextInfoDialogBox

; 6127 : 			return 1;

  0210b	e9 89 e0 ff ff	 jmp	 $LN1033@MainDialog
$LN95@MainDialog:

; 6128 : 		}
; 6129 : 	
; 6130 : 		if (lw == IDM_WEBSITE)

  02110	b9 4b 9c 00 00	 mov	 ecx, 40011		; 00009c4bH
  02115	66 3b f1	 cmp	 si, cx
  02118	75 19		 jne	 SHORT $LN94@MainDialog

; 6131 : 		{
; 6132 : 			Applink ("website", TRUE, "");

  0211a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0211f	6a 01		 push	 1
  02121	68 00 00 00 00	 push	 OFFSET ??_C@_07BDNEAIPE@website?$AA@
  02126	e8 00 00 00 00	 call	 _Applink
  0212b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6133 : 			return 1;

  0212e	e9 69 e0 ff ff	 jmp	 $LN349@MainDialog
$LN94@MainDialog:

; 6134 : 		}
; 6135 : 		else if (lw == IDM_HOMEPAGE)

  02133	ba 61 9c 00 00	 mov	 edx, 40033		; 00009c61H
  02138	66 3b f2	 cmp	 si, dx
  0213b	75 19		 jne	 SHORT $LN92@MainDialog

; 6136 : 		{
; 6137 : 			Applink ("homepage", TRUE, "");

  0213d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  02142	6a 01		 push	 1
  02144	68 00 00 00 00	 push	 OFFSET ??_C@_08GKIEPLNI@homepage?$AA@
  02149	e8 00 00 00 00	 call	 _Applink
  0214e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6138 : 			return 1;

  02151	e9 46 e0 ff ff	 jmp	 $LN349@MainDialog
$LN92@MainDialog:

; 6139 : 		}
; 6140 : 		else if (lw == IDM_ONLINE_TUTORIAL)

  02156	b8 67 9c 00 00	 mov	 eax, 40039		; 00009c67H
  0215b	66 3b f0	 cmp	 si, ax
  0215e	75 19		 jne	 SHORT $LN90@MainDialog

; 6141 : 		{
; 6142 : 			Applink ("tutorial", TRUE, "");

  02160	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  02165	6a 01		 push	 1
  02167	68 00 00 00 00	 push	 OFFSET ??_C@_08PEONCBFB@tutorial?$AA@
  0216c	e8 00 00 00 00	 call	 _Applink
  02171	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6143 : 			return 1;

  02174	e9 23 e0 ff ff	 jmp	 $LN349@MainDialog
$LN90@MainDialog:

; 6144 : 		}
; 6145 : 		else if (lw == IDM_ONLINE_HELP)

  02179	b9 68 9c 00 00	 mov	 ecx, 40040		; 00009c68H
  0217e	66 3b f1	 cmp	 si, cx
  02181	75 0a		 jne	 SHORT $LN88@MainDialog

; 6146 : 		{
; 6147 : 			OpenOnlineHelp ();

  02183	e8 00 00 00 00	 call	 _OpenOnlineHelp

; 6148 : 			return 1;

  02188	e9 0f e0 ff ff	 jmp	 $LN349@MainDialog
$LN88@MainDialog:

; 6149 : 		}
; 6150 : 		else if (lw == IDM_FAQ)

  0218d	ba 48 9c 00 00	 mov	 edx, 40008		; 00009c48H
  02192	66 3b f2	 cmp	 si, dx
  02195	75 19		 jne	 SHORT $LN86@MainDialog

; 6151 : 		{
; 6152 : 			Applink ("faq", TRUE, "");

  02197	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0219c	6a 01		 push	 1
  0219e	68 00 00 00 00	 push	 OFFSET ??_C@_03LPMHGBJM@faq?$AA@
  021a3	e8 00 00 00 00	 call	 _Applink
  021a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6153 : 			return 1;

  021ab	e9 ec df ff ff	 jmp	 $LN349@MainDialog
$LN86@MainDialog:

; 6154 : 		}
; 6155 : 		else if (lw == IDM_TC_DOWNLOADS)

  021b0	b8 5d 9c 00 00	 mov	 eax, 40029		; 00009c5dH
  021b5	66 3b f0	 cmp	 si, ax
  021b8	75 19		 jne	 SHORT $LN84@MainDialog

; 6156 : 		{
; 6157 : 			Applink ("downloads", TRUE, "");

  021ba	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  021bf	6a 01		 push	 1
  021c1	68 00 00 00 00	 push	 OFFSET ??_C@_09JGLNCENF@downloads?$AA@
  021c6	e8 00 00 00 00	 call	 _Applink
  021cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6158 : 			return 1;

  021ce	e9 c9 df ff ff	 jmp	 $LN349@MainDialog
$LN84@MainDialog:

; 6159 : 		}
; 6160 : 		else if (lw == IDM_NEWS)

  021d3	b9 5e 9c 00 00	 mov	 ecx, 40030		; 00009c5eH
  021d8	66 3b f1	 cmp	 si, cx
  021db	75 19		 jne	 SHORT $LN82@MainDialog

; 6161 : 		{
; 6162 : 			Applink ("news", TRUE, "");

  021dd	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  021e2	6a 01		 push	 1
  021e4	68 00 00 00 00	 push	 OFFSET ??_C@_04EGILJCBP@news?$AA@
  021e9	e8 00 00 00 00	 call	 _Applink
  021ee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6163 : 			return 1;

  021f1	e9 a6 df ff ff	 jmp	 $LN349@MainDialog
$LN82@MainDialog:

; 6164 : 		}
; 6165 : 		else if (lw == IDM_VERSION_HISTORY)

  021f6	ba 60 9c 00 00	 mov	 edx, 40032		; 00009c60H
  021fb	66 3b f2	 cmp	 si, dx
  021fe	75 19		 jne	 SHORT $LN80@MainDialog

; 6166 : 		{
; 6167 : 			Applink ("history", TRUE, "");

  02200	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  02205	6a 01		 push	 1
  02207	68 00 00 00 00	 push	 OFFSET ??_C@_07MMNEDCBK@history?$AA@
  0220c	e8 00 00 00 00	 call	 _Applink
  02211	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6168 : 			return 1;

  02214	e9 83 df ff ff	 jmp	 $LN349@MainDialog
$LN80@MainDialog:

; 6169 : 		}
; 6170 : 		else if (lw == IDM_ANALYZE_SYSTEM_CRASH)

  02219	b8 7f 9c 00 00	 mov	 eax, 40063		; 00009c7fH
  0221e	66 3b f0	 cmp	 si, ax
  02221	75 28		 jne	 SHORT $LN78@MainDialog

; 6171 : 		{
; 6172 : 			if (!IsAdmin() && IsUacSupported())

  02223	e8 00 00 00 00	 call	 _IsAdmin
  02228	85 c0		 test	 eax, eax
  0222a	75 14		 jne	 SHORT $LN77@MainDialog
  0222c	e8 00 00 00 00	 call	 _IsUacSupported
  02231	85 c0		 test	 eax, eax
  02233	74 0b		 je	 SHORT $LN77@MainDialog

; 6173 : 				UacAnalyzeKernelMiniDump (hwndDlg);

  02235	53		 push	 ebx
  02236	e8 00 00 00 00	 call	 _UacAnalyzeKernelMiniDump

; 6174 : 			else

  0223b	e9 59 df ff ff	 jmp	 $LN1033@MainDialog
$LN77@MainDialog:

; 6175 : 				AnalyzeKernelMiniDump (hwndDlg);

  02240	53		 push	 ebx
  02241	e8 00 00 00 00	 call	 _AnalyzeKernelMiniDump

; 6176 : 
; 6177 : 			return 1;

  02246	e9 4e df ff ff	 jmp	 $LN1033@MainDialog
$LN78@MainDialog:

; 6178 : 		}
; 6179 : 		else if (lw == IDM_CONTACT)

  0224b	b9 5f 9c 00 00	 mov	 ecx, 40031		; 00009c5fH
  02250	66 3b f1	 cmp	 si, cx
  02253	75 19		 jne	 SHORT $LN74@MainDialog

; 6180 : 		{
; 6181 : 			Applink ("contact", FALSE, "");

  02255	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0225a	6a 00		 push	 0
  0225c	68 00 00 00 00	 push	 OFFSET ??_C@_07FLDMKAK@contact?$AA@
  02261	e8 00 00 00 00	 call	 _Applink
  02266	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6182 : 			return 1;

  02269	e9 2e df ff ff	 jmp	 $LN349@MainDialog
$LN74@MainDialog:

; 6183 : 		}
; 6184 : 
; 6185 : 		if (lw == IDM_PREFERENCES)

  0226e	ba 53 9c 00 00	 mov	 edx, 40019		; 00009c53H
  02273	66 3b f2	 cmp	 si, dx
  02276	75 53		 jne	 SHORT $LN73@MainDialog

; 6186 : 		{
; 6187 : 			if (IDOK == DialogBoxParamW (hInst, 
; 6188 : 				MAKEINTRESOURCEW (IDD_PREFERENCES_DLG), hwndDlg,
; 6189 : 				(DLGPROC) PreferencesDlgProc, (LPARAM) 0))

  02278	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  0227d	6a 00		 push	 0
  0227f	68 00 00 00 00	 push	 OFFSET ?PreferencesDlgProc@@YGHPAUHWND__@@IIJ@Z ; PreferencesDlgProc
  02284	53		 push	 ebx
  02285	6a 6b		 push	 107			; 0000006bH
  02287	50		 push	 eax
  02288	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  0228e	83 f8 01	 cmp	 eax, 1
  02291	0f 85 05 df ff
	ff		 jne	 $LN349@MainDialog

; 6190 : 			{
; 6191 : 				if (bEnableBkgTask)

  02297	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bEnableBkgTask, 0

; 6192 : 				{
; 6193 : 					TaskBarIconAdd (hwndDlg);

  0229e	53		 push	 ebx
  0229f	74 0a		 je	 SHORT $LN71@MainDialog
  022a1	e8 00 00 00 00	 call	 _TaskBarIconAdd

; 6194 : 				}
; 6195 : 				else

  022a6	e9 ee de ff ff	 jmp	 $LN1033@MainDialog
$LN71@MainDialog:

; 6196 : 				{
; 6197 : 					TaskBarIconRemove (hwndDlg);

  022ab	e8 00 00 00 00	 call	 _TaskBarIconRemove
  022b0	83 c4 04	 add	 esp, 4

; 6198 : 					if (MainWindowHidden)

  022b3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _MainWindowHidden, 0
  022ba	0f 84 dc de ff
	ff		 je	 $LN349@MainDialog
$LN3@MainDialog:

; 6199 : 						EndMainDlg (hwndDlg);

  022c0	53		 push	 ebx
  022c1	e8 00 00 00 00	 call	 _EndMainDlg

; 6200 : 				}
; 6201 : 			}
; 6202 : 			return 1;

  022c6	e9 ce de ff ff	 jmp	 $LN1033@MainDialog
$LN73@MainDialog:

; 6203 : 		}
; 6204 : 
; 6205 : 		if (lw == IDM_HOTKEY_SETTINGS)

  022cb	b9 5c 9c 00 00	 mov	 ecx, 40028		; 00009c5cH
  022d0	66 3b f1	 cmp	 si, cx
  022d3	75 1f		 jne	 SHORT $LN68@MainDialog

; 6206 : 		{
; 6207 : 			DialogBoxParamW (hInst, 
; 6208 : 				MAKEINTRESOURCEW (IDD_HOTKEYS_DLG), hwndDlg,
; 6209 : 				(DLGPROC) HotkeysDlgProc, (LPARAM) 0);

  022d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  022db	6a 00		 push	 0
  022dd	68 00 00 00 00	 push	 OFFSET _HotkeysDlgProc@16
  022e2	53		 push	 ebx
  022e3	68 14 04 00 00	 push	 1044			; 00000414H
  022e8	52		 push	 edx
  022e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 6210 : 			return 1;

  022ef	e9 a8 de ff ff	 jmp	 $LN349@MainDialog
$LN68@MainDialog:

; 6211 : 		}
; 6212 : 
; 6213 : 		if (lw == IDM_PERFORMANCE_SETTINGS)

  022f4	b8 7e 9c 00 00	 mov	 eax, 40062		; 00009c7eH
  022f9	66 3b f0	 cmp	 si, ax
  022fc	75 1f		 jne	 SHORT $LN67@MainDialog

; 6214 : 		{
; 6215 : 			DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_PERFORMANCE_SETTINGS), hwndDlg, (DLGPROC) PerformanceSettingsDlgProc, 0);

  022fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  02304	6a 00		 push	 0
  02306	68 00 00 00 00	 push	 OFFSET _PerformanceSettingsDlgProc@16
  0230b	53		 push	 ebx
  0230c	68 17 04 00 00	 push	 1047			; 00000417H
  02311	51		 push	 ecx
  02312	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 6216 : 			return 1;

  02318	e9 7f de ff ff	 jmp	 $LN349@MainDialog
$LN67@MainDialog:

; 6217 : 		}
; 6218 : 
; 6219 : 		if (lw == IDM_DEFAULT_KEYFILES)

  0231d	ba 4a 9c 00 00	 mov	 edx, 40010		; 00009c4aH
  02322	66 3b f2	 cmp	 si, dx
  02325	75 0b		 jne	 SHORT $LN66@MainDialog

; 6220 : 		{
; 6221 : 			KeyfileDefaultsDlg (hwndDlg);

  02327	53		 push	 ebx
  02328	e8 00 00 00 00	 call	 _KeyfileDefaultsDlg

; 6222 : 			return 1;

  0232d	e9 67 de ff ff	 jmp	 $LN1033@MainDialog
$LN66@MainDialog:

; 6223 : 		}
; 6224 : 
; 6225 : 		if (lw == IDM_ADD_VOLUME_TO_FAVORITES || lw == IDM_ADD_VOLUME_TO_SYSTEM_FAVORITES)

  02332	b8 7c 9c 00 00	 mov	 eax, 40060		; 00009c7cH
  02337	66 3b f0	 cmp	 si, ax
  0233a	0f 84 7f 05 00
	00		 je	 $LN64@MainDialog
  02340	b9 7d 9c 00 00	 mov	 ecx, 40061		; 00009c7dH
  02345	66 3b f1	 cmp	 si, cx
  02348	0f 84 71 05 00
	00		 je	 $LN64@MainDialog

; 6329 : 		}
; 6330 : 
; 6331 : 		if (lw == IDM_ORGANIZE_FAVORITES || lw == IDM_ORGANIZE_SYSTEM_FAVORITES)

  0234e	ba 7a 9c 00 00	 mov	 edx, 40058		; 00009c7aH
  02353	66 3b f2	 cmp	 si, dx
  02356	0f 84 28 05 00
	00		 je	 $LN45@MainDialog
  0235c	b8 7b 9c 00 00	 mov	 eax, 40059		; 00009c7bH
  02361	66 3b f0	 cmp	 si, ax
  02364	0f 84 1a 05 00
	00		 je	 $LN45@MainDialog

; 6335 : 		}
; 6336 : 
; 6337 : 		if (lw == IDM_TOKEN_PREFERENCES)

  0236a	b9 73 9c 00 00	 mov	 ecx, 40051		; 00009c73H
  0236f	66 3b f1	 cmp	 si, cx
  02372	75 0b		 jne	 SHORT $LN44@MainDialog

; 6338 : 		{
; 6339 : 			SecurityTokenPreferencesDialog (hwndDlg);

  02374	53		 push	 ebx
  02375	e8 00 00 00 00	 call	 _SecurityTokenPreferencesDialog

; 6340 : 			return 1;

  0237a	e9 1a de ff ff	 jmp	 $LN1033@MainDialog
$LN44@MainDialog:

; 6341 : 		}
; 6342 : 
; 6343 : 		if (lw == IDM_SYSENC_SETTINGS || lw == IDM_SYS_ENC_SETTINGS)

  0237f	ba 76 9c 00 00	 mov	 edx, 40054		; 00009c76H
  02384	66 3b f2	 cmp	 si, dx
  02387	0f 84 dc 04 00
	00		 je	 $LN42@MainDialog
  0238d	b8 75 9c 00 00	 mov	 eax, 40053		; 00009c75H
  02392	66 3b f0	 cmp	 si, ax
  02395	0f 84 ce 04 00
	00		 je	 $LN42@MainDialog

; 6347 : 		}
; 6348 : 
; 6349 : 		if (lw == IDM_SYS_FAVORITES_SETTINGS)

  0239b	b9 79 9c 00 00	 mov	 ecx, 40057		; 00009c79H
  023a0	66 3b f1	 cmp	 si, cx
  023a3	75 2e		 jne	 SHORT $LN41@MainDialog

; 6350 : 		{
; 6351 : 			OrganizeFavoriteVolumes (hwndDlg, true);

  023a5	8d 8d 98 fc ff
	ff		 lea	 ecx, DWORD PTR $T207870[ebp]
  023ab	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@XZ ; CipherShed::FavoriteVolume::FavoriteVolume
  023b0	50		 push	 eax
  023b1	6a 01		 push	 1
  023b3	53		 push	 ebx
  023b4	c7 45 fc 16 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 22 ; 00000016H
  023bb	e8 00 00 00 00	 call	 ?OrganizeFavoriteVolumes@CipherShed@@YAHPAUHWND__@@_NABUFavoriteVolume@1@@Z ; CipherShed::OrganizeFavoriteVolumes
  023c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  023c3	8d 8d 98 fc ff
	ff		 lea	 ecx, DWORD PTR $T207870[ebp]
  023c9	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ

; 6352 : 			return 1;

  023ce	e9 c9 dd ff ff	 jmp	 $LN349@MainDialog
$LN41@MainDialog:

; 6353 : 		}
; 6354 : 
; 6355 : 		if (lw == IDM_BENCHMARK)

  023d3	ba 45 9c 00 00	 mov	 edx, 40005		; 00009c45H
  023d8	66 3b f2	 cmp	 si, dx
  023db	75 0c		 jne	 SHORT $LN40@MainDialog

; 6356 : 		{
; 6357 : 			Benchmark (hwndDlg);

  023dd	8b c3		 mov	 eax, ebx
  023df	e8 00 00 00 00	 call	 ?Benchmark@@YAXPAUHWND__@@@Z ; Benchmark

; 6358 : 			return 1;

  023e4	e9 b3 dd ff ff	 jmp	 $LN349@MainDialog
$LN40@MainDialog:

; 6359 : 		}
; 6360 : 
; 6361 : 		if (lw == IDM_TRAVELER)

  023e9	b8 46 9c 00 00	 mov	 eax, 40006		; 00009c46H
  023ee	66 3b f0	 cmp	 si, ax
  023f1	75 1f		 jne	 SHORT $LN39@MainDialog

; 6362 : 		{
; 6363 : 			DialogBoxParamW (hInst, 
; 6364 : 				MAKEINTRESOURCEW (IDD_TRAVELER_DLG), hwndDlg,
; 6365 : 				(DLGPROC) TravelerDlgProc, (LPARAM) 0);

  023f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  023f9	6a 00		 push	 0
  023fb	68 00 00 00 00	 push	 OFFSET ?TravelerDlgProc@@YGHPAUHWND__@@IIJ@Z ; TravelerDlgProc
  02400	53		 push	 ebx
  02401	68 12 04 00 00	 push	 1042			; 00000412H
  02406	51		 push	 ecx
  02407	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 6366 : 			return 1;

  0240d	e9 8a dd ff ff	 jmp	 $LN349@MainDialog
$LN39@MainDialog:

; 6367 : 		}
; 6368 : 
; 6369 : 		if (lw == IDM_BACKUP_VOL_HEADER)

  02412	ba 5a 9c 00 00	 mov	 edx, 40026		; 00009c5aH
  02417	66 3b f2	 cmp	 si, dx
  0241a	75 7d		 jne	 SHORT $LN38@MainDialog

; 6370 : 		{
; 6371 : 			if (!VolumeSelected(hwndDlg))

  0241c	53		 push	 ebx
  0241d	e8 00 00 00 00	 call	 _VolumeSelected
  02422	83 c4 04	 add	 esp, 4
  02425	85 c0		 test	 eax, eax

; 6372 : 			{
; 6373 : 				Warning ("NO_VOLUME_SELECTED");
; 6374 : 			}
; 6375 : 			else

  02427	0f 84 15 fc ff
	ff		 je	 $LN1040@MainDialog

; 6376 : 			{
; 6377 : 				char volPath[TC_MAX_PATH];		/* Volume to mount */
; 6378 : 
; 6379 : 				GetWindowTextA(GetDlgItem (hwndDlg, IDC_VOLUME), volPath, sizeof (volPath));

  0242d	68 04 01 00 00	 push	 260			; 00000104H
  02432	8d 85 28 26 00
	00		 lea	 eax, DWORD PTR _volPath$139041[ebp]
  02438	50		 push	 eax
  02439	68 0a 04 00 00	 push	 1034			; 0000040aH
  0243e	53		 push	 ebx
  0243f	ff d7		 call	 edi
  02441	50		 push	 eax
  02442	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 6380 : 
; 6381 : 				WaitCursor ();

  02448	e8 00 00 00 00	 call	 _WaitCursor

; 6382 : 
; 6383 : 				if (!IsAdmin () && IsUacSupported () && IsVolumeDeviceHosted (volPath))

  0244d	e8 00 00 00 00	 call	 _IsAdmin
  02452	85 c0		 test	 eax, eax
  02454	75 38		 jne	 SHORT $LN35@MainDialog
  02456	e8 00 00 00 00	 call	 _IsUacSupported
  0245b	85 c0		 test	 eax, eax
  0245d	74 2f		 je	 SHORT $LN35@MainDialog
  0245f	8d 8d 28 26 00
	00		 lea	 ecx, DWORD PTR _volPath$139041[ebp]
  02465	51		 push	 ecx
  02466	e8 00 00 00 00	 call	 _IsVolumeDeviceHosted
  0246b	83 c4 04	 add	 esp, 4
  0246e	85 c0		 test	 eax, eax
  02470	74 1c		 je	 SHORT $LN35@MainDialog

; 6384 : 					UacBackupVolumeHeader (hwndDlg, TRUE, volPath);

  02472	8d 95 28 26 00
	00		 lea	 edx, DWORD PTR _volPath$139041[ebp]
  02478	52		 push	 edx
  02479	6a 01		 push	 1
  0247b	53		 push	 ebx
  0247c	e8 00 00 00 00	 call	 _UacBackupVolumeHeader
  02481	83 c4 0c	 add	 esp, 12			; 0000000cH
  02484	e8 00 00 00 00	 call	 _NormalCursor
  02489	e9 0e dd ff ff	 jmp	 $LN349@MainDialog
$LN35@MainDialog:

; 6385 : 				else
; 6386 : 					BackupVolumeHeader (hwndDlg, TRUE, volPath);

  0248e	8d 85 28 26 00
	00		 lea	 eax, DWORD PTR _volPath$139041[ebp]

; 6387 : 
; 6388 : 				NormalCursor ();
; 6389 : 			}
; 6390 : 			return 1;

  02494	e9 0e fa ff ff	 jmp	 $LN1048@MainDialog
$LN38@MainDialog:

; 6391 : 		}
; 6392 : 
; 6393 : 		if (lw == IDM_RESTORE_VOL_HEADER)

  02499	b9 5b 9c 00 00	 mov	 ecx, 40027		; 00009c5bH
  0249e	66 3b f1	 cmp	 si, cx
  024a1	0f 85 8a 00 00
	00		 jne	 $LN33@MainDialog

; 6394 : 		{
; 6395 : 			if (!VolumeSelected(hwndDlg))

  024a7	53		 push	 ebx
  024a8	e8 00 00 00 00	 call	 _VolumeSelected
  024ad	83 c4 04	 add	 esp, 4
  024b0	85 c0		 test	 eax, eax

; 6396 : 			{
; 6397 : 				Warning ("NO_VOLUME_SELECTED");
; 6398 : 			}
; 6399 : 			else

  024b2	0f 84 8a fb ff
	ff		 je	 $LN1040@MainDialog

; 6400 : 			{
; 6401 : 				char volPath[TC_MAX_PATH];		/* Volume to mount */
; 6402 : 
; 6403 : 				GetWindowTextA(GetDlgItem (hwndDlg, IDC_VOLUME), volPath, sizeof (volPath));

  024b8	68 04 01 00 00	 push	 260			; 00000104H
  024bd	8d 95 24 25 00
	00		 lea	 edx, DWORD PTR _volPath$139047[ebp]
  024c3	52		 push	 edx
  024c4	68 0a 04 00 00	 push	 1034			; 0000040aH
  024c9	53		 push	 ebx
  024ca	ff d7		 call	 edi
  024cc	50		 push	 eax
  024cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 6404 : 
; 6405 : 				WaitCursor ();

  024d3	e8 00 00 00 00	 call	 _WaitCursor

; 6406 : 
; 6407 : 				if (!IsAdmin () && IsUacSupported () && IsVolumeDeviceHosted (volPath))

  024d8	e8 00 00 00 00	 call	 _IsAdmin
  024dd	85 c0		 test	 eax, eax
  024df	75 36		 jne	 SHORT $LN30@MainDialog
  024e1	e8 00 00 00 00	 call	 _IsUacSupported
  024e6	85 c0		 test	 eax, eax
  024e8	74 2d		 je	 SHORT $LN30@MainDialog
  024ea	8d 85 24 25 00
	00		 lea	 eax, DWORD PTR _volPath$139047[ebp]
  024f0	50		 push	 eax
  024f1	e8 00 00 00 00	 call	 _IsVolumeDeviceHosted
  024f6	83 c4 04	 add	 esp, 4
  024f9	85 c0		 test	 eax, eax
  024fb	74 1a		 je	 SHORT $LN30@MainDialog

; 6408 : 					UacRestoreVolumeHeader (hwndDlg, volPath);

  024fd	8d 8d 24 25 00
	00		 lea	 ecx, DWORD PTR _volPath$139047[ebp]
  02503	51		 push	 ecx
  02504	53		 push	 ebx
  02505	e8 00 00 00 00	 call	 _UacRestoreVolumeHeader

; 6409 : 				else
; 6410 : 					RestoreVolumeHeader (hwndDlg, volPath);

  0250a	83 c4 08	 add	 esp, 8
  0250d	e8 00 00 00 00	 call	 _NormalCursor
  02512	e9 85 dc ff ff	 jmp	 $LN349@MainDialog
$LN30@MainDialog:
  02517	8d 95 24 25 00
	00		 lea	 edx, DWORD PTR _volPath$139047[ebp]
  0251d	52		 push	 edx
  0251e	53		 push	 ebx
  0251f	e8 00 00 00 00	 call	 _RestoreVolumeHeader
  02524	83 c4 08	 add	 esp, 8
  02527	e8 00 00 00 00	 call	 _NormalCursor
  0252c	e9 6b dc ff ff	 jmp	 $LN349@MainDialog
$LN33@MainDialog:

; 6411 : 
; 6412 : 				NormalCursor ();
; 6413 : 			}
; 6414 : 			return 1;
; 6415 : 		}
; 6416 : 
; 6417 : 		if (lw == IDM_LANGUAGE)

  02531	b8 58 9c 00 00	 mov	 eax, 40024		; 00009c58H
  02536	66 3b f0	 cmp	 si, ax
  02539	75 64		 jne	 SHORT $LN28@MainDialog

; 6418 : 		{
; 6419 : 			BOOL p;
; 6420 : 			if (DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_LANGUAGE), hwndDlg,
; 6421 : 				(DLGPROC) LanguageDlgProc, (LPARAM) 0) == IDOK)

  0253b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  02541	6a 00		 push	 0
  02543	68 00 00 00 00	 push	 OFFSET _LanguageDlgProc@16
  02548	53		 push	 ebx
  02549	68 01 02 00 00	 push	 513			; 00000201H
  0254e	51		 push	 ecx
  0254f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  02555	83 f8 01	 cmp	 eax, 1
  02558	0f 85 3e dc ff
	ff		 jne	 $LN349@MainDialog

; 6422 : 			{
; 6423 : 				LoadLanguageFile ();

  0255e	e8 00 00 00 00	 call	 _LoadLanguageFile

; 6424 : 				SaveSettings (hwndDlg);

  02563	53		 push	 ebx
  02564	e8 00 00 00 00	 call	 _SaveSettings

; 6425 : 
; 6426 : 				p = LocalizationActive;

  02569	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _LocalizationActive

; 6427 : 				LocalizationActive = TRUE;
; 6428 : 				InitMainDialog (hwndDlg);

  0256f	53		 push	 ebx
  02570	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _LocalizationActive, 1
  0257a	e8 00 00 00 00	 call	 ?InitMainDialog@@YAXPAUHWND__@@@Z ; InitMainDialog
  0257f	83 c4 08	 add	 esp, 8

; 6429 : 				InvalidateRect (hwndDlg, NULL, FALSE);

  02582	6a 00		 push	 0
  02584	6a 00		 push	 0
  02586	53		 push	 ebx
  02587	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 6430 : 				LocalizationActive = p;
; 6431 : 				DrawMenuBar (hwndDlg);

  0258d	53		 push	 ebx
  0258e	89 35 00 00 00
	00		 mov	 DWORD PTR _LocalizationActive, esi
  02594	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawMenuBar@4

; 6432 : 			}
; 6433 : 			return 1;

  0259a	e9 fd db ff ff	 jmp	 $LN349@MainDialog
$LN28@MainDialog:

; 6434 : 		}
; 6435 : 
; 6436 : 		if (lw == IDM_TEST_VECTORS)

  0259f	ba 62 9c 00 00	 mov	 edx, 40034		; 00009c62H
  025a4	66 3b f2	 cmp	 si, dx
  025a7	75 1e		 jne	 SHORT $LN26@MainDialog

; 6437 : 		{
; 6438 : 			DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_CIPHER_TEST_DLG), hwndDlg, (DLGPROC) CipherTestDialogProc, (LPARAM) 1);

  025a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  025ae	6a 01		 push	 1
  025b0	68 00 00 00 00	 push	 OFFSET _CipherTestDialogProc@16
  025b5	53		 push	 ebx
  025b6	68 02 02 00 00	 push	 514			; 00000202H
  025bb	50		 push	 eax
  025bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 6439 : 			return 1;

  025c2	e9 d5 db ff ff	 jmp	 $LN349@MainDialog
$LN26@MainDialog:

; 6440 : 		}
; 6441 : 
; 6442 : 		if (lw == IDM_REFRESH_DRIVE_LETTERS)

  025c7	b9 49 9c 00 00	 mov	 ecx, 40009		; 00009c49H
  025cc	66 3b f1	 cmp	 si, cx
  025cf	0f 85 9c 00 00
	00		 jne	 $LN25@MainDialog

; 6443 : 		{
; 6444 : 			DWORD driveMap = GetLogicalDrives ();

  025d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLogicalDrives@0
  025db	8b f0		 mov	 esi, eax

; 6445 : 			
; 6446 : 			WaitCursor ();

  025dd	e8 00 00 00 00	 call	 _WaitCursor

; 6447 : 
; 6448 : 			if (!(nCurrentOS == WIN_2000 && RemoteSession))

  025e2	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _nCurrentOS, 7
  025e9	75 09		 jne	 SHORT $LN23@MainDialog
  025eb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _RemoteSession, 0
  025f2	75 2c		 jne	 SHORT $LN24@MainDialog
$LN23@MainDialog:

; 6449 : 			{
; 6450 : 				BroadcastDeviceChange (DBT_DEVICEREMOVECOMPLETE, 0, ~driveMap);

  025f4	8b d6		 mov	 edx, esi
  025f6	f7 d2		 not	 edx
  025f8	52		 push	 edx
  025f9	6a 00		 push	 0
  025fb	68 04 80 00 00	 push	 32772			; 00008004H
  02600	e8 00 00 00 00	 call	 _BroadcastDeviceChange
  02605	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6451 : 				Sleep (100);

  02608	6a 64		 push	 100			; 00000064H
  0260a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 6452 : 				BroadcastDeviceChange (DBT_DEVICEARRIVAL, 0, driveMap);

  02610	56		 push	 esi
  02611	6a 00		 push	 0
  02613	68 00 80 00 00	 push	 32768			; 00008000H
  02618	e8 00 00 00 00	 call	 _BroadcastDeviceChange
  0261d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN24@MainDialog:

; 6453 : 			}
; 6454 : 
; 6455 : 			LoadDriveLetters (GetDlgItem (hwndDlg, IDC_DRIVELIST), 0);

  02620	6a 00		 push	 0
  02622	68 ef 03 00 00	 push	 1007			; 000003efH
  02627	53		 push	 ebx
  02628	ff d7		 call	 edi
  0262a	50		 push	 eax
  0262b	e8 00 00 00 00	 call	 _LoadDriveLetters

; 6456 : 
; 6457 : 			if (nSelectedDriveIndex >= 0)

  02630	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nSelectedDriveIndex@@3HA ; nSelectedDriveIndex
  02635	83 c4 08	 add	 esp, 8
  02638	85 c0		 test	 eax, eax
  0263a	0f 8c 73 f8 ff
	ff		 jl	 $LN1049@MainDialog

; 6458 : 			{
; 6459 : 				SelectItem (GetDlgItem (hwndDlg, IDC_DRIVELIST),
; 6460 : 					(char) HIWORD (GetItemLong (GetDlgItem (hwndDlg, IDC_DRIVELIST), nSelectedDriveIndex)));

  02640	50		 push	 eax
  02641	68 ef 03 00 00	 push	 1007			; 000003efH
  02646	53		 push	 ebx
  02647	ff d7		 call	 edi
  02649	50		 push	 eax
  0264a	e8 00 00 00 00	 call	 _GetItemLong
  0264f	83 c4 08	 add	 esp, 8
  02652	c1 e8 10	 shr	 eax, 16			; 00000010H
  02655	50		 push	 eax
  02656	68 ef 03 00 00	 push	 1007			; 000003efH
  0265b	53		 push	 ebx
  0265c	ff d7		 call	 edi
  0265e	50		 push	 eax
  0265f	e8 00 00 00 00	 call	 _SelectItem
  02664	83 c4 08	 add	 esp, 8
  02667	e8 00 00 00 00	 call	 _NormalCursor
  0266c	e9 2b db ff ff	 jmp	 $LN349@MainDialog
$LN25@MainDialog:

; 6461 : 			}
; 6462 : 
; 6463 : 			NormalCursor ();
; 6464 : 			return 1;
; 6465 : 		}
; 6466 : 
; 6467 : 		if (lw == IDM_MOUNT_FAVORITE_VOLUMES)

  02671	b8 59 9c 00 00	 mov	 eax, 40025		; 00009c59H
  02676	66 3b f0	 cmp	 si, ax
  02679	75 31		 jne	 SHORT $LN21@MainDialog

; 6468 : 		{
; 6469 : 			MountFavoriteVolumes();

  0267b	8d 8d a8 fb ff
	ff		 lea	 ecx, DWORD PTR $T207871[ebp]
  02681	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@XZ ; CipherShed::FavoriteVolume::FavoriteVolume
  02686	50		 push	 eax
  02687	6a 00		 push	 0
  02689	6a 00		 push	 0
  0268b	6a 00		 push	 0
  0268d	c7 45 fc 17 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 23 ; 00000017H
  02694	e8 00 00 00 00	 call	 ?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z ; MountFavoriteVolumes
  02699	83 c4 10	 add	 esp, 16			; 00000010H
  0269c	8d 8d a8 fb ff
	ff		 lea	 ecx, DWORD PTR $T207871[ebp]
  026a2	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ

; 6470 : 			return 1;

  026a7	e9 f0 da ff ff	 jmp	 $LN349@MainDialog
$LN21@MainDialog:

; 6471 : 		}
; 6472 : 
; 6473 : 		if (lw == IDM_RESUME_INTERRUPTED_PROC)

  026ac	b9 77 9c 00 00	 mov	 ecx, 40055		; 00009c77H
  026b1	66 3b f1	 cmp	 si, cx
  026b4	75 0a		 jne	 SHORT $LN20@MainDialog

; 6474 : 		{
; 6475 : 			ResumeInterruptedNonSysInplaceEncProcess ();

  026b6	e8 00 00 00 00	 call	 ?ResumeInterruptedNonSysInplaceEncProcess@@YAXXZ ; ResumeInterruptedNonSysInplaceEncProcess

; 6476 : 			return 1;

  026bb	e9 dc da ff ff	 jmp	 $LN349@MainDialog
$LN20@MainDialog:

; 6477 : 		}
; 6478 : 
; 6479 : 		if (lw == IDC_VOLUME_PROPERTIES || lw == IDM_VOLUME_PROPERTIES)

  026c0	ba 15 04 00 00	 mov	 edx, 1045		; 00000415H
  026c5	66 3b f2	 cmp	 si, dx
  026c8	0f 84 7f 01 00
	00		 je	 $LN18@MainDialog
  026ce	b8 57 9c 00 00	 mov	 eax, 40023		; 00009c57H
  026d3	66 3b f0	 cmp	 si, ax
  026d6	0f 84 71 01 00
	00		 je	 $LN18@MainDialog

; 6485 : 		}
; 6486 : 
; 6487 : 		if (lw == IDC_VOLUME && hw == CBN_EDITCHANGE)

  026dc	b9 0a 04 00 00	 mov	 ecx, 1034		; 0000040aH
  026e1	66 3b f1	 cmp	 si, cx
  026e4	75 49		 jne	 SHORT $LN16@MainDialog
  026e6	8b 45 d0	 mov	 eax, DWORD PTR _hw$[ebp]
  026e9	66 83 f8 05	 cmp	 ax, 5

; 6488 : 		{
; 6489 : 			EnableDisableButtons (hwndDlg);
; 6490 : 			return 1;

  026ed	0f 84 a0 da ff
	ff		 je	 $LN8@MainDialog

; 6491 : 		}
; 6492 : 
; 6493 : 		if (lw == IDC_VOLUME && hw == CBN_SELCHANGE)

  026f3	66 83 f8 01	 cmp	 ax, 1
  026f7	0f 85 96 ea ff
	ff		 jne	 $LN347@MainDialog

; 6494 : 		{
; 6495 : 			UpdateComboOrder (GetDlgItem (hwndDlg, IDC_VOLUME));

  026fd	51		 push	 ecx
  026fe	53		 push	 ebx
  026ff	ff d7		 call	 edi
  02701	50		 push	 eax
  02702	e8 00 00 00 00	 call	 _UpdateComboOrder

; 6496 : 			MoveEditToCombo ((HWND) lParam, bHistory);

  02707	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHistory
  0270d	8b 45 e4	 mov	 eax, DWORD PTR _lParam$GSCopy$[ebp]
  02710	52		 push	 edx
  02711	50		 push	 eax
  02712	e8 00 00 00 00	 call	 _MoveEditToCombo
  02717	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6497 : 			PostMessage (hwndDlg, TC_APPMSG_MOUNT_ENABLE_DISABLE_CONTROLS, 0, 0);

  0271a	6a 00		 push	 0
  0271c	6a 00		 push	 0
  0271e	68 c9 80 00 00	 push	 32969			; 000080c9H
  02723	53		 push	 ebx
  02724	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 6498 : 			return 1;

  0272a	e9 6d da ff ff	 jmp	 $LN349@MainDialog
$LN16@MainDialog:

; 6499 : 		}
; 6500 : 
; 6501 : 		if (lw == IDC_NO_HISTORY)

  0272f	b9 ee 03 00 00	 mov	 ecx, 1006		; 000003eeH
  02734	66 3b f1	 cmp	 si, cx
  02737	75 32		 jne	 SHORT $LN15@MainDialog

; 6502 : 		{
; 6503 : 			if (!(bHistory = !IsButtonChecked (GetDlgItem (hwndDlg, IDC_NO_HISTORY))))

  02739	51		 push	 ecx
  0273a	53		 push	 ebx
  0273b	ff d7		 call	 edi
  0273d	50		 push	 eax
  0273e	e8 00 00 00 00	 call	 _IsButtonChecked
  02743	83 c4 04	 add	 esp, 4
  02746	f7 d8		 neg	 eax
  02748	1b c0		 sbb	 eax, eax
  0274a	83 c0 01	 add	 eax, 1
  0274d	a3 00 00 00 00	 mov	 DWORD PTR _bHistory, eax
  02752	0f 85 44 da ff
	ff		 jne	 $LN349@MainDialog

; 6504 : 				ClearHistory (GetDlgItem (hwndDlg, IDC_VOLUME));

  02758	68 0a 04 00 00	 push	 1034			; 0000040aH
  0275d	53		 push	 ebx
  0275e	ff d7		 call	 edi
  02760	50		 push	 eax
  02761	e8 00 00 00 00	 call	 _ClearHistory

; 6505 : 
; 6506 : 			return 1;

  02766	e9 2e da ff ff	 jmp	 $LN1033@MainDialog
$LN15@MainDialog:

; 6507 : 		}
; 6508 : 
; 6509 : 		if (lw >= TC_FAVORITE_MENU_CMD_ID_OFFSET && lw < TC_FAVORITE_MENU_CMD_ID_OFFSET_END)

  0276b	ba 10 27 00 00	 mov	 edx, 10000		; 00002710H
  02770	66 3b f2	 cmp	 si, dx
  02773	0f 82 1a ea ff
	ff		 jb	 $LN347@MainDialog
  02779	b8 f8 2a 00 00	 mov	 eax, 11000		; 00002af8H
  0277e	66 3b f0	 cmp	 si, ax
  02781	0f 83 0c ea ff
	ff		 jae	 $LN347@MainDialog

; 6510 : 		{
; 6511 : 			size_t favoriteIndex = lw - TC_FAVORITE_MENU_CMD_ID_OFFSET;
; 6512 : 
; 6513 : 			if (favoriteIndex < FavoriteVolumes.size())

  02787	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+16
  0278d	2b 0d 0c 00 00
	00		 sub	 ecx, DWORD PTR ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A+12
  02793	8b 75 e8	 mov	 esi, DWORD PTR tv4991[ebp]
  02796	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0279b	f7 e9		 imul	 ecx
  0279d	03 d1		 add	 edx, ecx
  0279f	c1 fa 06	 sar	 edx, 6
  027a2	8b ca		 mov	 ecx, edx
  027a4	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  027a7	81 c6 f0 d8 ff
	ff		 add	 esi, -10000		; ffffd8f0H
  027ad	03 ca		 add	 ecx, edx
  027af	3b f1		 cmp	 esi, ecx
  027b1	0f 83 e5 d9 ff
	ff		 jae	 $LN349@MainDialog

; 6514 : 			{
; 6515 : 				if (IsMountedVolume (FavoriteVolumes[favoriteIndex].Path.c_str()))

  027b7	56		 push	 esi
  027b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoriteVolumes
  027bd	e8 00 00 00 00	 call	 ??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator[]
  027c2	bb 10 00 00 00	 mov	 ebx, 16			; 00000010H
  027c7	39 58 18	 cmp	 DWORD PTR [eax+24], ebx
  027ca	72 05		 jb	 SHORT $LN819@MainDialog
  027cc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  027cf	eb 03		 jmp	 SHORT $LN820@MainDialog
$LN819@MainDialog:
  027d1	83 c0 04	 add	 eax, 4
$LN820@MainDialog:
  027d4	50		 push	 eax
  027d5	e8 00 00 00 00	 call	 _IsMountedVolume
  027da	83 c4 04	 add	 esp, 4
  027dd	85 c0		 test	 eax, eax
  027df	74 4d		 je	 SHORT $LN11@MainDialog

; 6516 : 				{
; 6517 : 					WaitCursor();

  027e1	e8 00 00 00 00	 call	 _WaitCursor

; 6518 : 					OpenVolumeExplorerWindow (GetMountedVolumeDriveNo ((char *) FavoriteVolumes[favoriteIndex].Path.c_str()));

  027e6	56		 push	 esi
  027e7	b9 00 00 00 00	 mov	 ecx, OFFSET ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoriteVolumes
  027ec	e8 00 00 00 00	 call	 ??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator[]
  027f1	39 58 18	 cmp	 DWORD PTR [eax+24], ebx
  027f4	72 1c		 jb	 SHORT $LN825@MainDialog
  027f6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  027f9	50		 push	 eax
  027fa	e8 00 00 00 00	 call	 _GetMountedVolumeDriveNo
  027ff	50		 push	 eax
  02800	e8 00 00 00 00	 call	 _OpenVolumeExplorerWindow
  02805	83 c4 08	 add	 esp, 8
  02808	e8 00 00 00 00	 call	 _NormalCursor
  0280d	e9 8a d9 ff ff	 jmp	 $LN349@MainDialog
$LN825@MainDialog:
  02812	83 c0 04	 add	 eax, 4
  02815	50		 push	 eax
  02816	e8 00 00 00 00	 call	 _GetMountedVolumeDriveNo
  0281b	50		 push	 eax
  0281c	e8 00 00 00 00	 call	 _OpenVolumeExplorerWindow
  02821	83 c4 08	 add	 esp, 8
  02824	e8 00 00 00 00	 call	 _NormalCursor
  02829	e9 6e d9 ff ff	 jmp	 $LN349@MainDialog
$LN11@MainDialog:

; 6519 : 					NormalCursor();
; 6520 : 				}
; 6521 : 				else
; 6522 : 					MountFavoriteVolumes (FALSE, FALSE, FALSE, FavoriteVolumes[favoriteIndex]);

  0282e	56		 push	 esi
  0282f	b9 00 00 00 00	 mov	 ecx, OFFSET ?FavoriteVolumes@CipherShed@@3V?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@A ; CipherShed::FavoriteVolumes
  02834	e8 00 00 00 00	 call	 ??A?$vector@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@QAEAAUFavoriteVolume@CipherShed@@I@Z ; std::vector<CipherShed::FavoriteVolume,std::allocator<CipherShed::FavoriteVolume> >::operator[]
  02839	50		 push	 eax
  0283a	6a 00		 push	 0
  0283c	6a 00		 push	 0
  0283e	6a 00		 push	 0
  02840	e8 00 00 00 00	 call	 ?MountFavoriteVolumes@@YAHHHHABUFavoriteVolume@CipherShed@@@Z ; MountFavoriteVolumes
  02845	83 c4 10	 add	 esp, 16			; 00000010H

; 6523 : 			}
; 6524 : 
; 6525 : 			return 1;

  02848	e9 4f d9 ff ff	 jmp	 $LN349@MainDialog
$LN18@MainDialog:

; 6480 : 		{
; 6481 : 			DialogBoxParamW (hInst, 
; 6482 : 				MAKEINTRESOURCEW (IDD_VOLUME_PROPERTIES), hwndDlg,
; 6483 : 				(DLGPROC) VolumePropertiesDlgProc, (LPARAM) 0);

  0284d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  02853	6a 00		 push	 0
  02855	68 00 00 00 00	 push	 OFFSET ?VolumePropertiesDlgProc@@YGHPAUHWND__@@IIJ@Z ; VolumePropertiesDlgProc
  0285a	53		 push	 ebx
  0285b	6a 6c		 push	 108			; 0000006cH
  0285d	52		 push	 edx
  0285e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 6484 : 			return 1;

  02864	e9 33 d9 ff ff	 jmp	 $LN349@MainDialog
$LN42@MainDialog:

; 6344 : 		{
; 6345 : 			DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_SETTINGS), hwndDlg, (DLGPROC) BootLoaderPreferencesDlgProc, 0);

  02869	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  0286e	6a 00		 push	 0
  02870	68 00 00 00 00	 push	 OFFSET _BootLoaderPreferencesDlgProc@16
  02875	53		 push	 ebx
  02876	6a 74		 push	 116			; 00000074H
  02878	50		 push	 eax
  02879	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 6346 : 			return 1;

  0287f	e9 18 d9 ff ff	 jmp	 $LN349@MainDialog
$LN45@MainDialog:

; 6332 : 		{
; 6333 : 			OrganizeFavoriteVolumes (hwndDlg, lw == IDM_ORGANIZE_SYSTEM_FAVORITES);

  02884	8d 8d 10 fd ff
	ff		 lea	 ecx, DWORD PTR $T207869[ebp]
  0288a	e8 00 00 00 00	 call	 ??0FavoriteVolume@CipherShed@@QAE@XZ ; CipherShed::FavoriteVolume::FavoriteVolume
  0288f	b9 7b 9c 00 00	 mov	 ecx, 40059		; 00009c7bH
  02894	66 3b f1	 cmp	 si, cx
  02897	50		 push	 eax
  02898	0f 94 c2	 sete	 dl
  0289b	0f b6 c2	 movzx	 eax, dl
  0289e	50		 push	 eax
  0289f	53		 push	 ebx
  028a0	c7 45 fc 15 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 21 ; 00000015H
  028a7	e8 00 00 00 00	 call	 ?OrganizeFavoriteVolumes@CipherShed@@YAHPAUHWND__@@_NABUFavoriteVolume@1@@Z ; CipherShed::OrganizeFavoriteVolumes
  028ac	83 c4 0c	 add	 esp, 12			; 0000000cH
  028af	8d 8d 10 fd ff
	ff		 lea	 ecx, DWORD PTR $T207869[ebp]
  028b5	e8 00 00 00 00	 call	 ??1FavoriteVolume@CipherShed@@QAE@XZ

; 6334 : 			return 1;

  028ba	e9 dd d8 ff ff	 jmp	 $LN349@MainDialog
$LN64@MainDialog:

; 6226 : 		{
; 6227 : 			LPARAM selectedDrive = GetSelectedLong (GetDlgItem (hwndDlg, IDC_DRIVELIST));

  028bf	68 ef 03 00 00	 push	 1007			; 000003efH
  028c4	53		 push	 ebx
  028c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  028cb	50		 push	 eax
  028cc	e8 00 00 00 00	 call	 _GetSelectedLong
  028d1	83 c4 04	 add	 esp, 4

; 6228 : 
; 6229 : 			char volPathLower[TC_MAX_PATH];
; 6230 : 			wchar_t volPathLowerW[TC_MAX_PATH];
; 6231 : 
; 6232 : 			// volPathLower will contain the volume path (if any) from the input field below the drive list 
; 6233 : 			GetWindowTextA(GetDlgItem (hwndDlg, IDC_VOLUME), volPathLower, sizeof (volPathLower));

  028d4	68 04 01 00 00	 push	 260			; 00000104H
  028d9	8d 8d 2c 27 00
	00		 lea	 ecx, DWORD PTR _volPathLower$138945[ebp]
  028df	51		 push	 ecx
  028e0	68 0a 04 00 00	 push	 1034			; 0000040aH
  028e5	53		 push	 ebx
  028e6	8b f8		 mov	 edi, eax
  028e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  028ee	50		 push	 eax
  028ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 6234 : 
; 6235 : 			if (LOWORD (selectedDrive) != TC_MLIST_ITEM_NONSYS_VOL
; 6236 : 				&& !(VolumeSelected (hwndDlg) && IsMountedVolume (volPathLower)))

  028f5	66 83 ff 01	 cmp	 di, 1
  028f9	74 28		 je	 SHORT $LN63@MainDialog
  028fb	53		 push	 ebx
  028fc	e8 00 00 00 00	 call	 _VolumeSelected
  02901	83 c4 04	 add	 esp, 4
  02904	85 c0		 test	 eax, eax
  02906	0f 84 37 f1 ff
	ff		 je	 $LN62@MainDialog
  0290c	8d 95 2c 27 00
	00		 lea	 edx, DWORD PTR _volPathLower$138945[ebp]
  02912	52		 push	 edx
  02913	e8 00 00 00 00	 call	 _IsMountedVolume
  02918	83 c4 04	 add	 esp, 4
  0291b	85 c0		 test	 eax, eax

; 6237 : 			{
; 6238 : 				Warning ("SELECT_A_MOUNTED_VOLUME");
; 6239 : 
; 6240 : 				return 1;

  0291d	0f 84 20 f1 ff
	ff		 je	 $LN62@MainDialog
$LN63@MainDialog:

; 6241 : 			}
; 6242 : 
; 6243 : 			int driveNo;
; 6244 : 
; 6245 : 			if (VolumeSelected (hwndDlg)
; 6246 : 				&& IsMountedVolume (volPathLower))

  02923	53		 push	 ebx
  02924	e8 00 00 00 00	 call	 _VolumeSelected
  02929	83 c4 04	 add	 esp, 4
  0292c	85 c0		 test	 eax, eax
  0292e	0f 84 6e 03 00
	00		 je	 $LN61@MainDialog
  02934	8d 85 2c 27 00
	00		 lea	 eax, DWORD PTR _volPathLower$138945[ebp]
  0293a	50		 push	 eax
  0293b	e8 00 00 00 00	 call	 _IsMountedVolume
  02940	83 c4 04	 add	 esp, 4
  02943	85 c0		 test	 eax, eax
  02945	0f 84 57 03 00
	00		 je	 $LN61@MainDialog

; 6247 : 			{
; 6248 : 				if (LOWORD (selectedDrive) != TC_MLIST_ITEM_NONSYS_VOL)

  0294b	66 83 ff 01	 cmp	 di, 1
  0294f	74 16		 je	 SHORT $LN60@MainDialog

; 6249 : 				{
; 6250 : 					driveNo = GetMountedVolumeDriveNo (volPathLower);

  02951	8d 8d 2c 27 00
	00		 lea	 ecx, DWORD PTR _volPathLower$138945[ebp]
  02957	51		 push	 ecx
  02958	e8 00 00 00 00	 call	 _GetMountedVolumeDriveNo
  0295d	83 c4 04	 add	 esp, 4
  02960	8b f8		 mov	 edi, eax

; 6251 : 				}
; 6252 : 				else

  02962	e9 41 03 00 00	 jmp	 $LN47@MainDialog
$LN60@MainDialog:

; 6253 : 				{
; 6254 : 					/* We need to resolve selection ambiguity. Two different mounted volumes are currently
; 6255 : 					selected (one in the drive letter list and the other in the input field below the list). */
; 6256 : 
; 6257 : 					VOLUME_PROPERTIES_STRUCT prop;
; 6258 : 					DWORD dwResult;
; 6259 : 
; 6260 : 					memset (&prop, 0, sizeof(prop));

  02967	68 54 02 00 00	 push	 596			; 00000254H
  0296c	8d 95 58 03 00
	00		 lea	 edx, DWORD PTR _prop$138957[ebp]
  02972	6a 00		 push	 0
  02974	52		 push	 edx
  02975	e8 00 00 00 00	 call	 _memset
  0297a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6261 : 					prop.driveNo = HIWORD (selectedDrive) - 'A';
; 6262 : 
; 6263 : 					if (!DeviceIoControl (hDriver, TC_IOCTL_GET_VOLUME_PROPERTIES, &prop, sizeof (prop), &prop, sizeof (prop), &dwResult, NULL) || dwResult == 0)

  0297d	6a 00		 push	 0
  0297f	8d 45 d0	 lea	 eax, DWORD PTR _dwResult$138958[ebp]
  02982	50		 push	 eax
  02983	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  02988	68 54 02 00 00	 push	 596			; 00000254H
  0298d	8d 8d 58 03 00
	00		 lea	 ecx, DWORD PTR _prop$138957[ebp]
  02993	51		 push	 ecx
  02994	68 54 02 00 00	 push	 596			; 00000254H
  02999	8b d1		 mov	 edx, ecx
  0299b	52		 push	 edx
  0299c	c1 ef 10	 shr	 edi, 16			; 00000010H
  0299f	68 1c 20 22 00	 push	 2236444			; 0022201cH
  029a4	83 c7 bf	 add	 edi, -65		; ffffffbfH
  029a7	50		 push	 eax
  029a8	89 7d dc	 mov	 DWORD PTR tv3993[ebp], edi
  029ab	89 bd 58 03 00
	00		 mov	 DWORD PTR _prop$138957[ebp], edi
  029b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  029b7	85 c0		 test	 eax, eax
  029b9	0f 84 84 f0 ff
	ff		 je	 $LN62@MainDialog
  029bf	83 7d d0 00	 cmp	 DWORD PTR _dwResult$138958[ebp], 0
  029c3	0f 84 7a f0 ff
	ff		 je	 $LN62@MainDialog

; 6264 : 					{
; 6265 : 						Warning ("SELECT_A_MOUNTED_VOLUME");
; 6266 : 						return 1;
; 6267 : 					}
; 6268 : 
; 6269 : 					// volPathHigher will contain the volume path selected in the main drive list
; 6270 : 					wstring volPathHigher (prop.wszVolume);

  029c9	8d 8d 60 03 00
	00		 lea	 ecx, DWORD PTR _prop$138957[ebp+8]
  029cf	51		 push	 ecx
  029d0	8d 8d d4 06 00
	00		 lea	 ecx, DWORD PTR _volPathHigher$138963[ebp]
  029d6	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 6271 : 
; 6272 : 					ToSBCS (prop.wszVolume);

  029db	8d 95 60 03 00
	00		 lea	 edx, DWORD PTR _prop$138957[ebp+8]
  029e1	52		 push	 edx
  029e2	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 13 ; 0000000dH
  029e9	e8 00 00 00 00	 call	 _ToSBCS
  029ee	83 c4 04	 add	 esp, 4

; 6273 : 					strcpy ((char *) volPathLowerW, volPathLower);

  029f1	33 c0		 xor	 eax, eax
  029f3	eb 0b 8d a4 24
	00 00 00 00 8d
	64 24 00	 npad	 13
$LL478@MainDialog:
  02a00	8a 8c 05 2c 27
	00 00		 mov	 cl, BYTE PTR _volPathLower$138945[ebp+eax]
  02a07	88 8c 05 14 21
	00 00		 mov	 BYTE PTR _volPathLowerW$138946[ebp+eax], cl
  02a0e	40		 inc	 eax
  02a0f	84 c9		 test	 cl, cl
  02a11	75 ed		 jne	 SHORT $LL478@MainDialog

; 6274 : 					ToUNICODE ((char *) volPathLowerW);

  02a13	8d 85 14 21 00
	00		 lea	 eax, DWORD PTR _volPathLowerW$138946[ebp]
  02a19	50		 push	 eax
  02a1a	e8 00 00 00 00	 call	 _ToUNICODE
  02a1f	83 c4 04	 add	 esp, 4

; 6275 : 
; 6276 : 					if (strcmp (((memcmp ((char *) prop.wszVolume, "\\??\\", 4) == 0) ? (char *) prop.wszVolume + 4 : (char *) prop.wszVolume), volPathLower) != 0)

  02a22	81 bd 60 03 00
	00 5c 3f 3f 5c	 cmp	 DWORD PTR _prop$138957[ebp+8], 1547648860 ; 5c3f3f5cH
  02a2c	8d 85 64 03 00
	00		 lea	 eax, DWORD PTR _prop$138957[ebp+12]
  02a32	74 06		 je	 SHORT $LN480@MainDialog
  02a34	8d 85 60 03 00
	00		 lea	 eax, DWORD PTR _prop$138957[ebp+8]
$LN480@MainDialog:
  02a3a	8d bd 2c 27 00
	00		 lea	 edi, DWORD PTR _volPathLower$138945[ebp]
$LL926@MainDialog:
  02a40	8a 08		 mov	 cl, BYTE PTR [eax]
  02a42	3a 0f		 cmp	 cl, BYTE PTR [edi]
  02a44	75 1a		 jne	 SHORT $LN927@MainDialog
  02a46	84 c9		 test	 cl, cl
  02a48	74 12		 je	 SHORT $LN928@MainDialog
  02a4a	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  02a4d	3a 4f 01	 cmp	 cl, BYTE PTR [edi+1]
  02a50	75 0e		 jne	 SHORT $LN927@MainDialog
  02a52	83 c0 02	 add	 eax, 2
  02a55	83 c7 02	 add	 edi, 2
  02a58	84 c9		 test	 cl, cl
  02a5a	75 e4		 jne	 SHORT $LL926@MainDialog
$LN928@MainDialog:
  02a5c	33 c0		 xor	 eax, eax
  02a5e	eb 05		 jmp	 SHORT $LN929@MainDialog
$LN927@MainDialog:
  02a60	1b c0		 sbb	 eax, eax
  02a62	83 d8 ff	 sbb	 eax, -1
$LN929@MainDialog:
  02a65	85 c0		 test	 eax, eax
  02a67	0f 84 1e 02 00
	00		 je	 $LN56@MainDialog

; 6277 : 					{
; 6278 : 						// The path selected in the input field is different from the path to the volume selected
; 6279 : 						// in the drive lettter list. We have to resolve possible ambiguity.
; 6280 : 
; 6281 : 						wchar_t *tmp[] = {L"", L"", L"", L"", L"", 0};

  02a6d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  02a72	89 45 b8	 mov	 DWORD PTR _tmp$138970[ebp], eax
  02a75	89 45 bc	 mov	 DWORD PTR _tmp$138970[ebp+4], eax
  02a78	89 45 c0	 mov	 DWORD PTR _tmp$138970[ebp+8], eax
  02a7b	89 45 c4	 mov	 DWORD PTR _tmp$138970[ebp+12], eax
  02a7e	89 45 c8	 mov	 DWORD PTR _tmp$138970[ebp+16], eax

; 6282 : 						const int maxVolPathLen = 80;
; 6283 : 
; 6284 : 						if (volPathHigher.length () > maxVolPathLen)

  02a81	8b 85 e8 06 00
	00		 mov	 eax, DWORD PTR _volPathHigher$138963[ebp+20]
  02a87	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _tmp$138970[ebp+20], 0
  02a8e	83 f8 50	 cmp	 eax, 80			; 00000050H
  02a91	76 7c		 jbe	 SHORT $LN55@MainDialog

; 6285 : 						{
; 6286 : 							volPathHigher = wstring (L"...") + volPathHigher.substr (volPathHigher.length () - maxVolPathLen, maxVolPathLen);

  02a93	6a 50		 push	 80			; 00000050H
  02a95	83 c0 b0	 add	 eax, -80		; ffffffb0H
  02a98	50		 push	 eax
  02a99	8d 8d f8 fd ff
	ff		 lea	 ecx, DWORD PTR $T207862[ebp]
  02a9f	51		 push	 ecx
  02aa0	8d 8d d4 06 00
	00		 lea	 ecx, DWORD PTR _volPathHigher$138963[ebp]
  02aa6	e8 00 00 00 00	 call	 ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
  02aab	8b f8		 mov	 edi, eax
  02aad	68 00 00 00 00	 push	 OFFSET ??_C@_17LGKOMLJ@?$AA?4?$AA?4?$AA?4?$AA?$AA@
  02ab2	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR $T207863[ebp]
  02ab8	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+12], 14 ; 0000000eH
  02abc	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02ac1	57		 push	 edi
  02ac2	50		 push	 eax
  02ac3	8d 95 dc fd ff
	ff		 lea	 edx, DWORD PTR $T207864[ebp]
  02ac9	52		 push	 edx
  02aca	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+12], 15 ; 0000000fH
  02ace	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02ad3	83 c4 0c	 add	 esp, 12			; 0000000cH
  02ad6	6a ff		 push	 -1
  02ad8	6a 00		 push	 0
  02ada	50		 push	 eax
  02adb	8d 8d d4 06 00
	00		 lea	 ecx, DWORD PTR _volPathHigher$138963[ebp]
  02ae1	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+12], 16 ; 00000010H
  02ae5	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  02aea	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR $T207864[ebp]
  02af0	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02af5	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR $T207863[ebp]
  02afb	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02b00	8d 8d f8 fd ff
	ff		 lea	 ecx, DWORD PTR $T207862[ebp]
  02b06	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+12], 13 ; 0000000dH
  02b0a	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN55@MainDialog:

; 6287 : 						}
; 6288 : 
; 6289 : 						wstring volPathLowerWStr (volPathLowerW);

  02b0f	8d 85 14 21 00
	00		 lea	 eax, DWORD PTR _volPathLowerW$138946[ebp]
  02b15	50		 push	 eax
  02b16	8d 8d f0 06 00
	00		 lea	 ecx, DWORD PTR _volPathLowerWStr$138993[ebp]
  02b1c	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 6290 : 
; 6291 : 						if (volPathLowerWStr.length () > maxVolPathLen)

  02b21	8b 85 04 07 00
	00		 mov	 eax, DWORD PTR _volPathLowerWStr$138993[ebp+20]
  02b27	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+12], 17 ; 00000011H
  02b2b	83 f8 50	 cmp	 eax, 80			; 00000050H
  02b2e	76 7c		 jbe	 SHORT $LN54@MainDialog

; 6292 : 						{
; 6293 : 							volPathLowerWStr = wstring (L"...") + volPathLowerWStr.substr (volPathLowerWStr.length () - maxVolPathLen, maxVolPathLen);

  02b30	6a 50		 push	 80			; 00000050H
  02b32	83 c0 b0	 add	 eax, -80		; ffffffb0H
  02b35	50		 push	 eax
  02b36	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR $T207865[ebp]
  02b3c	51		 push	 ecx
  02b3d	8d 8d f0 06 00
	00		 lea	 ecx, DWORD PTR _volPathLowerWStr$138993[ebp]
  02b43	e8 00 00 00 00	 call	 ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
  02b48	8b f8		 mov	 edi, eax
  02b4a	68 00 00 00 00	 push	 OFFSET ??_C@_17LGKOMLJ@?$AA?4?$AA?4?$AA?4?$AA?$AA@
  02b4f	8d 8d a4 fd ff
	ff		 lea	 ecx, DWORD PTR $T207866[ebp]
  02b55	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+12], 18 ; 00000012H
  02b59	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02b5e	57		 push	 edi
  02b5f	50		 push	 eax
  02b60	8d 95 14 fe ff
	ff		 lea	 edx, DWORD PTR $T207867[ebp]
  02b66	52		 push	 edx
  02b67	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+12], 19 ; 00000013H
  02b6b	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02b70	83 c4 0c	 add	 esp, 12			; 0000000cH
  02b73	6a ff		 push	 -1
  02b75	6a 00		 push	 0
  02b77	50		 push	 eax
  02b78	8d 8d f0 06 00
	00		 lea	 ecx, DWORD PTR _volPathLowerWStr$138993[ebp]
  02b7e	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+12], 20 ; 00000014H
  02b82	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  02b87	8d 8d 14 fe ff
	ff		 lea	 ecx, DWORD PTR $T207867[ebp]
  02b8d	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02b92	8d 8d a4 fd ff
	ff		 lea	 ecx, DWORD PTR $T207866[ebp]
  02b98	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02b9d	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR $T207865[ebp]
  02ba3	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+12], 17 ; 00000011H
  02ba7	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN54@MainDialog:

; 6294 : 						}
; 6295 : 
; 6296 : 						tmp[1] = GetString ("AMBIGUOUS_VOL_SELECTION");

  02bac	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DALIBKDK@AMBIGUOUS_VOL_SELECTION?$AA@
  02bb1	e8 00 00 00 00	 call	 _GetString
  02bb6	89 45 bc	 mov	 DWORD PTR _tmp$138970[ebp+4], eax

; 6297 : 						tmp[2] = (wchar_t *) volPathHigher.c_str();

  02bb9	b8 08 00 00 00	 mov	 eax, 8
  02bbe	83 c4 04	 add	 esp, 4
  02bc1	39 85 ec 06 00
	00		 cmp	 DWORD PTR _volPathHigher$138963[ebp+24], eax
  02bc7	72 0b		 jb	 SHORT $LN805@MainDialog
  02bc9	8b 8d d8 06 00
	00		 mov	 ecx, DWORD PTR _volPathHigher$138963[ebp+4]
  02bcf	89 4d c0	 mov	 DWORD PTR _tmp$138970[ebp+8], ecx
  02bd2	eb 09		 jmp	 SHORT $LN806@MainDialog
$LN805@MainDialog:
  02bd4	8d 95 d8 06 00
	00		 lea	 edx, DWORD PTR _volPathHigher$138963[ebp+4]
  02bda	89 55 c0	 mov	 DWORD PTR _tmp$138970[ebp+8], edx
$LN806@MainDialog:

; 6298 : 						tmp[3] = (wchar_t *) volPathLowerWStr.c_str();

  02bdd	39 85 08 07 00
	00		 cmp	 DWORD PTR _volPathLowerWStr$138993[ebp+24], eax
  02be3	72 0b		 jb	 SHORT $LN811@MainDialog
  02be5	8b 85 f4 06 00
	00		 mov	 eax, DWORD PTR _volPathLowerWStr$138993[ebp+4]
  02beb	89 45 c4	 mov	 DWORD PTR _tmp$138970[ebp+12], eax
  02bee	eb 09		 jmp	 SHORT $LN812@MainDialog
$LN811@MainDialog:
  02bf0	8d 8d f4 06 00
	00		 lea	 ecx, DWORD PTR _volPathLowerWStr$138993[ebp+4]
  02bf6	89 4d c4	 mov	 DWORD PTR _tmp$138970[ebp+12], ecx
$LN812@MainDialog:

; 6299 : 						tmp[4] = GetString ("IDCANCEL");

  02bf9	68 00 00 00 00	 push	 OFFSET ??_C@_08DDAIHKOO@IDCANCEL?$AA@
  02bfe	e8 00 00 00 00	 call	 _GetString

; 6300 : 
; 6301 : 						switch (AskMultiChoice ((void **) tmp, FALSE))

  02c03	8d 55 b8	 lea	 edx, DWORD PTR _tmp$138970[ebp]
  02c06	6a 00		 push	 0
  02c08	52		 push	 edx
  02c09	89 45 c8	 mov	 DWORD PTR _tmp$138970[ebp+16], eax
  02c0c	e8 00 00 00 00	 call	 _AskMultiChoice
  02c11	83 c4 0c	 add	 esp, 12			; 0000000cH
  02c14	83 e8 01	 sub	 eax, 1
  02c17	74 50		 je	 SHORT $LN51@MainDialog
  02c19	83 e8 01	 sub	 eax, 1
  02c1c	74 1b		 je	 SHORT $LN50@MainDialog

; 6309 : 							break;
; 6310 : 
; 6311 : 						default:
; 6312 : 							return 1;

  02c1e	8d 8d f0 06 00
	00		 lea	 ecx, DWORD PTR _volPathLowerWStr$138993[ebp]
  02c24	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02c29	8d 8d d4 06 00
	00		 lea	 ecx, DWORD PTR _volPathHigher$138963[ebp]
  02c2f	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02c34	e9 63 d5 ff ff	 jmp	 $LN349@MainDialog
$LN50@MainDialog:

; 6305 : 							break;
; 6306 : 
; 6307 : 						case 2:
; 6308 : 							driveNo = GetMountedVolumeDriveNo (volPathLower);

  02c39	8d 85 2c 27 00
	00		 lea	 eax, DWORD PTR _volPathLower$138945[ebp]
  02c3f	50		 push	 eax
  02c40	e8 00 00 00 00	 call	 _GetMountedVolumeDriveNo
  02c45	83 c4 04	 add	 esp, 4

; 6313 : 						}
; 6314 : 					}

  02c48	8d 8d f0 06 00
	00		 lea	 ecx, DWORD PTR _volPathLowerWStr$138993[ebp]
  02c4e	8b f8		 mov	 edi, eax
  02c50	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 6318 : 					}
; 6319 : 				}

  02c55	8d 8d d4 06 00
	00		 lea	 ecx, DWORD PTR _volPathHigher$138963[ebp]
  02c5b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  02c62	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 6320 : 			}
; 6321 : 			else

  02c67	eb 3f		 jmp	 SHORT $LN47@MainDialog
$LN51@MainDialog:

; 6302 : 						{
; 6303 : 						case 1:
; 6304 : 							driveNo = HIWORD (selectedDrive) - 'A';

  02c69	8b 7d dc	 mov	 edi, DWORD PTR tv3993[ebp]

; 6313 : 						}
; 6314 : 					}

  02c6c	8d 8d f0 06 00
	00		 lea	 ecx, DWORD PTR _volPathLowerWStr$138993[ebp]
  02c72	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 6318 : 					}
; 6319 : 				}

  02c77	8d 8d d4 06 00
	00		 lea	 ecx, DWORD PTR _volPathHigher$138963[ebp]
  02c7d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  02c84	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 6320 : 			}
; 6321 : 			else

  02c89	eb 1d		 jmp	 SHORT $LN47@MainDialog
$LN56@MainDialog:

; 6315 : 					else
; 6316 : 					{
; 6317 : 						driveNo = HIWORD (selectedDrive) - 'A';

  02c8b	8b 7d dc	 mov	 edi, DWORD PTR tv3993[ebp]

; 6318 : 					}
; 6319 : 				}

  02c8e	8d 8d d4 06 00
	00		 lea	 ecx, DWORD PTR _volPathHigher$138963[ebp]
  02c94	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  02c9b	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 6320 : 			}
; 6321 : 			else

  02ca0	eb 06		 jmp	 SHORT $LN47@MainDialog
$LN61@MainDialog:

; 6322 : 			{
; 6323 : 				driveNo = HIWORD (selectedDrive) - 'A';

  02ca2	c1 ef 10	 shr	 edi, 16			; 00000010H
  02ca5	83 ef 41	 sub	 edi, 65			; 00000041H
$LN47@MainDialog:

; 6324 : 			}
; 6325 : 
; 6326 : 			AddMountedVolumeToFavorites (hwndDlg, driveNo, lw == IDM_ADD_VOLUME_TO_SYSTEM_FAVORITES);

  02ca8	b9 7d 9c 00 00	 mov	 ecx, 40061		; 00009c7dH
  02cad	66 3b f1	 cmp	 si, cx
  02cb0	0f 94 c2	 sete	 dl
  02cb3	0f b6 c2	 movzx	 eax, dl
  02cb6	50		 push	 eax
  02cb7	57		 push	 edi
  02cb8	53		 push	 ebx
  02cb9	e8 00 00 00 00	 call	 ?AddMountedVolumeToFavorites@CipherShed@@YAHPAUHWND__@@H_N@Z ; CipherShed::AddMountedVolumeToFavorites
  02cbe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6327 : 
; 6328 : 			return 1;

  02cc1	e9 d6 d4 ff ff	 jmp	 $LN349@MainDialog
$LN105@MainDialog:

; 6062 : 		{
; 6063 : 			LaunchVolCreationWizard (hwndDlg, "");

  02cc6	8b 4d e0	 mov	 ecx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  02cc9	51		 push	 ecx
  02cca	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  02ccf	e8 00 00 00 00	 call	 ?LaunchVolCreationWizard@@YAXPAUHWND__@@PBD@Z ; LaunchVolCreationWizard

; 6064 : 			return 1;

  02cd4	e9 c0 d4 ff ff	 jmp	 $LN1033@MainDialog
$LN108@MainDialog:

; 6049 : 		{
; 6050 : 			WipeCache (hwndDlg, FALSE);

  02cd9	6a 00		 push	 0
  02cdb	8b f3		 mov	 esi, ebx
  02cdd	e8 00 00 00 00	 call	 _WipeCache

; 6051 : 			return 1;

  02ce2	e9 b2 d4 ff ff	 jmp	 $LN1033@MainDialog
$LN162@MainDialog:

; 5821 : 		{
; 5822 : 			SelectPartition (hwndDlg);

  02ce7	8b f3		 mov	 esi, ebx
  02ce9	e8 00 00 00 00	 call	 ?SelectPartition@@YAHPAUHWND__@@@Z ; SelectPartition

; 5823 : 			return 1;

  02cee	e9 a9 d4 ff ff	 jmp	 $LN349@MainDialog
$LN164@MainDialog:

; 5815 : 		{
; 5816 : 			SelectContainer (hwndDlg);

  02cf3	8b f3		 mov	 esi, ebx
  02cf5	e8 00 00 00 00	 call	 ?SelectContainer@@YAHPAUHWND__@@@Z ; SelectContainer

; 5817 : 			return 1;

  02cfa	e9 9d d4 ff ff	 jmp	 $LN349@MainDialog
$LN166@MainDialog:

; 5808 : 		{
; 5809 : 			// If Shift key is down and the password cache isn't empty, bypass password prompt
; 5810 : 			MountAllDevices (hwndDlg, !(GetAsyncKeyState (VK_SHIFT) < 0 && !IsPasswordCacheEmpty()));

  02cff	6a 10		 push	 16			; 00000010H
  02d01	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetAsyncKeyState@4
  02d07	66 85 c0	 test	 ax, ax
  02d0a	7d 18		 jge	 SHORT $LN476@MainDialog
  02d0c	e8 00 00 00 00	 call	 _IsPasswordCacheEmpty
  02d11	85 c0		 test	 eax, eax
  02d13	75 0f		 jne	 SHORT $LN476@MainDialog
  02d15	50		 push	 eax
  02d16	53		 push	 ebx
  02d17	e8 00 00 00 00	 call	 ?MountAllDevices@@YAHPAUHWND__@@H@Z ; MountAllDevices
  02d1c	83 c4 08	 add	 esp, 8

; 5811 : 			return 1;

  02d1f	e9 78 d4 ff ff	 jmp	 $LN349@MainDialog
$LN476@MainDialog:

; 5808 : 		{
; 5809 : 			// If Shift key is down and the password cache isn't empty, bypass password prompt
; 5810 : 			MountAllDevices (hwndDlg, !(GetAsyncKeyState (VK_SHIFT) < 0 && !IsPasswordCacheEmpty()));

  02d24	b8 01 00 00 00	 mov	 eax, 1
  02d29	50		 push	 eax
  02d2a	53		 push	 ebx
  02d2b	e8 00 00 00 00	 call	 ?MountAllDevices@@YAHPAUHWND__@@H@Z ; MountAllDevices
  02d30	83 c4 08	 add	 esp, 8

; 5811 : 			return 1;

  02d33	e9 64 d4 ff ff	 jmp	 $LN349@MainDialog
$LN169@MainDialog:

; 5797 : 		{
; 5798 : 			if (DismountAll (hwndDlg, bForceUnmount, TRUE, UNMOUNT_MAX_AUTO_RETRIES, UNMOUNT_AUTO_RETRY_DELAY)
; 5799 : 				&& lw == IDM_UNMOUNTALL)	// If initiated via the systray menu

  02d38	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bForceUnmount@@3HA ; bForceUnmount
  02d3e	6a 32		 push	 50			; 00000032H
  02d40	6a 1e		 push	 30			; 0000001eH
  02d42	6a 01		 push	 1
  02d44	52		 push	 edx
  02d45	8b fb		 mov	 edi, ebx
  02d47	e8 00 00 00 00	 call	 _DismountAll
  02d4c	83 c4 10	 add	 esp, 16			; 00000010H
  02d4f	85 c0		 test	 eax, eax
  02d51	0f 84 45 d4 ff
	ff		 je	 $LN349@MainDialog
  02d57	b8 4d 9c 00 00	 mov	 eax, 40013		; 00009c4dH
  02d5c	66 3b f0	 cmp	 si, ax
  02d5f	0f 85 37 d4 ff
	ff		 jne	 $LN349@MainDialog

; 5800 : 			{
; 5801 : 				InfoBalloon ("SUCCESSFULLY_DISMOUNTED", "MOUNTED_VOLUMES_DISMOUNTED");

  02d65	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@FOMIGOIN@MOUNTED_VOLUMES_DISMOUNTED?$AA@
  02d6a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BNFOBMMN@SUCCESSFULLY_DISMOUNTED?$AA@
  02d6f	e8 00 00 00 00	 call	 _InfoBalloon
  02d74	83 c4 08	 add	 esp, 8

; 5802 : 			}
; 5803 : 
; 5804 : 			return 1;

  02d77	e9 20 d4 ff ff	 jmp	 $LN349@MainDialog
$LN171@MainDialog:

; 5791 : 		{
; 5792 : 			MountSelectedVolume (hwndDlg, lw == IDM_MOUNT_VOLUME_OPTIONS);

  02d7c	33 d2		 xor	 edx, edx
  02d7e	b9 47 9c 00 00	 mov	 ecx, 40007		; 00009c47H
  02d83	66 3b f1	 cmp	 si, cx
  02d86	0f 94 c2	 sete	 dl
  02d89	52		 push	 edx
  02d8a	53		 push	 ebx
  02d8b	e8 00 00 00 00	 call	 _MountSelectedVolume
  02d90	83 c4 08	 add	 esp, 8

; 5793 : 			return 1;

  02d93	e9 04 d4 ff ff	 jmp	 $LN349@MainDialog
$LN180@MainDialog:

; 5764 : 		{
; 5765 : 			DialogBoxW (hInst, MAKEINTRESOURCEW (IDD_ABOUT_DLG), hwndDlg, (DLGPROC) AboutDlgProc);

  02d98	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  02d9d	52		 push	 edx
  02d9e	68 00 00 00 00	 push	 OFFSET _AboutDlgProc@16
  02da3	53		 push	 ebx
  02da4	68 fc 01 00 00	 push	 508			; 000001fcH
  02da9	50		 push	 eax
  02daa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 5766 : 			return 1;

  02db0	e9 e7 d3 ff ff	 jmp	 $LN349@MainDialog
$LN351@MainDialog:

; 5069 : 		
; 5070 : 	case WM_MOUSEWHEEL:
; 5071 : 		return HandleDriveListMouseWheelEvent (uMsg, wParam, lParam, FALSE);

  02db5	6a 00		 push	 0
  02db7	56		 push	 esi
  02db8	68 0a 02 00 00	 push	 522			; 0000020aH
  02dbd	e8 00 00 00 00	 call	 _HandleDriveListMouseWheelEvent
  02dc2	83 c4 0c	 add	 esp, 12			; 0000000cH
  02dc5	e9 d7 d3 ff ff	 jmp	 $LN458@MainDialog
$LN483@MainDialog:

; 4661 : 	DWORD mPos;
; 4662 : 
; 4663 : 	switch (uMsg)

  02dca	8b c8		 mov	 ecx, eax
  02dcc	81 e9 18 02 00
	00		 sub	 ecx, 536		; 00000218H
  02dd2	0f 84 ba 01 00
	00		 je	 $LN341@MainDialog
  02dd8	83 e9 01	 sub	 ecx, 1
  02ddb	0f 85 b3 07 00
	00		 jne	 $LN2@MainDialog

; 5470 : 
; 5471 : 	case WM_DEVICECHANGE:
; 5472 : 		if (!IgnoreWmDeviceChange && wParam != DBT_DEVICEARRIVAL)

  02de1	39 15 00 00 00
	00		 cmp	 DWORD PTR _IgnoreWmDeviceChange, edx
  02de7	0f 85 a6 e3 ff
	ff		 jne	 $LN347@MainDialog
  02ded	81 fe 00 80 00
	00		 cmp	 esi, 32768		; 00008000H
  02df3	0f 84 9a e3 ff
	ff		 je	 $LN347@MainDialog

; 5473 : 		{
; 5474 : 			// Check if any host device has been removed and force dismount of volumes accordingly
; 5475 : 			PDEV_BROADCAST_HDR hdr = (PDEV_BROADCAST_HDR) lParam;
; 5476 : 			int m;
; 5477 : 
; 5478 : 			GetMountList (&LastKnownMountList);

  02df9	68 00 00 00 00	 push	 OFFSET _LastKnownMountList
  02dfe	e8 00 00 00 00	 call	 _GetMountList
  02e03	83 c4 04	 add	 esp, 4

; 5479 : 
; 5480 : 			if (wParam == DBT_DEVICEREMOVECOMPLETE && hdr->dbch_devicetype == DBT_DEVTYP_VOLUME)

  02e06	81 fe 04 80 00
	00		 cmp	 esi, 32772		; 00008004H
  02e0c	0f 85 ca 00 00
	00		 jne	 $LN243@MainDialog
  02e12	83 7f 04 02	 cmp	 DWORD PTR [edi+4], 2
  02e16	0f 85 c0 00 00
	00		 jne	 $LN243@MainDialog

; 5481 : 			{
; 5482 : 				// File-hosted volumes
; 5483 : 				PDEV_BROADCAST_VOLUME vol = (PDEV_BROADCAST_VOLUME) lParam;
; 5484 : 				int i;
; 5485 : 
; 5486 : 				for (i = 0; i < 26; i++)

  02e1c	33 ff		 xor	 edi, edi
  02e1e	89 7d e0	 mov	 DWORD PTR _i$138608[ebp], edi
$LL245@MainDialog:

; 5487 : 				{
; 5488 : 					if ((vol->dbcv_unitmask & (1 << i)) && !(GetLogicalDrives() & (1 << i)))

  02e21	8b cf		 mov	 ecx, edi
  02e23	be 01 00 00 00	 mov	 esi, 1
  02e28	d3 e6		 shl	 esi, cl
  02e2a	8b 4d e4	 mov	 ecx, DWORD PTR _lParam$GSCopy$[ebp]
  02e2d	85 71 0c	 test	 esi, DWORD PTR [ecx+12]
  02e30	0f 84 99 00 00
	00		 je	 $LN244@MainDialog
  02e36	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLogicalDrives@0
  02e3c	85 c6		 test	 eax, esi
  02e3e	0f 85 8b 00 00
	00		 jne	 $LN244@MainDialog

; 5489 : 					{
; 5490 : 						for (m = 0; m < 26; m++)

  02e44	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _m$138604[ebp], 0
  02e4b	be 04 00 00 00	 mov	 esi, OFFSET _LastKnownMountList+4
$LL241@MainDialog:

; 5491 : 						{
; 5492 : 							if (LastKnownMountList.ulMountedDrives & (1 << m))

  02e50	8b 4d e8	 mov	 ecx, DWORD PTR _m$138604[ebp]
  02e53	a1 00 00 00 00	 mov	 eax, DWORD PTR _LastKnownMountList
  02e58	ba 01 00 00 00	 mov	 edx, 1
  02e5d	d3 e2		 shl	 edx, cl
  02e5f	85 d0		 test	 edx, eax
  02e61	74 58		 je	 SHORT $LN240@MainDialog

; 5493 : 							{
; 5494 : 								wchar_t *vol = (wchar_t *) LastKnownMountList.wszVolume[m];
; 5495 : 
; 5496 : 								if (wcsstr (vol, L"\\??\\") == vol)

  02e63	68 00 00 00 00	 push	 OFFSET ??_C@_19JHEHLFPM@?$AA?2?$AA?$DP?$AA?$DP?$AA?2?$AA?$AA@
  02e68	56		 push	 esi
  02e69	8b fe		 mov	 edi, esi
  02e6b	e8 00 00 00 00	 call	 _wcsstr
  02e70	83 c4 08	 add	 esp, 8
  02e73	3b c6		 cmp	 eax, esi
  02e75	75 03		 jne	 SHORT $LN237@MainDialog

; 5497 : 									vol += 4;

  02e77	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
$LN237@MainDialog:

; 5498 : 
; 5499 : 								if (vol[1] == L':' && i == (vol[0] - (vol[0] <= L'Z' ? L'A' : L'a')))

  02e7a	66 83 7f 02 3a	 cmp	 WORD PTR [edi+2], 58	; 0000003aH
  02e7f	75 3a		 jne	 SHORT $LN240@MainDialog
  02e81	0f b7 07	 movzx	 eax, WORD PTR [edi]
  02e84	66 b9 5a 00	 mov	 cx, 90			; 0000005aH
  02e88	66 3b c8	 cmp	 cx, ax
  02e8b	1b d2		 sbb	 edx, edx
  02e8d	83 e2 20	 and	 edx, 32			; 00000020H
  02e90	0f b7 c0	 movzx	 eax, ax
  02e93	83 c2 41	 add	 edx, 65			; 00000041H
  02e96	2b c2		 sub	 eax, edx
  02e98	39 45 e0	 cmp	 DWORD PTR _i$138608[ebp], eax
  02e9b	75 1e		 jne	 SHORT $LN240@MainDialog

; 5500 : 								{
; 5501 : 									UnmountVolume (hwndDlg, m, TRUE);

  02e9d	8b 4d e8	 mov	 ecx, DWORD PTR _m$138604[ebp]
  02ea0	6a 01		 push	 1
  02ea2	51		 push	 ecx
  02ea3	53		 push	 ebx
  02ea4	e8 00 00 00 00	 call	 _UnmountVolume

; 5502 : 									WarningBalloon ("HOST_DEVICE_REMOVAL_DISMOUNT_WARN_TITLE", "HOST_DEVICE_REMOVAL_DISMOUNT_WARN");

  02ea9	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EMODIILJ@HOST_DEVICE_REMOVAL_DISMOUNT_WAR@
  02eae	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KGJJJNAK@HOST_DEVICE_REMOVAL_DISMOUNT_WAR@
  02eb3	e8 00 00 00 00	 call	 _WarningBalloon
  02eb8	83 c4 14	 add	 esp, 20			; 00000014H
$LN240@MainDialog:
  02ebb	ff 45 e8	 inc	 DWORD PTR _m$138604[ebp]
  02ebe	81 c6 08 02 00
	00		 add	 esi, 520		; 00000208H
  02ec4	81 fe d4 34 00
	00		 cmp	 esi, OFFSET _LastKnownMountList+13524
  02eca	7c 84		 jl	 SHORT $LL241@MainDialog

; 5489 : 					{
; 5490 : 						for (m = 0; m < 26; m++)

  02ecc	8b 7d e0	 mov	 edi, DWORD PTR _i$138608[ebp]
$LN244@MainDialog:

; 5481 : 			{
; 5482 : 				// File-hosted volumes
; 5483 : 				PDEV_BROADCAST_VOLUME vol = (PDEV_BROADCAST_VOLUME) lParam;
; 5484 : 				int i;
; 5485 : 
; 5486 : 				for (i = 0; i < 26; i++)

  02ecf	47		 inc	 edi
  02ed0	83 ff 1a	 cmp	 edi, 26			; 0000001aH
  02ed3	89 7d e0	 mov	 DWORD PTR _i$138608[ebp], edi
  02ed6	0f 8c 45 ff ff
	ff		 jl	 $LL245@MainDialog
$LN243@MainDialog:

; 5503 : 								}
; 5504 : 							}
; 5505 : 						}
; 5506 : 					}
; 5507 : 				}
; 5508 : 			}
; 5509 : 
; 5510 : 			// Device-hosted volumes
; 5511 : 			for (m = 0; m < 26; m++)

  02edc	33 ff		 xor	 edi, edi
  02ede	be 04 00 00 00	 mov	 esi, OFFSET _LastKnownMountList+4
$LL235@MainDialog:

; 5512 : 			{
; 5513 : 				if (LastKnownMountList.ulMountedDrives & (1 << m))

  02ee3	a1 00 00 00 00	 mov	 eax, DWORD PTR _LastKnownMountList
  02ee8	ba 01 00 00 00	 mov	 edx, 1
  02eed	8b cf		 mov	 ecx, edi
  02eef	d3 e2		 shl	 edx, cl
  02ef1	85 d0		 test	 edx, eax
  02ef3	0f 84 7c 00 00
	00		 je	 $LN234@MainDialog

; 5514 : 				{
; 5515 : 					wchar_t *vol = (wchar_t *) LastKnownMountList.wszVolume[m];
; 5516 : 					char volp[MAX_PATH];
; 5517 : 
; 5518 : 					if (wcsstr (vol, L"\\??\\") == vol)

  02ef9	68 00 00 00 00	 push	 OFFSET ??_C@_19JHEHLFPM@?$AA?2?$AA?$DP?$AA?$DP?$AA?2?$AA?$AA@
  02efe	56		 push	 esi
  02eff	89 75 dc	 mov	 DWORD PTR _vol$138627[ebp], esi
  02f02	e8 00 00 00 00	 call	 _wcsstr
  02f07	83 c4 08	 add	 esp, 8
  02f0a	3b c6		 cmp	 eax, esi
  02f0c	75 06		 jne	 SHORT $LN231@MainDialog

; 5519 : 						vol += 4;

  02f0e	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  02f11	89 4d dc	 mov	 DWORD PTR _vol$138627[ebp], ecx
$LN231@MainDialog:

; 5520 : 
; 5521 : 					_snprintf (volp, sizeof(volp), "%ls", vol);

  02f14	8b 55 dc	 mov	 edx, DWORD PTR _vol$138627[ebp]
  02f17	52		 push	 edx
  02f18	68 00 00 00 00	 push	 OFFSET ??_C@_03MIIGHJO@?$CFls?$AA@
  02f1d	8d 85 1c 23 00
	00		 lea	 eax, DWORD PTR _volp$138629[ebp]
  02f23	68 04 01 00 00	 push	 260			; 00000104H
  02f28	50		 push	 eax
  02f29	e8 00 00 00 00	 call	 __snprintf

; 5522 : 
; 5523 : 					if (IsVolumeDeviceHosted (volp))

  02f2e	8d 8d 1c 23 00
	00		 lea	 ecx, DWORD PTR _volp$138629[ebp]
  02f34	51		 push	 ecx
  02f35	e8 00 00 00 00	 call	 _IsVolumeDeviceHosted
  02f3a	83 c4 14	 add	 esp, 20			; 00000014H
  02f3d	85 c0		 test	 eax, eax
  02f3f	74 34		 je	 SHORT $LN234@MainDialog

; 5524 : 					{
; 5525 : 						OPEN_TEST_STRUCT ots;
; 5526 : 
; 5527 : 						if (!OpenDevice (volp, &ots, FALSE))

  02f41	6a 00		 push	 0
  02f43	8d 55 00	 lea	 edx, DWORD PTR _ots$138633[ebp]
  02f46	52		 push	 edx
  02f47	8d 85 1c 23 00
	00		 lea	 eax, DWORD PTR _volp$138629[ebp]
  02f4d	50		 push	 eax
  02f4e	e8 00 00 00 00	 call	 _OpenDevice
  02f53	83 c4 0c	 add	 esp, 12			; 0000000cH
  02f56	85 c0		 test	 eax, eax
  02f58	75 1b		 jne	 SHORT $LN234@MainDialog

; 5528 : 						{
; 5529 : 							UnmountVolume (hwndDlg, m, TRUE);

  02f5a	6a 01		 push	 1
  02f5c	57		 push	 edi
  02f5d	53		 push	 ebx
  02f5e	e8 00 00 00 00	 call	 _UnmountVolume

; 5530 : 							WarningBalloon ("HOST_DEVICE_REMOVAL_DISMOUNT_WARN_TITLE", "HOST_DEVICE_REMOVAL_DISMOUNT_WARN");

  02f63	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EMODIILJ@HOST_DEVICE_REMOVAL_DISMOUNT_WAR@
  02f68	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KGJJJNAK@HOST_DEVICE_REMOVAL_DISMOUNT_WAR@
  02f6d	e8 00 00 00 00	 call	 _WarningBalloon
  02f72	83 c4 14	 add	 esp, 20			; 00000014H
$LN234@MainDialog:
  02f75	81 c6 08 02 00
	00		 add	 esi, 520		; 00000208H
  02f7b	47		 inc	 edi
  02f7c	81 fe d4 34 00
	00		 cmp	 esi, OFFSET _LastKnownMountList+13524
  02f82	0f 8c 5b ff ff
	ff		 jl	 $LL235@MainDialog

; 5531 : 						}
; 5532 : 					}
; 5533 : 				}
; 5534 : 			}
; 5535 : 
; 5536 : 			// Favorite volumes
; 5537 : 			UpdateDeviceHostedFavoriteVolumes();

  02f88	e8 00 00 00 00	 call	 ?UpdateDeviceHostedFavoriteVolumes@CipherShed@@YAXXZ ; CipherShed::UpdateDeviceHostedFavoriteVolumes

; 5538 : 
; 5539 : 			return 1;

  02f8d	e9 0a d2 ff ff	 jmp	 $LN349@MainDialog
$LN341@MainDialog:

; 5114 : 
; 5115 : 	case WM_POWERBROADCAST:
; 5116 : 		if (wParam == PBT_APMSUSPEND
; 5117 : 			&& TaskBarIconMutex != NULL && bDismountOnPowerSaving)

  02f92	83 fe 04	 cmp	 esi, 4
  02f95	75 51		 jne	 SHORT $LN340@MainDialog
  02f97	39 15 00 00 00
	00		 cmp	 DWORD PTR _TaskBarIconMutex, edx
  02f9d	74 49		 je	 SHORT $LN340@MainDialog
  02f9f	39 15 00 00 00
	00		 cmp	 DWORD PTR ?bDismountOnPowerSaving@@3HA, edx ; bDismountOnPowerSaving
  02fa5	74 41		 je	 SHORT $LN340@MainDialog

; 5118 : 		{
; 5119 : 			// Auto-dismount when entering power-saving mode
; 5120 : 			DWORD dwResult;
; 5121 : 
; 5122 : 			if (bWipeCacheOnAutoDismount)

  02fa7	39 15 00 00 00
	00		 cmp	 DWORD PTR ?bWipeCacheOnAutoDismount@@3HA, edx ; bWipeCacheOnAutoDismount
  02fad	74 23		 je	 SHORT $LN339@MainDialog

; 5123 : 			{
; 5124 : 				DeviceIoControl (hDriver, TC_IOCTL_WIPE_PASSWORD_CACHE, NULL, 0, NULL, 0, &dwResult, NULL);

  02faf	52		 push	 edx
  02fb0	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _dwResult$138230[ebp]
  02fb6	51		 push	 ecx
  02fb7	52		 push	 edx
  02fb8	52		 push	 edx
  02fb9	52		 push	 edx
  02fba	52		 push	 edx
  02fbb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDriver
  02fc1	68 30 20 22 00	 push	 2236464			; 00222030H
  02fc6	52		 push	 edx
  02fc7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 5125 : 				SecurityToken::CloseAllSessions();

  02fcd	e8 00 00 00 00	 call	 ?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ ; CipherShed::SecurityToken::CloseAllSessions
$LN339@MainDialog:

; 5126 : 			}
; 5127 : 
; 5128 : 			DismountAll (hwndDlg, bForceAutoDismount, TRUE, UNMOUNT_MAX_AUTO_RETRIES, UNMOUNT_AUTO_RETRY_DELAY);

  02fd2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bForceAutoDismount@@3HA ; bForceAutoDismount
  02fd7	6a 32		 push	 50			; 00000032H
  02fd9	6a 1e		 push	 30			; 0000001eH
  02fdb	6a 01		 push	 1
  02fdd	50		 push	 eax
  02fde	8b fb		 mov	 edi, ebx
  02fe0	e8 00 00 00 00	 call	 _DismountAll
  02fe5	83 c4 10	 add	 esp, 16			; 00000010H
$LN340@MainDialog:

; 5129 : 		}
; 5130 : 		return 0;

  02fe8	33 c0		 xor	 eax, eax
  02fea	e9 b2 d1 ff ff	 jmp	 $LN458@MainDialog
$LN9@MainDialog:

; 6526 : 		}
; 6527 : 
; 6528 : 		return 0;
; 6529 : 
; 6530 : 	case WM_DROPFILES:
; 6531 : 		{
; 6532 : 			HDROP hdrop = (HDROP) wParam;
; 6533 : 			DragQueryFile (hdrop, 0, szFileName, sizeof szFileName);

  02fef	68 05 01 00 00	 push	 261			; 00000105H
  02ff4	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  02ff9	52		 push	 edx
  02ffa	56		 push	 esi
  02ffb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragQueryFileA@16

; 6534 : 			DragFinish (hdrop);

  03001	56		 push	 esi
  03002	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragFinish@4

; 6535 : 
; 6536 : 			AddComboItem (GetDlgItem (hwndDlg, IDC_VOLUME), szFileName, bHistory);

  03008	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHistory
  0300e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  03014	51		 push	 ecx
  03015	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  0301a	68 0a 04 00 00	 push	 1034			; 0000040aH
  0301f	53		 push	 ebx
  03020	ff d6		 call	 esi
  03022	50		 push	 eax
  03023	e8 00 00 00 00	 call	 _AddComboItem

; 6537 : 			EnableDisableButtons (hwndDlg);

  03028	53		 push	 ebx
  03029	e8 00 00 00 00	 call	 _EnableDisableButtons
  0302e	83 c4 10	 add	 esp, 16			; 00000010H

; 6538 : 			SetFocus (GetDlgItem (hwndDlg, IDC_DRIVELIST));

  03031	68 ef 03 00 00	 push	 1007			; 000003efH
  03036	53		 push	 ebx
  03037	ff d6		 call	 esi
  03039	50		 push	 eax
  0303a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 6539 : 		}
; 6540 : 		return 1;

  03040	e9 57 d1 ff ff	 jmp	 $LN349@MainDialog
$LN482@MainDialog:

; 4661 : 	DWORD mPos;
; 4662 : 
; 4663 : 	switch (uMsg)

  03045	3d 66 80 00 00	 cmp	 eax, 32870		; 00008066H
  0304a	0f 87 31 05 00
	00		 ja	 $LN484@MainDialog
  03050	74 55		 je	 SHORT $LN285@MainDialog
  03052	8b c8		 mov	 ecx, eax
  03054	81 e9 12 03 00
	00		 sub	 ecx, 786		; 00000312H
  0305a	74 3c		 je	 SHORT $LN455@MainDialog
  0305c	81 e9 f2 7c 00
	00		 sub	 ecx, 31986		; 00007cf2H
  03062	74 1d		 je	 SHORT $LN251@MainDialog
  03064	83 e9 61	 sub	 ecx, 97			; 00000061H
  03067	0f 85 27 05 00
	00		 jne	 $LN2@MainDialog

; 5461 : 
; 5462 : 	case TC_APPMSG_SYSENC_CONFIG_UPDATE:
; 5463 : 		LoadSysEncSettings (hwndDlg);

  0306d	53		 push	 ebx
  0306e	e8 00 00 00 00	 call	 _LoadSysEncSettings

; 5464 : 
; 5465 : 		// The wizard added CipherShed.exe to the system startup sequence or performed other operations that 
; 5466 : 		// require us to update our cached settings.
; 5467 : 		LoadSettings (hwndDlg);

  03073	53		 push	 ebx
  03074	e8 00 00 00 00	 call	 _LoadSettings
  03079	83 c4 08	 add	 esp, 8

; 5468 : 
; 5469 : 		return 1;

  0307c	e9 1b d1 ff ff	 jmp	 $LN349@MainDialog
$LN251@MainDialog:

; 5455 : 
; 5456 : 	case TC_APPMSG_CLOSE_BKG_TASK:
; 5457 : 		if (TaskBarIconMutex != NULL)

  03081	39 15 00 00 00
	00		 cmp	 DWORD PTR _TaskBarIconMutex, edx
  03087	0f 84 0f d1 ff
	ff		 je	 $LN349@MainDialog

; 5458 : 			TaskBarIconRemove (hwndDlg);

  0308d	53		 push	 ebx
  0308e	e8 00 00 00 00	 call	 _TaskBarIconRemove

; 5459 : 
; 5460 : 		return 1;

  03093	e9 01 d1 ff ff	 jmp	 $LN1033@MainDialog
$LN455@MainDialog:

; 4664 : 	{
; 4665 : 	case WM_HOTKEY:
; 4666 : 
; 4667 : 		HandleHotKey (hwndDlg, wParam);

  03098	8b 45 e0	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  0309b	8b de		 mov	 ebx, esi
  0309d	e8 00 00 00 00	 call	 _HandleHotKey

; 4668 : 		return 1;

  030a2	e9 f5 d0 ff ff	 jmp	 $LN349@MainDialog
$LN285@MainDialog:

; 5324 : 
; 5325 : 	case TC_APPMSG_TASKBAR_ICON:
; 5326 : 		{
; 5327 : 			switch (lParam)

  030a7	8b c7		 mov	 eax, edi
  030a9	2d 01 02 00 00	 sub	 eax, 513		; 00000201H
  030ae	0f 84 a7 04 00
	00		 je	 $LN282@MainDialog
  030b4	83 e8 04	 sub	 eax, 4

; 5451 : 			}
; 5452 : 		}
; 5453 : 
; 5454 : 		return 0;

  030b7	0f 85 d6 e0 ff
	ff		 jne	 $LN347@MainDialog
  030bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  030c3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _MainWindowHidden, 0
  030ca	8b d8		 mov	 ebx, eax
  030cc	74 30		 je	 SHORT $LN280@MainDialog

; 5335 : 
; 5336 : 			case WM_RBUTTONUP:
; 5337 : 				{
; 5338 : 					POINT pos;
; 5339 : 					HMENU popup = CreatePopupMenu ();
; 5340 : 					int sel, i, n;
; 5341 : 					
; 5342 : 					if (MainWindowHidden)
; 5343 : 					{
; 5344 : 						AppendMenuW (popup, MF_STRING, IDM_SHOW_HIDE, GetString ("SHOW_TC"));

  030ce	68 00 00 00 00	 push	 OFFSET ??_C@_07GBCCMBJB@SHOW_TC?$AA@
$LN1045@MainDialog:
  030d3	e8 00 00 00 00	 call	 _GetString
  030d8	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__AppendMenuW@16
  030de	83 c4 04	 add	 esp, 4
  030e1	50		 push	 eax
  030e2	68 28 a1 07 00	 push	 500008			; 0007a128H
  030e7	6a 00		 push	 0
  030e9	53		 push	 ebx
  030ea	ff d6		 call	 esi

; 5345 : 						AppendMenu (popup, MF_SEPARATOR, 0, NULL);

  030ec	6a 00		 push	 0
  030ee	6a 00		 push	 0
  030f0	68 00 08 00 00	 push	 2048			; 00000800H
  030f5	53		 push	 ebx
  030f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16

; 5346 : 					}
; 5347 : 					else if (bEnableBkgTask

  030fc	eb 49		 jmp	 SHORT $LN278@MainDialog
$LN280@MainDialog:

; 5348 : 						&& (!(LastKnownMountList.ulMountedDrives == 0
; 5349 : 						&& (bCloseBkgTaskWhenNoVolumes || IsNonInstallMode ()) 
; 5350 : 						&& !SysEncDeviceActive (TRUE)
; 5351 : 						&& GetDriverRefCount () < 2)))

  030fe	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bEnableBkgTask, 0
  03105	74 3a		 je	 SHORT $LN1007@MainDialog
  03107	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _LastKnownMountList, 0
  0310e	75 2a		 jne	 SHORT $LN277@MainDialog
  03110	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bCloseBkgTaskWhenNoVolumes, 0
  03117	75 09		 jne	 SHORT $LN276@MainDialog
  03119	e8 00 00 00 00	 call	 _IsNonInstallMode
  0311e	85 c0		 test	 eax, eax
  03120	74 18		 je	 SHORT $LN277@MainDialog
$LN276@MainDialog:
  03122	6a 01		 push	 1
  03124	e8 00 00 00 00	 call	 ?SysEncDeviceActive@@YAHH@Z ; SysEncDeviceActive
  03129	83 c4 04	 add	 esp, 4
  0312c	85 c0		 test	 eax, eax
  0312e	75 0a		 jne	 SHORT $LN277@MainDialog
  03130	e8 00 00 00 00	 call	 _GetDriverRefCount
  03135	83 f8 02	 cmp	 eax, 2
  03138	7c 07		 jl	 SHORT $LN1007@MainDialog
$LN277@MainDialog:

; 5352 : 					{
; 5353 : 						AppendMenuW (popup, MF_STRING, IDM_SHOW_HIDE, GetString ("HIDE_TC"));

  0313a	68 00 00 00 00	 push	 OFFSET ??_C@_07JGGDNDHJ@HIDE_TC?$AA@

; 5354 : 						AppendMenu (popup, MF_SEPARATOR, 0, NULL);

  0313f	eb 92		 jmp	 SHORT $LN1045@MainDialog
$LN1007@MainDialog:

; 5346 : 					}
; 5347 : 					else if (bEnableBkgTask

  03141	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__AppendMenuW@16
$LN278@MainDialog:

; 5355 : 					}
; 5356 : 					AppendMenuW (popup, MF_STRING, IDM_MOUNTALL, GetString ("IDC_MOUNTALL"));

  03147	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KOOLLHHJ@IDC_MOUNTALL?$AA@
  0314c	e8 00 00 00 00	 call	 _GetString
  03151	83 c4 04	 add	 esp, 4
  03154	50		 push	 eax
  03155	68 4c 9c 00 00	 push	 40012			; 00009c4cH
  0315a	6a 00		 push	 0
  0315c	53		 push	 ebx
  0315d	ff d6		 call	 esi

; 5357 : 					AppendMenuW (popup, MF_STRING, IDM_MOUNT_FAVORITE_VOLUMES, GetString ("IDM_MOUNT_FAVORITE_VOLUMES"));

  0315f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@KPKLMBF@IDM_MOUNT_FAVORITE_VOLUMES?$AA@
  03164	e8 00 00 00 00	 call	 _GetString
  03169	83 c4 04	 add	 esp, 4
  0316c	50		 push	 eax
  0316d	68 59 9c 00 00	 push	 40025			; 00009c59H
  03172	6a 00		 push	 0
  03174	53		 push	 ebx
  03175	ff d6		 call	 esi

; 5358 : 					AppendMenuW (popup, MF_STRING, IDM_UNMOUNTALL, GetString ("IDC_UNMOUNTALL"));

  03177	68 00 00 00 00	 push	 OFFSET ??_C@_0P@FLCKCNGO@IDC_UNMOUNTALL?$AA@
  0317c	e8 00 00 00 00	 call	 _GetString
  03181	83 c4 04	 add	 esp, 4
  03184	50		 push	 eax
  03185	68 4d 9c 00 00	 push	 40013			; 00009c4dH
  0318a	6a 00		 push	 0
  0318c	53		 push	 ebx
  0318d	ff d6		 call	 esi

; 5359 : 					AppendMenu (popup, MF_SEPARATOR, 0, NULL);

  0318f	6a 00		 push	 0
  03191	6a 00		 push	 0
  03193	68 00 08 00 00	 push	 2048			; 00000800H
  03198	53		 push	 ebx
  03199	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16

; 5360 : 
; 5361 : 					for (n = 0; n < 2; n++)

  0319f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _n$138542[ebp], 0
  031a6	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL275@MainDialog:

; 5362 : 					{
; 5363 : 						for (i = 0; i < 26; i++)

  031b0	33 f6		 xor	 esi, esi
  031b2	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR tv5474[ebp], OFFSET _LastKnownMountList+4
  031b9	8d a4 24 00 00
	00 00		 npad	 7
$LL272@MainDialog:

; 5364 : 						{
; 5365 : 							if (LastKnownMountList.ulMountedDrives & (1 << i))

  031c0	a1 00 00 00 00	 mov	 eax, DWORD PTR _LastKnownMountList
  031c5	ba 01 00 00 00	 mov	 edx, 1
  031ca	8b ce		 mov	 ecx, esi
  031cc	d3 e2		 shl	 edx, cl
  031ce	85 d0		 test	 edx, eax
  031d0	0f 84 4b 01 00
	00		 je	 $LN271@MainDialog

; 5366 : 							{
; 5367 : 								wchar_t s[1024];
; 5368 : 								wchar_t *vol = (wchar_t *) LastKnownMountList.wszVolume[i];

  031d6	8b 7d e8	 mov	 edi, DWORD PTR tv5474[ebp]

; 5369 : 
; 5370 : 								if (wcsstr (vol, L"\\??\\")) vol += 4;

  031d9	68 00 00 00 00	 push	 OFFSET ??_C@_19JHEHLFPM@?$AA?2?$AA?$DP?$AA?$DP?$AA?2?$AA?$AA@
  031de	57		 push	 edi
  031df	e8 00 00 00 00	 call	 _wcsstr
  031e4	83 c4 08	 add	 esp, 8
  031e7	85 c0		 test	 eax, eax
  031e9	74 03		 je	 SHORT $LN268@MainDialog
  031eb	83 c7 08	 add	 edi, 8
$LN268@MainDialog:

; 5371 : 
; 5372 : 								wstring label = GetFavoriteVolumeLabel (WideToSingleString (vol));

  031ee	57		 push	 edi
  031ef	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T207850[ebp]
  031f5	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  031fa	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T207850[ebp]
  03200	51		 push	 ecx
  03201	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR $T207851[ebp]
  03207	52		 push	 edx
  03208	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 11 ; 0000000bH
  0320f	e8 00 00 00 00	 call	 ?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; WideToSingleString
  03214	50		 push	 eax
  03215	8d 85 b8 06 00
	00		 lea	 eax, DWORD PTR _label$138565[ebp]
  0321b	50		 push	 eax
  0321c	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+12], 12 ; 0000000cH
  03220	e8 00 00 00 00	 call	 ?GetFavoriteVolumeLabel@CipherShed@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ; CipherShed::GetFavoriteVolumeLabel
  03225	83 c4 10	 add	 esp, 16			; 00000010H
  03228	83 bd e0 fe ff
	ff 10		 cmp	 DWORD PTR $T207851[ebp+24], 16 ; 00000010H
  0322f	72 0f		 jb	 SHORT $LN705@MainDialog
  03231	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR $T207851[ebp+4]
  03237	51		 push	 ecx
  03238	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0323d	83 c4 04	 add	 esp, 4
$LN705@MainDialog:
  03240	83 bd 08 ff ff
	ff 08		 cmp	 DWORD PTR $T207850[ebp+24], 8
  03247	c7 85 e0 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T207851[ebp+24], 15 ; 0000000fH
  03251	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T207851[ebp+20], 0
  0325b	c6 85 cc fe ff
	ff 00		 mov	 BYTE PTR $T207851[ebp+4], 0
  03262	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  03269	72 0f		 jb	 SHORT $LN733@MainDialog
  0326b	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR $T207850[ebp+4]
  03271	52		 push	 edx
  03272	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  03277	83 c4 04	 add	 esp, 4
$LN733@MainDialog:
  0327a	33 c0		 xor	 eax, eax
  0327c	c7 85 08 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T207850[ebp+24], 7
  03286	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T207850[ebp+20], 0
  03290	66 89 85 f4 fe
	ff ff		 mov	 WORD PTR $T207850[ebp+4], ax

; 5373 : 
; 5374 : 								wsprintfW (s, L"%s %c: (%s)",
; 5375 : 									GetString (n==0 ? "OPEN" : "DISMOUNT"),
; 5376 : 									i + L'A', 
; 5377 : 									label.empty() ? vol : label.c_str());

  03297	39 85 cc 06 00
	00		 cmp	 DWORD PTR _label$138565[ebp+20], eax
  0329d	75 04		 jne	 SHORT $LN471@MainDialog
  0329f	8b cf		 mov	 ecx, edi
  032a1	eb 15		 jmp	 SHORT $LN750@MainDialog
$LN471@MainDialog:
  032a3	83 bd d0 06 00
	00 08		 cmp	 DWORD PTR _label$138565[ebp+24], 8
  032aa	8b 8d bc 06 00
	00		 mov	 ecx, DWORD PTR _label$138565[ebp+4]
  032b0	73 06		 jae	 SHORT $LN750@MainDialog
  032b2	8d 8d bc 06 00
	00		 lea	 ecx, DWORD PTR _label$138565[ebp+4]
$LN750@MainDialog:
  032b8	39 45 e4	 cmp	 DWORD PTR _n$138542[ebp], eax
  032bb	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04DANIOFHI@OPEN?$AA@
  032c0	74 05		 je	 SHORT $LN474@MainDialog
  032c2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08IPACICJG@DISMOUNT?$AA@
$LN474@MainDialog:
  032c7	51		 push	 ecx
  032c8	8d 4e 41	 lea	 ecx, DWORD PTR [esi+65]
  032cb	51		 push	 ecx
  032cc	50		 push	 eax
  032cd	e8 00 00 00 00	 call	 _GetString
  032d2	83 c4 04	 add	 esp, 4
  032d5	50		 push	 eax
  032d6	8d 95 0c 07 00
	00		 lea	 edx, DWORD PTR _s$138560[ebp]
  032dc	68 00 00 00 00	 push	 OFFSET ??_C@_1BI@PHBMCDGL@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAc?$AA?3?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@
  032e1	52		 push	 edx
  032e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW

; 5378 : 								AppendMenuW (popup, MF_STRING, n*26 + TRAYICON_MENU_DRIVE_OFFSET + i, s);

  032e8	8b 4d e4	 mov	 ecx, DWORD PTR _n$138542[ebp]
  032eb	6b c9 1a	 imul	 ecx, 26			; 0000001aH
  032ee	83 c4 14	 add	 esp, 20			; 00000014H
  032f1	8d 85 0c 07 00
	00		 lea	 eax, DWORD PTR _s$138560[ebp]
  032f7	50		 push	 eax
  032f8	8d 94 31 28 23
	00 00		 lea	 edx, DWORD PTR [ecx+esi+9000]
  032ff	52		 push	 edx
  03300	6a 00		 push	 0
  03302	53		 push	 ebx
  03303	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuW@16

; 5379 : 							}

  03309	83 bd d0 06 00
	00 08		 cmp	 DWORD PTR _label$138565[ebp+24], 8
  03310	72 0f		 jb	 SHORT $LN271@MainDialog
  03312	8b 85 bc 06 00
	00		 mov	 eax, DWORD PTR _label$138565[ebp+4]
  03318	50		 push	 eax
  03319	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0331e	83 c4 04	 add	 esp, 4
$LN271@MainDialog:
  03321	8b 45 e8	 mov	 eax, DWORD PTR tv5474[ebp]
  03324	05 08 02 00 00	 add	 eax, 520		; 00000208H
  03329	46		 inc	 esi
  0332a	3d d4 34 00 00	 cmp	 eax, OFFSET _LastKnownMountList+13524
  0332f	89 45 e8	 mov	 DWORD PTR tv5474[ebp], eax
  03332	0f 8c 88 fe ff
	ff		 jl	 $LL272@MainDialog

; 5380 : 						}
; 5381 : 						if (LastKnownMountList.ulMountedDrives != 0)

  03338	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _LastKnownMountList, 0
  0333f	74 10		 je	 SHORT $LN274@MainDialog

; 5382 : 							AppendMenu (popup, MF_SEPARATOR, 0, NULL);

  03341	6a 00		 push	 0
  03343	6a 00		 push	 0
  03345	68 00 08 00 00	 push	 2048			; 00000800H
  0334a	53		 push	 ebx
  0334b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
$LN274@MainDialog:
  03351	8b 45 e4	 mov	 eax, DWORD PTR _n$138542[ebp]
  03354	40		 inc	 eax
  03355	83 f8 02	 cmp	 eax, 2
  03358	89 45 e4	 mov	 DWORD PTR _n$138542[ebp], eax
  0335b	0f 8c 4f fe ff
	ff		 jl	 $LL275@MainDialog

; 5383 : 					}
; 5384 : 
; 5385 : 					AppendMenuW (popup, MF_STRING, IDM_HELP, GetString ("MENU_HELP"));

  03361	68 00 00 00 00	 push	 OFFSET ??_C@_09FEGEGDEL@MENU_HELP?$AA@
  03366	e8 00 00 00 00	 call	 _GetString
  0336b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__AppendMenuW@16
  03371	83 c4 04	 add	 esp, 4
  03374	50		 push	 eax
  03375	68 41 9c 00 00	 push	 40001			; 00009c41H
  0337a	6a 00		 push	 0
  0337c	53		 push	 ebx
  0337d	ff d6		 call	 esi

; 5386 : 					AppendMenuW (popup, MF_STRING, IDM_HOMEPAGE_SYSTRAY, GetString ("HOMEPAGE"));

  0337f	68 00 00 00 00	 push	 OFFSET ??_C@_08BFCIMFPP@HOMEPAGE?$AA@
  03384	e8 00 00 00 00	 call	 _GetString
  03389	83 c4 04	 add	 esp, 4
  0338c	50		 push	 eax
  0338d	68 29 a1 07 00	 push	 500009			; 0007a129H
  03392	6a 00		 push	 0
  03394	53		 push	 ebx
  03395	ff d6		 call	 esi

; 5387 : 					AppendMenuW (popup, MF_STRING, IDM_PREFERENCES, GetString ("IDM_PREFERENCES"));

  03397	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LCMKEAHB@IDM_PREFERENCES?$AA@
  0339c	e8 00 00 00 00	 call	 _GetString
  033a1	83 c4 04	 add	 esp, 4
  033a4	50		 push	 eax
  033a5	68 53 9c 00 00	 push	 40019			; 00009c53H
  033aa	6a 00		 push	 0
  033ac	53		 push	 ebx
  033ad	ff d6		 call	 esi

; 5388 : 					AppendMenuW (popup, MF_STRING, IDM_ABOUT, GetString ("IDM_ABOUT"));

  033af	68 00 00 00 00	 push	 OFFSET ??_C@_09LEBEJAK@IDM_ABOUT?$AA@
  033b4	e8 00 00 00 00	 call	 _GetString
  033b9	83 c4 04	 add	 esp, 4
  033bc	50		 push	 eax
  033bd	68 42 9c 00 00	 push	 40002			; 00009c42H
  033c2	6a 00		 push	 0
  033c4	53		 push	 ebx
  033c5	ff d6		 call	 esi

; 5389 : 					AppendMenu (popup, MF_SEPARATOR, 0, NULL);

  033c7	6a 00		 push	 0
  033c9	6a 00		 push	 0
  033cb	68 00 08 00 00	 push	 2048			; 00000800H
  033d0	53		 push	 ebx
  033d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16

; 5390 : 					AppendMenuW (popup, MF_STRING, IDCANCEL, GetString ("EXIT"));

  033d7	68 00 00 00 00	 push	 OFFSET ??_C@_04GOLNGIJ@EXIT?$AA@
  033dc	e8 00 00 00 00	 call	 _GetString
  033e1	83 c4 04	 add	 esp, 4
  033e4	50		 push	 eax
  033e5	6a 02		 push	 2
  033e7	6a 00		 push	 0
  033e9	53		 push	 ebx
  033ea	ff d6		 call	 esi

; 5391 : 
; 5392 : 					GetCursorPos (&pos);

  033ec	8d 4d 9c	 lea	 ecx, DWORD PTR _pos$138538[ebp]
  033ef	51		 push	 ecx
  033f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCursorPos@4

; 5393 : 
; 5394 : 					SetForegroundWindow(hwndDlg);

  033f6	8b 7d e0	 mov	 edi, DWORD PTR _hwndDlg$GSCopy$[ebp]
  033f9	57		 push	 edi
  033fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetForegroundWindow@4

; 5395 : 
; 5396 : 					sel = TrackPopupMenu (popup,
; 5397 : 						TPM_RETURNCMD | TPM_LEFTALIGN | TPM_BOTTOMALIGN | TPM_RIGHTBUTTON,
; 5398 : 						pos.x,
; 5399 : 						pos.y,
; 5400 : 						0,
; 5401 : 						hwndDlg,
; 5402 : 						NULL);

  03400	8b 55 a0	 mov	 edx, DWORD PTR _pos$138538[ebp+4]
  03403	8b 45 9c	 mov	 eax, DWORD PTR _pos$138538[ebp]
  03406	6a 00		 push	 0
  03408	57		 push	 edi
  03409	6a 00		 push	 0
  0340b	52		 push	 edx
  0340c	50		 push	 eax
  0340d	68 22 01 00 00	 push	 290			; 00000122H
  03412	53		 push	 ebx
  03413	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TrackPopupMenu@28
  03419	8b f0		 mov	 esi, eax

; 5403 : 
; 5404 : 					if (sel >= TRAYICON_MENU_DRIVE_OFFSET && sel < TRAYICON_MENU_DRIVE_OFFSET + 26)

  0341b	81 fe 28 23 00
	00		 cmp	 esi, 9000		; 00002328H
  03421	7c 1c		 jl	 SHORT $LN266@MainDialog
  03423	81 fe 42 23 00
	00		 cmp	 esi, 9026		; 00002342H
  03429	7d 1c		 jge	 SHORT $LN874@MainDialog

; 5405 : 					{
; 5406 : 						OpenVolumeExplorerWindow (sel - TRAYICON_MENU_DRIVE_OFFSET);

  0342b	81 c6 d8 dc ff
	ff		 add	 esi, -9000		; ffffdcd8H
  03431	56		 push	 esi
  03432	e8 00 00 00 00	 call	 _OpenVolumeExplorerWindow
  03437	83 c4 04	 add	 esp, 4
  0343a	e9 00 01 00 00	 jmp	 $LN252@MainDialog
$LN266@MainDialog:

; 5407 : 					}
; 5408 : 					else if (sel >= TRAYICON_MENU_DRIVE_OFFSET + 26 && sel < TRAYICON_MENU_DRIVE_OFFSET + 26*2)

  0343f	81 fe 42 23 00
	00		 cmp	 esi, 9026		; 00002342H
  03445	7c 6f		 jl	 SHORT $LN264@MainDialog
$LN874@MainDialog:
  03447	81 fe 5c 23 00
	00		 cmp	 esi, 9052		; 0000235cH
  0344d	7d 67		 jge	 SHORT $LN264@MainDialog

; 5409 : 					{
; 5410 : 						if (CheckMountList ())

  0344f	e8 00 00 00 00	 call	 _CheckMountList
  03454	85 c0		 test	 eax, eax
  03456	0f 84 e3 00 00
	00		 je	 $LN252@MainDialog

; 5411 : 						{
; 5412 : 							if (Dismount (hwndDlg, sel - TRAYICON_MENU_DRIVE_OFFSET - 26))

  0345c	8d 86 be dc ff
	ff		 lea	 eax, DWORD PTR [esi-9026]
  03462	e8 00 00 00 00	 call	 _Dismount
  03467	85 c0		 test	 eax, eax
  03469	0f 84 d0 00 00
	00		 je	 $LN252@MainDialog

; 5413 : 							{
; 5414 : 								wchar_t txt [2048];
; 5415 : 								wsprintfW (txt, GetString ("VOLUME_MOUNTED_AS_DRIVE_LETTER_X_DISMOUNTED"), sel - TRAYICON_MENU_DRIVE_OFFSET - 26 + L'A'); 

  0346f	81 c6 ff dc ff
	ff		 add	 esi, -8961		; ffffdcffH
  03475	56		 push	 esi
  03476	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BLAGDCIG@VOLUME_MOUNTED_AS_DRIVE_LETTER_X@
  0347b	e8 00 00 00 00	 call	 _GetString
  03480	83 c4 04	 add	 esp, 4
  03483	50		 push	 eax
  03484	8d 8d 0c 0f 00
	00		 lea	 ecx, DWORD PTR _txt$138582[ebp]
  0348a	51		 push	 ecx
  0348b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  03491	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5416 : 
; 5417 : 								InfoBalloonDirect (GetString ("SUCCESSFULLY_DISMOUNTED"), txt);

  03494	8d 95 0c 0f 00
	00		 lea	 edx, DWORD PTR _txt$138582[ebp]
  0349a	52		 push	 edx
  0349b	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BNFOBMMN@SUCCESSFULLY_DISMOUNTED?$AA@
  034a0	e8 00 00 00 00	 call	 _GetString
  034a5	83 c4 04	 add	 esp, 4
  034a8	50		 push	 eax
  034a9	e8 00 00 00 00	 call	 _InfoBalloonDirect
  034ae	83 c4 08	 add	 esp, 8

; 5418 : 							}
; 5419 : 						}
; 5420 : 					}

  034b1	e9 89 00 00 00	 jmp	 $LN252@MainDialog
$LN264@MainDialog:

; 5421 : 					else if (sel == IDM_SHOW_HIDE)

  034b6	81 fe 28 a1 07
	00		 cmp	 esi, 500008		; 0007a128H
  034bc	75 0a		 jne	 SHORT $LN260@MainDialog

; 5422 : 					{
; 5423 : 						ChangeMainWindowVisibility ();

  034be	e8 00 00 00 00	 call	 _ChangeMainWindowVisibility
  034c3	e9 77 00 00 00	 jmp	 $LN252@MainDialog
$LN260@MainDialog:

; 5424 : 					}
; 5425 : 					else if (sel == IDM_HOMEPAGE_SYSTRAY)

  034c8	81 fe 29 a1 07
	00		 cmp	 esi, 500009		; 0007a129H
  034ce	75 16		 jne	 SHORT $LN258@MainDialog

; 5426 : 					{
; 5427 : 						Applink ("home", TRUE, "");

  034d0	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  034d5	6a 01		 push	 1
  034d7	68 00 00 00 00	 push	 OFFSET ??_C@_04KLFPBEKK@home?$AA@
  034dc	e8 00 00 00 00	 call	 _Applink
  034e1	83 c4 0c	 add	 esp, 12			; 0000000cH
  034e4	eb 59		 jmp	 SHORT $LN252@MainDialog
$LN258@MainDialog:

; 5428 : 					}
; 5429 : 					else if (sel == IDCANCEL)

  034e6	83 fe 02	 cmp	 esi, 2
  034e9	75 45		 jne	 SHORT $LN256@MainDialog

; 5430 : 					{
; 5431 : 						if ((LastKnownMountList.ulMountedDrives == 0
; 5432 : 							&& !SysEncDeviceActive (TRUE))
; 5433 : 							|| AskWarnNoYes ("CONFIRM_EXIT") == IDYES)

  034eb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _LastKnownMountList, 0
  034f2	75 0e		 jne	 SHORT $LN253@MainDialog
  034f4	6a 01		 push	 1
  034f6	e8 00 00 00 00	 call	 ?SysEncDeviceActive@@YAHH@Z ; SysEncDeviceActive
  034fb	83 c4 04	 add	 esp, 4
  034fe	85 c0		 test	 eax, eax
  03500	74 12		 je	 SHORT $LN254@MainDialog
$LN253@MainDialog:
  03502	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CHKBBIIA@CONFIRM_EXIT?$AA@
  03507	e8 00 00 00 00	 call	 _AskWarnNoYes
  0350c	83 c4 04	 add	 esp, 4
  0350f	83 f8 06	 cmp	 eax, 6
  03512	75 2b		 jne	 SHORT $LN252@MainDialog
$LN254@MainDialog:

; 5434 : 						{
; 5435 : 							// Close all other TC windows
; 5436 : 							EnumWindows (CloseTCWindowsEnum, 0);

  03514	6a 00		 push	 0
  03516	68 00 00 00 00	 push	 OFFSET _CloseTCWindowsEnum@8
  0351b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumWindows@8

; 5437 : 
; 5438 : 							TaskBarIconRemove (hwndDlg);

  03521	57		 push	 edi
  03522	e8 00 00 00 00	 call	 _TaskBarIconRemove
  03527	83 c4 04	 add	 esp, 4

; 5439 : 							SendMessage (hwndDlg, WM_COMMAND, sel, 0);

  0352a	6a 00		 push	 0
  0352c	6a 02		 push	 2

; 5440 : 						}
; 5441 : 					}
; 5442 : 					else

  0352e	eb 03		 jmp	 SHORT $LN1046@MainDialog
$LN256@MainDialog:

; 5443 : 					{
; 5444 : 						SendMessage (hwndDlg, WM_COMMAND, sel, 0);

  03530	6a 00		 push	 0
  03532	56		 push	 esi
$LN1046@MainDialog:
  03533	68 11 01 00 00	 push	 273			; 00000111H
  03538	57		 push	 edi
  03539	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN252@MainDialog:

; 5445 : 					}
; 5446 : 
; 5447 : 					PostMessage(hwndDlg, WM_NULL, 0, 0);

  0353f	8b 45 e0	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  03542	6a 00		 push	 0
  03544	6a 00		 push	 0
  03546	6a 00		 push	 0
  03548	50		 push	 eax
  03549	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 5448 : 					DestroyMenu (popup);

  0354f	53		 push	 ebx
  03550	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyMenu@4

; 5449 : 				}
; 5450 : 				return 1;

  03556	e9 41 cc ff ff	 jmp	 $LN349@MainDialog
$LN282@MainDialog:

; 5328 : 			{
; 5329 : 			case WM_LBUTTONDOWN:
; 5330 : 				SetForegroundWindow (hwndDlg);

  0355b	53		 push	 ebx
  0355c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetForegroundWindow@4

; 5331 : 				MainWindowHidden = FALSE;

  03562	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _MainWindowHidden, 0
$LN1050@MainDialog:

; 5332 : 				ShowWindow (hwndDlg, SW_SHOW);

  0356c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__ShowWindow@8
  03572	6a 05		 push	 5
  03574	53		 push	 ebx
  03575	ff d6		 call	 esi

; 5333 : 				ShowWindow (hwndDlg, SW_RESTORE);

  03577	6a 09		 push	 9
  03579	53		 push	 ebx
  0357a	ff d6		 call	 esi

; 5334 : 				return 1;

  0357c	e9 1b cc ff ff	 jmp	 $LN349@MainDialog
$LN484@MainDialog:

; 4661 : 	DWORD mPos;
; 4662 : 
; 4663 : 	switch (uMsg)

  03581	8b c8		 mov	 ecx, eax
  03583	81 e9 c9 80 00
	00		 sub	 ecx, 32969		; 000080c9H
  03589	0f 84 04 cc ff
	ff		 je	 $LN8@MainDialog
  0358f	83 e9 01	 sub	 ecx, 1
  03592	74 36		 je	 SHORT $LN7@MainDialog
$LN2@MainDialog:

; 6568 : 
; 6569 : 	case WM_CLOSE:
; 6570 : 		EndMainDlg (hwndDlg);
; 6571 : 		return 1;
; 6572 : 
; 6573 : 	default:
; 6574 : 		// Recreate tray icon if Explorer restarted
; 6575 : 		if (taskBarCreatedMsg != 0 && uMsg == taskBarCreatedMsg && TaskBarIconMutex != NULL)

  03594	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?taskBarCreatedMsg@?1??MainDialogProc@@9@16@4IA
  0359a	3b ca		 cmp	 ecx, edx
  0359c	0f 84 f1 db ff
	ff		 je	 $LN347@MainDialog
  035a2	3b c1		 cmp	 eax, ecx
  035a4	0f 85 e9 db ff
	ff		 jne	 $LN347@MainDialog
  035aa	39 15 00 00 00
	00		 cmp	 DWORD PTR _TaskBarIconMutex, edx
  035b0	0f 84 dd db ff
	ff		 je	 $LN347@MainDialog

; 6576 : 		{
; 6577 : 			TaskBarIconRemove (hwndDlg);

  035b6	53		 push	 ebx
  035b7	e8 00 00 00 00	 call	 _TaskBarIconRemove

; 6578 : 			TaskBarIconAdd (hwndDlg);

  035bc	53		 push	 ebx
  035bd	e8 00 00 00 00	 call	 _TaskBarIconAdd
  035c2	83 c4 08	 add	 esp, 8

; 6579 : 			return 1;

  035c5	e9 d2 cb ff ff	 jmp	 $LN349@MainDialog
$LN7@MainDialog:

; 6545 : 
; 6546 : 	case TC_APPMSG_MOUNT_SHOW_WINDOW:
; 6547 : 		MainWindowHidden = FALSE;

  035ca	89 15 00 00 00
	00		 mov	 DWORD PTR _MainWindowHidden, edx

; 6548 : 		ShowWindow (hwndDlg, SW_SHOW);
; 6549 : 		ShowWindow (hwndDlg, SW_RESTORE);
; 6550 : 		return 1;

  035d0	eb 9a		 jmp	 SHORT $LN1050@MainDialog
$LN1030@MainDialog:
  035d2	8b ff		 npad	 2
$LN1051@MainDialog:

; 6580 : 		}
; 6581 : 	}
; 6582 : 
; 6583 : 	return 0;
; 6584 : }

  035d4	00 00 00 00	 DD	 $LN3@MainDialog
  035d8	00 00 00 00	 DD	 $LN347@MainDialog
  035dc	00 00 00 00	 DD	 $LN345@MainDialog
  035e0	00 00 00 00	 DD	 $LN350@MainDialog
  035e4	00 00 00 00	 DD	 $LN6@MainDialog
  035e8	00 00 00 00	 DD	 $LN228@MainDialog
  035ec	00 00 00 00	 DD	 $LN346@MainDialog
  035f0	00 00 00 00	 DD	 $LN2@MainDialog
$LN922@MainDialog:
  035f4	00		 DB	 0
  035f5	07		 DB	 7
  035f6	07		 DB	 7
  035f7	07		 DB	 7
  035f8	01		 DB	 1
  035f9	07		 DB	 7
  035fa	02		 DB	 2
  035fb	07		 DB	 7
  035fc	07		 DB	 7
  035fd	07		 DB	 7
  035fe	07		 DB	 7
  035ff	07		 DB	 7
  03600	07		 DB	 7
  03601	07		 DB	 7
  03602	07		 DB	 7
  03603	07		 DB	 7
  03604	07		 DB	 7
  03605	07		 DB	 7
  03606	07		 DB	 7
  03607	07		 DB	 7
  03608	07		 DB	 7
  03609	07		 DB	 7
  0360a	07		 DB	 7
  0360b	07		 DB	 7
  0360c	07		 DB	 7
  0360d	07		 DB	 7
  0360e	07		 DB	 7
  0360f	07		 DB	 7
  03610	07		 DB	 7
  03611	07		 DB	 7
  03612	07		 DB	 7
  03613	07		 DB	 7
  03614	07		 DB	 7
  03615	07		 DB	 7
  03616	07		 DB	 7
  03617	07		 DB	 7
  03618	07		 DB	 7
  03619	07		 DB	 7
  0361a	07		 DB	 7
  0361b	07		 DB	 7
  0361c	07		 DB	 7
  0361d	07		 DB	 7
  0361e	07		 DB	 7
  0361f	07		 DB	 7
  03620	07		 DB	 7
  03621	07		 DB	 7
  03622	07		 DB	 7
  03623	07		 DB	 7
  03624	07		 DB	 7
  03625	07		 DB	 7
  03626	07		 DB	 7
  03627	07		 DB	 7
  03628	07		 DB	 7
  03629	07		 DB	 7
  0362a	03		 DB	 3
  0362b	07		 DB	 7
  0362c	07		 DB	 7
  0362d	07		 DB	 7
  0362e	04		 DB	 4
  0362f	07		 DB	 7
  03630	07		 DB	 7
  03631	07		 DB	 7
  03632	05		 DB	 5
  03633	07		 DB	 7
  03634	07		 DB	 7
  03635	07		 DB	 7
  03636	07		 DB	 7
  03637	06		 DB	 6
$LN1052@MainDialog:
  03638	00 00 00 00	 DD	 $LN209@MainDialog
  0363c	00 00 00 00	 DD	 $LN208@MainDialog
  03640	00 00 00 00	 DD	 $LN207@MainDialog
  03644	00 00 00 00	 DD	 $LN207@MainDialog
$LN1053@MainDialog:
  03648	00 00 00 00	 DD	 $LN196@MainDialog
  0364c	00 00 00 00	 DD	 $LN204@MainDialog
  03650	00 00 00 00	 DD	 $LN202@MainDialog
  03654	00 00 00 00	 DD	 $LN190@MainDialog
  03658	00 00 00 00	 DD	 $LN190@MainDialog
$LN1054@MainDialog:
  0365c	00 00 00 00	 DD	 $LN153@MainDialog
  03660	00 00 00 00	 DD	 $LN154@MainDialog
  03664	00 00 00 00	 DD	 $LN152@MainDialog
  03668	00 00 00 00	 DD	 $LN158@MainDialog
  0366c	00 00 00 00	 DD	 $LN151@MainDialog
  03670	00 00 00 00	 DD	 $LN155@MainDialog
  03674	00 00 00 00	 DD	 $LN159@MainDialog
  03678	00 00 00 00	 DD	 $LN156@MainDialog
  0367c	00 00 00 00	 DD	 $LN150@MainDialog
  03680	00 00 00 00	 DD	 $LN157@MainDialog
$LN1055@MainDialog:
  03684	00 00 00 00	 DD	 $LN142@MainDialog
  03688	00 00 00 00	 DD	 $LN130@MainDialog
  0368c	00 00 00 00	 DD	 $LN125@MainDialog
  03690	00 00 00 00	 DD	 $LN136@MainDialog
  03694	00 00 00 00	 DD	 $LN133@MainDialog
  03698	00 00 00 00	 DD	 $LN139@MainDialog
  0369c	00 00 00 00	 DD	 $LN188@MainDialog
$LN925@MainDialog:
  036a0	00		 DB	 0
  036a1	06		 DB	 6
  036a2	06		 DB	 6
  036a3	06		 DB	 6
  036a4	06		 DB	 6
  036a5	06		 DB	 6
  036a6	06		 DB	 6
  036a7	06		 DB	 6
  036a8	06		 DB	 6
  036a9	06		 DB	 6
  036aa	06		 DB	 6
  036ab	01		 DB	 1
  036ac	02		 DB	 2
  036ad	06		 DB	 6
  036ae	06		 DB	 6
  036af	06		 DB	 6
  036b0	06		 DB	 6
  036b1	06		 DB	 6
  036b2	06		 DB	 6
  036b3	06		 DB	 6
  036b4	03		 DB	 3
  036b5	04		 DB	 4
  036b6	05		 DB	 5
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_MainDialogProc@16$4:
  00000	8d 8d 20 fc ff
	ff		 lea	 ecx, DWORD PTR $T207821[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
__unwindfunclet$_MainDialogProc@16$5:
  0000b	8d 8d 30 fe ff
	ff		 lea	 ecx, DWORD PTR $T207823[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_MainDialogProc@16$7:
  00016	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _$S4$138385[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$_MainDialogProc@16$8:
  00021	8d 8d 40 06 00
	00		 lea	 ecx, DWORD PTR _favorite$138389[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
__unwindfunclet$_MainDialogProc@16$11:
  0002c	8d 8d 24 06 00
	00		 lea	 ecx, DWORD PTR _resolvedPath$138427[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_MainDialogProc@16$12:
  00037	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _$S5$138439[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$list@UFavoriteVolume@CipherShed@@V?$allocator@UFavoriteVolume@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$_MainDialogProc@16$13:
  00042	8d 8d ac 05 00
	00		 lea	 ecx, DWORD PTR _mountedFavorite$138443[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
__unwindfunclet$_MainDialogProc@16$28:
  0004d	8d 8d 98 fc ff
	ff		 lea	 ecx, DWORD PTR $T207870[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
__unwindfunclet$_MainDialogProc@16$29:
  00058	8d 8d a8 fb ff
	ff		 lea	 ecx, DWORD PTR $T207871[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
__unwindfunclet$_MainDialogProc@16$27:
  00063	8d 8d 10 fd ff
	ff		 lea	 ecx, DWORD PTR $T207869[ebp]
  00069	e9 00 00 00 00	 jmp	 ??1FavoriteVolume@CipherShed@@QAE@XZ
__unwindfunclet$_MainDialogProc@16$19:
  0006e	8d 8d d4 06 00
	00		 lea	 ecx, DWORD PTR _volPathHigher$138963[ebp]
  00074	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$20:
  00079	8d 8d f8 fd ff
	ff		 lea	 ecx, DWORD PTR $T207862[ebp]
  0007f	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$21:
  00084	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR $T207863[ebp]
  0008a	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$22:
  0008f	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR $T207864[ebp]
  00095	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$23:
  0009a	8d 8d f0 06 00
	00		 lea	 ecx, DWORD PTR _volPathLowerWStr$138993[ebp]
  000a0	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$24:
  000a5	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR $T207865[ebp]
  000ab	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$25:
  000b0	8d 8d a4 fd ff
	ff		 lea	 ecx, DWORD PTR $T207866[ebp]
  000b6	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$26:
  000bb	8d 8d 14 fe ff
	ff		 lea	 ecx, DWORD PTR $T207867[ebp]
  000c1	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$15:
  000c6	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T207850[ebp]
  000cc	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$16:
  000d1	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR $T207851[ebp]
  000d7	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$_MainDialogProc@16:
  000dc	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000e0	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000e3	8b 8a d0 c4 ff
	ff		 mov	 ecx, DWORD PTR [edx-15152]
  000e9	33 c8		 xor	 ecx, eax
  000eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f0	8b 8a 40 29 00
	00		 mov	 ecx, DWORD PTR [edx+10560]
  000f6	33 c8		 xor	 ecx, eax
  000f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fd	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_MainDialogProc@16
  00102	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_MainDialogProc@16 ENDP
PUBLIC	??_C@_08ELEAABKI@NODRIVER?$AA@			; `string'
PUBLIC	??_C@_0N@PDPHKHCO@INIT_SYS_ENC?$AA@		; `string'
PUBLIC	??_C@_0BI@INAEICPC@?1systemFavoritesService?$AA@ ; `string'
PUBLIC	_WinMain@16
EXTRN	_RegisterRedTick:PROC
EXTRN	_InitApp:PROC
EXTRN	__imp__InitCommonControls@0:PROC
EXTRN	??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z:PROC ; CipherShed::BootEncryption::BootEncryption
EXTRN	__imp__SetProcessShutdownParameters@8:PROC
EXTRN	_atexit:PROC
EXTRN	__imp__CommandLineToArgvW@8:PROC
;	COMDAT ??_C@_08ELEAABKI@NODRIVER?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_08ELEAABKI@NODRIVER?$AA@ DB 'NODRIVER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PDPHKHCO@INIT_SYS_ENC?$AA@
CONST	SEGMENT
??_C@_0N@PDPHKHCO@INIT_SYS_ENC?$AA@ DB 'INIT_SYS_ENC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@INAEICPC@?1systemFavoritesService?$AA@
CONST	SEGMENT
??_C@_0BI@INAEICPC@?1systemFavoritesService?$AA@ DB '/systemFavoritesServ'
	DB	'ice', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_WinMain@16$5 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe0H
	DD	FLAT:__catch$_WinMain@16$0
__tryblocktable$_WinMain@16 DD 02H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$_WinMain@16$5
__ehfuncinfo$_WinMain@16 DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$_WinMain@16
	DD	01H
	DD	FLAT:__tryblocktable$_WinMain@16
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$_WinMain@16 DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_WinMain@16$2
	DD	00H
	DD	FLAT:__unwindfunclet$_WinMain@16$3
	DD	0ffffffffH
	DD	00H
	DD	02H
	DD	FLAT:__unwindfunclet$_WinMain@16$4
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\mount\mount.c
xdata$x	ENDS
;	COMDAT _WinMain@16
_TEXT	SEGMENT
$T209058 = -88						; size = 28
$T209057 = -60						; size = 28
_e$139341 = -32						; size = 4
_argc$ = -28						; size = 4
$T209066 = -24						; size = 4
$T209061 = -24						; size = 4
$T209055 = -17						; size = 1
__$EHRec$ = -16						; size = 16
_hInstance$ = 8						; size = 4
_hPrevInstance$ = 12					; size = 4
_lpszCommandLine$ = 16					; size = 4
_nCmdShow$ = 20						; size = 4
_WinMain@16 PROC					; COMDAT

; 6954 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_WinMain@16
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 6955 : 	int argc;
; 6956 : 	LPWSTR *argv = CommandLineToArgvW (GetCommandLineW(), &argc);

  0002b	8d 45 e4	 lea	 eax, DWORD PTR _argc$[ebp]

; 6957 : 
; 6958 : 	if (argv && argc == 2 && SingleStringToWide (TC_SYSTEM_FAVORITES_SERVICE_CMDLINE_OPTION) == argv[1])

  0002e	33 db		 xor	 ebx, ebx
  00030	50		 push	 eax
  00031	89 5d e8	 mov	 DWORD PTR $T209066[ebp], ebx
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCommandLineW@0
  0003a	50		 push	 eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CommandLineToArgvW@8
  00041	8b f0		 mov	 esi, eax
  00043	3b f3		 cmp	 esi, ebx
  00045	74 76		 je	 SHORT $LN9@WinMain
  00047	83 7d e4 02	 cmp	 DWORD PTR _argc$[ebp], 2
  0004b	75 70		 jne	 SHORT $LN9@WinMain
  0004d	6a 17		 push	 23			; 00000017H
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@INAEICPC@?1systemFavoritesService?$AA@
  00054	8d 4d c4	 lea	 ecx, DWORD PTR $T209057[ebp]
  00057	c7 45 dc 0f 00
	00 00		 mov	 DWORD PTR $T209057[ebp+24], 15 ; 0000000fH
  0005e	89 5d d8	 mov	 DWORD PTR $T209057[ebp+20], ebx
  00061	88 5d c8	 mov	 BYTE PTR $T209057[ebp+4], bl
  00064	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00069	8d 4d c4	 lea	 ecx, DWORD PTR $T209057[ebp]
  0006c	51		 push	 ecx
  0006d	8d 55 a8	 lea	 edx, DWORD PTR $T209058[ebp]
  00070	bf 01 00 00 00	 mov	 edi, 1
  00075	52		 push	 edx
  00076	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00079	89 7d e8	 mov	 DWORD PTR $T209066[ebp], edi
  0007c	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  00081	83 c4 08	 add	 esp, 8
  00084	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00087	bb 03 00 00 00	 mov	 ebx, 3
  0008c	8b d6		 mov	 edx, esi
  0008e	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  00091	89 5d e8	 mov	 DWORD PTR $T209066[ebp], ebx
  00094	8d 7a 02	 lea	 edi, DWORD PTR [edx+2]
$LL121@WinMain:
  00097	66 8b 0a	 mov	 cx, WORD PTR [edx]
  0009a	83 c2 02	 add	 edx, 2
  0009d	66 85 c9	 test	 cx, cx
  000a0	75 f5		 jne	 SHORT $LL121@WinMain
  000a2	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a5	2b d7		 sub	 edx, edi
  000a7	d1 fa		 sar	 edx, 1
  000a9	52		 push	 edx
  000aa	56		 push	 esi
  000ab	51		 push	 ecx
  000ac	6a 00		 push	 0
  000ae	8b c8		 mov	 ecx, eax
  000b0	e8 00 00 00 00	 call	 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
  000b5	c6 45 ef 01	 mov	 BYTE PTR $T209055[ebp], 1
  000b9	85 c0		 test	 eax, eax
  000bb	74 04		 je	 SHORT $LN10@WinMain
$LN9@WinMain:
  000bd	c6 45 ef 00	 mov	 BYTE PTR $T209055[ebp], 0
$LN10@WinMain:
  000c1	f6 c3 02	 test	 bl, 2
  000c4	74 29		 je	 SHORT $LN92@WinMain
  000c6	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000c9	83 7d c0 08	 cmp	 DWORD PTR $T209058[ebp+24], 8
  000cd	72 0c		 jb	 SHORT $LN84@WinMain
  000cf	8b 55 ac	 mov	 edx, DWORD PTR $T209058[ebp+4]
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d8	83 c4 04	 add	 esp, 4
$LN84@WinMain:
  000db	33 c0		 xor	 eax, eax
  000dd	c7 45 c0 07 00
	00 00		 mov	 DWORD PTR $T209058[ebp+24], 7
  000e4	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T209058[ebp+20], 0
  000eb	66 89 45 ac	 mov	 WORD PTR $T209058[ebp+4], ax
$LN92@WinMain:
  000ef	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000f6	f6 c3 01	 test	 bl, 1
  000f9	74 12		 je	 SHORT $LN110@WinMain
  000fb	83 7d dc 10	 cmp	 DWORD PTR $T209057[ebp+24], 16 ; 00000010H
  000ff	72 0c		 jb	 SHORT $LN110@WinMain
  00101	8b 4d c8	 mov	 ecx, DWORD PTR $T209057[ebp+4]
  00104	51		 push	 ecx
  00105	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0010a	83 c4 04	 add	 esp, 4
$LN110@WinMain:
  0010d	80 7d ef 00	 cmp	 BYTE PTR $T209055[ebp], 0
  00111	74 1e		 je	 SHORT $LN6@WinMain

; 6959 : 		return StartSystemFavoritesService() ? 0 : 1;

  00113	e8 00 00 00 00	 call	 ?StartSystemFavoritesService@@YAHXZ ; StartSystemFavoritesService
  00118	f7 d8		 neg	 eax
  0011a	1b c0		 sbb	 eax, eax
  0011c	40		 inc	 eax

; 7008 : }

  0011d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00120	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00127	59		 pop	 ecx
  00128	5f		 pop	 edi
  00129	5e		 pop	 esi
  0012a	5b		 pop	 ebx
  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c2 10 00	 ret	 16			; 00000010H
$LN6@WinMain:

; 6960 : 
; 6961 : 	int status;
; 6962 : 	atexit (localcleanup);

  00131	68 00 00 00 00	 push	 OFFSET _localcleanup
  00136	e8 00 00 00 00	 call	 _atexit
  0013b	83 c4 04	 add	 esp, 4

; 6963 : 	SetProcessShutdownParameters (0x100, 0);

  0013e	6a 00		 push	 0
  00140	68 00 01 00 00	 push	 256			; 00000100H
  00145	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetProcessShutdownParameters@8

; 6964 : 
; 6965 : 	VirtualLock (&VolumePassword, sizeof (VolumePassword));

  0014b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__VirtualLock@8
  00151	6a 48		 push	 72			; 00000048H
  00153	68 00 00 00 00	 push	 OFFSET ?VolumePassword@@3UPassword@@A ; VolumePassword
  00158	ff d6		 call	 esi

; 6966 : 	VirtualLock (&CmdVolumePassword, sizeof (CmdVolumePassword));

  0015a	6a 48		 push	 72			; 00000048H
  0015c	68 00 00 00 00	 push	 OFFSET ?CmdVolumePassword@@3UPassword@@A ; CmdVolumePassword
  00161	ff d6		 call	 esi

; 6967 : 	VirtualLock (&mountOptions, sizeof (mountOptions));

  00163	6a 64		 push	 100			; 00000064H
  00165	68 00 00 00 00	 push	 OFFSET ?mountOptions@@3UMountOptions@@A ; mountOptions
  0016a	ff d6		 call	 esi

; 6968 : 	VirtualLock (&defaultMountOptions, sizeof (defaultMountOptions));

  0016c	6a 64		 push	 100			; 00000064H
  0016e	68 00 00 00 00	 push	 OFFSET ?defaultMountOptions@@3UMountOptions@@A ; defaultMountOptions
  00173	ff d6		 call	 esi

; 6969 : 	VirtualLock (&szFileName, sizeof(szFileName));

  00175	68 05 01 00 00	 push	 261			; 00000105H
  0017a	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  0017f	ff d6		 call	 esi

; 6970 : 
; 6971 : 	try
; 6972 : 	{
; 6973 : 		BootEncObj = new BootEncryption (NULL);

  00181	68 18 06 00 00	 push	 1560			; 00000618H
  00186	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  0018d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00192	8b c8		 mov	 ecx, eax
  00194	83 c4 04	 add	 esp, 4
  00197	89 4d e8	 mov	 DWORD PTR $T209061[ebp], ecx
  0019a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  0019e	85 c9		 test	 ecx, ecx
  001a0	74 09		 je	 SHORT $LN11@WinMain
  001a2	6a 00		 push	 0
  001a4	e8 00 00 00 00	 call	 ??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z ; CipherShed::BootEncryption::BootEncryption
  001a9	eb 02		 jmp	 SHORT $LN12@WinMain
$LN11@WinMain:
  001ab	33 c0		 xor	 eax, eax
$LN12@WinMain:
  001ad	a3 00 00 00 00	 mov	 DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A, eax ; BootEncObj
$LN23@WinMain:

; 6979 : 
; 6980 : 	if (BootEncObj == NULL)

  001b2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A, 0 ; BootEncObj
  001b9	75 0d		 jne	 SHORT $LN4@WinMain

; 6981 : 		AbortProcess ("INIT_SYS_ENC");

  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PDPHKHCO@INIT_SYS_ENC?$AA@
  001c0	e8 00 00 00 00	 call	 _AbortProcess
  001c5	83 c4 04	 add	 esp, 4
$LN4@WinMain:

; 6982 : 
; 6983 : 	InitCommonControls ();

  001c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitCommonControls@0

; 6984 : 	InitApp (hInstance, lpszCommandLine);

  001ce	8b 7d 10	 mov	 edi, DWORD PTR _lpszCommandLine$[ebp]
  001d1	8b 75 08	 mov	 esi, DWORD PTR _hInstance$[ebp]
  001d4	57		 push	 edi
  001d5	56		 push	 esi
  001d6	e8 00 00 00 00	 call	 _InitApp

; 6985 : 
; 6986 : 	RegisterRedTick(hInstance);

  001db	56		 push	 esi
  001dc	e8 00 00 00 00	 call	 _RegisterRedTick
  001e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6987 : 
; 6988 : 	/* Allocate, dup, then store away the application title */
; 6989 : 	lpszTitle = L"CipherShed";

  001e4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _lpszTitle, OFFSET ??_C@_1BG@INDNNNCG@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?$AA@

; 6990 : 
; 6991 : 	status = DriverAttach ();

  001ee	e8 00 00 00 00	 call	 _DriverAttach

; 6992 : 	if (status != 0)

  001f3	85 c0		 test	 eax, eax
  001f5	74 3a		 je	 SHORT $LN3@WinMain

; 6993 : 	{
; 6994 : 		if (status == ERR_OS_ERROR)

  001f7	83 f8 01	 cmp	 eax, 1
  001fa	75 1d		 jne	 SHORT $LN2@WinMain

; 6995 : 			handleWin32Error (NULL);

  001fc	6a 00		 push	 0
  001fe	e8 00 00 00 00	 call	 _handleWin32Error
  00203	83 c4 04	 add	 esp, 4

; 6996 : 		else

  00206	eb 1c		 jmp	 SHORT $LN1@WinMain
__catch$_WinMain@16$0:

; 6974 : 	}
; 6975 : 	catch (Exception &e)
; 6976 : 	{
; 6977 : 		e.Show (NULL);

  00208	8b 4d e0	 mov	 ecx, DWORD PTR _e$139341[ebp]
  0020b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0020d	8b 02		 mov	 eax, DWORD PTR [edx]
  0020f	6a 00		 push	 0
  00211	ff d0		 call	 eax

; 6978 : 	}

  00213	b8 00 00 00 00	 mov	 eax, $LN23@WinMain
  00218	c3		 ret	 0
$LN2@WinMain:

; 6997 : 			handleError (NULL, status);

  00219	50		 push	 eax
  0021a	6a 00		 push	 0
  0021c	e8 00 00 00 00	 call	 _handleError
  00221	83 c4 08	 add	 esp, 8
$LN1@WinMain:

; 6998 : 
; 6999 : 		AbortProcess ("NODRIVER");

  00224	68 00 00 00 00	 push	 OFFSET ??_C@_08ELEAABKI@NODRIVER?$AA@
  00229	e8 00 00 00 00	 call	 _AbortProcess
  0022e	83 c4 04	 add	 esp, 4
$LN3@WinMain:

; 7000 : 	}
; 7001 : 
; 7002 : 	/* Create the main dialog box */
; 7003 : 	DialogBoxParamW (hInstance, MAKEINTRESOURCEW (IDD_MOUNT_DLG), NULL, (DLGPROC) MainDialogProc,
; 7004 : 			(LPARAM) lpszCommandLine);

  00231	57		 push	 edi
  00232	68 00 00 00 00	 push	 OFFSET _MainDialogProc@16
  00237	6a 00		 push	 0
  00239	6a 65		 push	 101			; 00000065H
  0023b	56		 push	 esi
  0023c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 7005 : 
; 7006 : 	/* Terminate */
; 7007 : 	return 0;

  00242	33 c0		 xor	 eax, eax

; 7008 : }

  00244	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00247	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0024e	59		 pop	 ecx
  0024f	5f		 pop	 edi
  00250	5e		 pop	 esi
  00251	5b		 pop	 ebx
  00252	8b e5		 mov	 esp, ebp
  00254	5d		 pop	 ebp
  00255	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_WinMain@16$2:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T209066[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN16@WinMain
  0000c	83 65 e8 fe	 and	 DWORD PTR $T209066[ebp], -2 ; fffffffeH
  00010	8d 4d c4	 lea	 ecx, DWORD PTR $T209057[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN16@WinMain:
  00018	c3		 ret	 0
__unwindfunclet$_WinMain@16$3:
  00019	8b 45 e8	 mov	 eax, DWORD PTR $T209066[ebp]
  0001c	83 e0 02	 and	 eax, 2
  0001f	0f 84 0c 00 00
	00		 je	 $LN18@WinMain
  00025	83 65 e8 fd	 and	 DWORD PTR $T209066[ebp], -3 ; fffffffdH
  00029	8d 4d a8	 lea	 ecx, DWORD PTR $T209058[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN18@WinMain:
  00031	c3		 ret	 0
__unwindfunclet$_WinMain@16$4:
  00032	8b 45 e8	 mov	 eax, DWORD PTR $T209061[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	59		 pop	 ecx
  0003c	c3		 ret	 0
__ehhandler$_WinMain@16:
  0003d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00041	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00044	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00047	33 c8		 xor	 ecx, eax
  00049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_WinMain@16
  00053	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_WinMain@16 ENDP
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
END
