; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\Public\Desktop\projects\ciphershed\src\Setup\Wizard.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
PUBLIC	??_C@_0BC@KMEHMKJJ@truecrypt?9x64?4sys?$AA@	; `string'
PUBLIC	??_C@_0O@OJENBJKN@truecrypt?4sys?$AA@		; `string'
PUBLIC	??_C@_0BG@EJICJNAD@CipherShed?9Format?4exe?$AA@	; `string'
PUBLIC	??_C@_0P@KEOPEMDF@CipherShed?4exe?$AA@		; `string'
PUBLIC	??_C@_0M@HNDLNFKG@License?4txt?$AA@		; `string'
PUBLIC	??_C@_0BK@LMECBCPP@CipherShed?5User?5Guide?4pdf?$AA@ ; `string'
PUBLIC	??_C@_0BG@DJBAHGBG@ACipherShed?9Setup?4exe?$AA@	; `string'
PUBLIC	??_C@_0P@KPKCHNJD@Dtruecrypt?4sys?$AA@		; `string'
PUBLIC	??_C@_0BD@ILLOKAML@Atruecrypt?9x64?4sys?$AA@	; `string'
PUBLIC	??_C@_0P@JMCFMDBI@Atruecrypt?4sys?$AA@		; `string'
PUBLIC	??_C@_0BH@NLCPLED@ACipherShed?9Format?4exe?$AA@	; `string'
PUBLIC	??_C@_0BA@BPJBGDOM@ACipherShed?4exe?$AA@	; `string'
PUBLIC	??_C@_0N@GJIBBNGF@ALicense?4txt?$AA@		; `string'
PUBLIC	??_C@_0BL@MFPLEOCK@ACipherShed?5User?5Guide?4pdf?$AA@ ; `string'
PUBLIC	?WizardDestInstallPath@@3PADA			; WizardDestInstallPath
PUBLIC	?WizardDestExtractPath@@3PADA			; WizardDestExtractPath
PUBLIC	?SelfFile@@3PADA				; SelfFile
PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?hCurPage@@3PAUHWND__@@A			; hCurPage
PUBLIC	?nCurPageNo@@3HA				; nCurPageNo
PUBLIC	?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A	; hbmWizardBitmapRescaled
PUBLIC	?bExtractOnly@@3HA				; bExtractOnly
PUBLIC	?bLicenseAccepted@@3HA				; bLicenseAccepted
PUBLIC	?bOpenContainingFolder@@3HA			; bOpenContainingFolder
PUBLIC	?bExtractionSuccessful@@3HA			; bExtractionSuccessful
PUBLIC	?bStartInstall@@3HA				; bStartInstall
PUBLIC	?bStartExtraction@@3HA				; bStartExtraction
PUBLIC	?bInProgress@@3HA				; bInProgress
PUBLIC	_bPromptTutorial
PUBLIC	_bPromptReleaseNotes
PUBLIC	?nPbar@@3HA					; nPbar
_BSS	SEGMENT
?WizardDestInstallPath@@3PADA DB 0104H DUP (?)		; WizardDestInstallPath
?WizardDestExtractPath@@3PADA DB 0104H DUP (?)		; WizardDestExtractPath
?SelfFile@@3PADA DB 0104H DUP (?)			; SelfFile
?hCurPage@@3PAUHWND__@@A DD 01H DUP (?)			; hCurPage
?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A DD 01H DUP (?) ; hbmWizardBitmapRescaled
?bExtractOnly@@3HA DD 01H DUP (?)			; bExtractOnly
?bLicenseAccepted@@3HA DD 01H DUP (?)			; bLicenseAccepted
?bExtractionSuccessful@@3HA DD 01H DUP (?)		; bExtractionSuccessful
?bStartInstall@@3HA DD 01H DUP (?)			; bStartInstall
?bStartExtraction@@3HA DD 01H DUP (?)			; bStartExtraction
?bInProgress@@3HA DD 01H DUP (?)			; bInProgress
_bPromptTutorial DD 01H DUP (?)
_bPromptReleaseNotes DD 01H DUP (?)
?nPbar@@3HA DD	01H DUP (?)				; nPbar
_BSS	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KMEHMKJJ@truecrypt?9x64?4sys?$AA@
CONST	SEGMENT
??_C@_0BC@KMEHMKJJ@truecrypt?9x64?4sys?$AA@ DB 'truecrypt-x64.sys', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OJENBJKN@truecrypt?4sys?$AA@
CONST	SEGMENT
??_C@_0O@OJENBJKN@truecrypt?4sys?$AA@ DB 'truecrypt.sys', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EJICJNAD@CipherShed?9Format?4exe?$AA@
CONST	SEGMENT
??_C@_0BG@EJICJNAD@CipherShed?9Format?4exe?$AA@ DB 'CipherShed-Format.exe'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KEOPEMDF@CipherShed?4exe?$AA@
CONST	SEGMENT
??_C@_0P@KEOPEMDF@CipherShed?4exe?$AA@ DB 'CipherShed.exe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HNDLNFKG@License?4txt?$AA@
CONST	SEGMENT
??_C@_0M@HNDLNFKG@License?4txt?$AA@ DB 'License.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LMECBCPP@CipherShed?5User?5Guide?4pdf?$AA@
CONST	SEGMENT
??_C@_0BK@LMECBCPP@CipherShed?5User?5Guide?4pdf?$AA@ DB 'CipherShed User '
	DB	'Guide.pdf', 00H				; `string'
CONST	ENDS
_DATA	SEGMENT
_szFiles DD	FLAT:??_C@_0BL@MFPLEOCK@ACipherShed?5User?5Guide?4pdf?$AA@
	DD	FLAT:??_C@_0N@GJIBBNGF@ALicense?4txt?$AA@
	DD	FLAT:??_C@_0BA@BPJBGDOM@ACipherShed?4exe?$AA@
	DD	FLAT:??_C@_0BH@NLCPLED@ACipherShed?9Format?4exe?$AA@
	DD	FLAT:??_C@_0P@JMCFMDBI@Atruecrypt?4sys?$AA@
	DD	FLAT:??_C@_0BD@ILLOKAML@Atruecrypt?9x64?4sys?$AA@
	DD	FLAT:??_C@_0P@KPKCHNJD@Dtruecrypt?4sys?$AA@
	DD	FLAT:??_C@_0BG@DJBAHGBG@ACipherShed?9Setup?4exe?$AA@
_szCompressedFiles DD FLAT:??_C@_0BK@LMECBCPP@CipherShed?5User?5Guide?4pdf?$AA@
	DD	FLAT:??_C@_0M@HNDLNFKG@License?4txt?$AA@
	DD	FLAT:??_C@_0P@KEOPEMDF@CipherShed?4exe?$AA@
	DD	FLAT:??_C@_0BG@EJICJNAD@CipherShed?9Format?4exe?$AA@
	DD	FLAT:??_C@_0O@OJENBJKN@truecrypt?4sys?$AA@
	DD	FLAT:??_C@_0BC@KMEHMKJJ@truecrypt?9x64?4sys?$AA@
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
?nCurPageNo@@3HA DD 0ffffffffH				; nCurPageNo
?bOpenContainingFolder@@3HA DD 01H			; bOpenContainingFolder
_DATA	ENDS
;	COMDAT ??_C@_0BG@DJBAHGBG@ACipherShed?9Setup?4exe?$AA@
CONST	SEGMENT
??_C@_0BG@DJBAHGBG@ACipherShed?9Setup?4exe?$AA@ DB 'ACipherShed-Setup.exe'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KPKCHNJD@Dtruecrypt?4sys?$AA@
CONST	SEGMENT
??_C@_0P@KPKCHNJD@Dtruecrypt?4sys?$AA@ DB 'Dtruecrypt.sys', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ILLOKAML@Atruecrypt?9x64?4sys?$AA@
CONST	SEGMENT
??_C@_0BD@ILLOKAML@Atruecrypt?9x64?4sys?$AA@ DB 'Atruecrypt-x64.sys', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JMCFMDBI@Atruecrypt?4sys?$AA@
CONST	SEGMENT
??_C@_0P@JMCFMDBI@Atruecrypt?4sys?$AA@ DB 'Atruecrypt.sys', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NLCPLED@ACipherShed?9Format?4exe?$AA@
CONST	SEGMENT
??_C@_0BH@NLCPLED@ACipherShed?9Format?4exe?$AA@ DB 'ACipherShed-Format.ex'
	DB	'e', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPJBGDOM@ACipherShed?4exe?$AA@
CONST	SEGMENT
??_C@_0BA@BPJBGDOM@ACipherShed?4exe?$AA@ DB 'ACipherShed.exe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GJIBBNGF@ALicense?4txt?$AA@
CONST	SEGMENT
??_C@_0N@GJIBBNGF@ALicense?4txt?$AA@ DB 'ALicense.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MFPLEOCK@ACipherShed?5User?5Guide?4pdf?$AA@
CONST	SEGMENT
??_C@_0BL@MFPLEOCK@ACipherShed?5User?5Guide?4pdf?$AA@ DB 'ACipherShed Use'
	DB	'r Guide.pdf', 00H				; `string'
CONST	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

  00000	56		 push	 esi
  00001	8d 44 24 08	 lea	 eax, DWORD PTR __Message$[esp]
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtpy
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00009	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000e	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00013	74 09		 je	 SHORT $LN6@scalar
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 425  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 426  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 448  : //		_DEBUG_POINTER(_First);
; 449  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $LL3@length
  0000e	2b c2		 sub	 eax, edx

; 450  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Copy_s
EXTRN	_memcpy_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Copy_s, COMDAT

; 463  : //		_DEBUG_POINTER(_First1);
; 464  : //		_DEBUG_POINTER(_First2);
; 465  : 		_CRT_SECURE_MEMCPY(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 466  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 467  : 		}

  00020	c3		 ret	 0
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Copy_s
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Move_s
EXTRN	_memmove_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Move_s, COMDAT

; 487  : //		_DEBUG_POINTER(_First1);
; 488  : //		_DEBUG_POINTER(_First2);
; 489  : 		_CRT_SECURE_MEMMOVE(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 490  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 491  : 		}

  00020	c3		 ret	 0
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Move_s
_TEXT	ENDS
PUBLIC	_localcleanupwiz
EXTRN	__imp__DeleteObject@4:PROC
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\setup\wizard.c
;	COMDAT _localcleanupwiz
_TEXT	SEGMENT
_localcleanupwiz PROC					; COMDAT

; 61   : 	/* Delete buffered bitmaps (if any) */
; 62   : 	if (hbmWizardBitmapRescaled != NULL)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A ; hbmWizardBitmapRescaled
  00005	85 c0		 test	 eax, eax
  00007	74 11		 je	 SHORT $LN1@localclean

; 63   : 	{
; 64   : 		DeleteObject ((HGDIOBJ) hbmWizardBitmapRescaled);

  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 65   : 		hbmWizardBitmapRescaled = NULL;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A, 0 ; hbmWizardBitmapRescaled
$LN1@localclean:

; 66   : 	}
; 67   : 
; 68   : }

  0001a	c3		 ret	 0
_localcleanupwiz ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@ILKBADPD@?2CipherShed?2?$AA@		; `string'
PUBLIC	??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@		; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
EXTRN	_strncmp:PROC
EXTRN	_bCipherShedMigration:DWORD
EXTRN	_strcpy_s:PROC
EXTRN	_InstallationPath:BYTE
;	COMDAT ??_C@_0N@ILKBADPD@?2CipherShed?2?$AA@
CONST	SEGMENT
??_C@_0N@ILKBADPD@?2CipherShed?2?$AA@ DB '\CipherShed\', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@
CONST	SEGMENT
??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@ DB '\TrueCrypt\', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?InitWizardDestInstallPath@@YAXXZ
_TEXT	SEGMENT
?InitWizardDestInstallPath@@YAXXZ PROC			; InitWizardDestInstallPath, COMDAT

; 72   : 	if (strlen (WizardDestInstallPath) < 2)

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  00005	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL7@InitWizard:
  00008	8a 08		 mov	 cl, BYTE PTR [eax]
  0000a	40		 inc	 eax
  0000b	84 c9		 test	 cl, cl
  0000d	75 f9		 jne	 SHORT $LL7@InitWizard
  0000f	2b c2		 sub	 eax, edx
  00011	83 f8 02	 cmp	 eax, 2
  00014	0f 83 b6 00 00
	00		 jae	 $LN1@InitWizard

; 73   : 	{
; 74   : 		strcpy_s (WizardDestInstallPath, sizeof(WizardDestInstallPath), InstallationPath);

  0001a	68 00 00 00 00	 push	 OFFSET _InstallationPath
  0001f	68 04 01 00 00	 push	 260			; 00000104H
  00024	68 00 00 00 00	 push	 OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  00029	e8 00 00 00 00	 call	 _strcpy_s

; 75   : 		if (WizardDestInstallPath [strlen (WizardDestInstallPath) - 1] != '\\')

  0002e	b8 00 00 00 00	 mov	 eax, OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL8@InitWizard:
  00040	8a 08		 mov	 cl, BYTE PTR [eax]
  00042	40		 inc	 eax
  00043	84 c9		 test	 cl, cl
  00045	75 f9		 jne	 SHORT $LL8@InitWizard
  00047	2b c2		 sub	 eax, edx
  00049	80 b8 ff ff ff
	ff 5c		 cmp	 BYTE PTR ?WizardDestInstallPath@@3PADA[eax-1], 92 ; 0000005cH
  00050	57		 push	 edi
  00051	74 1e		 je	 SHORT $LN3@InitWizard

; 76   : 		{
; 77   : 			strcat (WizardDestInstallPath, "\\");

  00053	bf 00 00 00 00	 mov	 edi, OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  00058	4f		 dec	 edi
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL9@InitWizard:
  00060	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00063	47		 inc	 edi
  00064	84 c0		 test	 al, al
  00066	75 f8		 jne	 SHORT $LL9@InitWizard
  00068	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
  0006e	66 89 07	 mov	 WORD PTR [edi], ax
$LN3@InitWizard:

; 78   : 		}
; 79   : 
; 80   : 		/* Change CipherShed migration path. */
; 81   : 		if (bCipherShedMigration)

  00071	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bCipherShedMigration, 0
  00078	74 55		 je	 SHORT $LN11@InitWizard

; 82   : 		{
; 83   : 			size_t str_len = strlen (WizardDestInstallPath);

  0007a	b8 00 00 00 00	 mov	 eax, OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  0007f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL10@InitWizard:
  00082	8a 08		 mov	 cl, BYTE PTR [eax]
  00084	40		 inc	 eax
  00085	84 c9		 test	 cl, cl
  00087	75 f9		 jne	 SHORT $LL10@InitWizard
  00089	2b c2		 sub	 eax, edx
  0008b	56		 push	 esi
  0008c	8b f0		 mov	 esi, eax

; 84   : 			size_t suffix_len = sizeof ("\\TrueCrypt\\") - 1;
; 85   : 			if (str_len > suffix_len &&
; 86   : 				str_len + 1 < sizeof(WizardDestInstallPath) &&
; 87   : 				strncmp (WizardDestInstallPath + str_len - suffix_len, "\\TrueCrypt\\", suffix_len) == 0)

  0008e	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  00091	76 3b		 jbe	 SHORT $LN12@InitWizard
  00093	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00096	81 f9 04 01 00
	00		 cmp	 ecx, 260		; 00000104H
  0009c	73 30		 jae	 SHORT $LN12@InitWizard
  0009e	6a 0b		 push	 11			; 0000000bH
  000a0	8d be f5 ff ff
	ff		 lea	 edi, DWORD PTR ?WizardDestInstallPath@@3PADA[esi-11]
  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@
  000ab	57		 push	 edi
  000ac	e8 00 00 00 00	 call	 _strncmp
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b4	85 c0		 test	 eax, eax
  000b6	75 16		 jne	 SHORT $LN12@InitWizard

; 88   : 			{
; 89   : 				strcpy_s (WizardDestInstallPath + str_len - suffix_len, sizeof(WizardDestInstallPath)-(str_len - suffix_len), "\\CipherShed\\");

  000b8	ba 0f 01 00 00	 mov	 edx, 271		; 0000010fH
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0N@ILKBADPD@?2CipherShed?2?$AA@
  000c2	2b d6		 sub	 edx, esi
  000c4	52		 push	 edx
  000c5	57		 push	 edi
  000c6	e8 00 00 00 00	 call	 _strcpy_s
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@InitWizard:
  000ce	5e		 pop	 esi
$LN11@InitWizard:
  000cf	5f		 pop	 edi
$LN1@InitWizard:

; 90   : 			}
; 91   : 		}
; 92   : 	}
; 93   : }

  000d0	c3		 ret	 0
?InitWizardDestInstallPath@@YAXXZ ENDP			; InitWizardDestInstallPath
_TEXT	ENDS
PUBLIC	_InitProgressBar
EXTRN	__imp__InvalidateRect@12:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__GetDlgItem@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT _InitProgressBar
_TEXT	SEGMENT
_InitProgressBar PROC					; COMDAT

; 596  : 	HWND hProgressBar = GetDlgItem (hCurPage, nPbar);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nPbar@@3HA ; nPbar
  00005	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8

; 597  : 	SendMessage (hProgressBar, PBM_SETRANGE32, 0, 100);

  00015	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  0001b	6a 64		 push	 100			; 00000064H
  0001d	6a 00		 push	 0
  0001f	8b f0		 mov	 esi, eax
  00021	68 06 04 00 00	 push	 1030			; 00000406H
  00026	56		 push	 esi
  00027	ff d7		 call	 edi

; 598  : 	SendMessage (hProgressBar, PBM_SETSTEP, 1, 0);

  00029	6a 00		 push	 0
  0002b	6a 01		 push	 1
  0002d	68 04 04 00 00	 push	 1028			; 00000404H
  00032	56		 push	 esi
  00033	ff d7		 call	 edi

; 599  : 	InvalidateRect (hProgressBar, NULL, TRUE);

  00035	6a 01		 push	 1
  00037	6a 00		 push	 0
  00039	56		 push	 esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi

; 600  : }

  00042	c3		 ret	 0
_InitProgressBar ENDP
_TEXT	ENDS
PUBLIC	_RefreshUIGFX
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	_MainDlg:DWORD
; Function compile flags: /Ogtpy
;	COMDAT _RefreshUIGFX
_TEXT	SEGMENT
_RefreshUIGFX PROC					; COMDAT

; 619  : 	InvalidateRect (GetDlgItem (MainDlg, IDC_SETUP_WIZARD_BKG), NULL, TRUE);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00005	56		 push	 esi
  00006	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0000c	57		 push	 edi
  0000d	6a 01		 push	 1
  0000f	6a 00		 push	 0
  00011	68 fa 03 00 00	 push	 1018			; 000003faH
  00016	50		 push	 eax
  00017	ff d6		 call	 esi
  00019	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__InvalidateRect@12
  0001f	50		 push	 eax
  00020	ff d7		 call	 edi

; 620  : 	InvalidateRect (GetDlgItem (MainDlg, IDC_BOX_TITLE), NULL, TRUE);

  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00028	6a 01		 push	 1
  0002a	6a 00		 push	 0
  0002c	68 e9 03 00 00	 push	 1001			; 000003e9H
  00031	51		 push	 ecx
  00032	ff d6		 call	 esi
  00034	50		 push	 eax
  00035	ff d7		 call	 edi

; 621  : 	InvalidateRect (GetDlgItem (MainDlg, IDC_BOX_INFO), NULL, TRUE);

  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0003d	6a 01		 push	 1
  0003f	6a 00		 push	 0
  00041	68 eb 03 00 00	 push	 1003			; 000003ebH
  00046	52		 push	 edx
  00047	ff d6		 call	 esi
  00049	50		 push	 eax
  0004a	ff d7		 call	 edi

; 622  : 	InvalidateRect (GetDlgItem (MainDlg, IDC_BITMAP_SETUP_WIZARD), NULL, TRUE);

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00051	6a 01		 push	 1
  00053	6a 00		 push	 0
  00055	68 06 04 00 00	 push	 1030			; 00000406H
  0005a	50		 push	 eax
  0005b	ff d6		 call	 esi
  0005d	50		 push	 eax
  0005e	ff d7		 call	 edi

; 623  : 	InvalidateRect (GetDlgItem (MainDlg, IDC_HR), NULL, TRUE);

  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00066	6a 01		 push	 1
  00068	6a 00		 push	 0
  0006a	68 fc 03 00 00	 push	 1020			; 000003fcH
  0006f	51		 push	 ecx
  00070	ff d6		 call	 esi
  00072	50		 push	 eax
  00073	ff d7		 call	 edi

; 624  : 	// Prevent these items from disappearing at higher DPIs
; 625  : 	ShowWindow(GetDlgItem(MainDlg, IDC_HR), SW_HIDE);

  00075	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0007b	6a 00		 push	 0
  0007d	68 fc 03 00 00	 push	 1020			; 000003fcH
  00082	52		 push	 edx
  00083	ff d6		 call	 esi
  00085	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__ShowWindow@8
  0008b	50		 push	 eax
  0008c	ff d7		 call	 edi

; 626  : 	ShowWindow(GetDlgItem(MainDlg, IDC_HR), SW_SHOW);

  0008e	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00093	6a 05		 push	 5
  00095	68 fc 03 00 00	 push	 1020			; 000003fcH
  0009a	50		 push	 eax
  0009b	ff d6		 call	 esi
  0009d	50		 push	 eax
  0009e	ff d7		 call	 edi

; 627  : 	ShowWindow(GetDlgItem(MainDlg, IDC_HR_BOTTOM), SW_HIDE);

  000a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  000a6	6a 00		 push	 0
  000a8	68 ff 03 00 00	 push	 1023			; 000003ffH
  000ad	51		 push	 ecx
  000ae	ff d6		 call	 esi
  000b0	50		 push	 eax
  000b1	ff d7		 call	 edi

; 628  : 	ShowWindow(GetDlgItem(MainDlg, IDC_HR_BOTTOM), SW_SHOW);

  000b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  000b9	6a 05		 push	 5
  000bb	68 ff 03 00 00	 push	 1023			; 000003ffH
  000c0	52		 push	 edx
  000c1	ff d6		 call	 esi
  000c3	50		 push	 eax
  000c4	ff d7		 call	 edi

; 629  : 	ShowWindow(GetDlgItem(MainDlg, IDC_BOX_INFO), SW_HIDE);

  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000cb	6a 00		 push	 0
  000cd	68 eb 03 00 00	 push	 1003			; 000003ebH
  000d2	50		 push	 eax
  000d3	ff d6		 call	 esi
  000d5	50		 push	 eax
  000d6	ff d7		 call	 edi

; 630  : 	ShowWindow(GetDlgItem(MainDlg, IDC_BOX_INFO), SW_SHOW);

  000d8	6a 05		 push	 5
  000da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  000e0	68 eb 03 00 00	 push	 1003			; 000003ebH
  000e5	51		 push	 ecx
  000e6	ff d6		 call	 esi
  000e8	50		 push	 eax
  000e9	ff d7		 call	 edi

; 631  : 	ShowWindow(GetDlgItem(MainDlg, IDC_BOX_TITLE), SW_HIDE);

  000eb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  000f1	6a 00		 push	 0
  000f3	68 e9 03 00 00	 push	 1001			; 000003e9H
  000f8	52		 push	 edx
  000f9	ff d6		 call	 esi
  000fb	50		 push	 eax
  000fc	ff d7		 call	 edi

; 632  : 	ShowWindow(GetDlgItem(MainDlg, IDC_BOX_TITLE), SW_SHOW);

  000fe	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00103	6a 05		 push	 5
  00105	68 e9 03 00 00	 push	 1001			; 000003e9H
  0010a	50		 push	 eax
  0010b	ff d6		 call	 esi
  0010d	50		 push	 eax
  0010e	ff d7		 call	 edi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi

; 633  : }

  00112	c3		 ret	 0
_RefreshUIGFX ENDP
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@2:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2c		 je	 SHORT $LN2@Inside
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 10	 cmp	 esi, 16			; 00000010H
  00013	72 04		 jb	 SHORT $LN8@Inside
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 17		 jb	 SHORT $LN2@Inside
  0001f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00022	72 02		 jb	 SHORT $LN12@Inside
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	03 c8		 add	 ecx, eax
  0002b	3b cf		 cmp	 ecx, edi
  0002d	76 07		 jbe	 SHORT $LN2@Inside
  0002f	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00030	b0 01		 mov	 al, 1
  00032	5e		 pop	 esi

; 2138 : 		}

  00033	c2 04 00	 ret	 4
$LN2@Inside:
  00036	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00037	32 c0		 xor	 al, al
  00039	5e		 pop	 esi

; 2138 : 		}

  0003a	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 167  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T98224 = -12						; size = 12
$T98229 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 0f		 ja	 SHORT $LN3@Allocate

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00013	83 c4 04	 add	 esp, 4

; 44   : 	}

  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	c3		 ret	 0
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001a	83 c8 ff	 or	 eax, -1
  0001d	33 d2		 xor	 edx, edx
  0001f	f7 f1		 div	 ecx
  00021	83 f8 01	 cmp	 eax, 1
  00024	73 e7		 jae	 SHORT $LN1@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T98229[esp+8]
  0002a	50		 push	 eax
  0002b	8d 4c 24 04	 lea	 ecx, DWORD PTR $T98224[esp+16]
  0002f	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T98229[esp+12], 0
  00037	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003c	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00041	8d 4c 24 04	 lea	 ecx, DWORD PTR $T98224[esp+16]
  00045	51		 push	 ecx
  00046	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T98224[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate:
  00053	cc		 int	 3
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<char> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 598  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 625  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	_UpdateProgressBarProc
EXTRN	__fltused:DWORD
;	COMDAT __real@4059000000000000
; File c:\users\public\desktop\projects\ciphershed\src\setup\wizard.c
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _UpdateProgressBarProc
_TEXT	SEGMENT
tv94 = -8						; size = 4
tv72 = -8						; size = 8
tv162 = 8						; size = 2
_nPercent$ = 8						; size = 4
_UpdateProgressBarProc PROC				; COMDAT

; 604  : {

  00000	83 ec 08	 sub	 esp, 8

; 605  : 	HWND hProgressBar = GetDlgItem (hCurPage, nPbar);

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nPbar@@3HA ; nPbar
  00008	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  0000e	53		 push	 ebx
  0000f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	50		 push	 eax
  00018	51		 push	 ecx
  00019	ff d3		 call	 ebx

; 606  : 	SendMessage (hProgressBar, PBM_SETPOS, (int) (100.0 * nPercent / 100), 0);

  0001b	db 44 24 18	 fild	 DWORD PTR _nPercent$[esp+16]
  0001f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4059000000000000
  00025	8b f0		 mov	 esi, eax
  00027	d9 7c 24 18	 fnstcw	 WORD PTR tv162[esp+16]
  0002b	6a 00		 push	 0
  0002d	0f b7 44 24 1c	 movzx	 eax, WORD PTR tv162[esp+20]
  00032	dc c9		 fmul	 ST(1), ST(0)
  00034	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00039	89 44 24 10	 mov	 DWORD PTR tv94[esp+24], eax
  0003d	de f9		 fdivp	 ST(1), ST(0)
  0003f	d9 6c 24 10	 fldcw	 WORD PTR tv94[esp+24]
  00043	df 7c 24 10	 fistp	 QWORD PTR tv72[esp+24]
  00047	8b 54 24 10	 mov	 edx, DWORD PTR tv72[esp+24]
  0004b	52		 push	 edx
  0004c	68 02 04 00 00	 push	 1026			; 00000402H
  00051	d9 6c 24 24	 fldcw	 WORD PTR tv162[esp+28]
  00055	56		 push	 esi
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 607  : 	InvalidateRect (hProgressBar, NULL, TRUE);

  0005c	6a 01		 push	 1
  0005e	6a 00		 push	 0
  00060	56		 push	 esi
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 608  : 	ShowWindow(hProgressBar, SW_HIDE);

  00067	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__ShowWindow@8
  0006d	6a 00		 push	 0
  0006f	56		 push	 esi
  00070	ff d7		 call	 edi

; 609  : 	ShowWindow(hProgressBar, SW_SHOW);

  00072	6a 05		 push	 5
  00074	56		 push	 esi
  00075	ff d7		 call	 edi

; 610  : 	// Prevent the IDC_LOG_WINDOW item from partially disappearing at higher DPIs
; 611  : 	ShowWindow(GetDlgItem (hCurPage, IDC_LOG_WINDOW), SW_HIDE);

  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  0007c	6a 00		 push	 0
  0007e	68 f9 03 00 00	 push	 1017			; 000003f9H
  00083	50		 push	 eax
  00084	ff d3		 call	 ebx
  00086	50		 push	 eax
  00087	ff d7		 call	 edi

; 612  : 	ShowWindow(GetDlgItem (hCurPage, IDC_LOG_WINDOW), SW_SHOW);

  00089	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  0008f	6a 05		 push	 5
  00091	68 f9 03 00 00	 push	 1017			; 000003f9H
  00096	51		 push	 ecx
  00097	ff d3		 call	 ebx
  00099	50		 push	 eax
  0009a	ff d7		 call	 edi

; 613  : 	RefreshUIGFX();

  0009c	e8 00 00 00 00	 call	 _RefreshUIGFX
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi

; 614  : 	return TRUE;

  000a3	b8 01 00 00 00	 mov	 eax, 1
  000a8	5b		 pop	 ebx

; 615  : }

  000a9	83 c4 08	 add	 esp, 8
  000ac	c3		 ret	 0
_UpdateProgressBarProc ENDP
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN5@c_str
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogtpy
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $LN5@Eos
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 2115 : 		}

  00014	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 2115 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 590  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 617  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 27		 je	 SHORT $LN15@Tidy

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00013	72 21		 jb	 SHORT $LN15@Tidy

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 0d		 jbe	 SHORT $LN13@Tidy

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	57		 push	 edi
  00020	53		 push	 ebx
  00021	6a 10		 push	 16			; 00000010H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _memcpy_s
  00029	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@Tidy:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00032	83 c4 04	 add	 esp, 4
  00035	5b		 pop	 ebx
$LN15@Tidy:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00036	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00039	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00040	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 2160 : 		}

  00047	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xran
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv130 = 8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 55		 jbe	 SHORT $LN30@erase

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00030	72 09		 jb	 SHORT $LN8@erase
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv130[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase
$LN8@erase:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv130[esp+12], ebp
$LN9@erase:
  0003f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00042	72 05		 jb	 SHORT $LN12@erase
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	eb 02		 jmp	 SHORT $LN13@erase
$LN12@erase:
  00049	8b d5		 mov	 edx, ebp
$LN13@erase:
  0004b	2b c7		 sub	 eax, edi
  0004d	50		 push	 eax
  0004e	8b 44 24 18	 mov	 eax, DWORD PTR tv130[esp+16]
  00052	03 c3		 add	 eax, ebx
  00054	03 c7		 add	 eax, edi
  00056	50		 push	 eax
  00057	2b cb		 sub	 ecx, ebx
  00059	51		 push	 ecx
  0005a	03 d3		 add	 edx, ebx
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00062	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00065	2b c7		 sub	 eax, edi
  00067	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0006a	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0006e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00071	72 03		 jb	 SHORT $LN26@erase
  00073	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN26@erase:
  00076	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  0007a	5d		 pop	 ebp
$LN30@erase:
  0007b	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  0007c	8b c6		 mov	 eax, esi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx

; 1275 : 		}

  00080	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 0f	 or	 esi, 15			; 0000000fH

; 2085 : 		if (max_size() < _Newres)

  00038	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN6@Copy

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  0003f	eb 22		 jmp	 SHORT $LN4@Copy
$LN6@Copy:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00041	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e6		 mul	 esi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b d1		 cmp	 edx, ecx
  00053	73 0e		 jae	 SHORT $LN4@Copy
  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005a	2b c1		 sub	 eax, ecx
  0005c	3b d8		 cmp	 ebx, eax
  0005e	77 03		 ja	 SHORT $LN4@Copy

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00060	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00063	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00066	6a 00		 push	 0
  00068	51		 push	 ecx
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00070	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00075	83 c4 08	 add	 esp, 8
  00078	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0007b	eb 28		 jmp	 SHORT $LN16@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007d	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00080	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00083	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00086	40		 inc	 eax
  00087	6a 00		 push	 0
  00089	50		 push	 eax
  0008a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0008e	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00093	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00096	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  00099	b8 00 00 00 00	 mov	 eax, $LN106@Copy
  0009e	c3		 ret	 0
$LN106@Copy:
  0009f	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a2	8b 75 e8	 mov	 esi, DWORD PTR __Newres$[ebp]
$LN16@Copy:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000a5	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000a8	85 db		 test	 ebx, ebx
  000aa	76 20		 jbe	 SHORT $LN71@Copy

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000ac	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000b0	72 05		 jb	 SHORT $LN63@Copy
  000b2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b5	eb 03		 jmp	 SHORT $LN64@Copy
$LN63@Copy:
  000b7	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN64@Copy:
  000ba	53		 push	 ebx
  000bb	50		 push	 eax
  000bc	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000bf	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _memcpy_s
  000c9	83 c4 10	 add	 esp, 16			; 00000010H
$LN71@Copy:

; 2106 : 		_Tidy(true);

  000cc	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000d0	72 0c		 jb	 SHORT $LN87@Copy
  000d2	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000db	83 c4 04	 add	 esp, 4
$LN87@Copy:

; 2107 : 		_Bx._Ptr = _Ptr;

  000de	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000e1	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000e4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e7	89 08		 mov	 DWORD PTR [eax], ecx

; 2108 : 		_Myres = _Newres;

  000e9	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000ec	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  000ef	83 fe 10	 cmp	 esi, 16			; 00000010H
  000f2	72 02		 jb	 SHORT $LN101@Copy
  000f4	8b c1		 mov	 eax, ecx
$LN101@Copy:
  000f6	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 2110 : 		}

  000fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00104	59		 pop	 ecx
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010e	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00111	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00115	72 0c		 jb	 SHORT $LN51@Copy
  00117	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00120	83 c4 04	 add	 esp, 4
$LN51@Copy:

; 2100 : 			_RERAISE;

  00123	6a 00		 push	 0
  00125	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0012c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00133	6a 00		 push	 0
  00135	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN109@Copy:
  0013e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $LN17@basic_stri
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN17@basic_stri:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 907  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xlen
; Function compile flags: /Ogtpy
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	53		 push	 ebx

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  0000b	76 05		 jbe	 SHORT $LN6@Grow

; 2121 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow:

; 2122 : 		if (_Myres < _Newsize)

  00012	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00015	3b c3		 cmp	 eax, ebx
  00017	73 19		 jae	 SHORT $LN5@Grow

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001c	50		 push	 eax
  0001d	53		 push	 ebx
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c9		 xor	 ecx, ecx
  00027	3b cb		 cmp	 ecx, ebx
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5b		 pop	 ebx

; 2130 : 		}

  0002f	c2 08 00	 ret	 8
$LN5@Grow:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  00037	74 52		 je	 SHORT $LN3@Grow
  00039	83 fb 10	 cmp	 ebx, 16			; 00000010H
  0003c	73 4d		 jae	 SHORT $LN3@Grow
  0003e	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  0003f	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00042	3b df		 cmp	 ebx, edi
  00044	73 02		 jae	 SHORT $LN9@Grow
  00046	8b fb		 mov	 edi, ebx
$LN9@Grow:
  00048	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004b	72 21		 jb	 SHORT $LN33@Grow
  0004d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00050	55		 push	 ebp
  00051	8b 28		 mov	 ebp, DWORD PTR [eax]
  00053	85 ff		 test	 edi, edi
  00055	76 0d		 jbe	 SHORT $LN31@Grow
  00057	57		 push	 edi
  00058	55		 push	 ebp
  00059	6a 10		 push	 16			; 00000010H
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _memcpy_s
  00061	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@Grow:
  00064	55		 push	 ebp
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	83 c4 04	 add	 esp, 4
  0006d	5d		 pop	 ebp
$LN33@Grow:
  0006e	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00071	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00078	33 c9		 xor	 ecx, ecx
  0007a	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  0007f	3b cb		 cmp	 ecx, ebx
  00081	5f		 pop	 edi
  00082	1b c0		 sbb	 eax, eax
  00084	5e		 pop	 esi
  00085	f7 d8		 neg	 eax
  00087	5b		 pop	 ebx

; 2130 : 		}

  00088	c2 08 00	 ret	 8
$LN3@Grow:

; 2127 : 		else if (_Newsize == 0)

  0008b	85 db		 test	 ebx, ebx
  0008d	75 20		 jne	 SHORT $LN49@Grow

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  0008f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00092	83 f8 10	 cmp	 eax, 16			; 00000010H
  00095	72 12		 jb	 SHORT $LN47@Grow
  00097	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  0009a	33 c9		 xor	 ecx, ecx
  0009c	3b cb		 cmp	 ecx, ebx
  0009e	88 1e		 mov	 BYTE PTR [esi], bl
  000a0	1b c0		 sbb	 eax, eax
  000a2	5e		 pop	 esi
  000a3	f7 d8		 neg	 eax
  000a5	5b		 pop	 ebx

; 2130 : 		}

  000a6	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN47@Grow:
  000a9	83 c6 04	 add	 esi, 4
  000ac	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN49@Grow:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000af	33 c9		 xor	 ecx, ecx
  000b1	3b cb		 cmp	 ecx, ebx
  000b3	1b c0		 sbb	 eax, eax
  000b5	5e		 pop	 esi
  000b6	f7 d8		 neg	 eax
  000b8	5b		 pop	 ebx

; 2130 : 		}

  000b9	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 951  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 952  : 		if (_Right.size() < _Roff)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR __Roff$[esp+12]
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 7d 14	 cmp	 DWORD PTR [ebp+20], edi
  00011	73 05		 jae	 SHORT $LN5@append

; 953  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@append:

; 954  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 955  : 		if (_Num < _Count)

  0001b	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Count$[esp+12]
  0001f	2b c7		 sub	 eax, edi
  00021	3b c3		 cmp	 eax, ebx
  00023	73 02		 jae	 SHORT $LN4@append

; 956  : 			_Count = _Num;	// trim _Count to size

  00025	8b d8		 mov	 ebx, eax
$LN4@append:

; 957  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00027	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002a	83 c9 ff	 or	 ecx, -1
  0002d	2b c8		 sub	 ecx, eax
  0002f	3b cb		 cmp	 ecx, ebx
  00031	76 07		 jbe	 SHORT $LN2@append
  00033	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00036	3b d0		 cmp	 edx, eax
  00038	73 05		 jae	 SHORT $LN3@append
$LN2@append:

; 958  : 			_String_base::_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append:

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 86 ab 00 00
	00		 jbe	 $LN87@append
  00047	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0004a	03 fb		 add	 edi, ebx
  0004c	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004f	76 05		 jbe	 SHORT $LN17@append
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@append:
  00056	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00059	3b c7		 cmp	 eax, edi
  0005b	73 1f		 jae	 SHORT $LN16@append
  0005d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00060	50		 push	 eax
  00061	57		 push	 edi
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ff		 test	 edi, edi
$LN88@append:
  0006b	0f 86 81 00 00
	00		 jbe	 $LN87@append

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

  00071	83 7d 18 10	 cmp	 DWORD PTR [ebp+24], 16	; 00000010H
  00075	72 2f		 jb	 SHORT $LN64@append
  00077	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]
  0007a	eb 2d		 jmp	 SHORT $LN65@append

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN16@append:
  0007c	85 ff		 test	 edi, edi
  0007e	75 eb		 jne	 SHORT $LN88@append
  00080	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00083	83 f8 10	 cmp	 eax, 16			; 00000010H
  00086	72 0f		 jb	 SHORT $LN58@append
  00088	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008b	5f		 pop	 edi
  0008c	c6 00 00	 mov	 BYTE PTR [eax], 0

; 965  : 			}
; 966  : 		return (*this);

  0008f	8b c6		 mov	 eax, esi
  00091	5e		 pop	 esi
  00092	5d		 pop	 ebp
  00093	5b		 pop	 ebx

; 967  : 		}

  00094	c2 0c 00	 ret	 12			; 0000000cH

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN58@append:
  00097	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009a	5f		 pop	 edi
  0009b	c6 00 00	 mov	 BYTE PTR [eax], 0

; 965  : 			}
; 966  : 		return (*this);

  0009e	8b c6		 mov	 eax, esi
  000a0	5e		 pop	 esi
  000a1	5d		 pop	 ebp
  000a2	5b		 pop	 ebx

; 967  : 		}

  000a3	c2 0c 00	 ret	 12			; 0000000cH

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

$LN64@append:
  000a6	83 c5 04	 add	 ebp, 4
$LN65@append:
  000a9	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000ac	83 f8 10	 cmp	 eax, 16			; 00000010H
  000af	72 05		 jb	 SHORT $LN68@append
  000b1	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000b4	eb 03		 jmp	 SHORT $LN69@append
$LN68@append:
  000b6	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN69@append:
  000b9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000bc	53		 push	 ebx
  000bd	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Roff$[esp+16]
  000c1	03 eb		 add	 ebp, ebx
  000c3	2b c1		 sub	 eax, ecx
  000c5	55		 push	 ebp
  000c6	50		 push	 eax
  000c7	03 ca		 add	 ecx, edx
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 964  : 			_Eos(_Num);

  000d2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d9	72 10		 jb	 SHORT $LN82@append
  000db	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000de	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000e2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000e3	8b c6		 mov	 eax, esi
  000e5	5e		 pop	 esi
  000e6	5d		 pop	 ebp
  000e7	5b		 pop	 ebx

; 967  : 		}

  000e8	c2 0c 00	 ret	 12			; 0000000cH

; 964  : 			_Eos(_Num);

$LN82@append:
  000eb	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ee	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN87@append:
  000f2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000f3	8b c6		 mov	 eax, esi
  000f5	5e		 pop	 esi
  000f6	5d		 pop	 ebp
  000f7	5b		 pop	 ebx

; 967  : 		}

  000f8	c2 0c 00	 ret	 12			; 0000000cH
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Right$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 10	 mov	 ebp, DWORD PTR __Roff$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 6b 14	 cmp	 DWORD PTR [ebx+20], ebp
  00011	73 05		 jae	 SHORT $LN5@assign

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fd		 sub	 edi, ebp
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f3		 cmp	 esi, ebx
  00029	75 1f		 jne	 SHORT $LN3@assign

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fd		 add	 edi, ebp
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	55		 push	 ebp
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign:

; 1055 : 		else if (_Grow(_Num))

  0004a	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004d	76 05		 jbe	 SHORT $LN17@assign
  0004f	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign:
  00054	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00057	3b c7		 cmp	 eax, edi
  00059	73 1b		 jae	 SHORT $LN16@assign
  0005b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005e	50		 push	 eax
  0005f	57		 push	 edi
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00067	85 ff		 test	 edi, edi
$LN87@assign:
  00069	76 66		 jbe	 SHORT $LN86@assign

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006b	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0006f	72 2f		 jb	 SHORT $LN64@assign
  00071	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00074	eb 2d		 jmp	 SHORT $LN65@assign

; 1055 : 		else if (_Grow(_Num))

$LN16@assign:
  00076	85 ff		 test	 edi, edi
  00078	75 ef		 jne	 SHORT $LN87@assign
  0007a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0007d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00080	72 0f		 jb	 SHORT $LN58@assign
  00082	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00085	5f		 pop	 edi
  00086	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00089	8b c6		 mov	 eax, esi
  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	5b		 pop	 ebx

; 1061 : 		}

  0008e	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN58@assign:
  00091	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00098	8b c6		 mov	 eax, esi
  0009a	5e		 pop	 esi
  0009b	5d		 pop	 ebp
  0009c	5b		 pop	 ebx

; 1061 : 		}

  0009d	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN64@assign:
  000a0	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN65@assign:
  000a3	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000a6	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a9	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000ac	72 04		 jb	 SHORT $LN68@assign
  000ae	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b0	eb 02		 jmp	 SHORT $LN69@assign
$LN68@assign:
  000b2	8b c3		 mov	 eax, ebx
$LN69@assign:
  000b4	57		 push	 edi
  000b5	03 d5		 add	 edx, ebp
  000b7	52		 push	 edx
  000b8	51		 push	 ecx
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _memcpy_s
  000bf	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000c2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c9	72 02		 jb	 SHORT $LN82@assign
  000cb	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN82@assign:
  000cd	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN86@assign:
  000d1	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000d2	8b c6		 mov	 eax, esi
  000d4	5e		 pop	 esi
  000d5	5d		 pop	 ebp
  000d6	5b		 pop	 ebx

; 1061 : 		}

  000d7	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 ed		 test	 ebp, ebp
  0000b	74 46		 je	 SHORT $LN93@assign@2
  0000d	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 fa 10	 cmp	 edx, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN12@assign@2
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@2
$LN12@assign@2:
  0001c	8b c8		 mov	 ecx, eax
$LN13@assign@2:
  0001e	3b e9		 cmp	 ebp, ecx
  00020	72 31		 jb	 SHORT $LN93@assign@2
  00022	83 fa 10	 cmp	 edx, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN16@assign@2
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@2
$LN16@assign@2:
  0002b	8b c8		 mov	 ecx, eax
$LN17@assign@2:
  0002d	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00030	03 f9		 add	 edi, ecx
  00032	3b fd		 cmp	 edi, ebp
  00034	76 1d		 jbe	 SHORT $LN93@assign@2

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 fa 10	 cmp	 edx, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN20@assign@2
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@2:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b e8		 sub	 ebp, eax
  00044	55		 push	 ebp
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp

; 1080 : 		}

  00050	c2 08 00	 ret	 8
$LN93@assign@2:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00053	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  00057	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0005a	76 05		 jbe	 SHORT $LN27@assign@2
  0005c	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@2:
  00061	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00064	3b c7		 cmp	 eax, edi
  00066	73 20		 jae	 SHORT $LN26@assign@2
  00068	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0006b	52		 push	 edx
  0006c	57		 push	 edi
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00074	85 ff		 test	 edi, edi
$LN94@assign@2:
  00076	76 56		 jbe	 SHORT $LN90@assign@2

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  00078	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0007b	53		 push	 ebx
  0007c	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  0007f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00082	72 2c		 jb	 SHORT $LN74@assign@2
  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	eb 2a		 jmp	 SHORT $LN75@assign@2

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@2:
  00088	85 ff		 test	 edi, edi
  0008a	75 ea		 jne	 SHORT $LN94@assign@2
  0008c	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00092	72 0e		 jb	 SHORT $LN68@assign@2
  00094	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00097	5f		 pop	 edi
  00098	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5d		 pop	 ebp

; 1080 : 		}

  0009f	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN68@assign@2:
  000a2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000a5	5f		 pop	 edi
  000a6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  000a9	8b c6		 mov	 eax, esi
  000ab	5e		 pop	 esi
  000ac	5d		 pop	 ebp

; 1080 : 		}

  000ad	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN74@assign@2:
  000b0	8b c3		 mov	 eax, ebx
$LN75@assign@2:
  000b2	57		 push	 edi
  000b3	55		 push	 ebp
  000b4	51		 push	 ecx
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _memcpy_s
  000bb	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000be	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c2	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c5	72 02		 jb	 SHORT $LN88@assign@2
  000c7	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN88@assign@2:
  000c9	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
  000cd	5b		 pop	 ebx
$LN90@assign@2:
  000ce	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000cf	8b c6		 mov	 eax, esi
  000d1	5e		 pop	 esi
  000d2	5d		 pop	 ebp

; 1080 : 		}

  000d3	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 971  : 
; 972  :  #if _HAS_ITERATOR_DEBUGGING
; 973  : 		if (_Count != 0)
; 974  : 			_DEBUG_POINTER(_Ptr);
; 975  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 976  : 
; 977  : 		if (_Inside(_Ptr))

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 46		 je	 SHORT $LN4@append@2
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 10	 cmp	 edi, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN14@append@2
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN15@append@2
$LN14@append@2:
  0001c	8b c8		 mov	 ecx, eax
$LN15@append@2:
  0001e	3b d1		 cmp	 edx, ecx
  00020	72 31		 jb	 SHORT $LN4@append@2
  00022	83 ff 10	 cmp	 edi, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN18@append@2
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN19@append@2
$LN18@append@2:
  0002b	8b c8		 mov	 ecx, eax
$LN19@append@2:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	03 d9		 add	 ebx, ecx
  00032	3b da		 cmp	 ebx, edx
  00034	76 1d		 jbe	 SHORT $LN4@append@2

; 978  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 ff 10	 cmp	 edi, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN22@append@2
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN22@append@2:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b d0		 sub	 edx, eax
  00044	52		 push	 edx
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx

; 989  : 		}

  00050	c2 08 00	 ret	 8
$LN4@append@2:

; 979  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	83 ca ff	 or	 edx, -1
  00059	55		 push	 ebp
  0005a	8b 6c 24 18	 mov	 ebp, DWORD PTR __Count$[esp+12]
  0005e	2b d0		 sub	 edx, eax
  00060	3b d5		 cmp	 edx, ebp
  00062	76 07		 jbe	 SHORT $LN2@append@2
  00064	8d 0c 28	 lea	 ecx, DWORD PTR [eax+ebp]
  00067	3b c8		 cmp	 ecx, eax
  00069	73 05		 jae	 SHORT $LN3@append@2
$LN2@append@2:

; 980  : 			_String_base::_Xlen();	// result too long

  0006b	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@2:

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00070	85 ed		 test	 ebp, ebp
  00072	0f 86 87 00 00
	00		 jbe	 $LN92@append@2
  00078	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0007b	03 fd		 add	 edi, ebp
  0007d	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00080	76 05		 jbe	 SHORT $LN29@append@2
  00082	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN29@append@2:
  00087	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0008a	3b c7		 cmp	 eax, edi
  0008c	73 1f		 jae	 SHORT $LN28@append@2
  0008e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00091	52		 push	 edx
  00092	57		 push	 edi
  00093	8b ce		 mov	 ecx, esi
  00095	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0009a	85 ff		 test	 edi, edi
$LN95@append@2:
  0009c	76 61		 jbe	 SHORT $LN92@append@2

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

  0009e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000a1	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a4	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a7	72 2e		 jb	 SHORT $LN76@append@2
  000a9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000ab	eb 2c		 jmp	 SHORT $LN77@append@2

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN28@append@2:
  000ad	85 ff		 test	 edi, edi
  000af	75 eb		 jne	 SHORT $LN95@append@2
  000b1	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000b4	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b7	72 0f		 jb	 SHORT $LN70@append@2
  000b9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000bc	5d		 pop	 ebp
  000bd	5f		 pop	 edi
  000be	c6 00 00	 mov	 BYTE PTR [eax], 0

; 987  : 			}
; 988  : 		return (*this);

  000c1	8b c6		 mov	 eax, esi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx

; 989  : 		}

  000c5	c2 08 00	 ret	 8

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN70@append@2:
  000c8	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000cb	5d		 pop	 ebp
  000cc	5f		 pop	 edi
  000cd	c6 00 00	 mov	 BYTE PTR [eax], 0

; 987  : 			}
; 988  : 		return (*this);

  000d0	8b c6		 mov	 eax, esi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx

; 989  : 		}

  000d4	c2 08 00	 ret	 8

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

$LN76@append@2:
  000d7	8b d3		 mov	 edx, ebx
$LN77@append@2:
  000d9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000dc	55		 push	 ebp
  000dd	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  000e1	2b c1		 sub	 eax, ecx
  000e3	55		 push	 ebp
  000e4	50		 push	 eax
  000e5	03 ca		 add	 ecx, edx
  000e7	51		 push	 ecx
  000e8	e8 00 00 00 00	 call	 _memcpy_s
  000ed	83 c4 10	 add	 esp, 16			; 00000010H

; 986  : 			_Eos(_Num);

  000f0	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000f4	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000f7	72 02		 jb	 SHORT $LN90@append@2
  000f9	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN90@append@2:
  000fb	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN92@append@2:
  000ff	5d		 pop	 ebp
  00100	5f		 pop	 edi

; 987  : 			}
; 988  : 		return (*this);

  00101	8b c6		 mov	 eax, esi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx

; 989  : 		}

  00105	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 722  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 723  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 724  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@3:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@assign@3
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 1086 : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 992  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 993  : 		_DEBUG_POINTER(_Ptr);
; 994  : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@append@3:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@append@3
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 995  : 		}

  00022	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$LL37@basic_stri@2:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL37@basic_stri@2
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 654  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 935  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 936  : 		return (append(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL7@operator
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 937  : 		}

  00022	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
_TEXT	SEGMENT
$T100214 = -44						; size = 4
$T100211 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 53   : 	{	// return string + NTCS

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 54   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 44 24 40	 mov	 eax, DWORD PTR __Left$[esp+52]
  00029	33 db		 xor	 ebx, ebx
  0002b	6a ff		 push	 -1
  0002d	53		 push	 ebx
  0002e	50		 push	 eax
  0002f	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T100211[esp+68]
  00033	89 5c 24 18	 mov	 DWORD PTR $T100214[esp+68], ebx
  00037	c7 44 24 34 0f
	00 00 00	 mov	 DWORD PTR $T100211[esp+92], 15 ; 0000000fH
  0003f	89 5c 24 30	 mov	 DWORD PTR $T100211[esp+88], ebx
  00043	88 5c 24 20	 mov	 BYTE PTR $T100211[esp+72], bl
  00047	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004c	8b 54 24 44	 mov	 edx, DWORD PTR __Right$[esp+52]
  00050	8b c2		 mov	 eax, edx
  00052	89 5c 24 34	 mov	 DWORD PTR __$EHRec$[esp+64], ebx
  00056	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL90@operator@2:
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	40		 inc	 eax
  00063	3a cb		 cmp	 cl, bl
  00065	75 f9		 jne	 SHORT $LL90@operator@2
  00067	2b c6		 sub	 eax, esi
  00069	50		 push	 eax
  0006a	52		 push	 edx
  0006b	8d 4c 24 18	 lea	 ecx, DWORD PTR $T100211[esp+64]
  0006f	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00074	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00078	6a ff		 push	 -1
  0007a	53		 push	 ebx
  0007b	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00082	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00085	50		 push	 eax
  00086	8b ce		 mov	 ecx, esi
  00088	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  0008b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00090	83 7c 24 28 10	 cmp	 DWORD PTR $T100211[esp+80], 16 ; 00000010H
  00095	72 0d		 jb	 SHORT $LN91@operator@2
  00097	8b 4c 24 14	 mov	 ecx, DWORD PTR $T100211[esp+60]
  0009b	51		 push	 ecx
  0009c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a1	83 c4 04	 add	 esp, 4
$LN91@operator@2:
  000a4	8b c6		 mov	 eax, esi

; 55   : 	}

  000a6	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b1	59		 pop	 ecx
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	83 c4 2c	 add	 esp, 44			; 0000002cH
  000b7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T100211[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_C@_0BE@FMNDIKAG@INSTALL_IN_PROGRESS?$AA@	; `string'
PUBLIC	??_C@_0BE@JGHDAHN@SETUP_PROGRESS_INFO?$AA@	; `string'
PUBLIC	??_C@_0BF@FGINDNOJ@SETUP_PROGRESS_TITLE?$AA@	; `string'
PUBLIC	??_C@_07PJFGKPND@INSTALL?$AA@			; `string'
PUBLIC	??_C@_0CB@JOIIBOEC@Software?2Classes?2TrueCryptVolume@ ; `string'
PUBLIC	??_C@_0L@LGADMAPO@?2TrueCrypt?$AA@		; `string'
PUBLIC	??_C@_0M@HNGGAEIF@?2CipherShed?$AA@		; `string'
PUBLIC	??_C@_0BK@GJOJHDCA@SETUP_UPGRADE_DESTINATION?$AA@ ; `string'
PUBLIC	??_C@_0BD@BMMFNCA@SETUP_OPTIONS_INFO?$AA@	; `string'
PUBLIC	??_C@_0BE@EDFPLLMN@SETUP_OPTIONS_TITLE?$AA@	; `string'
PUBLIC	??_C@_0BH@PEMNLIII@EXTRACTION_IN_PROGRESS?$AA@	; `string'
PUBLIC	??_C@_0BJ@LJFMAAFG@EXTRACTION_PROGRESS_INFO?$AA@ ; `string'
PUBLIC	??_C@_0BA@IBCNACGH@EXTRACTING_VERB?$AA@		; `string'
PUBLIC	??_C@_07LBPFAJBE@EXTRACT?$AA@			; `string'
PUBLIC	??_C@_0BF@HFEALDNI@AUTO_FOLDER_CREATION?$AA@	; `string'
PUBLIC	??_C@_0BI@OKGEFEFK@EXTRACTION_OPTIONS_INFO?$AA@	; `string'
PUBLIC	??_C@_0BJ@PDGEILOG@EXTRACTION_OPTIONS_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0M@GMDAANJE@CipherShed?2?$AA@		; `string'
PUBLIC	??_C@_0BI@ECIBEEIH@SETUP_MODE_HELP_INSTALL?$AA@	; `string'
PUBLIC	??_C@_0BI@JGKCNIKM@SETUP_MODE_HELP_UPGRADE?$AA@	; `string'
PUBLIC	??_C@_0BI@KCCOCEA@SETUP_MODE_HELP_EXTRACT?$AA@	; `string'
PUBLIC	??_C@_0BA@PHBLGFGD@SETUP_MODE_INFO?$AA@		; `string'
PUBLIC	??_C@_0BB@KMHMHMNP@SETUP_MODE_TITLE?$AA@	; `string'
PUBLIC	??_C@_07CNHFDDPI@UPGRADE?$AA@			; `string'
PUBLIC	??_C@_0BB@OFECFCBP@REPAIR_REINSTALL?$AA@	; `string'
PUBLIC	??_C@_0BH@MFJOAEDC@CANNOT_DISPLAY_LICENSE?$AA@	; `string'
PUBLIC	??_C@_06JHILMIHF@CANCEL?$AA@			; `string'
PUBLIC	??_C@_04PKHKLFPJ@PREV?$AA@			; `string'
PUBLIC	??_C@_04MOKMKBJN@NEXT?$AA@			; `string'
PUBLIC	??_C@_1DI@FKGEFKMH@?$AAI?$AA?5?$AA?$CG?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe?$AAr?$AAm?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BIA@MJJKLEKE@?$AAI?$AAM?$AAP?$AAO?$AAR?$AAT?$AAA?$AAN?$AAT?$AA?3?$AA?5?$AAB?$AAy?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk@ ; `string'
PUBLIC	??_C@_1LA@INOIFBMC@?$AAY?$AAo?$AAu?$AA?5?$AAm?$AAu?$AAs?$AAt?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AA?5?$AAt?$AAh?$AAe?$AAs?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe@ ; `string'
PUBLIC	??_C@_1DM@EGEEIDAI@?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe?$AAr?$AAm?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BF@EOKBACHI@SETUP_WIZARD_PAGE_?$CFd?$AA@	; `string'
PUBLIC	??_C@_0O@MGHONKG@IDD_INSTL_DLG?$AA@		; `string'
PUBLIC	??_C@_0BA@DJBAGGGN@SELECT_DEST_DIR?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_PageDialogProc@16
EXTRN	_NormalCursor:PROC
EXTRN	_DoInstall:PROC
EXTRN	_SystemRestoreDll:DWORD
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	__imp__RegOpenKeyExA@20:PROC
EXTRN	__access:PROC
EXTRN	__imp__SHGetSpecialFolderPathA@16:PROC
EXTRN	_bDesktopIconStatusDetermined:DWORD
EXTRN	__beginthread:PROC
EXTRN	_ExtractAllFilesThread:PROC
EXTRN	_DestExtractPath:BYTE
EXTRN	_WaitCursor:PROC
EXTRN	_strncat:PROC
EXTRN	_SetupFilesDir:BYTE
EXTRN	_CheckButton:PROC
EXTRN	_hUserBoldFont:DWORD
EXTRN	_bUpgrade:DWORD
EXTRN	_bRepairMode:DWORD
EXTRN	_DetermineUpgradeDowngradeStatus:PROC
EXTRN	_exit:PROC
EXTRN	_Error:PROC
EXTRN	_CompensateXDPI:PROC
EXTRN	_GetString:PROC
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	_SetCheckBox:PROC
EXTRN	_free:PROC
EXTRN	__imp__SetWindowTextA@8:PROC
EXTRN	_GetLegalNotices:PROC
EXTRN	_LastDialogId:DWORD
EXTRN	_sprintf_s:PROC
EXTRN	_LocalizeDialog:PROC
EXTRN	_bDesktopIcon:DWORD
EXTRN	_bAddToStartMenu:DWORD
EXTRN	_bRegisterFileExt:DWORD
EXTRN	_bForAllUsers:DWORD
EXTRN	_bSystemRestore:DWORD
EXTRN	__imp__SetDlgItemTextA@12:PROC
EXTRN	_BrowseDirectories:PROC
EXTRN	__imp__GetWindowTextLengthA@4:PROC
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	_IsButtonChecked:PROC
EXTRN	__imp__GetStockObject@4:PROC
EXTRN	__imp__SetBkMode@8:PROC
EXTRN	_OpenPageHelp:PROC
EXTRN	__imp__GetParent@4:PROC
EXTRN	_localcleanup:PROC
EXTRN	__imp__EndDialog@8:PROC
;	COMDAT ?PageDebugId@?1??PageDialogProc@@9@16@4PADA
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
_BSS	SEGMENT
?PageDebugId@?1??PageDialogProc@@9@16@4PADA DB 080H DUP (?) ; `PageDialogProc'::`2'::PageDebugId
_BSS	ENDS
;	COMDAT ??_C@_0BE@FMNDIKAG@INSTALL_IN_PROGRESS?$AA@
CONST	SEGMENT
??_C@_0BE@FMNDIKAG@INSTALL_IN_PROGRESS?$AA@ DB 'INSTALL_IN_PROGRESS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JGHDAHN@SETUP_PROGRESS_INFO?$AA@
CONST	SEGMENT
??_C@_0BE@JGHDAHN@SETUP_PROGRESS_INFO?$AA@ DB 'SETUP_PROGRESS_INFO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FGINDNOJ@SETUP_PROGRESS_TITLE?$AA@
CONST	SEGMENT
??_C@_0BF@FGINDNOJ@SETUP_PROGRESS_TITLE?$AA@ DB 'SETUP_PROGRESS_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PJFGKPND@INSTALL?$AA@
CONST	SEGMENT
??_C@_07PJFGKPND@INSTALL?$AA@ DB 'INSTALL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JOIIBOEC@Software?2Classes?2TrueCryptVolume@
CONST	SEGMENT
??_C@_0CB@JOIIBOEC@Software?2Classes?2TrueCryptVolume@ DB 'Software\Class'
	DB	'es\TrueCryptVolume', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LGADMAPO@?2TrueCrypt?$AA@
CONST	SEGMENT
??_C@_0L@LGADMAPO@?2TrueCrypt?$AA@ DB '\TrueCrypt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HNGGAEIF@?2CipherShed?$AA@
CONST	SEGMENT
??_C@_0M@HNGGAEIF@?2CipherShed?$AA@ DB '\CipherShed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GJOJHDCA@SETUP_UPGRADE_DESTINATION?$AA@
CONST	SEGMENT
??_C@_0BK@GJOJHDCA@SETUP_UPGRADE_DESTINATION?$AA@ DB 'SETUP_UPGRADE_DESTI'
	DB	'NATION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BMMFNCA@SETUP_OPTIONS_INFO?$AA@
CONST	SEGMENT
??_C@_0BD@BMMFNCA@SETUP_OPTIONS_INFO?$AA@ DB 'SETUP_OPTIONS_INFO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EDFPLLMN@SETUP_OPTIONS_TITLE?$AA@
CONST	SEGMENT
??_C@_0BE@EDFPLLMN@SETUP_OPTIONS_TITLE?$AA@ DB 'SETUP_OPTIONS_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PEMNLIII@EXTRACTION_IN_PROGRESS?$AA@
CONST	SEGMENT
??_C@_0BH@PEMNLIII@EXTRACTION_IN_PROGRESS?$AA@ DB 'EXTRACTION_IN_PROGRESS'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LJFMAAFG@EXTRACTION_PROGRESS_INFO?$AA@
CONST	SEGMENT
??_C@_0BJ@LJFMAAFG@EXTRACTION_PROGRESS_INFO?$AA@ DB 'EXTRACTION_PROGRESS_'
	DB	'INFO', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IBCNACGH@EXTRACTING_VERB?$AA@
CONST	SEGMENT
??_C@_0BA@IBCNACGH@EXTRACTING_VERB?$AA@ DB 'EXTRACTING_VERB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07LBPFAJBE@EXTRACT?$AA@
CONST	SEGMENT
??_C@_07LBPFAJBE@EXTRACT?$AA@ DB 'EXTRACT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HFEALDNI@AUTO_FOLDER_CREATION?$AA@
CONST	SEGMENT
??_C@_0BF@HFEALDNI@AUTO_FOLDER_CREATION?$AA@ DB 'AUTO_FOLDER_CREATION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OKGEFEFK@EXTRACTION_OPTIONS_INFO?$AA@
CONST	SEGMENT
??_C@_0BI@OKGEFEFK@EXTRACTION_OPTIONS_INFO?$AA@ DB 'EXTRACTION_OPTIONS_IN'
	DB	'FO', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PDGEILOG@EXTRACTION_OPTIONS_TITLE?$AA@
CONST	SEGMENT
??_C@_0BJ@PDGEILOG@EXTRACTION_OPTIONS_TITLE?$AA@ DB 'EXTRACTION_OPTIONS_T'
	DB	'ITLE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GMDAANJE@CipherShed?2?$AA@
CONST	SEGMENT
??_C@_0M@GMDAANJE@CipherShed?2?$AA@ DB 'CipherShed\', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ECIBEEIH@SETUP_MODE_HELP_INSTALL?$AA@
CONST	SEGMENT
??_C@_0BI@ECIBEEIH@SETUP_MODE_HELP_INSTALL?$AA@ DB 'SETUP_MODE_HELP_INSTA'
	DB	'LL', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JGKCNIKM@SETUP_MODE_HELP_UPGRADE?$AA@
CONST	SEGMENT
??_C@_0BI@JGKCNIKM@SETUP_MODE_HELP_UPGRADE?$AA@ DB 'SETUP_MODE_HELP_UPGRA'
	DB	'DE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KCCOCEA@SETUP_MODE_HELP_EXTRACT?$AA@
CONST	SEGMENT
??_C@_0BI@KCCOCEA@SETUP_MODE_HELP_EXTRACT?$AA@ DB 'SETUP_MODE_HELP_EXTRAC'
	DB	'T', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PHBLGFGD@SETUP_MODE_INFO?$AA@
CONST	SEGMENT
??_C@_0BA@PHBLGFGD@SETUP_MODE_INFO?$AA@ DB 'SETUP_MODE_INFO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KMHMHMNP@SETUP_MODE_TITLE?$AA@
CONST	SEGMENT
??_C@_0BB@KMHMHMNP@SETUP_MODE_TITLE?$AA@ DB 'SETUP_MODE_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CNHFDDPI@UPGRADE?$AA@
CONST	SEGMENT
??_C@_07CNHFDDPI@UPGRADE?$AA@ DB 'UPGRADE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OFECFCBP@REPAIR_REINSTALL?$AA@
CONST	SEGMENT
??_C@_0BB@OFECFCBP@REPAIR_REINSTALL?$AA@ DB 'REPAIR_REINSTALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MFJOAEDC@CANNOT_DISPLAY_LICENSE?$AA@
CONST	SEGMENT
??_C@_0BH@MFJOAEDC@CANNOT_DISPLAY_LICENSE?$AA@ DB 'CANNOT_DISPLAY_LICENSE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06JHILMIHF@CANCEL?$AA@
CONST	SEGMENT
??_C@_06JHILMIHF@CANCEL?$AA@ DB 'CANCEL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKHKLFPJ@PREV?$AA@
CONST	SEGMENT
??_C@_04PKHKLFPJ@PREV?$AA@ DB 'PREV', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MOKMKBJN@NEXT?$AA@
CONST	SEGMENT
??_C@_04MOKMKBJN@NEXT?$AA@ DB 'NEXT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@FKGEFKMH@?$AAI?$AA?5?$AA?$CG?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe?$AAr?$AAm?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@FKGEFKMH@?$AAI?$AA?5?$AA?$CG?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe?$AAr?$AAm?$AAs?$AA?$AA@ DB 'I'
	DB	00H, ' ', 00H, '&', 00H, 'a', 00H, 'c', 00H, 'c', 00H, 'e', 00H
	DB	'p', 00H, 't', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' '
	DB	00H, 'l', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 's', 00H
	DB	'e', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'm', 00H, 's'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BIA@MJJKLEKE@?$AAI?$AAM?$AAP?$AAO?$AAR?$AAT?$AAA?$AAN?$AAT?$AA?3?$AA?5?$AAB?$AAy?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk@
CONST	SEGMENT
??_C@_1BIA@MJJKLEKE@?$AAI?$AAM?$AAP?$AAO?$AAR?$AAT?$AAA?$AAN?$AAT?$AA?3?$AA?5?$AAB?$AAy?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk@ DB 'I'
	DB	00H, 'M', 00H, 'P', 00H, 'O', 00H, 'R', 00H, 'T', 00H, 'A', 00H
	DB	'N', 00H, 'T', 00H, ':', 00H, ' ', 00H, 'B', 00H, 'y', 00H, ' '
	DB	00H, 'c', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' '
	DB	00H, 'c', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'b', 00H
	DB	'o', 00H, 'x', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'l', 00H, 'o'
	DB	00H, 'w', 00H, ',', 00H, ' ', 00H, 'y', 00H, 'o', 00H, 'u', 00H
	DB	' ', 00H, 'a', 00H, 'c', 00H, 'c', 00H, 'e', 00H, 'p', 00H, 't'
	DB	00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, 's', 00H, 'e', 00H
	DB	' ', 00H, 'l', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 's'
	DB	00H, 'e', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'm', 00H
	DB	's', 00H, ' ', 00H, 'a', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 's'
	DB	00H, 'i', 00H, 'g', 00H, 'n', 00H, 'i', 00H, 'f', 00H, 'y', 00H
	DB	' ', 00H, 't', 00H, 'h', 00H, 'a', 00H, 't', 00H, ' ', 00H, 'y'
	DB	00H, 'o', 00H, 'u', 00H, ' ', 00H, 'u', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, 's', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd'
	DB	00H, ' ', 00H, 'a', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'a', 00H
	DB	'g', 00H, 'r', 00H, 'e', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'o'
	DB	00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, 'm', 00H, '.', 00H
	DB	' ', 00H, 'P', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'e'
	DB	00H, ' ', 00H, 'c', 00H, 'l', 00H, 'i', 00H, 'c', 00H, 'k', 00H
	DB	' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H, '''', 00H, 'a'
	DB	00H, 'r', 00H, 'r', 00H, 'o', 00H, 'w', 00H, ' ', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 'n', 00H, '''', 00H, ' ', 00H, 'i', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H
	DB	's', 00H, 'e', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e'
	DB	00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 't', 00H, ' ', 00H
	DB	'o', 00H, 'f', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' '
	DB	00H, 'l', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 's', 00H
	DB	'e', 00H, '.', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LA@INOIFBMC@?$AAY?$AAo?$AAu?$AA?5?$AAm?$AAu?$AAs?$AAt?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AA?5?$AAt?$AAh?$AAe?$AAs?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe@
CONST	SEGMENT
??_C@_1LA@INOIFBMC@?$AAY?$AAo?$AAu?$AA?5?$AAm?$AAu?$AAs?$AAt?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AA?5?$AAt?$AAh?$AAe?$AAs?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe@ DB 'Y'
	DB	00H, 'o', 00H, 'u', 00H, ' ', 00H, 'm', 00H, 'u', 00H, 's', 00H
	DB	't', 00H, ' ', 00H, 'a', 00H, 'c', 00H, 'c', 00H, 'e', 00H, 'p'
	DB	00H, 't', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, 's', 00H
	DB	'e', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'n'
	DB	00H, 's', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'm', 00H, 's', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, 'e', 00H, ' ', 00H, 'y', 00H, 'o', 00H, 'u', 00H
	DB	' ', 00H, 'c', 00H, 'a', 00H, 'n', 00H, ' ', 00H, 'u', 00H, 's'
	DB	00H, 'e', 00H, ',', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 'c', 00H, 't', 00H, ',', 00H, ' ', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'C', 00H, 'i', 00H, 'p'
	DB	00H, 'h', 00H, 'e', 00H, 'r', 00H, 'S', 00H, 'h', 00H, 'e', 00H
	DB	'd', 00H, '.', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@EGEEIDAI@?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe?$AAr?$AAm?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@EGEEIDAI@?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe?$AAr?$AAm?$AAs?$AA?$AA@ DB 'P'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ' ', 00H, 't', 00H, 'h'
	DB	00H, 'e', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'n', 00H, 's', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, 'm', 00H, 's', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EOKBACHI@SETUP_WIZARD_PAGE_?$CFd?$AA@
CONST	SEGMENT
??_C@_0BF@EOKBACHI@SETUP_WIZARD_PAGE_?$CFd?$AA@ DB 'SETUP_WIZARD_PAGE_%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MGHONKG@IDD_INSTL_DLG?$AA@
CONST	SEGMENT
??_C@_0O@MGHONKG@IDD_INSTL_DLG?$AA@ DB 'IDD_INSTL_DLG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DJBAGGGN@SELECT_DEST_DIR?$AA@
CONST	SEGMENT
??_C@_0BA@DJBAGGGN@SELECT_DEST_DIR?$AA@ DB 'SELECT_DEST_DIR', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\setup\wizard.c
CONST	ENDS
;	COMDAT _PageDialogProc@16
_TEXT	SEGMENT
$T100587 = -388						; size = 4
_driverVersion$95621 = -388				; size = 4
_hKey$95679 = -384					; size = 4
_driverVersion$95653 = -380				; size = 4
$T100581 = -376						; size = 28
$T100579 = -348						; size = 28
$T100578 = -320						; size = 28
$T100580 = -292						; size = 28
_path$95659 = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_PageDialogProc@16 PROC					; COMDAT

; 169  : {

  00000	81 ec 84 01 00
	00		 sub	 esp, 388		; 00000184H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 80 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+388], eax
  00014	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR _wParam$[esp+384]

; 170  : 	static char PageDebugId[128];
; 171  : 	WORD lw = LOWORD (wParam);
; 172  : 	WORD hw = HIWORD (wParam);
; 173  : 
; 174  : 	hCurPage = hwndDlg;
; 175  : 
; 176  : 	switch (uMsg)

  0001b	8b 8c 24 8c 01
	00 00		 mov	 ecx, DWORD PTR _uMsg$[esp+384]
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	8b b4 24 90 01
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+392]

; 298  : 
; 299  : 		case EXTRACTION_PROGRESS_PAGE:
; 300  : 
; 301  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("EXTRACTING_VERB"));

  0002b	33 db		 xor	 ebx, ebx
  0002d	8b d0		 mov	 edx, eax
  0002f	c1 ea 10	 shr	 edx, 16			; 00000010H
  00032	89 5c 24 08	 mov	 DWORD PTR $T100587[esp+396], ebx
  00036	57		 push	 edi
  00037	89 35 00 00 00
	00		 mov	 DWORD PTR ?hCurPage@@3PAUHWND__@@A, esi ; hCurPage
  0003d	83 f9 53	 cmp	 ecx, 83			; 00000053H
  00040	77 5f		 ja	 SHORT $LN70@PageDialog

; 170  : 	static char PageDebugId[128];
; 171  : 	WORD lw = LOWORD (wParam);
; 172  : 	WORD hw = HIWORD (wParam);
; 173  : 
; 174  : 	hCurPage = hwndDlg;
; 175  : 
; 176  : 	switch (uMsg)

  00042	74 34		 je	 SHORT $LN30@PageDialog
  00044	83 e9 0f	 sub	 ecx, 15			; 0000000fH
  00047	74 28		 je	 SHORT $LN12@PageDialog
  00049	83 e9 05	 sub	 ecx, 5
  0004c	74 23		 je	 SHORT $LN12@PageDialog
  0004e	83 e9 02	 sub	 ecx, 2
  00051	75 1e		 jne	 SHORT $LN12@PageDialog

; 468  : 
; 469  : 	case WM_ENDSESSION:
; 470  : 
; 471  : 		bPromptTutorial = FALSE;
; 472  : 		bPromptReleaseNotes = FALSE;
; 473  : 
; 474  : 		EndDialog (MainDlg, 0);

  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00058	53		 push	 ebx
  00059	50		 push	 eax
  0005a	89 1d 00 00 00
	00		 mov	 DWORD PTR _bPromptTutorial, ebx
  00060	89 1d 00 00 00
	00		 mov	 DWORD PTR _bPromptReleaseNotes, ebx
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 475  : 		localcleanup ();

  0006c	e8 00 00 00 00	 call	 _localcleanup
$LN12@PageDialog:

; 476  : 		return 0;

  00071	33 c0		 xor	 eax, eax
  00073	e9 dc 0e 00 00	 jmp	 $LN60@PageDialog
$LN30@PageDialog:

; 462  : 
; 463  : 	case WM_HELP:
; 464  : 		if (bLicenseAccepted)

  00078	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bLicenseAccepted@@3HA, ebx ; bLicenseAccepted
  0007e	74 17		 je	 SHORT $LN29@PageDialog

; 465  : 			OpenPageHelp (GetParent (hwndDlg), nCurPageNo);

  00080	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00086	51		 push	 ecx
  00087	56		 push	 esi
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 _OpenPageHelp
  00094	83 c4 08	 add	 esp, 8
$LN29@PageDialog:

; 466  : 
; 467  : 		return 1;

  00097	b8 01 00 00 00	 mov	 eax, 1
  0009c	e9 b3 0e 00 00	 jmp	 $LN60@PageDialog
$LN70@PageDialog:

; 170  : 	static char PageDebugId[128];
; 171  : 	WORD lw = LOWORD (wParam);
; 172  : 	WORD hw = HIWORD (wParam);
; 173  : 
; 174  : 	hCurPage = hwndDlg;
; 175  : 
; 176  : 	switch (uMsg)

  000a1	81 e9 10 01 00
	00		 sub	 ecx, 272		; 00000110H
  000a7	0f 84 dc 02 00
	00		 je	 $LN57@PageDialog
  000ad	83 e9 01	 sub	 ecx, 1
  000b0	74 1b		 je	 SHORT $LN27@PageDialog
  000b2	83 e9 27	 sub	 ecx, 39			; 00000027H

; 565  : 				return 1;
; 566  : 
; 567  : 			}
; 568  : 		}
; 569  : 
; 570  : 		return 0;
; 571  : 
; 572  : 
; 573  : 	case WM_PAINT:
; 574  : 
; 575  : 		return 0; 
; 576  : 
; 577  : 
; 578  : 	case WM_CTLCOLORSTATIC:
; 579  : 
; 580  : 		/* This maintains the background under the transparent-backround texts */
; 581  : 
; 582  : 		SetBkMode ((HDC) wParam, TRANSPARENT);
; 583  : 		return ((LONG) (HBRUSH) (GetStockObject (NULL_BRUSH)));
; 584  : 
; 585  : 
; 586  : 	case WM_ERASEBKGND:
; 587  : 
; 588  : 		return 0;
; 589  : 	}
; 590  : 
; 591  : 	return 0;

  000b5	75 ba		 jne	 SHORT $LN12@PageDialog
  000b7	6a 01		 push	 1
  000b9	50		 push	 eax
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8
  000c0	6a 05		 push	 5
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStockObject@4
  000c8	e9 87 0e 00 00	 jmp	 $LN60@PageDialog
$LN27@PageDialog:

; 477  : 
; 478  : 
; 479  : 	case WM_COMMAND:
; 480  : 
; 481  : 		if (lw == IDC_AGREE && nCurPageNo == INTRO_PAGE)

  000cd	b9 fe 03 00 00	 mov	 ecx, 1022		; 000003feH
  000d2	66 3b c1	 cmp	 ax, cx
  000d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  000db	75 3c		 jne	 SHORT $LN26@PageDialog
  000dd	3b cb		 cmp	 ecx, ebx
  000df	75 70		 jne	 SHORT $LN24@PageDialog

; 482  : 		{
; 483  : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), IsButtonChecked (GetDlgItem (hwndDlg, IDC_AGREE)));

  000e1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  000e7	68 fe 03 00 00	 push	 1022			; 000003feH
  000ec	56		 push	 esi
  000ed	ff d7		 call	 edi
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 _IsButtonChecked
  000f5	83 c4 04	 add	 esp, 4
  000f8	50		 push	 eax
  000f9	68 02 04 00 00	 push	 1026			; 00000402H
  000fe	56		 push	 esi
  000ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00105	50		 push	 eax
  00106	ff d7		 call	 edi
  00108	50		 push	 eax
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 484  : 			return 1;

  0010f	b8 01 00 00 00	 mov	 eax, 1
  00114	e9 3b 0e 00 00	 jmp	 $LN60@PageDialog
$LN26@PageDialog:

; 485  : 		}
; 486  : 
; 487  : 		if (lw == IDC_WIZARD_MODE_EXTRACT_ONLY && nCurPageNo == WIZARD_MODE_PAGE)

  00119	bf 01 04 00 00	 mov	 edi, 1025		; 00000401H
  0011e	66 3b c7	 cmp	 ax, di
  00121	75 12		 jne	 SHORT $LN25@PageDialog
  00123	83 f9 01	 cmp	 ecx, 1
  00126	75 29		 jne	 SHORT $LN24@PageDialog

; 488  : 		{
; 489  : 			bExtractOnly = TRUE;

  00128	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bExtractOnly@@3HA, ecx ; bExtractOnly

; 490  : 			return 1;

  0012e	8b c1		 mov	 eax, ecx
  00130	e9 1f 0e 00 00	 jmp	 $LN60@PageDialog
$LN25@PageDialog:

; 491  : 		}
; 492  : 
; 493  : 		if (lw == IDC_WIZARD_MODE_INSTALL && nCurPageNo == WIZARD_MODE_PAGE)

  00135	bf 00 04 00 00	 mov	 edi, 1024		; 00000400H
  0013a	66 3b c7	 cmp	 ax, di
  0013d	75 12		 jne	 SHORT $LN24@PageDialog
  0013f	83 f9 01	 cmp	 ecx, 1
  00142	75 0d		 jne	 SHORT $LN24@PageDialog

; 494  : 		{
; 495  : 			bExtractOnly = FALSE;

  00144	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bExtractOnly@@3HA, ebx ; bExtractOnly

; 496  : 			return 1;

  0014a	8b c1		 mov	 eax, ecx
  0014c	e9 03 0e 00 00	 jmp	 $LN60@PageDialog
$LN24@PageDialog:

; 497  : 		}
; 498  : 
; 499  : 		if ( nCurPageNo == EXTRACTION_OPTIONS_PAGE && hw == EN_CHANGE )

  00151	83 f9 04	 cmp	 ecx, 4
  00154	75 46		 jne	 SHORT $LN23@PageDialog
  00156	b9 00 03 00 00	 mov	 ecx, 768		; 00000300H
  0015b	66 3b d1	 cmp	 dx, cx
  0015e	75 67		 jne	 SHORT $LN87@PageDialog
$LN101@PageDialog:

; 500  : 		{
; 501  : 			EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), (GetWindowTextLengthA(GetDlgItem (hCurPage, IDC_DESTINATION)) > 1));

  00160	68 e8 03 00 00	 push	 1000			; 000003e8H
  00165	56		 push	 esi
  00166	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0016c	ff d6		 call	 esi
  0016e	50		 push	 eax
  0016f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthA@4
  00175	33 d2		 xor	 edx, edx
  00177	83 f8 01	 cmp	 eax, 1
  0017a	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0017f	0f 9f c2	 setg	 dl
  00182	52		 push	 edx
  00183	68 02 04 00 00	 push	 1026			; 00000402H
  00188	50		 push	 eax
  00189	ff d6		 call	 esi
  0018b	50		 push	 eax
  0018c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
$LN17@PageDialog:

; 502  : 			return 1;

  00192	b8 01 00 00 00	 mov	 eax, 1
  00197	e9 b8 0d 00 00	 jmp	 $LN60@PageDialog
$LN23@PageDialog:

; 503  : 		}
; 504  : 
; 505  : 		if ( nCurPageNo == INSTALL_OPTIONS_PAGE && hw == EN_CHANGE )

  0019c	83 f9 02	 cmp	 ecx, 2
  0019f	0f 85 cc fe ff
	ff		 jne	 $LN12@PageDialog
  001a5	b9 00 03 00 00	 mov	 ecx, 768		; 00000300H
  001aa	66 3b d1	 cmp	 dx, cx
  001ad	74 b1		 je	 SHORT $LN101@PageDialog

; 528  : 				return 1;
; 529  : 			}
; 530  : 		}
; 531  : 
; 532  : 		if ( nCurPageNo == INSTALL_OPTIONS_PAGE )
; 533  : 		{
; 534  : 			switch (lw)

  001af	0f b7 c0	 movzx	 eax, ax
  001b2	05 16 fc ff ff	 add	 eax, -1002		; fffffc16H
  001b7	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  001ba	0f 87 b1 fe ff
	ff		 ja	 $LN12@PageDialog
  001c0	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN102@PageDialog[eax*4]
$LN87@PageDialog:

; 506  : 		{
; 507  : 			EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), (GetWindowTextLengthA(GetDlgItem (hCurPage, IDC_DESTINATION)) > 1));
; 508  : 			return 1;
; 509  : 		}
; 510  : 
; 511  : 		if ( nCurPageNo == EXTRACTION_OPTIONS_PAGE )
; 512  : 		{
; 513  : 			switch (lw)

  001c7	0f b7 c0	 movzx	 eax, ax
  001ca	2d ea 03 00 00	 sub	 eax, 1002		; 000003eaH
  001cf	74 2d		 je	 SHORT $LN18@PageDialog
  001d1	83 e8 13	 sub	 eax, 19			; 00000013H
  001d4	0f 85 97 fe ff
	ff		 jne	 $LN12@PageDialog

; 523  : 				}
; 524  : 				return 1;
; 525  : 
; 526  : 			case IDC_OPEN_CONTAINING_FOLDER:
; 527  : 				bOpenContainingFolder = IsButtonChecked (GetDlgItem (hCurPage, IDC_OPEN_CONTAINING_FOLDER));

  001da	68 fd 03 00 00	 push	 1021			; 000003fdH
  001df	56		 push	 esi
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001e6	50		 push	 eax
  001e7	e8 00 00 00 00	 call	 _IsButtonChecked
  001ec	a3 00 00 00 00	 mov	 DWORD PTR ?bOpenContainingFolder@@3HA, eax ; bOpenContainingFolder
  001f1	83 c4 04	 add	 esp, 4
  001f4	b8 01 00 00 00	 mov	 eax, 1
  001f9	e9 56 0d 00 00	 jmp	 $LN60@PageDialog
$LN18@PageDialog:

; 514  : 			{
; 515  : 			case IDC_BROWSE:
; 516  : 				if (BrowseDirectories (hwndDlg, "SELECT_DEST_DIR", WizardDestExtractPath))

  001fe	68 00 00 00 00	 push	 OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  00203	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DJBAGGGN@SELECT_DEST_DIR?$AA@
  00208	56		 push	 esi
  00209	e8 00 00 00 00	 call	 _BrowseDirectories
  0020e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00211	85 c0		 test	 eax, eax
  00213	0f 84 79 ff ff
	ff		 je	 $LN17@PageDialog

; 517  : 				{
; 518  : 					if (WizardDestExtractPath [strlen(WizardDestExtractPath)-1] != '\\')

  00219	b8 00 00 00 00	 mov	 eax, OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  0021e	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL89@PageDialog:
  00221	8a 08		 mov	 cl, BYTE PTR [eax]
  00223	40		 inc	 eax
  00224	84 c9		 test	 cl, cl
  00226	75 f9		 jne	 SHORT $LL89@PageDialog
  00228	2b c2		 sub	 eax, edx
  0022a	80 b8 ff ff ff
	ff 5c		 cmp	 BYTE PTR ?WizardDestExtractPath@@3PADA[eax-1], 92 ; 0000005cH
  00231	74 1f		 je	 SHORT $LN16@PageDialog

; 519  : 					{
; 520  : 						strcat (WizardDestExtractPath, "\\");

  00233	bf 00 00 00 00	 mov	 edi, OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  00238	4f		 dec	 edi
  00239	8d a4 24 00 00
	00 00		 npad	 7
$LL90@PageDialog:
  00240	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00243	47		 inc	 edi
  00244	84 c0		 test	 al, al
  00246	75 f8		 jne	 SHORT $LL90@PageDialog
  00248	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
  0024f	66 89 0f	 mov	 WORD PTR [edi], cx
$LN16@PageDialog:

; 521  : 					}
; 522  : 					SetDlgItemText (hwndDlg, IDC_DESTINATION, WizardDestExtractPath);

  00252	68 00 00 00 00	 push	 OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  00257	68 e8 03 00 00	 push	 1000			; 000003e8H
  0025c	56		 push	 esi
  0025d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12
  00263	b8 01 00 00 00	 mov	 eax, 1
  00268	e9 e7 0c 00 00	 jmp	 $LN60@PageDialog
$LN11@PageDialog:

; 535  : 			{
; 536  : 			case IDC_BROWSE:
; 537  : 				if (BrowseDirectories (hwndDlg, "SELECT_DEST_DIR", WizardDestInstallPath))

  0026d	68 00 00 00 00	 push	 OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  00272	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DJBAGGGN@SELECT_DEST_DIR?$AA@
  00277	56		 push	 esi
  00278	e8 00 00 00 00	 call	 _BrowseDirectories
  0027d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00280	85 c0		 test	 eax, eax
  00282	0f 84 0a ff ff
	ff		 je	 $LN17@PageDialog

; 538  : 				{
; 539  : 					if (WizardDestInstallPath [strlen(WizardDestInstallPath)-1] != '\\')

  00288	b8 00 00 00 00	 mov	 eax, OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  0028d	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL91@PageDialog:
  00290	8a 08		 mov	 cl, BYTE PTR [eax]
  00292	40		 inc	 eax
  00293	84 c9		 test	 cl, cl
  00295	75 f9		 jne	 SHORT $LL91@PageDialog
  00297	2b c2		 sub	 eax, edx
  00299	80 b8 ff ff ff
	ff 5c		 cmp	 BYTE PTR ?WizardDestInstallPath@@3PADA[eax-1], 92 ; 0000005cH
  002a0	74 18		 je	 SHORT $LN9@PageDialog

; 540  : 					{
; 541  : 						strcat (WizardDestInstallPath, "\\");

  002a2	bf 00 00 00 00	 mov	 edi, OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  002a7	4f		 dec	 edi
$LL92@PageDialog:
  002a8	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  002ab	47		 inc	 edi
  002ac	84 c0		 test	 al, al
  002ae	75 f8		 jne	 SHORT $LL92@PageDialog
  002b0	66 8b 15 00 00
	00 00		 mov	 dx, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
  002b7	66 89 17	 mov	 WORD PTR [edi], dx
$LN9@PageDialog:

; 542  : 					}
; 543  : 					SetDlgItemText (hwndDlg, IDC_DESTINATION, WizardDestInstallPath);

  002ba	68 00 00 00 00	 push	 OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  002bf	68 e8 03 00 00	 push	 1000			; 000003e8H
  002c4	56		 push	 esi
  002c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12
  002cb	b8 01 00 00 00	 mov	 eax, 1
  002d0	e9 7f 0c 00 00	 jmp	 $LN60@PageDialog
$LN8@PageDialog:

; 544  : 				}
; 545  : 				return 1;
; 546  : 
; 547  : 			case IDC_SYSTEM_RESTORE:
; 548  : 				bSystemRestore = IsButtonChecked (GetDlgItem (hCurPage, IDC_SYSTEM_RESTORE));

  002d5	68 f3 03 00 00	 push	 1011			; 000003f3H
  002da	56		 push	 esi
  002db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  002e1	50		 push	 eax
  002e2	e8 00 00 00 00	 call	 _IsButtonChecked
  002e7	a3 00 00 00 00	 mov	 DWORD PTR _bSystemRestore, eax
  002ec	83 c4 04	 add	 esp, 4
  002ef	b8 01 00 00 00	 mov	 eax, 1
  002f4	e9 5b 0c 00 00	 jmp	 $LN60@PageDialog
$LN7@PageDialog:

; 549  : 				return 1;
; 550  : 
; 551  : 			case IDC_ALL_USERS:
; 552  : 				bForAllUsers = IsButtonChecked (GetDlgItem (hCurPage, IDC_ALL_USERS));

  002f9	68 f5 03 00 00	 push	 1013			; 000003f5H
  002fe	56		 push	 esi
  002ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00305	50		 push	 eax
  00306	e8 00 00 00 00	 call	 _IsButtonChecked
  0030b	a3 00 00 00 00	 mov	 DWORD PTR _bForAllUsers, eax
  00310	83 c4 04	 add	 esp, 4
  00313	b8 01 00 00 00	 mov	 eax, 1
  00318	e9 37 0c 00 00	 jmp	 $LN60@PageDialog
$LN6@PageDialog:

; 553  : 				return 1;
; 554  : 
; 555  : 			case IDC_FILE_TYPE:
; 556  : 				bRegisterFileExt = IsButtonChecked (GetDlgItem (hCurPage, IDC_FILE_TYPE));

  0031d	68 f0 03 00 00	 push	 1008			; 000003f0H
  00322	56		 push	 esi
  00323	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00329	50		 push	 eax
  0032a	e8 00 00 00 00	 call	 _IsButtonChecked
  0032f	a3 00 00 00 00	 mov	 DWORD PTR _bRegisterFileExt, eax
  00334	83 c4 04	 add	 esp, 4
  00337	b8 01 00 00 00	 mov	 eax, 1
  0033c	e9 13 0c 00 00	 jmp	 $LN60@PageDialog
$LN5@PageDialog:

; 557  : 				return 1;
; 558  : 
; 559  : 			case IDC_PROG_GROUP:
; 560  : 				bAddToStartMenu = IsButtonChecked (GetDlgItem (hCurPage, IDC_PROG_GROUP));

  00341	68 f2 03 00 00	 push	 1010			; 000003f2H
  00346	56		 push	 esi
  00347	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0034d	50		 push	 eax
  0034e	e8 00 00 00 00	 call	 _IsButtonChecked
  00353	a3 00 00 00 00	 mov	 DWORD PTR _bAddToStartMenu, eax
  00358	83 c4 04	 add	 esp, 4
  0035b	b8 01 00 00 00	 mov	 eax, 1
  00360	e9 ef 0b 00 00	 jmp	 $LN60@PageDialog
$LN4@PageDialog:

; 561  : 				return 1;
; 562  : 
; 563  : 			case IDC_DESKTOP_ICON:
; 564  : 				bDesktopIcon = IsButtonChecked (GetDlgItem (hCurPage, IDC_DESKTOP_ICON));

  00365	68 f4 03 00 00	 push	 1012			; 000003f4H
  0036a	56		 push	 esi
  0036b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00371	50		 push	 eax
  00372	e8 00 00 00 00	 call	 _IsButtonChecked
  00377	a3 00 00 00 00	 mov	 DWORD PTR _bDesktopIcon, eax
  0037c	83 c4 04	 add	 esp, 4
  0037f	b8 01 00 00 00	 mov	 eax, 1
  00384	e9 cb 0b 00 00	 jmp	 $LN60@PageDialog
$LN57@PageDialog:
  00389	55		 push	 ebp

; 177  : 	{
; 178  : 	case WM_INITDIALOG:
; 179  : 		LocalizeDialog (hwndDlg, "IDD_INSTL_DLG");

  0038a	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MGHONKG@IDD_INSTL_DLG?$AA@
  0038f	56		 push	 esi
  00390	e8 00 00 00 00	 call	 _LocalizeDialog

; 180  : 
; 181  : 		snprintf (PageDebugId, sizeof(PageDebugId), "SETUP_WIZARD_PAGE_%d", nCurPageNo);

  00395	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  0039a	50		 push	 eax
  0039b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EOKBACHI@SETUP_WIZARD_PAGE_?$CFd?$AA@
  003a0	68 80 00 00 00	 push	 128			; 00000080H
  003a5	68 00 00 00 00	 push	 OFFSET ?PageDebugId@?1??PageDialogProc@@9@16@4PADA
  003aa	e8 00 00 00 00	 call	 _sprintf_s

; 182  : 		LastDialogId = PageDebugId;
; 183  : 
; 184  : 		switch (nCurPageNo)

  003af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  003b4	83 c4 18	 add	 esp, 24			; 00000018H
  003b7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, OFFSET ?PageDebugId@?1??PageDialogProc@@9@16@4PADA
  003c1	83 f8 06	 cmp	 eax, 6
  003c4	0f 87 87 0b 00
	00		 ja	 $LN55@PageDialog
  003ca	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN103@PageDialog[eax*4]
$LN54@PageDialog:

; 185  : 		{
; 186  : 		case INTRO_PAGE:
; 187  : 			{
; 188  : 				char *licenseText = NULL;
; 189  : 
; 190  : 				licenseText = GetLegalNotices ();

  003d1	e8 00 00 00 00	 call	 _GetLegalNotices
  003d6	8b e8		 mov	 ebp, eax

; 191  : 				if (licenseText != NULL)

  003d8	3b eb		 cmp	 ebp, ebx
  003da	0f 84 4c 01 00
	00		 je	 $LN53@PageDialog

; 192  : 				{
; 193  : 					SetWindowTextA(GetDlgItem (hwndDlg, IDC_LICENSE_TEXT), licenseText);

  003e0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  003e6	55		 push	 ebp
  003e7	68 ee 03 00 00	 push	 1006			; 000003eeH
  003ec	56		 push	 esi
  003ed	ff d7		 call	 edi
  003ef	50		 push	 eax
  003f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 194  : 					free (licenseText);

  003f6	55		 push	 ebp
  003f7	e8 00 00 00 00	 call	 _free

; 200  : 				}
; 201  : 
; 202  : 				/* For legal reasons, some of the following texts cannot be localized by third parties. */
; 203  : 
; 204  : 				SetCheckBox (hwndDlg, IDC_AGREE, bLicenseAccepted);

  003fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bLicenseAccepted@@3HA ; bLicenseAccepted
  00402	51		 push	 ecx
  00403	68 fe 03 00 00	 push	 1022			; 000003feH
  00408	56		 push	 esi
  00409	e8 00 00 00 00	 call	 _SetCheckBox

; 205  : 
; 206  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), L"Please read the license terms");

  0040e	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__GetParent@4
  00414	83 c4 10	 add	 esp, 16			; 00000010H
  00417	68 00 00 00 00	 push	 OFFSET ??_C@_1DM@EGEEIDAI@?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe?$AAr?$AAm?$AAs?$AA?$AA@
  0041c	68 e9 03 00 00	 push	 1001			; 000003e9H
  00421	56		 push	 esi
  00422	ff d5		 call	 ebp
  00424	50		 push	 eax
  00425	ff d7		 call	 edi
  00427	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextW@8
  0042d	50		 push	 eax
  0042e	ff d3		 call	 ebx

; 207  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_INFO), L"You must accept these license terms before you can use, extract, or install CipherShed.");

  00430	68 00 00 00 00	 push	 OFFSET ??_C@_1LA@INOIFBMC@?$AAY?$AAo?$AAu?$AA?5?$AAm?$AAu?$AAs?$AAt?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AA?5?$AAt?$AAh?$AAe?$AAs?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe@
  00435	68 eb 03 00 00	 push	 1003			; 000003ebH
  0043a	56		 push	 esi
  0043b	ff d5		 call	 ebp
  0043d	50		 push	 eax
  0043e	ff d7		 call	 edi
  00440	50		 push	 eax
  00441	ff d3		 call	 ebx

; 208  : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), L"IMPORTANT: By checking the checkbox below, you accept these license terms and signify that you understand and agree to them. Please click the 'arrow down' icon to see the rest of the license.");	// Cannot be localized by third parties (for legal reasons).

  00443	68 00 00 00 00	 push	 OFFSET ??_C@_1BIA@MJJKLEKE@?$AAI?$AAM?$AAP?$AAO?$AAR?$AAT?$AAA?$AAN?$AAT?$AA?3?$AA?5?$AAB?$AAy?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk@
  00448	68 ed 03 00 00	 push	 1005			; 000003edH
  0044d	56		 push	 esi
  0044e	ff d7		 call	 edi
  00450	50		 push	 eax
  00451	ff d3		 call	 ebx

; 209  : 				//SendMessage (GetDlgItem (hwndDlg, IDC_BOX_HELP), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);
; 210  : 
; 211  : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_AGREE), L"I &accept the license terms");	// Cannot be localized by third parties (for legal reasons).

  00453	68 00 00 00 00	 push	 OFFSET ??_C@_1DI@FKGEFKMH@?$AAI?$AA?5?$AA?$CG?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe?$AAr?$AAm?$AAs?$AA?$AA@
  00458	68 fe 03 00 00	 push	 1022			; 000003feH
  0045d	56		 push	 esi
  0045e	ff d7		 call	 edi
  00460	50		 push	 eax
  00461	ff d3		 call	 ebx

; 212  : 				//SetWindowTextW (GetDlgItem (hwndDlg, IDC_DISAGREE), L"I &do not accept the license terms");
; 213  : 
; 214  : 				//SendMessage (GetDlgItem (hwndDlg, IDC_AGREE), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);
; 215  : 				//SendMessage (GetDlgItem (hwndDlg, IDC_DISAGREE), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);
; 216  : 
; 217  : 				EnableWindow (GetDlgItem (hwndDlg, IDC_AGREE), TRUE);

  00463	6a 01		 push	 1
  00465	68 fe 03 00 00	 push	 1022			; 000003feH
  0046a	56		 push	 esi
  0046b	ff d7		 call	 edi
  0046d	50		 push	 eax
  0046e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 218  : 
; 219  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  00474	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00479	e8 00 00 00 00	 call	 _GetString
  0047e	83 c4 04	 add	 esp, 4
  00481	50		 push	 eax
  00482	68 02 04 00 00	 push	 1026			; 00000402H
  00487	56		 push	 esi
  00488	ff d5		 call	 ebp
  0048a	50		 push	 eax
  0048b	ff d7		 call	 edi
  0048d	50		 push	 eax
  0048e	ff d3		 call	 ebx

; 220  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  00490	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00495	e8 00 00 00 00	 call	 _GetString
  0049a	83 c4 04	 add	 esp, 4
  0049d	50		 push	 eax
  0049e	68 03 04 00 00	 push	 1027			; 00000403H
  004a3	56		 push	 esi
  004a4	ff d5		 call	 ebp
  004a6	50		 push	 eax
  004a7	ff d7		 call	 edi
  004a9	50		 push	 eax
  004aa	ff d3		 call	 ebx

; 221  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("CANCEL"));

  004ac	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  004b1	e8 00 00 00 00	 call	 _GetString
  004b6	83 c4 04	 add	 esp, 4
  004b9	50		 push	 eax
  004ba	6a 02		 push	 2
  004bc	56		 push	 esi
  004bd	ff d5		 call	 ebp
  004bf	50		 push	 eax
  004c0	ff d7		 call	 edi
  004c2	50		 push	 eax
  004c3	ff d3		 call	 ebx

; 222  : 
; 223  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), bLicenseAccepted);

  004c5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bLicenseAccepted@@3HA ; bLicenseAccepted
  004cb	52		 push	 edx
  004cc	68 02 04 00 00	 push	 1026			; 00000402H
  004d1	56		 push	 esi
  004d2	ff d5		 call	 ebp
  004d4	50		 push	 eax
  004d5	ff d7		 call	 edi
  004d7	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  004dd	50		 push	 eax
  004de	ff d3		 call	 ebx

; 224  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  004e0	6a 00		 push	 0
  004e2	68 03 04 00 00	 push	 1027			; 00000403H
  004e7	56		 push	 esi
  004e8	ff d5		 call	 ebp
  004ea	50		 push	 eax
  004eb	ff d7		 call	 edi
  004ed	50		 push	 eax
  004ee	ff d3		 call	 ebx

; 225  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDHELP), bLicenseAccepted);

  004f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bLicenseAccepted@@3HA ; bLicenseAccepted
  004f5	50		 push	 eax
  004f6	6a 09		 push	 9
  004f8	56		 push	 esi
  004f9	ff d5		 call	 ebp
  004fb	50		 push	 eax
  004fc	ff d7		 call	 edi
  004fe	50		 push	 eax
  004ff	ff d3		 call	 ebx

; 226  : 
; 227  : 				// Left margin for license text
; 228  : 				SendMessage (GetDlgItem (hwndDlg, IDC_LICENSE_TEXT), EM_SETMARGINS, (WPARAM) EC_LEFTMARGIN, (LPARAM) CompensateXDPI (4));

  00501	6a 04		 push	 4
  00503	e8 00 00 00 00	 call	 _CompensateXDPI
  00508	83 c4 04	 add	 esp, 4
  0050b	50		 push	 eax
  0050c	6a 01		 push	 1
  0050e	68 d3 00 00 00	 push	 211			; 000000d3H
  00513	68 ee 03 00 00	 push	 1006			; 000003eeH
  00518	56		 push	 esi
  00519	ff d7		 call	 edi
  0051b	50		 push	 eax
  0051c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 229  : 			}
; 230  : 			return 1;

  00522	b8 01 00 00 00	 mov	 eax, 1
  00527	e9 27 0a 00 00	 jmp	 $LN99@PageDialog
$LN53@PageDialog:

; 195  : 				}
; 196  : 				else
; 197  : 				{
; 198  : 					Error("CANNOT_DISPLAY_LICENSE");

  0052c	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@MFJOAEDC@CANNOT_DISPLAY_LICENSE?$AA@
  00531	e8 00 00 00 00	 call	 _Error
  00536	83 c4 04	 add	 esp, 4

; 199  : 					exit (1);

  00539	6a 01		 push	 1
  0053b	e8 00 00 00 00	 call	 _exit
$LN51@PageDialog:

; 231  : 
; 232  : 		case WIZARD_MODE_PAGE:
; 233  : 			{
; 234  : 				LONG driverVersion;
; 235  : 
; 236  : 				DetermineUpgradeDowngradeStatus (TRUE, &driverVersion);

  00540	8d 4c 24 10	 lea	 ecx, DWORD PTR _driverVersion$95621[esp+404]
  00544	51		 push	 ecx
  00545	6a 01		 push	 1
  00547	e8 00 00 00 00	 call	 _DetermineUpgradeDowngradeStatus

; 237  : 
; 238  : 				if (bRepairMode)

  0054c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00552	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SetWindowTextW@8
  00558	83 c4 08	 add	 esp, 8
  0055b	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bRepairMode, ebx
  00561	74 21		 je	 SHORT $LN50@PageDialog

; 239  : 				{
; 240  : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_WIZARD_MODE_INSTALL), GetString ("REPAIR_REINSTALL"));

  00563	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@OFECFCBP@REPAIR_REINSTALL?$AA@
  00568	e8 00 00 00 00	 call	 _GetString
  0056d	83 c4 04	 add	 esp, 4
  00570	50		 push	 eax
  00571	68 00 04 00 00	 push	 1024			; 00000400H
  00576	56		 push	 esi
  00577	ff d7		 call	 edi
  00579	50		 push	 eax
  0057a	ff d5		 call	 ebp

; 241  : 					bExtractOnly = FALSE;

  0057c	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bExtractOnly@@3HA, ebx ; bExtractOnly
  00582	eb 21		 jmp	 SHORT $LN48@PageDialog
$LN50@PageDialog:

; 242  : 				}
; 243  : 				else if (bUpgrade)

  00584	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bUpgrade, ebx
  0058a	74 19		 je	 SHORT $LN48@PageDialog

; 244  : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_WIZARD_MODE_INSTALL), GetString ("UPGRADE"));

  0058c	68 00 00 00 00	 push	 OFFSET ??_C@_07CNHFDDPI@UPGRADE?$AA@
  00591	e8 00 00 00 00	 call	 _GetString
  00596	83 c4 04	 add	 esp, 4
  00599	50		 push	 eax
  0059a	68 00 04 00 00	 push	 1024			; 00000400H
  0059f	56		 push	 esi
  005a0	ff d7		 call	 edi
  005a2	50		 push	 eax
  005a3	ff d5		 call	 ebp
$LN48@PageDialog:

; 245  : 
; 246  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SETUP_MODE_TITLE"));

  005a5	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KMHMHMNP@SETUP_MODE_TITLE?$AA@
  005aa	e8 00 00 00 00	 call	 _GetString
  005af	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetParent@4
  005b5	83 c4 04	 add	 esp, 4
  005b8	50		 push	 eax
  005b9	68 e9 03 00 00	 push	 1001			; 000003e9H
  005be	56		 push	 esi
  005bf	ff d3		 call	 ebx
  005c1	50		 push	 eax
  005c2	ff d7		 call	 edi
  005c4	50		 push	 eax
  005c5	ff d5		 call	 ebp

; 247  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_INFO), GetString ("SETUP_MODE_INFO"));

  005c7	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PHBLGFGD@SETUP_MODE_INFO?$AA@
  005cc	e8 00 00 00 00	 call	 _GetString
  005d1	83 c4 04	 add	 esp, 4
  005d4	50		 push	 eax
  005d5	68 eb 03 00 00	 push	 1003			; 000003ebH
  005da	56		 push	 esi
  005db	ff d3		 call	 ebx
  005dd	50		 push	 eax
  005de	ff d7		 call	 edi
  005e0	50		 push	 eax
  005e1	ff d5		 call	 ebp

; 248  : 
; 249  : 				SendMessage (GetDlgItem (hwndDlg, IDC_WIZARD_MODE_INSTALL), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  005e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hUserBoldFont
  005e9	6a 01		 push	 1
  005eb	52		 push	 edx
  005ec	6a 30		 push	 48			; 00000030H
  005ee	68 00 04 00 00	 push	 1024			; 00000400H
  005f3	56		 push	 esi
  005f4	ff d7		 call	 edi
  005f6	50		 push	 eax
  005f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 250  : 				SendMessage (GetDlgItem (hwndDlg, IDC_WIZARD_MODE_EXTRACT_ONLY), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  005fd	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserBoldFont
  00602	6a 01		 push	 1
  00604	50		 push	 eax
  00605	6a 30		 push	 48			; 00000030H
  00607	68 01 04 00 00	 push	 1025			; 00000401H
  0060c	56		 push	 esi
  0060d	ff d7		 call	 edi
  0060f	50		 push	 eax
  00610	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 251  : 
; 252  : 				CheckButton (GetDlgItem (hwndDlg, bExtractOnly ? IDC_WIZARD_MODE_EXTRACT_ONLY : IDC_WIZARD_MODE_INSTALL));

  00616	33 c9		 xor	 ecx, ecx
  00618	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?bExtractOnly@@3HA, ecx ; bExtractOnly
  0061e	0f 95 c1	 setne	 cl
  00621	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  00627	51		 push	 ecx
  00628	56		 push	 esi
  00629	ff d7		 call	 edi
  0062b	50		 push	 eax
  0062c	e8 00 00 00 00	 call	 _CheckButton

; 253  : 
; 254  : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SETUP_MODE_HELP_EXTRACT"));

  00631	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@KCCOCEA@SETUP_MODE_HELP_EXTRACT?$AA@
  00636	e8 00 00 00 00	 call	 _GetString
  0063b	83 c4 08	 add	 esp, 8
  0063e	50		 push	 eax
  0063f	68 ed 03 00 00	 push	 1005			; 000003edH
  00644	56		 push	 esi
  00645	ff d7		 call	 edi
  00647	50		 push	 eax
  00648	ff d5		 call	 ebp

; 255  : 
; 256  : 				if (!bRepairMode)

  0064a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bRepairMode, 0
  00651	75 28		 jne	 SHORT $LN47@PageDialog

; 257  : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP2), GetString (bUpgrade ? "SETUP_MODE_HELP_UPGRADE" : "SETUP_MODE_HELP_INSTALL"));

  00653	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bUpgrade, 0
  0065a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BI@JGKCNIKM@SETUP_MODE_HELP_UPGRADE?$AA@
  0065f	75 05		 jne	 SHORT $LN63@PageDialog
  00661	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BI@ECIBEEIH@SETUP_MODE_HELP_INSTALL?$AA@
$LN63@PageDialog:
  00666	50		 push	 eax
  00667	e8 00 00 00 00	 call	 _GetString
  0066c	83 c4 04	 add	 esp, 4
  0066f	50		 push	 eax
  00670	68 ef 03 00 00	 push	 1007			; 000003efH
  00675	56		 push	 esi
  00676	ff d7		 call	 edi
  00678	50		 push	 eax
  00679	ff d5		 call	 ebp
$LN47@PageDialog:

; 258  : 
; 259  : 				EnableWindow (GetDlgItem (hwndDlg, IDC_WIZARD_MODE_EXTRACT_ONLY), !bRepairMode);

  0067b	33 d2		 xor	 edx, edx
  0067d	39 15 00 00 00
	00		 cmp	 DWORD PTR _bRepairMode, edx
  00683	0f 94 c2	 sete	 dl
  00686	52		 push	 edx
  00687	68 01 04 00 00	 push	 1025			; 00000401H
  0068c	56		 push	 esi
  0068d	ff d7		 call	 edi
  0068f	50		 push	 eax
  00690	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 260  : 				EnableWindow (GetDlgItem (hwndDlg, IDC_BOX_HELP), !bRepairMode);

  00696	33 c0		 xor	 eax, eax
  00698	39 05 00 00 00
	00		 cmp	 DWORD PTR _bRepairMode, eax
  0069e	0f 94 c0	 sete	 al
  006a1	50		 push	 eax
  006a2	68 ed 03 00 00	 push	 1005			; 000003edH
  006a7	56		 push	 esi
  006a8	ff d7		 call	 edi
  006aa	50		 push	 eax
  006ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 261  : 				EnableWindow (GetDlgItem (hwndDlg, IDC_WIZARD_MODE_INSTALL), TRUE);

  006b1	6a 01		 push	 1
  006b3	68 00 04 00 00	 push	 1024			; 00000400H
  006b8	56		 push	 esi
  006b9	ff d7		 call	 edi
  006bb	50		 push	 eax
  006bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 262  : 
; 263  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  006c2	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  006c7	e8 00 00 00 00	 call	 _GetString
  006cc	83 c4 04	 add	 esp, 4
  006cf	50		 push	 eax
  006d0	68 02 04 00 00	 push	 1026			; 00000402H
  006d5	56		 push	 esi
  006d6	ff d3		 call	 ebx
  006d8	50		 push	 eax
  006d9	ff d7		 call	 edi
  006db	50		 push	 eax
  006dc	ff d5		 call	 ebp

; 264  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  006de	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  006e3	e8 00 00 00 00	 call	 _GetString
  006e8	83 c4 04	 add	 esp, 4
  006eb	50		 push	 eax
  006ec	68 03 04 00 00	 push	 1027			; 00000403H
  006f1	56		 push	 esi
  006f2	ff d3		 call	 ebx
  006f4	50		 push	 eax
  006f5	ff d7		 call	 edi
  006f7	50		 push	 eax
  006f8	ff d5		 call	 ebp

; 265  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("CANCEL"));

  006fa	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  006ff	e8 00 00 00 00	 call	 _GetString
  00704	83 c4 04	 add	 esp, 4
  00707	50		 push	 eax
  00708	6a 02		 push	 2
  0070a	56		 push	 esi
  0070b	ff d3		 call	 ebx
  0070d	50		 push	 eax
  0070e	ff d7		 call	 edi
  00710	50		 push	 eax
  00711	ff d5		 call	 ebp

; 266  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  00713	6a 01		 push	 1
  00715	68 02 04 00 00	 push	 1026			; 00000402H
  0071a	56		 push	 esi
  0071b	ff d3		 call	 ebx
  0071d	50		 push	 eax
  0071e	ff d7		 call	 edi
  00720	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__EnableWindow@8
  00726	50		 push	 eax
  00727	ff d5		 call	 ebp

; 267  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00729	6a 01		 push	 1
  0072b	68 03 04 00 00	 push	 1027			; 00000403H
  00730	56		 push	 esi
  00731	ff d3		 call	 ebx
  00733	50		 push	 eax
  00734	ff d7		 call	 edi
  00736	50		 push	 eax
  00737	ff d5		 call	 ebp

; 268  : 			}
; 269  : 			return 1;

  00739	b8 01 00 00 00	 mov	 eax, 1
  0073e	e9 10 08 00 00	 jmp	 $LN99@PageDialog
$LN46@PageDialog:

; 270  : 
; 271  : 		case EXTRACTION_OPTIONS_PAGE:
; 272  : 
; 273  : 			if (strlen(WizardDestExtractPath) < 2)

  00743	b8 00 00 00 00	 mov	 eax, OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  00748	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0074b	eb 03 8d 49 00	 npad	 5
$LL93@PageDialog:
  00750	8a 08		 mov	 cl, BYTE PTR [eax]
  00752	40		 inc	 eax
  00753	84 c9		 test	 cl, cl
  00755	75 f9		 jne	 SHORT $LL93@PageDialog
  00757	2b c2		 sub	 eax, edx
  00759	83 f8 02	 cmp	 eax, 2
  0075c	73 45		 jae	 SHORT $LN45@PageDialog

; 274  : 			{ 
; 275  : 				strcpy_s (WizardDestExtractPath, sizeof(WizardDestExtractPath), SetupFilesDir);

  0075e	68 00 00 00 00	 push	 OFFSET _SetupFilesDir
  00763	68 04 01 00 00	 push	 260			; 00000104H
  00768	68 00 00 00 00	 push	 OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  0076d	e8 00 00 00 00	 call	 _strcpy_s

; 276  : 				strncat (WizardDestExtractPath, "CipherShed\\", sizeof (WizardDestExtractPath) - strlen (WizardDestExtractPath) - 1);

  00772	b8 00 00 00 00	 mov	 eax, OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  00777	83 c4 0c	 add	 esp, 12			; 0000000cH
  0077a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0077d	8d 49 00	 npad	 3
$LL94@PageDialog:
  00780	8a 08		 mov	 cl, BYTE PTR [eax]
  00782	40		 inc	 eax
  00783	84 c9		 test	 cl, cl
  00785	75 f9		 jne	 SHORT $LL94@PageDialog
  00787	2b c2		 sub	 eax, edx
  00789	b9 03 01 00 00	 mov	 ecx, 259		; 00000103H
  0078e	2b c8		 sub	 ecx, eax
  00790	51		 push	 ecx
  00791	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GMDAANJE@CipherShed?2?$AA@
  00796	68 00 00 00 00	 push	 OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  0079b	e8 00 00 00 00	 call	 _strncat
  007a0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN45@PageDialog:

; 277  : 			}
; 278  : 
; 279  : 			SendMessage (GetDlgItem (hwndDlg, IDC_DESTINATION), EM_LIMITTEXT, TC_MAX_PATH - 1, 0);

  007a3	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  007a9	6a 00		 push	 0
  007ab	68 03 01 00 00	 push	 259			; 00000103H
  007b0	68 c5 00 00 00	 push	 197			; 000000c5H
  007b5	68 e8 03 00 00	 push	 1000			; 000003e8H
  007ba	56		 push	 esi
  007bb	ff d7		 call	 edi
  007bd	50		 push	 eax
  007be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 280  : 
; 281  : 			SetDlgItemText (hwndDlg, IDC_DESTINATION, WizardDestExtractPath);

  007c4	68 00 00 00 00	 push	 OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  007c9	68 e8 03 00 00	 push	 1000			; 000003e8H
  007ce	56		 push	 esi
  007cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12

; 282  : 
; 283  : 			SetCheckBox (hwndDlg, IDC_OPEN_CONTAINING_FOLDER, bOpenContainingFolder);

  007d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bOpenContainingFolder@@3HA ; bOpenContainingFolder
  007db	52		 push	 edx
  007dc	68 fd 03 00 00	 push	 1021			; 000003fdH
  007e1	56		 push	 esi
  007e2	e8 00 00 00 00	 call	 _SetCheckBox

; 284  : 
; 285  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("EXTRACTION_OPTIONS_TITLE"));

  007e7	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PDGEILOG@EXTRACTION_OPTIONS_TITLE?$AA@
  007ec	e8 00 00 00 00	 call	 _GetString
  007f1	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetParent@4
  007f7	83 c4 10	 add	 esp, 16			; 00000010H
  007fa	50		 push	 eax
  007fb	68 e9 03 00 00	 push	 1001			; 000003e9H
  00800	56		 push	 esi
  00801	ff d3		 call	 ebx
  00803	50		 push	 eax
  00804	ff d7		 call	 edi
  00806	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SetWindowTextW@8
  0080c	50		 push	 eax
  0080d	ff d5		 call	 ebp

; 286  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_INFO), GetString ("EXTRACTION_OPTIONS_INFO"));

  0080f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@OKGEFEFK@EXTRACTION_OPTIONS_INFO?$AA@
  00814	e8 00 00 00 00	 call	 _GetString
  00819	83 c4 04	 add	 esp, 4
  0081c	50		 push	 eax
  0081d	68 eb 03 00 00	 push	 1003			; 000003ebH
  00822	56		 push	 esi
  00823	ff d3		 call	 ebx
  00825	50		 push	 eax
  00826	ff d7		 call	 edi
  00828	50		 push	 eax
  00829	ff d5		 call	 ebp

; 287  : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("AUTO_FOLDER_CREATION"));

  0082b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@HFEALDNI@AUTO_FOLDER_CREATION?$AA@
  00830	e8 00 00 00 00	 call	 _GetString
  00835	83 c4 04	 add	 esp, 4
  00838	50		 push	 eax
  00839	68 ed 03 00 00	 push	 1005			; 000003edH
  0083e	56		 push	 esi
  0083f	ff d7		 call	 edi
  00841	50		 push	 eax
  00842	ff d5		 call	 ebp

; 288  : 
; 289  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("EXTRACT"));

  00844	68 00 00 00 00	 push	 OFFSET ??_C@_07LBPFAJBE@EXTRACT?$AA@
  00849	e8 00 00 00 00	 call	 _GetString
  0084e	83 c4 04	 add	 esp, 4
  00851	50		 push	 eax
  00852	68 02 04 00 00	 push	 1026			; 00000402H
  00857	56		 push	 esi
  00858	ff d3		 call	 ebx
  0085a	50		 push	 eax
  0085b	ff d7		 call	 edi
  0085d	50		 push	 eax
  0085e	ff d5		 call	 ebp

; 290  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  00860	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00865	e8 00 00 00 00	 call	 _GetString
  0086a	83 c4 04	 add	 esp, 4
  0086d	50		 push	 eax
  0086e	68 03 04 00 00	 push	 1027			; 00000403H
  00873	56		 push	 esi
  00874	ff d3		 call	 ebx
  00876	50		 push	 eax
  00877	ff d7		 call	 edi
  00879	50		 push	 eax
  0087a	ff d5		 call	 ebp

; 291  : 
; 292  : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDHELP), TRUE);

  0087c	6a 01		 push	 1
  0087e	6a 09		 push	 9
  00880	56		 push	 esi
  00881	ff d3		 call	 ebx
  00883	50		 push	 eax
  00884	ff d7		 call	 edi
  00886	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__EnableWindow@8
  0088c	50		 push	 eax
  0088d	ff d5		 call	 ebp

; 293  : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  0088f	6a 01		 push	 1
  00891	68 03 04 00 00	 push	 1027			; 00000403H
  00896	56		 push	 esi
  00897	ff d3		 call	 ebx
  00899	50		 push	 eax
  0089a	ff d7		 call	 edi
  0089c	50		 push	 eax
  0089d	ff d5		 call	 ebp

; 294  : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  0089f	6a 01		 push	 1
  008a1	68 02 04 00 00	 push	 1026			; 00000402H
  008a6	56		 push	 esi
  008a7	ff d3		 call	 ebx
  008a9	50		 push	 eax
  008aa	ff d7		 call	 edi
  008ac	50		 push	 eax
  008ad	ff d5		 call	 ebp

; 295  : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);

  008af	6a 01		 push	 1
  008b1	6a 02		 push	 2
  008b3	56		 push	 esi
  008b4	ff d3		 call	 ebx
  008b6	50		 push	 eax
  008b7	ff d7		 call	 edi
  008b9	50		 push	 eax
  008ba	ff d5		 call	 ebp

; 296  : 
; 297  : 			return 1;

  008bc	b8 01 00 00 00	 mov	 eax, 1
  008c1	e9 8d 06 00 00	 jmp	 $LN99@PageDialog
$LN44@PageDialog:

; 298  : 
; 299  : 		case EXTRACTION_PROGRESS_PAGE:
; 300  : 
; 301  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("EXTRACTING_VERB"));

  008c6	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IBCNACGH@EXTRACTING_VERB?$AA@
  008cb	e8 00 00 00 00	 call	 _GetString
  008d0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  008d6	83 c4 04	 add	 esp, 4
  008d9	50		 push	 eax
  008da	68 e9 03 00 00	 push	 1001			; 000003e9H
  008df	56		 push	 esi
  008e0	ff d7		 call	 edi
  008e2	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__GetDlgItem@8
  008e8	50		 push	 eax
  008e9	ff d5		 call	 ebp
  008eb	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextW@8
  008f1	50		 push	 eax
  008f2	ff d3		 call	 ebx

; 302  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_INFO), GetString ("EXTRACTION_PROGRESS_INFO"));

  008f4	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LJFMAAFG@EXTRACTION_PROGRESS_INFO?$AA@
  008f9	e8 00 00 00 00	 call	 _GetString
  008fe	83 c4 04	 add	 esp, 4
  00901	50		 push	 eax
  00902	68 eb 03 00 00	 push	 1003			; 000003ebH
  00907	56		 push	 esi
  00908	ff d7		 call	 edi
  0090a	50		 push	 eax
  0090b	ff d5		 call	 ebp
  0090d	50		 push	 eax
  0090e	ff d3		 call	 ebx

; 303  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  00910	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00915	e8 00 00 00 00	 call	 _GetString
  0091a	83 c4 04	 add	 esp, 4
  0091d	50		 push	 eax
  0091e	68 02 04 00 00	 push	 1026			; 00000402H
  00923	56		 push	 esi
  00924	ff d7		 call	 edi
  00926	50		 push	 eax
  00927	ff d5		 call	 ebp
  00929	50		 push	 eax
  0092a	ff d3		 call	 ebx

; 304  : 
; 305  : 			if (bStartExtraction)

  0092c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bStartExtraction@@3HA, 0 ; bStartExtraction
  00933	0f 84 cc 05 00
	00		 je	 $LN34@PageDialog

; 306  : 			{
; 307  : 				/* Start extraction */
; 308  : 
; 309  : 				LastDialogId = "EXTRACTION_IN_PROGRESS";

  00939	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, OFFSET ??_C@_0BH@PEMNLIII@EXTRACTION_IN_PROGRESS?$AA@

; 310  : 
; 311  : 				WaitCursor ();

  00943	e8 00 00 00 00	 call	 _WaitCursor

; 312  : 
; 313  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  00948	6a 00		 push	 0
  0094a	68 03 04 00 00	 push	 1027			; 00000403H
  0094f	56		 push	 esi
  00950	ff d7		 call	 edi
  00952	50		 push	 eax
  00953	ff d5		 call	 ebp
  00955	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  0095b	50		 push	 eax
  0095c	ff d3		 call	 ebx

; 314  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), FALSE);

  0095e	6a 00		 push	 0
  00960	68 02 04 00 00	 push	 1026			; 00000402H
  00965	56		 push	 esi
  00966	ff d7		 call	 edi
  00968	50		 push	 eax
  00969	ff d5		 call	 ebp
  0096b	50		 push	 eax
  0096c	ff d3		 call	 ebx

; 315  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDHELP), FALSE);

  0096e	6a 00		 push	 0
  00970	6a 09		 push	 9
  00972	56		 push	 esi
  00973	ff d7		 call	 edi
  00975	50		 push	 eax
  00976	ff d5		 call	 ebp
  00978	50		 push	 eax
  00979	ff d3		 call	 ebx

; 316  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), FALSE);

  0097b	6a 00		 push	 0
  0097d	6a 02		 push	 2
  0097f	56		 push	 esi
  00980	ff d7		 call	 edi
  00982	50		 push	 eax
  00983	ff d5		 call	 ebp
  00985	50		 push	 eax
  00986	ff d3		 call	 ebx

; 317  : 
; 318  : 				if (WizardDestExtractPath [strlen(WizardDestExtractPath)-1] != '\\')

  00988	b8 00 00 00 00	 mov	 eax, OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  0098d	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL95@PageDialog:
  00990	8a 08		 mov	 cl, BYTE PTR [eax]
  00992	40		 inc	 eax
  00993	84 c9		 test	 cl, cl
  00995	75 f9		 jne	 SHORT $LL95@PageDialog
  00997	2b c2		 sub	 eax, edx
  00999	80 b8 ff ff ff
	ff 5c		 cmp	 BYTE PTR ?WizardDestExtractPath@@3PADA[eax-1], 92 ; 0000005cH
  009a0	74 17		 je	 SHORT $LN42@PageDialog

; 319  : 					strcat (WizardDestExtractPath, "\\");

  009a2	bf 00 00 00 00	 mov	 edi, OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  009a7	4f		 dec	 edi
$LL96@PageDialog:
  009a8	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  009ab	47		 inc	 edi
  009ac	84 c0		 test	 al, al
  009ae	75 f8		 jne	 SHORT $LL96@PageDialog
  009b0	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
  009b6	66 89 07	 mov	 WORD PTR [edi], ax
$LN42@PageDialog:

; 320  : 
; 321  : 				strcpy_s (DestExtractPath, sizeof(DestExtractPath), WizardDestExtractPath);

  009b9	68 00 00 00 00	 push	 OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  009be	68 04 01 00 00	 push	 260			; 00000104H
  009c3	68 00 00 00 00	 push	 OFFSET _DestExtractPath
  009c8	e8 00 00 00 00	 call	 _strcpy_s

; 322  : 
; 323  : 				InitProgressBar ();

  009cd	e8 00 00 00 00	 call	 _InitProgressBar

; 324  : 
; 325  : 				bInProgress = TRUE;
; 326  : 				bStartExtraction = FALSE;
; 327  : 
; 328  : 				_beginthread (ExtractAllFilesThread, 0, (void *) hwndDlg);

  009d2	56		 push	 esi
  009d3	6a 00		 push	 0
  009d5	68 00 00 00 00	 push	 OFFSET _ExtractAllFilesThread
  009da	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bInProgress@@3HA, 1 ; bInProgress
  009e4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bStartExtraction@@3HA, 0 ; bStartExtraction
  009ee	e8 00 00 00 00	 call	 __beginthread
  009f3	83 c4 18	 add	 esp, 24			; 00000018H

; 451  : 
; 452  : 			}
; 453  : 
; 454  : 			return 1;

  009f6	b8 01 00 00 00	 mov	 eax, 1
  009fb	e9 53 05 00 00	 jmp	 $LN99@PageDialog
$LN40@PageDialog:

; 329  : 			}
; 330  : 			else
; 331  : 			{
; 332  : 				NormalCursor ();
; 333  : 
; 334  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);
; 335  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);
; 336  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDHELP), TRUE);
; 337  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);
; 338  : 			}
; 339  : 
; 340  : 			return 1;
; 341  : 
; 342  : 		case INSTALL_OPTIONS_PAGE:
; 343  : 			{
; 344  : 				LONG driverVersion;
; 345  : 
; 346  : 				DetermineUpgradeDowngradeStatus (TRUE, &driverVersion);

  00a00	8d 4c 24 18	 lea	 ecx, DWORD PTR _driverVersion$95653[esp+404]
  00a04	51		 push	 ecx
  00a05	bf 01 00 00 00	 mov	 edi, 1
  00a0a	57		 push	 edi
  00a0b	e8 00 00 00 00	 call	 _DetermineUpgradeDowngradeStatus
  00a10	83 c4 08	 add	 esp, 8

; 347  : 
; 348  : 				if (!bDesktopIconStatusDetermined)

  00a13	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bDesktopIconStatusDetermined, ebx
  00a19	75 22		 jne	 SHORT $LN39@PageDialog

; 349  : 				{
; 350  : 					bDesktopIcon = !bUpgrade || bCipherShedMigration;

  00a1b	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bUpgrade, ebx
  00a21	74 0e		 je	 SHORT $LN64@PageDialog
  00a23	89 1d 00 00 00
	00		 mov	 DWORD PTR _bDesktopIcon, ebx
  00a29	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bCipherShedMigration, ebx
  00a2f	74 06		 je	 SHORT $LN65@PageDialog
$LN64@PageDialog:
  00a31	89 3d 00 00 00
	00		 mov	 DWORD PTR _bDesktopIcon, edi
$LN65@PageDialog:

; 351  : 					bDesktopIconStatusDetermined = TRUE;

  00a37	89 3d 00 00 00
	00		 mov	 DWORD PTR _bDesktopIconStatusDetermined, edi
$LN39@PageDialog:

; 352  : 				}
; 353  : 
; 354  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SETUP_OPTIONS_TITLE"));

  00a3d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@EDFPLLMN@SETUP_OPTIONS_TITLE?$AA@
  00a42	e8 00 00 00 00	 call	 _GetString
  00a47	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetParent@4
  00a4d	83 c4 04	 add	 esp, 4
  00a50	50		 push	 eax
  00a51	68 e9 03 00 00	 push	 1001			; 000003e9H
  00a56	56		 push	 esi
  00a57	ff d3		 call	 ebx
  00a59	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00a5f	50		 push	 eax
  00a60	ff d7		 call	 edi
  00a62	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SetWindowTextW@8
  00a68	50		 push	 eax
  00a69	ff d5		 call	 ebp

; 355  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_INFO), GetString ("SETUP_OPTIONS_INFO"));

  00a6b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BMMFNCA@SETUP_OPTIONS_INFO?$AA@
  00a70	e8 00 00 00 00	 call	 _GetString
  00a75	83 c4 04	 add	 esp, 4
  00a78	50		 push	 eax
  00a79	68 eb 03 00 00	 push	 1003			; 000003ebH
  00a7e	56		 push	 esi
  00a7f	ff d3		 call	 ebx
  00a81	50		 push	 eax
  00a82	ff d7		 call	 edi
  00a84	50		 push	 eax
  00a85	ff d5		 call	 ebp

; 356  : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("AUTO_FOLDER_CREATION"));

  00a87	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@HFEALDNI@AUTO_FOLDER_CREATION?$AA@
  00a8c	e8 00 00 00 00	 call	 _GetString
  00a91	83 c4 04	 add	 esp, 4
  00a94	50		 push	 eax
  00a95	68 ed 03 00 00	 push	 1005			; 000003edH
  00a9a	56		 push	 esi
  00a9b	ff d7		 call	 edi
  00a9d	50		 push	 eax
  00a9e	ff d5		 call	 ebp

; 357  : 
; 358  : 				InitWizardDestInstallPath ();

  00aa0	e8 00 00 00 00	 call	 ?InitWizardDestInstallPath@@YAXXZ ; InitWizardDestInstallPath

; 359  : 
; 360  : 				SendMessage (GetDlgItem (hwndDlg, IDC_DESTINATION), EM_LIMITTEXT, TC_MAX_PATH - 1, 0);

  00aa5	6a 00		 push	 0
  00aa7	68 03 01 00 00	 push	 259			; 00000103H
  00aac	68 c5 00 00 00	 push	 197			; 000000c5H
  00ab1	68 e8 03 00 00	 push	 1000			; 000003e8H
  00ab6	56		 push	 esi
  00ab7	ff d7		 call	 edi
  00ab9	50		 push	 eax
  00aba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 361  : 
; 362  : 				SetDlgItemText (hwndDlg, IDC_DESTINATION, WizardDestInstallPath);

  00ac0	68 00 00 00 00	 push	 OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  00ac5	68 e8 03 00 00	 push	 1000			; 000003e8H
  00aca	56		 push	 esi
  00acb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12

; 363  : 
; 364  : 				if (bUpgrade)

  00ad1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bUpgrade, 0
  00ad8	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__EnableWindow@8
  00ade	0f 84 96 01 00
	00		 je	 $LN37@PageDialog

; 365  : 				{
; 366  : 					SetWindowTextW (GetDlgItem (hwndDlg, IDT_INSTALL_DESTINATION), GetString ("SETUP_UPGRADE_DESTINATION"));

  00ae4	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@GJOJHDCA@SETUP_UPGRADE_DESTINATION?$AA@
  00ae9	e8 00 00 00 00	 call	 _GetString
  00aee	83 c4 04	 add	 esp, 4
  00af1	50		 push	 eax
  00af2	68 f6 03 00 00	 push	 1014			; 000003f6H
  00af7	56		 push	 esi
  00af8	ff d7		 call	 edi
  00afa	50		 push	 eax
  00afb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 367  : 					EnableWindow (GetDlgItem (hwndDlg, IDC_DESTINATION), FALSE);

  00b01	6a 00		 push	 0
  00b03	68 e8 03 00 00	 push	 1000			; 000003e8H
  00b08	56		 push	 esi
  00b09	ff d7		 call	 edi
  00b0b	50		 push	 eax
  00b0c	ff d5		 call	 ebp

; 368  : 					EnableWindow (GetDlgItem (hwndDlg, IDC_BROWSE), FALSE);

  00b0e	6a 00		 push	 0
  00b10	68 ea 03 00 00	 push	 1002			; 000003eaH
  00b15	56		 push	 esi
  00b16	ff d7		 call	 edi
  00b18	50		 push	 eax
  00b19	ff d5		 call	 ebp

; 369  : 					EnableWindow (GetDlgItem (hwndDlg, IDC_ALL_USERS), FALSE);

  00b1b	6a 00		 push	 0
  00b1d	68 f5 03 00 00	 push	 1013			; 000003f5H
  00b22	56		 push	 esi
  00b23	ff d7		 call	 edi
  00b25	50		 push	 eax
  00b26	ff d5		 call	 ebp

; 370  : 
; 371  : 					/* Determine bForAllUsers state. */
; 372  : 					char path[MAX_PATH];
; 373  : 					SHGetSpecialFolderPath (hwndDlg, path, CSIDL_COMMON_PROGRAMS, 0);

  00b28	6a 00		 push	 0
  00b2a	6a 17		 push	 23			; 00000017H
  00b2c	8d 94 24 94 00
	00 00		 lea	 edx, DWORD PTR _path$95659[esp+412]
  00b33	52		 push	 edx
  00b34	56		 push	 esi
  00b35	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetSpecialFolderPathA@16

; 374  : 					bForAllUsers = (_access ((string (path) + "\\" TC_APP_NAME).c_str(), 0) == 0 || _access ((string (path) + "\\" TC_APP_NAME_LEGACY).c_str(), 0) == 0);

  00b3b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HNGGAEIF@?2CipherShed?$AA@
  00b40	8d 84 24 90 00
	00 00		 lea	 eax, DWORD PTR _path$95659[esp+408]
  00b47	50		 push	 eax
  00b48	8d 4c 24 5c	 lea	 ecx, DWORD PTR $T100578[esp+412]
  00b4c	c7 44 24 18 03
	00 00 00	 mov	 DWORD PTR $T100587[esp+412], 3
  00b54	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00b59	50		 push	 eax
  00b5a	8d 4c 24 40	 lea	 ecx, DWORD PTR $T100579[esp+412]
  00b5e	51		 push	 ecx
  00b5f	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00b64	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b67	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00b6b	72 05		 jb	 SHORT $LN79@PageDialog
  00b6d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00b70	eb 03		 jmp	 SHORT $LN80@PageDialog
$LN79@PageDialog:
  00b72	83 c0 04	 add	 eax, 4
$LN80@PageDialog:
  00b75	6a 00		 push	 0
  00b77	50		 push	 eax
  00b78	e8 00 00 00 00	 call	 __access
  00b7d	83 c4 08	 add	 esp, 8
  00b80	85 c0		 test	 eax, eax
  00b82	74 53		 je	 SHORT $LN66@PageDialog
  00b84	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LGADMAPO@?2TrueCrypt?$AA@
  00b89	8d 94 24 90 00
	00 00		 lea	 edx, DWORD PTR _path$95659[esp+408]
  00b90	52		 push	 edx
  00b91	8d 4c 24 78	 lea	 ecx, DWORD PTR $T100580[esp+412]
  00b95	c7 44 24 18 0f
	00 00 00	 mov	 DWORD PTR $T100587[esp+412], 15 ; 0000000fH
  00b9d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00ba2	50		 push	 eax
  00ba3	8d 44 24 24	 lea	 eax, DWORD PTR $T100581[esp+412]
  00ba7	50		 push	 eax
  00ba8	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00bad	83 c4 0c	 add	 esp, 12			; 0000000cH
  00bb0	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00bb4	72 05		 jb	 SHORT $LN85@PageDialog
  00bb6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00bb9	eb 03		 jmp	 SHORT $LN86@PageDialog
$LN85@PageDialog:
  00bbb	83 c0 04	 add	 eax, 4
$LN86@PageDialog:
  00bbe	6a 00		 push	 0
  00bc0	50		 push	 eax
  00bc1	e8 00 00 00 00	 call	 __access
  00bc6	83 c4 08	 add	 esp, 8
  00bc9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bForAllUsers, 0
  00bd3	85 c0		 test	 eax, eax
  00bd5	75 0a		 jne	 SHORT $LN67@PageDialog
$LN66@PageDialog:
  00bd7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bForAllUsers, 1
$LN67@PageDialog:
  00be1	f6 44 24 10 08	 test	 BYTE PTR $T100587[esp+404], 8
  00be6	74 0e		 je	 SHORT $LN71@PageDialog
  00be8	83 64 24 10 f7	 and	 DWORD PTR $T100587[esp+404], -9 ; fffffff7H
  00bed	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T100581[esp+404]
  00bf1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN71@PageDialog:
  00bf6	f6 44 24 10 04	 test	 BYTE PTR $T100587[esp+404], 4
  00bfb	74 0e		 je	 SHORT $LN72@PageDialog
  00bfd	83 64 24 10 fb	 and	 DWORD PTR $T100587[esp+404], -5 ; fffffffbH
  00c02	8d 4c 24 70	 lea	 ecx, DWORD PTR $T100580[esp+404]
  00c06	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN72@PageDialog:
  00c0b	f6 44 24 10 02	 test	 BYTE PTR $T100587[esp+404], 2
  00c10	74 0e		 je	 SHORT $LN73@PageDialog
  00c12	83 64 24 10 fd	 and	 DWORD PTR $T100587[esp+404], -3 ; fffffffdH
  00c17	8d 4c 24 38	 lea	 ecx, DWORD PTR $T100579[esp+404]
  00c1b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN73@PageDialog:
  00c20	f6 44 24 10 01	 test	 BYTE PTR $T100587[esp+404], 1
  00c25	74 09		 je	 SHORT $LN74@PageDialog
  00c27	8d 4c 24 54	 lea	 ecx, DWORD PTR $T100578[esp+404]
  00c2b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN74@PageDialog:

; 375  : 
; 376  : 					/* Determine bRegisterFileExt state. */
; 377  : 					HKEY hKey = 0;
; 378  : 					if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, "Software\\Classes\\TrueCryptVolume", 0, KEY_READ, &hKey) == ERROR_SUCCESS)

  00c30	8d 4c 24 14	 lea	 ecx, DWORD PTR _hKey$95679[esp+404]
  00c34	51		 push	 ecx
  00c35	68 19 00 02 00	 push	 131097			; 00020019H
  00c3a	6a 00		 push	 0
  00c3c	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@JOIIBOEC@Software?2Classes?2TrueCryptVolume@
  00c41	68 02 00 00 80	 push	 -2147483646		; 80000002H
  00c46	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _hKey$95679[esp+424], 0
  00c4e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00c54	85 c0		 test	 eax, eax
  00c56	75 22		 jne	 SHORT $LN37@PageDialog

; 379  : 					{
; 380  : 						RegCloseKey(hKey);

  00c58	8b 54 24 14	 mov	 edx, DWORD PTR _hKey$95679[esp+404]
  00c5c	52		 push	 edx
  00c5d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 381  : 						EnableWindow (GetDlgItem (hwndDlg, IDC_FILE_TYPE), FALSE);

  00c63	6a 00		 push	 0
  00c65	68 f0 03 00 00	 push	 1008			; 000003f0H
  00c6a	56		 push	 esi
  00c6b	ff d7		 call	 edi
  00c6d	50		 push	 eax
  00c6e	ff d5		 call	 ebp

; 382  : 						bRegisterFileExt = TRUE;

  00c70	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bRegisterFileExt, 1
$LN37@PageDialog:

; 383  : 					}
; 384  : 				}
; 385  : 
; 386  : 				// System Restore
; 387  : 				SetCheckBox (hwndDlg, IDC_SYSTEM_RESTORE, bSystemRestore);

  00c7a	a1 00 00 00 00	 mov	 eax, DWORD PTR _bSystemRestore
  00c7f	50		 push	 eax
  00c80	68 f3 03 00 00	 push	 1011			; 000003f3H
  00c85	56		 push	 esi
  00c86	e8 00 00 00 00	 call	 _SetCheckBox

; 388  : 				if (SystemRestoreDll == 0)

  00c8b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SystemRestoreDll
  00c91	83 c4 0c	 add	 esp, 12			; 0000000cH
  00c94	85 c9		 test	 ecx, ecx
  00c96	75 1c		 jne	 SHORT $LN36@PageDialog

; 389  : 				{
; 390  : 					SetCheckBox (hwndDlg, IDC_SYSTEM_RESTORE, FALSE);

  00c98	51		 push	 ecx
  00c99	68 f3 03 00 00	 push	 1011			; 000003f3H
  00c9e	56		 push	 esi
  00c9f	e8 00 00 00 00	 call	 _SetCheckBox
  00ca4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 391  : 					EnableWindow (GetDlgItem (hwndDlg, IDC_SYSTEM_RESTORE), FALSE);

  00ca7	6a 00		 push	 0
  00ca9	68 f3 03 00 00	 push	 1011			; 000003f3H
  00cae	56		 push	 esi
  00caf	ff d7		 call	 edi
  00cb1	50		 push	 eax
  00cb2	ff d5		 call	 ebp
$LN36@PageDialog:

; 392  : 				}
; 393  : 
; 394  : 				SetCheckBox (hwndDlg, IDC_ALL_USERS, bForAllUsers);

  00cb4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bForAllUsers
  00cba	52		 push	 edx
  00cbb	68 f5 03 00 00	 push	 1013			; 000003f5H
  00cc0	56		 push	 esi
  00cc1	e8 00 00 00 00	 call	 _SetCheckBox

; 395  : 				SetCheckBox (hwndDlg, IDC_FILE_TYPE, bRegisterFileExt);

  00cc6	a1 00 00 00 00	 mov	 eax, DWORD PTR _bRegisterFileExt
  00ccb	50		 push	 eax
  00ccc	68 f0 03 00 00	 push	 1008			; 000003f0H
  00cd1	56		 push	 esi
  00cd2	e8 00 00 00 00	 call	 _SetCheckBox

; 396  : 				SetCheckBox (hwndDlg, IDC_PROG_GROUP, bAddToStartMenu);

  00cd7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bAddToStartMenu
  00cdd	51		 push	 ecx
  00cde	68 f2 03 00 00	 push	 1010			; 000003f2H
  00ce3	56		 push	 esi
  00ce4	e8 00 00 00 00	 call	 _SetCheckBox

; 397  : 				SetCheckBox (hwndDlg, IDC_DESKTOP_ICON, bDesktopIcon);

  00ce9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bDesktopIcon
  00cef	52		 push	 edx
  00cf0	68 f4 03 00 00	 push	 1012			; 000003f4H
  00cf5	56		 push	 esi
  00cf6	e8 00 00 00 00	 call	 _SetCheckBox
  00cfb	83 c4 30	 add	 esp, 48			; 00000030H

; 398  : 
; 399  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString (bUpgrade ? "UPGRADE" : "INSTALL"));

  00cfe	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bUpgrade, 0
  00d05	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07CNHFDDPI@UPGRADE?$AA@
  00d0a	75 05		 jne	 SHORT $LN69@PageDialog
  00d0c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07PJFGKPND@INSTALL?$AA@
$LN69@PageDialog:
  00d11	50		 push	 eax
  00d12	e8 00 00 00 00	 call	 _GetString
  00d17	83 c4 04	 add	 esp, 4
  00d1a	50		 push	 eax
  00d1b	68 02 04 00 00	 push	 1026			; 00000402H
  00d20	56		 push	 esi
  00d21	ff d3		 call	 ebx
  00d23	50		 push	 eax
  00d24	ff d7		 call	 edi
  00d26	50		 push	 eax
  00d27	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 400  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  00d2d	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00d32	e8 00 00 00 00	 call	 _GetString
  00d37	83 c4 04	 add	 esp, 4
  00d3a	50		 push	 eax
  00d3b	68 03 04 00 00	 push	 1027			; 00000403H
  00d40	56		 push	 esi
  00d41	ff d3		 call	 ebx
  00d43	50		 push	 eax
  00d44	ff d7		 call	 edi
  00d46	50		 push	 eax
  00d47	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 401  : 
; 402  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDHELP), TRUE);

  00d4d	6a 01		 push	 1
  00d4f	6a 09		 push	 9
  00d51	56		 push	 esi
  00d52	ff d3		 call	 ebx
  00d54	50		 push	 eax
  00d55	ff d7		 call	 edi
  00d57	50		 push	 eax
  00d58	ff d5		 call	 ebp

; 403  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00d5a	6a 01		 push	 1
  00d5c	68 03 04 00 00	 push	 1027			; 00000403H
  00d61	56		 push	 esi
  00d62	ff d3		 call	 ebx
  00d64	50		 push	 eax
  00d65	ff d7		 call	 edi
  00d67	50		 push	 eax
  00d68	ff d5		 call	 ebp

; 404  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  00d6a	6a 01		 push	 1
  00d6c	68 02 04 00 00	 push	 1026			; 00000402H
  00d71	56		 push	 esi
  00d72	ff d3		 call	 ebx
  00d74	50		 push	 eax
  00d75	ff d7		 call	 edi
  00d77	50		 push	 eax
  00d78	ff d5		 call	 ebp

; 405  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);

  00d7a	6a 01		 push	 1
  00d7c	6a 02		 push	 2
  00d7e	56		 push	 esi
  00d7f	ff d3		 call	 ebx
  00d81	50		 push	 eax
  00d82	ff d7		 call	 edi
  00d84	50		 push	 eax
  00d85	ff d5		 call	 ebp

; 406  : 			}
; 407  : 			return 1;

  00d87	b8 01 00 00 00	 mov	 eax, 1
  00d8c	e9 c2 01 00 00	 jmp	 $LN99@PageDialog
$LN35@PageDialog:

; 408  : 
; 409  : 		case INSTALL_PROGRESS_PAGE:
; 410  : 
; 411  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SETUP_PROGRESS_TITLE"));

  00d91	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FGINDNOJ@SETUP_PROGRESS_TITLE?$AA@
  00d96	e8 00 00 00 00	 call	 _GetString
  00d9b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  00da1	83 c4 04	 add	 esp, 4
  00da4	50		 push	 eax
  00da5	68 e9 03 00 00	 push	 1001			; 000003e9H
  00daa	56		 push	 esi
  00dab	ff d7		 call	 edi
  00dad	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__GetDlgItem@8
  00db3	50		 push	 eax
  00db4	ff d5		 call	 ebp
  00db6	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextW@8
  00dbc	50		 push	 eax
  00dbd	ff d3		 call	 ebx

; 412  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_INFO), GetString ("SETUP_PROGRESS_INFO"));

  00dbf	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JGHDAHN@SETUP_PROGRESS_INFO?$AA@
  00dc4	e8 00 00 00 00	 call	 _GetString
  00dc9	83 c4 04	 add	 esp, 4
  00dcc	50		 push	 eax
  00dcd	68 eb 03 00 00	 push	 1003			; 000003ebH
  00dd2	56		 push	 esi
  00dd3	ff d7		 call	 edi
  00dd5	50		 push	 eax
  00dd6	ff d5		 call	 ebp
  00dd8	50		 push	 eax
  00dd9	ff d3		 call	 ebx

; 413  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  00ddb	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00de0	e8 00 00 00 00	 call	 _GetString
  00de5	83 c4 04	 add	 esp, 4
  00de8	50		 push	 eax
  00de9	68 02 04 00 00	 push	 1026			; 00000402H
  00dee	56		 push	 esi
  00def	ff d7		 call	 edi
  00df1	50		 push	 eax
  00df2	ff d5		 call	 ebp
  00df4	50		 push	 eax
  00df5	ff d3		 call	 ebx

; 414  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  00df7	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00dfc	e8 00 00 00 00	 call	 _GetString
  00e01	83 c4 04	 add	 esp, 4
  00e04	50		 push	 eax
  00e05	68 03 04 00 00	 push	 1027			; 00000403H
  00e0a	56		 push	 esi
  00e0b	ff d7		 call	 edi
  00e0d	50		 push	 eax
  00e0e	ff d5		 call	 ebp
  00e10	50		 push	 eax
  00e11	ff d3		 call	 ebx

; 415  : 
; 416  : 			if (bStartInstall)

  00e13	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bStartInstall@@3HA, 0 ; bStartInstall
  00e1a	0f 84 e5 00 00
	00		 je	 $LN34@PageDialog

; 417  : 			{
; 418  : 				/* Start install */
; 419  : 
; 420  : 				LastDialogId = "INSTALL_IN_PROGRESS";
; 421  : 
; 422  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  00e20	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00e25	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, OFFSET ??_C@_0BE@FMNDIKAG@INSTALL_IN_PROGRESS?$AA@
  00e2f	e8 00 00 00 00	 call	 _GetString
  00e34	83 c4 04	 add	 esp, 4
  00e37	50		 push	 eax
  00e38	68 02 04 00 00	 push	 1026			; 00000402H
  00e3d	56		 push	 esi
  00e3e	ff d7		 call	 edi
  00e40	50		 push	 eax
  00e41	ff d5		 call	 ebp
  00e43	50		 push	 eax
  00e44	ff d3		 call	 ebx

; 423  : 
; 424  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  00e46	6a 00		 push	 0
  00e48	68 03 04 00 00	 push	 1027			; 00000403H
  00e4d	56		 push	 esi
  00e4e	ff d7		 call	 edi
  00e50	50		 push	 eax
  00e51	ff d5		 call	 ebp
  00e53	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  00e59	50		 push	 eax
  00e5a	ff d3		 call	 ebx

; 425  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), FALSE);

  00e5c	6a 00		 push	 0
  00e5e	68 02 04 00 00	 push	 1026			; 00000402H
  00e63	56		 push	 esi
  00e64	ff d7		 call	 edi
  00e66	50		 push	 eax
  00e67	ff d5		 call	 ebp
  00e69	50		 push	 eax
  00e6a	ff d3		 call	 ebx

; 426  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDHELP), FALSE);

  00e6c	6a 00		 push	 0
  00e6e	6a 09		 push	 9
  00e70	56		 push	 esi
  00e71	ff d7		 call	 edi
  00e73	50		 push	 eax
  00e74	ff d5		 call	 ebp
  00e76	50		 push	 eax
  00e77	ff d3		 call	 ebx

; 427  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), FALSE);

  00e79	6a 00		 push	 0
  00e7b	6a 02		 push	 2
  00e7d	56		 push	 esi
  00e7e	ff d7		 call	 edi
  00e80	50		 push	 eax
  00e81	ff d5		 call	 ebp
  00e83	50		 push	 eax
  00e84	ff d3		 call	 ebx

; 428  : 
; 429  : 				InitProgressBar ();

  00e86	e8 00 00 00 00	 call	 _InitProgressBar

; 430  : 
; 431  : 				if (WizardDestInstallPath [strlen(WizardDestInstallPath)-1] != '\\')

  00e8b	b8 00 00 00 00	 mov	 eax, OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  00e90	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL97@PageDialog:
  00e93	8a 08		 mov	 cl, BYTE PTR [eax]
  00e95	40		 inc	 eax
  00e96	84 c9		 test	 cl, cl
  00e98	75 f9		 jne	 SHORT $LL97@PageDialog
  00e9a	2b c2		 sub	 eax, edx
  00e9c	80 b8 ff ff ff
	ff 5c		 cmp	 BYTE PTR ?WizardDestInstallPath@@3PADA[eax-1], 92 ; 0000005cH
  00ea3	74 1c		 je	 SHORT $LN33@PageDialog

; 432  : 					strcat (WizardDestInstallPath, "\\");

  00ea5	bf 00 00 00 00	 mov	 edi, OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  00eaa	4f		 dec	 edi
  00eab	eb 03 8d 49 00	 npad	 5
$LL98@PageDialog:
  00eb0	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00eb3	47		 inc	 edi
  00eb4	84 c0		 test	 al, al
  00eb6	75 f8		 jne	 SHORT $LL98@PageDialog
  00eb8	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
  00ebe	66 89 07	 mov	 WORD PTR [edi], ax
$LN33@PageDialog:

; 433  : 
; 434  : 				strcpy_s (InstallationPath, sizeof(InstallationPath), WizardDestInstallPath);

  00ec1	68 00 00 00 00	 push	 OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  00ec6	68 04 01 00 00	 push	 260			; 00000104H
  00ecb	68 00 00 00 00	 push	 OFFSET _InstallationPath
  00ed0	e8 00 00 00 00	 call	 _strcpy_s

; 435  : 
; 436  : 				WaitCursor ();

  00ed5	e8 00 00 00 00	 call	 _WaitCursor

; 437  : 
; 438  : 				bInProgress = TRUE;
; 439  : 				bStartInstall = FALSE;
; 440  : 
; 441  : 				_beginthread (DoInstall, 0, (void *) hwndDlg);

  00eda	56		 push	 esi
  00edb	6a 00		 push	 0
  00edd	68 00 00 00 00	 push	 OFFSET _DoInstall
  00ee2	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bInProgress@@3HA, 1 ; bInProgress
  00eec	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bStartInstall@@3HA, 0 ; bStartInstall
  00ef6	e8 00 00 00 00	 call	 __beginthread
  00efb	83 c4 18	 add	 esp, 24			; 00000018H

; 451  : 
; 452  : 			}
; 453  : 
; 454  : 			return 1;

  00efe	b8 01 00 00 00	 mov	 eax, 1
  00f03	eb 4e		 jmp	 SHORT $LN99@PageDialog
$LN34@PageDialog:

; 442  : 			}
; 443  : 			else
; 444  : 			{
; 445  : 				NormalCursor ();

  00f05	e8 00 00 00 00	 call	 _NormalCursor

; 446  : 
; 447  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00f0a	6a 01		 push	 1
  00f0c	68 03 04 00 00	 push	 1027			; 00000403H
  00f11	56		 push	 esi
  00f12	ff d7		 call	 edi
  00f14	50		 push	 eax
  00f15	ff d5		 call	 ebp
  00f17	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  00f1d	50		 push	 eax
  00f1e	ff d3		 call	 ebx

; 448  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  00f20	6a 01		 push	 1
  00f22	68 02 04 00 00	 push	 1026			; 00000402H
  00f27	56		 push	 esi
  00f28	ff d7		 call	 edi
  00f2a	50		 push	 eax
  00f2b	ff d5		 call	 ebp
  00f2d	50		 push	 eax
  00f2e	ff d3		 call	 ebx

; 449  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDHELP), TRUE);

  00f30	6a 01		 push	 1
  00f32	6a 09		 push	 9
  00f34	56		 push	 esi
  00f35	ff d7		 call	 edi
  00f37	50		 push	 eax
  00f38	ff d5		 call	 ebp
  00f3a	50		 push	 eax
  00f3b	ff d3		 call	 ebx

; 450  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);

  00f3d	6a 01		 push	 1
  00f3f	6a 02		 push	 2
  00f41	56		 push	 esi
  00f42	ff d7		 call	 edi
  00f44	50		 push	 eax
  00f45	ff d5		 call	 ebp
  00f47	50		 push	 eax
  00f48	ff d3		 call	 ebx
$LN32@PageDialog:

; 451  : 
; 452  : 			}
; 453  : 
; 454  : 			return 1;

  00f4a	b8 01 00 00 00	 mov	 eax, 1
  00f4f	eb 02		 jmp	 SHORT $LN99@PageDialog
$LN55@PageDialog:

; 455  : 
; 456  : 		case DONATIONS_PAGE:
; 457  : 
; 458  : 			return 1;
; 459  : 		}
; 460  : 
; 461  : 		return 0;

  00f51	33 c0		 xor	 eax, eax
$LN99@PageDialog:
  00f53	5d		 pop	 ebp
$LN60@PageDialog:

; 592  : }

  00f54	8b 8c 24 8c 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+400]
  00f5b	5f		 pop	 edi
  00f5c	5e		 pop	 esi
  00f5d	5b		 pop	 ebx
  00f5e	33 cc		 xor	 ecx, esp
  00f60	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00f65	81 c4 84 01 00
	00		 add	 esp, 388		; 00000184H
  00f6b	c2 10 00	 ret	 16			; 00000010H
$LN100@PageDialog:
  00f6e	8b ff		 npad	 2
$LN102@PageDialog:
  00f70	00 00 00 00	 DD	 $LN11@PageDialog
  00f74	00 00 00 00	 DD	 $LN12@PageDialog
  00f78	00 00 00 00	 DD	 $LN12@PageDialog
  00f7c	00 00 00 00	 DD	 $LN12@PageDialog
  00f80	00 00 00 00	 DD	 $LN12@PageDialog
  00f84	00 00 00 00	 DD	 $LN12@PageDialog
  00f88	00 00 00 00	 DD	 $LN6@PageDialog
  00f8c	00 00 00 00	 DD	 $LN12@PageDialog
  00f90	00 00 00 00	 DD	 $LN5@PageDialog
  00f94	00 00 00 00	 DD	 $LN8@PageDialog
  00f98	00 00 00 00	 DD	 $LN4@PageDialog
  00f9c	00 00 00 00	 DD	 $LN7@PageDialog
$LN103@PageDialog:
  00fa0	00 00 00 00	 DD	 $LN54@PageDialog
  00fa4	00 00 00 00	 DD	 $LN51@PageDialog
  00fa8	00 00 00 00	 DD	 $LN40@PageDialog
  00fac	00 00 00 00	 DD	 $LN35@PageDialog
  00fb0	00 00 00 00	 DD	 $LN46@PageDialog
  00fb4	00 00 00 00	 DD	 $LN44@PageDialog
  00fb8	00 00 00 00	 DD	 $LN32@PageDialog
_PageDialogProc@16 ENDP
_TEXT	ENDS
PUBLIC	?LoadPage@@YAXPAUHWND__@@H@Z			; LoadPage
EXTRN	__imp__MoveWindow@24:PROC
EXTRN	__imp__MapDialogRect@8:PROC
EXTRN	__imp__CreateDialogParamW@20:PROC
EXTRN	_hInst:DWORD
EXTRN	__imp__GetWindowRect@8:PROC
EXTRN	__imp__DestroyWindow@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?LoadPage@@YAXPAUHWND__@@H@Z
_TEXT	SEGMENT
_rD$ = -32						; size = 16
_rW$ = -16						; size = 16
_hwndDlg$ = 8						; size = 4
_nPageNo$ = 12						; size = 4
?LoadPage@@YAXPAUHWND__@@H@Z PROC			; LoadPage, COMDAT

; 97   : 	RECT rD, rW;
; 98   : 
; 99   : 	if (hCurPage != NULL)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00005	83 ec 20	 sub	 esp, 32			; 00000020H
  00008	85 c0		 test	 eax, eax
  0000a	74 07		 je	 SHORT $LN11@LoadPage

; 100  : 	{
; 101  : 		DestroyWindow (hCurPage);

  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
$LN11@LoadPage:

; 102  : 	}
; 103  : 
; 104  : 	InvalidateRect (GetDlgItem (MainDlg, IDC_MAIN_CONTENT_CANVAS), NULL, TRUE);

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00020	6a 01		 push	 1
  00022	6a 00		 push	 0
  00024	68 07 04 00 00	 push	 1031			; 00000407H
  00029	50		 push	 eax
  0002a	ff d7		 call	 edi
  0002c	50		 push	 eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 105  : 
; 106  : 	GetWindowRect (GetDlgItem (hwndDlg, IDC_POS_BOX), &rW);

  00033	8b 74 24 2c	 mov	 esi, DWORD PTR _hwndDlg$[esp+36]
  00037	8d 4c 24 18	 lea	 ecx, DWORD PTR _rW$[esp+40]
  0003b	51		 push	 ecx
  0003c	68 05 04 00 00	 push	 1029			; 00000405H
  00041	56		 push	 esi
  00042	ff d7		 call	 edi
  00044	50		 push	 eax
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 107  : 
; 108  : 	nCurPageNo = nPageNo;

  0004b	8b 44 24 30	 mov	 eax, DWORD PTR _nPageNo$[esp+36]
  0004f	a3 00 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, eax ; nCurPageNo

; 109  : 
; 110  : 	switch (nPageNo)

  00054	83 f8 06	 cmp	 eax, 6
  00057	0f 87 85 00 00
	00		 ja	 $LN9@LoadPage
  0005d	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN16@LoadPage[eax*4]
$LN8@LoadPage:

; 111  : 	{
; 112  : 	case INTRO_PAGE:
; 113  : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INTRO_PAGE_DLG), hwndDlg,
; 114  : 					 (DLGPROC) PageDialogProc);

  00064	6a 00		 push	 0
  00066	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0006b	56		 push	 esi
  0006c	6a 6c		 push	 108			; 0000006cH

; 115  : 		break;

  0006e	eb 60		 jmp	 SHORT $LN14@LoadPage
$LN7@LoadPage:

; 116  : 
; 117  : 	case WIZARD_MODE_PAGE:
; 118  : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_WIZARD_MODE_PAGE_DLG), hwndDlg,
; 119  : 					 (DLGPROC) PageDialogProc);

  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00075	6a 00		 push	 0
  00077	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0007c	56		 push	 esi
  0007d	6a 70		 push	 112			; 00000070H
  0007f	50		 push	 eax

; 120  : 		break;

  00080	eb 55		 jmp	 SHORT $LN15@LoadPage
$LN6@LoadPage:

; 121  : 
; 122  : 	case INSTALL_OPTIONS_PAGE:
; 123  : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INSTALL_OPTIONS_PAGE_DLG), hwndDlg,
; 124  : 					 (DLGPROC) PageDialogProc);

  00082	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00088	6a 00		 push	 0
  0008a	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0008f	56		 push	 esi
  00090	6a 66		 push	 102			; 00000066H
  00092	51		 push	 ecx

; 125  : 		break;

  00093	eb 42		 jmp	 SHORT $LN15@LoadPage
$LN5@LoadPage:

; 126  : 
; 127  : 	case INSTALL_PROGRESS_PAGE:
; 128  : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_PROGRESS_PAGE_DLG), hwndDlg,
; 129  : 					 (DLGPROC) PageDialogProc);

  00095	6a 00		 push	 0
  00097	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0009c	56		 push	 esi
  0009d	6a 71		 push	 113			; 00000071H

; 130  : 		break;

  0009f	eb 2f		 jmp	 SHORT $LN14@LoadPage
$LN4@LoadPage:

; 131  : 
; 132  : 	case EXTRACTION_OPTIONS_PAGE:
; 133  : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_EXTRACTION_OPTIONS_PAGE_DLG), hwndDlg,
; 134  : 					 (DLGPROC) PageDialogProc);

  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  000a6	6a 00		 push	 0
  000a8	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  000ad	56		 push	 esi
  000ae	6a 6a		 push	 106			; 0000006aH
  000b0	50		 push	 eax

; 135  : 		break;

  000b1	eb 24		 jmp	 SHORT $LN15@LoadPage
$LN3@LoadPage:

; 136  : 
; 137  : 	case EXTRACTION_PROGRESS_PAGE:
; 138  : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_PROGRESS_PAGE_DLG), hwndDlg,
; 139  : 					 (DLGPROC) PageDialogProc);

  000b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  000b9	6a 00		 push	 0
  000bb	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  000c0	56		 push	 esi
  000c1	6a 71		 push	 113			; 00000071H
  000c3	51		 push	 ecx

; 140  : 		break;

  000c4	eb 11		 jmp	 SHORT $LN15@LoadPage
$LN2@LoadPage:

; 141  : 
; 142  : 	case DONATIONS_PAGE:
; 143  : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_DONATIONS_PAGE_DLG), hwndDlg,
; 144  : 					 (DLGPROC) PageDialogProc);

  000c6	6a 00		 push	 0
  000c8	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  000cd	56		 push	 esi
  000ce	6a 72		 push	 114			; 00000072H
$LN14@LoadPage:
  000d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  000d6	52		 push	 edx
$LN15@LoadPage:
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  000dd	a3 00 00 00 00	 mov	 DWORD PTR ?hCurPage@@3PAUHWND__@@A, eax ; hCurPage
$LN9@LoadPage:

; 145  : 		break;
; 146  : 	}
; 147  : 
; 148  : 	rD.left = 15;
; 149  : 	rD.top = 45;
; 150  : 	rD.right = 0;
; 151  : 	rD.bottom = 0;
; 152  : 	MapDialogRect (hwndDlg, &rD);

  000e2	8d 44 24 08	 lea	 eax, DWORD PTR _rD$[esp+40]
  000e6	50		 push	 eax
  000e7	56		 push	 esi
  000e8	c7 44 24 10 0f
	00 00 00	 mov	 DWORD PTR _rD$[esp+48], 15 ; 0000000fH
  000f0	c7 44 24 14 2d
	00 00 00	 mov	 DWORD PTR _rD$[esp+52], 45 ; 0000002dH
  000f8	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _rD$[esp+56], 0
  00100	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR _rD$[esp+60], 0
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8

; 153  : 
; 154  : 	if (hCurPage != NULL)

  0010e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00113	5f		 pop	 edi
  00114	5e		 pop	 esi
  00115	85 c0		 test	 eax, eax
  00117	74 33		 je	 SHORT $LN1@LoadPage

; 155  : 	{
; 156  : 		MoveWindow (hCurPage, rD.left, rD.top, rW.right - rW.left, rW.bottom - rW.top, TRUE);

  00119	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rW$[esp+44]
  0011d	2b 4c 24 14	 sub	 ecx, DWORD PTR _rW$[esp+36]
  00121	8b 54 24 18	 mov	 edx, DWORD PTR _rW$[esp+40]
  00125	2b 54 24 10	 sub	 edx, DWORD PTR _rW$[esp+32]
  00129	6a 01		 push	 1
  0012b	51		 push	 ecx
  0012c	8b 4c 24 0c	 mov	 ecx, DWORD PTR _rD$[esp+44]
  00130	52		 push	 edx
  00131	8b 54 24 0c	 mov	 edx, DWORD PTR _rD$[esp+44]
  00135	51		 push	 ecx
  00136	52		 push	 edx
  00137	50		 push	 eax
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 157  : 		ShowWindow (hCurPage, SW_SHOWNORMAL);

  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00143	6a 01		 push	 1
  00145	50		 push	 eax
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN1@LoadPage:

; 158  : 	}
; 159  : 
; 160  : 	/* Refresh the graphics (white background of some texts, etc.) */
; 161  : 	RefreshUIGFX ();

  0014c	e8 00 00 00 00	 call	 _RefreshUIGFX

; 162  : }

  00151	83 c4 20	 add	 esp, 32			; 00000020H
  00154	c3		 ret	 0
  00155	8d 49 00	 npad	 3
$LN16@LoadPage:
  00158	00 00 00 00	 DD	 $LN8@LoadPage
  0015c	00 00 00 00	 DD	 $LN7@LoadPage
  00160	00 00 00 00	 DD	 $LN6@LoadPage
  00164	00 00 00 00	 DD	 $LN5@LoadPage
  00168	00 00 00 00	 DD	 $LN4@LoadPage
  0016c	00 00 00 00	 DD	 $LN3@LoadPage
  00170	00 00 00 00	 DD	 $LN2@LoadPage
?LoadPage@@YAXPAUHWND__@@H@Z ENDP			; LoadPage
_TEXT	ENDS
PUBLIC	??_C@_0BJ@LLBBBPBJ@EXTRACTION_FINISHED_INFO?$AA@ ; `string'
PUBLIC	??_C@_0P@DHOALJNC@INSTALL_FAILED?$AA@		; `string'
PUBLIC	??_C@_07CIAHAGHC@IDCLOSE?$AA@			; `string'
PUBLIC	??_C@_11LOCGONAA@?$AA?$AA@			; `string'
PUBLIC	??_C@_0BC@GODHAKFG@EXTRACTION_FAILED?$AA@	; `string'
PUBLIC	??_C@_08MFKGCNCO@FINALIZE?$AA@			; `string'
PUBLIC	??_C@_0BK@BNLHLNNA@CIPHERSHED_MIGRATION_NOTE?$AA@ ; `string'
PUBLIC	??_C@_0BC@NKLIMG@TRAVELER_UAC_NOTE?$AA@		; `string'
PUBLIC	??_C@_0BK@HICKIHM@TRAVELER_LIMITATIONS_NOTE?$AA@ ; `string'
PUBLIC	??_C@_1BBI@MKDPBCB@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAs?$AA?5?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AA?5?$AAR?$AAo?$AAl?$AAl?$AAu@ ; `string'
PUBLIC	??_C@_0DM@BHNBHIPG@SOFTWARE?2Microsoft?2Updates?2Windo@ ; `string'
PUBLIC	??_C@_1DJC@HALCKFBP@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAn?$AAo?$AAt?$AAe?$AA?5?$AAt?$AAh?$AAa?$AAt?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?5?$AAm@ ; `string'
PUBLIC	??_C@_0BJ@IIFCEEHH@CipherShed?5Setup?50?47?44?41?$AA@ ; `string'
PUBLIC	??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@	; `string'
PUBLIC	??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@		; `string'
PUBLIC	??_C@_0BL@OMDAGJAA@UPGRADE_OK_REBOOT_REQUIRED?$AA@ ; `string'
PUBLIC	??_C@_0BC@FIMNAHGL@beginnerstutorial?$AA@	; `string'
PUBLIC	??_C@_0BH@JALPBIFE@AFTER_INSTALL_TUTORIAL?$AA@	; `string'
PUBLIC	??_C@_0N@MAFEFKDE@releasenotes?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0BM@PEPDOHPE@AFTER_UPGRADE_RELEASE_NOTES?$AA@ ; `string'
PUBLIC	??_C@_04PMOCAHAA@open?$AA@			; `string'
PUBLIC	??_C@_0BH@KAHGPAJO@CONFIRM_EXIT_UNIVERSAL?$AA@	; `string'
PUBLIC	_MainDialogProc@16
EXTRN	_StatusMessage:PROC
EXTRN	__imp__GetWindowTextA@12:PROC
EXTRN	_AskWarnYesNo:PROC
EXTRN	_IsUacSupported:PROC
EXTRN	_Info:PROC
EXTRN	_AbortProcessSilent:PROC
EXTRN	_ErrorDirect:PROC
EXTRN	_WarningDirect:PROC
EXTRN	_nCurrentOS:DWORD
EXTRN	__imp__PostMessageA@16:PROC
EXTRN	__imp__DialogBoxParamW@20:PROC
EXTRN	_AboutDlgProc@16:PROC
EXTRN	__imp__SetWindowPos@28:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	_RenderBitmap:PROC
EXTRN	_ScreenDPI:DWORD
EXTRN	_InitDialog:PROC
EXTRN	_AbortProcess:PROC
EXTRN	_CreateAppSetupMutex:PROC
EXTRN	__imp__GetModuleFileNameA@12:PROC
EXTRN	_RestartComputer:PROC
EXTRN	_bRestartRequired:DWORD
EXTRN	_Applink:PROC
EXTRN	_AskYesNo:PROC
EXTRN	__imp__ShellExecuteA@24:PROC
EXTRN	_AskNoYes:PROC
EXTRN	_bDevm:DWORD
;	COMDAT ??_C@_0BJ@LLBBBPBJ@EXTRACTION_FINISHED_INFO?$AA@
CONST	SEGMENT
??_C@_0BJ@LLBBBPBJ@EXTRACTION_FINISHED_INFO?$AA@ DB 'EXTRACTION_FINISHED_'
	DB	'INFO', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DHOALJNC@INSTALL_FAILED?$AA@
CONST	SEGMENT
??_C@_0P@DHOALJNC@INSTALL_FAILED?$AA@ DB 'INSTALL_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CIAHAGHC@IDCLOSE?$AA@
CONST	SEGMENT
??_C@_07CIAHAGHC@IDCLOSE?$AA@ DB 'IDCLOSE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_11LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GODHAKFG@EXTRACTION_FAILED?$AA@
CONST	SEGMENT
??_C@_0BC@GODHAKFG@EXTRACTION_FAILED?$AA@ DB 'EXTRACTION_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MFKGCNCO@FINALIZE?$AA@
CONST	SEGMENT
??_C@_08MFKGCNCO@FINALIZE?$AA@ DB 'FINALIZE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BNLHLNNA@CIPHERSHED_MIGRATION_NOTE?$AA@
CONST	SEGMENT
??_C@_0BK@BNLHLNNA@CIPHERSHED_MIGRATION_NOTE?$AA@ DB 'CIPHERSHED_MIGRATIO'
	DB	'N_NOTE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NKLIMG@TRAVELER_UAC_NOTE?$AA@
CONST	SEGMENT
??_C@_0BC@NKLIMG@TRAVELER_UAC_NOTE?$AA@ DB 'TRAVELER_UAC_NOTE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HICKIHM@TRAVELER_LIMITATIONS_NOTE?$AA@
CONST	SEGMENT
??_C@_0BK@HICKIHM@TRAVELER_LIMITATIONS_NOTE?$AA@ DB 'TRAVELER_LIMITATIONS'
	DB	'_NOTE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BBI@MKDPBCB@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAs?$AA?5?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AA?5?$AAR?$AAo?$AAl?$AAl?$AAu@
CONST	SEGMENT
??_C@_1BBI@MKDPBCB@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAs?$AA?5?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AA?5?$AAR?$AAo?$AAl?$AAl?$AAu@ DB 'C'
	DB	00H, 'i', 00H, 'p', 00H, 'h', 00H, 'e', 00H, 'r', 00H, 'S', 00H
	DB	'h', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'q'
	DB	00H, 'u', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 's', 00H, ' ', 00H
	DB	'U', 00H, 'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' '
	DB	00H, 'R', 00H, 'o', 00H, 'l', 00H, 'l', 00H, 'u', 00H, 'p', 00H
	DB	' ', 00H, '1', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	's', 00H, ' ', 00H, '2', 00H, '0', 00H, '0', 00H, '0', 00H, ' '
	DB	00H, 'S', 00H, 'P', 00H, '4', 00H, ' ', 00H, 't', 00H, 'o', 00H
	DB	' ', 00H, 'b', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 's'
	DB	00H, 't', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	'.', 00H, 0aH, 00H, 0aH, 00H, 'F', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, 'm', 00H, 'o', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, ',', 00H, ' ', 00H, 's', 00H
	DB	'e', 00H, 'e', 00H, ' ', 00H, 'h', 00H, 't', 00H, 't', 00H, 'p'
	DB	00H, ':', 00H, '/', 00H, '/', 00H, 's', 00H, 'u', 00H, 'p', 00H
	DB	'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, '.', 00H, 'm', 00H, 'i'
	DB	00H, 'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H
	DB	't', 00H, '.', 00H, 'c', 00H, 'o', 00H, 'm', 00H, '/', 00H, 'k'
	DB	00H, 'b', 00H, '/', 00H, '8', 00H, '9', 00H, '1', 00H, '8', 00H
	DB	'6', 00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@BHNBHIPG@SOFTWARE?2Microsoft?2Updates?2Windo@
CONST	SEGMENT
??_C@_0DM@BHNBHIPG@SOFTWARE?2Microsoft?2Updates?2Windo@ DB 'SOFTWARE\Micr'
	DB	'osoft\Updates\Windows 2000\SP5\Update Rollup 1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DJC@HALCKFBP@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAn?$AAo?$AAt?$AAe?$AA?5?$AAt?$AAh?$AAa?$AAt?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?5?$AAm@
CONST	SEGMENT
??_C@_1DJC@HALCKFBP@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAn?$AAo?$AAt?$AAe?$AA?5?$AAt?$AAh?$AAa?$AAt?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?5?$AAm@ DB 'W'
	DB	00H, 'a', 00H, 'r', 00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	':', 00H, ' ', 00H, 'P', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's'
	DB	00H, 'e', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, 'e', 00H
	DB	' ', 00H, 't', 00H, 'h', 00H, 'a', 00H, 't', 00H, ' ', 00H, 't'
	DB	00H, 'h', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'm', 00H, 'a', 00H
	DB	'y', 00H, ' ', 00H, 'b', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h'
	DB	00H, 'e', 00H, ' ', 00H, 'l', 00H, 'a', 00H, 's', 00H, 't', 00H
	DB	' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'C', 00H
	DB	'i', 00H, 'p', 00H, 'h', 00H, 'e', 00H, 'r', 00H, 'S', 00H, 'h'
	DB	00H, 'e', 00H, 'd', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'a', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o'
	DB	00H, 'r', 00H, 't', 00H, 's', 00H, ' ', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, '2'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, '.', 00H, ' ', 00H, 'I', 00H
	DB	'f', 00H, ' ', 00H, 'y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'w'
	DB	00H, 'a', 00H, 'n', 00H, 't', 00H, ' ', 00H, 't', 00H, 'o', 00H
	DB	' ', 00H, 'b', 00H, 'e', 00H, ' ', 00H, 'a', 00H, 'b', 00H, 'l'
	DB	00H, 'e', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'u', 00H
	DB	'p', 00H, 'g', 00H, 'r', 00H, 'a', 00H, 'd', 00H, 'e', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'f', 00H, 'u', 00H, 't', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, 's', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 's', 00H, ' ', 00H
	DB	'o', 00H, 'f', 00H, ' ', 00H, 'C', 00H, 'i', 00H, 'p', 00H, 'h'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 'h', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, '(', 00H, 'w', 00H, 'h', 00H, 'i', 00H, 'c', 00H, 'h'
	DB	00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'h', 00H, 'i', 00H
	DB	'g', 00H, 'h', 00H, 'l', 00H, 'y', 00H, ' ', 00H, 'r', 00H, 'e'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'd', 00H, ')', 00H, ',', 00H, ' ', 00H, 'y'
	DB	00H, 'o', 00H, 'u', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'l', 00H
	DB	'l', 00H, ' ', 00H, 'n', 00H, 'e', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'u', 00H, 'p', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'o'
	DB	00H, ' ', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'w', 00H, 's', 00H, ' ', 00H, 'X', 00H, 'P', 00H, ' ', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'l', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, 's', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'o', 00H
	DB	'f', 00H, ' ', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, 's', 00H, '.', 00H, 0aH, 00H, 0aH, 00H, 'N', 00H
	DB	'o', 00H, 't', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'M', 00H, 'i'
	DB	00H, 'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'o', 00H, 'p', 00H, 'p'
	DB	00H, 'e', 00H, 'd', 00H, ' ', 00H, 'i', 00H, 's', 00H, 's', 00H
	DB	'u', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 's', 00H, 'e'
	DB	00H, 'c', 00H, 'u', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y', 00H
	DB	' ', 00H, 'u', 00H, 'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 's', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, ' ', 00H, '2', 00H, '0', 00H, '0', 00H, '0', 00H, ' ', 00H
	DB	't', 00H, 'o', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' '
	DB	00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'p', 00H, 'u', 00H, 'b', 00H, 'l', 00H, 'i'
	DB	00H, 'c', 00H, ' ', 00H, 'o', 00H, 'n', 00H, ' ', 00H, '7', 00H
	DB	'/', 00H, '1', 00H, '3', 00H, '/', 00H, '2', 00H, '0', 00H, '1'
	DB	00H, '0', 00H, ' ', 00H, '(', 00H, 't', 00H, 'h', 00H, 'e', 00H
	DB	' ', 00H, 'l', 00H, 'a', 00H, 's', 00H, 't', 00H, ' ', 00H, 'n'
	DB	00H, 'o', 00H, 'n', 00H, '-', 00H, 's', 00H, 'e', 00H, 'c', 00H
	DB	'u', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y', 00H, ' ', 00H, 'u'
	DB	00H, 'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H
	DB	'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'W', 00H, 'i', 00H, 'n'
	DB	00H, 'd', 00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, '2', 00H
	DB	'0', 00H, '0', 00H, '0', 00H, ' ', 00H, 'w', 00H, 'a', 00H, 's'
	DB	00H, ' ', 00H, 'i', 00H, 's', 00H, 's', 00H, 'u', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 't', 00H, 'h'
	DB	00H, 'e', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 'p', 00H, 'u', 00H, 'b'
	DB	00H, 'l', 00H, 'i', 00H, 'c', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	' ', 00H, '2', 00H, '0', 00H, '0', 00H, '5', 00H, ')', 00H, '.'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IIFCEEHH@CipherShed?5Setup?50?47?44?41?$AA@
CONST	SEGMENT
??_C@_0BJ@IIFCEEHH@CipherShed?5Setup?50?47?44?41?$AA@ DB 'CipherShed Setu'
	DB	'p 0.7.4.1', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@
CONST	SEGMENT
??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@ DB 'TC_INSTALLER_IS_RUNNI'
	DB	'NG', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@
CONST	SEGMENT
??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@ DB 'CONFIRM_RESTART', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OMDAGJAA@UPGRADE_OK_REBOOT_REQUIRED?$AA@
CONST	SEGMENT
??_C@_0BL@OMDAGJAA@UPGRADE_OK_REBOOT_REQUIRED?$AA@ DB 'UPGRADE_OK_REBOOT_'
	DB	'REQUIRED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FIMNAHGL@beginnerstutorial?$AA@
CONST	SEGMENT
??_C@_0BC@FIMNAHGL@beginnerstutorial?$AA@ DB 'beginnerstutorial', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JALPBIFE@AFTER_INSTALL_TUTORIAL?$AA@
CONST	SEGMENT
??_C@_0BH@JALPBIFE@AFTER_INSTALL_TUTORIAL?$AA@ DB 'AFTER_INSTALL_TUTORIAL'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MAFEFKDE@releasenotes?$AA@
CONST	SEGMENT
??_C@_0N@MAFEFKDE@releasenotes?$AA@ DB 'releasenotes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PEPDOHPE@AFTER_UPGRADE_RELEASE_NOTES?$AA@
CONST	SEGMENT
??_C@_0BM@PEPDOHPE@AFTER_UPGRADE_RELEASE_NOTES?$AA@ DB 'AFTER_UPGRADE_REL'
	DB	'EASE_NOTES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
CONST	SEGMENT
??_C@_04PMOCAHAA@open?$AA@ DB 'open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KAHGPAJO@CONFIRM_EXIT_UNIVERSAL?$AA@
CONST	SEGMENT
??_C@_0BH@KAHGPAJO@CONFIRM_EXIT_UNIVERSAL?$AA@ DB 'CONFIRM_EXIT_UNIVERSAL'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _MainDialogProc@16
_TEXT	SEGMENT
_rD$100702 = -48					; size = 16
_rD$100686 = -48					; size = 16
_rD$100670 = -48					; size = 16
_rD$100655 = -48					; size = 16
_rW$100703 = -32					; size = 16
_rW$100687 = -32					; size = 16
_rW$100671 = -32					; size = 16
_rW$100656 = -32					; size = 16
_rec$95760 = -16					; size = 16
_hkey$95791 = 8						; size = 4
_hwndDlg$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_MainDialogProc@16 PROC					; COMDAT

; 641  : 	WORD lw = LOWORD (wParam);
; 642  : 
; 643  : 	switch (uMsg)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _uMsg$[esp-4]
  00004	83 ec 30	 sub	 esp, 48			; 00000030H
  00007	53		 push	 ebx
  00008	55		 push	 ebp
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	3d 10 01 00 00	 cmp	 eax, 272		; 00000110H
  00010	0f 87 15 04 00
	00		 ja	 $LN65@MainDialog
  00016	0f 84 62 01 00
	00		 je	 $LN58@MainDialog
  0001c	83 c0 f1	 add	 eax, -15		; fffffff1H
  0001f	83 f8 44	 cmp	 eax, 68			; 00000044H
  00022	0f 87 f7 03 00
	00		 ja	 $LN52@MainDialog
  00028	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN119@MainDialog[eax]
  0002f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN125@MainDialog[eax*4]
$LN50@MainDialog:

; 699  : 
; 700  : 			return 1;
; 701  : 		}
; 702  : 		return 0;
; 703  : 
; 704  : 	case WM_HELP:
; 705  : 		if (bLicenseAccepted)

  00036	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bLicenseAccepted@@3HA, 0 ; bLicenseAccepted
  0003d	0f 84 fd 0b 00
	00		 je	 $LN49@MainDialog

; 706  : 			OpenPageHelp (hwndDlg, nCurPageNo);

  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00049	8b 54 24 44	 mov	 edx, DWORD PTR _hwndDlg$[esp+60]
  0004d	51		 push	 ecx
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 _OpenPageHelp
  00054	83 c4 08	 add	 esp, 8
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp

; 937  : 
; 938  : 		return 1;

  0005a	b8 01 00 00 00	 mov	 eax, 1
  0005f	5b		 pop	 ebx

; 1016 : }

  00060	83 c4 30	 add	 esp, 48			; 00000030H
  00063	c2 10 00	 ret	 16			; 00000010H
$LN9@MainDialog:

; 939  : 
; 940  : 	case TC_APPMSG_EXTRACTION_FAILURE:
; 941  : 		
; 942  : 		/* Extraction failed */
; 943  : 
; 944  : 		bInProgress = FALSE;
; 945  : 
; 946  : 		NormalCursor ();
; 947  : 
; 948  : 		StatusMessage (hCurPage, "EXTRACTION_FAILED");
; 949  : 
; 950  : 		UpdateProgressBarProc(0);
; 951  : 
; 952  : 		SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_TITLE), GetString ("EXTRACTION_FAILED"));
; 953  : 		SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_INFO), L"");
; 954  : 
; 955  : 		SetWindowTextW (GetDlgItem (hwndDlg, IDCANCEL), GetString ("IDCLOSE"));
; 956  : 		EnableWindow (GetDlgItem (hwndDlg, IDHELP), TRUE);
; 957  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_PREV), FALSE);
; 958  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), FALSE);
; 959  : 		EnableWindow (GetDlgItem (hwndDlg, IDCANCEL), TRUE);
; 960  : 
; 961  : 		RefreshUIGFX();
; 962  : 
; 963  : 		Error ("EXTRACTION_FAILED");
; 964  : 
; 965  : 		return 1;
; 966  : 
; 967  : 	case WM_CLOSE:
; 968  : 
; 969  : 		if (!bDevm)

  00066	33 ed		 xor	 ebp, ebp
  00068	39 2d 00 00 00
	00		 cmp	 DWORD PTR _bDevm, ebp
  0006e	0f 85 ee 00 00
	00		 jne	 $LN1@MainDialog

; 970  : 		{
; 971  : 			if (bInProgress)

  00074	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?bInProgress@@3HA, ebp ; bInProgress
  0007a	74 20		 je	 SHORT $LN7@MainDialog

; 972  : 			{
; 973  : 				NormalCursor();

  0007c	e8 00 00 00 00	 call	 _NormalCursor

; 974  : 				if (AskNoYes("CONFIRM_EXIT_UNIVERSAL") == IDNO)

  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KAHGPAJO@CONFIRM_EXIT_UNIVERSAL?$AA@
  00086	e8 00 00 00 00	 call	 _AskNoYes
  0008b	83 c4 04	 add	 esp, 4
  0008e	83 f8 07	 cmp	 eax, 7

; 975  : 				{
; 976  : 					return 1;

  00091	0f 84 a9 0b 00
	00		 je	 $LN49@MainDialog

; 977  : 				}
; 978  : 				WaitCursor ();

  00097	e8 00 00 00 00	 call	 _WaitCursor
$LN7@MainDialog:

; 979  : 			}
; 980  : 
; 981  : 			if (bOpenContainingFolder && bExtractOnly && bExtractionSuccessful)

  0009c	bb 06 00 00 00	 mov	 ebx, 6
  000a1	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?bOpenContainingFolder@@3HA, ebp ; bOpenContainingFolder
  000a7	74 27		 je	 SHORT $LN5@MainDialog
  000a9	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?bExtractOnly@@3HA, ebp ; bExtractOnly
  000af	74 1f		 je	 SHORT $LN5@MainDialog
  000b1	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?bExtractionSuccessful@@3HA, ebp ; bExtractionSuccessful
  000b7	74 17		 je	 SHORT $LN5@MainDialog

; 982  : 			{
; 983  : 				ShellExecute (NULL, "open", WizardDestExtractPath, NULL, NULL, SW_SHOWNORMAL);

  000b9	6a 01		 push	 1
  000bb	55		 push	 ebp
  000bc	55		 push	 ebp
  000bd	68 00 00 00 00	 push	 OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  000c7	55		 push	 ebp
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24

; 984  : 			}
; 985  : 			else

  000ce	eb 66		 jmp	 SHORT $LN4@MainDialog
$LN5@MainDialog:

; 986  : 			{
; 987  : 				if (bPromptReleaseNotes
; 988  : 					&& AskYesNo ("AFTER_UPGRADE_RELEASE_NOTES") == IDYES)

  000d0	39 2d 00 00 00
	00		 cmp	 DWORD PTR _bPromptReleaseNotes, ebp
  000d6	74 25		 je	 SHORT $LN3@MainDialog
  000d8	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PEPDOHPE@AFTER_UPGRADE_RELEASE_NOTES?$AA@
  000dd	e8 00 00 00 00	 call	 _AskYesNo
  000e2	83 c4 04	 add	 esp, 4
  000e5	3b c3		 cmp	 eax, ebx
  000e7	75 14		 jne	 SHORT $LN3@MainDialog

; 989  : 				{
; 990  : 					Applink ("releasenotes", TRUE, "");

  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000ee	6a 01		 push	 1
  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MAFEFKDE@releasenotes?$AA@
  000f5	e8 00 00 00 00	 call	 _Applink
  000fa	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@MainDialog:

; 991  : 				}
; 992  : 
; 993  : 				bPromptReleaseNotes = FALSE;

  000fd	89 2d 00 00 00
	00		 mov	 DWORD PTR _bPromptReleaseNotes, ebp

; 994  : 
; 995  : 				if (bPromptTutorial
; 996  : 					&& AskYesNo ("AFTER_INSTALL_TUTORIAL") == IDYES)

  00103	39 2d 00 00 00
	00		 cmp	 DWORD PTR _bPromptTutorial, ebp
  00109	74 25		 je	 SHORT $LN2@MainDialog
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JALPBIFE@AFTER_INSTALL_TUTORIAL?$AA@
  00110	e8 00 00 00 00	 call	 _AskYesNo
  00115	83 c4 04	 add	 esp, 4
  00118	3b c3		 cmp	 eax, ebx
  0011a	75 14		 jne	 SHORT $LN2@MainDialog

; 997  : 				{
; 998  : 					Applink ("beginnerstutorial", TRUE, "");

  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00121	6a 01		 push	 1
  00123	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FIMNAHGL@beginnerstutorial?$AA@
  00128	e8 00 00 00 00	 call	 _Applink
  0012d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@MainDialog:

; 999  : 				}
; 1000 : 
; 1001 : 				bPromptTutorial = FALSE;

  00130	89 2d 00 00 00
	00		 mov	 DWORD PTR _bPromptTutorial, ebp
$LN4@MainDialog:

; 1002 : 			}
; 1003 : 
; 1004 : 			if (bRestartRequired
; 1005 : 				&& AskYesNo (bUpgrade ? "UPGRADE_OK_REBOOT_REQUIRED" : "CONFIRM_RESTART") == IDYES)

  00136	39 2d 00 00 00
	00		 cmp	 DWORD PTR _bRestartRequired, ebp
  0013c	74 24		 je	 SHORT $LN1@MainDialog
  0013e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BL@OMDAGJAA@UPGRADE_OK_REBOOT_REQUIRED?$AA@
  00143	39 2d 00 00 00
	00		 cmp	 DWORD PTR _bUpgrade, ebp
  00149	75 05		 jne	 SHORT $LN64@MainDialog
  0014b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@
$LN64@MainDialog:
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 _AskYesNo
  00156	83 c4 04	 add	 esp, 4
  00159	3b c3		 cmp	 eax, ebx
  0015b	75 05		 jne	 SHORT $LN1@MainDialog

; 1006 : 			{
; 1007 : 				RestartComputer();

  0015d	e8 00 00 00 00	 call	 _RestartComputer
$LN1@MainDialog:

; 1008 : 			}
; 1009 : 		}
; 1010 : 
; 1011 : 		EndDialog (hwndDlg, IDCANCEL);

  00162	8b 44 24 44	 mov	 eax, DWORD PTR _hwndDlg$[esp+60]
  00166	6a 02		 push	 2
  00168	50		 push	 eax
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	5d		 pop	 ebp
  00172	b8 01 00 00 00	 mov	 eax, 1
  00177	5b		 pop	 ebx

; 1016 : }

  00178	83 c4 30	 add	 esp, 48			; 00000030H
  0017b	c2 10 00	 ret	 16			; 00000010H
$LN58@MainDialog:

; 644  : 	{
; 645  : 	case WM_INITDIALOG:
; 646  : 		{
; 647  : 			RECT rec;
; 648  : 
; 649  : 			GetModuleFileName (NULL, SelfFile, sizeof (SelfFile));

  0017e	68 04 01 00 00	 push	 260			; 00000104H
  00183	68 00 00 00 00	 push	 OFFSET ?SelfFile@@3PADA	; SelfFile
  00188	33 ed		 xor	 ebp, ebp
  0018a	55		 push	 ebp
  0018b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12

; 650  : 
; 651  : 			MainDlg = hwndDlg;

  00191	8b 74 24 44	 mov	 esi, DWORD PTR _hwndDlg$[esp+60]
  00195	89 35 00 00 00
	00		 mov	 DWORD PTR _MainDlg, esi

; 652  : 
; 653  : 			if (!CreateAppSetupMutex ())

  0019b	e8 00 00 00 00	 call	 _CreateAppSetupMutex
  001a0	85 c0		 test	 eax, eax
  001a2	75 0d		 jne	 SHORT $LN57@MainDialog

; 654  : 				AbortProcess ("TC_INSTALLER_IS_RUNNING");

  001a4	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@
  001a9	e8 00 00 00 00	 call	 _AbortProcess
  001ae	83 c4 04	 add	 esp, 4
$LN57@MainDialog:

; 655  : 
; 656  : 			InitDialog (hwndDlg);

  001b1	56		 push	 esi
  001b2	e8 00 00 00 00	 call	 _InitDialog

; 657  : 			LocalizeDialog (hwndDlg, "IDD_INSTL_DLG");

  001b7	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MGHONKG@IDD_INSTL_DLG?$AA@
  001bc	56		 push	 esi
  001bd	e8 00 00 00 00	 call	 _LocalizeDialog

; 658  : 			
; 659  : 			// Resize the bitmap if the user has a non-default DPI 
; 660  : 			if (ScreenDPI != USER_DEFAULT_SCREEN_DPI)

  001c2	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  001c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001cb	83 3d 00 00 00
	00 60		 cmp	 DWORD PTR _ScreenDPI, 96 ; 00000060H
  001d2	bb 01 00 00 00	 mov	 ebx, 1
  001d7	74 1e		 je	 SHORT $LN56@MainDialog

; 661  : 			{
; 662  : 				hbmWizardBitmapRescaled = RenderBitmap (MAKEINTRESOURCE (IDB_SETUP_WIZARD),
; 663  : 					GetDlgItem (hwndDlg, IDC_BITMAP_SETUP_WIZARD),
; 664  : 					0, 0, 0, 0, FALSE, TRUE);

  001d9	53		 push	 ebx
  001da	55		 push	 ebp
  001db	55		 push	 ebp
  001dc	55		 push	 ebp
  001dd	55		 push	 ebp
  001de	55		 push	 ebp
  001df	68 06 04 00 00	 push	 1030			; 00000406H
  001e4	56		 push	 esi
  001e5	ff d7		 call	 edi
  001e7	50		 push	 eax
  001e8	6a 6b		 push	 107			; 0000006bH
  001ea	e8 00 00 00 00	 call	 _RenderBitmap
  001ef	83 c4 20	 add	 esp, 32			; 00000020H
  001f2	a3 00 00 00 00	 mov	 DWORD PTR ?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A, eax ; hbmWizardBitmapRescaled
$LN56@MainDialog:

; 665  : 			}
; 666  : 
; 667  : 			// Gfx area background (must not keep aspect ratio; must retain Windows-imposed distortion)
; 668  : 			GetClientRect (GetDlgItem (hwndDlg, IDC_SETUP_WIZARD_GFX_AREA), &rec);

  001f7	8d 4c 24 30	 lea	 ecx, DWORD PTR _rec$95760[esp+64]
  001fb	51		 push	 ecx
  001fc	68 fb 03 00 00	 push	 1019			; 000003fbH
  00201	56		 push	 esi
  00202	ff d7		 call	 edi
  00204	50		 push	 eax
  00205	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 669  : 			SetWindowPos (GetDlgItem (hwndDlg, IDC_SETUP_WIZARD_BKG), HWND_TOP, 0, 0, rec.right, rec.bottom, SWP_NOMOVE);

  0020b	8b 54 24 3c	 mov	 edx, DWORD PTR _rec$95760[esp+76]
  0020f	8b 44 24 38	 mov	 eax, DWORD PTR _rec$95760[esp+72]
  00213	6a 02		 push	 2
  00215	52		 push	 edx
  00216	50		 push	 eax
  00217	55		 push	 ebp
  00218	55		 push	 ebp
  00219	55		 push	 ebp
  0021a	68 fa 03 00 00	 push	 1018			; 000003faH
  0021f	56		 push	 esi
  00220	ff d7		 call	 edi
  00222	50		 push	 eax
  00223	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28

; 670  : 
; 671  : 			nPbar = IDC_PROGRESS_BAR;
; 672  : 
; 673  : 			SendMessage (GetDlgItem (hwndDlg, IDC_BOX_TITLE), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  00229	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserBoldFont
  0022f	53		 push	 ebx
  00230	51		 push	 ecx
  00231	6a 30		 push	 48			; 00000030H
  00233	68 e9 03 00 00	 push	 1001			; 000003e9H
  00238	56		 push	 esi
  00239	c7 05 00 00 00
	00 f8 03 00 00	 mov	 DWORD PTR ?nPbar@@3HA, 1016 ; nPbar, 000003f8H
  00243	ff d7		 call	 edi
  00245	50		 push	 eax
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 674  : 
; 675  : 			SetWindowTextA(hwndDlg, "CipherShed Setup " VERSION_STRING);

  0024c	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@IIFCEEHH@CipherShed?5Setup?50?47?44?41?$AA@
  00251	56		 push	 esi
  00252	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 676  : 
; 677  : 			if (bDevm)

  00258	39 2d 00 00 00
	00		 cmp	 DWORD PTR _bDevm, ebp
  0025e	0f 84 fc 00 00
	00		 je	 $LN55@MainDialog

; 678  : 			{
; 679  : 				InitWizardDestInstallPath ();

  00264	e8 00 00 00 00	 call	 ?InitWizardDestInstallPath@@YAXXZ ; InitWizardDestInstallPath

; 680  : 				bSystemRestore = FALSE;
; 681  : 				bRegisterFileExt = FALSE;
; 682  : 				bAddToStartMenu = FALSE;
; 683  : 				bDesktopIcon = TRUE;
; 684  : 				bLicenseAccepted = TRUE;
; 685  : 				bStartInstall = TRUE;
; 686  : 				LoadPage (hwndDlg, INSTALL_PROGRESS_PAGE);

  00269	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  0026e	89 2d 00 00 00
	00		 mov	 DWORD PTR _bSystemRestore, ebp
  00274	89 2d 00 00 00
	00		 mov	 DWORD PTR _bRegisterFileExt, ebp
  0027a	89 2d 00 00 00
	00		 mov	 DWORD PTR _bAddToStartMenu, ebp
  00280	89 1d 00 00 00
	00		 mov	 DWORD PTR _bDesktopIcon, ebx
  00286	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bLicenseAccepted@@3HA, ebx ; bLicenseAccepted
  0028c	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bStartInstall@@3HA, ebx ; bStartInstall
  00292	3b c5		 cmp	 eax, ebp
  00294	74 07		 je	 SHORT $LN77@MainDialog
  00296	50		 push	 eax
  00297	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
$LN77@MainDialog:
  0029d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  002a3	53		 push	 ebx
  002a4	55		 push	 ebp
  002a5	68 07 04 00 00	 push	 1031			; 00000407H
  002aa	52		 push	 edx
  002ab	ff d7		 call	 edi
  002ad	50		 push	 eax
  002ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
  002b4	8d 44 24 20	 lea	 eax, DWORD PTR _rW$100656[esp+64]
  002b8	50		 push	 eax
  002b9	68 05 04 00 00	 push	 1029			; 00000405H
  002be	56		 push	 esi
  002bf	ff d7		 call	 edi
  002c1	50		 push	 eax
  002c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  002c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  002ce	55		 push	 ebp
  002cf	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  002d4	56		 push	 esi
  002d5	6a 71		 push	 113			; 00000071H
  002d7	51		 push	 ecx
  002d8	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 3 ; nCurPageNo
  002e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  002e8	8d 54 24 10	 lea	 edx, DWORD PTR _rD$100655[esp+64]
  002ec	52		 push	 edx
  002ed	56		 push	 esi
  002ee	a3 00 00 00 00	 mov	 DWORD PTR ?hCurPage@@3PAUHWND__@@A, eax ; hCurPage
  002f3	c7 44 24 18 0f
	00 00 00	 mov	 DWORD PTR _rD$100655[esp+72], 15 ; 0000000fH
  002fb	c7 44 24 1c 2d
	00 00 00	 mov	 DWORD PTR _rD$100655[esp+76], 45 ; 0000002dH
  00303	89 6c 24 20	 mov	 DWORD PTR _rD$100655[esp+80], ebp
  00307	89 6c 24 24	 mov	 DWORD PTR _rD$100655[esp+84], ebp
  0030b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  00311	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00316	3b c5		 cmp	 eax, ebp
  00318	0f 84 fc 00 00
	00		 je	 $LN80@MainDialog
  0031e	8b 4c 24 2c	 mov	 ecx, DWORD PTR _rW$100656[esp+76]
  00322	2b 4c 24 24	 sub	 ecx, DWORD PTR _rW$100656[esp+68]
  00326	8b 54 24 28	 mov	 edx, DWORD PTR _rW$100656[esp+72]
  0032a	2b 54 24 20	 sub	 edx, DWORD PTR _rW$100656[esp+64]
  0032e	53		 push	 ebx
  0032f	51		 push	 ecx
  00330	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rD$100655[esp+76]
  00334	52		 push	 edx
  00335	8b 54 24 1c	 mov	 edx, DWORD PTR _rD$100655[esp+76]
  00339	51		 push	 ecx
  0033a	52		 push	 edx
  0033b	50		 push	 eax
  0033c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  00342	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00347	53		 push	 ebx
  00348	50		 push	 eax

; 687  : 			}
; 688  : 			else
; 689  : 				LoadPage (hwndDlg, INTRO_PAGE);

  00349	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
  0034f	e8 00 00 00 00	 call	 _RefreshUIGFX
  00354	5f		 pop	 edi
  00355	5e		 pop	 esi
  00356	5d		 pop	 ebp

; 690  : 
; 691  : 		}
; 692  : 		return 0;

  00357	33 c0		 xor	 eax, eax
  00359	5b		 pop	 ebx

; 1016 : }

  0035a	83 c4 30	 add	 esp, 48			; 00000030H
  0035d	c2 10 00	 ret	 16			; 00000010H
$LN55@MainDialog:

; 687  : 			}
; 688  : 			else
; 689  : 				LoadPage (hwndDlg, INTRO_PAGE);

  00360	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00365	3b c5		 cmp	 eax, ebp
  00367	74 07		 je	 SHORT $LN90@MainDialog
  00369	50		 push	 eax
  0036a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
$LN90@MainDialog:
  00370	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00376	53		 push	 ebx
  00377	55		 push	 ebp
  00378	68 07 04 00 00	 push	 1031			; 00000407H
  0037d	51		 push	 ecx
  0037e	ff d7		 call	 edi
  00380	50		 push	 eax
  00381	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
  00387	8d 54 24 20	 lea	 edx, DWORD PTR _rW$100671[esp+64]
  0038b	52		 push	 edx
  0038c	68 05 04 00 00	 push	 1029			; 00000405H
  00391	56		 push	 esi
  00392	ff d7		 call	 edi
  00394	50		 push	 eax
  00395	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  0039b	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  003a0	55		 push	 ebp
  003a1	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  003a6	56		 push	 esi
  003a7	6a 6c		 push	 108			; 0000006cH
  003a9	50		 push	 eax
  003aa	89 2d 00 00 00
	00		 mov	 DWORD PTR ?nCurPageNo@@3HA, ebp ; nCurPageNo
  003b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  003b6	8d 4c 24 10	 lea	 ecx, DWORD PTR _rD$100670[esp+64]
  003ba	51		 push	 ecx
  003bb	56		 push	 esi
  003bc	a3 00 00 00 00	 mov	 DWORD PTR ?hCurPage@@3PAUHWND__@@A, eax ; hCurPage
  003c1	c7 44 24 18 0f
	00 00 00	 mov	 DWORD PTR _rD$100670[esp+72], 15 ; 0000000fH
  003c9	c7 44 24 1c 2d
	00 00 00	 mov	 DWORD PTR _rD$100670[esp+76], 45 ; 0000002dH
  003d1	89 6c 24 20	 mov	 DWORD PTR _rD$100670[esp+80], ebp
  003d5	89 6c 24 24	 mov	 DWORD PTR _rD$100670[esp+84], ebp
  003d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  003df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  003e4	3b c5		 cmp	 eax, ebp
  003e6	74 32		 je	 SHORT $LN80@MainDialog
  003e8	8b 54 24 2c	 mov	 edx, DWORD PTR _rW$100671[esp+76]
  003ec	2b 54 24 24	 sub	 edx, DWORD PTR _rW$100671[esp+68]
  003f0	8b 4c 24 28	 mov	 ecx, DWORD PTR _rW$100671[esp+72]
  003f4	2b 4c 24 20	 sub	 ecx, DWORD PTR _rW$100671[esp+64]
  003f8	53		 push	 ebx
  003f9	52		 push	 edx
  003fa	8b 54 24 1c	 mov	 edx, DWORD PTR _rD$100670[esp+76]
  003fe	51		 push	 ecx
  003ff	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rD$100670[esp+76]
  00403	52		 push	 edx
  00404	51		 push	 ecx
  00405	50		 push	 eax
  00406	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  0040c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00412	53		 push	 ebx
  00413	52		 push	 edx
  00414	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN80@MainDialog:
  0041a	e8 00 00 00 00	 call	 _RefreshUIGFX
$LN52@MainDialog:
  0041f	5f		 pop	 edi
  00420	5e		 pop	 esi
  00421	5d		 pop	 ebp

; 690  : 
; 691  : 		}
; 692  : 		return 0;

  00422	33 c0		 xor	 eax, eax
  00424	5b		 pop	 ebx

; 1016 : }

  00425	83 c4 30	 add	 esp, 48			; 00000030H
  00428	c2 10 00	 ret	 16			; 00000010H
$LN65@MainDialog:

; 641  : 	WORD lw = LOWORD (wParam);
; 642  : 
; 643  : 	switch (uMsg)

  0042b	3d 91 81 00 00	 cmp	 eax, 33169		; 00008191H
  00430	0f 87 24 05 00
	00		 ja	 $LN66@MainDialog
  00436	0f 84 d9 03 00
	00		 je	 $LN13@MainDialog
  0043c	2d 11 01 00 00	 sub	 eax, 273		; 00000111H
  00441	0f 84 84 00 00
	00		 je	 $LN48@MainDialog
  00447	83 e8 01	 sub	 eax, 1
  0044a	74 3b		 je	 SHORT $LN53@MainDialog
  0044c	83 e8 26	 sub	 eax, 38			; 00000026H
  0044f	75 ce		 jne	 SHORT $LN52@MainDialog

; 836  : 
; 837  : 			return 1;
; 838  : 		}
; 839  : 
; 840  : 		return 0;
; 841  : 
; 842  : 
; 843  : 
; 844  : 	case WM_PAINT:
; 845  : 
; 846  : 		return 0; 
; 847  : 
; 848  : 
; 849  : 
; 850  : 	case WM_CTLCOLORSTATIC:
; 851  : 
; 852  : 		if ((HWND) lParam != GetDlgItem (MainDlg, IDC_MAIN_CONTENT_CANVAS))

  00451	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00456	68 07 04 00 00	 push	 1031			; 00000407H
  0045b	50		 push	 eax
  0045c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00462	39 44 24 50	 cmp	 DWORD PTR _lParam$[esp+60], eax
  00466	74 b7		 je	 SHORT $LN52@MainDialog

; 853  : 		{
; 854  : 			/* This maintains the background under the transparent-backround texts. The above 'if' statement allows
; 855  : 			colored background to be erased automatically when leaving a page that uses it. */
; 856  : 
; 857  : 			SetBkMode ((HDC) wParam, TRANSPARENT);

  00468	8b 4c 24 4c	 mov	 ecx, DWORD PTR _wParam$[esp+60]
  0046c	6a 01		 push	 1
  0046e	51		 push	 ecx
  0046f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8

; 858  : 			return ((LONG) (HBRUSH) (GetStockObject (NULL_BRUSH)));

  00475	6a 05		 push	 5
  00477	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStockObject@4
  0047d	5f		 pop	 edi
  0047e	5e		 pop	 esi
  0047f	5d		 pop	 ebp
  00480	5b		 pop	 ebx

; 1016 : }

  00481	83 c4 30	 add	 esp, 48			; 00000030H
  00484	c2 10 00	 ret	 16			; 00000010H
$LN53@MainDialog:

; 693  : 
; 694  : 	case WM_SYSCOMMAND:
; 695  : 		if (lw == IDC_ABOUT)

  00487	ba ff 7f 00 00	 mov	 edx, 32767		; 00007fffH
  0048c	66 39 54 24 4c	 cmp	 WORD PTR _wParam$[esp+60], dx
  00491	75 8c		 jne	 SHORT $LN52@MainDialog

; 696  : 		{
; 697  : 			if (bLicenseAccepted)

  00493	33 ed		 xor	 ebp, ebp
  00495	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?bLicenseAccepted@@3HA, ebp ; bLicenseAccepted
  0049b	0f 84 9f 07 00
	00		 je	 $LN49@MainDialog

; 698  : 				DialogBoxW (hInst, MAKEINTRESOURCEW (IDD_ABOUT_DLG), hwndDlg, (DLGPROC) AboutDlgProc);

  004a1	8b 44 24 44	 mov	 eax, DWORD PTR _hwndDlg$[esp+60]
  004a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  004ab	55		 push	 ebp
  004ac	68 00 00 00 00	 push	 OFFSET _AboutDlgProc@16
  004b1	50		 push	 eax
  004b2	68 fc 01 00 00	 push	 508			; 000001fcH
  004b7	51		 push	 ecx
  004b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  004be	5f		 pop	 edi
  004bf	5e		 pop	 esi

; 937  : 
; 938  : 		return 1;

  004c0	8d 45 01	 lea	 eax, DWORD PTR [ebp+1]
  004c3	5d		 pop	 ebp
  004c4	5b		 pop	 ebx

; 1016 : }

  004c5	83 c4 30	 add	 esp, 48			; 00000030H
  004c8	c2 10 00	 ret	 16			; 00000010H
$LN48@MainDialog:

; 707  : 
; 708  : 		return 1;
; 709  : 
; 710  : 
; 711  : 	case WM_COMMAND:
; 712  : 		if (lw == IDHELP)

  004cb	8b 44 24 4c	 mov	 eax, DWORD PTR _wParam$[esp+60]
  004cf	66 83 f8 09	 cmp	 ax, 9
  004d3	75 30		 jne	 SHORT $LN47@MainDialog

; 713  : 		{
; 714  : 			if (bLicenseAccepted)

  004d5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bLicenseAccepted@@3HA, 0 ; bLicenseAccepted
  004dc	0f 84 5e 07 00
	00		 je	 $LN49@MainDialog

; 715  : 				OpenPageHelp (hwndDlg, nCurPageNo);

  004e2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  004e8	8b 44 24 44	 mov	 eax, DWORD PTR _hwndDlg$[esp+60]
  004ec	52		 push	 edx
  004ed	50		 push	 eax
  004ee	e8 00 00 00 00	 call	 _OpenPageHelp
  004f3	83 c4 08	 add	 esp, 8
  004f6	5f		 pop	 edi
  004f7	5e		 pop	 esi
  004f8	5d		 pop	 ebp

; 937  : 
; 938  : 		return 1;

  004f9	b8 01 00 00 00	 mov	 eax, 1
  004fe	5b		 pop	 ebx

; 1016 : }

  004ff	83 c4 30	 add	 esp, 48			; 00000030H
  00502	c2 10 00	 ret	 16			; 00000010H
$LN47@MainDialog:

; 716  : 
; 717  : 			return 1;
; 718  : 		}
; 719  : 		if (lw == IDCANCEL)

  00505	66 83 f8 02	 cmp	 ax, 2
  00509	75 1e		 jne	 SHORT $LN45@MainDialog

; 720  : 		{
; 721  : 			PostMessage (hwndDlg, WM_CLOSE, 0, 0);

  0050b	8b 4c 24 44	 mov	 ecx, DWORD PTR _hwndDlg$[esp+60]
  0050f	33 ed		 xor	 ebp, ebp
  00511	55		 push	 ebp
  00512	55		 push	 ebp
  00513	6a 10		 push	 16			; 00000010H
  00515	51		 push	 ecx
  00516	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  0051c	5f		 pop	 edi
  0051d	5e		 pop	 esi

; 937  : 
; 938  : 		return 1;

  0051e	8d 45 01	 lea	 eax, DWORD PTR [ebp+1]
  00521	5d		 pop	 ebp
  00522	5b		 pop	 ebx

; 1016 : }

  00523	83 c4 30	 add	 esp, 48			; 00000030H
  00526	c2 10 00	 ret	 16			; 00000010H
$LN45@MainDialog:

; 722  : 			return 1;
; 723  : 		}
; 724  : 		if (lw == IDC_NEXT)

  00529	ba 02 04 00 00	 mov	 edx, 1026		; 00000402H
  0052e	66 3b c2	 cmp	 ax, dx
  00531	0f 85 26 02 00
	00		 jne	 $LN44@MainDialog

; 725  : 		{
; 726  : 			if (nCurPageNo == INTRO_PAGE)

  00537	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  0053c	8b 7c 24 44	 mov	 edi, DWORD PTR _hwndDlg$[esp+60]
  00540	33 ed		 xor	 ebp, ebp
  00542	3b c5		 cmp	 eax, ebp
  00544	0f 85 c1 00 00
	00		 jne	 $LN43@MainDialog

; 727  : 			{
; 728  : 				if (!IsButtonChecked (GetDlgItem (hCurPage, IDC_AGREE)))

  0054a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  0054f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00555	68 fe 03 00 00	 push	 1022			; 000003feH
  0055a	50		 push	 eax
  0055b	ff d6		 call	 esi
  0055d	50		 push	 eax
  0055e	e8 00 00 00 00	 call	 _IsButtonChecked
  00563	83 c4 04	 add	 esp, 4
  00566	85 c0		 test	 eax, eax
  00568	75 13		 jne	 SHORT $LN42@MainDialog
  0056a	5f		 pop	 edi
  0056b	5e		 pop	 esi

; 729  : 				{
; 730  : 					bLicenseAccepted = FALSE;

  0056c	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bLicenseAccepted@@3HA, ebp ; bLicenseAccepted

; 937  : 
; 938  : 		return 1;

  00572	8d 45 01	 lea	 eax, DWORD PTR [ebp+1]
  00575	5d		 pop	 ebp
  00576	5b		 pop	 ebx

; 1016 : }

  00577	83 c4 30	 add	 esp, 48			; 00000030H
  0057a	c2 10 00	 ret	 16			; 00000010H
$LN42@MainDialog:

; 731  : 					return 1;
; 732  : 				}
; 733  : 				bLicenseAccepted = TRUE;
; 734  : 				EnableWindow (GetDlgItem (hwndDlg, IDHELP), TRUE);

  0057d	6a 01		 push	 1
  0057f	6a 09		 push	 9
  00581	57		 push	 edi
  00582	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bLicenseAccepted@@3HA, 1 ; bLicenseAccepted
  0058c	ff d6		 call	 esi
  0058e	50		 push	 eax
  0058f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 735  : 
; 736  : 				if (nCurrentOS == WIN_2000)

  00595	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _nCurrentOS, 7
  0059c	75 49		 jne	 SHORT $LN120@MainDialog

; 737  : 				{
; 738  : 					WarningDirect (L"Warning: Please note that this may be the last version of CipherShed that supports Windows 2000. If you want to be able to upgrade to future versions of CipherShed (which is highly recommended), you will need to upgrade to Windows XP or a later version of Windows.\n\nNote: Microsoft stopped issuing security updates for Windows 2000 to the general public on 7/13/2010 (the last non-security update for Windows 2000 was issued to the general public in 2005).");

  0059e	68 00 00 00 00	 push	 OFFSET ??_C@_1DJC@HALCKFBP@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAn?$AAo?$AAt?$AAe?$AA?5?$AAt?$AAh?$AAa?$AAt?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?5?$AAm@
  005a3	e8 00 00 00 00	 call	 _WarningDirect
  005a8	83 c4 04	 add	 esp, 4

; 739  : 
; 740  : 
; 741  : 					HKEY hkey;
; 742  : 
; 743  : 					if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, "SOFTWARE\\Microsoft\\Updates\\Windows 2000\\SP5\\Update Rollup 1", 0, KEY_READ, &hkey) != ERROR_SUCCESS)

  005ab	8d 4c 24 44	 lea	 ecx, DWORD PTR _hkey$95791[esp+60]
  005af	51		 push	 ecx
  005b0	68 19 00 02 00	 push	 131097			; 00020019H
  005b5	55		 push	 ebp
  005b6	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@BHNBHIPG@SOFTWARE?2Microsoft?2Updates?2Windo@
  005bb	68 02 00 00 80	 push	 -2147483646		; 80000002H
  005c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  005c6	85 c0		 test	 eax, eax
  005c8	74 12		 je	 SHORT $LN40@MainDialog

; 744  : 					{
; 745  : 						ErrorDirect (L"CipherShed requires Update Rollup 1 for Windows 2000 SP4 to be installed.\n\nFor more information, see http://support.microsoft.com/kb/891861");

  005ca	68 00 00 00 00	 push	 OFFSET ??_C@_1BBI@MKDPBCB@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAs?$AA?5?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AA?5?$AAR?$AAo?$AAl?$AAl?$AAu@
  005cf	e8 00 00 00 00	 call	 _ErrorDirect
  005d4	83 c4 04	 add	 esp, 4

; 746  : 						AbortProcessSilent ();

  005d7	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN40@MainDialog:

; 747  : 					}
; 748  : 
; 749  : 					RegCloseKey (hkey);

  005dc	8b 54 24 44	 mov	 edx, DWORD PTR _hkey$95791[esp+60]
  005e0	52		 push	 edx
  005e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN120@MainDialog:

; 750  : 				}
; 751  : 			}

  005e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
$LN24@MainDialog:

; 810  : 			}
; 811  : 
; 812  : 			LoadPage (hwndDlg, ++nCurPageNo);

  005ec	40		 inc	 eax
  005ed	50		 push	 eax
  005ee	57		 push	 edi
  005ef	a3 00 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, eax ; nCurPageNo
  005f4	e8 00 00 00 00	 call	 ?LoadPage@@YAXPAUHWND__@@H@Z ; LoadPage
  005f9	83 c4 08	 add	 esp, 8
  005fc	5f		 pop	 edi
  005fd	5e		 pop	 esi
  005fe	5d		 pop	 ebp

; 937  : 
; 938  : 		return 1;

  005ff	b8 01 00 00 00	 mov	 eax, 1
  00604	5b		 pop	 ebx

; 1016 : }

  00605	83 c4 30	 add	 esp, 48			; 00000030H
  00608	c2 10 00	 ret	 16			; 00000010H
$LN43@MainDialog:

; 752  : 
; 753  : 			else if (nCurPageNo == WIZARD_MODE_PAGE)

  0060b	be 01 00 00 00	 mov	 esi, 1
  00610	3b c6		 cmp	 eax, esi
  00612	0f 85 81 00 00
	00		 jne	 $LN38@MainDialog

; 754  : 			{
; 755  : 				if (IsButtonChecked (GetDlgItem (hCurPage, IDC_WIZARD_MODE_EXTRACT_ONLY)))

  00618	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  0061d	68 01 04 00 00	 push	 1025			; 00000401H
  00622	50		 push	 eax
  00623	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00629	50		 push	 eax
  0062a	e8 00 00 00 00	 call	 _IsButtonChecked
  0062f	83 c4 04	 add	 esp, 4
  00632	85 c0		 test	 eax, eax
  00634	74 35		 je	 SHORT $LN37@MainDialog

; 756  : 				{
; 757  : 					Info ("TRAVELER_LIMITATIONS_NOTE");

  00636	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@HICKIHM@TRAVELER_LIMITATIONS_NOTE?$AA@
  0063b	e8 00 00 00 00	 call	 _Info
  00640	83 c4 04	 add	 esp, 4

; 758  : 
; 759  : 					if (IsUacSupported() 
; 760  : 						&& AskWarnYesNo ("TRAVELER_UAC_NOTE") == IDNO)

  00643	e8 00 00 00 00	 call	 _IsUacSupported
  00648	85 c0		 test	 eax, eax
  0064a	74 12		 je	 SHORT $LN36@MainDialog
  0064c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NKLIMG@TRAVELER_UAC_NOTE?$AA@
  00651	e8 00 00 00 00	 call	 _AskWarnYesNo
  00656	83 c4 04	 add	 esp, 4
  00659	83 f8 07	 cmp	 eax, 7

; 761  : 					{
; 762  : 						return 1;

  0065c	74 2f		 je	 SHORT $LN124@MainDialog
$LN36@MainDialog:

; 763  : 					}
; 764  : 
; 765  : 					bExtractOnly = TRUE;

  0065e	89 35 00 00 00
	00		 mov	 DWORD PTR ?bExtractOnly@@3HA, esi ; bExtractOnly

; 766  : 					nCurPageNo = EXTRACTION_OPTIONS_PAGE - 1;

  00664	b8 03 00 00 00	 mov	 eax, 3

; 767  : 				}
; 768  : 
; 769  : 				/* CipherShed migration note. */
; 770  : 				else if (bCipherShedMigration

  00669	eb 81		 jmp	 SHORT $LN24@MainDialog
$LN37@MainDialog:

; 771  : 					&& AskWarnYesNo("CIPHERSHED_MIGRATION_NOTE") == IDNO)

  0066b	39 2d 00 00 00
	00		 cmp	 DWORD PTR _bCipherShedMigration, ebp
  00671	0f 84 70 ff ff
	ff		 je	 $LN120@MainDialog
  00677	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@BNLHLNNA@CIPHERSHED_MIGRATION_NOTE?$AA@
  0067c	e8 00 00 00 00	 call	 _AskWarnYesNo
  00681	83 c4 04	 add	 esp, 4
  00684	83 f8 07	 cmp	 eax, 7
  00687	0f 85 5a ff ff
	ff		 jne	 $LN120@MainDialog
$LN124@MainDialog:
  0068d	5f		 pop	 edi

; 772  : 				{
; 773  : 					return 1;

  0068e	8b c6		 mov	 eax, esi
  00690	5e		 pop	 esi
  00691	5d		 pop	 ebp
  00692	5b		 pop	 ebx

; 1016 : }

  00693	83 c4 30	 add	 esp, 48			; 00000030H
  00696	c2 10 00	 ret	 16			; 00000010H
$LN38@MainDialog:

; 774  : 				}
; 775  : 			}
; 776  : 
; 777  : 			else if (nCurPageNo == EXTRACTION_OPTIONS_PAGE)

  00699	83 f8 04	 cmp	 eax, 4
  0069c	75 2e		 jne	 SHORT $LN32@MainDialog

; 778  : 			{
; 779  : 				GetWindowTextA(GetDlgItem (hCurPage, IDC_DESTINATION), WizardDestExtractPath, sizeof (WizardDestExtractPath));

  0069e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  006a4	68 04 01 00 00	 push	 260			; 00000104H
  006a9	68 00 00 00 00	 push	 OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  006ae	68 e8 03 00 00	 push	 1000			; 000003e8H
  006b3	51		 push	 ecx
  006b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  006ba	50		 push	 eax
  006bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 780  : 
; 781  : 				bStartExtraction = TRUE;

  006c1	89 35 00 00 00
	00		 mov	 DWORD PTR ?bStartExtraction@@3HA, esi ; bStartExtraction
  006c7	e9 1b ff ff ff	 jmp	 $LN120@MainDialog
$LN32@MainDialog:

; 782  : 			}
; 783  : 
; 784  : 			else if (nCurPageNo == INSTALL_OPTIONS_PAGE)

  006cc	83 f8 02	 cmp	 eax, 2
  006cf	75 2e		 jne	 SHORT $LN30@MainDialog

; 785  : 			{
; 786  : 				GetWindowTextA(GetDlgItem (hCurPage, IDC_DESTINATION), WizardDestInstallPath, sizeof (WizardDestInstallPath));

  006d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  006d7	68 04 01 00 00	 push	 260			; 00000104H
  006dc	68 00 00 00 00	 push	 OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  006e1	68 e8 03 00 00	 push	 1000			; 000003e8H
  006e6	52		 push	 edx
  006e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  006ed	50		 push	 eax
  006ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 787  : 
; 788  : 				bStartInstall = TRUE;

  006f4	89 35 00 00 00
	00		 mov	 DWORD PTR ?bStartInstall@@3HA, esi ; bStartInstall
  006fa	e9 e8 fe ff ff	 jmp	 $LN120@MainDialog
$LN30@MainDialog:

; 789  : 			}
; 790  : 
; 791  : 			else if (nCurPageNo == INSTALL_PROGRESS_PAGE)

  006ff	83 f8 03	 cmp	 eax, 3
  00702	75 19		 jne	 SHORT $LN28@MainDialog

; 792  : 			{
; 793  : 				PostMessage (hwndDlg, WM_CLOSE, 0, 0);

  00704	55		 push	 ebp
  00705	55		 push	 ebp
  00706	6a 10		 push	 16			; 00000010H
  00708	8b c7		 mov	 eax, edi
  0070a	50		 push	 eax
  0070b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  00711	5f		 pop	 edi

; 794  : 				return 1;

  00712	8b c6		 mov	 eax, esi
  00714	5e		 pop	 esi
  00715	5d		 pop	 ebp
  00716	5b		 pop	 ebx

; 1016 : }

  00717	83 c4 30	 add	 esp, 48			; 00000030H
  0071a	c2 10 00	 ret	 16			; 00000010H
$LN28@MainDialog:

; 795  : 			}
; 796  : 
; 797  : 			else if (nCurPageNo == EXTRACTION_PROGRESS_PAGE)

  0071d	83 f8 05	 cmp	 eax, 5
  00720	75 19		 jne	 SHORT $LN26@MainDialog

; 798  : 			{
; 799  : 				PostMessage (hwndDlg, WM_CLOSE, 0, 0);

  00722	55		 push	 ebp
  00723	55		 push	 ebp
  00724	6a 10		 push	 16			; 00000010H
  00726	8b cf		 mov	 ecx, edi
  00728	51		 push	 ecx
  00729	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  0072f	5f		 pop	 edi

; 800  : 				return 1;

  00730	8b c6		 mov	 eax, esi
  00732	5e		 pop	 esi
  00733	5d		 pop	 ebp
  00734	5b		 pop	 ebx

; 1016 : }

  00735	83 c4 30	 add	 esp, 48			; 00000030H
  00738	c2 10 00	 ret	 16			; 00000010H
$LN26@MainDialog:

; 801  : 			}
; 802  : 
; 803  : 			else if (nCurPageNo == DONATIONS_PAGE)

  0073b	83 f8 06	 cmp	 eax, 6
  0073e	0f 85 a8 fe ff
	ff		 jne	 $LN24@MainDialog

; 804  : 			{
; 805  : 				// 'Finish' button clicked
; 806  : 
; 807  : 				PostMessage (hwndDlg, WM_CLOSE, 0, 0);

  00744	55		 push	 ebp
  00745	55		 push	 ebp
  00746	6a 10		 push	 16			; 00000010H
  00748	8b d7		 mov	 edx, edi
  0074a	52		 push	 edx
  0074b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  00751	5f		 pop	 edi

; 808  : 
; 809  : 				return 1;

  00752	8b c6		 mov	 eax, esi
  00754	5e		 pop	 esi
  00755	5d		 pop	 ebp
  00756	5b		 pop	 ebx

; 1016 : }

  00757	83 c4 30	 add	 esp, 48			; 00000030H
  0075a	c2 10 00	 ret	 16			; 00000010H
$LN44@MainDialog:

; 813  : 
; 814  : 			return 1;
; 815  : 		}
; 816  : 
; 817  : 		if (lw == IDC_PREV)

  0075d	b9 03 04 00 00	 mov	 ecx, 1027		; 00000403H
  00762	66 3b c1	 cmp	 ax, cx
  00765	0f 85 b4 fc ff
	ff		 jne	 $LN52@MainDialog

; 818  : 		{
; 819  : 			if (nCurPageNo == WIZARD_MODE_PAGE)

  0076b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00770	83 f8 01	 cmp	 eax, 1
  00773	75 22		 jne	 SHORT $LN22@MainDialog

; 820  : 			{
; 821  : 				bExtractOnly = IsButtonChecked (GetDlgItem (hCurPage, IDC_WIZARD_MODE_EXTRACT_ONLY));

  00775	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  0077b	68 01 04 00 00	 push	 1025			; 00000401H
  00780	52		 push	 edx
  00781	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00787	50		 push	 eax
  00788	e8 00 00 00 00	 call	 _IsButtonChecked
  0078d	83 c4 04	 add	 esp, 4
  00790	a3 00 00 00 00	 mov	 DWORD PTR ?bExtractOnly@@3HA, eax ; bExtractOnly
  00795	eb 56		 jmp	 SHORT $LN123@MainDialog
$LN22@MainDialog:

; 822  : 			}
; 823  : 
; 824  : 			else if (nCurPageNo == EXTRACTION_OPTIONS_PAGE)

  00797	83 f8 04	 cmp	 eax, 4
  0079a	75 29		 jne	 SHORT $LN20@MainDialog

; 825  : 			{
; 826  : 				GetWindowTextA(GetDlgItem (hCurPage, IDC_DESTINATION), WizardDestExtractPath, sizeof (WizardDestExtractPath));

  0079c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  007a1	68 04 01 00 00	 push	 260			; 00000104H
  007a6	68 00 00 00 00	 push	 OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  007ab	68 e8 03 00 00	 push	 1000			; 000003e8H
  007b0	50		 push	 eax
  007b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  007b7	50		 push	 eax
  007b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 827  : 				nCurPageNo = WIZARD_MODE_PAGE + 1;

  007be	b8 02 00 00 00	 mov	 eax, 2
  007c3	eb 2d		 jmp	 SHORT $LN18@MainDialog
$LN20@MainDialog:

; 828  : 			}
; 829  : 
; 830  : 			else if (nCurPageNo == INSTALL_OPTIONS_PAGE)

  007c5	83 f8 02	 cmp	 eax, 2
  007c8	75 28		 jne	 SHORT $LN18@MainDialog

; 831  : 			{
; 832  : 				GetWindowTextA(GetDlgItem (hCurPage, IDC_DESTINATION), WizardDestInstallPath, sizeof (WizardDestInstallPath));

  007ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  007d0	68 04 01 00 00	 push	 260			; 00000104H
  007d5	68 00 00 00 00	 push	 OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  007da	68 e8 03 00 00	 push	 1000			; 000003e8H
  007df	51		 push	 ecx
  007e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  007e6	50		 push	 eax
  007e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12
$LN123@MainDialog:
  007ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
$LN18@MainDialog:

; 833  : 			}
; 834  : 
; 835  : 			LoadPage (hwndDlg, --nCurPageNo);

  007f2	8b 54 24 44	 mov	 edx, DWORD PTR _hwndDlg$[esp+60]
  007f6	48		 dec	 eax
  007f7	50		 push	 eax
  007f8	52		 push	 edx
  007f9	a3 00 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, eax ; nCurPageNo
  007fe	e8 00 00 00 00	 call	 ?LoadPage@@YAXPAUHWND__@@H@Z ; LoadPage
  00803	83 c4 08	 add	 esp, 8
  00806	5f		 pop	 edi
  00807	5e		 pop	 esi
  00808	5d		 pop	 ebp

; 937  : 
; 938  : 		return 1;

  00809	b8 01 00 00 00	 mov	 eax, 1
  0080e	5b		 pop	 ebx

; 1016 : }

  0080f	83 c4 30	 add	 esp, 48			; 00000030H
  00812	c2 10 00	 ret	 16			; 00000010H
$LN13@MainDialog:

; 859  : 		}
; 860  : 
; 861  : 
; 862  : 	case WM_ERASEBKGND:
; 863  : 
; 864  : 		return 0;
; 865  : 
; 866  : 
; 867  : 
; 868  : 	case TC_APPMSG_INSTALL_SUCCESS:
; 869  : 		
; 870  : 		/* Installation completed successfully */
; 871  : 		
; 872  : 		bInProgress = FALSE;
; 873  : 
; 874  : 		nCurPageNo = DONATIONS_PAGE;
; 875  : 		LoadPage (hwndDlg, DONATIONS_PAGE);

  00815	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  0081a	33 ed		 xor	 ebp, ebp
  0081c	bb 06 00 00 00	 mov	 ebx, 6
  00821	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bInProgress@@3HA, ebp ; bInProgress
  00827	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nCurPageNo@@3HA, ebx ; nCurPageNo
  0082d	3b c5		 cmp	 eax, ebp
  0082f	74 07		 je	 SHORT $LN103@MainDialog
  00831	50		 push	 eax
  00832	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
$LN103@MainDialog:
  00838	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0083d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00843	6a 01		 push	 1
  00845	55		 push	 ebp
  00846	68 07 04 00 00	 push	 1031			; 00000407H
  0084b	50		 push	 eax
  0084c	ff d7		 call	 edi
  0084e	50		 push	 eax
  0084f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
  00855	8b 74 24 44	 mov	 esi, DWORD PTR _hwndDlg$[esp+60]
  00859	8d 4c 24 20	 lea	 ecx, DWORD PTR _rW$100687[esp+64]
  0085d	51		 push	 ecx
  0085e	68 05 04 00 00	 push	 1029			; 00000405H
  00863	56		 push	 esi
  00864	ff d7		 call	 edi
  00866	50		 push	 eax
  00867	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  0086d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00873	55		 push	 ebp
  00874	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00879	56		 push	 esi
  0087a	6a 72		 push	 114			; 00000072H
  0087c	52		 push	 edx
  0087d	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nCurPageNo@@3HA, ebx ; nCurPageNo
  00883	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00889	a3 00 00 00 00	 mov	 DWORD PTR ?hCurPage@@3PAUHWND__@@A, eax ; hCurPage
  0088e	8d 44 24 10	 lea	 eax, DWORD PTR _rD$100686[esp+64]
  00892	50		 push	 eax
  00893	56		 push	 esi
  00894	c7 44 24 18 0f
	00 00 00	 mov	 DWORD PTR _rD$100686[esp+72], 15 ; 0000000fH
  0089c	c7 44 24 1c 2d
	00 00 00	 mov	 DWORD PTR _rD$100686[esp+76], 45 ; 0000002dH
  008a4	89 6c 24 20	 mov	 DWORD PTR _rD$100686[esp+80], ebp
  008a8	89 6c 24 24	 mov	 DWORD PTR _rD$100686[esp+84], ebp
  008ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  008b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  008b7	3b c5		 cmp	 eax, ebp
  008b9	74 33		 je	 SHORT $LN93@MainDialog
  008bb	8b 4c 24 2c	 mov	 ecx, DWORD PTR _rW$100687[esp+76]
  008bf	2b 4c 24 24	 sub	 ecx, DWORD PTR _rW$100687[esp+68]
  008c3	8b 54 24 28	 mov	 edx, DWORD PTR _rW$100687[esp+72]
  008c7	2b 54 24 20	 sub	 edx, DWORD PTR _rW$100687[esp+64]
  008cb	6a 01		 push	 1
  008cd	51		 push	 ecx
  008ce	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rD$100686[esp+76]
  008d2	52		 push	 edx
  008d3	8b 54 24 1c	 mov	 edx, DWORD PTR _rD$100686[esp+76]
  008d7	51		 push	 ecx
  008d8	52		 push	 edx
  008d9	50		 push	 eax
  008da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  008e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  008e5	6a 01		 push	 1
  008e7	50		 push	 eax
  008e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN93@MainDialog:
  008ee	e8 00 00 00 00	 call	 _RefreshUIGFX

; 876  : 
; 877  : 		NormalCursor ();

  008f3	e8 00 00 00 00	 call	 _NormalCursor

; 878  : 
; 879  : 		SetWindowTextW (GetDlgItem (hwndDlg, IDC_NEXT), GetString ("FINALIZE"));

  008f8	68 00 00 00 00	 push	 OFFSET ??_C@_08MFKGCNCO@FINALIZE?$AA@
  008fd	e8 00 00 00 00	 call	 _GetString
  00902	83 c4 04	 add	 esp, 4
  00905	50		 push	 eax
  00906	68 02 04 00 00	 push	 1026			; 00000402H
  0090b	56		 push	 esi
  0090c	ff d7		 call	 edi
  0090e	50		 push	 eax
  0090f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 880  : 
; 881  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_PREV), FALSE);

  00915	55		 push	 ebp
  00916	68 03 04 00 00	 push	 1027			; 00000403H
  0091b	56		 push	 esi
  0091c	ff d7		 call	 edi
  0091e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  00924	50		 push	 eax
  00925	ff d3		 call	 ebx

; 882  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), TRUE);

  00927	6a 01		 push	 1
  00929	68 02 04 00 00	 push	 1026			; 00000402H
  0092e	56		 push	 esi
  0092f	ff d7		 call	 edi
  00931	50		 push	 eax
  00932	ff d3		 call	 ebx

; 883  : 		EnableWindow (GetDlgItem (hwndDlg, IDHELP), FALSE);

  00934	55		 push	 ebp
  00935	6a 09		 push	 9
  00937	56		 push	 esi
  00938	ff d7		 call	 edi
  0093a	50		 push	 eax
  0093b	ff d3		 call	 ebx

; 884  : 		EnableWindow (GetDlgItem (hwndDlg, IDCANCEL), FALSE);

  0093d	55		 push	 ebp
  0093e	6a 02		 push	 2
  00940	56		 push	 esi
  00941	ff d7		 call	 edi
  00943	50		 push	 eax
  00944	ff d3		 call	 ebx

; 934  : 
; 935  : 		nCurPageNo = DONATIONS_PAGE;
; 936  : 		LoadPage (hwndDlg, DONATIONS_PAGE);

  00946	e8 00 00 00 00	 call	 _RefreshUIGFX
  0094b	5f		 pop	 edi
  0094c	5e		 pop	 esi
  0094d	5d		 pop	 ebp

; 937  : 
; 938  : 		return 1;

  0094e	b8 01 00 00 00	 mov	 eax, 1
  00953	5b		 pop	 ebx

; 1016 : }

  00954	83 c4 30	 add	 esp, 48			; 00000030H
  00957	c2 10 00	 ret	 16			; 00000010H
$LN66@MainDialog:

; 641  : 	WORD lw = LOWORD (wParam);
; 642  : 
; 643  : 	switch (uMsg)

  0095a	2d 93 81 00 00	 sub	 eax, 33171		; 00008193H
  0095f	0f 84 76 01 00
	00		 je	 $LN11@MainDialog
  00965	83 e8 01	 sub	 eax, 1
  00968	0f 84 cd 00 00
	00		 je	 $LN12@MainDialog
  0096e	83 e8 02	 sub	 eax, 2

; 1012 : 		return 1;
; 1013 : 	}
; 1014 : 
; 1015 : 	return 0;

  00971	0f 85 a8 fa ff
	ff		 jne	 $LN52@MainDialog
  00977	33 ed		 xor	 ebp, ebp
  00979	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bInProgress@@3HA, ebp ; bInProgress
  0097f	e8 00 00 00 00	 call	 _NormalCursor
  00984	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  0098a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GODHAKFG@EXTRACTION_FAILED?$AA@
  0098f	51		 push	 ecx
  00990	e8 00 00 00 00	 call	 _StatusMessage
  00995	55		 push	 ebp
  00996	e8 00 00 00 00	 call	 _UpdateProgressBarProc
  0099b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GODHAKFG@EXTRACTION_FAILED?$AA@
  009a0	e8 00 00 00 00	 call	 _GetString
  009a5	8b 74 24 54	 mov	 esi, DWORD PTR _hwndDlg$[esp+76]
  009a9	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  009af	83 c4 10	 add	 esp, 16			; 00000010H
  009b2	50		 push	 eax
  009b3	68 e9 03 00 00	 push	 1001			; 000003e9H
  009b8	56		 push	 esi
  009b9	ff d7		 call	 edi
  009bb	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextW@8
  009c1	50		 push	 eax
  009c2	ff d3		 call	 ebx
  009c4	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  009c9	68 eb 03 00 00	 push	 1003			; 000003ebH
  009ce	56		 push	 esi
  009cf	ff d7		 call	 edi
  009d1	50		 push	 eax
  009d2	ff d3		 call	 ebx
  009d4	68 00 00 00 00	 push	 OFFSET ??_C@_07CIAHAGHC@IDCLOSE?$AA@
  009d9	e8 00 00 00 00	 call	 _GetString
  009de	83 c4 04	 add	 esp, 4
  009e1	50		 push	 eax
  009e2	6a 02		 push	 2
  009e4	56		 push	 esi
  009e5	ff d7		 call	 edi
  009e7	50		 push	 eax
  009e8	ff d3		 call	 ebx
  009ea	6a 01		 push	 1
  009ec	6a 09		 push	 9
  009ee	56		 push	 esi
  009ef	ff d7		 call	 edi
  009f1	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  009f7	50		 push	 eax
  009f8	ff d3		 call	 ebx
  009fa	55		 push	 ebp
  009fb	68 03 04 00 00	 push	 1027			; 00000403H
  00a00	56		 push	 esi
  00a01	ff d7		 call	 edi
  00a03	50		 push	 eax
  00a04	ff d3		 call	 ebx
  00a06	55		 push	 ebp
  00a07	68 02 04 00 00	 push	 1026			; 00000402H
  00a0c	56		 push	 esi
  00a0d	ff d7		 call	 edi
  00a0f	50		 push	 eax
  00a10	ff d3		 call	 ebx
  00a12	6a 01		 push	 1
  00a14	6a 02		 push	 2
  00a16	56		 push	 esi
  00a17	ff d7		 call	 edi
  00a19	50		 push	 eax
  00a1a	ff d3		 call	 ebx
  00a1c	e8 00 00 00 00	 call	 _RefreshUIGFX
  00a21	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GODHAKFG@EXTRACTION_FAILED?$AA@
  00a26	e8 00 00 00 00	 call	 _Error
  00a2b	83 c4 04	 add	 esp, 4
  00a2e	5f		 pop	 edi
  00a2f	5e		 pop	 esi
  00a30	8d 45 01	 lea	 eax, DWORD PTR [ebp+1]
  00a33	5d		 pop	 ebp
  00a34	5b		 pop	 ebx

; 1016 : }

  00a35	83 c4 30	 add	 esp, 48			; 00000030H
  00a38	c2 10 00	 ret	 16			; 00000010H
$LN12@MainDialog:

; 885  : 
; 886  : 
; 887  : 		RefreshUIGFX ();
; 888  : 		return 1;
; 889  : 
; 890  : 	case TC_APPMSG_INSTALL_FAILURE:
; 891  : 		
; 892  : 		/* Installation failed */
; 893  : 
; 894  : 		bInProgress = FALSE;

  00a3b	33 ed		 xor	 ebp, ebp
  00a3d	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bInProgress@@3HA, ebp ; bInProgress

; 895  : 
; 896  : 		NormalCursor ();

  00a43	e8 00 00 00 00	 call	 _NormalCursor

; 897  : 
; 898  : 		SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_TITLE), GetString ("INSTALL_FAILED"));

  00a48	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DHOALJNC@INSTALL_FAILED?$AA@
  00a4d	e8 00 00 00 00	 call	 _GetString
  00a52	8b 74 24 48	 mov	 esi, DWORD PTR _hwndDlg$[esp+64]
  00a56	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00a5c	83 c4 04	 add	 esp, 4
  00a5f	50		 push	 eax
  00a60	68 e9 03 00 00	 push	 1001			; 000003e9H
  00a65	56		 push	 esi
  00a66	ff d7		 call	 edi
  00a68	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextW@8
  00a6e	50		 push	 eax
  00a6f	ff d3		 call	 ebx

; 899  : 		SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_INFO), L"");

  00a71	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  00a76	68 eb 03 00 00	 push	 1003			; 000003ebH
  00a7b	56		 push	 esi
  00a7c	ff d7		 call	 edi
  00a7e	50		 push	 eax
  00a7f	ff d3		 call	 ebx

; 900  : 
; 901  : 		SetWindowTextW (GetDlgItem (hwndDlg, IDCANCEL), GetString ("IDCLOSE"));

  00a81	68 00 00 00 00	 push	 OFFSET ??_C@_07CIAHAGHC@IDCLOSE?$AA@
  00a86	e8 00 00 00 00	 call	 _GetString
  00a8b	83 c4 04	 add	 esp, 4
  00a8e	50		 push	 eax
  00a8f	6a 02		 push	 2
  00a91	56		 push	 esi
  00a92	ff d7		 call	 edi
  00a94	50		 push	 eax
  00a95	ff d3		 call	 ebx

; 902  : 		EnableWindow (GetDlgItem (hwndDlg, IDHELP), TRUE);

  00a97	6a 01		 push	 1
  00a99	6a 09		 push	 9
  00a9b	56		 push	 esi
  00a9c	ff d7		 call	 edi
  00a9e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  00aa4	50		 push	 eax
  00aa5	ff d3		 call	 ebx

; 903  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_PREV), FALSE);

  00aa7	55		 push	 ebp
  00aa8	68 03 04 00 00	 push	 1027			; 00000403H
  00aad	56		 push	 esi
  00aae	ff d7		 call	 edi
  00ab0	50		 push	 eax
  00ab1	ff d3		 call	 ebx

; 904  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), FALSE);

  00ab3	55		 push	 ebp
  00ab4	68 02 04 00 00	 push	 1026			; 00000402H
  00ab9	56		 push	 esi
  00aba	ff d7		 call	 edi
  00abc	50		 push	 eax
  00abd	ff d3		 call	 ebx

; 905  : 		EnableWindow (GetDlgItem (hwndDlg, IDCANCEL), TRUE);

  00abf	6a 01		 push	 1
  00ac1	6a 02		 push	 2
  00ac3	56		 push	 esi
  00ac4	ff d7		 call	 edi
  00ac6	50		 push	 eax
  00ac7	ff d3		 call	 ebx

; 934  : 
; 935  : 		nCurPageNo = DONATIONS_PAGE;
; 936  : 		LoadPage (hwndDlg, DONATIONS_PAGE);

  00ac9	e8 00 00 00 00	 call	 _RefreshUIGFX
  00ace	5f		 pop	 edi
  00acf	5e		 pop	 esi

; 937  : 
; 938  : 		return 1;

  00ad0	8d 45 01	 lea	 eax, DWORD PTR [ebp+1]
  00ad3	5d		 pop	 ebp
  00ad4	5b		 pop	 ebx

; 1016 : }

  00ad5	83 c4 30	 add	 esp, 48			; 00000030H
  00ad8	c2 10 00	 ret	 16			; 00000010H
$LN11@MainDialog:

; 906  : 
; 907  : 		RefreshUIGFX();
; 908  : 
; 909  : 		return 1;
; 910  : 
; 911  : 	case TC_APPMSG_EXTRACTION_SUCCESS:
; 912  : 		
; 913  : 		/* Extraction completed successfully */
; 914  : 
; 915  : 		UpdateProgressBarProc(100);

  00adb	6a 64		 push	 100			; 00000064H
  00add	e8 00 00 00 00	 call	 _UpdateProgressBarProc

; 916  : 
; 917  : 		bInProgress = FALSE;

  00ae2	33 ed		 xor	 ebp, ebp
  00ae4	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bInProgress@@3HA, ebp ; bInProgress

; 918  : 		bExtractionSuccessful = TRUE;

  00aea	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bExtractionSuccessful@@3HA, 1 ; bExtractionSuccessful

; 919  : 
; 920  : 		NormalCursor ();

  00af4	e8 00 00 00 00	 call	 _NormalCursor

; 921  : 
; 922  : 		StatusMessage (hCurPage, "EXTRACTION_FINISHED_INFO");

  00af9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00aff	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LLBBBPBJ@EXTRACTION_FINISHED_INFO?$AA@
  00b04	52		 push	 edx
  00b05	e8 00 00 00 00	 call	 _StatusMessage

; 923  : 
; 924  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_PREV), FALSE);

  00b0a	8b 74 24 50	 mov	 esi, DWORD PTR _hwndDlg$[esp+72]
  00b0e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00b14	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b17	55		 push	 ebp
  00b18	68 03 04 00 00	 push	 1027			; 00000403H
  00b1d	56		 push	 esi
  00b1e	ff d7		 call	 edi
  00b20	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  00b26	50		 push	 eax
  00b27	ff d3		 call	 ebx

; 925  : 		EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), TRUE);

  00b29	6a 01		 push	 1
  00b2b	68 02 04 00 00	 push	 1026			; 00000402H
  00b30	56		 push	 esi
  00b31	ff d7		 call	 edi
  00b33	50		 push	 eax
  00b34	ff d3		 call	 ebx

; 926  : 		EnableWindow (GetDlgItem (hwndDlg, IDHELP), FALSE);

  00b36	55		 push	 ebp
  00b37	6a 09		 push	 9
  00b39	56		 push	 esi
  00b3a	ff d7		 call	 edi
  00b3c	50		 push	 eax
  00b3d	ff d3		 call	 ebx

; 927  : 		EnableWindow (GetDlgItem (hwndDlg, IDCANCEL), FALSE);

  00b3f	55		 push	 ebp
  00b40	6a 02		 push	 2
  00b42	56		 push	 esi
  00b43	ff d7		 call	 edi
  00b45	50		 push	 eax
  00b46	ff d3		 call	 ebx

; 928  : 
; 929  : 		RefreshUIGFX ();

  00b48	e8 00 00 00 00	 call	 _RefreshUIGFX

; 930  : 
; 931  : 		Info ("EXTRACTION_FINISHED_INFO");

  00b4d	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LLBBBPBJ@EXTRACTION_FINISHED_INFO?$AA@
  00b52	e8 00 00 00 00	 call	 _Info

; 932  : 
; 933  : 		SetWindowTextW (GetDlgItem (hwndDlg, IDC_NEXT), GetString ("FINALIZE"));

  00b57	68 00 00 00 00	 push	 OFFSET ??_C@_08MFKGCNCO@FINALIZE?$AA@
  00b5c	e8 00 00 00 00	 call	 _GetString
  00b61	83 c4 08	 add	 esp, 8
  00b64	50		 push	 eax
  00b65	68 02 04 00 00	 push	 1026			; 00000402H
  00b6a	56		 push	 esi
  00b6b	ff d7		 call	 edi
  00b6d	50		 push	 eax
  00b6e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 934  : 
; 935  : 		nCurPageNo = DONATIONS_PAGE;
; 936  : 		LoadPage (hwndDlg, DONATIONS_PAGE);

  00b74	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00b79	bb 06 00 00 00	 mov	 ebx, 6
  00b7e	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nCurPageNo@@3HA, ebx ; nCurPageNo
  00b84	3b c5		 cmp	 eax, ebp
  00b86	74 07		 je	 SHORT $LN116@MainDialog
  00b88	50		 push	 eax
  00b89	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
$LN116@MainDialog:
  00b8f	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00b94	6a 01		 push	 1
  00b96	55		 push	 ebp
  00b97	68 07 04 00 00	 push	 1031			; 00000407H
  00b9c	50		 push	 eax
  00b9d	ff d7		 call	 edi
  00b9f	50		 push	 eax
  00ba0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
  00ba6	8d 4c 24 20	 lea	 ecx, DWORD PTR _rW$100703[esp+64]
  00baa	51		 push	 ecx
  00bab	68 05 04 00 00	 push	 1029			; 00000405H
  00bb0	56		 push	 esi
  00bb1	ff d7		 call	 edi
  00bb3	50		 push	 eax
  00bb4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00bba	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00bc0	55		 push	 ebp
  00bc1	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00bc6	56		 push	 esi
  00bc7	6a 72		 push	 114			; 00000072H
  00bc9	52		 push	 edx
  00bca	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nCurPageNo@@3HA, ebx ; nCurPageNo
  00bd0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00bd6	a3 00 00 00 00	 mov	 DWORD PTR ?hCurPage@@3PAUHWND__@@A, eax ; hCurPage
  00bdb	8d 44 24 10	 lea	 eax, DWORD PTR _rD$100702[esp+64]
  00bdf	50		 push	 eax
  00be0	56		 push	 esi
  00be1	c7 44 24 18 0f
	00 00 00	 mov	 DWORD PTR _rD$100702[esp+72], 15 ; 0000000fH
  00be9	c7 44 24 1c 2d
	00 00 00	 mov	 DWORD PTR _rD$100702[esp+76], 45 ; 0000002dH
  00bf1	89 6c 24 20	 mov	 DWORD PTR _rD$100702[esp+80], ebp
  00bf5	89 6c 24 24	 mov	 DWORD PTR _rD$100702[esp+84], ebp
  00bf9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  00bff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00c04	3b c5		 cmp	 eax, ebp
  00c06	74 33		 je	 SHORT $LN121@MainDialog
  00c08	8b 4c 24 2c	 mov	 ecx, DWORD PTR _rW$100703[esp+76]
  00c0c	2b 4c 24 24	 sub	 ecx, DWORD PTR _rW$100703[esp+68]
  00c10	8b 54 24 28	 mov	 edx, DWORD PTR _rW$100703[esp+72]
  00c14	2b 54 24 20	 sub	 edx, DWORD PTR _rW$100703[esp+64]
  00c18	6a 01		 push	 1
  00c1a	51		 push	 ecx
  00c1b	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rD$100702[esp+76]
  00c1f	52		 push	 edx
  00c20	8b 54 24 1c	 mov	 edx, DWORD PTR _rD$100702[esp+76]
  00c24	51		 push	 ecx
  00c25	52		 push	 edx
  00c26	50		 push	 eax
  00c27	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  00c2d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00c32	6a 01		 push	 1
  00c34	50		 push	 eax
  00c35	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN121@MainDialog:
  00c3b	e8 00 00 00 00	 call	 _RefreshUIGFX
$LN49@MainDialog:
  00c40	5f		 pop	 edi
  00c41	5e		 pop	 esi
  00c42	5d		 pop	 ebp

; 937  : 
; 938  : 		return 1;

  00c43	b8 01 00 00 00	 mov	 eax, 1
  00c48	5b		 pop	 ebx

; 1016 : }

  00c49	83 c4 30	 add	 esp, 48			; 00000030H
  00c4c	c2 10 00	 ret	 16			; 00000010H
  00c4f	90		 npad	 1
$LN125@MainDialog:
  00c50	00 00 00 00	 DD	 $LN52@MainDialog
  00c54	00 00 00 00	 DD	 $LN9@MainDialog
  00c58	00 00 00 00	 DD	 $LN50@MainDialog
  00c5c	00 00 00 00	 DD	 $LN52@MainDialog
$LN119@MainDialog:
  00c60	00		 DB	 0
  00c61	01		 DB	 1
  00c62	03		 DB	 3
  00c63	03		 DB	 3
  00c64	03		 DB	 3
  00c65	00		 DB	 0
  00c66	03		 DB	 3
  00c67	03		 DB	 3
  00c68	03		 DB	 3
  00c69	03		 DB	 3
  00c6a	03		 DB	 3
  00c6b	03		 DB	 3
  00c6c	03		 DB	 3
  00c6d	03		 DB	 3
  00c6e	03		 DB	 3
  00c6f	03		 DB	 3
  00c70	03		 DB	 3
  00c71	03		 DB	 3
  00c72	03		 DB	 3
  00c73	03		 DB	 3
  00c74	03		 DB	 3
  00c75	03		 DB	 3
  00c76	03		 DB	 3
  00c77	03		 DB	 3
  00c78	03		 DB	 3
  00c79	03		 DB	 3
  00c7a	03		 DB	 3
  00c7b	03		 DB	 3
  00c7c	03		 DB	 3
  00c7d	03		 DB	 3
  00c7e	03		 DB	 3
  00c7f	03		 DB	 3
  00c80	03		 DB	 3
  00c81	03		 DB	 3
  00c82	03		 DB	 3
  00c83	03		 DB	 3
  00c84	03		 DB	 3
  00c85	03		 DB	 3
  00c86	03		 DB	 3
  00c87	03		 DB	 3
  00c88	03		 DB	 3
  00c89	03		 DB	 3
  00c8a	03		 DB	 3
  00c8b	03		 DB	 3
  00c8c	03		 DB	 3
  00c8d	03		 DB	 3
  00c8e	03		 DB	 3
  00c8f	03		 DB	 3
  00c90	03		 DB	 3
  00c91	03		 DB	 3
  00c92	03		 DB	 3
  00c93	03		 DB	 3
  00c94	03		 DB	 3
  00c95	03		 DB	 3
  00c96	03		 DB	 3
  00c97	03		 DB	 3
  00c98	03		 DB	 3
  00c99	03		 DB	 3
  00c9a	03		 DB	 3
  00c9b	03		 DB	 3
  00c9c	03		 DB	 3
  00c9d	03		 DB	 3
  00c9e	03		 DB	 3
  00c9f	03		 DB	 3
  00ca0	03		 DB	 3
  00ca1	03		 DB	 3
  00ca2	03		 DB	 3
  00ca3	03		 DB	 3
  00ca4	02		 DB	 2
_MainDialogProc@16 ENDP
_TEXT	ENDS
END
