; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\home\public\Desktop\projects\ciphershed.build\src\Common\SecurityToken.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
PUBLIC	?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
PUBLIC	?Initialized@SecurityToken@CipherShed@@1_NA	; CipherShed::SecurityToken::Initialized
PUBLIC	?Pkcs11LibraryHandle@SecurityToken@CipherShed@@1PAUHINSTANCE__@@A ; CipherShed::SecurityToken::Pkcs11LibraryHandle
PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?MaxPasswordLength@SecurityToken@CipherShed@@2IB ; CipherShed::SecurityToken::MaxPasswordLength
_BSS	SEGMENT
?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A DD 01H DUP (?) ; CipherShed::SecurityToken::Pkcs11Functions
?Initialized@SecurityToken@CipherShed@@1_NA DB 01H DUP (?) ; CipherShed::SecurityToken::Initialized
	ALIGN	4

?Pkcs11LibraryHandle@SecurityToken@CipherShed@@1PAUHINSTANCE__@@A DD 01H DUP (?) ; CipherShed::SecurityToken::Pkcs11LibraryHandle
_BSS	ENDS
;	COMDAT ?MaxPasswordLength@SecurityToken@CipherShed@@2IB
CONST	SEGMENT
?MaxPasswordLength@SecurityToken@CipherShed@@2IB DD 080H ; CipherShed::SecurityToken::MaxPasswordLength
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

  00000	56		 push	 esi
  00001	8d 44 24 08	 lea	 eax, DWORD PTR __Message$[esp]
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtpy
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00009	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000e	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00013	74 09		 je	 SHORT $LN6@scalar
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	_wmemchr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\wchar.h
;	COMDAT _wmemchr
_TEXT	SEGMENT
__S$ = 8						; size = 4
__C$ = 12						; size = 2
__N$ = 16						; size = 4
_wmemchr PROC						; COMDAT

; 1211 :         {for (; 0 < _N; ++_S, --_N)

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __N$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	76 16		 jbe	 SHORT $LN2@wmemchr
  00008	66 8b 54 24 08	 mov	 dx, WORD PTR __C$[esp-4]
  0000d	8b 44 24 04	 mov	 eax, DWORD PTR __S$[esp-4]
$LL4@wmemchr:

; 1212 :                 if (*_S == _C)

  00011	66 39 10	 cmp	 WORD PTR [eax], dx
  00014	74 0a		 je	 SHORT $LN5@wmemchr
  00016	83 c0 02	 add	 eax, 2
  00019	83 e9 01	 sub	 ecx, 1
  0001c	75 f3		 jne	 SHORT $LL4@wmemchr
$LN2@wmemchr:

; 1213 :                         return (_CONST_RETURN wchar_t *)(_S);
; 1214 :         return (0); }

  0001e	33 c0		 xor	 eax, eax
$LN5@wmemchr:
  00020	c3		 ret	 0
_wmemchr ENDP
_TEXT	ENDS
PUBLIC	_wmemcmp
; Function compile flags: /Ogtpy
;	COMDAT _wmemcmp
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcmp PROC						; COMDAT

; 1216 :         {for (; 0 < _N; ++_S1, ++_S2, --_N)

  00000	8b 54 24 0c	 mov	 edx, DWORD PTR __N$[esp-4]
  00004	56		 push	 esi
  00005	85 d2		 test	 edx, edx
  00007	76 1b		 jbe	 SHORT $LN2@wmemcmp
  00009	8b 4c 24 0c	 mov	 ecx, DWORD PTR __S2$[esp]
  0000d	8b 44 24 08	 mov	 eax, DWORD PTR __S1$[esp]
$LL4@wmemcmp:

; 1217 :                 if (*_S1 != *_S2)

  00011	66 8b 30	 mov	 si, WORD PTR [eax]
  00014	66 3b 31	 cmp	 si, WORD PTR [ecx]
  00017	75 0f		 jne	 SHORT $LN8@wmemcmp
  00019	83 c0 02	 add	 eax, 2
  0001c	83 c1 02	 add	 ecx, 2
  0001f	83 ea 01	 sub	 edx, 1
  00022	75 ed		 jne	 SHORT $LL4@wmemcmp
$LN2@wmemcmp:

; 1219 :         return (0); }

  00024	33 c0		 xor	 eax, eax
  00026	5e		 pop	 esi
  00027	c3		 ret	 0
$LN8@wmemcmp:

; 1218 :                         return (*_S1 < *_S2 ? -1 : +1);

  00028	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0002b	66 3b 01	 cmp	 ax, WORD PTR [ecx]
  0002e	5e		 pop	 esi
  0002f	1b c0		 sbb	 eax, eax
  00031	83 e0 fe	 and	 eax, -2			; fffffffeH
  00034	40		 inc	 eax

; 1219 :         return (0); }

  00035	c3		 ret	 0
_wmemcmp ENDP
_TEXT	ENDS
PUBLIC	_wmemcpy_s
EXTRN	_memcpy_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT _wmemcpy_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemcpy_s PROC						; COMDAT

; 1232 : #pragma warning( push )
; 1233 : #pragma warning( disable : 6386 )
; 1234 :             return memcpy_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memcpy_s
_wmemcpy_s ENDP
_TEXT	ENDS
PUBLIC	_wmemmove_s
EXTRN	_memmove_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT _wmemmove_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemmove_s PROC					; COMDAT

; 1252 : #pragma warning( push )
; 1253 : #pragma warning( disable : 6386 )
; 1254 :             return memmove_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memmove_s
_wmemmove_s ENDP
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z	; std::char_traits<wchar_t>::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT

; 310  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000b	66 89 0a	 mov	 WORD PTR [edx], cx

; 311  : 		}

  0000e	c3		 ret	 0
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
PUBLIC	?compare@?$char_traits@_W@std@@SAHPB_W0I@Z	; std::char_traits<wchar_t>::compare
; Function compile flags: /Ogtpy
;	COMDAT ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@_W@std@@SAHPB_W0I@Z PROC		; std::char_traits<wchar_t>::compare, COMDAT

; 326  : //		_DEBUG_POINTER(_First1);
; 327  : //		_DEBUG_POINTER(_First2);
; 328  : 		return (::wmemcmp(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _wmemcmp
?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ENDP		; std::char_traits<wchar_t>::compare
_TEXT	ENDS
PUBLIC	?length@?$char_traits@_W@std@@SAIPB_W@Z		; std::char_traits<wchar_t>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@_W@std@@SAIPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@_W@std@@SAIPB_W@Z PROC		; std::char_traits<wchar_t>::length, COMDAT

; 333  : //		_DEBUG_POINTER(_First);
; 334  : 		return (::wcslen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL3@length:
  00007	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000a	83 c0 02	 add	 eax, 2
  0000d	66 85 c9	 test	 cx, cx
  00010	75 f5		 jne	 SHORT $LL3@length
  00012	2b c2		 sub	 eax, edx
  00014	d1 f8		 sar	 eax, 1

; 335  : 		}

  00016	c3		 ret	 0
?length@?$char_traits@_W@std@@SAIPB_W@Z ENDP		; std::char_traits<wchar_t>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Copy_s, COMDAT

; 348  : //		_DEBUG_POINTER(_First1);
; 349  : //		_DEBUG_POINTER(_First2);
; 350  : 		_CRT_SECURE_WMEMCPY(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 351  : 		return _First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 352  : 		}

  00026	c3		 ret	 0
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Copy_s
_TEXT	ENDS
PUBLIC	?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z	; std::char_traits<wchar_t>::find
; Function compile flags: /Ogtpy
;	COMDAT ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 4
?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z PROC	; std::char_traits<wchar_t>::find, COMDAT

; 357  : //		_DEBUG_POINTER(_First);
; 358  : 		return ((const _Elem *)::wmemchr(_First, _Ch, _Count));

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00008	85 c9		 test	 ecx, ecx
  0000a	76 14		 jbe	 SHORT $LN4@find
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Ch$[esp-4]
  00010	0f b7 12	 movzx	 edx, WORD PTR [edx]
$LL6@find:
  00013	66 39 10	 cmp	 WORD PTR [eax], dx
  00016	74 0a		 je	 SHORT $LN7@find
  00018	83 c0 02	 add	 eax, 2
  0001b	83 e9 01	 sub	 ecx, 1
  0001e	75 f3		 jne	 SHORT $LL6@find
$LN4@find:
  00020	33 c0		 xor	 eax, eax
$LN7@find:

; 359  : 		}

  00022	c3		 ret	 0
?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z ENDP	; std::char_traits<wchar_t>::find
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Move_s, COMDAT

; 372  : //		_DEBUG_POINTER(_First1);
; 373  : //		_DEBUG_POINTER(_First2);
; 374  : 		_CRT_SECURE_WMEMMOVE(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 375  : 		return (_Elem *)_First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 376  : 		}

  00026	c3		 ret	 0
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Move_s
_TEXT	ENDS
PUBLIC	?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z	; std::char_traits<wchar_t>::to_int_type
; Function compile flags: /Ogtpy
;	COMDAT ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z PROC	; std::char_traits<wchar_t>::to_int_type, COMDAT

; 391  : 		return (_Ch);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	66 8b 00	 mov	 ax, WORD PTR [eax]

; 392  : 		}

  00007	c3		 ret	 0
?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z ENDP	; std::char_traits<wchar_t>::to_int_type
_TEXT	ENDS
PUBLIC	?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z	; std::char_traits<wchar_t>::eq_int_type
; Function compile flags: /Ogtpy
;	COMDAT ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z PROC	; std::char_traits<wchar_t>::eq_int_type, COMDAT

; 397  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000b	33 c0		 xor	 eax, eax
  0000d	66 3b 0a	 cmp	 cx, WORD PTR [edx]
  00010	0f 94 c0	 sete	 al

; 398  : 		}

  00013	c3		 ret	 0
?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ENDP	; std::char_traits<wchar_t>::eq_int_type
_TEXT	ENDS
PUBLIC	?eof@?$char_traits@_W@std@@SAGXZ		; std::char_traits<wchar_t>::eof
; Function compile flags: /Ogtpy
;	COMDAT ?eof@?$char_traits@_W@std@@SAGXZ
_TEXT	SEGMENT
?eof@?$char_traits@_W@std@@SAGXZ PROC			; std::char_traits<wchar_t>::eof, COMDAT

; 402  : 		return (WEOF);

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 403  : 		}

  00005	c3		 ret	 0
?eof@?$char_traits@_W@std@@SAGXZ ENDP			; std::char_traits<wchar_t>::eof
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 425  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 426  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?compare@?$char_traits@D@std@@SAHPBD0I@Z	; std::char_traits<char>::compare
; Function compile flags: /Ogtpy
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@D@std@@SAHPBD0I@Z PROC		; std::char_traits<char>::compare, COMDAT

; 441  : //		_DEBUG_POINTER(_First1);
; 442  : //		_DEBUG_POINTER(_First2);
; 443  : 		return (::memcmp(_First1, _First2, _Count));

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First1$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 10	 mov	 esi, DWORD PTR __Count$[esp]
  0000d	57		 push	 edi
  0000e	83 fe 04	 cmp	 esi, 4
  00011	72 14		 jb	 SHORT $LN11@compare
$LL4@compare:
  00013	8b 02		 mov	 eax, DWORD PTR [edx]
  00015	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00017	75 12		 jne	 SHORT $LN5@compare
  00019	83 ee 04	 sub	 esi, 4
  0001c	83 c1 04	 add	 ecx, 4
  0001f	83 c2 04	 add	 edx, 4
  00022	83 fe 04	 cmp	 esi, 4
  00025	73 ec		 jae	 SHORT $LL4@compare
$LN11@compare:
  00027	85 f6		 test	 esi, esi
  00029	74 44		 je	 SHORT $LN6@compare
$LN5@compare:
  0002b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0002e	0f b6 39	 movzx	 edi, BYTE PTR [ecx]
  00031	2b c7		 sub	 eax, edi
  00033	75 31		 jne	 SHORT $LN7@compare
  00035	83 fe 01	 cmp	 esi, 1
  00038	76 35		 jbe	 SHORT $LN6@compare
  0003a	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  0003e	0f b6 79 01	 movzx	 edi, BYTE PTR [ecx+1]
  00042	2b c7		 sub	 eax, edi
  00044	75 20		 jne	 SHORT $LN7@compare
  00046	83 fe 02	 cmp	 esi, 2
  00049	76 24		 jbe	 SHORT $LN6@compare
  0004b	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  0004f	0f b6 79 02	 movzx	 edi, BYTE PTR [ecx+2]
  00053	2b c7		 sub	 eax, edi
  00055	75 0f		 jne	 SHORT $LN7@compare
  00057	83 fe 03	 cmp	 esi, 3
  0005a	76 13		 jbe	 SHORT $LN6@compare
  0005c	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  00060	0f b6 49 03	 movzx	 ecx, BYTE PTR [ecx+3]
  00064	2b c1		 sub	 eax, ecx
$LN7@compare:
  00066	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  00069	5f		 pop	 edi
  0006a	83 c8 01	 or	 eax, 1
  0006d	5e		 pop	 esi

; 444  : 		}

  0006e	c3		 ret	 0
$LN6@compare:
  0006f	5f		 pop	 edi

; 441  : //		_DEBUG_POINTER(_First1);
; 442  : //		_DEBUG_POINTER(_First2);
; 443  : 		return (::memcmp(_First1, _First2, _Count));

  00070	33 c0		 xor	 eax, eax
  00072	5e		 pop	 esi

; 444  : 		}

  00073	c3		 ret	 0
?compare@?$char_traits@D@std@@SAHPBD0I@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 448  : //		_DEBUG_POINTER(_First);
; 449  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length@2:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $LL3@length@2
  0000e	2b c2		 sub	 eax, edx

; 450  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Copy_s, COMDAT

; 463  : //		_DEBUG_POINTER(_First1);
; 464  : //		_DEBUG_POINTER(_First2);
; 465  : 		_CRT_SECURE_MEMCPY(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 466  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 467  : 		}

  00020	c3		 ret	 0
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Copy_s
_TEXT	ENDS
PUBLIC	?find@?$char_traits@D@std@@SAPBDPBDIABD@Z	; std::char_traits<char>::find
EXTRN	_memchr:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?find@?$char_traits@D@std@@SAPBDPBDIABD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 4
?find@?$char_traits@D@std@@SAPBDPBDIABD@Z PROC		; std::char_traits<char>::find, COMDAT

; 472  : //		_DEBUG_POINTER(_First);
; 473  : 		return ((const _Elem *)::memchr(_First, _Ch, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ch$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00008	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0000b	50		 push	 eax
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __First$[esp]
  00010	52		 push	 edx
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _memchr
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 474  : 		}

  0001a	c3		 ret	 0
?find@?$char_traits@D@std@@SAPBDPBDIABD@Z ENDP		; std::char_traits<char>::find
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Move_s, COMDAT

; 487  : //		_DEBUG_POINTER(_First1);
; 488  : //		_DEBUG_POINTER(_First2);
; 489  : 		_CRT_SECURE_MEMMOVE(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 490  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 491  : 		}

  00020	c3		 ret	 0
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Move_s
_TEXT	ENDS
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
; Function compile flags: /Ogtpy
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 506  : 		return ((unsigned char)_Ch);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 507  : 		}

  00007	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
; Function compile flags: /Ogtpy
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 512  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000a	33 c0		 xor	 eax, eax
  0000c	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0000e	0f 94 c0	 sete	 al

; 513  : 		}

  00011	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
; Function compile flags: /Ogtpy
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 517  : 		return (EOF);

  00000	83 c8 ff	 or	 eax, -1

; 518  : 		}

  00003	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
PUBLIC	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Pcont$ = 8						; size = 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z PROC	; std::_Aux_cont::_Aux_cont, COMDAT
; _this$ = ecx

; 364  : 	explicit _Aux_cont(const _Container_base_aux * const _Pcont)

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pcont$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx
  00008	c2 04 00	 ret	 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ENDP	; std::_Aux_cont::_Aux_cont
_TEXT	ENDS
PUBLIC	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
; Function compile flags: /Ogtpy
;	COMDAT ?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Aux_cont::_Getcont, COMDAT
; _this$ = ecx

; 369  : 		return _Mycontainer;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 370  : 		}

  00002	c3		 ret	 0
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Aux_cont::_Getcont
_TEXT	ENDS
PUBLIC	??0_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::_Container_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??0_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::_Container_base_aux, COMDAT
; _this$ = ecx

; 379  : 	_Container_base_aux()

  00000	8b c1		 mov	 eax, ecx

; 380  : 		{
; 381  : 		// Do nothing: _Container_base_aux_alloc_real() will construct the aux object.
; 382  : 		}

  00002	c3		 ret	 0
??0_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::_Container_base_aux
_TEXT	ENDS
PUBLIC	??1_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::~_Container_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??1_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??1_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::~_Container_base_aux, COMDAT
; _this$ = ecx

; 403  : 		// Do nothing: ~_Container_base_aux_alloc_real() previously destroyed the aux object.
; 404  : 		}

  00000	c3		 ret	 0
??1_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::~_Container_base_aux
_TEXT	ENDS
PUBLIC	??0_Iterator_base_aux@std@@QAE@XZ		; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??0_Iterator_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base_aux@std@@QAE@XZ PROC			; std::_Iterator_base_aux::_Iterator_base_aux, COMDAT
; _this$ = ecx

; 448  : 	_Iterator_base_aux()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0_Iterator_base_aux@std@@QAE@XZ ENDP			; std::_Iterator_base_aux::_Iterator_base_aux
_TEXT	ENDS
PUBLIC	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z
_TEXT	SEGMENT
__Pcont$ = 8						; size = 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z PROC ; std::_Iterator_base_aux::_Set_container, COMDAT
; _this$ = ecx

; 453  : 		_Myaux = _Pcont->_Myownedaux;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pcont$[esp-4]
  00004	8b 10		 mov	 edx, DWORD PTR [eax]
  00006	89 11		 mov	 DWORD PTR [ecx], edx

; 454  : 		}

  00008	c2 04 00	 ret	 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ENDP ; std::_Iterator_base_aux::_Set_container
_TEXT	ENDS
PUBLIC	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Ogtpy
;	COMDAT ?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Iterator_base_aux::_Getmycont, COMDAT
; _this$ = ecx

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 03		 je	 SHORT $LN3@Getmycont
  00006	8b 00		 mov	 eax, DWORD PTR [eax]

; 459  : 		}

  00008	c3		 ret	 0
$LN3@Getmycont:

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

  00009	33 c0		 xor	 eax, eax

; 459  : 		}

  0000b	c3		 ret	 0
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Iterator_base_aux::_Getmycont
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_aux::_Same_container, COMDAT
; _this$ = ecx

; 463  : 		return _Myaux == _Other._Myaux;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Other$[esp-4]
  00006	33 c9		 xor	 ecx, ecx
  00008	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000a	0f 94 c1	 sete	 cl
  0000d	8a c1		 mov	 al, cl

; 464  : 		}

  0000f	c2 04 00	 ret	 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_aux::_Same_container
_TEXT	ENDS
PUBLIC	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Has_container@_Iterator_base_aux@std@@QBE_NXZ
_TEXT	SEGMENT
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ PROC	; std::_Iterator_base_aux::_Has_container, COMDAT
; _this$ = ecx

; 468  : 		return _Myaux != 0;

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	0f 95 c0	 setne	 al

; 469  : 		}

  00007	c3		 ret	 0
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ENDP	; std::_Iterator_base_aux::_Has_container
_TEXT	ENDS
PUBLIC	??0_Iterator_base_secure@std@@QAE@XZ		; std::_Iterator_base_secure::_Iterator_base_secure
; Function compile flags: /Ogtpy
;	COMDAT ??0_Iterator_base_secure@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base_secure@std@@QAE@XZ PROC		; std::_Iterator_base_secure::_Iterator_base_secure, COMDAT
; _this$ = ecx

; 567  : 		{

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 568  : 		}

  00008	c3		 ret	 0
??0_Iterator_base_secure@std@@QAE@XZ ENDP		; std::_Iterator_base_secure::_Iterator_base_secure
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_secure@std@@QBE_NABV12@@Z ; std::_Iterator_base_secure::_Same_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Same_container@_Iterator_base_secure@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_secure@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_secure::_Same_container, COMDAT
; _this$ = ecx

; 577  : 		return _Mycont == _Other._Mycont;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Other$[esp-4]
  00006	33 c9		 xor	 ecx, ecx
  00008	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000a	0f 94 c1	 sete	 cl
  0000d	8a c1		 mov	 al, cl

; 578  : 		}

  0000f	c2 04 00	 ret	 4
?_Same_container@_Iterator_base_secure@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_secure::_Same_container
_TEXT	ENDS
PUBLIC	?_Has_container@_Iterator_base_secure@std@@QBE_NXZ ; std::_Iterator_base_secure::_Has_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Has_container@_Iterator_base_secure@std@@QBE_NXZ
_TEXT	SEGMENT
?_Has_container@_Iterator_base_secure@std@@QBE_NXZ PROC	; std::_Iterator_base_secure::_Has_container, COMDAT
; _this$ = ecx

; 582  : 		return _Mycont != 0;

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	0f 95 c0	 setne	 al

; 583  : 		}

  00007	c3		 ret	 0
?_Has_container@_Iterator_base_secure@std@@QBE_NXZ ENDP	; std::_Iterator_base_secure::_Has_container
_TEXT	ENDS
PUBLIC	?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ	; std::_Locinfo::_Getctype
EXTRN	__Getctype:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
;	COMDAT ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
_TEXT	SEGMENT
$T137129 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ PROC	; std::_Locinfo::_Getctype, COMDAT
; _this$ = ecx

; 123  : 		{	// return ctype stuff

  00000	83 ec 10	 sub	 esp, 16			; 00000010H

; 124  : 		return (::_Getctype());

  00003	8d 04 24	 lea	 eax, DWORD PTR $T137129[esp+16]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 __Getctype
  0000c	8b 4c 24 18	 mov	 ecx, DWORD PTR ___$ReturnUdt$[esp+16]
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	89 11		 mov	 DWORD PTR [ecx], edx
  00014	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00017	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0001a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0001d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00020	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00023	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00026	8b c1		 mov	 eax, ecx

; 125  : 		}

  00028	83 c4 14	 add	 esp, 20			; 00000014H
  0002b	c2 04 00	 ret	 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ENDP	; std::_Locinfo::_Getctype
_TEXT	ENDS
PUBLIC	?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ	; std::_Locinfo::_Getcvt
EXTRN	__Getcvt:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ PROC		; std::_Locinfo::_Getcvt, COMDAT
; _this$ = ecx

; 129  : 		return (::_Getcvt());

  00000	e8 00 00 00 00	 call	 __Getcvt
  00005	8b c8		 mov	 ecx, eax
  00007	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx
  0000d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 130  : 		}

  00010	c2 04 00	 ret	 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ENDP		; std::_Locinfo::_Getcvt
_TEXT	ENDS
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 73   : 			{	// construct with specified stamp value

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Val$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 74   : 			}

  00008	c2 04 00	 ret	 4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
PUBLIC	??Bid@locale@std@@QAEIXZ			; std::locale::id::operator unsigned int
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
; Function compile flags: /Ogtpy
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT
__Lock$47902 = -4					; size = 4
??Bid@locale@std@@QAEIXZ PROC				; std::locale::id::operator unsigned int, COMDAT
; _this$ = ecx

; 77   : 			{	// get stamp, with lazy allocation

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 78   : 			if (_Id == 0)

  00004	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00007	75 26		 jne	 SHORT $LN6@operator

; 79   : 				{	// still zero, allocate stamp
; 80   : 				_BEGIN_LOCK(_LOCK_LOCALE)

  00009	6a 00		 push	 0
  0000b	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$47902[esp+12]
  0000f	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 81   : 					if (_Id == 0)

  00014	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00017	75 0d		 jne	 SHORT $LN1@operator

; 82   : 						_Id = ++_Id_cnt;

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  0001e	40		 inc	 eax
  0001f	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00024	89 06		 mov	 DWORD PTR [esi], eax
$LN1@operator:

; 83   : 				_END_LOCK()

  00026	8d 4c 24 04	 lea	 ecx, DWORD PTR __Lock$47902[esp+8]
  0002a	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN6@operator:

; 84   : 				}
; 85   : 			return (_Id);

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	5e		 pop	 esi

; 86   : 			}

  00032	59		 pop	 ecx
  00033	c3		 ret	 0
??Bid@locale@std@@QAEIXZ ENDP				; std::locale::id::operator unsigned int
_TEXT	ENDS
PUBLIC	?_Incref@facet@locale@std@@QAEXXZ		; std::locale::facet::_Incref
; Function compile flags: /Ogtpy
;	COMDAT ?_Incref@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
__Lock$47908 = -4					; size = 4
?_Incref@facet@locale@std@@QAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 117  : 			{	// safely increment the reference count

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 118  : 			_BEGIN_LOCK(_LOCK_LOCALE)

  00004	6a 00		 push	 0
  00006	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$47908[esp+12]
  0000a	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 119  : 				if (_Refs < (size_t)(-1))

  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	83 f8 ff	 cmp	 eax, -1
  00015	73 04		 jae	 SHORT $LN1@Incref

; 120  : 					++_Refs;

  00017	40		 inc	 eax
  00018	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@Incref:

; 121  : 			_END_LOCK()

  0001b	8d 4c 24 04	 lea	 ecx, DWORD PTR __Lock$47908[esp+8]
  0001f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00024	5e		 pop	 esi

; 122  : 			}

  00025	59		 pop	 ecx
  00026	c3		 ret	 0
?_Incref@facet@locale@std@@QAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
PUBLIC	?_Decref@facet@locale@std@@QAEPAV123@XZ		; std::locale::facet::_Decref
; Function compile flags: /Ogtpy
;	COMDAT ?_Decref@facet@locale@std@@QAEPAV123@XZ
_TEXT	SEGMENT
__Lock$47913 = -4					; size = 4
?_Decref@facet@locale@std@@QAEPAV123@XZ PROC		; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 125  : 			{	// safely decrement the reference count, return this when dead

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 126  : 			_BEGIN_LOCK(_LOCK_LOCALE)

  00005	6a 00		 push	 0
  00007	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$47913[esp+16]
  0000b	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 127  : 				if (0 < _Refs && _Refs < (size_t)(-1))

  00010	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00013	85 c0		 test	 eax, eax
  00015	76 09		 jbe	 SHORT $LN1@Decref
  00017	83 f8 ff	 cmp	 eax, -1
  0001a	73 04		 jae	 SHORT $LN1@Decref

; 128  : 					--_Refs;

  0001c	48		 dec	 eax
  0001d	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN1@Decref:

; 129  : 				return (_Refs == 0 ? this : 0);

  00020	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00023	f7 de		 neg	 esi
  00025	1b f6		 sbb	 esi, esi
  00027	f7 d6		 not	 esi
  00029	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$47913[esp+12]
  0002d	23 f7		 and	 esi, edi
  0002f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00034	5f		 pop	 edi
  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi

; 130  : 			_END_LOCK()
; 131  : 			}

  00038	59		 pop	 ecx
  00039	c3		 ret	 0
?_Decref@facet@locale@std@@QAEPAV123@XZ ENDP		; std::locale::facet::_Decref
_TEXT	ENDS
PUBLIC	?_Register@facet@locale@std@@QAEXXZ		; std::locale::facet::_Register
EXTRN	?facet_Register@facet@locale@std@@CAXPAV123@@Z:PROC ; std::locale::facet::facet_Register
; Function compile flags: /Ogtpy
;	COMDAT ?_Register@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
?_Register@facet@locale@std@@QAEXXZ PROC		; std::locale::facet::_Register, COMDAT
; _this$ = ecx

; 135  : #if defined(_M_CEE)
; 136  : 			facet_Register_m(this);
; 137  : #else
; 138  : 			facet_Register(this);

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  00006	59		 pop	 ecx

; 139  : #endif
; 140  : 			}

  00007	c3		 ret	 0
?_Register@facet@locale@std@@QAEXXZ ENDP		; std::locale::facet::_Register
_TEXT	ENDS
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??1facet@locale@std@@UAE@XZ			; std::locale::facet::~facet
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Efacet@locale@std@@UAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1facet@locale@std@@UAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@UAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 170  : 			{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@

; 171  : 			}

  00006	c3		 ret	 0
??1facet@locale@std@@UAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
PUBLIC	??0facet@locale@std@@IAE@I@Z			; std::locale::facet::facet
; Function compile flags: /Ogtpy
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT
__Initrefs$ = 8						; size = 4
??0facet@locale@std@@IAE@I@Z PROC			; std::locale::facet::facet, COMDAT
; _this$ = ecx

; 176  : 			{	// construct with initial reference count

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Initrefs$[esp-4]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@
  0000c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 177  : 			}

  0000f	c2 04 00	 ret	 4
??0facet@locale@std@@IAE@I@Z ENDP			; std::locale::facet::facet
_TEXT	ENDS
PUBLIC	??0locale@std@@QAE@XZ				; std::locale::locale
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@XZ:PROC	; std::locale::_Init
; Function compile flags: /Ogtpy
;	COMDAT ??0locale@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$137156 = -4					; size = 4
??0locale@std@@QAE@XZ PROC				; std::locale::locale, COMDAT
; _this$ = ecx

; 324  : 		{	// construct from current locale

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  0000a	89 07		 mov	 DWORD PTR [edi], eax

; 325  : 		_Getgloballocale()->_Incref();

  0000c	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  00011	6a 00		 push	 0
  00013	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$137156[esp+16]
  00017	8b f0		 mov	 esi, eax
  00019	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0001e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00021	83 f8 ff	 cmp	 eax, -1
  00024	73 04		 jae	 SHORT $LN3@locale
  00026	40		 inc	 eax
  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN3@locale:
  0002a	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$137156[esp+12]
  0002e	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 326  : 		}

  00033	8b c7		 mov	 eax, edi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	59		 pop	 ecx
  00038	c3		 ret	 0
??0locale@std@@QAE@XZ ENDP				; std::locale::locale
_TEXT	ENDS
PUBLIC	??0locale@std@@QAE@ABV01@@Z			; std::locale::locale
; Function compile flags: /Ogtpy
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Lock$137164 = 8					; size = 4
__Right$ = 8						; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = ecx

; 334  : 		{	// construct by copying

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	56		 push	 esi
  00005	8b 30		 mov	 esi, DWORD PTR [eax]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 335  : 		_Ptr->_Incref();

  0000a	6a 00		 push	 0
  0000c	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$137164[esp+8]
  00010	89 37		 mov	 DWORD PTR [edi], esi
  00012	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	83 f8 ff	 cmp	 eax, -1
  0001d	73 04		 jae	 SHORT $LN3@locale@2
  0001f	40		 inc	 eax
  00020	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN3@locale@2:
  00023	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$137164[esp+4]
  00027	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 336  : 		}

  0002c	8b c7		 mov	 eax, edi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c2 04 00	 ret	 4
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
_TEXT	ENDS
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
; Function compile flags: /Ogtpy
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$137177 = -4					; size = 4
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 390  : 		{	// destroy the object

  00000	51		 push	 ecx
  00001	57		 push	 edi

; 391  : 		if (_Ptr != 0)

  00002	8b 39		 mov	 edi, DWORD PTR [ecx]
  00004	85 ff		 test	 edi, edi
  00006	74 3f		 je	 SHORT $LN4@locale@3

; 392  : 			_DELETE_CRT(_Ptr->_Decref());

  00008	6a 00		 push	 0
  0000a	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$137177[esp+12]
  0000e	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00013	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00016	85 c0		 test	 eax, eax
  00018	76 09		 jbe	 SHORT $LN6@locale@3
  0001a	83 f8 ff	 cmp	 eax, -1
  0001d	73 04		 jae	 SHORT $LN6@locale@3
  0001f	48		 dec	 eax
  00020	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN6@locale@3:
  00023	56		 push	 esi
  00024	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00027	f7 de		 neg	 esi
  00029	1b f6		 sbb	 esi, esi
  0002b	f7 d6		 not	 esi
  0002d	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$137177[esp+12]
  00031	23 f7		 and	 esi, edi
  00033	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00038	85 f6		 test	 esi, esi
  0003a	74 0a		 je	 SHORT $LN9@locale@3
  0003c	8b 06		 mov	 eax, DWORD PTR [esi]
  0003e	8b 10		 mov	 edx, DWORD PTR [eax]
  00040	6a 01		 push	 1
  00042	8b ce		 mov	 ecx, esi
  00044	ff d2		 call	 edx
$LN9@locale@3:
  00046	5e		 pop	 esi
$LN4@locale@3:
  00047	5f		 pop	 edi

; 393  : 		}

  00048	59		 pop	 ecx
  00049	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
; Function compile flags: /Ogtpy
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 413  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 414  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	56		 push	 esi
  00003	8b 74 24 08	 mov	 esi, DWORD PTR __Id$[esp]
  00007	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  0000a	73 24		 jae	 SHORT $LN6@Getfacet
  0000c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000f	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 415  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00012	85 c0		 test	 eax, eax
  00014	75 20		 jne	 SHORT $LN1@Getfacet
$LN10@Getfacet:
  00016	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  0001a	74 1a		 je	 SHORT $LN1@Getfacet

; 416  : 			return (_Facptr);	// found facet or not transparent, return pointer
; 417  : 		else
; 418  : 			{	// look in current locale
; 419  : 			locale::_Locimp *_Ptr = _Getgloballocale();

  0001c	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 420  : 			return (_Id < _Ptr->_Facetcount
; 421  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 422  : 				: 0);	// no entry in current locale

  00021	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00024	73 0e		 jae	 SHORT $LN8@Getfacet
  00026	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00029	8b 04 b1	 mov	 eax, DWORD PTR [ecx+esi*4]
  0002c	5e		 pop	 esi

; 423  : 			}
; 424  : 		}

  0002d	c2 04 00	 ret	 4
$LN6@Getfacet:

; 413  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 414  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00030	33 c0		 xor	 eax, eax

; 415  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00032	eb e2		 jmp	 SHORT $LN10@Getfacet
$LN8@Getfacet:

; 420  : 			return (_Id < _Ptr->_Facetcount
; 421  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 422  : 				: 0);	// no entry in current locale

  00034	33 c0		 xor	 eax, eax
$LN1@Getfacet:
  00036	5e		 pop	 esi

; 423  : 			}
; 424  : 		}

  00037	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gfacet@locale@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@UAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN6@scalar@2
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN6@scalar@2:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_Gfacet@locale@std@@UAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??0ctype_base@std@@QAE@I@Z			; std::ctype_base::ctype_base
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0ctype_base@std@@QAE@I@Z
_TEXT	SEGMENT
__Refs$ = 8						; size = 4
??0ctype_base@std@@QAE@I@Z PROC				; std::ctype_base::ctype_base, COMDAT
; _this$ = ecx

; 1358 : 		{	// default constructor

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Refs$[esp-4]
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ctype_base@std@@6B@

; 1359 : 		}

  0000f	c2 04 00	 ret	 4
??0ctype_base@std@@QAE@I@Z ENDP				; std::ctype_base::ctype_base
_TEXT	ENDS
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
; Function compile flags: /Ogtpy
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx

; 1363 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00006	c3		 ret	 0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN8@scalar@3
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN8@scalar@3:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?widen@?$ctype@D@std@@QBEDD@Z			; std::ctype<char>::widen
; Function compile flags: /Ogtpy
;	COMDAT ?widen@?$ctype@D@std@@QBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?widen@?$ctype@D@std@@QBEDD@Z PROC			; std::ctype<char>::widen, COMDAT
; _this$ = ecx

; 1716 : 		return (do_widen(_Byte));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00005	ff e0		 jmp	 eax
?widen@?$ctype@D@std@@QBEDD@Z ENDP			; std::ctype<char>::widen
_TEXT	ENDS
PUBLIC	?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z	; std::ctype<char>::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T137230 = -16						; size = 16
__Lobj$ = 8						; size = 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z PROC		; std::ctype<char>::_Init, COMDAT
; _this$ = ecx

; 1807 : 		{	// initialize from _Lobj

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi

; 1808 : 		_Ctype = _Lobj._Getctype();

  00004	8d 44 24 04	 lea	 eax, DWORD PTR $T137230[esp+20]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 __Getctype
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00015	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00018	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0001b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001e	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00021	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00024	83 c4 04	 add	 esp, 4
  00027	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0002a	5e		 pop	 esi

; 1809 : 		}

  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	c2 04 00	 ret	 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z ENDP		; std::ctype<char>::_Init
_TEXT	ENDS
PUBLIC	?widen@?$ctype@_W@std@@QBE_WD@Z			; std::ctype<wchar_t>::widen
; Function compile flags: /Ogtpy
;	COMDAT ?widen@?$ctype@_W@std@@QBE_WD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?widen@?$ctype@_W@std@@QBE_WD@Z PROC			; std::ctype<wchar_t>::widen, COMDAT
; _this$ = ecx

; 1965 : 		return (do_widen(_Byte));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00005	ff e0		 jmp	 eax
?widen@?$ctype@_W@std@@QBE_WD@Z ENDP			; std::ctype<wchar_t>::widen
_TEXT	ENDS
PUBLIC	?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z	; std::ctype<wchar_t>::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T137244 = -16						; size = 16
__Lobj$ = 8						; size = 4
?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z PROC	; std::ctype<wchar_t>::_Init, COMDAT
; _this$ = ecx

; 2047 : 		{	// initialize from _Lobj

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi

; 2048 : 		_Ctype = _Lobj._Getctype();

  00004	8d 44 24 04	 lea	 eax, DWORD PTR $T137244[esp+20]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 __Getctype
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00015	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00018	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0001b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001e	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00021	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00024	83 c4 04	 add	 esp, 4
  00027	89 56 14	 mov	 DWORD PTR [esi+20], edx

; 2049 : 		_Cvt = _Lobj._Getcvt();

  0002a	e8 00 00 00 00	 call	 __Getcvt
  0002f	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00032	89 56 1c	 mov	 DWORD PTR [esi+28], edx
  00035	5e		 pop	 esi

; 2050 : 		}

  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	c2 04 00	 ret	 4
?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z ENDP	; std::ctype<wchar_t>::_Init
_TEXT	ENDS
PUBLIC	?rdstate@ios_base@std@@QBEHXZ			; std::ios_base::rdstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?rdstate@ios_base@std@@QBEHXZ PROC			; std::ios_base::rdstate, COMDAT
; _this$ = ecx

; 311  : 		return (_Mystate);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 312  : 		}

  00003	c3		 ret	 0
?rdstate@ios_base@std@@QBEHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
PUBLIC	?good@ios_base@std@@QBE_NXZ			; std::ios_base::good
; Function compile flags: /Ogtpy
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?good@ios_base@std@@QBE_NXZ PROC			; std::ios_base::good, COMDAT
; _this$ = ecx

; 334  : 		return (rdstate() == goodbit);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  00005	0f 94 c0	 sete	 al

; 335  : 		}

  00008	c3		 ret	 0
?good@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
PUBLIC	?fail@ios_base@std@@QBE_NXZ			; std::ios_base::fail
; Function compile flags: /Ogtpy
;	COMDAT ?fail@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?fail@ios_base@std@@QBE_NXZ PROC			; std::ios_base::fail, COMDAT
; _this$ = ecx

; 344  : 		return (((int)rdstate()
; 345  : 			& ((int)badbit | (int)failbit)) != 0);

  00000	f6 41 08 06	 test	 BYTE PTR [ecx+8], 6
  00004	b8 00 00 00 00	 mov	 eax, 0
  00009	0f 95 c0	 setne	 al

; 346  : 		}

  0000c	c3		 ret	 0
?fail@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::fail
_TEXT	ENDS
PUBLIC	?flags@ios_base@std@@QBEHXZ			; std::ios_base::flags
; Function compile flags: /Ogtpy
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?flags@ios_base@std@@QBEHXZ PROC			; std::ios_base::flags, COMDAT
; _this$ = ecx

; 374  : 		return (_Fmtfl);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 375  : 		}

  00003	c3		 ret	 0
?flags@ios_base@std@@QBEHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
PUBLIC	?setf@ios_base@std@@QAEHHH@Z			; std::ios_base::setf
; Function compile flags: /Ogtpy
;	COMDAT ?setf@ios_base@std@@QAEHHH@Z
_TEXT	SEGMENT
__Newfmtflags$ = 8					; size = 4
__Mask$ = 12						; size = 4
?setf@ios_base@std@@QAEHHH@Z PROC			; std::ios_base::setf, COMDAT
; _this$ = ecx

; 394  : 		ios_base::fmtflags _Oldfmtflags = _Fmtfl;
; 395  : 		_Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)
; 396  : 			| ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Mask$[esp-4]
  00004	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7c 24 0c	 mov	 edi, DWORD PTR __Newfmtflags$[esp+4]
  0000d	8b f2		 mov	 esi, edx
  0000f	f7 d6		 not	 esi
  00011	23 fa		 and	 edi, edx
  00013	23 f0		 and	 esi, eax
  00015	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  0001b	0b f7		 or	 esi, edi
  0001d	5f		 pop	 edi
  0001e	89 71 10	 mov	 DWORD PTR [ecx+16], esi
  00021	5e		 pop	 esi

; 397  : 		return (_Oldfmtflags);
; 398  : 		}

  00022	c2 08 00	 ret	 8
?setf@ios_base@std@@QAEHHH@Z ENDP			; std::ios_base::setf
_TEXT	ENDS
PUBLIC	?width@ios_base@std@@QBEHXZ			; std::ios_base::width
; Function compile flags: /Ogtpy
;	COMDAT ?width@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?width@ios_base@std@@QBEHXZ PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 419  : 		return (_Wide);

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 420  : 		}

  00003	c3		 ret	 0
?width@ios_base@std@@QBEHXZ ENDP			; std::ios_base::width
_TEXT	ENDS
PUBLIC	?width@ios_base@std@@QAEHH@Z			; std::ios_base::width
; Function compile flags: /Ogtpy
;	COMDAT ?width@ios_base@std@@QAEHH@Z
_TEXT	SEGMENT
__Newwidth$ = 8						; size = 4
?width@ios_base@std@@QAEHH@Z PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 424  : 		streamsize _Oldwidth = _Wide;
; 425  : 		_Wide = _Newwidth;

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Newwidth$[esp-4]
  00004	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00007	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 426  : 		return (_Oldwidth);
; 427  : 		}

  0000a	c2 04 00	 ret	 4
?width@ios_base@std@@QAEHH@Z ENDP			; std::ios_base::width
_TEXT	ENDS
PUBLIC	?getloc@ios_base@std@@QBE?AVlocale@2@XZ		; std::ios_base::getloc
; Function compile flags: /Ogtpy
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
$T137276 = -4						; size = 4
__Lock$137289 = 8					; size = 4
___$ReturnUdt$ = 8					; size = 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT
; _this$ = ecx

; 430  : 		{	// get locale

  00000	51		 push	 ecx

; 431  : 		return (*_Ploc);

  00001	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00004	56		 push	 esi
  00005	8b 30		 mov	 esi, DWORD PTR [eax]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	6a 00		 push	 0
  0000e	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$137289[esp+12]
  00012	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T137276[esp+16], 0
  0001a	89 37		 mov	 DWORD PTR [edi], esi
  0001c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00021	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00024	83 f8 ff	 cmp	 eax, -1
  00027	73 04		 jae	 SHORT $LN7@getloc
  00029	40		 inc	 eax
  0002a	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@getloc:
  0002d	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$137289[esp+8]
  00031	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00036	8b c7		 mov	 eax, edi
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi

; 432  : 		}

  0003a	59		 pop	 ecx
  0003b	c2 04 00	 ret	 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ ENDP		; std::ios_base::getloc
_TEXT	ENDS
PUBLIC	??_7ios_base@std@@6B@				; std::ios_base::`vftable'
PUBLIC	??1ios_base@std@@UAE@XZ				; std::ios_base::~ios_base
PUBLIC	??_R4ios_base@std@@6B@				; std::ios_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:PROC	; std::ios_base::_Ios_base_dtor
EXTRN	??_Eios_base@std@@UAEPAXI@Z:PROC		; std::ios_base::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
_DATA	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
_DATA	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ios_base@std@@6B@
rdata$r	SEGMENT
??_R4ios_base@std@@6B@ DD 00H				; std::ios_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVios_base@std@@@8
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT
??_7ios_base@std@@6B@ DD FLAT:??_R4ios_base@std@@6B@	; std::ios_base::`vftable'
	DD	FLAT:??_Eios_base@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ios_base@std@@UAE@XZ PROC				; std::ios_base::~ios_base, COMDAT
; _this$ = ecx

; 494  :         _Ios_base_dtor(this);

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx

; 495  :         }

  0000d	c3		 ret	 0
??1ios_base@std@@UAE@XZ ENDP				; std::ios_base::~ios_base
_TEXT	ENDS
PUBLIC	??0ios_base@std@@IAE@XZ				; std::ios_base::ios_base
; Function compile flags: /Ogtpy
;	COMDAT ??0ios_base@std@@IAE@XZ
_TEXT	SEGMENT
??0ios_base@std@@IAE@XZ PROC				; std::ios_base::ios_base, COMDAT
; _this$ = ecx

; 510  : 	__CLR_OR_THIS_CALL ios_base()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@

; 511  : 		{	// default constructor
; 512  : 		}

  00008	c3		 ret	 0
??0ios_base@std@@IAE@XZ ENDP				; std::ios_base::ios_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gios_base@std@@UAEPAXI@Z PROC			; std::ios_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	56		 push	 esi
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000f	83 c4 04	 add	 esp, 4
  00012	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00017	74 09		 je	 SHORT $LN6@scalar@4
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	83 c4 04	 add	 esp, 4
$LN6@scalar@4:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c2 04 00	 ret	 4
??_Gios_base@std@@UAEPAXI@Z ENDP			; std::ios_base::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?hex@std@@YAAAVios_base@1@AAV21@@Z		; std::hex
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?hex@std@@YAAAVios_base@1@AAV21@@Z
_TEXT	SEGMENT
__Iosbase$ = 8						; size = 4
?hex@std@@YAAAVios_base@1@AAV21@@Z PROC			; std::hex, COMDAT

; 191  : 	_Iosbase.setf(ios_base::hex, ios_base::basefield);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Iosbase$[esp-4]
  00004	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00007	81 e1 ff f9 ff
	ff		 and	 ecx, -1537		; fffff9ffH
  0000d	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  00013	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 192  : 	return (_Iosbase);
; 193  : 	}

  00016	c3		 ret	 0
?hex@std@@YAAAVios_base@1@AAV21@@Z ENDP			; std::hex
_TEXT	ENDS
PUBLIC	??_7Container@ForEach@CipherShed@@6B@		; CipherShed::ForEach::Container::`vftable'
PUBLIC	??0Container@ForEach@CipherShed@@QAE@XZ		; CipherShed::ForEach::Container::Container
PUBLIC	??_R4Container@ForEach@CipherShed@@6B@		; CipherShed::ForEach::Container::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUContainer@ForEach@CipherShed@@@8	; CipherShed::ForEach::Container `RTTI Type Descriptor'
PUBLIC	??_R3Container@ForEach@CipherShed@@8		; CipherShed::ForEach::Container::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Container@ForEach@CipherShed@@8		; CipherShed::ForEach::Container::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Container@ForEach@CipherShed@@8	; CipherShed::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EContainer@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::Container::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
rdata$r	SEGMENT
??_R1A@?0A@EA@Container@ForEach@CipherShed@@8 DD FLAT:??_R0?AUContainer@ForEach@CipherShed@@@8 ; CipherShed::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2Container@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2Container@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8 ; CipherShed::ForEach::Container::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Container@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3Container@ForEach@CipherShed@@8 DD 00H		; CipherShed::ForEach::Container::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUContainer@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUContainer@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::Container `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUContainer@ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Container@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4Container@ForEach@CipherShed@@6B@ DD 00H		; CipherShed::ForEach::Container::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUContainer@ForEach@CipherShed@@@8
	DD	FLAT:??_R3Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7Container@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7Container@ForEach@CipherShed@@6B@ DD FLAT:??_R4Container@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::Container::`vftable'
	DD	FLAT:??_EContainer@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0Container@ForEach@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0Container@ForEach@CipherShed@@QAE@XZ PROC		; CipherShed::ForEach::Container::Container, COMDAT
; _this$ = ecx

; 19   : 			Container () : InnerContinue (true), InnerEndCondition (false) { }

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00008	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  0000c	c6 40 05 00	 mov	 BYTE PTR [eax+5], 0
  00010	c3		 ret	 0
??0Container@ForEach@CipherShed@@QAE@XZ ENDP		; CipherShed::ForEach::Container::Container
_TEXT	ENDS
PUBLIC	??1Container@ForEach@CipherShed@@UAE@XZ		; CipherShed::ForEach::Container::~Container
; Function compile flags: /Ogtpy
;	COMDAT ??1Container@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1Container@ForEach@CipherShed@@UAE@XZ PROC		; CipherShed::ForEach::Container::~Container, COMDAT
; _this$ = ecx

; 20   : 			virtual ~Container () { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00006	c3		 ret	 0
??1Container@ForEach@CipherShed@@UAE@XZ ENDP		; CipherShed::ForEach::Container::~Container
_TEXT	ENDS
PUBLIC	?Continue@Container@ForEach@CipherShed@@QBEXXZ	; CipherShed::ForEach::Container::Continue
; Function compile flags: /Ogtpy
;	COMDAT ?Continue@Container@ForEach@CipherShed@@QBEXXZ
_TEXT	SEGMENT
?Continue@Container@ForEach@CipherShed@@QBEXXZ PROC	; CipherShed::ForEach::Container::Continue, COMDAT
; _this$ = ecx

; 22   : 			void Continue () const { InnerContinue = true; }

  00000	c6 41 04 01	 mov	 BYTE PTR [ecx+4], 1
  00004	c3		 ret	 0
?Continue@Container@ForEach@CipherShed@@QBEXXZ ENDP	; CipherShed::ForEach::Container::Continue
_TEXT	ENDS
PUBLIC	?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ ; CipherShed::ForEach::Container::InnerIsNotEnd
; Function compile flags: /Ogtpy
;	COMDAT ?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ
_TEXT	SEGMENT
?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ PROC ; CipherShed::ForEach::Container::InnerIsNotEnd, COMDAT
; _this$ = ecx

; 23   : 			bool InnerIsNotEnd () const { return InnerEndCondition = !InnerEndCondition; }

  00000	80 79 05 00	 cmp	 BYTE PTR [ecx+5], 0
  00004	0f 94 c0	 sete	 al
  00007	88 41 05	 mov	 BYTE PTR [ecx+5], al
  0000a	c3		 ret	 0
?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ ENDP ; CipherShed::ForEach::Container::InnerIsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GContainer@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GContainer@ForEach@CipherShed@@UAEPAXI@Z PROC	; CipherShed::ForEach::Container::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0000e	74 09		 je	 SHORT $LN6@scalar@5
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN6@scalar@5:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_GContainer@ForEach@CipherShed@@UAEPAXI@Z ENDP	; CipherShed::ForEach::Container::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_RtlSecureZeroMemory
; Function compile flags: /Ogtpy
; File c:\program files\microsoft sdks\windows\v7.1\include\winnt.h
;	COMDAT _RtlSecureZeroMemory
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_cnt$ = 12						; size = 4
_RtlSecureZeroMemory PROC				; COMDAT

; 13070:     volatile char *vptr = (volatile char *)ptr;
; 13071: 
; 13072: #if defined(_M_AMD64)
; 13073: 
; 13074:         __stosb((PBYTE )((DWORD64)vptr), 0, cnt);
; 13075: 
; 13076: #else
; 13077: 
; 13078:     while (cnt) {

  00000	8b 54 24 08	 mov	 edx, DWORD PTR _cnt$[esp-4]
  00004	8b 44 24 04	 mov	 eax, DWORD PTR _ptr$[esp-4]
  00008	8b c8		 mov	 ecx, eax
  0000a	85 d2		 test	 edx, edx
  0000c	74 0b		 je	 SHORT $LN1@RtlSecureZ
  0000e	8b ff		 npad	 2
$LL2@RtlSecureZ:

; 13079:         *vptr = 0;

  00010	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 13080:         vptr++;

  00013	41		 inc	 ecx

; 13081:         cnt--;

  00014	83 ea 01	 sub	 edx, 1
  00017	75 f7		 jne	 SHORT $LL2@RtlSecureZ
$LN1@RtlSecureZ:

; 13082:     }
; 13083: 
; 13084: #endif
; 13085: 
; 13086:     return ptr;
; 13087: }

  00019	c3		 ret	 0
_RtlSecureZeroMemory ENDP
_TEXT	ENDS
PUBLIC	??_7Exception@CipherShed@@6B@			; CipherShed::Exception::`vftable'
PUBLIC	??0Exception@CipherShed@@QAE@XZ			; CipherShed::Exception::Exception
PUBLIC	??_R4Exception@CipherShed@@6B@			; CipherShed::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUException@CipherShed@@@8		; CipherShed::Exception `RTTI Type Descriptor'
PUBLIC	??_R3Exception@CipherShed@@8			; CipherShed::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@CipherShed@@8			; CipherShed::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@CipherShed@@8		; CipherShed::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
;	COMDAT ??_R1A@?0A@EA@Exception@CipherShed@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@CipherShed@@8 DD FLAT:??_R0?AUException@CipherShed@@@8 ; CipherShed::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@CipherShed@@8
rdata$r	SEGMENT
??_R2Exception@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@Exception@CipherShed@@8 ; CipherShed::Exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Exception@CipherShed@@8
rdata$r	SEGMENT
??_R3Exception@CipherShed@@8 DD 00H			; CipherShed::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUException@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUException@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUException@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Exception@CipherShed@@6B@
rdata$r	SEGMENT
??_R4Exception@CipherShed@@6B@ DD 00H			; CipherShed::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	FLAT:??_R3Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7Exception@CipherShed@@6B@
CONST	SEGMENT
??_7Exception@CipherShed@@6B@ DD FLAT:??_R4Exception@CipherShed@@6B@ ; CipherShed::Exception::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0Exception@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0Exception@CipherShed@@QAE@XZ PROC			; CipherShed::Exception::Exception, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@CipherShed@@6B@
  00008	c3		 ret	 0
??0Exception@CipherShed@@QAE@XZ ENDP			; CipherShed::Exception::Exception
_TEXT	ENDS
PUBLIC	??_7ParameterIncorrect@CipherShed@@6B@		; CipherShed::ParameterIncorrect::`vftable'
PUBLIC	??0ParameterIncorrect@CipherShed@@QAE@PBD@Z	; CipherShed::ParameterIncorrect::ParameterIncorrect
PUBLIC	??_R4ParameterIncorrect@CipherShed@@6B@		; CipherShed::ParameterIncorrect::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUParameterIncorrect@CipherShed@@@8	; CipherShed::ParameterIncorrect `RTTI Type Descriptor'
PUBLIC	??_R3ParameterIncorrect@CipherShed@@8		; CipherShed::ParameterIncorrect::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ParameterIncorrect@CipherShed@@8		; CipherShed::ParameterIncorrect::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ParameterIncorrect@CipherShed@@8	; CipherShed::ParameterIncorrect::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z ; CipherShed::ParameterIncorrect::Show
;	COMDAT ??_R1A@?0A@EA@ParameterIncorrect@CipherShed@@8
; File c:\home\public\desktop\projects\ciphershed.build\src\common\exception.h
rdata$r	SEGMENT
??_R1A@?0A@EA@ParameterIncorrect@CipherShed@@8 DD FLAT:??_R0?AUParameterIncorrect@CipherShed@@@8 ; CipherShed::ParameterIncorrect::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ParameterIncorrect@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2ParameterIncorrect@CipherShed@@8
rdata$r	SEGMENT
??_R2ParameterIncorrect@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@ParameterIncorrect@CipherShed@@8 ; CipherShed::ParameterIncorrect::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3ParameterIncorrect@CipherShed@@8
rdata$r	SEGMENT
??_R3ParameterIncorrect@CipherShed@@8 DD 00H		; CipherShed::ParameterIncorrect::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ParameterIncorrect@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUParameterIncorrect@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUParameterIncorrect@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ParameterIncorrect `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUParameterIncorrect@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ParameterIncorrect@CipherShed@@6B@
rdata$r	SEGMENT
??_R4ParameterIncorrect@CipherShed@@6B@ DD 00H		; CipherShed::ParameterIncorrect::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUParameterIncorrect@CipherShed@@@8
	DD	FLAT:??_R3ParameterIncorrect@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7ParameterIncorrect@CipherShed@@6B@
CONST	SEGMENT
??_7ParameterIncorrect@CipherShed@@6B@ DD FLAT:??_R4ParameterIncorrect@CipherShed@@6B@ ; CipherShed::ParameterIncorrect::`vftable'
	DD	FLAT:?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0ParameterIncorrect@CipherShed@@QAE@PBD@Z
_TEXT	SEGMENT
_srcPos$ = 8						; size = 4
??0ParameterIncorrect@CipherShed@@QAE@PBD@Z PROC	; CipherShed::ParameterIncorrect::ParameterIncorrect, COMDAT
; _this$ = ecx

; 54   : 		ParameterIncorrect (const char *srcPos) : SrcPos (srcPos) { }

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR _srcPos$[esp-4]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  0000c	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000f	c2 04 00	 ret	 4
??0ParameterIncorrect@CipherShed@@QAE@PBD@Z ENDP	; CipherShed::ParameterIncorrect::ParameterIncorrect
_TEXT	ENDS
PUBLIC	??_7Pkcs11Exception@CipherShed@@6B@		; CipherShed::Pkcs11Exception::`vftable'
PUBLIC	??0Pkcs11Exception@CipherShed@@QAE@K@Z		; CipherShed::Pkcs11Exception::Pkcs11Exception
PUBLIC	??_R4Pkcs11Exception@CipherShed@@6B@		; CipherShed::Pkcs11Exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUPkcs11Exception@CipherShed@@@8		; CipherShed::Pkcs11Exception `RTTI Type Descriptor'
PUBLIC	??_R3Pkcs11Exception@CipherShed@@8		; CipherShed::Pkcs11Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Pkcs11Exception@CipherShed@@8		; CipherShed::Pkcs11Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Pkcs11Exception@CipherShed@@8	; CipherShed::Pkcs11Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z ; CipherShed::Pkcs11Exception::Show
;	COMDAT ??_R1A@?0A@EA@Pkcs11Exception@CipherShed@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Pkcs11Exception@CipherShed@@8 DD FLAT:??_R0?AUPkcs11Exception@CipherShed@@@8 ; CipherShed::Pkcs11Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Pkcs11Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2Pkcs11Exception@CipherShed@@8
rdata$r	SEGMENT
??_R2Pkcs11Exception@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@Pkcs11Exception@CipherShed@@8 ; CipherShed::Pkcs11Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3Pkcs11Exception@CipherShed@@8
rdata$r	SEGMENT
??_R3Pkcs11Exception@CipherShed@@8 DD 00H		; CipherShed::Pkcs11Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Pkcs11Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUPkcs11Exception@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUPkcs11Exception@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::Pkcs11Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUPkcs11Exception@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Pkcs11Exception@CipherShed@@6B@
rdata$r	SEGMENT
??_R4Pkcs11Exception@CipherShed@@6B@ DD 00H		; CipherShed::Pkcs11Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUPkcs11Exception@CipherShed@@@8
	DD	FLAT:??_R3Pkcs11Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7Pkcs11Exception@CipherShed@@6B@
CONST	SEGMENT
??_7Pkcs11Exception@CipherShed@@6B@ DD FLAT:??_R4Pkcs11Exception@CipherShed@@6B@ ; CipherShed::Pkcs11Exception::`vftable'
	DD	FLAT:?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.h
CONST	ENDS
;	COMDAT ??0Pkcs11Exception@CipherShed@@QAE@K@Z
_TEXT	SEGMENT
_errorCode$ = 8						; size = 4
??0Pkcs11Exception@CipherShed@@QAE@K@Z PROC		; CipherShed::Pkcs11Exception::Pkcs11Exception, COMDAT
; _this$ = ecx

; 89   : 		{

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR _errorCode$[esp-4]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  0000c	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000f	c6 40 08 00	 mov	 BYTE PTR [eax+8], 0

; 90   : 		}

  00013	c2 04 00	 ret	 4
??0Pkcs11Exception@CipherShed@@QAE@K@Z ENDP		; CipherShed::Pkcs11Exception::Pkcs11Exception
_TEXT	ENDS
PUBLIC	?GetErrorCode@Pkcs11Exception@CipherShed@@QBEKXZ ; CipherShed::Pkcs11Exception::GetErrorCode
; Function compile flags: /Ogtpy
;	COMDAT ?GetErrorCode@Pkcs11Exception@CipherShed@@QBEKXZ
_TEXT	SEGMENT
?GetErrorCode@Pkcs11Exception@CipherShed@@QBEKXZ PROC	; CipherShed::Pkcs11Exception::GetErrorCode, COMDAT
; _this$ = ecx

; 106  : 		CK_RV GetErrorCode () const { return ErrorCode; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetErrorCode@Pkcs11Exception@CipherShed@@QBEKXZ ENDP	; CipherShed::Pkcs11Exception::GetErrorCode
_TEXT	ENDS
PUBLIC	??0Pkcs11Session@CipherShed@@QAE@XZ		; CipherShed::Pkcs11Session::Pkcs11Session
; Function compile flags: /Ogtpy
;	COMDAT ??0Pkcs11Session@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0Pkcs11Session@CipherShed@@QAE@XZ PROC		; CipherShed::Pkcs11Session::Pkcs11Session, COMDAT
; _this$ = ecx

; 158  : 		Pkcs11Session () : UserLoggedIn (false) { }

  00000	8b c1		 mov	 eax, ecx
  00002	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  00006	c3		 ret	 0
??0Pkcs11Session@CipherShed@@QAE@XZ ENDP		; CipherShed::Pkcs11Session::Pkcs11Session
_TEXT	ENDS
PUBLIC	??_7InvalidSecurityTokenKeyfilePath@CipherShed@@6B@ ; CipherShed::InvalidSecurityTokenKeyfilePath::`vftable'
PUBLIC	??0InvalidSecurityTokenKeyfilePath@CipherShed@@QAE@XZ ; CipherShed::InvalidSecurityTokenKeyfilePath::InvalidSecurityTokenKeyfilePath
PUBLIC	??_R4InvalidSecurityTokenKeyfilePath@CipherShed@@6B@ ; CipherShed::InvalidSecurityTokenKeyfilePath::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUInvalidSecurityTokenKeyfilePath@CipherShed@@@8 ; CipherShed::InvalidSecurityTokenKeyfilePath `RTTI Type Descriptor'
PUBLIC	??_R3InvalidSecurityTokenKeyfilePath@CipherShed@@8 ; CipherShed::InvalidSecurityTokenKeyfilePath::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InvalidSecurityTokenKeyfilePath@CipherShed@@8 ; CipherShed::InvalidSecurityTokenKeyfilePath::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InvalidSecurityTokenKeyfilePath@CipherShed@@8 ; CipherShed::InvalidSecurityTokenKeyfilePath::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Show@InvalidSecurityTokenKeyfilePath@CipherShed@@UBEXPAUHWND__@@@Z ; CipherShed::InvalidSecurityTokenKeyfilePath::Show
;	COMDAT ??_R1A@?0A@EA@InvalidSecurityTokenKeyfilePath@CipherShed@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InvalidSecurityTokenKeyfilePath@CipherShed@@8 DD FLAT:??_R0?AUInvalidSecurityTokenKeyfilePath@CipherShed@@@8 ; CipherShed::InvalidSecurityTokenKeyfilePath::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InvalidSecurityTokenKeyfilePath@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2InvalidSecurityTokenKeyfilePath@CipherShed@@8
rdata$r	SEGMENT
??_R2InvalidSecurityTokenKeyfilePath@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@InvalidSecurityTokenKeyfilePath@CipherShed@@8 ; CipherShed::InvalidSecurityTokenKeyfilePath::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3InvalidSecurityTokenKeyfilePath@CipherShed@@8
rdata$r	SEGMENT
??_R3InvalidSecurityTokenKeyfilePath@CipherShed@@8 DD 00H ; CipherShed::InvalidSecurityTokenKeyfilePath::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2InvalidSecurityTokenKeyfilePath@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUInvalidSecurityTokenKeyfilePath@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUInvalidSecurityTokenKeyfilePath@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::InvalidSecurityTokenKeyfilePath `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUInvalidSecurityTokenKeyfilePath@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4InvalidSecurityTokenKeyfilePath@CipherShed@@6B@
rdata$r	SEGMENT
??_R4InvalidSecurityTokenKeyfilePath@CipherShed@@6B@ DD 00H ; CipherShed::InvalidSecurityTokenKeyfilePath::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUInvalidSecurityTokenKeyfilePath@CipherShed@@@8
	DD	FLAT:??_R3InvalidSecurityTokenKeyfilePath@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7InvalidSecurityTokenKeyfilePath@CipherShed@@6B@
CONST	SEGMENT
??_7InvalidSecurityTokenKeyfilePath@CipherShed@@6B@ DD FLAT:??_R4InvalidSecurityTokenKeyfilePath@CipherShed@@6B@ ; CipherShed::InvalidSecurityTokenKeyfilePath::`vftable'
	DD	FLAT:?Show@InvalidSecurityTokenKeyfilePath@CipherShed@@UBEXPAUHWND__@@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0InvalidSecurityTokenKeyfilePath@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0InvalidSecurityTokenKeyfilePath@CipherShed@@QAE@XZ PROC ; CipherShed::InvalidSecurityTokenKeyfilePath::InvalidSecurityTokenKeyfilePath, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InvalidSecurityTokenKeyfilePath@CipherShed@@6B@
  00008	c3		 ret	 0
??0InvalidSecurityTokenKeyfilePath@CipherShed@@QAE@XZ ENDP ; CipherShed::InvalidSecurityTokenKeyfilePath::InvalidSecurityTokenKeyfilePath
_TEXT	ENDS
PUBLIC	??_C@_0BL@JIBHLIDC@INVALID_TOKEN_KEYFILE_PATH?$AA@ ; `string'
EXTRN	_Error:PROC
;	COMDAT ??_C@_0BL@JIBHLIDC@INVALID_TOKEN_KEYFILE_PATH?$AA@
CONST	SEGMENT
??_C@_0BL@JIBHLIDC@INVALID_TOKEN_KEYFILE_PATH?$AA@ DB 'INVALID_TOKEN_KEYF'
	DB	'ILE_PATH', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Show@InvalidSecurityTokenKeyfilePath@CipherShed@@UBEXPAUHWND__@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
?Show@InvalidSecurityTokenKeyfilePath@CipherShed@@UBEXPAUHWND__@@@Z PROC ; CipherShed::InvalidSecurityTokenKeyfilePath::Show, COMDAT
; _this$ = ecx

; 140  : 		void Show (HWND parent) const { Error ("INVALID_TOKEN_KEYFILE_PATH"); }

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JIBHLIDC@INVALID_TOKEN_KEYFILE_PATH?$AA@
  00005	e8 00 00 00 00	 call	 _Error
  0000a	59		 pop	 ecx
  0000b	c2 04 00	 ret	 4
?Show@InvalidSecurityTokenKeyfilePath@CipherShed@@UBEXPAUHWND__@@@Z ENDP ; CipherShed::InvalidSecurityTokenKeyfilePath::Show
_TEXT	ENDS
PUBLIC	??_7SecurityTokenKeyfileNotFound@CipherShed@@6B@ ; CipherShed::SecurityTokenKeyfileNotFound::`vftable'
PUBLIC	??0SecurityTokenKeyfileNotFound@CipherShed@@QAE@XZ ; CipherShed::SecurityTokenKeyfileNotFound::SecurityTokenKeyfileNotFound
PUBLIC	??_R4SecurityTokenKeyfileNotFound@CipherShed@@6B@ ; CipherShed::SecurityTokenKeyfileNotFound::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSecurityTokenKeyfileNotFound@CipherShed@@@8 ; CipherShed::SecurityTokenKeyfileNotFound `RTTI Type Descriptor'
PUBLIC	??_R3SecurityTokenKeyfileNotFound@CipherShed@@8	; CipherShed::SecurityTokenKeyfileNotFound::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SecurityTokenKeyfileNotFound@CipherShed@@8	; CipherShed::SecurityTokenKeyfileNotFound::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SecurityTokenKeyfileNotFound@CipherShed@@8 ; CipherShed::SecurityTokenKeyfileNotFound::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Show@SecurityTokenKeyfileNotFound@CipherShed@@UBEXPAUHWND__@@@Z ; CipherShed::SecurityTokenKeyfileNotFound::Show
;	COMDAT ??_R1A@?0A@EA@SecurityTokenKeyfileNotFound@CipherShed@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SecurityTokenKeyfileNotFound@CipherShed@@8 DD FLAT:??_R0?AUSecurityTokenKeyfileNotFound@CipherShed@@@8 ; CipherShed::SecurityTokenKeyfileNotFound::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SecurityTokenKeyfileNotFound@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2SecurityTokenKeyfileNotFound@CipherShed@@8
rdata$r	SEGMENT
??_R2SecurityTokenKeyfileNotFound@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@SecurityTokenKeyfileNotFound@CipherShed@@8 ; CipherShed::SecurityTokenKeyfileNotFound::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3SecurityTokenKeyfileNotFound@CipherShed@@8
rdata$r	SEGMENT
??_R3SecurityTokenKeyfileNotFound@CipherShed@@8 DD 00H	; CipherShed::SecurityTokenKeyfileNotFound::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SecurityTokenKeyfileNotFound@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSecurityTokenKeyfileNotFound@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUSecurityTokenKeyfileNotFound@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::SecurityTokenKeyfileNotFound `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSecurityTokenKeyfileNotFound@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4SecurityTokenKeyfileNotFound@CipherShed@@6B@
rdata$r	SEGMENT
??_R4SecurityTokenKeyfileNotFound@CipherShed@@6B@ DD 00H ; CipherShed::SecurityTokenKeyfileNotFound::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSecurityTokenKeyfileNotFound@CipherShed@@@8
	DD	FLAT:??_R3SecurityTokenKeyfileNotFound@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7SecurityTokenKeyfileNotFound@CipherShed@@6B@
CONST	SEGMENT
??_7SecurityTokenKeyfileNotFound@CipherShed@@6B@ DD FLAT:??_R4SecurityTokenKeyfileNotFound@CipherShed@@6B@ ; CipherShed::SecurityTokenKeyfileNotFound::`vftable'
	DD	FLAT:?Show@SecurityTokenKeyfileNotFound@CipherShed@@UBEXPAUHWND__@@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0SecurityTokenKeyfileNotFound@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0SecurityTokenKeyfileNotFound@CipherShed@@QAE@XZ PROC	; CipherShed::SecurityTokenKeyfileNotFound::SecurityTokenKeyfileNotFound, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7SecurityTokenKeyfileNotFound@CipherShed@@6B@
  00008	c3		 ret	 0
??0SecurityTokenKeyfileNotFound@CipherShed@@QAE@XZ ENDP	; CipherShed::SecurityTokenKeyfileNotFound::SecurityTokenKeyfileNotFound
_TEXT	ENDS
PUBLIC	??_C@_0BI@BBCBGCML@TOKEN_KEYFILE_NOT_FOUND?$AA@	; `string'
;	COMDAT ??_C@_0BI@BBCBGCML@TOKEN_KEYFILE_NOT_FOUND?$AA@
CONST	SEGMENT
??_C@_0BI@BBCBGCML@TOKEN_KEYFILE_NOT_FOUND?$AA@ DB 'TOKEN_KEYFILE_NOT_FOU'
	DB	'ND', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Show@SecurityTokenKeyfileNotFound@CipherShed@@UBEXPAUHWND__@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
?Show@SecurityTokenKeyfileNotFound@CipherShed@@UBEXPAUHWND__@@@Z PROC ; CipherShed::SecurityTokenKeyfileNotFound::Show, COMDAT
; _this$ = ecx

; 150  : 		void Show (HWND parent) const { Error ("TOKEN_KEYFILE_NOT_FOUND"); }

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BBCBGCML@TOKEN_KEYFILE_NOT_FOUND?$AA@
  00005	e8 00 00 00 00	 call	 _Error
  0000a	59		 pop	 ecx
  0000b	c2 04 00	 ret	 4
?Show@SecurityTokenKeyfileNotFound@CipherShed@@UBEXPAUHWND__@@@Z ENDP ; CipherShed::SecurityTokenKeyfileNotFound::Show
_TEXT	ENDS
PUBLIC	??_7SecurityTokenLibraryNotInitialized@CipherShed@@6B@ ; CipherShed::SecurityTokenLibraryNotInitialized::`vftable'
PUBLIC	??0SecurityTokenLibraryNotInitialized@CipherShed@@QAE@XZ ; CipherShed::SecurityTokenLibraryNotInitialized::SecurityTokenLibraryNotInitialized
PUBLIC	??_R4SecurityTokenLibraryNotInitialized@CipherShed@@6B@ ; CipherShed::SecurityTokenLibraryNotInitialized::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSecurityTokenLibraryNotInitialized@CipherShed@@@8 ; CipherShed::SecurityTokenLibraryNotInitialized `RTTI Type Descriptor'
PUBLIC	??_R3SecurityTokenLibraryNotInitialized@CipherShed@@8 ; CipherShed::SecurityTokenLibraryNotInitialized::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SecurityTokenLibraryNotInitialized@CipherShed@@8 ; CipherShed::SecurityTokenLibraryNotInitialized::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SecurityTokenLibraryNotInitialized@CipherShed@@8 ; CipherShed::SecurityTokenLibraryNotInitialized::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Show@SecurityTokenLibraryNotInitialized@CipherShed@@UBEXPAUHWND__@@@Z ; CipherShed::SecurityTokenLibraryNotInitialized::Show
;	COMDAT ??_R1A@?0A@EA@SecurityTokenLibraryNotInitialized@CipherShed@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SecurityTokenLibraryNotInitialized@CipherShed@@8 DD FLAT:??_R0?AUSecurityTokenLibraryNotInitialized@CipherShed@@@8 ; CipherShed::SecurityTokenLibraryNotInitialized::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SecurityTokenLibraryNotInitialized@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2SecurityTokenLibraryNotInitialized@CipherShed@@8
rdata$r	SEGMENT
??_R2SecurityTokenLibraryNotInitialized@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@SecurityTokenLibraryNotInitialized@CipherShed@@8 ; CipherShed::SecurityTokenLibraryNotInitialized::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3SecurityTokenLibraryNotInitialized@CipherShed@@8
rdata$r	SEGMENT
??_R3SecurityTokenLibraryNotInitialized@CipherShed@@8 DD 00H ; CipherShed::SecurityTokenLibraryNotInitialized::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SecurityTokenLibraryNotInitialized@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSecurityTokenLibraryNotInitialized@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUSecurityTokenLibraryNotInitialized@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::SecurityTokenLibraryNotInitialized `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSecurityTokenLibraryNotInitialized@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4SecurityTokenLibraryNotInitialized@CipherShed@@6B@
rdata$r	SEGMENT
??_R4SecurityTokenLibraryNotInitialized@CipherShed@@6B@ DD 00H ; CipherShed::SecurityTokenLibraryNotInitialized::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSecurityTokenLibraryNotInitialized@CipherShed@@@8
	DD	FLAT:??_R3SecurityTokenLibraryNotInitialized@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7SecurityTokenLibraryNotInitialized@CipherShed@@6B@
CONST	SEGMENT
??_7SecurityTokenLibraryNotInitialized@CipherShed@@6B@ DD FLAT:??_R4SecurityTokenLibraryNotInitialized@CipherShed@@6B@ ; CipherShed::SecurityTokenLibraryNotInitialized::`vftable'
	DD	FLAT:?Show@SecurityTokenLibraryNotInitialized@CipherShed@@UBEXPAUHWND__@@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0SecurityTokenLibraryNotInitialized@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0SecurityTokenLibraryNotInitialized@CipherShed@@QAE@XZ PROC ; CipherShed::SecurityTokenLibraryNotInitialized::SecurityTokenLibraryNotInitialized, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7SecurityTokenLibraryNotInitialized@CipherShed@@6B@
  00008	c3		 ret	 0
??0SecurityTokenLibraryNotInitialized@CipherShed@@QAE@XZ ENDP ; CipherShed::SecurityTokenLibraryNotInitialized::SecurityTokenLibraryNotInitialized
_TEXT	ENDS
PUBLIC	??_C@_0BK@OPPAPAFF@PKCS11_MODULE_INIT_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0BL@NECJIJNL@NO_PKCS11_MODULE_SPECIFIED?$AA@ ; `string'
EXTRN	_SecurityTokenLibraryPath:BYTE
;	COMDAT ??_C@_0BK@OPPAPAFF@PKCS11_MODULE_INIT_FAILED?$AA@
CONST	SEGMENT
??_C@_0BK@OPPAPAFF@PKCS11_MODULE_INIT_FAILED?$AA@ DB 'PKCS11_MODULE_INIT_'
	DB	'FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NECJIJNL@NO_PKCS11_MODULE_SPECIFIED?$AA@
CONST	SEGMENT
??_C@_0BL@NECJIJNL@NO_PKCS11_MODULE_SPECIFIED?$AA@ DB 'NO_PKCS11_MODULE_S'
	DB	'PECIFIED', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Show@SecurityTokenLibraryNotInitialized@CipherShed@@UBEXPAUHWND__@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
?Show@SecurityTokenLibraryNotInitialized@CipherShed@@UBEXPAUHWND__@@@Z PROC ; CipherShed::SecurityTokenLibraryNotInitialized::Show, COMDAT
; _this$ = ecx

; 135  : 		void Show (HWND parent) const { Error (SecurityTokenLibraryPath[0] == 0 ? "NO_PKCS11_MODULE_SPECIFIED" : "PKCS11_MODULE_INIT_FAILED"); }

  00000	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR _SecurityTokenLibraryPath, 0
  00007	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BL@NECJIJNL@NO_PKCS11_MODULE_SPECIFIED?$AA@
  0000c	74 05		 je	 SHORT $LN4@Show
  0000e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BK@OPPAPAFF@PKCS11_MODULE_INIT_FAILED?$AA@
$LN4@Show:
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _Error
  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?Show@SecurityTokenLibraryNotInitialized@CipherShed@@UBEXPAUHWND__@@@Z ENDP ; CipherShed::SecurityTokenLibraryNotInitialized::Show
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
_TEXT	ENDS
;	COMDAT ??0Finally161@?N@??CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z@QAE@PAV45@@Z
_TEXT	SEGMENT
??0Finally161@?N@??CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z@QAE@PAV45@@Z PROC ; `CipherShed::SecurityToken::CreateKeyfile'::`13'::Finally161::Finally161, COMDAT
; _this$ = eax
; _a$ = ecx

; 161  : 		finally_do_arg (vector <byte> *, &objectData, { if (!finally_arg->empty()) burn (&finally_arg->front(), finally_arg->size()); });

  00000	89 08		 mov	 DWORD PTR [eax], ecx
  00002	c3		 ret	 0
??0Finally161@?N@??CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z@QAE@PAV45@@Z ENDP ; `CipherShed::SecurityToken::CreateKeyfile'::`13'::Finally161::Finally161
_TEXT	ENDS
PUBLIC	??_7SecurityTokenKeyfileAlreadyExists@CipherShed@@6B@ ; CipherShed::SecurityTokenKeyfileAlreadyExists::`vftable'
PUBLIC	??0SecurityTokenKeyfileAlreadyExists@CipherShed@@QAE@XZ ; CipherShed::SecurityTokenKeyfileAlreadyExists::SecurityTokenKeyfileAlreadyExists
PUBLIC	??_R4SecurityTokenKeyfileAlreadyExists@CipherShed@@6B@ ; CipherShed::SecurityTokenKeyfileAlreadyExists::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@@8 ; CipherShed::SecurityTokenKeyfileAlreadyExists `RTTI Type Descriptor'
PUBLIC	??_R3SecurityTokenKeyfileAlreadyExists@CipherShed@@8 ; CipherShed::SecurityTokenKeyfileAlreadyExists::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SecurityTokenKeyfileAlreadyExists@CipherShed@@8 ; CipherShed::SecurityTokenKeyfileAlreadyExists::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SecurityTokenKeyfileAlreadyExists@CipherShed@@8 ; CipherShed::SecurityTokenKeyfileAlreadyExists::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Show@SecurityTokenKeyfileAlreadyExists@CipherShed@@UBEXPAUHWND__@@@Z ; CipherShed::SecurityTokenKeyfileAlreadyExists::Show
;	COMDAT ??_R1A@?0A@EA@SecurityTokenKeyfileAlreadyExists@CipherShed@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SecurityTokenKeyfileAlreadyExists@CipherShed@@8 DD FLAT:??_R0?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@@8 ; CipherShed::SecurityTokenKeyfileAlreadyExists::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SecurityTokenKeyfileAlreadyExists@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2SecurityTokenKeyfileAlreadyExists@CipherShed@@8
rdata$r	SEGMENT
??_R2SecurityTokenKeyfileAlreadyExists@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@SecurityTokenKeyfileAlreadyExists@CipherShed@@8 ; CipherShed::SecurityTokenKeyfileAlreadyExists::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3SecurityTokenKeyfileAlreadyExists@CipherShed@@8
rdata$r	SEGMENT
??_R3SecurityTokenKeyfileAlreadyExists@CipherShed@@8 DD 00H ; CipherShed::SecurityTokenKeyfileAlreadyExists::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SecurityTokenKeyfileAlreadyExists@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::SecurityTokenKeyfileAlreadyExists `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4SecurityTokenKeyfileAlreadyExists@CipherShed@@6B@
rdata$r	SEGMENT
??_R4SecurityTokenKeyfileAlreadyExists@CipherShed@@6B@ DD 00H ; CipherShed::SecurityTokenKeyfileAlreadyExists::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@@8
	DD	FLAT:??_R3SecurityTokenKeyfileAlreadyExists@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7SecurityTokenKeyfileAlreadyExists@CipherShed@@6B@
CONST	SEGMENT
??_7SecurityTokenKeyfileAlreadyExists@CipherShed@@6B@ DD FLAT:??_R4SecurityTokenKeyfileAlreadyExists@CipherShed@@6B@ ; CipherShed::SecurityTokenKeyfileAlreadyExists::`vftable'
	DD	FLAT:?Show@SecurityTokenKeyfileAlreadyExists@CipherShed@@UBEXPAUHWND__@@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0SecurityTokenKeyfileAlreadyExists@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0SecurityTokenKeyfileAlreadyExists@CipherShed@@QAE@XZ PROC ; CipherShed::SecurityTokenKeyfileAlreadyExists::SecurityTokenKeyfileAlreadyExists, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7SecurityTokenKeyfileAlreadyExists@CipherShed@@6B@
  00008	c3		 ret	 0
??0SecurityTokenKeyfileAlreadyExists@CipherShed@@QAE@XZ ENDP ; CipherShed::SecurityTokenKeyfileAlreadyExists::SecurityTokenKeyfileAlreadyExists
_TEXT	ENDS
PUBLIC	??_C@_0BN@LMLDGKPH@TOKEN_KEYFILE_ALREADY_EXISTS?$AA@ ; `string'
;	COMDAT ??_C@_0BN@LMLDGKPH@TOKEN_KEYFILE_ALREADY_EXISTS?$AA@
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.h
CONST	SEGMENT
??_C@_0BN@LMLDGKPH@TOKEN_KEYFILE_ALREADY_EXISTS?$AA@ DB 'TOKEN_KEYFILE_AL'
	DB	'READY_EXISTS', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Show@SecurityTokenKeyfileAlreadyExists@CipherShed@@UBEXPAUHWND__@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
?Show@SecurityTokenKeyfileAlreadyExists@CipherShed@@UBEXPAUHWND__@@@Z PROC ; CipherShed::SecurityTokenKeyfileAlreadyExists::Show, COMDAT
; _this$ = ecx

; 145  : 		void Show (HWND parent) const { Error ("TOKEN_KEYFILE_ALREADY_EXISTS"); }

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@LMLDGKPH@TOKEN_KEYFILE_ALREADY_EXISTS?$AA@
  00005	e8 00 00 00 00	 call	 _Error
  0000a	59		 pop	 ecx
  0000b	c2 04 00	 ret	 4
?Show@SecurityTokenKeyfileAlreadyExists@CipherShed@@UBEXPAUHWND__@@@Z ENDP ; CipherShed::SecurityTokenKeyfileAlreadyExists::Show
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
_TEXT	ENDS
;	COMDAT ??0Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@K@Z
_TEXT	SEGMENT
??0Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@K@Z PROC ; `CipherShed::SecurityToken::GetObjects'::`6'::Finally331::Finally331, COMDAT
; _this$ = eax
; _a$ = ecx

; 331  : 		finally_do_arg (CK_SLOT_ID, slotId, { Pkcs11Functions->C_FindObjectsFinal (Sessions[finally_arg].Handle); });

  00000	89 08		 mov	 DWORD PTR [eax], ecx
  00002	c3		 ret	 0
??0Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@K@Z ENDP ; `CipherShed::SecurityToken::GetObjects'::`6'::Finally331::Finally331
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0Finally482@?BL@??LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
??0Finally482@?BL@??LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; `CipherShed::SecurityToken::LoginUserIfRequired'::`27'::Finally482::Finally482, COMDAT
; _this$ = eax
; _a$ = ecx

; 482  : 					finally_do_arg (string*, &pin, { burn ((void *) finally_arg->c_str(), finally_arg->size()); });

  00000	89 08		 mov	 DWORD PTR [eax], ecx
  00002	c3		 ret	 0
??0Finally482@?BL@??LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; `CipherShed::SecurityToken::LoginUserIfRequired'::`27'::Finally482::Finally482
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 1705 : 		return (_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  00005	0f 94 c0	 sete	 al

; 1706 : 		}

  00008	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
PUBLIC	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
_TEXT	ENDS
PUBLIC	?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty, COMDAT
; _this$ = ecx

; 1705 : 		return (_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  00005	0f 94 c0	 sete	 al

; 1706 : 		}

  00008	c3		 ret	 0
?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty
_TEXT	ENDS
PUBLIC	??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R13A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,0,4,64)'
EXTRN	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R13A@3EA@?$_Iosb@H@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
rdata$r	SEGMENT
??_R13A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,0,4,64)'
	DD	00H
	DD	04H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 63   : 		{	// destroy the object

  00000	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@

; 64   : 		}

  0000e	c3		 ret	 0
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
; Function compile flags: /Ogtpy
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z
_TEXT	SEGMENT
__Pfn$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 184  : 		{	// call ios_base manipulator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 185  : 		_DEBUG_POINTER(_Pfn);
; 186  : 		(*_Pfn)(*(ios_base *)this);

  00003	85 f6		 test	 esi, esi
  00005	75 10		 jne	 SHORT $LN3@operator@2
  00007	33 c0		 xor	 eax, eax
  00009	50		 push	 eax
  0000a	ff 54 24 0c	 call	 DWORD PTR __Pfn$[esp+4]
  0000e	83 c4 04	 add	 esp, 4

; 187  : 		return (*this);

  00011	8b c6		 mov	 eax, esi
  00013	5e		 pop	 esi

; 188  : 		}

  00014	c2 04 00	 ret	 4
$LN3@operator@2:

; 185  : 		_DEBUG_POINTER(_Pfn);
; 186  : 		(*_Pfn)(*(ios_base *)this);

  00017	8b 06		 mov	 eax, DWORD PTR [esi]
  00019	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001c	03 c6		 add	 eax, esi
  0001e	50		 push	 eax
  0001f	ff 54 24 0c	 call	 DWORD PTR __Pfn$[esp+4]
  00023	83 c4 04	 add	 esp, 4

; 187  : 		return (*this);

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi

; 188  : 		}

  00029	c2 04 00	 ret	 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
_TEXT	ENDS
PUBLIC	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 39   : 		}

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
; Function compile flags: /Ogtpy
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::rdbuf, COMDAT
; _this$ = ecx

; 85   : 		return (_Mystrbuf);

  00000	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]

; 86   : 		}

  00003	c3		 ret	 0
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::rdbuf
_TEXT	ENDS
PUBLIC	??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::~basic_ostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::~basic_ostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 63   : 		{	// destroy the object

  00000	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@

; 64   : 		}

  0000e	c3		 ret	 0
??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::~basic_ostream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 39   : 		}

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::rdbuf
; Function compile flags: /Ogtpy
;	COMDAT ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
_TEXT	SEGMENT
?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::rdbuf, COMDAT
; _this$ = ecx

; 85   : 		return (_Mystrbuf);

  00000	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]

; 86   : 		}

  00003	c3		 ret	 0
?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::rdbuf
_TEXT	ENDS
PUBLIC	??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
PUBLIC	??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a f8 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-8], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@

; 43   : 		}

  0000e	c3		 ret	 0
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a f8 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-8], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@

; 43   : 		}

  0000e	c3		 ret	 0
??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??0?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAE@PAUGetPinFunctor@CipherShed@@@Z ; std::auto_ptr<CipherShed::GetPinFunctor>::auto_ptr<CipherShed::GetPinFunctor>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??0?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAE@PAUGetPinFunctor@CipherShed@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAE@PAUGetPinFunctor@CipherShed@@@Z PROC ; std::auto_ptr<CipherShed::GetPinFunctor>::auto_ptr<CipherShed::GetPinFunctor>, COMDAT
; _this$ = ecx

; 661  : 		{	// construct from object pointer

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 662  : 		}

  00008	c2 04 00	 ret	 4
??0?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAE@PAUGetPinFunctor@CipherShed@@@Z ENDP ; std::auto_ptr<CipherShed::GetPinFunctor>::auto_ptr<CipherShed::GetPinFunctor>
_TEXT	ENDS
PUBLIC	??1?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAE@XZ ; std::auto_ptr<CipherShed::GetPinFunctor>::~auto_ptr<CipherShed::GetPinFunctor>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAE@XZ PROC ; std::auto_ptr<CipherShed::GetPinFunctor>::~auto_ptr<CipherShed::GetPinFunctor>, COMDAT
; _this$ = ecx

; 721  : 		delete _Myptr;

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 08		 je	 SHORT $LN3@auto_ptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	8b 10		 mov	 edx, DWORD PTR [eax]
  0000a	6a 01		 push	 1
  0000c	ff d2		 call	 edx
$LN3@auto_ptr:

; 722  : 		}

  0000e	c3		 ret	 0
??1?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAE@XZ ENDP ; std::auto_ptr<CipherShed::GetPinFunctor>::~auto_ptr<CipherShed::GetPinFunctor>
_TEXT	ENDS
PUBLIC	??0?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAE@PAUSendExceptionFunctor@CipherShed@@@Z ; std::auto_ptr<CipherShed::SendExceptionFunctor>::auto_ptr<CipherShed::SendExceptionFunctor>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAE@PAUSendExceptionFunctor@CipherShed@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAE@PAUSendExceptionFunctor@CipherShed@@@Z PROC ; std::auto_ptr<CipherShed::SendExceptionFunctor>::auto_ptr<CipherShed::SendExceptionFunctor>, COMDAT
; _this$ = ecx

; 661  : 		{	// construct from object pointer

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 662  : 		}

  00008	c2 04 00	 ret	 4
??0?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAE@PAUSendExceptionFunctor@CipherShed@@@Z ENDP ; std::auto_ptr<CipherShed::SendExceptionFunctor>::auto_ptr<CipherShed::SendExceptionFunctor>
_TEXT	ENDS
PUBLIC	??1?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAE@XZ ; std::auto_ptr<CipherShed::SendExceptionFunctor>::~auto_ptr<CipherShed::SendExceptionFunctor>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAE@XZ PROC ; std::auto_ptr<CipherShed::SendExceptionFunctor>::~auto_ptr<CipherShed::SendExceptionFunctor>, COMDAT
; _this$ = ecx

; 721  : 		delete _Myptr;

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 08		 je	 SHORT $LN3@auto_ptr@2
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	8b 10		 mov	 edx, DWORD PTR [eax]
  0000a	6a 01		 push	 1
  0000c	ff d2		 call	 edx
$LN3@auto_ptr@2:

; 722  : 		}

  0000e	c3		 ret	 0
??1?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAE@XZ ENDP ; std::auto_ptr<CipherShed::SendExceptionFunctor>::~auto_ptr<CipherShed::SendExceptionFunctor>
_TEXT	ENDS
PUBLIC	??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
EXTRN	??_E?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	03H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	09H
	DD	FLAT:??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 918  : 		{	// destroy the object

  00000	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a f4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@

; 919  : 		}

  0000e	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	c7 44 0a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  0001c	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  0001f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00022	c7 44 0a f4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0002a	c3		 ret	 0
??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??8const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator==
EXTRN	__invalid_parameter_noinfo:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 299  : 			{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 300  : 
; 301  :  #if _HAS_ITERATOR_DEBUGGING
; 302  : 			if (this->_Mycont == 0 || this->_Mycont != _Right._Mycont)
; 303  : 				{
; 304  : 				_DEBUG_ERROR("map/set iterators incompatible");
; 305  : 				_SCL_SECURE_INVALID_ARGUMENT;
; 306  : 				}
; 307  :  #else
; 308  : 			_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN1@operator@3
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN2@operator@3
$LN1@operator@3:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN2@operator@3:

; 309  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 310  : 
; 311  : 			return (_Ptr == _Right._Ptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 312  : 			}

  00026	c2 04 00	 ret	 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	??9const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator!=
; Function compile flags: /Ogtpy
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 315  : 			{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 316  : 			return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN3@operator@4
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN4@operator@4
$LN3@operator@4:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN4@operator@4:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 317  : 			}

  00026	c2 04 00	 ret	 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEABUSecurityTokenKeyfile@CipherShed@@XZ ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEABUSecurityTokenKeyfile@CipherShed@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEABUSecurityTokenKeyfile@CipherShed@@XZ PROC ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator*, COMDAT
; _this$ = ecx

; 91   : 		{	// return designated object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 99   : 			_SCL_SECURE_OUT_OF_RANGE;
; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN13@operator@5
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN9@operator@5
$LN13@operator@5:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN10@operator@5
$LN9@operator@5:
  00018	33 c0		 xor	 eax, eax
$LN10@operator@5:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 0a		 jb	 SHORT $LN14@operator@5
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	5e		 pop	 esi

; 107  : 		}

  0002b	c3		 ret	 0
$LN14@operator@5:

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  0002c	8b c1		 mov	 eax, ecx
  0002e	5e		 pop	 esi

; 107  : 		}

  0002f	c3		 ret	 0
??D?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEABUSecurityTokenKeyfile@CipherShed@@XZ ENDP ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator*
_TEXT	ENDS
PUBLIC	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::size, COMDAT
; _this$ = ecx

; 726  : 		return (_Mylast - _Myfirst);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	2b 41 0c	 sub	 eax, DWORD PTR [ecx+12]

; 727  : 		}

  00006	c3		 ret	 0
?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@EV?$allocator@E@std@@@std@@QBE_NXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::empty
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$vector@EV?$allocator@E@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@EV?$allocator@E@std@@@std@@QBE_NXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::empty, COMDAT
; _this$ = ecx

; 736  : 		return (size() == 0);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	2b 41 0c	 sub	 eax, DWORD PTR [ecx+12]
  00006	f7 d8		 neg	 eax
  00008	1b c0		 sbb	 eax, eax
  0000a	40		 inc	 eax

; 737  : 		}

  0000b	c3		 ret	 0
?empty@?$vector@EV?$allocator@E@std@@@std@@QBE_NXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::empty
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBEABKXZ ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::operator*
; Function compile flags: /Ogtpy
;	COMDAT ??D?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBEABKXZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBEABKXZ PROC ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::operator*, COMDAT
; _this$ = ecx

; 91   : 		{	// return designated object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 99   : 			_SCL_SECURE_OUT_OF_RANGE;
; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN13@operator@6
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN9@operator@6
$LN13@operator@6:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN10@operator@6
$LN9@operator@6:
  00018	33 c0		 xor	 eax, eax
$LN10@operator@6:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 0a		 jb	 SHORT $LN14@operator@6
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	5e		 pop	 esi

; 107  : 		}

  0002b	c3		 ret	 0
$LN14@operator@6:

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  0002c	8b c1		 mov	 eax, ecx
  0002e	5e		 pop	 esi

; 107  : 		}

  0002f	c3		 ret	 0
??D?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBEABKXZ ENDP ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::operator*
_TEXT	ENDS
PUBLIC	?empty@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE_NXZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::empty
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?empty@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE_NXZ PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::empty, COMDAT
; _this$ = ecx

; 630  : 		return (_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00005	0f 94 c0	 sete	 al

; 631  : 		}

  00008	c3		 ret	 0
?empty@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE_NXZ ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::empty
_TEXT	ENDS
PUBLIC	??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
EXTRN	??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_iostream<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	03H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	09H
	DD	FLAT:??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 918  : 		{	// destroy the object

  00000	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a f4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@

; 919  : 		}

  0000e	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	c7 44 0a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0001c	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  0001f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00022	c7 44 0a f4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0002a	c3		 ret	 0
??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??_Glocale@std@@QAEPAXI@Z			; std::locale::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_Glocale@std@@QAEPAXI@Z
_TEXT	SEGMENT
__Lock$137555 = -4					; size = 4
___flags$ = 8						; size = 4
??_Glocale@std@@QAEPAXI@Z PROC				; std::locale::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	8b d9		 mov	 ebx, ecx
  00004	57		 push	 edi
  00005	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00007	85 ff		 test	 edi, edi
  00009	74 3f		 je	 SHORT $LN7@scalar@6
  0000b	6a 00		 push	 0
  0000d	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$137555[esp+16]
  00011	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00016	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00019	85 c0		 test	 eax, eax
  0001b	76 09		 jbe	 SHORT $LN9@scalar@6
  0001d	83 f8 ff	 cmp	 eax, -1
  00020	73 04		 jae	 SHORT $LN9@scalar@6
  00022	48		 dec	 eax
  00023	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN9@scalar@6:
  00026	56		 push	 esi
  00027	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0002a	f7 de		 neg	 esi
  0002c	1b f6		 sbb	 esi, esi
  0002e	f7 d6		 not	 esi
  00030	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$137555[esp+16]
  00034	23 f7		 and	 esi, edi
  00036	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0003b	85 f6		 test	 esi, esi
  0003d	74 0a		 je	 SHORT $LN13@scalar@6
  0003f	8b 06		 mov	 eax, DWORD PTR [esi]
  00041	8b 10		 mov	 edx, DWORD PTR [eax]
  00043	6a 01		 push	 1
  00045	8b ce		 mov	 ecx, esi
  00047	ff d2		 call	 edx
$LN13@scalar@6:
  00049	5e		 pop	 esi
$LN7@scalar@6:
  0004a	f6 44 24 10 01	 test	 BYTE PTR ___flags$[esp+8], 1
  0004f	74 09		 je	 SHORT $LN12@scalar@6
  00051	53		 push	 ebx
  00052	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00057	83 c4 04	 add	 esp, 4
$LN12@scalar@6:
  0005a	5f		 pop	 edi
  0005b	8b c3		 mov	 eax, ebx
  0005d	5b		 pop	 ebx
  0005e	59		 pop	 ecx
  0005f	c2 04 00	 ret	 4
??_Glocale@std@@QAEPAXI@Z ENDP				; std::locale::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00003	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 f8 00
	00 00 00	 mov	 DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00003	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 f8 00
	00 00 00	 mov	 DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00003	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  00011	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  0001f	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00022	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00025	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0002d	50		 push	 eax
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00034	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00039	59		 pop	 ecx
  0003a	c3		 ret	 0
??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00003	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  00011	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0001f	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00022	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00025	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0002d	50		 push	 eax
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00034	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00039	59		 pop	 ecx
  0003a	c3		 ret	 0
??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@2:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@3
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@3:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z	; std::allocator<wchar_t>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
PUBLIC	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
_TEXT	SEGMENT
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ PROC ; std::basic_ios<char,std::char_traits<char> >::fill, COMDAT
; _this$ = ecx

; 106  : 		return (_Fillch);

  00000	8a 41 30	 mov	 al, BYTE PTR [ecx+48]

; 107  : 		}

  00003	c3		 ret	 0
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::fill
_TEXT	ENDS
PUBLIC	??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
PUBLIC	??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
EXTRN	??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
CONST	ENDS
;	COMDAT ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 146  : 	__CLR_OR_THIS_CALL basic_ios()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 147  : 		{	// default constructor, do nothing
; 148  : 		}

  00008	c3		 ret	 0
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	56		 push	 esi
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000f	83 c4 04	 add	 esp, 4
  00012	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00017	74 09		 je	 SHORT $LN9@scalar@7
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	83 c4 04	 add	 esp, 4
$LN9@scalar@7:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c2 04 00	 ret	 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::fill
; Function compile flags: /Ogtpy
;	COMDAT ?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ
_TEXT	SEGMENT
?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::fill, COMDAT
; _this$ = ecx

; 106  : 		return (_Fillch);

  00000	66 8b 41 30	 mov	 ax, WORD PTR [ecx+48]

; 107  : 		}

  00004	c3		 ret	 0
?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::fill
_TEXT	ENDS
PUBLIC	??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::basic_ios<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
EXTRN	??_E?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
CONST	ENDS
;	COMDAT ??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::basic_ios<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 146  : 	__CLR_OR_THIS_CALL basic_ios()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@

; 147  : 		{	// default constructor, do nothing
; 148  : 		}

  00008	c3		 ret	 0
??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::basic_ios<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	56		 push	 esi
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000f	83 c4 04	 add	 esp, 4
  00012	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00017	74 09		 je	 SHORT $LN9@scalar@8
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	83 c4 04	 add	 esp, 4
$LN9@scalar@8:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c2 04 00	 ret	 4
??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubsync, COMDAT
; _this$ = ecx

; 100  : 		return (sync());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00005	ff e2		 jmp	 edx
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
_TEXT	ENDS
PUBLIC	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
EXTRN	?_Unlock@_Mutex@std@@QAEXXZ:PROC		; std::_Mutex::_Unlock
; Function compile flags: /Ogtpy
;	COMDAT ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 178  : 		_Mylock._Unlock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
PUBLIC	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
; Function compile flags: /Ogtpy
;	COMDAT ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::eback, COMDAT
; _this$ = ecx

; 185  : 		return (*_IGfirst);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 186  : 		}

  00005	c3		 ret	 0
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::eback
_TEXT	ENDS
PUBLIC	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
; Function compile flags: /Ogtpy
;	COMDAT ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::gptr, COMDAT
; _this$ = ecx

; 190  : 		return (*_IGnext);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 191  : 		}

  00005	c3		 ret	 0
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gptr
_TEXT	ENDS
PUBLIC	?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
; Function compile flags: /Ogtpy
;	COMDAT ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbase, COMDAT
; _this$ = ecx

; 195  : 		return (*_IPfirst);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 196  : 		}

  00005	c3		 ret	 0
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbase
_TEXT	ENDS
PUBLIC	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
; Function compile flags: /Ogtpy
;	COMDAT ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pptr, COMDAT
; _this$ = ecx

; 200  : 		return (*_IPnext);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 201  : 		}

  00005	c3		 ret	 0
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pptr
_TEXT	ENDS
PUBLIC	?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
; Function compile flags: /Ogtpy
;	COMDAT ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::egptr, COMDAT
; _this$ = ecx

; 205  : 		return (*_IGnext + *_IGcount);

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	03 01		 add	 eax, DWORD PTR [ecx]

; 206  : 		}

  0000a	c3		 ret	 0
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::egptr
_TEXT	ENDS
PUBLIC	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
; Function compile flags: /Ogtpy
;	COMDAT ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setg, COMDAT
; _this$ = ecx

; 216  : 		*_IGfirst = _First;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00007	89 10		 mov	 DWORD PTR [eax], edx

; 217  : 		*_IGnext = _Next;

  00009	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __Next$[esp-4]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 218  : 		*_IGcount = (int)(_Last - _Next);

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0001b	89 10		 mov	 DWORD PTR [eax], edx

; 219  : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setg
_TEXT	ENDS
PUBLIC	?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
; Function compile flags: /Ogtpy
;	COMDAT ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::epptr, COMDAT
; _this$ = ecx

; 223  : 		return (*_IPnext + *_IPcount);

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	03 01		 add	 eax, DWORD PTR [ecx]

; 224  : 		}

  0000a	c3		 ret	 0
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::epptr
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
; Function compile flags: /Ogtpy
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 257  : 		*_IPfirst = _First;

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00007	89 02		 mov	 DWORD PTR [edx], eax

; 258  : 		*_IPnext = _First;

  00009	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 259  : 		*_IPcount = (int)(_Last - _First);

  0000e	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00012	2b d0		 sub	 edx, eax
  00014	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00017	89 10		 mov	 DWORD PTR [eax], edx

; 260  : 		}

  00019	c2 08 00	 ret	 8
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
; Function compile flags: /Ogtpy
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 264  : 		*_IPfirst = _First;

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00007	89 10		 mov	 DWORD PTR [eax], edx

; 265  : 		*_IPnext = _Next;

  00009	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __Next$[esp-4]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 266  : 		*_IPcount = (int)(_Last - _Next);

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0001b	89 10		 mov	 DWORD PTR [eax], edx

; 267  : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
PUBLIC	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
; Function compile flags: /Ogtpy
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc, COMDAT
; _this$ = ecx

; 271  : 		--*_IPcount;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 272  : 		return ((*_IPnext)++);

  00005	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 273  : 		}

  0000f	c3		 ret	 0
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
_TEXT	ENDS
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
; Function compile flags: /Ogtpy
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT
; _this$ = ecx

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 06		 je	 SHORT $LN3@Pnavail
  00008	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 278  : 		}

  0000d	c3		 ret	 0
$LN3@Pnavail:

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  0000e	33 c0		 xor	 eax, eax

; 278  : 		}

  00010	c3		 ret	 0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
_TEXT	ENDS
PUBLIC	?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pubsync
; Function compile flags: /Ogtpy
;	COMDAT ?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pubsync, COMDAT
; _this$ = ecx

; 100  : 		return (sync());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00005	ff e2		 jmp	 edx
?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pubsync
_TEXT	ENDS
PUBLIC	?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock
; Function compile flags: /Ogtpy
;	COMDAT ?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock, COMDAT
; _this$ = ecx

; 178  : 		_Mylock._Unlock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock
_TEXT	ENDS
PUBLIC	?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::eback
; Function compile flags: /Ogtpy
;	COMDAT ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::eback, COMDAT
; _this$ = ecx

; 185  : 		return (*_IGfirst);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 186  : 		}

  00005	c3		 ret	 0
?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::eback
_TEXT	ENDS
PUBLIC	?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gptr
; Function compile flags: /Ogtpy
;	COMDAT ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gptr, COMDAT
; _this$ = ecx

; 190  : 		return (*_IGnext);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 191  : 		}

  00005	c3		 ret	 0
?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gptr
_TEXT	ENDS
PUBLIC	?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbase
; Function compile flags: /Ogtpy
;	COMDAT ?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbase, COMDAT
; _this$ = ecx

; 195  : 		return (*_IPfirst);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 196  : 		}

  00005	c3		 ret	 0
?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbase
_TEXT	ENDS
PUBLIC	?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pptr
; Function compile flags: /Ogtpy
;	COMDAT ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pptr, COMDAT
; _this$ = ecx

; 200  : 		return (*_IPnext);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 201  : 		}

  00005	c3		 ret	 0
?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pptr
_TEXT	ENDS
PUBLIC	?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::egptr
; Function compile flags: /Ogtpy
;	COMDAT ?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::egptr, COMDAT
; _this$ = ecx

; 205  : 		return (*_IGnext + *_IGcount);

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00008	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000a	8d 04 51	 lea	 eax, DWORD PTR [ecx+edx*2]

; 206  : 		}

  0000d	c3		 ret	 0
?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::egptr
_TEXT	ENDS
PUBLIC	?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg
; Function compile flags: /Ogtpy
;	COMDAT ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg, COMDAT
; _this$ = ecx

; 216  : 		*_IGfirst = _First;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00007	89 10		 mov	 DWORD PTR [eax], edx

; 217  : 		*_IGnext = _Next;

  00009	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __Next$[esp-4]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 218  : 		*_IGcount = (int)(_Last - _Next);

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0001b	d1 fa		 sar	 edx, 1
  0001d	89 10		 mov	 DWORD PTR [eax], edx

; 219  : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg
_TEXT	ENDS
PUBLIC	?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::epptr
; Function compile flags: /Ogtpy
;	COMDAT ?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::epptr, COMDAT
; _this$ = ecx

; 223  : 		return (*_IPnext + *_IPcount);

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00008	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000a	8d 04 51	 lea	 eax, DWORD PTR [ecx+edx*2]

; 224  : 		}

  0000d	c3		 ret	 0
?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::epptr
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
; Function compile flags: /Ogtpy
;	COMDAT ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp, COMDAT
; _this$ = ecx

; 257  : 		*_IPfirst = _First;

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00007	89 02		 mov	 DWORD PTR [edx], eax

; 258  : 		*_IPnext = _First;

  00009	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 259  : 		*_IPcount = (int)(_Last - _First);

  0000e	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00012	2b d0		 sub	 edx, eax
  00014	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00017	d1 fa		 sar	 edx, 1
  00019	89 10		 mov	 DWORD PTR [eax], edx

; 260  : 		}

  0001b	c2 08 00	 ret	 8
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
; Function compile flags: /Ogtpy
;	COMDAT ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp, COMDAT
; _this$ = ecx

; 264  : 		*_IPfirst = _First;

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00007	89 10		 mov	 DWORD PTR [eax], edx

; 265  : 		*_IPnext = _Next;

  00009	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __Next$[esp-4]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 266  : 		*_IPcount = (int)(_Last - _Next);

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0001b	d1 fa		 sar	 edx, 1
  0001d	89 10		 mov	 DWORD PTR [eax], edx

; 267  : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
_TEXT	ENDS
PUBLIC	?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pninc
; Function compile flags: /Ogtpy
;	COMDAT ?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pninc, COMDAT
; _this$ = ecx

; 271  : 		--*_IPcount;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 272  : 		return ((*_IPnext)++);

  00005	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 273  : 		}

  0000f	c3		 ret	 0
?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pninc
_TEXT	ENDS
PUBLIC	?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
; Function compile flags: /Ogtpy
;	COMDAT ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail, COMDAT
; _this$ = ecx

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 06		 je	 SHORT $LN3@Pnavail@2
  00008	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 278  : 		}

  0000d	c3		 ret	 0
$LN3@Pnavail@2:

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  0000e	33 c0		 xor	 eax, eax

; 278  : 		}

  00010	c3		 ret	 0
?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
_TEXT	ENDS
PUBLIC	?get@?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QBEPAUGetPinFunctor@CipherShed@@XZ ; std::auto_ptr<CipherShed::GetPinFunctor>::get
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ?get@?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QBEPAUGetPinFunctor@CipherShed@@XZ
_TEXT	SEGMENT
?get@?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QBEPAUGetPinFunctor@CipherShed@@XZ PROC ; std::auto_ptr<CipherShed::GetPinFunctor>::get, COMDAT
; _this$ = ecx

; 750  : 		return (_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 751  : 		}

  00002	c3		 ret	 0
?get@?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QBEPAUGetPinFunctor@CipherShed@@XZ ENDP ; std::auto_ptr<CipherShed::GetPinFunctor>::get
_TEXT	ENDS
PUBLIC	?release@?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAEPAUGetPinFunctor@CipherShed@@XZ ; std::auto_ptr<CipherShed::GetPinFunctor>::release
; Function compile flags: /Ogtpy
;	COMDAT ?release@?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAEPAUGetPinFunctor@CipherShed@@XZ
_TEXT	SEGMENT
?release@?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAEPAUGetPinFunctor@CipherShed@@XZ PROC ; std::auto_ptr<CipherShed::GetPinFunctor>::release, COMDAT
; _this$ = ecx

; 755  : 		_Ty *_Tmp = _Myptr;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 756  : 		_Myptr = 0;

  00002	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 757  : 		return (_Tmp);
; 758  : 		}

  00008	c3		 ret	 0
?release@?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAEPAUGetPinFunctor@CipherShed@@XZ ENDP ; std::auto_ptr<CipherShed::GetPinFunctor>::release
_TEXT	ENDS
PUBLIC	?reset@?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAEXPAUGetPinFunctor@CipherShed@@@Z ; std::auto_ptr<CipherShed::GetPinFunctor>::reset
; Function compile flags: /Ogtpy
;	COMDAT ?reset@?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAEXPAUGetPinFunctor@CipherShed@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?reset@?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAEXPAUGetPinFunctor@CipherShed@@@Z PROC ; std::auto_ptr<CipherShed::GetPinFunctor>::reset, COMDAT
; _this$ = ecx

; 761  : 		{	// destroy designated object and store new pointer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 762  : 		if (_Ptr != _Myptr)

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  0000a	3b f9		 cmp	 edi, ecx
  0000c	74 0c		 je	 SHORT $LN7@reset

; 763  : 			delete _Myptr;

  0000e	85 c9		 test	 ecx, ecx
  00010	74 08		 je	 SHORT $LN7@reset
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	8b 10		 mov	 edx, DWORD PTR [eax]
  00016	6a 01		 push	 1
  00018	ff d2		 call	 edx
$LN7@reset:

; 764  : 		_Myptr = _Ptr;

  0001a	89 3e		 mov	 DWORD PTR [esi], edi
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi

; 765  : 		}

  0001e	c2 04 00	 ret	 4
?reset@?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAEXPAUGetPinFunctor@CipherShed@@@Z ENDP ; std::auto_ptr<CipherShed::GetPinFunctor>::reset
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Color
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Color, COMDAT

; 152  : 		return ((_Charref)(*_Pnode)._Color);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 18	 add	 eax, 24			; 00000018H

; 153  : 		}

  00007	c3		 ret	 0
?_Color@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Color
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Isnil
; Function compile flags: /Ogtpy
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Isnil, COMDAT

; 157  : 		return ((_Charref)(*_Pnode)._Isnil);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 19	 add	 eax, 25			; 00000019H

; 158  : 		}

  00007	c3		 ret	 0
?_Isnil@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Left
; Function compile flags: /Ogtpy
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Left, COMDAT

; 167  : 		return ((_Nodepref)(*_Pnode)._Left);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 168  : 		}

  00004	c3		 ret	 0
?_Left@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Parent
; Function compile flags: /Ogtpy
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Parent, COMDAT

; 172  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 173  : 		}

  00007	c3		 ret	 0
?_Parent@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Right
; Function compile flags: /Ogtpy
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Right, COMDAT

; 177  : 		return ((_Nodepref)(*_Pnode)._Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 178  : 		}

  00007	c3		 ret	 0
?_Right@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAAU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Myval
; Function compile flags: /Ogtpy
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAAU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAAU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Myval, COMDAT

; 182  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 183  : 		}

  00007	c3		 ret	 0
?_Myval@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAAAU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Lmost
; Function compile flags: /Ogtpy
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1281 : 		return (_Left(_Myhead));

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 1282 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Max
; Function compile flags: /Ogtpy
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Max, COMDAT

; 1306 : 		while (!_Isnil(_Right(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00007	80 79 19 00	 cmp	 BYTE PTR [ecx+25], 0
  0000b	75 0e		 jne	 SHORT $LN1@Max
  0000d	8d 49 00	 npad	 3
$LL2@Max:

; 1307 : 			_Pnode = _Right(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00015	80 79 19 00	 cmp	 BYTE PTR [ecx+25], 0
  00019	74 f5		 je	 SHORT $LL2@Max
$LN1@Max:

; 1308 : 		return (_Pnode);
; 1309 : 		}

  0001b	c3		 ret	 0
?_Max@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Max
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Min
; Function compile flags: /Ogtpy
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Min, COMDAT

; 1313 : 		while (!_Isnil(_Left(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	80 79 19 00	 cmp	 BYTE PTR [ecx+25], 0
  0000a	75 0e		 jne	 SHORT $LN1@Min
  0000c	8d 64 24 00	 npad	 4
$LL2@Min:

; 1314 : 			_Pnode = _Left(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	80 79 19 00	 cmp	 BYTE PTR [ecx+25], 0
  00018	74 f6		 je	 SHORT $LL2@Min
$LN1@Min:

; 1315 : 		return (_Pnode);
; 1316 : 		}

  0001a	c3		 ret	 0
?_Min@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Min
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Rmost
; Function compile flags: /Ogtpy
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1320 : 		return (_Right(_Myhead));

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	83 c0 08	 add	 eax, 8

; 1321 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Root
; Function compile flags: /Ogtpy
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1325 : 		return (_Parent(_Myhead));

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	83 c0 04	 add	 eax, 4

; 1326 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Root
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Rrotate
; Function compile flags: /Ogtpy
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1330 : 		_Nodeptr _Pnode = _Left(_Wherenode);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Wherenode$[esp-4]
  00004	8b 02		 mov	 eax, DWORD PTR [edx]
  00006	56		 push	 esi

; 1331 : 		_Left(_Wherenode) = _Right(_Pnode);

  00007	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000a	89 32		 mov	 DWORD PTR [edx], esi

; 1332 : 
; 1333 : 		if (!_Isnil(_Right(_Pnode)))

  0000c	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000f	80 7e 19 00	 cmp	 BYTE PTR [esi+25], 0
  00013	75 03		 jne	 SHORT $LN5@Rrotate

; 1334 : 			_Parent(_Right(_Pnode)) = _Wherenode;

  00015	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Rrotate:

; 1335 : 		_Parent(_Pnode) = _Parent(_Wherenode);

  00018	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001b	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1336 : 
; 1337 : 		if (_Wherenode == _Root())

  0001e	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00021	5e		 pop	 esi
  00022	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00025	75 0c		 jne	 SHORT $LN4@Rrotate

; 1338 : 			_Root() = _Pnode;

  00027	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1343 : 
; 1344 : 		_Right(_Pnode) = _Wherenode;

  0002a	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1345 : 		_Parent(_Wherenode) = _Pnode;

  0002d	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1346 : 		}

  00030	c2 04 00	 ret	 4
$LN4@Rrotate:

; 1339 : 		else if (_Wherenode == _Right(_Parent(_Wherenode)))

  00033	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00036	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00039	75 0c		 jne	 SHORT $LN2@Rrotate

; 1340 : 			_Right(_Parent(_Wherenode)) = _Pnode;

  0003b	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1343 : 
; 1344 : 		_Right(_Pnode) = _Wherenode;

  0003e	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1345 : 		_Parent(_Wherenode) = _Pnode;

  00041	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1346 : 		}

  00044	c2 04 00	 ret	 4
$LN2@Rrotate:

; 1341 : 		else
; 1342 : 			_Left(_Parent(_Wherenode)) = _Pnode;

  00047	89 01		 mov	 DWORD PTR [ecx], eax

; 1343 : 
; 1344 : 		_Right(_Pnode) = _Wherenode;

  00049	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1345 : 		_Parent(_Wherenode) = _Pnode;

  0004c	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1346 : 		}

  0004f	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@QAE@XZ ; std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >
_TEXT	ENDS
PUBLIC	??R?$less@K@std@@QBE_NABK0@Z			; std::less<unsigned long>::operator()
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\functional
;	COMDAT ??R?$less@K@std@@QBE_NABK0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@K@std@@QBE_NABK0@Z PROC			; std::less<unsigned long>::operator(), COMDAT
; _this$ = ecx

; 143  : 		return (_Left < _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000a	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0000c	1b c0		 sbb	 eax, eax
  0000e	f7 d8		 neg	 eax

; 144  : 		}

  00010	c2 08 00	 ret	 8
??R?$less@K@std@@QBE_NABK0@Z ENDP			; std::less<unsigned long>::operator()
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>::deallocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@K@std@@QAE@XZ			; std::allocator<unsigned long>::allocator<unsigned long>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@K@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@K@std@@QAE@XZ PROC			; std::allocator<unsigned long>::allocator<unsigned long>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@K@std@@QAE@XZ ENDP			; std::allocator<unsigned long>::allocator<unsigned long>
_TEXT	ENDS
PUBLIC	??0?$allocator@K@std@@QAE@ABV01@@Z		; std::allocator<unsigned long>::allocator<unsigned long>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@K@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@K@std@@QAE@ABV01@@Z PROC			; std::allocator<unsigned long>::allocator<unsigned long>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@K@std@@QAE@ABV01@@Z ENDP			; std::allocator<unsigned long>::allocator<unsigned long>
_TEXT	ENDS
PUBLIC	?get@?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QBEPAUSendExceptionFunctor@CipherShed@@XZ ; std::auto_ptr<CipherShed::SendExceptionFunctor>::get
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ?get@?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QBEPAUSendExceptionFunctor@CipherShed@@XZ
_TEXT	SEGMENT
?get@?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QBEPAUSendExceptionFunctor@CipherShed@@XZ PROC ; std::auto_ptr<CipherShed::SendExceptionFunctor>::get, COMDAT
; _this$ = ecx

; 750  : 		return (_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 751  : 		}

  00002	c3		 ret	 0
?get@?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QBEPAUSendExceptionFunctor@CipherShed@@XZ ENDP ; std::auto_ptr<CipherShed::SendExceptionFunctor>::get
_TEXT	ENDS
PUBLIC	?release@?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAEPAUSendExceptionFunctor@CipherShed@@XZ ; std::auto_ptr<CipherShed::SendExceptionFunctor>::release
; Function compile flags: /Ogtpy
;	COMDAT ?release@?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAEPAUSendExceptionFunctor@CipherShed@@XZ
_TEXT	SEGMENT
?release@?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAEPAUSendExceptionFunctor@CipherShed@@XZ PROC ; std::auto_ptr<CipherShed::SendExceptionFunctor>::release, COMDAT
; _this$ = ecx

; 755  : 		_Ty *_Tmp = _Myptr;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 756  : 		_Myptr = 0;

  00002	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 757  : 		return (_Tmp);
; 758  : 		}

  00008	c3		 ret	 0
?release@?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAEPAUSendExceptionFunctor@CipherShed@@XZ ENDP ; std::auto_ptr<CipherShed::SendExceptionFunctor>::release
_TEXT	ENDS
PUBLIC	?reset@?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAEXPAUSendExceptionFunctor@CipherShed@@@Z ; std::auto_ptr<CipherShed::SendExceptionFunctor>::reset
; Function compile flags: /Ogtpy
;	COMDAT ?reset@?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAEXPAUSendExceptionFunctor@CipherShed@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?reset@?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAEXPAUSendExceptionFunctor@CipherShed@@@Z PROC ; std::auto_ptr<CipherShed::SendExceptionFunctor>::reset, COMDAT
; _this$ = ecx

; 761  : 		{	// destroy designated object and store new pointer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 762  : 		if (_Ptr != _Myptr)

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  0000a	3b f9		 cmp	 edi, ecx
  0000c	74 0c		 je	 SHORT $LN7@reset@2

; 763  : 			delete _Myptr;

  0000e	85 c9		 test	 ecx, ecx
  00010	74 08		 je	 SHORT $LN7@reset@2
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	8b 10		 mov	 edx, DWORD PTR [eax]
  00016	6a 01		 push	 1
  00018	ff d2		 call	 edx
$LN7@reset@2:

; 764  : 		_Myptr = _Ptr;

  0001a	89 3e		 mov	 DWORD PTR [esi], edi
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi

; 765  : 		}

  0001e	c2 04 00	 ret	 4
?reset@?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAEXPAUSendExceptionFunctor@CipherShed@@@Z ENDP ; std::auto_ptr<CipherShed::SendExceptionFunctor>::reset
_TEXT	ENDS
PUBLIC	?capacity@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEIXZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::capacity
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?capacity@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEIXZ PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::capacity, COMDAT
; _this$ = ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $LN3@capacity
  00007	33 c0		 xor	 eax, eax

; 636  : 		}

  00009	c3		 ret	 0
$LN3@capacity:

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  0000a	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 07	 sar	 eax, 7

; 636  : 		}

  00012	c3		 ret	 0
?capacity@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEIXZ ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEIXZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEIXZ PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::size, COMDAT
; _this$ = ecx

; 726  : 		return (_Mylast - _Myfirst);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	2b 41 0c	 sub	 eax, DWORD PTR [ecx+12]
  00006	c1 f8 07	 sar	 eax, 7

; 727  : 		}

  00009	c3		 ret	 0
?size@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEIXZ ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::size
_TEXT	ENDS
PUBLIC	??0?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAE@XZ ; std::allocator<CipherShed::SecurityTokenKeyfile>::allocator<CipherShed::SecurityTokenKeyfile>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAE@XZ PROC ; std::allocator<CipherShed::SecurityTokenKeyfile>::allocator<CipherShed::SecurityTokenKeyfile>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAE@XZ ENDP ; std::allocator<CipherShed::SecurityTokenKeyfile>::allocator<CipherShed::SecurityTokenKeyfile>
_TEXT	ENDS
PUBLIC	??0?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAE@ABV01@@Z ; std::allocator<CipherShed::SecurityTokenKeyfile>::allocator<CipherShed::SecurityTokenKeyfile>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CipherShed::SecurityTokenKeyfile>::allocator<CipherShed::SecurityTokenKeyfile>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CipherShed::SecurityTokenKeyfile>::allocator<CipherShed::SecurityTokenKeyfile>
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 300  : 		{	// discard any allocated buffer and clear pointers

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 301  : 		if (_Mystate & _Allocated)

  00003	f6 46 40 01	 test	 BYTE PTR [esi+64], 1
  00007	74 0e		 je	 SHORT $LN16@Tidy

; 302  : 			_Al.deallocate(_Mysb::eback(),
; 303  : 				(_Mysb::pptr() != 0 ? _Mysb::epptr()
; 304  : 					: _Mysb::egptr()) - _Mysb::eback());

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN16@Tidy:

; 305  : 		_Mysb::setg(0, 0, 0);

  00017	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0001a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00020	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00023	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00029	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0002c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 306  : 		_Mysb::setp(0, 0);

  00032	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00035	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0003b	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0003e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00044	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00047	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 307  : 		_Seekhigh = 0;
; 308  : 		_Mystate &= ~_Allocated;

  0004d	83 66 40 fe	 and	 DWORD PTR [esi+64], -2	; fffffffeH
  00051	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00058	5e		 pop	 esi

; 309  : 		}

  00059	c3		 ret	 0
?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Mynode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@3@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Mynode, COMDAT
; _this$ = ecx

; 410  : 			return (_Ptr);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 411  : 			}

  00003	c3		 ret	 0
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@3@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Mynode
_TEXT	ENDS
PUBLIC	??0?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@QAE@ABKABUPkcs11Session@CipherShed@@@Z ; std::pair<unsigned long const ,CipherShed::Pkcs11Session>::pair<unsigned long const ,CipherShed::Pkcs11Session>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
;	COMDAT ??0?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@QAE@ABKABUPkcs11Session@CipherShed@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@QAE@ABKABUPkcs11Session@CipherShed@@@Z PROC ; std::pair<unsigned long const ,CipherShed::Pkcs11Session>::pair<unsigned long const ,CipherShed::Pkcs11Session>, COMDAT
; _this$ = ecx

; 50   : 		{	// construct from specified values

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Val1$[esp-4]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val2$[esp-4]
  0000c	89 10		 mov	 DWORD PTR [eax], edx
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00013	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00016	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 51   : 		}

  00019	c2 08 00	 ret	 8
??0?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@QAE@ABKABUPkcs11Session@CipherShed@@@Z ENDP ; std::pair<unsigned long const ,CipherShed::Pkcs11Session>::pair<unsigned long const ,CipherShed::Pkcs11Session>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity, COMDAT
; _this$ = ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $LN3@capacity@2
  00007	33 c0		 xor	 eax, eax

; 636  : 		}

  00009	c3		 ret	 0
$LN3@capacity@2:

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  0000a	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0000d	2b c2		 sub	 eax, edx

; 636  : 		}

  0000f	c3		 ret	 0
?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity
_TEXT	ENDS
PUBLIC	??0?$allocator@E@std@@QAE@XZ			; std::allocator<unsigned char>::allocator<unsigned char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@E@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@E@std@@QAE@XZ PROC			; std::allocator<unsigned char>::allocator<unsigned char>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@E@std@@QAE@XZ ENDP			; std::allocator<unsigned char>::allocator<unsigned char>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@E@std@@QAEXPAEI@Z	; std::allocator<unsigned char>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@E@std@@QAEXPAEI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@E@std@@QAEXPAEI@Z PROC		; std::allocator<unsigned char>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@E@std@@QAEXPAEI@Z ENDP		; std::allocator<unsigned char>::deallocate
_TEXT	ENDS
PUBLIC	?_Myval@?$list@KV?$allocator@K@std@@@std@@KAAAKPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Myval
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Myval@?$list@KV?$allocator@K@std@@@std@@KAAAKPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$list@KV?$allocator@K@std@@@std@@KAAAKPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Myval, COMDAT

; 125  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 126  : 		}

  00007	c3		 ret	 0
?_Myval@?$list@KV?$allocator@K@std@@@std@@KAAAKPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Myval
_TEXT	ENDS
PUBLIC	?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::capacity
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::capacity, COMDAT
; _this$ = ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $LN3@capacity@3
  00007	33 c0		 xor	 eax, eax

; 636  : 		}

  00009	c3		 ret	 0
$LN3@capacity@3:

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  0000a	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 636  : 		}

  00012	c3		 ret	 0
?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::size, COMDAT
; _this$ = ecx

; 726  : 		return (_Mylast - _Myfirst);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	2b 41 0c	 sub	 eax, DWORD PTR [ecx+12]
  00006	c1 f8 02	 sar	 eax, 2

; 727  : 		}

  00009	c3		 ret	 0
?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::size
_TEXT	ENDS
PUBLIC	??0?$allocator@USecurityTokenInfo@CipherShed@@@std@@QAE@XZ ; std::allocator<CipherShed::SecurityTokenInfo>::allocator<CipherShed::SecurityTokenInfo>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@USecurityTokenInfo@CipherShed@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@USecurityTokenInfo@CipherShed@@@std@@QAE@XZ PROC ; std::allocator<CipherShed::SecurityTokenInfo>::allocator<CipherShed::SecurityTokenInfo>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@USecurityTokenInfo@CipherShed@@@std@@QAE@XZ ENDP ; std::allocator<CipherShed::SecurityTokenInfo>::allocator<CipherShed::SecurityTokenInfo>
_TEXT	ENDS
PUBLIC	??0?$allocator@USecurityTokenInfo@CipherShed@@@std@@QAE@ABV01@@Z ; std::allocator<CipherShed::SecurityTokenInfo>::allocator<CipherShed::SecurityTokenInfo>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@USecurityTokenInfo@CipherShed@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@USecurityTokenInfo@CipherShed@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CipherShed::SecurityTokenInfo>::allocator<CipherShed::SecurityTokenInfo>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@USecurityTokenInfo@CipherShed@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CipherShed::SecurityTokenInfo>::allocator<CipherShed::SecurityTokenInfo>
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 300  : 		{	// discard any allocated buffer and clear pointers

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 301  : 		if (_Mystate & _Allocated)

  00003	f6 46 40 01	 test	 BYTE PTR [esi+64], 1
  00007	74 0e		 je	 SHORT $LN16@Tidy@2

; 302  : 			_Al.deallocate(_Mysb::eback(),
; 303  : 				(_Mysb::pptr() != 0 ? _Mysb::epptr()
; 304  : 					: _Mysb::egptr()) - _Mysb::eback());

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN16@Tidy@2:

; 305  : 		_Mysb::setg(0, 0, 0);

  00017	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0001a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00020	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00023	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00029	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0002c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 306  : 		_Mysb::setp(0, 0);

  00032	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00035	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0003b	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0003e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00044	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00047	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 307  : 		_Seekhigh = 0;
; 308  : 		_Mystate &= ~_Allocated;

  0004d	83 66 40 fe	 and	 DWORD PTR [esi+64], -2	; fffffffeH
  00051	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00058	5e		 pop	 esi

; 309  : 		}

  00059	c3		 ret	 0
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 116  : 			return (_Ok);

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 117  : 			}

  00003	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1085 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00000	8b 54 24 18	 mov	 edx, DWORD PTR __Val$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00009	56		 push	 esi
  0000a	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  0000e	52		 push	 edx
  0000f	8b 54 24 1c	 mov	 edx, DWORD PTR __Fill$[esp+4]
  00013	52		 push	 edx
  00014	8b 54 24 1c	 mov	 edx, DWORD PTR __Iosbase$[esp+8]
  00018	52		 push	 edx
  00019	8b 54 24 1c	 mov	 edx, DWORD PTR __Dest$[esp+16]
  0001d	52		 push	 edx
  0001e	8b 54 24 1c	 mov	 edx, DWORD PTR __Dest$[esp+16]
  00022	52		 push	 edx
  00023	56		 push	 esi
  00024	ff d0		 call	 eax
  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi

; 1086 : 		}

  00029	c2 18 00	 ret	 24			; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
PUBLIC	??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
__Sb$ = 8						; size = 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 583  : 		{	// construct from stream buffer _Sb

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Sb$[esp-4]
  00006	c6 00 00	 mov	 BYTE PTR [eax], 0
  00009	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 584  : 		}

  0000c	c2 04 00	 ret	 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
; Function compile flags: /Ogtpy
;	COMDAT ?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed, COMDAT
; _this$ = ecx

; 617  : 		return (_Failed);

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 618  : 		}

  00002	c3		 ret	 0
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
_TEXT	ENDS
PUBLIC	??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 116  : 			return (_Ok);

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 117  : 			}

  00003	c3		 ret	 0
??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
_TEXT	ENDS
PUBLIC	?put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::put
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 4
?put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::put, COMDAT
; _this$ = ecx

; 1085 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00000	8b 54 24 18	 mov	 edx, DWORD PTR __Val$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00009	56		 push	 esi
  0000a	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  0000e	52		 push	 edx
  0000f	8b 54 24 1c	 mov	 edx, DWORD PTR __Fill$[esp+4]
  00013	52		 push	 edx
  00014	8b 54 24 1c	 mov	 edx, DWORD PTR __Iosbase$[esp+8]
  00018	52		 push	 edx
  00019	8b 54 24 1c	 mov	 edx, DWORD PTR __Dest$[esp+16]
  0001d	52		 push	 edx
  0001e	8b 54 24 1c	 mov	 edx, DWORD PTR __Dest$[esp+16]
  00022	52		 push	 edx
  00023	56		 push	 esi
  00024	ff d0		 call	 eax
  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi

; 1086 : 		}

  00029	c2 18 00	 ret	 24			; 00000018H
?put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::put
_TEXT	ENDS
PUBLIC	?put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::put
; Function compile flags: /Ogtpy
;	COMDAT ?put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::put, COMDAT
; _this$ = ecx

; 1098 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00000	8b 54 24 1c	 mov	 edx, DWORD PTR __Val$[esp]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00009	56		 push	 esi
  0000a	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  0000e	52		 push	 edx
  0000f	8b 54 24 20	 mov	 edx, DWORD PTR __Val$[esp+4]
  00013	52		 push	 edx
  00014	8b 54 24 20	 mov	 edx, DWORD PTR __Fill$[esp+8]
  00018	52		 push	 edx
  00019	8b 54 24 20	 mov	 edx, DWORD PTR __Iosbase$[esp+12]
  0001d	52		 push	 edx
  0001e	8b 54 24 20	 mov	 edx, DWORD PTR __Dest$[esp+20]
  00022	52		 push	 edx
  00023	8b 54 24 20	 mov	 edx, DWORD PTR __Dest$[esp+20]
  00027	52		 push	 edx
  00028	56		 push	 esi
  00029	ff d0		 call	 eax
  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 1099 : 		}

  0002e	c2 1c 00	 ret	 28			; 0000001cH
?put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::put
_TEXT	ENDS
PUBLIC	??0?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??0?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
_TEXT	SEGMENT
__Sb$ = 8						; size = 4
??0?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z PROC ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 583  : 		{	// construct from stream buffer _Sb

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Sb$[esp-4]
  00006	c6 00 00	 mov	 BYTE PTR [eax], 0
  00009	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 584  : 		}

  0000c	c2 04 00	 ret	 4
??0?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ENDP ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?failed@?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::failed
; Function compile flags: /Ogtpy
;	COMDAT ?failed@?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?failed@?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NXZ PROC ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::failed, COMDAT
; _this$ = ecx

; 617  : 		return (_Failed);

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 618  : 		}

  00002	c3		 ret	 0
?failed@?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ENDP ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::failed
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEAAUSecurityTokenKeyfile@CipherShed@@XZ ; std::_Vector_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEAAUSecurityTokenKeyfile@CipherShed@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEAAUSecurityTokenKeyfile@CipherShed@@XZ PROC ; std::_Vector_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator*, COMDAT
; _this$ = ecx

; 338  : 		{	// return designated object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 339  : 		return ((reference)**(_Mybase *)this);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN15@operator@7
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN11@operator@7
$LN15@operator@7:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN12@operator@7
$LN11@operator@7:
  00018	33 c0		 xor	 eax, eax
$LN12@operator@7:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 0a		 jb	 SHORT $LN16@operator@7
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	5e		 pop	 esi

; 340  : 		}

  0002b	c3		 ret	 0
$LN16@operator@7:

; 339  : 		return ((reference)**(_Mybase *)this);

  0002c	8b c1		 mov	 eax, ecx
  0002e	5e		 pop	 esi

; 340  : 		}

  0002f	c3		 ret	 0
??D?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEAAUSecurityTokenKeyfile@CipherShed@@XZ ENDP ; std::_Vector_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator*
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@KV?$allocator@K@std@@@std@@QBEAAKXZ ; std::_Vector_iterator<unsigned long,std::allocator<unsigned long> >::operator*
; Function compile flags: /Ogtpy
;	COMDAT ??D?$_Vector_iterator@KV?$allocator@K@std@@@std@@QBEAAKXZ
_TEXT	SEGMENT
??D?$_Vector_iterator@KV?$allocator@K@std@@@std@@QBEAAKXZ PROC ; std::_Vector_iterator<unsigned long,std::allocator<unsigned long> >::operator*, COMDAT
; _this$ = ecx

; 338  : 		{	// return designated object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 339  : 		return ((reference)**(_Mybase *)this);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN15@operator@8
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN11@operator@8
$LN15@operator@8:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN12@operator@8
$LN11@operator@8:
  00018	33 c0		 xor	 eax, eax
$LN12@operator@8:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 0a		 jb	 SHORT $LN16@operator@8
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	5e		 pop	 esi

; 340  : 		}

  0002b	c3		 ret	 0
$LN16@operator@8:

; 339  : 		return ((reference)**(_Mybase *)this);

  0002c	8b c1		 mov	 eax, ecx
  0002e	5e		 pop	 esi

; 340  : 		}

  0002f	c3		 ret	 0
??D?$_Vector_iterator@KV?$allocator@K@std@@@std@@QBEAAKXZ ENDP ; std::_Vector_iterator<unsigned long,std::allocator<unsigned long> >::operator*
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $LN5@Eos
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 2115 : 		}

  00014	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 2115 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@4
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@4:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@ABV01@@Z		; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@_W@std@@QAE@ABV01@@Z PROC		; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@_W@std@@QAE@ABV01@@Z ENDP		; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
EXTRN	?_Addstd@ios_base@std@@SAXPAV12@@Z:PROC		; std::ios_base::_Addstd
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0
__ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
_TEXT	SEGMENT
$T138171 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
__Addit$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 56   : 	__CLR_OR_THIS_CALL basic_ostream(_Uninitialized, bool _Addit = true)

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 08	 mov	 DWORD PTR $T138171[esp+28], eax
  00030	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+24], eax
  00034	74 19		 je	 SHORT $LN2@basic_ostr
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
  0003c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  00043	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  00047	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR $T138171[esp+28], 1
$LN2@basic_ostr:
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00054	c7 04 16 00 00
	00 00		 mov	 DWORD PTR [esi+edx], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@

; 57   : 		{	// construct uninitialized
; 58   : 		if (_Addit)

  0005b	38 44 24 24	 cmp	 BYTE PTR __Addit$[esp+24], al
  0005f	74 10		 je	 SHORT $LN13@basic_ostr

; 59   : 			ios_base::_Addstd(this);	// suppress for basic_iostream

  00061	8b 06		 mov	 eax, DWORD PTR [esi]
  00063	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00066	03 c6		 add	 eax, esi
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  0006e	83 c4 04	 add	 esp, 4
$LN13@basic_ostr:

; 60   : 		}

  00071	8b c6		 mov	 eax, esi
  00073	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5e		 pop	 esi
  00080	83 c4 14	 add	 esp, 20			; 00000014H
  00083	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T138171[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN8@basic_ostr
  0000c	83 65 ec fe	 and	 DWORD PTR $T138171[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 04	 add	 ecx, 4
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN8@basic_ostr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
PUBLIC	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::tie, COMDAT
; _this$ = ecx

; 73   : 		return (_Tiestr);

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 74   : 		}

  00003	c3		 ret	 0
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::tie
_TEXT	ENDS
PUBLIC	??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::basic_ostream<wchar_t,std::char_traits<wchar_t> >
;	COMDAT ??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@ DD 00H ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0
__ehfuncinfo$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
_TEXT	SEGMENT
$T138201 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
__Addit$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::basic_ostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 56   : 	__CLR_OR_THIS_CALL basic_ostream(_Uninitialized, bool _Addit = true)

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 08	 mov	 DWORD PTR $T138201[esp+28], eax
  00030	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+24], eax
  00034	74 19		 je	 SHORT $LN2@basic_ostr@2
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@
  0003c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  00043	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  00047	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR $T138201[esp+28], 1
$LN2@basic_ostr@2:
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00054	c7 04 16 00 00
	00 00		 mov	 DWORD PTR [esi+edx], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@

; 57   : 		{	// construct uninitialized
; 58   : 		if (_Addit)

  0005b	38 44 24 24	 cmp	 BYTE PTR __Addit$[esp+24], al
  0005f	74 10		 je	 SHORT $LN13@basic_ostr@2

; 59   : 			ios_base::_Addstd(this);	// suppress for basic_iostream

  00061	8b 06		 mov	 eax, DWORD PTR [esi]
  00063	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00066	03 c6		 add	 eax, esi
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  0006e	83 c4 04	 add	 esp, 4
$LN13@basic_ostr@2:

; 60   : 		}

  00071	8b c6		 mov	 eax, esi
  00073	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5e		 pop	 esi
  00080	83 c4 14	 add	 esp, 20			; 00000014H
  00083	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T138201[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN8@basic_ostr@2
  0000c	83 65 ec fe	 and	 DWORD PTR $T138201[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 04	 add	 ecx, 4
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN8@basic_ostr@2:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::basic_ostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::tie
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ
_TEXT	SEGMENT
?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::tie, COMDAT
; _this$ = ecx

; 73   : 		return (_Tiestr);

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 74   : 		}

  00003	c3		 ret	 0
?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::tie
_TEXT	ENDS
PUBLIC	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
EXTRN	?_Lock@_Mutex@std@@QAEXXZ:PROC			; std::_Mutex::_Lock
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 173  : 		_Mylock._Lock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
PUBLIC	?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock
; Function compile flags: /Ogtpy
;	COMDAT ?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock, COMDAT
; _this$ = ecx

; 173  : 		_Mylock._Lock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::deallocate
_TEXT	ENDS
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::size, COMDAT
; _this$ = ecx

; 601  : 		return (_Mysize);

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]

; 602  : 		}

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::size
_TEXT	ENDS
PUBLIC	?_Kfn@?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@SAABKABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ; std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0>::_Kfn
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\map
;	COMDAT ?_Kfn@?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@SAABKABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@SAABKABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z PROC ; std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0>::_Kfn, COMDAT

; 65   : 		return (_Val.first);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]

; 66   : 		}

  00004	c3		 ret	 0
?_Kfn@?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@SAABKABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ENDP ; std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0>::_Kfn
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@K@std@@QAEXPAKI@Z	; std::allocator<unsigned long>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@K@std@@QAEXPAKI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@K@std@@QAEXPAKI@Z PROC		; std::allocator<unsigned long>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@K@std@@QAEXPAKI@Z ENDP		; std::allocator<unsigned long>::deallocate
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAEXPAUSecurityTokenKeyfile@CipherShed@@I@Z ; std::allocator<CipherShed::SecurityTokenKeyfile>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAEXPAUSecurityTokenKeyfile@CipherShed@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAEXPAUSecurityTokenKeyfile@CipherShed@@I@Z PROC ; std::allocator<CipherShed::SecurityTokenKeyfile>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAEXPAUSecurityTokenKeyfile@CipherShed@@I@Z ENDP ; std::allocator<CipherShed::SecurityTokenKeyfile>::deallocate
_TEXT	ENDS
PUBLIC	?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z
_TEXT	SEGMENT
__Mode$ = 8						; size = 4
?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getstate, COMDAT
; _this$ = ecx

; 318  : 		_Strstate _State = (_Strstate)0;
; 319  : 		if (!(_Mode & ios_base::in))

  00000	8a 4c 24 04	 mov	 cl, BYTE PTR __Mode$[esp-4]
  00004	33 c0		 xor	 eax, eax
  00006	f6 c1 01	 test	 cl, 1
  00009	75 05		 jne	 SHORT $LN4@Getstate

; 320  : 			_State |= _Noread;

  0000b	b8 04 00 00 00	 mov	 eax, 4
$LN4@Getstate:

; 321  : 		if (!(_Mode & ios_base::out))

  00010	f6 c1 02	 test	 cl, 2
  00013	75 03		 jne	 SHORT $LN3@Getstate

; 322  : 			_State |= _Constant;

  00015	83 c8 02	 or	 eax, 2
$LN3@Getstate:

; 323  : 		if (_Mode & ios_base::app)

  00018	f6 c1 08	 test	 cl, 8
  0001b	74 03		 je	 SHORT $LN2@Getstate

; 324  : 			_State |= _Append;

  0001d	83 c8 08	 or	 eax, 8
$LN2@Getstate:

; 325  : 		if (_Mode & ios_base::ate)

  00020	f6 c1 04	 test	 cl, 4
  00023	74 03		 je	 SHORT $LN1@Getstate

; 326  : 			_State |= _Atend;

  00025	83 c8 10	 or	 eax, 16			; 00000010H
$LN1@Getstate:

; 327  : 		return (_State);
; 328  : 		}

  00028	c2 04 00	 ret	 4
?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getstate
_TEXT	ENDS
PUBLIC	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Inc
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Inc, COMDAT
; _this$ = ecx

; 377  : 			{	// move to node with next larger value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 378  : 
; 379  :  #if _HAS_ITERATOR_DEBUGGING
; 380  : 			if (this->_Mycont == 0
; 381  : 				|| _Ptr == 0
; 382  : 				|| _Isnil(_Ptr))
; 383  : 				{
; 384  : 				_DEBUG_ERROR("map/set iterator not incrementable");
; 385  : 				_SCL_SECURE_OUT_OF_RANGE;
; 386  : 				}
; 387  :  #else
; 388  : 			_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	75 05		 jne	 SHORT $LN7@Inc
  00008	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@Inc:

; 389  : 			if (_Isnil(_Ptr))

  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00010	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  00014	74 06		 je	 SHORT $LN6@Inc
  00016	5e		 pop	 esi

; 390  : 				{
; 391  : 				_SCL_SECURE_OUT_OF_RANGE;

  00017	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo
$LN6@Inc:

; 392  : 				// end() shouldn't be incremented, don't move if _SCL_SECURE is not turned on
; 393  : 				}
; 394  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 395  : 
; 396  : 			else if (!_Isnil(_Right(_Ptr)))

  0001c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001f	80 79 19 00	 cmp	 BYTE PTR [ecx+25], 0
  00023	75 1a		 jne	 SHORT $LN37@Inc

; 397  : 				_Ptr = _Min(_Right(_Ptr));	// ==> smallest of right subtree

  00025	8b 01		 mov	 eax, DWORD PTR [ecx]
  00027	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  0002b	75 0d		 jne	 SHORT $LN20@Inc
  0002d	8d 49 00	 npad	 3
$LL21@Inc:
  00030	8b c8		 mov	 ecx, eax
  00032	8b 01		 mov	 eax, DWORD PTR [ecx]
  00034	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  00038	74 f6		 je	 SHORT $LL21@Inc
$LN20@Inc:
  0003a	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0003d	5e		 pop	 esi

; 405  : 				}
; 406  : 			}

  0003e	c3		 ret	 0
$LN37@Inc:

; 398  : 			else
; 399  : 				{	// climb looking for right subtree
; 400  : 				_Nodeptr _Pnode;
; 401  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 402  : 					&& _Ptr == _Right(_Pnode))

  0003f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00042	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  00046	75 16		 jne	 SHORT $LN1@Inc
$LL2@Inc:
  00048	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0004b	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0004e	75 0e		 jne	 SHORT $LN1@Inc

; 403  : 					_Ptr = _Pnode;	// ==> parent while right subtree

  00050	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00053	8b d0		 mov	 edx, eax
  00055	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00058	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  0005c	74 ea		 je	 SHORT $LL2@Inc
$LN1@Inc:

; 404  : 				_Ptr = _Pnode;	// ==> parent (head if end())

  0005e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00061	5e		 pop	 esi

; 405  : 				}
; 406  : 			}

  00062	c3		 ret	 0
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Inc
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator-
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator-, COMDAT
; _this$ = ecx

; 186  : 		{	// return difference of iterators

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN1@operator@9
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN2@operator@9
$LN1@operator@9:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN2@operator@9:

; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	2b 47 04	 sub	 eax, DWORD PTR [edi+4]
  0001d	5f		 pop	 edi
  0001e	c1 f8 07	 sar	 eax, 7
  00021	5e		 pop	 esi

; 195  : 		}

  00022	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator-
_TEXT	ENDS
PUBLIC	??0?$allocator@E@std@@QAE@ABV01@@Z		; std::allocator<unsigned char>::allocator<unsigned char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@E@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@E@std@@QAE@ABV01@@Z PROC			; std::allocator<unsigned char>::allocator<unsigned char>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@E@std@@QAE@ABV01@@Z ENDP			; std::allocator<unsigned char>::allocator<unsigned char>
_TEXT	ENDS
PUBLIC	?_Nextnode@?$list@KV?$allocator@K@std@@@std@@KAAAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Nextnode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Nextnode@?$list@KV?$allocator@K@std@@@std@@KAAAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@KV?$allocator@K@std@@@std@@KAAAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Nextnode, COMDAT

; 115  : 		return ((_Nodepref)(*_Pnode)._Next);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 116  : 		}

  00004	c3		 ret	 0
?_Nextnode@?$list@KV?$allocator@K@std@@@std@@KAAAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$list@KV?$allocator@K@std@@@std@@KAAAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Prevnode
; Function compile flags: /Ogtpy
;	COMDAT ?_Prevnode@?$list@KV?$allocator@K@std@@@std@@KAAAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@KV?$allocator@K@std@@@std@@KAAAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Prevnode, COMDAT

; 120  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 121  : 		}

  00007	c3		 ret	 0
?_Prevnode@?$list@KV?$allocator@K@std@@@std@@KAAAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Prevnode
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@I@Z ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::deallocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??8?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator==
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??8?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator==, COMDAT
; _this$ = ecx

; 290  : 			{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 291  : 
; 292  :  #if _HAS_ITERATOR_DEBUGGING
; 293  : 			_Compat(_Right);
; 294  :  #else
; 295  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN1@operator@10
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN2@operator@10
$LN1@operator@10:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN2@operator@10:

; 296  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 297  : 
; 298  : 			return (_Ptr == _Right._Ptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 299  : 			}

  00026	c2 04 00	 ret	 4
??8?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@3@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::_Mynode
; Function compile flags: /Ogtpy
;	COMDAT ?_Mynode@?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@3@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::_Mynode, COMDAT
; _this$ = ecx

; 308  : 			return (_Ptr);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 309  : 			}

  00003	c3		 ret	 0
?_Mynode@?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@3@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::_Mynode
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::operator-
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::operator-, COMDAT
; _this$ = ecx

; 186  : 		{	// return difference of iterators

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN1@operator@11
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN2@operator@11
$LN1@operator@11:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN2@operator@11:

; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	2b 47 04	 sub	 eax, DWORD PTR [edi+4]
  0001d	5f		 pop	 edi
  0001e	c1 f8 02	 sar	 eax, 2
  00021	5e		 pop	 esi

; 195  : 		}

  00022	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::operator-
_TEXT	ENDS
PUBLIC	?_Nextnode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Nextnode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Nextnode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@@Z PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Nextnode, COMDAT

; 115  : 		return ((_Nodepref)(*_Pnode)._Next);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 116  : 		}

  00004	c3		 ret	 0
?_Nextnode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@@Z ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Prevnode
; Function compile flags: /Ogtpy
;	COMDAT ?_Prevnode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@@Z PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Prevnode, COMDAT

; 120  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 121  : 		}

  00007	c3		 ret	 0
?_Prevnode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@@Z ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Prevnode
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>::deallocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z
_TEXT	SEGMENT
__Mode$ = 8						; size = 4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate, COMDAT
; _this$ = ecx

; 318  : 		_Strstate _State = (_Strstate)0;
; 319  : 		if (!(_Mode & ios_base::in))

  00000	8a 4c 24 04	 mov	 cl, BYTE PTR __Mode$[esp-4]
  00004	33 c0		 xor	 eax, eax
  00006	f6 c1 01	 test	 cl, 1
  00009	75 05		 jne	 SHORT $LN4@Getstate@2

; 320  : 			_State |= _Noread;

  0000b	b8 04 00 00 00	 mov	 eax, 4
$LN4@Getstate@2:

; 321  : 		if (!(_Mode & ios_base::out))

  00010	f6 c1 02	 test	 cl, 2
  00013	75 03		 jne	 SHORT $LN3@Getstate@2

; 322  : 			_State |= _Constant;

  00015	83 c8 02	 or	 eax, 2
$LN3@Getstate@2:

; 323  : 		if (_Mode & ios_base::app)

  00018	f6 c1 08	 test	 cl, 8
  0001b	74 03		 je	 SHORT $LN2@Getstate@2

; 324  : 			_State |= _Append;

  0001d	83 c8 08	 or	 eax, 8
$LN2@Getstate@2:

; 325  : 		if (_Mode & ios_base::ate)

  00020	f6 c1 04	 test	 cl, 4
  00023	74 03		 je	 SHORT $LN1@Getstate@2

; 326  : 			_State |= _Atend;

  00025	83 c8 10	 or	 eax, 16			; 00000010H
$LN1@Getstate@2:

; 327  : 		return (_State);
; 328  : 		}

  00028	c2 04 00	 ret	 4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 75   : 			{	// lock the stream buffer, if there

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ostr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 06		 mov	 DWORD PTR [esi], eax

; 76   : 			if (_Myostr.rdbuf() != 0)

  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000e	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  00012	85 c0		 test	 eax, eax
  00014	74 08		 je	 SHORT $LN10@Sentry_bas

; 77   : 				_Myostr.rdbuf()->_Lock();

  00016	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00019	e8 00 00 00 00	 call	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
$LN10@Sentry_bas:

; 78   : 			}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtpy
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 82   : 			if (_Myostr.rdbuf() != 0)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  0000b	85 c0		 test	 eax, eax
  0000d	74 08		 je	 SHORT $LN8@Sentry_bas@2

; 83   : 				_Myostr.rdbuf()->_Unlock();

  0000f	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00012	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN8@Sentry_bas@2:

; 84   : 			}

  00017	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
; Function compile flags: /Ogtpy
;	COMDAT ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 75   : 			{	// lock the stream buffer, if there

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ostr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 06		 mov	 DWORD PTR [esi], eax

; 76   : 			if (_Myostr.rdbuf() != 0)

  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000e	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  00012	85 c0		 test	 eax, eax
  00014	74 08		 je	 SHORT $LN10@Sentry_bas@3

; 77   : 				_Myostr.rdbuf()->_Lock();

  00016	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00019	e8 00 00 00 00	 call	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
$LN10@Sentry_bas@3:

; 78   : 			}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtpy
;	COMDAT ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 82   : 			if (_Myostr.rdbuf() != 0)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  0000b	85 c0		 test	 eax, eax
  0000d	74 08		 je	 SHORT $LN8@Sentry_bas@4

; 83   : 				_Myostr.rdbuf()->_Unlock();

  0000f	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00012	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN8@Sentry_bas@4:

; 84   : 			}

  00017	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBEABEXZ ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBEABEXZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBEABEXZ PROC ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::operator*, COMDAT
; _this$ = ecx

; 91   : 		{	// return designated object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 99   : 			_SCL_SECURE_OUT_OF_RANGE;
; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN13@operator@12
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN9@operator@12
$LN13@operator@12:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN10@operator@12
$LN9@operator@12:
  00018	33 c0		 xor	 eax, eax
$LN10@operator@12:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 0a		 jb	 SHORT $LN14@operator@12
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	5e		 pop	 esi

; 107  : 		}

  0002b	c3		 ret	 0
$LN14@operator@12:

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  0002c	8b c1		 mov	 eax, ecx
  0002e	5e		 pop	 esi

; 107  : 		}

  0002f	c3		 ret	 0
??D?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBEABEXZ ENDP ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::operator*
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::operator-
; Function compile flags: /Ogtpy
;	COMDAT ??G?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::operator-, COMDAT
; _this$ = ecx

; 186  : 		{	// return difference of iterators

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN1@operator@13
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN2@operator@13
$LN1@operator@13:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN2@operator@13:

; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	2b 47 04	 sub	 eax, DWORD PTR [edi+4]
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi

; 195  : 		}

  0001f	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::operator-
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@3@XZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::_Mynode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Mynode@?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@3@XZ PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::_Mynode, COMDAT
; _this$ = ecx

; 308  : 			return (_Ptr);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 309  : 			}

  00003	c3		 ret	 0
?_Mynode@?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@3@XZ ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::_Mynode
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@U?$pair@$$CBKUPkcs11Session@CipherShed@@@2@HPBU32@ABU32@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<unsigned long const ,CipherShed::Pkcs11Session>,int,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const *,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<unsigned long const ,CipherShed::Pkcs11Session>,int,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const *,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@U?$pair@$$CBKUPkcs11Session@CipherShed@@@2@HPBU32@ABU32@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@U?$pair@$$CBKUPkcs11Session@CipherShed@@@2@HPBU32@ABU32@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<unsigned long const ,CipherShed::Pkcs11Session>,int,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const *,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<unsigned long const ,CipherShed::Pkcs11Session>,int,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const *,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@U?$pair@$$CBKUPkcs11Session@CipherShed@@@2@HPBU32@ABU32@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<unsigned long const ,CipherShed::Pkcs11Session>,int,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const *,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<unsigned long const ,CipherShed::Pkcs11Session>,int,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const *,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@USecurityTokenKeyfile@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,CipherShed::SecurityTokenKeyfile,int,CipherShed::SecurityTokenKeyfile const *,CipherShed::SecurityTokenKeyfile const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,CipherShed::SecurityTokenKeyfile,int,CipherShed::SecurityTokenKeyfile const *,CipherShed::SecurityTokenKeyfile const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@USecurityTokenKeyfile@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@USecurityTokenKeyfile@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,CipherShed::SecurityTokenKeyfile,int,CipherShed::SecurityTokenKeyfile const *,CipherShed::SecurityTokenKeyfile const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,CipherShed::SecurityTokenKeyfile,int,CipherShed::SecurityTokenKeyfile const *,CipherShed::SecurityTokenKeyfile const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@USecurityTokenKeyfile@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,CipherShed::SecurityTokenKeyfile,int,CipherShed::SecurityTokenKeyfile const *,CipherShed::SecurityTokenKeyfile const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,CipherShed::SecurityTokenKeyfile,int,CipherShed::SecurityTokenKeyfile const *,CipherShed::SecurityTokenKeyfile const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@KHPBKABKV_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::bidirectional_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@KHPBKABKV_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@KHPBKABKV_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::bidirectional_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@KHPBKABKV_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::bidirectional_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@KHPBKABKV_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@KHPBKABKV_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@KHPBKABKV_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@KHPBKABKV_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@USecurityTokenInfo@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::SecurityTokenInfo,int,CipherShed::SecurityTokenInfo const *,CipherShed::SecurityTokenInfo const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::SecurityTokenInfo,int,CipherShed::SecurityTokenInfo const *,CipherShed::SecurityTokenInfo const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@USecurityTokenInfo@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@USecurityTokenInfo@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::SecurityTokenInfo,int,CipherShed::SecurityTokenInfo const *,CipherShed::SecurityTokenInfo const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::SecurityTokenInfo,int,CipherShed::SecurityTokenInfo const *,CipherShed::SecurityTokenInfo const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@USecurityTokenInfo@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::SecurityTokenInfo,int,CipherShed::SecurityTokenInfo const *,CipherShed::SecurityTokenInfo const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::SecurityTokenInfo,int,CipherShed::SecurityTokenInfo const *,CipherShed::SecurityTokenInfo const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2c		 je	 SHORT $LN2@Inside
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 10	 cmp	 esi, 16			; 00000010H
  00013	72 04		 jb	 SHORT $LN8@Inside
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 17		 jb	 SHORT $LN2@Inside
  0001f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00022	72 02		 jb	 SHORT $LN12@Inside
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	03 c8		 add	 ecx, eax
  0002b	3b cf		 cmp	 ecx, edi
  0002d	76 07		 jbe	 SHORT $LN2@Inside
  0002f	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00030	b0 01		 mov	 al, 1
  00032	5e		 pop	 esi

; 2138 : 		}

  00033	c2 04 00	 ret	 4
$LN2@Inside:
  00036	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00037	32 c0		 xor	 al, al
  00039	5e		 pop	 esi

; 2138 : 		}

  0003a	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
; Function compile flags: /Ogtpy
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2d		 je	 SHORT $LN2@Inside@2
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 08	 cmp	 esi, 8
  00013	72 04		 jb	 SHORT $LN8@Inside@2
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside@2
$LN8@Inside@2:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside@2:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 18		 jb	 SHORT $LN2@Inside@2
  0001f	83 fe 08	 cmp	 esi, 8
  00022	72 02		 jb	 SHORT $LN12@Inside@2
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside@2:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0002c	3b d7		 cmp	 edx, edi
  0002e	76 07		 jbe	 SHORT $LN2@Inside@2
  00030	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi

; 2138 : 		}

  00034	c2 04 00	 ret	 4
$LN2@Inside@2:
  00037	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 2138 : 		}

  0003b	c2 04 00	 ret	 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
PUBLIC	?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 282  : 		_IGfirst = &_Gfirst, _IPfirst = &_Pfirst;
; 283  : 		_IGnext = &_Gnext, _IPnext = &_Pnext;

  00000	8d 51 18	 lea	 edx, DWORD PTR [ecx+24]
  00003	89 51 20	 mov	 DWORD PTR [ecx+32], edx
  00006	8d 51 1c	 lea	 edx, DWORD PTR [ecx+28]
  00009	89 51 24	 mov	 DWORD PTR [ecx+36], edx
  0000c	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0000f	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 284  : 		_IGcount = &_Gcount, _IPcount = &_Pcount;

  00012	8d 51 28	 lea	 edx, DWORD PTR [ecx+40]
  00015	89 51 30	 mov	 DWORD PTR [ecx+48], edx
  00018	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  0001b	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0001e	8d 51 2c	 lea	 edx, DWORD PTR [ecx+44]
  00021	89 51 34	 mov	 DWORD PTR [ecx+52], edx

; 285  : 		setp(0, 0), setg(0, 0, 0);

  00024	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002a	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00033	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00036	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0003c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00045	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00048	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0004e	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00051	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 286  : 		}

  00057	c3		 ret	 0
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
PUBLIC	?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init, COMDAT
; _this$ = ecx

; 282  : 		_IGfirst = &_Gfirst, _IPfirst = &_Pfirst;
; 283  : 		_IGnext = &_Gnext, _IPnext = &_Pnext;

  00000	8d 51 18	 lea	 edx, DWORD PTR [ecx+24]
  00003	89 51 20	 mov	 DWORD PTR [ecx+32], edx
  00006	8d 51 1c	 lea	 edx, DWORD PTR [ecx+28]
  00009	89 51 24	 mov	 DWORD PTR [ecx+36], edx
  0000c	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0000f	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 284  : 		_IGcount = &_Gcount, _IPcount = &_Pcount;

  00012	8d 51 28	 lea	 edx, DWORD PTR [ecx+40]
  00015	89 51 30	 mov	 DWORD PTR [ecx+48], edx
  00018	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  0001b	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0001e	8d 51 2c	 lea	 edx, DWORD PTR [ecx+44]
  00021	89 51 34	 mov	 DWORD PTR [ecx+52], edx

; 285  : 		setp(0, 0), setg(0, 0, 0);

  00024	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002a	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00033	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00036	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0003c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00045	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00048	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0004e	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00051	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 286  : 		}

  00057	c3		 ret	 0
?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@K@std@@QBEIXZ		; std::allocator<unsigned long>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@K@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@K@std@@QBEIXZ PROC		; std::allocator<unsigned long>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@K@std@@QBEIXZ ENDP		; std::allocator<unsigned long>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QBEIXZ ; std::allocator<CipherShed::SecurityTokenKeyfile>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QBEIXZ PROC ; std::allocator<CipherShed::SecurityTokenKeyfile>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 01	 mov	 eax, 33554431		; 01ffffffH

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QBEIXZ ENDP ; std::allocator<CipherShed::SecurityTokenKeyfile>::max_size
_TEXT	ENDS
PUBLIC	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Dec
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Dec, COMDAT
; _this$ = ecx

; 320  : 			{	// move to node with next smaller value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 321  : 
; 322  :  #if _HAS_ITERATOR_DEBUGGING
; 323  : 			if (this->_Mycont == 0
; 324  : 				|| _Ptr == 0)
; 325  : 				{
; 326  : 				_DEBUG_ERROR("map/set iterator not decrementable");
; 327  : 				_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 				}
; 329  :  #else
; 330  : 			_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	75 05		 jne	 SHORT $LN10@Dec
  00008	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN10@Dec:

; 331  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 332  : 
; 333  : 			if (_Isnil(_Ptr))

  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00010	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  00014	74 12		 je	 SHORT $LN9@Dec

; 334  : 			{
; 335  : 				_Ptr = _Right(_Ptr);	// end() ==> rightmost

  00016	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00019	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 336  :    				if (_Isnil(_Ptr))

  0001c	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  00020	74 65		 je	 SHORT $LN1@Dec
  00022	5e		 pop	 esi

; 337  : #if _HAS_ITERATOR_DEBUGGING
; 338  : 				{
; 339  : 					_DEBUG_ERROR("map/set iterator not decrementable");
; 340  : 					_SCL_SECURE_OUT_OF_RANGE;
; 341  : 				}
; 342  : #elif _SECURE_SCL
; 343  : 				{
; 344  :     				_SCL_SECURE_OUT_OF_RANGE;

  00023	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo
$LN9@Dec:

; 345  : 				}
; 346  : #else
; 347  : 				return;	// begin() shouldn't be incremented, don't move
; 348  : #endif
; 349  : 			}
; 350  : 			else if (!_Isnil(_Left(_Ptr)))

  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	80 79 19 00	 cmp	 BYTE PTR [ecx+25], 0
  0002e	75 20		 jne	 SHORT $LN46@Dec

; 351  : 				_Ptr = _Max(_Left(_Ptr));	// ==> largest of left subtree

  00030	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00033	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  00037	75 12		 jne	 SHORT $LN27@Dec
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL28@Dec:
  00040	8b c8		 mov	 ecx, eax
  00042	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00045	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  00049	74 f5		 je	 SHORT $LL28@Dec
$LN27@Dec:
  0004b	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0004e	5e		 pop	 esi

; 373  : 				}
; 374  : 			}

  0004f	c3		 ret	 0
$LN46@Dec:

; 352  : 			else
; 353  : 				{	// climb looking for left subtree
; 354  : 				_Nodeptr _Pnode;
; 355  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 356  : 					&& _Ptr == _Left(_Pnode))

  00050	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00053	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  00057	75 1c		 jne	 SHORT $LN3@Dec
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL4@Dec:
  00060	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00063	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00065	75 0e		 jne	 SHORT $LN3@Dec

; 357  : 					_Ptr = _Pnode;	// ==> parent while left subtree

  00067	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0006a	8b d0		 mov	 edx, eax
  0006c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0006f	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  00073	74 eb		 je	 SHORT $LL4@Dec
$LN3@Dec:

; 358  : 				if (_Isnil(_Ptr))

  00075	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00078	80 79 19 00	 cmp	 BYTE PTR [ecx+25], 0
  0007c	74 06		 je	 SHORT $LN2@Dec
  0007e	5e		 pop	 esi

; 359  :  #if _HAS_ITERATOR_DEBUGGING
; 360  :  					{
; 361  : 					_DEBUG_ERROR("map/set iterator not decrementable");
; 362  : 					_SCL_SECURE_OUT_OF_RANGE;
; 363  : 					}
; 364  :  #elif _SECURE_SCL
; 365  : 					{
; 366  : 					_SCL_SECURE_OUT_OF_RANGE;

  0007f	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo
$LN2@Dec:

; 367  : 					}
; 368  :  #else
; 369  : 					return;	// begin() shouldn't be incremented, don't move
; 370  :  #endif
; 371  : 				else
; 372  : 					_Ptr = _Pnode;	// ==> parent if not head

  00084	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@Dec:
  00087	5e		 pop	 esi

; 373  : 				}
; 374  : 			}

  00088	c3		 ret	 0
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Dec
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@E@std@@QBEIXZ		; std::allocator<unsigned char>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@E@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@E@std@@QBEIXZ PROC		; std::allocator<unsigned char>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 167  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@E@std@@QBEIXZ ENDP		; std::allocator<unsigned char>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$list@KV?$allocator@K@std@@@std@@QBEIXZ ; std::list<unsigned long,std::allocator<unsigned long> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?max_size@?$list@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@KV?$allocator@K@std@@@std@@QBEIXZ PROC	; std::list<unsigned long,std::allocator<unsigned long> >::max_size, COMDAT
; _this$ = ecx

; 625  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 626  : 		}

  00005	c3		 ret	 0
?max_size@?$list@KV?$allocator@K@std@@@std@@QBEIXZ ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::max_size
_TEXT	ENDS
PUBLIC	?_Myval@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@KAAAUSecurityTokenInfo@CipherShed@@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Myval
; Function compile flags: /Ogtpy
;	COMDAT ?_Myval@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@KAAAUSecurityTokenInfo@CipherShed@@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@KAAAUSecurityTokenInfo@CipherShed@@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@@Z PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Myval, COMDAT

; 125  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 126  : 		}

  00007	c3		 ret	 0
?_Myval@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@KAAAUSecurityTokenInfo@CipherShed@@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@@Z ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Myval
_TEXT	ENDS
PUBLIC	??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-, COMDAT
; _this$ = ecx

; 199  : 		{	// return difference of iterators

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 200  : 
; 201  :  #if _HAS_ITERATOR_DEBUGGING
; 202  : 		_Compat(_Right);
; 203  :  #else
; 204  : 		if (this->_Mycont != _IGNORE_MYCONT)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	83 f8 fc	 cmp	 eax, -4			; fffffffcH
  0000d	74 0d		 je	 SHORT $LN2@operator@14

; 205  : 		{
; 206  : 			_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  0000f	85 c0		 test	 eax, eax
  00011	74 04		 je	 SHORT $LN1@operator@14
  00013	3b 07		 cmp	 eax, DWORD PTR [edi]
  00015	74 05		 je	 SHORT $LN2@operator@14
$LN1@operator@14:
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN2@operator@14:

; 207  : 		}
; 208  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 209  : 
; 210  : 		return (_Myptr - _Right._Myptr);

  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	2b 47 04	 sub	 eax, DWORD PTR [edi+4]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 211  : 		}

  00024	c2 04 00	 ret	 4
??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::operator==
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN1@operator@15
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN2@operator@15
$LN1@operator@15:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN2@operator@15:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 212  : 		}

  00026	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::operator==
_TEXT	ENDS
PUBLIC	??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@1@AB_N@Z ; std::pair<std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::iterator,bool>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
;	COMDAT ??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@1@AB_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@1@AB_N@Z PROC ; std::pair<std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::iterator,bool>, COMDAT
; _this$ = ecx

; 50   : 		{	// construct from specified values

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Val1$[esp-4]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	89 10		 mov	 DWORD PTR [eax], edx
  0000a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000d	8b 54 24 08	 mov	 edx, DWORD PTR __Val2$[esp-4]
  00011	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00014	8a 0a		 mov	 cl, BYTE PTR [edx]
  00016	88 48 08	 mov	 BYTE PTR [eax+8], cl

; 51   : 		}

  00019	c2 08 00	 ret	 8
??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@1@AB_N@Z ENDP ; std::pair<std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::iterator,bool>
_TEXT	ENDS
PUBLIC	??0?$_Ranit_base@DHPBDABDV_Iterator_base_secure@std@@@std@@QAE@XZ ; std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Ranit_base@DHPBDABDV_Iterator_base_secure@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Ranit_base@DHPBDABDV_Iterator_base_secure@std@@@std@@QAE@XZ PROC ; std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Ranit_base@DHPBDABDV_Iterator_base_secure@std@@@std@@QAE@XZ ENDP ; std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@EHPBEABEV_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,unsigned char,int,unsigned char const *,unsigned char const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,unsigned char,int,unsigned char const *,unsigned char const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@EHPBEABEV_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@EHPBEABEV_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,unsigned char,int,unsigned char const *,unsigned char const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,unsigned char,int,unsigned char const *,unsigned char const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@EHPBEABEV_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,unsigned char,int,unsigned char const *,unsigned char const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,unsigned char,int,unsigned char const *,unsigned char const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 167  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@_W@std@@QBEIXZ		; std::allocator<wchar_t>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@_W@std@@QBEIXZ PROC		; std::allocator<wchar_t>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@_W@std@@QBEIXZ ENDP		; std::allocator<wchar_t>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@QBEIXZ ; std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@QBEIXZ PROC ; std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >::max_size
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	85 c0		 test	 eax, eax
  00008	75 0b		 jne	 SHORT $LN20@operator@16
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	85 c0		 test	 eax, eax
  00013	74 04		 je	 SHORT $LN10@operator@16
$LN20@operator@16:
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN11@operator@16
$LN10@operator@16:
  00019	33 c9		 xor	 ecx, ecx
$LN11@operator@16:
  0001b	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  0001f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00022	c1 e7 07	 shl	 edi, 7
  00025	03 d7		 add	 edx, edi
  00027	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0002a	77 0f		 ja	 SHORT $LN1@operator@16
  0002c	85 c0		 test	 eax, eax
  0002e	74 04		 je	 SHORT $LN16@operator@16
  00030	8b 00		 mov	 eax, DWORD PTR [eax]
  00032	eb 02		 jmp	 SHORT $LN17@operator@16
$LN16@operator@16:
  00034	33 c0		 xor	 eax, eax
$LN17@operator@16:
  00036	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  00039	73 05		 jae	 SHORT $LN21@operator@16
$LN1@operator@16:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

  0003b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN21@operator@16:

; 164  : 		_Myptr += _Off;

  00040	01 7e 04	 add	 DWORD PTR [esi+4], edi
  00043	5f		 pop	 edi

; 165  : 		return (*this);

  00044	8b c6		 mov	 eax, esi
  00046	5e		 pop	 esi

; 166  : 		}

  00047	c2 04 00	 ret	 4
??Y?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	85 c0		 test	 eax, eax
  00008	75 0b		 jne	 SHORT $LN20@operator@17
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	85 c0		 test	 eax, eax
  00013	74 04		 je	 SHORT $LN10@operator@17
$LN20@operator@17:
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN11@operator@17
$LN10@operator@17:
  00019	33 d2		 xor	 edx, edx
$LN11@operator@17:
  0001b	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  0001f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00022	03 ff		 add	 edi, edi
  00024	03 ff		 add	 edi, edi
  00026	03 cf		 add	 ecx, edi
  00028	3b 4a 10	 cmp	 ecx, DWORD PTR [edx+16]
  0002b	77 0f		 ja	 SHORT $LN1@operator@17
  0002d	85 c0		 test	 eax, eax
  0002f	74 04		 je	 SHORT $LN16@operator@17
  00031	8b 00		 mov	 eax, DWORD PTR [eax]
  00033	eb 02		 jmp	 SHORT $LN17@operator@17
$LN16@operator@17:
  00035	33 c0		 xor	 eax, eax
$LN17@operator@17:
  00037	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  0003a	73 05		 jae	 SHORT $LN21@operator@17
$LN1@operator@17:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

  0003c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN21@operator@17:

; 164  : 		_Myptr += _Off;

  00041	01 7e 04	 add	 DWORD PTR [esi+4], edi
  00044	5f		 pop	 edi

; 165  : 		return (*this);

  00045	8b c6		 mov	 eax, esi
  00047	5e		 pop	 esi

; 166  : 		}

  00048	c2 04 00	 ret	 4
??Y?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::operator+=
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@USecurityTokenInfo@CipherShed@@@std@@QBEIXZ ; std::allocator<CipherShed::SecurityTokenInfo>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@USecurityTokenInfo@CipherShed@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@USecurityTokenInfo@CipherShed@@@std@@QBEIXZ PROC ; std::allocator<CipherShed::SecurityTokenInfo>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 03	 mov	 eax, 67108863		; 03ffffffH

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@USecurityTokenInfo@CipherShed@@@std@@QBEIXZ ENDP ; std::allocator<CipherShed::SecurityTokenInfo>::max_size
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	85 c0		 test	 eax, eax
  00008	75 0b		 jne	 SHORT $LN20@operator@18
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	85 c0		 test	 eax, eax
  00013	74 04		 je	 SHORT $LN10@operator@18
$LN20@operator@18:
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN11@operator@18
$LN10@operator@18:
  00019	33 c9		 xor	 ecx, ecx
$LN11@operator@18:
  0001b	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001e	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  00022	03 d7		 add	 edx, edi
  00024	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  00027	77 0f		 ja	 SHORT $LN1@operator@18
  00029	85 c0		 test	 eax, eax
  0002b	74 04		 je	 SHORT $LN16@operator@18
  0002d	8b 00		 mov	 eax, DWORD PTR [eax]
  0002f	eb 02		 jmp	 SHORT $LN17@operator@18
$LN16@operator@18:
  00031	33 c0		 xor	 eax, eax
$LN17@operator@18:
  00033	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  00036	73 05		 jae	 SHORT $LN21@operator@18
$LN1@operator@18:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

  00038	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN21@operator@18:

; 164  : 		_Myptr += _Off;

  0003d	01 7e 04	 add	 DWORD PTR [esi+4], edi
  00040	5f		 pop	 edi

; 165  : 		return (*this);

  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi

; 166  : 		}

  00044	c2 04 00	 ret	 4
??Y?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::operator+=
_TEXT	ENDS
PUBLIC	??0_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@D@Z ; std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node::_Node
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??0_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@D@Z
_TEXT	SEGMENT
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
??0_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@D@Z PROC ; std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node::_Node, COMDAT
; _this$ = ecx

; 38   : 			{	// construct a node with value

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Parg$[esp-4]
  00004	8b c1		 mov	 eax, ecx
  00006	8b 4c 24 04	 mov	 ecx, DWORD PTR __Larg$[esp-4]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Rarg$[esp-4]
  00010	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00013	8b 4c 24 10	 mov	 ecx, DWORD PTR __Val$[esp-4]
  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0001f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00022	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00025	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00028	8a 54 24 14	 mov	 dl, BYTE PTR __Carg$[esp-4]
  0002c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0002f	88 50 18	 mov	 BYTE PTR [eax+24], dl
  00032	c6 40 19 00	 mov	 BYTE PTR [eax+25], 0

; 39   : 			}

  00036	c2 14 00	 ret	 20			; 00000014H
??0_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@D@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node::_Node
_TEXT	ENDS
PUBLIC	??$ToTypeWrapper@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@01@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z ; CipherShed::ForEach::ToTypeWrapper<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
;	COMDAT ??$ToTypeWrapper@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@01@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@01@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z PROC ; CipherShed::ForEach::ToTypeWrapper<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
??$ToTypeWrapper@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@01@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z ENDP ; CipherShed::ForEach::ToTypeWrapper<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >
_TEXT	ENDS
PUBLIC	??$?BV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@12@XZ ; CipherShed::ForEach::TypeWrapperDummy::operator<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > > CipherShed::ForEach::TypeWrapper<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?BV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@12@XZ PROC ; CipherShed::ForEach::TypeWrapperDummy::operator<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > > CipherShed::ForEach::TypeWrapper<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	c2 04 00	 ret	 4
??$?BV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@12@XZ ENDP ; CipherShed::ForEach::TypeWrapperDummy::operator<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > > CipherShed::ForEach::TypeWrapper<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@01@@Z ; CipherShed::ForEach::GetContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@01@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >, COMDAT

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _forEachContainer$[esp-4]

; 97   : 		}

  00004	c3		 ret	 0
??$GetContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@01@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >
_TEXT	ENDS
PUBLIC	??$?0$$CBKUPkcs11Session@CipherShed@@@?$pair@KUPkcs11Session@CipherShed@@@std@@QAE@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@1@@Z ; std::pair<unsigned long,CipherShed::Pkcs11Session>::pair<unsigned long,CipherShed::Pkcs11Session><unsigned long const ,CipherShed::Pkcs11Session>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
;	COMDAT ??$?0$$CBKUPkcs11Session@CipherShed@@@?$pair@KUPkcs11Session@CipherShed@@@std@@QAE@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0$$CBKUPkcs11Session@CipherShed@@@?$pair@KUPkcs11Session@CipherShed@@@std@@QAE@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@1@@Z PROC ; std::pair<unsigned long,CipherShed::Pkcs11Session>::pair<unsigned long,CipherShed::Pkcs11Session><unsigned long const ,CipherShed::Pkcs11Session>, COMDAT
; _this$ = ecx

; 57   : 		{	// construct from compatible pair

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	89 10		 mov	 DWORD PTR [eax], edx
  0000a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000d	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00010	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00013	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 58   : 		}

  00016	c2 04 00	 ret	 4
??$?0$$CBKUPkcs11Session@CipherShed@@@?$pair@KUPkcs11Session@CipherShed@@@std@@QAE@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@1@@Z ENDP ; std::pair<unsigned long,CipherShed::Pkcs11Session>::pair<unsigned long,CipherShed::Pkcs11Session><unsigned long const ,CipherShed::Pkcs11Session>
_TEXT	ENDS
PUBLIC	??$ToTypeWrapper@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@01@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ToTypeWrapper<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
;	COMDAT ??$ToTypeWrapper@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@01@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@01@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ToTypeWrapper<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
??$ToTypeWrapper@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@01@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ToTypeWrapper<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >
_TEXT	ENDS
PUBLIC	??$?BV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@12@XZ ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > > CipherShed::ForEach::TypeWrapper<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?BV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@12@XZ PROC ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > > CipherShed::ForEach::TypeWrapper<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	c2 04 00	 ret	 4
??$?BV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@12@XZ ENDP ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > > CipherShed::ForEach::TypeWrapper<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@01@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@01@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >, COMDAT

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _forEachContainer$[esp-4]

; 97   : 		}

  00004	c3		 ret	 0
??$GetContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@01@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >
_TEXT	ENDS
PUBLIC	??$ToTypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z ; CipherShed::ForEach::ToTypeWrapper<std::list<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$ToTypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z PROC ; CipherShed::ForEach::ToTypeWrapper<std::list<unsigned long,std::allocator<unsigned long> > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
??$ToTypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z ENDP ; CipherShed::ForEach::ToTypeWrapper<std::list<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??$?BV?$list@KV?$allocator@K@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@12@XZ ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<unsigned long,std::allocator<unsigned long> > > CipherShed::ForEach::TypeWrapper<std::list<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?BV?$list@KV?$allocator@K@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$list@KV?$allocator@K@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@12@XZ PROC ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<unsigned long,std::allocator<unsigned long> > > CipherShed::ForEach::TypeWrapper<std::list<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	c2 04 00	 ret	 4
??$?BV?$list@KV?$allocator@K@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@12@XZ ENDP ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<unsigned long,std::allocator<unsigned long> > > CipherShed::ForEach::TypeWrapper<std::list<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@@Z ; CipherShed::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >, COMDAT

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _forEachContainer$[esp-4]

; 97   : 		}

  00004	c3		 ret	 0
??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??$ToTypeWrapper@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@KV?$allocator@K@std@@@std@@@01@ABV?$vector@KV?$allocator@K@std@@@std@@@Z ; CipherShed::ForEach::ToTypeWrapper<std::vector<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$ToTypeWrapper@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@KV?$allocator@K@std@@@std@@@01@ABV?$vector@KV?$allocator@K@std@@@std@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@KV?$allocator@K@std@@@std@@@01@ABV?$vector@KV?$allocator@K@std@@@std@@@Z PROC ; CipherShed::ForEach::ToTypeWrapper<std::vector<unsigned long,std::allocator<unsigned long> > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
??$ToTypeWrapper@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@KV?$allocator@K@std@@@std@@@01@ABV?$vector@KV?$allocator@K@std@@@std@@@Z ENDP ; CipherShed::ForEach::ToTypeWrapper<std::vector<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??$?BV?$vector@KV?$allocator@K@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@KV?$allocator@K@std@@@std@@@12@XZ ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<unsigned long,std::allocator<unsigned long> > > CipherShed::ForEach::TypeWrapper<std::vector<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?BV?$vector@KV?$allocator@K@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@KV?$allocator@K@std@@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$vector@KV?$allocator@K@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@KV?$allocator@K@std@@@std@@@12@XZ PROC ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<unsigned long,std::allocator<unsigned long> > > CipherShed::ForEach::TypeWrapper<std::vector<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	c2 04 00	 ret	 4
??$?BV?$vector@KV?$allocator@K@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@KV?$allocator@K@std@@@std@@@12@XZ ENDP ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<unsigned long,std::allocator<unsigned long> > > CipherShed::ForEach::TypeWrapper<std::vector<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@KV?$allocator@K@std@@@std@@@01@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@KV?$allocator@K@std@@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@KV?$allocator@K@std@@@std@@@01@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >, COMDAT

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _forEachContainer$[esp-4]

; 97   : 		}

  00004	c3		 ret	 0
??$GetContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@KV?$allocator@K@std@@@std@@@01@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??$swap@D@std@@YAXAAD0@Z			; std::swap<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT

; 18   : 	if (&_Left != &_Right)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00008	3b c1		 cmp	 eax, ecx
  0000a	74 0a		 je	 SHORT $LN1@swap

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

  0000c	8a 10		 mov	 dl, BYTE PTR [eax]
  0000e	53		 push	 ebx

; 21   : 
; 22   : 		_Left = _Right;

  0000f	8a 19		 mov	 bl, BYTE PTR [ecx]
  00011	88 18		 mov	 BYTE PTR [eax], bl

; 23   : 		_Right = _Tmp;

  00013	88 11		 mov	 BYTE PTR [ecx], dl
  00015	5b		 pop	 ebx
$LN1@swap:

; 24   : 		}
; 25   : 	}

  00016	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T138776 = -12						; size = 12
$T138781 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 0f		 ja	 SHORT $LN3@Allocate

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00013	83 c4 04	 add	 esp, 4

; 44   : 	}

  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	c3		 ret	 0
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001a	83 c8 ff	 or	 eax, -1
  0001d	33 d2		 xor	 edx, edx
  0001f	f7 f1		 div	 ecx
  00021	83 f8 01	 cmp	 eax, 1
  00024	73 e7		 jae	 SHORT $LN1@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T138781[esp+8]
  0002a	50		 push	 eax
  0002b	8d 4c 24 04	 lea	 ecx, DWORD PTR $T138776[esp+16]
  0002f	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T138781[esp+12], 0
  00037	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003c	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00041	8d 4c 24 04	 lea	 ecx, DWORD PTR $T138776[esp+16]
  00045	51		 push	 ecx
  00046	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T138776[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate:
  00053	cc		 int	 3
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	??$_Allocate@_W@std@@YAPA_WIPA_W@Z		; std::_Allocate<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT
$T138785 = -12						; size = 12
$T138789 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@_W@std@@YAPA_WIPA_W@Z PROC			; std::_Allocate<wchar_t>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 12		 ja	 SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00016	83 c4 04	 add	 esp, 4

; 44   : 	}

  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	c3		 ret	 0
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001d	83 c8 ff	 or	 eax, -1
  00020	33 d2		 xor	 edx, edx
  00022	f7 f1		 div	 ecx
  00024	83 f8 02	 cmp	 eax, 2
  00027	73 e4		 jae	 SHORT $LN1@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00029	8d 44 24 10	 lea	 eax, DWORD PTR $T138789[esp+8]
  0002d	50		 push	 eax
  0002e	8d 4c 24 04	 lea	 ecx, DWORD PTR $T138785[esp+16]
  00032	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T138789[esp+12], 0
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003f	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00044	8d 4c 24 04	 lea	 ecx, DWORD PTR $T138785[esp+16]
  00048	51		 push	 ecx
  00049	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T138785[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@2:
  00056	cc		 int	 3
??$_Allocate@_W@std@@YAPA_WIPA_W@Z ENDP			; std::_Allocate<wchar_t>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@0@@Z PROC ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

  00000	c3		 ret	 0
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@0@@Z PROC ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Allocate@K@std@@YAPAKIPAK@Z			; std::_Allocate<unsigned long>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@K@std@@YAPAKIPAK@Z
_TEXT	SEGMENT
$T138797 = -12						; size = 12
$T138801 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@K@std@@YAPAKIPAK@Z PROC			; std::_Allocate<unsigned long>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 16		 ja	 SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	c3		 ret	 0
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00021	83 c8 ff	 or	 eax, -1
  00024	33 d2		 xor	 edx, edx
  00026	f7 f1		 div	 ecx
  00028	83 f8 04	 cmp	 eax, 4
  0002b	73 e0		 jae	 SHORT $LN1@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002d	8d 44 24 10	 lea	 eax, DWORD PTR $T138801[esp+8]
  00031	50		 push	 eax
  00032	8d 4c 24 04	 lea	 ecx, DWORD PTR $T138797[esp+16]
  00036	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T138801[esp+12], 0
  0003e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00043	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00048	8d 4c 24 04	 lea	 ecx, DWORD PTR $T138797[esp+16]
  0004c	51		 push	 ecx
  0004d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T138797[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00055	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@3:
  0005a	cc		 int	 3
??$_Allocate@K@std@@YAPAKIPAK@Z ENDP			; std::_Allocate<unsigned long>
_TEXT	ENDS
PUBLIC	??$?0USecurityTokenKeyfile@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USecurityTokenKeyfile@CipherShed@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><CipherShed::SecurityTokenKeyfile>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0USecurityTokenKeyfile@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USecurityTokenKeyfile@CipherShed@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0USecurityTokenKeyfile@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USecurityTokenKeyfile@CipherShed@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><CipherShed::SecurityTokenKeyfile>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0USecurityTokenKeyfile@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USecurityTokenKeyfile@CipherShed@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><CipherShed::SecurityTokenKeyfile>
_TEXT	ENDS
PUBLIC	??$_Allocate@USecurityTokenKeyfile@CipherShed@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@IPAU12@@Z ; std::_Allocate<CipherShed::SecurityTokenKeyfile>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@USecurityTokenKeyfile@CipherShed@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@IPAU12@@Z
_TEXT	SEGMENT
$T138807 = -12						; size = 12
$T138811 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@USecurityTokenKeyfile@CipherShed@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@IPAU12@@Z PROC ; std::_Allocate<CipherShed::SecurityTokenKeyfile>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 12		 ja	 SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	c1 e1 07	 shl	 ecx, 7
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00016	83 c4 04	 add	 esp, 4

; 44   : 	}

  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	c3		 ret	 0
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001d	83 c8 ff	 or	 eax, -1
  00020	33 d2		 xor	 edx, edx
  00022	f7 f1		 div	 ecx
  00024	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00029	73 e2		 jae	 SHORT $LN1@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002b	8d 44 24 10	 lea	 eax, DWORD PTR $T138811[esp+8]
  0002f	50		 push	 eax
  00030	8d 4c 24 04	 lea	 ecx, DWORD PTR $T138807[esp+16]
  00034	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T138811[esp+12], 0
  0003c	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00041	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00046	8d 4c 24 04	 lea	 ecx, DWORD PTR $T138807[esp+16]
  0004a	51		 push	 ecx
  0004b	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T138807[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00053	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@4:
  00058	cc		 int	 3
??$_Allocate@USecurityTokenKeyfile@CipherShed@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@IPAU12@@Z ENDP ; std::_Allocate<CipherShed::SecurityTokenKeyfile>
_TEXT	ENDS
PUBLIC	??$?0E@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@E@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><unsigned char>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0E@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@E@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0E@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@E@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><unsigned char>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0E@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@E@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><unsigned char>
_TEXT	ENDS
PUBLIC	??$_Allocate@E@std@@YAPAEIPAE@Z			; std::_Allocate<unsigned char>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@E@std@@YAPAEIPAE@Z
_TEXT	SEGMENT
$T138817 = -12						; size = 12
$T138821 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@E@std@@YAPAEIPAE@Z PROC			; std::_Allocate<unsigned char>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 0f		 ja	 SHORT $LN3@Allocate@5

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@5:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00013	83 c4 04	 add	 esp, 4

; 44   : 	}

  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	c3		 ret	 0
$LN3@Allocate@5:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001a	83 c8 ff	 or	 eax, -1
  0001d	33 d2		 xor	 edx, edx
  0001f	f7 f1		 div	 ecx
  00021	83 f8 01	 cmp	 eax, 1
  00024	73 e7		 jae	 SHORT $LN1@Allocate@5

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T138821[esp+8]
  0002a	50		 push	 eax
  0002b	8d 4c 24 04	 lea	 ecx, DWORD PTR $T138817[esp+16]
  0002f	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T138821[esp+12], 0
  00037	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003c	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00041	8d 4c 24 04	 lea	 ecx, DWORD PTR $T138817[esp+16]
  00045	51		 push	 ecx
  00046	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T138817[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@5:
  00053	cc		 int	 3
??$_Allocate@E@std@@YAPAEIPAE@Z ENDP			; std::_Allocate<unsigned char>
_TEXT	ENDS
PUBLIC	??$?0K@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *><unsigned long>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0K@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0K@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z PROC ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *><unsigned long>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0K@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z ENDP ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *><unsigned long>
_TEXT	ENDS
PUBLIC	??$?0K@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@K@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><unsigned long>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0K@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@K@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0K@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@K@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><unsigned long>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0K@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@K@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><unsigned long>
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T138829 = -12						; size = 12
$T138833 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 16		 ja	 SHORT $LN3@Allocate@6

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@6:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 49	 lea	 edx, DWORD PTR [ecx+ecx*2]
  00010	03 d2		 add	 edx, edx
  00012	03 d2		 add	 edx, edx
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	c3		 ret	 0
$LN3@Allocate@6:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00021	83 c8 ff	 or	 eax, -1
  00024	33 d2		 xor	 edx, edx
  00026	f7 f1		 div	 ecx
  00028	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  0002b	73 e0		 jae	 SHORT $LN1@Allocate@6

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002d	8d 44 24 10	 lea	 eax, DWORD PTR $T138833[esp+8]
  00031	50		 push	 eax
  00032	8d 4c 24 04	 lea	 ecx, DWORD PTR $T138829[esp+16]
  00036	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T138833[esp+12], 0
  0003e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00043	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00048	8d 4c 24 04	 lea	 ecx, DWORD PTR $T138829[esp+16]
  0004c	51		 push	 ecx
  0004d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T138829[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00055	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@6:
  0005a	cc		 int	 3
??$_Allocate@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@ABQAU120@@Z ; std::_Construct<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *,std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Construct@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@ABQAU120@@Z PROC ; std::_Construct<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *,std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN3@Construct
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN3@Construct:

; 53   : 	}

  00010	c3		 ret	 0
??$_Construct@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *,std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@@Z ; std::_Destroy<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>
_TEXT	ENDS
PUBLIC	??$?0USecurityTokenInfo@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *>::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *><CipherShed::SecurityTokenInfo>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0USecurityTokenInfo@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0USecurityTokenInfo@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z PROC ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *>::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *><CipherShed::SecurityTokenInfo>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0USecurityTokenInfo@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *>::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *><CipherShed::SecurityTokenInfo>
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T138849 = -12						; size = 12
$T138853 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 18		 ja	 SHORT $LN3@Allocate@7

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@7:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 c9	 lea	 edx, DWORD PTR [ecx+ecx*8]
  00010	03 d2		 add	 edx, edx
  00012	03 d2		 add	 edx, edx
  00014	03 d2		 add	 edx, edx
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00022	c3		 ret	 0
$LN3@Allocate@7:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00023	83 c8 ff	 or	 eax, -1
  00026	33 d2		 xor	 edx, edx
  00028	f7 f1		 div	 ecx
  0002a	83 f8 48	 cmp	 eax, 72			; 00000048H
  0002d	73 de		 jae	 SHORT $LN1@Allocate@7

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002f	8d 44 24 10	 lea	 eax, DWORD PTR $T138853[esp+8]
  00033	50		 push	 eax
  00034	8d 4c 24 04	 lea	 ecx, DWORD PTR $T138849[esp+16]
  00038	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T138853[esp+12], 0
  00040	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00045	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004a	8d 4c 24 04	 lea	 ecx, DWORD PTR $T138849[esp+16]
  0004e	51		 push	 ecx
  0004f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T138849[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00057	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@7:
  0005c	cc		 int	 3
??$_Allocate@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *,std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Construct@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@ABQAU120@@Z PROC ; std::_Construct<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *,std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN3@Construct@2
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN3@Construct@2:

; 53   : 	}

  00010	c3		 ret	 0
??$_Construct@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *,std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z
_TEXT	SEGMENT
$T138867 = -12						; size = 12
$T138871 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z PROC ; std::_Allocate<std::_Aux_cont>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 16		 ja	 SHORT $LN3@Allocate@8

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@8:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	c3		 ret	 0
$LN3@Allocate@8:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00021	83 c8 ff	 or	 eax, -1
  00024	33 d2		 xor	 edx, edx
  00026	f7 f1		 div	 ecx
  00028	83 f8 04	 cmp	 eax, 4
  0002b	73 e0		 jae	 SHORT $LN1@Allocate@8

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002d	8d 44 24 10	 lea	 eax, DWORD PTR $T138871[esp+8]
  00031	50		 push	 eax
  00032	8d 4c 24 04	 lea	 ecx, DWORD PTR $T138867[esp+16]
  00036	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T138871[esp+12], 0
  0003e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00043	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00048	8d 4c 24 04	 lea	 ecx, DWORD PTR $T138867[esp+16]
  0004c	51		 push	 ecx
  0004d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T138867[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00055	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@8:
  0005a	cc		 int	 3
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ENDP ; std::_Allocate<std::_Aux_cont>
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *><std::pair<unsigned long const ,CipherShed::Pkcs11Session> >
; Function compile flags: /Ogtpy
;	COMDAT ??$?0U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *><std::pair<unsigned long const ,CipherShed::Pkcs11Session> >, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *><std::pair<unsigned long const ,CipherShed::Pkcs11Session> >
_TEXT	ENDS
PUBLIC	??$_Construct@KK@std@@YAXPAKABK@Z		; std::_Construct<unsigned long,unsigned long>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Construct@KK@std@@YAXPAKABK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@KK@std@@YAXPAKABK@Z PROC			; std::_Construct<unsigned long,unsigned long>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN3@Construct@3
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN3@Construct@3:

; 53   : 	}

  00010	c3		 ret	 0
??$_Construct@KK@std@@YAXPAKABK@Z ENDP			; std::_Construct<unsigned long,unsigned long>
_TEXT	ENDS
PUBLIC	??$?0K@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node><unsigned long>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0K@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0K@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z PROC ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node><unsigned long>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0K@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z ENDP ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node><unsigned long>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@@Z ; std::_Destroy<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

  00000	c3		 ret	 0
??$_Destroy@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>
_TEXT	ENDS
PUBLIC	??$?0USecurityTokenInfo@CipherShed@@@?$allocator@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node><CipherShed::SecurityTokenInfo>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0USecurityTokenInfo@CipherShed@@@?$allocator@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0USecurityTokenInfo@CipherShed@@@?$allocator@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z PROC ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node><CipherShed::SecurityTokenInfo>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0USecurityTokenInfo@CipherShed@@@?$allocator@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node><CipherShed::SecurityTokenInfo>
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node><std::pair<unsigned long const ,CipherShed::Pkcs11Session> >
; Function compile flags: /Ogtpy
;	COMDAT ??$?0U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node><std::pair<unsigned long const ,CipherShed::Pkcs11Session> >, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node><std::pair<unsigned long const ,CipherShed::Pkcs11Session> >
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T138893 = -12						; size = 12
$T138897 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 1c		 ja	 SHORT $LN3@Allocate@9

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@9:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 cd 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*8]
  00014	2b d1		 sub	 edx, ecx
  00016	03 d2		 add	 edx, edx
  00018	03 d2		 add	 edx, edx
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	83 c4 04	 add	 esp, 4

; 44   : 	}

  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	c3		 ret	 0
$LN3@Allocate@9:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00027	83 c8 ff	 or	 eax, -1
  0002a	33 d2		 xor	 edx, edx
  0002c	f7 f1		 div	 ecx
  0002e	83 f8 1c	 cmp	 eax, 28			; 0000001cH
  00031	73 da		 jae	 SHORT $LN1@Allocate@9

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00033	8d 44 24 10	 lea	 eax, DWORD PTR $T138897[esp+8]
  00037	50		 push	 eax
  00038	8d 4c 24 04	 lea	 ecx, DWORD PTR $T138893[esp+16]
  0003c	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T138897[esp+12], 0
  00044	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00049	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004e	8d 4c 24 04	 lea	 ecx, DWORD PTR $T138893[esp+16]
  00052	51		 push	 ecx
  00053	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T138893[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  0005b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@9:
  00060	cc		 int	 3
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@0@ABQAU120@@Z PROC ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN3@Construct@4
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN3@Construct@4:

; 53   : 	}

  00010	c3		 ret	 0
??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *>
_TEXT	ENDS
PUBLIC	??$?0USecurityTokenInfo@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><CipherShed::SecurityTokenInfo>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0USecurityTokenInfo@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0USecurityTokenInfo@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><CipherShed::SecurityTokenInfo>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0USecurityTokenInfo@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><CipherShed::SecurityTokenInfo>
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><std::pair<unsigned long const ,CipherShed::Pkcs11Session> >
; Function compile flags: /Ogtpy
;	COMDAT ??$?0U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><std::pair<unsigned long const ,CipherShed::Pkcs11Session> >, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><std::pair<unsigned long const ,CipherShed::Pkcs11Session> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputn, COMDAT
; _this$ = ecx

; 168  : 		return (xsputn(_Ptr, _Count));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00005	ff e0		 jmp	 eax
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputn
_TEXT	ENDS
PUBLIC	?sputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHPB_WH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputn
; Function compile flags: /Ogtpy
;	COMDAT ?sputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHPB_WH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?sputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHPB_WH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputn, COMDAT
; _this$ = ecx

; 168  : 		return (xsputn(_Ptr, _Count));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00005	ff e0		 jmp	 eax
?sputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHPB_WH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputn
_TEXT	ENDS
PUBLIC	?get_allocator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::get_allocator
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?get_allocator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::get_allocator, COMDAT
; _this$ = ecx

; 616  : 		return (this->_Alval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 617  : 		}

  00004	c2 04 00	 ret	 4
?get_allocator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::get_allocator
_TEXT	ENDS
PUBLIC	?key_comp@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AU?$less@K@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::key_comp
; Function compile flags: /Ogtpy
;	COMDAT ?key_comp@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AU?$less@K@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?key_comp@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AU?$less@K@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::key_comp, COMDAT
; _this$ = ecx

; 621  : 		return (this->comp);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 622  : 		}

  00004	c2 04 00	 ret	 4
?key_comp@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AU?$less@K@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::key_comp
_TEXT	ENDS
PUBLIC	?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init, COMDAT
; _this$ = ecx

; 1046 : 		{	// initialize from _Locinfo object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1047 : 		_Cvt = _Lobj._Getcvt();

  00003	e8 00 00 00 00	 call	 __Getcvt
  00008	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0000b	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0000e	5e		 pop	 esi

; 1048 : 		}

  0000f	c2 04 00	 ret	 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
_TEXT	ENDS
PUBLIC	?_Init@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
?_Init@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Init, COMDAT
; _this$ = ecx

; 1046 : 		{	// initialize from _Locinfo object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1047 : 		_Cvt = _Lobj._Getcvt();

  00003	e8 00 00 00 00	 call	 __Getcvt
  00008	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0000b	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0000e	5e		 pop	 esi

; 1048 : 		}

  0000f	c2 04 00	 ret	 4
?_Init@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Init
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<char> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 598  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<wchar_t> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 598  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAEPAE@std@@YA?AUrandom_access_iterator_tag@0@ABQAE0@Z ; std::_Iter_random<unsigned char *,unsigned char *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@PAEPAE@std@@YA?AUrandom_access_iterator_tag@0@ABQAE0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAEPAE@std@@YA?AUrandom_access_iterator_tag@0@ABQAE0@Z PROC ; std::_Iter_random<unsigned char *,unsigned char *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

  00004	c3		 ret	 0
??$_Iter_random@PAEPAE@std@@YA?AUrandom_access_iterator_tag@0@ABQAE0@Z ENDP ; std::_Iter_random<unsigned char *,unsigned char *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAEPAE@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAE0@Z ; std::_Ptr_cat<unsigned char *,unsigned char *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAEPAE@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAE0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAEPAE@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAE0@Z PROC ; std::_Ptr_cat<unsigned char *,unsigned char *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@PAEPAE@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAE0@Z ENDP ; std::_Ptr_cat<unsigned char *,unsigned char *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAEPAEUrandom_access_iterator_tag@std@@@std@@YAPAEPAE00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<unsigned char *,unsigned char *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@PAEPAEUrandom_access_iterator_tag@std@@@std@@YAPAEPAE00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAEPAEUrandom_access_iterator_tag@std@@@std@@YAPAEPAE00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<unsigned char *,unsigned char *,std::random_access_iterator_tag>, COMDAT

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Dest$[esp-4]
  0000c	2b c1		 sub	 eax, ecx
  0000e	56		 push	 esi
  0000f	8d 34 10	 lea	 esi, DWORD PTR [eax+edx]

; 2505 : 	if (_Off > 0)

  00012	85 c0		 test	 eax, eax
  00014	7e 0c		 jle	 SHORT $LN4@Copy_opt

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

  00016	50		 push	 eax
  00017	51		 push	 ecx
  00018	50		 push	 eax
  00019	52		 push	 edx
  0001a	e8 00 00 00 00	 call	 _memmove_s
  0001f	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@Copy_opt:

; 2507 : 	return _Result;

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi

; 2508 : 	}

  00025	c3		 ret	 0
??$_Copy_opt@PAEPAEUrandom_access_iterator_tag@std@@@std@@YAPAEPAE00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<unsigned char *,unsigned char *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Iter_cat@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@0@@Z ; std::_Iter_cat<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_cat@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@0@@Z PROC ; std::_Iter_cat<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >, COMDAT

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 955  : 	}

  00004	c3		 ret	 0
??$_Iter_cat@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@0@@Z ENDP ; std::_Iter_cat<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	??$_Iter_cat@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@@Z ; std::_Iter_cat<std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_cat@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@@Z PROC ; std::_Iter_cat<std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1> >, COMDAT

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 955  : 	}

  00004	c3		 ret	 0
??$_Iter_cat@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@@Z ENDP ; std::_Iter_cat<std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUSecurityTokenKeyfile@CipherShed@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSecurityTokenKeyfile@CipherShed@@0@Z ; std::_Ptr_cat<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUSecurityTokenKeyfile@CipherShed@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSecurityTokenKeyfile@CipherShed@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUSecurityTokenKeyfile@CipherShed@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSecurityTokenKeyfile@CipherShed@@0@Z PROC ; std::_Ptr_cat<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@PAUSecurityTokenKeyfile@CipherShed@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSecurityTokenKeyfile@CipherShed@@0@Z ENDP ; std::_Ptr_cat<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned char> >, COMDAT

; 242  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAKPAK@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAK0@Z ; std::_Ptr_cat<unsigned long *,unsigned long *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAKPAK@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAK0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAKPAK@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAK0@Z PROC ; std::_Ptr_cat<unsigned long *,unsigned long *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@PAKPAK@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAK0@Z ENDP ; std::_Ptr_cat<unsigned long *,unsigned long *>
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 625  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 625  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUSecurityTokenKeyfile@CipherShed@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSecurityTokenKeyfile@CipherShed@@0@Z ; std::_Iter_random<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@PAUSecurityTokenKeyfile@CipherShed@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSecurityTokenKeyfile@CipherShed@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUSecurityTokenKeyfile@CipherShed@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSecurityTokenKeyfile@CipherShed@@0@Z PROC ; std::_Iter_random<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

  00004	c3		 ret	 0
??$_Iter_random@PAUSecurityTokenKeyfile@CipherShed@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSecurityTokenKeyfile@CipherShed@@0@Z ENDP ; std::_Iter_random<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *>
_TEXT	ENDS
PUBLIC	??$_Move_cat@PAUSecurityTokenKeyfile@CipherShed@@@std@@YA?AU_Undefined_move_tag@0@ABQAUSecurityTokenKeyfile@CipherShed@@@Z ; std::_Move_cat<CipherShed::SecurityTokenKeyfile *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_cat@PAUSecurityTokenKeyfile@CipherShed@@@std@@YA?AU_Undefined_move_tag@0@ABQAUSecurityTokenKeyfile@CipherShed@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUSecurityTokenKeyfile@CipherShed@@@std@@YA?AU_Undefined_move_tag@0@ABQAUSecurityTokenKeyfile@CipherShed@@@Z PROC ; std::_Move_cat<CipherShed::SecurityTokenKeyfile *>, COMDAT

; 1200 : 	{

  00000	51		 push	 ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1203 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Move_cat@PAUSecurityTokenKeyfile@CipherShed@@@std@@YA?AU_Undefined_move_tag@0@ABQAUSecurityTokenKeyfile@CipherShed@@@Z ENDP ; std::_Move_cat<CipherShed::SecurityTokenKeyfile *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAEE@std@@YAXPAE0ABE@Z			; std::_Fill<unsigned char *,unsigned char>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Fill@PAEE@std@@YAXPAE0ABE@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAEE@std@@YAXPAE0ABE@Z PROC			; std::_Fill<unsigned char *,unsigned char>, COMDAT

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	3b c1		 cmp	 eax, ecx
  0000a	74 0f		 je	 SHORT $LN1@Fill
  0000c	56		 push	 esi
  0000d	8b 74 24 10	 mov	 esi, DWORD PTR __Val$[esp]
$LL3@Fill:

; 3159 : 		*_First = _Val;

  00011	8a 16		 mov	 dl, BYTE PTR [esi]
  00013	88 10		 mov	 BYTE PTR [eax], dl
  00015	40		 inc	 eax
  00016	3b c1		 cmp	 eax, ecx
  00018	75 f7		 jne	 SHORT $LL3@Fill
  0001a	5e		 pop	 esi
$LN1@Fill:

; 3160 : 	}

  0001b	c3		 ret	 0
??$_Fill@PAEE@std@@YAXPAE0ABE@Z ENDP			; std::_Fill<unsigned char *,unsigned char>
_TEXT	ENDS
PUBLIC	??$_Move_cat@PAE@std@@YA?AU_Undefined_move_tag@0@ABQAE@Z ; std::_Move_cat<unsigned char *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_cat@PAE@std@@YA?AU_Undefined_move_tag@0@ABQAE@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAE@std@@YA?AU_Undefined_move_tag@0@ABQAE@Z PROC ; std::_Move_cat<unsigned char *>, COMDAT

; 1200 : 	{

  00000	51		 push	 ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1203 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Move_cat@PAE@std@@YA?AU_Undefined_move_tag@0@ABQAE@Z ENDP ; std::_Move_cat<unsigned char *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned long> >, COMDAT

; 242  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$_Fill@PAKK@std@@YAXPAK0ABK@Z			; std::_Fill<unsigned long *,unsigned long>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Fill@PAKK@std@@YAXPAK0ABK@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAKK@std@@YAXPAK0ABK@Z PROC			; std::_Fill<unsigned long *,unsigned long>, COMDAT

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	3b c1		 cmp	 eax, ecx
  0000a	74 11		 je	 SHORT $LN1@Fill@2
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$LL3@Fill@2:

; 3159 : 		*_First = _Val;

  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	3b c1		 cmp	 eax, ecx
  0001a	75 f5		 jne	 SHORT $LL3@Fill@2
  0001c	5e		 pop	 esi
$LN1@Fill@2:

; 3160 : 	}

  0001d	c3		 ret	 0
??$_Fill@PAKK@std@@YAXPAK0ABK@Z ENDP			; std::_Fill<unsigned long *,unsigned long>
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAKPAK@std@@YA?AUrandom_access_iterator_tag@0@ABQAK0@Z ; std::_Iter_random<unsigned long *,unsigned long *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_random@PAKPAK@std@@YA?AUrandom_access_iterator_tag@0@ABQAK0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAKPAK@std@@YA?AUrandom_access_iterator_tag@0@ABQAK0@Z PROC ; std::_Iter_random<unsigned long *,unsigned long *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

  00004	c3		 ret	 0
??$_Iter_random@PAKPAK@std@@YA?AUrandom_access_iterator_tag@0@ABQAK0@Z ENDP ; std::_Iter_random<unsigned long *,unsigned long *>
_TEXT	ENDS
PUBLIC	??$_Move_cat@PAK@std@@YA?AU_Undefined_move_tag@0@ABQAK@Z ; std::_Move_cat<unsigned long *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_cat@PAK@std@@YA?AU_Undefined_move_tag@0@ABQAK@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAK@std@@YA?AU_Undefined_move_tag@0@ABQAK@Z PROC ; std::_Move_cat<unsigned long *>, COMDAT

; 1200 : 	{

  00000	51		 push	 ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1203 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Move_cat@PAK@std@@YA?AU_Undefined_move_tag@0@ABQAK@Z ENDP ; std::_Move_cat<unsigned long *>
_TEXT	ENDS
PUBLIC	??F?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator--
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??F?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??F?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator--, COMDAT
; _this$ = ecx

; 262  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 263  : 
; 264  :  #if _HAS_ITERATOR_DEBUGGING
; 265  : 			if (this->_Mycont == 0
; 266  : 				|| _Ptr == 0
; 267  : 				|| (_Ptr = _Prevnode(_Ptr))
; 268  : 					== ((_Myt *)this->_Mycont)->_Myhead)
; 269  : 				{
; 270  : 				_DEBUG_ERROR("list iterator not decrementable");
; 271  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 272  : 				}
; 273  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 274  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	75 05		 jne	 SHORT $LN3@operator@19
  00008	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@19:

; 275  : 			_Ptr = _Prevnode(_Ptr);

  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00010	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 276  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00018	85 c0		 test	 eax, eax
  0001a	74 04		 je	 SHORT $LN13@operator@19
  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
  0001e	eb 02		 jmp	 SHORT $LN14@operator@19
$LN13@operator@19:
  00020	33 c0		 xor	 eax, eax
$LN14@operator@19:
  00022	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00025	75 05		 jne	 SHORT $LN17@operator@19
  00027	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN17@operator@19:

; 277  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 278  : 
; 279  : 			return (*this);

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi

; 280  : 			}

  0002f	c3		 ret	 0
??F?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator--
_TEXT	ENDS
PUBLIC	??D?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBEABUSecurityTokenInfo@CipherShed@@XZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator*
; Function compile flags: /Ogtpy
;	COMDAT ??D?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBEABUSecurityTokenInfo@CipherShed@@XZ
_TEXT	SEGMENT
??D?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBEABUSecurityTokenInfo@CipherShed@@XZ PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator*, COMDAT
; _this$ = ecx

; 211  : 			{	// return designated value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 212  : 
; 213  :  #if _HAS_ITERATOR_DEBUGGING
; 214  : 			if (this->_Mycont == 0
; 215  : 				|| _Ptr == 0
; 216  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 217  : 				{
; 218  : 				_DEBUG_ERROR("list iterator not dereferencable");
; 219  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 220  : 				}
; 221  :  #else
; 222  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN17@operator@20
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 223  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN11@operator@20
$LN17@operator@20:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN12@operator@20
$LN11@operator@20:
  00018	33 c0		 xor	 eax, eax
$LN12@operator@20:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN1@operator@20
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN1@operator@20:

; 224  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 225  : 
; 226  : 			return (_Myval(_Ptr));

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 c0 08	 add	 eax, 8
  0002d	5e		 pop	 esi

; 227  : 			}

  0002e	c3		 ret	 0
??D?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBEABUSecurityTokenInfo@CipherShed@@XZ ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator*
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??E?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEAAV012@XZ PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx

; 235  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 236  : 
; 237  :  #if _HAS_ITERATOR_DEBUGGING
; 238  : 			if (this->_Mycont == 0
; 239  : 				|| _Ptr == 0
; 240  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 241  : 				{
; 242  : 				_DEBUG_ERROR("list iterator not incrementable");
; 243  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 244  : 				}
; 245  :  #else
; 246  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN17@operator@21
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 247  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN11@operator@21
$LN17@operator@21:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN12@operator@21
$LN11@operator@21:
  00018	33 c0		 xor	 eax, eax
$LN12@operator@21:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN1@operator@21
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN1@operator@21:

; 248  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 249  : 
; 250  : 			_Ptr = _Nextnode(_Ptr);

  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	8b 02		 mov	 eax, DWORD PTR [edx]
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 251  : 			return (*this);

  0002f	8b c6		 mov	 eax, esi
  00031	5e		 pop	 esi

; 252  : 			}

  00032	c3		 ret	 0
??E?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator++
_TEXT	ENDS
PUBLIC	??F?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator--
; Function compile flags: /Ogtpy
;	COMDAT ??F?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??F?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEAAV012@XZ PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator--, COMDAT
; _this$ = ecx

; 262  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 263  : 
; 264  :  #if _HAS_ITERATOR_DEBUGGING
; 265  : 			if (this->_Mycont == 0
; 266  : 				|| _Ptr == 0
; 267  : 				|| (_Ptr = _Prevnode(_Ptr))
; 268  : 					== ((_Myt *)this->_Mycont)->_Myhead)
; 269  : 				{
; 270  : 				_DEBUG_ERROR("list iterator not decrementable");
; 271  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 272  : 				}
; 273  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 274  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	75 05		 jne	 SHORT $LN3@operator@22
  00008	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@22:

; 275  : 			_Ptr = _Prevnode(_Ptr);

  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00010	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 276  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00018	85 c0		 test	 eax, eax
  0001a	74 04		 je	 SHORT $LN13@operator@22
  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
  0001e	eb 02		 jmp	 SHORT $LN14@operator@22
$LN13@operator@22:
  00020	33 c0		 xor	 eax, eax
$LN14@operator@22:
  00022	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00025	75 05		 jne	 SHORT $LN17@operator@22
  00027	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN17@operator@22:

; 277  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 278  : 
; 279  : 			return (*this);

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi

; 280  : 			}

  0002f	c3		 ret	 0
??F?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator--
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
EXTRN	?_Xran@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xran
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__Count$ = 20						; size = 4
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare, COMDAT
; _this$ = ecx

; 2038 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 2039 : 
; 2040 :  #if _HAS_ITERATOR_DEBUGGING
; 2041 : 		if (_Count != 0)
; 2042 : 			_DEBUG_POINTER(_Ptr);
; 2043 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2044 : 
; 2045 : 		if (_Mysize < _Off)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Off$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	39 6f 14	 cmp	 DWORD PTR [edi+20], ebp
  0000d	73 05		 jae	 SHORT $LN2@compare@2

; 2046 : 			_String_base::_Xran();	// _Off off end

  0000f	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN2@compare@2:

; 2047 : 		if (_Mysize - _Off < _N0)

  00014	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00017	8b 74 24 18	 mov	 esi, DWORD PTR __N0$[esp+12]
  0001b	2b c5		 sub	 eax, ebp
  0001d	3b c6		 cmp	 eax, esi
  0001f	73 02		 jae	 SHORT $LN1@compare@2

; 2048 : 			_N0 = _Mysize - _Off;	// trim _N0 to size

  00021	8b f0		 mov	 esi, eax
$LN1@compare@2:

; 2049 : 
; 2050 : 		size_type _Ans = _Traits::compare(_Myptr() + _Off, _Ptr,
; 2051 : 			_N0 < _Count ? _N0 : _Count);

  00023	8b 5c 24 20	 mov	 ebx, DWORD PTR __Count$[esp+12]
  00027	8b c6		 mov	 eax, esi
  00029	3b f3		 cmp	 esi, ebx
  0002b	72 02		 jb	 SHORT $LN6@compare@2
  0002d	8b c3		 mov	 eax, ebx
$LN6@compare@2:
  0002f	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  00033	72 05		 jb	 SHORT $LN13@compare@2
  00035	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  00038	eb 03		 jmp	 SHORT $LN14@compare@2
$LN13@compare@2:
  0003a	83 c7 04	 add	 edi, 4
$LN14@compare@2:
  0003d	50		 push	 eax
  0003e	8b 44 24 20	 mov	 eax, DWORD PTR __Ptr$[esp+16]
  00042	50		 push	 eax
  00043	8d 0c 6f	 lea	 ecx, DWORD PTR [edi+ebp*2]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 _wmemcmp
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2052 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2053 : 			: _N0 == _Count ? 0 : +1);

  0004f	85 c0		 test	 eax, eax
  00051	75 15		 jne	 SHORT $LN8@compare@2
  00053	3b f3		 cmp	 esi, ebx
  00055	73 0a		 jae	 SHORT $LN7@compare@2
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	83 c8 ff	 or	 eax, -1
  0005d	5b		 pop	 ebx

; 2054 : 		}

  0005e	c2 10 00	 ret	 16			; 00000010H
$LN7@compare@2:

; 2052 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2053 : 			: _N0 == _Count ? 0 : +1);

  00061	33 c0		 xor	 eax, eax
  00063	3b f3		 cmp	 esi, ebx
  00065	0f 95 c0	 setne	 al
$LN8@compare@2:
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5d		 pop	 ebp
  0006b	5b		 pop	 ebx

; 2054 : 		}

  0006c	c2 10 00	 ret	 16			; 00000010H
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE?AV012@H@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??E?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE?AV012@H@Z PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx

; 255  : 			{	// postincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 256  : 			_Myt_iter _Tmp = *this;

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00008	57		 push	 edi
  00009	8b 7c 24 0c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000d	89 07		 mov	 DWORD PTR [edi], eax
  0000f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 257  : 			++*this;

  00012	85 c0		 test	 eax, eax
  00014	75 0b		 jne	 SHORT $LN19@operator@23
  00016	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0001b	8b 06		 mov	 eax, DWORD PTR [esi]
  0001d	85 c0		 test	 eax, eax
  0001f	74 04		 je	 SHORT $LN13@operator@23
$LN19@operator@23:
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	eb 02		 jmp	 SHORT $LN14@operator@23
$LN13@operator@23:
  00025	33 c0		 xor	 eax, eax
$LN14@operator@23:
  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	3b 50 14	 cmp	 edx, DWORD PTR [eax+20]
  0002d	75 05		 jne	 SHORT $LN3@operator@23
  0002f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@23:
  00034	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]

; 258  : 			return (_Tmp);

  00039	8b c7		 mov	 eax, edi
  0003b	5f		 pop	 edi
  0003c	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0003f	5e		 pop	 esi

; 259  : 			}

  00040	c2 08 00	 ret	 8
??E?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE?AV012@H@Z ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator++
_TEXT	ENDS
PUBLIC	??8?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE_NABV012@@Z PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator==, COMDAT
; _this$ = ecx

; 290  : 			{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 291  : 
; 292  :  #if _HAS_ITERATOR_DEBUGGING
; 293  : 			_Compat(_Right);
; 294  :  #else
; 295  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN1@operator@24
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN2@operator@24
$LN1@operator@24:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN2@operator@24:

; 296  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 297  : 
; 298  : 			return (_Ptr == _Right._Ptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 299  : 			}

  00026	c2 04 00	 ret	 4
??8?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator==
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAUSecurityTokenKeyfile@CipherShed@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@0@AAPAUSecurityTokenKeyfile@CipherShed@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >,CipherShed::SecurityTokenKeyfile *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAUSecurityTokenKeyfile@CipherShed@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@0@AAPAUSecurityTokenKeyfile@CipherShed@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAUSecurityTokenKeyfile@CipherShed@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@0@AAPAUSecurityTokenKeyfile@CipherShed@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >,CipherShed::SecurityTokenKeyfile *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAUSecurityTokenKeyfile@CipherShed@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@0@AAPAUSecurityTokenKeyfile@CipherShed@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >,CipherShed::SecurityTokenKeyfile *>
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAE@std@@YAPAEAAPAEU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<unsigned char *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Checked_base@PAE@std@@YAPAEAAPAEU_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAE@std@@YAPAEAAPAEU_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<unsigned char *>, COMDAT

; 1147 : 		return _It;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 1148 : 	}

  00006	c3		 ret	 0
??$_Checked_base@PAE@std@@YAPAEAAPAEU_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<unsigned char *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAEPAEV?$allocator@E@std@@@std@@YAPAEPAE00AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<unsigned char *,unsigned char *,std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@PAEPAEV?$allocator@E@std@@@std@@YAPAEPAE00AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAEPAEV?$allocator@E@std@@@std@@YAPAEPAE00AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<unsigned char *,unsigned char *,std::allocator<unsigned char> >, COMDAT

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]

; 149  : 	_FwdIt _Result = _Dest + _Count;

  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Dest$[esp-4]
  0000c	2b c1		 sub	 eax, ecx
  0000e	56		 push	 esi
  0000f	8d 34 10	 lea	 esi, DWORD PTR [eax+edx]

; 150  : 	if (_Count > 0)

  00012	74 0c		 je	 SHORT $LN4@Uninit_cop

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

  00014	50		 push	 eax
  00015	51		 push	 ecx
  00016	50		 push	 eax
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 _memmove_s
  0001d	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@Uninit_cop:

; 152  : 	return (_Result);

  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi

; 153  : 	}

  00023	c3		 ret	 0
??$_Uninit_copy@PAEPAEV?$allocator@E@std@@@std@@YAPAEPAE00AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<unsigned char *,unsigned char *,std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@PAK@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@KV?$allocator@K@std@@@0@AAPAK@Z ; std::_Ptr_cat<std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >,unsigned long *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@PAK@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@KV?$allocator@K@std@@@0@AAPAK@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@PAK@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@KV?$allocator@K@std@@@0@AAPAK@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >,unsigned long *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@PAK@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@KV?$allocator@K@std@@@0@AAPAK@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >,unsigned long *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBKPAKV?$allocator@K@std@@@std@@YAPAKPBK0PAKAAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<unsigned long const *,unsigned long *,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@PBKPAKV?$allocator@K@std@@@std@@YAPAKPBK0PAKAAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBKPAKV?$allocator@K@std@@@std@@YAPAKPBK0PAKAAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<unsigned long const *,unsigned long *,std::allocator<unsigned long> >, COMDAT

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	2b c2		 sub	 eax, edx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	57		 push	 edi

; 149  : 	_FwdIt _Result = _Dest + _Count;

  0000f	8b 7c 24 14	 mov	 edi, DWORD PTR __Dest$[esp+4]
  00013	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0001a	8d 34 39	 lea	 esi, DWORD PTR [ecx+edi]

; 150  : 	if (_Count > 0)

  0001d	85 c0		 test	 eax, eax
  0001f	76 0c		 jbe	 SHORT $LN4@Uninit_cop@2

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

  00021	51		 push	 ecx
  00022	52		 push	 edx
  00023	51		 push	 ecx
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 _memmove_s
  0002a	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@Uninit_cop@2:
  0002d	5f		 pop	 edi

; 152  : 	return (_Result);

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi

; 153  : 	}

  00031	c3		 ret	 0
??$_Uninit_copy@PBKPAKV?$allocator@K@std@@@std@@YAPAKPBK0PAKAAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<unsigned long const *,unsigned long *,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUSecurityTokenKeyfile@CipherShed@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<CipherShed::SecurityTokenKeyfile *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUSecurityTokenKeyfile@CipherShed@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUSecurityTokenKeyfile@CipherShed@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<CipherShed::SecurityTokenKeyfile *>, COMDAT

; 1147 : 		return _It;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 1148 : 	}

  00006	c3		 ret	 0
??$_Checked_base@PAUSecurityTokenKeyfile@CipherShed@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<CipherShed::SecurityTokenKeyfile *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAEPAEUrandom_access_iterator_tag@std@@@std@@YAPAEPAE00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<unsigned char *,unsigned char *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAEPAEUrandom_access_iterator_tag@std@@@std@@YAPAEPAE00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAEPAEUrandom_access_iterator_tag@std@@@std@@YAPAEPAE00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<unsigned char *,unsigned char *,std::random_access_iterator_tag>, COMDAT

; 2699 : 
; 2700 :  #if _HAS_ITERATOR_DEBUGGING
; 2701 : 	_DEBUG_RANGE(_First, _Last);
; 2702 : 	if (_First != _Last)
; 2703 : 		_DEBUG_POINTER(_Dest);
; 2704 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2705 : 
; 2706 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi

; 2707 : 	/* if _OutIt is range checked, this will make sure there is enough space for 
; 2708 : 	 * the memmove
; 2709 : 	 */
; 2710 : 	_OutIt _Result = _Dest - _Off;

  00009	8b 74 24 10	 mov	 esi, DWORD PTR __Dest$[esp]
  0000d	2b c1		 sub	 eax, ecx
  0000f	2b f0		 sub	 esi, eax

; 2711 : 	if (_Off > 0)

  00011	85 c0		 test	 eax, eax
  00013	7e 0c		 jle	 SHORT $LN4@Copy_backw

; 2712 : 		_CRT_SECURE_MEMMOVE(&*_Result, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	50		 push	 eax
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 _memmove_s
  0001e	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@Copy_backw:

; 2713 : 	return _Result;

  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi

; 2714 : 	}

  00024	c3		 ret	 0
??$_Copy_backward_opt@PAEPAEUrandom_access_iterator_tag@std@@@std@@YAPAEPAE00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<unsigned char *,unsigned char *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAK@std@@YAPAKAAPAKU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<unsigned long *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Checked_base@PAK@std@@YAPAKAAPAKU_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAK@std@@YAPAKAAPAKU_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<unsigned long *>, COMDAT

; 1147 : 		return _It;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 1148 : 	}

  00006	c3		 ret	 0
??$_Checked_base@PAK@std@@YAPAKAAPAKU_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<unsigned long *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAKPAKUrandom_access_iterator_tag@std@@@std@@YAPAKPAK00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<unsigned long *,unsigned long *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAKPAKUrandom_access_iterator_tag@std@@@std@@YAPAKPAK00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAKPAKUrandom_access_iterator_tag@std@@@std@@YAPAKPAK00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<unsigned long *,unsigned long *,std::random_access_iterator_tag>, COMDAT

; 2699 : 
; 2700 :  #if _HAS_ITERATOR_DEBUGGING
; 2701 : 	_DEBUG_RANGE(_First, _Last);
; 2702 : 	if (_First != _Last)
; 2703 : 		_DEBUG_POINTER(_Dest);
; 2704 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2705 : 
; 2706 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	2b c2		 sub	 eax, edx
  0000a	c1 f8 02	 sar	 eax, 2
  0000d	56		 push	 esi

; 2707 : 	/* if _OutIt is range checked, this will make sure there is enough space for 
; 2708 : 	 * the memmove
; 2709 : 	 */
; 2710 : 	_OutIt _Result = _Dest - _Off;

  0000e	8b 74 24 10	 mov	 esi, DWORD PTR __Dest$[esp]
  00012	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  00019	2b f1		 sub	 esi, ecx

; 2711 : 	if (_Off > 0)

  0001b	85 c0		 test	 eax, eax
  0001d	7e 0c		 jle	 SHORT $LN4@Copy_backw@2

; 2712 : 		_CRT_SECURE_MEMMOVE(&*_Result, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	51		 push	 ecx
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 _memmove_s
  00028	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@Copy_backw@2:

; 2713 : 	return _Result;

  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 2714 : 	}

  0002e	c3		 ret	 0
??$_Copy_backward_opt@PAKPAKUrandom_access_iterator_tag@std@@@std@@YAPAKPAK00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<unsigned long *,unsigned long *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Iter_cat@PAE@std@@YA?AUrandom_access_iterator_tag@0@ABQAE@Z ; std::_Iter_cat<unsigned char *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_cat@PAE@std@@YA?AUrandom_access_iterator_tag@0@ABQAE@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAE@std@@YA?AUrandom_access_iterator_tag@0@ABQAE@Z PROC ; std::_Iter_cat<unsigned char *>, COMDAT

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 955  : 	}

  00004	c3		 ret	 0
??$_Iter_cat@PAE@std@@YA?AUrandom_access_iterator_tag@0@ABQAE@Z ENDP ; std::_Iter_cat<unsigned char *>
_TEXT	ENDS
PUBLIC	??$_Iter_cat@PAK@std@@YA?AUrandom_access_iterator_tag@0@ABQAK@Z ; std::_Iter_cat<unsigned long *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_cat@PAK@std@@YA?AUrandom_access_iterator_tag@0@ABQAK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAK@std@@YA?AUrandom_access_iterator_tag@0@ABQAK@Z PROC ; std::_Iter_cat<unsigned long *>, COMDAT

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 955  : 	}

  00004	c3		 ret	 0
??$_Iter_cat@PAK@std@@YA?AUrandom_access_iterator_tag@0@ABQAK@Z ENDP ; std::_Iter_cat<unsigned long *>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEPBUSecurityTokenKeyfile@CipherShed@@XZ ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Checked_iterator_base
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEPBUSecurityTokenKeyfile@CipherShed@@XZ
_TEXT	SEGMENT
?_Checked_iterator_base@?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEPBUSecurityTokenKeyfile@CipherShed@@XZ PROC ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 47   : 		return _Myptr;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 48   : 	}

  00003	c3		 ret	 0
?_Checked_iterator_base@?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEPBUSecurityTokenKeyfile@CipherShed@@XZ ENDP ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Checked_iterator_base
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBEPBKXZ ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::_Checked_iterator_base
; Function compile flags: /Ogtpy
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBEPBKXZ
_TEXT	SEGMENT
?_Checked_iterator_base@?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBEPBKXZ PROC ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 47   : 		return _Myptr;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 48   : 	}

  00003	c3		 ret	 0
?_Checked_iterator_base@?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBEPBKXZ ENDP ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::_Checked_iterator_base
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAEIE@std@@YAXPAEIABEU_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<unsigned char *,unsigned int,unsigned char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Fill_n@PAEIE@std@@YAXPAEIABEU_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_n@PAEIE@std@@YAXPAEIABEU_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<unsigned char *,unsigned int,unsigned char>, COMDAT

; 3197 : 	for (; 0 < _Count; --_Count, ++_First)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	76 14		 jbe	 SHORT $LN1@Fill_n
  00008	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 10	 mov	 esi, DWORD PTR __Val$[esp]
$LL3@Fill_n:

; 3198 : 		*_First = _Val;

  00011	8a 16		 mov	 dl, BYTE PTR [esi]
  00013	88 11		 mov	 BYTE PTR [ecx], dl
  00015	48		 dec	 eax
  00016	41		 inc	 ecx
  00017	85 c0		 test	 eax, eax
  00019	77 f6		 ja	 SHORT $LL3@Fill_n
  0001b	5e		 pop	 esi
$LN1@Fill_n:

; 3199 : 	}

  0001c	c3		 ret	 0
??$_Fill_n@PAEIE@std@@YAXPAEIABEU_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<unsigned char *,unsigned int,unsigned char>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAKIK@std@@YAXPAKIABKU_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<unsigned long *,unsigned int,unsigned long>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Fill_n@PAKIK@std@@YAXPAKIABKU_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_n@PAKIK@std@@YAXPAKIABKU_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<unsigned long *,unsigned int,unsigned long>, COMDAT

; 3197 : 	for (; 0 < _Count; --_Count, ++_First)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	76 16		 jbe	 SHORT $LN1@Fill_n@2
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  0000c	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00010	56		 push	 esi
$LL3@Fill_n@2:

; 3198 : 		*_First = _Val;

  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 31		 mov	 DWORD PTR [ecx], esi
  00015	48		 dec	 eax
  00016	83 c1 04	 add	 ecx, 4
  00019	85 c0		 test	 eax, eax
  0001b	77 f4		 ja	 SHORT $LL3@Fill_n@2
  0001d	5e		 pop	 esi
$LN1@Fill_n@2:

; 3199 : 	}

  0001e	c3		 ret	 0
??$_Fill_n@PAKIK@std@@YAXPAKIABKU_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<unsigned long *,unsigned int,unsigned long>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<unsigned long *,unsigned long *,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<unsigned long *,unsigned long *,std::allocator<unsigned long> >, COMDAT

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	2b c2		 sub	 eax, edx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	57		 push	 edi

; 149  : 	_FwdIt _Result = _Dest + _Count;

  0000f	8b 7c 24 14	 mov	 edi, DWORD PTR __Dest$[esp+4]
  00013	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0001a	8d 34 39	 lea	 esi, DWORD PTR [ecx+edi]

; 150  : 	if (_Count > 0)

  0001d	85 c0		 test	 eax, eax
  0001f	76 0c		 jbe	 SHORT $LN4@Uninit_cop@3

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

  00021	51		 push	 ecx
  00022	52		 push	 edx
  00023	51		 push	 ecx
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 _memmove_s
  0002a	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@Uninit_cop@3:
  0002d	5f		 pop	 edi

; 152  : 	return (_Result);

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi

; 153  : 	}

  00031	c3		 ret	 0
??$_Uninit_copy@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<unsigned long *,unsigned long *,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z		; std::ctype<char>::ctype<char>
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z	; std::ctype<char>::_Do_widen_s
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z	; std::ctype<char>::_Do_narrow_s
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
	DD	FLAT:?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
CONST	ENDS
;	COMDAT ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
$T139242 = -16						; size = 16
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<char>::ctype<char>, COMDAT
; _this$ = ecx

; 1784 : 		{	// construct from current locale

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Refs$[esp-4]
  00004	83 ec 10	 sub	 esp, 16			; 00000010H
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1785 : 		_Init(_Lobj);

  0000a	8d 4c 24 04	 lea	 ecx, DWORD PTR $T139242[esp+20]
  0000e	51		 push	 ecx
  0000f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  00018	e8 00 00 00 00	 call	 __Getctype
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00022	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00025	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00028	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0002b	89 56 10	 mov	 DWORD PTR [esi+16], edx
  0002e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00031	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00034	83 c4 04	 add	 esp, 4

; 1786 : 		}

  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi
  0003a	83 c4 10	 add	 esp, 16			; 00000010H
  0003d	c2 08 00	 ret	 8
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<char>::ctype<char>
_TEXT	ENDS
PUBLIC	?_Tidy@?$ctype@D@std@@IAEXXZ			; std::ctype<char>::_Tidy
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_free:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$ctype@D@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$ctype@D@std@@IAEXXZ PROC			; std::ctype<char>::_Tidy, COMDAT
; _this$ = ecx

; 1813 : 		if (0 < _Ctype._Delfl)

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	85 c0		 test	 eax, eax
  00005	7e 0d		 jle	 SHORT $LN6@Tidy@3

; 1814 : 			free((void *)_Ctype._Table);

  00007	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _free
  00010	83 c4 04	 add	 esp, 4

; 1817 : 		}

  00013	c3		 ret	 0
$LN6@Tidy@3:

; 1815 : 		else if (_Ctype._Delfl < 0)

  00014	7d 0a		 jge	 SHORT $LN1@Tidy@3

; 1816 : 			delete[] (void *)_Ctype._Table;

  00016	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001f	59		 pop	 ecx
$LN1@Tidy@3:

; 1817 : 		}

  00020	c3		 ret	 0
?_Tidy@?$ctype@D@std@@IAEXXZ ENDP			; std::ctype<char>::_Tidy
_TEXT	ENDS
EXTRN	__Tolower:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 1821 : 		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));

  00000	0f b6 44 24 04	 movzx	 eax, BYTE PTR __Ch$[esp-4]
  00005	83 c1 08	 add	 ecx, 8
  00008	51		 push	 ecx
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __Tolower
  0000f	83 c4 08	 add	 esp, 8

; 1822 : 		}

  00012	c2 04 00	 ret	 4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 1826 : 		{	// convert [_First, _Last) in place to lower case

  00000	53		 push	 ebx

; 1827 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 1828 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 19		 je	 SHORT $LN8@do_tolower
  0000e	57		 push	 edi
  0000f	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_tolower:

; 1829 : 			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);

  00012	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Tolower
  0001c	88 06		 mov	 BYTE PTR [esi], al
  0001e	46		 inc	 esi
  0001f	83 c4 08	 add	 esp, 8
  00022	3b f3		 cmp	 esi, ebx
  00024	75 ec		 jne	 SHORT $LL3@do_tolower
  00026	5f		 pop	 edi
$LN8@do_tolower:

; 1830 : 		return ((const _Elem *)_First);

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx

; 1831 : 		}

  0002b	c2 08 00	 ret	 8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
EXTRN	__Toupper:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 1835 : 		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));

  00000	0f b6 44 24 04	 movzx	 eax, BYTE PTR __Ch$[esp-4]
  00005	83 c1 08	 add	 ecx, 8
  00008	51		 push	 ecx
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __Toupper
  0000f	83 c4 08	 add	 esp, 8

; 1836 : 		}

  00012	c2 04 00	 ret	 4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 1840 : 		{	// convert [_First, _Last) in place to upper case

  00000	53		 push	 ebx

; 1841 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 1842 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 19		 je	 SHORT $LN8@do_toupper
  0000e	57		 push	 edi
  0000f	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_toupper:

; 1843 : 			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);

  00012	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Toupper
  0001c	88 06		 mov	 BYTE PTR [esi], al
  0001e	46		 inc	 esi
  0001f	83 c4 08	 add	 esp, 8
  00022	3b f3		 cmp	 esi, ebx
  00024	75 ec		 jne	 SHORT $LL3@do_toupper
  00026	5f		 pop	 edi
$LN8@do_toupper:

; 1844 : 		return ((const _Elem *)_First);

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx

; 1845 : 		}

  0002b	c2 08 00	 ret	 8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 1849 : 		return (_Byte);

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Byte$[esp-4]

; 1850 : 		}

  00004	c2 04 00	 ret	 4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 1856 : 		// assume there is enough space in _Dest
; 1857 : 		return _Do_widen_s(_First, _Last, _Dest, _Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000b	57		 push	 edi
  0000c	8b f8		 mov	 edi, eax
  0000e	2b fa		 sub	 edi, edx
  00010	57		 push	 edi
  00011	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001a	52		 push	 edx
  0001b	ff d0		 call	 eax
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi

; 1858 : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Dest_size$ = 20					; size = 4
?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z PROC	; std::ctype<char>::_Do_widen_s, COMDAT
; _this$ = ecx

; 1862 : 		{	// widen chars in [_First, _Last)

  00000	53		 push	 ebx

; 1863 : 		_DEBUG_RANGE(_First, _Last);
; 1864 : 		_DEBUG_POINTER(_Dest);
; 1865 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 18	 mov	 ebp, DWORD PTR __Dest_size$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7c 24 18	 mov	 edi, DWORD PTR __Last$[esp+12]
  00010	8b f7		 mov	 esi, edi
  00012	2b f3		 sub	 esi, ebx
  00014	3b ee		 cmp	 ebp, esi
  00016	73 05		 jae	 SHORT $LN1@Do_widen_s
  00018	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN1@Do_widen_s:

; 1866 : 		_CRT_SECURE_MEMCPY(_Dest, _Dest_size, _First, _Last - _First);

  0001d	8b 44 24 1c	 mov	 eax, DWORD PTR __Dest$[esp+12]
  00021	56		 push	 esi
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memcpy_s
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 1867 : 		return (_Last);

  0002d	8b c7		 mov	 eax, edi
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	5b		 pop	 ebx

; 1868 : 		}

  00033	c2 10 00	 ret	 16			; 00000010H
?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z ENDP	; std::ctype<char>::_Do_widen_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 1872 : 		return (_Ch);

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Ch$[esp-4]

; 1873 : 		}

  00004	c2 08 00	 ret	 8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dflt$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 1880 : 		// assume there is enough space in _Dest
; 1881 : 		return _Do_narrow_s(_First, _Last, _Dflt, _Dest, _Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000b	57		 push	 edi
  0000c	8b f8		 mov	 edi, eax
  0000e	2b fa		 sub	 edi, edx
  00010	57		 push	 edi
  00011	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dest$[esp+8]
  00015	57		 push	 edi
  00016	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dflt$[esp+12]
  0001a	57		 push	 edi
  0001b	50		 push	 eax
  0001c	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0001f	52		 push	 edx
  00020	ff d0		 call	 eax
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 1882 : 		}

  00024	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
__Dest_size$ = 24					; size = 4
?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z PROC	; std::ctype<char>::_Do_narrow_s, COMDAT
; _this$ = ecx

; 1887 : 		{	// narrow elements in [_First, _Last) to chars

  00000	53		 push	 ebx

; 1888 : 		_DEBUG_RANGE(_First, _Last);
; 1889 : 		_DEBUG_POINTER(_Dest);
; 1890 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 1c	 mov	 ebp, DWORD PTR __Dest_size$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7c 24 18	 mov	 edi, DWORD PTR __Last$[esp+12]
  00010	8b f7		 mov	 esi, edi
  00012	2b f3		 sub	 esi, ebx
  00014	3b ee		 cmp	 ebp, esi
  00016	73 05		 jae	 SHORT $LN1@Do_narrow_
  00018	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN1@Do_narrow_:

; 1891 : 		_CRT_SECURE_MEMCPY(_Dest, _Dest_size, _First, _Last - _First);

  0001d	8b 44 24 20	 mov	 eax, DWORD PTR __Dest$[esp+12]
  00021	56		 push	 esi
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memcpy_s
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 1892 : 		return (_Last);

  0002d	8b c7		 mov	 eax, edi
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	5b		 pop	 ebx

; 1893 : 		}

  00033	c2 14 00	 ret	 20			; 00000014H
?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z ENDP	; std::ctype<char>::_Do_narrow_s
_TEXT	ENDS
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 1801 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1802 : 		_Tidy();

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  0000c	85 c0		 test	 eax, eax
  0000e	7e 14		 jle	 SHORT $LN14@ctype
  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _free
  00019	83 c4 04	 add	 esp, 4

; 1803 : 		}

  0001c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00022	5e		 pop	 esi
  00023	c3		 ret	 0
$LN14@ctype:

; 1802 : 		_Tidy();

  00024	7d 0c		 jge	 SHORT $LN13@ctype
  00026	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002f	83 c4 04	 add	 esp, 4
$LN13@ctype:

; 1803 : 		}

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00038	5e		 pop	 esi
  00039	c3		 ret	 0
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  0000c	85 c0		 test	 eax, eax
  0000e	7e 0b		 jle	 SHORT $LN16@scalar@9
  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _free
  00019	eb 0b		 jmp	 SHORT $LN17@scalar@9
$LN16@scalar@9:
  0001b	7d 0c		 jge	 SHORT $LN6@scalar@9
  0001d	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN17@scalar@9:
  00026	83 c4 04	 add	 esp, 4
$LN6@scalar@9:
  00029	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0002e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00034	74 09		 je	 SHORT $LN15@scalar@9
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003c	83 c4 04	 add	 esp, 4
$LN15@scalar@9:
  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi
  00042	c2 04 00	 ret	 4
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7?$ctype@_W@std@@6B@				; std::ctype<wchar_t>::`vftable'
PUBLIC	??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z	; std::ctype<wchar_t>::ctype<wchar_t>
PUBLIC	??_R4?$ctype@_W@std@@6B@			; std::ctype<wchar_t>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@_W@std@@@8			; std::ctype<wchar_t> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@_W@std@@8				; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@_W@std@@8				; std::ctype<wchar_t>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@_W@std@@8			; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z	; std::ctype<wchar_t>::do_is
PUBLIC	?do_is@?$ctype@_W@std@@MBE_NF_W@Z		; std::ctype<wchar_t>::do_is
PUBLIC	?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z	; std::ctype<wchar_t>::do_scan_is
PUBLIC	?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z	; std::ctype<wchar_t>::do_scan_not
PUBLIC	?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z	; std::ctype<wchar_t>::do_tolower
PUBLIC	?do_tolower@?$ctype@_W@std@@MBE_W_W@Z		; std::ctype<wchar_t>::do_tolower
PUBLIC	?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z	; std::ctype<wchar_t>::do_toupper
PUBLIC	?do_toupper@?$ctype@_W@std@@MBE_W_W@Z		; std::ctype<wchar_t>::do_toupper
PUBLIC	?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z	; std::ctype<wchar_t>::do_widen
PUBLIC	?do_widen@?$ctype@_W@std@@MBE_WD@Z		; std::ctype<wchar_t>::do_widen
PUBLIC	?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z	; std::ctype<wchar_t>::_Do_widen_s
PUBLIC	?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z	; std::ctype<wchar_t>::do_narrow
PUBLIC	?do_narrow@?$ctype@_W@std@@MBED_WD@Z		; std::ctype<wchar_t>::do_narrow
PUBLIC	?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z ; std::ctype<wchar_t>::_Do_narrow_s
EXTRN	??_E?$ctype@_W@std@@MAEPAXI@Z:PROC		; std::ctype<wchar_t>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ctype@_W@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@_W@std@@8 DD FLAT:??_R0?AV?$ctype@_W@std@@@8 ; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R2?$ctype@_W@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@_W@std@@8 ; std::ctype<wchar_t>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R3?$ctype@_W@std@@8 DD 00H				; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT
??_R0?AV?$ctype@_W@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<wchar_t> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@_W@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@_W@std@@6B@ DD 00H				; std::ctype<wchar_t>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@_W@std@@@8
	DD	FLAT:??_R3?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$ctype@_W@std@@6B@
CONST	SEGMENT
??_7?$ctype@_W@std@@6B@ DD FLAT:??_R4?$ctype@_W@std@@6B@ ; std::ctype<wchar_t>::`vftable'
	DD	FLAT:??_E?$ctype@_W@std@@MAEPAXI@Z
	DD	FLAT:?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
	DD	FLAT:?do_is@?$ctype@_W@std@@MBE_NF_W@Z
	DD	FLAT:?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
	DD	FLAT:?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
	DD	FLAT:?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
	DD	FLAT:?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
	DD	FLAT:?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
	DD	FLAT:?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
	DD	FLAT:?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
	DD	FLAT:?do_widen@?$ctype@_W@std@@MBE_WD@Z
	DD	FLAT:?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z
	DD	FLAT:?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@_W@std@@MBED_WD@Z
	DD	FLAT:?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
CONST	ENDS
;	COMDAT ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
$T139360 = -16						; size = 16
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<wchar_t>::ctype<wchar_t>, COMDAT
; _this$ = ecx

; 2025 : 		{	// construct from specified locale

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Refs$[esp-4]
  00004	83 ec 10	 sub	 esp, 16			; 00000010H
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 2026 : 		_Init(_Lobj);

  0000a	8d 4c 24 04	 lea	 ecx, DWORD PTR $T139360[esp+20]
  0000e	51		 push	 ecx
  0000f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  00018	e8 00 00 00 00	 call	 __Getctype
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00022	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00025	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00028	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0002b	89 56 10	 mov	 DWORD PTR [esi+16], edx
  0002e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00031	83 c4 04	 add	 esp, 4
  00034	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00037	e8 00 00 00 00	 call	 __Getcvt
  0003c	89 46 18	 mov	 DWORD PTR [esi+24], eax
  0003f	89 56 1c	 mov	 DWORD PTR [esi+28], edx

; 2027 : 		}

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	83 c4 10	 add	 esp, 16			; 00000010H
  00048	c2 08 00	 ret	 8
??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<wchar_t>::ctype<wchar_t>
_TEXT	ENDS
PUBLIC	?is@?$ctype@_W@std@@QBE_NF_W@Z			; std::ctype<wchar_t>::is
; Function compile flags: /Ogtpy
;	COMDAT ?is@?$ctype@_W@std@@QBE_NF_W@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__Ch$ = 12						; size = 2
?is@?$ctype@_W@std@@QBE_NF_W@Z PROC			; std::ctype<wchar_t>::is, COMDAT
; _this$ = ecx

; 1922 : 		return (do_is(_Maskval, _Ch));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00005	ff e0		 jmp	 eax
?is@?$ctype@_W@std@@QBE_NF_W@Z ENDP			; std::ctype<wchar_t>::is
_TEXT	ENDS
PUBLIC	??1?$ctype@_W@std@@MAE@XZ			; std::ctype<wchar_t>::~ctype<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ctype@_W@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@_W@std@@MAE@XZ PROC				; std::ctype<wchar_t>::~ctype<wchar_t>, COMDAT
; _this$ = ecx

; 2040 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2041 : 		if (_Ctype._Delfl)

  00003	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  0000d	74 0c		 je	 SHORT $LN9@ctype@2

; 2042 : 			free((void *)_Ctype._Table);

  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _free
  00018	83 c4 04	 add	 esp, 4
$LN9@ctype@2:

; 2043 : 		}

  0001b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00021	5e		 pop	 esi
  00022	c3		 ret	 0
??1?$ctype@_W@std@@MAE@XZ ENDP				; std::ctype<wchar_t>::~ctype<wchar_t>
_TEXT	ENDS
EXTRN	__Getwctype:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_is@?$ctype@_W@std@@MBE_NF_W@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__Ch$ = 12						; size = 2
?do_is@?$ctype@_W@std@@MBE_NF_W@Z PROC			; std::ctype<wchar_t>::do_is, COMDAT
; _this$ = ecx

; 2054 : 		return ((::_Getwctype(_Ch, &_Ctype) & _Maskval) != 0);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	51		 push	 ecx
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 __Getwctype
  0000e	83 c4 08	 add	 esp, 8
  00011	66 85 44 24 04	 test	 WORD PTR __Maskval$[esp-4], ax
  00016	b8 00 00 00 00	 mov	 eax, 0
  0001b	0f 95 c0	 setne	 al

; 2055 : 		}

  0001e	c2 08 00	 ret	 8
?do_is@?$ctype@_W@std@@MBE_NF_W@Z ENDP			; std::ctype<wchar_t>::do_is
_TEXT	ENDS
EXTRN	__Getwctypes:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z PROC		; std::ctype<wchar_t>::do_is, COMDAT
; _this$ = ecx

; 2060 : 		_DEBUG_RANGE(_First, _Last);
; 2061 : 		_DEBUG_POINTER(_Dest);
; 2062 : 		return (::_Getwctypes(_First, _Last, _Dest, &_Ctype));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	83 c1 08	 add	 ecx, 8
  0000b	51		 push	 ecx
  0000c	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Last$[esp]
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	e8 00 00 00 00	 call	 __Getwctypes
  00018	83 c4 10	 add	 esp, 16			; 00000010H

; 2063 : 		}

  0001b	c2 0c 00	 ret	 12			; 0000000cH
?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z ENDP		; std::ctype<wchar_t>::do_is
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z PROC	; std::ctype<wchar_t>::do_scan_is, COMDAT
; _this$ = ecx

; 2067 : 		{	// find first in [_First, _Last) that fits mask classification

  00000	55		 push	 ebp

; 2068 : 		_DEBUG_RANGE(_First, _Last);
; 2069 : 		for (; _First != _Last && !is(_Maskval, *_First); ++_First)

  00001	8b 6c 24 10	 mov	 ebp, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	3b f5		 cmp	 esi, ebp
  0000f	74 1f		 je	 SHORT $LN10@do_scan_is
  00011	53		 push	 ebx
  00012	8b 5c 24 14	 mov	 ebx, DWORD PTR __Maskval$[esp+12]
$LL3@do_scan_is:
  00016	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00019	8b 17		 mov	 edx, DWORD PTR [edi]
  0001b	50		 push	 eax
  0001c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001f	53		 push	 ebx
  00020	8b cf		 mov	 ecx, edi
  00022	ff d0		 call	 eax
  00024	84 c0		 test	 al, al
  00026	75 07		 jne	 SHORT $LN11@do_scan_is
  00028	83 c6 02	 add	 esi, 2
  0002b	3b f5		 cmp	 esi, ebp
  0002d	75 e7		 jne	 SHORT $LL3@do_scan_is
$LN11@do_scan_is:
  0002f	5b		 pop	 ebx
$LN10@do_scan_is:
  00030	5f		 pop	 edi

; 2070 : 			;
; 2071 : 		return (_First);

  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp

; 2072 : 		}

  00035	c2 0c 00	 ret	 12			; 0000000cH
?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ENDP	; std::ctype<wchar_t>::do_scan_is
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z PROC	; std::ctype<wchar_t>::do_scan_not, COMDAT
; _this$ = ecx

; 2076 : 		{	// find first in [_First, _Last) not fitting mask classification

  00000	55		 push	 ebp

; 2077 : 		_DEBUG_RANGE(_First, _Last);
; 2078 : 		for (; _First != _Last && is(_Maskval, *_First); ++_First)

  00001	8b 6c 24 10	 mov	 ebp, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	3b f5		 cmp	 esi, ebp
  0000f	74 1f		 je	 SHORT $LN10@do_scan_no
  00011	53		 push	 ebx
  00012	8b 5c 24 14	 mov	 ebx, DWORD PTR __Maskval$[esp+12]
$LL3@do_scan_no:
  00016	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00019	8b 17		 mov	 edx, DWORD PTR [edi]
  0001b	50		 push	 eax
  0001c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001f	53		 push	 ebx
  00020	8b cf		 mov	 ecx, edi
  00022	ff d0		 call	 eax
  00024	84 c0		 test	 al, al
  00026	74 07		 je	 SHORT $LN11@do_scan_no
  00028	83 c6 02	 add	 esi, 2
  0002b	3b f5		 cmp	 esi, ebp
  0002d	75 e7		 jne	 SHORT $LL3@do_scan_no
$LN11@do_scan_no:
  0002f	5b		 pop	 ebx
$LN10@do_scan_no:
  00030	5f		 pop	 edi

; 2079 : 			;
; 2080 : 		return (_First);

  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp

; 2081 : 		}

  00035	c2 0c 00	 ret	 12			; 0000000cH
?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ENDP	; std::ctype<wchar_t>::do_scan_not
_TEXT	ENDS
EXTRN	__Towlower:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?do_tolower@?$ctype@_W@std@@MBE_W_W@Z PROC		; std::ctype<wchar_t>::do_tolower, COMDAT
; _this$ = ecx

; 2085 : 		return (_Towlower(_Ch, &_Ctype));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	51		 push	 ecx
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 __Towlower
  0000e	83 c4 08	 add	 esp, 8

; 2086 : 		}

  00011	c2 04 00	 ret	 4
?do_tolower@?$ctype@_W@std@@MBE_W_W@Z ENDP		; std::ctype<wchar_t>::do_tolower
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z PROC	; std::ctype<wchar_t>::do_tolower, COMDAT
; _this$ = ecx

; 2090 : 		{	// convert [_First, _Last) in place to lower case

  00000	53		 push	 ebx

; 2091 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2092 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 1c		 je	 SHORT $LN8@do_tolower@2
  0000e	57		 push	 edi
  0000f	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_tolower@2:

; 2093 : 			*_First = _Towlower(*_First, &_Ctype);

  00012	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Towlower
  0001c	66 89 06	 mov	 WORD PTR [esi], ax
  0001f	83 c6 02	 add	 esi, 2
  00022	83 c4 08	 add	 esp, 8
  00025	3b f3		 cmp	 esi, ebx
  00027	75 e9		 jne	 SHORT $LL3@do_tolower@2
  00029	5f		 pop	 edi
$LN8@do_tolower@2:

; 2094 : 		return ((const _Elem *)_First);

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx

; 2095 : 		}

  0002e	c2 08 00	 ret	 8
?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ENDP	; std::ctype<wchar_t>::do_tolower
_TEXT	ENDS
EXTRN	__Towupper:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?do_toupper@?$ctype@_W@std@@MBE_W_W@Z PROC		; std::ctype<wchar_t>::do_toupper, COMDAT
; _this$ = ecx

; 2099 : 		return (_Towupper(_Ch, &_Ctype));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	51		 push	 ecx
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 __Towupper
  0000e	83 c4 08	 add	 esp, 8

; 2100 : 		}

  00011	c2 04 00	 ret	 4
?do_toupper@?$ctype@_W@std@@MBE_W_W@Z ENDP		; std::ctype<wchar_t>::do_toupper
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z PROC	; std::ctype<wchar_t>::do_toupper, COMDAT
; _this$ = ecx

; 2104 : 		{	// convert [_First, _Last) in place to upper case

  00000	53		 push	 ebx

; 2105 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2106 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 1c		 je	 SHORT $LN8@do_toupper@2
  0000e	57		 push	 edi
  0000f	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_toupper@2:

; 2107 : 			*_First = _Towupper(*_First, &_Ctype);

  00012	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Towupper
  0001c	66 89 06	 mov	 WORD PTR [esi], ax
  0001f	83 c6 02	 add	 esi, 2
  00022	83 c4 08	 add	 esp, 8
  00025	3b f3		 cmp	 esi, ebx
  00027	75 e9		 jne	 SHORT $LL3@do_toupper@2
  00029	5f		 pop	 edi
$LN8@do_toupper@2:

; 2108 : 		return ((const _Elem *)_First);

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx

; 2109 : 		}

  0002e	c2 08 00	 ret	 8
?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ENDP	; std::ctype<wchar_t>::do_toupper
_TEXT	ENDS
PUBLIC	?_Dowiden@?$ctype@_W@std@@IBE_WD@Z		; std::ctype<wchar_t>::_Dowiden
EXTRN	__Mbrtowc:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z
_TEXT	SEGMENT
__Wc$ = -8						; size = 2
__Mbst$ = -4						; size = 4
__Byte$ = 8						; size = 1
?_Dowiden@?$ctype@_W@std@@IBE_WD@Z PROC			; std::ctype<wchar_t>::_Dowiden, COMDAT
; _this$ = ecx

; 2112 : 		{	// widen char

  00000	83 ec 08	 sub	 esp, 8

; 2113 : 		_Mbstinit(_Mbst);
; 2114 : 		wchar_t _Wc;
; 2115 : 		return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
; 2116 : 			? (wchar_t)WEOF : _Wc);

  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	51		 push	 ecx
  00007	8d 44 24 08	 lea	 eax, DWORD PTR __Mbst$[esp+12]
  0000b	50		 push	 eax
  0000c	6a 01		 push	 1
  0000e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Byte$[esp+16]
  00012	51		 push	 ecx
  00013	8d 54 24 10	 lea	 edx, DWORD PTR __Wc$[esp+24]
  00017	52		 push	 edx
  00018	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __Mbst$[esp+28], 0
  00020	e8 00 00 00 00	 call	 __Mbrtowc
  00025	83 c4 14	 add	 esp, 20			; 00000014H
  00028	85 c0		 test	 eax, eax
  0002a	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0002f	7c 04		 jl	 SHORT $LN4@Dowiden
  00031	0f b7 04 24	 movzx	 eax, WORD PTR __Wc$[esp+8]
$LN4@Dowiden:

; 2117 : 		}

  00035	83 c4 08	 add	 esp, 8
  00038	c2 04 00	 ret	 4
?_Dowiden@?$ctype@_W@std@@IBE_WD@Z ENDP			; std::ctype<wchar_t>::_Dowiden
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@_W@std@@MBE_WD@Z
_TEXT	SEGMENT
__Wc$139432 = -8					; size = 2
__Mbst$139431 = -4					; size = 4
$T139436 = 8						; size = 1
__Byte$ = 8						; size = 1
?do_widen@?$ctype@_W@std@@MBE_WD@Z PROC			; std::ctype<wchar_t>::do_widen, COMDAT
; _this$ = ecx

; 2120 : 		{	// widen char

  00000	83 ec 08	 sub	 esp, 8

; 2121 : 		return (_Dowiden(_Byte));

  00003	8a 44 24 0c	 mov	 al, BYTE PTR __Byte$[esp+4]
  00007	83 c1 18	 add	 ecx, 24			; 00000018H
  0000a	51		 push	 ecx
  0000b	8d 4c 24 08	 lea	 ecx, DWORD PTR __Mbst$139431[esp+12]
  0000f	51		 push	 ecx
  00010	6a 01		 push	 1
  00012	8d 54 24 18	 lea	 edx, DWORD PTR $T139436[esp+16]
  00016	88 44 24 18	 mov	 BYTE PTR $T139436[esp+16], al
  0001a	52		 push	 edx
  0001b	8d 44 24 10	 lea	 eax, DWORD PTR __Wc$139432[esp+24]
  0001f	50		 push	 eax
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __Mbst$139431[esp+28], 0
  00028	e8 00 00 00 00	 call	 __Mbrtowc
  0002d	83 c4 14	 add	 esp, 20			; 00000014H
  00030	85 c0		 test	 eax, eax
  00032	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00037	7c 04		 jl	 SHORT $LN6@do_widen
  00039	0f b7 04 24	 movzx	 eax, WORD PTR __Wc$139432[esp+8]
$LN6@do_widen:

; 2122 : 		}

  0003d	83 c4 08	 add	 esp, 8
  00040	c2 04 00	 ret	 4
?do_widen@?$ctype@_W@std@@MBE_WD@Z ENDP			; std::ctype<wchar_t>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z PROC		; std::ctype<wchar_t>::do_widen, COMDAT
; _this$ = ecx

; 2128 : 		// assume there is enough space in _Dest
; 2129 : 		return _Do_widen_s(_First, _Last, _Dest, _Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000b	57		 push	 edi
  0000c	8b f8		 mov	 edi, eax
  0000e	2b fa		 sub	 edi, edx
  00010	57		 push	 edi
  00011	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001a	52		 push	 edx
  0001b	ff d0		 call	 eax
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi

; 2130 : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z ENDP		; std::ctype<wchar_t>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z
_TEXT	SEGMENT
__Wc$139446 = 8						; size = 2
__First$ = 8						; size = 4
$T139450 = 12						; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Mbst$139445 = 20					; size = 4
__Dest_size$ = 20					; size = 4
?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z PROC	; std::ctype<wchar_t>::_Do_widen_s, COMDAT
; _this$ = ecx

; 2134 : 		{	// widen chars in [_First, _Last)

  00000	53		 push	 ebx

; 2135 : 		_DEBUG_RANGE(_First, _Last);
; 2136 : 		_DEBUG_POINTER(_Dest);
; 2137 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	8b c3		 mov	 eax, ebx
  0000c	2b c6		 sub	 eax, esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	39 44 24 1c	 cmp	 DWORD PTR __Dest_size$[esp+8], eax
  00015	73 05		 jae	 SHORT $LN4@Do_widen_s@2
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN4@Do_widen_s@2:

; 2138 : 		for (; _First != _Last; ++_First, ++_Dest)

  0001c	3b f3		 cmp	 esi, ebx
  0001e	74 4a		 je	 SHORT $LN13@Do_widen_s@2
  00020	55		 push	 ebp
  00021	8d 6f 18	 lea	 ebp, DWORD PTR [edi+24]
  00024	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dest$[esp+12]
$LL3@Do_widen_s@2:

; 2139 : 			*_Dest = _Dowiden(*_First);

  00028	8a 0e		 mov	 cl, BYTE PTR [esi]
  0002a	55		 push	 ebp
  0002b	8d 54 24 24	 lea	 edx, DWORD PTR __Mbst$139445[esp+16]
  0002f	52		 push	 edx
  00030	6a 01		 push	 1
  00032	8d 44 24 24	 lea	 eax, DWORD PTR $T139450[esp+24]
  00036	88 4c 24 24	 mov	 BYTE PTR $T139450[esp+24], cl
  0003a	50		 push	 eax
  0003b	8d 4c 24 24	 lea	 ecx, DWORD PTR __Wc$139446[esp+28]
  0003f	51		 push	 ecx
  00040	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR __Mbst$139445[esp+32], 0
  00048	e8 00 00 00 00	 call	 __Mbrtowc
  0004d	83 c4 14	 add	 esp, 20			; 00000014H
  00050	85 c0		 test	 eax, eax
  00052	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00057	7c 05		 jl	 SHORT $LN10@Do_widen_s@2
  00059	0f b7 44 24 14	 movzx	 eax, WORD PTR __Wc$139446[esp+12]
$LN10@Do_widen_s@2:
  0005e	66 89 07	 mov	 WORD PTR [edi], ax
  00061	46		 inc	 esi
  00062	83 c7 02	 add	 edi, 2
  00065	3b f3		 cmp	 esi, ebx
  00067	75 bf		 jne	 SHORT $LL3@Do_widen_s@2
  00069	5d		 pop	 ebp
$LN13@Do_widen_s@2:
  0006a	5f		 pop	 edi

; 2140 : 		return (_First);

  0006b	8b c6		 mov	 eax, esi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx

; 2141 : 		}

  0006f	c2 10 00	 ret	 16			; 00000010H
?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z ENDP	; std::ctype<wchar_t>::_Do_widen_s
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?_Donarrow@?$ctype@_W@std@@IBED_WD@Z		; std::ctype<wchar_t>::_Donarrow
EXTRN	__Wcrtomb:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z
_TEXT	SEGMENT
__Mbst$ = -16						; size = 4
__Buf$ = -12						; size = 5
__$ArrayPad$ = -4					; size = 4
__Ch$ = 8						; size = 2
__Dflt$ = 12						; size = 1
?_Donarrow@?$ctype@_W@std@@IBED_WD@Z PROC		; std::ctype<wchar_t>::_Donarrow, COMDAT
; _this$ = ecx

; 2144 : 		{	// narrow element to char

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax

; 2145 : 		char _Buf[MB_LEN_MAX];
; 2146 : 		_Mbstinit(_Mbst);
; 2147 : 		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
; 2148 : 			? _Dflt : _Buf[0]);

  0000e	83 c1 18	 add	 ecx, 24			; 00000018H
  00011	51		 push	 ecx
  00012	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ch$[esp+16]
  00016	8d 44 24 04	 lea	 eax, DWORD PTR __Mbst$[esp+20]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8d 54 24 10	 lea	 edx, DWORD PTR __Buf$[esp+28]
  00020	52		 push	 edx
  00021	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __Mbst$[esp+32], 0
  00029	e8 00 00 00 00	 call	 __Wcrtomb
  0002e	83 c4 10	 add	 esp, 16			; 00000010H
  00031	83 f8 01	 cmp	 eax, 1
  00034	8a 44 24 18	 mov	 al, BYTE PTR __Dflt$[esp+12]
  00038	75 04		 jne	 SHORT $LN4@Donarrow
  0003a	8a 44 24 04	 mov	 al, BYTE PTR __Buf$[esp+16]
$LN4@Donarrow:

; 2149 : 		}

  0003e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16]
  00042	33 cc		 xor	 ecx, esp
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	83 c4 10	 add	 esp, 16			; 00000010H
  0004c	c2 08 00	 ret	 8
?_Donarrow@?$ctype@_W@std@@IBED_WD@Z ENDP		; std::ctype<wchar_t>::_Donarrow
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?do_narrow@?$ctype@_W@std@@MBED_WD@Z
_TEXT	SEGMENT
__Mbst$139468 = -16					; size = 4
__Buf$139467 = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
__Ch$ = 8						; size = 2
__Dflt$ = 12						; size = 1
?do_narrow@?$ctype@_W@std@@MBED_WD@Z PROC		; std::ctype<wchar_t>::do_narrow, COMDAT
; _this$ = ecx

; 2152 : 		{	// narrow element to char

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax

; 2153 : 		return (_Donarrow(_Ch, _Dflt));

  0000e	83 c1 18	 add	 ecx, 24			; 00000018H
  00011	51		 push	 ecx
  00012	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ch$[esp+16]
  00016	8d 44 24 04	 lea	 eax, DWORD PTR __Mbst$139468[esp+20]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8d 54 24 10	 lea	 edx, DWORD PTR __Buf$139467[esp+28]
  00020	52		 push	 edx
  00021	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __Mbst$139468[esp+32], 0
  00029	e8 00 00 00 00	 call	 __Wcrtomb
  0002e	83 c4 10	 add	 esp, 16			; 00000010H
  00031	83 f8 01	 cmp	 eax, 1
  00034	8a 44 24 18	 mov	 al, BYTE PTR __Dflt$[esp+12]
  00038	75 04		 jne	 SHORT $LN6@do_narrow
  0003a	8a 44 24 04	 mov	 al, BYTE PTR __Buf$139467[esp+16]
$LN6@do_narrow:

; 2154 : 		}

  0003e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16]
  00042	33 cc		 xor	 ecx, esp
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	83 c4 10	 add	 esp, 16			; 00000010H
  0004c	c2 08 00	 ret	 8
?do_narrow@?$ctype@_W@std@@MBED_WD@Z ENDP		; std::ctype<wchar_t>::do_narrow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dflt$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z PROC	; std::ctype<wchar_t>::do_narrow, COMDAT
; _this$ = ecx

; 2161 : 		// assume there is enough space in _Dest
; 2162 : 		return _Do_narrow_s(_First, _Last, _Dflt, _Dest, _Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000b	57		 push	 edi
  0000c	8b f8		 mov	 edi, eax
  0000e	2b fa		 sub	 edi, edx
  00010	d1 ff		 sar	 edi, 1
  00012	57		 push	 edi
  00013	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dest$[esp+8]
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dflt$[esp+12]
  0001c	57		 push	 edi
  0001d	50		 push	 eax
  0001e	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00021	52		 push	 edx
  00022	ff d0		 call	 eax
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi

; 2163 : 		}

  00026	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z ENDP	; std::ctype<wchar_t>::do_narrow
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z
_TEXT	SEGMENT
__Mbst$139484 = -16					; size = 4
__Buf$139483 = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dflt$ = 16						; size = 1
__Dest$ = 20						; size = 4
__Dest_size$ = 24					; size = 4
?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z PROC	; std::ctype<wchar_t>::_Do_narrow_s, COMDAT
; _this$ = ecx

; 2169 : 		{	// narrow elements in [_First, _Last) to chars

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax
  0000e	53		 push	 ebx
  0000f	55		 push	 ebp

; 2170 : 		_DEBUG_RANGE(_First, _Last);
; 2171 : 		_DEBUG_POINTER(_Dest);
; 2172 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

  00010	8b 6c 24 20	 mov	 ebp, DWORD PTR __Last$[esp+20]
  00014	56		 push	 esi
  00015	8b 74 24 20	 mov	 esi, DWORD PTR __First$[esp+24]
  00019	8b c5		 mov	 eax, ebp
  0001b	2b c6		 sub	 eax, esi
  0001d	d1 f8		 sar	 eax, 1
  0001f	57		 push	 edi
  00020	8b 7c 24 30	 mov	 edi, DWORD PTR __Dest$[esp+28]
  00024	8b d9		 mov	 ebx, ecx
  00026	39 44 24 34	 cmp	 DWORD PTR __Dest_size$[esp+28], eax
  0002a	73 05		 jae	 SHORT $LN4@Do_narrow_@2
  0002c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN4@Do_narrow_@2:

; 2173 : 		for (; _First != _Last; ++_First, ++_Dest)

  00031	3b f5		 cmp	 esi, ebp
  00033	74 39		 je	 SHORT $LN13@Do_narrow_@2
  00035	83 c3 18	 add	 ebx, 24			; 00000018H
$LL3@Do_narrow_@2:

; 2174 : 			*_Dest = _Donarrow(*_First, _Dflt);

  00038	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0003b	53		 push	 ebx
  0003c	8d 4c 24 14	 lea	 ecx, DWORD PTR __Mbst$139484[esp+36]
  00040	51		 push	 ecx
  00041	50		 push	 eax
  00042	8d 54 24 20	 lea	 edx, DWORD PTR __Buf$139483[esp+44]
  00046	52		 push	 edx
  00047	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR __Mbst$139484[esp+48], 0
  0004f	e8 00 00 00 00	 call	 __Wcrtomb
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	83 f8 01	 cmp	 eax, 1
  0005a	8a 44 24 2c	 mov	 al, BYTE PTR __Dflt$[esp+28]
  0005e	75 04		 jne	 SHORT $LN10@Do_narrow_@2
  00060	8a 44 24 14	 mov	 al, BYTE PTR __Buf$139483[esp+32]
$LN10@Do_narrow_@2:
  00064	88 07		 mov	 BYTE PTR [edi], al
  00066	83 c6 02	 add	 esi, 2
  00069	47		 inc	 edi
  0006a	3b f5		 cmp	 esi, ebp
  0006c	75 ca		 jne	 SHORT $LL3@Do_narrow_@2
$LN13@Do_narrow_@2:

; 2175 : 		return (_First);
; 2176 : 		}

  0006e	8b 4c 24 1c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+32]
  00072	5f		 pop	 edi
  00073	8b c6		 mov	 eax, esi
  00075	5e		 pop	 esi
  00076	5d		 pop	 ebp
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	c2 14 00	 ret	 20			; 00000014H
?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z ENDP	; std::ctype<wchar_t>::_Do_narrow_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@_W@std@@MAEPAXI@Z PROC			; std::ctype<wchar_t>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  0000d	74 0c		 je	 SHORT $LN4@scalar@10
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _free
  00018	83 c4 04	 add	 esp, 4
$LN4@scalar@10:
  0001b	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00026	74 09		 je	 SHORT $LN11@scalar@10
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4
$LN11@scalar@10:
  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	c2 04 00	 ret	 4
??_G?$ctype@_W@std@@MAEPAXI@Z ENDP			; std::ctype<wchar_t>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7SystemException@CipherShed@@6B@		; CipherShed::SystemException::`vftable'
PUBLIC	??0SystemException@CipherShed@@QAE@XZ		; CipherShed::SystemException::SystemException
PUBLIC	??_R4SystemException@CipherShed@@6B@		; CipherShed::SystemException::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSystemException@CipherShed@@@8		; CipherShed::SystemException `RTTI Type Descriptor'
PUBLIC	??_R3SystemException@CipherShed@@8		; CipherShed::SystemException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SystemException@CipherShed@@8		; CipherShed::SystemException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SystemException@CipherShed@@8	; CipherShed::SystemException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Show@SystemException@CipherShed@@UBEXPAUHWND__@@@Z ; CipherShed::SystemException::Show
EXTRN	__imp__GetLastError@0:PROC
;	COMDAT ??_R1A@?0A@EA@SystemException@CipherShed@@8
; File c:\home\public\desktop\projects\ciphershed.build\src\common\exception.h
rdata$r	SEGMENT
??_R1A@?0A@EA@SystemException@CipherShed@@8 DD FLAT:??_R0?AUSystemException@CipherShed@@@8 ; CipherShed::SystemException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SystemException@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2SystemException@CipherShed@@8
rdata$r	SEGMENT
??_R2SystemException@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@SystemException@CipherShed@@8 ; CipherShed::SystemException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3SystemException@CipherShed@@8
rdata$r	SEGMENT
??_R3SystemException@CipherShed@@8 DD 00H		; CipherShed::SystemException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SystemException@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSystemException@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUSystemException@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::SystemException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSystemException@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4SystemException@CipherShed@@6B@
rdata$r	SEGMENT
??_R4SystemException@CipherShed@@6B@ DD 00H		; CipherShed::SystemException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSystemException@CipherShed@@@8
	DD	FLAT:??_R3SystemException@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7SystemException@CipherShed@@6B@
CONST	SEGMENT
??_7SystemException@CipherShed@@6B@ DD FLAT:??_R4SystemException@CipherShed@@6B@ ; CipherShed::SystemException::`vftable'
	DD	FLAT:?Show@SystemException@CipherShed@@UBEXPAUHWND__@@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0SystemException@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0SystemException@CipherShed@@QAE@XZ PROC		; CipherShed::SystemException::SystemException, COMDAT
; _this$ = ecx

; 24   : 		SystemException () : ErrorCode (GetLastError()) { }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SystemException@CipherShed@@6B@
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0000f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00012	8b c6		 mov	 eax, esi
  00014	5e		 pop	 esi
  00015	c3		 ret	 0
??0SystemException@CipherShed@@QAE@XZ ENDP		; CipherShed::SystemException::SystemException
_TEXT	ENDS
EXTRN	_handleWin32Error:PROC
EXTRN	__imp__SetLastError@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?Show@SystemException@CipherShed@@UBEXPAUHWND__@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
?Show@SystemException@CipherShed@@UBEXPAUHWND__@@@Z PROC ; CipherShed::SystemException::Show, COMDAT
; _this$ = ecx

; 28   : 			SetLastError (ErrorCode);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	50		 push	 eax
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 29   : 			handleWin32Error (parent);

  0000a	8b 4c 24 04	 mov	 ecx, DWORD PTR _parent$[esp-4]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 _handleWin32Error
  00014	59		 pop	 ecx

; 30   : 		}

  00015	c2 04 00	 ret	 4
?Show@SystemException@CipherShed@@UBEXPAUHWND__@@@Z ENDP ; CipherShed::SystemException::Show
_TEXT	ENDS
PUBLIC	__TI2?AUSecurityTokenLibraryNotInitialized@CipherShed@@
PUBLIC	?CheckLibraryStatus@SecurityToken@CipherShed@@KAXXZ ; CipherShed::SecurityToken::CheckLibraryStatus
PUBLIC	__CTA2?AUSecurityTokenLibraryNotInitialized@CipherShed@@
PUBLIC	__CT??_R0?AUSecurityTokenLibraryNotInitialized@CipherShed@@@8??0SecurityTokenLibraryNotInitialized@CipherShed@@QAE@ABU01@@Z4
PUBLIC	??0SecurityTokenLibraryNotInitialized@CipherShed@@QAE@ABU01@@Z ; CipherShed::SecurityTokenLibraryNotInitialized::SecurityTokenLibraryNotInitialized
PUBLIC	__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
PUBLIC	??0Exception@CipherShed@@QAE@ABU01@@Z		; CipherShed::Exception::Exception
;	COMDAT __CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
xdata$x	SEGMENT
__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4 DD 00H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	FLAT:??0Exception@CipherShed@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AUSecurityTokenLibraryNotInitialized@CipherShed@@@8??0SecurityTokenLibraryNotInitialized@CipherShed@@QAE@ABU01@@Z4
xdata$x	SEGMENT
__CT??_R0?AUSecurityTokenLibraryNotInitialized@CipherShed@@@8??0SecurityTokenLibraryNotInitialized@CipherShed@@QAE@ABU01@@Z4 DD 00H
	DD	FLAT:??_R0?AUSecurityTokenLibraryNotInitialized@CipherShed@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	FLAT:??0SecurityTokenLibraryNotInitialized@CipherShed@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AUSecurityTokenLibraryNotInitialized@CipherShed@@
xdata$x	SEGMENT
__CTA2?AUSecurityTokenLibraryNotInitialized@CipherShed@@ DD 02H
	DD	FLAT:__CT??_R0?AUSecurityTokenLibraryNotInitialized@CipherShed@@@8??0SecurityTokenLibraryNotInitialized@CipherShed@@QAE@ABU01@@Z4
	DD	FLAT:__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
xdata$x	ENDS
;	COMDAT __TI2?AUSecurityTokenLibraryNotInitialized@CipherShed@@
xdata$x	SEGMENT
__TI2?AUSecurityTokenLibraryNotInitialized@CipherShed@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2?AUSecurityTokenLibraryNotInitialized@CipherShed@@
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
xdata$x	ENDS
;	COMDAT ?CheckLibraryStatus@SecurityToken@CipherShed@@KAXXZ
_TEXT	SEGMENT
$T139524 = -4						; size = 4
?CheckLibraryStatus@SecurityToken@CipherShed@@KAXXZ PROC ; CipherShed::SecurityToken::CheckLibraryStatus, COMDAT

; 67   : 	{

  00000	51		 push	 ecx

; 68   : 		if (!Initialized)

  00001	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?Initialized@SecurityToken@CipherShed@@1_NA, 0 ; CipherShed::SecurityToken::Initialized
  00008	75 17		 jne	 SHORT $LN1@CheckLibra

; 69   : 			throw SecurityTokenLibraryNotInitialized();

  0000a	68 00 00 00 00	 push	 OFFSET __TI2?AUSecurityTokenLibraryNotInitialized@CipherShed@@
  0000f	8d 44 24 04	 lea	 eax, DWORD PTR $T139524[esp+8]
  00013	50		 push	 eax
  00014	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T139524[esp+12], OFFSET ??_7SecurityTokenLibraryNotInitialized@CipherShed@@6B@
  0001c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@CheckLibra:

; 70   : 	}

  00021	59		 pop	 ecx
  00022	c3		 ret	 0
$LN8@CheckLibra:
?CheckLibraryStatus@SecurityToken@CipherShed@@KAXXZ ENDP ; CipherShed::SecurityToken::CheckLibraryStatus
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0Exception@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0Exception@CipherShed@@QAE@ABU01@@Z PROC		; CipherShed::Exception::Exception, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@CipherShed@@6B@
  00008	c2 04 00	 ret	 4
??0Exception@CipherShed@@QAE@ABU01@@Z ENDP		; CipherShed::Exception::Exception
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0SecurityTokenLibraryNotInitialized@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0SecurityTokenLibraryNotInitialized@CipherShed@@QAE@ABU01@@Z PROC ; CipherShed::SecurityTokenLibraryNotInitialized::SecurityTokenLibraryNotInitialized, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7SecurityTokenLibraryNotInitialized@CipherShed@@6B@
  00008	c2 04 00	 ret	 4
??0SecurityTokenLibraryNotInitialized@CipherShed@@QAE@ABU01@@Z ENDP ; CipherShed::SecurityTokenLibraryNotInitialized::SecurityTokenLibraryNotInitialized
_TEXT	ENDS
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1557 : 		{	// subscript mutable sequence

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1558 : 
; 1559 :  #if _HAS_ITERATOR_DEBUGGING
; 1560 : 		// skip debug checks if the container is initizialed with _IGNORE_MYITERLIST
; 1561 : 		if (this->_Myfirstiter != _IGNORE_MYITERLIST)
; 1562 : 			{
; 1563 : 			if (_Mysize < _Off)
; 1564 : 				{
; 1565 : 				_DEBUG_ERROR("string subscript out of range");
; 1566 : 				_SCL_SECURE_OUT_OF_RANGE;
; 1567 : 				}
; 1568 : 			}
; 1569 :  #else
; 1570 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= _Mysize);

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	3b 7e 14	 cmp	 edi, DWORD PTR [esi+20]
  0000b	76 05		 jbe	 SHORT $LN1@operator@25
  0000d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN1@operator@25:

; 1571 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1572 : 
; 1573 : 		return (_Myptr()[_Off]);

  00012	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00016	72 0b		 jb	 SHORT $LN6@operator@25
  00018	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0001b	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1574 : 		}

  00020	c2 04 00	 ret	 4

; 1571 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1572 : 
; 1573 : 		return (_Myptr()[_Off]);

$LN6@operator@25:
  00023	8d 44 3e 04	 lea	 eax, DWORD PTR [esi+edi+4]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi

; 1574 : 		}

  00029	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogtpy
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN5@c_str
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator[], COMDAT
; _this$ = ecx

; 1577 : 		{	// subscript nonmutable sequence

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1578 : 
; 1579 :  #if _HAS_ITERATOR_DEBUGGING
; 1580 : 		// skip debug checks if the container is initizialed with _IGNORE_MYITERLIST
; 1581 : 		if (this->_Myfirstiter != _IGNORE_MYITERLIST)
; 1582 : 			{
; 1583 : 			if (_Mysize < _Off)	// sic
; 1584 : 				{
; 1585 : 				_DEBUG_ERROR("string subscript out of range");
; 1586 : 				_SCL_SECURE_OUT_OF_RANGE;
; 1587 : 				}
; 1588 : 			}
; 1589 :  #else
; 1590 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= _Mysize);

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	3b 7e 14	 cmp	 edi, DWORD PTR [esi+20]
  0000b	76 05		 jbe	 SHORT $LN1@operator@26
  0000d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN1@operator@26:

; 1591 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1592 : 
; 1593 : 		return (_Myptr()[_Off]);

  00012	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00016	72 0b		 jb	 SHORT $LN6@operator@26
  00018	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0001b	8d 04 7e	 lea	 eax, DWORD PTR [esi+edi*2]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1594 : 		}

  00020	c2 04 00	 ret	 4

; 1591 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1592 : 
; 1593 : 		return (_Myptr()[_Off]);

$LN6@operator@26:
  00023	8d 44 7e 04	 lea	 eax, DWORD PTR [esi+edi*2+4]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi

; 1594 : 		}

  00029	c2 04 00	 ret	 4
??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator[]
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
; Function compile flags: /Ogtpy
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN5@c_str@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str@2:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
PUBLIC	??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z ; std::basic_streambuf<char,std::char_traits<char> >::_Xsgetn_s
PUBLIC	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char> >::imbue
EXTRN	??1_Mutex@std@@QAE@XZ:PROC			; std::_Mutex::~_Mutex
EXTRN	??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
	DD	FLAT:?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
CONST	ENDS
;	COMDAT ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
__Lock$139620 = -4					; size = 4
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	55		 push	 ebp
  00003	8b e9		 mov	 ebp, ecx

; 43   : 		_DELETE_CRT(_Plocale);

  00005	8b 5d 38	 mov	 ebx, DWORD PTR [ebp+56]
  00008	c7 45 00 00 00
	00 00		 mov	 DWORD PTR [ebp], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  0000f	85 db		 test	 ebx, ebx
  00011	74 50		 je	 SHORT $LN3@basic_stre
  00013	57		 push	 edi
  00014	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00016	85 ff		 test	 edi, edi
  00018	74 3f		 je	 SHORT $LN12@basic_stre
  0001a	6a 00		 push	 0
  0001c	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$139620[esp+20]
  00020	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00025	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00028	85 c0		 test	 eax, eax
  0002a	76 09		 jbe	 SHORT $LN14@basic_stre
  0002c	83 f8 ff	 cmp	 eax, -1
  0002f	73 04		 jae	 SHORT $LN14@basic_stre
  00031	48		 dec	 eax
  00032	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN14@basic_stre:
  00035	56		 push	 esi
  00036	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00039	f7 de		 neg	 esi
  0003b	1b f6		 sbb	 esi, esi
  0003d	f7 d6		 not	 esi
  0003f	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$139620[esp+20]
  00043	23 f7		 and	 esi, edi
  00045	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0004a	85 f6		 test	 esi, esi
  0004c	74 0a		 je	 SHORT $LN18@basic_stre
  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	8b 10		 mov	 edx, DWORD PTR [eax]
  00052	6a 01		 push	 1
  00054	8b ce		 mov	 ecx, esi
  00056	ff d2		 call	 edx
$LN18@basic_stre:
  00058	5e		 pop	 esi
$LN12@basic_stre:
  00059	53		 push	 ebx
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005f	83 c4 04	 add	 esp, 4
  00062	5f		 pop	 edi
$LN3@basic_stre:

; 44   : 		}

  00063	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
  00066	5d		 pop	 ebp
  00067	5b		 pop	 ebx
  00068	83 c4 04	 add	 esp, 4
  0006b	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?to_char_type@?$char_traits@D@std@@SADABH@Z	; std::char_traits<char>::to_char_type
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 501  : 		return ((_Elem)_Meta);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Meta$[esp-4]
  00004	8a 00		 mov	 al, BYTE PTR [eax]

; 502  : 		}

  00006	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 298  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 299  : 		}

  00003	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::overflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 303  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 304  : 		}

  00003	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc, COMDAT
; _this$ = ecx

; 308  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 309  : 		}

  00002	c3		 ret	 0
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 313  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 314  : 		}

  00003	c3		 ret	 0
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn, COMDAT
; _this$ = ecx

; 326  : 		// assume the destination buffer is large enough
; 327  : 		return _Xsgetn_s(_Ptr, (size_t)-1, _Count);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Count$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00009	52		 push	 edx
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR __Ptr$[esp]
  0000e	6a ff		 push	 -1
  00010	52		 push	 edx
  00011	ff d0		 call	 eax

; 328  : 		}

  00013	c2 08 00	 ret	 8
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 403  : 		{	// offer buffer to external agent (do nothing)

  00000	8b c1		 mov	 eax, ecx

; 404  : 		return (this);
; 405  : 		}

  00002	c2 08 00	 ret	 8
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 409  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 410  : 		}

  00002	c3		 ret	 0
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sync
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 414  : 		}

  00000	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
PUBLIC	?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump
; Function compile flags: /Ogtpy
;	COMDAT ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::gbump, COMDAT
; _this$ = ecx

; 210  : 		*_IGcount -= _Off;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00007	29 10		 sub	 DWORD PTR [eax], edx

; 211  : 		*_IGnext += _Off;

  00009	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0000c	01 11		 add	 DWORD PTR [ecx], edx

; 212  : 		}

  0000e	c2 04 00	 ret	 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gbump
_TEXT	ENDS
PUBLIC	?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
; Function compile flags: /Ogtpy
;	COMDAT ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc, COMDAT
; _this$ = ecx

; 234  : 		--*_IGcount;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 235  : 		return ((*_IGnext)++);

  00005	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 236  : 		}

  0000f	c3		 ret	 0
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
_TEXT	ENDS
PUBLIC	?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
; Function compile flags: /Ogtpy
;	COMDAT ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail, COMDAT
; _this$ = ecx

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 06		 je	 SHORT $LN3@Gnavail
  00008	8b 49 30	 mov	 ecx, DWORD PTR [ecx+48]
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 247  : 		}

  0000d	c3		 ret	 0
$LN3@Gnavail:

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  0000e	33 c0		 xor	 eax, eax

; 247  : 		}

  00010	c3		 ret	 0
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
_TEXT	ENDS
PUBLIC	?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump
; Function compile flags: /Ogtpy
;	COMDAT ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbump, COMDAT
; _this$ = ecx

; 251  : 		*_IPcount -= _Off;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00007	29 10		 sub	 DWORD PTR [eax], edx

; 252  : 		*_IPnext += _Off;

  00009	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0000c	01 11		 add	 DWORD PTR [ecx], edx

; 253  : 		}

  0000e	c2 04 00	 ret	 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbump
_TEXT	ENDS
PUBLIC	??0?$fpos@H@std@@QAE@J@Z			; std::fpos<int>::fpos<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??0?$fpos@H@std@@QAE@J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = ecx

; 54   : 		{	// construct with stream offset

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx
  00008	33 c9		 xor	 ecx, ecx
  0000a	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00010	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 55   : 		}

  00013	c2 04 00	 ret	 4
??0?$fpos@H@std@@QAE@J@Z ENDP				; std::fpos<int>::fpos<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 317  : 		{	// get a character from stream, point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00008	ff d2		 call	 edx
  0000a	83 f8 ff	 cmp	 eax, -1
  0000d	75 04		 jne	 SHORT $LN3@uflow
  0000f	0b c0		 or	 eax, eax
  00011	5e		 pop	 esi

; 320  : 		}

  00012	c3		 ret	 0
$LN3@uflow:

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00013	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00016	ff 08		 dec	 DWORD PTR [eax]
  00018	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00020	89 10		 mov	 DWORD PTR [eax], edx
  00022	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00025	5e		 pop	 esi

; 320  : 		}

  00026	c3		 ret	 0
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::uflow
_TEXT	ENDS
EXTRN	?_BADOFF@std@@3JB:DWORD				; std::_BADOFF
; Function compile flags: /Ogtpy
;	COMDAT ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 393  : 		return (streampos(_BADOFF));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 394  : 		}

  00017	c2 10 00	 ret	 16			; 00000010H
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 399  : 		return (streampos(_BADOFF));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 400  : 		}

  00017	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
PUBLIC	??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow
PUBLIC	?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn
PUBLIC	?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Xsgetn_s
PUBLIC	?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf
PUBLIC	?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync
PUBLIC	?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue
EXTRN	??_E?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z
	DD	FLAT:?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z
	DD	FLAT:?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
CONST	ENDS
;	COMDAT ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
__Lock$139745 = -4					; size = 4
??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	55		 push	 ebp
  00003	8b e9		 mov	 ebp, ecx

; 43   : 		_DELETE_CRT(_Plocale);

  00005	8b 5d 38	 mov	 ebx, DWORD PTR [ebp+56]
  00008	c7 45 00 00 00
	00 00		 mov	 DWORD PTR [ebp], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  0000f	85 db		 test	 ebx, ebx
  00011	74 50		 je	 SHORT $LN3@basic_stre@2
  00013	57		 push	 edi
  00014	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00016	85 ff		 test	 edi, edi
  00018	74 3f		 je	 SHORT $LN12@basic_stre@2
  0001a	6a 00		 push	 0
  0001c	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$139745[esp+20]
  00020	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00025	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00028	85 c0		 test	 eax, eax
  0002a	76 09		 jbe	 SHORT $LN14@basic_stre@2
  0002c	83 f8 ff	 cmp	 eax, -1
  0002f	73 04		 jae	 SHORT $LN14@basic_stre@2
  00031	48		 dec	 eax
  00032	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN14@basic_stre@2:
  00035	56		 push	 esi
  00036	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00039	f7 de		 neg	 esi
  0003b	1b f6		 sbb	 esi, esi
  0003d	f7 d6		 not	 esi
  0003f	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$139745[esp+20]
  00043	23 f7		 and	 esi, edi
  00045	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0004a	85 f6		 test	 esi, esi
  0004c	74 0a		 je	 SHORT $LN18@basic_stre@2
  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	8b 10		 mov	 edx, DWORD PTR [eax]
  00052	6a 01		 push	 1
  00054	8b ce		 mov	 ecx, esi
  00056	ff d2		 call	 edx
$LN18@basic_stre@2:
  00058	5e		 pop	 esi
$LN12@basic_stre@2:
  00059	53		 push	 ebx
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005f	83 c4 04	 add	 esp, 4
  00062	5f		 pop	 edi
$LN3@basic_stre@2:

; 44   : 		}

  00063	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
  00066	5d		 pop	 ebp
  00067	5b		 pop	 ebx
  00068	83 c4 04	 add	 esp, 4
  0006b	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?to_char_type@?$char_traits@_W@std@@SA_WABG@Z	; std::char_traits<wchar_t>::to_char_type
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@_W@std@@SA_WABG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@_W@std@@SA_WABG@Z PROC	; std::char_traits<wchar_t>::to_char_type, COMDAT

; 386  : 		return (_Meta);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Meta$[esp-4]
  00004	66 8b 00	 mov	 ax, WORD PTR [eax]

; 387  : 		}

  00007	c3		 ret	 0
?to_char_type@?$char_traits@_W@std@@SA_WABG@Z ENDP	; std::char_traits<wchar_t>::to_char_type
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 2
?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow, COMDAT
; _this$ = ecx

; 298  : 		return (_Traits::eof());

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 299  : 		}

  00005	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 2
?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail, COMDAT
; _this$ = ecx

; 303  : 		return (_Traits::eof());

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 304  : 		}

  00005	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc, COMDAT
; _this$ = ecx

; 308  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 309  : 		}

  00002	c3		 ret	 0
?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
_TEXT	SEGMENT
?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow, COMDAT
; _this$ = ecx

; 313  : 		return (_Traits::eof());

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 314  : 		}

  00005	c3		 ret	 0
?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn, COMDAT
; _this$ = ecx

; 326  : 		// assume the destination buffer is large enough
; 327  : 		return _Xsgetn_s(_Ptr, (size_t)-1, _Count);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Count$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00009	52		 push	 edx
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR __Ptr$[esp]
  0000e	6a ff		 push	 -1
  00010	52		 push	 edx
  00011	ff d0		 call	 eax

; 328  : 		}

  00013	c2 08 00	 ret	 8
?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf, COMDAT
; _this$ = ecx

; 403  : 		{	// offer buffer to external agent (do nothing)

  00000	8b c1		 mov	 eax, ecx

; 404  : 		return (this);
; 405  : 		}

  00002	c2 08 00	 ret	 8
?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync, COMDAT
; _this$ = ecx

; 409  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 410  : 		}

  00002	c3		 ret	 0
?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue, COMDAT
; _this$ = ecx

; 414  : 		}

  00000	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue
_TEXT	ENDS
PUBLIC	?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gbump
; Function compile flags: /Ogtpy
;	COMDAT ?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gbump, COMDAT
; _this$ = ecx

; 210  : 		*_IGcount -= _Off;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00007	29 10		 sub	 DWORD PTR [eax], edx

; 211  : 		*_IGnext += _Off;

  00009	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0000c	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  0000f	01 01		 add	 DWORD PTR [ecx], eax

; 212  : 		}

  00011	c2 04 00	 ret	 4
?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gbump
_TEXT	ENDS
PUBLIC	?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gninc
; Function compile flags: /Ogtpy
;	COMDAT ?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gninc, COMDAT
; _this$ = ecx

; 234  : 		--*_IGcount;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 235  : 		return ((*_IGnext)++);

  00005	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 236  : 		}

  0000f	c3		 ret	 0
?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gninc
_TEXT	ENDS
PUBLIC	?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
; Function compile flags: /Ogtpy
;	COMDAT ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail, COMDAT
; _this$ = ecx

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 06		 je	 SHORT $LN3@Gnavail@2
  00008	8b 49 30	 mov	 ecx, DWORD PTR [ecx+48]
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 247  : 		}

  0000d	c3		 ret	 0
$LN3@Gnavail@2:

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  0000e	33 c0		 xor	 eax, eax

; 247  : 		}

  00010	c3		 ret	 0
?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
_TEXT	ENDS
PUBLIC	?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbump
; Function compile flags: /Ogtpy
;	COMDAT ?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbump, COMDAT
; _this$ = ecx

; 251  : 		*_IPcount -= _Off;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00007	29 10		 sub	 DWORD PTR [eax], edx

; 252  : 		*_IPnext += _Off;

  00009	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0000c	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  0000f	01 01		 add	 DWORD PTR [ecx], eax

; 253  : 		}

  00011	c2 04 00	 ret	 4
?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbump
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
_TEXT	SEGMENT
?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow, COMDAT
; _this$ = ecx

; 317  : 		{	// get a character from stream, point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00008	ff d2		 call	 edx
  0000a	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0000f	66 3b c8	 cmp	 cx, ax
  00012	75 04		 jne	 SHORT $LN3@uflow@2
  00014	8b c1		 mov	 eax, ecx
  00016	5e		 pop	 esi

; 320  : 		}

  00017	c3		 ret	 0
$LN3@uflow@2:

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00018	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0001b	ff 08		 dec	 DWORD PTR [eax]
  0001d	8b 76 20	 mov	 esi, DWORD PTR [esi+32]
  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  00025	89 16		 mov	 DWORD PTR [esi], edx
  00027	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0002a	5e		 pop	 esi

; 320  : 		}

  0002b	c3		 ret	 0
?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff, COMDAT
; _this$ = ecx

; 393  : 		return (streampos(_BADOFF));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 394  : 		}

  00017	c2 10 00	 ret	 16			; 00000010H
?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos, COMDAT
; _this$ = ecx

; 399  : 		return (streampos(_BADOFF));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 400  : 		}

  00017	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos
_TEXT	ENDS
PUBLIC	??4?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAEAAV01@AAV01@@Z ; std::auto_ptr<CipherShed::GetPinFunctor>::operator=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??4?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAEAAV01@AAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAEAAV01@AAV01@@Z PROC ; std::auto_ptr<CipherShed::GetPinFunctor>::operator=, COMDAT
; _this$ = ecx

; 707  : 		reset(_Right.release());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 38		 mov	 edi, DWORD PTR [eax]
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00012	3b f9		 cmp	 edi, ecx
  00014	74 0c		 je	 SHORT $LN11@operator@27
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN11@operator@27
  0001a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001c	8b 10		 mov	 edx, DWORD PTR [eax]
  0001e	6a 01		 push	 1
  00020	ff d2		 call	 edx
$LN11@operator@27:
  00022	89 3e		 mov	 DWORD PTR [esi], edi
  00024	5f		 pop	 edi

; 708  : 		return (*this);

  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi

; 709  : 		}

  00028	c2 04 00	 ret	 4
??4?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAEAAV01@AAV01@@Z ENDP ; std::auto_ptr<CipherShed::GetPinFunctor>::operator=
_TEXT	ENDS
PUBLIC	??D?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QBEAAUGetPinFunctor@CipherShed@@XZ ; std::auto_ptr<CipherShed::GetPinFunctor>::operator*
; Function compile flags: /Ogtpy
;	COMDAT ??D?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QBEAAUGetPinFunctor@CipherShed@@XZ
_TEXT	SEGMENT
??D?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QBEAAUGetPinFunctor@CipherShed@@XZ PROC ; std::auto_ptr<CipherShed::GetPinFunctor>::operator*, COMDAT
; _this$ = ecx

; 726  : 
; 727  :  #if _HAS_ITERATOR_DEBUGGING
; 728  : 		if (_Myptr == 0)
; 729  : 			_DEBUG_ERROR("auto_ptr not dereferencable");
; 730  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 731  : 
; 732  : 		__analysis_assume(_Myptr);
; 733  : 
; 734  : 		return (*get());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 735  : 		}

  00002	c3		 ret	 0
??D?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QBEAAUGetPinFunctor@CipherShed@@XZ ENDP ; std::auto_ptr<CipherShed::GetPinFunctor>::operator*
_TEXT	ENDS
PUBLIC	??4?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAEAAV01@AAV01@@Z ; std::auto_ptr<CipherShed::SendExceptionFunctor>::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAEAAV01@AAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAEAAV01@AAV01@@Z PROC ; std::auto_ptr<CipherShed::SendExceptionFunctor>::operator=, COMDAT
; _this$ = ecx

; 707  : 		reset(_Right.release());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 38		 mov	 edi, DWORD PTR [eax]
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00012	3b f9		 cmp	 edi, ecx
  00014	74 0c		 je	 SHORT $LN11@operator@28
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN11@operator@28
  0001a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001c	8b 10		 mov	 edx, DWORD PTR [eax]
  0001e	6a 01		 push	 1
  00020	ff d2		 call	 edx
$LN11@operator@28:
  00022	89 3e		 mov	 DWORD PTR [esi], edi
  00024	5f		 pop	 edi

; 708  : 		return (*this);

  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi

; 709  : 		}

  00028	c2 04 00	 ret	 4
??4?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAEAAV01@AAV01@@Z ENDP ; std::auto_ptr<CipherShed::SendExceptionFunctor>::operator=
_TEXT	ENDS
PUBLIC	??D?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QBEAAUSendExceptionFunctor@CipherShed@@XZ ; std::auto_ptr<CipherShed::SendExceptionFunctor>::operator*
; Function compile flags: /Ogtpy
;	COMDAT ??D?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QBEAAUSendExceptionFunctor@CipherShed@@XZ
_TEXT	SEGMENT
??D?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QBEAAUSendExceptionFunctor@CipherShed@@XZ PROC ; std::auto_ptr<CipherShed::SendExceptionFunctor>::operator*, COMDAT
; _this$ = ecx

; 726  : 
; 727  :  #if _HAS_ITERATOR_DEBUGGING
; 728  : 		if (_Myptr == 0)
; 729  : 			_DEBUG_ERROR("auto_ptr not dereferencable");
; 730  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 731  : 
; 732  : 		__analysis_assume(_Myptr);
; 733  : 
; 734  : 		return (*get());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 735  : 		}

  00002	c3		 ret	 0
??D?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QBEAAUSendExceptionFunctor@CipherShed@@XZ ENDP ; std::auto_ptr<CipherShed::SendExceptionFunctor>::operator*
_TEXT	ENDS
PUBLIC	?empty@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE_NXZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::empty
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?empty@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE_NXZ PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::empty, COMDAT
; _this$ = ecx

; 736  : 		return (size() == 0);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	2b 41 0c	 sub	 eax, DWORD PTR [ecx+12]
  00006	83 e0 80	 and	 eax, -128		; ffffff80H
  00009	f7 d8		 neg	 eax
  0000b	1b c0		 sbb	 eax, eax
  0000d	40		 inc	 eax

; 737  : 		}

  0000e	c3		 ret	 0
?empty@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE_NXZ ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::empty
_TEXT	ENDS
PUBLIC	??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
PUBLIC	??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekpos
EXTRN	??_E?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD 00H ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$alloca'
	DB	'tor@_W@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD 00H ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ
	DD	FLAT:?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z
	DD	FLAT:?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@

; 43   : 		_Tidy();

  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy

; 44   : 		}

  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?eq@?$char_traits@_W@std@@SA_NAB_W0@Z		; std::char_traits<wchar_t>::eq
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?eq@?$char_traits@_W@std@@SA_NAB_W0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@_W@std@@SA_NAB_W0@Z PROC		; std::char_traits<wchar_t>::eq, COMDAT

; 315  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000b	33 c0		 xor	 eax, eax
  0000d	66 3b 0a	 cmp	 cx, WORD PTR [edx]
  00010	0f 94 c0	 sete	 al

; 316  : 		}

  00013	c3		 ret	 0
?eq@?$char_traits@_W@std@@SA_NAB_W0@Z ENDP		; std::char_traits<wchar_t>::eq
_TEXT	ENDS
PUBLIC	?not_eof@?$char_traits@_W@std@@SAGABG@Z		; std::char_traits<wchar_t>::not_eof
; Function compile flags: /Ogtpy
;	COMDAT ?not_eof@?$char_traits@_W@std@@SAGABG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@_W@std@@SAGABG@Z PROC		; std::char_traits<wchar_t>::not_eof, COMDAT

; 407  : 		return (_Meta != eof() ? _Meta : !eof());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Meta$[esp-4]
  00004	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00007	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0000c	66 3b c1	 cmp	 ax, cx
  0000f	74 04		 je	 SHORT $LN3@not_eof
  00011	0f b7 c0	 movzx	 eax, ax

; 408  : 		}

  00014	c3		 ret	 0
$LN3@not_eof:

; 407  : 		return (_Meta != eof() ? _Meta : !eof());

  00015	33 c0		 xor	 eax, eax

; 408  : 		}

  00017	c3		 ret	 0
?not_eof@?$char_traits@_W@std@@SAGABG@Z ENDP		; std::char_traits<wchar_t>::not_eof
_TEXT	ENDS
PUBLIC	??B?$fpos@H@std@@QBEJXZ				; std::fpos<int>::operator long
; Function compile flags: /Ogtpy
;	COMDAT ??B?$fpos@H@std@@QBEJXZ
_TEXT	SEGMENT
??B?$fpos@H@std@@QBEJXZ PROC				; std::fpos<int>::operator long, COMDAT
; _this$ = ecx

; 79   : 		return ((streamoff)(_Myoff + _FPOSOFF(_Fpos)));

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	03 01		 add	 eax, DWORD PTR [ecx]

; 80   : 		}

  00005	c3		 ret	 0
??B?$fpos@H@std@@QBEJXZ ENDP				; std::fpos<int>::operator long
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 2
?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::pbackfail, COMDAT
; _this$ = ecx

; 157  : 		if (_Mysb::gptr() == 0
; 158  : 			|| _Mysb::gptr() <= _Mysb::eback()
; 159  : 			|| !_Traits::eq_int_type(_Traits::eof(), _Meta)
; 160  : 			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
; 161  : 			&& _Mystate & _Constant)

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]
  00005	85 c0		 test	 eax, eax
  00007	74 4c		 je	 SHORT $LN3@pbackfail
  00009	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0000c	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000e	76 45		 jbe	 SHORT $LN3@pbackfail
  00010	66 8b 54 24 04	 mov	 dx, WORD PTR __Meta$[esp-4]
  00015	56		 push	 esi
  00016	be ff ff 00 00	 mov	 esi, 65535		; 0000ffffH
  0001b	66 3b f2	 cmp	 si, dx
  0001e	5e		 pop	 esi
  0001f	74 0c		 je	 SHORT $LN4@pbackfail
  00021	66 3b 50 fe	 cmp	 dx, WORD PTR [eax-2]
  00025	74 06		 je	 SHORT $LN4@pbackfail
  00027	f6 41 40 02	 test	 BYTE PTR [ecx+64], 2
  0002b	75 28		 jne	 SHORT $LN3@pbackfail
$LN4@pbackfail:

; 163  : 		else
; 164  : 			{	// back up one position and store put-back character
; 165  : 			_Mysb::gbump(-1);

  0002d	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00030	ff 00		 inc	 DWORD PTR [eax]
  00032	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00035	83 00 fe	 add	 DWORD PTR [eax], -2	; fffffffeH

; 166  : 			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  00038	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0003d	66 3b c2	 cmp	 ax, dx
  00040	74 0e		 je	 SHORT $LN37@pbackfail

; 167  : 				*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  00042	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00045	8b 01		 mov	 eax, DWORD PTR [ecx]
  00047	66 89 10	 mov	 WORD PTR [eax], dx

; 168  : 			return (_Traits::not_eof(_Meta));

  0004a	0f b7 c2	 movzx	 eax, dx

; 169  : 			}
; 170  : 		}

  0004d	c2 04 00	 ret	 4

; 168  : 			return (_Traits::not_eof(_Meta));

$LN37@pbackfail:
  00050	33 c0		 xor	 eax, eax

; 169  : 			}
; 170  : 		}

  00052	c2 04 00	 ret	 4
$LN3@pbackfail:

; 162  : 			return (_Traits::eof());	// can't put back, fail

  00055	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 169  : 			}
; 170  : 		}

  0005a	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ
_TEXT	SEGMENT
?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::underflow, COMDAT
; _this$ = ecx

; 174  : 		if (_Mysb::gptr() == 0)

  00000	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00003	56		 push	 esi
  00004	8b 32		 mov	 esi, DWORD PTR [edx]
  00006	85 f6		 test	 esi, esi
  00008	75 07		 jne	 SHORT $LN8@underflow

; 175  : 			return (_Traits::eof());	// no character buffer, fail

  0000a	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0000f	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00010	c3		 ret	 0
$LN8@underflow:
  00011	53		 push	 ebx
  00012	57		 push	 edi

; 176  : 		else if (_Mysb::gptr() < _Mysb::egptr())

  00013	8b 79 30	 mov	 edi, DWORD PTR [ecx+48]
  00016	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00018	8b c6		 mov	 eax, esi
  0001a	8d 1c 58	 lea	 ebx, DWORD PTR [eax+ebx*2]
  0001d	3b c3		 cmp	 eax, ebx
  0001f	73 07		 jae	 SHORT $LN6@underflow

; 177  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  00021	66 8b 06	 mov	 ax, WORD PTR [esi]
  00024	5f		 pop	 edi
  00025	5b		 pop	 ebx
  00026	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00027	c3		 ret	 0
$LN6@underflow:

; 178  : 		else if (_Mystate & _Noread || _Mysb::pptr() == 0
; 179  : 			|| _Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr())

  00028	f6 41 40 04	 test	 BYTE PTR [ecx+64], 4
  0002c	75 31		 jne	 SHORT $LN3@underflow
  0002e	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00031	8b 00		 mov	 eax, DWORD PTR [eax]
  00033	85 c0		 test	 eax, eax
  00035	74 28		 je	 SHORT $LN3@underflow
  00037	3b c6		 cmp	 eax, esi
  00039	77 05		 ja	 SHORT $LN4@underflow
  0003b	39 71 3c	 cmp	 DWORD PTR [ecx+60], esi
  0003e	76 1f		 jbe	 SHORT $LN3@underflow
$LN4@underflow:

; 181  : 		else
; 182  : 			{	// extend read buffer into written area, then return buffered
; 183  : 			if (_Seekhigh < _Mysb::pptr())

  00040	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00043	73 03		 jae	 SHORT $LN1@underflow

; 184  : 				_Seekhigh = _Mysb::pptr();

  00045	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN1@underflow:

; 185  : 			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);

  00048	8b 12		 mov	 edx, DWORD PTR [edx]
  0004a	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0004d	2b c2		 sub	 eax, edx
  0004f	d1 f8		 sar	 eax, 1
  00051	89 07		 mov	 DWORD PTR [edi], eax

; 186  : 			return (_Traits::to_int_type(*_Mysb::gptr()));

  00053	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00056	8b 11		 mov	 edx, DWORD PTR [ecx]
  00058	66 8b 02	 mov	 ax, WORD PTR [edx]
  0005b	5f		 pop	 edi
  0005c	5b		 pop	 ebx
  0005d	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  0005e	c3		 ret	 0
$LN3@underflow:
  0005f	5f		 pop	 edi
  00060	5b		 pop	 ebx

; 180  : 			return (_Traits::eof());	// can't read, fail

  00061	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00066	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00067	c3		 ret	 0
?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Way$ = 16						; size = 4
__Which$ = 20						; size = 4
?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekoff, COMDAT
; _this$ = ecx

; 193  : 		{	// change position by _Off, according to _Way, _Mode

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 194  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00003	8b 71 24	 mov	 esi, DWORD PTR [ecx+36]
  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	57		 push	 edi
  00009	85 c0		 test	 eax, eax
  0000b	74 08		 je	 SHORT $LN20@seekoff
  0000d	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00010	73 03		 jae	 SHORT $LN20@seekoff

; 195  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  00012	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN20@seekoff:

; 196  : 
; 197  : 		if (_Which & ios_base::in && _Mysb::gptr() != 0)

  00015	8a 5c 24 20	 mov	 bl, BYTE PTR __Which$[esp+12]
  00019	f6 c3 01	 test	 bl, 1
  0001c	0f 84 b5 00 00
	00		 je	 $LN19@seekoff
  00022	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00025	8b 10		 mov	 edx, DWORD PTR [eax]
  00027	85 d2		 test	 edx, edx
  00029	0f 84 a8 00 00
	00		 je	 $LN19@seekoff

; 198  : 			{	// position within read buffer
; 199  : 			if (_Way == ios_base::end)

  0002f	8b 44 24 1c	 mov	 eax, DWORD PTR __Way$[esp+12]
  00033	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  00039	83 f8 02	 cmp	 eax, 2
  0003c	75 12		 jne	 SHORT $LN18@seekoff

; 200  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  0003e	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00041	8b 69 3c	 mov	 ebp, DWORD PTR [ecx+60]
  00044	2b 28		 sub	 ebp, DWORD PTR [eax]
  00046	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  0004a	d1 fd		 sar	 ebp, 1
  0004c	03 f5		 add	 esi, ebp

; 201  : 			else if (_Way == ios_base::cur

  0004e	eb 27		 jmp	 SHORT $LN14@seekoff
$LN18@seekoff:

; 202  : 				&& (_Which & ios_base::out) == 0)

  00050	83 f8 01	 cmp	 eax, 1
  00053	75 16		 jne	 SHORT $LN16@seekoff
  00055	f6 c3 02	 test	 bl, 2
  00058	75 15		 jne	 SHORT $LN71@seekoff

; 203  : 				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());

  0005a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0005d	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  00061	8b ea		 mov	 ebp, edx
  00063	2b 28		 sub	 ebp, DWORD PTR [eax]
  00065	d1 fd		 sar	 ebp, 1
  00067	03 f5		 add	 esi, ebp
  00069	eb 0c		 jmp	 SHORT $LN14@seekoff
$LN16@seekoff:

; 204  : 			else if (_Way != ios_base::beg)

  0006b	85 c0		 test	 eax, eax
  0006d	74 04		 je	 SHORT $LN72@seekoff
$LN71@seekoff:

; 205  : 				_Off = _BADOFF;

  0006f	8b f7		 mov	 esi, edi
  00071	eb 04		 jmp	 SHORT $LN14@seekoff
$LN72@seekoff:
  00073	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
$LN14@seekoff:

; 206  : 
; 207  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00077	85 f6		 test	 esi, esi
  00079	0f 8c cd 00 00
	00		 jl	 $LN3@seekoff
  0007f	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00082	8b 00		 mov	 eax, DWORD PTR [eax]
  00084	8b 69 3c	 mov	 ebp, DWORD PTR [ecx+60]
  00087	2b e8		 sub	 ebp, eax
  00089	d1 fd		 sar	 ebp, 1
  0008b	3b f5		 cmp	 esi, ebp
  0008d	0f 8f b9 00 00
	00		 jg	 $LN3@seekoff

; 208  : 				{	// change read position
; 209  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00093	2b c2		 sub	 eax, edx
  00095	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00098	d1 f8		 sar	 eax, 1
  0009a	03 c6		 add	 eax, esi
  0009c	29 02		 sub	 DWORD PTR [edx], eax
  0009e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000a1	03 c0		 add	 eax, eax
  000a3	01 02		 add	 DWORD PTR [edx], eax

; 210  : 				if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000a5	f6 c3 02	 test	 bl, 2
  000a8	0f 84 a8 00 00
	00		 je	 $LN75@seekoff
  000ae	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000b1	8b 02		 mov	 eax, DWORD PTR [edx]
  000b3	85 c0		 test	 eax, eax
  000b5	0f 84 9b 00 00
	00		 je	 $LN75@seekoff

; 211  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 212  : 						_Mysb::epptr());	// change write position to match

  000bb	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000be	8b 12		 mov	 edx, DWORD PTR [edx]
  000c0	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]
  000c3	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000c6	50		 push	 eax
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000cc	50		 push	 eax
  000cd	8b 02		 mov	 eax, DWORD PTR [edx]
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp

; 213  : 				}
; 214  : 			else

  000d5	eb 7f		 jmp	 SHORT $LN75@seekoff
$LN19@seekoff:

; 215  : 				_Off = _BADOFF;
; 216  : 			}
; 217  : 		else if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000d7	f6 c3 02	 test	 bl, 2
  000da	74 74		 je	 SHORT $LN9@seekoff
  000dc	8b 16		 mov	 edx, DWORD PTR [esi]
  000de	85 d2		 test	 edx, edx
  000e0	74 6e		 je	 SHORT $LN9@seekoff

; 218  : 			{	// position within write buffer
; 219  : 			if (_Way == ios_base::end)

  000e2	8b 44 24 1c	 mov	 eax, DWORD PTR __Way$[esp+12]
  000e6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  000ec	83 f8 02	 cmp	 eax, 2
  000ef	75 12		 jne	 SHORT $LN8@seekoff

; 220  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  000f1	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  000f4	8b 59 3c	 mov	 ebx, DWORD PTR [ecx+60]
  000f7	2b 18		 sub	 ebx, DWORD PTR [eax]
  000f9	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  000fd	d1 fb		 sar	 ebx, 1
  000ff	03 f3		 add	 esi, ebx
  00101	eb 20		 jmp	 SHORT $LN4@seekoff
$LN8@seekoff:

; 221  : 			else if (_Way == ios_base::cur)

  00103	83 f8 01	 cmp	 eax, 1
  00106	75 11		 jne	 SHORT $LN6@seekoff

; 222  : 				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());

  00108	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0010b	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  0010f	8b da		 mov	 ebx, edx
  00111	2b 18		 sub	 ebx, DWORD PTR [eax]
  00113	d1 fb		 sar	 ebx, 1
  00115	03 f3		 add	 esi, ebx
  00117	eb 0a		 jmp	 SHORT $LN4@seekoff
$LN6@seekoff:

; 223  : 			else if (_Way != ios_base::beg)
; 224  : 				_Off = _BADOFF;

  00119	8b f7		 mov	 esi, edi
  0011b	85 c0		 test	 eax, eax
  0011d	75 04		 jne	 SHORT $LN4@seekoff
  0011f	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
$LN4@seekoff:

; 225  : 
; 226  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00123	85 f6		 test	 esi, esi
  00125	7c 25		 jl	 SHORT $LN3@seekoff
  00127	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0012a	8b 00		 mov	 eax, DWORD PTR [eax]
  0012c	8b 59 3c	 mov	 ebx, DWORD PTR [ecx+60]
  0012f	2b d8		 sub	 ebx, eax
  00131	d1 fb		 sar	 ebx, 1
  00133	3b f3		 cmp	 esi, ebx
  00135	7f 15		 jg	 SHORT $LN3@seekoff

; 227  : 				_Mysb::pbump((int)(_Mysb::eback()
; 228  : 					- _Mysb::pptr() + _Off));	// change write position

  00137	2b c2		 sub	 eax, edx
  00139	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0013c	d1 f8		 sar	 eax, 1
  0013e	03 c6		 add	 eax, esi
  00140	29 02		 sub	 DWORD PTR [edx], eax
  00142	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00145	8d 14 00	 lea	 edx, DWORD PTR [eax+eax]
  00148	01 11		 add	 DWORD PTR [ecx], edx

; 229  : 			else

  0014a	eb 0a		 jmp	 SHORT $LN75@seekoff
$LN3@seekoff:

; 230  : 				_Off = _BADOFF;

  0014c	8b f7		 mov	 esi, edi

; 231  : 			}
; 232  : 		else

  0014e	eb 06		 jmp	 SHORT $LN75@seekoff
$LN9@seekoff:

; 233  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  00150	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
$LN75@seekoff:

; 234  : 		return (pos_type(_Off));

  00156	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  0015a	5f		 pop	 edi
  0015b	89 30		 mov	 DWORD PTR [eax], esi
  0015d	5e		 pop	 esi
  0015e	33 c9		 xor	 ecx, ecx
  00160	5d		 pop	 ebp
  00161	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00164	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00167	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0016a	5b		 pop	 ebx

; 235  : 		}

  0016b	c2 10 00	 ret	 16			; 00000010H
?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Ptr$ = 12						; size = 24
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekpos, COMDAT
; _this$ = ecx

; 240  : 		streamoff _Off = (streamoff)_Ptr;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Ptr$[esp+4]
  00008	55		 push	 ebp
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 241  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  0000b	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  0000e	8d 34 02	 lea	 esi, DWORD PTR [edx+eax]
  00011	8b 07		 mov	 eax, DWORD PTR [edi]
  00013	85 c0		 test	 eax, eax
  00015	74 08		 je	 SHORT $LN12@seekpos
  00017	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  0001a	73 03		 jae	 SHORT $LN12@seekpos

; 242  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  0001c	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN12@seekpos:

; 243  : 
; 244  : 		if (_Off == _BADOFF)

  0001f	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  00025	3b f5		 cmp	 esi, ebp
  00027	0f 84 99 00 00
	00		 je	 $LN54@seekpos
  0002d	53		 push	 ebx

; 245  : 			;
; 246  : 		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)

  0002e	8a 5c 24 30	 mov	 bl, BYTE PTR __Mode$[esp+12]
  00032	f6 c3 01	 test	 bl, 1
  00035	74 59		 je	 SHORT $LN53@seekpos
  00037	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0003a	8b 10		 mov	 edx, DWORD PTR [eax]
  0003c	85 d2		 test	 edx, edx
  0003e	74 50		 je	 SHORT $LN53@seekpos

; 247  : 			{	// position within read buffer
; 248  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00040	85 f6		 test	 esi, esi
  00042	7c 7f		 jl	 SHORT $LN4@seekpos
  00044	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00047	8b 00		 mov	 eax, DWORD PTR [eax]
  00049	8b 79 3c	 mov	 edi, DWORD PTR [ecx+60]
  0004c	2b f8		 sub	 edi, eax
  0004e	d1 ff		 sar	 edi, 1
  00050	3b f7		 cmp	 esi, edi
  00052	7f 6f		 jg	 SHORT $LN4@seekpos

; 249  : 				{	// change read position
; 250  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00054	2b c2		 sub	 eax, edx
  00056	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00059	d1 f8		 sar	 eax, 1
  0005b	03 c6		 add	 eax, esi
  0005d	29 02		 sub	 DWORD PTR [edx], eax
  0005f	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00062	03 c0		 add	 eax, eax
  00064	01 02		 add	 DWORD PTR [edx], eax

; 251  : 				if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  00066	f6 c3 02	 test	 bl, 2
  00069	74 5a		 je	 SHORT $LN55@seekpos
  0006b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0006e	8b 02		 mov	 eax, DWORD PTR [edx]
  00070	85 c0		 test	 eax, eax
  00072	74 51		 je	 SHORT $LN55@seekpos

; 252  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 253  : 						_Mysb::epptr());	// change write position to match

  00074	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00077	8b 12		 mov	 edx, DWORD PTR [edx]
  00079	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]
  0007c	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0007f	50		 push	 eax
  00080	8b 02		 mov	 eax, DWORD PTR [edx]
  00082	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00085	50		 push	 eax
  00086	8b 02		 mov	 eax, DWORD PTR [edx]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp

; 254  : 				}
; 255  : 			else
; 256  : 				_Off = _BADOFF;

  0008e	eb 35		 jmp	 SHORT $LN55@seekpos
$LN53@seekpos:

; 257  : 			}
; 258  : 		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  00090	f6 c3 02	 test	 bl, 2
  00093	74 2e		 je	 SHORT $LN4@seekpos
  00095	8b 3f		 mov	 edi, DWORD PTR [edi]
  00097	85 ff		 test	 edi, edi
  00099	74 28		 je	 SHORT $LN4@seekpos

; 259  : 			{	// position within write buffer
; 260  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0009b	85 f6		 test	 esi, esi
  0009d	7c 24		 jl	 SHORT $LN4@seekpos
  0009f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000a2	8b 02		 mov	 eax, DWORD PTR [edx]
  000a4	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  000a7	2b d0		 sub	 edx, eax
  000a9	d1 fa		 sar	 edx, 1
  000ab	3b f2		 cmp	 esi, edx
  000ad	7f 14		 jg	 SHORT $LN4@seekpos

; 261  : 				_Mysb::pbump((int)(_Mysb::eback()
; 262  : 					- _Mysb::pptr() + _Off));	// change write position

  000af	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000b2	2b c7		 sub	 eax, edi
  000b4	d1 f8		 sar	 eax, 1
  000b6	03 c6		 add	 eax, esi
  000b8	29 02		 sub	 DWORD PTR [edx], eax
  000ba	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000bd	03 c0		 add	 eax, eax
  000bf	01 01		 add	 DWORD PTR [ecx], eax

; 263  : 			else

  000c1	eb 02		 jmp	 SHORT $LN55@seekpos
$LN4@seekpos:

; 264  : 				_Off = _BADOFF;
; 265  : 			}
; 266  : 		else
; 267  : 			_Off = _BADOFF;

  000c3	8b f5		 mov	 esi, ebp
$LN55@seekpos:
  000c5	5b		 pop	 ebx
$LN54@seekpos:

; 268  : 		return (streampos(_Off));

  000c6	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  000ca	5f		 pop	 edi
  000cb	33 c9		 xor	 ecx, ecx
  000cd	89 30		 mov	 DWORD PTR [eax], esi
  000cf	5e		 pop	 esi
  000d0	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000d3	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000d6	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  000d9	5d		 pop	 ebp

; 269  : 		}

  000da	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekpos
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 249  : 			{	// return designated value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 250  : 
; 251  :  #if _HAS_ITERATOR_DEBUGGING
; 252  : 			if (this->_Mycont == 0
; 253  : 				|| _Ptr == 0
; 254  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 255  : 				{
; 256  : 				_DEBUG_ERROR("map/set iterator not dereferencable");
; 257  : 				_SCL_SECURE_OUT_OF_RANGE;
; 258  : 				}
; 259  :  #else
; 260  : 			_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN15@operator@29
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 261  : 			_SCL_SECURE_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN9@operator@29
$LN15@operator@29:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN10@operator@29
$LN9@operator@29:
  00018	33 c0		 xor	 eax, eax
$LN10@operator@29:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00020	75 05		 jne	 SHORT $LN1@operator@29
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN1@operator@29:

; 262  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 263  : 
; 264  : 			return (_Myval(_Ptr));

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 c0 0c	 add	 eax, 12			; 0000000cH
  0002d	5e		 pop	 esi

; 265  : 			}

  0002e	c3		 ret	 0
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??D?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBEABKXZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??D?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBEABKXZ
_TEXT	SEGMENT
??D?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBEABKXZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator*, COMDAT
; _this$ = ecx

; 211  : 			{	// return designated value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 212  : 
; 213  :  #if _HAS_ITERATOR_DEBUGGING
; 214  : 			if (this->_Mycont == 0
; 215  : 				|| _Ptr == 0
; 216  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 217  : 				{
; 218  : 				_DEBUG_ERROR("list iterator not dereferencable");
; 219  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 220  : 				}
; 221  :  #else
; 222  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN17@operator@30
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 223  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN11@operator@30
$LN17@operator@30:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN12@operator@30
$LN11@operator@30:
  00018	33 c0		 xor	 eax, eax
$LN12@operator@30:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN1@operator@30
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN1@operator@30:

; 224  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 225  : 
; 226  : 			return (_Myval(_Ptr));

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 c0 08	 add	 eax, 8
  0002d	5e		 pop	 esi

; 227  : 			}

  0002e	c3		 ret	 0
??D?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBEABKXZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator*
_TEXT	ENDS
PUBLIC	??A?$vector@KV?$allocator@K@std@@@std@@QAEAAKI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::operator[]
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??A?$vector@KV?$allocator@K@std@@@std@@QAEAAKI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@KV?$allocator@K@std@@@std@@QAEAAKI@Z PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00006	2b 46 0c	 sub	 eax, DWORD PTR [esi+12]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __Pos$[esp+4]
  0000e	c1 f8 02	 sar	 eax, 2
  00011	3b f8		 cmp	 edi, eax
  00013	72 05		 jb	 SHORT $LN1@operator@31
  00015	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN1@operator@31:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

  0001a	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0001d	8d 04 b9	 lea	 eax, DWORD PTR [ecx+edi*4]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 786  : 		}

  00022	c2 04 00	 ret	 4
??A?$vector@KV?$allocator@K@std@@@std@@QAEAAKI@Z ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::operator[]
_TEXT	ENDS
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 43   : 		_Tidy();

  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 44   : 		}

  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?eq@?$char_traits@D@std@@SA_NABD0@Z		; std::char_traits<char>::eq
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?eq@?$char_traits@D@std@@SA_NABD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@D@std@@SA_NABD0@Z PROC		; std::char_traits<char>::eq, COMDAT

; 430  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000a	33 c0		 xor	 eax, eax
  0000c	3a 0a		 cmp	 cl, BYTE PTR [edx]
  0000e	0f 94 c0	 sete	 al

; 431  : 		}

  00011	c3		 ret	 0
?eq@?$char_traits@D@std@@SA_NABD0@Z ENDP		; std::char_traits<char>::eq
_TEXT	ENDS
PUBLIC	?not_eof@?$char_traits@D@std@@SAHABH@Z		; std::char_traits<char>::not_eof
; Function compile flags: /Ogtpy
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 522  : 		return (_Meta != eof() ? _Meta : !eof());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Meta$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8b c1		 mov	 eax, ecx
  00008	40		 inc	 eax
  00009	f7 d8		 neg	 eax
  0000b	1b c0		 sbb	 eax, eax
  0000d	23 c1		 and	 eax, ecx

; 523  : 		}

  0000f	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHABH@Z ENDP		; std::char_traits<char>::not_eof
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT
; _this$ = ecx

; 157  : 		if (_Mysb::gptr() == 0
; 158  : 			|| _Mysb::gptr() <= _Mysb::eback()
; 159  : 			|| !_Traits::eq_int_type(_Traits::eof(), _Meta)
; 160  : 			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
; 161  : 			&& _Mystate & _Constant)

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]
  00005	85 c0		 test	 eax, eax
  00007	74 3b		 je	 SHORT $LN3@pbackfail@2
  00009	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0000c	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000e	76 34		 jbe	 SHORT $LN3@pbackfail@2
  00010	8b 54 24 04	 mov	 edx, DWORD PTR __Meta$[esp-4]
  00014	83 fa ff	 cmp	 edx, -1
  00017	74 0b		 je	 SHORT $LN4@pbackfail@2
  00019	3a 50 ff	 cmp	 dl, BYTE PTR [eax-1]
  0001c	74 06		 je	 SHORT $LN4@pbackfail@2
  0001e	f6 41 40 02	 test	 BYTE PTR [ecx+64], 2
  00022	75 20		 jne	 SHORT $LN3@pbackfail@2
$LN4@pbackfail@2:

; 163  : 		else
; 164  : 			{	// back up one position and store put-back character
; 165  : 			_Mysb::gbump(-1);

  00024	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00027	ff 00		 inc	 DWORD PTR [eax]
  00029	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0002c	ff 08		 dec	 DWORD PTR [eax]

; 166  : 			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  0002e	83 fa ff	 cmp	 edx, -1
  00031	74 0c		 je	 SHORT $LN37@pbackfail@2

; 167  : 				*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  00033	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	88 11		 mov	 BYTE PTR [ecx], dl

; 168  : 			return (_Traits::not_eof(_Meta));

  0003a	8b c2		 mov	 eax, edx

; 169  : 			}
; 170  : 		}

  0003c	c2 04 00	 ret	 4

; 168  : 			return (_Traits::not_eof(_Meta));

$LN37@pbackfail@2:
  0003f	33 c0		 xor	 eax, eax

; 169  : 			}
; 170  : 		}

  00041	c2 04 00	 ret	 4
$LN3@pbackfail@2:

; 162  : 			return (_Traits::eof());	// can't put back, fail

  00044	83 c8 ff	 or	 eax, -1

; 169  : 			}
; 170  : 		}

  00047	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT
; _this$ = ecx

; 174  : 		if (_Mysb::gptr() == 0)

  00000	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00003	56		 push	 esi
  00004	8b 32		 mov	 esi, DWORD PTR [edx]
  00006	85 f6		 test	 esi, esi
  00008	75 05		 jne	 SHORT $LN8@underflow@2

; 175  : 			return (_Traits::eof());	// no character buffer, fail

  0000a	83 c8 ff	 or	 eax, -1
  0000d	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  0000e	c3		 ret	 0
$LN8@underflow@2:
  0000f	53		 push	 ebx
  00010	57		 push	 edi

; 176  : 		else if (_Mysb::gptr() < _Mysb::egptr())

  00011	8b 79 30	 mov	 edi, DWORD PTR [ecx+48]
  00014	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00016	8b c6		 mov	 eax, esi
  00018	03 d8		 add	 ebx, eax
  0001a	3b c3		 cmp	 eax, ebx
  0001c	73 07		 jae	 SHORT $LN6@underflow@2

; 177  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  0001e	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx
  00023	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00024	c3		 ret	 0
$LN6@underflow@2:

; 178  : 		else if (_Mystate & _Noread || _Mysb::pptr() == 0
; 179  : 			|| _Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr())

  00025	f6 41 40 04	 test	 BYTE PTR [ecx+64], 4
  00029	75 2f		 jne	 SHORT $LN3@underflow@2
  0002b	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0002e	8b 00		 mov	 eax, DWORD PTR [eax]
  00030	85 c0		 test	 eax, eax
  00032	74 26		 je	 SHORT $LN3@underflow@2
  00034	3b c6		 cmp	 eax, esi
  00036	77 05		 ja	 SHORT $LN4@underflow@2
  00038	39 71 3c	 cmp	 DWORD PTR [ecx+60], esi
  0003b	76 1d		 jbe	 SHORT $LN3@underflow@2
$LN4@underflow@2:

; 181  : 		else
; 182  : 			{	// extend read buffer into written area, then return buffered
; 183  : 			if (_Seekhigh < _Mysb::pptr())

  0003d	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00040	73 03		 jae	 SHORT $LN1@underflow@2

; 184  : 				_Seekhigh = _Mysb::pptr();

  00042	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN1@underflow@2:

; 185  : 			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);

  00045	8b 12		 mov	 edx, DWORD PTR [edx]
  00047	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0004a	2b c2		 sub	 eax, edx
  0004c	89 07		 mov	 DWORD PTR [edi], eax

; 186  : 			return (_Traits::to_int_type(*_Mysb::gptr()));

  0004e	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00051	8b 11		 mov	 edx, DWORD PTR [ecx]
  00053	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00056	5f		 pop	 edi
  00057	5b		 pop	 ebx
  00058	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00059	c3		 ret	 0
$LN3@underflow@2:
  0005a	5f		 pop	 edi
  0005b	5b		 pop	 ebx

; 180  : 			return (_Traits::eof());	// can't read, fail

  0005c	83 c8 ff	 or	 eax, -1
  0005f	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00060	c3		 ret	 0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Way$ = 16						; size = 4
__Which$ = 20						; size = 4
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT
; _this$ = ecx

; 194  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00000	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00003	8b 02		 mov	 eax, DWORD PTR [edx]
  00005	85 c0		 test	 eax, eax
  00007	74 08		 je	 SHORT $LN20@seekoff@2
  00009	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  0000c	73 03		 jae	 SHORT $LN20@seekoff@2

; 195  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  0000e	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN20@seekoff@2:
  00011	53		 push	 ebx

; 196  : 
; 197  : 		if (_Which & ios_base::in && _Mysb::gptr() != 0)

  00012	8a 5c 24 14	 mov	 bl, BYTE PTR __Which$[esp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	f6 c3 01	 test	 bl, 1
  0001b	0f 84 a8 00 00
	00		 je	 $LN19@seekoff@2
  00021	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00024	8b 30		 mov	 esi, DWORD PTR [eax]
  00026	85 f6		 test	 esi, esi
  00028	0f 84 9b 00 00
	00		 je	 $LN19@seekoff@2

; 198  : 			{	// position within read buffer
; 199  : 			if (_Way == ios_base::end)

  0002e	8b 44 24 18	 mov	 eax, DWORD PTR __Way$[esp+8]
  00032	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  00038	83 f8 02	 cmp	 eax, 2
  0003b	75 10		 jne	 SHORT $LN18@seekoff@2

; 200  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  0003d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00040	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00043	2b 02		 sub	 eax, DWORD PTR [edx]
  00045	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
  00049	03 d0		 add	 edx, eax

; 201  : 			else if (_Way == ios_base::cur

  0004b	eb 25		 jmp	 SHORT $LN14@seekoff@2
$LN18@seekoff@2:

; 202  : 				&& (_Which & ios_base::out) == 0)

  0004d	83 f8 01	 cmp	 eax, 1
  00050	75 14		 jne	 SHORT $LN16@seekoff@2
  00052	f6 c3 02	 test	 bl, 2
  00055	75 13		 jne	 SHORT $LN73@seekoff@2

; 203  : 				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());

  00057	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0005a	8b c6		 mov	 eax, esi
  0005c	2b 02		 sub	 eax, DWORD PTR [edx]
  0005e	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
  00062	03 d0		 add	 edx, eax
  00064	eb 0c		 jmp	 SHORT $LN14@seekoff@2
$LN16@seekoff@2:

; 204  : 			else if (_Way != ios_base::beg)

  00066	85 c0		 test	 eax, eax
  00068	74 04		 je	 SHORT $LN74@seekoff@2
$LN73@seekoff@2:

; 205  : 				_Off = _BADOFF;

  0006a	8b d7		 mov	 edx, edi
  0006c	eb 04		 jmp	 SHORT $LN14@seekoff@2
$LN74@seekoff@2:
  0006e	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
$LN14@seekoff@2:

; 206  : 
; 207  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00072	85 d2		 test	 edx, edx
  00074	0f 8c b9 00 00
	00		 jl	 $LN3@seekoff@2
  0007a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0007d	8b 00		 mov	 eax, DWORD PTR [eax]
  0007f	55		 push	 ebp
  00080	8b 69 3c	 mov	 ebp, DWORD PTR [ecx+60]
  00083	2b e8		 sub	 ebp, eax
  00085	3b d5		 cmp	 edx, ebp
  00087	5d		 pop	 ebp
  00088	0f 8f a5 00 00
	00		 jg	 $LN3@seekoff@2

; 208  : 				{	// change read position
; 209  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  0008e	2b c6		 sub	 eax, esi
  00090	8b 71 30	 mov	 esi, DWORD PTR [ecx+48]
  00093	03 c2		 add	 eax, edx
  00095	29 06		 sub	 DWORD PTR [esi], eax
  00097	8b 71 20	 mov	 esi, DWORD PTR [ecx+32]
  0009a	01 06		 add	 DWORD PTR [esi], eax

; 210  : 				if (_Which & ios_base::out && _Mysb::pptr() != 0)

  0009c	f6 c3 02	 test	 bl, 2
  0009f	0f 84 98 00 00
	00		 je	 $LN77@seekoff@2
  000a5	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  000a8	8b 1f		 mov	 ebx, DWORD PTR [edi]
  000aa	85 db		 test	 ebx, ebx
  000ac	0f 84 8b 00 00
	00		 je	 $LN77@seekoff@2

; 211  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 212  : 						_Mysb::epptr());	// change write position to match

  000b2	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  000b5	8b 30		 mov	 esi, DWORD PTR [eax]
  000b7	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  000ba	8b 00		 mov	 eax, DWORD PTR [eax]
  000bc	03 c3		 add	 eax, ebx
  000be	89 37		 mov	 DWORD PTR [edi], esi
  000c0	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  000c3	2b c6		 sub	 eax, esi
  000c5	89 01		 mov	 DWORD PTR [ecx], eax

; 213  : 				}
; 214  : 			else

  000c7	eb 74		 jmp	 SHORT $LN77@seekoff@2
$LN19@seekoff@2:

; 215  : 				_Off = _BADOFF;
; 216  : 			}
; 217  : 		else if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000c9	f6 c3 02	 test	 bl, 2
  000cc	74 69		 je	 SHORT $LN9@seekoff@2
  000ce	8b 32		 mov	 esi, DWORD PTR [edx]
  000d0	85 f6		 test	 esi, esi
  000d2	74 63		 je	 SHORT $LN9@seekoff@2

; 218  : 			{	// position within write buffer
; 219  : 			if (_Way == ios_base::end)

  000d4	8b 44 24 18	 mov	 eax, DWORD PTR __Way$[esp+8]
  000d8	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  000de	83 f8 02	 cmp	 eax, 2
  000e1	75 10		 jne	 SHORT $LN8@seekoff@2

; 220  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  000e3	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000e6	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  000e9	2b 02		 sub	 eax, DWORD PTR [edx]
  000eb	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
  000ef	03 d0		 add	 edx, eax
  000f1	eb 1e		 jmp	 SHORT $LN4@seekoff@2
$LN8@seekoff@2:

; 221  : 			else if (_Way == ios_base::cur)

  000f3	83 f8 01	 cmp	 eax, 1
  000f6	75 0f		 jne	 SHORT $LN6@seekoff@2

; 222  : 				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());

  000f8	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000fb	8b c6		 mov	 eax, esi
  000fd	2b 02		 sub	 eax, DWORD PTR [edx]
  000ff	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
  00103	03 d0		 add	 edx, eax
  00105	eb 0a		 jmp	 SHORT $LN4@seekoff@2
$LN6@seekoff@2:

; 223  : 			else if (_Way != ios_base::beg)
; 224  : 				_Off = _BADOFF;

  00107	8b d7		 mov	 edx, edi
  00109	85 c0		 test	 eax, eax
  0010b	75 04		 jne	 SHORT $LN4@seekoff@2
  0010d	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
$LN4@seekoff@2:

; 225  : 
; 226  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00111	85 d2		 test	 edx, edx
  00113	7c 1e		 jl	 SHORT $LN3@seekoff@2
  00115	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00118	8b 00		 mov	 eax, DWORD PTR [eax]
  0011a	8b 59 3c	 mov	 ebx, DWORD PTR [ecx+60]
  0011d	2b d8		 sub	 ebx, eax
  0011f	3b d3		 cmp	 edx, ebx
  00121	7f 10		 jg	 SHORT $LN3@seekoff@2

; 227  : 				_Mysb::pbump((int)(_Mysb::eback()
; 228  : 					- _Mysb::pptr() + _Off));	// change write position

  00123	2b c6		 sub	 eax, esi
  00125	8b 71 34	 mov	 esi, DWORD PTR [ecx+52]
  00128	03 c2		 add	 eax, edx
  0012a	29 06		 sub	 DWORD PTR [esi], eax
  0012c	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0012f	01 01		 add	 DWORD PTR [ecx], eax

; 229  : 			else

  00131	eb 0a		 jmp	 SHORT $LN77@seekoff@2
$LN3@seekoff@2:

; 230  : 				_Off = _BADOFF;

  00133	8b d7		 mov	 edx, edi

; 231  : 			}
; 232  : 		else

  00135	eb 06		 jmp	 SHORT $LN77@seekoff@2
$LN9@seekoff@2:

; 233  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  00137	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
$LN77@seekoff@2:

; 234  : 		return (pos_type(_Off));

  0013d	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  00141	5f		 pop	 edi
  00142	33 c9		 xor	 ecx, ecx
  00144	5e		 pop	 esi
  00145	89 10		 mov	 DWORD PTR [eax], edx
  00147	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0014a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0014d	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00150	5b		 pop	 ebx

; 235  : 		}

  00151	c2 10 00	 ret	 16			; 00000010H
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Ptr$ = 12						; size = 24
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT
; _this$ = ecx

; 240  : 		streamoff _Off = (streamoff)_Ptr;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Ptr$[esp+4]
  00008	55		 push	 ebp
  00009	57		 push	 edi

; 241  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  0000a	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  0000d	03 d0		 add	 edx, eax
  0000f	8b 07		 mov	 eax, DWORD PTR [edi]
  00011	85 c0		 test	 eax, eax
  00013	74 08		 je	 SHORT $LN12@seekpos@2
  00015	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00018	73 03		 jae	 SHORT $LN12@seekpos@2

; 242  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  0001a	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN12@seekpos@2:

; 243  : 
; 244  : 		if (_Off == _BADOFF)

  0001d	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  00023	3b d5		 cmp	 edx, ebp
  00025	0f 84 8a 00 00
	00		 je	 $LN56@seekpos@2
  0002b	53		 push	 ebx

; 245  : 			;
; 246  : 		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)

  0002c	8a 5c 24 2c	 mov	 bl, BYTE PTR __Mode$[esp+8]
  00030	56		 push	 esi
  00031	f6 c3 01	 test	 bl, 1
  00034	74 4e		 je	 SHORT $LN55@seekpos@2
  00036	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00039	8b 30		 mov	 esi, DWORD PTR [eax]
  0003b	85 f6		 test	 esi, esi
  0003d	74 45		 je	 SHORT $LN55@seekpos@2

; 247  : 			{	// position within read buffer
; 248  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0003f	85 d2		 test	 edx, edx
  00041	7c 6e		 jl	 SHORT $LN4@seekpos@2
  00043	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00046	8b 00		 mov	 eax, DWORD PTR [eax]
  00048	8b 79 3c	 mov	 edi, DWORD PTR [ecx+60]
  0004b	2b f8		 sub	 edi, eax
  0004d	3b d7		 cmp	 edx, edi
  0004f	7f 60		 jg	 SHORT $LN4@seekpos@2

; 249  : 				{	// change read position
; 250  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00051	2b c6		 sub	 eax, esi
  00053	8b 71 30	 mov	 esi, DWORD PTR [ecx+48]
  00056	03 c2		 add	 eax, edx
  00058	29 06		 sub	 DWORD PTR [esi], eax
  0005a	8b 71 20	 mov	 esi, DWORD PTR [ecx+32]
  0005d	01 06		 add	 DWORD PTR [esi], eax

; 251  : 				if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  0005f	f6 c3 02	 test	 bl, 2
  00062	74 4f		 je	 SHORT $LN57@seekpos@2
  00064	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  00067	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00069	85 db		 test	 ebx, ebx
  0006b	74 46		 je	 SHORT $LN57@seekpos@2

; 252  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 253  : 						_Mysb::epptr());	// change write position to match

  0006d	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00070	8b 30		 mov	 esi, DWORD PTR [eax]
  00072	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00075	8b 00		 mov	 eax, DWORD PTR [eax]
  00077	03 c3		 add	 eax, ebx
  00079	89 37		 mov	 DWORD PTR [edi], esi
  0007b	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  0007e	2b c6		 sub	 eax, esi
  00080	89 01		 mov	 DWORD PTR [ecx], eax

; 254  : 				}
; 255  : 			else
; 256  : 				_Off = _BADOFF;

  00082	eb 2f		 jmp	 SHORT $LN57@seekpos@2
$LN55@seekpos@2:

; 257  : 			}
; 258  : 		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  00084	f6 c3 02	 test	 bl, 2
  00087	74 28		 je	 SHORT $LN4@seekpos@2
  00089	8b 3f		 mov	 edi, DWORD PTR [edi]
  0008b	85 ff		 test	 edi, edi
  0008d	74 22		 je	 SHORT $LN4@seekpos@2

; 259  : 			{	// position within write buffer
; 260  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0008f	85 d2		 test	 edx, edx
  00091	7c 1e		 jl	 SHORT $LN4@seekpos@2
  00093	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	8b 71 3c	 mov	 esi, DWORD PTR [ecx+60]
  0009b	2b f0		 sub	 esi, eax
  0009d	3b d6		 cmp	 edx, esi
  0009f	7f 10		 jg	 SHORT $LN4@seekpos@2

; 261  : 				_Mysb::pbump((int)(_Mysb::eback()
; 262  : 					- _Mysb::pptr() + _Off));	// change write position

  000a1	8b 71 34	 mov	 esi, DWORD PTR [ecx+52]
  000a4	2b c7		 sub	 eax, edi
  000a6	03 c2		 add	 eax, edx
  000a8	29 06		 sub	 DWORD PTR [esi], eax
  000aa	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000ad	01 01		 add	 DWORD PTR [ecx], eax

; 263  : 			else

  000af	eb 02		 jmp	 SHORT $LN57@seekpos@2
$LN4@seekpos@2:

; 264  : 				_Off = _BADOFF;
; 265  : 			}
; 266  : 		else
; 267  : 			_Off = _BADOFF;

  000b1	8b d5		 mov	 edx, ebp
$LN57@seekpos@2:
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
$LN56@seekpos@2:

; 268  : 		return (streampos(_Off));

  000b5	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  000b9	33 c9		 xor	 ecx, ecx
  000bb	5f		 pop	 edi
  000bc	89 10		 mov	 DWORD PTR [eax], edx
  000be	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000c1	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000c4	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  000c7	5d		 pop	 ebp

; 269  : 		}

  000c8	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 fc	 lea	 esi, DWORD PTR [ecx-4]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0000c	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00014	50		 push	 eax
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0001b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00020	83 c4 04	 add	 esp, 4
  00023	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00028	74 09		 je	 SHORT $LN13@scalar@11
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
$LN13@scalar@11:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 fc	 lea	 esi, DWORD PTR [ecx-4]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0000c	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00014	50		 push	 eax
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0001b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00020	83 c4 04	 add	 esp, 4
  00023	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00028	74 09		 je	 SHORT $LN13@scalar@12
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
$LN13@scalar@12:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 f8	 lea	 esi, DWORD PTR [ecx-8]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0000c	c7 44 02 f8 00
	00 00 00	 mov	 DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00014	50		 push	 eax
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0001b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00020	83 c4 04	 add	 esp, 4
  00023	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00028	74 09		 je	 SHORT $LN13@scalar@13
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
$LN13@scalar@13:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@14
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@14:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 f8	 lea	 esi, DWORD PTR [ecx-8]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0000c	c7 44 02 f8 00
	00 00 00	 mov	 DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00014	50		 push	 eax
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0001b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00020	83 c4 04	 add	 esp, 4
  00023	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00028	74 09		 je	 SHORT $LN13@scalar@15
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
$LN13@scalar@15:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@16
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@16:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 f4	 lea	 esi, DWORD PTR [ecx-12]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0000c	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  00014	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00022	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00025	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00028	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00030	50		 push	 eax
  00031	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00037	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0003c	83 c4 04	 add	 esp, 4
  0003f	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00044	74 09		 je	 SHORT $LN17@scalar@17
  00046	56		 push	 esi
  00047	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004c	83 c4 04	 add	 esp, 4
$LN17@scalar@17:
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	c2 04 00	 ret	 4
??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  00015	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0001a	74 09		 je	 SHORT $LN7@scalar@18
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$LN7@scalar@18:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	c2 04 00	 ret	 4
??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_iostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 f4	 lea	 esi, DWORD PTR [ecx-12]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0000c	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  00014	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00022	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00025	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00028	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00030	50		 push	 eax
  00031	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00037	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0003c	83 c4 04	 add	 esp, 4
  0003f	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00044	74 09		 je	 SHORT $LN17@scalar@19
  00046	56		 push	 esi
  00047	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004c	83 c4 04	 add	 esp, 4
$LN17@scalar@19:
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	c2 04 00	 ret	 4
??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_iostream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00015	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0001a	74 09		 je	 SHORT $LN7@scalar@20
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$LN7@scalar@20:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	c2 04 00	 ret	 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
tv206 = 12						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 1770 : 		{	// look for [_Ptr, _Ptr + _Count) beginnng at or after _Off

  00000	51		 push	 ecx

; 1771 : 
; 1772 :  #if _HAS_ITERATOR_DEBUGGING
; 1773 : 		if (_Count != 0)
; 1774 : 			_DEBUG_POINTER(_Ptr);
; 1775 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1776 : 
; 1777 : 		if (_Count == 0 && _Off <= _Mysize)

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Count$[esp]
  00005	8b 44 24 0c	 mov	 eax, DWORD PTR __Off$[esp]
  00009	89 0c 24	 mov	 DWORD PTR _this$[esp+4], ecx
  0000c	85 d2		 test	 edx, edx
  0000e	75 09		 jne	 SHORT $LN6@find@2
  00010	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]

; 1778 : 			return (_Off);	// null string always matches (if inside string)

  00013	0f 86 86 00 00
	00		 jbe	 $LN7@find@2
$LN6@find@2:
  00019	53		 push	 ebx
  0001a	55		 push	 ebp
  0001b	56		 push	 esi
  0001c	57		 push	 edi

; 1779 : 
; 1780 : 		size_type _Nm;
; 1781 : 		if (_Off < _Mysize && _Count <= (_Nm = _Mysize - _Off))

  0001d	8b 79 14	 mov	 edi, DWORD PTR [ecx+20]
  00020	3b c7		 cmp	 eax, edi
  00022	73 74		 jae	 SHORT $LN2@find@2
  00024	2b f8		 sub	 edi, eax
  00026	3b d7		 cmp	 edx, edi
  00028	77 6e		 ja	 SHORT $LN2@find@2

; 1782 : 			{	// room for match, look for it
; 1783 : 			const _Elem *_Uptr, *_Vptr;
; 1784 : 			for (_Nm -= _Count - 1, _Vptr = _Myptr() + _Off;

  0002a	be 01 00 00 00	 mov	 esi, 1
  0002f	2b f2		 sub	 esi, edx
  00031	03 fe		 add	 edi, esi
  00033	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00037	72 0b		 jb	 SHORT $LN11@find@2
  00039	83 c1 04	 add	 ecx, 4
  0003c	89 4c 24 1c	 mov	 DWORD PTR tv206[esp+16], ecx
  00040	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00042	eb 07		 jmp	 SHORT $LN12@find@2
$LN11@find@2:
  00044	83 c1 04	 add	 ecx, 4
  00047	89 4c 24 1c	 mov	 DWORD PTR tv206[esp+16], ecx
$LN12@find@2:

; 1785 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1786 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)

  0004b	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  0004f	8d 1c 01	 lea	 ebx, DWORD PTR [ecx+eax]
  00052	0f be 45 00	 movsx	 eax, BYTE PTR [ebp]
  00056	57		 push	 edi
  00057	50		 push	 eax
  00058	53		 push	 ebx
  00059	e8 00 00 00 00	 call	 _memchr
  0005e	8b f0		 mov	 esi, eax
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH
  00063	85 f6		 test	 esi, esi
  00065	74 31		 je	 SHORT $LN2@find@2
$LL4@find@2:

; 1787 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)

  00067	8b 4c 24 20	 mov	 ecx, DWORD PTR __Count$[esp+16]
  0006b	51		 push	 ecx
  0006c	55		 push	 ebp
  0006d	56		 push	 esi
  0006e	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH
  00076	85 c0		 test	 eax, eax
  00078	74 29		 je	 SHORT $LN20@find@2
  0007a	0f be 55 00	 movsx	 edx, BYTE PTR [ebp]
  0007e	2b de		 sub	 ebx, esi
  00080	8d 7c 1f ff	 lea	 edi, DWORD PTR [edi+ebx-1]
  00084	57		 push	 edi
  00085	52		 push	 edx
  00086	8d 5e 01	 lea	 ebx, DWORD PTR [esi+1]
  00089	53		 push	 ebx
  0008a	e8 00 00 00 00	 call	 _memchr
  0008f	8b f0		 mov	 esi, eax
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
  00094	85 f6		 test	 esi, esi
  00096	75 cf		 jne	 SHORT $LL4@find@2
$LN2@find@2:
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5d		 pop	 ebp

; 1789 : 			}
; 1790 : 
; 1791 : 		return (npos);	// no match

  0009b	83 c8 ff	 or	 eax, -1
  0009e	5b		 pop	 ebx
$LN7@find@2:

; 1792 : 		}

  0009f	59		 pop	 ecx
  000a0	c2 0c 00	 ret	 12			; 0000000cH
$LN20@find@2:

; 1788 : 					return (_Uptr - _Myptr());	// found a match

  000a3	8b 44 24 10	 mov	 eax, DWORD PTR _this$[esp+20]
  000a7	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  000ab	8b 4c 24 1c	 mov	 ecx, DWORD PTR tv206[esp+16]
  000af	72 02		 jb	 SHORT $LN18@find@2
  000b1	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN18@find@2:
  000b3	5f		 pop	 edi
  000b4	8b c6		 mov	 eax, esi
  000b6	5e		 pop	 esi
  000b7	5d		 pop	 ebp
  000b8	2b c1		 sub	 eax, ecx
  000ba	5b		 pop	 ebx

; 1792 : 		}

  000bb	59		 pop	 ecx
  000bc	c2 0c 00	 ret	 12			; 0000000cH
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
PUBLIC	?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
; Function compile flags: /Ogtpy
;	COMDAT ?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
tv170 = 12						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of, COMDAT
; _this$ = ecx

; 1968 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	8b e9		 mov	 ebp, ecx

; 1969 : 
; 1970 :  #if _HAS_ITERATOR_DEBUGGING
; 1971 : 		if (_Count != 0)
; 1972 : 			_DEBUG_POINTER(_Ptr);
; 1973 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1974 : 
; 1975 : 		if (0 < _Mysize)

  00004	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	85 c0		 test	 eax, eax
  0000b	76 7c		 jbe	 SHORT $LN24@find_last_

; 1976 : 			for (const _Elem *_Uptr = _Myptr()
; 1977 : 				+ (_Off < _Mysize ? _Off : _Mysize - 1); ; --_Uptr)

  0000d	8b 4c 24 18	 mov	 ecx, DWORD PTR __Off$[esp+12]
  00011	3b c8		 cmp	 ecx, eax
  00013	72 03		 jb	 SHORT $LN11@find_last_
  00015	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
$LN11@find_last_:
  00018	83 7d 18 10	 cmp	 DWORD PTR [ebp+24], 16	; 00000010H
  0001c	8d 45 04	 lea	 eax, DWORD PTR [ebp+4]
  0001f	89 44 24 18	 mov	 DWORD PTR tv170[esp+12], eax
  00023	72 02		 jb	 SHORT $LN15@find_last_
  00025	8b 00		 mov	 eax, DWORD PTR [eax]
$LN15@find_last_:

; 1978 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)

  00027	8b 7c 24 1c	 mov	 edi, DWORD PTR __Count$[esp+12]
  0002b	8b 5c 24 14	 mov	 ebx, DWORD PTR __Ptr$[esp+12]
  0002f	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  00032	0f be 06	 movsx	 eax, BYTE PTR [esi]
  00035	57		 push	 edi
  00036	50		 push	 eax
  00037	53		 push	 ebx
  00038	e8 00 00 00 00	 call	 _memchr
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00040	85 c0		 test	 eax, eax
  00042	74 1f		 je	 SHORT $LN23@find_last_
$LL6@find_last_:

; 1980 : 				else if (_Uptr == _Myptr())

  00044	8b cd		 mov	 ecx, ebp
  00046	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  0004b	3b f0		 cmp	 esi, eax
  0004d	74 3a		 je	 SHORT $LN24@find_last_
  0004f	0f be 4e ff	 movsx	 ecx, BYTE PTR [esi-1]
  00053	4e		 dec	 esi
  00054	57		 push	 edi
  00055	51		 push	 ecx
  00056	53		 push	 ebx
  00057	e8 00 00 00 00	 call	 _memchr
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005f	85 c0		 test	 eax, eax
  00061	75 e1		 jne	 SHORT $LL6@find_last_
$LN23@find_last_:

; 1979 : 					return (_Uptr - _Myptr());

  00063	83 7d 18 10	 cmp	 DWORD PTR [ebp+24], 16	; 00000010H
  00067	72 11		 jb	 SHORT $LN20@find_last_
  00069	8b 54 24 18	 mov	 edx, DWORD PTR tv170[esp+12]
  0006d	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0006f	5f		 pop	 edi
  00070	8b c6		 mov	 eax, esi
  00072	5e		 pop	 esi
  00073	5d		 pop	 ebp
  00074	2b c1		 sub	 eax, ecx
  00076	5b		 pop	 ebx

; 1983 : 		}

  00077	c2 0c 00	 ret	 12			; 0000000cH

; 1979 : 					return (_Uptr - _Myptr());

$LN20@find_last_:
  0007a	8b 4c 24 18	 mov	 ecx, DWORD PTR tv170[esp+12]
  0007e	5f		 pop	 edi
  0007f	8b c6		 mov	 eax, esi
  00081	5e		 pop	 esi
  00082	5d		 pop	 ebp
  00083	2b c1		 sub	 eax, ecx
  00085	5b		 pop	 ebx

; 1983 : 		}

  00086	c2 0c 00	 ret	 12			; 0000000cH
$LN24@find_last_:
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5d		 pop	 ebp

; 1981 : 					break;
; 1982 : 		return (npos);

  0008c	83 c8 ff	 or	 eax, -1
  0008f	5b		 pop	 ebx

; 1983 : 		}

  00090	c2 0c 00	 ret	 12			; 0000000cH
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtpy
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__Count$ = 20						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 2038 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 2039 : 
; 2040 :  #if _HAS_ITERATOR_DEBUGGING
; 2041 : 		if (_Count != 0)
; 2042 : 			_DEBUG_POINTER(_Ptr);
; 2043 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2044 : 
; 2045 : 		if (_Mysize < _Off)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Off$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	39 6f 14	 cmp	 DWORD PTR [edi+20], ebp
  0000d	73 05		 jae	 SHORT $LN2@compare@3

; 2046 : 			_String_base::_Xran();	// _Off off end

  0000f	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN2@compare@3:

; 2047 : 		if (_Mysize - _Off < _N0)

  00014	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00017	8b 74 24 18	 mov	 esi, DWORD PTR __N0$[esp+12]
  0001b	2b c5		 sub	 eax, ebp
  0001d	3b c6		 cmp	 eax, esi
  0001f	73 02		 jae	 SHORT $LN1@compare@3

; 2048 : 			_N0 = _Mysize - _Off;	// trim _N0 to size

  00021	8b f0		 mov	 esi, eax
$LN1@compare@3:

; 2049 : 
; 2050 : 		size_type _Ans = _Traits::compare(_Myptr() + _Off, _Ptr,
; 2051 : 			_N0 < _Count ? _N0 : _Count);

  00023	8b 5c 24 20	 mov	 ebx, DWORD PTR __Count$[esp+12]
  00027	8b c6		 mov	 eax, esi
  00029	3b f3		 cmp	 esi, ebx
  0002b	72 02		 jb	 SHORT $LN6@compare@3
  0002d	8b c3		 mov	 eax, ebx
$LN6@compare@3:
  0002f	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  00033	72 05		 jb	 SHORT $LN13@compare@3
  00035	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  00038	eb 03		 jmp	 SHORT $LN14@compare@3
$LN13@compare@3:
  0003a	83 c7 04	 add	 edi, 4
$LN14@compare@3:
  0003d	50		 push	 eax
  0003e	8b 44 24 20	 mov	 eax, DWORD PTR __Ptr$[esp+16]
  00042	50		 push	 eax
  00043	03 fd		 add	 edi, ebp
  00045	57		 push	 edi
  00046	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2052 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2053 : 			: _N0 == _Count ? 0 : +1);

  0004e	85 c0		 test	 eax, eax
  00050	75 15		 jne	 SHORT $LN8@compare@3
  00052	3b f3		 cmp	 esi, ebx
  00054	73 0a		 jae	 SHORT $LN7@compare@3
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5d		 pop	 ebp
  00059	83 c8 ff	 or	 eax, -1
  0005c	5b		 pop	 ebx

; 2054 : 		}

  0005d	c2 10 00	 ret	 16			; 00000010H
$LN7@compare@3:

; 2052 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2053 : 			: _N0 == _Count ? 0 : +1);

  00060	33 c0		 xor	 eax, eax
  00062	3b f3		 cmp	 esi, ebx
  00064	0f 95 c0	 setne	 al
$LN8@compare@3:
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5d		 pop	 ebp
  0006a	5b		 pop	 ebx

; 2054 : 		}

  0006b	c2 10 00	 ret	 16			; 00000010H
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
; Function compile flags: /Ogtpy
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 2058 : 		return (_Mybase::_Alval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 2059 : 		}

  00004	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z
_TEXT	SEGMENT
tv204 = -4						; size = 4
__Ptr$ = 8						; size = 4
tv206 = 12						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find, COMDAT
; _this$ = ecx

; 1770 : 		{	// look for [_Ptr, _Ptr + _Count) beginnng at or after _Off

  00000	51		 push	 ecx

; 1771 : 
; 1772 :  #if _HAS_ITERATOR_DEBUGGING
; 1773 : 		if (_Count != 0)
; 1774 : 			_DEBUG_POINTER(_Ptr);
; 1775 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1776 : 
; 1777 : 		if (_Count == 0 && _Off <= _Mysize)

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 14	 mov	 esi, DWORD PTR __Count$[esp+4]
  0000a	85 f6		 test	 esi, esi
  0000c	75 05		 jne	 SHORT $LN6@find@3
  0000e	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]

; 1778 : 			return (_Off);	// null string always matches (if inside string)

  00011	76 60		 jbe	 SHORT $LN7@find@3
$LN6@find@3:

; 1779 : 
; 1780 : 		size_type _Nm;
; 1781 : 		if (_Off < _Mysize && _Count <= (_Nm = _Mysize - _Off))

  00013	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00016	53		 push	 ebx
  00017	55		 push	 ebp
  00018	57		 push	 edi
  00019	3b c2		 cmp	 eax, edx
  0001b	73 50		 jae	 SHORT $LN2@find@3
  0001d	2b d0		 sub	 edx, eax
  0001f	8b fa		 mov	 edi, edx
  00021	3b f7		 cmp	 esi, edi
  00023	77 48		 ja	 SHORT $LN2@find@3

; 1782 : 			{	// room for match, look for it
; 1783 : 			const _Elem *_Uptr, *_Vptr;
; 1784 : 			for (_Nm -= _Count - 1, _Vptr = _Myptr() + _Off;

  00025	ba 01 00 00 00	 mov	 edx, 1
  0002a	2b d6		 sub	 edx, esi
  0002c	03 fa		 add	 edi, edx
  0002e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00031	83 c1 04	 add	 ecx, 4
  00034	89 54 24 10	 mov	 DWORD PTR tv204[esp+20], edx
  00038	89 4c 24 1c	 mov	 DWORD PTR tv206[esp+16], ecx
  0003c	83 fa 08	 cmp	 edx, 8
  0003f	72 02		 jb	 SHORT $LN12@find@3
  00041	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN12@find@3:
  00043	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  00047	8d 1c 41	 lea	 ebx, DWORD PTR [ecx+eax*2]
  0004a	8d 9b 00 00 00
	00		 npad	 6
$LL4@find@3:

; 1785 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1786 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)

  00050	8b c7		 mov	 eax, edi
  00052	8b f3		 mov	 esi, ebx
  00054	85 ff		 test	 edi, edi
  00056	76 15		 jbe	 SHORT $LN2@find@3
  00058	0f b7 4d 00	 movzx	 ecx, WORD PTR [ebp]
  0005c	8d 64 24 00	 npad	 4
$LL18@find@3:
  00060	66 39 0e	 cmp	 WORD PTR [esi], cx
  00063	74 13		 je	 SHORT $LN29@find@3
  00065	83 c6 02	 add	 esi, 2
  00068	83 e8 01	 sub	 eax, 1
  0006b	75 f3		 jne	 SHORT $LL18@find@3
$LN2@find@3:
  0006d	5f		 pop	 edi
  0006e	5d		 pop	 ebp

; 1789 : 			}
; 1790 : 
; 1791 : 		return (npos);	// no match

  0006f	83 c8 ff	 or	 eax, -1
  00072	5b		 pop	 ebx
$LN7@find@3:
  00073	5e		 pop	 esi

; 1792 : 		}

  00074	59		 pop	 ecx
  00075	c2 0c 00	 ret	 12			; 0000000cH
$LN29@find@3:

; 1785 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1786 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)

  00078	85 f6		 test	 esi, esi
  0007a	74 f1		 je	 SHORT $LN2@find@3

; 1787 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)

  0007c	8b 44 24 20	 mov	 eax, DWORD PTR __Count$[esp+16]
  00080	50		 push	 eax
  00081	55		 push	 ebp
  00082	56		 push	 esi
  00083	e8 00 00 00 00	 call	 _wmemcmp
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008b	85 c0		 test	 eax, eax
  0008d	74 12		 je	 SHORT $LN30@find@3
  0008f	8b ce		 mov	 ecx, esi
  00091	2b cb		 sub	 ecx, ebx
  00093	d1 f9		 sar	 ecx, 1
  00095	83 ca ff	 or	 edx, -1
  00098	2b d1		 sub	 edx, ecx
  0009a	03 fa		 add	 edi, edx
  0009c	8d 5e 02	 lea	 ebx, DWORD PTR [esi+2]
  0009f	eb af		 jmp	 SHORT $LL4@find@3
$LN30@find@3:

; 1788 : 					return (_Uptr - _Myptr());	// found a match

  000a1	83 7c 24 10 08	 cmp	 DWORD PTR tv204[esp+20], 8
  000a6	72 14		 jb	 SHORT $LN25@find@3
  000a8	8b 44 24 1c	 mov	 eax, DWORD PTR tv206[esp+16]
  000ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ae	5f		 pop	 edi
  000af	8b c6		 mov	 eax, esi
  000b1	5d		 pop	 ebp
  000b2	2b c1		 sub	 eax, ecx
  000b4	5b		 pop	 ebx
  000b5	d1 f8		 sar	 eax, 1
  000b7	5e		 pop	 esi

; 1792 : 		}

  000b8	59		 pop	 ecx
  000b9	c2 0c 00	 ret	 12			; 0000000cH

; 1788 : 					return (_Uptr - _Myptr());	// found a match

$LN25@find@3:
  000bc	8b 4c 24 1c	 mov	 ecx, DWORD PTR tv206[esp+16]
  000c0	5f		 pop	 edi
  000c1	8b c6		 mov	 eax, esi
  000c3	5d		 pop	 ebp
  000c4	2b c1		 sub	 eax, ecx
  000c6	5b		 pop	 ebx
  000c7	d1 f8		 sar	 eax, 1
  000c9	5e		 pop	 esi

; 1792 : 		}

  000ca	59		 pop	 ecx
  000cb	c2 0c 00	 ret	 12			; 0000000cH
?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::get_allocator
; Function compile flags: /Ogtpy
;	COMDAT ?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::get_allocator, COMDAT
; _this$ = ecx

; 2058 : 		return (_Mybase::_Alval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 2059 : 		}

  00004	c2 04 00	 ret	 4
?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::get_allocator
_TEXT	ENDS
PUBLIC	??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z PROC ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ENDP ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
PUBLIC	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputc, COMDAT
; _this$ = ecx

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 22		 je	 SHORT $LN3@sputc
  00008	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0000b	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0000e	7e 1a		 jle	 SHORT $LN3@sputc
  00010	8b c2		 mov	 eax, edx
  00012	ff 08		 dec	 DWORD PTR [eax]
  00014	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0001c	89 11		 mov	 DWORD PTR [ecx], edx
  0001e	8a 4c 24 04	 mov	 cl, BYTE PTR __Ch$[esp-4]
  00022	88 08		 mov	 BYTE PTR [eax], cl
  00024	0f b6 c1	 movzx	 eax, cl

; 164  : 		}

  00027	c2 04 00	 ret	 4
$LN3@sputc:

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

  0002a	0f b6 54 24 04	 movzx	 edx, BYTE PTR __Ch$[esp-4]
  0002f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	89 54 24 04	 mov	 DWORD PTR __Ch$[esp-4], edx
  00038	ff e0		 jmp	 eax
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputc
_TEXT	ENDS
PUBLIC	?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputc
; Function compile flags: /Ogtpy
;	COMDAT ?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputc, COMDAT
; _this$ = ecx

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 23		 je	 SHORT $LN3@sputc@2
  00008	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0000b	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0000e	7e 1b		 jle	 SHORT $LN3@sputc@2
  00010	8b c2		 mov	 eax, edx
  00012	ff 08		 dec	 DWORD PTR [eax]
  00014	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0001c	89 11		 mov	 DWORD PTR [ecx], edx
  0001e	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ch$[esp-4]
  00022	66 89 08	 mov	 WORD PTR [eax], cx
  00025	0f b7 c1	 movzx	 eax, cx

; 164  : 		}

  00028	c2 04 00	 ret	 4
$LN3@sputc@2:

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	8b 54 24 04	 mov	 edx, DWORD PTR __Ch$[esp-4]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	52		 push	 edx
  00035	ff d0		 call	 eax
  00037	0f b7 c0	 movzx	 eax, ax

; 164  : 		}

  0003a	c2 04 00	 ret	 4
?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputc
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAABKPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Key
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAABKPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAABKPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Key, COMDAT

; 162  : 		return (_Mybase::_Kfn(_Myval(_Pnode)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 163  : 		}

  00007	c3		 ret	 0
?_Key@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAABKPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Key
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Lrotate
; Function compile flags: /Ogtpy
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1286 : 		_Nodeptr _Pnode = _Right(_Wherenode);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Wherenode$[esp-4]
  00004	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00007	56		 push	 esi

; 1287 : 		_Right(_Wherenode) = _Left(_Pnode);

  00008	8b 30		 mov	 esi, DWORD PTR [eax]
  0000a	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1288 : 
; 1289 : 		if (!_Isnil(_Left(_Pnode)))

  0000d	8b 30		 mov	 esi, DWORD PTR [eax]
  0000f	80 7e 19 00	 cmp	 BYTE PTR [esi+25], 0
  00013	75 03		 jne	 SHORT $LN5@Lrotate

; 1290 : 			_Parent(_Left(_Pnode)) = _Wherenode;

  00015	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Lrotate:

; 1291 : 		_Parent(_Pnode) = _Parent(_Wherenode);

  00018	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001b	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1292 : 
; 1293 : 		if (_Wherenode == _Root())

  0001e	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00021	5e		 pop	 esi
  00022	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00025	75 0b		 jne	 SHORT $LN4@Lrotate

; 1294 : 			_Root() = _Pnode;

  00027	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1299 : 
; 1300 : 		_Left(_Pnode) = _Wherenode;

  0002a	89 10		 mov	 DWORD PTR [eax], edx

; 1301 : 		_Parent(_Wherenode) = _Pnode;

  0002c	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1302 : 		}

  0002f	c2 04 00	 ret	 4
$LN4@Lrotate:

; 1295 : 		else if (_Wherenode == _Left(_Parent(_Wherenode)))

  00032	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00035	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00037	75 0a		 jne	 SHORT $LN2@Lrotate

; 1296 : 			_Left(_Parent(_Wherenode)) = _Pnode;

  00039	89 01		 mov	 DWORD PTR [ecx], eax

; 1299 : 
; 1300 : 		_Left(_Pnode) = _Wherenode;

  0003b	89 10		 mov	 DWORD PTR [eax], edx

; 1301 : 		_Parent(_Wherenode) = _Pnode;

  0003d	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1302 : 		}

  00040	c2 04 00	 ret	 4
$LN2@Lrotate:

; 1297 : 		else
; 1298 : 			_Right(_Parent(_Wherenode)) = _Pnode;

  00043	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1299 : 
; 1300 : 		_Left(_Pnode) = _Wherenode;

  00046	89 10		 mov	 DWORD PTR [eax], edx

; 1301 : 		_Parent(_Wherenode) = _Pnode;

  00048	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1302 : 		}

  0004b	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::~_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::~_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::~_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfile> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfile> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfile> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfile> >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfile> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfile> >
_TEXT	ENDS
PUBLIC	??Econst_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Econst_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 273  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 274  : 			_Inc();

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Inc

; 275  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 276  : 			}

  0000b	c3		 ret	 0
??Econst_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	??Diterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEAAU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::iterator::operator*
; Function compile flags: /Ogtpy
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEAAU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@XZ
_TEXT	SEGMENT
??Diterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEAAU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::iterator::operator*, COMDAT
; _this$ = ecx

; 464  : 			{	// return designated value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 465  : 			return ((reference)**(const_iterator *)this);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN17@operator@32
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN11@operator@32
$LN17@operator@32:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN12@operator@32
$LN11@operator@32:
  00018	33 c0		 xor	 eax, eax
$LN12@operator@32:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00020	75 05		 jne	 SHORT $LN3@operator@32
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@32:
  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 c0 0c	 add	 eax, 12			; 0000000cH
  0002d	5e		 pop	 esi

; 466  : 			}

  0002e	c3		 ret	 0
??Diterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEAAU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@E@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<unsigned char> >::~_Container_base_aux_alloc_real<std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@E@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@E@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<unsigned char> >::~_Container_base_aux_alloc_real<std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@E@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<unsigned char> >::~_Container_base_aux_alloc_real<std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@K@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<unsigned long> >::~_Container_base_aux_alloc_real<std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@K@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@K@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<unsigned long> >::~_Container_base_aux_alloc_real<std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@K@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<unsigned long> >::~_Container_base_aux_alloc_real<std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??E?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??E?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx

; 235  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 236  : 
; 237  :  #if _HAS_ITERATOR_DEBUGGING
; 238  : 			if (this->_Mycont == 0
; 239  : 				|| _Ptr == 0
; 240  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 241  : 				{
; 242  : 				_DEBUG_ERROR("list iterator not incrementable");
; 243  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 244  : 				}
; 245  :  #else
; 246  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN17@operator@33
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 247  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN11@operator@33
$LN17@operator@33:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN12@operator@33
$LN11@operator@33:
  00018	33 c0		 xor	 eax, eax
$LN12@operator@33:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN1@operator@33
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN1@operator@33:

; 248  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 249  : 
; 250  : 			_Ptr = _Nextnode(_Ptr);

  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	8b 02		 mov	 eax, DWORD PTR [edx]
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 251  : 			return (*this);

  0002f	8b c6		 mov	 eax, esi
  00031	5e		 pop	 esi

; 252  : 			}

  00032	c3		 ret	 0
??E?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator++
_TEXT	ENDS
PUBLIC	??9?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator!=
; Function compile flags: /Ogtpy
;	COMDAT ??9?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator!=, COMDAT
; _this$ = ecx

; 302  : 			{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 303  : 			return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN3@operator@34
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN4@operator@34
$LN3@operator@34:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN4@operator@34:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 304  : 			}

  00026	c2 04 00	 ret	 4
??9?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator!=
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenInfo> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenInfo> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenInfo> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenInfo> >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenInfo> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenInfo> >
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@EV?$allocator@E@std@@@std@@QBEAAEXZ ; std::_Vector_iterator<unsigned char,std::allocator<unsigned char> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@EV?$allocator@E@std@@@std@@QBEAAEXZ
_TEXT	SEGMENT
??D?$_Vector_iterator@EV?$allocator@E@std@@@std@@QBEAAEXZ PROC ; std::_Vector_iterator<unsigned char,std::allocator<unsigned char> >::operator*, COMDAT
; _this$ = ecx

; 338  : 		{	// return designated object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 339  : 		return ((reference)**(_Mybase *)this);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN15@operator@35
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN11@operator@35
$LN15@operator@35:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN12@operator@35
$LN11@operator@35:
  00018	33 c0		 xor	 eax, eax
$LN12@operator@35:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 0a		 jb	 SHORT $LN16@operator@35
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	5e		 pop	 esi

; 340  : 		}

  0002b	c3		 ret	 0
$LN16@operator@35:

; 339  : 		return ((reference)**(_Mybase *)this);

  0002c	8b c1		 mov	 eax, ecx
  0002e	5e		 pop	 esi

; 340  : 		}

  0002f	c3		 ret	 0
??D?$_Vector_iterator@EV?$allocator@E@std@@@std@@QBEAAEXZ ENDP ; std::_Vector_iterator<unsigned char,std::allocator<unsigned char> >::operator*
_TEXT	ENDS
PUBLIC	?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__P2$ = 8						; size = 8
__P1$ = 16						; size = 8
?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif, COMDAT

; 2143 : 		return (_STR_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __P2$[esp]
  00004	85 c0		 test	 eax, eax
  00006	75 01		 jne	 SHORT $LN3@Pdif

; 2144 : 		}

  00008	c3		 ret	 0
$LN3@Pdif:

; 2143 : 		return (_STR_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);

  00009	8b 4c 24 04	 mov	 ecx, DWORD PTR __P2$[esp-4]
  0000d	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00010	74 13		 je	 SHORT $LN6@Pdif
  00012	85 c9		 test	 ecx, ecx
  00014	74 06		 je	 SHORT $LN5@Pdif
  00016	3b 4c 24 0c	 cmp	 ecx, DWORD PTR __P1$[esp-4]
  0001a	74 09		 je	 SHORT $LN6@Pdif
$LN5@Pdif:
  0001c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00021	8b 44 24 08	 mov	 eax, DWORD PTR __P2$[esp]
$LN6@Pdif:
  00025	2b 44 24 10	 sub	 eax, DWORD PTR __P1$[esp]

; 2144 : 		}

  00029	c3		 ret	 0
?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
; Function compile flags: /Ogtpy
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00004	33 d2		 xor	 edx, edx
  00006	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  0000a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000d	72 0a		 jb	 SHORT $LN5@Eos@2
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 2115 : 		}

  00016	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos@2:
  00019	66 89 54 41 04	 mov	 WORD PTR [ecx+eax*2+4], dx

; 2115 : 		}

  0001e	c2 04 00	 ret	 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
PUBLIC	??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
EXTRN	??0_Mutex@std@@QAE@XZ:PROC			; std::_Mutex::_Mutex
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ$0
__ehfuncinfo$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	ENDS
;	COMDAT ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
__Lock$141321 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 28   : 		{	// construct with no buffers

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx
  00028	89 5c 24 14	 mov	 DWORD PTR _this$[esp+36], ebx
  0002c	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0002f	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  00035	e8 00 00 00 00	 call	 ??0_Mutex@std@@QAE@XZ	; std::_Mutex::_Mutex
  0003a	6a 04		 push	 4
  0003c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00049	8b f0		 mov	 esi, eax
  0004b	83 c4 04	 add	 esp, 4
  0004e	85 f6		 test	 esi, esi
  00050	74 30		 je	 SHORT $LN3@basic_stre@3
  00052	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  00057	89 06		 mov	 DWORD PTR [esi], eax
  00059	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0005e	6a 00		 push	 0
  00060	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$141321[esp+40]
  00064	8b f8		 mov	 edi, eax
  00066	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0006b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0006e	83 f8 ff	 cmp	 eax, -1
  00071	73 04		 jae	 SHORT $LN8@basic_stre@3
  00073	40		 inc	 eax
  00074	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN8@basic_stre@3:
  00077	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$141321[esp+36]
  0007b	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00080	eb 02		 jmp	 SHORT $LN4@basic_stre@3
$LN3@basic_stre@3:
  00082	33 f6		 xor	 esi, esi
$LN4@basic_stre@3:

; 29   : 		_Init();

  00084	8b cb		 mov	 ecx, ebx
  00086	89 73 38	 mov	 DWORD PTR [ebx+56], esi
  00089	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init

; 30   : 		}

  0008e	8b c3		 mov	 eax, ebx
  00090	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	83 c4 14	 add	 esp, 20			; 00000014H
  000a2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
__ehhandler$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  00012	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
PUBLIC	??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ$0
__ehfuncinfo$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	ENDS
;	COMDAT ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
_TEXT	SEGMENT
__Lock$141348 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 28   : 		{	// construct with no buffers

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx
  00028	89 5c 24 14	 mov	 DWORD PTR _this$[esp+36], ebx
  0002c	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0002f	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  00035	e8 00 00 00 00	 call	 ??0_Mutex@std@@QAE@XZ	; std::_Mutex::_Mutex
  0003a	6a 04		 push	 4
  0003c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00049	8b f0		 mov	 esi, eax
  0004b	83 c4 04	 add	 esp, 4
  0004e	85 f6		 test	 esi, esi
  00050	74 30		 je	 SHORT $LN3@basic_stre@4
  00052	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  00057	89 06		 mov	 DWORD PTR [esi], eax
  00059	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0005e	6a 00		 push	 0
  00060	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$141348[esp+40]
  00064	8b f8		 mov	 edi, eax
  00066	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0006b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0006e	83 f8 ff	 cmp	 eax, -1
  00071	73 04		 jae	 SHORT $LN8@basic_stre@4
  00073	40		 inc	 eax
  00074	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN8@basic_stre@4:
  00077	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$141348[esp+36]
  0007b	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00080	eb 02		 jmp	 SHORT $LN4@basic_stre@4
$LN3@basic_stre@4:
  00082	33 f6		 xor	 esi, esi
$LN4@basic_stre@4:

; 29   : 		_Init();

  00084	8b cb		 mov	 ecx, ebx
  00086	89 73 38	 mov	 DWORD PTR [ebx+56], esi
  00089	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init

; 30   : 		}

  0008e	8b c3		 mov	 eax, ebx
  00090	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	83 c4 14	 add	 esp, 20			; 00000014H
  000a2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
__ehhandler$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  00012	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Lbound
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABK@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 1264 : 		_Nodeptr _Pnode = _Root();

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1265 : 		_Nodeptr _Wherenode = _Myhead;	// end() if search fails
; 1266 : 
; 1267 : 		while (!_Isnil(_Pnode))

  00006	80 79 19 00	 cmp	 BYTE PTR [ecx+25], 0
  0000a	75 1a		 jne	 SHORT $LN3@Lbound
  0000c	8b 54 24 04	 mov	 edx, DWORD PTR __Keyval$[esp-4]
  00010	8b 12		 mov	 edx, DWORD PTR [edx]
$LL4@Lbound:

; 1268 : 			if (_DEBUG_LT_PRED(this->comp, _Key(_Pnode), _Keyval))

  00012	39 51 0c	 cmp	 DWORD PTR [ecx+12], edx
  00015	73 05		 jae	 SHORT $LN2@Lbound

; 1269 : 				_Pnode = _Right(_Pnode);	// descend right subtree

  00017	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 1270 : 			else

  0001a	eb 04		 jmp	 SHORT $LN1@Lbound
$LN2@Lbound:

; 1271 : 				{	// _Pnode not less than _Keyval, remember it
; 1272 : 				_Wherenode = _Pnode;

  0001c	8b c1		 mov	 eax, ecx

; 1273 : 				_Pnode = _Left(_Pnode);	// descend left subtree

  0001e	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN1@Lbound:

; 1265 : 		_Nodeptr _Wherenode = _Myhead;	// end() if search fails
; 1266 : 
; 1267 : 		while (!_Isnil(_Pnode))

  00020	80 79 19 00	 cmp	 BYTE PTR [ecx+25], 0
  00024	74 ec		 je	 SHORT $LL4@Lbound
$LN3@Lbound:

; 1274 : 				}
; 1275 : 
; 1276 : 		return (_Wherenode);	// return best remembered candidate
; 1277 : 		}

  00026	c2 04 00	 ret	 4
?_Lbound@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Lbound
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@K@std@@QAEPAKI@Z		; std::allocator<unsigned long>::allocate
; Function compile flags: /Ogtpy
;	COMDAT ?allocate@?$allocator@K@std@@QAEPAKI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@K@std@@QAEPAKI@Z PROC		; std::allocator<unsigned long>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@K@std@@YAPAKIPAK@Z ; std::_Allocate<unsigned long>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@K@std@@QAEPAKI@Z ENDP		; std::allocator<unsigned long>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEIXZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?max_size@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEIXZ PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 01	 mov	 eax, 33554431		; 01ffffffH

; 732  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBEIXZ ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAEPAUSecurityTokenKeyfile@CipherShed@@I@Z ; std::allocator<CipherShed::SecurityTokenKeyfile>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAEPAUSecurityTokenKeyfile@CipherShed@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAEPAUSecurityTokenKeyfile@CipherShed@@I@Z PROC ; std::allocator<CipherShed::SecurityTokenKeyfile>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@USecurityTokenKeyfile@CipherShed@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@IPAU12@@Z ; std::_Allocate<CipherShed::SecurityTokenKeyfile>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAEPAUSecurityTokenKeyfile@CipherShed@@I@Z ENDP ; std::allocator<CipherShed::SecurityTokenKeyfile>::allocate
_TEXT	ENDS
PUBLIC	??Fconst_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator--
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??Fconst_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Fconst_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator--, COMDAT
; _this$ = ecx

; 286  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 287  : 			_Dec();

  00003	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Dec

; 288  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 289  : 			}

  0000b	c3		 ret	 0
??Fconst_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator--
_TEXT	ENDS
PUBLIC	?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

  00000	83 c8 ff	 or	 eax, -1

; 732  : 		}

  00003	c3		 ret	 0
?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@E@std@@QAEPAEI@Z		; std::allocator<unsigned char>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@E@std@@QAEPAEI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@E@std@@QAEPAEI@Z PROC		; std::allocator<unsigned char>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@E@std@@YAPAEIPAE@Z ; std::_Allocate<unsigned char>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@E@std@@QAEPAEI@Z ENDP		; std::allocator<unsigned char>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@I@Z ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::allocate
; Function compile flags: /Ogtpy
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@ABQAU342@@Z PROC ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN5@construct
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN5@construct:

; 156  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z PROC ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 732  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@ABQAU342@@Z PROC ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN5@construct@2
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN5@construct@2:

; 156  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@@Z ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::operator!=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 216  : 		return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN3@operator@36
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN4@operator@36
$LN3@operator@36:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN4@operator@36:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 217  : 		}

  00026	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Bidit@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@HPBU12@ABU12@@std@@QAE@XZ ; std::_Bidit<std::pair<unsigned long const ,CipherShed::Pkcs11Session>,int,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const *,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const &>::_Bidit<std::pair<unsigned long const ,CipherShed::Pkcs11Session>,int,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const *,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Bidit@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@HPBU12@ABU12@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Bidit@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@HPBU12@ABU12@@std@@QAE@XZ PROC ; std::_Bidit<std::pair<unsigned long const ,CipherShed::Pkcs11Session>,int,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const *,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const &>::_Bidit<std::pair<unsigned long const ,CipherShed::Pkcs11Session>,int,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const *,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Bidit@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@HPBU12@ABU12@@std@@QAE@XZ ENDP ; std::_Bidit<std::pair<unsigned long const ,CipherShed::Pkcs11Session>,int,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const *,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const &>::_Bidit<std::pair<unsigned long const ,CipherShed::Pkcs11Session>,int,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const *,std::pair<unsigned long const ,CipherShed::Pkcs11Session> const &>
_TEXT	ENDS
PUBLIC	??0?$_Ranit@USecurityTokenKeyfile@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ ; std::_Ranit<CipherShed::SecurityTokenKeyfile,int,CipherShed::SecurityTokenKeyfile const *,CipherShed::SecurityTokenKeyfile const &>::_Ranit<CipherShed::SecurityTokenKeyfile,int,CipherShed::SecurityTokenKeyfile const *,CipherShed::SecurityTokenKeyfile const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Ranit@USecurityTokenKeyfile@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Ranit@USecurityTokenKeyfile@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ PROC ; std::_Ranit<CipherShed::SecurityTokenKeyfile,int,CipherShed::SecurityTokenKeyfile const *,CipherShed::SecurityTokenKeyfile const &>::_Ranit<CipherShed::SecurityTokenKeyfile,int,CipherShed::SecurityTokenKeyfile const *,CipherShed::SecurityTokenKeyfile const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Ranit@USecurityTokenKeyfile@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ ENDP ; std::_Ranit<CipherShed::SecurityTokenKeyfile,int,CipherShed::SecurityTokenKeyfile const *,CipherShed::SecurityTokenKeyfile const &>::_Ranit<CipherShed::SecurityTokenKeyfile,int,CipherShed::SecurityTokenKeyfile const *,CipherShed::SecurityTokenKeyfile const &>
_TEXT	ENDS
PUBLIC	??0?$_Bidit@KHPBKABK@std@@QAE@XZ		; std::_Bidit<unsigned long,int,unsigned long const *,unsigned long const &>::_Bidit<unsigned long,int,unsigned long const *,unsigned long const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Bidit@KHPBKABK@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Bidit@KHPBKABK@std@@QAE@XZ PROC			; std::_Bidit<unsigned long,int,unsigned long const *,unsigned long const &>::_Bidit<unsigned long,int,unsigned long const *,unsigned long const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Bidit@KHPBKABK@std@@QAE@XZ ENDP			; std::_Bidit<unsigned long,int,unsigned long const *,unsigned long const &>::_Bidit<unsigned long,int,unsigned long const *,unsigned long const &>
_TEXT	ENDS
PUBLIC	??0?$_Ranit@KHPBKABK@std@@QAE@XZ		; std::_Ranit<unsigned long,int,unsigned long const *,unsigned long const &>::_Ranit<unsigned long,int,unsigned long const *,unsigned long const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Ranit@KHPBKABK@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Ranit@KHPBKABK@std@@QAE@XZ PROC			; std::_Ranit<unsigned long,int,unsigned long const *,unsigned long const &>::_Ranit<unsigned long,int,unsigned long const *,unsigned long const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Ranit@KHPBKABK@std@@QAE@XZ ENDP			; std::_Ranit<unsigned long,int,unsigned long const *,unsigned long const &>::_Ranit<unsigned long,int,unsigned long const *,unsigned long const &>
_TEXT	ENDS
PUBLIC	??0?$_Bidit@USecurityTokenInfo@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ ; std::_Bidit<CipherShed::SecurityTokenInfo,int,CipherShed::SecurityTokenInfo const *,CipherShed::SecurityTokenInfo const &>::_Bidit<CipherShed::SecurityTokenInfo,int,CipherShed::SecurityTokenInfo const *,CipherShed::SecurityTokenInfo const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Bidit@USecurityTokenInfo@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Bidit@USecurityTokenInfo@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ PROC ; std::_Bidit<CipherShed::SecurityTokenInfo,int,CipherShed::SecurityTokenInfo const *,CipherShed::SecurityTokenInfo const &>::_Bidit<CipherShed::SecurityTokenInfo,int,CipherShed::SecurityTokenInfo const *,CipherShed::SecurityTokenInfo const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Bidit@USecurityTokenInfo@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ ENDP ; std::_Bidit<CipherShed::SecurityTokenInfo,int,CipherShed::SecurityTokenInfo const *,CipherShed::SecurityTokenInfo const &>::_Bidit<CipherShed::SecurityTokenInfo,int,CipherShed::SecurityTokenInfo const *,CipherShed::SecurityTokenInfo const &>
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::max_size, COMDAT
; _this$ = ecx

; 606  : 		return (this->_Alval.max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 607  : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::max_size
_TEXT	ENDS
PUBLIC	?construct@?$allocator@K@std@@QAEXPAKABK@Z	; std::allocator<unsigned long>::construct
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@K@std@@QAEXPAKABK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@K@std@@QAEXPAKABK@Z PROC		; std::allocator<unsigned long>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN5@construct@3
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN5@construct@3:

; 156  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@K@std@@QAEXPAKABK@Z ENDP		; std::allocator<unsigned long>::construct
_TEXT	ENDS
PUBLIC	??Econst_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AV012@H@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??Econst_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AV012@H@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 280  : 			const_iterator _Tmp = *this;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00005	56		 push	 esi
  00006	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  0000a	89 06		 mov	 DWORD PTR [esi], eax
  0000c	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 281  : 			++*this;

  0000f	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Inc

; 282  : 			return (_Tmp);

  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi

; 283  : 			}

  00017	c2 08 00	 ret	 8
??Econst_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AV012@H@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	??Fiterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::iterator::operator--
; Function compile flags: /Ogtpy
;	COMDAT ??Fiterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Fiterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::iterator::operator--, COMDAT
; _this$ = ecx

; 487  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 488  : 			--(*(const_iterator *)this);

  00003	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Dec

; 489  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 490  : 			}

  0000b	c3		 ret	 0
??Fiterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::iterator::operator--
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z PROC ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?max_size@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBEIXZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?max_size@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBEIXZ PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::max_size, COMDAT
; _this$ = ecx

; 625  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 03	 mov	 eax, 67108863		; 03ffffffH

; 626  : 		}

  00005	c3		 ret	 0
?max_size@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBEIXZ ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::max_size
_TEXT	ENDS
PUBLIC	??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 83   : 		__CLR_OR_THIS_CALL _String_const_iterator(pointer _Ptr, const _Container_base_secure *_Pstring)

  00000	53		 push	 ebx

; 84   : 			{	// construct with pointer _Ptr
; 85   : 			_SCL_SECURE_VALIDATE(

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __Pstring$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00013	85 f6		 test	 esi, esi
  00015	74 29		 je	 SHORT $LN1@String_con
  00017	85 db		 test	 ebx, ebx
  00019	74 25		 je	 SHORT $LN1@String_con
  0001b	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00021	83 fa 10	 cmp	 edx, 16			; 00000010H
  00024	72 04		 jb	 SHORT $LN11@String_con
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	eb 02		 jmp	 SHORT $LN12@String_con
$LN11@String_con:
  0002a	8b c8		 mov	 ecx, eax
$LN12@String_con:
  0002c	3b cb		 cmp	 ecx, ebx
  0002e	77 10		 ja	 SHORT $LN1@String_con
  00030	83 fa 10	 cmp	 edx, 16			; 00000010H
  00033	72 02		 jb	 SHORT $LN15@String_con
  00035	8b 00		 mov	 eax, DWORD PTR [eax]
$LN15@String_con:
  00037	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0003a	03 c8		 add	 ecx, eax
  0003c	3b d9		 cmp	 ebx, ecx
  0003e	76 05		 jbe	 SHORT $LN2@String_con
$LN1@String_con:

; 86   : 				_Pstring != NULL && 
; 87   : 				_Ptr != NULL && 
; 88   : 				((_Mystring *)_Pstring)->_Myptr() <= _Ptr && _Ptr <= (((_Mystring *)_Pstring)->_Myptr() + ((_Mystring *)_Pstring)->_Mysize));

  00040	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN2@String_con:

; 89   : 			this->_Mycont = _Pstring;

  00045	89 37		 mov	 DWORD PTR [edi], esi

; 90   : 			_Myptr = _Ptr;

  00047	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 91   : 			}

  0004a	8b c7		 mov	 eax, edi
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	c2 08 00	 ret	 8
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Y?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 375  : 		(*(_Mybase *)this) += _Off;

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	85 c0		 test	 eax, eax
  00008	75 0b		 jne	 SHORT $LN22@operator@37
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	85 c0		 test	 eax, eax
  00013	74 04		 je	 SHORT $LN12@operator@37
$LN22@operator@37:
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN13@operator@37
$LN12@operator@37:
  00019	33 c9		 xor	 ecx, ecx
$LN13@operator@37:
  0001b	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  0001f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00022	c1 e7 07	 shl	 edi, 7
  00025	03 d7		 add	 edx, edi
  00027	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0002a	77 0f		 ja	 SHORT $LN3@operator@37
  0002c	85 c0		 test	 eax, eax
  0002e	74 04		 je	 SHORT $LN18@operator@37
  00030	8b 00		 mov	 eax, DWORD PTR [eax]
  00032	eb 02		 jmp	 SHORT $LN19@operator@37
$LN18@operator@37:
  00034	33 c0		 xor	 eax, eax
$LN19@operator@37:
  00036	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  00039	73 05		 jae	 SHORT $LN23@operator@37
$LN3@operator@37:
  0003b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN23@operator@37:
  00040	01 7e 04	 add	 DWORD PTR [esi+4], edi
  00043	5f		 pop	 edi

; 376  : 		return (*this);

  00044	8b c6		 mov	 eax, esi
  00046	5e		 pop	 esi

; 377  : 		}

  00047	c2 04 00	 ret	 4
??Y?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@EV?$allocator@E@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<unsigned char,std::allocator<unsigned char> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Vector_iterator@EV?$allocator@E@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@EV?$allocator@E@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<unsigned char,std::allocator<unsigned char> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 375  : 		(*(_Mybase *)this) += _Off;

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	85 c0		 test	 eax, eax
  00008	75 0b		 jne	 SHORT $LN22@operator@38
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	85 c0		 test	 eax, eax
  00013	74 04		 je	 SHORT $LN12@operator@38
$LN22@operator@38:
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN13@operator@38
$LN12@operator@38:
  00019	33 c9		 xor	 ecx, ecx
$LN13@operator@38:
  0001b	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001e	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  00022	03 d7		 add	 edx, edi
  00024	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  00027	77 0f		 ja	 SHORT $LN3@operator@38
  00029	85 c0		 test	 eax, eax
  0002b	74 04		 je	 SHORT $LN18@operator@38
  0002d	8b 00		 mov	 eax, DWORD PTR [eax]
  0002f	eb 02		 jmp	 SHORT $LN19@operator@38
$LN18@operator@38:
  00031	33 c0		 xor	 eax, eax
$LN19@operator@38:
  00033	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  00036	73 05		 jae	 SHORT $LN23@operator@38
$LN3@operator@38:
  00038	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN23@operator@38:
  0003d	01 7e 04	 add	 DWORD PTR [esi+4], edi
  00040	5f		 pop	 edi

; 376  : 		return (*this);

  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi

; 377  : 		}

  00044	c2 04 00	 ret	 4
??Y?$_Vector_iterator@EV?$allocator@E@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<unsigned char,std::allocator<unsigned char> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@KV?$allocator@K@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<unsigned long,std::allocator<unsigned long> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Vector_iterator@KV?$allocator@K@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@KV?$allocator@K@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<unsigned long,std::allocator<unsigned long> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 375  : 		(*(_Mybase *)this) += _Off;

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	85 c0		 test	 eax, eax
  00008	75 0b		 jne	 SHORT $LN22@operator@39
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	85 c0		 test	 eax, eax
  00013	74 04		 je	 SHORT $LN12@operator@39
$LN22@operator@39:
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN13@operator@39
$LN12@operator@39:
  00019	33 d2		 xor	 edx, edx
$LN13@operator@39:
  0001b	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  0001f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00022	03 ff		 add	 edi, edi
  00024	03 ff		 add	 edi, edi
  00026	03 cf		 add	 ecx, edi
  00028	3b 4a 10	 cmp	 ecx, DWORD PTR [edx+16]
  0002b	77 0f		 ja	 SHORT $LN3@operator@39
  0002d	85 c0		 test	 eax, eax
  0002f	74 04		 je	 SHORT $LN18@operator@39
  00031	8b 00		 mov	 eax, DWORD PTR [eax]
  00033	eb 02		 jmp	 SHORT $LN19@operator@39
$LN18@operator@39:
  00035	33 c0		 xor	 eax, eax
$LN19@operator@39:
  00037	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  0003a	73 05		 jae	 SHORT $LN23@operator@39
$LN3@operator@39:
  0003c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN23@operator@39:
  00041	01 7e 04	 add	 DWORD PTR [esi+4], edi
  00044	5f		 pop	 edi

; 376  : 		return (*this);

  00045	8b c6		 mov	 eax, esi
  00047	5e		 pop	 esi

; 377  : 		}

  00048	c2 04 00	 ret	 4
??Y?$_Vector_iterator@KV?$allocator@K@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<unsigned long,std::allocator<unsigned long> >::operator+=
_TEXT	ENDS
PUBLIC	??0?$_Ranit@EHPBEABE@std@@QAE@XZ		; std::_Ranit<unsigned char,int,unsigned char const *,unsigned char const &>::_Ranit<unsigned char,int,unsigned char const *,unsigned char const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Ranit@EHPBEABE@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Ranit@EHPBEABE@std@@QAE@XZ PROC			; std::_Ranit<unsigned char,int,unsigned char const *,unsigned char const &>::_Ranit<unsigned char,int,unsigned char const *,unsigned char const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Ranit@EHPBEABE@std@@QAE@XZ ENDP			; std::_Ranit<unsigned char,int,unsigned char const *,unsigned char const &>::_Ranit<unsigned char,int,unsigned char const *,unsigned char const &>
_TEXT	ENDS
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 1166 : 		{	// free entire subtree, recursively

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 1167 : 		for (_Nodeptr _Pnode = _Rootnode; !_Isnil(_Pnode); _Rootnode = _Pnode)

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR __Rootnode$[esp+8]
  00007	80 7f 19 00	 cmp	 BYTE PTR [edi+25], 0
  0000b	8b d9		 mov	 ebx, ecx
  0000d	8b f7		 mov	 esi, edi
  0000f	75 1e		 jne	 SHORT $LN1@Erase
$LL3@Erase:

; 1168 : 			{	// free subtrees, then node
; 1169 : 			_Erase(_Right(_Pnode));

  00011	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00014	50		 push	 eax
  00015	8b cb		 mov	 ecx, ebx
  00017	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Erase

; 1170 : 			_Pnode = _Left(_Pnode);

  0001c	8b 36		 mov	 esi, DWORD PTR [esi]

; 1171 : 			this->_Alnod.destroy(_Rootnode);	// destroy, free erased node
; 1172 : 			this->_Alnod.deallocate(_Rootnode, 1);

  0001e	57		 push	 edi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00024	83 c4 04	 add	 esp, 4
  00027	80 7e 19 00	 cmp	 BYTE PTR [esi+25], 0
  0002b	8b fe		 mov	 edi, esi
  0002d	74 e2		 je	 SHORT $LL3@Erase
$LN1@Erase:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx

; 1173 : 			}
; 1174 : 		}

  00032	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Erase
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABQAU342@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABQAU342@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN5@construct@4
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN5@construct@4:

; 156  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenInfo> >::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenInfo> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenInfo> >::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenInfo> >, COMDAT
; _this$ = ecx

; 419  : 		{

  00000	56		 push	 esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN3@Container_
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
$LN3@Container_:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenInfo> >::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenInfo> >
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >, COMDAT
; _this$ = ecx

; 419  : 		{

  00000	56		 push	 esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN3@Container_@2
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
$LN3@Container_@2:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 590  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 590  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned char> >, COMDAT

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 226  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 617  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 617  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z ; std::_Destroy_range<std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned long> >, COMDAT

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 226  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
PUBLIC	??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
EXTRN	??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@'
	DB	'std@@@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD FLAT:??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
	DD	FLAT:??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1063 : 		{	// construct from specified locale

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Refs$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 1064 : 		_Init(_Lobj);

  00010	e8 00 00 00 00	 call	 __Getcvt
  00015	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00018	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 1065 : 		}

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 08 00	 ret	 8
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAPADPADID@Z	; std::char_traits<char>::assign
EXTRN	_memset:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 495  : //		_DEBUG_POINTER(_First);
; 496  : 		return ((_Elem *)::memset(_First, _Ch, _Count));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	0f be 4c 24 0c	 movsx	 ecx, BYTE PTR __Ch$[esp-4]
  00009	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	52		 push	 edx
  00010	e8 00 00 00 00	 call	 _memset
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 497  : 		}

  00018	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ	; std::_Locinfo::_Getlconv
EXTRN	_localeconv:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
;	COMDAT ?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ
_TEXT	SEGMENT
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ PROC		; std::_Locinfo::_Getlconv, COMDAT
; _this$ = ecx

; 134  : 		return (localeconv());

  00000	e9 00 00 00 00	 jmp	 _localeconv
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ ENDP		; std::_Locinfo::_Getlconv
_TEXT	ENDS
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	?_Getfalse@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Getfalse
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?_Getfalse@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Getfalse@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Getfalse, COMDAT
; _this$ = ecx

; 172  : 		return ("false");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05LAPONLG@false?$AA@

; 173  : 		}

  00005	c3		 ret	 0
?_Getfalse@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Getfalse
_TEXT	ENDS
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	?_Gettrue@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Gettrue
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?_Gettrue@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Gettrue@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Gettrue, COMDAT
; _this$ = ecx

; 177  : 		return ("true");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04LOAJBDKD@true?$AA@

; 178  : 		}

  00005	c3		 ret	 0
?_Gettrue@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Gettrue
_TEXT	ENDS
PUBLIC	?precision@ios_base@std@@QBEHXZ			; std::ios_base::precision
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
;	COMDAT ?precision@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?precision@ios_base@std@@QBEHXZ PROC			; std::ios_base::precision, COMDAT
; _this$ = ecx

; 407  : 		return (_Prec);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 408  : 		}

  00003	c3		 ret	 0
?precision@ios_base@std@@QBEHXZ ENDP			; std::ios_base::precision
_TEXT	ENDS
PUBLIC	??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1042 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00006	c3		 ret	 0
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN8@scalar@21
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN8@scalar@21:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
; Function compile flags: /Ogtpy
;	COMDAT ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 1
__Flags$ = 20						; size = 4
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt, COMDAT

; 1289 : 		char *_Ptr = _Fmt;
; 1290 : 		*_Ptr++ = '%';

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Fmt$[esp-4]

; 1291 : 
; 1292 : 		if (_Flags & ios_base::showpos)

  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Flags$[esp-4]
  00008	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000e	f6 c2 20	 test	 dl, 32			; 00000020H
  00011	74 04		 je	 SHORT $LN3@Ffmt

; 1293 : 			*_Ptr++ = '+';

  00013	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00016	41		 inc	 ecx
$LN3@Ffmt:

; 1294 : 		if (_Flags & ios_base::showpoint)

  00017	f6 c2 10	 test	 dl, 16			; 00000010H
  0001a	74 04		 je	 SHORT $LN2@Ffmt

; 1295 : 			*_Ptr++ = '#';

  0001c	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  0001f	41		 inc	 ecx
$LN2@Ffmt:

; 1296 : 		*_Ptr++ = '.';

  00020	c6 01 2e	 mov	 BYTE PTR [ecx], 46	; 0000002eH
  00023	41		 inc	 ecx
  00024	53		 push	 ebx

; 1297 : 		*_Ptr++ = '*';	// for precision argument
; 1298 : 		if (_Spec != '\0')

  00025	8a 5c 24 10	 mov	 bl, BYTE PTR __Spec$[esp]
  00029	c6 01 2a	 mov	 BYTE PTR [ecx], 42	; 0000002aH
  0002c	41		 inc	 ecx
  0002d	84 db		 test	 bl, bl
  0002f	74 03		 je	 SHORT $LN1@Ffmt

; 1299 : 			*_Ptr++ = _Spec;	// 'L' qualifier for long double only

  00031	88 19		 mov	 BYTE PTR [ecx], bl
  00033	41		 inc	 ecx
$LN1@Ffmt:

; 1300 : 
; 1301 : 		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

  00034	81 e2 00 30 00
	00		 and	 edx, 12288		; 00003000H
  0003a	5b		 pop	 ebx

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0003b	81 fa 00 20 00
	00		 cmp	 edx, 8192		; 00002000H
  00041	75 09		 jne	 SHORT $LN8@Ffmt
  00043	b2 66		 mov	 dl, 102			; 00000066H
  00045	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  00047	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  0004b	c3		 ret	 0
$LN8@Ffmt:

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0004c	81 fa 00 30 00
	00		 cmp	 edx, 12288		; 00003000H
  00052	75 09		 jne	 SHORT $LN6@Ffmt
  00054	b2 61		 mov	 dl, 97			; 00000061H
  00056	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  00058	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  0005c	c3		 ret	 0
$LN6@Ffmt:

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0005d	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00063	0f 95 c2	 setne	 dl
  00066	8d 54 12 65	 lea	 edx, DWORD PTR [edx+edx+101]
  0006a	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  0006c	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  00070	c3		 ret	 0
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
_TEXT	ENDS
PUBLIC	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
; Function compile flags: /Ogtpy
;	COMDAT ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 4
__Flags$ = 20						; size = 4
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt, COMDAT

; 1432 : 		char *_Ptr = _Fmt;
; 1433 : 		*_Ptr++ = '%';

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Fmt$[esp-4]

; 1434 : 
; 1435 : 		if (_Flags & ios_base::showpos)

  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Flags$[esp-4]
  00008	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000e	f6 c2 20	 test	 dl, 32			; 00000020H
  00011	74 04		 je	 SHORT $LN4@Ifmt

; 1436 : 			*_Ptr++ = '+';

  00013	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00016	41		 inc	 ecx
$LN4@Ifmt:

; 1437 : 		if (_Flags & ios_base::showbase)

  00017	f6 c2 08	 test	 dl, 8
  0001a	74 04		 je	 SHORT $LN3@Ifmt

; 1438 : 			*_Ptr++ = '#';

  0001c	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  0001f	41		 inc	 ecx
$LN3@Ifmt:
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	57		 push	 edi

; 1439 : 		if (_Spec[0] != 'L')

  00023	8b 7c 24 18	 mov	 edi, DWORD PTR __Spec$[esp+8]
  00027	8a 1f		 mov	 bl, BYTE PTR [edi]
  00029	80 fb 4c	 cmp	 bl, 76			; 0000004cH
  0002c	74 04		 je	 SHORT $LN2@Ifmt

; 1440 : 			*_Ptr++ = _Spec[0];	// qualifier

  0002e	88 19		 mov	 BYTE PTR [ecx], bl

; 1441 : 		else

  00030	eb 0b		 jmp	 SHORT $LN11@Ifmt
$LN2@Ifmt:

; 1442 : 			{	/* change L to I64 */
; 1443 : 			*_Ptr++ = 'I';

  00032	c6 01 49	 mov	 BYTE PTR [ecx], 73	; 00000049H
  00035	41		 inc	 ecx

; 1444 : 			*_Ptr++ = '6';

  00036	c6 01 36	 mov	 BYTE PTR [ecx], 54	; 00000036H
  00039	41		 inc	 ecx

; 1445 : 			*_Ptr++ = '4';

  0003a	c6 01 34	 mov	 BYTE PTR [ecx], 52	; 00000034H
$LN11@Ifmt:

; 1446 : 			}
; 1447 : 
; 1448 : 		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  0003d	8b f2		 mov	 esi, edx
  0003f	81 e6 00 0e 00
	00		 and	 esi, 3584		; 00000e00H
  00045	41		 inc	 ecx

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  00046	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  0004c	75 0c		 jne	 SHORT $LN9@Ifmt
  0004e	5f		 pop	 edi
  0004f	b2 6f		 mov	 dl, 111			; 0000006fH
  00051	5e		 pop	 esi
  00052	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00054	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00058	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  00059	c3		 ret	 0
$LN9@Ifmt:

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  0005a	81 fe 00 08 00
	00		 cmp	 esi, 2048		; 00000800H
  00060	74 0d		 je	 SHORT $LN7@Ifmt
  00062	8a 57 01	 mov	 dl, BYTE PTR [edi+1]
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00069	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  0006d	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  0006e	c3		 ret	 0
$LN7@Ifmt:

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  0006f	02 d2		 add	 dl, dl
  00071	02 d2		 add	 dl, dl
  00073	02 d2		 add	 dl, dl
  00075	f6 d2		 not	 dl
  00077	80 e2 20	 and	 dl, 32			; 00000020H
  0007a	5f		 pop	 edi
  0007b	80 ca 58	 or	 dl, 88			; 00000058H
  0007e	5e		 pop	 esi
  0007f	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00081	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00085	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  00086	c3		 ret	 0
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
_TEXT	ENDS
PUBLIC	??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*, COMDAT
; _this$ = ecx

; 601  : 		{	// pretend to get designated element

  00000	8b c1		 mov	 eax, ecx

; 602  : 		return (*this);
; 603  : 		}

  00002	c3		 ret	 0
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
_TEXT	ENDS
PUBLIC	??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++, COMDAT
; _this$ = ecx

; 606  : 		{	// pretend to preincrement

  00000	8b c1		 mov	 eax, ecx

; 607  : 		return (*this);
; 608  : 		}

  00002	c3		 ret	 0
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
_TEXT	ENDS
PUBLIC	?decimal_point@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::decimal_point
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?decimal_point@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?decimal_point@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::decimal_point, COMDAT
; _this$ = ecx

; 70   : 		return (do_decimal_point());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00005	ff e2		 jmp	 edx
?decimal_point@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::decimal_point
_TEXT	ENDS
PUBLIC	?thousands_sep@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::thousands_sep
; Function compile flags: /Ogtpy
;	COMDAT ?thousands_sep@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?thousands_sep@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::thousands_sep, COMDAT
; _this$ = ecx

; 75   : 		return (do_thousands_sep());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00005	ff e2		 jmp	 edx
?thousands_sep@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::thousands_sep
_TEXT	ENDS
PUBLIC	?_Tidy@?$numpunct@D@std@@AAEXXZ			; std::numpunct<char>::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$numpunct@D@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$numpunct@D@std@@AAEXXZ PROC			; std::numpunct<char>::_Tidy, COMDAT
; _this$ = ecx

; 190  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 191  : 		_DELETE_CRT_VEC((void *)_Grouping);

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 192  : 		_DELETE_CRT_VEC((void *)_Falsename);

  0000c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 193  : 		_DELETE_CRT_VEC((void *)_Truename);

  00015	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	5e		 pop	 esi

; 194  : 		}

  00022	c3		 ret	 0
?_Tidy@?$numpunct@D@std@@AAEXXZ ENDP			; std::numpunct<char>::_Tidy
_TEXT	ENDS
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx

; 2076 : 		if (_Count == 1)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	83 f8 01	 cmp	 eax, 1
  00007	75 28		 jne	 SHORT $LN2@Chassign

; 2077 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

  00009	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  0000d	72 11		 jb	 SHORT $LN7@Chassign
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	8a 44 24 0c	 mov	 al, BYTE PTR __Ch$[esp-4]
  00016	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  0001a	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 2080 : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH

; 2077 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

$LN7@Chassign:
  00020	8a 44 24 0c	 mov	 al, BYTE PTR __Ch$[esp-4]
  00024	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00028	83 c1 04	 add	 ecx, 4
  0002b	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 2080 : 		}

  0002e	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Chassign:

; 2078 : 		else
; 2079 : 			_Traits::assign(_Myptr() + _Off, _Count, _Ch);

  00031	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00035	72 05		 jb	 SHORT $LN13@Chassign
  00037	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0003a	eb 03		 jmp	 SHORT $LN14@Chassign
$LN13@Chassign:
  0003c	83 c1 04	 add	 ecx, 4
$LN14@Chassign:
  0003f	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00043	50		 push	 eax
  00044	0f be 44 24 10	 movsx	 eax, BYTE PTR __Ch$[esp]
  00049	50		 push	 eax
  0004a	03 ca		 add	 ecx, edx
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 _memset
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2080 : 		}

  00055	c2 0c 00	 ret	 12			; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
PUBLIC	??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z	; std::_Maklocchr<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z PROC		; std::_Maklocchr<char>, COMDAT

; 603  : 	return ((_Elem)(unsigned char)_Byte);

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Byte$[esp-4]

; 604  : 	}

  00004	c3		 ret	 0
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z ENDP		; std::_Maklocchr<char>
_TEXT	ENDS
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Ogtpy
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 624  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	56		 push	 esi
  00001	57		 push	 edi

; 625  : 	size_t _Count = ::strlen(_Ptr) + 1;

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	8b c7		 mov	 eax, edi
  00008	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL8@Maklocstr:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL8@Maklocstr
  00017	2b c2		 sub	 eax, edx
  00019	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 626  : 	_Elem *_Ptrdest = _NEW_CRT _Elem[_Count];

  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00022	83 c4 04	 add	 esp, 4

; 627  : 
; 628  : #pragma warning(push)
; 629  : #pragma warning(disable: 6011)
; 630  : 	/* prefast noise */
; 631  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00025	8b c8		 mov	 ecx, eax
  00027	85 f6		 test	 esi, esi
  00029	76 10		 jbe	 SHORT $LN1@Maklocstr
  0002b	eb 03 8d 49 00	 npad	 5
$LL3@Maklocstr:

; 632  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  00030	8a 17		 mov	 dl, BYTE PTR [edi]
  00032	88 11		 mov	 BYTE PTR [ecx], dl
  00034	4e		 dec	 esi
  00035	41		 inc	 ecx
  00036	47		 inc	 edi
  00037	85 f6		 test	 esi, esi
  00039	77 f5		 ja	 SHORT $LL3@Maklocstr
$LN1@Maklocstr:
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 633  : 	return (_Ptrdest);
; 634  : #pragma warning(pop)
; 635  : 	}

  0003d	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
PUBLIC	??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 1
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=, COMDAT
; _this$ = ecx

; 592  : 		{	// store element and increment

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 593  : 		if (_Strbuf == 0
; 594  : 			|| traits_type::eq_int_type(_Traits::eof(),
; 595  : 				_Strbuf->sputc(_Right)))

  00003	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00006	85 c9		 test	 ecx, ecx
  00008	74 3b		 je	 SHORT $LN1@operator@40
  0000a	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0000d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00010	74 21		 je	 SHORT $LN7@operator@40
  00012	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00015	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00018	7e 19		 jle	 SHORT $LN7@operator@40
  0001a	8b c2		 mov	 eax, edx
  0001c	ff 08		 dec	 DWORD PTR [eax]
  0001e	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00026	89 11		 mov	 DWORD PTR [ecx], edx
  00028	8a 4c 24 08	 mov	 cl, BYTE PTR __Right$[esp]
  0002c	88 08		 mov	 BYTE PTR [eax], cl
  0002e	0f b6 c1	 movzx	 eax, cl
  00031	eb 0d		 jmp	 SHORT $LN8@operator@40
$LN7@operator@40:
  00033	0f b6 54 24 08	 movzx	 edx, BYTE PTR __Right$[esp]
  00038	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003d	52		 push	 edx
  0003e	ff d0		 call	 eax
$LN8@operator@40:
  00040	83 f8 ff	 cmp	 eax, -1
  00043	75 03		 jne	 SHORT $LN23@operator@40
$LN1@operator@40:

; 596  : 			_Failed = true;

  00045	c6 06 01	 mov	 BYTE PTR [esi], 1
$LN23@operator@40:

; 597  : 		return (*this);

  00048	8b c6		 mov	 eax, esi
  0004a	5e		 pop	 esi

; 598  : 		}

  0004b	c2 04 00	 ret	 4
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
_TEXT	ENDS
PUBLIC	??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`vftable'
PUBLIC	??0?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >
PUBLIC	??_R4?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
EXTRN	??_E?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 DD 00H ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@'
	DB	'_W@std@@@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ DD 00H ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ DD FLAT:??_R4?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`vftable'
	DD	FLAT:??_E?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ??0?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >, COMDAT
; _this$ = ecx

; 1063 : 		{	// construct from specified locale

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Refs$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@

; 1064 : 		_Init(_Lobj);

  00010	e8 00 00 00 00	 call	 __Getcvt
  00015	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00018	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 1065 : 		}

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 08 00	 ret	 8
??0?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >
_TEXT	ENDS
PUBLIC	??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z	; std::_Maklocchr<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Wc$ = -8						; size = 2
__Mbst1$ = -4						; size = 4
__Byte$ = 8						; size = 1
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocchr<wchar_t>, COMDAT

; 609  : 	{	// convert char to wchar_t using _Cvtvec

  00000	83 ec 08	 sub	 esp, 8

; 610  : 	wchar_t _Wc = L'\0';

  00003	33 c0		 xor	 eax, eax
  00005	89 04 24	 mov	 DWORD PTR __Wc$[esp+8], eax

; 611  : 	_Mbstinit(_Mbst1);

  00008	89 44 24 04	 mov	 DWORD PTR __Mbst1$[esp+8], eax

; 612  : 	_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);

  0000c	8b 44 24 14	 mov	 eax, DWORD PTR __Cvt$[esp+4]
  00010	50		 push	 eax
  00011	8d 4c 24 08	 lea	 ecx, DWORD PTR __Mbst1$[esp+12]
  00015	51		 push	 ecx
  00016	6a 01		 push	 1
  00018	8d 54 24 18	 lea	 edx, DWORD PTR __Byte$[esp+16]
  0001c	52		 push	 edx
  0001d	8d 44 24 10	 lea	 eax, DWORD PTR __Wc$[esp+24]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 __Mbrtowc

; 613  : 	return (_Wc);

  00027	66 8b 44 24 14	 mov	 ax, WORD PTR __Wc$[esp+28]

; 614  : 	}

  0002c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002f	c3		 ret	 0
??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocchr<wchar_t>
_TEXT	ENDS
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst1$ = -12						; size = 4
__Mbst2$ = -8						; size = 4
__Count1$ = -4						; size = 4
__Wc$ = 8						; size = 2
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 640  : 	{	// convert C string to wchar_t sequence using _Cvtvec

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	53		 push	 ebx

; 641  : 	size_t _Count, _Count1;
; 642  : 	size_t _Wchars;
; 643  : 	const char *_Ptr1;
; 644  : 	int _Bytes;
; 645  : 	wchar_t _Wc;
; 646  : 	_Mbstinit(_Mbst1);
; 647  : 
; 648  : 	_Count1 = ::strlen(_Ptr) + 1;

  00004	8b 5c 24 14	 mov	 ebx, DWORD PTR __Ptr$[esp+12]
  00008	55		 push	 ebp
  00009	56		 push	 esi
  0000a	33 f6		 xor	 esi, esi
  0000c	8b c3		 mov	 eax, ebx
  0000e	57		 push	 edi
  0000f	89 74 24 10	 mov	 DWORD PTR __Mbst1$[esp+28], esi
  00013	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL17@Maklocstr@2:
  00016	8a 08		 mov	 cl, BYTE PTR [eax]
  00018	40		 inc	 eax
  00019	84 c9		 test	 cl, cl
  0001b	75 f9		 jne	 SHORT $LL17@Maklocstr@2
  0001d	2b c2		 sub	 eax, edx
  0001f	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00022	89 7c 24 18	 mov	 DWORD PTR __Count1$[esp+28], edi

; 649  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00026	8b eb		 mov	 ebp, ebx

; 650  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)

  00028	3b fe		 cmp	 edi, esi
  0002a	76 2a		 jbe	 SHORT $LN13@Maklocstr@2
  0002c	8d 64 24 00	 npad	 4
$LL8@Maklocstr@2:

; 651  : 		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)

  00030	8b 44 24 28	 mov	 eax, DWORD PTR __Cvt$[esp+24]
  00034	50		 push	 eax
  00035	8d 4c 24 14	 lea	 ecx, DWORD PTR __Mbst1$[esp+32]
  00039	51		 push	 ecx
  0003a	57		 push	 edi
  0003b	8d 54 24 2c	 lea	 edx, DWORD PTR __Wc$[esp+36]
  0003f	55		 push	 ebp
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 __Mbrtowc
  00046	83 c4 14	 add	 esp, 20			; 00000014H
  00049	85 c0		 test	 eax, eax
  0004b	7e 09		 jle	 SHORT $LN13@Maklocstr@2
  0004d	2b f8		 sub	 edi, eax
  0004f	03 e8		 add	 ebp, eax
  00051	46		 inc	 esi
  00052	85 ff		 test	 edi, edi
  00054	77 da		 ja	 SHORT $LL8@Maklocstr@2
$LN13@Maklocstr@2:

; 652  : 			break;
; 653  : 	++_Wchars;	// count terminating nul

  00056	46		 inc	 esi

; 654  : 
; 655  : 	wchar_t *_Ptrdest = _NEW_CRT wchar_t[_Wchars];

  00057	33 c9		 xor	 ecx, ecx
  00059	8b c6		 mov	 eax, esi
  0005b	ba 02 00 00 00	 mov	 edx, 2
  00060	f7 e2		 mul	 edx
  00062	0f 90 c1	 seto	 cl
  00065	f7 d9		 neg	 ecx
  00067	0b c8		 or	 ecx, eax
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0006f	83 c4 04	 add	 esp, 4
  00072	8b e8		 mov	 ebp, eax

; 656  : 	wchar_t *_Ptrnext = _Ptrdest;

  00074	8b fd		 mov	 edi, ebp

; 657  : 	_Mbstinit(_Mbst2);

  00076	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __Mbst2$[esp+28], 0

; 658  : #pragma warning(push)
; 659  : #pragma warning(disable: 6011)
; 660  : 	/* prefast noise */
; 661  : 	for (; 0 < _Wchars;
; 662  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)

  0007e	85 f6		 test	 esi, esi
  00080	76 27		 jbe	 SHORT $LN14@Maklocstr@2
$LL4@Maklocstr@2:

; 663  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)

  00082	8b 44 24 28	 mov	 eax, DWORD PTR __Cvt$[esp+24]
  00086	8b 54 24 18	 mov	 edx, DWORD PTR __Count1$[esp+28]
  0008a	50		 push	 eax
  0008b	8d 4c 24 18	 lea	 ecx, DWORD PTR __Mbst2$[esp+32]
  0008f	51		 push	 ecx
  00090	52		 push	 edx
  00091	53		 push	 ebx
  00092	57		 push	 edi
  00093	e8 00 00 00 00	 call	 __Mbrtowc
  00098	83 c4 14	 add	 esp, 20			; 00000014H
  0009b	85 c0		 test	 eax, eax
  0009d	7e 0a		 jle	 SHORT $LN14@Maklocstr@2
  0009f	4e		 dec	 esi
  000a0	03 d8		 add	 ebx, eax
  000a2	83 c7 02	 add	 edi, 2
  000a5	85 f6		 test	 esi, esi
  000a7	77 d9		 ja	 SHORT $LL4@Maklocstr@2
$LN14@Maklocstr@2:

; 664  : 			break;
; 665  : 	*_Ptrnext = L'\0';

  000a9	33 c0		 xor	 eax, eax
  000ab	66 89 07	 mov	 WORD PTR [edi], ax
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi

; 666  : #pragma warning(pop)
; 667  : 	return (_Ptrdest);

  000b0	8b c5		 mov	 eax, ebp
  000b2	5d		 pop	 ebp
  000b3	5b		 pop	 ebx

; 668  : 	}

  000b4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b7	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
PUBLIC	??1?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAE@XZ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::~num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ??1?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
??1?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAE@XZ PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::~num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >, COMDAT
; _this$ = ecx

; 1042 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00006	c3		 ret	 0
??1?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAE@XZ ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::~num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN8@scalar@22
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN8@scalar@22:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_G?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Ffmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ffmt
; Function compile flags: /Ogtpy
;	COMDAT ?_Ffmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 1
__Flags$ = 20						; size = 4
?_Ffmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADDH@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ffmt, COMDAT

; 1289 : 		char *_Ptr = _Fmt;
; 1290 : 		*_Ptr++ = '%';

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Fmt$[esp-4]

; 1291 : 
; 1292 : 		if (_Flags & ios_base::showpos)

  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Flags$[esp-4]
  00008	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000e	f6 c2 20	 test	 dl, 32			; 00000020H
  00011	74 04		 je	 SHORT $LN3@Ffmt@2

; 1293 : 			*_Ptr++ = '+';

  00013	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00016	41		 inc	 ecx
$LN3@Ffmt@2:

; 1294 : 		if (_Flags & ios_base::showpoint)

  00017	f6 c2 10	 test	 dl, 16			; 00000010H
  0001a	74 04		 je	 SHORT $LN2@Ffmt@2

; 1295 : 			*_Ptr++ = '#';

  0001c	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  0001f	41		 inc	 ecx
$LN2@Ffmt@2:

; 1296 : 		*_Ptr++ = '.';

  00020	c6 01 2e	 mov	 BYTE PTR [ecx], 46	; 0000002eH
  00023	41		 inc	 ecx
  00024	53		 push	 ebx

; 1297 : 		*_Ptr++ = '*';	// for precision argument
; 1298 : 		if (_Spec != '\0')

  00025	8a 5c 24 10	 mov	 bl, BYTE PTR __Spec$[esp]
  00029	c6 01 2a	 mov	 BYTE PTR [ecx], 42	; 0000002aH
  0002c	41		 inc	 ecx
  0002d	84 db		 test	 bl, bl
  0002f	74 03		 je	 SHORT $LN1@Ffmt@2

; 1299 : 			*_Ptr++ = _Spec;	// 'L' qualifier for long double only

  00031	88 19		 mov	 BYTE PTR [ecx], bl
  00033	41		 inc	 ecx
$LN1@Ffmt@2:

; 1300 : 
; 1301 : 		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

  00034	81 e2 00 30 00
	00		 and	 edx, 12288		; 00003000H
  0003a	5b		 pop	 ebx

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0003b	81 fa 00 20 00
	00		 cmp	 edx, 8192		; 00002000H
  00041	75 09		 jne	 SHORT $LN8@Ffmt@2
  00043	b2 66		 mov	 dl, 102			; 00000066H
  00045	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  00047	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  0004b	c3		 ret	 0
$LN8@Ffmt@2:

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0004c	81 fa 00 30 00
	00		 cmp	 edx, 12288		; 00003000H
  00052	75 09		 jne	 SHORT $LN6@Ffmt@2
  00054	b2 61		 mov	 dl, 97			; 00000061H
  00056	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  00058	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  0005c	c3		 ret	 0
$LN6@Ffmt@2:

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0005d	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00063	0f 95 c2	 setne	 dl
  00066	8d 54 12 65	 lea	 edx, DWORD PTR [edx+edx+101]
  0006a	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  0006c	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  00070	c3		 ret	 0
?_Ffmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADDH@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ffmt
_TEXT	ENDS
PUBLIC	?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt
; Function compile flags: /Ogtpy
;	COMDAT ?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 4
__Flags$ = 20						; size = 4
?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt, COMDAT

; 1432 : 		char *_Ptr = _Fmt;
; 1433 : 		*_Ptr++ = '%';

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Fmt$[esp-4]

; 1434 : 
; 1435 : 		if (_Flags & ios_base::showpos)

  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Flags$[esp-4]
  00008	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000e	f6 c2 20	 test	 dl, 32			; 00000020H
  00011	74 04		 je	 SHORT $LN4@Ifmt@2

; 1436 : 			*_Ptr++ = '+';

  00013	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00016	41		 inc	 ecx
$LN4@Ifmt@2:

; 1437 : 		if (_Flags & ios_base::showbase)

  00017	f6 c2 08	 test	 dl, 8
  0001a	74 04		 je	 SHORT $LN3@Ifmt@2

; 1438 : 			*_Ptr++ = '#';

  0001c	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  0001f	41		 inc	 ecx
$LN3@Ifmt@2:
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	57		 push	 edi

; 1439 : 		if (_Spec[0] != 'L')

  00023	8b 7c 24 18	 mov	 edi, DWORD PTR __Spec$[esp+8]
  00027	8a 1f		 mov	 bl, BYTE PTR [edi]
  00029	80 fb 4c	 cmp	 bl, 76			; 0000004cH
  0002c	74 04		 je	 SHORT $LN2@Ifmt@2

; 1440 : 			*_Ptr++ = _Spec[0];	// qualifier

  0002e	88 19		 mov	 BYTE PTR [ecx], bl

; 1441 : 		else

  00030	eb 0b		 jmp	 SHORT $LN11@Ifmt@2
$LN2@Ifmt@2:

; 1442 : 			{	/* change L to I64 */
; 1443 : 			*_Ptr++ = 'I';

  00032	c6 01 49	 mov	 BYTE PTR [ecx], 73	; 00000049H
  00035	41		 inc	 ecx

; 1444 : 			*_Ptr++ = '6';

  00036	c6 01 36	 mov	 BYTE PTR [ecx], 54	; 00000036H
  00039	41		 inc	 ecx

; 1445 : 			*_Ptr++ = '4';

  0003a	c6 01 34	 mov	 BYTE PTR [ecx], 52	; 00000034H
$LN11@Ifmt@2:

; 1446 : 			}
; 1447 : 
; 1448 : 		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  0003d	8b f2		 mov	 esi, edx
  0003f	81 e6 00 0e 00
	00		 and	 esi, 3584		; 00000e00H
  00045	41		 inc	 ecx

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  00046	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  0004c	75 0c		 jne	 SHORT $LN9@Ifmt@2
  0004e	5f		 pop	 edi
  0004f	b2 6f		 mov	 dl, 111			; 0000006fH
  00051	5e		 pop	 esi
  00052	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00054	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00058	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  00059	c3		 ret	 0
$LN9@Ifmt@2:

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  0005a	81 fe 00 08 00
	00		 cmp	 esi, 2048		; 00000800H
  00060	74 0d		 je	 SHORT $LN7@Ifmt@2
  00062	8a 57 01	 mov	 dl, BYTE PTR [edi+1]
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00069	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  0006d	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  0006e	c3		 ret	 0
$LN7@Ifmt@2:

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  0006f	02 d2		 add	 dl, dl
  00071	02 d2		 add	 dl, dl
  00073	02 d2		 add	 dl, dl
  00075	f6 d2		 not	 dl
  00077	80 e2 20	 and	 dl, 32			; 00000020H
  0007a	5f		 pop	 edi
  0007b	80 ca 58	 or	 dl, 88			; 00000058H
  0007e	5e		 pop	 esi
  0007f	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00081	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00085	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  00086	c3		 ret	 0
?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt
_TEXT	ENDS
PUBLIC	??D?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??D?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??D?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator*, COMDAT
; _this$ = ecx

; 601  : 		{	// pretend to get designated element

  00000	8b c1		 mov	 eax, ecx

; 602  : 		return (*this);
; 603  : 		}

  00002	c3		 ret	 0
??D?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator*
_TEXT	ENDS
PUBLIC	??E?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator++, COMDAT
; _this$ = ecx

; 606  : 		{	// pretend to preincrement

  00000	8b c1		 mov	 eax, ecx

; 607  : 		return (*this);
; 608  : 		}

  00002	c3		 ret	 0
??E?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator++
_TEXT	ENDS
PUBLIC	?decimal_point@?$numpunct@_W@std@@QBE_WXZ	; std::numpunct<wchar_t>::decimal_point
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?decimal_point@?$numpunct@_W@std@@QBE_WXZ
_TEXT	SEGMENT
?decimal_point@?$numpunct@_W@std@@QBE_WXZ PROC		; std::numpunct<wchar_t>::decimal_point, COMDAT
; _this$ = ecx

; 70   : 		return (do_decimal_point());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00005	ff e2		 jmp	 edx
?decimal_point@?$numpunct@_W@std@@QBE_WXZ ENDP		; std::numpunct<wchar_t>::decimal_point
_TEXT	ENDS
PUBLIC	?thousands_sep@?$numpunct@_W@std@@QBE_WXZ	; std::numpunct<wchar_t>::thousands_sep
; Function compile flags: /Ogtpy
;	COMDAT ?thousands_sep@?$numpunct@_W@std@@QBE_WXZ
_TEXT	SEGMENT
?thousands_sep@?$numpunct@_W@std@@QBE_WXZ PROC		; std::numpunct<wchar_t>::thousands_sep, COMDAT
; _this$ = ecx

; 75   : 		return (do_thousands_sep());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00005	ff e2		 jmp	 edx
?thousands_sep@?$numpunct@_W@std@@QBE_WXZ ENDP		; std::numpunct<wchar_t>::thousands_sep
_TEXT	ENDS
PUBLIC	?_Tidy@?$numpunct@_W@std@@AAEXXZ		; std::numpunct<wchar_t>::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$numpunct@_W@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$numpunct@_W@std@@AAEXXZ PROC			; std::numpunct<wchar_t>::_Tidy, COMDAT
; _this$ = ecx

; 190  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 191  : 		_DELETE_CRT_VEC((void *)_Grouping);

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 192  : 		_DELETE_CRT_VEC((void *)_Falsename);

  0000c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 193  : 		_DELETE_CRT_VEC((void *)_Truename);

  00015	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	5e		 pop	 esi

; 194  : 		}

  00022	c3		 ret	 0
?_Tidy@?$numpunct@_W@std@@AAEXXZ ENDP			; std::numpunct<wchar_t>::_Tidy
_TEXT	ENDS
PUBLIC	??4?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_W@Z ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??4?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_W@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 2
??4?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_W@Z PROC ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 592  : 		{	// store element and increment

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 593  : 		if (_Strbuf == 0
; 594  : 			|| traits_type::eq_int_type(_Traits::eof(),
; 595  : 				_Strbuf->sputc(_Right)))

  00003	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00006	85 c9		 test	 ecx, ecx
  00008	74 43		 je	 SHORT $LN1@operator@41
  0000a	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0000d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00010	74 22		 je	 SHORT $LN7@operator@41
  00012	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00015	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00018	7e 1a		 jle	 SHORT $LN7@operator@41
  0001a	8b c2		 mov	 eax, edx
  0001c	ff 08		 dec	 DWORD PTR [eax]
  0001e	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  00026	89 11		 mov	 DWORD PTR [ecx], edx
  00028	8b 4c 24 08	 mov	 ecx, DWORD PTR __Right$[esp]
  0002c	66 89 08	 mov	 WORD PTR [eax], cx
  0002f	0f b7 c1	 movzx	 eax, cx
  00032	eb 0f		 jmp	 SHORT $LN8@operator@41
$LN7@operator@41:
  00034	8b 01		 mov	 eax, DWORD PTR [ecx]
  00036	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp]
  0003a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003d	52		 push	 edx
  0003e	ff d0		 call	 eax
  00040	0f b7 c0	 movzx	 eax, ax
$LN8@operator@41:
  00043	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00048	66 3b c8	 cmp	 cx, ax
  0004b	75 03		 jne	 SHORT $LN23@operator@41
$LN1@operator@41:

; 596  : 			_Failed = true;

  0004d	c6 06 01	 mov	 BYTE PTR [esi], 1
$LN23@operator@41:

; 597  : 		return (*this);

  00050	8b c6		 mov	 eax, esi
  00052	5e		 pop	 esi

; 598  : 		}

  00053	c2 04 00	 ret	 4
??4?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_W@Z ENDP ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator=
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z	; std::numpunct<char>::_Init
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0
__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2
__ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
_TEXT	SEGMENT
$T142343 = -28						; size = 8
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Lobj$ = 8						; size = 4
__Isdef$ = 12						; size = 1
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z PROC	; std::numpunct<char>::_Init, COMDAT
; _this$ = ecx

; 135  : 		{	// initialize from _Lobj

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d e8	 mov	 DWORD PTR _this$[ebp], ebx

; 136  : 		const lconv *_Ptr = _Lobj._Getlconv();

  00030	e8 00 00 00 00	 call	 _localeconv
  00035	8b f0		 mov	 esi, eax

; 137  : 
; 138  : 		_Grouping = 0;

  00037	33 c0		 xor	 eax, eax
  00039	89 75 ec	 mov	 DWORD PTR __Ptr$[ebp], esi
  0003c	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 139  : 		_Falsename = 0;

  0003f	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 140  : 		_Truename = 0;

  00042	89 43 14	 mov	 DWORD PTR [ebx+20], eax

; 141  : 
; 142  : 		_TRY_BEGIN

  00045	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], eax

; 143  : 		_Grouping = _MAKLOCSTR(char, _Ptr->grouping, _Lobj._Getcvt());

  00048	e8 00 00 00 00	 call	 __Getcvt
  0004d	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00050	8b c7		 mov	 eax, edi
  00052	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL58@Init:
  00055	8a 08		 mov	 cl, BYTE PTR [eax]
  00057	40		 inc	 eax
  00058	84 c9		 test	 cl, cl
  0005a	75 f9		 jne	 SHORT $LL58@Init
  0005c	2b c2		 sub	 eax, edx
  0005e	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00067	83 c4 04	 add	 esp, 4
  0006a	8b c8		 mov	 ecx, eax
  0006c	8d 64 24 00	 npad	 4
$LL15@Init:
  00070	85 f6		 test	 esi, esi
  00072	76 09		 jbe	 SHORT $LN13@Init
  00074	8a 17		 mov	 dl, BYTE PTR [edi]
  00076	88 11		 mov	 BYTE PTR [ecx], dl
  00078	4e		 dec	 esi
  00079	41		 inc	 ecx
  0007a	47		 inc	 edi
  0007b	eb f3		 jmp	 SHORT $LL15@Init
$LN13@Init:
  0007d	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 144  : 		_Falsename = _MAKLOCSTR(_Elem, _Lobj._Getfalse(), _Lobj._Getcvt());

  00080	e8 00 00 00 00	 call	 __Getcvt
  00085	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_05LAPONLG@false?$AA@
  0008a	8b c7		 mov	 eax, edi
  0008c	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0008f	90		 npad	 1
$LL59@Init:
  00090	8a 08		 mov	 cl, BYTE PTR [eax]
  00092	40		 inc	 eax
  00093	84 c9		 test	 cl, cl
  00095	75 f9		 jne	 SHORT $LL59@Init
  00097	2b c2		 sub	 eax, edx
  00099	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0009c	56		 push	 esi
  0009d	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000a2	83 c4 04	 add	 esp, 4
  000a5	8b c8		 mov	 ecx, eax
$LL24@Init:
  000a7	85 f6		 test	 esi, esi
  000a9	76 09		 jbe	 SHORT $LN22@Init
  000ab	8a 17		 mov	 dl, BYTE PTR [edi]
  000ad	88 11		 mov	 BYTE PTR [ecx], dl
  000af	4e		 dec	 esi
  000b0	41		 inc	 ecx
  000b1	47		 inc	 edi
  000b2	eb f3		 jmp	 SHORT $LL24@Init
$LN22@Init:
  000b4	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 145  : 		_Truename = _MAKLOCSTR(_Elem, _Lobj._Gettrue(), _Lobj._Getcvt());

  000b7	e8 00 00 00 00	 call	 __Getcvt
  000bc	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_04LOAJBDKD@true?$AA@
  000c1	8b c7		 mov	 eax, edi
  000c3	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL60@Init:
  000c6	8a 08		 mov	 cl, BYTE PTR [eax]
  000c8	40		 inc	 eax
  000c9	84 c9		 test	 cl, cl
  000cb	75 f9		 jne	 SHORT $LL60@Init
  000cd	2b c2		 sub	 eax, edx
  000cf	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  000d2	56		 push	 esi
  000d3	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000d8	83 c4 04	 add	 esp, 4
  000db	8b c8		 mov	 ecx, eax
  000dd	8d 49 00	 npad	 3
$LL33@Init:
  000e0	85 f6		 test	 esi, esi
  000e2	76 09		 jbe	 SHORT $LN31@Init
  000e4	8a 17		 mov	 dl, BYTE PTR [edi]
  000e6	88 11		 mov	 BYTE PTR [ecx], dl
  000e8	4e		 dec	 esi
  000e9	41		 inc	 ecx
  000ea	47		 inc	 edi
  000eb	eb f3		 jmp	 SHORT $LL33@Init
$LN31@Init:
  000ed	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  000f0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 149  : 		_CATCH_END
; 150  : 
; 151  : 		_Dp = _MAKLOCCHR(_Elem, _Ptr->decimal_point[0], _Lobj._Getcvt());

  000f7	e8 00 00 00 00	 call	 __Getcvt
  000fc	8b 75 ec	 mov	 esi, DWORD PTR __Ptr$[ebp]
  000ff	8b 06		 mov	 eax, DWORD PTR [esi]
  00101	8a 08		 mov	 cl, BYTE PTR [eax]
  00103	88 4b 0c	 mov	 BYTE PTR [ebx+12], cl

; 152  : 		_Kseparator =
; 153  : 			_MAKLOCCHR(_Elem, _Ptr->thousands_sep[0], _Lobj._Getcvt());

  00106	e8 00 00 00 00	 call	 __Getcvt

; 154  : 
; 155  : 		if (_Isdef)

  0010b	80 7d 0c 00	 cmp	 BYTE PTR __Isdef$[ebp], 0
  0010f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00112	8a 02		 mov	 al, BYTE PTR [edx]
  00114	88 43 0d	 mov	 BYTE PTR [ebx+13], al
  00117	74 2d		 je	 SHORT $LN1@Init

; 156  : 			{	// apply defaults for required facets
; 157  : 			_Grouping = _MAKLOCSTR(char, "", _Lobj._Getcvt());

  00119	e8 00 00 00 00	 call	 __Getcvt
  0011e	8d 4d e4	 lea	 ecx, DWORD PTR $T142343[ebp]
  00121	51		 push	 ecx
  00122	6a 00		 push	 0
  00124	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00129	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  0012e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00131	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 158  : 			_Dp = _MAKLOCCHR(_Elem, '.', _Lobj._Getcvt());

  00134	e8 00 00 00 00	 call	 __Getcvt
  00139	c6 43 0c 2e	 mov	 BYTE PTR [ebx+12], 46	; 0000002eH

; 159  : 			_Kseparator = _MAKLOCCHR(_Elem, ',', _Lobj._Getcvt());

  0013d	e8 00 00 00 00	 call	 __Getcvt
  00142	c6 43 0d 2c	 mov	 BYTE PTR [ebx+13], 44	; 0000002cH
$LN1@Init:

; 160  : 			}
; 161  : 		}

  00146	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00149	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00150	59		 pop	 ecx
  00151	5f		 pop	 edi
  00152	5e		 pop	 esi
  00153	5b		 pop	 ebx
  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c2 08 00	 ret	 8
__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0:

; 146  : 		_CATCH_ALL
; 147  : 		_Tidy();

  0015a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0015d	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AAEXXZ ; std::numpunct<char>::_Tidy

; 148  : 		_RERAISE;

  00162	6a 00		 push	 0
  00164	6a 00		 push	 0
  00166	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN62@Init:
  0016b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ENDP	; std::numpunct<char>::_Init
PUBLIC	?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<wchar_t>::_Init
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__catchsym$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z$0
__unwindtable$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z$2
__ehfuncinfo$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z
_TEXT	SEGMENT
$T142473 = -44						; size = 8
$T142472 = -44						; size = 8
$T142471 = -44						; size = 8
$T142470 = -44						; size = 8
$T142469 = -44						; size = 8
_this$ = -40						; size = 4
__Mbst1$142561 = -36					; size = 4
__Mbst1$142550 = -36					; size = 4
__Mbst1$142534 = -36					; size = 4
__Mbst1$142523 = -36					; size = 4
__Ptr$ = -36						; size = 4
$T142468 = -32						; size = 8
$T142467 = -32						; size = 8
tv175 = -28						; size = 4
__Wc$142549 = -24					; size = 2
__Wc$142560 = -24					; size = 2
__Wc$142522 = -24					; size = 2
__Wc$142533 = -24					; size = 2
$T142497 = -24						; size = 4
$T142535 = -20						; size = 1
$T142524 = -20						; size = 1
__$EHRec$ = -16						; size = 16
__Lobj$ = 8						; size = 4
$T142562 = 12						; size = 1
$T142551 = 12						; size = 1
__Isdef$ = 12						; size = 1
?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z PROC	; std::numpunct<wchar_t>::_Init, COMDAT
; _this$ = ecx

; 135  : 		{	// initialize from _Lobj

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 d8	 mov	 DWORD PTR _this$[ebp], esi

; 136  : 		const lconv *_Ptr = _Lobj._Getlconv();

  00030	e8 00 00 00 00	 call	 _localeconv

; 137  : 
; 138  : 		_Grouping = 0;

  00035	33 db		 xor	 ebx, ebx
  00037	8b f8		 mov	 edi, eax
  00039	89 7d dc	 mov	 DWORD PTR __Ptr$[ebp], edi
  0003c	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 139  : 		_Falsename = 0;

  0003f	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 140  : 		_Truename = 0;

  00042	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 141  : 
; 142  : 		_TRY_BEGIN

  00045	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 143  : 		_Grouping = _MAKLOCSTR(char, _Ptr->grouping, _Lobj._Getcvt());

  00048	e8 00 00 00 00	 call	 __Getcvt
  0004d	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00050	89 45 e8	 mov	 DWORD PTR $T142497[ebp], eax
  00053	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL46@Init@2:
  00056	8a 08		 mov	 cl, BYTE PTR [eax]
  00058	40		 inc	 eax
  00059	3a cb		 cmp	 cl, bl
  0005b	75 f9		 jne	 SHORT $LL46@Init@2
  0005d	2b c2		 sub	 eax, edx
  0005f	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00062	57		 push	 edi
  00063	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00068	83 c4 04	 add	 esp, 4
  0006b	89 45 e4	 mov	 DWORD PTR tv175[ebp], eax
  0006e	8b c8		 mov	 ecx, eax
$LL15@Init@2:
  00070	3b fb		 cmp	 edi, ebx
  00072	76 0f		 jbe	 SHORT $LN13@Init@2
  00074	8b 55 e8	 mov	 edx, DWORD PTR $T142497[ebp]
  00077	8a 02		 mov	 al, BYTE PTR [edx]
  00079	88 01		 mov	 BYTE PTR [ecx], al
  0007b	4f		 dec	 edi
  0007c	41		 inc	 ecx
  0007d	42		 inc	 edx
  0007e	89 55 e8	 mov	 DWORD PTR $T142497[ebp], edx
  00081	eb ed		 jmp	 SHORT $LL15@Init@2
$LN13@Init@2:
  00083	8b 4d e4	 mov	 ecx, DWORD PTR tv175[ebp]
  00086	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 144  : 		_Falsename = _MAKLOCSTR(_Elem, _Lobj._Getfalse(), _Lobj._Getcvt());

  00089	e8 00 00 00 00	 call	 __Getcvt
  0008e	89 55 e4	 mov	 DWORD PTR $T142467[ebp+4], edx
  00091	8d 55 e0	 lea	 edx, DWORD PTR $T142467[ebp]
  00094	52		 push	 edx
  00095	53		 push	 ebx
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_05LAPONLG@false?$AA@
  0009b	89 45 e0	 mov	 DWORD PTR $T142467[ebp], eax
  0009e	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a6	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 145  : 		_Truename = _MAKLOCSTR(_Elem, _Lobj._Gettrue(), _Lobj._Getcvt());

  000a9	e8 00 00 00 00	 call	 __Getcvt
  000ae	89 45 e0	 mov	 DWORD PTR $T142468[ebp], eax
  000b1	8d 45 e0	 lea	 eax, DWORD PTR $T142468[ebp]
  000b4	50		 push	 eax
  000b5	53		 push	 ebx
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_04LOAJBDKD@true?$AA@
  000bb	89 55 e4	 mov	 DWORD PTR $T142468[ebp+4], edx
  000be	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c6	89 46 14	 mov	 DWORD PTR [esi+20], eax
  000c9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 149  : 		_CATCH_END
; 150  : 
; 151  : 		_Dp = _MAKLOCCHR(_Elem, _Ptr->decimal_point[0], _Lobj._Getcvt());

  000d0	e8 00 00 00 00	 call	 __Getcvt
  000d5	8b 7d dc	 mov	 edi, DWORD PTR __Ptr$[ebp]
  000d8	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000da	89 45 d4	 mov	 DWORD PTR $T142469[ebp], eax
  000dd	89 55 d8	 mov	 DWORD PTR $T142469[ebp+4], edx
  000e0	8a 11		 mov	 dl, BYTE PTR [ecx]
  000e2	8d 45 d4	 lea	 eax, DWORD PTR $T142469[ebp]
  000e5	50		 push	 eax
  000e6	8d 4d dc	 lea	 ecx, DWORD PTR __Mbst1$142523[ebp]
  000e9	51		 push	 ecx
  000ea	88 55 ec	 mov	 BYTE PTR $T142524[ebp], dl
  000ed	6a 01		 push	 1
  000ef	8d 55 ec	 lea	 edx, DWORD PTR $T142524[ebp]
  000f2	52		 push	 edx
  000f3	8d 45 e8	 lea	 eax, DWORD PTR __Wc$142522[ebp]
  000f6	50		 push	 eax
  000f7	89 5d e8	 mov	 DWORD PTR __Wc$142522[ebp], ebx
  000fa	89 5d dc	 mov	 DWORD PTR __Mbst1$142523[ebp], ebx
  000fd	e8 00 00 00 00	 call	 __Mbrtowc
  00102	66 8b 4d e8	 mov	 cx, WORD PTR __Wc$142522[ebp]
  00106	66 89 4e 0c	 mov	 WORD PTR [esi+12], cx

; 152  : 		_Kseparator =
; 153  : 			_MAKLOCCHR(_Elem, _Ptr->thousands_sep[0], _Lobj._Getcvt());

  0010a	e8 00 00 00 00	 call	 __Getcvt
  0010f	89 55 d8	 mov	 DWORD PTR $T142470[ebp+4], edx
  00112	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00115	89 45 d4	 mov	 DWORD PTR $T142470[ebp], eax
  00118	8a 02		 mov	 al, BYTE PTR [edx]
  0011a	8d 4d d4	 lea	 ecx, DWORD PTR $T142470[ebp]
  0011d	51		 push	 ecx
  0011e	8d 55 dc	 lea	 edx, DWORD PTR __Mbst1$142534[ebp]
  00121	52		 push	 edx
  00122	88 45 ec	 mov	 BYTE PTR $T142535[ebp], al
  00125	6a 01		 push	 1
  00127	8d 45 ec	 lea	 eax, DWORD PTR $T142535[ebp]
  0012a	50		 push	 eax
  0012b	8d 4d e8	 lea	 ecx, DWORD PTR __Wc$142533[ebp]
  0012e	51		 push	 ecx
  0012f	89 5d e8	 mov	 DWORD PTR __Wc$142533[ebp], ebx
  00132	89 5d dc	 mov	 DWORD PTR __Mbst1$142534[ebp], ebx
  00135	e8 00 00 00 00	 call	 __Mbrtowc
  0013a	66 8b 55 e8	 mov	 dx, WORD PTR __Wc$142533[ebp]
  0013e	83 c4 28	 add	 esp, 40			; 00000028H
  00141	66 89 56 0e	 mov	 WORD PTR [esi+14], dx

; 154  : 
; 155  : 		if (_Isdef)

  00145	38 5d 0c	 cmp	 BYTE PTR __Isdef$[ebp], bl
  00148	0f 84 82 00 00
	00		 je	 $LN1@Init@2

; 156  : 			{	// apply defaults for required facets
; 157  : 			_Grouping = _MAKLOCSTR(char, "", _Lobj._Getcvt());

  0014e	e8 00 00 00 00	 call	 __Getcvt
  00153	8d 45 d4	 lea	 eax, DWORD PTR $T142471[ebp]
  00156	50		 push	 eax
  00157	53		 push	 ebx
  00158	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0015d	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00162	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 158  : 			_Dp = _MAKLOCCHR(_Elem, '.', _Lobj._Getcvt());

  00165	e8 00 00 00 00	 call	 __Getcvt
  0016a	8d 4d d4	 lea	 ecx, DWORD PTR $T142472[ebp]
  0016d	51		 push	 ecx
  0016e	89 55 d8	 mov	 DWORD PTR $T142472[ebp+4], edx
  00171	8d 55 dc	 lea	 edx, DWORD PTR __Mbst1$142550[ebp]
  00174	52		 push	 edx
  00175	89 45 d4	 mov	 DWORD PTR $T142472[ebp], eax
  00178	6a 01		 push	 1
  0017a	8d 45 0c	 lea	 eax, DWORD PTR $T142551[ebp]
  0017d	50		 push	 eax
  0017e	8d 4d e8	 lea	 ecx, DWORD PTR __Wc$142549[ebp]
  00181	51		 push	 ecx
  00182	c6 45 0c 2e	 mov	 BYTE PTR $T142551[ebp], 46 ; 0000002eH
  00186	89 5d e8	 mov	 DWORD PTR __Wc$142549[ebp], ebx
  00189	89 5d dc	 mov	 DWORD PTR __Mbst1$142550[ebp], ebx
  0018c	e8 00 00 00 00	 call	 __Mbrtowc
  00191	66 8b 55 e8	 mov	 dx, WORD PTR __Wc$142549[ebp]
  00195	66 89 56 0c	 mov	 WORD PTR [esi+12], dx

; 159  : 			_Kseparator = _MAKLOCCHR(_Elem, ',', _Lobj._Getcvt());

  00199	e8 00 00 00 00	 call	 __Getcvt
  0019e	89 45 d4	 mov	 DWORD PTR $T142473[ebp], eax
  001a1	8d 45 d4	 lea	 eax, DWORD PTR $T142473[ebp]
  001a4	50		 push	 eax
  001a5	8d 4d dc	 lea	 ecx, DWORD PTR __Mbst1$142561[ebp]
  001a8	51		 push	 ecx
  001a9	89 55 d8	 mov	 DWORD PTR $T142473[ebp+4], edx
  001ac	6a 01		 push	 1
  001ae	8d 55 0c	 lea	 edx, DWORD PTR $T142562[ebp]
  001b1	52		 push	 edx
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __Wc$142560[ebp]
  001b5	50		 push	 eax
  001b6	c6 45 0c 2c	 mov	 BYTE PTR $T142562[ebp], 44 ; 0000002cH
  001ba	89 5d e8	 mov	 DWORD PTR __Wc$142560[ebp], ebx
  001bd	89 5d dc	 mov	 DWORD PTR __Mbst1$142561[ebp], ebx
  001c0	e8 00 00 00 00	 call	 __Mbrtowc
  001c5	66 8b 4d e8	 mov	 cx, WORD PTR __Wc$142560[ebp]
  001c9	83 c4 34	 add	 esp, 52			; 00000034H
  001cc	66 89 4e 0e	 mov	 WORD PTR [esi+14], cx
$LN1@Init@2:

; 160  : 			}
; 161  : 		}

  001d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001da	59		 pop	 ecx
  001db	5f		 pop	 edi
  001dc	5e		 pop	 esi
  001dd	5b		 pop	 ebx
  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c2 08 00	 ret	 8
__catch$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z$0:

; 146  : 		_CATCH_ALL
; 147  : 		_Tidy();

  001e4	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e7	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@_W@std@@AAEXXZ ; std::numpunct<wchar_t>::_Tidy

; 148  : 		_RERAISE;

  001ec	33 db		 xor	 ebx, ebx
  001ee	53		 push	 ebx
  001ef	53		 push	 ebx
  001f0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN48@Init@2:
  001f5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z ENDP	; std::numpunct<wchar_t>::_Init
PUBLIC	??$_Checked_base@PAE@std@@YAPAEAAPAE@Z		; std::_Checked_base<unsigned char *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAE@std@@YAPAEAAPAE@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@PAE@std@@YAPAEAAPAE@Z PROC		; std::_Checked_base<unsigned char *>, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 1166 : 	}

  00006	c3		 ret	 0
??$_Checked_base@PAE@std@@YAPAEAAPAE@Z ENDP		; std::_Checked_base<unsigned char *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAEPAEV?$allocator@E@std@@@stdext@@YAPAEPAE00AAV?$allocator@E@std@@@Z ; stdext::unchecked_uninitialized_copy<unsigned char *,unsigned char *,std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAEPAEV?$allocator@E@std@@@stdext@@YAPAEPAE00AAV?$allocator@E@std@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAEPAEV?$allocator@E@std@@@stdext@@YAPAEPAE00AAV?$allocator@E@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<unsigned char *,unsigned char *,std::allocator<unsigned char> >, COMDAT

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Dest$[esp-4]
  0000c	2b c1		 sub	 eax, ecx
  0000e	56		 push	 esi
  0000f	8d 34 10	 lea	 esi, DWORD PTR [eax+edx]
  00012	74 0c		 je	 SHORT $LN16@unchecked_
  00014	50		 push	 eax
  00015	51		 push	 ecx
  00016	50		 push	 eax
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 _memmove_s
  0001d	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@unchecked_:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi

; 823  : 	}

  00023	c3		 ret	 0
??$unchecked_uninitialized_copy@PAEPAEV?$allocator@E@std@@@stdext@@YAPAEPAE00AAV?$allocator@E@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<unsigned char *,unsigned char *,std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUSecurityTokenKeyfile@CipherShed@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@AAPAU12@@Z ; std::_Checked_base<CipherShed::SecurityTokenKeyfile *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUSecurityTokenKeyfile@CipherShed@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@AAPAU12@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@PAUSecurityTokenKeyfile@CipherShed@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@AAPAU12@@Z PROC ; std::_Checked_base<CipherShed::SecurityTokenKeyfile *>, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 1166 : 	}

  00006	c3		 ret	 0
??$_Checked_base@PAUSecurityTokenKeyfile@CipherShed@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@AAPAU12@@Z ENDP ; std::_Checked_base<CipherShed::SecurityTokenKeyfile *>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAEPAEUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAEPAE00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<unsigned char *,unsigned char *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_backward_opt@PAEPAEUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAEPAE00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAEPAEUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAEPAE00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<unsigned char *,unsigned char *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 10	 mov	 esi, DWORD PTR __Dest$[esp]
  0000d	2b c1		 sub	 eax, ecx
  0000f	2b f0		 sub	 esi, eax
  00011	85 c0		 test	 eax, eax
  00013	7e 0c		 jle	 SHORT $LN8@Move_backw
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	50		 push	 eax
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 _memmove_s
  0001e	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@Move_backw:
  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi

; 2755 : 	}

  00024	c3		 ret	 0
??$_Move_backward_opt@PAEPAEUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAEPAE00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<unsigned char *,unsigned char *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAK@std@@YAPAKAAPAK@Z		; std::_Checked_base<unsigned long *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Checked_base@PAK@std@@YAPAKAAPAK@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@PAK@std@@YAPAKAAPAK@Z PROC		; std::_Checked_base<unsigned long *>, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 1166 : 	}

  00006	c3		 ret	 0
??$_Checked_base@PAK@std@@YAPAKAAPAK@Z ENDP		; std::_Checked_base<unsigned long *>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAKPAKUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAKPAK00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<unsigned long *,unsigned long *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_backward_opt@PAKPAKUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAKPAK00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAKPAKUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAKPAK00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<unsigned long *,unsigned long *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	2b c2		 sub	 eax, edx
  0000a	c1 f8 02	 sar	 eax, 2
  0000d	56		 push	 esi
  0000e	8b 74 24 10	 mov	 esi, DWORD PTR __Dest$[esp]
  00012	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  00019	2b f1		 sub	 esi, ecx
  0001b	85 c0		 test	 eax, eax
  0001d	7e 0c		 jle	 SHORT $LN8@Move_backw@2
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	51		 push	 ecx
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 _memmove_s
  00028	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@Move_backw@2:
  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 2755 : 	}

  0002e	c3		 ret	 0
??$_Move_backward_opt@PAKPAKUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAKPAK00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<unsigned long *,unsigned long *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare, COMDAT
; _this$ = ecx

; 2004 : 		return (compare(0, _Mysize, _Right._Myptr(), _Right.size()));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  00008	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0000b	72 13		 jb	 SHORT $LN7@compare@4
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	52		 push	 edx
  00011	50		 push	 eax
  00012	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00015	50		 push	 eax
  00016	6a 00		 push	 0
  00018	e8 00 00 00 00	 call	 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare

; 2005 : 		}

  0001d	c2 04 00	 ret	 4

; 2004 : 		return (compare(0, _Mysize, _Right._Myptr(), _Right.size()));

$LN7@compare@4:
  00020	52		 push	 edx
  00021	83 c0 04	 add	 eax, 4
  00024	50		 push	 eax
  00025	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00028	50		 push	 eax
  00029	6a 00		 push	 0
  0002b	e8 00 00 00 00	 call	 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare

; 2005 : 		}

  00030	c2 04 00	 ret	 4
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
_TEXT	ENDS
PUBLIC	??9?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator!=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??9?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE_NABV012@@Z PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator!=, COMDAT
; _this$ = ecx

; 302  : 			{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 303  : 			return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN3@operator@42
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN4@operator@42
$LN3@operator@42:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN4@operator@42:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 304  : 			}

  00026	c2 04 00	 ret	 4
??9?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator!=
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE?AV012@H@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE?AV012@H@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx

; 255  : 			{	// postincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 256  : 			_Myt_iter _Tmp = *this;

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00008	57		 push	 edi
  00009	8b 7c 24 0c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000d	89 07		 mov	 DWORD PTR [edi], eax
  0000f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 257  : 			++*this;

  00012	85 c0		 test	 eax, eax
  00014	75 0b		 jne	 SHORT $LN19@operator@43
  00016	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0001b	8b 06		 mov	 eax, DWORD PTR [esi]
  0001d	85 c0		 test	 eax, eax
  0001f	74 04		 je	 SHORT $LN13@operator@43
$LN19@operator@43:
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	eb 02		 jmp	 SHORT $LN14@operator@43
$LN13@operator@43:
  00025	33 c0		 xor	 eax, eax
$LN14@operator@43:
  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	3b 50 14	 cmp	 edx, DWORD PTR [eax+20]
  0002d	75 05		 jne	 SHORT $LN3@operator@43
  0002f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@43:
  00034	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]

; 258  : 			return (_Tmp);

  00039	8b c7		 mov	 eax, edi
  0003b	5f		 pop	 edi
  0003c	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0003f	5e		 pop	 esi

; 259  : 			}

  00040	c2 08 00	 ret	 8
??E?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE?AV012@H@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator++
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAEPAEV?$allocator@E@std@@U_Undefined_move_tag@2@@std@@YAPAEPAE00AAV?$allocator@E@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<unsigned char *,unsigned char *,std::allocator<unsigned char>,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAEPAEV?$allocator@E@std@@U_Undefined_move_tag@2@@std@@YAPAEPAE00AAV?$allocator@E@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAEPAEV?$allocator@E@std@@U_Undefined_move_tag@2@@std@@YAPAEPAE00AAV?$allocator@E@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<unsigned char *,unsigned char *,std::allocator<unsigned char>,std::_Undefined_move_tag>, COMDAT

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Dest$[esp-4]
  0000c	2b c1		 sub	 eax, ecx
  0000e	56		 push	 esi
  0000f	8d 34 10	 lea	 esi, DWORD PTR [eax+edx]
  00012	74 0c		 je	 SHORT $LN18@Uninit_mov
  00014	50		 push	 eax
  00015	51		 push	 ecx
  00016	50		 push	 eax
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 _memmove_s
  0001d	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@Uninit_mov:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi

; 208  : 	}

  00023	c3		 ret	 0
??$_Uninit_move@PAEPAEV?$allocator@E@std@@U_Undefined_move_tag@2@@std@@YAPAEPAE00AAV?$allocator@E@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<unsigned char *,unsigned char *,std::allocator<unsigned char>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUSecurityTokenKeyfile@CipherShed@@AAV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUSecurityTokenKeyfile@CipherShed@@AAV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUSecurityTokenKeyfile@CipherShed@@AAV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1139 : 		return _It._Checked_iterator_base();

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1140 : 	}

  00007	c3		 ret	 0
??$_Checked_base@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUSecurityTokenKeyfile@CipherShed@@AAV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBKAAV?$_Vector_const_iterator@KV?$allocator@K@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBKAAV?$_Vector_const_iterator@KV?$allocator@K@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBKAAV?$_Vector_const_iterator@KV?$allocator@K@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1139 : 		return _It._Checked_iterator_base();

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1140 : 	}

  00007	c3		 ret	 0
??$_Checked_base@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBKAAV?$_Vector_const_iterator@KV?$allocator@K@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAEIE@std@@YAXPAEIABEUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<unsigned char *,unsigned int,unsigned char>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Fill_n@PAEIE@std@@YAXPAEIABEUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Fill_n@PAEIE@std@@YAXPAEIABEUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<unsigned char *,unsigned int,unsigned char>, COMDAT

; 3251 : 		// if _OutIt is checked, this will ensure we have enough space
; 3252 : 		_OutIt _Last = _First + _Count; (_Last);
; 3253 : 		_Fill_n(_CHECKED_BASE(_First), _Count, _Val,
; 3254 : 			_Range_checked_iterator_tag());

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00008	85 c0		 test	 eax, eax
  0000a	76 10		 jbe	 SHORT $LN7@Fill_n@3
  0000c	56		 push	 esi
  0000d	8b 74 24 10	 mov	 esi, DWORD PTR __Val$[esp]
$LL9@Fill_n@3:
  00011	8a 16		 mov	 dl, BYTE PTR [esi]
  00013	88 11		 mov	 BYTE PTR [ecx], dl
  00015	48		 dec	 eax
  00016	41		 inc	 ecx
  00017	85 c0		 test	 eax, eax
  00019	77 f6		 ja	 SHORT $LL9@Fill_n@3
  0001b	5e		 pop	 esi
$LN7@Fill_n@3:

; 3255 : 	}

  0001c	c3		 ret	 0
??$_Fill_n@PAEIE@std@@YAXPAEIABEUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<unsigned char *,unsigned int,unsigned char>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAKIK@std@@YAXPAKIABKUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<unsigned long *,unsigned int,unsigned long>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Fill_n@PAKIK@std@@YAXPAKIABKUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Fill_n@PAKIK@std@@YAXPAKIABKUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<unsigned long *,unsigned int,unsigned long>, COMDAT

; 3251 : 		// if _OutIt is checked, this will ensure we have enough space
; 3252 : 		_OutIt _Last = _First + _Count; (_Last);
; 3253 : 		_Fill_n(_CHECKED_BASE(_First), _Count, _Val,
; 3254 : 			_Range_checked_iterator_tag());

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00008	85 c0		 test	 eax, eax
  0000a	76 12		 jbe	 SHORT $LN7@Fill_n@4
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$LL9@Fill_n@4:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 31		 mov	 DWORD PTR [ecx], esi
  00015	48		 dec	 eax
  00016	83 c1 04	 add	 ecx, 4
  00019	85 c0		 test	 eax, eax
  0001b	77 f4		 ja	 SHORT $LL9@Fill_n@4
  0001d	5e		 pop	 esi
$LN7@Fill_n@4:

; 3255 : 	}

  0001e	c3		 ret	 0
??$_Fill_n@PAKIK@std@@YAXPAKIABKUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<unsigned long *,unsigned int,unsigned long>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAKPAKV?$allocator@K@std@@@stdext@@YAPAKPAK00AAV?$allocator@K@std@@@Z ; stdext::unchecked_uninitialized_copy<unsigned long *,unsigned long *,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAKPAKV?$allocator@K@std@@@stdext@@YAPAKPAK00AAV?$allocator@K@std@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAKPAKV?$allocator@K@std@@@stdext@@YAPAKPAK00AAV?$allocator@K@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<unsigned long *,unsigned long *,std::allocator<unsigned long> >, COMDAT

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	2b c2		 sub	 eax, edx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	57		 push	 edi
  0000f	8b 7c 24 14	 mov	 edi, DWORD PTR __Dest$[esp+4]
  00013	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0001a	8d 34 39	 lea	 esi, DWORD PTR [ecx+edi]
  0001d	85 c0		 test	 eax, eax
  0001f	76 0c		 jbe	 SHORT $LN16@unchecked_@2
  00021	51		 push	 ecx
  00022	52		 push	 edx
  00023	51		 push	 ecx
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 _memmove_s
  0002a	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@unchecked_@2:
  0002d	5f		 pop	 edi
  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi

; 823  : 	}

  00031	c3		 ret	 0
??$unchecked_uninitialized_copy@PAKPAKV?$allocator@K@std@@@stdext@@YAPAKPAK00AAV?$allocator@K@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<unsigned long *,unsigned long *,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
_TEXT	ENDS
;	COMDAT ??1Finally482@?BL@??LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z@QAE@XZ
_TEXT	SEGMENT
??1Finally482@?BL@??LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z@QAE@XZ PROC ; `CipherShed::SecurityToken::LoginUserIfRequired'::`27'::Finally482::~Finally482, COMDAT
; _this$ = eax

; 482  : 					finally_do_arg (string*, &pin, { burn ((void *) finally_arg->c_str(), finally_arg->size()); });

  00000	8b 08		 mov	 ecx, DWORD PTR [eax]
  00002	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00007	56		 push	 esi
  00008	39 51 18	 cmp	 DWORD PTR [ecx+24], edx
  0000b	72 05		 jb	 SHORT $LN17@Finally482
  0000d	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00010	eb 03		 jmp	 SHORT $LN18@Finally482
$LN17@Finally482:
  00012	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
$LN18@Finally482:
  00015	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00018	39 51 18	 cmp	 DWORD PTR [ecx+24], edx
  0001b	72 05		 jb	 SHORT $LN27@Finally482
  0001d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00020	eb 03		 jmp	 SHORT $LN28@Finally482
$LN27@Finally482:
  00022	83 c1 04	 add	 ecx, 4
$LN28@Finally482:
  00025	8b d0		 mov	 edx, eax
  00027	85 c0		 test	 eax, eax
  00029	74 1e		 je	 SHORT $LN37@Finally482
  0002b	eb 03 8d 49 00	 npad	 5
$LL30@Finally482:
  00030	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00033	41		 inc	 ecx
  00034	83 ea 01	 sub	 edx, 1
  00037	75 f7		 jne	 SHORT $LL30@Finally482
  00039	85 c0		 test	 eax, eax
  0003b	74 0c		 je	 SHORT $LN37@Finally482
  0003d	8d 49 00	 npad	 3
$LL2@Finally482:
  00040	48		 dec	 eax
  00041	c6 06 00	 mov	 BYTE PTR [esi], 0
  00044	46		 inc	 esi
  00045	85 c0		 test	 eax, eax
  00047	75 f7		 jne	 SHORT $LL2@Finally482
$LN37@Finally482:
  00049	5e		 pop	 esi
  0004a	c3		 ret	 0
??1Finally482@?BL@??LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z@QAE@XZ ENDP ; `CipherShed::SecurityToken::LoginUserIfRequired'::`27'::Finally482::~Finally482
_TEXT	ENDS
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 1795 : 		{	// look for [_Ptr, <null>) beginnng at or after _Off

  00000	56		 push	 esi

; 1796 : 		_DEBUG_POINTER(_Ptr);
; 1797 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@find@4:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@find@4
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	8b 44 24 14	 mov	 eax, DWORD PTR __Off$[esp+8]
  0001e	50		 push	 eax
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 1798 : 		}

  00027	c2 08 00	 ret	 8
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
PUBLIC	?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
; Function compile flags: /Ogtpy
;	COMDAT ?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
__Off$ = 12						; size = 4
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of, COMDAT
; _this$ = ecx

; 1994 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Off$[esp-4]
  00004	6a 01		 push	 1
  00006	50		 push	 eax
  00007	8d 54 24 0c	 lea	 edx, DWORD PTR __Ch$[esp+4]
  0000b	52		 push	 edx
  0000c	e8 00 00 00 00	 call	 ?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of

; 1995 : 		}

  00011	c2 08 00	 ret	 8
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtpy
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 2004 : 		return (compare(0, _Mysize, _Right._Myptr(), _Right.size()));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00008	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0000b	72 13		 jb	 SHORT $LN7@compare@5
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	52		 push	 edx
  00011	50		 push	 eax
  00012	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00015	50		 push	 eax
  00016	6a 00		 push	 0
  00018	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare

; 2005 : 		}

  0001d	c2 04 00	 ret	 4

; 2004 : 		return (compare(0, _Mysize, _Right._Myptr(), _Right.size()));

$LN7@compare@5:
  00020	52		 push	 edx
  00021	83 c0 04	 add	 eax, 4
  00024	50		 push	 eax
  00025	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00028	50		 push	 eax
  00029	6a 00		 push	 0
  0002b	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare

; 2005 : 		}

  00030	c2 04 00	 ret	 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
PUBLIC	?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find
; Function compile flags: /Ogtpy
;	COMDAT ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find, COMDAT
; _this$ = ecx

; 1795 : 		{	// look for [_Ptr, <null>) beginnng at or after _Off

  00000	56		 push	 esi

; 1796 : 		_DEBUG_POINTER(_Ptr);
; 1797 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@find@5:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@find@5
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	8b 44 24 14	 mov	 eax, DWORD PTR __Off$[esp+8]
  00024	50		 push	 eax
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi

; 1798 : 		}

  0002d	c2 08 00	 ret	 8
?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Ptr_size$ = 12					; size = 4
__Count$ = 16						; size = 4
?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Xsgetn_s, COMDAT
; _this$ = ecx

; 332  : 		{	// get _Count characters from stream

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

  00002	8b 6c 24 14	 mov	 ebp, DWORD PTR __Count$[esp+4]
  00006	56		 push	 esi
  00007	33 f6		 xor	 esi, esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	89 74 24 0c	 mov	 DWORD PTR __Copied$[esp+16], esi
  00010	85 ed		 test	 ebp, ebp
  00012	7e 71		 jle	 SHORT $LN31@Xsgetn_s
  00014	53		 push	 ebx
  00015	8b 5c 24 18	 mov	 ebx, DWORD PTR __Ptr$[esp+16]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL7@Xsgetn_s:

; 337  : 			if (0 < (_Stream_size = _Gnavail()))

  00020	8b cf		 mov	 ecx, edi
  00022	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  00027	85 c0		 test	 eax, eax
  00029	7e 35		 jle	 SHORT $LN5@Xsgetn_s

; 338  : 				{	// copy from read buffer
; 339  : 				_Size = _Stream_size;
; 340  : 				if (_Count < _Size)

  0002b	3b e8		 cmp	 ebp, eax
  0002d	8b f0		 mov	 esi, eax
  0002f	7d 02		 jge	 SHORT $LN4@Xsgetn_s

; 341  : 					_Size = _Count;

  00031	8b f5		 mov	 esi, ebp
$LN4@Xsgetn_s:

; 342  : 				_Traits_helper::copy_s<_Traits>(_Ptr, _Ptr_size, gptr(), _Size);

  00033	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	8b 54 24 1c	 mov	 edx, DWORD PTR __Ptr_size$[esp+16]
  0003c	56		 push	 esi
  0003d	51		 push	 ecx
  0003e	52		 push	 edx
  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 _memcpy_s

; 343  : 				_Ptr += _Size;
; 344  : 				_Copied += _Size;
; 345  : 				_Count -= _Size;
; 346  : 				gbump((int)_Size);

  00045	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00048	29 30		 sub	 DWORD PTR [eax], esi
  0004a	01 74 24 20	 add	 DWORD PTR __Copied$[esp+36], esi
  0004e	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00051	03 de		 add	 ebx, esi
  00053	2b ee		 sub	 ebp, esi
  00055	83 c4 10	 add	 esp, 16			; 00000010H
  00058	01 30		 add	 DWORD PTR [eax], esi
  0005a	8b 74 24 10	 mov	 esi, DWORD PTR __Copied$[esp+20]
  0005e	eb 17		 jmp	 SHORT $LN1@Xsgetn_s
$LN5@Xsgetn_s:

; 347  : 				}
; 348  : 			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  00060	8b 07		 mov	 eax, DWORD PTR [edi]
  00062	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00065	8b cf		 mov	 ecx, edi
  00067	ff d2		 call	 edx
  00069	83 f8 ff	 cmp	 eax, -1
  0006c	74 0d		 je	 SHORT $LN30@Xsgetn_s

; 349  : 				break;	// end of file, quit
; 350  : 			else
; 351  : 				{	// get a single character
; 352  : 				*_Ptr++ = _Traits::to_char_type(_Meta);
; 353  : 				++_Copied;

  0006e	46		 inc	 esi
  0006f	88 03		 mov	 BYTE PTR [ebx], al
  00071	43		 inc	 ebx
  00072	89 74 24 10	 mov	 DWORD PTR __Copied$[esp+20], esi

; 354  : 				--_Count;

  00076	4d		 dec	 ebp
$LN1@Xsgetn_s:

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

  00077	85 ed		 test	 ebp, ebp
  00079	7f a5		 jg	 SHORT $LL7@Xsgetn_s
$LN30@Xsgetn_s:
  0007b	5b		 pop	 ebx
  0007c	5f		 pop	 edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

  0007d	8b c6		 mov	 eax, esi
  0007f	5e		 pop	 esi
  00080	5d		 pop	 ebp

; 358  : 		}

  00081	59		 pop	 ecx
  00082	c2 0c 00	 ret	 12			; 0000000cH
$LN31@Xsgetn_s:
  00085	5f		 pop	 edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

  00086	8b c6		 mov	 eax, esi
  00088	5e		 pop	 esi
  00089	5d		 pop	 ebp

; 358  : 		}

  0008a	59		 pop	 ecx
  0008b	c2 0c 00	 ret	 12			; 0000000cH
?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Xsgetn_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn, COMDAT
; _this$ = ecx

; 362  : 		{	// put _Count characters to stream

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

  00002	8b 6c 24 10	 mov	 ebp, DWORD PTR __Count$[esp+4]
  00006	56		 push	 esi
  00007	33 f6		 xor	 esi, esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	89 74 24 0c	 mov	 DWORD PTR __Copied$[esp+16], esi
  00010	85 ed		 test	 ebp, ebp
  00012	7e 6f		 jle	 SHORT $LN31@xsputn
  00014	53		 push	 ebx
  00015	8b 5c 24 18	 mov	 ebx, DWORD PTR __Ptr$[esp+16]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL7@xsputn:

; 366  : 			if (0 < (_Stream_size = _Pnavail()))

  00020	8b cf		 mov	 ecx, edi
  00022	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
  00027	85 c0		 test	 eax, eax
  00029	7e 31		 jle	 SHORT $LN5@xsputn

; 367  : 				{	// copy to write buffer
; 368  : 				_Size = _Stream_size;
; 369  : 				if (_Count < _Size)

  0002b	3b e8		 cmp	 ebp, eax
  0002d	8b f0		 mov	 esi, eax
  0002f	7d 02		 jge	 SHORT $LN4@xsputn

; 370  : 					_Size = _Count;

  00031	8b f5		 mov	 esi, ebp
$LN4@xsputn:

; 371  : 				_Traits_helper::copy_s<_Traits>(pptr(), _Stream_size, _Ptr, _Size);

  00033	56		 push	 esi
  00034	53		 push	 ebx
  00035	50		 push	 eax
  00036	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 _memcpy_s

; 372  : 				_Ptr += _Size;
; 373  : 				_Copied += _Size;
; 374  : 				_Count -= _Size;
; 375  : 				pbump((int)_Size);

  00041	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00044	29 30		 sub	 DWORD PTR [eax], esi
  00046	01 74 24 20	 add	 DWORD PTR __Copied$[esp+36], esi
  0004a	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  0004d	03 de		 add	 ebx, esi
  0004f	2b ee		 sub	 ebp, esi
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	01 30		 add	 DWORD PTR [eax], esi

; 376  : 				}
; 377  : 			else if (_Traits::eq_int_type(_Traits::eof(),

  00056	8b 74 24 10	 mov	 esi, DWORD PTR __Copied$[esp+20]
  0005a	eb 19		 jmp	 SHORT $LN1@xsputn
$LN5@xsputn:

; 378  : 				overflow(_Traits::to_int_type(*_Ptr))))

  0005c	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  0005f	8b 17		 mov	 edx, DWORD PTR [edi]
  00061	50		 push	 eax
  00062	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00065	8b cf		 mov	 ecx, edi
  00067	ff d0		 call	 eax
  00069	83 f8 ff	 cmp	 eax, -1
  0006c	74 0b		 je	 SHORT $LN30@xsputn

; 379  : 				break;	// single character put failed, quit
; 380  : 			else
; 381  : 				{	// count character successfully put
; 382  : 				++_Ptr;
; 383  : 				++_Copied;

  0006e	46		 inc	 esi
  0006f	43		 inc	 ebx
  00070	89 74 24 10	 mov	 DWORD PTR __Copied$[esp+20], esi

; 384  : 				--_Count;

  00074	4d		 dec	 ebp
$LN1@xsputn:

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

  00075	85 ed		 test	 ebp, ebp
  00077	7f a7		 jg	 SHORT $LL7@xsputn
$LN30@xsputn:
  00079	5b		 pop	 ebx
  0007a	5f		 pop	 edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

  0007b	8b c6		 mov	 eax, esi
  0007d	5e		 pop	 esi
  0007e	5d		 pop	 ebp

; 388  : 		}

  0007f	59		 pop	 ecx
  00080	c2 08 00	 ret	 8
$LN31@xsputn:
  00083	5f		 pop	 edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

  00084	8b c6		 mov	 eax, esi
  00086	5e		 pop	 esi
  00087	5d		 pop	 ebp

; 388  : 		}

  00088	59		 pop	 ecx
  00089	c2 08 00	 ret	 8
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Ptr_size$ = 12					; size = 4
__Count$ = 16						; size = 4
?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Xsgetn_s, COMDAT
; _this$ = ecx

; 332  : 		{	// get _Count characters from stream

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi
  00003	57		 push	 edi

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

  00004	8b 7c 24 1c	 mov	 edi, DWORD PTR __Count$[esp+12]
  00008	33 f6		 xor	 esi, esi
  0000a	8b d9		 mov	 ebx, ecx
  0000c	89 74 24 0c	 mov	 DWORD PTR __Copied$[esp+16], esi
  00010	85 ff		 test	 edi, edi
  00012	0f 8e 89 00 00
	00		 jle	 $LN33@Xsgetn_s@2
  00018	55		 push	 ebp
  00019	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  0001d	8d 49 00	 npad	 3
$LL7@Xsgetn_s@2:

; 337  : 			if (0 < (_Stream_size = _Gnavail()))

  00020	8b cb		 mov	 ecx, ebx
  00022	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
  00027	85 c0		 test	 eax, eax
  00029	7e 41		 jle	 SHORT $LN5@Xsgetn_s@2

; 338  : 				{	// copy from read buffer
; 339  : 				_Size = _Stream_size;
; 340  : 				if (_Count < _Size)

  0002b	3b f8		 cmp	 edi, eax
  0002d	8b f0		 mov	 esi, eax
  0002f	7d 02		 jge	 SHORT $LN4@Xsgetn_s@2

; 341  : 					_Size = _Count;

  00031	8b f7		 mov	 esi, edi
$LN4@Xsgetn_s@2:

; 342  : 				_Traits_helper::copy_s<_Traits>(_Ptr, _Ptr_size, gptr(), _Size);

  00033	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	8b 54 24 1c	 mov	 edx, DWORD PTR __Ptr_size$[esp+16]
  0003c	8d 3c 36	 lea	 edi, DWORD PTR [esi+esi]
  0003f	57		 push	 edi
  00040	51		 push	 ecx
  00041	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  00044	50		 push	 eax
  00045	55		 push	 ebp
  00046	e8 00 00 00 00	 call	 _memcpy_s

; 343  : 				_Ptr += _Size;
; 344  : 				_Copied += _Size;
; 345  : 				_Count -= _Size;
; 346  : 				gbump((int)_Size);

  0004b	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  0004e	29 30		 sub	 DWORD PTR [eax], esi
  00050	29 74 24 30	 sub	 DWORD PTR __Count$[esp+32], esi
  00054	01 74 24 20	 add	 DWORD PTR __Copied$[esp+36], esi
  00058	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  0005b	8b 74 24 20	 mov	 esi, DWORD PTR __Copied$[esp+36]
  0005f	03 ef		 add	 ebp, edi
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	01 38		 add	 DWORD PTR [eax], edi
  00066	8b 7c 24 20	 mov	 edi, DWORD PTR __Count$[esp+16]
  0006a	eb 27		 jmp	 SHORT $LN1@Xsgetn_s@2
$LN5@Xsgetn_s@2:

; 347  : 				}
; 348  : 			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  0006c	8b 13		 mov	 edx, DWORD PTR [ebx]
  0006e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00071	8b cb		 mov	 ecx, ebx
  00073	ff d0		 call	 eax
  00075	0f b7 c0	 movzx	 eax, ax
  00078	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0007d	66 3b c8	 cmp	 cx, ax
  00080	74 15		 je	 SHORT $LN32@Xsgetn_s@2

; 349  : 				break;	// end of file, quit
; 350  : 			else
; 351  : 				{	// get a single character
; 352  : 				*_Ptr++ = _Traits::to_char_type(_Meta);

  00082	66 89 45 00	 mov	 WORD PTR [ebp], ax

; 353  : 				++_Copied;

  00086	46		 inc	 esi
  00087	83 c5 02	 add	 ebp, 2

; 354  : 				--_Count;

  0008a	4f		 dec	 edi
  0008b	89 74 24 10	 mov	 DWORD PTR __Copied$[esp+20], esi
  0008f	89 7c 24 20	 mov	 DWORD PTR __Count$[esp+16], edi
$LN1@Xsgetn_s@2:

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

  00093	85 ff		 test	 edi, edi
  00095	7f 89		 jg	 SHORT $LL7@Xsgetn_s@2
$LN32@Xsgetn_s@2:
  00097	5d		 pop	 ebp
  00098	5f		 pop	 edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

  00099	8b c6		 mov	 eax, esi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx

; 358  : 		}

  0009d	59		 pop	 ecx
  0009e	c2 0c 00	 ret	 12			; 0000000cH
$LN33@Xsgetn_s@2:
  000a1	5f		 pop	 edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

  000a2	8b c6		 mov	 eax, esi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx

; 358  : 		}

  000a6	59		 pop	 ecx
  000a7	c2 0c 00	 ret	 12			; 0000000cH
?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Xsgetn_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn, COMDAT
; _this$ = ecx

; 362  : 		{	// put _Count characters to stream

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi
  00003	57		 push	 edi

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

  00004	8b 7c 24 18	 mov	 edi, DWORD PTR __Count$[esp+12]
  00008	33 f6		 xor	 esi, esi
  0000a	8b d9		 mov	 ebx, ecx
  0000c	89 74 24 0c	 mov	 DWORD PTR __Copied$[esp+16], esi
  00010	85 ff		 test	 edi, edi
  00012	0f 8e 82 00 00
	00		 jle	 $LN33@xsputn@2
  00018	55		 push	 ebp
  00019	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  0001d	8d 49 00	 npad	 3
$LL7@xsputn@2:

; 366  : 			if (0 < (_Stream_size = _Pnavail()))

  00020	8b cb		 mov	 ecx, ebx
  00022	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
  00027	85 c0		 test	 eax, eax
  00029	7e 3c		 jle	 SHORT $LN5@xsputn@2

; 367  : 				{	// copy to write buffer
; 368  : 				_Size = _Stream_size;
; 369  : 				if (_Count < _Size)

  0002b	3b f8		 cmp	 edi, eax
  0002d	8b f0		 mov	 esi, eax
  0002f	7d 02		 jge	 SHORT $LN4@xsputn@2

; 370  : 					_Size = _Count;

  00031	8b f7		 mov	 esi, edi
$LN4@xsputn@2:

; 371  : 				_Traits_helper::copy_s<_Traits>(pptr(), _Stream_size, _Ptr, _Size);

  00033	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  00036	8b 11		 mov	 edx, DWORD PTR [ecx]
  00038	8d 3c 36	 lea	 edi, DWORD PTR [esi+esi]
  0003b	57		 push	 edi
  0003c	55		 push	 ebp
  0003d	03 c0		 add	 eax, eax
  0003f	50		 push	 eax
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 _memcpy_s

; 372  : 				_Ptr += _Size;
; 373  : 				_Copied += _Size;
; 374  : 				_Count -= _Size;
; 375  : 				pbump((int)_Size);

  00046	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]
  00049	29 30		 sub	 DWORD PTR [eax], esi
  0004b	29 74 24 2c	 sub	 DWORD PTR __Count$[esp+32], esi
  0004f	01 74 24 20	 add	 DWORD PTR __Copied$[esp+36], esi
  00053	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]

; 376  : 				}
; 377  : 			else if (_Traits::eq_int_type(_Traits::eof(),

  00056	8b 74 24 20	 mov	 esi, DWORD PTR __Copied$[esp+36]
  0005a	03 ef		 add	 ebp, edi
  0005c	83 c4 10	 add	 esp, 16			; 00000010H
  0005f	01 38		 add	 DWORD PTR [eax], edi
  00061	8b 7c 24 1c	 mov	 edi, DWORD PTR __Count$[esp+16]
  00065	eb 25		 jmp	 SHORT $LN1@xsputn@2
$LN5@xsputn@2:

; 378  : 				overflow(_Traits::to_int_type(*_Ptr))))

  00067	0f b7 45 00	 movzx	 eax, WORD PTR [ebp]
  0006b	8b 13		 mov	 edx, DWORD PTR [ebx]
  0006d	50		 push	 eax
  0006e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00071	8b cb		 mov	 ecx, ebx
  00073	ff d0		 call	 eax
  00075	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0007a	66 3b c8	 cmp	 cx, ax
  0007d	74 11		 je	 SHORT $LN32@xsputn@2

; 379  : 				break;	// single character put failed, quit
; 380  : 			else
; 381  : 				{	// count character successfully put
; 382  : 				++_Ptr;
; 383  : 				++_Copied;

  0007f	46		 inc	 esi
  00080	83 c5 02	 add	 ebp, 2

; 384  : 				--_Count;

  00083	4f		 dec	 edi
  00084	89 74 24 10	 mov	 DWORD PTR __Copied$[esp+20], esi
  00088	89 7c 24 1c	 mov	 DWORD PTR __Count$[esp+16], edi
$LN1@xsputn@2:

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

  0008c	85 ff		 test	 edi, edi
  0008e	7f 90		 jg	 SHORT $LL7@xsputn@2
$LN32@xsputn@2:
  00090	5d		 pop	 ebp
  00091	5f		 pop	 edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

  00092	8b c6		 mov	 eax, esi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx

; 388  : 		}

  00096	59		 pop	 ecx
  00097	c2 08 00	 ret	 8
$LN33@xsputn@2:
  0009a	5f		 pop	 edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx

; 388  : 		}

  0009f	59		 pop	 ecx
  000a0	c2 08 00	 ret	 8
?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn
_TEXT	ENDS
PUBLIC	??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
PUBLIC	??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	FLAT:??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$all'
	DB	'ocator@_W@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
	DD	054H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD FLAT:??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 495  : 		{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	89 4c 24 08	 mov	 DWORD PTR _this$[esp+24], ecx
  00026	8b 41 ac	 mov	 eax, DWORD PTR [ecx-84]
  00029	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002c	c7 44 0a ac 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-84], OFFSET ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@

; 496  : 		}

  00034	8d 71 b8	 lea	 esi, DWORD PTR [ecx-72]
  00037	8b ce		 mov	 ecx, esi
  00039	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00047	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  00053	8b 46 f4	 mov	 eax, DWORD PTR [esi-12]
  00056	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00059	c7 44 31 f4 00
	00 00 00	 mov	 DWORD PTR [ecx+esi-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  00061	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00064	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00067	c7 44 30 fc 00
	00 00 00	 mov	 DWORD PTR [eax+esi-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  0006f	8b 4e f4	 mov	 ecx, DWORD PTR [esi-12]
  00072	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00075	c7 44 32 f4 00
	00 00 00	 mov	 DWORD PTR [edx+esi-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0007d	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5e		 pop	 esi
  0008a	83 c4 10	 add	 esp, 16			; 00000010H
  0008d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 e9 48	 sub	 ecx, 72			; 00000048H
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00012	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
_TEXT	SEGMENT
__Newsize$127869 = -4					; size = 4
__Meta$ = 8						; size = 2
?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::overflow, COMDAT
; _this$ = ecx

; 87   : 		{	// put an element to stream

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 88   : 		if (_Mystate & _Append
; 89   : 			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)

  00004	f6 46 40 08	 test	 BYTE PTR [esi+64], 8
  00008	57		 push	 edi
  00009	74 23		 je	 SHORT $LN98@overflow
  0000b	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  0000e	8b 02		 mov	 eax, DWORD PTR [edx]
  00010	85 c0		 test	 eax, eax
  00012	74 1a		 je	 SHORT $LN98@overflow
  00014	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  00017	3b c1		 cmp	 eax, ecx
  00019	73 13		 jae	 SHORT $LN98@overflow

; 90   : 			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  0001b	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  0001e	8b 3f		 mov	 edi, DWORD PTR [edi]
  00020	8d 04 78	 lea	 eax, DWORD PTR [eax+edi*2]
  00023	2b c1		 sub	 eax, ecx
  00025	89 0a		 mov	 DWORD PTR [edx], ecx
  00027	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  0002a	d1 f8		 sar	 eax, 1
  0002c	89 01		 mov	 DWORD PTR [ecx], eax
$LN98@overflow:

; 91   : 
; 92   : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0002e	66 8b 44 24 10	 mov	 ax, WORD PTR __Meta$[esp+8]
  00033	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00038	66 3b d0	 cmp	 dx, ax
  0003b	75 08		 jne	 SHORT $LN17@overflow
  0003d	5f		 pop	 edi

; 93   : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  0003e	33 c0		 xor	 eax, eax
  00040	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  00041	59		 pop	 ecx
  00042	c2 04 00	 ret	 4
$LN17@overflow:

; 94   : 		else if (_Mysb::pptr() != 0
; 95   : 			&& _Mysb::pptr() < _Mysb::epptr())

  00045	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00048	8b 3a		 mov	 edi, DWORD PTR [edx]
  0004a	53		 push	 ebx
  0004b	85 ff		 test	 edi, edi
  0004d	74 24		 je	 SHORT $LN15@overflow
  0004f	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00052	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00054	8b d7		 mov	 edx, edi
  00056	8d 1c 5a	 lea	 ebx, DWORD PTR [edx+ebx*2]
  00059	3b d3		 cmp	 edx, ebx
  0005b	73 16		 jae	 SHORT $LN15@overflow

; 96   : 			{	// room in buffer, store it
; 97   : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0005d	ff 09		 dec	 DWORD PTR [ecx]

; 149  : 
; 150  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0005f	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  00062	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00064	5b		 pop	 ebx
  00065	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  00068	89 16		 mov	 DWORD PTR [esi], edx
  0006a	5f		 pop	 edi
  0006b	66 89 01	 mov	 WORD PTR [ecx], ax
  0006e	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  0006f	59		 pop	 ecx
  00070	c2 04 00	 ret	 4
$LN15@overflow:

; 98   : 			return (_Meta);
; 99   : 			}
; 100  : 		else if (_Mystate & _Constant)

  00073	f6 46 40 02	 test	 BYTE PTR [esi+64], 2

; 101  : 			return (_Traits::eof());	// array nonmutable, fail

  00077	75 3f		 jne	 SHORT $LN105@overflow

; 102  : 		else
; 103  : 			{	// grow buffer and store element
; 104  : 			size_t _Oldsize = _Mysb::pptr() == 0
; 105  : 				? 0 : _Mysb::epptr() - _Mysb::eback();

  00079	85 ff		 test	 edi, edi
  0007b	75 04		 jne	 SHORT $LN21@overflow
  0007d	33 db		 xor	 ebx, ebx
  0007f	eb 10		 jmp	 SHORT $LN22@overflow
$LN21@overflow:
  00081	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00084	8b 18		 mov	 ebx, DWORD PTR [eax]
  00086	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00089	03 db		 add	 ebx, ebx
  0008b	2b 19		 sub	 ebx, DWORD PTR [ecx]
  0008d	03 df		 add	 ebx, edi
  0008f	d1 fb		 sar	 ebx, 1
$LN22@overflow:

; 106  : 			size_t _Newsize = _Oldsize;
; 107  : 			size_t _Inc = _Newsize / 2 < _MINSIZE
; 108  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent

  00091	8b c3		 mov	 eax, ebx
  00093	d1 e8		 shr	 eax, 1
  00095	83 f8 20	 cmp	 eax, 32			; 00000020H
  00098	73 07		 jae	 SHORT $LN23@overflow
  0009a	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0009f	eb 04		 jmp	 SHORT $LL11@overflow
$LN23@overflow:

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  000a1	85 c0		 test	 eax, eax
  000a3	76 11		 jbe	 SHORT $LN102@overflow
$LL11@overflow:
  000a5	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  000aa	2b d0		 sub	 edx, eax
  000ac	3b d3		 cmp	 edx, ebx
  000ae	73 04		 jae	 SHORT $LN10@overflow

; 111  : 				_Inc /= 2;	// increment causes overflow, halve it

  000b0	d1 e8		 shr	 eax, 1

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  000b2	75 f1		 jne	 SHORT $LL11@overflow
$LN10@overflow:

; 112  : 			if (_Inc == 0)

  000b4	85 c0		 test	 eax, eax
$LN102@overflow:
  000b6	75 0c		 jne	 SHORT $LN9@overflow
$LN105@overflow:
  000b8	5b		 pop	 ebx
  000b9	5f		 pop	 edi

; 113  : 				return (_Traits::eof());	// buffer can't grow, fail

  000ba	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  000bf	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  000c0	59		 pop	 ecx
  000c1	c2 04 00	 ret	 4
$LN9@overflow:
  000c4	55		 push	 ebp

; 114  : 
; 115  : 			_Newsize += _Inc;

  000c5	03 c3		 add	 eax, ebx

; 116  : 
; 117  : 			_Elem *_Newptr = _Al.allocate(_Newsize);

  000c7	6a 00		 push	 0
  000c9	50		 push	 eax
  000ca	89 44 24 18	 mov	 DWORD PTR __Newsize$127869[esp+28], eax
  000ce	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  000d3	8b f8		 mov	 edi, eax

; 118  : 			_Elem *_Oldptr = _Mysb::eback();

  000d5	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000d8	8b 28		 mov	 ebp, DWORD PTR [eax]
  000da	83 c4 08	 add	 esp, 8

; 119  : 
; 120  : 			if (0 < _Oldsize)

  000dd	85 db		 test	 ebx, ebx
  000df	76 12		 jbe	 SHORT $LN103@overflow

; 121  : 				_Traits_helper::copy_s<_Traits>(_Newptr, _Newsize, _Oldptr, _Oldsize);

  000e1	8b 4c 24 10	 mov	 ecx, DWORD PTR __Newsize$127869[esp+20]
  000e5	53		 push	 ebx
  000e6	55		 push	 ebp
  000e7	51		 push	 ecx
  000e8	57		 push	 edi
  000e9	e8 00 00 00 00	 call	 ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
  000ee	83 c4 10	 add	 esp, 16			; 00000010H

; 122  : 
; 123  : 			if (_Oldsize == 0)

  000f1	85 db		 test	 ebx, ebx
$LN103@overflow:
  000f3	75 42		 jne	 SHORT $LN7@overflow

; 124  : 				{	// first growth, set up pointers
; 125  : 				_Seekhigh = _Newptr;
; 126  : 				_Mysb::setp(_Newptr, _Newptr + _Newsize);

  000f5	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000f8	8b 4c 24 10	 mov	 ecx, DWORD PTR __Newsize$127869[esp+20]
  000fc	89 7e 3c	 mov	 DWORD PTR [esi+60], edi
  000ff	89 3a		 mov	 DWORD PTR [edx], edi
  00101	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00104	89 38		 mov	 DWORD PTR [eax], edi
  00106	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00109	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  0010c	d1 fa		 sar	 edx, 1
  0010e	89 10		 mov	 DWORD PTR [eax], edx

; 127  : 				if (_Mystate & _Noread)

  00110	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  00114	74 1a		 je	 SHORT $LN6@overflow

; 128  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  00116	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00119	89 39		 mov	 DWORD PTR [ecx], edi
  0011b	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0011e	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00124	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00127	d1 ff		 sar	 edi, 1
  00129	89 38		 mov	 DWORD PTR [eax], edi

; 129  : 				else

  0012b	e9 80 00 00 00	 jmp	 $LN2@overflow
$LN6@overflow:

; 130  : 					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);

  00130	8d 4f 02	 lea	 ecx, DWORD PTR [edi+2]
  00133	51		 push	 ecx
  00134	57		 push	 edi

; 131  : 				}
; 132  : 			else

  00135	eb 71		 jmp	 SHORT $LN104@overflow
$LN7@overflow:

; 133  : 				{	// not first growth, adjust pointers
; 134  : 				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);

  00137	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]

; 135  : 				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
; 136  : 					_Newptr + (_Mysb::pptr() - _Oldptr),
; 137  : 					_Newptr + _Newsize);

  0013a	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0013d	2b d5		 sub	 edx, ebp
  0013f	d1 fa		 sar	 edx, 1
  00141	8d 04 57	 lea	 eax, DWORD PTR [edi+edx*2]
  00144	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00147	8b 11		 mov	 edx, DWORD PTR [ecx]
  00149	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0014c	2b d5		 sub	 edx, ebp
  0014e	d1 fa		 sar	 edx, 1
  00150	8d 04 57	 lea	 eax, DWORD PTR [edi+edx*2]
  00153	8b 11		 mov	 edx, DWORD PTR [ecx]
  00155	2b d5		 sub	 edx, ebp
  00157	d1 fa		 sar	 edx, 1
  00159	8d 14 57	 lea	 edx, DWORD PTR [edi+edx*2]
  0015c	89 11		 mov	 DWORD PTR [ecx], edx
  0015e	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00161	8b 54 24 10	 mov	 edx, DWORD PTR __Newsize$127869[esp+20]
  00165	89 01		 mov	 DWORD PTR [ecx], eax
  00167	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]
  0016a	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  0016d	2b c8		 sub	 ecx, eax
  0016f	03 cf		 add	 ecx, edi
  00171	d1 f9		 sar	 ecx, 1
  00173	89 0a		 mov	 DWORD PTR [edx], ecx

; 138  : 				if (_Mystate & _Noread)

  00175	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  00179	74 17		 je	 SHORT $LN3@overflow

; 139  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  0017b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0017e	89 38		 mov	 DWORD PTR [eax], edi
  00180	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00183	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00189	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0018c	d1 ff		 sar	 edi, 1
  0018e	89 3a		 mov	 DWORD PTR [edx], edi

; 140  : 				else

  00190	eb 1e		 jmp	 SHORT $LN2@overflow
$LN3@overflow:

; 141  : 					_Mysb::setg(_Newptr,
; 142  : 						_Newptr + (_Mysb::gptr() - _Oldptr),
; 143  : 						_Mysb::pptr() + 1);

  00192	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00195	8b 08		 mov	 ecx, DWORD PTR [eax]
  00197	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0019a	8b 02		 mov	 eax, DWORD PTR [edx]
  0019c	83 c1 02	 add	 ecx, 2
  0019f	2b c5		 sub	 eax, ebp
  001a1	51		 push	 ecx
  001a2	d1 f8		 sar	 eax, 1
  001a4	8d 0c 47	 lea	 ecx, DWORD PTR [edi+eax*2]
  001a7	51		 push	 ecx
$LN104@overflow:
  001a8	57		 push	 edi
  001a9	8b ce		 mov	 ecx, esi
  001ab	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg
$LN2@overflow:

; 144  : 				}
; 145  : 
; 146  : 			if (_Mystate & _Allocated)

  001b0	bb 01 00 00 00	 mov	 ebx, 1
  001b5	84 5e 40	 test	 BYTE PTR [esi+64], bl
  001b8	74 09		 je	 SHORT $LN87@overflow

; 147  : 				_Al.deallocate(_Oldptr, _Oldsize);

  001ba	55		 push	 ebp
  001bb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001c0	83 c4 04	 add	 esp, 4
$LN87@overflow:

; 148  : 			_Mystate |= _Allocated;

  001c3	09 5e 40	 or	 DWORD PTR [esi+64], ebx

; 149  : 
; 150  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  001c6	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  001c9	ff 08		 dec	 DWORD PTR [eax]
  001cb	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  001ce	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001d0	66 8b 44 24 18	 mov	 ax, WORD PTR __Meta$[esp+16]
  001d5	5d		 pop	 ebp
  001d6	5b		 pop	 ebx
  001d7	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  001da	89 16		 mov	 DWORD PTR [esi], edx
  001dc	5f		 pop	 edi
  001dd	66 89 01	 mov	 WORD PTR [ecx], ax
  001e0	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  001e1	59		 pop	 ecx
  001e2	c2 04 00	 ret	 4
?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::overflow
_TEXT	ENDS
PUBLIC	??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	FLAT:??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$alloc'
	DB	'ator@D@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	054H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 495  : 		{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	89 4c 24 08	 mov	 DWORD PTR _this$[esp+24], ecx
  00026	8b 41 ac	 mov	 eax, DWORD PTR [ecx-84]
  00029	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002c	c7 44 0a ac 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-84], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 496  : 		}

  00034	8d 71 b8	 lea	 esi, DWORD PTR [ecx-72]
  00037	8b ce		 mov	 ecx, esi
  00039	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00047	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00053	8b 46 f4	 mov	 eax, DWORD PTR [esi-12]
  00056	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00059	c7 44 31 f4 00
	00 00 00	 mov	 DWORD PTR [ecx+esi-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  00061	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00064	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00067	c7 44 30 fc 00
	00 00 00	 mov	 DWORD PTR [eax+esi-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0006f	8b 4e f4	 mov	 ecx, DWORD PTR [esi-12]
  00072	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00075	c7 44 32 f4 00
	00 00 00	 mov	 DWORD PTR [edx+esi-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0007d	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5e		 pop	 esi
  0008a	83 c4 10	 add	 esp, 16			; 00000010H
  0008d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 e9 48	 sub	 ecx, 72			; 00000048H
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__ehhandler$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00012	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Newsize$128582 = -4					; size = 4
__Meta$ = 8						; size = 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT
; _this$ = ecx

; 87   : 		{	// put an element to stream

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 88   : 		if (_Mystate & _Append
; 89   : 			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)

  00004	f6 46 40 08	 test	 BYTE PTR [esi+64], 8
  00008	57		 push	 edi
  00009	74 20		 je	 SHORT $LN102@overflow@2
  0000b	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  0000e	8b 17		 mov	 edx, DWORD PTR [edi]
  00010	85 d2		 test	 edx, edx
  00012	74 17		 je	 SHORT $LN102@overflow@2
  00014	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  00017	3b d1		 cmp	 edx, ecx
  00019	73 10		 jae	 SHORT $LN102@overflow@2

; 90   : 			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  0001b	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	03 c2		 add	 eax, edx
  00022	89 0f		 mov	 DWORD PTR [edi], ecx
  00024	2b c1		 sub	 eax, ecx
  00026	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00029	89 01		 mov	 DWORD PTR [ecx], eax
$LN102@overflow@2:

; 91   : 
; 92   : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0002b	8b 44 24 10	 mov	 eax, DWORD PTR __Meta$[esp+8]
  0002f	83 f8 ff	 cmp	 eax, -1
  00032	75 08		 jne	 SHORT $LN17@overflow@2
  00034	5f		 pop	 edi

; 93   : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  00035	33 c0		 xor	 eax, eax
  00037	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  00038	59		 pop	 ecx
  00039	c2 04 00	 ret	 4
$LN17@overflow@2:

; 94   : 		else if (_Mysb::pptr() != 0
; 95   : 			&& _Mysb::pptr() < _Mysb::epptr())

  0003c	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  0003f	8b 3a		 mov	 edi, DWORD PTR [edx]
  00041	53		 push	 ebx
  00042	85 ff		 test	 edi, edi
  00044	74 22		 je	 SHORT $LN15@overflow@2
  00046	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00049	8b 19		 mov	 ebx, DWORD PTR [ecx]
  0004b	8b d7		 mov	 edx, edi
  0004d	03 da		 add	 ebx, edx
  0004f	3b d3		 cmp	 edx, ebx
  00051	73 15		 jae	 SHORT $LN15@overflow@2

; 96   : 			{	// room in buffer, store it
; 97   : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  00053	ff 09		 dec	 DWORD PTR [ecx]
  00055	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  00058	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005a	5b		 pop	 ebx
  0005b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0005e	89 16		 mov	 DWORD PTR [esi], edx
  00060	5f		 pop	 edi
  00061	88 01		 mov	 BYTE PTR [ecx], al
  00063	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  00064	59		 pop	 ecx
  00065	c2 04 00	 ret	 4
$LN15@overflow@2:

; 98   : 			return (_Meta);
; 99   : 			}
; 100  : 		else if (_Mystate & _Constant)

  00068	f6 46 40 02	 test	 BYTE PTR [esi+64], 2
  0006c	74 0a		 je	 SHORT $LN13@overflow@2
  0006e	5b		 pop	 ebx
  0006f	5f		 pop	 edi

; 101  : 			return (_Traits::eof());	// array nonmutable, fail

  00070	83 c8 ff	 or	 eax, -1
  00073	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  00074	59		 pop	 ecx
  00075	c2 04 00	 ret	 4
$LN13@overflow@2:
  00078	55		 push	 ebp

; 102  : 		else
; 103  : 			{	// grow buffer and store element
; 104  : 			size_t _Oldsize = _Mysb::pptr() == 0
; 105  : 				? 0 : _Mysb::epptr() - _Mysb::eback();

  00079	85 ff		 test	 edi, edi
  0007b	75 04		 jne	 SHORT $LN21@overflow@2
  0007d	33 ed		 xor	 ebp, ebp
  0007f	eb 0c		 jmp	 SHORT $LN22@overflow@2
$LN21@overflow@2:
  00081	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00084	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00087	8b 28		 mov	 ebp, DWORD PTR [eax]
  00089	2b 29		 sub	 ebp, DWORD PTR [ecx]
  0008b	03 ef		 add	 ebp, edi
$LN22@overflow@2:

; 106  : 			size_t _Newsize = _Oldsize;
; 107  : 			size_t _Inc = _Newsize / 2 < _MINSIZE
; 108  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent

  0008d	8b c5		 mov	 eax, ebp
  0008f	d1 e8		 shr	 eax, 1
  00091	83 f8 20	 cmp	 eax, 32			; 00000020H
  00094	73 07		 jae	 SHORT $LN23@overflow@2
  00096	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0009b	eb 04		 jmp	 SHORT $LL11@overflow@2
$LN23@overflow@2:

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  0009d	85 c0		 test	 eax, eax
  0009f	76 11		 jbe	 SHORT $LN106@overflow@2
$LL11@overflow@2:
  000a1	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  000a6	2b d0		 sub	 edx, eax
  000a8	3b d5		 cmp	 edx, ebp
  000aa	73 04		 jae	 SHORT $LN10@overflow@2

; 111  : 				_Inc /= 2;	// increment causes overflow, halve it

  000ac	d1 e8		 shr	 eax, 1

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  000ae	75 f1		 jne	 SHORT $LL11@overflow@2
$LN10@overflow@2:

; 112  : 			if (_Inc == 0)

  000b0	85 c0		 test	 eax, eax
$LN106@overflow@2:
  000b2	75 0b		 jne	 SHORT $LN9@overflow@2
  000b4	5d		 pop	 ebp
  000b5	5b		 pop	 ebx
  000b6	5f		 pop	 edi

; 113  : 				return (_Traits::eof());	// buffer can't grow, fail

  000b7	83 c8 ff	 or	 eax, -1
  000ba	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  000bb	59		 pop	 ecx
  000bc	c2 04 00	 ret	 4
$LN9@overflow@2:

; 114  : 
; 115  : 			_Newsize += _Inc;

  000bf	03 c5		 add	 eax, ebp

; 116  : 
; 117  : 			_Elem *_Newptr = _Al.allocate(_Newsize);

  000c1	6a 00		 push	 0
  000c3	50		 push	 eax
  000c4	89 44 24 18	 mov	 DWORD PTR __Newsize$128582[esp+28], eax
  000c8	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  000cd	8b f8		 mov	 edi, eax

; 118  : 			_Elem *_Oldptr = _Mysb::eback();

  000cf	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000d2	8b 18		 mov	 ebx, DWORD PTR [eax]
  000d4	83 c4 08	 add	 esp, 8

; 119  : 
; 120  : 			if (0 < _Oldsize)

  000d7	85 ed		 test	 ebp, ebp
  000d9	76 12		 jbe	 SHORT $LN107@overflow@2

; 121  : 				_Traits_helper::copy_s<_Traits>(_Newptr, _Newsize, _Oldptr, _Oldsize);

  000db	8b 4c 24 10	 mov	 ecx, DWORD PTR __Newsize$128582[esp+20]
  000df	55		 push	 ebp
  000e0	53		 push	 ebx
  000e1	51		 push	 ecx
  000e2	57		 push	 edi
  000e3	e8 00 00 00 00	 call	 ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
  000e8	83 c4 10	 add	 esp, 16			; 00000010H

; 122  : 
; 123  : 			if (_Oldsize == 0)

  000eb	85 ed		 test	 ebp, ebp
$LN107@overflow@2:
  000ed	75 3e		 jne	 SHORT $LN7@overflow@2

; 124  : 				{	// first growth, set up pointers
; 125  : 				_Seekhigh = _Newptr;
; 126  : 				_Mysb::setp(_Newptr, _Newptr + _Newsize);

  000ef	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000f2	89 7e 3c	 mov	 DWORD PTR [esi+60], edi
  000f5	89 3a		 mov	 DWORD PTR [edx], edi
  000f7	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  000fa	8b 54 24 10	 mov	 edx, DWORD PTR __Newsize$128582[esp+20]
  000fe	89 38		 mov	 DWORD PTR [eax], edi
  00100	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00103	89 11		 mov	 DWORD PTR [ecx], edx

; 127  : 				if (_Mystate & _Noread)
; 128  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  00105	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00108	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  0010c	89 38		 mov	 DWORD PTR [eax], edi
  0010e	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00111	74 0d		 je	 SHORT $LN6@overflow@2
  00113	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00119	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0011c	89 3a		 mov	 DWORD PTR [edx], edi

; 129  : 				else

  0011e	eb 73		 jmp	 SHORT $LN89@overflow@2
$LN6@overflow@2:

; 130  : 					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);

  00120	89 39		 mov	 DWORD PTR [ecx], edi
  00122	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  00125	c7 02 01 00 00
	00		 mov	 DWORD PTR [edx], 1

; 131  : 				}
; 132  : 			else

  0012b	eb 66		 jmp	 SHORT $LN89@overflow@2
$LN7@overflow@2:

; 133  : 				{	// not first growth, adjust pointers
; 134  : 				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);
; 135  : 				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
; 136  : 					_Newptr + (_Mysb::pptr() - _Oldptr),
; 137  : 					_Newptr + _Newsize);

  0012d	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00130	8b c7		 mov	 eax, edi
  00132	2b c3		 sub	 eax, ebx
  00134	01 46 3c	 add	 DWORD PTR [esi+60], eax
  00137	8b 01		 mov	 eax, DWORD PTR [ecx]
  00139	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0013c	8b d7		 mov	 edx, edi
  0013e	2b d3		 sub	 edx, ebx
  00140	01 11		 add	 DWORD PTR [ecx], edx
  00142	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00145	2b c3		 sub	 eax, ebx
  00147	03 c7		 add	 eax, edi
  00149	8b d7		 mov	 edx, edi
  0014b	2b d0		 sub	 edx, eax
  0014d	03 54 24 10	 add	 edx, DWORD PTR __Newsize$128582[esp+20]
  00151	89 01		 mov	 DWORD PTR [ecx], eax
  00153	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00156	89 10		 mov	 DWORD PTR [eax], edx

; 138  : 				if (_Mystate & _Noread)

  00158	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  0015c	74 15		 je	 SHORT $LN3@overflow@2

; 139  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  0015e	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00161	89 39		 mov	 DWORD PTR [ecx], edi
  00163	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00166	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0016c	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0016f	89 38		 mov	 DWORD PTR [eax], edi

; 140  : 				else

  00171	eb 20		 jmp	 SHORT $LN89@overflow@2
$LN3@overflow@2:

; 141  : 					_Mysb::setg(_Newptr,
; 142  : 						_Newptr + (_Mysb::gptr() - _Oldptr),
; 143  : 						_Mysb::pptr() + 1);

  00173	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00176	8b 02		 mov	 eax, DWORD PTR [edx]
  00178	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0017b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0017d	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00180	2b c3		 sub	 eax, ebx
  00182	03 c7		 add	 eax, edi
  00184	89 3a		 mov	 DWORD PTR [edx], edi
  00186	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00189	2b c8		 sub	 ecx, eax
  0018b	89 02		 mov	 DWORD PTR [edx], eax
  0018d	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00190	41		 inc	 ecx
  00191	89 08		 mov	 DWORD PTR [eax], ecx
$LN89@overflow@2:

; 144  : 				}
; 145  : 
; 146  : 			if (_Mystate & _Allocated)

  00193	f6 46 40 01	 test	 BYTE PTR [esi+64], 1
  00197	74 09		 je	 SHORT $LN91@overflow@2

; 147  : 				_Al.deallocate(_Oldptr, _Oldsize);

  00199	53		 push	 ebx
  0019a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0019f	83 c4 04	 add	 esp, 4
$LN91@overflow@2:

; 148  : 			_Mystate |= _Allocated;
; 149  : 
; 150  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  001a2	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  001a5	83 4e 40 01	 or	 DWORD PTR [esi+64], 1
  001a9	ff 08		 dec	 DWORD PTR [eax]
  001ab	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  001ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001b0	8b 44 24 18	 mov	 eax, DWORD PTR __Meta$[esp+16]
  001b4	5d		 pop	 ebp
  001b5	5b		 pop	 ebx
  001b6	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  001b9	89 16		 mov	 DWORD PTR [esi], edx
  001bb	5f		 pop	 edi
  001bc	88 01		 mov	 BYTE PTR [ecx], al
  001be	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  001bf	59		 pop	 ecx
  001c0	c2 04 00	 ret	 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ ; std::_Vector_val<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::~_Vector_val<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Vector_val@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::~_Vector_val<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_Vector_val@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::~_Vector_val<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ ; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::~_Vector_val<unsigned char,std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ PROC	; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::~_Vector_val<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::~_Vector_val<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@XZ ; std::_Vector_val<unsigned long,std::allocator<unsigned long> >::~_Vector_val<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::_Vector_val<unsigned long,std::allocator<unsigned long> >::~_Vector_val<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<unsigned long,std::allocator<unsigned long> >::~_Vector_val<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??1?$_List_nod@KV?$allocator@K@std@@@std@@QAE@XZ ; std::_List_nod<unsigned long,std::allocator<unsigned long> >::~_List_nod<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_nod@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_nod@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::_List_nod<unsigned long,std::allocator<unsigned long> >::~_List_nod<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_nod@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::_List_nod<unsigned long,std::allocator<unsigned long> >::~_List_nod<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??1?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::~_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::~_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::~_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
_TEXT	ENDS
PUBLIC	??1?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@QAE@XZ ; std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0>::~_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@QAE@XZ PROC ; std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0>::~_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0>, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@QAE@XZ ENDP ; std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0>::~_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0>
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 27		 je	 SHORT $LN15@Tidy@4

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00013	72 21		 jb	 SHORT $LN15@Tidy@4

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 0d		 jbe	 SHORT $LN13@Tidy@4

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	57		 push	 edi
  00020	53		 push	 ebx
  00021	6a 10		 push	 16			; 00000010H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _memcpy_s
  00029	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@Tidy@4:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00032	83 c4 04	 add	 esp, 4
  00035	5b		 pop	 ebx
$LN15@Tidy@4:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00036	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00039	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00040	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 2160 : 		}

  00047	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 2a		 je	 SHORT $LN17@Tidy@5

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00013	72 24		 jb	 SHORT $LN17@Tidy@5

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 10		 jbe	 SHORT $LN15@Tidy@5

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  00022	51		 push	 ecx
  00023	53		 push	 ebx
  00024	6a 10		 push	 16			; 00000010H
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _memcpy_s
  0002c	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@Tidy@5:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00035	83 c4 04	 add	 esp, 4
  00038	5b		 pop	 ebx
$LN17@Tidy@5:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00039	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0003c	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00043	33 d2		 xor	 edx, edx
  00045	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 2160 : 		}

  0004c	c2 08 00	 ret	 8
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy, COMDAT
; _this$ = ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1120 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1124 : 		if (_Myfirst != 0)

  00003	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN4@Tidy@6

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);
; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN4@Tidy@6:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00013	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0001a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00021	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00028	5e		 pop	 esi

; 1135 : 		}

  00029	c3		 ret	 0
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode, COMDAT
; _this$ = ecx

; 1172 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  00000	6a 0c		 push	 12			; 0000000cH
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 1173 : 		int _Linkcnt = 0;
; 1174 : 
; 1175 : 		_TRY_BEGIN
; 1176 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Pnode);

  0000a	85 c0		 test	 eax, eax
  0000c	74 02		 je	 SHORT $LN26@Buynode
  0000e	89 00		 mov	 DWORD PTR [eax], eax
$LN26@Buynode:

; 1177 : 		++_Linkcnt;
; 1178 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Pnode);

  00010	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00013	85 c9		 test	 ecx, ecx
  00015	74 02		 je	 SHORT $LN36@Buynode
  00017	89 01		 mov	 DWORD PTR [ecx], eax
$LN36@Buynode:

; 1179 : 		_CATCH_ALL
; 1180 : 		if (0 < _Linkcnt)
; 1181 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1182 : 		this->_Alnod.deallocate(_Pnode, 1);
; 1183 : 		_RERAISE;
; 1184 : 		_CATCH_END
; 1185 : 		return (_Pnode);
; 1186 : 		}

  00019	c3		 ret	 0
?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@XZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Buynode
; Function compile flags: /Ogtpy
;	COMDAT ?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@XZ PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Buynode, COMDAT
; _this$ = ecx

; 1172 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  00000	6a 48		 push	 72			; 00000048H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 1173 : 		int _Linkcnt = 0;
; 1174 : 
; 1175 : 		_TRY_BEGIN
; 1176 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Pnode);

  0000a	85 c0		 test	 eax, eax
  0000c	74 02		 je	 SHORT $LN26@Buynode@2
  0000e	89 00		 mov	 DWORD PTR [eax], eax
$LN26@Buynode@2:

; 1177 : 		++_Linkcnt;
; 1178 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Pnode);

  00010	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00013	85 c9		 test	 ecx, ecx
  00015	74 02		 je	 SHORT $LN36@Buynode@2
  00017	89 01		 mov	 DWORD PTR [ecx], eax
$LN36@Buynode@2:

; 1179 : 		_CATCH_ALL
; 1180 : 		if (0 < _Linkcnt)
; 1181 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1182 : 		this->_Alnod.deallocate(_Pnode, 1);
; 1183 : 		_RERAISE;
; 1184 : 		_CATCH_END
; 1185 : 		return (_Pnode);
; 1186 : 		}

  00019	c3		 ret	 0
?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@XZ ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Buynode
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv130 = 8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 55		 jbe	 SHORT $LN30@erase

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00030	72 09		 jb	 SHORT $LN8@erase
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv130[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase
$LN8@erase:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv130[esp+12], ebp
$LN9@erase:
  0003f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00042	72 05		 jb	 SHORT $LN12@erase
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	eb 02		 jmp	 SHORT $LN13@erase
$LN12@erase:
  00049	8b d5		 mov	 edx, ebp
$LN13@erase:
  0004b	2b c7		 sub	 eax, edi
  0004d	50		 push	 eax
  0004e	8b 44 24 18	 mov	 eax, DWORD PTR tv130[esp+16]
  00052	03 c3		 add	 eax, ebx
  00054	03 c7		 add	 eax, edi
  00056	50		 push	 eax
  00057	2b cb		 sub	 ecx, ebx
  00059	51		 push	 ecx
  0005a	03 d3		 add	 edx, ebx
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00062	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00065	2b c7		 sub	 eax, edi
  00067	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0006a	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0006e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00071	72 03		 jb	 SHORT $LN26@erase
  00073	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN26@erase:
  00076	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  0007a	5d		 pop	 ebp
$LN30@erase:
  0007b	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  0007c	8b c6		 mov	 eax, esi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx

; 1275 : 		}

  00080	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv133 = 8						; size = 4
__Off$ = 8						; size = 4
tv139 = 12						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase@2

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase@2:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase@2

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase@2:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 69		 jbe	 SHORT $LN32@erase@2

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 08	 cmp	 ecx, 8
  00030	72 09		 jb	 SHORT $LN8@erase@2
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv133[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase@2
$LN8@erase@2:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv133[esp+12], ebp
$LN9@erase@2:
  0003f	83 f9 08	 cmp	 ecx, 8
  00042	72 09		 jb	 SHORT $LN12@erase@2
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	89 54 24 18	 mov	 DWORD PTR tv139[esp+12], edx
  0004b	eb 04		 jmp	 SHORT $LN13@erase@2
$LN12@erase@2:
  0004d	89 6c 24 18	 mov	 DWORD PTR tv139[esp+12], ebp
$LN13@erase@2:
  00051	8b 54 24 14	 mov	 edx, DWORD PTR tv133[esp+12]
  00055	2b c7		 sub	 eax, edi
  00057	03 c0		 add	 eax, eax
  00059	50		 push	 eax
  0005a	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0005d	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00060	2b cb		 sub	 ecx, ebx
  00062	50		 push	 eax
  00063	03 c9		 add	 ecx, ecx
  00065	51		 push	 ecx
  00066	8b 4c 24 24	 mov	 ecx, DWORD PTR tv139[esp+24]
  0006a	8d 14 59	 lea	 edx, DWORD PTR [ecx+ebx*2]
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	2b c7		 sub	 eax, edi
  00078	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0007b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0007f	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00082	72 03		 jb	 SHORT $LN28@erase@2
  00084	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN28@erase@2:
  00087	33 c9		 xor	 ecx, ecx
  00089	66 89 4c 45 00	 mov	 WORD PTR [ebp+eax*2], cx
  0008e	5d		 pop	 ebp
$LN32@erase@2:
  0008f	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 1275 : 		}

  00094	c2 08 00	 ret	 8
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfile@CipherShed@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfile> >::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfile> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfile@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfile@CipherShed@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfile> >::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfile> >, COMDAT
; _this$ = ecx

; 419  : 		{

  00000	56		 push	 esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN3@Container_@3
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
$LN3@Container_@3:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfile@CipherShed@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfile> >::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfile> >
_TEXT	ENDS
PUBLIC	?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__State$ = 16						; size = 4
?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Init, COMDAT
; _this$ = ecx

; 274  : 		_Seekhigh = 0;
; 275  : 		_Mystate = _State;

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __State$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi

; 276  : 
; 277  : 		if (_Count != 0
; 278  : 			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))

  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Count$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00013	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00016	85 ff		 test	 edi, edi
  00018	0f 84 8d 00 00
	00		 je	 $LN4@Init@3
  0001e	83 e0 06	 and	 eax, 6
  00021	3c 06		 cmp	 al, 6
  00023	0f 84 82 00 00
	00		 je	 $LN4@Init@3
  00029	53		 push	 ebx

; 279  : 			{	// finite buffer that can be read or written, set it up
; 280  : 			_Elem *_Pnew = _Al.allocate(_Count);

  0002a	6a 00		 push	 0
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00032	8b d8		 mov	 ebx, eax

; 281  : 			_Traits_helper::copy_s<_Traits>(_Pnew, _Count, _Ptr, _Count);

  00034	8b 44 24 18	 mov	 eax, DWORD PTR __Ptr$[esp+16]
  00038	03 ff		 add	 edi, edi
  0003a	57		 push	 edi
  0003b	50		 push	 eax
  0003c	57		 push	 edi
  0003d	53		 push	 ebx
  0003e	e8 00 00 00 00	 call	 _memcpy_s
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 282  : 			_Seekhigh = _Pnew + _Count;
; 283  : 
; 284  : 			if (!(_Mystate & _Noread))

  00046	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  0004a	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  0004d	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00050	75 13		 jne	 SHORT $LN21@Init@3

; 285  : 				_Mysb::setg(_Pnew, _Pnew,
; 286  : 					_Pnew + _Count);	// setup read buffer

  00052	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00055	89 19		 mov	 DWORD PTR [ecx], ebx
  00057	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0005a	89 1a		 mov	 DWORD PTR [edx], ebx
  0005c	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0005f	8b cf		 mov	 ecx, edi
  00061	d1 f9		 sar	 ecx, 1
  00063	89 0a		 mov	 DWORD PTR [edx], ecx
$LN21@Init@3:

; 287  : 			if (!(_Mystate & _Constant))

  00065	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00068	f6 c1 02	 test	 cl, 2
  0006b	75 39		 jne	 SHORT $LN27@Init@3

; 288  : 				{	// setup write buffer, and maybe read buffer
; 289  : 				_Mysb::setp(_Pnew,
; 290  : 					(_Mystate & _Atend) ? _Pnew + _Count : _Pnew,
; 291  : 					_Pnew + _Count);

  0006d	f6 c1 10	 test	 cl, 16			; 00000010H
  00070	75 02		 jne	 SHORT $LN8@Init@3
  00072	8b c3		 mov	 eax, ebx
$LN8@Init@3:
  00074	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00077	89 19		 mov	 DWORD PTR [ecx], ebx
  00079	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  0007c	2b f8		 sub	 edi, eax
  0007e	89 02		 mov	 DWORD PTR [edx], eax
  00080	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00083	03 fb		 add	 edi, ebx
  00085	d1 ff		 sar	 edi, 1
  00087	89 38		 mov	 DWORD PTR [eax], edi

; 292  : 				if (_Mysb::gptr() == 0)

  00089	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0008c	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0008f	75 15		 jne	 SHORT $LN27@Init@3

; 293  : 					_Mysb::setg(_Pnew, 0, _Pnew);

  00091	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00094	89 1a		 mov	 DWORD PTR [edx], ebx
  00096	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00099	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0009f	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  000a2	d1 fb		 sar	 ebx, 1
  000a4	89 19		 mov	 DWORD PTR [ecx], ebx
$LN27@Init@3:

; 294  : 				}
; 295  : 			_Mystate |= _Allocated;

  000a6	83 4e 40 01	 or	 DWORD PTR [esi+64], 1
  000aa	5b		 pop	 ebx
$LN4@Init@3:
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi

; 296  : 			}
; 297  : 		}

  000ad	c2 0c 00	 ret	 12			; 0000000cH
?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Init
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 217  : 			{	// construct with null node pointer

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 218  : 			}

  0000f	c3		 ret	 0
??0const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PBV12@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogtpy
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PBV12@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 234  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi

; 235  : 			_SCL_SECURE_VALIDATE(_Plist != NULL);

  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN1@const_iter
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN1@const_iter:

; 236  : 			this->_Set_container(_Plist);

  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 237  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PBV12@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@PAUSecurityTokenKeyfile@CipherShed@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@PAUSecurityTokenKeyfile@CipherShed@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@PAUSecurityTokenKeyfile@CipherShed@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

  00000	53		 push	 ebx

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN1@Vector_con
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN1@Vector_con
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN2@Vector_con
$LN1@Vector_con:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN2@Vector_con:

; 79   : 		this->_Set_container(_Pvector);

  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi

; 80   : 		_Myptr = _Ptr;

  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 81   : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@PAUSecurityTokenKeyfile@CipherShed@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@E@std@@@std@@IAE@V?$allocator@E@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<unsigned char> >::_Container_base_aux_alloc_real<std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@E@std@@@std@@IAE@V?$allocator@E@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@E@std@@@std@@IAE@V?$allocator@E@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<unsigned char> >::_Container_base_aux_alloc_real<std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 419  : 		{

  00000	56		 push	 esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN3@Container_@4
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
$LN3@Container_@4:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Container_base_aux_alloc_real@V?$allocator@E@std@@@std@@IAE@V?$allocator@E@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<unsigned char> >::_Container_base_aux_alloc_real<std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	?clear@?$list@KV?$allocator@K@std@@@std@@QAEXXZ	; std::list<unsigned long,std::allocator<unsigned long> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?clear@?$list@KV?$allocator@K@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@KV?$allocator@K@std@@@std@@QAEXXZ PROC	; std::list<unsigned long,std::allocator<unsigned long> >::clear, COMDAT
; _this$ = ecx

; 825  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 826  : 
; 827  :  #if _HAS_ITERATOR_DEBUGGING
; 828  : 		this->_Orphan_ptr(*this, 0);
; 829  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 830  : 
; 831  : 		_Nodeptr _Pnext;
; 832  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 833  : 		_Nextnode(_Myhead) = _Myhead;

  00008	89 09		 mov	 DWORD PTR [ecx], ecx

; 834  : 		_Prevnode(_Myhead) = _Myhead;

  0000a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000d	89 49 04	 mov	 DWORD PTR [ecx+4], ecx

; 835  : 		_Mysize = 0;

  00010	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 836  : 
; 837  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

  00017	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  0001a	74 17		 je	 SHORT $LN1@clear
  0001c	57		 push	 edi
  0001d	8d 49 00	 npad	 3
$LL3@clear:

; 838  : 			{	// delete an element
; 839  : 			_Pnext = _Nextnode(_Pnode);

  00020	8b 38		 mov	 edi, DWORD PTR [eax]

; 840  : 			this->_Alnod.destroy(_Pnode);
; 841  : 			this->_Alnod.deallocate(_Pnode, 1);

  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
  0002b	8b c7		 mov	 eax, edi
  0002d	3b 7e 14	 cmp	 edi, DWORD PTR [esi+20]
  00030	75 ee		 jne	 SHORT $LL3@clear
  00032	5f		 pop	 edi
$LN1@clear:
  00033	5e		 pop	 esi

; 842  : 			}
; 843  : 		}

  00034	c3		 ret	 0
?clear@?$list@KV?$allocator@K@std@@@std@@QAEXXZ ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::clear
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@0ABK@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode
; Function compile flags: /Ogtpy
;	COMDAT ?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@0ABK@Z
_TEXT	SEGMENT
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@0ABK@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode, COMDAT
; _this$ = ecx

; 1191 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  00000	6a 0c		 push	 12			; 0000000cH
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 1192 : 		int _Linkcnt = 0;
; 1193 : 
; 1194 : 		_TRY_BEGIN
; 1195 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Next);

  0000a	85 c0		 test	 eax, eax
  0000c	74 06		 je	 SHORT $LN27@Buynode@3
  0000e	8b 4c 24 04	 mov	 ecx, DWORD PTR __Next$[esp-4]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
$LN27@Buynode@3:

; 1196 : 		++_Linkcnt;
; 1197 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Prev);

  00014	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00017	85 c9		 test	 ecx, ecx
  00019	74 06		 je	 SHORT $LN37@Buynode@3
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR __Prev$[esp-4]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx
$LN37@Buynode@3:

; 1198 : 		++_Linkcnt;
; 1199 : 		this->_Alval.construct(&_Myval(_Pnode), _Val);

  00021	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  00024	85 c9		 test	 ecx, ecx
  00026	74 08		 je	 SHORT $LN47@Buynode@3
  00028	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  0002c	8b 12		 mov	 edx, DWORD PTR [edx]
  0002e	89 11		 mov	 DWORD PTR [ecx], edx
$LN47@Buynode@3:

; 1200 : 		_CATCH_ALL
; 1201 : 		if (1 < _Linkcnt)
; 1202 : 			this->_Alptr.destroy(&_Prevnode(_Pnode));
; 1203 : 		if (0 < _Linkcnt)
; 1204 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1205 : 		this->_Alnod.deallocate(_Pnode, 1);
; 1206 : 		_RERAISE;
; 1207 : 		_CATCH_END
; 1208 : 		return (_Pnode);
; 1209 : 		}

  00030	c2 0c 00	 ret	 12			; 0000000cH
?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@0ABK@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<unsigned long> >::_Container_base_aux_alloc_real<std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<unsigned long> >::_Container_base_aux_alloc_real<std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 419  : 		{

  00000	56		 push	 esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN3@Container_@5
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
$LN3@Container_@5:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Container_base_aux_alloc_real@V?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<unsigned long> >::_Container_base_aux_alloc_real<std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??0?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PBV12@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::_Const_iterator<1>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PBV12@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::_Const_iterator<1>, COMDAT
; _this$ = ecx

; 176  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi

; 177  : 			_SCL_SECURE_TRAITS_VALIDATE(_Plist != NULL);

  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN1@Const_iter
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN1@Const_iter:

; 178  : 			this->_Set_container(_Plist);

  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 179  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PBV12@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::_Const_iterator<1>
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy, COMDAT
; _this$ = ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1120 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QAE@PAKPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QAE@PAKPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QAE@PAKPBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

  00000	53		 push	 ebx

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN1@Vector_con@2
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN1@Vector_con@2
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN2@Vector_con@2
$LN1@Vector_con@2:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN2@Vector_con@2:

; 79   : 		this->_Set_container(_Pvector);

  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi

; 80   : 		_Myptr = _Ptr;

  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 81   : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QAE@PAKPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__State$ = 16						; size = 4
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init, COMDAT
; _this$ = ecx

; 274  : 		_Seekhigh = 0;
; 275  : 		_Mystate = _State;

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __State$[esp-4]
  00004	53		 push	 ebx

; 276  : 
; 277  : 		if (_Count != 0
; 278  : 			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))

  00005	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Count$[esp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00013	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00016	85 db		 test	 ebx, ebx
  00018	0f 84 81 00 00
	00		 je	 $LN4@Init@4
  0001e	83 e0 06	 and	 eax, 6
  00021	3c 06		 cmp	 al, 6
  00023	74 7a		 je	 SHORT $LN4@Init@4
  00025	57		 push	 edi

; 279  : 			{	// finite buffer that can be read or written, set it up
; 280  : 			_Elem *_Pnew = _Al.allocate(_Count);

  00026	6a 00		 push	 0
  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0002e	8b f8		 mov	 edi, eax

; 281  : 			_Traits_helper::copy_s<_Traits>(_Pnew, _Count, _Ptr, _Count);

  00030	8b 44 24 18	 mov	 eax, DWORD PTR __Ptr$[esp+16]
  00034	53		 push	 ebx
  00035	50		 push	 eax
  00036	53		 push	 ebx
  00037	57		 push	 edi
  00038	e8 00 00 00 00	 call	 _memcpy_s
  0003d	83 c4 18	 add	 esp, 24			; 00000018H

; 282  : 			_Seekhigh = _Pnew + _Count;
; 283  : 
; 284  : 			if (!(_Mystate & _Noread))

  00040	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  00044	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  00047	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  0004a	75 0f		 jne	 SHORT $LN19@Init@4

; 285  : 				_Mysb::setg(_Pnew, _Pnew,
; 286  : 					_Pnew + _Count);	// setup read buffer

  0004c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0004f	89 39		 mov	 DWORD PTR [ecx], edi
  00051	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00054	89 3a		 mov	 DWORD PTR [edx], edi
  00056	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00059	89 19		 mov	 DWORD PTR [ecx], ebx
$LN19@Init@4:

; 287  : 			if (!(_Mystate & _Constant))

  0005b	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  0005e	f6 c1 02	 test	 cl, 2
  00061	75 37		 jne	 SHORT $LN25@Init@4

; 288  : 				{	// setup write buffer, and maybe read buffer
; 289  : 				_Mysb::setp(_Pnew,
; 290  : 					(_Mystate & _Atend) ? _Pnew + _Count : _Pnew,
; 291  : 					_Pnew + _Count);

  00063	f6 c1 10	 test	 cl, 16			; 00000010H
  00066	75 02		 jne	 SHORT $LN8@Init@4
  00068	8b c7		 mov	 eax, edi
$LN8@Init@4:
  0006a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0006d	89 3a		 mov	 DWORD PTR [edx], edi
  0006f	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00072	89 01		 mov	 DWORD PTR [ecx], eax
  00074	8b d7		 mov	 edx, edi
  00076	2b d0		 sub	 edx, eax
  00078	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0007b	03 d3		 add	 edx, ebx
  0007d	89 10		 mov	 DWORD PTR [eax], edx

; 292  : 				if (_Mysb::gptr() == 0)

  0007f	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00082	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00085	75 13		 jne	 SHORT $LN25@Init@4

; 293  : 					_Mysb::setg(_Pnew, 0, _Pnew);

  00087	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0008a	89 3a		 mov	 DWORD PTR [edx], edi
  0008c	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0008f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00095	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00098	89 39		 mov	 DWORD PTR [ecx], edi
$LN25@Init@4:

; 294  : 				}
; 295  : 			_Mystate |= _Allocated;

  0009a	83 4e 40 01	 or	 DWORD PTR [esi+64], 1
  0009e	5f		 pop	 edi
$LN4@Init@4:
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx

; 296  : 			}
; 297  : 		}

  000a1	c2 0c 00	 ret	 12			; 0000000cH
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
_TEXT	ENDS
PUBLIC	??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBV_Container_base_secure@1@@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBV_Container_base_secure@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBV_Container_base_secure@1@@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 341  : 			{	// construct with pointer _Ptr

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Pstring$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 08	 mov	 ecx, DWORD PTR __Ptr$[esp]
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >

; 342  : 			}

  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	c2 08 00	 ret	 8
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBV_Container_base_secure@1@@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put, COMDAT

; 1510 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00004	55		 push	 ebp
  00005	8b 6c 24 1c	 mov	 ebp, DWORD PTR __Count$[esp]
  00009	85 ed		 test	 ebp, ebp
  0000b	76 52		 jbe	 SHORT $LN1@Put
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7c 24 20	 mov	 edi, DWORD PTR __Ptr$[esp+8]
$LL3@Put:

; 1511 : 			*_Dest = *_Ptr;

  00013	85 c9		 test	 ecx, ecx
  00015	74 3b		 je	 SHORT $LN10@Put
  00017	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0001a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001d	8a 17		 mov	 dl, BYTE PTR [edi]
  0001f	8d 71 24	 lea	 esi, DWORD PTR [ecx+36]
  00022	74 1a		 je	 SHORT $LN16@Put
  00024	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	7e 12		 jle	 SHORT $LN16@Put
  0002c	ff 08		 dec	 DWORD PTR [eax]
  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  00035	89 30		 mov	 DWORD PTR [eax], esi
  00037	88 11		 mov	 BYTE PTR [ecx], dl
  00039	0f b6 c2	 movzx	 eax, dl
  0003c	eb 0b		 jmp	 SHORT $LN17@Put
$LN16@Put:
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	0f b6 d2	 movzx	 edx, dl
  00046	52		 push	 edx
  00047	ff d0		 call	 eax
$LN17@Put:
  00049	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Dest$[esp+12]
  0004d	83 f8 ff	 cmp	 eax, -1
  00050	75 05		 jne	 SHORT $LN2@Put
$LN10@Put:
  00052	c6 44 24 18 01	 mov	 BYTE PTR __Dest$[esp+8], 1
$LN2@Put:

; 1510 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00057	4d		 dec	 ebp
  00058	47		 inc	 edi
  00059	85 ed		 test	 ebp, ebp
  0005b	77 b6		 ja	 SHORT $LL3@Put
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
$LN1@Put:

; 1512 : 		return (_Dest);

  0005f	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  00063	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  00067	89 10		 mov	 DWORD PTR [eax], edx
  00069	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0006c	5d		 pop	 ebp

; 1513 : 		}

  0006d	c3		 ret	 0
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
_TEXT	ENDS
PUBLIC	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
; Function compile flags: /Ogtpy
;	COMDAT ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ch$ = 24						; size = 1
__Count$ = 28						; size = 4
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep, COMDAT

; 1545 : 		for (; 0 < _Count; --_Count, ++_Dest)

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00004	56		 push	 esi
  00005	8b 74 24 1c	 mov	 esi, DWORD PTR __Count$[esp]
  00009	85 f6		 test	 esi, esi
  0000b	76 4d		 jbe	 SHORT $LN1@Rep
  0000d	53		 push	 ebx
  0000e	8a 5c 24 1c	 mov	 bl, BYTE PTR __Ch$[esp+4]
$LL6@Rep:

; 1546 : 			*_Dest = _Ch;

  00012	85 c9		 test	 ecx, ecx
  00014	74 39		 je	 SHORT $LN10@Rep
  00016	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00019	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001c	8d 51 24	 lea	 edx, DWORD PTR [ecx+36]
  0001f	74 1a		 je	 SHORT $LN16@Rep
  00021	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00024	83 38 00	 cmp	 DWORD PTR [eax], 0
  00027	7e 12		 jle	 SHORT $LN16@Rep
  00029	ff 08		 dec	 DWORD PTR [eax]
  0002b	8b 02		 mov	 eax, DWORD PTR [edx]
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00032	89 10		 mov	 DWORD PTR [eax], edx
  00034	88 19		 mov	 BYTE PTR [ecx], bl
  00036	0f b6 c3	 movzx	 eax, bl
  00039	eb 0b		 jmp	 SHORT $LN17@Rep
$LN16@Rep:
  0003b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00040	0f b6 d3	 movzx	 edx, bl
  00043	52		 push	 edx
  00044	ff d0		 call	 eax
$LN17@Rep:
  00046	8b 4c 24 18	 mov	 ecx, DWORD PTR __Dest$[esp+8]
  0004a	83 f8 ff	 cmp	 eax, -1
  0004d	75 05		 jne	 SHORT $LN2@Rep
$LN10@Rep:
  0004f	c6 44 24 14 01	 mov	 BYTE PTR __Dest$[esp+4], 1
$LN2@Rep:

; 1545 : 		for (; 0 < _Count; --_Count, ++_Dest)

  00054	83 ee 01	 sub	 esi, 1
  00057	75 b9		 jne	 SHORT $LL6@Rep
  00059	5b		 pop	 ebx
$LN1@Rep:

; 1547 : 		return (_Dest);

  0005a	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  0005e	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  00062	89 10		 mov	 DWORD PTR [eax], edx
  00064	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00067	5e		 pop	 esi

; 1548 : 		}

  00068	c3		 ret	 0
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
_TEXT	ENDS
PUBLIC	?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put
; Function compile flags: /Ogtpy
;	COMDAT ?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put, COMDAT

; 1510 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00004	55		 push	 ebp
  00005	8b 6c 24 1c	 mov	 ebp, DWORD PTR __Count$[esp]
  00009	85 ed		 test	 ebp, ebp
  0000b	76 5b		 jbe	 SHORT $LN1@Put@2
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7c 24 20	 mov	 edi, DWORD PTR __Ptr$[esp+8]
$LL3@Put@2:

; 1511 : 			*_Dest = *_Ptr;

  00013	85 c9		 test	 ecx, ecx
  00015	74 42		 je	 SHORT $LN10@Put@2
  00017	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0001a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001d	0f b7 17	 movzx	 edx, WORD PTR [edi]
  00020	8d 71 24	 lea	 esi, DWORD PTR [ecx+36]
  00023	74 1b		 je	 SHORT $LN16@Put@2
  00025	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00028	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002b	7e 13		 jle	 SHORT $LN16@Put@2
  0002d	ff 08		 dec	 DWORD PTR [eax]
  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	8d 71 02	 lea	 esi, DWORD PTR [ecx+2]
  00036	89 30		 mov	 DWORD PTR [eax], esi
  00038	66 89 11	 mov	 WORD PTR [ecx], dx
  0003b	0f b7 c2	 movzx	 eax, dx
  0003e	eb 0b		 jmp	 SHORT $LN17@Put@2
$LN16@Put@2:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]
  00042	52		 push	 edx
  00043	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00046	ff d2		 call	 edx
  00048	0f b7 c0	 movzx	 eax, ax
$LN17@Put@2:
  0004b	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00050	66 3b c8	 cmp	 cx, ax
  00053	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Dest$[esp+12]
  00057	75 05		 jne	 SHORT $LN2@Put@2
$LN10@Put@2:
  00059	c6 44 24 18 01	 mov	 BYTE PTR __Dest$[esp+8], 1
$LN2@Put@2:

; 1510 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  0005e	4d		 dec	 ebp
  0005f	83 c7 02	 add	 edi, 2
  00062	85 ed		 test	 ebp, ebp
  00064	77 ad		 ja	 SHORT $LL3@Put@2
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
$LN1@Put@2:

; 1512 : 		return (_Dest);

  00068	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  0006c	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  00070	89 10		 mov	 DWORD PTR [eax], edx
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00075	5d		 pop	 ebp

; 1513 : 		}

  00076	c3		 ret	 0
?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put
_TEXT	ENDS
PUBLIC	?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
; Function compile flags: /Ogtpy
;	COMDAT ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ch$ = 24						; size = 2
__Count$ = 28						; size = 4
?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep, COMDAT

; 1545 : 		for (; 0 < _Count; --_Count, ++_Dest)

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00004	57		 push	 edi
  00005	8b 7c 24 1c	 mov	 edi, DWORD PTR __Count$[esp]
  00009	85 ff		 test	 edi, edi
  0000b	76 53		 jbe	 SHORT $LN1@Rep@2
  0000d	56		 push	 esi
  0000e	8b 74 24 1c	 mov	 esi, DWORD PTR __Ch$[esp+4]
$LL6@Rep@2:

; 1546 : 			*_Dest = _Ch;

  00012	85 c9		 test	 ecx, ecx
  00014	74 3f		 je	 SHORT $LN10@Rep@2
  00016	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00019	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001c	8d 51 24	 lea	 edx, DWORD PTR [ecx+36]
  0001f	74 1b		 je	 SHORT $LN16@Rep@2
  00021	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00024	83 38 00	 cmp	 DWORD PTR [eax], 0
  00027	7e 13		 jle	 SHORT $LN16@Rep@2
  00029	ff 08		 dec	 DWORD PTR [eax]
  0002b	8b 02		 mov	 eax, DWORD PTR [edx]
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  00032	89 10		 mov	 DWORD PTR [eax], edx
  00034	66 89 31	 mov	 WORD PTR [ecx], si
  00037	0f b7 c6	 movzx	 eax, si
  0003a	eb 0b		 jmp	 SHORT $LN17@Rep@2
$LN16@Rep@2:
  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00041	56		 push	 esi
  00042	ff d2		 call	 edx
  00044	0f b7 c0	 movzx	 eax, ax
$LN17@Rep@2:
  00047	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0004c	66 3b c8	 cmp	 cx, ax
  0004f	8b 4c 24 18	 mov	 ecx, DWORD PTR __Dest$[esp+8]
  00053	75 05		 jne	 SHORT $LN2@Rep@2
$LN10@Rep@2:
  00055	c6 44 24 14 01	 mov	 BYTE PTR __Dest$[esp+4], 1
$LN2@Rep@2:

; 1545 : 		for (; 0 < _Count; --_Count, ++_Dest)

  0005a	83 ef 01	 sub	 edi, 1
  0005d	75 b3		 jne	 SHORT $LL6@Rep@2
  0005f	5e		 pop	 esi
$LN1@Rep@2:

; 1547 : 		return (_Dest);

  00060	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  00064	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  00068	89 10		 mov	 DWORD PTR [eax], edx
  0006a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0006d	5f		 pop	 edi

; 1548 : 		}

  0006e	c3		 ret	 0
?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@PAUSecurityTokenKeyfile@CipherShed@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Vector_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@PAUSecurityTokenKeyfile@CipherShed@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@PAUSecurityTokenKeyfile@CipherShed@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Vector_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

  00000	53		 push	 ebx
  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN3@Vector_ite
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN3@Vector_ite
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN4@Vector_ite
$LN3@Vector_ite:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN4@Vector_ite:
  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi
  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 328  : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@PAUSecurityTokenKeyfile@CipherShed@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Vector_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator+
; Function compile flags: /Ogtpy
;	COMDAT ??H?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

  00000	56		 push	 esi

; 381  : 		_Myt _Tmp = *this;

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]
  00003	57		 push	 edi
  00004	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]

; 382  : 		return (_Tmp += _Off);

  00007	85 f6		 test	 esi, esi
  00009	75 1d		 jne	 SHORT $LN24@operator@44
  0000b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00010	33 c0		 xor	 eax, eax
$LN15@operator@44:
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR __Off$[esp+4]
  00016	c1 e1 07	 shl	 ecx, 7
  00019	03 f9		 add	 edi, ecx
  0001b	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
  0001e	77 13		 ja	 SHORT $LN5@operator@44
  00020	85 f6		 test	 esi, esi
  00022	74 08		 je	 SHORT $LN20@operator@44
  00024	8b 06		 mov	 eax, DWORD PTR [esi]
  00026	eb 06		 jmp	 SHORT $LN21@operator@44
$LN24@operator@44:
  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	eb e6		 jmp	 SHORT $LN15@operator@44
$LN20@operator@44:
  0002c	33 c0		 xor	 eax, eax
$LN21@operator@44:
  0002e	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  00031	73 05		 jae	 SHORT $LN6@operator@44
$LN5@operator@44:
  00033	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@operator@44:
  00038	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  0003c	89 78 04	 mov	 DWORD PTR [eax+4], edi
  0003f	5f		 pop	 edi
  00040	89 30		 mov	 DWORD PTR [eax], esi
  00042	5e		 pop	 esi

; 383  : 		}

  00043	c2 08 00	 ret	 8
??H?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator+
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@EV?$allocator@E@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<unsigned char,std::allocator<unsigned char> >::operator+
; Function compile flags: /Ogtpy
;	COMDAT ??H?$_Vector_iterator@EV?$allocator@E@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@EV?$allocator@E@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<unsigned char,std::allocator<unsigned char> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

  00000	56		 push	 esi

; 381  : 		_Myt _Tmp = *this;

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]
  00003	57		 push	 edi
  00004	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]

; 382  : 		return (_Tmp += _Off);

  00007	85 f6		 test	 esi, esi
  00009	75 1a		 jne	 SHORT $LN24@operator@45
  0000b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00010	33 c0		 xor	 eax, eax
$LN15@operator@45:
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR __Off$[esp+4]
  00016	03 f9		 add	 edi, ecx
  00018	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
  0001b	77 13		 ja	 SHORT $LN5@operator@45
  0001d	85 f6		 test	 esi, esi
  0001f	74 08		 je	 SHORT $LN20@operator@45
  00021	8b 06		 mov	 eax, DWORD PTR [esi]
  00023	eb 06		 jmp	 SHORT $LN21@operator@45
$LN24@operator@45:
  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	eb e9		 jmp	 SHORT $LN15@operator@45
$LN20@operator@45:
  00029	33 c0		 xor	 eax, eax
$LN21@operator@45:
  0002b	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  0002e	73 05		 jae	 SHORT $LN6@operator@45
$LN5@operator@45:
  00030	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@operator@45:
  00035	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  00039	89 78 04	 mov	 DWORD PTR [eax+4], edi
  0003c	5f		 pop	 edi
  0003d	89 30		 mov	 DWORD PTR [eax], esi
  0003f	5e		 pop	 esi

; 383  : 		}

  00040	c2 08 00	 ret	 8
??H?$_Vector_iterator@EV?$allocator@E@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<unsigned char,std::allocator<unsigned char> >::operator+
_TEXT	ENDS
PUBLIC	??0?$_Iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PBV12@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Iterator<1>::_Iterator<1>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_Iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PBV12@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Iterator<1>::_Iterator<1>, COMDAT
; _this$ = ecx

; 361  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN3@Iterator
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Iterator:
  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 362  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$_Iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PBV12@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Iterator<1>::_Iterator<1>
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@KV?$allocator@K@std@@@std@@QAE@PAKPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<unsigned long,std::allocator<unsigned long> >::_Vector_iterator<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@KV?$allocator@K@std@@@std@@QAE@PAKPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@KV?$allocator@K@std@@@std@@QAE@PAKPBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<unsigned long,std::allocator<unsigned long> >::_Vector_iterator<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

  00000	53		 push	 ebx
  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN3@Vector_ite@2
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN3@Vector_ite@2
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN4@Vector_ite@2
$LN3@Vector_ite@2:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN4@Vector_ite@2:
  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi
  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 328  : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_iterator@KV?$allocator@K@std@@@std@@QAE@PAKPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<unsigned long,std::allocator<unsigned long> >::_Vector_iterator<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@KV?$allocator@K@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<unsigned long,std::allocator<unsigned long> >::operator+
; Function compile flags: /Ogtpy
;	COMDAT ??H?$_Vector_iterator@KV?$allocator@K@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@KV?$allocator@K@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<unsigned long,std::allocator<unsigned long> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

  00000	56		 push	 esi

; 381  : 		_Myt _Tmp = *this;

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]
  00003	57		 push	 edi
  00004	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]

; 382  : 		return (_Tmp += _Off);

  00007	85 f6		 test	 esi, esi
  00009	75 1b		 jne	 SHORT $LN24@operator@46
  0000b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00010	33 c0		 xor	 eax, eax
$LN15@operator@46:
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR __Off$[esp+4]
  00016	8d 3c 8f	 lea	 edi, DWORD PTR [edi+ecx*4]
  00019	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
  0001c	77 13		 ja	 SHORT $LN5@operator@46
  0001e	85 f6		 test	 esi, esi
  00020	74 08		 je	 SHORT $LN20@operator@46
  00022	8b 06		 mov	 eax, DWORD PTR [esi]
  00024	eb 06		 jmp	 SHORT $LN21@operator@46
$LN24@operator@46:
  00026	8b 06		 mov	 eax, DWORD PTR [esi]
  00028	eb e8		 jmp	 SHORT $LN15@operator@46
$LN20@operator@46:
  0002a	33 c0		 xor	 eax, eax
$LN21@operator@46:
  0002c	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  0002f	73 05		 jae	 SHORT $LN6@operator@46
$LN5@operator@46:
  00031	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@operator@46:
  00036	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  0003a	89 78 04	 mov	 DWORD PTR [eax+4], edi
  0003d	5f		 pop	 edi
  0003e	89 30		 mov	 DWORD PTR [eax], esi
  00040	5e		 pop	 esi

; 383  : 		}

  00041	c2 08 00	 ret	 8
??H?$_Vector_iterator@KV?$allocator@K@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<unsigned long,std::allocator<unsigned long> >::operator+
_TEXT	ENDS
PUBLIC	??0?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PBV12@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::_Const_iterator<1>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PBV12@@Z PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::_Const_iterator<1>, COMDAT
; _this$ = ecx

; 176  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi

; 177  : 			_SCL_SECURE_TRAITS_VALIDATE(_Plist != NULL);

  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN1@Const_iter@2
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN1@Const_iter@2:

; 178  : 			this->_Set_container(_Plist);

  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 179  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PBV12@@Z ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::_Const_iterator<1>
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 0f	 or	 esi, 15			; 0000000fH

; 2085 : 		if (max_size() < _Newres)

  00038	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN6@Copy

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  0003f	eb 22		 jmp	 SHORT $LN4@Copy
$LN6@Copy:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00041	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e6		 mul	 esi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b d1		 cmp	 edx, ecx
  00053	73 0e		 jae	 SHORT $LN4@Copy
  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005a	2b c1		 sub	 eax, ecx
  0005c	3b d8		 cmp	 ebx, eax
  0005e	77 03		 ja	 SHORT $LN4@Copy

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00060	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00063	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00066	6a 00		 push	 0
  00068	51		 push	 ecx
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00070	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00075	83 c4 08	 add	 esp, 8
  00078	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0007b	eb 28		 jmp	 SHORT $LN16@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007d	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00080	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00083	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00086	40		 inc	 eax
  00087	6a 00		 push	 0
  00089	50		 push	 eax
  0008a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0008e	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00093	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00096	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  00099	b8 00 00 00 00	 mov	 eax, $LN106@Copy
  0009e	c3		 ret	 0
$LN106@Copy:
  0009f	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a2	8b 75 e8	 mov	 esi, DWORD PTR __Newres$[ebp]
$LN16@Copy:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000a5	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000a8	85 db		 test	 ebx, ebx
  000aa	76 20		 jbe	 SHORT $LN71@Copy

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000ac	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000b0	72 05		 jb	 SHORT $LN63@Copy
  000b2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b5	eb 03		 jmp	 SHORT $LN64@Copy
$LN63@Copy:
  000b7	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN64@Copy:
  000ba	53		 push	 ebx
  000bb	50		 push	 eax
  000bc	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000bf	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _memcpy_s
  000c9	83 c4 10	 add	 esp, 16			; 00000010H
$LN71@Copy:

; 2106 : 		_Tidy(true);

  000cc	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000d0	72 0c		 jb	 SHORT $LN87@Copy
  000d2	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000db	83 c4 04	 add	 esp, 4
$LN87@Copy:

; 2107 : 		_Bx._Ptr = _Ptr;

  000de	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000e1	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000e4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e7	89 08		 mov	 DWORD PTR [eax], ecx

; 2108 : 		_Myres = _Newres;

  000e9	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000ec	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  000ef	83 fe 10	 cmp	 esi, 16			; 00000010H
  000f2	72 02		 jb	 SHORT $LN101@Copy
  000f4	8b c1		 mov	 eax, ecx
$LN101@Copy:
  000f6	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 2110 : 		}

  000fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00104	59		 pop	 ecx
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010e	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00111	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00115	72 0c		 jb	 SHORT $LN51@Copy
  00117	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00120	83 c4 04	 add	 esp, 4
$LN51@Copy:

; 2100 : 			_RERAISE;

  00123	6a 00		 push	 0
  00125	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0012c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00133	6a 00		 push	 0
  00135	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN109@Copy:
  0013e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 07	 or	 esi, 7

; 2085 : 		if (max_size() < _Newres)

  00038	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH
  0003e	76 04		 jbe	 SHORT $LN6@Copy@2

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  00040	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  00042	eb 22		 jmp	 SHORT $LN4@Copy@2
$LN6@Copy@2:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00044	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00047	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0004c	f7 e6		 mul	 esi
  0004e	8b cb		 mov	 ecx, ebx
  00050	d1 e9		 shr	 ecx, 1
  00052	d1 ea		 shr	 edx, 1
  00054	3b d1		 cmp	 edx, ecx
  00056	73 0e		 jae	 SHORT $LN4@Copy@2
  00058	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0005d	2b c1		 sub	 eax, ecx
  0005f	3b d8		 cmp	 ebx, eax
  00061	77 03		 ja	 SHORT $LN4@Copy@2

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00063	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy@2:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00066	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00069	6a 00		 push	 0
  0006b	51		 push	 ecx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00078	83 c4 08	 add	 esp, 8
  0007b	8b d8		 mov	 ebx, eax
  0007d	eb 2b		 jmp	 SHORT $LN16@Copy@2
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007f	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00082	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00085	89 45 08	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00088	40		 inc	 eax
  00089	6a 00		 push	 0
  0008b	50		 push	 eax
  0008c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00090	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00095	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax
  00098	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  0009b	b8 00 00 00 00	 mov	 eax, $LN112@Copy@2
  000a0	c3		 ret	 0
$LN112@Copy@2:
  000a1	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a4	8b 75 08	 mov	 esi, DWORD PTR __Newres$[ebp]
  000a7	8b 5d e8	 mov	 ebx, DWORD PTR __Ptr$[ebp]
$LN16@Copy@2:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000ad	85 c9		 test	 ecx, ecx
  000af	76 24		 jbe	 SHORT $LN75@Copy@2

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000b1	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000b5	72 05		 jb	 SHORT $LN65@Copy@2
  000b7	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000ba	eb 03		 jmp	 SHORT $LN66@Copy@2
$LN65@Copy@2:
  000bc	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN66@Copy@2:
  000bf	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	8d 44 36 02	 lea	 eax, DWORD PTR [esi+esi+2]
  000c8	50		 push	 eax
  000c9	53		 push	 ebx
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000d2	83 c4 10	 add	 esp, 16			; 00000010H
$LN75@Copy@2:

; 2106 : 		_Tidy(true);

  000d5	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000d9	72 0f		 jb	 SHORT $LN93@Copy@2
  000db	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000de	51		 push	 ecx
  000df	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000e7	83 c4 04	 add	 esp, 4
$LN93@Copy@2:
  000ea	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000ed	33 d2		 xor	 edx, edx

; 2107 : 		_Bx._Ptr = _Ptr;

  000ef	89 18		 mov	 DWORD PTR [eax], ebx

; 2108 : 		_Myres = _Newres;

  000f1	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000f4	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  000f7	83 fe 08	 cmp	 esi, 8
  000fa	72 02		 jb	 SHORT $LN107@Copy@2
  000fc	8b c3		 mov	 eax, ebx
$LN107@Copy@2:
  000fe	33 d2		 xor	 edx, edx
  00100	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 2110 : 		}

  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010e	59		 pop	 ecx
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  00118	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0011b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0011f	72 0c		 jb	 SHORT $LN53@Copy@2
  00121	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012a	83 c4 04	 add	 esp, 4
$LN53@Copy@2:
  0012d	33 c9		 xor	 ecx, ecx

; 2100 : 			_RERAISE;

  0012f	51		 push	 ecx
  00130	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00137	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0013e	51		 push	 ecx
  0013f	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00143	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN115@Copy@2:
  00148	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::clear, COMDAT
; _this$ = ecx

; 965  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 966  : 
; 967  :  #if _HAS_ITERATOR_DEBUGGING
; 968  : 		this->_Orphan_ptr(*this, 0);
; 969  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 970  : 
; 971  : 		_Erase(_Root());

  00003	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00006	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00009	51		 push	 ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Erase

; 972  : 		_Root() = _Myhead, _Mysize = 0;

  00011	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00014	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 973  : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

  00017	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0001a	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 76 18	 mov	 esi, DWORD PTR [esi+24]
  00026	89 76 08	 mov	 DWORD PTR [esi+8], esi
  00029	5e		 pop	 esi

; 974  : 		}

  0002a	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::clear
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Buynode
; Function compile flags: /Ogtpy
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1384 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00000	6a 1c		 push	 28			; 0000001cH
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 1385 : 		int _Linkcnt = 0;
; 1386 : 
; 1387 : 		_TRY_BEGIN
; 1388 : 		this->_Alptr.construct(&_Left(_Wherenode), 0);

  0000a	85 c0		 test	 eax, eax
  0000c	74 06		 je	 SHORT $LN27@Buynode@4
  0000e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN27@Buynode@4:

; 1389 : 		++_Linkcnt;
; 1390 : 		this->_Alptr.construct(&_Parent(_Wherenode), 0);

  00014	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00017	85 c9		 test	 ecx, ecx
  00019	74 06		 je	 SHORT $LN37@Buynode@4
  0001b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN37@Buynode@4:

; 1391 : 		++_Linkcnt;
; 1392 : 		this->_Alptr.construct(&_Right(_Wherenode), 0);

  00021	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $LN47@Buynode@4
  00028	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN47@Buynode@4:

; 1393 : 		_CATCH_ALL
; 1394 : 		if (1 < _Linkcnt)
; 1395 : 			this->_Alptr.destroy(&_Parent(_Wherenode));
; 1396 : 		if (0 < _Linkcnt)
; 1397 : 			this->_Alptr.destroy(&_Left(_Wherenode));
; 1398 : 		this->_Alnod.deallocate(_Wherenode, 1);
; 1399 : 		_RERAISE;
; 1400 : 		_CATCH_END
; 1401 : 		_Color(_Wherenode) = _Black;

  0002e	c6 40 18 01	 mov	 BYTE PTR [eax+24], 1

; 1402 : 		_Isnil(_Wherenode) = false;

  00032	c6 40 19 00	 mov	 BYTE PTR [eax+25], 0

; 1403 : 		return (_Wherenode);
; 1404 : 		}

  00036	c3		 ret	 0
?_Buynode@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@D@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Buynode
; Function compile flags: /Ogtpy
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@D@Z
_TEXT	SEGMENT
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
?_Buynode@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@D@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1409 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00000	6a 1c		 push	 28			; 0000001cH
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 1410 : 		_TRY_BEGIN
; 1411 : 		new (_Wherenode) _Node(_Larg, _Parg, _Rarg, _Val, _Carg);

  0000a	85 c0		 test	 eax, eax
  0000c	74 34		 je	 SHORT $LN4@Buynode@5
  0000e	8b 4c 24 04	 mov	 ecx, DWORD PTR __Larg$[esp-4]
  00012	8b 54 24 08	 mov	 edx, DWORD PTR __Parg$[esp-4]
  00016	89 08		 mov	 DWORD PTR [eax], ecx
  00018	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Rarg$[esp-4]
  0001c	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001f	8b 4c 24 10	 mov	 ecx, DWORD PTR __Val$[esp-4]
  00023	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00026	8b 11		 mov	 edx, DWORD PTR [ecx]
  00028	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0002b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002e	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00031	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00034	8a 54 24 14	 mov	 dl, BYTE PTR __Carg$[esp-4]
  00038	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0003b	88 50 18	 mov	 BYTE PTR [eax+24], dl
  0003e	c6 40 19 00	 mov	 BYTE PTR [eax+25], 0
$LN4@Buynode@5:

; 1412 : 		_CATCH_ALL
; 1413 : 		this->_Alnod.deallocate(_Wherenode, 1);
; 1414 : 		_RERAISE;
; 1415 : 		_CATCH_END
; 1416 : 		return (_Wherenode);
; 1417 : 		}

  00042	c2 14 00	 ret	 20			; 00000014H
?_Buynode@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@D@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	??0?$_List_nod@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ; std::_List_nod<unsigned long,std::allocator<unsigned long> >::_List_nod<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_List_nod@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_nod@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z PROC ; std::_List_nod<unsigned long,std::allocator<unsigned long> >::_List_nod<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@List_nod
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 48   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 47   : 		{	// construct allocator from _Al

$LN8@List_nod:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 48   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_nod@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ENDP ; std::_List_nod<unsigned long,std::allocator<unsigned long> >::_List_nod<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??0?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z ; std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z PROC ; std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@List_nod@2
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 48   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 47   : 		{	// construct allocator from _Al

$LN8@List_nod@2:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 48   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z ENDP ; std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
_TEXT	ENDS
PUBLIC	?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc, COMDAT

; 1518 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00004	55		 push	 ebp
  00005	8b 6c 24 1c	 mov	 ebp, DWORD PTR __Count$[esp]
  00009	85 ed		 test	 ebp, ebp
  0000b	76 52		 jbe	 SHORT $LN1@Putc
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7c 24 20	 mov	 edi, DWORD PTR __Ptr$[esp+8]
$LL3@Putc:

; 1519 : 			*_Dest = _MAKLOCCHR(_Elem, *_Ptr, _Cvt);

  00013	85 c9		 test	 ecx, ecx
  00015	74 3b		 je	 SHORT $LN12@Putc
  00017	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0001a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001d	8a 17		 mov	 dl, BYTE PTR [edi]
  0001f	8d 71 24	 lea	 esi, DWORD PTR [ecx+36]
  00022	74 1a		 je	 SHORT $LN18@Putc
  00024	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	7e 12		 jle	 SHORT $LN18@Putc
  0002c	ff 08		 dec	 DWORD PTR [eax]
  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  00035	89 30		 mov	 DWORD PTR [eax], esi
  00037	88 11		 mov	 BYTE PTR [ecx], dl
  00039	0f b6 c2	 movzx	 eax, dl
  0003c	eb 0b		 jmp	 SHORT $LN19@Putc
$LN18@Putc:
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	0f b6 d2	 movzx	 edx, dl
  00046	52		 push	 edx
  00047	ff d0		 call	 eax
$LN19@Putc:
  00049	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Dest$[esp+12]
  0004d	83 f8 ff	 cmp	 eax, -1
  00050	75 05		 jne	 SHORT $LN2@Putc
$LN12@Putc:
  00052	c6 44 24 18 01	 mov	 BYTE PTR __Dest$[esp+8], 1
$LN2@Putc:

; 1518 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00057	4d		 dec	 ebp
  00058	47		 inc	 edi
  00059	85 ed		 test	 ebp, ebp
  0005b	77 b6		 ja	 SHORT $LL3@Putc
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
$LN1@Putc:

; 1520 : 		return (_Dest);

  0005f	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  00063	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  00067	89 10		 mov	 DWORD PTR [eax], edx
  00069	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0006c	5d		 pop	 ebp

; 1521 : 		}

  0006d	c3		 ret	 0
?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
_TEXT	ENDS
PUBLIC	?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
; Function compile flags: /Ogtpy
;	COMDAT ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z
_TEXT	SEGMENT
$T146385 = -16						; size = 8
$T146386 = -8						; size = 8
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
__Kseparator$ = 32					; size = 1
?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped, COMDAT

; 1525 : 		{	// put char sequence [_Ptr, _Ptr + _Count) to _Dest with commas

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx
  0000a	8b 5d 1c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7d 18	 mov	 edi, DWORD PTR __Ptr$[ebp]
$LL5@Putgrouped:

; 1526 : 		for (; ; ++_Ptr, --_Count)
; 1527 : 			{	// put field with thousands separators for NULs
; 1528 : 			const char *_Pend =
; 1529 : 				(const char *)::memchr(_Ptr, '\0', _Count);

  00012	53		 push	 ebx
  00013	6a 00		 push	 0
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 _memchr
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1530 : 			size_t _Groupsize = _Pend != 0 ? _Pend - _Ptr : _Count;

  0001e	85 c0		 test	 eax, eax
  00020	74 06		 je	 SHORT $LN8@Putgrouped
  00022	2b c7		 sub	 eax, edi
  00024	8b f0		 mov	 esi, eax
  00026	eb 02		 jmp	 SHORT $LN9@Putgrouped
$LN8@Putgrouped:
  00028	8b f3		 mov	 esi, ebx
$LN9@Putgrouped:

; 1531 : 
; 1532 : 			_Dest = _Putc(_Dest, _Ptr, _Groupsize);

  0002a	8b 45 14	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  0002d	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00036	51		 push	 ecx
  00037	8d 54 24 20	 lea	 edx, DWORD PTR $T146385[esp+48]
  0003b	52		 push	 edx
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00047	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0004a	83 c4 18	 add	 esp, 24			; 00000018H

; 1533 : 			_Ptr += _Groupsize, _Count -= _Groupsize;

  0004d	03 fe		 add	 edi, esi
  0004f	2b de		 sub	 ebx, esi
  00051	89 55 14	 mov	 DWORD PTR __Dest$[ebp+4], edx

; 1534 : 			if (_Count == 0)

  00054	74 31		 je	 SHORT $LN12@Putgrouped

; 1535 : 				break;
; 1536 : 			if (_Kseparator != (_Elem)0)

  00056	8b 4d 20	 mov	 ecx, DWORD PTR __Kseparator$[ebp]
  00059	84 c9		 test	 cl, cl
  0005b	74 26		 je	 SHORT $LN4@Putgrouped

; 1537 : 				_Dest = _Rep(_Dest, _Kseparator, 1);

  0005d	8b 10		 mov	 edx, DWORD PTR [eax]
  0005f	6a 01		 push	 1
  00061	51		 push	 ecx
  00062	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00065	51		 push	 ecx
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	52		 push	 edx
  0006a	8d 44 24 28	 lea	 eax, DWORD PTR $T146386[esp+48]
  0006e	50		 push	 eax
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00075	8b 10		 mov	 edx, DWORD PTR [eax]
  00077	89 55 10	 mov	 DWORD PTR __Dest$[ebp], edx
  0007a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007d	83 c4 18	 add	 esp, 24			; 00000018H
  00080	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
$LN4@Putgrouped:
  00083	47		 inc	 edi
  00084	4b		 dec	 ebx
  00085	eb 8b		 jmp	 SHORT $LL5@Putgrouped
$LN12@Putgrouped:

; 1538 : 			}
; 1539 : 		return (_Dest);

  00087	8b 10		 mov	 edx, DWORD PTR [eax]
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0008c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1540 : 		}

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00094	89 11		 mov	 DWORD PTR [ecx], edx
  00096	8b c1		 mov	 eax, ecx
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
_TEXT	ENDS
PUBLIC	?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc
; Function compile flags: /Ogtpy
;	COMDAT ?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
$T146400 = -16						; size = 1
__Wc$146397 = -12					; size = 2
tv163 = -8						; size = 4
__Mbst1$146398 = -4					; size = 4
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc, COMDAT

; 1517 : 		{	// put char sequence [_Ptr, _Ptr + _Count) to _Dest

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	55		 push	 ebp

; 1518 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00004	33 ed		 xor	 ebp, ebp
  00006	39 6c 24 2c	 cmp	 DWORD PTR __Count$[esp+16], ebp
  0000a	0f 86 b8 00 00
	00		 jbe	 $LN37@Putc@2
  00010	8b 44 24 18	 mov	 eax, DWORD PTR _this$[esp+16]
  00014	53		 push	 ebx
  00015	56		 push	 esi

; 1519 : 			*_Dest = _MAKLOCCHR(_Elem, *_Ptr, _Cvt);

  00016	83 c0 08	 add	 eax, 8
  00019	57		 push	 edi
  0001a	8b 7c 24 34	 mov	 edi, DWORD PTR __Ptr$[esp+28]
  0001e	89 44 24 18	 mov	 DWORD PTR tv163[esp+32], eax
$LL38@Putc@2:
  00022	8b 54 24 18	 mov	 edx, DWORD PTR tv163[esp+32]
  00026	8a 0f		 mov	 cl, BYTE PTR [edi]
  00028	52		 push	 edx
  00029	8d 44 24 20	 lea	 eax, DWORD PTR __Mbst1$146398[esp+36]
  0002d	50		 push	 eax
  0002e	88 4c 24 18	 mov	 BYTE PTR $T146400[esp+40], cl
  00032	6a 01		 push	 1
  00034	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T146400[esp+44]
  00038	51		 push	 ecx
  00039	8d 54 24 24	 lea	 edx, DWORD PTR __Wc$146397[esp+48]
  0003d	52		 push	 edx
  0003e	89 6c 24 28	 mov	 DWORD PTR __Wc$146397[esp+52], ebp
  00042	89 6c 24 30	 mov	 DWORD PTR __Mbst1$146398[esp+52], ebp
  00046	e8 00 00 00 00	 call	 __Mbrtowc
  0004b	8b 4c 24 44	 mov	 ecx, DWORD PTR __Dest$[esp+52]
  0004f	83 c4 14	 add	 esp, 20			; 00000014H
  00052	3b cd		 cmp	 ecx, ebp
  00054	74 46		 je	 SHORT $LN12@Putc@2
  00056	8b 59 24	 mov	 ebx, DWORD PTR [ecx+36]
  00059	8b 74 24 14	 mov	 esi, DWORD PTR __Wc$146397[esp+32]
  0005d	8d 41 24	 lea	 eax, DWORD PTR [ecx+36]
  00060	0f b7 d6	 movzx	 edx, si
  00063	39 2b		 cmp	 DWORD PTR [ebx], ebp
  00065	74 1c		 je	 SHORT $LN18@Putc@2
  00067	8b 59 34	 mov	 ebx, DWORD PTR [ecx+52]
  0006a	39 2b		 cmp	 DWORD PTR [ebx], ebp
  0006c	7e 15		 jle	 SHORT $LN18@Putc@2
  0006e	8b cb		 mov	 ecx, ebx
  00070	ff 09		 dec	 DWORD PTR [ecx]
  00072	8b 00		 mov	 eax, DWORD PTR [eax]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	8d 71 02	 lea	 esi, DWORD PTR [ecx+2]
  00079	89 30		 mov	 DWORD PTR [eax], esi
  0007b	66 89 11	 mov	 WORD PTR [ecx], dx
  0007e	0f b7 c2	 movzx	 eax, dx
  00081	eb 0b		 jmp	 SHORT $LN19@Putc@2
$LN18@Putc@2:
  00083	8b 01		 mov	 eax, DWORD PTR [ecx]
  00085	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00088	56		 push	 esi
  00089	ff d2		 call	 edx
  0008b	0f b7 c0	 movzx	 eax, ax
$LN19@Putc@2:
  0008e	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00093	66 3b c8	 cmp	 cx, ax
  00096	8b 4c 24 30	 mov	 ecx, DWORD PTR __Dest$[esp+32]
  0009a	75 05		 jne	 SHORT $LN2@Putc@2
$LN12@Putc@2:
  0009c	c6 44 24 2c 01	 mov	 BYTE PTR __Dest$[esp+28], 1
$LN2@Putc@2:

; 1518 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  000a1	8b 44 24 38	 mov	 eax, DWORD PTR __Count$[esp+28]
  000a5	48		 dec	 eax
  000a6	47		 inc	 edi
  000a7	89 44 24 38	 mov	 DWORD PTR __Count$[esp+28], eax
  000ab	3b c5		 cmp	 eax, ebp
  000ad	0f 87 6f ff ff
	ff		 ja	 $LL38@Putc@2

; 1520 : 		return (_Dest);

  000b3	8b 44 24 28	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+28]
  000b7	8b 54 24 2c	 mov	 edx, DWORD PTR __Dest$[esp+28]
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	89 10		 mov	 DWORD PTR [eax], edx
  000c0	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000c3	5d		 pop	 ebp

; 1521 : 		}

  000c4	83 c4 10	 add	 esp, 16			; 00000010H
  000c7	c3		 ret	 0
$LN37@Putc@2:

; 1520 : 		return (_Dest);

  000c8	8b 44 24 1c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  000cc	8b 4c 24 24	 mov	 ecx, DWORD PTR __Dest$[esp+20]
  000d0	8b 54 24 20	 mov	 edx, DWORD PTR __Dest$[esp+16]
  000d4	89 10		 mov	 DWORD PTR [eax], edx
  000d6	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000d9	5d		 pop	 ebp

; 1521 : 		}

  000da	83 c4 10	 add	 esp, 16			; 00000010H
  000dd	c3		 ret	 0
?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc
_TEXT	ENDS
PUBLIC	?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped
; Function compile flags: /Ogtpy
;	COMDAT ?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z
_TEXT	SEGMENT
$T146487 = -16						; size = 8
$T146488 = -8						; size = 8
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
__Kseparator$ = 32					; size = 2
?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped, COMDAT

; 1525 : 		{	// put char sequence [_Ptr, _Ptr + _Count) to _Dest with commas

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx
  0000a	8b 5d 1c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7d 18	 mov	 edi, DWORD PTR __Ptr$[ebp]
$LL5@Putgrouped@2:

; 1526 : 		for (; ; ++_Ptr, --_Count)
; 1527 : 			{	// put field with thousands separators for NULs
; 1528 : 			const char *_Pend =
; 1529 : 				(const char *)::memchr(_Ptr, '\0', _Count);

  00012	53		 push	 ebx
  00013	6a 00		 push	 0
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 _memchr
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1530 : 			size_t _Groupsize = _Pend != 0 ? _Pend - _Ptr : _Count;

  0001e	85 c0		 test	 eax, eax
  00020	74 06		 je	 SHORT $LN8@Putgrouped@2
  00022	2b c7		 sub	 eax, edi
  00024	8b f0		 mov	 esi, eax
  00026	eb 02		 jmp	 SHORT $LN9@Putgrouped@2
$LN8@Putgrouped@2:
  00028	8b f3		 mov	 esi, ebx
$LN9@Putgrouped@2:

; 1531 : 
; 1532 : 			_Dest = _Putc(_Dest, _Ptr, _Groupsize);

  0002a	8b 45 14	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  0002d	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00036	51		 push	 ecx
  00037	8d 54 24 20	 lea	 edx, DWORD PTR $T146487[esp+48]
  0003b	52		 push	 edx
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00047	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0004a	83 c4 18	 add	 esp, 24			; 00000018H

; 1533 : 			_Ptr += _Groupsize, _Count -= _Groupsize;

  0004d	03 fe		 add	 edi, esi
  0004f	2b de		 sub	 ebx, esi
  00051	89 55 14	 mov	 DWORD PTR __Dest$[ebp+4], edx

; 1534 : 			if (_Count == 0)

  00054	74 32		 je	 SHORT $LN12@Putgrouped@2

; 1535 : 				break;
; 1536 : 			if (_Kseparator != (_Elem)0)

  00056	8b 4d 20	 mov	 ecx, DWORD PTR __Kseparator$[ebp]
  00059	66 85 c9	 test	 cx, cx
  0005c	74 26		 je	 SHORT $LN4@Putgrouped@2

; 1537 : 				_Dest = _Rep(_Dest, _Kseparator, 1);

  0005e	8b 10		 mov	 edx, DWORD PTR [eax]
  00060	6a 01		 push	 1
  00062	51		 push	 ecx
  00063	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00066	51		 push	 ecx
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	52		 push	 edx
  0006b	8d 44 24 28	 lea	 eax, DWORD PTR $T146488[esp+48]
  0006f	50		 push	 eax
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00076	8b 10		 mov	 edx, DWORD PTR [eax]
  00078	89 55 10	 mov	 DWORD PTR __Dest$[ebp], edx
  0007b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007e	83 c4 18	 add	 esp, 24			; 00000018H
  00081	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
$LN4@Putgrouped@2:
  00084	47		 inc	 edi
  00085	4b		 dec	 ebx
  00086	eb 8a		 jmp	 SHORT $LL5@Putgrouped@2
$LN12@Putgrouped@2:

; 1538 : 			}
; 1539 : 		return (_Dest);

  00088	8b 10		 mov	 edx, DWORD PTR [eax]
  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0008d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1540 : 		}

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00095	89 11		 mov	 DWORD PTR [ecx], edx
  00097	8b c1		 mov	 eax, ecx
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QAE@PAEPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QAE@PAEPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QAE@PAEPBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

  00000	53		 push	 ebx

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN1@Vector_con@3
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN1@Vector_con@3
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN2@Vector_con@3
$LN1@Vector_con@3:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN2@Vector_con@3:

; 79   : 		this->_Set_container(_Pvector);

  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi

; 80   : 		_Myptr = _Ptr;

  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 81   : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QAE@PAEPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	??0?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@QAE@U?$less@K@1@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ; std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0>::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\map
;	COMDAT ??0?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@QAE@U?$less@K@1@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 1
__Al$ = 12						; size = 1
??0?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@QAE@U?$less@K@1@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z PROC ; std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0>::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0>, COMDAT
; _this$ = ecx

; 39   : 		{	// construct with specified comparator

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@Tmap_trait
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 40   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 08 00	 ret	 8

; 39   : 		{	// construct with specified comparator

$LN8@Tmap_trait:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 40   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 08 00	 ret	 8
??0?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@QAE@U?$less@K@1@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ENDP ; std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0>::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0>
_TEXT	ENDS
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 74   : 	return (_Left.compare(_Right) == 0);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00008	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0000b	72 05		 jb	 SHORT $LN9@operator@47
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	eb 03		 jmp	 SHORT $LN10@operator@47
$LN9@operator@47:
  00012	83 c0 04	 add	 eax, 4
$LN10@operator@47:
  00015	51		 push	 ecx
  00016	8b 4c 24 08	 mov	 ecx, DWORD PTR __Left$[esp]
  0001a	50		 push	 eax
  0001b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001e	50		 push	 eax
  0001f	6a 00		 push	 0
  00021	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  00026	f7 d8		 neg	 eax
  00028	1b c0		 sbb	 eax, eax
  0002a	40		 inc	 eax

; 75   : 	}

  0002b	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAEPAE@stdext@@YAPAEPAE00@Z	; stdext::unchecked_copy<unsigned char *,unsigned char *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAEPAE@stdext@@YAPAEPAE00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAEPAE@stdext@@YAPAEPAE00@Z PROC	; stdext::unchecked_copy<unsigned char *,unsigned char *>, COMDAT

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Dest$[esp-4]
  0000c	2b c1		 sub	 eax, ecx
  0000e	56		 push	 esi
  0000f	8d 34 10	 lea	 esi, DWORD PTR [eax+edx]
  00012	85 c0		 test	 eax, eax
  00014	7e 0c		 jle	 SHORT $LN18@unchecked_@3
  00016	50		 push	 eax
  00017	51		 push	 ecx
  00018	50		 push	 eax
  00019	52		 push	 edx
  0001a	e8 00 00 00 00	 call	 _memmove_s
  0001f	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@unchecked_@3:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi

; 3607 : 	}

  00025	c3		 ret	 0
??$unchecked_copy@PAEPAE@stdext@@YAPAEPAE00@Z ENDP	; stdext::unchecked_copy<unsigned char *,unsigned char *>
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Ucopy<unsigned char *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Ucopy<unsigned char *>, COMDAT
; _this$ = ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  0000c	2b c1		 sub	 eax, ecx
  0000e	56		 push	 esi
  0000f	8d 34 10	 lea	 esi, DWORD PTR [eax+edx]
  00012	74 0c		 je	 SHORT $LN18@Ucopy
  00014	50		 push	 eax
  00015	51		 push	 ecx
  00016	50		 push	 eax
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 _memmove_s
  0001d	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@Ucopy:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi

; 1142 : 		}

  00023	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Ucopy<unsigned char *>
_TEXT	ENDS
PUBLIC	??$fill@PAEE@std@@YAXPAE0ABE@Z			; std::fill<unsigned char *,unsigned char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAEE@std@@YAXPAE0ABE@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAEE@std@@YAXPAE0ABE@Z PROC			; std::fill<unsigned char *,unsigned char>, COMDAT

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	3b c1		 cmp	 eax, ecx
  0000a	74 0f		 je	 SHORT $LN11@fill
  0000c	56		 push	 esi
  0000d	8b 74 24 10	 mov	 esi, DWORD PTR __Val$[esp]
$LL13@fill:
  00011	8a 16		 mov	 dl, BYTE PTR [esi]
  00013	88 10		 mov	 BYTE PTR [eax], dl
  00015	40		 inc	 eax
  00016	3b c1		 cmp	 eax, ecx
  00018	75 f7		 jne	 SHORT $LL13@fill
  0001a	5e		 pop	 esi
$LN11@fill:

; 3188 : 	}

  0001b	c3		 ret	 0
??$fill@PAEE@std@@YAXPAE0ABE@Z ENDP			; std::fill<unsigned char *,unsigned char>
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAEPAE@stdext@@YAPAEPAE00@Z ; stdext::_Unchecked_move_backward<unsigned char *,unsigned char *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_move_backward@PAEPAE@stdext@@YAPAEPAE00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAEPAE@stdext@@YAPAEPAE00@Z PROC ; stdext::_Unchecked_move_backward<unsigned char *,unsigned char *>, COMDAT

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 10	 mov	 esi, DWORD PTR __Dest$[esp]
  0000d	2b c1		 sub	 eax, ecx
  0000f	2b f0		 sub	 esi, eax
  00011	85 c0		 test	 eax, eax
  00013	7e 0c		 jle	 SHORT $LN22@Unchecked_
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	50		 push	 eax
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 _memmove_s
  0001e	83 c4 10	 add	 esp, 16			; 00000010H
$LN22@Unchecked_:
  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi

; 3697 : 	}

  00024	c3		 ret	 0
??$_Unchecked_move_backward@PAEPAE@stdext@@YAPAEPAE00@Z ENDP ; stdext::_Unchecked_move_backward<unsigned char *,unsigned char *>
_TEXT	ENDS
PUBLIC	??$fill@PAKK@std@@YAXPAK0ABK@Z			; std::fill<unsigned long *,unsigned long>
; Function compile flags: /Ogtpy
;	COMDAT ??$fill@PAKK@std@@YAXPAK0ABK@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAKK@std@@YAXPAK0ABK@Z PROC			; std::fill<unsigned long *,unsigned long>, COMDAT

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	3b c1		 cmp	 eax, ecx
  0000a	74 11		 je	 SHORT $LN11@fill@2
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$LL13@fill@2:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	3b c1		 cmp	 eax, ecx
  0001a	75 f5		 jne	 SHORT $LL13@fill@2
  0001c	5e		 pop	 esi
$LN11@fill@2:

; 3188 : 	}

  0001d	c3		 ret	 0
??$fill@PAKK@std@@YAXPAK0ABK@Z ENDP			; std::fill<unsigned long *,unsigned long>
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAKPAK@stdext@@YAPAKPAK00@Z ; stdext::_Unchecked_move_backward<unsigned long *,unsigned long *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_move_backward@PAKPAK@stdext@@YAPAKPAK00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAKPAK@stdext@@YAPAKPAK00@Z PROC ; stdext::_Unchecked_move_backward<unsigned long *,unsigned long *>, COMDAT

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	2b c2		 sub	 eax, edx
  0000a	c1 f8 02	 sar	 eax, 2
  0000d	56		 push	 esi
  0000e	8b 74 24 10	 mov	 esi, DWORD PTR __Dest$[esp]
  00012	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  00019	2b f1		 sub	 esi, ecx
  0001b	85 c0		 test	 eax, eax
  0001d	7e 0c		 jle	 SHORT $LN22@Unchecked_@2
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	51		 push	 ecx
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 _memmove_s
  00028	83 c4 10	 add	 esp, 16			; 00000010H
$LN22@Unchecked_@2:
  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 3697 : 	}

  0002e	c3		 ret	 0
??$_Unchecked_move_backward@PAKPAK@stdext@@YAPAKPAK00@Z ENDP ; stdext::_Unchecked_move_backward<unsigned long *,unsigned long *>
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AVconst_iterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AVconst_iterator@12@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::begin, COMDAT
; _this$ = ecx

; 561  : 		return (_TREE_CONST_ITERATOR(_Lmost()));

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 562  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AVconst_iterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::begin
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AVconst_iterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AVconst_iterator@12@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::end, COMDAT
; _this$ = ecx

; 571  : 		return (_TREE_CONST_ITERATOR(_Myhead));

  00000	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 572  : 		}

  0000e	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AVconst_iterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::end
_TEXT	ENDS
PUBLIC	??_7?$numpunct@D@std@@6B@			; std::numpunct<char>::`vftable'
PUBLIC	??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z	; std::numpunct<char>::numpunct<char>
PUBLIC	??_R4?$numpunct@D@std@@6B@			; std::numpunct<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$numpunct@D@std@@@8			; std::numpunct<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$numpunct@D@std@@8		; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_decimal_point@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_grouping
PUBLIC	?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_falsename
PUBLIC	?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_truename
EXTRN	??_E?$numpunct@D@std@@MAEPAXI@Z:PROC		; std::numpunct<char>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$numpunct@D@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@D@std@@8 DD FLAT:??_R0?AV?$numpunct@D@std@@@8 ; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$numpunct@D@std@@8 ; std::numpunct<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@D@std@@8 DD 00H				; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT
??_R0?AV?$numpunct@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::numpunct<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$numpunct@D@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@D@std@@6B@ DD 00H			; std::numpunct<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$numpunct@D@std@@@8
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$numpunct@D@std@@6B@
CONST	SEGMENT
??_7?$numpunct@D@std@@6B@ DD FLAT:??_R4?$numpunct@D@std@@6B@ ; std::numpunct<char>::`vftable'
	DD	FLAT:??_E?$numpunct@D@std@@MAEPAXI@Z
	DD	FLAT:?do_decimal_point@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0
__ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
__Isdef$ = 16						; size = 1
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z PROC	; std::numpunct<char>::numpunct<char>, COMDAT
; _this$ = ecx

; 106  : 		{	// construct from specified locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	8b 44 24 20	 mov	 eax, DWORD PTR __Refs$[esp+20]
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 107  : 		_Init(_Lobj, _Isdef);

  0002f	8b 4c 24 24	 mov	 ecx, DWORD PTR __Isdef$[esp+20]
  00033	8b 54 24 1c	 mov	 edx, DWORD PTR __Lobj$[esp+20]
  00037	51		 push	 ecx
  00038	52		 push	 edx
  00039	8b ce		 mov	 ecx, esi
  0003b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+40], 0
  00043	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  00049	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init

; 108  : 		}

  0004e	8b c6		 mov	 eax, esi
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	5e		 pop	 esi
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@UAE@XZ ; std::locale::facet::~facet
__ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z ENDP	; std::numpunct<char>::numpunct<char>
; Function compile flags: /Ogtpy
;	COMDAT ?do_decimal_point@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_decimal_point@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_decimal_point, COMDAT
; _this$ = ecx

; 165  : 		return (_Dp);

  00000	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]

; 166  : 		}

  00003	c3		 ret	 0
?do_decimal_point@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_decimal_point
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_thousands_sep, COMDAT
; _this$ = ecx

; 170  : 		return (_Kseparator);

  00000	8a 41 0d	 mov	 al, BYTE PTR [ecx+13]

; 171  : 		}

  00003	c3		 ret	 0
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_thousands_sep
_TEXT	ENDS
PUBLIC	??1?$numpunct@D@std@@MAE@XZ			; std::numpunct<char>::~numpunct<char>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$numpunct@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$numpunct@D@std@@MAE@XZ PROC			; std::numpunct<char>::~numpunct<char>, COMDAT
; _this$ = ecx

; 121  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 122  : 		_Tidy();

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  0000d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00012	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 123  : 		}

  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0002d	5e		 pop	 esi
  0002e	c3		 ret	 0
??1?$numpunct@D@std@@MAE@XZ ENDP			; std::numpunct<char>::~numpunct<char>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$numpunct@D@std@@MAEPAXI@Z PROC			; std::numpunct<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  0000d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00012	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00032	74 09		 je	 SHORT $LN10@scalar@23
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4
$LN10@scalar@23:
  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	c2 04 00	 ret	 4
??_G?$numpunct@D@std@@MAEPAXI@Z ENDP			; std::numpunct<char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7?$numpunct@_W@std@@6B@			; std::numpunct<wchar_t>::`vftable'
PUBLIC	??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z	; std::numpunct<wchar_t>::numpunct<wchar_t>
PUBLIC	??_R4?$numpunct@_W@std@@6B@			; std::numpunct<wchar_t>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$numpunct@_W@std@@@8			; std::numpunct<wchar_t> `RTTI Type Descriptor'
PUBLIC	??_R3?$numpunct@_W@std@@8			; std::numpunct<wchar_t>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$numpunct@_W@std@@8			; std::numpunct<wchar_t>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$numpunct@_W@std@@8		; std::numpunct<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ	; std::numpunct<wchar_t>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ	; std::numpunct<wchar_t>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<wchar_t>::do_grouping
PUBLIC	?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::do_falsename
PUBLIC	?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::do_truename
EXTRN	??_E?$numpunct@_W@std@@MAEPAXI@Z:PROC		; std::numpunct<wchar_t>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$numpunct@_W@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@_W@std@@8 DD FLAT:??_R0?AV?$numpunct@_W@std@@@8 ; std::numpunct<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$numpunct@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@_W@std@@8 DD FLAT:??_R1A@?0A@EA@?$numpunct@_W@std@@8 ; std::numpunct<wchar_t>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@_W@std@@8 DD 00H			; std::numpunct<wchar_t>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$numpunct@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT
??_R0?AV?$numpunct@_W@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::numpunct<wchar_t> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$numpunct@_W@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@_W@std@@6B@ DD 00H			; std::numpunct<wchar_t>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$numpunct@_W@std@@@8
	DD	FLAT:??_R3?$numpunct@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$numpunct@_W@std@@6B@
CONST	SEGMENT
??_7?$numpunct@_W@std@@6B@ DD FLAT:??_R4?$numpunct@_W@std@@6B@ ; std::numpunct<wchar_t>::`vftable'
	DD	FLAT:??_E?$numpunct@_W@std@@MAEPAXI@Z
	DD	FLAT:?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ
	DD	FLAT:?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ
	DD	FLAT:?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
	DD	FLAT:?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z$0
__ehfuncinfo$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
__Isdef$ = 16						; size = 1
??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z PROC	; std::numpunct<wchar_t>::numpunct<wchar_t>, COMDAT
; _this$ = ecx

; 106  : 		{	// construct from specified locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	8b 44 24 20	 mov	 eax, DWORD PTR __Refs$[esp+20]
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 107  : 		_Init(_Lobj, _Isdef);

  0002f	8b 4c 24 24	 mov	 ecx, DWORD PTR __Isdef$[esp+20]
  00033	8b 54 24 1c	 mov	 edx, DWORD PTR __Lobj$[esp+20]
  00037	51		 push	 ecx
  00038	52		 push	 edx
  00039	8b ce		 mov	 ecx, esi
  0003b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+40], 0
  00043	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@_W@std@@6B@
  00049	e8 00 00 00 00	 call	 ?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<wchar_t>::_Init

; 108  : 		}

  0004e	8b c6		 mov	 eax, esi
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	5e		 pop	 esi
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@UAE@XZ ; std::locale::facet::~facet
__ehhandler$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z ENDP	; std::numpunct<wchar_t>::numpunct<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ
_TEXT	SEGMENT
?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ PROC	; std::numpunct<wchar_t>::do_decimal_point, COMDAT
; _this$ = ecx

; 165  : 		return (_Dp);

  00000	66 8b 41 0c	 mov	 ax, WORD PTR [ecx+12]

; 166  : 		}

  00004	c3		 ret	 0
?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ ENDP	; std::numpunct<wchar_t>::do_decimal_point
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ
_TEXT	SEGMENT
?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ PROC	; std::numpunct<wchar_t>::do_thousands_sep, COMDAT
; _this$ = ecx

; 170  : 		return (_Kseparator);

  00000	66 8b 41 0e	 mov	 ax, WORD PTR [ecx+14]

; 171  : 		}

  00004	c3		 ret	 0
?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ ENDP	; std::numpunct<wchar_t>::do_thousands_sep
_TEXT	ENDS
PUBLIC	??1?$numpunct@_W@std@@MAE@XZ			; std::numpunct<wchar_t>::~numpunct<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$numpunct@_W@std@@MAE@XZ
_TEXT	SEGMENT
??1?$numpunct@_W@std@@MAE@XZ PROC			; std::numpunct<wchar_t>::~numpunct<wchar_t>, COMDAT
; _this$ = ecx

; 121  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 122  : 		_Tidy();

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@_W@std@@6B@
  0000d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00012	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 123  : 		}

  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0002d	5e		 pop	 esi
  0002e	c3		 ret	 0
??1?$numpunct@_W@std@@MAE@XZ ENDP			; std::numpunct<wchar_t>::~numpunct<wchar_t>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$numpunct@_W@std@@MAEPAXI@Z PROC			; std::numpunct<wchar_t>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@_W@std@@6B@
  0000d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00012	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00032	74 09		 je	 SHORT $LN10@scalar@24
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4
$LN10@scalar@24:
  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	c2 04 00	 ret	 4
??_G?$numpunct@_W@std@@MAEPAXI@Z ENDP			; std::numpunct<wchar_t>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	SEGMENT
__catchsym$?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z$0
__unwindtable$?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z$2
__ehfuncinfo$?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Newroot$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Rootnode$ = 8						; size = 4
__Wherenode$ = 12					; size = 4
?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Copy, COMDAT
; _this$ = ecx

; 1075 : 		{	// copy entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 1076 : 		_Nodeptr _Newroot = _Myhead;	// point at nil node
; 1077 : 
; 1078 : 		if (!_Isnil(_Rootnode))

  00030	8b 5d 08	 mov	 ebx, DWORD PTR __Rootnode$[ebp]
  00033	80 7b 19 00	 cmp	 BYTE PTR [ebx+25], 0
  00037	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0003a	89 45 ec	 mov	 DWORD PTR __Newroot$[ebp], eax
  0003d	75 47		 jne	 SHORT $LN8@Copy@3

; 1079 : 			{	// copy a node, then any subtrees
; 1080 : 			_Nodeptr _Pnode = _Buynode(_Myhead, _Wherenode, _Myhead,
; 1081 : 				_Myval(_Rootnode), _Color(_Rootnode));

  0003f	0f b6 4b 18	 movzx	 ecx, BYTE PTR [ebx+24]
  00043	51		 push	 ecx
  00044	8b 4d 0c	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00047	8d 53 0c	 lea	 edx, DWORD PTR [ebx+12]
  0004a	52		 push	 edx
  0004b	50		 push	 eax
  0004c	51		 push	 ecx
  0004d	50		 push	 eax
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@D@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Buynode

; 1082 : 			if (_Isnil(_Newroot))

  00055	8b 55 ec	 mov	 edx, DWORD PTR __Newroot$[ebp]
  00058	80 7a 19 00	 cmp	 BYTE PTR [edx+25], 0
  0005c	8b f8		 mov	 edi, eax
  0005e	74 03		 je	 SHORT $LN2@Copy@3

; 1083 : 				_Newroot = _Pnode;	// memorize new root

  00060	89 7d ec	 mov	 DWORD PTR __Newroot$[ebp], edi
$LN2@Copy@3:

; 1084 : 
; 1085 : 			_TRY_BEGIN
; 1086 : 			_Left(_Pnode) = _Copy(_Left(_Rootnode), _Pnode);

  00063	8b 03		 mov	 eax, DWORD PTR [ebx]
  00065	57		 push	 edi
  00066	50		 push	 eax
  00067	8b ce		 mov	 ecx, esi
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00070	e8 00 00 00 00	 call	 ?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Copy
  00075	89 07		 mov	 DWORD PTR [edi], eax

; 1087 : 			_Right(_Pnode) = _Copy(_Right(_Rootnode), _Pnode);

  00077	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0007a	57		 push	 edi
  0007b	51		 push	 ecx
  0007c	8b ce		 mov	 ecx, esi
  0007e	e8 00 00 00 00	 call	 ?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Copy
  00083	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN8@Copy@3:

; 1091 : 			_CATCH_END
; 1092 : 			}
; 1093 : 
; 1094 : 		return (_Newroot);	// return newly constructed tree

  00086	8b 45 ec	 mov	 eax, DWORD PTR __Newroot$[ebp]

; 1095 : 		}

  00089	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00093	59		 pop	 ecx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
__catch$?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z$0:

; 1088 : 			_CATCH_ALL
; 1089 : 			_Erase(_Newroot);	// subtree copy failed, bail out

  0009d	8b 55 ec	 mov	 edx, DWORD PTR __Newroot$[ebp]
  000a0	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	52		 push	 edx
  000a4	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Erase

; 1090 : 			_RERAISE;

  000a9	6a 00		 push	 0
  000ab	6a 00		 push	 0
  000ad	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN28@Copy@3:
  000b2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Copy
PUBLIC	??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
;	COMDAT ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z PROC ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 74   : 	return (_Left.compare(_Right) == 0);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  00008	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0000b	72 05		 jb	 SHORT $LN9@operator@48
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	eb 03		 jmp	 SHORT $LN10@operator@48
$LN9@operator@48:
  00012	83 c0 04	 add	 eax, 4
$LN10@operator@48:
  00015	51		 push	 ecx
  00016	8b 4c 24 08	 mov	 ecx, DWORD PTR __Left$[esp]
  0001a	50		 push	 eax
  0001b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001e	50		 push	 eax
  0001f	6a 00		 push	 0
  00021	e8 00 00 00 00	 call	 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
  00026	f7 d8		 neg	 eax
  00028	1b c0		 sbb	 eax, eax
  0002a	40		 inc	 eax

; 75   : 	}

  0002b	c3		 ret	 0
??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ENDP ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAEPAEV?$allocator@E@std@@@stdext@@YAPAEPAE00AAV?$allocator@E@std@@@Z ; stdext::_Unchecked_uninitialized_move<unsigned char *,unsigned char *,std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAEPAEV?$allocator@E@std@@@stdext@@YAPAEPAE00AAV?$allocator@E@std@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAEPAEV?$allocator@E@std@@@stdext@@YAPAEPAE00AAV?$allocator@E@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<unsigned char *,unsigned char *,std::allocator<unsigned char> >, COMDAT

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Dest$[esp-4]
  0000c	2b c1		 sub	 eax, ecx
  0000e	56		 push	 esi
  0000f	8d 34 10	 lea	 esi, DWORD PTR [eax+edx]
  00012	74 0c		 je	 SHORT $LN30@Unchecked_@3
  00014	50		 push	 eax
  00015	51		 push	 ecx
  00016	50		 push	 eax
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 _memmove_s
  0001d	83 c4 10	 add	 esp, 16			; 00000010H
$LN30@Unchecked_@3:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi

; 865  : 	}

  00023	c3		 ret	 0
??$_Unchecked_uninitialized_move@PAEPAEV?$allocator@E@std@@@stdext@@YAPAEPAE00AAV?$allocator@E@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<unsigned char *,unsigned char *,std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	?_Make_iter@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Make_iter
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Make_iter@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Make_iter, COMDAT
; _this$ = ecx

; 554  : 		return (iterator(_Where._Ptr, this));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Where$[esp]
  00004	56		 push	 esi
  00005	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN5@Make_iter
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Make_iter:
  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 555  : 		}

  00026	c2 0c 00	 ret	 12			; 0000000cH
?_Make_iter@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@std@@YAPBUSecurityTokenKeyfile@CipherShed@@AAV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@std@@YAPBUSecurityTokenKeyfile@CipherShed@@AAV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@std@@YAPBUSecurityTokenKeyfile@CipherShed@@AAV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1166 : 	}

  00007	c3		 ret	 0
??$_Checked_base@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@std@@YAPBUSecurityTokenKeyfile@CipherShed@@AAV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@@std@@YAPBKAAV?$_Vector_const_iterator@KV?$allocator@K@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@@std@@YAPBKAAV?$_Vector_const_iterator@KV?$allocator@K@std@@@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@@std@@YAPBKAAV?$_Vector_const_iterator@KV?$allocator@K@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> > >, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1166 : 	}

  00007	c3		 ret	 0
??$_Checked_base@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@@std@@YAPBKAAV?$_Vector_const_iterator@KV?$allocator@K@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??$unchecked_fill_n@PAEIE@stdext@@YAXPAEIABE@Z	; stdext::unchecked_fill_n<unsigned char *,unsigned int,unsigned char>
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_fill_n@PAEIE@stdext@@YAXPAEIABE@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAEIE@stdext@@YAXPAEIABE@Z PROC	; stdext::unchecked_fill_n<unsigned char *,unsigned int,unsigned char>, COMDAT

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00008	85 c0		 test	 eax, eax
  0000a	76 10		 jbe	 SHORT $LN11@unchecked_@4
  0000c	56		 push	 esi
  0000d	8b 74 24 10	 mov	 esi, DWORD PTR __Val$[esp]
$LL13@unchecked_@4:
  00011	8a 16		 mov	 dl, BYTE PTR [esi]
  00013	88 11		 mov	 BYTE PTR [ecx], dl
  00015	48		 dec	 eax
  00016	41		 inc	 ecx
  00017	85 c0		 test	 eax, eax
  00019	77 f6		 ja	 SHORT $LL13@unchecked_@4
  0001b	5e		 pop	 esi
$LN11@unchecked_@4:

; 3722 : 	}

  0001c	c3		 ret	 0
??$unchecked_fill_n@PAEIE@stdext@@YAXPAEIABE@Z ENDP	; stdext::unchecked_fill_n<unsigned char *,unsigned int,unsigned char>
_TEXT	ENDS
PUBLIC	??$unchecked_fill_n@PAKIK@stdext@@YAXPAKIABK@Z	; stdext::unchecked_fill_n<unsigned long *,unsigned int,unsigned long>
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_fill_n@PAKIK@stdext@@YAXPAKIABK@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAKIK@stdext@@YAXPAKIABK@Z PROC	; stdext::unchecked_fill_n<unsigned long *,unsigned int,unsigned long>, COMDAT

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00008	85 c0		 test	 eax, eax
  0000a	76 12		 jbe	 SHORT $LN11@unchecked_@5
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$LL13@unchecked_@5:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 31		 mov	 DWORD PTR [ecx], esi
  00015	48		 dec	 eax
  00016	83 c1 04	 add	 ecx, 4
  00019	85 c0		 test	 eax, eax
  0001b	77 f4		 ja	 SHORT $LL13@unchecked_@5
  0001d	5e		 pop	 esi
$LN11@unchecked_@5:

; 3722 : 	}

  0001e	c3		 ret	 0
??$unchecked_fill_n@PAKIK@stdext@@YAXPAKIABK@Z ENDP	; stdext::unchecked_fill_n<unsigned long *,unsigned int,unsigned long>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAKPAKV?$allocator@K@std@@U_Undefined_move_tag@2@@std@@YAPAKPAK00AAV?$allocator@K@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<unsigned long *,unsigned long *,std::allocator<unsigned long>,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAKPAKV?$allocator@K@std@@U_Undefined_move_tag@2@@std@@YAPAKPAK00AAV?$allocator@K@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAKPAKV?$allocator@K@std@@U_Undefined_move_tag@2@@std@@YAPAKPAK00AAV?$allocator@K@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<unsigned long *,unsigned long *,std::allocator<unsigned long>,std::_Undefined_move_tag>, COMDAT

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	2b c2		 sub	 eax, edx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	57		 push	 edi
  0000f	8b 7c 24 14	 mov	 edi, DWORD PTR __Dest$[esp+4]
  00013	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0001a	8d 34 39	 lea	 esi, DWORD PTR [ecx+edi]
  0001d	85 c0		 test	 eax, eax
  0001f	76 0c		 jbe	 SHORT $LN18@Uninit_mov@2
  00021	51		 push	 ecx
  00022	52		 push	 edx
  00023	51		 push	 ecx
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 _memmove_s
  0002a	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@Uninit_mov@2:
  0002d	5f		 pop	 edi
  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi

; 208  : 	}

  00031	c3		 ret	 0
??$_Uninit_move@PAKPAKV?$allocator@K@std@@U_Undefined_move_tag@2@@std@@YAPAKPAK00AAV?$allocator@K@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<unsigned long *,unsigned long *,std::allocator<unsigned long>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 54	 lea	 esi, DWORD PTR [ecx+84]
  00004	8b ce		 mov	 ecx, esi
  00006	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0000b	56		 push	 esi
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00012	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00017	83 c4 04	 add	 esp, 4
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_C@_1BC@ELBDEFGA@?$AAt?$AAo?$AAk?$AAe?$AAn?$AA?3?$AA?1?$AA?1?$AA?$AA@ ; `string'
PUBLIC	?IsKeyfilePathValid@SecurityToken@CipherShed@@SA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; CipherShed::SecurityToken::IsKeyfilePathValid
;	COMDAT ??_C@_1BC@ELBDEFGA@?$AAt?$AAo?$AAk?$AAe?$AAn?$AA?3?$AA?1?$AA?1?$AA?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_1BC@ELBDEFGA@?$AAt?$AAo?$AAk?$AAe?$AAn?$AA?3?$AA?1?$AA?1?$AA?$AA@ DB 't'
	DB	00H, 'o', 00H, 'k', 00H, 'e', 00H, 'n', 00H, ':', 00H, '/', 00H
	DB	'/', 00H, 00H, 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
CONST	ENDS
;	COMDAT ?IsKeyfilePathValid@SecurityToken@CipherShed@@SA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
_TEXT	SEGMENT
_securityTokenKeyfilePath$ = 8				; size = 4
?IsKeyfilePathValid@SecurityToken@CipherShed@@SA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; CipherShed::SecurityToken::IsKeyfilePathValid, COMDAT

; 413  : 		return securityTokenKeyfilePath.find (TC_SECURITY_TOKEN_KEYFILE_URL_PREFIX) == 0;

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _securityTokenKeyfilePath$[esp-4]
  00004	6a 08		 push	 8
  00006	6a 00		 push	 0
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ELBDEFGA@?$AAt?$AAo?$AAk?$AAe?$AAn?$AA?3?$AA?1?$AA?1?$AA?$AA@
  0000d	e8 00 00 00 00	 call	 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find
  00012	f7 d8		 neg	 eax
  00014	1b c0		 sbb	 eax, eax
  00016	40		 inc	 eax

; 414  : 	}

  00017	c3		 ret	 0
?IsKeyfilePathValid@SecurityToken@CipherShed@@SA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; CipherShed::SecurityToken::IsKeyfilePathValid
_TEXT	ENDS
PUBLIC	??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 54	 lea	 esi, DWORD PTR [ecx+84]
  00004	8b ce		 mov	 ecx, esi
  00006	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0000b	56		 push	 esi
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00012	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00017	83 c4 04	 add	 esp, 4
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 565  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 566  : 		_Tidy();

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH
  0000b	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0000e	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 567  : 		}

  00011	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $LN17@basic_stri
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN17@basic_stri:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 907  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 565  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 566  : 		_Tidy();

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 18 07 00
	00 00		 mov	 DWORD PTR [eax+24], 7
  0000b	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  00012	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 567  : 		}

  00016	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00007	72 0c		 jb	 SHORT $LN19@basic_stri@2
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN19@basic_stri@2:
  00015	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0001c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00023	33 c9		 xor	 ecx, ecx
  00025	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00029	5e		 pop	 esi

; 907  : 		}

  0002a	c3		 ret	 0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 559  : 		_Tidy();

  00003	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN7@vector
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN7@vector:

; 560  : 		}

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	50		 push	 eax
  00016	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0001d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00024	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
  00033	5e		 pop	 esi
  00034	c3		 ret	 0
??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8d 79 ac	 lea	 edi, DWORD PTR [ecx-84]
  00005	8d 77 54	 lea	 esi, DWORD PTR [edi+84]
  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0000f	56		 push	 esi
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00016	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001b	83 c4 04	 add	 esp, 4
  0001e	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  00023	74 09		 je	 SHORT $LN11@scalar@25
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002b	83 c4 04	 add	 esp, 4
$LN11@scalar@25:
  0002e	8b c7		 mov	 eax, edi
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	c2 04 00	 ret	 4
??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8d 79 ac	 lea	 edi, DWORD PTR [ecx-84]
  00005	8d 77 54	 lea	 esi, DWORD PTR [edi+84]
  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0000f	56		 push	 esi
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00016	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001b	83 c4 04	 add	 esp, 4
  0001e	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  00023	74 09		 je	 SHORT $LN11@scalar@26
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002b	83 c4 04	 add	 esp, 4
$LN11@scalar@26:
  0002e	8b c7		 mov	 eax, edi
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	c2 04 00	 ret	 4
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$_List_ptr@KV?$allocator@K@std@@@std@@QAE@XZ ; std::_List_ptr<unsigned long,std::allocator<unsigned long> >::~_List_ptr<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_ptr@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_ptr@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::_List_ptr<unsigned long,std::allocator<unsigned long> >::~_List_ptr<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_ptr@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::_List_ptr<unsigned long,std::allocator<unsigned long> >::~_List_ptr<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??1?$_List_ptr@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_ptr<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::~_List_ptr<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_ptr@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_ptr@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_ptr<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::~_List_ptr<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_ptr@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_ptr<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::~_List_ptr<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
_TEXT	ENDS
PUBLIC	??1?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::~_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::~_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::~_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
_TEXT	ENDS
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 1502 : 		return (_STRING_ITERATOR(_Myptr()));

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 17		 jb	 SHORT $LN5@begin
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	56		 push	 esi
  0000a	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  0000e	51		 push	 ecx
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi

; 1503 : 		}

  0001a	c2 04 00	 ret	 4

; 1502 : 		return (_STRING_ITERATOR(_Myptr()));

$LN5@begin:
  0001d	56		 push	 esi
  0001e	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  00022	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00025	51		 push	 ecx
  00026	50		 push	 eax
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi

; 1503 : 		}

  00031	c2 04 00	 ret	 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
PUBLIC	?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end, COMDAT
; _this$ = ecx

; 1512 : 		return (_STRING_ITERATOR(_Myptr() + _Mysize));

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 05		 jb	 SHORT $LN5@end
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	eb 03		 jmp	 SHORT $LN6@end
$LN5@end:
  0000b	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
$LN6@end:
  0000e	56		 push	 esi
  0000f	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  00013	51		 push	 ecx
  00014	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00017	03 c8		 add	 ecx, eax
  00019	51		 push	 ecx
  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi

; 1513 : 		}

  00024	c2 04 00	 ret	 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@XZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@XZ PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 641  : 		return (iterator(_Myfirst, this));

  00004	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00015	76 05		 jbe	 SHORT $LN6@begin@2
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@begin@2:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 642  : 		}

  00028	c2 04 00	 ret	 4
?begin@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@XZ ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@XZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@XZ PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 646  : 		return (const_iterator(_Myfirst, this));

  00004	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00015	76 05		 jbe	 SHORT $LN4@begin@3
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN4@begin@3:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 647  : 		}

  00028	c2 04 00	 ret	 4
?begin@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@XZ ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@XZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@XZ PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 651  : 		return (iterator(_Mylast, this));

  00004	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	39 5e 0c	 cmp	 DWORD PTR [esi+12], ebx
  00015	76 05		 jbe	 SHORT $LN6@end@2
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@end@2:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 652  : 		}

  00028	c2 04 00	 ret	 4
?end@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@XZ ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::end
_TEXT	ENDS
PUBLIC	?end@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@XZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@XZ PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 656  : 		return (const_iterator(_Mylast, this));

  00004	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	39 5e 0c	 cmp	 DWORD PTR [esi+12], ebx
  00015	76 05		 jbe	 SHORT $LN4@end@3
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN4@end@3:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 657  : 		}

  00028	c2 04 00	 ret	 4
?end@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@XZ ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfile@CipherShed@@@1@@Z ; std::_Vector_val<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Vector_val<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_val@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfile@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfile@CipherShed@@@1@@Z PROC ; std::_Vector_val<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Vector_val<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@Vector_val
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 425  : 		{	// construct allocator from _Al

$LN8@Vector_val:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Vector_val@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfile@CipherShed@@@1@@Z ENDP ; std::_Vector_val<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Vector_val<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
_TEXT	ENDS
PUBLIC	??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0
__ehfuncinfo$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 29   : 	explicit __CLR_OR_THIS_CALL basic_stringbuf(ios_base::openmode _Mode =

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	e8 00 00 00 00	 call	 ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >

; 30   : 		ios_base::in | ios_base::out)
; 31   : 		{	// construct empty character buffer from mode
; 32   : 		_Init(0, 0, _Getstate(_Mode));

  00029	8a 4c 24 1c	 mov	 cl, BYTE PTR __Mode$[esp+20]
  0002d	33 c0		 xor	 eax, eax
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00035	f6 c1 01	 test	 cl, 1
  00038	75 05		 jne	 SHORT $LN9@basic_stri@3
  0003a	b8 04 00 00 00	 mov	 eax, 4
$LN9@basic_stri@3:
  0003f	f6 c1 02	 test	 cl, 2
  00042	75 03		 jne	 SHORT $LN8@basic_stri@3
  00044	83 c8 02	 or	 eax, 2
$LN8@basic_stri@3:
  00047	f6 c1 08	 test	 cl, 8
  0004a	74 03		 je	 SHORT $LN7@basic_stri@3
  0004c	83 c8 08	 or	 eax, 8
$LN7@basic_stri@3:
  0004f	f6 c1 04	 test	 cl, 4
  00052	74 03		 je	 SHORT $LN6@basic_stri@3
  00054	83 c8 10	 or	 eax, 16			; 00000010H
$LN6@basic_stri@3:
  00057	89 46 40	 mov	 DWORD PTR [esi+64], eax
  0005a	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0

; 33   : 		}

  00061	8b c6		 mov	 eax, esi
  00063	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5e		 pop	 esi
  00070	83 c4 10	 add	 esp, 16			; 00000010H
  00073	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PBV12@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::iterator::iterator
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PBV12@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 451  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN3@iterator
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@iterator:
  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 452  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PBV12@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@EV?$allocator@E@std@@@std@@IAE@V?$allocator@E@1@@Z ; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::_Vector_val<unsigned char,std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@EV?$allocator@E@std@@@std@@IAE@V?$allocator@E@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@EV?$allocator@E@std@@@std@@IAE@V?$allocator@E@1@@Z PROC ; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::_Vector_val<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@Vector_val@2
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 425  : 		{	// construct allocator from _Al

$LN8@Vector_val@2:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Vector_val@EV?$allocator@E@std@@@std@@IAE@V?$allocator@E@1@@Z ENDP ; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::_Vector_val<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	?begin@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?begin@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::begin, COMDAT
; _this$ = ecx

; 534  : 		return (iterator(_Nextnode(_Myhead), this));

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 535  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::begin, COMDAT
; _this$ = ecx

; 539  : 		return (const_iterator(_Nextnode(_Myhead), this));

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 540  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::end, COMDAT
; _this$ = ecx

; 544  : 		return (iterator(_Myhead, this));

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 545  : 		}

  0000e	c2 04 00	 ret	 4
?end@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::end
_TEXT	ENDS
PUBLIC	?end@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::end, COMDAT
; _this$ = ecx

; 549  : 		return (const_iterator(_Myhead, this));

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 550  : 		}

  0000e	c2 04 00	 ret	 4
?end@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::end
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ	; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ PROC	; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy, COMDAT
; _this$ = ecx

; 1212 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1213 : 		clear();

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	89 09		 mov	 DWORD PTR [ecx], ecx
  0000a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000d	89 49 04	 mov	 DWORD PTR [ecx+4], ecx
  00010	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00017	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  0001a	74 17		 je	 SHORT $LN3@Tidy@7
  0001c	57		 push	 edi
  0001d	8d 49 00	 npad	 3
$LL5@Tidy@7:
  00020	8b 38		 mov	 edi, DWORD PTR [eax]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
  0002b	8b c7		 mov	 eax, edi
  0002d	3b 7e 14	 cmp	 edi, DWORD PTR [esi+20]
  00030	75 ee		 jne	 SHORT $LL5@Tidy@7
  00032	5f		 pop	 edi
$LN3@Tidy@7:

; 1214 : 		this->_Alptr.destroy(&_Nextnode(_Myhead));
; 1215 : 		this->_Alptr.destroy(&_Prevnode(_Myhead));
; 1216 : 		this->_Alnod.deallocate(_Myhead, 1);

  00033	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003c	83 c4 04	 add	 esp, 4

; 1217 : 		_Myhead = 0;

  0003f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00046	5e		 pop	 esi

; 1218 : 		}

  00047	c3		 ret	 0
?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy
_TEXT	ENDS
PUBLIC	?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@KV?$allocator@K@std@@@2@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@KV?$allocator@K@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@KV?$allocator@K@std@@@2@XZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 641  : 		return (iterator(_Myfirst, this));

  00004	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00015	76 05		 jbe	 SHORT $LN6@begin@4
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@begin@4:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 642  : 		}

  00028	c2 04 00	 ret	 4
?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@KV?$allocator@K@std@@@2@XZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$_Vector_const_iterator@KV?$allocator@K@std@@@2@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$_Vector_const_iterator@KV?$allocator@K@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$_Vector_const_iterator@KV?$allocator@K@std@@@2@XZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 646  : 		return (const_iterator(_Myfirst, this));

  00004	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00015	76 05		 jbe	 SHORT $LN4@begin@5
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN4@begin@5:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 647  : 		}

  00028	c2 04 00	 ret	 4
?begin@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$_Vector_const_iterator@KV?$allocator@K@std@@@2@XZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@KV?$allocator@K@std@@@2@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@KV?$allocator@K@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@KV?$allocator@K@std@@@2@XZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 651  : 		return (iterator(_Mylast, this));

  00004	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	39 5e 0c	 cmp	 DWORD PTR [esi+12], ebx
  00015	76 05		 jbe	 SHORT $LN6@end@4
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@end@4:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 652  : 		}

  00028	c2 04 00	 ret	 4
?end@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@KV?$allocator@K@std@@@2@XZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::end
_TEXT	ENDS
PUBLIC	?end@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$_Vector_const_iterator@KV?$allocator@K@std@@@2@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$_Vector_const_iterator@KV?$allocator@K@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$_Vector_const_iterator@KV?$allocator@K@std@@@2@XZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 656  : 		return (const_iterator(_Mylast, this));

  00004	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	39 5e 0c	 cmp	 DWORD PTR [esi+12], ebx
  00015	76 05		 jbe	 SHORT $LN4@end@5
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN4@end@5:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 657  : 		}

  00028	c2 04 00	 ret	 4
?end@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$_Vector_const_iterator@KV?$allocator@K@std@@@2@XZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::end
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1124 : 		if (_Myfirst != 0)

  00003	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN4@Tidy@8

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);
; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN4@Tidy@8:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00013	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0001a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00021	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00028	5e		 pop	 esi

; 1135 : 		}

  00029	c3		 ret	 0
?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ; std::_Vector_val<unsigned long,std::allocator<unsigned long> >::_Vector_val<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_val@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z PROC ; std::_Vector_val<unsigned long,std::allocator<unsigned long> >::_Vector_val<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@Vector_val@3
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 425  : 		{	// construct allocator from _Al

$LN8@Vector_val@3:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Vector_val@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ENDP ; std::_Vector_val<unsigned long,std::allocator<unsigned long> >::_Vector_val<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?begin@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?begin@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::begin, COMDAT
; _this$ = ecx

; 539  : 		return (const_iterator(_Nextnode(_Myhead), this));

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 540  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::end, COMDAT
; _this$ = ecx

; 549  : 		return (const_iterator(_Myhead, this));

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 550  : 		}

  0000e	c2 04 00	 ret	 4
?end@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::end
_TEXT	ENDS
PUBLIC	??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
__ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 29   : 	explicit __CLR_OR_THIS_CALL basic_stringbuf(ios_base::openmode _Mode =

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >

; 30   : 		ios_base::in | ios_base::out)
; 31   : 		{	// construct empty character buffer from mode
; 32   : 		_Init(0, 0, _Getstate(_Mode));

  00029	8a 4c 24 1c	 mov	 cl, BYTE PTR __Mode$[esp+20]
  0002d	33 c0		 xor	 eax, eax
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00035	f6 c1 01	 test	 cl, 1
  00038	75 05		 jne	 SHORT $LN9@basic_stri@4
  0003a	b8 04 00 00 00	 mov	 eax, 4
$LN9@basic_stri@4:
  0003f	f6 c1 02	 test	 cl, 2
  00042	75 03		 jne	 SHORT $LN8@basic_stri@4
  00044	83 c8 02	 or	 eax, 2
$LN8@basic_stri@4:
  00047	f6 c1 08	 test	 cl, 8
  0004a	74 03		 je	 SHORT $LN7@basic_stri@4
  0004c	83 c8 08	 or	 eax, 8
$LN7@basic_stri@4:
  0004f	f6 c1 04	 test	 cl, 4
  00052	74 03		 je	 SHORT $LN6@basic_stri@4
  00054	83 c8 10	 or	 eax, 16			; 00000010H
$LN6@basic_stri@4:
  00057	89 46 40	 mov	 DWORD PTR [esi+64], eax
  0005a	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0

; 33   : 		}

  00061	8b c6		 mov	 eax, esi
  00063	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5e		 pop	 esi
  00070	83 c4 10	 add	 esp, 16			; 00000010H
  00073	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xlen
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	53		 push	 ebx

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  0000b	76 05		 jbe	 SHORT $LN6@Grow

; 2121 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow:

; 2122 : 		if (_Myres < _Newsize)

  00012	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00015	3b c3		 cmp	 eax, ebx
  00017	73 19		 jae	 SHORT $LN5@Grow

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001c	50		 push	 eax
  0001d	53		 push	 ebx
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c9		 xor	 ecx, ecx
  00027	3b cb		 cmp	 ecx, ebx
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5b		 pop	 ebx

; 2130 : 		}

  0002f	c2 08 00	 ret	 8
$LN5@Grow:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  00037	74 52		 je	 SHORT $LN3@Grow
  00039	83 fb 10	 cmp	 ebx, 16			; 00000010H
  0003c	73 4d		 jae	 SHORT $LN3@Grow
  0003e	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  0003f	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00042	3b df		 cmp	 ebx, edi
  00044	73 02		 jae	 SHORT $LN9@Grow
  00046	8b fb		 mov	 edi, ebx
$LN9@Grow:
  00048	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004b	72 21		 jb	 SHORT $LN33@Grow
  0004d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00050	55		 push	 ebp
  00051	8b 28		 mov	 ebp, DWORD PTR [eax]
  00053	85 ff		 test	 edi, edi
  00055	76 0d		 jbe	 SHORT $LN31@Grow
  00057	57		 push	 edi
  00058	55		 push	 ebp
  00059	6a 10		 push	 16			; 00000010H
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _memcpy_s
  00061	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@Grow:
  00064	55		 push	 ebp
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	83 c4 04	 add	 esp, 4
  0006d	5d		 pop	 ebp
$LN33@Grow:
  0006e	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00071	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00078	33 c9		 xor	 ecx, ecx
  0007a	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  0007f	3b cb		 cmp	 ecx, ebx
  00081	5f		 pop	 edi
  00082	1b c0		 sbb	 eax, eax
  00084	5e		 pop	 esi
  00085	f7 d8		 neg	 eax
  00087	5b		 pop	 ebx

; 2130 : 		}

  00088	c2 08 00	 ret	 8
$LN3@Grow:

; 2127 : 		else if (_Newsize == 0)

  0008b	85 db		 test	 ebx, ebx
  0008d	75 20		 jne	 SHORT $LN49@Grow

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  0008f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00092	83 f8 10	 cmp	 eax, 16			; 00000010H
  00095	72 12		 jb	 SHORT $LN47@Grow
  00097	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  0009a	33 c9		 xor	 ecx, ecx
  0009c	3b cb		 cmp	 ecx, ebx
  0009e	88 1e		 mov	 BYTE PTR [esi], bl
  000a0	1b c0		 sbb	 eax, eax
  000a2	5e		 pop	 esi
  000a3	f7 d8		 neg	 eax
  000a5	5b		 pop	 ebx

; 2130 : 		}

  000a6	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN47@Grow:
  000a9	83 c6 04	 add	 esi, 4
  000ac	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN49@Grow:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000af	33 c9		 xor	 ecx, ecx
  000b1	3b cb		 cmp	 ecx, ebx
  000b3	1b c0		 sbb	 eax, eax
  000b5	5e		 pop	 esi
  000b6	f7 d8		 neg	 eax
  000b8	5b		 pop	 ebx

; 2130 : 		}

  000b9	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
; Function compile flags: /Ogtpy
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	81 fd fe ff ff
	7f		 cmp	 ebp, 2147483646		; 7ffffffeH
  0000e	76 05		 jbe	 SHORT $LN6@Grow@2

; 2121 : 			_String_base::_Xlen();	// result too long

  00010	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow@2:

; 2122 : 		if (_Myres < _Newsize)

  00015	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00018	3b c5		 cmp	 eax, ebp
  0001a	73 19		 jae	 SHORT $LN5@Grow@2

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  0001c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001f	50		 push	 eax
  00020	55		 push	 ebp
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00028	33 c9		 xor	 ecx, ecx
  0002a	3b cd		 cmp	 ecx, ebp
  0002c	1b c0		 sbb	 eax, eax
  0002e	5e		 pop	 esi
  0002f	f7 d8		 neg	 eax
  00031	5d		 pop	 ebp

; 2130 : 		}

  00032	c2 08 00	 ret	 8
$LN5@Grow@2:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00035	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  0003a	74 57		 je	 SHORT $LN3@Grow@2
  0003c	83 fd 08	 cmp	 ebp, 8
  0003f	73 52		 jae	 SHORT $LN3@Grow@2
  00041	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00042	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00045	3b ef		 cmp	 ebp, edi
  00047	73 02		 jae	 SHORT $LN9@Grow@2
  00049	8b fd		 mov	 edi, ebp
$LN9@Grow@2:
  0004b	83 f8 08	 cmp	 eax, 8
  0004e	72 24		 jb	 SHORT $LN35@Grow@2
  00050	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00053	53		 push	 ebx
  00054	8b 18		 mov	 ebx, DWORD PTR [eax]
  00056	85 ff		 test	 edi, edi
  00058	76 10		 jbe	 SHORT $LN33@Grow@2
  0005a	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  0005d	51		 push	 ecx
  0005e	53		 push	 ebx
  0005f	6a 10		 push	 16			; 00000010H
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _memcpy_s
  00067	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@Grow@2:
  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00070	83 c4 04	 add	 esp, 4
  00073	5b		 pop	 ebx
$LN35@Grow@2:
  00074	33 d2		 xor	 edx, edx
  00076	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00079	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00080	33 c9		 xor	 ecx, ecx
  00082	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  00087	3b cd		 cmp	 ecx, ebp
  00089	5f		 pop	 edi
  0008a	1b c0		 sbb	 eax, eax
  0008c	5e		 pop	 esi
  0008d	f7 d8		 neg	 eax
  0008f	5d		 pop	 ebp

; 2130 : 		}

  00090	c2 08 00	 ret	 8
$LN3@Grow@2:

; 2127 : 		else if (_Newsize == 0)

  00093	85 ed		 test	 ebp, ebp
  00095	75 25		 jne	 SHORT $LN51@Grow@2

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  00097	89 6e 14	 mov	 DWORD PTR [esi+20], ebp
  0009a	83 f8 08	 cmp	 eax, 8
  0009d	72 15		 jb	 SHORT $LN49@Grow@2
  0009f	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000a2	33 c0		 xor	 eax, eax

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000a4	33 c9		 xor	 ecx, ecx
  000a6	3b cd		 cmp	 ecx, ebp
  000a8	66 89 06	 mov	 WORD PTR [esi], ax
  000ab	1b c0		 sbb	 eax, eax
  000ad	5e		 pop	 esi
  000ae	f7 d8		 neg	 eax
  000b0	5d		 pop	 ebp

; 2130 : 		}

  000b1	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN49@Grow@2:
  000b4	83 c6 04	 add	 esi, 4
  000b7	33 c0		 xor	 eax, eax
  000b9	66 89 06	 mov	 WORD PTR [esi], ax
$LN51@Grow@2:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000bc	33 c9		 xor	 ecx, ecx
  000be	3b cd		 cmp	 ecx, ebp
  000c0	1b c0		 sbb	 eax, eax
  000c2	5e		 pop	 esi
  000c3	f7 d8		 neg	 eax
  000c5	5d		 pop	 ebp

; 2130 : 		}

  000c6	c2 08 00	 ret	 8
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::begin, COMDAT
; _this$ = ecx

; 556  : 		return (_TREE_ITERATOR(_Lmost()));

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 557  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::begin
_TEXT	ENDS
PUBLIC	?_Init@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Init, COMDAT
; _this$ = ecx

; 1177 : 		{	// create head/nil node and make tree empty

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1178 : 		_Myhead = _Buynode();

  00003	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Buynode
  00008	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 1179 : 		_Isnil(_Myhead) = true;

  0000b	c6 40 19 01	 mov	 BYTE PTR [eax+25], 1

; 1180 : 		_Root() = _Myhead;

  0000f	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00012	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1181 : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

  00015	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00018	89 00		 mov	 DWORD PTR [eax], eax
  0001a	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0001d	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1182 : 		_Mysize = 0;

  00020	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00027	5e		 pop	 esi

; 1183 : 		}

  00028	c3		 ret	 0
?_Init@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Init
_TEXT	ENDS
PUBLIC	??0?$_List_ptr@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ; std::_List_ptr<unsigned long,std::allocator<unsigned long> >::_List_ptr<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_List_ptr@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_ptr@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z PROC ; std::_List_ptr<unsigned long,std::allocator<unsigned long> >::_List_ptr<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 67   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN13@List_ptr
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 68   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 67   : 		{	// construct base, and allocator from _Al

$LN13@List_ptr:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 68   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_ptr@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ENDP ; std::_List_ptr<unsigned long,std::allocator<unsigned long> >::_List_ptr<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??0?$_List_ptr@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z ; std::_List_ptr<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_List_ptr<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_List_ptr@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_ptr@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z PROC ; std::_List_ptr<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_List_ptr<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >, COMDAT
; _this$ = ecx

; 67   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN13@List_ptr@2
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 68   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 67   : 		{	// construct base, and allocator from _Al

$LN13@List_ptr@2:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 68   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_ptr@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z ENDP ; std::_List_ptr<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_List_ptr<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@EV?$allocator@E@std@@@std@@QAE@PAEPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<unsigned char,std::allocator<unsigned char> >::_Vector_iterator<unsigned char,std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@EV?$allocator@E@std@@@std@@QAE@PAEPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@EV?$allocator@E@std@@@std@@QAE@PAEPBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<unsigned char,std::allocator<unsigned char> >::_Vector_iterator<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

  00000	53		 push	 ebx
  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN3@Vector_ite@3
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN3@Vector_ite@3
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN4@Vector_ite@3
$LN3@Vector_ite@3:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN4@Vector_ite@3:
  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi
  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 328  : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_iterator@EV?$allocator@E@std@@@std@@QAE@PAEPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<unsigned char,std::allocator<unsigned char> >::_Vector_iterator<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	??0?$_Iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PBV12@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Iterator<1>::_Iterator<1>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_Iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PBV12@@Z PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Iterator<1>::_Iterator<1>, COMDAT
; _this$ = ecx

; 361  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN3@Iterator@2
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Iterator@2:
  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 362  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$_Iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PBV12@@Z ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Iterator<1>::_Iterator<1>
_TEXT	ENDS
PUBLIC	?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T149904 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::falsename, COMDAT
; _this$ = ecx

; 84   : 		{	// return name for false

  00000	51		 push	 ecx

; 85   : 		return (do_falsename());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T149904[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 86   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::falsename
_TEXT	ENDS
PUBLIC	?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
; Function compile flags: /Ogtpy
;	COMDAT ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T149909 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::truename, COMDAT
; _this$ = ecx

; 89   : 		{	// return name for true

  00000	51		 push	 ecx

; 90   : 		return (do_truename());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T149909[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 91   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::truename
_TEXT	ENDS
PUBLIC	?falsename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::falsename
; Function compile flags: /Ogtpy
;	COMDAT ?falsename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T149914 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?falsename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::numpunct<wchar_t>::falsename, COMDAT
; _this$ = ecx

; 84   : 		{	// return name for false

  00000	51		 push	 ecx

; 85   : 		return (do_falsename());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T149914[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 86   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?falsename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::numpunct<wchar_t>::falsename
_TEXT	ENDS
PUBLIC	?truename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::truename
; Function compile flags: /Ogtpy
;	COMDAT ?truename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T149919 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?truename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::numpunct<wchar_t>::truename, COMDAT
; _this$ = ecx

; 89   : 		{	// return name for true

  00000	51		 push	 ecx

; 90   : 		return (do_truename());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T149919[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 91   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?truename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::numpunct<wchar_t>::truename
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 998  : 		{	// append _Count * _Ch

  00000	53		 push	 ebx

; 999  : 			if (npos - _Mysize <= _Count)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Count$[esp]
  00005	56		 push	 esi
  00006	83 c8 ff	 or	 eax, -1
  00009	8b f1		 mov	 esi, ecx
  0000b	2b 46 14	 sub	 eax, DWORD PTR [esi+20]
  0000e	3b c3		 cmp	 eax, ebx
  00010	77 05		 ja	 SHORT $LN2@append

; 1000 : 			_String_base::_Xlen();	// result too long

  00012	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN2@append:

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00017	85 db		 test	 ebx, ebx
  00019	0f 86 80 00 00
	00		 jbe	 $LN63@append
  0001f	57		 push	 edi
  00020	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00023	03 fb		 add	 edi, ebx
  00025	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00028	76 05		 jbe	 SHORT $LN10@append
  0002a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN10@append:
  0002f	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00032	3b c7		 cmp	 eax, edi
  00034	73 39		 jae	 SHORT $LN9@append
  00036	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00039	51		 push	 ecx
  0003a	57		 push	 edi
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00042	85 ff		 test	 edi, edi
$LN66@append:
  00044	76 58		 jbe	 SHORT $LN64@append

; 1004 : 			{	// make room and append new stuff using assign
; 1005 : 			_Chassign(_Mysize, _Count, _Ch);

  00046	8b 54 24 14	 mov	 edx, DWORD PTR __Ch$[esp+8]
  0004a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0004d	52		 push	 edx
  0004e	53		 push	 ebx
  0004f	50		 push	 eax
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1006 : 			_Eos(_Num);

  00057	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0005b	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0005e	72 37		 jb	 SHORT $LN59@append
  00060	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00063	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  00067	5f		 pop	 edi

; 1007 : 			}
; 1008 : 		return (*this);

  00068	8b c6		 mov	 eax, esi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx

; 1009 : 		}

  0006c	c2 08 00	 ret	 8

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN9@append:
  0006f	85 ff		 test	 edi, edi
  00071	75 d1		 jne	 SHORT $LN66@append
  00073	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00076	83 f8 10	 cmp	 eax, 16			; 00000010H
  00079	72 0e		 jb	 SHORT $LN51@append
  0007b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0007e	5f		 pop	 edi
  0007f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1007 : 			}
; 1008 : 		return (*this);

  00082	8b c6		 mov	 eax, esi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx

; 1009 : 		}

  00086	c2 08 00	 ret	 8

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN51@append:
  00089	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0008c	5f		 pop	 edi
  0008d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1007 : 			}
; 1008 : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 1009 : 		}

  00094	c2 08 00	 ret	 8

; 1006 : 			_Eos(_Num);

$LN59@append:
  00097	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009a	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN64@append:
  0009e	5f		 pop	 edi
$LN63@append:

; 1007 : 			}
; 1008 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx

; 1009 : 		}

  000a3	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
_TEXT	SEGMENT
tv188 = 8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1196 : 		{	// insert _Count * _Ch at _Off

  00000	55		 push	 ebp
  00001	56		 push	 esi
  00002	57		 push	 edi

; 1197 : 		if (_Mysize < _Off)

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR __Off$[esp+8]
  00007	8b f1		 mov	 esi, ecx
  00009	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0000c	73 05		 jae	 SHORT $LN3@insert

; 1198 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@insert:

; 1199 : 		if (npos - _Mysize <= _Count)

  00013	8b 6c 24 14	 mov	 ebp, DWORD PTR __Count$[esp+8]
  00017	83 c8 ff	 or	 eax, -1
  0001a	2b 46 14	 sub	 eax, DWORD PTR [esi+20]
  0001d	3b c5		 cmp	 eax, ebp
  0001f	77 05		 ja	 SHORT $LN2@insert

; 1200 : 			_String_base::_Xlen();	// result too long

  00021	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN2@insert:

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00026	85 ed		 test	 ebp, ebp
  00028	0f 86 c7 00 00
	00		 jbe	 $LN80@insert
  0002e	53		 push	 ebx
  0002f	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00032	03 dd		 add	 ebx, ebp
  00034	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00037	76 05		 jbe	 SHORT $LN11@insert
  00039	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN11@insert:
  0003e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00041	3b c3		 cmp	 eax, ebx
  00043	73 25		 jae	 SHORT $LN10@insert
  00045	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00048	51		 push	 ecx
  00049	53		 push	 ebx
  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00051	85 db		 test	 ebx, ebx
$LN83@insert:
  00053	0f 86 9b 00 00
	00		 jbe	 $LN81@insert

; 1203 : 			{	// make room and insert new stuff
; 1204 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1205 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

  00059	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005c	83 f8 10	 cmp	 eax, 16			; 00000010H
  0005f	72 32		 jb	 SHORT $LN58@insert
  00061	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00064	89 54 24 14	 mov	 DWORD PTR tv188[esp+12], edx
  00068	eb 30		 jmp	 SHORT $LN59@insert

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN10@insert:
  0006a	85 db		 test	 ebx, ebx
  0006c	75 e5		 jne	 SHORT $LN83@insert
  0006e	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00071	83 f8 10	 cmp	 eax, 16			; 00000010H
  00074	72 0e		 jb	 SHORT $LN52@insert
  00076	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00079	88 18		 mov	 BYTE PTR [eax], bl
  0007b	5b		 pop	 ebx
  0007c	5f		 pop	 edi

; 1208 : 			}
; 1209 : 		return (*this);

  0007d	8b c6		 mov	 eax, esi
  0007f	5e		 pop	 esi
  00080	5d		 pop	 ebp

; 1210 : 		}

  00081	c2 0c 00	 ret	 12			; 0000000cH

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN52@insert:
  00084	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00087	5b		 pop	 ebx
  00088	5f		 pop	 edi
  00089	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1208 : 			}
; 1209 : 		return (*this);

  0008c	8b c6		 mov	 eax, esi
  0008e	5e		 pop	 esi
  0008f	5d		 pop	 ebp

; 1210 : 		}

  00090	c2 0c 00	 ret	 12			; 0000000cH

; 1203 : 			{	// make room and insert new stuff
; 1204 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1205 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

$LN58@insert:
  00093	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00096	89 4c 24 14	 mov	 DWORD PTR tv188[esp+12], ecx
$LN59@insert:
  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	72 05		 jb	 SHORT $LN62@insert
  0009f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000a2	eb 03		 jmp	 SHORT $LN63@insert
$LN62@insert:
  000a4	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
$LN63@insert:
  000a7	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000aa	2b d7		 sub	 edx, edi
  000ac	52		 push	 edx
  000ad	8b 54 24 18	 mov	 edx, DWORD PTR tv188[esp+16]
  000b1	03 d7		 add	 edx, edi
  000b3	2b c7		 sub	 eax, edi
  000b5	52		 push	 edx
  000b6	2b c5		 sub	 eax, ebp
  000b8	03 cf		 add	 ecx, edi
  000ba	50		 push	 eax
  000bb	03 cd		 add	 ecx, ebp
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 _memmove_s

; 1206 : 			_Chassign(_Off, _Count, _Ch);	// fill hole

  000c3	8b 44 24 2c	 mov	 eax, DWORD PTR __Ch$[esp+28]
  000c7	83 c4 10	 add	 esp, 16			; 00000010H
  000ca	50		 push	 eax
  000cb	55		 push	 ebp
  000cc	57		 push	 edi
  000cd	8b ce		 mov	 ecx, esi
  000cf	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1207 : 			_Eos(_Num);

  000d4	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000d8	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  000db	72 10		 jb	 SHORT $LN76@insert
  000dd	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000e0	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
  000e4	5b		 pop	 ebx
  000e5	5f		 pop	 edi

; 1208 : 			}
; 1209 : 		return (*this);

  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	5d		 pop	 ebp

; 1210 : 		}

  000ea	c2 0c 00	 ret	 12			; 0000000cH

; 1207 : 			_Eos(_Num);

$LN76@insert:
  000ed	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000f0	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
$LN81@insert:
  000f4	5b		 pop	 ebx
$LN80@insert:
  000f5	5f		 pop	 edi

; 1208 : 			}
; 1209 : 		return (*this);

  000f6	8b c6		 mov	 eax, esi
  000f8	5e		 pop	 esi
  000f9	5d		 pop	 ebp

; 1210 : 		}

  000fa	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T150383 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::grouping, COMDAT
; _this$ = ecx

; 79   : 		{	// return grouping string

  00000	51		 push	 ecx

; 80   : 		return (do_grouping());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T150383[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 81   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::grouping
_TEXT	ENDS
PUBLIC	?grouping@?$numpunct@_W@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<wchar_t>::grouping
; Function compile flags: /Ogtpy
;	COMDAT ?grouping@?$numpunct@_W@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T150388 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?grouping@?$numpunct@_W@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<wchar_t>::grouping, COMDAT
; _this$ = ecx

; 79   : 		{	// return grouping string

  00000	51		 push	 ecx

; 80   : 		return (do_grouping());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T150388[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 81   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?grouping@?$numpunct@_W@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<wchar_t>::grouping
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 951  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 952  : 		if (_Right.size() < _Roff)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR __Roff$[esp+12]
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 7d 14	 cmp	 DWORD PTR [ebp+20], edi
  00011	73 05		 jae	 SHORT $LN5@append@2

; 953  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@append@2:

; 954  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 955  : 		if (_Num < _Count)

  0001b	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Count$[esp+12]
  0001f	2b c7		 sub	 eax, edi
  00021	3b c3		 cmp	 eax, ebx
  00023	73 02		 jae	 SHORT $LN4@append@2

; 956  : 			_Count = _Num;	// trim _Count to size

  00025	8b d8		 mov	 ebx, eax
$LN4@append@2:

; 957  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00027	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002a	83 c9 ff	 or	 ecx, -1
  0002d	2b c8		 sub	 ecx, eax
  0002f	3b cb		 cmp	 ecx, ebx
  00031	76 07		 jbe	 SHORT $LN2@append@2
  00033	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00036	3b d0		 cmp	 edx, eax
  00038	73 05		 jae	 SHORT $LN3@append@2
$LN2@append@2:

; 958  : 			_String_base::_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@2:

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 86 ab 00 00
	00		 jbe	 $LN87@append@2
  00047	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0004a	03 fb		 add	 edi, ebx
  0004c	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004f	76 05		 jbe	 SHORT $LN17@append@2
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@append@2:
  00056	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00059	3b c7		 cmp	 eax, edi
  0005b	73 1f		 jae	 SHORT $LN16@append@2
  0005d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00060	50		 push	 eax
  00061	57		 push	 edi
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ff		 test	 edi, edi
$LN88@append@2:
  0006b	0f 86 81 00 00
	00		 jbe	 $LN87@append@2

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

  00071	83 7d 18 10	 cmp	 DWORD PTR [ebp+24], 16	; 00000010H
  00075	72 2f		 jb	 SHORT $LN64@append@2
  00077	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]
  0007a	eb 2d		 jmp	 SHORT $LN65@append@2

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN16@append@2:
  0007c	85 ff		 test	 edi, edi
  0007e	75 eb		 jne	 SHORT $LN88@append@2
  00080	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00083	83 f8 10	 cmp	 eax, 16			; 00000010H
  00086	72 0f		 jb	 SHORT $LN58@append@2
  00088	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008b	5f		 pop	 edi
  0008c	c6 00 00	 mov	 BYTE PTR [eax], 0

; 965  : 			}
; 966  : 		return (*this);

  0008f	8b c6		 mov	 eax, esi
  00091	5e		 pop	 esi
  00092	5d		 pop	 ebp
  00093	5b		 pop	 ebx

; 967  : 		}

  00094	c2 0c 00	 ret	 12			; 0000000cH

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN58@append@2:
  00097	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009a	5f		 pop	 edi
  0009b	c6 00 00	 mov	 BYTE PTR [eax], 0

; 965  : 			}
; 966  : 		return (*this);

  0009e	8b c6		 mov	 eax, esi
  000a0	5e		 pop	 esi
  000a1	5d		 pop	 ebp
  000a2	5b		 pop	 ebx

; 967  : 		}

  000a3	c2 0c 00	 ret	 12			; 0000000cH

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

$LN64@append@2:
  000a6	83 c5 04	 add	 ebp, 4
$LN65@append@2:
  000a9	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000ac	83 f8 10	 cmp	 eax, 16			; 00000010H
  000af	72 05		 jb	 SHORT $LN68@append@2
  000b1	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000b4	eb 03		 jmp	 SHORT $LN69@append@2
$LN68@append@2:
  000b6	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN69@append@2:
  000b9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000bc	53		 push	 ebx
  000bd	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Roff$[esp+16]
  000c1	03 eb		 add	 ebp, ebx
  000c3	2b c1		 sub	 eax, ecx
  000c5	55		 push	 ebp
  000c6	50		 push	 eax
  000c7	03 ca		 add	 ecx, edx
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 964  : 			_Eos(_Num);

  000d2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d9	72 10		 jb	 SHORT $LN82@append@2
  000db	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000de	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000e2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000e3	8b c6		 mov	 eax, esi
  000e5	5e		 pop	 esi
  000e6	5d		 pop	 ebp
  000e7	5b		 pop	 ebx

; 967  : 		}

  000e8	c2 0c 00	 ret	 12			; 0000000cH

; 964  : 			_Eos(_Num);

$LN82@append@2:
  000eb	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ee	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN87@append@2:
  000f2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000f3	8b c6		 mov	 eax, esi
  000f5	5e		 pop	 esi
  000f6	5d		 pop	 ebp
  000f7	5b		 pop	 ebx

; 967  : 		}

  000f8	c2 0c 00	 ret	 12			; 0000000cH
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	??0?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z PROC ; std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >, COMDAT
; _this$ = ecx

; 52   : 		{	// construct traits from _Parg and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN13@Tree_nod
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 53   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 08 00	 ret	 8

; 52   : 		{	// construct traits from _Parg and allocator from _Al

$LN13@Tree_nod:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 53   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 08 00	 ret	 8
??0?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree_nod<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
_TEXT	ENDS
PUBLIC	??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
;	COMDAT ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z PROC ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 104  : 	return (!(_Left == _Right));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  00008	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0000b	72 05		 jb	 SHORT $LN11@operator@49
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	eb 03		 jmp	 SHORT $LN12@operator@49
$LN11@operator@49:
  00012	83 c0 04	 add	 eax, 4
$LN12@operator@49:
  00015	51		 push	 ecx
  00016	8b 4c 24 08	 mov	 ecx, DWORD PTR __Left$[esp]
  0001a	50		 push	 eax
  0001b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001e	50		 push	 eax
  0001f	6a 00		 push	 0
  00021	e8 00 00 00 00	 call	 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
  00026	f7 d8		 neg	 eax
  00028	1b c0		 sbb	 eax, eax
  0002a	f7 d8		 neg	 eax

; 105  : 	}

  0002c	c3		 ret	 0
??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ENDP ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove<unsigned char *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove<unsigned char *>, COMDAT
; _this$ = ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  0000c	2b c1		 sub	 eax, ecx
  0000e	56		 push	 esi
  0000f	8d 34 10	 lea	 esi, DWORD PTR [eax+edx]
  00012	74 0c		 je	 SHORT $LN32@Umove
  00014	50		 push	 eax
  00015	51		 push	 ecx
  00016	50		 push	 eax
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 _memmove_s
  0001d	83 c4 10	 add	 esp, 16			; 00000010H
$LN32@Umove:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi

; 1149 : 		}

  00023	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove<unsigned char *>
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 946  : 		return (append(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 947  : 		}

  0000e	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXABV12@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Copy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXABV12@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Copy, COMDAT
; _this$ = ecx

; 1062 : 		{	// copy entire tree from _Right

  00000	53		 push	 ebx

; 1063 : 		_Root() = _Copy(_Right._Root(), _Myhead);

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Right$[esp]
  00005	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f1		 mov	 esi, ecx
  0000c	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0000f	83 c0 04	 add	 eax, 4
  00012	8b 00		 mov	 eax, DWORD PTR [eax]
  00014	57		 push	 edi
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Copy
  0001b	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1064 : 		_Mysize = _Right.size();

  0001e	8b 4b 1c	 mov	 ecx, DWORD PTR [ebx+28]

; 1065 : 		if (!_Isnil(_Root()))

  00021	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00024	89 4e 1c	 mov	 DWORD PTR [esi+28], ecx
  00027	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002a	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  0002e	75 37		 jne	 SHORT $LN2@Copy@4

; 1066 : 			{	// nonempty tree, look for new smallest and largest
; 1067 : 			_Lmost() = _Min(_Root());

  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	80 79 19 00	 cmp	 BYTE PTR [ecx+25], 0
  00036	75 0a		 jne	 SHORT $LN25@Copy@4
$LL26@Copy@4:
  00038	8b c1		 mov	 eax, ecx
  0003a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003c	80 79 19 00	 cmp	 BYTE PTR [ecx+25], 0
  00040	74 f6		 je	 SHORT $LL26@Copy@4
$LN25@Copy@4:
  00042	89 02		 mov	 DWORD PTR [edx], eax

; 1068 : 			_Rmost() = _Max(_Root());

  00044	8b 76 18	 mov	 esi, DWORD PTR [esi+24]
  00047	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0004a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0004d	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  00051	75 0b		 jne	 SHORT $LN43@Copy@4
$LL44@Copy@4:
  00053	8b c8		 mov	 ecx, eax
  00055	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00058	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  0005c	74 f5		 je	 SHORT $LL44@Copy@4
$LN43@Copy@4:
  0005e	5f		 pop	 edi
  0005f	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx

; 1072 : 		}

  00064	c2 04 00	 ret	 4
$LN2@Copy@4:

; 1069 : 			}
; 1070 : 		else
; 1071 : 			_Lmost() = _Myhead, _Rmost() = _Myhead;	// empty tree

  00067	89 12		 mov	 DWORD PTR [edx], edx
  00069	8b 76 18	 mov	 esi, DWORD PTR [esi+24]
  0006c	5f		 pop	 edi
  0006d	89 76 08	 mov	 DWORD PTR [esi+8], esi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx

; 1072 : 		}

  00072	c2 04 00	 ret	 4
?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXABV12@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Copy
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@PAKV?$allocator@K@2@@stdext@@YAPAKV?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@0PAKAAV?$allocator@K@2@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >,unsigned long *,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@PAKV?$allocator@K@2@@stdext@@YAPAKV?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@0PAKAAV?$allocator@K@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@PAKV?$allocator@K@2@@stdext@@YAPAKV?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@0PAKAAV?$allocator@K@2@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >,unsigned long *,std::allocator<unsigned long> >, COMDAT

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Last$[esp]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __First$[esp]
  00008	2b c2		 sub	 eax, edx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	57		 push	 edi
  0000f	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dest$[esp+4]
  00013	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0001a	8d 34 39	 lea	 esi, DWORD PTR [ecx+edi]
  0001d	85 c0		 test	 eax, eax
  0001f	76 0c		 jbe	 SHORT $LN20@unchecked_@6
  00021	51		 push	 ecx
  00022	52		 push	 edx
  00023	51		 push	 ecx
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 _memmove_s
  0002a	83 c4 10	 add	 esp, 16			; 00000010H
$LN20@unchecked_@6:
  0002d	5f		 pop	 edi
  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi

; 823  : 	}

  00031	c3		 ret	 0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@PAKV?$allocator@K@2@@stdext@@YAPAKV?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@0PAKAAV?$allocator@K@2@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >,unsigned long *,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAEIEV?$allocator@E@std@@@std@@YAXPAEIABEAAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<unsigned char *,unsigned int,unsigned char,std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninit_fill_n@PAEIEV?$allocator@E@std@@@std@@YAXPAEIABEAAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAEIEV?$allocator@E@std@@@std@@YAXPAEIABEAAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<unsigned char *,unsigned int,unsigned char,std::allocator<unsigned char> >, COMDAT

; 419  : 		_STDEXT unchecked_fill_n(_First, _Count, _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00008	85 c0		 test	 eax, eax
  0000a	76 10		 jbe	 SHORT $LN13@Uninit_fil
  0000c	56		 push	 esi
  0000d	8b 74 24 10	 mov	 esi, DWORD PTR __Val$[esp]
$LL15@Uninit_fil:
  00011	8a 16		 mov	 dl, BYTE PTR [esi]
  00013	88 11		 mov	 BYTE PTR [ecx], dl
  00015	48		 dec	 eax
  00016	41		 inc	 ecx
  00017	85 c0		 test	 eax, eax
  00019	77 f6		 ja	 SHORT $LL15@Uninit_fil
  0001b	5e		 pop	 esi
$LN13@Uninit_fil:

; 420  : 	}

  0001c	c3		 ret	 0
??$_Uninit_fill_n@PAEIEV?$allocator@E@std@@@std@@YAXPAEIABEAAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<unsigned char *,unsigned int,unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAKIKV?$allocator@K@std@@@std@@YAXPAKIABKAAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<unsigned long *,unsigned int,unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninit_fill_n@PAKIKV?$allocator@K@std@@@std@@YAXPAKIABKAAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAKIKV?$allocator@K@std@@@std@@YAXPAKIABKAAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<unsigned long *,unsigned int,unsigned long,std::allocator<unsigned long> >, COMDAT

; 419  : 		_STDEXT unchecked_fill_n(_First, _Count, _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00008	85 c0		 test	 eax, eax
  0000a	76 12		 jbe	 SHORT $LN13@Uninit_fil@2
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$LL15@Uninit_fil@2:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 31		 mov	 DWORD PTR [ecx], esi
  00015	48		 dec	 eax
  00016	83 c1 04	 add	 ecx, 4
  00019	85 c0		 test	 eax, eax
  0001b	77 f4		 ja	 SHORT $LL15@Uninit_fil@2
  0001d	5e		 pop	 esi
$LN13@Uninit_fil@2:

; 420  : 	}

  0001e	c3		 ret	 0
??$_Uninit_fill_n@PAKIKV?$allocator@K@std@@@std@@YAXPAKIABKAAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<unsigned long *,unsigned int,unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAKPAKV?$allocator@K@std@@@stdext@@YAPAKPAK00AAV?$allocator@K@std@@@Z ; stdext::_Unchecked_uninitialized_move<unsigned long *,unsigned long *,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_uninitialized_move@PAKPAKV?$allocator@K@std@@@stdext@@YAPAKPAK00AAV?$allocator@K@std@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAKPAKV?$allocator@K@std@@@stdext@@YAPAKPAK00AAV?$allocator@K@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<unsigned long *,unsigned long *,std::allocator<unsigned long> >, COMDAT

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	2b c2		 sub	 eax, edx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	57		 push	 edi
  0000f	8b 7c 24 14	 mov	 edi, DWORD PTR __Dest$[esp+4]
  00013	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0001a	8d 34 39	 lea	 esi, DWORD PTR [ecx+edi]
  0001d	85 c0		 test	 eax, eax
  0001f	76 0c		 jbe	 SHORT $LN30@Unchecked_@4
  00021	51		 push	 ecx
  00022	52		 push	 edx
  00023	51		 push	 ecx
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 _memmove_s
  0002a	83 c4 10	 add	 esp, 16			; 00000010H
$LN30@Unchecked_@4:
  0002d	5f		 pop	 edi
  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi

; 865  : 	}

  00031	c3		 ret	 0
??$_Unchecked_uninitialized_move@PAKPAKV?$allocator@K@std@@@stdext@@YAPAKPAK00AAV?$allocator@K@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<unsigned long *,unsigned long *,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?erase@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?erase@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
$T151402 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?erase@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::erase, COMDAT
; _this$ = ecx

; 786  : 		{	// erase element at _Where

  00000	83 ec 08	 sub	 esp, 8

; 787  : 
; 788  :  #if _HAS_ITERATOR_DEBUGGING
; 789  : 		if (_Where._Mycont != this || _Where._Ptr == _Myhead)
; 790  : 			_DEBUG_ERROR("list erase iterator outside range");
; 791  : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 792  : 		_Orphan_ptr(*this, _Pnode);
; 793  : 
; 794  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 795  : 		_Nodeptr _Pnode = (_Where++)._Mynode();

  00003	8b 44 24 10	 mov	 eax, DWORD PTR __Where$[esp+4]
  00007	56		 push	 esi
  00008	8b 74 24 18	 mov	 esi, DWORD PTR __Where$[esp+12]
  0000c	57		 push	 edi
  0000d	8b f9		 mov	 edi, ecx
  0000f	89 44 24 08	 mov	 DWORD PTR $T151402[esp+16], eax
  00013	85 c0		 test	 eax, eax
  00015	75 0d		 jne	 SHORT $LN54@erase@3
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0001c	8b 44 24 18	 mov	 eax, DWORD PTR __Where$[esp+12]
  00020	85 c0		 test	 eax, eax
  00022	74 04		 je	 SHORT $LN16@erase@3
$LN54@erase@3:
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	eb 02		 jmp	 SHORT $LN17@erase@3
$LN16@erase@3:
  00028	33 c0		 xor	 eax, eax
$LN17@erase@3:
  0002a	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Where$[esp+16]
  0002e	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00031	75 05		 jne	 SHORT $LN6@erase@3
  00033	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@erase@3:
  00038	8b 54 24 1c	 mov	 edx, DWORD PTR __Where$[esp+16]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	89 44 24 1c	 mov	 DWORD PTR __Where$[esp+16], eax

; 796  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 797  : 
; 798  : 		if (_Pnode != _Myhead)

  00042	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  00045	74 1b		 je	 SHORT $LN1@erase@3

; 799  : 			{	// not list head, safe to erase
; 800  : 			_Nextnode(_Prevnode(_Pnode)) = _Nextnode(_Pnode);

  00047	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0004a	8b 16		 mov	 edx, DWORD PTR [esi]
  0004c	89 11		 mov	 DWORD PTR [ecx], edx

; 801  : 			_Prevnode(_Nextnode(_Pnode)) = _Prevnode(_Pnode);

  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 802  : 			this->_Alnod.destroy(_Pnode);
; 803  : 			this->_Alnod.deallocate(_Pnode, 1);

  00053	56		 push	 esi
  00054	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00057	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005c	83 c4 04	 add	 esp, 4

; 804  : 			--_Mysize;

  0005f	ff 4f 18	 dec	 DWORD PTR [edi+24]
$LN1@erase@3:

; 805  : 			}
; 806  : 		return (_Make_iter(_Where));

  00062	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00064	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  00068	8b 54 24 1c	 mov	 edx, DWORD PTR __Where$[esp+16]
  0006c	5f		 pop	 edi
  0006d	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00070	89 08		 mov	 DWORD PTR [eax], ecx
  00072	5e		 pop	 esi

; 807  : 		}

  00073	83 c4 08	 add	 esp, 8
  00076	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::erase
_TEXT	ENDS
PUBLIC	?_Make_iter@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Make_iter
; Function compile flags: /Ogtpy
;	COMDAT ?_Make_iter@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Make_iter, COMDAT
; _this$ = ecx

; 554  : 		return (iterator(_Where._Ptr, this));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Where$[esp]
  00004	56		 push	 esi
  00005	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN5@Make_iter@2
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Make_iter@2:
  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 555  : 		}

  00026	c2 0c 00	 ret	 12			; 0000000cH
?_Make_iter@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Make_iter
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@

; 31   : 		}

  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN19@logic_erro
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN19@logic_erro:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 35   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN7@what
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 36   : 		}

  00009	c3		 ret	 0

; 35   : 		return (_Str.c_str());

$LN7@what:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 36   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN22@scalar@27
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN22@scalar@27:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN32@scalar@27
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN32@scalar@27:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@runtime_error@std@@UBEPBDXZ		; std::runtime_error::what
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@runtime_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	ENDS
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx

; 157  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 158  : 		}

  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN19@runtime_er
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN19@runtime_er:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?what@runtime_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@runtime_error@std@@UBEPBDXZ PROC			; std::runtime_error::what, COMDAT
; _this$ = ecx

; 162  : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN7@what@2
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 163  : 		}

  00009	c3		 ret	 0

; 162  : 		return (_Str.c_str());

$LN7@what@2:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 163  : 		}

  0000d	c3		 ret	 0
?what@runtime_error@std@@UBEPBDXZ ENDP			; std::runtime_error::what
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN22@scalar@28
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN22@scalar@28:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN32@scalar@28
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN32@scalar@28:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:PROC ; std::_Locinfo::_Locinfo_ctor
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_locstr$ = 8						; size = 4
??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 96   : 		{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	33 db		 xor	 ebx, ebx
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00031	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  00036	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00039	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  0003c	89 5c 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], ebx
  00040	88 5e 08	 mov	 BYTE PTR [esi+8], bl
  00043	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00046	89 5e 34	 mov	 DWORD PTR [esi+52], ebx
  00049	88 5e 24	 mov	 BYTE PTR [esi+36], bl
  0004c	89 46 54	 mov	 DWORD PTR [esi+84], eax
  0004f	89 5e 50	 mov	 DWORD PTR [esi+80], ebx
  00052	88 5e 40	 mov	 BYTE PTR [esi+64], bl
  00055	89 46 70	 mov	 DWORD PTR [esi+112], eax
  00058	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  0005b	88 5e 5c	 mov	 BYTE PTR [esi+92], bl

; 97   :         _Locinfo_ctor(this, locstr);

  0005e	8b 44 24 20	 mov	 eax, DWORD PTR _locstr$[esp+24]
  00062	50		 push	 eax
  00063	56		 push	 esi
  00064	c6 44 24 20 04	 mov	 BYTE PTR __$EHRec$[esp+44], 4
  00069	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Locinfo::_Locinfo_ctor
  0006e	83 c4 08	 add	 esp, 8

; 98   : 		}

  00071	8b c6		 mov	 eax, esi
  00073	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	83 c4 10	 add	 esp, 16			; 00000010H
  00084	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 20	 add	 ecx, 32			; 00000020H
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 58	 add	 ecx, 88			; 00000058H
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0003b	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1_Locinfo@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1_Locinfo@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 101  :         {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1_Locinfo@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	55		 push	 ebp
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 14	 mov	 DWORD PTR _this$[esp+36], esi

; 102  :         _Locinfo_dtor(this);

  0002b	56		 push	 esi
  0002c	c7 44 24 24 04
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 4
  00034	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor

; 103  :         }

  00039	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  0003e	83 c4 04	 add	 esp, 4
  00041	39 6e 70	 cmp	 DWORD PTR [esi+112], ebp
  00044	72 0c		 jb	 SHORT $LN24@Locinfo
  00046	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004f	83 c4 04	 add	 esp, 4
$LN24@Locinfo:
  00052	33 db		 xor	 ebx, ebx
  00054	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00059	89 7e 70	 mov	 DWORD PTR [esi+112], edi
  0005c	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  0005f	88 5e 5c	 mov	 BYTE PTR [esi+92], bl
  00062	39 6e 54	 cmp	 DWORD PTR [esi+84], ebp
  00065	72 0c		 jb	 SHORT $LN50@Locinfo
  00067	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00070	83 c4 04	 add	 esp, 4
$LN50@Locinfo:
  00073	89 7e 54	 mov	 DWORD PTR [esi+84], edi
  00076	89 5e 50	 mov	 DWORD PTR [esi+80], ebx
  00079	88 5e 40	 mov	 BYTE PTR [esi+64], bl
  0007c	39 6e 38	 cmp	 DWORD PTR [esi+56], ebp
  0007f	72 0c		 jb	 SHORT $LN76@Locinfo
  00081	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008a	83 c4 04	 add	 esp, 4
$LN76@Locinfo:
  0008d	89 7e 38	 mov	 DWORD PTR [esi+56], edi
  00090	89 5e 34	 mov	 DWORD PTR [esi+52], ebx
  00093	88 5e 24	 mov	 BYTE PTR [esi+36], bl
  00096	39 6e 1c	 cmp	 DWORD PTR [esi+28], ebp
  00099	72 0c		 jb	 SHORT $LN102@Locinfo
  0009b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a4	83 c4 04	 add	 esp, 4
$LN102@Locinfo:
  000a7	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  000aa	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ad	8b ce		 mov	 ecx, esi
  000af	88 5e 08	 mov	 BYTE PTR [esi+8], bl
  000b2	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1
  000ba	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000bf	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ca	59		 pop	 ecx
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5d		 pop	 ebp
  000ce	5b		 pop	 ebx
  000cf	83 c4 10	 add	 esp, 16			; 00000010H
  000d2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 20	 add	 ecx, 32			; 00000020H
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 58	 add	 ecx, 88			; 00000058H
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0003b	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
PUBLIC	??0SecurityTokenInfo@CipherShed@@QAE@XZ		; CipherShed::SecurityTokenInfo::SecurityTokenInfo
; Function compile flags: /Ogtpy
;	COMDAT ??0SecurityTokenInfo@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0SecurityTokenInfo@CipherShed@@QAE@XZ PROC		; CipherShed::SecurityTokenInfo::SecurityTokenInfo, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 20 07 00
	00 00		 mov	 DWORD PTR [eax+32], 7
  0000b	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  0000e	33 d2		 xor	 edx, edx
  00010	66 89 50 0c	 mov	 WORD PTR [eax+12], dx
  00014	c7 40 3c 0f 00
	00 00		 mov	 DWORD PTR [eax+60], 15	; 0000000fH
  0001b	89 48 38	 mov	 DWORD PTR [eax+56], ecx
  0001e	88 48 28	 mov	 BYTE PTR [eax+40], cl
  00021	c3		 ret	 0
??0SecurityTokenInfo@CipherShed@@QAE@XZ ENDP		; CipherShed::SecurityTokenInfo::SecurityTokenInfo
_TEXT	ENDS
PUBLIC	??1SecurityTokenInfo@CipherShed@@QAE@XZ		; CipherShed::SecurityTokenInfo::~SecurityTokenInfo
; Function compile flags: /Ogtpy
;	COMDAT ??1SecurityTokenInfo@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1SecurityTokenInfo@CipherShed@@QAE@XZ PROC		; CipherShed::SecurityTokenInfo::~SecurityTokenInfo, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 3c 10	 cmp	 DWORD PTR [esi+60], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $LN21@SecurityTo
  00009	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN21@SecurityTo:
  00015	c7 46 3c 0f 00
	00 00		 mov	 DWORD PTR [esi+60], 15	; 0000000fH
  0001c	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00023	c6 46 28 00	 mov	 BYTE PTR [esi+40], 0
  00027	83 7e 20 08	 cmp	 DWORD PTR [esi+32], 8
  0002b	72 0c		 jb	 SHORT $LN49@SecurityTo
  0002d	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00036	83 c4 04	 add	 esp, 4
$LN49@SecurityTo:
  00039	c7 46 20 07 00
	00 00		 mov	 DWORD PTR [esi+32], 7
  00040	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00047	33 d2		 xor	 edx, edx
  00049	66 89 56 0c	 mov	 WORD PTR [esi+12], dx
  0004d	5e		 pop	 esi
  0004e	c3		 ret	 0
??1SecurityTokenInfo@CipherShed@@QAE@XZ ENDP		; CipherShed::SecurityTokenInfo::~SecurityTokenInfo
_TEXT	ENDS
PUBLIC	??1SecurityTokenKeyfilePath@CipherShed@@QAE@XZ	; CipherShed::SecurityTokenKeyfilePath::~SecurityTokenKeyfilePath
; Function compile flags: /Ogtpy
;	COMDAT ??1SecurityTokenKeyfilePath@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1SecurityTokenKeyfilePath@CipherShed@@QAE@XZ PROC	; CipherShed::SecurityTokenKeyfilePath::~SecurityTokenKeyfilePath, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00007	72 0c		 jb	 SHORT $LN22@SecurityTo@2
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN22@SecurityTo@2:
  00015	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0001c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00023	33 c9		 xor	 ecx, ecx
  00025	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00029	5e		 pop	 esi
  0002a	c3		 ret	 0
??1SecurityTokenKeyfilePath@CipherShed@@QAE@XZ ENDP	; CipherShed::SecurityTokenKeyfilePath::~SecurityTokenKeyfilePath
_TEXT	ENDS
PUBLIC	??1SecurityTokenKeyfile@CipherShed@@QAE@XZ	; CipherShed::SecurityTokenKeyfile::~SecurityTokenKeyfile
; Function compile flags: /Ogtpy
;	COMDAT ??1SecurityTokenKeyfile@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1SecurityTokenKeyfile@CipherShed@@QAE@XZ PROC		; CipherShed::SecurityTokenKeyfile::~SecurityTokenKeyfile, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00006	e8 00 00 00 00	 call	 ??1SecurityTokenInfo@CipherShed@@QAE@XZ
  0000b	83 7e 38 10	 cmp	 DWORD PTR [esi+56], 16	; 00000010H
  0000f	72 0c		 jb	 SHORT $LN22@SecurityTo@3
  00011	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001a	83 c4 04	 add	 esp, 4
$LN22@SecurityTo@3:
  0001d	c7 46 38 0f 00
	00 00		 mov	 DWORD PTR [esi+56], 15	; 0000000fH
  00024	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
  0002b	c6 46 24 00	 mov	 BYTE PTR [esi+36], 0
  0002f	83 7e 1c 08	 cmp	 DWORD PTR [esi+28], 8
  00033	72 0c		 jb	 SHORT $LN50@SecurityTo@3
  00035	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN50@SecurityTo@3:
  00041	c7 46 1c 07 00
	00 00		 mov	 DWORD PTR [esi+28], 7
  00048	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  0004f	33 d2		 xor	 edx, edx
  00051	66 89 56 08	 mov	 WORD PTR [esi+8], dx
  00055	5e		 pop	 esi
  00056	c3		 ret	 0
??1SecurityTokenKeyfile@CipherShed@@QAE@XZ ENDP		; CipherShed::SecurityTokenKeyfile::~SecurityTokenKeyfile
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::end
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::end, COMDAT
; _this$ = ecx

; 566  : 		return (_TREE_ITERATOR(_Myhead));

  00000	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 567  : 		}

  0000e	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::end
_TEXT	ENDS
PUBLIC	?front@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEAAUSecurityTokenKeyfile@CipherShed@@XZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::front
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?front@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEAAUSecurityTokenKeyfile@CipherShed@@XZ
_TEXT	SEGMENT
?front@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEAAUSecurityTokenKeyfile@CipherShed@@XZ PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::front, COMDAT
; _this$ = ecx

; 789  : 		{	// return first element of mutable sequence

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 790  : 		return (*begin());

  00004	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00007	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0000a	76 05		 jbe	 SHORT $LN8@front
  0000c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@front:
  00011	8b 36		 mov	 esi, DWORD PTR [esi]
  00013	85 f6		 test	 esi, esi
  00015	75 14		 jne	 SHORT $LN33@front
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN30@front:
  0001c	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0001f	72 05		 jb	 SHORT $LN34@front
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN34@front:
  00026	8b c7		 mov	 eax, edi
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 791  : 		}

  0002a	c3		 ret	 0
$LN33@front:

; 790  : 		return (*begin());

  0002b	8b 36		 mov	 esi, DWORD PTR [esi]
  0002d	eb ed		 jmp	 SHORT $LN30@front
?front@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEAAUSecurityTokenKeyfile@CipherShed@@XZ ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::front
_TEXT	ENDS
PUBLIC	??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 559  : 		_Tidy();

  00003	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN7@vector@2
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN7@vector@2:

; 560  : 		}

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	50		 push	 eax
  00016	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0001d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00024	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
  00033	5e		 pop	 esi
  00034	c3		 ret	 0
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?front@?$vector@KV?$allocator@K@std@@@std@@QAEAAKXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::front
; Function compile flags: /Ogtpy
;	COMDAT ?front@?$vector@KV?$allocator@K@std@@@std@@QAEAAKXZ
_TEXT	SEGMENT
?front@?$vector@KV?$allocator@K@std@@@std@@QAEAAKXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::front, COMDAT
; _this$ = ecx

; 789  : 		{	// return first element of mutable sequence

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 790  : 		return (*begin());

  00004	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00007	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0000a	76 05		 jbe	 SHORT $LN8@front@2
  0000c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@front@2:
  00011	8b 36		 mov	 esi, DWORD PTR [esi]
  00013	85 f6		 test	 esi, esi
  00015	75 14		 jne	 SHORT $LN33@front@2
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN30@front@2:
  0001c	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0001f	72 05		 jb	 SHORT $LN34@front@2
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN34@front@2:
  00026	8b c7		 mov	 eax, edi
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 791  : 		}

  0002a	c3		 ret	 0
$LN33@front@2:

; 790  : 		return (*begin());

  0002b	8b 36		 mov	 esi, DWORD PTR [esi]
  0002d	eb ed		 jmp	 SHORT $LN30@front@2
?front@?$vector@KV?$allocator@K@std@@@std@@QAEAAKXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::front
_TEXT	ENDS
PUBLIC	??1?$_List_val@KV?$allocator@K@std@@@std@@QAE@XZ ; std::_List_val<unsigned long,std::allocator<unsigned long> >::~_List_val<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_val@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_val@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::_List_val<unsigned long,std::allocator<unsigned long> >::~_List_val<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_val@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::_List_val<unsigned long,std::allocator<unsigned long> >::~_List_val<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??1?$_List_val@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_val<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::~_List_val<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_val@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_val@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_val<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::~_List_val<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_val@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::~_List_val<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
_TEXT	ENDS
PUBLIC	??1?$_Tree_ptr@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree_ptr<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::~_Tree_ptr<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Tree_ptr@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_ptr@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_ptr<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::~_Tree_ptr<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_Tree_ptr@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_ptr<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::~_Tree_ptr<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Right$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 10	 mov	 ebp, DWORD PTR __Roff$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 6b 14	 cmp	 DWORD PTR [ebx+20], ebp
  00011	73 05		 jae	 SHORT $LN5@assign

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fd		 sub	 edi, ebp
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f3		 cmp	 esi, ebx
  00029	75 1f		 jne	 SHORT $LN3@assign

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fd		 add	 edi, ebp
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	55		 push	 ebp
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign:

; 1055 : 		else if (_Grow(_Num))

  0004a	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004d	76 05		 jbe	 SHORT $LN17@assign
  0004f	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign:
  00054	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00057	3b c7		 cmp	 eax, edi
  00059	73 1b		 jae	 SHORT $LN16@assign
  0005b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005e	50		 push	 eax
  0005f	57		 push	 edi
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00067	85 ff		 test	 edi, edi
$LN87@assign:
  00069	76 66		 jbe	 SHORT $LN86@assign

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006b	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0006f	72 2f		 jb	 SHORT $LN64@assign
  00071	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00074	eb 2d		 jmp	 SHORT $LN65@assign

; 1055 : 		else if (_Grow(_Num))

$LN16@assign:
  00076	85 ff		 test	 edi, edi
  00078	75 ef		 jne	 SHORT $LN87@assign
  0007a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0007d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00080	72 0f		 jb	 SHORT $LN58@assign
  00082	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00085	5f		 pop	 edi
  00086	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00089	8b c6		 mov	 eax, esi
  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	5b		 pop	 ebx

; 1061 : 		}

  0008e	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN58@assign:
  00091	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00098	8b c6		 mov	 eax, esi
  0009a	5e		 pop	 esi
  0009b	5d		 pop	 ebp
  0009c	5b		 pop	 ebx

; 1061 : 		}

  0009d	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN64@assign:
  000a0	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN65@assign:
  000a3	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000a6	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a9	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000ac	72 04		 jb	 SHORT $LN68@assign
  000ae	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b0	eb 02		 jmp	 SHORT $LN69@assign
$LN68@assign:
  000b2	8b c3		 mov	 eax, ebx
$LN69@assign:
  000b4	57		 push	 edi
  000b5	03 d5		 add	 edx, ebp
  000b7	52		 push	 edx
  000b8	51		 push	 ecx
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _memcpy_s
  000bf	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000c2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c9	72 02		 jb	 SHORT $LN82@assign
  000cb	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN82@assign:
  000cd	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN86@assign:
  000d1	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000d2	8b c6		 mov	 eax, esi
  000d4	5e		 pop	 esi
  000d5	5d		 pop	 ebp
  000d6	5b		 pop	 ebx

; 1061 : 		}

  000d7	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
$T154880 = -8						; size = 8
$T154879 = -8						; size = 8
$T154845 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1285 : 		{	// erase substring [_First, _Last)

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	8b e9		 mov	 ebp, ecx

; 1286 : 		size_type _Count = _Pdif(_First, begin());

  00007	8b 4d 18	 mov	 ecx, DWORD PTR [ebp+24]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0000f	72 05		 jb	 SHORT $LN7@erase@4
  00011	8b 7d 04	 mov	 edi, DWORD PTR [ebp+4]
  00014	eb 03		 jmp	 SHORT $LN8@erase@4
$LN7@erase@4:
  00016	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
$LN8@erase@4:
  00019	85 ff		 test	 edi, edi
  0001b	74 26		 je	 SHORT $LN11@erase@4
  0001d	8d 55 04	 lea	 edx, DWORD PTR [ebp+4]
  00020	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00023	72 04		 jb	 SHORT $LN21@erase@4
  00025	8b 02		 mov	 eax, DWORD PTR [edx]
  00027	eb 02		 jmp	 SHORT $LN22@erase@4
$LN21@erase@4:
  00029	8b c2		 mov	 eax, edx
$LN22@erase@4:
  0002b	3b c7		 cmp	 eax, edi
  0002d	77 14		 ja	 SHORT $LN11@erase@4
  0002f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00032	72 04		 jb	 SHORT $LN25@erase@4
  00034	8b 02		 mov	 eax, DWORD PTR [edx]
  00036	eb 02		 jmp	 SHORT $LN26@erase@4
$LN25@erase@4:
  00038	8b c2		 mov	 eax, edx
$LN26@erase@4:
  0003a	8b 4d 14	 mov	 ecx, DWORD PTR [ebp+20]
  0003d	03 c8		 add	 ecx, eax
  0003f	3b f9		 cmp	 edi, ecx
  00041	76 05		 jbe	 SHORT $LN12@erase@4
$LN11@erase@4:
  00043	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN12@erase@4:
  00048	8b 4c 24 24	 mov	 ecx, DWORD PTR __First$[esp+24]
  0004c	8b 44 24 20	 mov	 eax, DWORD PTR __First$[esp+20]
  00050	89 44 24 10	 mov	 DWORD PTR $T154845[esp+24], eax
  00054	8b f1		 mov	 esi, ecx
  00056	85 c9		 test	 ecx, ecx
  00058	75 04		 jne	 SHORT $LN29@erase@4
  0005a	33 db		 xor	 ebx, ebx
  0005c	eb 1e		 jmp	 SHORT $LN30@erase@4
$LN29@erase@4:
  0005e	83 f8 fc	 cmp	 eax, -4			; fffffffcH
  00061	74 15		 je	 SHORT $LN32@erase@4
  00063	85 c0		 test	 eax, eax
  00065	74 04		 je	 SHORT $LN31@erase@4
  00067	3b c5		 cmp	 eax, ebp
  00069	74 0d		 je	 SHORT $LN32@erase@4
$LN31@erase@4:
  0006b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00070	8b 4c 24 24	 mov	 ecx, DWORD PTR __First$[esp+24]
  00074	8b 44 24 20	 mov	 eax, DWORD PTR __First$[esp+20]
$LN32@erase@4:
  00078	2b f7		 sub	 esi, edi
  0007a	8b de		 mov	 ebx, esi
$LN30@erase@4:

; 1287 : 		erase(_Count, _Pdif(_Last, _First));

  0007c	8b 54 24 28	 mov	 edx, DWORD PTR __Last$[esp+20]
  00080	8b f9		 mov	 edi, ecx
  00082	8b 4c 24 2c	 mov	 ecx, DWORD PTR __Last$[esp+24]
  00086	89 44 24 10	 mov	 DWORD PTR $T154880[esp+24], eax
  0008a	89 54 24 10	 mov	 DWORD PTR $T154879[esp+24], edx
  0008e	8b f1		 mov	 esi, ecx
  00090	85 c9		 test	 ecx, ecx
  00092	74 14		 je	 SHORT $LN43@erase@4
$LN42@erase@4:
  00094	83 fa fc	 cmp	 edx, -4			; fffffffcH
  00097	74 0d		 je	 SHORT $LN45@erase@4
  00099	85 d2		 test	 edx, edx
  0009b	74 04		 je	 SHORT $LN44@erase@4
  0009d	3b d0		 cmp	 edx, eax
  0009f	74 05		 je	 SHORT $LN45@erase@4
$LN44@erase@4:
  000a1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN45@erase@4:
  000a6	2b f7		 sub	 esi, edi
$LN43@erase@4:
  000a8	56		 push	 esi
  000a9	53		 push	 ebx
  000aa	8b cd		 mov	 ecx, ebp
  000ac	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1288 : 		return (_STRING_ITERATOR(_Myptr() + _Count));

  000b1	83 7d 18 10	 cmp	 DWORD PTR [ebp+24], 16	; 00000010H
  000b5	72 05		 jb	 SHORT $LN55@erase@4
  000b7	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  000ba	eb 03		 jmp	 SHORT $LN56@erase@4
$LN55@erase@4:
  000bc	8d 45 04	 lea	 eax, DWORD PTR [ebp+4]
$LN56@erase@4:
  000bf	8b 74 24 1c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+20]
  000c3	55		 push	 ebp
  000c4	03 c3		 add	 eax, ebx
  000c6	50		 push	 eax
  000c7	8b ce		 mov	 ecx, esi
  000c9	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
  000ce	5f		 pop	 edi
  000cf	8b c6		 mov	 eax, esi
  000d1	5e		 pop	 esi
  000d2	5d		 pop	 ebp
  000d3	5b		 pop	 ebx

; 1289 : 		}

  000d4	83 c4 08	 add	 esp, 8
  000d7	c2 14 00	 ret	 20			; 00000014H
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Roff$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 5d 14	 cmp	 DWORD PTR [ebp+20], ebx
  00011	73 05		 jae	 SHORT $LN5@assign@2

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign@2:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7d 14	 mov	 edi, DWORD PTR [ebp+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fb		 sub	 edi, ebx
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign@2

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign@2:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f5		 cmp	 esi, ebp
  00029	75 1f		 jne	 SHORT $LN3@assign@2

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fb		 add	 edi, ebx
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00037	53		 push	 ebx
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign@2:

; 1055 : 		else if (_Grow(_Num))

  0004a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00050	76 05		 jbe	 SHORT $LN17@assign@2
  00052	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign@2:
  00057	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005a	3b c7		 cmp	 eax, edi
  0005c	73 1b		 jae	 SHORT $LN16@assign@2
  0005e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00061	50		 push	 eax
  00062	57		 push	 edi
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0006a	85 ff		 test	 edi, edi
$LN91@assign@2:
  0006c	76 7a		 jbe	 SHORT $LN90@assign@2

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006e	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  00072	72 33		 jb	 SHORT $LN66@assign@2
  00074	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  00077	eb 31		 jmp	 SHORT $LN67@assign@2

; 1055 : 		else if (_Grow(_Num))

$LN16@assign@2:
  00079	85 ff		 test	 edi, edi
  0007b	75 ef		 jne	 SHORT $LN91@assign@2
  0007d	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00080	83 f8 08	 cmp	 eax, 8
  00083	72 11		 jb	 SHORT $LN60@assign@2
  00085	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00088	33 c9		 xor	 ecx, ecx
  0008a	5f		 pop	 edi
  0008b	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0008e	8b c6		 mov	 eax, esi
  00090	5e		 pop	 esi
  00091	5d		 pop	 ebp
  00092	5b		 pop	 ebx

; 1061 : 		}

  00093	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN60@assign@2:
  00096	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00099	33 c9		 xor	 ecx, ecx
  0009b	5f		 pop	 edi
  0009c	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5d		 pop	 ebp
  000a3	5b		 pop	 ebx

; 1061 : 		}

  000a4	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN66@assign@2:
  000a7	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
$LN67@assign@2:
  000aa	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000ae	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  000b1	72 05		 jb	 SHORT $LN70@assign@2
  000b3	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  000b6	eb 02		 jmp	 SHORT $LN71@assign@2
$LN70@assign@2:
  000b8	8b c5		 mov	 eax, ebp
$LN71@assign@2:
  000ba	8b 54 24 18	 mov	 edx, DWORD PTR __Roff$[esp+12]
  000be	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	51		 push	 ecx
  000c6	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000c9	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000cc	52		 push	 edx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _memcpy_s
  000d3	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000d6	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000da	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000dd	72 03		 jb	 SHORT $LN86@assign@2
  000df	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN86@assign@2:
  000e2	33 c0		 xor	 eax, eax
  000e4	66 89 04 2b	 mov	 WORD PTR [ebx+ebp], ax
$LN90@assign@2:
  000e8	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000e9	8b c6		 mov	 eax, esi
  000eb	5e		 pop	 esi
  000ec	5d		 pop	 ebp
  000ed	5b		 pop	 ebx

; 1061 : 		}

  000ee	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?_Make_iter@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AViterator@12@Vconst_iterator@12@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Make_iter
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Make_iter@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AViterator@12@Vconst_iterator@12@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AViterator@12@Vconst_iterator@12@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Make_iter, COMDAT
; _this$ = ecx

; 575  : 		{	// make iterator from const_iterator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 576  : 		return (iterator(_TREE_ITERATOR(_Where._Ptr)));

  00004	8b 7c 24 14	 mov	 edi, DWORD PTR __Where$[esp+8]
  00008	85 f6		 test	 esi, esi
  0000a	75 05		 jne	 SHORT $LN5@Make_iter@3
  0000c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Make_iter@3:
  00011	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  00015	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00017	89 78 04	 mov	 DWORD PTR [eax+4], edi
  0001a	5f		 pop	 edi
  0001b	89 08		 mov	 DWORD PTR [eax], ecx
  0001d	5e		 pop	 esi

; 577  : 		}

  0001e	c2 0c 00	 ret	 12			; 0000000cH
?_Make_iter@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE?AViterator@12@Vconst_iterator@12@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Make_iter
_TEXT	ENDS
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::lower_bound
; Function compile flags: /Ogtpy
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1004 : 		return (_TREE_ITERATOR(_Lbound(_Keyval)));

  00000	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00003	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00006	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  0000a	75 1c		 jne	 SHORT $LN5@lower_boun
  0000c	56		 push	 esi
  0000d	8b 74 24 0c	 mov	 esi, DWORD PTR __Keyval$[esp]
  00011	8b 36		 mov	 esi, DWORD PTR [esi]
$LL6@lower_boun:
  00013	39 70 0c	 cmp	 DWORD PTR [eax+12], esi
  00016	73 05		 jae	 SHORT $LN4@lower_boun
  00018	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001b	eb 04		 jmp	 SHORT $LN3@lower_boun
$LN4@lower_boun:
  0001d	8b d0		 mov	 edx, eax
  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN3@lower_boun:
  00021	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  00025	74 ec		 je	 SHORT $LL6@lower_boun
  00027	5e		 pop	 esi
$LN5@lower_boun:
  00028	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0002c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0002e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00031	89 08		 mov	 DWORD PTR [eax], ecx

; 1005 : 		}

  00033	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::lower_bound
_TEXT	ENDS
PUBLIC	?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@XZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 641  : 		return (iterator(_Myfirst, this));

  00004	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00015	76 05		 jbe	 SHORT $LN6@begin@6
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@begin@6:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 642  : 		}

  00028	c2 04 00	 ret	 4
?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@XZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@XZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 651  : 		return (iterator(_Mylast, this));

  00004	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	39 5e 0c	 cmp	 DWORD PTR [esi+12], ebx
  00015	76 05		 jbe	 SHORT $LN6@end@6
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@end@6:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 652  : 		}

  00028	c2 04 00	 ret	 4
?end@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@XZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::end
_TEXT	ENDS
PUBLIC	??0?$_List_val@KV?$allocator@K@std@@@std@@QAE@V?$allocator@K@1@@Z ; std::_List_val<unsigned long,std::allocator<unsigned long> >::_List_val<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_List_val@KV?$allocator@K@std@@@std@@QAE@V?$allocator@K@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_val@KV?$allocator@K@std@@@std@@QAE@V?$allocator@K@1@@Z PROC ; std::_List_val<unsigned long,std::allocator<unsigned long> >::_List_val<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 85   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN18@List_val
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 86   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 85   : 		{	// construct base, and allocator from _Al

$LN18@List_val:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 86   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_val@KV?$allocator@K@std@@@std@@QAE@V?$allocator@K@1@@Z ENDP ; std::_List_val<unsigned long,std::allocator<unsigned long> >::_List_val<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?begin@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::begin, COMDAT
; _this$ = ecx

; 534  : 		return (iterator(_Nextnode(_Myhead), this));

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 535  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::end, COMDAT
; _this$ = ecx

; 544  : 		return (iterator(_Myhead, this));

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 545  : 		}

  0000e	c2 04 00	 ret	 4
?end@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::end
_TEXT	ENDS
PUBLIC	??0?$_List_val@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@V?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z ; std::_List_val<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_List_val<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_List_val@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@V?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_val@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@V?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z PROC ; std::_List_val<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_List_val<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >, COMDAT
; _this$ = ecx

; 85   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN18@List_val@2
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 86   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 85   : 		{	// construct base, and allocator from _Al

$LN18@List_val@2:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 86   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_val@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@V?$allocator@USecurityTokenInfo@CipherShed@@@1@@Z ENDP ; std::_List_val<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_List_val<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 ed		 test	 ebp, ebp
  0000b	74 46		 je	 SHORT $LN93@assign@3
  0000d	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 fa 10	 cmp	 edx, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN12@assign@3
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@3
$LN12@assign@3:
  0001c	8b c8		 mov	 ecx, eax
$LN13@assign@3:
  0001e	3b e9		 cmp	 ebp, ecx
  00020	72 31		 jb	 SHORT $LN93@assign@3
  00022	83 fa 10	 cmp	 edx, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN16@assign@3
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@3
$LN16@assign@3:
  0002b	8b c8		 mov	 ecx, eax
$LN17@assign@3:
  0002d	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00030	03 f9		 add	 edi, ecx
  00032	3b fd		 cmp	 edi, ebp
  00034	76 1d		 jbe	 SHORT $LN93@assign@3

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 fa 10	 cmp	 edx, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN20@assign@3
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@3:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b e8		 sub	 ebp, eax
  00044	55		 push	 ebp
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp

; 1080 : 		}

  00050	c2 08 00	 ret	 8
$LN93@assign@3:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00053	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  00057	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0005a	76 05		 jbe	 SHORT $LN27@assign@3
  0005c	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@3:
  00061	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00064	3b c7		 cmp	 eax, edi
  00066	73 20		 jae	 SHORT $LN26@assign@3
  00068	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0006b	52		 push	 edx
  0006c	57		 push	 edi
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00074	85 ff		 test	 edi, edi
$LN94@assign@3:
  00076	76 56		 jbe	 SHORT $LN90@assign@3

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  00078	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0007b	53		 push	 ebx
  0007c	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  0007f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00082	72 2c		 jb	 SHORT $LN74@assign@3
  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	eb 2a		 jmp	 SHORT $LN75@assign@3

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@3:
  00088	85 ff		 test	 edi, edi
  0008a	75 ea		 jne	 SHORT $LN94@assign@3
  0008c	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00092	72 0e		 jb	 SHORT $LN68@assign@3
  00094	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00097	5f		 pop	 edi
  00098	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5d		 pop	 ebp

; 1080 : 		}

  0009f	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN68@assign@3:
  000a2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000a5	5f		 pop	 edi
  000a6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  000a9	8b c6		 mov	 eax, esi
  000ab	5e		 pop	 esi
  000ac	5d		 pop	 ebp

; 1080 : 		}

  000ad	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN74@assign@3:
  000b0	8b c3		 mov	 eax, ebx
$LN75@assign@3:
  000b2	57		 push	 edi
  000b3	55		 push	 ebp
  000b4	51		 push	 ecx
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _memcpy_s
  000bb	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000be	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c2	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c5	72 02		 jb	 SHORT $LN88@assign@3
  000c7	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN88@assign@3:
  000c9	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
  000cd	5b		 pop	 ebx
$LN90@assign@3:
  000ce	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000cf	8b c6		 mov	 eax, esi
  000d1	5e		 pop	 esi
  000d2	5d		 pop	 ebp

; 1080 : 		}

  000d3	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 951  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 952  : 		if (_Right.size() < _Roff)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR __Roff$[esp+12]
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 7d 14	 cmp	 DWORD PTR [ebp+20], edi
  00011	73 05		 jae	 SHORT $LN5@append@3

; 953  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@append@3:

; 954  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 955  : 		if (_Num < _Count)

  0001b	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Count$[esp+12]
  0001f	2b c7		 sub	 eax, edi
  00021	3b c3		 cmp	 eax, ebx
  00023	73 02		 jae	 SHORT $LN4@append@3

; 956  : 			_Count = _Num;	// trim _Count to size

  00025	8b d8		 mov	 ebx, eax
$LN4@append@3:

; 957  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00027	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002a	83 c9 ff	 or	 ecx, -1
  0002d	2b c8		 sub	 ecx, eax
  0002f	3b cb		 cmp	 ecx, ebx
  00031	76 07		 jbe	 SHORT $LN2@append@3
  00033	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00036	3b d0		 cmp	 edx, eax
  00038	73 05		 jae	 SHORT $LN3@append@3
$LN2@append@3:

; 958  : 			_String_base::_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@3:

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 86 bd 00 00
	00		 jbe	 $LN91@append@3
  00047	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0004a	03 fb		 add	 edi, ebx
  0004c	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00052	76 05		 jbe	 SHORT $LN17@append@3
  00054	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@append@3:
  00059	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005c	3b c7		 cmp	 eax, edi
  0005e	73 1f		 jae	 SHORT $LN16@append@3
  00060	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00063	50		 push	 eax
  00064	57		 push	 edi
  00065	8b ce		 mov	 ecx, esi
  00067	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0006c	85 ff		 test	 edi, edi
$LN92@append@3:
  0006e	0f 86 90 00 00
	00		 jbe	 $LN91@append@3

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

  00074	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  00078	72 33		 jb	 SHORT $LN66@append@3
  0007a	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]
  0007d	eb 31		 jmp	 SHORT $LN67@append@3

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN16@append@3:
  0007f	85 ff		 test	 edi, edi
  00081	75 eb		 jne	 SHORT $LN92@append@3
  00083	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00086	83 f8 08	 cmp	 eax, 8
  00089	72 11		 jb	 SHORT $LN60@append@3
  0008b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008e	33 c9		 xor	 ecx, ecx
  00090	5f		 pop	 edi
  00091	66 89 08	 mov	 WORD PTR [eax], cx

; 965  : 			}
; 966  : 		return (*this);

  00094	8b c6		 mov	 eax, esi
  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	5b		 pop	 ebx

; 967  : 		}

  00099	c2 0c 00	 ret	 12			; 0000000cH

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN60@append@3:
  0009c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009f	33 c9		 xor	 ecx, ecx
  000a1	5f		 pop	 edi
  000a2	66 89 08	 mov	 WORD PTR [eax], cx

; 965  : 			}
; 966  : 		return (*this);

  000a5	8b c6		 mov	 eax, esi
  000a7	5e		 pop	 esi
  000a8	5d		 pop	 ebp
  000a9	5b		 pop	 ebx

; 967  : 		}

  000aa	c2 0c 00	 ret	 12			; 0000000cH

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

$LN66@append@3:
  000ad	83 c5 04	 add	 ebp, 4
$LN67@append@3:
  000b0	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000b3	83 f8 08	 cmp	 eax, 8
  000b6	72 05		 jb	 SHORT $LN70@append@3
  000b8	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000bb	eb 03		 jmp	 SHORT $LN71@append@3
$LN70@append@3:
  000bd	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN71@append@3:
  000c0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000c3	03 db		 add	 ebx, ebx
  000c5	53		 push	 ebx
  000c6	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Roff$[esp+16]
  000ca	2b c1		 sub	 eax, ecx
  000cc	8d 5c 5d 00	 lea	 ebx, DWORD PTR [ebp+ebx*2]
  000d0	53		 push	 ebx
  000d1	03 c0		 add	 eax, eax
  000d3	50		 push	 eax
  000d4	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  000d7	52		 push	 edx
  000d8	e8 00 00 00 00	 call	 _memcpy_s
  000dd	83 c4 10	 add	 esp, 16			; 00000010H

; 964  : 			_Eos(_Num);

  000e0	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000e4	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000e7	72 12		 jb	 SHORT $LN86@append@3
  000e9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ec	33 c9		 xor	 ecx, ecx
  000ee	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
  000f2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000f3	8b c6		 mov	 eax, esi
  000f5	5e		 pop	 esi
  000f6	5d		 pop	 ebp
  000f7	5b		 pop	 ebx

; 967  : 		}

  000f8	c2 0c 00	 ret	 12			; 0000000cH

; 964  : 			_Eos(_Num);

$LN86@append@3:
  000fb	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000fe	33 c9		 xor	 ecx, ecx
  00100	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
$LN91@append@3:
  00104	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  00105	8b c6		 mov	 eax, esi
  00107	5e		 pop	 esi
  00108	5d		 pop	 ebp
  00109	5b		 pop	 ebx

; 967  : 		}

  0010a	c2 0c 00	 ret	 12			; 0000000cH
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00008	57		 push	 edi
  00009	85 c9		 test	 ecx, ecx
  0000b	74 49		 je	 SHORT $LN97@assign@4
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 08	 cmp	 edi, 8
  00016	72 04		 jb	 SHORT $LN12@assign@4
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@4
$LN12@assign@4:
  0001c	8b d0		 mov	 edx, eax
$LN13@assign@4:
  0001e	3b ca		 cmp	 ecx, edx
  00020	72 34		 jb	 SHORT $LN97@assign@4
  00022	83 ff 08	 cmp	 edi, 8
  00025	72 04		 jb	 SHORT $LN16@assign@4
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@4
$LN16@assign@4:
  0002b	8b d0		 mov	 edx, eax
$LN17@assign@4:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00033	3b d1		 cmp	 edx, ecx
  00035	76 1f		 jbe	 SHORT $LN97@assign@4

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00037	83 ff 08	 cmp	 edi, 8
  0003a	72 02		 jb	 SHORT $LN20@assign@4
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@4:
  0003e	8b 54 24 14	 mov	 edx, DWORD PTR __Count$[esp+8]
  00042	2b c8		 sub	 ecx, eax
  00044	52		 push	 edx
  00045	d1 f9		 sar	 ecx, 1
  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 1080 : 		}

  00053	c2 08 00	 ret	 8
$LN97@assign@4:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00056	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0005a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00060	76 05		 jbe	 SHORT $LN27@assign@4
  00062	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@4:
  00067	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0006a	3b c7		 cmp	 eax, edi
  0006c	73 21		 jae	 SHORT $LN26@assign@4
  0006e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00071	50		 push	 eax
  00072	57		 push	 edi
  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0007a	85 ff		 test	 edi, edi
$LN98@assign@4:
  0007c	76 67		 jbe	 SHORT $LN94@assign@4

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  0007e	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00081	55		 push	 ebp
  00082	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  00085	83 f9 08	 cmp	 ecx, 8
  00088	72 31		 jb	 SHORT $LN76@assign@4
  0008a	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  0008d	eb 2e		 jmp	 SHORT $LN77@assign@4

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@4:
  0008f	85 ff		 test	 edi, edi
  00091	75 e9		 jne	 SHORT $LN98@assign@4
  00093	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00096	83 f8 08	 cmp	 eax, 8
  00099	72 10		 jb	 SHORT $LN70@assign@4
  0009b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009e	33 c9		 xor	 ecx, ecx
  000a0	5f		 pop	 edi
  000a1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000a4	8b c6		 mov	 eax, esi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx

; 1080 : 		}

  000a8	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN70@assign@4:
  000ab	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ae	33 c9		 xor	 ecx, ecx
  000b0	5f		 pop	 edi
  000b1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000b4	8b c6		 mov	 eax, esi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx

; 1080 : 		}

  000b8	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN76@assign@4:
  000bb	8b c5		 mov	 eax, ebp
$LN77@assign@4:
  000bd	8b 54 24 14	 mov	 edx, DWORD PTR __Ptr$[esp+12]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	52		 push	 edx
  000c6	03 c9		 add	 ecx, ecx
  000c8	51		 push	 ecx
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000d2	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d9	72 03		 jb	 SHORT $LN92@assign@4
  000db	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN92@assign@4:
  000de	33 d2		 xor	 edx, edx
  000e0	66 89 14 2b	 mov	 WORD PTR [ebx+ebp], dx
  000e4	5d		 pop	 ebp
$LN94@assign@4:
  000e5	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx

; 1080 : 		}

  000ea	c2 08 00	 ret	 8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@V?$_Vector_const_iterator@EV?$allocator@E@std@@@2@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Make_iter
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@V?$_Vector_const_iterator@EV?$allocator@E@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@V?$_Vector_const_iterator@EV?$allocator@E@std@@@2@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

  00000	56		 push	 esi
  00001	57		 push	 edi

; 661  : 		return (iterator(_Where._Myptr, this));

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0000e	85 f6		 test	 esi, esi
  00010	74 0e		 je	 SHORT $LN5@Make_iter@4
  00012	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
  00016	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  00019	77 05		 ja	 SHORT $LN5@Make_iter@4
  0001b	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  0001e	76 09		 jbe	 SHORT $LN6@Make_iter@4
$LN5@Make_iter@4:
  00020	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00025	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
$LN6@Make_iter@4:
  00029	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002b	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0002e	89 0f		 mov	 DWORD PTR [edi], ecx
  00030	8b c7		 mov	 eax, edi
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi

; 662  : 		}

  00034	c2 0c 00	 ret	 12			; 0000000cH
?_Make_iter@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@V?$_Vector_const_iterator@EV?$allocator@E@std@@@2@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Make_iter
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 971  : 
; 972  :  #if _HAS_ITERATOR_DEBUGGING
; 973  : 		if (_Count != 0)
; 974  : 			_DEBUG_POINTER(_Ptr);
; 975  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 976  : 
; 977  : 		if (_Inside(_Ptr))

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 46		 je	 SHORT $LN4@append@4
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 10	 cmp	 edi, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN14@append@4
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN15@append@4
$LN14@append@4:
  0001c	8b c8		 mov	 ecx, eax
$LN15@append@4:
  0001e	3b d1		 cmp	 edx, ecx
  00020	72 31		 jb	 SHORT $LN4@append@4
  00022	83 ff 10	 cmp	 edi, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN18@append@4
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN19@append@4
$LN18@append@4:
  0002b	8b c8		 mov	 ecx, eax
$LN19@append@4:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	03 d9		 add	 ebx, ecx
  00032	3b da		 cmp	 ebx, edx
  00034	76 1d		 jbe	 SHORT $LN4@append@4

; 978  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 ff 10	 cmp	 edi, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN22@append@4
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN22@append@4:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b d0		 sub	 edx, eax
  00044	52		 push	 edx
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx

; 989  : 		}

  00050	c2 08 00	 ret	 8
$LN4@append@4:

; 979  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	83 ca ff	 or	 edx, -1
  00059	55		 push	 ebp
  0005a	8b 6c 24 18	 mov	 ebp, DWORD PTR __Count$[esp+12]
  0005e	2b d0		 sub	 edx, eax
  00060	3b d5		 cmp	 edx, ebp
  00062	76 07		 jbe	 SHORT $LN2@append@4
  00064	8d 0c 28	 lea	 ecx, DWORD PTR [eax+ebp]
  00067	3b c8		 cmp	 ecx, eax
  00069	73 05		 jae	 SHORT $LN3@append@4
$LN2@append@4:

; 980  : 			_String_base::_Xlen();	// result too long

  0006b	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@4:

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00070	85 ed		 test	 ebp, ebp
  00072	0f 86 87 00 00
	00		 jbe	 $LN92@append@4
  00078	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0007b	03 fd		 add	 edi, ebp
  0007d	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00080	76 05		 jbe	 SHORT $LN29@append@4
  00082	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN29@append@4:
  00087	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0008a	3b c7		 cmp	 eax, edi
  0008c	73 1f		 jae	 SHORT $LN28@append@4
  0008e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00091	52		 push	 edx
  00092	57		 push	 edi
  00093	8b ce		 mov	 ecx, esi
  00095	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0009a	85 ff		 test	 edi, edi
$LN95@append@4:
  0009c	76 61		 jbe	 SHORT $LN92@append@4

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

  0009e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000a1	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a4	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a7	72 2e		 jb	 SHORT $LN76@append@4
  000a9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000ab	eb 2c		 jmp	 SHORT $LN77@append@4

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN28@append@4:
  000ad	85 ff		 test	 edi, edi
  000af	75 eb		 jne	 SHORT $LN95@append@4
  000b1	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000b4	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b7	72 0f		 jb	 SHORT $LN70@append@4
  000b9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000bc	5d		 pop	 ebp
  000bd	5f		 pop	 edi
  000be	c6 00 00	 mov	 BYTE PTR [eax], 0

; 987  : 			}
; 988  : 		return (*this);

  000c1	8b c6		 mov	 eax, esi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx

; 989  : 		}

  000c5	c2 08 00	 ret	 8

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN70@append@4:
  000c8	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000cb	5d		 pop	 ebp
  000cc	5f		 pop	 edi
  000cd	c6 00 00	 mov	 BYTE PTR [eax], 0

; 987  : 			}
; 988  : 		return (*this);

  000d0	8b c6		 mov	 eax, esi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx

; 989  : 		}

  000d4	c2 08 00	 ret	 8

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

$LN76@append@4:
  000d7	8b d3		 mov	 edx, ebx
$LN77@append@4:
  000d9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000dc	55		 push	 ebp
  000dd	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  000e1	2b c1		 sub	 eax, ecx
  000e3	55		 push	 ebp
  000e4	50		 push	 eax
  000e5	03 ca		 add	 ecx, edx
  000e7	51		 push	 ecx
  000e8	e8 00 00 00 00	 call	 _memcpy_s
  000ed	83 c4 10	 add	 esp, 16			; 00000010H

; 986  : 			_Eos(_Num);

  000f0	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000f4	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000f7	72 02		 jb	 SHORT $LN90@append@4
  000f9	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN90@append@4:
  000fb	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN92@append@4:
  000ff	5d		 pop	 ebp
  00100	5f		 pop	 edi

; 987  : 			}
; 988  : 		return (*this);

  00101	8b c6		 mov	 eax, esi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx

; 989  : 		}

  00105	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	??0?$_Tree_ptr@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ; std::_Tree_ptr<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree_ptr<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??0?$_Tree_ptr@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_ptr@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z PROC ; std::_Tree_ptr<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree_ptr<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >, COMDAT
; _this$ = ecx

; 78   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN18@Tree_ptr
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 79   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 08 00	 ret	 8

; 78   : 		{	// construct base, and allocator from _Al

$LN18@Tree_ptr:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 79   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 08 00	 ret	 8
??0?$_Tree_ptr@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ENDP ; std::_Tree_ptr<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree_ptr<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@IAEPAKV?$_Vector_const_iterator@KV?$allocator@K@std@@@1@0PAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ucopy<std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@IAEPAKV?$_Vector_const_iterator@KV?$allocator@K@std@@@1@0PAK@Z
_TEXT	SEGMENT
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@IAEPAKV?$_Vector_const_iterator@KV?$allocator@K@std@@@1@0PAK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ucopy<std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Last$[esp]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __First$[esp]
  00008	2b c2		 sub	 eax, edx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	57		 push	 edi
  0000f	8b 7c 24 1c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00013	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0001a	8d 34 39	 lea	 esi, DWORD PTR [ecx+edi]
  0001d	85 c0		 test	 eax, eax
  0001f	76 0c		 jbe	 SHORT $LN22@Ucopy@2
  00021	51		 push	 ecx
  00022	52		 push	 edx
  00023	51		 push	 ecx
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 _memmove_s
  0002a	83 c4 10	 add	 esp, 16			; 00000010H
$LN22@Ucopy@2:
  0002d	5f		 pop	 edi
  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi

; 1142 : 		}

  00031	c2 14 00	 ret	 20			; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@IAEPAKV?$_Vector_const_iterator@KV?$allocator@K@std@@@1@0PAK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ucopy<std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAEIEV?$allocator@E@std@@@stdext@@YAXPAEIABEAAV?$allocator@E@std@@@Z ; stdext::unchecked_uninitialized_fill_n<unsigned char *,unsigned int,unsigned char,std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAEIEV?$allocator@E@std@@@stdext@@YAXPAEIABEAAV?$allocator@E@std@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAEIEV?$allocator@E@std@@@stdext@@YAXPAEIABEAAV?$allocator@E@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<unsigned char *,unsigned int,unsigned char,std::allocator<unsigned char> >, COMDAT

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00008	85 c0		 test	 eax, eax
  0000a	76 10		 jbe	 SHORT $LN17@unchecked_@7
  0000c	56		 push	 esi
  0000d	8b 74 24 10	 mov	 esi, DWORD PTR __Val$[esp]
$LL19@unchecked_@7:
  00011	8a 16		 mov	 dl, BYTE PTR [esi]
  00013	88 11		 mov	 BYTE PTR [ecx], dl
  00015	48		 dec	 eax
  00016	41		 inc	 ecx
  00017	85 c0		 test	 eax, eax
  00019	77 f6		 ja	 SHORT $LL19@unchecked_@7
  0001b	5e		 pop	 esi
$LN17@unchecked_@7:

; 943  : 	}

  0001c	c3		 ret	 0
??$unchecked_uninitialized_fill_n@PAEIEV?$allocator@E@std@@@stdext@@YAXPAEIABEAAV?$allocator@E@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<unsigned char *,unsigned int,unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAKIKV?$allocator@K@std@@@stdext@@YAXPAKIABKAAV?$allocator@K@std@@@Z ; stdext::unchecked_uninitialized_fill_n<unsigned long *,unsigned int,unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_uninitialized_fill_n@PAKIKV?$allocator@K@std@@@stdext@@YAXPAKIABKAAV?$allocator@K@std@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAKIKV?$allocator@K@std@@@stdext@@YAXPAKIABKAAV?$allocator@K@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<unsigned long *,unsigned int,unsigned long,std::allocator<unsigned long> >, COMDAT

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00008	85 c0		 test	 eax, eax
  0000a	76 12		 jbe	 SHORT $LN17@unchecked_@8
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$LL19@unchecked_@8:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 31		 mov	 DWORD PTR [ecx], esi
  00015	48		 dec	 eax
  00016	83 c1 04	 add	 ecx, 4
  00019	85 c0		 test	 eax, eax
  0001b	77 f4		 ja	 SHORT $LL19@unchecked_@8
  0001d	5e		 pop	 esi
$LN17@unchecked_@8:

; 943  : 	}

  0001e	c3		 ret	 0
??$unchecked_uninitialized_fill_n@PAKIKV?$allocator@K@std@@@stdext@@YAXPAKIABKAAV?$allocator@K@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<unsigned long *,unsigned int,unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$_Umove@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove<unsigned long *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove<unsigned long *>, COMDAT
; _this$ = ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	2b c2		 sub	 eax, edx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	57		 push	 edi
  0000f	8b 7c 24 14	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00013	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0001a	8d 34 39	 lea	 esi, DWORD PTR [ecx+edi]
  0001d	85 c0		 test	 eax, eax
  0001f	76 0c		 jbe	 SHORT $LN32@Umove@2
  00021	51		 push	 ecx
  00022	52		 push	 edx
  00023	51		 push	 ecx
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 _memmove_s
  0002a	83 c4 10	 add	 esp, 16			; 00000010H
$LN32@Umove@2:
  0002d	5f		 pop	 edi
  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi

; 1149 : 		}

  00031	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove<unsigned long *>
_TEXT	ENDS
PUBLIC	??1_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node::~_Node
; Function compile flags: /Ogtpy
;	COMDAT ??1_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node::~_Node, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??1SecurityTokenInfo@CipherShed@@QAE@XZ
??1_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node::~_Node
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 931  : 		return (append(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 932  : 		}

  0000e	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 992  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 993  : 		_DEBUG_POINTER(_Ptr);
; 994  : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@append@5:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@append@5
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 995  : 		}

  00022	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	??_GSecurityTokenKeyfile@CipherShed@@QAEPAXI@Z	; CipherShed::SecurityTokenKeyfile::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GSecurityTokenKeyfile@CipherShed@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSecurityTokenKeyfile@CipherShed@@QAEPAXI@Z PROC	; CipherShed::SecurityTokenKeyfile::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1SecurityTokenKeyfile@CipherShed@@QAE@XZ
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@29
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@29:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GSecurityTokenKeyfile@CipherShed@@QAEPAXI@Z ENDP	; CipherShed::SecurityTokenKeyfile::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0SecurityTokenKeyfile@CipherShed@@QAE@XZ	; CipherShed::SecurityTokenKeyfile::SecurityTokenKeyfile
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.h
;	COMDAT ??0SecurityTokenKeyfile@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0SecurityTokenKeyfile@CipherShed@@QAE@XZ PROC		; CipherShed::SecurityTokenKeyfile::SecurityTokenKeyfile, COMDAT
; _this$ = ecx

; 72   : 		SecurityTokenKeyfile () { }

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00007	56		 push	 esi
  00008	be 07 00 00 00	 mov	 esi, 7
  0000d	89 70 1c	 mov	 DWORD PTR [eax+28], esi
  00010	33 d2		 xor	 edx, edx
  00012	66 89 50 08	 mov	 WORD PTR [eax+8], dx
  00016	89 48 34	 mov	 DWORD PTR [eax+52], ecx
  00019	ba 0f 00 00 00	 mov	 edx, 15			; 0000000fH
  0001e	89 50 38	 mov	 DWORD PTR [eax+56], edx
  00021	88 48 24	 mov	 BYTE PTR [eax+36], cl
  00024	89 70 60	 mov	 DWORD PTR [eax+96], esi
  00027	89 48 5c	 mov	 DWORD PTR [eax+92], ecx
  0002a	33 f6		 xor	 esi, esi
  0002c	66 89 70 4c	 mov	 WORD PTR [eax+76], si
  00030	89 50 7c	 mov	 DWORD PTR [eax+124], edx
  00033	89 48 78	 mov	 DWORD PTR [eax+120], ecx
  00036	88 48 68	 mov	 BYTE PTR [eax+104], cl
  00039	5e		 pop	 esi
  0003a	c3		 ret	 0
??0SecurityTokenKeyfile@CipherShed@@QAE@XZ ENDP		; CipherShed::SecurityTokenKeyfile::SecurityTokenKeyfile
_TEXT	ENDS
PUBLIC	??1?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::~ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAE@XZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::~ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN10@ContainerF
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN10@ContainerF:
  00013	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00016	50		 push	 eax
  00017	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001e	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00025	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00031	83 c4 04	 add	 esp, 4
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0003a	5e		 pop	 esi
  0003b	c3		 ret	 0
??1?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAE@XZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::~ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 722  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 723  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 724  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
$T158461 = -8						; size = 8
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear, COMDAT
; _this$ = ecx

; 1292 : 		{	// erase all

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 1293 : 		erase(begin(), end());

  00009	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  0000c	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  0000f	83 fa 10	 cmp	 edx, 16			; 00000010H
  00012	72 04		 jb	 SHORT $LN7@clear@2
  00014	8b 06		 mov	 eax, DWORD PTR [esi]
  00016	eb 02		 jmp	 SHORT $LN8@clear@2
$LN7@clear@2:
  00018	8b c6		 mov	 eax, esi
$LN8@clear@2:
  0001a	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0001d	8d 2c 01	 lea	 ebp, DWORD PTR [ecx+eax]
  00020	85 ed		 test	 ebp, ebp
  00022	74 20		 je	 SHORT $LN11@clear@2
  00024	83 fa 10	 cmp	 edx, 16			; 00000010H
  00027	72 04		 jb	 SHORT $LN21@clear@2
  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	eb 02		 jmp	 SHORT $LN22@clear@2
$LN21@clear@2:
  0002d	8b c6		 mov	 eax, esi
$LN22@clear@2:
  0002f	3b c5		 cmp	 eax, ebp
  00031	77 11		 ja	 SHORT $LN11@clear@2
  00033	83 fa 10	 cmp	 edx, 16			; 00000010H
  00036	72 04		 jb	 SHORT $LN25@clear@2
  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	eb 02		 jmp	 SHORT $LN26@clear@2
$LN25@clear@2:
  0003c	8b c6		 mov	 eax, esi
$LN26@clear@2:
  0003e	03 c8		 add	 ecx, eax
  00040	3b e9		 cmp	 ebp, ecx
  00042	76 05		 jbe	 SHORT $LN12@clear@2
$LN11@clear@2:
  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN12@clear@2:
  00049	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  0004c	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0004f	72 04		 jb	 SHORT $LN31@clear@2
  00051	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00053	eb 02		 jmp	 SHORT $LN32@clear@2
$LN31@clear@2:
  00055	8b de		 mov	 ebx, esi
$LN32@clear@2:
  00057	85 db		 test	 ebx, ebx
  00059	74 1f		 je	 SHORT $LN35@clear@2
  0005b	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0005e	72 04		 jb	 SHORT $LN45@clear@2
  00060	8b 06		 mov	 eax, DWORD PTR [esi]
  00062	eb 02		 jmp	 SHORT $LN46@clear@2
$LN45@clear@2:
  00064	8b c6		 mov	 eax, esi
$LN46@clear@2:
  00066	3b c3		 cmp	 eax, ebx
  00068	77 10		 ja	 SHORT $LN35@clear@2
  0006a	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0006d	72 02		 jb	 SHORT $LN49@clear@2
  0006f	8b 36		 mov	 esi, DWORD PTR [esi]
$LN49@clear@2:
  00071	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00074	03 c6		 add	 eax, esi
  00076	3b d8		 cmp	 ebx, eax
  00078	76 05		 jbe	 SHORT $LN36@clear@2
$LN35@clear@2:
  0007a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN36@clear@2:
  0007f	55		 push	 ebp
  00080	57		 push	 edi
  00081	53		 push	 ebx
  00082	57		 push	 edi
  00083	8d 4c 24 20	 lea	 ecx, DWORD PTR $T158461[esp+40]
  00087	51		 push	 ecx
  00088	8b cf		 mov	 ecx, edi
  0008a	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5d		 pop	 ebp
  00092	5b		 pop	 ebx

; 1294 : 		}

  00093	83 c4 08	 add	 esp, 8
  00096	c3		 ret	 0
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 722  : 		_Tidy();
; 723  : 		assign(_Right, 0, npos);

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR __Right$[esp]
  00007	33 c0		 xor	 eax, eax
  00009	6a ff		 push	 -1
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	8b ce		 mov	 ecx, esi
  0001d	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 724  : 		}

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::find
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABK@Z
_TEXT	SEGMENT
__Where$ = -16						; size = 8
$T158741 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::find, COMDAT
; _this$ = ecx

; 977  : 		{	// find an element in mutable sequence that matches _Keyval

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	55		 push	 ebp

; 978  : 		iterator _Where = lower_bound(_Keyval);

  00004	8b 6c 24 1c	 mov	 ebp, DWORD PTR __Keyval$[esp+16]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0000e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00011	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  00015	57		 push	 edi
  00016	8b f9		 mov	 edi, ecx
  00018	75 1a		 jne	 SHORT $LN9@find@6
  0001a	8b 4d 00	 mov	 ecx, DWORD PTR [ebp]
  0001d	8d 49 00	 npad	 3
$LL10@find@6:
  00020	39 48 0c	 cmp	 DWORD PTR [eax+12], ecx
  00023	73 05		 jae	 SHORT $LN8@find@6
  00025	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00028	eb 04		 jmp	 SHORT $LN7@find@6
$LN8@find@6:
  0002a	8b f8		 mov	 edi, eax
  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@find@6:
  0002e	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  00032	74 ec		 je	 SHORT $LL10@find@6
$LN9@find@6:
  00034	8b 06		 mov	 eax, DWORD PTR [esi]
  00036	53		 push	 ebx

; 979  : 		return (_Where == end()
; 980  : 			|| _DEBUG_LT_PRED(this->comp,
; 981  : 				_Keyval, _Key(_Where._Mynode()))
; 982  : 					? end() : _Where);

  00037	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
  0003a	89 7c 24 14	 mov	 DWORD PTR __Where$[esp+36], edi
  0003e	89 44 24 10	 mov	 DWORD PTR __Where$[esp+32], eax
  00042	85 c0		 test	 eax, eax
  00044	74 04		 je	 SHORT $LN59@find@6
  00046	3b c0		 cmp	 eax, eax
  00048	74 05		 je	 SHORT $LN60@find@6
$LN59@find@6:
  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN60@find@6:
  0004f	3b fb		 cmp	 edi, ebx
  00051	5b		 pop	 ebx
  00052	74 0e		 je	 SHORT $LN3@find@6
  00054	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  00057	3b 47 0c	 cmp	 eax, DWORD PTR [edi+12]
  0005a	72 06		 jb	 SHORT $LN3@find@6
  0005c	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Where$[esp+28]
  00060	eb 11		 jmp	 SHORT $LN4@find@6
$LN3@find@6:
  00062	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00065	8b 16		 mov	 edx, DWORD PTR [esi]
  00067	89 4c 24 18	 mov	 DWORD PTR $T158741[esp+32], ecx
  0006b	89 54 24 14	 mov	 DWORD PTR $T158741[esp+28], edx
  0006f	8d 4c 24 14	 lea	 ecx, DWORD PTR $T158741[esp+28]
$LN4@find@6:
  00073	8b 11		 mov	 edx, DWORD PTR [ecx]
  00075	8b 44 24 20	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+24]
  00079	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	89 10		 mov	 DWORD PTR [eax], edx
  00080	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00083	5d		 pop	 ebp

; 983  : 		}

  00084	83 c4 10	 add	 esp, 16			; 00000010H
  00087	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::find
_TEXT	ENDS
PUBLIC	?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::front
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ
_TEXT	SEGMENT
?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::front, COMDAT
; _this$ = ecx

; 789  : 		{	// return first element of mutable sequence

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 790  : 		return (*begin());

  00004	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00007	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0000a	76 05		 jbe	 SHORT $LN8@front@3
  0000c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@front@3:
  00011	8b 36		 mov	 esi, DWORD PTR [esi]
  00013	85 f6		 test	 esi, esi
  00015	75 14		 jne	 SHORT $LN33@front@3
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN30@front@3:
  0001c	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0001f	72 05		 jb	 SHORT $LN34@front@3
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN34@front@3:
  00026	8b c7		 mov	 eax, edi
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 791  : 		}

  0002a	c3		 ret	 0
$LN33@front@3:

; 790  : 		return (*begin());

  0002b	8b 36		 mov	 esi, DWORD PTR [esi]
  0002d	eb ed		 jmp	 SHORT $LN30@front@3
?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::front
_TEXT	ENDS
PUBLIC	??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ	; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 436  : 		{	// construct empty list

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	6a 04		 push	 4
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	83 c4 04	 add	 esp, 4
  00032	85 c0		 test	 eax, eax
  00034	74 04		 je	 SHORT $LN23@list
  00036	89 30		 mov	 DWORD PTR [eax], esi
  00038	eb 02		 jmp	 SHORT $LN24@list
$LN23@list:
  0003a	33 c0		 xor	 eax, eax
$LN24@list:
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	8b ce		 mov	 ecx, esi
  00040	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00048	e8 00 00 00 00	 call	 ?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode
  0004d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00050	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 437  : 		}

  00057	8b c6		 mov	 eax, esi
  00059	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5e		 pop	 esi
  00066	83 c4 10	 add	 esp, 16			; 00000010H
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_val@KV?$allocator@K@std@@@std@@QAE@XZ
__ehhandler$??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >
PUBLIC	??1?$list@KV?$allocator@K@std@@@std@@QAE@XZ	; std::list<unsigned long,std::allocator<unsigned long> >::~list<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$list@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::list<unsigned long,std::allocator<unsigned long> >::~list<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 520  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 521  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy

; 522  : 		}

  00008	8b 06		 mov	 eax, DWORD PTR [esi]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
  00013	5e		 pop	 esi
  00014	c3		 ret	 0
??1?$list@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::~list<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >, COMDAT
; _this$ = ecx

; 436  : 		{	// construct empty list

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	6a 04		 push	 4
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	83 c4 04	 add	 esp, 4
  00032	85 c0		 test	 eax, eax
  00034	74 04		 je	 SHORT $LN23@list@2
  00036	89 30		 mov	 DWORD PTR [eax], esi
  00038	eb 02		 jmp	 SHORT $LN24@list@2
$LN23@list@2:
  0003a	33 c0		 xor	 eax, eax
$LN24@list@2:
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	8b ce		 mov	 ecx, esi
  00040	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00048	e8 00 00 00 00	 call	 ?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@XZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Buynode
  0004d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00050	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 437  : 		}

  00057	8b c6		 mov	 eax, esi
  00059	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5e		 pop	 esi
  00066	83 c4 10	 add	 esp, 16			; 00000010H
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_val@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ
__ehhandler$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
PUBLIC	??1?$_Tree_val@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::~_Tree_val<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Tree_val@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_val@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::~_Tree_val<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_Tree_val@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::~_Tree_val<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
__Al$ = 20						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 625  : #if _HAS_ITERATOR_DEBUGGING
; 626  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 627  : 			{
; 628  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 629  : 			}
; 630  : #endif
; 631  : 		_Tidy();
; 632  : 		assign(_Right, _Roff, _Count);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Roff$[esp]
  0000b	33 c0		 xor	 eax, eax
  0000d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00010	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00017	88 46 04	 mov	 BYTE PTR [esi+4], al
  0001a	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 633  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	c2 10 00	 ret	 16			; 00000010H
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1041 : 		return (assign(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1042 : 		}

  0000e	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@5:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@assign@5
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 1086 : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
__Al$ = 20						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 625  : #if _HAS_ITERATOR_DEBUGGING
; 626  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 627  : 			{
; 628  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 629  : 			}
; 630  : #endif
; 631  : 		_Tidy();
; 632  : 		assign(_Right, _Roff, _Count);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Roff$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 10	 mov	 ecx, DWORD PTR __Count$[esp]
  0000b	33 c0		 xor	 eax, eax
  0000d	51		 push	 ecx
  0000e	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00015	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001c	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00020	8b 44 24 0c	 mov	 eax, DWORD PTR __Right$[esp+4]
  00024	52		 push	 edx
  00025	50		 push	 eax
  00026	8b ce		 mov	 ecx, esi
  00028	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 633  : 		}

  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	c2 10 00	 ret	 16			; 00000010H
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 946  : 		return (append(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 947  : 		}

  0000e	c2 04 00	 ret	 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1041 : 		return (assign(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 1042 : 		}

  0000e	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@6:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@assign@6
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 1086 : 		}

  00028	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?erase@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@V?$_Vector_const_iterator@EV?$allocator@E@std@@@2@0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?erase@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@V?$_Vector_const_iterator@EV?$allocator@E@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@V?$_Vector_const_iterator@EV?$allocator@E@std@@@2@0@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

  00000	53		 push	 ebx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  0000f	85 f6		 test	 esi, esi
  00011	74 0e		 je	 SHORT $LN8@erase@5
  00013	8b 44 24 18	 mov	 eax, DWORD PTR __First_arg$[esp+12]
  00017	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  0001a	77 05		 ja	 SHORT $LN8@erase@5
  0001c	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  0001f	76 09		 jbe	 SHORT $LN9@erase@5
$LN8@erase@5:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00026	8b 44 24 18	 mov	 eax, DWORD PTR __First_arg$[esp+12]
$LN9@erase@5:

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

  0002a	8b 7c 24 20	 mov	 edi, DWORD PTR __Last_arg$[esp+12]
  0002e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00030	89 0b		 mov	 DWORD PTR [ebx], ecx
  00032	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00035	39 7e 0c	 cmp	 DWORD PTR [esi+12], edi
  00038	77 05		 ja	 SHORT $LN24@erase@5
  0003a	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0003d	76 09		 jbe	 SHORT $LN25@erase@5
$LN24@erase@5:
  0003f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00044	8b 7c 24 20	 mov	 edi, DWORD PTR __Last_arg$[esp+12]
$LN25@erase@5:

; 1031 : 
; 1032 : 		if (_First != _Last)

  00048	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004c	85 c0		 test	 eax, eax
  0004e	74 04		 je	 SHORT $LN38@erase@5
  00050	3b c1		 cmp	 eax, ecx
  00052	74 05		 je	 SHORT $LN39@erase@5
$LN38@erase@5:
  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN39@erase@5:
  00059	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0005c	3b cf		 cmp	 ecx, edi
  0005e	74 1d		 je	 SHORT $LN63@erase@5

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

  00060	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00063	2b c7		 sub	 eax, edi
  00065	55		 push	 ebp
  00066	8d 2c 08	 lea	 ebp, DWORD PTR [eax+ecx]
  00069	85 c0		 test	 eax, eax
  0006b	7e 0c		 jle	 SHORT $LN60@erase@5
  0006d	50		 push	 eax
  0006e	57		 push	 edi
  0006f	50		 push	 eax
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 _memmove_s
  00076	83 c4 10	 add	 esp, 16			; 00000010H
$LN60@erase@5:

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);
; 1049 : 			_Mylast = _Ptr;

  00079	89 6e 10	 mov	 DWORD PTR [esi+16], ebp
  0007c	5d		 pop	 ebp
$LN63@erase@5:
  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

  0007f	8b c3		 mov	 eax, ebx
  00081	5b		 pop	 ebx

; 1055 : #endif
; 1056 : 		}

  00082	c2 14 00	 ret	 20			; 00000014H
?erase@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@V?$_Vector_const_iterator@EV?$allocator@E@std@@@2@0@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::erase
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAEIABE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Ufill
; Function compile flags: /Ogtpy
;	COMDAT ?_Ufill@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAEIABE@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAEIABE@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

  00000	55		 push	 ebp

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Ptr$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Count$[esp+4]
  0000a	8b c7		 mov	 eax, edi
  0000c	8b cd		 mov	 ecx, ebp
  0000e	85 ff		 test	 edi, edi
  00010	76 10		 jbe	 SHORT $LN26@Ufill
  00012	56		 push	 esi
  00013	8b 74 24 18	 mov	 esi, DWORD PTR __Val$[esp+8]
$LL21@Ufill:
  00017	8a 16		 mov	 dl, BYTE PTR [esi]
  00019	88 11		 mov	 BYTE PTR [ecx], dl
  0001b	48		 dec	 eax
  0001c	41		 inc	 ecx
  0001d	85 c0		 test	 eax, eax
  0001f	77 f6		 ja	 SHORT $LL21@Ufill
  00021	5e		 pop	 esi
$LN26@Ufill:

; 1255 : 		return (_Ptr + _Count);

  00022	8d 04 2f	 lea	 eax, DWORD PTR [edi+ebp]
  00025	5f		 pop	 edi
  00026	5d		 pop	 ebp

; 1256 : 		}

  00027	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAEIABE@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Ufill
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAKIABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ufill
; Function compile flags: /Ogtpy
;	COMDAT ?_Ufill@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAKIABK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAKIABK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

  00000	56		 push	 esi

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR __Count$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  0000a	8b c6		 mov	 eax, esi
  0000c	8b cf		 mov	 ecx, edi
  0000e	85 f6		 test	 esi, esi
  00010	76 12		 jbe	 SHORT $LN26@Ufill@2
  00012	8b 54 24 14	 mov	 edx, DWORD PTR __Val$[esp+4]
  00016	53		 push	 ebx
$LL21@Ufill@2:
  00017	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00019	89 19		 mov	 DWORD PTR [ecx], ebx
  0001b	48		 dec	 eax
  0001c	83 c1 04	 add	 ecx, 4
  0001f	85 c0		 test	 eax, eax
  00021	77 f4		 ja	 SHORT $LL21@Ufill@2
  00023	5b		 pop	 ebx
$LN26@Ufill@2:

; 1255 : 		return (_Ptr + _Count);

  00024	8d 04 b7	 lea	 eax, DWORD PTR [edi+esi*4]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi

; 1256 : 		}

  00029	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAKIABK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ufill
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 637  : 		{	// construct from [_Ptr, _Ptr + _Count)

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 638  : 		_Tidy();
; 639  : 		assign(_Ptr, _Count);

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR __Ptr$[esp]
  00007	33 c0		 xor	 eax, eax
  00009	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	88 46 04	 mov	 BYTE PTR [esi+4], al
  00016	8b 44 24 0c	 mov	 eax, DWORD PTR __Count$[esp]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 640  : 		}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 638  : 		_Tidy();
; 639  : 		assign(_Ptr, _Count);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp]
  0000b	51		 push	 ecx
  0000c	33 c0		 xor	 eax, eax
  0000e	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00015	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001c	52		 push	 edx
  0001d	8b ce		 mov	 ecx, esi
  0001f	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 640  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	c2 08 00	 ret	 8
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??0?$_Tree_val@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree_val<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_val@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree_val<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >, COMDAT
; _this$ = ecx

; 97   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN23@Tree_val
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 98   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 08 00	 ret	 8

; 97   : 		{	// construct base, and allocator from _Al

$LN23@Tree_val:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 98   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 08 00	 ret	 8
??0?$_Tree_val@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree_val<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
_TEXT	ENDS
PUBLIC	??_G_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEPAXI@Z ; std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_G_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEPAXI@Z PROC ; std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 ??1SecurityTokenInfo@CipherShed@@QAE@XZ
  0000b	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00010	74 09		 je	 SHORT $LN6@scalar@30
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar@30:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??_G_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEPAXI@Z ENDP ; std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 935  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 936  : 		return (append(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@50:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL7@operator@50
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 937  : 		}

  00022	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	??$_Destroy@USecurityTokenKeyfile@CipherShed@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@@Z ; std::_Destroy<CipherShed::SecurityTokenKeyfile>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@USecurityTokenKeyfile@CipherShed@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@USecurityTokenKeyfile@CipherShed@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@@Z PROC ; std::_Destroy<CipherShed::SecurityTokenKeyfile>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	e9 00 00 00 00	 jmp	 ??1SecurityTokenKeyfile@CipherShed@@QAE@XZ
??$_Destroy@USecurityTokenKeyfile@CipherShed@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@@Z ENDP ; std::_Destroy<CipherShed::SecurityTokenKeyfile>
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@std@@QAE@XZ:PROC			; std::exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0002d	33 c0		 xor	 eax, eax
  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00038	6a ff		 push	 -1
  0003a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0003d	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00044	50		 push	 eax
  00045	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  00049	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004c	8b 44 24 24	 mov	 eax, DWORD PTR __Message$[esp+28]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 27   : 		}

  00056	8b c6		 mov	 eax, esi
  00058	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5e		 pop	 esi
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogtpy
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 110  : 		}

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN21@length_err
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN21@length_err:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN24@scalar@31
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN24@scalar@31:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN34@scalar@31
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN34@scalar@31:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??_R4out_of_range@std@@6B@			; std::out_of_range::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	??_R3out_of_range@std@@8			; std::out_of_range::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2out_of_range@std@@8			; std::out_of_range::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@out_of_range@std@@8		; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@out_of_range@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@out_of_range@std@@8 DD FLAT:??_R0?AVout_of_range@std@@@8 ; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT
??_R2out_of_range@std@@8 DD FLAT:??_R1A@?0A@EA@out_of_range@std@@8 ; std::out_of_range::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT
??_R3out_of_range@std@@8 DD 00H				; std::out_of_range::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT
??_R4out_of_range@std@@6B@ DD 00H			; std::out_of_range::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_R4out_of_range@std@@6B@ ; std::out_of_range::`vftable'
	DD	FLAT:??_Eout_of_range@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 129  : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7out_of_range@std@@6B@

; 130  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
; Function compile flags: /Ogtpy
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx

; 133  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 134  : 		}

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN21@out_of_ran
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN21@out_of_ran:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN24@scalar@32
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN24@scalar@32:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN34@scalar@32
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN34@scalar@32:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 153  : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0002d	33 c0		 xor	 eax, eax
  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00038	6a ff		 push	 -1
  0003a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0003d	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00044	50		 push	 eax
  00045	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  00049	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004c	8b 44 24 24	 mov	 eax, DWORD PTR __Message$[esp+28]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 154  : 		}

  00056	8b c6		 mov	 eax, esi
  00058	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5e		 pop	 esi
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
PUBLIC	?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T161794 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::locale::name, COMDAT
; _this$ = ecx

; 407  : 		{	// return locale name

  00000	51		 push	 ecx

; 408  : 		return (_Ptr->_Name);

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	56		 push	 esi
  00004	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00008	33 d2		 xor	 edx, edx
  0000a	6a ff		 push	 -1
  0000c	83 c0 18	 add	 eax, 24			; 00000018H
  0000f	52		 push	 edx
  00010	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00017	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0001a	50		 push	 eax
  0001b	8b ce		 mov	 ecx, esi
  0001d	89 54 24 10	 mov	 DWORD PTR $T161794[esp+20], edx
  00021	88 56 04	 mov	 BYTE PTR [esi+4], dl
  00024	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi

; 409  : 		}

  0002c	59		 pop	 ecx
  0002d	c2 04 00	 ret	 4
?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::locale::name
_TEXT	ENDS
PUBLIC	?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	ENDS
;	COMDAT ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T161916 = -164						; size = 4
$T161910 = -160						; size = 4
$T161912 = -156						; size = 28
$T161911 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<char>::_Getcat, COMDAT

; 1790 : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1791 : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b bc 24 b8 00
	00 00		 mov	 edi, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T161916[esp+180], ebx
  00039	85 ff		 test	 edi, edi
  0003b	0f 84 9c 00 00
	00		 je	 $LN42@Getcat
  00041	39 1f		 cmp	 DWORD PTR [edi], ebx
  00043	0f 85 94 00 00
	00		 jne	 $LN42@Getcat

; 1792 : 			*_Ppf = _NEW_CRT ctype<_Elem>(
; 1793 : 				_Locinfo(_Ploc->name()));

  00049	6a 18		 push	 24			; 00000018H
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
  00055	89 74 24 14	 mov	 DWORD PTR $T161910[esp+180], esi
  00059	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00060	85 f6		 test	 esi, esi
  00062	74 3c		 je	 SHORT $LN4@Getcat
  00064	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006b	8d 44 24 18	 lea	 eax, DWORD PTR $T161912[esp+180]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00075	50		 push	 eax
  00076	8d 4c 24 38	 lea	 ecx, DWORD PTR $T161911[esp+184]
  0007a	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00082	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T161916[esp+184], 1
  0008a	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  0008f	6a 00		 push	 0
  00091	50		 push	 eax
  00092	8b ce		 mov	 ecx, esi
  00094	bb 03 00 00 00	 mov	 ebx, 3
  00099	e8 00 00 00 00	 call	 ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ; std::ctype<char>::ctype<char>
  0009e	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  000a0	33 c0		 xor	 eax, eax
$LN5@Getcat:
  000a2	c7 84 24 b0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 2
  000ad	89 07		 mov	 DWORD PTR [edi], eax
  000af	f6 c3 02	 test	 bl, 2
  000b2	74 10		 je	 SHORT $LN11@Getcat
  000b4	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000b7	8d 4c 24 34	 lea	 ecx, DWORD PTR $T161911[esp+180]
  000bb	89 5c 24 10	 mov	 DWORD PTR $T161916[esp+180], ebx
  000bf	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat:
  000c4	f6 c3 01	 test	 bl, 1
  000c7	74 14		 je	 SHORT $LN42@Getcat
  000c9	83 7c 24 30 10	 cmp	 DWORD PTR $T161912[esp+204], 16 ; 00000010H
  000ce	72 0d		 jb	 SHORT $LN42@Getcat
  000d0	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T161912[esp+184]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000da	83 c4 04	 add	 esp, 4
$LN42@Getcat:

; 1794 : 		return (_X_CTYPE);

  000dd	b8 02 00 00 00	 mov	 eax, 2

; 1795 : 		}

  000e2	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f0	59		 pop	 ecx
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  000fa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T161910[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T161916[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T161916[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T161912[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat:
  0002f	c3		 ret	 0
__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  0003a	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<char>::_Getcat
PUBLIC	?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<wchar_t>::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	ENDS
;	COMDAT ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T162052 = -164						; size = 4
$T162046 = -160						; size = 4
$T162048 = -156						; size = 28
$T162047 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<wchar_t>::_Getcat, COMDAT

; 2031 : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2032 : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b bc 24 b8 00
	00 00		 mov	 edi, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T162052[esp+180], ebx
  00039	85 ff		 test	 edi, edi
  0003b	0f 84 9c 00 00
	00		 je	 $LN42@Getcat@2
  00041	39 1f		 cmp	 DWORD PTR [edi], ebx
  00043	0f 85 94 00 00
	00		 jne	 $LN42@Getcat@2

; 2033 : 			*_Ppf = _NEW_CRT ctype<_Elem>(
; 2034 : 				_Locinfo(_Ploc->name()));

  00049	6a 20		 push	 32			; 00000020H
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
  00055	89 74 24 14	 mov	 DWORD PTR $T162046[esp+180], esi
  00059	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00060	85 f6		 test	 esi, esi
  00062	74 3c		 je	 SHORT $LN4@Getcat@2
  00064	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006b	8d 44 24 18	 lea	 eax, DWORD PTR $T162048[esp+180]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00075	50		 push	 eax
  00076	8d 4c 24 38	 lea	 ecx, DWORD PTR $T162047[esp+184]
  0007a	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00082	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T162052[esp+184], 1
  0008a	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  0008f	6a 00		 push	 0
  00091	50		 push	 eax
  00092	8b ce		 mov	 ecx, esi
  00094	bb 03 00 00 00	 mov	 ebx, 3
  00099	e8 00 00 00 00	 call	 ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z ; std::ctype<wchar_t>::ctype<wchar_t>
  0009e	eb 02		 jmp	 SHORT $LN5@Getcat@2
$LN4@Getcat@2:
  000a0	33 c0		 xor	 eax, eax
$LN5@Getcat@2:
  000a2	c7 84 24 b0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 2
  000ad	89 07		 mov	 DWORD PTR [edi], eax
  000af	f6 c3 02	 test	 bl, 2
  000b2	74 10		 je	 SHORT $LN11@Getcat@2
  000b4	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000b7	8d 4c 24 34	 lea	 ecx, DWORD PTR $T162047[esp+180]
  000bb	89 5c 24 10	 mov	 DWORD PTR $T162052[esp+180], ebx
  000bf	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat@2:
  000c4	f6 c3 01	 test	 bl, 1
  000c7	74 14		 je	 SHORT $LN42@Getcat@2
  000c9	83 7c 24 30 10	 cmp	 DWORD PTR $T162048[esp+204], 16 ; 00000010H
  000ce	72 0d		 jb	 SHORT $LN42@Getcat@2
  000d0	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T162048[esp+184]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000da	83 c4 04	 add	 esp, 4
$LN42@Getcat@2:

; 2035 : 		return (_X_CTYPE);

  000dd	b8 02 00 00 00	 mov	 eax, 2

; 2036 : 		}

  000e2	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f0	59		 pop	 ecx
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  000fa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T162046[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T162052[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat@2
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T162052[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T162048[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat@2:
  0002f	c3		 ret	 0
__ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  0003a	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<wchar_t>::_Getcat
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::ios_base::failure::failure
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@runtime_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 220  : 			{	// construct with message

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@

; 221  : 			}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::ios_base::failure::failure
_TEXT	ENDS
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
; Function compile flags: /Ogtpy
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx

; 224  : 			{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 225  : 			}

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN21@failure
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN21@failure:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN24@scalar@33
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN24@scalar@33:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN34@scalar@33
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN34@scalar@33:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0SecurityTokenKeyfilePath@CipherShed@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; CipherShed::SecurityTokenKeyfilePath::SecurityTokenKeyfilePath
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.h
;	COMDAT ??0SecurityTokenKeyfilePath@CipherShed@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
_TEXT	SEGMENT
_path$ = 8						; size = 4
??0SecurityTokenKeyfilePath@CipherShed@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; CipherShed::SecurityTokenKeyfilePath::SecurityTokenKeyfilePath, COMDAT
; _this$ = ecx

; 65   : 		SecurityTokenKeyfilePath (const wstring &path) : Path (path) { }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR _path$[esp]
  00007	33 c0		 xor	 eax, eax
  00009	6a ff		 push	 -1
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	8b ce		 mov	 ecx, esi
  0001d	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	c2 04 00	 ret	 4
??0SecurityTokenKeyfilePath@CipherShed@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; CipherShed::SecurityTokenKeyfilePath::SecurityTokenKeyfilePath
_TEXT	ENDS
PUBLIC	??BSecurityTokenKeyfilePath@CipherShed@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; CipherShed::SecurityTokenKeyfilePath::operator std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??BSecurityTokenKeyfilePath@CipherShed@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
_TEXT	SEGMENT
$T162641 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BSecurityTokenKeyfilePath@CipherShed@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ PROC ; CipherShed::SecurityTokenKeyfilePath::operator std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 66   : 		operator wstring () const { return Path; }

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	33 c0		 xor	 eax, eax
  00008	6a ff		 push	 -1
  0000a	50		 push	 eax
  0000b	33 d2		 xor	 edx, edx
  0000d	51		 push	 ecx
  0000e	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00015	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00018	8b ce		 mov	 ecx, esi
  0001a	89 44 24 10	 mov	 DWORD PTR $T162641[esp+20], eax
  0001e	66 89 56 04	 mov	 WORD PTR [esi+4], dx
  00022	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	59		 pop	 ecx
  0002b	c2 04 00	 ret	 4
??BSecurityTokenKeyfilePath@CipherShed@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ENDP ; CipherShed::SecurityTokenKeyfilePath::operator std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
_TEXT	ENDS
;	COMDAT ??1Finally161@?N@??CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z@QAE@XZ
_TEXT	SEGMENT
_burnm$124254 = -4					; size = 4
??1Finally161@?N@??CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z@QAE@XZ PROC ; `CipherShed::SecurityToken::CreateKeyfile'::`13'::Finally161::~Finally161, COMDAT
; _this$ = eax

; 161  : 		finally_do_arg (vector <byte> *, &objectData, { if (!finally_arg->empty()) burn (&finally_arg->front(), finally_arg->size()); });

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	8b d8		 mov	 ebx, eax
  00004	56		 push	 esi
  00005	8b 33		 mov	 esi, DWORD PTR [ebx]
  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	2b 46 0c	 sub	 eax, DWORD PTR [esi+12]
  0000d	0f 84 86 00 00
	00		 je	 $LN3@Finally161
  00013	57		 push	 edi
  00014	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00017	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0001a	76 05		 jbe	 SHORT $LN25@Finally161
  0001c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN25@Finally161:
  00021	8b 36		 mov	 esi, DWORD PTR [esi]
  00023	85 f6		 test	 esi, esi
  00025	75 76		 jne	 SHORT $LN97@Finally161
  00027	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN47@Finally161:
  0002c	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0002f	72 05		 jb	 SHORT $LN38@Finally161
  00031	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN38@Finally161:
  00036	8b 33		 mov	 esi, DWORD PTR [ebx]
  00038	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0003b	2b 5e 0c	 sub	 ebx, DWORD PTR [esi+12]
  0003e	8b cf		 mov	 ecx, edi
  00040	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00043	2b 7e 0c	 sub	 edi, DWORD PTR [esi+12]
  00046	55		 push	 ebp
  00047	8b 6e 0c	 mov	 ebp, DWORD PTR [esi+12]
  0004a	89 4c 24 10	 mov	 DWORD PTR _burnm$124254[esp+20], ecx
  0004e	3b 6e 10	 cmp	 ebp, DWORD PTR [esi+16]
  00051	76 09		 jbe	 SHORT $LN61@Finally161
  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00058	8b 4c 24 10	 mov	 ecx, DWORD PTR _burnm$124254[esp+20]
$LN61@Finally161:
  0005c	8b 36		 mov	 esi, DWORD PTR [esi]
  0005e	85 f6		 test	 esi, esi
  00060	75 3f		 jne	 SHORT $LN96@Finally161
  00062	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00067	8b 4c 24 10	 mov	 ecx, DWORD PTR _burnm$124254[esp+20]
$LN83@Finally161:
  0006b	3b 6e 10	 cmp	 ebp, DWORD PTR [esi+16]
  0006e	72 09		 jb	 SHORT $LN74@Finally161
  00070	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00075	8b 4c 24 10	 mov	 ecx, DWORD PTR _burnm$124254[esp+20]
$LN74@Finally161:
  00079	8b c5		 mov	 eax, ebp
  0007b	5d		 pop	 ebp
  0007c	85 ff		 test	 edi, edi
  0007e	74 09		 je	 SHORT $LN92@Finally161
$LL87@Finally161:
  00080	c6 00 00	 mov	 BYTE PTR [eax], 0
  00083	40		 inc	 eax
  00084	83 ef 01	 sub	 edi, 1
  00087	75 f7		 jne	 SHORT $LL87@Finally161
$LN92@Finally161:
  00089	5f		 pop	 edi
  0008a	85 db		 test	 ebx, ebx
  0008c	74 0b		 je	 SHORT $LN3@Finally161
  0008e	8b ff		 npad	 2
$LL2@Finally161:
  00090	4b		 dec	 ebx
  00091	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00094	41		 inc	 ecx
  00095	85 db		 test	 ebx, ebx
  00097	75 f7		 jne	 SHORT $LL2@Finally161
$LN3@Finally161:
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	59		 pop	 ecx
  0009c	c3		 ret	 0
$LN97@Finally161:
  0009d	8b 36		 mov	 esi, DWORD PTR [esi]
  0009f	eb 8b		 jmp	 SHORT $LN47@Finally161
$LN96@Finally161:
  000a1	8b 36		 mov	 esi, DWORD PTR [esi]
  000a3	eb c6		 jmp	 SHORT $LN83@Finally161
??1Finally161@?N@??CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z@QAE@XZ ENDP ; `CipherShed::SecurityToken::CreateKeyfile'::`13'::Finally161::~Finally161
_TEXT	ENDS
PUBLIC	??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::~ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAE@XZ PROC ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::~ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
  00004	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy
  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
  00019	5f		 pop	 edi
  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00020	5e		 pop	 esi
  00021	c3		 ret	 0
??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAE@XZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::~ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??0SecurityTokenInfo@CipherShed@@QAE@ABU01@@Z	; CipherShed::SecurityTokenInfo::SecurityTokenInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SecurityTokenInfo@CipherShed@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SecurityTokenInfo@CipherShed@@QAE@ABU01@@Z$0
__ehfuncinfo$??0SecurityTokenInfo@CipherShed@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0SecurityTokenInfo@CipherShed@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0SecurityTokenInfo@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0SecurityTokenInfo@CipherShed@@QAE@ABU01@@Z PROC	; CipherShed::SecurityTokenInfo::SecurityTokenInfo, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0SecurityTokenInfo@CipherShed@@QAE@ABU01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002a	8b 7c 24 24	 mov	 edi, DWORD PTR ___that$[esp+28]
  0002e	8b 07		 mov	 eax, DWORD PTR [edi]
  00030	89 06		 mov	 DWORD PTR [esi], eax
  00032	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00035	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00038	6a ff		 push	 -1
  0003a	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003d	33 db		 xor	 ebx, ebx
  0003f	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00042	53		 push	 ebx
  00043	33 d2		 xor	 edx, edx
  00045	c7 41 18 07 00
	00 00		 mov	 DWORD PTR [ecx+24], 7
  0004c	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  0004f	50		 push	 eax
  00050	66 89 51 04	 mov	 WORD PTR [ecx+4], dx
  00054	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00059	6a ff		 push	 -1
  0005b	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  0005e	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  00061	53		 push	 ebx
  00062	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00069	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  0006c	50		 push	 eax
  0006d	89 5c 24 28	 mov	 DWORD PTR __$EHRec$[esp+52], ebx
  00071	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00074	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00079	8b c6		 mov	 eax, esi
  0007b	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  0007f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00086	59		 pop	 ecx
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	83 c4 10	 add	 esp, 16			; 00000010H
  0008d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SecurityTokenInfo@CipherShed@@QAE@ABU01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??0SecurityTokenInfo@CipherShed@@QAE@ABU01@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SecurityTokenInfo@CipherShed@@QAE@ABU01@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SecurityTokenInfo@CipherShed@@QAE@ABU01@@Z ENDP	; CipherShed::SecurityTokenInfo::SecurityTokenInfo
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$LL37@basic_stri@5:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL37@basic_stri@5
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 654  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 916  : 		return (assign(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 917  : 		}

  0000e	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 920  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 921  : 		return (assign(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@51:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL7@operator@51
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 922  : 		}

  00022	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
; Function compile flags: /Ogtpy
;	COMDAT ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
$T163538 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr, COMDAT
; _this$ = ecx

; 1998 : 		{	// return [_Off, _Off + _Count) as new string

  00000	51		 push	 ecx

; 1999 : 		return (_Myt(*this, _Off, _Count, get_allocator()));

  00001	8b 54 24 0c	 mov	 edx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	33 c0		 xor	 eax, eax
  0000c	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000f	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00016	89 44 24 04	 mov	 DWORD PTR $T163538[esp+8], eax
  0001a	88 46 04	 mov	 BYTE PTR [esi+4], al
  0001d	8b 44 24 14	 mov	 eax, DWORD PTR __Count$[esp+4]
  00021	50		 push	 eax
  00022	52		 push	 edx
  00023	51		 push	 ecx
  00024	8b ce		 mov	 ecx, esi
  00026	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 2000 : 		}

  0002e	59		 pop	 ecx
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c0		 xor	 eax, eax
  00009	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00010	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00017	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001b	8b c2		 mov	 eax, edx
  0001d	57		 push	 edi
  0001e	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
$LL39@basic_stri@6:
  00021	66 8b 08	 mov	 cx, WORD PTR [eax]
  00024	83 c0 02	 add	 eax, 2
  00027	66 85 c9	 test	 cx, cx
  0002a	75 f5		 jne	 SHORT $LL39@basic_stri@6
  0002c	2b c7		 sub	 eax, edi
  0002e	d1 f8		 sar	 eax, 1
  00030	50		 push	 eax
  00031	52		 push	 edx
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00039	5f		 pop	 edi

; 654  : 		}

  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 916  : 		return (assign(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 917  : 		}

  0000e	c2 04 00	 ret	 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx

; 931  : 		return (append(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 932  : 		}

  0000e	c2 04 00	 ret	 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
_TEXT	ENDS
PUBLIC	?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
; Function compile flags: /Ogtpy
;	COMDAT ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
$T163808 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr, COMDAT
; _this$ = ecx

; 1998 : 		{	// return [_Off, _Off + _Count) as new string

  00000	51		 push	 ecx

; 1999 : 		return (_Myt(*this, _Off, _Count, get_allocator()));

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Count$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	33 c0		 xor	 eax, eax
  0000c	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000f	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00016	89 44 24 04	 mov	 DWORD PTR $T163808[esp+8], eax
  0001a	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001e	8b 44 24 10	 mov	 eax, DWORD PTR __Off$[esp+4]
  00022	52		 push	 edx
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	8b ce		 mov	 ecx, esi
  00027	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi

; 2000 : 		}

  0002f	59		 pop	 ecx
  00030	c2 0c 00	 ret	 12			; 0000000cH
?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
_TEXT	ENDS
PUBLIC	__TI3?AVout_of_range@std@@
PUBLIC	??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ ; `string'
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::erase
PUBLIC	__CTA3?AVout_of_range@std@@
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT
__CTA3?AVout_of_range@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT
__TI3?AVout_of_range@std@@ DD 00H
	DD	FLAT:??1out_of_range@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVout_of_range@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
CONST	SEGMENT
??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ DB 'invalid '
	DB	'map/set<T> iterator', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z$0
__ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
_TEXT	SEGMENT
__Erasednode$ = -84					; size = 4
$T163965 = -80						; size = 28
$T163964 = -52						; size = 40
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::erase, COMDAT
; _this$ = ecx

; 764  : 		{	// erase element at _Where

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 48	 sub	 esp, 72			; 00000048H
  00011	53		 push	 ebx
  00012	55		 push	 ebp
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c4		 xor	 eax, esp
  0001c	50		 push	 eax
  0001d	8d 44 24 5c	 lea	 eax, DWORD PTR __$EHRec$[esp+104]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b e9		 mov	 ebp, ecx

; 765  : 
; 766  :  #if _HAS_ITERATOR_DEBUGGING
; 767  : 		if (_Where._Mycont != this || _Isnil(_Where._Mynode()))
; 768  : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 769  : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 770  : 		++_Where;	// save successor iterator for return
; 771  : 		_Orphan_ptr(*this, _Erasednode);
; 772  : 
; 773  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 774  : 		if (_Isnil(_Where._Mynode()))

  00029	8b 44 24 74	 mov	 eax, DWORD PTR __Where$[esp+104]
  0002d	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  00031	74 4c		 je	 SHORT $LN40@erase@6

; 775  : 			_THROW(out_of_range, "invalid map/set<T> iterator");

  00033	6a 1b		 push	 27			; 0000001bH
  00035	33 f6		 xor	 esi, esi
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
  0003c	8d 4c 24 20	 lea	 ecx, DWORD PTR $T163965[esp+112]
  00040	c7 44 24 38 0f
	00 00 00	 mov	 DWORD PTR $T163965[esp+136], 15 ; 0000000fH
  00048	89 74 24 34	 mov	 DWORD PTR $T163965[esp+132], esi
  0004c	c6 44 24 24 00	 mov	 BYTE PTR $T163965[esp+116], 0
  00051	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00056	8d 44 24 18	 lea	 eax, DWORD PTR $T163965[esp+104]
  0005a	50		 push	 eax
  0005b	8d 4c 24 38	 lea	 ecx, DWORD PTR $T163964[esp+108]
  0005f	89 74 24 68	 mov	 DWORD PTR __$EHRec$[esp+116], esi
  00063	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00068	68 00 00 00 00	 push	 OFFSET __TI3?AVout_of_range@std@@
  0006d	8d 4c 24 38	 lea	 ecx, DWORD PTR $T163964[esp+108]
  00071	51		 push	 ecx
  00072	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR $T163964[esp+112], OFFSET ??_7out_of_range@std@@6B@
  0007a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN40@erase@6:

; 776  : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase

  0007f	8b d8		 mov	 ebx, eax

; 777  : 		++_Where;	// save successor iterator for return

  00081	8d 4c 24 70	 lea	 ecx, DWORD PTR __Where$[esp+100]
  00085	89 5c 24 14	 mov	 DWORD PTR __Erasednode$[esp+104], ebx
  00089	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Inc

; 778  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 779  : 
; 780  : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 781  : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 782  : 		_Nodeptr _Pnode = _Erasednode;
; 783  : 
; 784  : 		if (_Isnil(_Left(_Pnode)))

  0008e	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00090	80 79 19 00	 cmp	 BYTE PTR [ecx+25], 0
  00094	74 05		 je	 SHORT $LN39@erase@6

; 785  : 			_Fixnode = _Right(_Pnode);	// must stitch up right subtree

  00096	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]
  00099	eb 1b		 jmp	 SHORT $LN329@erase@6
$LN39@erase@6:

; 786  : 		else if (_Isnil(_Right(_Pnode)))

  0009b	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  0009e	80 7a 19 00	 cmp	 BYTE PTR [edx+25], 0
  000a2	74 04		 je	 SHORT $LN37@erase@6

; 787  : 			_Fixnode = _Left(_Pnode);	// must stitch up left subtree

  000a4	8b f9		 mov	 edi, ecx

; 788  : 		else

  000a6	eb 0e		 jmp	 SHORT $LN329@erase@6
$LN37@erase@6:

; 789  : 			{	// two subtrees, must lift successor node to replace erased
; 790  : 			_Pnode = _Where._Mynode();	// _Pnode is successor node

  000a8	8b 44 24 74	 mov	 eax, DWORD PTR __Where$[esp+104]

; 791  : 			_Fixnode = _Right(_Pnode);	// _Fixnode is its only subtree

  000ac	8b 78 08	 mov	 edi, DWORD PTR [eax+8]
  000af	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 792  : 			}
; 793  : 
; 794  : 		if (_Pnode == _Erasednode)

  000b2	3b c3		 cmp	 eax, ebx
  000b4	75 6b		 jne	 SHORT $LN35@erase@6
$LN329@erase@6:

; 795  : 			{	// at most one subtree, relink it
; 796  : 			_Fixnodeparent = _Parent(_Erasednode);
; 797  : 			if (!_Isnil(_Fixnode))

  000b6	80 7f 19 00	 cmp	 BYTE PTR [edi+25], 0
  000ba	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  000bd	75 03		 jne	 SHORT $LN34@erase@6

; 798  : 				_Parent(_Fixnode) = _Fixnodeparent;	// link up

  000bf	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN34@erase@6:

; 799  : 
; 800  : 			if (_Root() == _Erasednode)

  000c2	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  000c5	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  000c8	75 05		 jne	 SHORT $LN33@erase@6

; 801  : 				_Root() = _Fixnode;	// link down from root

  000ca	89 78 04	 mov	 DWORD PTR [eax+4], edi
  000cd	eb 0b		 jmp	 SHORT $LN30@erase@6
$LN33@erase@6:

; 802  : 			else if (_Left(_Fixnodeparent) == _Erasednode)

  000cf	39 1e		 cmp	 DWORD PTR [esi], ebx
  000d1	75 04		 jne	 SHORT $LN31@erase@6

; 803  : 				_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  000d3	89 3e		 mov	 DWORD PTR [esi], edi

; 804  : 			else

  000d5	eb 03		 jmp	 SHORT $LN30@erase@6
$LN31@erase@6:

; 805  : 				_Right(_Fixnodeparent) = _Fixnode;	// link down to right

  000d7	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN30@erase@6:

; 806  : 
; 807  : 			if (_Lmost() == _Erasednode)

  000da	8b 5d 18	 mov	 ebx, DWORD PTR [ebp+24]
  000dd	8b 03		 mov	 eax, DWORD PTR [ebx]
  000df	3b 44 24 14	 cmp	 eax, DWORD PTR __Erasednode$[esp+104]
  000e3	75 15		 jne	 SHORT $LN29@erase@6

; 808  : 				_Lmost() = _Isnil(_Fixnode)
; 809  : 					? _Fixnodeparent	// smallest is parent of erased node
; 810  : 					: _Min(_Fixnode);	// smallest in relinked subtree

  000e5	80 7f 19 00	 cmp	 BYTE PTR [edi+25], 0
  000e9	74 04		 je	 SHORT $LN43@erase@6
  000eb	8b c6		 mov	 eax, esi
  000ed	eb 09		 jmp	 SHORT $LN44@erase@6
$LN43@erase@6:
  000ef	57		 push	 edi
  000f0	e8 00 00 00 00	 call	 ?_Min@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Min
  000f5	83 c4 04	 add	 esp, 4
$LN44@erase@6:
  000f8	89 03		 mov	 DWORD PTR [ebx], eax
$LN29@erase@6:

; 811  : 
; 812  : 			if (_Rmost() == _Erasednode)

  000fa	8b 5d 18	 mov	 ebx, DWORD PTR [ebp+24]
  000fd	8b 4c 24 14	 mov	 ecx, DWORD PTR __Erasednode$[esp+104]
  00101	39 4b 08	 cmp	 DWORD PTR [ebx+8], ecx
  00104	75 77		 jne	 SHORT $LN205@erase@6

; 813  : 				_Rmost() = _Isnil(_Fixnode)
; 814  : 					? _Fixnodeparent	// largest is parent of erased node
; 815  : 					: _Max(_Fixnode);	// largest in relinked subtree

  00106	80 7f 19 00	 cmp	 BYTE PTR [edi+25], 0
  0010a	74 07		 je	 SHORT $LN45@erase@6
  0010c	8b c6		 mov	 eax, esi
  0010e	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 816  : 			}
; 817  : 		else

  00111	eb 6a		 jmp	 SHORT $LN205@erase@6
$LN45@erase@6:

; 813  : 				_Rmost() = _Isnil(_Fixnode)
; 814  : 					? _Fixnodeparent	// largest is parent of erased node
; 815  : 					: _Max(_Fixnode);	// largest in relinked subtree

  00113	57		 push	 edi
  00114	e8 00 00 00 00	 call	 ?_Max@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Max
  00119	83 c4 04	 add	 esp, 4
  0011c	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 816  : 			}
; 817  : 		else

  0011f	eb 5c		 jmp	 SHORT $LN205@erase@6
$LN35@erase@6:

; 818  : 			{	// erased has two subtrees, _Pnode is successor to erased
; 819  : 			_Parent(_Left(_Erasednode)) = _Pnode;	// link left up

  00121	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 820  : 			_Left(_Pnode) = _Left(_Erasednode);	// link successor down

  00124	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00126	89 08		 mov	 DWORD PTR [eax], ecx

; 821  : 
; 822  : 			if (_Pnode == _Right(_Erasednode))

  00128	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  0012b	75 04		 jne	 SHORT $LN26@erase@6

; 823  : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  0012d	8b f0		 mov	 esi, eax

; 824  : 			else

  0012f	eb 19		 jmp	 SHORT $LN25@erase@6
$LN26@erase@6:

; 825  : 				{	// successor further down, link in place of erased
; 826  : 				_Fixnodeparent = _Parent(_Pnode);	// parent is successor's
; 827  : 				if (!_Isnil(_Fixnode))

  00131	80 7f 19 00	 cmp	 BYTE PTR [edi+25], 0
  00135	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00138	75 03		 jne	 SHORT $LN24@erase@6

; 828  : 					_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  0013a	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN24@erase@6:

; 829  : 				_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  0013d	89 3e		 mov	 DWORD PTR [esi], edi

; 830  : 				_Right(_Pnode) = _Right(_Erasednode);	// link successor down

  0013f	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00142	89 0a		 mov	 DWORD PTR [edx], ecx

; 831  : 				_Parent(_Right(_Erasednode)) = _Pnode;	// link right up

  00144	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00147	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN25@erase@6:

; 832  : 				}
; 833  : 
; 834  : 			if (_Root() == _Erasednode)

  0014a	8b 4d 18	 mov	 ecx, DWORD PTR [ebp+24]
  0014d	39 59 04	 cmp	 DWORD PTR [ecx+4], ebx
  00150	75 05		 jne	 SHORT $LN23@erase@6

; 835  : 				_Root() = _Pnode;	// link down from root

  00152	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00155	eb 0e		 jmp	 SHORT $LN20@erase@6
$LN23@erase@6:

; 836  : 			else if (_Left(_Parent(_Erasednode)) == _Erasednode)

  00157	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0015a	39 19		 cmp	 DWORD PTR [ecx], ebx
  0015c	75 04		 jne	 SHORT $LN21@erase@6

; 837  : 				_Left(_Parent(_Erasednode)) = _Pnode;	// link down to left

  0015e	89 01		 mov	 DWORD PTR [ecx], eax

; 838  : 			else

  00160	eb 03		 jmp	 SHORT $LN20@erase@6
$LN21@erase@6:

; 839  : 				_Right(_Parent(_Erasednode)) = _Pnode;	// link down to right

  00162	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN20@erase@6:

; 840  : 
; 841  : 			_Parent(_Pnode) = _Parent(_Erasednode);	// link successor up

  00165	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00168	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 842  : 			_STD swap(_Color(_Pnode), _Color(_Erasednode));	// recolor it

  0016b	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  0016e	83 c0 18	 add	 eax, 24			; 00000018H
  00171	3b c1		 cmp	 eax, ecx
  00173	74 08		 je	 SHORT $LN205@erase@6
  00175	8a 19		 mov	 bl, BYTE PTR [ecx]
  00177	8a 10		 mov	 dl, BYTE PTR [eax]
  00179	88 18		 mov	 BYTE PTR [eax], bl
  0017b	88 11		 mov	 BYTE PTR [ecx], dl
$LN205@erase@6:

; 843  : 			}
; 844  : 
; 845  : 		if (_Color(_Erasednode) == _Black)

  0017d	8b 54 24 14	 mov	 edx, DWORD PTR __Erasednode$[esp+104]
  00181	b3 01		 mov	 bl, 1
  00183	38 5a 18	 cmp	 BYTE PTR [edx+24], bl
  00186	0f 85 ff 00 00
	00		 jne	 $LN19@erase@6

; 846  : 			{	// erasing black link, must recolor/rebalance tree
; 847  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 848  : 				_Fixnodeparent = _Parent(_Fixnode))

  0018c	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  0018f	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00192	0f 84 f0 00 00
	00		 je	 $LN16@erase@6
  00198	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL18@erase@6:
  001a0	38 5f 18	 cmp	 BYTE PTR [edi+24], bl
  001a3	0f 85 df 00 00
	00		 jne	 $LN16@erase@6

; 849  : 				if (_Fixnode == _Left(_Fixnodeparent))

  001a9	8b 06		 mov	 eax, DWORD PTR [esi]
  001ab	3b f8		 cmp	 edi, eax
  001ad	75 65		 jne	 SHORT $LN15@erase@6

; 850  : 					{	// fixup left subtree
; 851  : 					_Pnode = _Right(_Fixnodeparent);

  001af	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 852  : 					if (_Color(_Pnode) == _Red)

  001b2	80 78 18 00	 cmp	 BYTE PTR [eax+24], 0
  001b6	75 12		 jne	 SHORT $LN14@erase@6

; 853  : 						{	// rotate red up from right subtree
; 854  : 						_Color(_Pnode) = _Black;

  001b8	88 58 18	 mov	 BYTE PTR [eax+24], bl

; 855  : 						_Color(_Fixnodeparent) = _Red;
; 856  : 						_Lrotate(_Fixnodeparent);

  001bb	56		 push	 esi
  001bc	8b cd		 mov	 ecx, ebp
  001be	c6 46 18 00	 mov	 BYTE PTR [esi+24], 0
  001c2	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Lrotate

; 857  : 						_Pnode = _Right(_Fixnodeparent);

  001c7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$LN14@erase@6:

; 858  : 						}
; 859  : 
; 860  : 					if (_Isnil(_Pnode))

  001ca	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0

; 861  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 862  : 					else if (_Color(_Left(_Pnode)) == _Black

  001ce	75 74		 jne	 SHORT $LN332@erase@6

; 863  : 						&& _Color(_Right(_Pnode)) == _Black)

  001d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d2	38 59 18	 cmp	 BYTE PTR [ecx+24], bl
  001d5	75 08		 jne	 SHORT $LN11@erase@6
  001d7	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001da	38 5a 18	 cmp	 BYTE PTR [edx+24], bl
  001dd	74 61		 je	 SHORT $LN333@erase@6
$LN11@erase@6:

; 864  : 						{	// redden right subtree with black children
; 865  : 						_Color(_Pnode) = _Red;
; 866  : 						_Fixnode = _Fixnodeparent;
; 867  : 						}
; 868  : 					else
; 869  : 						{	// must rearrange right subtree
; 870  : 						if (_Color(_Right(_Pnode)) == _Black)

  001df	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001e2	38 59 18	 cmp	 BYTE PTR [ecx+24], bl
  001e5	75 14		 jne	 SHORT $LN9@erase@6

; 871  : 							{	// rotate red up from left sub-subtree
; 872  : 							_Color(_Left(_Pnode)) = _Black;

  001e7	8b 10		 mov	 edx, DWORD PTR [eax]
  001e9	88 5a 18	 mov	 BYTE PTR [edx+24], bl

; 873  : 							_Color(_Pnode) = _Red;
; 874  : 							_Rrotate(_Pnode);

  001ec	50		 push	 eax
  001ed	8b cd		 mov	 ecx, ebp
  001ef	c6 40 18 00	 mov	 BYTE PTR [eax+24], 0
  001f3	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Rrotate

; 875  : 							_Pnode = _Right(_Fixnodeparent);

  001f8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$LN9@erase@6:

; 876  : 							}
; 877  : 
; 878  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

  001fb	8a 4e 18	 mov	 cl, BYTE PTR [esi+24]
  001fe	88 48 18	 mov	 BYTE PTR [eax+24], cl

; 879  : 						_Color(_Fixnodeparent) = _Black;

  00201	88 5e 18	 mov	 BYTE PTR [esi+24], bl

; 880  : 						_Color(_Right(_Pnode)) = _Black;

  00204	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 881  : 						_Lrotate(_Fixnodeparent);

  00207	56		 push	 esi
  00208	8b cd		 mov	 ecx, ebp
  0020a	88 5a 18	 mov	 BYTE PTR [edx+24], bl
  0020d	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Lrotate

; 882  : 						break;	// tree now recolored/rebalanced

  00212	eb 74		 jmp	 SHORT $LN16@erase@6
$LN15@erase@6:

; 883  : 						}
; 884  : 					}
; 885  : 				else
; 886  : 					{	// fixup right subtree
; 887  : 					_Pnode = _Left(_Fixnodeparent);
; 888  : 					if (_Color(_Pnode) == _Red)

  00214	80 78 18 00	 cmp	 BYTE PTR [eax+24], 0
  00218	75 11		 jne	 SHORT $LN7@erase@6

; 889  : 						{	// rotate red up from left subtree
; 890  : 						_Color(_Pnode) = _Black;

  0021a	88 58 18	 mov	 BYTE PTR [eax+24], bl

; 891  : 						_Color(_Fixnodeparent) = _Red;
; 892  : 						_Rrotate(_Fixnodeparent);

  0021d	56		 push	 esi
  0021e	8b cd		 mov	 ecx, ebp
  00220	c6 46 18 00	 mov	 BYTE PTR [esi+24], 0
  00224	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Rrotate

; 893  : 						_Pnode = _Left(_Fixnodeparent);

  00229	8b 06		 mov	 eax, DWORD PTR [esi]
$LN7@erase@6:

; 894  : 						}
; 895  : 					if (_Isnil(_Pnode))

  0022b	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0

; 896  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 897  : 					else if (_Color(_Right(_Pnode)) == _Black

  0022f	75 13		 jne	 SHORT $LN332@erase@6

; 898  : 						&& _Color(_Left(_Pnode)) == _Black)

  00231	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00234	38 59 18	 cmp	 BYTE PTR [ecx+24], bl
  00237	75 1e		 jne	 SHORT $LN4@erase@6
  00239	8b 10		 mov	 edx, DWORD PTR [eax]
  0023b	38 5a 18	 cmp	 BYTE PTR [edx+24], bl
  0023e	75 17		 jne	 SHORT $LN4@erase@6
$LN333@erase@6:

; 899  : 						{	// redden left subtree with black children
; 900  : 						_Color(_Pnode) = _Red;

  00240	c6 40 18 00	 mov	 BYTE PTR [eax+24], 0
$LN332@erase@6:

; 846  : 			{	// erasing black link, must recolor/rebalance tree
; 847  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 848  : 				_Fixnodeparent = _Parent(_Fixnode))

  00244	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]

; 901  : 						_Fixnode = _Fixnodeparent;

  00247	8b fe		 mov	 edi, esi
  00249	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0024c	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  0024f	0f 85 4b ff ff
	ff		 jne	 $LL18@erase@6

; 846  : 			{	// erasing black link, must recolor/rebalance tree
; 847  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 848  : 				_Fixnodeparent = _Parent(_Fixnode))

  00255	eb 31		 jmp	 SHORT $LN16@erase@6
$LN4@erase@6:

; 902  : 						}
; 903  : 					else
; 904  : 						{	// must rearrange left subtree
; 905  : 						if (_Color(_Left(_Pnode)) == _Black)

  00257	8b 08		 mov	 ecx, DWORD PTR [eax]
  00259	38 59 18	 cmp	 BYTE PTR [ecx+24], bl
  0025c	75 14		 jne	 SHORT $LN2@erase@6

; 906  : 							{	// rotate red up from right sub-subtree
; 907  : 							_Color(_Right(_Pnode)) = _Black;

  0025e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00261	88 5a 18	 mov	 BYTE PTR [edx+24], bl

; 908  : 							_Color(_Pnode) = _Red;
; 909  : 							_Lrotate(_Pnode);

  00264	50		 push	 eax
  00265	8b cd		 mov	 ecx, ebp
  00267	c6 40 18 00	 mov	 BYTE PTR [eax+24], 0
  0026b	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Lrotate

; 910  : 							_Pnode = _Left(_Fixnodeparent);

  00270	8b 06		 mov	 eax, DWORD PTR [esi]
$LN2@erase@6:

; 911  : 							}
; 912  : 
; 913  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

  00272	8a 4e 18	 mov	 cl, BYTE PTR [esi+24]
  00275	88 48 18	 mov	 BYTE PTR [eax+24], cl

; 914  : 						_Color(_Fixnodeparent) = _Black;

  00278	88 5e 18	 mov	 BYTE PTR [esi+24], bl

; 915  : 						_Color(_Left(_Pnode)) = _Black;

  0027b	8b 10		 mov	 edx, DWORD PTR [eax]

; 916  : 						_Rrotate(_Fixnodeparent);

  0027d	56		 push	 esi
  0027e	8b cd		 mov	 ecx, ebp
  00280	88 5a 18	 mov	 BYTE PTR [edx+24], bl
  00283	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Rrotate
$LN16@erase@6:

; 917  : 						break;	// tree now recolored/rebalanced
; 918  : 						}
; 919  : 					}
; 920  : 
; 921  : 			_Color(_Fixnode) = _Black;	// ensure stopping node is black

  00288	88 5f 18	 mov	 BYTE PTR [edi+24], bl
$LN19@erase@6:

; 922  : 			}
; 923  : 
; 924  : 		this->_Alnod.destroy(_Erasednode);	// destroy, free erased node
; 925  : 		this->_Alnod.deallocate(_Erasednode, 1);

  0028b	8b 44 24 14	 mov	 eax, DWORD PTR __Erasednode$[esp+104]
  0028f	50		 push	 eax
  00290	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 926  : 
; 927  : 		if (0 < _Mysize)

  00295	8b 45 1c	 mov	 eax, DWORD PTR [ebp+28]
  00298	83 c4 04	 add	 esp, 4
  0029b	85 c0		 test	 eax, eax
  0029d	76 04		 jbe	 SHORT $LN1@erase@6

; 928  : 			--_Mysize;

  0029f	48		 dec	 eax
  002a0	89 45 1c	 mov	 DWORD PTR [ebp+28], eax
$LN1@erase@6:

; 929  : 
; 930  : 		return (_Make_iter(_Where));	// return successor iterator

  002a3	8b 44 24 6c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+100]
  002a7	8b 4c 24 74	 mov	 ecx, DWORD PTR __Where$[esp+104]
  002ab	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  002ae	89 10		 mov	 DWORD PTR [eax], edx
  002b0	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 931  : 		}

  002b3	8b 4c 24 5c	 mov	 ecx, DWORD PTR __$EHRec$[esp+104]
  002b7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002be	59		 pop	 ecx
  002bf	5f		 pop	 edi
  002c0	5e		 pop	 esi
  002c1	5d		 pop	 ebp
  002c2	5b		 pop	 ebx
  002c3	83 c4 54	 add	 esp, 84			; 00000054H
  002c6	c2 0c 00	 ret	 12			; 0000000cH
$LN331@erase@6:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T163965[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 a8	 lea	 eax, DWORD PTR [edx-88]
  0000f	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::erase
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	8b 7c 24 20	 mov	 edi, DWORD PTR ___that$[esp+24]
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00033	33 d2		 xor	 edx, edx
  00035	6a ff		 push	 -1
  00037	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00040	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00043	52		 push	 edx
  00044	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0004b	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  0004e	50		 push	 eax
  0004f	89 54 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], edx
  00053	88 51 04	 mov	 BYTE PTR [ecx+4], dl
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8b c6		 mov	 eax, esi
  0005d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	?clear@?$vector@EV?$allocator@E@std@@@std@@QAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?clear@?$vector@EV?$allocator@E@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T164684 = -8						; size = 8
?clear@?$vector@EV?$allocator@E@std@@@std@@QAEXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 1060 : 		erase(begin(), end());

  00008	8b 6e 10	 mov	 ebp, DWORD PTR [esi+16]
  0000b	57		 push	 edi
  0000c	39 6e 0c	 cmp	 DWORD PTR [esi+12], ebp
  0000f	76 05		 jbe	 SHORT $LN8@clear@3
  00011	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@clear@3:
  00016	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00019	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0001b	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0001e	76 05		 jbe	 SHORT $LN24@clear@3
  00020	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN24@clear@3:
  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	55		 push	 ebp
  00028	53		 push	 ebx
  00029	57		 push	 edi
  0002a	50		 push	 eax
  0002b	8d 44 24 20	 lea	 eax, DWORD PTR $T164684[esp+40]
  0002f	50		 push	 eax
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@V?$_Vector_const_iterator@EV?$allocator@E@std@@@2@0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::erase
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5d		 pop	 ebp
  0003a	5b		 pop	 ebx

; 1061 : 		}

  0003b	83 c4 08	 add	 esp, 8
  0003e	c3		 ret	 0
?clear@?$vector@EV?$allocator@E@std@@@std@@QAEXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::clear
_TEXT	ENDS
PUBLIC	??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >, COMDAT
; _this$ = ecx

; 509  : 		{	// construct empty tree

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	6a 04		 push	 4
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	83 c4 04	 add	 esp, 4
  00032	85 c0		 test	 eax, eax
  00034	74 04		 je	 SHORT $LN28@Tree
  00036	89 30		 mov	 DWORD PTR [eax], esi
  00038	eb 02		 jmp	 SHORT $LN29@Tree
$LN28@Tree:
  0003a	33 c0		 xor	 eax, eax
$LN29@Tree:
  0003c	89 06		 mov	 DWORD PTR [esi], eax

; 510  : 		_Init();

  0003e	8b ce		 mov	 ecx, esi
  00040	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00048	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Buynode
  0004d	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00050	c6 40 19 01	 mov	 BYTE PTR [eax+25], 1
  00054	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00057	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0005a	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005d	89 00		 mov	 DWORD PTR [eax], eax
  0005f	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00062	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00065	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 511  : 		}

  0006c	8b c6		 mov	 eax, esi
  0006e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00072	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00079	59		 pop	 ecx
  0007a	5e		 pop	 esi
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
PUBLIC	__$ArrayPad$
PUBLIC	?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$3
__ehfuncinfo$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T165149 = -76						; size = 4
__Str$129454 = -72					; size = 28
__Str$129451 = -72					; size = 28
__Nul$129456 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str, COMDAT
; _this$ = ecx

; 60   : 		{	// return string copy of character array

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 40	 sub	 esp, 64			; 00000040H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 3c	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c4		 xor	 eax, esp
  00026	50		 push	 eax
  00027	8d 44 24 50	 lea	 eax, DWORD PTR __$EHRec$[esp+92]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00031	8b c1		 mov	 eax, ecx

; 61   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)

  00033	8b 50 40	 mov	 edx, DWORD PTR [eax+64]
  00036	8b 74 24 60	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+88]
  0003a	33 ff		 xor	 edi, edi
  0003c	89 7c 24 10	 mov	 DWORD PTR $T165149[esp+92], edi
  00040	f6 c2 02	 test	 dl, 2
  00043	75 6e		 jne	 SHORT $LN4@str
  00045	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00048	39 39		 cmp	 DWORD PTR [ecx], edi
  0004a	74 67		 je	 SHORT $LN4@str

; 62   : 			{	// writable, make string from write buffer
; 63   : 			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()
; 64   : 				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());

  0004c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0004e	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  00051	3b d1		 cmp	 edx, ecx
  00053	72 02		 jb	 SHORT $LN8@str
  00055	8b ca		 mov	 ecx, edx
$LN8@str:
  00057	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
  0005c	2b c8		 sub	 ecx, eax
  0005e	d1 f9		 sar	 ecx, 1
  00060	51		 push	 ecx
  00061	33 d2		 xor	 edx, edx
  00063	bb 07 00 00 00	 mov	 ebx, 7
  00068	50		 push	 eax
  00069	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$129451[esp+100]
  0006d	89 5c 24 34	 mov	 DWORD PTR __Str$129451[esp+124], ebx
  00071	89 7c 24 30	 mov	 DWORD PTR __Str$129451[esp+120], edi
  00075	66 89 54 24 20	 mov	 WORD PTR __Str$129451[esp+104], dx
  0007a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0007f	89 7c 24 58	 mov	 DWORD PTR __$EHRec$[esp+100], edi
$LN304@str:

; 65   : 			return (_Str);

  00083	6a ff		 push	 -1
  00085	57		 push	 edi
  00086	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$129451[esp+100]
  0008a	33 c0		 xor	 eax, eax
  0008c	51		 push	 ecx
  0008d	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  00090	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00093	8b ce		 mov	 ecx, esi
  00095	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00099	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0009e	83 7c 24 2c 08	 cmp	 DWORD PTR __Str$129451[esp+116], 8
  000a3	0f 82 9d 00 00
	00		 jb	 $LN292@str
  000a9	8b 54 24 18	 mov	 edx, DWORD PTR __Str$129451[esp+96]
  000ad	52		 push	 edx
  000ae	e9 8b 00 00 00	 jmp	 $LN303@str
$LN4@str:

; 66   : 			}
; 67   : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)

  000b3	f6 c2 04	 test	 dl, 4
  000b6	75 43		 jne	 SHORT $LN2@str
  000b8	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000bb	39 39		 cmp	 DWORD PTR [ecx], edi
  000bd	74 3c		 je	 SHORT $LN2@str

; 68   : 			{	// readable, make string from read buffer
; 69   : 			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());

  000bf	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000c1	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  000c4	8b 12		 mov	 edx, DWORD PTR [edx]
  000c6	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  000c9	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000cc	8b 02		 mov	 eax, DWORD PTR [edx]
  000ce	2b c8		 sub	 ecx, eax
  000d0	d1 f9		 sar	 ecx, 1
  000d2	51		 push	 ecx
  000d3	33 d2		 xor	 edx, edx
  000d5	bb 07 00 00 00	 mov	 ebx, 7
  000da	50		 push	 eax
  000db	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$129454[esp+100]
  000df	89 5c 24 34	 mov	 DWORD PTR __Str$129454[esp+124], ebx
  000e3	89 7c 24 30	 mov	 DWORD PTR __Str$129454[esp+120], edi
  000e7	66 89 54 24 20	 mov	 WORD PTR __Str$129454[esp+104], dx
  000ec	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  000f1	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+100], 1

; 70   : 			return (_Str);

  000f9	eb 88		 jmp	 SHORT $LN304@str
$LN2@str:

; 71   : 			}
; 72   : 		else
; 73   : 			{	// inaccessible, return empty string
; 74   : 			_Mystr _Nul;

  000fb	bb 07 00 00 00	 mov	 ebx, 7
  00100	33 c0		 xor	 eax, eax
  00102	89 5c 24 48	 mov	 DWORD PTR __Nul$129456[esp+116], ebx
  00106	89 7c 24 44	 mov	 DWORD PTR __Nul$129456[esp+112], edi
  0010a	66 89 44 24 34	 mov	 WORD PTR __Nul$129456[esp+96], ax

; 75   : 			return (_Nul);

  0010f	6a ff		 push	 -1
  00111	33 c9		 xor	 ecx, ecx
  00113	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  00116	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00119	57		 push	 edi
  0011a	8d 54 24 38	 lea	 edx, DWORD PTR __Nul$129456[esp+100]
  0011e	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00122	52		 push	 edx
  00123	8b ce		 mov	 ecx, esi
  00125	c7 44 24 64 02
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+112], 2
  0012d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00132	83 7c 24 48 08	 cmp	 DWORD PTR __Nul$129456[esp+116], 8
  00137	72 0d		 jb	 SHORT $LN292@str
  00139	8b 44 24 34	 mov	 eax, DWORD PTR __Nul$129456[esp+96]
  0013d	50		 push	 eax
$LN303@str:
  0013e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00143	83 c4 04	 add	 esp, 4
$LN292@str:
  00146	8b c6		 mov	 eax, esi

; 76   : 			}
; 77   : 		}

  00148	8b 4c 24 50	 mov	 ecx, DWORD PTR __$EHRec$[esp+92]
  0014c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00153	59		 pop	 ecx
  00154	5f		 pop	 edi
  00155	5e		 pop	 esi
  00156	5b		 pop	 ebx
  00157	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+76]
  0015b	33 cc		 xor	 ecx, esp
  0015d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00162	83 c4 4c	 add	 esp, 76			; 0000004cH
  00165	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR __Str$129451[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$2:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR __Str$129454[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$3:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR __Nul$129456[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 b4	 lea	 eax, DWORD PTR [edx-76]
  0001f	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	83 c0 0c	 add	 eax, 12			; 0000000cH
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
PUBLIC	__$ArrayPad$
PUBLIC	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$3
__ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T166376 = -76						; size = 4
__Str$129730 = -72					; size = 28
__Str$129727 = -72					; size = 28
__Nul$129732 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 60   : 		{	// return string copy of character array

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 40	 sub	 esp, 64			; 00000040H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 3c	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c4		 xor	 eax, esp
  00026	50		 push	 eax
  00027	8d 44 24 50	 lea	 eax, DWORD PTR __$EHRec$[esp+92]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 61   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)

  00031	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00034	8b 74 24 60	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+88]
  00038	33 db		 xor	 ebx, ebx
  0003a	89 5c 24 10	 mov	 DWORD PTR $T166376[esp+92], ebx
  0003e	f6 c2 02	 test	 dl, 2
  00041	75 63		 jne	 SHORT $LN4@str@2
  00043	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00046	39 18		 cmp	 DWORD PTR [eax], ebx
  00048	74 5c		 je	 SHORT $LN4@str@2

; 62   : 			{	// writable, make string from write buffer
; 63   : 			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()
; 64   : 				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());

  0004a	8b 00		 mov	 eax, DWORD PTR [eax]
  0004c	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0004f	3b d0		 cmp	 edx, eax
  00051	72 02		 jb	 SHORT $LN8@str@2
  00053	8b c2		 mov	 eax, edx
$LN8@str@2:
  00055	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00058	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0005a	2b c1		 sub	 eax, ecx
  0005c	50		 push	 eax
  0005d	51		 push	 ecx
  0005e	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00063	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$129727[esp+100]
  00067	89 7c 24 34	 mov	 DWORD PTR __Str$129727[esp+124], edi
  0006b	89 5c 24 30	 mov	 DWORD PTR __Str$129727[esp+120], ebx
  0006f	88 5c 24 20	 mov	 BYTE PTR __Str$129727[esp+104], bl
  00073	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00078	89 5c 24 58	 mov	 DWORD PTR __$EHRec$[esp+100], ebx
$LN286@str@2:

; 65   : 			return (_Str);

  0007c	6a ff		 push	 -1
  0007e	53		 push	 ebx
  0007f	8d 54 24 1c	 lea	 edx, DWORD PTR __Str$129727[esp+100]
  00083	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  00086	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00089	52		 push	 edx
  0008a	8b ce		 mov	 ecx, esi
  0008c	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  0008f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00094	83 7c 24 2c 10	 cmp	 DWORD PTR __Str$129727[esp+116], 16 ; 00000010H
  00099	0f 82 8c 00 00
	00		 jb	 $LN274@str@2
  0009f	8b 44 24 18	 mov	 eax, DWORD PTR __Str$129727[esp+96]
  000a3	50		 push	 eax
  000a4	eb 7d		 jmp	 SHORT $LN285@str@2
$LN4@str@2:

; 66   : 			}
; 67   : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)

  000a6	f6 c2 04	 test	 dl, 4
  000a9	75 3b		 jne	 SHORT $LN2@str@2
  000ab	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000ae	39 1a		 cmp	 DWORD PTR [edx], ebx
  000b0	74 34		 je	 SHORT $LN2@str@2

; 68   : 			{	// readable, make string from read buffer
; 69   : 			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());

  000b2	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  000b5	8b 00		 mov	 eax, DWORD PTR [eax]
  000b7	03 02		 add	 eax, DWORD PTR [edx]
  000b9	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  000bc	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000be	2b c1		 sub	 eax, ecx
  000c0	50		 push	 eax
  000c1	51		 push	 ecx
  000c2	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  000c7	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$129730[esp+100]
  000cb	89 7c 24 34	 mov	 DWORD PTR __Str$129730[esp+124], edi
  000cf	89 5c 24 30	 mov	 DWORD PTR __Str$129730[esp+120], ebx
  000d3	88 5c 24 20	 mov	 BYTE PTR __Str$129730[esp+104], bl
  000d7	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000dc	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+100], 1

; 70   : 			return (_Str);

  000e4	eb 96		 jmp	 SHORT $LN286@str@2
$LN2@str@2:

; 71   : 			}
; 72   : 		else
; 73   : 			{	// inaccessible, return empty string
; 74   : 			_Mystr _Nul;

  000e6	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  000eb	89 7c 24 48	 mov	 DWORD PTR __Nul$129732[esp+116], edi
  000ef	89 5c 24 44	 mov	 DWORD PTR __Nul$129732[esp+112], ebx
  000f3	88 5c 24 34	 mov	 BYTE PTR __Nul$129732[esp+96], bl

; 75   : 			return (_Nul);

  000f7	6a ff		 push	 -1
  000f9	53		 push	 ebx
  000fa	8d 4c 24 38	 lea	 ecx, DWORD PTR __Nul$129732[esp+100]
  000fe	51		 push	 ecx
  000ff	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  00102	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00105	8b ce		 mov	 ecx, esi
  00107	c7 44 24 64 02
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+112], 2
  0010f	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00112	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00117	83 7c 24 48 10	 cmp	 DWORD PTR __Nul$129732[esp+116], 16 ; 00000010H
  0011c	72 0d		 jb	 SHORT $LN274@str@2
  0011e	8b 54 24 34	 mov	 edx, DWORD PTR __Nul$129732[esp+96]
  00122	52		 push	 edx
$LN285@str@2:
  00123	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00128	83 c4 04	 add	 esp, 4
$LN274@str@2:
  0012b	8b c6		 mov	 eax, esi

; 76   : 			}
; 77   : 		}

  0012d	8b 4c 24 50	 mov	 ecx, DWORD PTR __$EHRec$[esp+92]
  00131	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00138	59		 pop	 ecx
  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx
  0013c	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+76]
  00140	33 cc		 xor	 ecx, esp
  00142	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00147	83 c4 4c	 add	 esp, 76			; 0000004cH
  0014a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR __Str$129727[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$2:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR __Str$129730[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$3:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR __Nul$129732[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 b4	 lea	 eax, DWORD PTR [edx-76]
  0001f	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	83 c0 0c	 add	 eax, 12			; 0000000cH
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z
_TEXT	SEGMENT
$T167484 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::erase, COMDAT
; _this$ = ecx

; 934  : 		{	// erase [_First, _Last)

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 935  : 		if (_First == begin() && _Last == end())

  00007	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0000a	8b 18		 mov	 ebx, DWORD PTR [eax]
  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	57		 push	 edi
  0000f	8b 7c 24 1c	 mov	 edi, DWORD PTR __First$[esp+16]
  00013	85 ff		 test	 edi, edi
  00015	74 04		 je	 SHORT $LN26@erase@7
  00017	3b f8		 cmp	 edi, eax
  00019	74 09		 je	 SHORT $LN27@erase@7
$LN26@erase@7:
  0001b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00020	8b 7c 24 1c	 mov	 edi, DWORD PTR __First$[esp+16]
$LN27@erase@7:
  00024	39 5c 24 20	 cmp	 DWORD PTR __First$[esp+20], ebx
  00028	75 66		 jne	 SHORT $LL2@erase@7
  0002a	8b 4c 24 24	 mov	 ecx, DWORD PTR __Last$[esp+16]
  0002e	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	85 c9		 test	 ecx, ecx
  00035	74 04		 je	 SHORT $LN49@erase@7
  00037	3b c8		 cmp	 ecx, eax
  00039	74 09		 je	 SHORT $LN50@erase@7
$LN49@erase@7:
  0003b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00040	8b 7c 24 1c	 mov	 edi, DWORD PTR __First$[esp+16]
$LN50@erase@7:
  00044	39 5c 24 28	 cmp	 DWORD PTR __Last$[esp+20], ebx
  00048	75 46		 jne	 SHORT $LL2@erase@7

; 936  : 			{	// erase all
; 937  : 			clear();

  0004a	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0004d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00050	52		 push	 edx
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Erase
  00058	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005b	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0005e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00061	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00068	89 00		 mov	 DWORD PTR [eax], eax
  0006a	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0006d	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 938  : 			return (begin());

  00070	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	8b 16		 mov	 edx, DWORD PTR [esi]
  00077	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00080	89 10		 mov	 DWORD PTR [eax], edx
  00082	5b		 pop	 ebx

; 945  : 			}
; 946  : 		}

  00083	83 c4 08	 add	 esp, 8
  00086	c2 14 00	 ret	 20			; 00000014H
  00089	8d a4 24 00 00
	00 00		 npad	 7
$LL2@erase@7:

; 939  : 			}
; 940  : 		else
; 941  : 			{	// partial erase, one at a time
; 942  : 			while (_First != _Last)

  00090	85 ff		 test	 edi, edi
  00092	74 06		 je	 SHORT $LN96@erase@7
  00094	3b 7c 24 24	 cmp	 edi, DWORD PTR __Last$[esp+16]
  00098	74 09		 je	 SHORT $LN97@erase@7
$LN96@erase@7:
  0009a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0009f	8b 7c 24 1c	 mov	 edi, DWORD PTR __First$[esp+16]
$LN97@erase@7:
  000a3	8b 5c 24 20	 mov	 ebx, DWORD PTR __First$[esp+20]
  000a7	3b 5c 24 28	 cmp	 ebx, DWORD PTR __Last$[esp+20]
  000ab	74 1d		 je	 SHORT $LN1@erase@7

; 943  : 				erase(_First++);

  000ad	8d 4c 24 1c	 lea	 ecx, DWORD PTR __First$[esp+16]
  000b1	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Inc
  000b6	53		 push	 ebx
  000b7	57		 push	 edi
  000b8	8d 44 24 14	 lea	 eax, DWORD PTR $T167484[esp+28]
  000bc	50		 push	 eax
  000bd	8b ce		 mov	 ecx, esi
  000bf	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::erase
  000c4	8b 7c 24 1c	 mov	 edi, DWORD PTR __First$[esp+16]
  000c8	eb c6		 jmp	 SHORT $LL2@erase@7
$LN1@erase@7:

; 944  : 			return (_Make_iter(_First));

  000ca	8b 36		 mov	 esi, DWORD PTR [esi]
  000cc	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  000d0	5f		 pop	 edi
  000d1	89 30		 mov	 DWORD PTR [eax], esi
  000d3	5e		 pop	 esi
  000d4	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  000d7	5b		 pop	 ebx

; 945  : 			}
; 946  : 		}

  000d8	83 c4 08	 add	 esp, 8
  000db	c2 14 00	 ret	 20			; 00000014H
?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::erase
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Insert
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z$0
__ehfuncinfo$?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z
_TEXT	SEGMENT
$T167882 = -80						; size = 28
$T167881 = -52						; size = 40
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Insert, COMDAT
; _this$ = ecx

; 1187 : 		{	// add node with value next to _Wherenode, to left if _Addnode

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	53		 push	 ebx
  00012	55		 push	 ebp
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c4		 xor	 eax, esp
  0001c	50		 push	 eax
  0001d	8d 44 24 58	 lea	 eax, DWORD PTR __$EHRec$[esp+100]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx

; 1188 : 		if (max_size() - 1 <= _Mysize)

  00029	81 7f 1c 54 55
	55 15		 cmp	 DWORD PTR [edi+28], 357913940 ; 15555554H
  00030	72 4c		 jb	 SHORT $LN17@Insert

; 1189 : 			_THROW(length_error, "map/set<T> too long");

  00032	6a 13		 push	 19			; 00000013H
  00034	33 f6		 xor	 esi, esi
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  0003b	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T167882[esp+108]
  0003f	c7 44 24 34 0f
	00 00 00	 mov	 DWORD PTR $T167882[esp+132], 15 ; 0000000fH
  00047	89 74 24 30	 mov	 DWORD PTR $T167882[esp+128], esi
  0004b	c6 44 24 20 00	 mov	 BYTE PTR $T167882[esp+112], 0
  00050	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00055	8d 44 24 14	 lea	 eax, DWORD PTR $T167882[esp+100]
  00059	50		 push	 eax
  0005a	8d 4c 24 34	 lea	 ecx, DWORD PTR $T167881[esp+104]
  0005e	89 74 24 64	 mov	 DWORD PTR __$EHRec$[esp+112], esi
  00062	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00067	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  0006c	8d 4c 24 34	 lea	 ecx, DWORD PTR $T167881[esp+104]
  00070	51		 push	 ecx
  00071	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR $T167881[esp+108], OFFSET ??_7length_error@std@@6B@
  00079	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN17@Insert:

; 1190 : 		_Nodeptr _Newnode = _Buynode(_Myhead, _Wherenode, _Myhead,
; 1191 : 			_Val, _Red);

  0007e	8b 54 24 74	 mov	 edx, DWORD PTR __Val$[esp+96]
  00082	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00085	8b 74 24 70	 mov	 esi, DWORD PTR __Wherenode$[esp+96]
  00089	6a 00		 push	 0
  0008b	52		 push	 edx
  0008c	50		 push	 eax
  0008d	56		 push	 esi
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@D@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Buynode
  00094	8b e8		 mov	 ebp, eax

; 1192 : 
; 1193 : 		++_Mysize;
; 1194 : 		if (_Wherenode == _Myhead)

  00096	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00099	bb 01 00 00 00	 mov	 ebx, 1
  0009e	01 5f 1c	 add	 DWORD PTR [edi+28], ebx
  000a1	3b f0		 cmp	 esi, eax
  000a3	75 10		 jne	 SHORT $LN16@Insert

; 1195 : 			{	// first node in tree, just set head values
; 1196 : 			_Root() = _Newnode;

  000a5	89 68 04	 mov	 DWORD PTR [eax+4], ebp

; 1197 : 			_Lmost() = _Newnode, _Rmost() = _Newnode;

  000a8	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  000ab	89 28		 mov	 DWORD PTR [eax], ebp
  000ad	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  000b0	89 69 08	 mov	 DWORD PTR [ecx+8], ebp
  000b3	eb 22		 jmp	 SHORT $LN11@Insert
$LN16@Insert:

; 1198 : 			}
; 1199 : 		else if (_Addleft)

  000b5	80 7c 24 6c 00	 cmp	 BYTE PTR __Addleft$[esp+96], 0
  000ba	74 0d		 je	 SHORT $LN14@Insert

; 1200 : 			{	// add to left of _Wherenode
; 1201 : 			_Left(_Wherenode) = _Newnode;

  000bc	89 2e		 mov	 DWORD PTR [esi], ebp

; 1202 : 			if (_Wherenode == _Lmost())

  000be	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  000c1	3b 30		 cmp	 esi, DWORD PTR [eax]
  000c3	75 12		 jne	 SHORT $LN11@Insert

; 1203 : 				_Lmost() = _Newnode;

  000c5	89 28		 mov	 DWORD PTR [eax], ebp

; 1204 : 			}
; 1205 : 		else

  000c7	eb 0e		 jmp	 SHORT $LN11@Insert
$LN14@Insert:

; 1206 : 			{	// add to right of _Wherenode
; 1207 : 			_Right(_Wherenode) = _Newnode;

  000c9	89 6e 08	 mov	 DWORD PTR [esi+8], ebp

; 1208 : 			if (_Wherenode == _Rmost())

  000cc	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  000cf	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  000d2	75 03		 jne	 SHORT $LN11@Insert

; 1209 : 				_Rmost() = _Newnode;

  000d4	89 68 08	 mov	 DWORD PTR [eax+8], ebp
$LN11@Insert:

; 1210 : 			}
; 1211 : 
; 1212 : 		for (_Nodeptr _Pnode = _Newnode; _Color(_Parent(_Pnode)) == _Red; )

  000d7	8b 55 04	 mov	 edx, DWORD PTR [ebp+4]
  000da	80 7a 18 00	 cmp	 BYTE PTR [edx+24], 0
  000de	8d 45 04	 lea	 eax, DWORD PTR [ebp+4]
  000e1	8b f5		 mov	 esi, ebp
  000e3	0f 85 ec 00 00
	00		 jne	 $LN9@Insert
  000e9	8d a4 24 00 00
	00 00		 npad	 7
$LL10@Insert:

; 1213 : 			if (_Parent(_Pnode) == _Left(_Parent(_Parent(_Pnode))))

  000f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f2	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000f5	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  000f7	75 51		 jne	 SHORT $LN8@Insert

; 1214 : 				{	// fixup red-red in left subtree
; 1215 : 				_Wherenode = _Right(_Parent(_Parent(_Pnode)));

  000f9	8b 52 08	 mov	 edx, DWORD PTR [edx+8]

; 1216 : 				if (_Color(_Wherenode) == _Red)

  000fc	80 7a 18 00	 cmp	 BYTE PTR [edx+24], 0
  00100	75 19		 jne	 SHORT $LN7@Insert

; 1217 : 					{	// parent has two red children, blacken both
; 1218 : 					_Color(_Parent(_Pnode)) = _Black;

  00102	88 59 18	 mov	 BYTE PTR [ecx+24], bl

; 1219 : 					_Color(_Wherenode) = _Black;

  00105	88 5a 18	 mov	 BYTE PTR [edx+24], bl

; 1220 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  00108	8b 10		 mov	 edx, DWORD PTR [eax]
  0010a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0010d	c6 41 18 00	 mov	 BYTE PTR [ecx+24], 0

; 1221 : 					_Pnode = _Parent(_Parent(_Pnode));

  00111	8b 10		 mov	 edx, DWORD PTR [eax]
  00113	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 1222 : 					}
; 1223 : 				else

  00116	e9 aa 00 00 00	 jmp	 $LN203@Insert
$LN7@Insert:

; 1224 : 					{	// parent has red and black children
; 1225 : 					if (_Pnode == _Right(_Parent(_Pnode)))

  0011b	3b 71 08	 cmp	 esi, DWORD PTR [ecx+8]
  0011e	75 0a		 jne	 SHORT $LN5@Insert

; 1226 : 						{	// rotate right child to left
; 1227 : 						_Pnode = _Parent(_Pnode);

  00120	8b f1		 mov	 esi, ecx

; 1228 : 						_Lrotate(_Pnode);

  00122	56		 push	 esi
  00123	8b cf		 mov	 ecx, edi
  00125	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Lrotate
$LN5@Insert:

; 1229 : 						}
; 1230 : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

  0012a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0012d	88 58 18	 mov	 BYTE PTR [eax+24], bl

; 1231 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  00130	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00133	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00136	c6 42 18 00	 mov	 BYTE PTR [edx+24], 0

; 1232 : 					_Rrotate(_Parent(_Parent(_Pnode)));

  0013a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0013d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00140	51		 push	 ecx
  00141	8b cf		 mov	 ecx, edi
  00143	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Rrotate

; 1233 : 					}
; 1234 : 				}
; 1235 : 			else

  00148	eb 7b		 jmp	 SHORT $LN203@Insert
$LN8@Insert:

; 1236 : 				{	// fixup red-red in right subtree
; 1237 : 				_Wherenode = _Left(_Parent(_Parent(_Pnode)));

  0014a	8b 12		 mov	 edx, DWORD PTR [edx]

; 1238 : 				if (_Color(_Wherenode) == _Red)

  0014c	80 7a 18 00	 cmp	 BYTE PTR [edx+24], 0
  00150	75 16		 jne	 SHORT $LN3@Insert

; 1239 : 					{	// parent has two red children, blacken both
; 1240 : 					_Color(_Parent(_Pnode)) = _Black;

  00152	88 59 18	 mov	 BYTE PTR [ecx+24], bl

; 1241 : 					_Color(_Wherenode) = _Black;

  00155	88 5a 18	 mov	 BYTE PTR [edx+24], bl

; 1242 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  00158	8b 10		 mov	 edx, DWORD PTR [eax]
  0015a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0015d	c6 41 18 00	 mov	 BYTE PTR [ecx+24], 0

; 1243 : 					_Pnode = _Parent(_Parent(_Pnode));

  00161	8b 10		 mov	 edx, DWORD PTR [eax]
  00163	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 1244 : 					}
; 1245 : 				else

  00166	eb 5d		 jmp	 SHORT $LN203@Insert
$LN3@Insert:

; 1246 : 					{	// parent has red and black children
; 1247 : 					if (_Pnode == _Left(_Parent(_Pnode)))

  00168	3b 31		 cmp	 esi, DWORD PTR [ecx]
  0016a	75 0a		 jne	 SHORT $LN1@Insert

; 1248 : 						{	// rotate left child to right
; 1249 : 						_Pnode = _Parent(_Pnode);

  0016c	8b f1		 mov	 esi, ecx

; 1250 : 						_Rrotate(_Pnode);

  0016e	56		 push	 esi
  0016f	8b cf		 mov	 ecx, edi
  00171	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Rrotate
$LN1@Insert:

; 1251 : 						}
; 1252 : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

  00176	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00179	88 58 18	 mov	 BYTE PTR [eax+24], bl

; 1253 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  0017c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0017f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00182	c6 42 18 00	 mov	 BYTE PTR [edx+24], 0

; 1254 : 					_Lrotate(_Parent(_Parent(_Pnode)));

  00186	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00189	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0018c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0018f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00191	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00194	8b 11		 mov	 edx, DWORD PTR [ecx]
  00196	80 7a 19 00	 cmp	 BYTE PTR [edx+25], 0
  0019a	75 03		 jne	 SHORT $LN202@Insert
  0019c	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN202@Insert:
  0019f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001a2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  001a5	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  001a8	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  001ab	75 05		 jne	 SHORT $LN201@Insert
  001ad	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  001b0	eb 0e		 jmp	 SHORT $LN198@Insert
$LN201@Insert:
  001b2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001b5	3b 02		 cmp	 eax, DWORD PTR [edx]
  001b7	75 04		 jne	 SHORT $LN199@Insert
  001b9	89 0a		 mov	 DWORD PTR [edx], ecx
  001bb	eb 03		 jmp	 SHORT $LN198@Insert
$LN199@Insert:
  001bd	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN198@Insert:
  001c0	89 01		 mov	 DWORD PTR [ecx], eax
  001c2	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN203@Insert:
  001c5	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  001c8	80 79 18 00	 cmp	 BYTE PTR [ecx+24], 0
  001cc	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  001cf	0f 84 1b ff ff
	ff		 je	 $LL10@Insert
$LN9@Insert:

; 1255 : 					}
; 1256 : 				}
; 1257 : 
; 1258 : 		_Color(_Root()) = _Black;	// root is always black

  001d5	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  001d8	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001db	88 58 18	 mov	 BYTE PTR [eax+24], bl

; 1259 : 		return (_TREE_ITERATOR(_Newnode));

  001de	8b 44 24 68	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+96]
  001e2	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001e4	89 68 04	 mov	 DWORD PTR [eax+4], ebp
  001e7	89 08		 mov	 DWORD PTR [eax], ecx

; 1260 : 		}

  001e9	8b 4c 24 58	 mov	 ecx, DWORD PTR __$EHRec$[esp+100]
  001ed	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001f4	59		 pop	 ecx
  001f5	5f		 pop	 edi
  001f6	5e		 pop	 esi
  001f7	5d		 pop	 ebp
  001f8	5b		 pop	 ebx
  001f9	83 c4 50	 add	 esp, 80			; 00000050H
  001fc	c2 10 00	 ret	 16			; 00000010H
$LN268@Insert:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T167882[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ac	 lea	 eax, DWORD PTR [edx-84]
  0000f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Insert
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@KAXXZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Xlen
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T168452 = -80						; size = 28
$T168451 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@KAXXZ PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@KAXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 48	 lea	 eax, DWORD PTR __$EHRec$[esp+84]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

  00023	6a 12		 push	 18			; 00000012H
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0002a	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T168452[esp+92]
  0002e	c7 44 24 24 0f
	00 00 00	 mov	 DWORD PTR $T168452[esp+116], 15 ; 0000000fH
  00036	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T168452[esp+112], 0
  0003e	c6 44 24 10 00	 mov	 BYTE PTR $T168452[esp+96], 0
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00048	8d 44 24 04	 lea	 eax, DWORD PTR $T168452[esp+84]
  0004c	50		 push	 eax
  0004d	8d 4c 24 24	 lea	 ecx, DWORD PTR $T168451[esp+88]
  00051	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+96], 0
  00059	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005e	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  00063	8d 4c 24 24	 lea	 ecx, DWORD PTR $T168451[esp+88]
  00067	51		 push	 ecx
  00068	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR $T168451[esp+92], OFFSET ??_7length_error@std@@6B@
  00070	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN44@Xlen:
  00075	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@KAXXZ$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T168452[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@KAXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 bc	 lea	 eax, DWORD PTR [edx-68]
  0000f	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@KAXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@KAXXZ ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Xlen
PUBLIC	?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T168611 = -80						; size = 28
$T168610 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 48	 lea	 eax, DWORD PTR __$EHRec$[esp+84]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

  00023	6a 12		 push	 18			; 00000012H
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0002a	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T168611[esp+92]
  0002e	c7 44 24 24 0f
	00 00 00	 mov	 DWORD PTR $T168611[esp+116], 15 ; 0000000fH
  00036	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T168611[esp+112], 0
  0003e	c6 44 24 10 00	 mov	 BYTE PTR $T168611[esp+96], 0
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00048	8d 44 24 04	 lea	 eax, DWORD PTR $T168611[esp+84]
  0004c	50		 push	 eax
  0004d	8d 4c 24 24	 lea	 ecx, DWORD PTR $T168610[esp+88]
  00051	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+96], 0
  00059	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005e	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  00063	8d 4c 24 24	 lea	 ecx, DWORD PTR $T168610[esp+88]
  00067	51		 push	 ecx
  00068	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR $T168610[esp+92], OFFSET ??_7length_error@std@@6B@
  00070	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN44@Xlen@2:
  00075	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T168611[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 bc	 lea	 eax, DWORD PTR [edx-68]
  0000f	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Incsize
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z$0
__ehfuncinfo$?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T168770 = -80						; size = 28
$T168769 = -52						; size = 40
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Incsize, COMDAT
; _this$ = ecx

; 1239 : 		{	// alter element count, with checking

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 4c	 lea	 eax, DWORD PTR __$EHRec$[esp+88]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1240 : 		if (max_size() - _Mysize < _Count)

  00024	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00027	8b 54 24 5c	 mov	 edx, DWORD PTR __Count$[esp+84]
  0002b	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
  00030	2b f0		 sub	 esi, eax
  00032	3b f2		 cmp	 esi, edx
  00034	73 52		 jae	 SHORT $LN1@Incsize

; 1241 : 			_THROW(length_error, "list<T> too long");

  00036	6a 10		 push	 16			; 00000010H
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003d	8d 4c 24 10	 lea	 ecx, DWORD PTR $T168770[esp+96]
  00041	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T168770[esp+120], 15 ; 0000000fH
  00049	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T168770[esp+116], 0
  00051	c6 44 24 14 00	 mov	 BYTE PTR $T168770[esp+100], 0
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8d 44 24 08	 lea	 eax, DWORD PTR $T168770[esp+88]
  0005f	50		 push	 eax
  00060	8d 4c 24 28	 lea	 ecx, DWORD PTR $T168769[esp+92]
  00064	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+100], 0
  0006c	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00071	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  00076	8d 4c 24 28	 lea	 ecx, DWORD PTR $T168769[esp+92]
  0007a	51		 push	 ecx
  0007b	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR $T168769[esp+96], OFFSET ??_7length_error@std@@6B@
  00083	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@Incsize:

; 1242 : 		_Mysize += _Count;

  00088	03 c2		 add	 eax, edx
  0008a	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1243 : 		}

  0008d	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$EHRec$[esp+88]
  00091	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00098	59		 pop	 ecx
  00099	5e		 pop	 esi
  0009a	83 c4 50	 add	 esp, 80			; 00000050H
  0009d	c2 04 00	 ret	 4
$LN51@Incsize:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T168770[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 b8	 lea	 eax, DWORD PTR [edx-72]
  0000f	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Incsize
PUBLIC	?_Xlen@?$vector@KV?$allocator@K@std@@@std@@KAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@KV?$allocator@K@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@KV?$allocator@K@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@KV?$allocator@K@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@KV?$allocator@K@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@KV?$allocator@K@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T168945 = -80						; size = 28
$T168944 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@KV?$allocator@K@std@@@std@@KAXXZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@KV?$allocator@K@std@@@std@@KAXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 48	 lea	 eax, DWORD PTR __$EHRec$[esp+84]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

  00023	6a 12		 push	 18			; 00000012H
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0002a	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T168945[esp+92]
  0002e	c7 44 24 24 0f
	00 00 00	 mov	 DWORD PTR $T168945[esp+116], 15 ; 0000000fH
  00036	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T168945[esp+112], 0
  0003e	c6 44 24 10 00	 mov	 BYTE PTR $T168945[esp+96], 0
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00048	8d 44 24 04	 lea	 eax, DWORD PTR $T168945[esp+84]
  0004c	50		 push	 eax
  0004d	8d 4c 24 24	 lea	 ecx, DWORD PTR $T168944[esp+88]
  00051	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+96], 0
  00059	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005e	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  00063	8d 4c 24 24	 lea	 ecx, DWORD PTR $T168944[esp+88]
  00067	51		 push	 ecx
  00068	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR $T168944[esp+92], OFFSET ??_7length_error@std@@6B@
  00070	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN44@Xlen@3:
  00075	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@KV?$allocator@K@std@@@std@@KAXXZ$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T168945[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@KV?$allocator@K@std@@@std@@KAXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 bc	 lea	 eax, DWORD PTR [edx-68]
  0000f	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@KV?$allocator@K@std@@@std@@KAXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@KV?$allocator@K@std@@@std@@KAXXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen
PUBLIC	?_Incsize@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Incsize
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Incsize@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXI@Z$0
__ehfuncinfo$?_Incsize@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Incsize@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Incsize@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T169104 = -80						; size = 28
$T169103 = -52						; size = 40
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
?_Incsize@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXI@Z PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Incsize, COMDAT
; _this$ = ecx

; 1239 : 		{	// alter element count, with checking

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Incsize@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXI@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 4c	 lea	 eax, DWORD PTR __$EHRec$[esp+88]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1240 : 		if (max_size() - _Mysize < _Count)

  00024	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00027	8b 54 24 5c	 mov	 edx, DWORD PTR __Count$[esp+84]
  0002b	be ff ff ff 03	 mov	 esi, 67108863		; 03ffffffH
  00030	2b f0		 sub	 esi, eax
  00032	3b f2		 cmp	 esi, edx
  00034	73 52		 jae	 SHORT $LN1@Incsize@2

; 1241 : 			_THROW(length_error, "list<T> too long");

  00036	6a 10		 push	 16			; 00000010H
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003d	8d 4c 24 10	 lea	 ecx, DWORD PTR $T169104[esp+96]
  00041	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T169104[esp+120], 15 ; 0000000fH
  00049	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T169104[esp+116], 0
  00051	c6 44 24 14 00	 mov	 BYTE PTR $T169104[esp+100], 0
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8d 44 24 08	 lea	 eax, DWORD PTR $T169104[esp+88]
  0005f	50		 push	 eax
  00060	8d 4c 24 28	 lea	 ecx, DWORD PTR $T169103[esp+92]
  00064	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+100], 0
  0006c	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00071	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  00076	8d 4c 24 28	 lea	 ecx, DWORD PTR $T169103[esp+92]
  0007a	51		 push	 ecx
  0007b	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR $T169103[esp+96], OFFSET ??_7length_error@std@@6B@
  00083	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@Incsize@2:

; 1242 : 		_Mysize += _Count;

  00088	03 c2		 add	 eax, edx
  0008a	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1243 : 		}

  0008d	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$EHRec$[esp+88]
  00091	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00098	59		 pop	 ecx
  00099	5e		 pop	 esi
  0009a	83 c4 50	 add	 esp, 80			; 00000050H
  0009d	c2 04 00	 ret	 4
$LN51@Incsize@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Incsize@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXI@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T169104[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Incsize@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 b8	 lea	 eax, DWORD PTR [edx-72]
  0000f	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Incsize@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Incsize@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXI@Z ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Incsize
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T169279 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_grouping, COMDAT
; _this$ = ecx

; 174  : 		{	// return grouping string

  00000	51		 push	 ecx

; 175  : 		return (string(_Grouping));

  00001	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T169279[esp+12], 0
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL41@do_groupin:
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 d2		 test	 dl, dl
  00035	75 f9		 jne	 SHORT $LL41@do_groupin
  00037	2b c7		 sub	 eax, edi
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00042	5f		 pop	 edi
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi

; 176  : 		}

  00046	59		 pop	 ecx
  00047	c2 04 00	 ret	 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_grouping
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T169429 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_falsename, COMDAT
; _this$ = ecx

; 179  : 		{	// return name for false

  00000	51		 push	 ecx

; 180  : 		return (string_type(_Falsename));

  00001	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T169429[esp+12], 0
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL41@do_falsena:
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 d2		 test	 dl, dl
  00035	75 f9		 jne	 SHORT $LL41@do_falsena
  00037	2b c7		 sub	 eax, edi
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00042	5f		 pop	 edi
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi

; 181  : 		}

  00046	59		 pop	 ecx
  00047	c2 04 00	 ret	 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_falsename
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T169579 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_truename, COMDAT
; _this$ = ecx

; 184  : 		{	// return name for true

  00000	51		 push	 ecx

; 185  : 		return (string_type(_Truename));

  00001	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T169579[esp+12], 0
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL41@do_truenam:
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 d2		 test	 dl, dl
  00035	75 f9		 jne	 SHORT $LL41@do_truenam
  00037	2b c7		 sub	 eax, edi
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00042	5f		 pop	 edi
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi

; 186  : 		}

  00046	59		 pop	 ecx
  00047	c2 04 00	 ret	 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_truename
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T169729 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<wchar_t>::do_grouping, COMDAT
; _this$ = ecx

; 174  : 		{	// return grouping string

  00000	51		 push	 ecx

; 175  : 		return (string(_Grouping));

  00001	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T169729[esp+12], 0
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL41@do_groupin@2:
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 d2		 test	 dl, dl
  00035	75 f9		 jne	 SHORT $LL41@do_groupin@2
  00037	2b c7		 sub	 eax, edi
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00042	5f		 pop	 edi
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi

; 176  : 		}

  00046	59		 pop	 ecx
  00047	c2 04 00	 ret	 4
?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<wchar_t>::do_grouping
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T169879 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::numpunct<wchar_t>::do_falsename, COMDAT
; _this$ = ecx

; 179  : 		{	// return name for false

  00000	51		 push	 ecx

; 180  : 		return (string_type(_Falsename));

  00001	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	33 c0		 xor	 eax, eax
  0000b	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00012	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00019	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001d	8b c2		 mov	 eax, edx
  0001f	57		 push	 edi
  00020	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T169879[esp+12], 0
  00028	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0002b	eb 03 8d 49 00	 npad	 5
$LL43@do_falsena@2:
  00030	66 8b 08	 mov	 cx, WORD PTR [eax]
  00033	83 c0 02	 add	 eax, 2
  00036	66 85 c9	 test	 cx, cx
  00039	75 f5		 jne	 SHORT $LL43@do_falsena@2
  0003b	2b c7		 sub	 eax, edi
  0003d	d1 f8		 sar	 eax, 1
  0003f	50		 push	 eax
  00040	52		 push	 edx
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00048	5f		 pop	 edi
  00049	8b c6		 mov	 eax, esi
  0004b	5e		 pop	 esi

; 181  : 		}

  0004c	59		 pop	 ecx
  0004d	c2 04 00	 ret	 4
?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::numpunct<wchar_t>::do_falsename
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T170042 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::numpunct<wchar_t>::do_truename, COMDAT
; _this$ = ecx

; 184  : 		{	// return name for true

  00000	51		 push	 ecx

; 185  : 		return (string_type(_Truename));

  00001	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	33 c0		 xor	 eax, eax
  0000b	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00012	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00019	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001d	8b c2		 mov	 eax, edx
  0001f	57		 push	 edi
  00020	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T170042[esp+12], 0
  00028	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0002b	eb 03 8d 49 00	 npad	 5
$LL43@do_truenam@2:
  00030	66 8b 08	 mov	 cx, WORD PTR [eax]
  00033	83 c0 02	 add	 eax, 2
  00036	66 85 c9	 test	 cx, cx
  00039	75 f5		 jne	 SHORT $LL43@do_truenam@2
  0003b	2b c7		 sub	 eax, edi
  0003d	d1 f8		 sar	 eax, 1
  0003f	50		 push	 eax
  00040	52		 push	 edx
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00048	5f		 pop	 edi
  00049	8b c6		 mov	 eax, esi
  0004b	5e		 pop	 esi

; 186  : 		}

  0004c	59		 pop	 ecx
  0004d	c2 04 00	 ret	 4
?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::numpunct<wchar_t>::do_truename
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z ; CipherShed::SecurityTokenKeyfile::SecurityTokenKeyfile
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z$1
__ehfuncinfo$??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z PROC	; CipherShed::SecurityTokenKeyfile::SecurityTokenKeyfile, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002a	8b 7c 24 24	 mov	 edi, DWORD PTR ___that$[esp+28]
  0002e	8b 07		 mov	 eax, DWORD PTR [edi]
  00030	89 06		 mov	 DWORD PTR [esi], eax
  00032	6a ff		 push	 -1
  00034	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00037	33 db		 xor	 ebx, ebx
  00039	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  0003c	53		 push	 ebx
  0003d	33 d2		 xor	 edx, edx
  0003f	c7 41 18 07 00
	00 00		 mov	 DWORD PTR [ecx+24], 7
  00046	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00049	50		 push	 eax
  0004a	66 89 51 04	 mov	 WORD PTR [ecx+4], dx
  0004e	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00053	6a ff		 push	 -1
  00055	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00058	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  0005b	53		 push	 ebx
  0005c	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00063	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00066	50		 push	 eax
  00067	89 5c 24 28	 mov	 DWORD PTR __$EHRec$[esp+52], ebx
  0006b	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  0006e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00073	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  00076	83 c7 40	 add	 edi, 64			; 00000040H
  00079	57		 push	 edi
  0007a	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0007d	c6 44 24 20 01	 mov	 BYTE PTR __$EHRec$[esp+44], 1
  00082	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00085	e8 00 00 00 00	 call	 ??0SecurityTokenInfo@CipherShed@@QAE@ABU01@@Z
  0008a	8b c6		 mov	 eax, esi
  0008c	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00090	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00097	59		 pop	 ecx
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	83 c4 10	 add	 esp, 16			; 00000010H
  0009e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 20	 add	 ecx, 32			; 00000020H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z ENDP	; CipherShed::SecurityTokenKeyfile::SecurityTokenKeyfile
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
EXTRN	??0bad_cast@std@@QAE@PBD@Z:PROC			; std::bad_cast::bad_cast
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	??1bad_cast@std@@UAE@XZ:PROC			; std::bad_cast::~bad_cast
EXTRN	??0bad_cast@std@@QAE@ABV01@@Z:PROC		; std::bad_cast::bad_cast
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$131789 = -36					; size = 4
__Lock$170463 = -32					; size = 4
__Lock$131788 = -28					; size = 4
$T170455 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$170485 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$131788[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, 0 ; std::ctype<char>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$131789[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$170463[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, 0 ; std::ctype<char>::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, eax ; std::ctype<char>::id
$LN10@use_facet:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$170463[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet
$LN30@use_facet:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet
$LN20@use_facet:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet
$LN16@use_facet:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet
$LN31@use_facet:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet
$LN4@use_facet:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$131789[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T170455[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T170455[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$131789[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$170485[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<char> >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$170485[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$131788[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$131788[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
PUBLIC	??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
EXTRN	?id@?$ctype@_W@std@@2V0locale@2@A:DWORD		; std::ctype<wchar_t>::id
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$131824 = -36					; size = 4
__Lock$170510 = -32					; size = 4
__Lock$131823 = -28					; size = 4
$T170502 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$170532 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<wchar_t> >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$131823[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, 0 ; std::ctype<wchar_t>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$131824[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet@2
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$170510[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, 0 ; std::ctype<wchar_t>::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet@2
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, eax ; std::ctype<wchar_t>::id
$LN10@use_facet@2:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$170510[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet@2:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A ; std::ctype<wchar_t>::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet@2
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet@2
$LN30@use_facet@2:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet@2
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet@2
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet@2
$LN20@use_facet@2:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet@2
$LN16@use_facet@2:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet@2:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet@2
$LN31@use_facet@2:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet@2

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet@2
$LN4@use_facet@2:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$131824[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<wchar_t>::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet@2

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T170502[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T170502[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet@2:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$131824[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$170532[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet@2
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet@2:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$170532[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet@2:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$131823[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$131823[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<wchar_t> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
_TEXT	SEGMENT
$T170552 = -44						; size = 4
$T170549 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 33   : 	{	// return NTCS + string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 34   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 54 24 40	 mov	 edx, DWORD PTR __Left$[esp+52]
  00029	33 db		 xor	 ebx, ebx
  0002b	8b c2		 mov	 eax, edx
  0002d	89 5c 24 0c	 mov	 DWORD PTR $T170552[esp+56], ebx
  00031	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T170549[esp+80], 15 ; 0000000fH
  00039	89 5c 24 24	 mov	 DWORD PTR $T170549[esp+76], ebx
  0003d	88 5c 24 14	 mov	 BYTE PTR $T170549[esp+60], bl
  00041	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL98@operator@52:
  00044	8a 08		 mov	 cl, BYTE PTR [eax]
  00046	40		 inc	 eax
  00047	3a cb		 cmp	 cl, bl
  00049	75 f9		 jne	 SHORT $LL98@operator@52
  0004b	2b c6		 sub	 eax, esi
  0004d	50		 push	 eax
  0004e	52		 push	 edx
  0004f	8d 4c 24 18	 lea	 ecx, DWORD PTR $T170549[esp+64]
  00053	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00058	8b 44 24 44	 mov	 eax, DWORD PTR __Right$[esp+52]
  0005c	6a ff		 push	 -1
  0005e	53		 push	 ebx
  0005f	50		 push	 eax
  00060	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T170549[esp+68]
  00064	89 5c 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], ebx
  00068	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0006d	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00071	6a ff		 push	 -1
  00073	53		 push	 ebx
  00074	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0007b	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0007e	50		 push	 eax
  0007f	8b ce		 mov	 ecx, esi
  00081	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00084	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00089	83 7c 24 28 10	 cmp	 DWORD PTR $T170549[esp+80], 16 ; 00000010H
  0008e	72 0d		 jb	 SHORT $LN99@operator@52
  00090	8b 4c 24 14	 mov	 ecx, DWORD PTR $T170549[esp+60]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009a	83 c4 04	 add	 esp, 4
$LN99@operator@52:
  0009d	8b c6		 mov	 eax, esi

; 35   : 	}

  0009f	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000aa	59		 pop	 ecx
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	83 c4 2c	 add	 esp, 44			; 0000002cH
  000b0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T170549[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
_TEXT	SEGMENT
$T170940 = -44						; size = 4
$T170937 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 53   : 	{	// return string + NTCS

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 54   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 44 24 40	 mov	 eax, DWORD PTR __Left$[esp+52]
  00029	33 db		 xor	 ebx, ebx
  0002b	6a ff		 push	 -1
  0002d	53		 push	 ebx
  0002e	50		 push	 eax
  0002f	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T170937[esp+68]
  00033	89 5c 24 18	 mov	 DWORD PTR $T170940[esp+68], ebx
  00037	c7 44 24 34 0f
	00 00 00	 mov	 DWORD PTR $T170937[esp+92], 15 ; 0000000fH
  0003f	89 5c 24 30	 mov	 DWORD PTR $T170937[esp+88], ebx
  00043	88 5c 24 20	 mov	 BYTE PTR $T170937[esp+72], bl
  00047	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004c	8b 54 24 44	 mov	 edx, DWORD PTR __Right$[esp+52]
  00050	8b c2		 mov	 eax, edx
  00052	89 5c 24 34	 mov	 DWORD PTR __$EHRec$[esp+64], ebx
  00056	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL90@operator@53:
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	40		 inc	 eax
  00063	3a cb		 cmp	 cl, bl
  00065	75 f9		 jne	 SHORT $LL90@operator@53
  00067	2b c6		 sub	 eax, esi
  00069	50		 push	 eax
  0006a	52		 push	 edx
  0006b	8d 4c 24 18	 lea	 ecx, DWORD PTR $T170937[esp+64]
  0006f	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00074	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00078	6a ff		 push	 -1
  0007a	53		 push	 ebx
  0007b	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00082	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00085	50		 push	 eax
  00086	8b ce		 mov	 ecx, esi
  00088	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  0008b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00090	83 7c 24 28 10	 cmp	 DWORD PTR $T170937[esp+80], 16 ; 00000010H
  00095	72 0d		 jb	 SHORT $LN91@operator@53
  00097	8b 4c 24 14	 mov	 ecx, DWORD PTR $T170937[esp+60]
  0009b	51		 push	 ecx
  0009c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a1	83 c4 04	 add	 esp, 4
$LN91@operator@53:
  000a4	8b c6		 mov	 eax, esi

; 55   : 	}

  000a6	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b1	59		 pop	 ecx
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	83 c4 2c	 add	 esp, 44			; 0000002cH
  000b7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T170937[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
_TEXT	SEGMENT
$T171302 = -44						; size = 4
$T171299 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 33   : 	{	// return NTCS + string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 34   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 54 24 40	 mov	 edx, DWORD PTR __Left$[esp+52]
  00029	33 ff		 xor	 edi, edi
  0002b	33 c0		 xor	 eax, eax
  0002d	66 89 44 24 14	 mov	 WORD PTR $T171299[esp+60], ax
  00032	8b c2		 mov	 eax, edx
  00034	89 7c 24 0c	 mov	 DWORD PTR $T171302[esp+56], edi
  00038	c7 44 24 28 07
	00 00 00	 mov	 DWORD PTR $T171299[esp+80], 7
  00040	89 7c 24 24	 mov	 DWORD PTR $T171299[esp+76], edi
  00044	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
$LL104@operator@54:
  00047	66 8b 08	 mov	 cx, WORD PTR [eax]
  0004a	83 c0 02	 add	 eax, 2
  0004d	66 3b cf	 cmp	 cx, di
  00050	75 f5		 jne	 SHORT $LL104@operator@54
  00052	2b c6		 sub	 eax, esi
  00054	d1 f8		 sar	 eax, 1
  00056	50		 push	 eax
  00057	52		 push	 edx
  00058	8d 4c 24 18	 lea	 ecx, DWORD PTR $T171299[esp+64]
  0005c	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00061	8b 4c 24 44	 mov	 ecx, DWORD PTR __Right$[esp+52]
  00065	6a ff		 push	 -1
  00067	57		 push	 edi
  00068	51		 push	 ecx
  00069	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T171299[esp+68]
  0006d	89 7c 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], edi
  00071	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00076	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  0007a	6a ff		 push	 -1
  0007c	57		 push	 edi
  0007d	33 d2		 xor	 edx, edx
  0007f	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00086	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00089	50		 push	 eax
  0008a	8b ce		 mov	 ecx, esi
  0008c	66 89 56 04	 mov	 WORD PTR [esi+4], dx
  00090	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00095	83 7c 24 28 08	 cmp	 DWORD PTR $T171299[esp+80], 8
  0009a	72 0d		 jb	 SHORT $LN105@operator@54
  0009c	8b 44 24 14	 mov	 eax, DWORD PTR $T171299[esp+60]
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a6	83 c4 04	 add	 esp, 4
$LN105@operator@54:
  000a9	8b c6		 mov	 eax, esi

; 35   : 	}

  000ab	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000af	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b6	59		 pop	 ecx
  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	83 c4 2c	 add	 esp, 44			; 0000002cH
  000bc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T171299[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$_Construct@USecurityTokenInfo@CipherShed@@U12@@std@@YAXPAUSecurityTokenInfo@CipherShed@@ABU12@@Z ; std::_Construct<CipherShed::SecurityTokenInfo,CipherShed::SecurityTokenInfo>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
xdata$x	SEGMENT
__unwindtable$??$_Construct@USecurityTokenInfo@CipherShed@@U12@@std@@YAXPAUSecurityTokenInfo@CipherShed@@ABU12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@USecurityTokenInfo@CipherShed@@U12@@std@@YAXPAUSecurityTokenInfo@CipherShed@@ABU12@@Z$0
__ehfuncinfo$??$_Construct@USecurityTokenInfo@CipherShed@@U12@@std@@YAXPAUSecurityTokenInfo@CipherShed@@ABU12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@USecurityTokenInfo@CipherShed@@U12@@std@@YAXPAUSecurityTokenInfo@CipherShed@@ABU12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@USecurityTokenInfo@CipherShed@@U12@@std@@YAXPAUSecurityTokenInfo@CipherShed@@ABU12@@Z
_TEXT	SEGMENT
$T171727 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@USecurityTokenInfo@CipherShed@@U12@@std@@YAXPAUSecurityTokenInfo@CipherShed@@ABU12@@Z PROC ; std::_Construct<CipherShed::SecurityTokenInfo,CipherShed::SecurityTokenInfo>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$_Construct@USecurityTokenInfo@CipherShed@@U12@@std@@YAXPAUSecurityTokenInfo@CipherShed@@ABU12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00014	33 c4		 xor	 eax, esp
  00016	50		 push	 eax
  00017	8d 44 24 08	 lea	 eax, DWORD PTR __$EHRec$[esp+20]
  0001b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 51   : 	void _FARQ *_Vptr = _Ptr;

  00021	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ptr$[esp+16]
  00025	89 4c 24 18	 mov	 DWORD PTR __Vptr$[esp+16], ecx

; 52   : 	::new (_Vptr) _T1(_Val);

  00029	89 4c 24 04	 mov	 DWORD PTR $T171727[esp+20], ecx
  0002d	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+28], 0
  00035	85 c9		 test	 ecx, ecx
  00037	74 0a		 je	 SHORT $LN3@Construct@5
  00039	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+16]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??0SecurityTokenInfo@CipherShed@@QAE@ABU01@@Z
$LN3@Construct@5:

; 53   : 	}

  00043	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00047	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004e	59		 pop	 ecx
  0004f	83 c4 10	 add	 esp, 16			; 00000010H
  00052	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@USecurityTokenInfo@CipherShed@@U12@@std@@YAXPAUSecurityTokenInfo@CipherShed@@ABU12@@Z$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR __Vptr$[ebp-4]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T171727[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@USecurityTokenInfo@CipherShed@@U12@@std@@YAXPAUSecurityTokenInfo@CipherShed@@ABU12@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@USecurityTokenInfo@CipherShed@@U12@@std@@YAXPAUSecurityTokenInfo@CipherShed@@ABU12@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@USecurityTokenInfo@CipherShed@@U12@@std@@YAXPAUSecurityTokenInfo@CipherShed@@ABU12@@Z ENDP ; std::_Construct<CipherShed::SecurityTokenInfo,CipherShed::SecurityTokenInfo>
PUBLIC	??$_Destroy@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	e9 00 00 00 00	 jmp	 ??1SecurityTokenInfo@CipherShed@@QAE@XZ
??$_Destroy@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>
_TEXT	ENDS
PUBLIC	?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T171761 = -164						; size = 4
$T171755 = -160						; size = 4
$T171757 = -156						; size = 28
$T171756 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat, COMDAT

; 1030 : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	55		 push	 ebp
  00016	56		 push	 esi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1031 : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b ac 24 b8 00
	00 00		 mov	 ebp, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T171761[esp+180], ebx
  00039	85 ed		 test	 ebp, ebp
  0003b	0f 84 ac 00 00
	00		 je	 $LN50@Getcat@3
  00041	39 5d 00	 cmp	 DWORD PTR [ebp], ebx
  00044	0f 85 a3 00 00
	00		 jne	 $LN50@Getcat@3

; 1032 : 			*_Ppf = _NEW_CRT num_put<_Elem, _OutIt>(
; 1033 : 				_Locinfo(_Ploc->name()));

  0004a	6a 10		 push	 16			; 00000010H
  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00051	8b f0		 mov	 esi, eax
  00053	83 c4 04	 add	 esp, 4
  00056	89 74 24 14	 mov	 DWORD PTR $T171755[esp+180], esi
  0005a	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00061	85 f6		 test	 esi, esi
  00063	74 4a		 je	 SHORT $LN4@Getcat@3
  00065	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006c	8d 44 24 18	 lea	 eax, DWORD PTR $T171757[esp+180]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00076	50		 push	 eax
  00077	8d 4c 24 38	 lea	 ecx, DWORD PTR $T171756[esp+184]
  0007b	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00083	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T171761[esp+184], 1
  0008b	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  00090	bb 03 00 00 00	 mov	 ebx, 3
  00095	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0009c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
  000a2	e8 00 00 00 00	 call	 __Getcvt
  000a7	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000aa	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  000ad	eb 02		 jmp	 SHORT $LN5@Getcat@3
$LN4@Getcat@3:
  000af	33 f6		 xor	 esi, esi
$LN5@Getcat@3:
  000b1	c7 84 24 b0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 2
  000bc	89 75 00	 mov	 DWORD PTR [ebp], esi
  000bf	f6 c3 02	 test	 bl, 2
  000c2	74 10		 je	 SHORT $LN11@Getcat@3
  000c4	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000c7	8d 4c 24 34	 lea	 ecx, DWORD PTR $T171756[esp+180]
  000cb	89 5c 24 10	 mov	 DWORD PTR $T171761[esp+180], ebx
  000cf	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat@3:
  000d4	f6 c3 01	 test	 bl, 1
  000d7	74 14		 je	 SHORT $LN50@Getcat@3
  000d9	83 7c 24 30 10	 cmp	 DWORD PTR $T171757[esp+204], 16 ; 00000010H
  000de	72 0d		 jb	 SHORT $LN50@Getcat@3
  000e0	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T171757[esp+184]
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ea	83 c4 04	 add	 esp, 4
$LN50@Getcat@3:

; 1034 : 		return (_X_NUMERIC);

  000ed	b8 04 00 00 00	 mov	 eax, 4

; 1035 : 		}

  000f2	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00100	59		 pop	 ecx
  00101	5e		 pop	 esi
  00102	5d		 pop	 ebp
  00103	5b		 pop	 ebx
  00104	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  0010a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T171755[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T171761[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat@3
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T171761[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T171757[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat@3:
  0002f	c3		 ret	 0
__ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  0003a	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
PUBLIC	?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T171924 = -164						; size = 4
$T171918 = -160						; size = 4
$T171920 = -156						; size = 28
$T171919 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getcat, COMDAT

; 1030 : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	55		 push	 ebp
  00016	56		 push	 esi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1031 : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b ac 24 b8 00
	00 00		 mov	 ebp, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T171924[esp+180], ebx
  00039	85 ed		 test	 ebp, ebp
  0003b	0f 84 ac 00 00
	00		 je	 $LN50@Getcat@4
  00041	39 5d 00	 cmp	 DWORD PTR [ebp], ebx
  00044	0f 85 a3 00 00
	00		 jne	 $LN50@Getcat@4

; 1032 : 			*_Ppf = _NEW_CRT num_put<_Elem, _OutIt>(
; 1033 : 				_Locinfo(_Ploc->name()));

  0004a	6a 10		 push	 16			; 00000010H
  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00051	8b f0		 mov	 esi, eax
  00053	83 c4 04	 add	 esp, 4
  00056	89 74 24 14	 mov	 DWORD PTR $T171918[esp+180], esi
  0005a	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00061	85 f6		 test	 esi, esi
  00063	74 4a		 je	 SHORT $LN4@Getcat@4
  00065	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006c	8d 44 24 18	 lea	 eax, DWORD PTR $T171920[esp+180]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00076	50		 push	 eax
  00077	8d 4c 24 38	 lea	 ecx, DWORD PTR $T171919[esp+184]
  0007b	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00083	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T171924[esp+184], 1
  0008b	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  00090	bb 03 00 00 00	 mov	 ebx, 3
  00095	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0009c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@
  000a2	e8 00 00 00 00	 call	 __Getcvt
  000a7	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000aa	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  000ad	eb 02		 jmp	 SHORT $LN5@Getcat@4
$LN4@Getcat@4:
  000af	33 f6		 xor	 esi, esi
$LN5@Getcat@4:
  000b1	c7 84 24 b0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 2
  000bc	89 75 00	 mov	 DWORD PTR [ebp], esi
  000bf	f6 c3 02	 test	 bl, 2
  000c2	74 10		 je	 SHORT $LN11@Getcat@4
  000c4	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000c7	8d 4c 24 34	 lea	 ecx, DWORD PTR $T171919[esp+180]
  000cb	89 5c 24 10	 mov	 DWORD PTR $T171924[esp+180], ebx
  000cf	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat@4:
  000d4	f6 c3 01	 test	 bl, 1
  000d7	74 14		 je	 SHORT $LN50@Getcat@4
  000d9	83 7c 24 30 10	 cmp	 DWORD PTR $T171920[esp+204], 16 ; 00000010H
  000de	72 0d		 jb	 SHORT $LN50@Getcat@4
  000e0	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T171920[esp+184]
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ea	83 c4 04	 add	 esp, 4
$LN50@Getcat@4:

; 1034 : 		return (_X_NUMERIC);

  000ed	b8 04 00 00 00	 mov	 eax, 4

; 1035 : 		}

  000f2	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00100	59		 pop	 ecx
  00101	5e		 pop	 esi
  00102	5d		 pop	 ebp
  00103	5b		 pop	 ebx
  00104	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  0010a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T171918[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T171924[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat@4
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T171924[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T171920[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat@4:
  0002f	c3		 ret	 0
__ehhandler$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  0003a	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getcat
PUBLIC	?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	03H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T172087 = -164						; size = 4
$T172081 = -160						; size = 4
$T172083 = -156						; size = 28
$T172082 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::numpunct<char>::_Getcat, COMDAT

; 112  : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 113  : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b bc 24 b8 00
	00 00		 mov	 edi, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T172087[esp+180], ebx
  00039	85 ff		 test	 edi, edi
  0003b	0f 84 ad 00 00
	00		 je	 $LN42@Getcat@5
  00041	39 1f		 cmp	 DWORD PTR [edi], ebx
  00043	0f 85 a5 00 00
	00		 jne	 $LN42@Getcat@5

; 114  : 			*_Ppf = _NEW_CRT numpunct<_Elem>(
; 115  : 				_Locinfo(_Ploc->name()), 0, true);

  00049	6a 18		 push	 24			; 00000018H
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
  00055	89 74 24 14	 mov	 DWORD PTR $T172081[esp+180], esi
  00059	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00060	85 f6		 test	 esi, esi
  00062	74 4d		 je	 SHORT $LN4@Getcat@5
  00064	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006b	8d 44 24 18	 lea	 eax, DWORD PTR $T172083[esp+180]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00075	50		 push	 eax
  00076	8d 4c 24 38	 lea	 ecx, DWORD PTR $T172082[esp+184]
  0007a	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00082	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T172087[esp+184], 1
  0008a	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  0008f	6a 01		 push	 1
  00091	6a 00		 push	 0
  00093	bb 03 00 00 00	 mov	 ebx, 3
  00098	50		 push	 eax
  00099	8b ce		 mov	 ecx, esi
  0009b	c7 84 24 bc 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+200], 2
  000a6	89 5c 24 1c	 mov	 DWORD PTR $T172087[esp+192], ebx
  000aa	e8 00 00 00 00	 call	 ??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z ; std::numpunct<char>::numpunct<char>
  000af	eb 02		 jmp	 SHORT $LN5@Getcat@5
$LN4@Getcat@5:
  000b1	33 c0		 xor	 eax, eax
$LN5@Getcat@5:
  000b3	89 07		 mov	 DWORD PTR [edi], eax
  000b5	c7 84 24 b0 00
	00 00 03 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 3
  000c0	f6 c3 02	 test	 bl, 2
  000c3	74 10		 je	 SHORT $LN11@Getcat@5
  000c5	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000c8	8d 4c 24 34	 lea	 ecx, DWORD PTR $T172082[esp+180]
  000cc	89 5c 24 10	 mov	 DWORD PTR $T172087[esp+180], ebx
  000d0	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat@5:
  000d5	f6 c3 01	 test	 bl, 1
  000d8	74 14		 je	 SHORT $LN42@Getcat@5
  000da	83 7c 24 30 10	 cmp	 DWORD PTR $T172083[esp+204], 16 ; 00000010H
  000df	72 0d		 jb	 SHORT $LN42@Getcat@5
  000e1	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T172083[esp+184]
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000eb	83 c4 04	 add	 esp, 4
$LN42@Getcat@5:

; 116  : 		return (_X_NUMERIC);

  000ee	b8 04 00 00 00	 mov	 eax, 4

; 117  : 		}

  000f3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000fa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00101	59		 pop	 ecx
  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  0010b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T172081[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T172087[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat@5
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T172087[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T172083[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat@5:
  0002f	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  00030	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T172087[ebp]
  00036	83 e0 02	 and	 eax, 2
  00039	0f 84 0f 00 00
	00		 je	 $LN10@Getcat@5
  0003f	83 a5 5c ff ff
	ff fd		 and	 DWORD PTR $T172087[ebp], -3 ; fffffffdH
  00046	8d 4d 80	 lea	 ecx, DWORD PTR $T172082[ebp]
  00049	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN10@Getcat@5:
  0004e	c3		 ret	 0
__ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0004f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00053	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  00059	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  0005f	33 c8		 xor	 ecx, eax
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0006b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::numpunct<char>::_Getcat
PUBLIC	?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<wchar_t>::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	03H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T172223 = -164						; size = 4
$T172217 = -160						; size = 4
$T172219 = -156						; size = 28
$T172218 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::numpunct<wchar_t>::_Getcat, COMDAT

; 112  : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 113  : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b bc 24 b8 00
	00 00		 mov	 edi, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T172223[esp+180], ebx
  00039	85 ff		 test	 edi, edi
  0003b	0f 84 ad 00 00
	00		 je	 $LN42@Getcat@6
  00041	39 1f		 cmp	 DWORD PTR [edi], ebx
  00043	0f 85 a5 00 00
	00		 jne	 $LN42@Getcat@6

; 114  : 			*_Ppf = _NEW_CRT numpunct<_Elem>(
; 115  : 				_Locinfo(_Ploc->name()), 0, true);

  00049	6a 18		 push	 24			; 00000018H
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
  00055	89 74 24 14	 mov	 DWORD PTR $T172217[esp+180], esi
  00059	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00060	85 f6		 test	 esi, esi
  00062	74 4d		 je	 SHORT $LN4@Getcat@6
  00064	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006b	8d 44 24 18	 lea	 eax, DWORD PTR $T172219[esp+180]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00075	50		 push	 eax
  00076	8d 4c 24 38	 lea	 ecx, DWORD PTR $T172218[esp+184]
  0007a	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00082	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T172223[esp+184], 1
  0008a	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  0008f	6a 01		 push	 1
  00091	6a 00		 push	 0
  00093	bb 03 00 00 00	 mov	 ebx, 3
  00098	50		 push	 eax
  00099	8b ce		 mov	 ecx, esi
  0009b	c7 84 24 bc 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+200], 2
  000a6	89 5c 24 1c	 mov	 DWORD PTR $T172223[esp+192], ebx
  000aa	e8 00 00 00 00	 call	 ??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z ; std::numpunct<wchar_t>::numpunct<wchar_t>
  000af	eb 02		 jmp	 SHORT $LN5@Getcat@6
$LN4@Getcat@6:
  000b1	33 c0		 xor	 eax, eax
$LN5@Getcat@6:
  000b3	89 07		 mov	 DWORD PTR [edi], eax
  000b5	c7 84 24 b0 00
	00 00 03 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 3
  000c0	f6 c3 02	 test	 bl, 2
  000c3	74 10		 je	 SHORT $LN11@Getcat@6
  000c5	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000c8	8d 4c 24 34	 lea	 ecx, DWORD PTR $T172218[esp+180]
  000cc	89 5c 24 10	 mov	 DWORD PTR $T172223[esp+180], ebx
  000d0	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat@6:
  000d5	f6 c3 01	 test	 bl, 1
  000d8	74 14		 je	 SHORT $LN42@Getcat@6
  000da	83 7c 24 30 10	 cmp	 DWORD PTR $T172219[esp+204], 16 ; 00000010H
  000df	72 0d		 jb	 SHORT $LN42@Getcat@6
  000e1	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T172219[esp+184]
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000eb	83 c4 04	 add	 esp, 4
$LN42@Getcat@6:

; 116  : 		return (_X_NUMERIC);

  000ee	b8 04 00 00 00	 mov	 eax, 4

; 117  : 		}

  000f3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000fa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00101	59		 pop	 ecx
  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  0010b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T172217[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T172223[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat@6
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T172223[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T172219[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat@6:
  0002f	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  00030	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T172223[ebp]
  00036	83 e0 02	 and	 eax, 2
  00039	0f 84 0f 00 00
	00		 je	 $LN10@Getcat@6
  0003f	83 a5 5c ff ff
	ff fd		 and	 DWORD PTR $T172223[ebp], -3 ; fffffffdH
  00046	8d 4d 80	 lea	 ecx, DWORD PTR $T172218[ebp]
  00049	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN10@Getcat@6:
  0004e	c3		 ret	 0
__ehhandler$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0004f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00053	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  00059	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  0005f	33 c8		 xor	 ecx, eax
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0006b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::numpunct<wchar_t>::_Getcat
PUBLIC	?destroy@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAEXPAUSecurityTokenKeyfile@CipherShed@@@Z ; std::allocator<CipherShed::SecurityTokenKeyfile>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAEXPAUSecurityTokenKeyfile@CipherShed@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAEXPAUSecurityTokenKeyfile@CipherShed@@@Z PROC ; std::allocator<CipherShed::SecurityTokenKeyfile>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	e8 00 00 00 00	 call	 ??1SecurityTokenKeyfile@CipherShed@@QAE@XZ

; 161  : 		}

  00009	c2 04 00	 ret	 4
?destroy@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAEXPAUSecurityTokenKeyfile@CipherShed@@@Z ENDP ; std::allocator<CipherShed::SecurityTokenKeyfile>::destroy
_TEXT	ENDS
PUBLIC	??$_Construct@USecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@ABU12@@Z ; std::_Construct<CipherShed::SecurityTokenKeyfile,CipherShed::SecurityTokenKeyfile>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
xdata$x	SEGMENT
__unwindtable$??$_Construct@USecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@ABU12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@USecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@ABU12@@Z$0
__ehfuncinfo$??$_Construct@USecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@ABU12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@USecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@ABU12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@USecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@ABU12@@Z
_TEXT	SEGMENT
$T172365 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@USecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@ABU12@@Z PROC ; std::_Construct<CipherShed::SecurityTokenKeyfile,CipherShed::SecurityTokenKeyfile>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$_Construct@USecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@ABU12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00014	33 c4		 xor	 eax, esp
  00016	50		 push	 eax
  00017	8d 44 24 08	 lea	 eax, DWORD PTR __$EHRec$[esp+20]
  0001b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 51   : 	void _FARQ *_Vptr = _Ptr;

  00021	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ptr$[esp+16]
  00025	89 4c 24 18	 mov	 DWORD PTR __Vptr$[esp+16], ecx

; 52   : 	::new (_Vptr) _T1(_Val);

  00029	89 4c 24 04	 mov	 DWORD PTR $T172365[esp+20], ecx
  0002d	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+28], 0
  00035	85 c9		 test	 ecx, ecx
  00037	74 0a		 je	 SHORT $LN3@Construct@6
  00039	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+16]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z
$LN3@Construct@6:

; 53   : 	}

  00043	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00047	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004e	59		 pop	 ecx
  0004f	83 c4 10	 add	 esp, 16			; 00000010H
  00052	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@USecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@ABU12@@Z$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR __Vptr$[ebp-4]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T172365[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@USecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@ABU12@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@USecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@ABU12@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@USecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@ABU12@@Z ENDP ; std::_Construct<CipherShed::SecurityTokenKeyfile,CipherShed::SecurityTokenKeyfile>
; Function compile flags: /Ogtpy
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7out_of_range@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ ; `string'
PUBLIC	__TI3?AVfailure@ios_base@std@@
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@	; `string'
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	__CTA3?AVfailure@ios_base@std@@
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA3?AVfailure@ios_base@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ DB 'ios_base::failbit se'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT __TI3?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI3?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?clear@ios_base@std@@QAEXH_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$2
__ehfuncinfo$?clear@ios_base@std@@QAEXH_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?clear@ios_base@std@@QAEXH_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T172385 = -148						; size = 40
$T172383 = -148						; size = 40
$T172386 = -108						; size = 28
$T172384 = -108						; size = 28
$T172387 = -80						; size = 40
$T172388 = -40						; size = 28
__$EHRec$ = -12						; size = 12
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 285  :         {	// set state, possibly reraise exception

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?clear@ios_base@std@@QAEXH_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 84 24 8c 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+152]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 286  :         _Mystate = (iostate)(_State & _Statmask);

  00029	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __State$[esp+148]
  00030	83 e0 17	 and	 eax, 23			; 00000017H
  00033	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 287  :         if ((_Mystate & _Except) == 0)

  00036	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00039	23 c8		 and	 ecx, eax
  0003b	0f 84 d7 00 00
	00		 je	 $LN1@clear@4

; 288  :             ;
; 289  :         else if (_Reraise)

  00041	80 bc 24 a0 00
	00 00 00	 cmp	 BYTE PTR __Reraise$[esp+148], 0
  00049	74 09		 je	 SHORT $LN6@clear@4

; 290  :             _RERAISE;

  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN6@clear@4:

; 291  :         else if (_Mystate & _Except & badbit)

  00054	f6 c1 04	 test	 cl, 4
  00057	74 3e		 je	 SHORT $LN4@clear@4

; 292  :             _THROW_NCEE(failure, "ios_base::badbit set");

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
  0005e	8d 4c 24 30	 lea	 ecx, DWORD PTR $T172384[esp+156]
  00062	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00067	8d 44 24 2c	 lea	 eax, DWORD PTR $T172384[esp+152]
  0006b	50		 push	 eax
  0006c	8d 4c 24 08	 lea	 ecx, DWORD PTR $T172383[esp+156]
  00070	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+164], 0
  0007b	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  00080	68 00 00 00 00	 push	 OFFSET __TI3?AVfailure@ios_base@std@@
  00085	8d 4c 24 08	 lea	 ecx, DWORD PTR $T172383[esp+156]
  00089	51		 push	 ecx
  0008a	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T172383[esp+160], OFFSET ??_7failure@ios_base@std@@6B@
  00092	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@clear@4:

; 293  :         else if (_Mystate & _Except & failbit)

  00097	f6 c1 02	 test	 cl, 2
  0009a	74 3e		 je	 SHORT $LN2@clear@4

; 294  :             _THROW_NCEE(failure, "ios_base::failbit set");

  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  000a1	8d 4c 24 30	 lea	 ecx, DWORD PTR $T172386[esp+156]
  000a5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000aa	8d 54 24 2c	 lea	 edx, DWORD PTR $T172386[esp+152]
  000ae	52		 push	 edx
  000af	8d 4c 24 08	 lea	 ecx, DWORD PTR $T172385[esp+156]
  000b3	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+164], 1
  000be	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  000c3	68 00 00 00 00	 push	 OFFSET __TI3?AVfailure@ios_base@std@@
  000c8	8d 44 24 08	 lea	 eax, DWORD PTR $T172385[esp+156]
  000cc	50		 push	 eax
  000cd	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T172385[esp+160], OFFSET ??_7failure@ios_base@std@@6B@
  000d5	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@clear@4:

; 295  :         else
; 296  :             _THROW_NCEE(failure, "ios_base::eofbit set");

  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  000df	8d 4c 24 74	 lea	 ecx, DWORD PTR $T172388[esp+156]
  000e3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e8	8d 4c 24 70	 lea	 ecx, DWORD PTR $T172388[esp+152]
  000ec	51		 push	 ecx
  000ed	8d 4c 24 4c	 lea	 ecx, DWORD PTR $T172387[esp+156]
  000f1	c7 84 24 98 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+164], 2
  000fc	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  00101	68 00 00 00 00	 push	 OFFSET __TI3?AVfailure@ios_base@std@@
  00106	8d 54 24 4c	 lea	 edx, DWORD PTR $T172387[esp+156]
  0010a	52		 push	 edx
  0010b	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR $T172387[esp+160], OFFSET ??_7failure@ios_base@std@@6B@
  00113	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@clear@4:

; 297  :         }

  00118	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+152]
  0011f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00126	59		 pop	 ecx
  00127	81 c4 94 00 00
	00		 add	 esp, 148		; 00000094H
  0012d	c2 08 00	 ret	 8
$LN24@clear@4:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$0:
  00000	8d 4d 94	 lea	 ecx, DWORD PTR $T172384[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$1:
  00008	8d 4d 94	 lea	 ecx, DWORD PTR $T172386[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR $T172388[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?clear@ios_base@std@@QAEXH_N@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 82 78 ff ff
	ff		 lea	 eax, DWORD PTR [edx-136]
  00022	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@ios_base@std@@QAEXH_N@Z
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	8b 7c 24 20	 mov	 edi, DWORD PTR ___that$[esp+24]
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00033	33 d2		 xor	 edx, edx
  00035	6a ff		 push	 -1
  00037	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00040	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00043	52		 push	 edx
  00044	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0004b	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  0004e	50		 push	 eax
  0004f	89 54 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], edx
  00053	88 51 04	 mov	 BYTE PTR [ecx+4], dl
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8b c6		 mov	 eax, esi
  0005d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
; Function compile flags: /Ogtpy
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
PUBLIC	?clear@ios_base@std@@QAEXH@Z			; std::ios_base::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@ios_base@std@@QAEXH@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
?clear@ios_base@std@@QAEXH@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 301  : 		clear(_State, false);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __State$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 302  : 		}

  0000c	c2 04 00	 ret	 4
?clear@ios_base@std@@QAEXH@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
PUBLIC	?_Init@ios_base@std@@IAEXXZ			; std::ios_base::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@ios_base@std@@IAEXXZ
_TEXT	SEGMENT
__Lock$172557 = -4					; size = 4
?_Init@ios_base@std@@IAEXXZ PROC			; std::ios_base::_Init, COMDAT
; _this$ = ecx

; 515  :         {	// initialize a new ios_base

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 516  :         _Ploc = 0;

  00002	33 ed		 xor	 ebp, ebp
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 517  :         _Stdstr = 0;
; 518  :         _Except = goodbit;
; 519  :         _Fmtfl = skipws | dec;
; 520  :         _Prec = 6;
; 521  :         _Wide = 0;
; 522  :         _Arr = 0;
; 523  :         _Calls = 0;
; 524  :         clear(goodbit);

  00008	55		 push	 ebp
  00009	55		 push	 ebp
  0000a	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0000d	89 6e 04	 mov	 DWORD PTR [esi+4], ebp
  00010	89 6e 0c	 mov	 DWORD PTR [esi+12], ebp
  00013	c7 46 10 01 02
	00 00		 mov	 DWORD PTR [esi+16], 513	; 00000201H
  0001a	c7 46 14 06 00
	00 00		 mov	 DWORD PTR [esi+20], 6
  00021	89 6e 18	 mov	 DWORD PTR [esi+24], ebp
  00024	89 6e 1c	 mov	 DWORD PTR [esi+28], ebp
  00027	89 6e 20	 mov	 DWORD PTR [esi+32], ebp
  0002a	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 525  :         _Ploc = _NEW_CRT locale;

  0002f	6a 04		 push	 4
  00031	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00036	8b f8		 mov	 edi, eax
  00038	83 c4 04	 add	 esp, 4
  0003b	3b fd		 cmp	 edi, ebp
  0003d	74 37		 je	 SHORT $LN3@Init@5
  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  00045	89 07		 mov	 DWORD PTR [edi], eax
  00047	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0004c	55		 push	 ebp
  0004d	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$172557[esp+24]
  00051	8b d8		 mov	 ebx, eax
  00053	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00058	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0005b	83 f8 ff	 cmp	 eax, -1
  0005e	73 04		 jae	 SHORT $LN9@Init@5
  00060	40		 inc	 eax
  00061	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN9@Init@5:
  00064	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$172557[esp+20]
  00068	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0006d	5b		 pop	 ebx
  0006e	89 7e 24	 mov	 DWORD PTR [esi+36], edi
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5d		 pop	 ebp

; 526  :         }

  00074	59		 pop	 ecx
  00075	c3		 ret	 0
$LN3@Init@5:
  00076	5f		 pop	 edi

; 525  :         _Ploc = _NEW_CRT locale;

  00077	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0007a	5e		 pop	 esi
  0007b	5d		 pop	 ebp

; 526  :         }

  0007c	59		 pop	 ecx
  0007d	c3		 ret	 0
?_Init@ios_base@std@@IAEXXZ ENDP			; std::ios_base::_Init
_TEXT	ENDS
PUBLIC	??_C@_0L@FEEFGEIL@CipherShed?$AA@		; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ?$AA@			; `string'
PUBLIC	??_C@_0IM@CKBKFPJM@Parameter?5incorrect?4?6?6?6?$CIIf?5you?5r@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__MessageBoxA@16:PROC
;	COMDAT ??_C@_0L@FEEFGEIL@CipherShed?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0L@FEEFGEIL@CipherShed?$AA@ DB 'CipherShed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ?$AA@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ?$AA@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0IM@CKBKFPJM@Parameter?5incorrect?4?6?6?6?$CIIf?5you?5r@
CONST	SEGMENT
??_C@_0IM@CKBKFPJM@Parameter?5incorrect?4?6?6?6?$CIIf?5you?5r@ DB 'Parame'
	DB	'ter incorrect.', 0aH, 0aH, 0aH, '(If you report a bug in conn'
	DB	'ection with this, please include the following technical info'
	DB	'rmation in the bug report:', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z$1
__ehfuncinfo$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\exception.h
xdata$x	ENDS
;	COMDAT ?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z
_TEXT	SEGMENT
$T172563 = -100						; size = 28
$T172564 = -72						; size = 28
_msgBody$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_parent$ = 8						; size = 4
?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z PROC ; CipherShed::ParameterIncorrect::Show, COMDAT
; _this$ = ecx

; 57   : 		{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 58	 sub	 esp, 88			; 00000058H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 54	 mov	 DWORD PTR __$ArrayPad$[esp+100], eax
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c4		 xor	 eax, esp
  00026	50		 push	 eax
  00027	8d 44 24 68	 lea	 eax, DWORD PTR __$EHRec$[esp+116]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 58   : 			string msgBody = "Parameter incorrect.\n\n\n(If you report a bug in connection with this, please include the following technical information in the bug report:\n" + string (SrcPos) + ")";

  00031	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00034	8b 7c 24 78	 mov	 edi, DWORD PTR _parent$[esp+112]
  00038	33 db		 xor	 ebx, ebx
  0003a	8b c1		 mov	 eax, ecx
  0003c	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T172563[esp+140], 15 ; 0000000fH
  00044	89 5c 24 24	 mov	 DWORD PTR $T172563[esp+136], ebx
  00048	88 5c 24 14	 mov	 BYTE PTR $T172563[esp+120], bl
  0004c	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0004f	90		 npad	 1
$LL126@Show@2:
  00050	8a 10		 mov	 dl, BYTE PTR [eax]
  00052	40		 inc	 eax
  00053	3a d3		 cmp	 dl, bl
  00055	75 f9		 jne	 SHORT $LL126@Show@2
  00057	2b c6		 sub	 eax, esi
  00059	50		 push	 eax
  0005a	51		 push	 ecx
  0005b	8d 4c 24 18	 lea	 ecx, DWORD PTR $T172563[esp+124]
  0005f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00064	8d 44 24 10	 lea	 eax, DWORD PTR $T172563[esp+116]
  00068	50		 push	 eax
  00069	8d 4c 24 30	 lea	 ecx, DWORD PTR $T172564[esp+120]
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0IM@CKBKFPJM@Parameter?5incorrect?4?6?6?6?$CIIf?5you?5r@
  00072	51		 push	 ecx
  00073	89 5c 24 7c	 mov	 DWORD PTR __$EHRec$[esp+136], ebx
  00077	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
  00081	50		 push	 eax
  00082	8d 54 24 5c	 lea	 edx, DWORD PTR _msgBody$[esp+136]
  00086	52		 push	 edx
  00087	c6 84 24 88 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+148], 1
  0008f	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00094	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00099	83 c4 18	 add	 esp, 24			; 00000018H
  0009c	39 74 24 44	 cmp	 DWORD PTR $T172564[esp+140], esi
  000a0	72 0d		 jb	 SHORT $LN58@Show@2
  000a2	8b 44 24 30	 mov	 eax, DWORD PTR $T172564[esp+120]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ac	83 c4 04	 add	 esp, 4
$LN58@Show@2:
  000af	c7 44 24 44 0f
	00 00 00	 mov	 DWORD PTR $T172564[esp+140], 15 ; 0000000fH
  000b7	89 5c 24 40	 mov	 DWORD PTR $T172564[esp+136], ebx
  000bb	88 5c 24 30	 mov	 BYTE PTR $T172564[esp+120], bl
  000bf	39 74 24 28	 cmp	 DWORD PTR $T172563[esp+140], esi
  000c3	72 0d		 jb	 SHORT $LN84@Show@2
  000c5	8b 4c 24 14	 mov	 ecx, DWORD PTR $T172563[esp+120]
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000cf	83 c4 04	 add	 esp, 4
$LN84@Show@2:

; 59   : 			MessageBox (parent, msgBody.c_str(), "CipherShed", MB_ICONERROR | MB_SETFOREGROUND);

  000d2	8b 44 24 4c	 mov	 eax, DWORD PTR _msgBody$[esp+120]
  000d6	39 74 24 60	 cmp	 DWORD PTR _msgBody$[esp+140], esi
  000da	73 04		 jae	 SHORT $LN99@Show@2
  000dc	8d 44 24 4c	 lea	 eax, DWORD PTR _msgBody$[esp+120]
$LN99@Show@2:
  000e0	68 10 00 01 00	 push	 65552			; 00010010H
  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FEEFGEIL@CipherShed?$AA@
  000ea	50		 push	 eax
  000eb	57		 push	 edi
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 60   : 		}

  000f2	39 74 24 60	 cmp	 DWORD PTR _msgBody$[esp+140], esi
  000f6	72 0d		 jb	 SHORT $LN116@Show@2
  000f8	8b 54 24 4c	 mov	 edx, DWORD PTR _msgBody$[esp+120]
  000fc	52		 push	 edx
  000fd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00102	83 c4 04	 add	 esp, 4
$LN116@Show@2:
  00105	8b 4c 24 68	 mov	 ecx, DWORD PTR __$EHRec$[esp+116]
  00109	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00110	59		 pop	 ecx
  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	5b		 pop	 ebx
  00114	8b 4c 24 54	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+100]
  00118	33 cc		 xor	 ecx, esp
  0011a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011f	83 c4 64	 add	 esp, 100		; 00000064H
  00122	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z$0:
  00000	8d 4d 9c	 lea	 ecx, DWORD PTR $T172563[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z$1:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR $T172564[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 9c	 lea	 eax, DWORD PTR [edx-100]
  00017	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	83 c0 0c	 add	 eax, 12			; 0000000cH
  00024	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Show@ParameterIncorrect@CipherShed@@UBEXPAUHWND__@@@Z ENDP ; CipherShed::ParameterIncorrect::Show
PUBLIC	??4SecurityTokenInfo@CipherShed@@QAEAAU01@ABU01@@Z ; CipherShed::SecurityTokenInfo::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4SecurityTokenInfo@CipherShed@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4SecurityTokenInfo@CipherShed@@QAEAAU01@ABU01@@Z PROC	; CipherShed::SecurityTokenInfo::operator=, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR ___that$[esp+4]
  00006	8b 07		 mov	 eax, DWORD PTR [edi]
  00008	8b f1		 mov	 esi, ecx
  0000a	6a ff		 push	 -1
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00011	6a 00		 push	 0
  00013	8d 57 08	 lea	 edx, DWORD PTR [edi+8]
  00016	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00019	52		 push	 edx
  0001a	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00022	6a ff		 push	 -1
  00024	6a 00		 push	 0
  00026	83 c7 24	 add	 edi, 36			; 00000024H
  00029	57		 push	 edi
  0002a	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??4SecurityTokenInfo@CipherShed@@QAEAAU01@ABU01@@Z ENDP	; CipherShed::SecurityTokenInfo::operator=
_TEXT	ENDS
PUBLIC	__TI2?AUPkcs11Exception@CipherShed@@
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z ; CipherShed::SecurityToken::GetTokenInfo
PUBLIC	__CTA2?AUPkcs11Exception@CipherShed@@
PUBLIC	__CT??_R0?AUPkcs11Exception@CipherShed@@@8??0Pkcs11Exception@CipherShed@@QAE@ABU01@@Z24
PUBLIC	??0Pkcs11Exception@CipherShed@@QAE@ABU01@@Z	; CipherShed::Pkcs11Exception::Pkcs11Exception
EXTRN	?Utf8StringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:PROC ; Utf8StringToWide
;	COMDAT __CT??_R0?AUPkcs11Exception@CipherShed@@@8??0Pkcs11Exception@CipherShed@@QAE@ABU01@@Z24
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__CT??_R0?AUPkcs11Exception@CipherShed@@@8??0Pkcs11Exception@CipherShed@@QAE@ABU01@@Z24 DD 00H
	DD	FLAT:??_R0?AUPkcs11Exception@CipherShed@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0Pkcs11Exception@CipherShed@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AUPkcs11Exception@CipherShed@@
xdata$x	SEGMENT
__CTA2?AUPkcs11Exception@CipherShed@@ DD 02H
	DD	FLAT:__CT??_R0?AUPkcs11Exception@CipherShed@@@8??0Pkcs11Exception@CipherShed@@QAE@ABU01@@Z24
	DD	FLAT:__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
xdata$x	ENDS
;	COMDAT __TI2?AUPkcs11Exception@CipherShed@@
xdata$x	SEGMENT
__TI2?AUPkcs11Exception@CipherShed@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2?AUPkcs11Exception@CipherShed@@
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z$2
__ehfuncinfo$?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
xdata$x	ENDS
;	COMDAT ?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z
_TEXT	SEGMENT
$T173476 = -252						; size = 1
___$ReturnUdt$GSCopy$ = -248				; size = 4
$T173090 = -244						; size = 4
$T173088 = -240						; size = 28
$T173087 = -240						; size = 28
$T173086 = -240						; size = 24
_info$ = -212						; size = 160
_label$ = -52						; size = 33
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_slotId$ = 12						; size = 4
?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z PROC ; CipherShed::SecurityToken::GetTokenInfo, COMDAT

; 281  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 ec 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+252], eax
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c4		 xor	 eax, esp
  0002d	50		 push	 eax
  0002e	8d 84 24 04 01
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+272]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 282  : 		CK_TOKEN_INFO info;
; 283  : 		CK_RV status = Pkcs11Functions->C_GetTokenInfo (slotId, &info);

  0003b	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR _slotId$[esp+268]
  00042	8b b4 24 14 01
	00 00		 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+268]
  00049	33 ff		 xor	 edi, edi
  0004b	89 7c 24 1c	 mov	 DWORD PTR $T173090[esp+272], edi
  0004f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  00055	8d 44 24 3c	 lea	 eax, DWORD PTR _info$[esp+272]
  00059	50		 push	 eax
  0005a	8b 42 1a	 mov	 eax, DWORD PTR [edx+26]
  0005d	51		 push	 ecx
  0005e	89 bc 24 14 01
	00 00		 mov	 DWORD PTR __$EHRec$[esp+288], edi
  00065	89 74 24 20	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+280], esi
  00069	ff d0		 call	 eax
  0006b	83 c4 08	 add	 esp, 8

; 284  : 		if (status != CKR_OK)

  0006e	3b c7		 cmp	 eax, edi
  00070	74 20		 je	 SHORT $LN3@GetTokenIn

; 285  : 			throw Pkcs11Exception (status);

  00072	68 00 00 00 00	 push	 OFFSET __TI2?AUPkcs11Exception@CipherShed@@
  00077	8d 4c 24 24	 lea	 ecx, DWORD PTR $T173086[esp+276]
  0007b	51		 push	 ecx
  0007c	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR $T173086[esp+280], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  00084	89 44 24 2c	 mov	 DWORD PTR $T173086[esp+284], eax
  00088	c6 44 24 30 00	 mov	 BYTE PTR $T173086[esp+288], 0
  0008d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@GetTokenIn:

; 286  : 
; 287  : 		SecurityTokenInfo token;

  00092	8d 5e 08	 lea	 ebx, DWORD PTR [esi+8]
  00095	c7 43 18 07 00
	00 00		 mov	 DWORD PTR [ebx+24], 7
  0009c	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
  0009f	33 d2		 xor	 edx, edx
  000a1	8d 6e 24	 lea	 ebp, DWORD PTR [esi+36]
  000a4	66 89 53 04	 mov	 WORD PTR [ebx+4], dx
  000a8	c7 45 18 0f 00
	00 00		 mov	 DWORD PTR [ebp+24], 15	; 0000000fH
  000af	89 7d 14	 mov	 DWORD PTR [ebp+20], edi
  000b2	88 55 04	 mov	 BYTE PTR [ebp+4], dl

; 305  : #else
; 306  : 		token.Label = StringConverter::ToWide (token.LabelUtf8);
; 307  : #endif
; 308  : 		return token;

  000b5	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR _slotId$[esp+268]
  000bc	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR _info$[esp+368]
  000c3	89 06		 mov	 DWORD PTR [esi], eax
  000c5	33 c0		 xor	 eax, eax
  000c7	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  000ca	89 bc 24 0c 01
	00 00		 mov	 DWORD PTR __$EHRec$[esp+280], edi
  000d1	89 84 24 dc 00
	00 00		 mov	 DWORD PTR _label$[esp+272], eax
  000d8	89 84 24 e0 00
	00 00		 mov	 DWORD PTR _label$[esp+276], eax
  000df	89 84 24 e4 00
	00 00		 mov	 DWORD PTR _label$[esp+280], eax
  000e6	89 84 24 e8 00
	00 00		 mov	 DWORD PTR _label$[esp+284], eax
  000ed	89 84 24 ec 00
	00 00		 mov	 DWORD PTR _label$[esp+288], eax
  000f4	89 84 24 f0 00
	00 00		 mov	 DWORD PTR _label$[esp+292], eax
  000fb	89 84 24 f4 00
	00 00		 mov	 DWORD PTR _label$[esp+296], eax
  00102	89 84 24 f8 00
	00 00		 mov	 DWORD PTR _label$[esp+300], eax
  00109	88 84 24 fc 00
	00 00		 mov	 BYTE PTR _label$[esp+304], al
  00110	b9 08 00 00 00	 mov	 ecx, 8
  00115	8d 74 24 3c	 lea	 esi, DWORD PTR _info$[esp+272]
  00119	8d bc 24 dc 00
	00 00		 lea	 edi, DWORD PTR _label$[esp+272]
  00120	8d 84 24 dc 00
	00 00		 lea	 eax, DWORD PTR _label$[esp+272]
  00127	f3 a5		 rep movsd
  00129	c7 44 24 1c 01
	00 00 00	 mov	 DWORD PTR $T173090[esp+272], 1
  00131	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL152@GetTokenIn:
  00134	8a 08		 mov	 cl, BYTE PTR [eax]
  00136	40		 inc	 eax
  00137	84 c9		 test	 cl, cl
  00139	75 f9		 jne	 SHORT $LL152@GetTokenIn
  0013b	2b c6		 sub	 eax, esi
  0013d	50		 push	 eax
  0013e	8d 94 24 e0 00
	00 00		 lea	 edx, DWORD PTR _label$[esp+276]
  00145	52		 push	 edx
  00146	8b cd		 mov	 ecx, ebp
  00148	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0014d	6a 01		 push	 1
  0014f	6a ff		 push	 -1
  00151	8d 44 24 1c	 lea	 eax, DWORD PTR $T173476[esp+280]
  00155	50		 push	 eax
  00156	8b cd		 mov	 ecx, ebp
  00158	c6 44 24 20 20	 mov	 BYTE PTR $T173476[esp+284], 32 ; 00000020H
  0015d	e8 00 00 00 00	 call	 ?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
  00162	83 f8 ff	 cmp	 eax, -1
  00165	75 09		 jne	 SHORT $LN2@GetTokenIn
  00167	8b cd		 mov	 ecx, ebp
  00169	e8 00 00 00 00	 call	 ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
  0016e	eb 43		 jmp	 SHORT $LN110@GetTokenIn
$LN2@GetTokenIn:

; 288  : 		token.SlotId = slotId;
; 289  : 		token.Flags = info.flags;
; 290  : 
; 291  : 		char label[sizeof (info.label) + 1];
; 292  : 		memset (label, 0, sizeof (label));
; 293  : 		memcpy (label, info.label, sizeof (info.label));
; 294  : 
; 295  : 		token.LabelUtf8 = label;
; 296  : 
; 297  : 		size_t lastSpace = token.LabelUtf8.find_last_not_of (' ');
; 298  : 		if (lastSpace == string::npos)
; 299  : 			token.LabelUtf8.clear();
; 300  : 		else
; 301  : 			token.LabelUtf8 = token.LabelUtf8.substr (0, lastSpace + 1);

  00170	40		 inc	 eax
  00171	50		 push	 eax
  00172	6a 00		 push	 0
  00174	8d 4c 24 28	 lea	 ecx, DWORD PTR $T173087[esp+280]
  00178	51		 push	 ecx
  00179	8b cd		 mov	 ecx, ebp
  0017b	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  00180	6a ff		 push	 -1
  00182	6a 00		 push	 0
  00184	50		 push	 eax
  00185	8b cd		 mov	 ecx, ebp
  00187	c7 84 24 18 01
	00 00 01 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+292], 1
  00192	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00197	83 7c 24 38 10	 cmp	 DWORD PTR $T173087[esp+296], 16 ; 00000010H
  0019c	c6 84 24 0c 01
	00 00 00	 mov	 BYTE PTR __$EHRec$[esp+280], 0
  001a4	72 0d		 jb	 SHORT $LN110@GetTokenIn
  001a6	8b 54 24 24	 mov	 edx, DWORD PTR $T173087[esp+276]
  001aa	52		 push	 edx
  001ab	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001b0	83 c4 04	 add	 esp, 4
$LN110@GetTokenIn:

; 302  : 
; 303  : #if defined (TC_WINDOWS) && !defined (TC_PROTOTYPE)
; 304  : 		token.Label = Utf8StringToWide (token.LabelUtf8);

  001b3	8d 44 24 20	 lea	 eax, DWORD PTR $T173088[esp+272]
  001b7	55		 push	 ebp
  001b8	50		 push	 eax
  001b9	e8 00 00 00 00	 call	 ?Utf8StringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; Utf8StringToWide
  001be	83 c4 08	 add	 esp, 8
  001c1	6a ff		 push	 -1
  001c3	6a 00		 push	 0
  001c5	50		 push	 eax
  001c6	8b cb		 mov	 ecx, ebx
  001c8	c7 84 24 18 01
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+292], 2
  001d3	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  001d8	83 7c 24 38 08	 cmp	 DWORD PTR $T173088[esp+296], 8
  001dd	72 0d		 jb	 SHORT $LN142@GetTokenIn
  001df	8b 4c 24 24	 mov	 ecx, DWORD PTR $T173088[esp+276]
  001e3	51		 push	 ecx
  001e4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001e9	83 c4 04	 add	 esp, 4
$LN142@GetTokenIn:

; 305  : #else
; 306  : 		token.Label = StringConverter::ToWide (token.LabelUtf8);
; 307  : #endif
; 308  : 		return token;

  001ec	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[esp+272]

; 309  : 	}

  001f0	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+272]
  001f7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001fe	59		 pop	 ecx
  001ff	5f		 pop	 edi
  00200	5e		 pop	 esi
  00201	5d		 pop	 ebp
  00202	5b		 pop	 ebx
  00203	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+252]
  0020a	33 cc		 xor	 ecx, esp
  0020c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00211	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  00217	c3		 ret	 0
$LN154@GetTokenIn:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z$0:
  00000	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR $T173090[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 12 00 00
	00		 je	 $LN7@GetTokenIn
  0000f	83 a5 0c ff ff
	ff fe		 and	 DWORD PTR $T173090[ebp], -2 ; fffffffeH
  00016	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1SecurityTokenInfo@CipherShed@@QAE@XZ
$LN7@GetTokenIn:
  00021	c3		 ret	 0
__unwindfunclet$?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z$1:
  00022	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T173087[ebp]
  00028	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z$2:
  0002d	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T173088[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z:
  00038	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003c	8d 82 00 ff ff
	ff		 lea	 eax, DWORD PTR [edx-256]
  00042	8b 8a fc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-260]
  00048	33 c8		 xor	 ecx, eax
  0004a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004f	83 c0 10	 add	 eax, 16			; 00000010H
  00052	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00055	33 c8		 xor	 ecx, eax
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z
  00061	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z ENDP ; CipherShed::SecurityToken::GetTokenInfo
; Function compile flags: /Ogtpy
;	COMDAT ??0Pkcs11Exception@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0Pkcs11Exception@CipherShed@@QAE@ABU01@@Z PROC	; CipherShed::Pkcs11Exception::Pkcs11Exception, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR ___that$[esp-4]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  0000c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00012	8a 51 08	 mov	 dl, BYTE PTR [ecx+8]
  00015	88 50 08	 mov	 BYTE PTR [eax+8], dl
  00018	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0001b	89 50 10	 mov	 DWORD PTR [eax+16], edx
  0001e	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00021	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00024	c2 04 00	 ret	 4
??0Pkcs11Exception@CipherShed@@QAE@ABU01@@Z ENDP	; CipherShed::Pkcs11Exception::Pkcs11Exception
_TEXT	ENDS
PUBLIC	?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T173745 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str, COMDAT
; _this$ = ecx

; 504  : 		{	// return string copy of character array

  00000	51		 push	 ecx
  00001	56		 push	 esi

; 505  : 		return (_Stringbuffer.str());

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	56		 push	 esi
  00007	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T173745[esp+12], 0
  00012	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi

; 506  : 		}

  0001a	59		 pop	 ecx
  0001b	c2 04 00	 ret	 4
?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
_TEXT	ENDS
PUBLIC	?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
; Function compile flags: /Ogtpy
;	COMDAT ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T173750 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 504  : 		{	// return string copy of character array

  00000	51		 push	 ecx
  00001	56		 push	 esi

; 505  : 		return (_Stringbuffer.str());

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	56		 push	 esi
  00007	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T173750[esp+12], 0
  00012	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi

; 506  : 		}

  0001a	59		 pop	 ecx
  0001b	c2 04 00	 ret	 4
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
PUBLIC	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::clear, COMDAT
; _this$ = ecx

; 43   : 		ios_base::clear((iostate)(_Mystrbuf == 0
; 44   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00000	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __State$[esp-4]
  00008	75 03		 jne	 SHORT $LN4@clear@5
  0000a	83 c8 04	 or	 eax, 4
$LN4@clear@5:
  0000d	89 44 24 04	 mov	 DWORD PTR __State$[esp-4], eax
  00011	e9 00 00 00 00	 jmp	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::clear
_TEXT	ENDS
PUBLIC	?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::clear, COMDAT
; _this$ = ecx

; 43   : 		ios_base::clear((iostate)(_Mystrbuf == 0
; 44   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00000	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __State$[esp-4]
  00008	75 03		 jne	 SHORT $LN4@clear@6
  0000a	83 c8 04	 or	 eax, 4
$LN4@clear@6:
  0000d	89 44 24 04	 mov	 DWORD PTR __State$[esp-4], eax
  00011	e9 00 00 00 00	 jmp	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::clear
_TEXT	ENDS
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T173768 = -8						; size = 8
?_Tidy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1420 : 		{	// free all storage

  00000	83 ec 08	 sub	 esp, 8
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1421 : 		erase(begin(), end());

  00006	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00009	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000b	8b 10		 mov	 edx, DWORD PTR [eax]
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	52		 push	 edx
  00010	51		 push	 ecx
  00011	8d 44 24 14	 lea	 eax, DWORD PTR $T173768[esp+28]
  00015	50		 push	 eax
  00016	8b ce		 mov	 ecx, esi
  00018	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::erase

; 1422 : 		this->_Alptr.destroy(&_Left(_Myhead));
; 1423 : 		this->_Alptr.destroy(&_Parent(_Myhead));
; 1424 : 		this->_Alptr.destroy(&_Right(_Myhead));
; 1425 : 		this->_Alnod.deallocate(_Myhead, 1);

  0001d	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 04	 add	 esp, 4

; 1426 : 		_Myhead = 0, _Mysize = 0;

  00029	33 c0		 xor	 eax, eax
  0002b	89 46 18	 mov	 DWORD PTR [esi+24], eax
  0002e	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00031	5e		 pop	 esi

; 1427 : 		}

  00032	83 c4 08	 add	 esp, 8
  00035	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAE_NI@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Buy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

  00000	56		 push	 esi

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;
; 1104 : 		if (_Capacity == 0)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Capacity$[esp]
  00005	33 c0		 xor	 eax, eax
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  0000d	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00010	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00013	3b f0		 cmp	 esi, eax
  00015	75 07		 jne	 SHORT $LN4@Buy
  00017	5f		 pop	 edi

; 1105 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	5e		 pop	 esi

; 1115 : 		}

  0001b	c2 04 00	 ret	 4
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

  0001e	81 fe ff ff ff
	01		 cmp	 esi, 33554431		; 01ffffffH
  00024	76 05		 jbe	 SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

  00026	e8 00 00 00 00	 call	 ?_Xlen@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@KAXXZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Xlen
$LN2@Buy:

; 1108 : 		else
; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	50		 push	 eax
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 ??$_Allocate@USecurityTokenKeyfile@CipherShed@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@IPAU12@@Z ; std::_Allocate<CipherShed::SecurityTokenKeyfile>

; 1111 : 			_Mylast = _Myfirst;
; 1112 : 			_Myend = _Myfirst + _Capacity;

  00032	c1 e6 07	 shl	 esi, 7
  00035	03 f0		 add	 esi, eax
  00037	83 c4 08	 add	 esp, 8
  0003a	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  0003d	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00040	89 77 14	 mov	 DWORD PTR [edi+20], esi
  00043	5f		 pop	 edi

; 1113 : 			}
; 1114 : 		return (true);

  00044	b0 01		 mov	 al, 1
  00046	5e		 pop	 esi

; 1115 : 		}

  00047	c2 04 00	 ret	 4
$LN15@Buy:
?_Buy@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Buy
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@EV?$allocator@E@std@@@std@@IAE_NI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy
; Function compile flags: /Ogtpy
;	COMDAT ?_Buy@?$vector@EV?$allocator@E@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@EV?$allocator@E@std@@@std@@IAE_NI@Z PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

  00000	56		 push	 esi

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00001	33 c0		 xor	 eax, eax
  00003	57		 push	 edi

; 1104 : 		if (_Capacity == 0)

  00004	8b 7c 24 0c	 mov	 edi, DWORD PTR __Capacity$[esp+4]
  00008	8b f1		 mov	 esi, ecx
  0000a	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0000d	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00010	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00013	3b f8		 cmp	 edi, eax
  00015	75 07		 jne	 SHORT $LN4@Buy@2
  00017	5f		 pop	 edi

; 1105 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	5e		 pop	 esi

; 1115 : 		}

  0001b	c2 04 00	 ret	 4
$LN4@Buy@2:

; 1106 : 		else if (max_size() < _Capacity)

  0001e	83 ff ff	 cmp	 edi, -1
  00021	76 05		 jbe	 SHORT $LN2@Buy@2

; 1107 : 			_Xlen();	// result too long

  00023	e8 00 00 00 00	 call	 ?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen
$LN2@Buy@2:

; 1108 : 		else
; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

  00028	50		 push	 eax
  00029	57		 push	 edi
  0002a	e8 00 00 00 00	 call	 ??$_Allocate@E@std@@YAPAEIPAE@Z ; std::_Allocate<unsigned char>
  0002f	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 1111 : 			_Mylast = _Myfirst;

  00032	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00035	83 c4 08	 add	 esp, 8

; 1112 : 			_Myend = _Myfirst + _Capacity;

  00038	03 c7		 add	 eax, edi
  0003a	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0003d	5f		 pop	 edi

; 1113 : 			}
; 1114 : 		return (true);

  0003e	b0 01		 mov	 al, 1
  00040	5e		 pop	 esi

; 1115 : 		}

  00041	c2 04 00	 ret	 4
$LN15@Buy@2:
?_Buy@?$vector@EV?$allocator@E@std@@@std@@IAE_NI@Z ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy
_TEXT	ENDS
PUBLIC	?_Insert@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABK@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Insert@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABK@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
__Val$ = 16						; size = 4
?_Insert@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABK@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert, COMDAT
; _this$ = ecx

; 711  : 
; 712  :  #if _HAS_ITERATOR_DEBUGGING
; 713  : 		if (_Where._Mycont != this)
; 714  : 			_DEBUG_ERROR("list insert iterator outside range");
; 715  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 716  : 
; 717  : 		_Nodeptr _Pnode = _Where._Mynode();
; 718  : 		_Nodeptr _Newnode = _Buynode(_Pnode, _Prevnode(_Pnode), _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Where$[esp]
  00004	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 4c 24 18	 mov	 ecx, DWORD PTR __Val$[esp+8]
  00010	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  00013	51		 push	 ecx
  00014	52		 push	 edx
  00015	50		 push	 eax
  00016	8b cf		 mov	 ecx, edi
  00018	e8 00 00 00 00	 call	 ?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@0ABK@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode

; 719  : 		_Incsize(1);

  0001d	6a 01		 push	 1
  0001f	8b cf		 mov	 ecx, edi
  00021	8b f0		 mov	 esi, eax
  00023	e8 00 00 00 00	 call	 ?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Incsize

; 720  : 		_Prevnode(_Pnode) = _Newnode;

  00028	89 33		 mov	 DWORD PTR [ebx], esi

; 721  : 		_Nextnode(_Prevnode(_Newnode)) = _Newnode;

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	5f		 pop	 edi
  0002e	89 30		 mov	 DWORD PTR [eax], esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx

; 722  : 		}

  00032	c2 0c 00	 ret	 12			; 0000000cH
?_Insert@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABK@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@KV?$allocator@K@std@@@std@@IAE_NI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Buy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@KV?$allocator@K@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@KV?$allocator@K@std@@@std@@IAE_NI@Z PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

  00000	56		 push	 esi

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00001	33 c0		 xor	 eax, eax
  00003	57		 push	 edi

; 1104 : 		if (_Capacity == 0)

  00004	8b 7c 24 0c	 mov	 edi, DWORD PTR __Capacity$[esp+4]
  00008	8b f1		 mov	 esi, ecx
  0000a	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0000d	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00010	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00013	3b f8		 cmp	 edi, eax
  00015	75 07		 jne	 SHORT $LN4@Buy@3
  00017	5f		 pop	 edi

; 1105 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	5e		 pop	 esi

; 1115 : 		}

  0001b	c2 04 00	 ret	 4
$LN4@Buy@3:

; 1106 : 		else if (max_size() < _Capacity)

  0001e	81 ff ff ff ff
	3f		 cmp	 edi, 1073741823		; 3fffffffH
  00024	76 05		 jbe	 SHORT $LN2@Buy@3

; 1107 : 			_Xlen();	// result too long

  00026	e8 00 00 00 00	 call	 ?_Xlen@?$vector@KV?$allocator@K@std@@@std@@KAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen
$LN2@Buy@3:

; 1108 : 		else
; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	50		 push	 eax
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ??$_Allocate@K@std@@YAPAKIPAK@Z ; std::_Allocate<unsigned long>
  00032	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 1111 : 			_Mylast = _Myfirst;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 c4 08	 add	 esp, 8

; 1112 : 			_Myend = _Myfirst + _Capacity;

  0003b	8d 04 b8	 lea	 eax, DWORD PTR [eax+edi*4]
  0003e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00041	5f		 pop	 edi

; 1113 : 			}
; 1114 : 		return (true);

  00042	b0 01		 mov	 al, 1
  00044	5e		 pop	 esi

; 1115 : 		}

  00045	c2 04 00	 ret	 4
$LN15@Buy@3:
?_Buy@?$vector@KV?$allocator@K@std@@@std@@IAE_NI@Z ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::_Buy
_TEXT	ENDS
PUBLIC	?insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::insert
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z
_TEXT	SEGMENT
__Addleft$ = -12					; size = 1
$T174012 = -8						; size = 8
$T174010 = -8						; size = 8
__Where$130337 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
?insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::insert, COMDAT
; _this$ = ecx

; 630  : 		{	// try to insert node with value _Val

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	53		 push	 ebx

; 631  : 		_Nodeptr _Trynode = _Root();
; 632  : 		_Nodeptr _Wherenode = _Myhead;
; 633  : 		bool _Addleft = true;	// add to left of head if tree empty
; 634  : 		while (!_Isnil(_Trynode))

  00004	8b 5c 24 18	 mov	 ebx, DWORD PTR __Val$[esp+12]
  00008	55		 push	 ebp
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  00010	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00013	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  00017	b1 01		 mov	 cl, 1
  00019	88 4c 24 10	 mov	 BYTE PTR __Addleft$[esp+28], cl
  0001d	75 1f		 jne	 SHORT $LN9@insert@2
  0001f	8b 13		 mov	 edx, DWORD PTR [ebx]
$LL10@insert@2:

; 635  : 			{	// look for leaf to insert before (_Addleft) or after
; 636  : 			_Wherenode = _Trynode;
; 637  : 			_Addleft = _DEBUG_LT_PRED(this->comp,

  00021	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  00024	8b f0		 mov	 esi, eax
  00026	0f 92 c1	 setb	 cl
  00029	88 4c 24 10	 mov	 BYTE PTR __Addleft$[esp+28], cl

; 638  : 				this->_Kfn(_Val), _Key(_Trynode));
; 639  : 			_Trynode = _Addleft ? _Left(_Trynode) : _Right(_Trynode);

  0002d	84 c9		 test	 cl, cl
  0002f	74 04		 je	 SHORT $LN13@insert@2
  00031	8b 00		 mov	 eax, DWORD PTR [eax]
  00033	eb 03		 jmp	 SHORT $LN14@insert@2
$LN13@insert@2:
  00035	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN14@insert@2:

; 631  : 		_Nodeptr _Trynode = _Root();
; 632  : 		_Nodeptr _Wherenode = _Myhead;
; 633  : 		bool _Addleft = true;	// add to left of head if tree empty
; 634  : 		while (!_Isnil(_Trynode))

  00038	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  0003c	74 e3		 je	 SHORT $LL10@insert@2
$LN9@insert@2:

; 640  : 			}
; 641  : 
; 642  : 		if (this->_Multi)
; 643  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));
; 644  : 		else
; 645  : 			{	// insert only if unique
; 646  : 			iterator _Where = _TREE_ITERATOR(_Wherenode);

  0003e	8b 17		 mov	 edx, DWORD PTR [edi]
  00040	8b ee		 mov	 ebp, esi
  00042	89 6c 24 18	 mov	 DWORD PTR __Where$130337[esp+32], ebp
  00046	89 54 24 14	 mov	 DWORD PTR __Where$130337[esp+28], edx

; 647  : 			if (!_Addleft)

  0004a	84 c9		 test	 cl, cl
  0004c	74 51		 je	 SHORT $LN81@insert@2

; 648  : 				;	// need to test if insert after is okay
; 649  : 			else if (_Where == begin())

  0004e	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00051	8b 28		 mov	 ebp, DWORD PTR [eax]
  00053	85 d2		 test	 edx, edx
  00055	74 04		 je	 SHORT $LN69@insert@2
  00057	3b d2		 cmp	 edx, edx
  00059	74 05		 je	 SHORT $LN70@insert@2
$LN69@insert@2:
  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN70@insert@2:

; 650  : 				return (_Pairib(_Insert(true, _Wherenode, _Val), true));

  00060	8d 4c 24 14	 lea	 ecx, DWORD PTR $T174010[esp+28]
  00064	3b f5		 cmp	 esi, ebp
  00066	75 2a		 jne	 SHORT $LN4@insert@2
  00068	53		 push	 ebx
  00069	56		 push	 esi
  0006a	6a 01		 push	 1
  0006c	51		 push	 ecx
  0006d	8b cf		 mov	 ecx, edi
  0006f	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Insert
  00074	5f		 pop	 edi
  00075	8b c8		 mov	 ecx, eax
  00077	8b 11		 mov	 edx, DWORD PTR [ecx]
  00079	8b 44 24 1c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+20]
  0007d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00080	5e		 pop	 esi
  00081	5d		 pop	 ebp
  00082	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00085	c6 40 08 01	 mov	 BYTE PTR [eax+8], 1

; 657  : 			else
; 658  : 				return (_Pairib(_Where, false));

  00089	89 10		 mov	 DWORD PTR [eax], edx
  0008b	5b		 pop	 ebx

; 659  : 			}
; 660  : 		}

  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	c2 08 00	 ret	 8
$LN4@insert@2:

; 651  : 			else
; 652  : 				--_Where;	// need to test if insert before is okay

  00092	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Dec
  00097	8b 6c 24 18	 mov	 ebp, DWORD PTR __Where$130337[esp+32]
  0009b	8b 54 24 14	 mov	 edx, DWORD PTR __Where$130337[esp+28]
$LN81@insert@2:

; 653  : 
; 654  : 			if (_DEBUG_LT_PRED(this->comp,

  0009f	8b 45 0c	 mov	 eax, DWORD PTR [ebp+12]
  000a2	3b 03		 cmp	 eax, DWORD PTR [ebx]
  000a4	73 31		 jae	 SHORT $LN2@insert@2

; 655  : 				_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 656  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));

  000a6	8b 4c 24 10	 mov	 ecx, DWORD PTR __Addleft$[esp+28]
  000aa	53		 push	 ebx
  000ab	56		 push	 esi
  000ac	51		 push	 ecx
  000ad	8d 54 24 20	 lea	 edx, DWORD PTR $T174012[esp+40]
  000b1	52		 push	 edx
  000b2	8b cf		 mov	 ecx, edi
  000b4	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Insert
  000b9	5f		 pop	 edi
  000ba	8b c8		 mov	 ecx, eax
  000bc	8b 11		 mov	 edx, DWORD PTR [ecx]
  000be	8b 44 24 1c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+20]
  000c2	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c5	5e		 pop	 esi
  000c6	5d		 pop	 ebp
  000c7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000ca	c6 40 08 01	 mov	 BYTE PTR [eax+8], 1

; 657  : 			else
; 658  : 				return (_Pairib(_Where, false));

  000ce	89 10		 mov	 DWORD PTR [eax], edx
  000d0	5b		 pop	 ebx

; 659  : 			}
; 660  : 		}

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d4	c2 08 00	 ret	 8
$LN2@insert@2:

; 657  : 			else
; 658  : 				return (_Pairib(_Where, false));

  000d7	8b 44 24 20	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+24]
  000db	5f		 pop	 edi
  000dc	5e		 pop	 esi
  000dd	89 68 04	 mov	 DWORD PTR [eax+4], ebp
  000e0	5d		 pop	 ebp
  000e1	c6 40 08 00	 mov	 BYTE PTR [eax+8], 0
  000e5	89 10		 mov	 DWORD PTR [eax], edx
  000e7	5b		 pop	 ebx

; 659  : 			}
; 660  : 		}

  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000eb	c2 08 00	 ret	 8
?insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::insert
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@EV?$allocator@E@std@@@std@@IAEXV?$_Vector_const_iterator@EV?$allocator@E@std@@@2@IABE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Insert_n
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Insert_n@?$vector@EV?$allocator@E@std@@@std@@IAEXV?$_Vector_const_iterator@EV?$allocator@E@std@@@2@IABE@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
tv505 = 16						; size = 4
__Count$ = 16						; size = 4
__Tmp$130604 = 20					; size = 1
__Tmp$130594 = 20					; size = 1
__Val$ = 20						; size = 4
?_Insert_n@?$vector@EV?$allocator@E@std@@@std@@IAEXV?$_Vector_const_iterator@EV?$allocator@E@std@@@2@IABE@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

  00000	55		 push	 ebp
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

  00004	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	85 c0		 test	 eax, eax
  0000a	75 04		 jne	 SHORT $LN29@Insert_n
  0000c	33 ed		 xor	 ebp, ebp
  0000e	eb 05		 jmp	 SHORT $LN30@Insert_n
$LN29@Insert_n:
  00010	8b 6e 14	 mov	 ebp, DWORD PTR [esi+20]
  00013	2b e8		 sub	 ebp, eax
$LN30@Insert_n:

; 1162 : 
; 1163 : 		if (_Count == 0)

  00015	8b 7c 24 18	 mov	 edi, DWORD PTR __Count$[esp+8]
  00019	85 ff		 test	 edi, edi
  0001b	0f 84 5d 01 00
	00		 je	 $LN1@Insert_n
  00021	53		 push	 ebx

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

  00022	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00025	8b c8		 mov	 ecx, eax
  00027	2b cb		 sub	 ecx, ebx
  00029	49		 dec	 ecx
  0002a	3b cf		 cmp	 ecx, edi
  0002c	73 05		 jae	 SHORT $LN12@Insert_n

; 1166 : 			_Xlen();	// result too long

  0002e	e8 00 00 00 00	 call	 ?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen
$LN12@Insert_n:

; 1167 : 		else if (_Capacity < size() + _Count)

  00033	8b d3		 mov	 edx, ebx
  00035	2b d0		 sub	 edx, eax
  00037	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  0003a	3b e8		 cmp	 ebp, eax
  0003c	0f 83 a4 00 00
	00		 jae	 $LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00042	8b cd		 mov	 ecx, ebp
  00044	d1 e9		 shr	 ecx, 1
  00046	83 ca ff	 or	 edx, -1
  00049	2b d1		 sub	 edx, ecx
  0004b	3b d5		 cmp	 edx, ebp
  0004d	73 04		 jae	 SHORT $LN17@Insert_n
  0004f	33 ed		 xor	 ebp, ebp
  00051	eb 02		 jmp	 SHORT $LN18@Insert_n
$LN17@Insert_n:
  00053	03 e9		 add	 ebp, ecx
$LN18@Insert_n:

; 1171 : 			if (_Capacity < size() + _Count)

  00055	3b e8		 cmp	 ebp, eax
  00057	73 02		 jae	 SHORT $LN9@Insert_n

; 1172 : 				_Capacity = size() + _Count;

  00059	8b e8		 mov	 ebp, eax
$LN9@Insert_n:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  0005b	6a 00		 push	 0
  0005d	55		 push	 ebp
  0005e	e8 00 00 00 00	 call	 ??$_Allocate@E@std@@YAPAEIPAE@Z ; std::_Allocate<unsigned char>

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;
; 1175 : 			int _Ncopied = 0;
; 1176 : 
; 1177 : 			_TRY_BEGIN
; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

  00063	8b 4c 24 28	 mov	 ecx, DWORD PTR __Val$[esp+20]
  00067	8b d8		 mov	 ebx, eax
  00069	8b 44 24 20	 mov	 eax, DWORD PTR __Where$[esp+24]
  0006d	2b 46 0c	 sub	 eax, DWORD PTR [esi+12]
  00070	83 c4 08	 add	 esp, 8
  00073	51		 push	 ecx
  00074	03 c3		 add	 eax, ebx
  00076	57		 push	 edi
  00077	50		 push	 eax
  00078	8b ce		 mov	 ecx, esi
  0007a	89 44 24 28	 mov	 DWORD PTR tv505[esp+24], eax
  0007e	e8 00 00 00 00	 call	 ?_Ufill@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAEIABE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Ufill

; 1179 : 			++_Ncopied;
; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

  00083	8b 54 24 18	 mov	 edx, DWORD PTR __Where$[esp+16]
  00087	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0008a	8b c2		 mov	 eax, edx
  0008c	2b c1		 sub	 eax, ecx
  0008e	74 10		 je	 SHORT $LN81@Insert_n
  00090	50		 push	 eax
  00091	51		 push	 ecx
  00092	50		 push	 eax
  00093	53		 push	 ebx
  00094	e8 00 00 00 00	 call	 _memmove_s
  00099	8b 54 24 28	 mov	 edx, DWORD PTR __Where$[esp+32]
  0009d	83 c4 10	 add	 esp, 16			; 00000010H
$LN81@Insert_n:

; 1182 : 			++_Ncopied;
; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

  000a0	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000a3	2b c2		 sub	 eax, edx
  000a5	74 12		 je	 SHORT $LN112@Insert_n
  000a7	50		 push	 eax
  000a8	52		 push	 edx
  000a9	8b 54 24 24	 mov	 edx, DWORD PTR tv505[esp+20]
  000ad	50		 push	 eax
  000ae	03 d7		 add	 edx, edi
  000b0	52		 push	 edx
  000b1	e8 00 00 00 00	 call	 _memmove_s
  000b6	83 c4 10	 add	 esp, 16			; 00000010H
$LN112@Insert_n:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)
; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1188 : 			if (0 < _Ncopied)
; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);
; 1191 : 			_RERAISE;
; 1192 : 			_CATCH_END
; 1193 : 
; 1194 : 			_Count += size();

  000b9	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000bc	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000bf	2b c8		 sub	 ecx, eax
  000c1	03 f9		 add	 edi, ecx

; 1195 : 			if (_Myfirst != 0)

  000c3	85 c0		 test	 eax, eax
  000c5	74 09		 je	 SHORT $LN119@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);
; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000cd	83 c4 04	 add	 esp, 4
$LN119@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

  000d0	8d 14 2b	 lea	 edx, DWORD PTR [ebx+ebp]

; 1206 : 			_Mylast = _Newvec + _Count;

  000d3	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]

; 1207 : 			_Myfirst = _Newvec;

  000d6	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  000d9	5b		 pop	 ebx
  000da	5f		 pop	 edi
  000db	89 56 14	 mov	 DWORD PTR [esi+20], edx
  000de	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000e1	5e		 pop	 esi
  000e2	5d		 pop	 ebp

; 1249 : 			}
; 1250 : 		}

  000e3	c2 10 00	 ret	 16			; 00000010H
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

  000e6	8b 44 24 18	 mov	 eax, DWORD PTR __Where$[esp+16]

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

  000ea	8b 54 24 20	 mov	 edx, DWORD PTR __Val$[esp+12]
  000ee	8b cb		 mov	 ecx, ebx
  000f0	2b c8		 sub	 ecx, eax
  000f2	3b cf		 cmp	 ecx, edi
  000f4	73 4e		 jae	 SHORT $LN3@Insert_n
  000f6	8a 0a		 mov	 cl, BYTE PTR [edx]

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

  000f8	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]
  000fb	52		 push	 edx
  000fc	53		 push	 ebx
  000fd	88 4c 24 28	 mov	 BYTE PTR __Tmp$130594[esp+20], cl
  00101	50		 push	 eax
  00102	8b ce		 mov	 ecx, esi
  00104	e8 00 00 00 00	 call	 ??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove<unsigned char *>

; 1215 : 
; 1216 : 			_TRY_BEGIN
; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

  00109	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0010c	8b 54 24 18	 mov	 edx, DWORD PTR __Where$[esp+16]
  00110	8d 4c 24 20	 lea	 ecx, DWORD PTR __Tmp$130594[esp+12]
  00114	51		 push	 ecx
  00115	2b d0		 sub	 edx, eax
  00117	03 d7		 add	 edx, edi
  00119	52		 push	 edx
  0011a	50		 push	 eax
  0011b	8b ce		 mov	 ecx, esi
  0011d	e8 00 00 00 00	 call	 ?_Ufill@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAEIABE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Ufill

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 1221 : 			_RERAISE;
; 1222 : 			_CATCH_END
; 1223 : 
; 1224 : 			_Mylast += _Count;

  00122	01 7e 10	 add	 DWORD PTR [esi+16], edi
  00125	8b 76 10	 mov	 esi, DWORD PTR [esi+16]

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

  00128	8b 4c 24 18	 mov	 ecx, DWORD PTR __Where$[esp+16]
  0012c	8d 44 24 20	 lea	 eax, DWORD PTR __Tmp$130594[esp+12]
  00130	50		 push	 eax
  00131	2b f7		 sub	 esi, edi
  00133	56		 push	 esi
  00134	51		 push	 ecx
  00135	e8 00 00 00 00	 call	 ??$fill@PAEE@std@@YAXPAE0ABE@Z ; std::fill<unsigned char *,unsigned char>
  0013a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013d	5b		 pop	 ebx
  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	5d		 pop	 ebp

; 1249 : 			}
; 1250 : 		}

  00141	c2 10 00	 ret	 16			; 00000010H
$LN3@Insert_n:

; 1232 : 			}
; 1233 : 		else
; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

  00144	8a 02		 mov	 al, BYTE PTR [edx]

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;
; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

  00146	53		 push	 ebx
  00147	8b eb		 mov	 ebp, ebx
  00149	53		 push	 ebx
  0014a	2b ef		 sub	 ebp, edi
  0014c	55		 push	 ebp
  0014d	8b ce		 mov	 ecx, esi
  0014f	88 44 24 2c	 mov	 BYTE PTR __Tmp$130604[esp+24], al
  00153	e8 00 00 00 00	 call	 ??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove<unsigned char *>

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

  00158	8b 4c 24 18	 mov	 ecx, DWORD PTR __Where$[esp+16]
  0015c	53		 push	 ebx
  0015d	55		 push	 ebp
  0015e	51		 push	 ecx
  0015f	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00162	e8 00 00 00 00	 call	 ??$_Unchecked_move_backward@PAEPAE@stdext@@YAPAEPAE00@Z ; stdext::_Unchecked_move_backward<unsigned char *,unsigned char *>

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

  00167	8b 44 24 24	 mov	 eax, DWORD PTR __Where$[esp+28]
  0016b	8d 54 24 2c	 lea	 edx, DWORD PTR __Tmp$130604[esp+24]
  0016f	52		 push	 edx
  00170	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00173	51		 push	 ecx
  00174	50		 push	 eax
  00175	e8 00 00 00 00	 call	 ??$fill@PAEE@std@@YAXPAE0ABE@Z ; std::fill<unsigned char *,unsigned char>
  0017a	83 c4 18	 add	 esp, 24			; 00000018H
  0017d	5b		 pop	 ebx
$LN1@Insert_n:
  0017e	5f		 pop	 edi
  0017f	5e		 pop	 esi
  00180	5d		 pop	 ebp

; 1249 : 			}
; 1250 : 		}

  00181	c2 10 00	 ret	 16			; 00000010H
$LN124@Insert_n:
?_Insert_n@?$vector@EV?$allocator@E@std@@@std@@IAEXV?$_Vector_const_iterator@EV?$allocator@E@std@@@2@IABE@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Insert_n
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@KV?$allocator@K@std@@@std@@IAEXV?$_Vector_const_iterator@KV?$allocator@K@std@@@2@IABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Insert_n
; Function compile flags: /Ogtpy
;	COMDAT ?_Insert_n@?$vector@KV?$allocator@K@std@@@std@@IAEXV?$_Vector_const_iterator@KV?$allocator@K@std@@@2@IABK@Z
_TEXT	SEGMENT
__Capacity$ = -4					; size = 4
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Tmp$130769 = 20					; size = 4
__Tmp$130759 = 20					; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$vector@KV?$allocator@K@std@@@std@@IAEXV?$_Vector_const_iterator@KV?$allocator@K@std@@@2@IABK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

  00004	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	85 d2		 test	 edx, edx
  0000a	75 04		 jne	 SHORT $LN29@Insert_n@2
  0000c	33 c9		 xor	 ecx, ecx
  0000e	eb 0a		 jmp	 SHORT $LN30@Insert_n@2
$LN29@Insert_n@2:
  00010	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00013	2b c2		 sub	 eax, edx
  00015	c1 f8 02	 sar	 eax, 2
  00018	8b c8		 mov	 ecx, eax
$LN30@Insert_n@2:

; 1162 : 
; 1163 : 		if (_Count == 0)

  0001a	8b 7c 24 18	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001e	85 ff		 test	 edi, edi
  00020	0f 84 7c 01 00
	00		 je	 $LN1@Insert_n@2
  00026	53		 push	 ebx

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

  00027	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0002a	8b c3		 mov	 eax, ebx
  0002c	2b c2		 sub	 eax, edx
  0002e	c1 f8 02	 sar	 eax, 2
  00031	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  00036	2b d0		 sub	 edx, eax
  00038	3b d7		 cmp	 edx, edi
  0003a	73 05		 jae	 SHORT $LN12@Insert_n@2

; 1166 : 			_Xlen();	// result too long

  0003c	e8 00 00 00 00	 call	 ?_Xlen@?$vector@KV?$allocator@K@std@@@std@@KAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen
$LN12@Insert_n@2:

; 1167 : 		else if (_Capacity < size() + _Count)

  00041	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]
  00044	55		 push	 ebp
  00045	3b ca		 cmp	 ecx, edx
  00047	0f 83 b5 00 00
	00		 jae	 $LN10@Insert_n@2

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0004d	8b c1		 mov	 eax, ecx
  0004f	d1 e8		 shr	 eax, 1
  00051	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
  00056	2b d8		 sub	 ebx, eax
  00058	3b d9		 cmp	 ebx, ecx
  0005a	73 0e		 jae	 SHORT $LN17@Insert_n@2
  0005c	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __Capacity$[esp+20], 0
  00064	8b 4c 24 10	 mov	 ecx, DWORD PTR __Capacity$[esp+20]
  00068	eb 06		 jmp	 SHORT $LN18@Insert_n@2
$LN17@Insert_n@2:
  0006a	03 c8		 add	 ecx, eax
  0006c	89 4c 24 10	 mov	 DWORD PTR __Capacity$[esp+20], ecx
$LN18@Insert_n@2:

; 1171 : 			if (_Capacity < size() + _Count)

  00070	3b ca		 cmp	 ecx, edx
  00072	73 06		 jae	 SHORT $LN9@Insert_n@2

; 1172 : 				_Capacity = size() + _Count;

  00074	89 54 24 10	 mov	 DWORD PTR __Capacity$[esp+20], edx
  00078	8b ca		 mov	 ecx, edx
$LN9@Insert_n@2:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  0007a	6a 00		 push	 0
  0007c	51		 push	 ecx
  0007d	e8 00 00 00 00	 call	 ??$_Allocate@K@std@@YAPAKIPAK@Z ; std::_Allocate<unsigned long>

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

  00082	8b 5c 24 24	 mov	 ebx, DWORD PTR __Where$[esp+28]
  00086	2b 5e 0c	 sub	 ebx, DWORD PTR [esi+12]
  00089	83 c4 08	 add	 esp, 8
  0008c	8b e8		 mov	 ebp, eax

; 1175 : 			int _Ncopied = 0;
; 1176 : 
; 1177 : 			_TRY_BEGIN
; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

  0008e	8b 44 24 24	 mov	 eax, DWORD PTR __Val$[esp+16]
  00092	50		 push	 eax
  00093	c1 fb 02	 sar	 ebx, 2
  00096	57		 push	 edi
  00097	8d 4c 9d 00	 lea	 ecx, DWORD PTR [ebp+ebx*4]
  0009b	51		 push	 ecx
  0009c	8b ce		 mov	 ecx, esi
  0009e	e8 00 00 00 00	 call	 ?_Ufill@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAKIABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ufill

; 1179 : 			++_Ncopied;
; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

  000a3	8b 54 24 1c	 mov	 edx, DWORD PTR __Where$[esp+20]
  000a7	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000aa	55		 push	 ebp
  000ab	52		 push	 edx
  000ac	50		 push	 eax
  000ad	8b ce		 mov	 ecx, esi
  000af	e8 00 00 00 00	 call	 ??$_Umove@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove<unsigned long *>

; 1182 : 			++_Ncopied;
; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

  000b4	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  000b7	8b 44 24 1c	 mov	 eax, DWORD PTR __Where$[esp+20]
  000bb	03 df		 add	 ebx, edi
  000bd	8d 4c 9d 00	 lea	 ecx, DWORD PTR [ebp+ebx*4]
  000c1	51		 push	 ecx
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	8b ce		 mov	 ecx, esi
  000c6	e8 00 00 00 00	 call	 ??$_Umove@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove<unsigned long *>

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)
; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1188 : 			if (0 < _Ncopied)
; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);
; 1191 : 			_RERAISE;
; 1192 : 			_CATCH_END
; 1193 : 
; 1194 : 			_Count += size();

  000cb	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000ce	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000d1	2b c8		 sub	 ecx, eax
  000d3	c1 f9 02	 sar	 ecx, 2
  000d6	03 f9		 add	 edi, ecx

; 1195 : 			if (_Myfirst != 0)

  000d8	85 c0		 test	 eax, eax
  000da	74 09		 je	 SHORT $LN57@Insert_n@2

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);
; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e2	83 c4 04	 add	 esp, 4
$LN57@Insert_n@2:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

  000e5	8b 54 24 10	 mov	 edx, DWORD PTR __Capacity$[esp+20]

; 1206 : 			_Mylast = _Newvec + _Count;

  000e9	8d 4c bd 00	 lea	 ecx, DWORD PTR [ebp+edi*4]
  000ed	8d 44 95 00	 lea	 eax, DWORD PTR [ebp+edx*4]

; 1207 : 			_Myfirst = _Newvec;

  000f1	89 6e 0c	 mov	 DWORD PTR [esi+12], ebp
  000f4	5d		 pop	 ebp
  000f5	5b		 pop	 ebx
  000f6	5f		 pop	 edi
  000f7	89 46 14	 mov	 DWORD PTR [esi+20], eax
  000fa	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  000fd	5e		 pop	 esi

; 1249 : 			}
; 1250 : 		}

  000fe	59		 pop	 ecx
  000ff	c2 10 00	 ret	 16			; 00000010H
$LN10@Insert_n@2:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

  00102	8b 44 24 1c	 mov	 eax, DWORD PTR __Where$[esp+20]

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

  00106	8b 4c 24 24	 mov	 ecx, DWORD PTR __Val$[esp+16]
  0010a	8b d3		 mov	 edx, ebx
  0010c	2b d0		 sub	 edx, eax
  0010e	c1 fa 02	 sar	 edx, 2
  00111	3b d7		 cmp	 edx, edi
  00113	8b 11		 mov	 edx, DWORD PTR [ecx]

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

  00115	8d 2c bd 00 00
	00 00		 lea	 ebp, DWORD PTR [edi*4]
  0011c	89 54 24 24	 mov	 DWORD PTR __Tmp$130759[esp+16], edx
  00120	73 4c		 jae	 SHORT $LN3@Insert_n@2
  00122	8d 0c 28	 lea	 ecx, DWORD PTR [eax+ebp]
  00125	51		 push	 ecx
  00126	53		 push	 ebx
  00127	50		 push	 eax
  00128	8b ce		 mov	 ecx, esi
  0012a	e8 00 00 00 00	 call	 ??$_Umove@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove<unsigned long *>

; 1215 : 
; 1216 : 			_TRY_BEGIN
; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

  0012f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00132	8b c8		 mov	 ecx, eax
  00134	2b 4c 24 1c	 sub	 ecx, DWORD PTR __Where$[esp+20]
  00138	8d 54 24 24	 lea	 edx, DWORD PTR __Tmp$130759[esp+16]
  0013c	c1 f9 02	 sar	 ecx, 2
  0013f	52		 push	 edx
  00140	2b f9		 sub	 edi, ecx
  00142	57		 push	 edi
  00143	50		 push	 eax
  00144	8b ce		 mov	 ecx, esi
  00146	e8 00 00 00 00	 call	 ?_Ufill@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAKIABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ufill

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 1221 : 			_RERAISE;
; 1222 : 			_CATCH_END
; 1223 : 
; 1224 : 			_Mylast += _Count;

  0014b	01 6e 10	 add	 DWORD PTR [esi+16], ebp
  0014e	8b 76 10	 mov	 esi, DWORD PTR [esi+16]

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

  00151	8b 44 24 1c	 mov	 eax, DWORD PTR __Where$[esp+20]
  00155	8d 54 24 24	 lea	 edx, DWORD PTR __Tmp$130759[esp+16]
  00159	52		 push	 edx
  0015a	2b f5		 sub	 esi, ebp
  0015c	56		 push	 esi
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 ??$fill@PAKK@std@@YAXPAK0ABK@Z ; std::fill<unsigned long *,unsigned long>
  00163	83 c4 0c	 add	 esp, 12			; 0000000cH
  00166	5d		 pop	 ebp
  00167	5b		 pop	 ebx
  00168	5f		 pop	 edi
  00169	5e		 pop	 esi

; 1249 : 			}
; 1250 : 		}

  0016a	59		 pop	 ecx
  0016b	c2 10 00	 ret	 16			; 00000010H
$LN3@Insert_n@2:

; 1232 : 			}
; 1233 : 		else
; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence
; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;
; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

  0016e	53		 push	 ebx
  0016f	8b fb		 mov	 edi, ebx
  00171	53		 push	 ebx
  00172	2b fd		 sub	 edi, ebp
  00174	57		 push	 edi
  00175	8b ce		 mov	 ecx, esi
  00177	e8 00 00 00 00	 call	 ??$_Umove@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove<unsigned long *>

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

  0017c	53		 push	 ebx
  0017d	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00180	8b 44 24 20	 mov	 eax, DWORD PTR __Where$[esp+24]
  00184	57		 push	 edi
  00185	50		 push	 eax
  00186	e8 00 00 00 00	 call	 ??$_Unchecked_move_backward@PAKPAK@stdext@@YAPAKPAK00@Z ; stdext::_Unchecked_move_backward<unsigned long *,unsigned long *>

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

  0018b	8b 44 24 28	 mov	 eax, DWORD PTR __Where$[esp+32]
  0018f	8d 4c 24 30	 lea	 ecx, DWORD PTR __Tmp$130769[esp+28]
  00193	51		 push	 ecx
  00194	03 e8		 add	 ebp, eax
  00196	55		 push	 ebp
  00197	50		 push	 eax
  00198	e8 00 00 00 00	 call	 ??$fill@PAKK@std@@YAXPAK0ABK@Z ; std::fill<unsigned long *,unsigned long>
  0019d	83 c4 18	 add	 esp, 24			; 00000018H
  001a0	5d		 pop	 ebp
  001a1	5b		 pop	 ebx
$LN1@Insert_n@2:
  001a2	5f		 pop	 edi
  001a3	5e		 pop	 esi

; 1249 : 			}
; 1250 : 		}

  001a4	59		 pop	 ecx
  001a5	c2 10 00	 ret	 16			; 00000010H
$LN63@Insert_n@2:
?_Insert_n@?$vector@KV?$allocator@K@std@@@std@@IAEXV?$_Vector_const_iterator@KV?$allocator@K@std@@@2@IABK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Insert_n
_TEXT	ENDS
PUBLIC	?construct@?$allocator@USecurityTokenInfo@CipherShed@@@std@@QAEXPAUSecurityTokenInfo@CipherShed@@ABU34@@Z ; std::allocator<CipherShed::SecurityTokenInfo>::construct
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@USecurityTokenInfo@CipherShed@@@std@@QAEXPAUSecurityTokenInfo@CipherShed@@ABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@USecurityTokenInfo@CipherShed@@@std@@QAEXPAUSecurityTokenInfo@CipherShed@@ABU34@@Z PROC ; std::allocator<CipherShed::SecurityTokenInfo>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	e8 00 00 00 00	 call	 ??$_Construct@USecurityTokenInfo@CipherShed@@U12@@std@@YAXPAUSecurityTokenInfo@CipherShed@@ABU12@@Z ; std::_Construct<CipherShed::SecurityTokenInfo,CipherShed::SecurityTokenInfo>
  0000f	83 c4 08	 add	 esp, 8

; 156  : 		}

  00012	c2 08 00	 ret	 8
?construct@?$allocator@USecurityTokenInfo@CipherShed@@@std@@QAEXPAUSecurityTokenInfo@CipherShed@@ABU34@@Z ENDP ; std::allocator<CipherShed::SecurityTokenInfo>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@@Z ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	e8 00 00 00 00	 call	 ??1SecurityTokenInfo@CipherShed@@QAE@XZ

; 161  : 		}

  0000c	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0
__ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	ENDS
;	COMDAT ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
_TEXT	SEGMENT
$T174828 = -20						; size = 4
__Lock$174852 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Byte$ = 8						; size = 1
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z PROC ; std::basic_ios<char,std::char_traits<char> >::widen, COMDAT
; _this$ = ecx

; 123  : 		{	// convert _Byte to character using imbued locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 124  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T174828[esp+36]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00030	50		 push	 eax
  00031	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  00039	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  0003e	8b 7c 24 14	 mov	 edi, DWORD PTR $T174828[esp+40]
  00042	83 c4 04	 add	 esp, 4
  00045	8b d8		 mov	 ebx, eax
  00047	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1
  0004f	85 ff		 test	 edi, edi
  00051	74 3d		 je	 SHORT $LN7@widen
  00053	6a 00		 push	 0
  00055	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$174852[esp+40]
  00059	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0005e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00061	85 c0		 test	 eax, eax
  00063	76 09		 jbe	 SHORT $LN9@widen
  00065	83 f8 ff	 cmp	 eax, -1
  00068	73 04		 jae	 SHORT $LN9@widen
  0006a	48		 dec	 eax
  0006b	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN9@widen:
  0006e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00071	f7 de		 neg	 esi
  00073	1b f6		 sbb	 esi, esi
  00075	f7 d6		 not	 esi
  00077	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$174852[esp+36]
  0007b	23 f7		 and	 esi, edi
  0007d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00082	85 f6		 test	 esi, esi
  00084	74 0a		 je	 SHORT $LN7@widen
  00086	8b 16		 mov	 edx, DWORD PTR [esi]
  00088	8b 02		 mov	 eax, DWORD PTR [edx]
  0008a	6a 01		 push	 1
  0008c	8b ce		 mov	 ecx, esi
  0008e	ff d0		 call	 eax
$LN7@widen:

; 125  : 		return (_Ctype_fac.widen(_Byte));

  00090	8b 13		 mov	 edx, DWORD PTR [ebx]
  00092	8b 44 24 28	 mov	 eax, DWORD PTR __Byte$[esp+32]
  00096	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00099	50		 push	 eax
  0009a	8b cb		 mov	 ecx, ebx
  0009c	ff d2		 call	 edx

; 126  : 		}

  0009e	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	83 c4 14	 add	 esp, 20			; 00000014H
  000b0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T174828[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::widen
PUBLIC	?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z$0
__ehfuncinfo$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	ENDS
;	COMDAT ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
_TEXT	SEGMENT
$T174867 = -20						; size = 4
__Lock$174891 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Byte$ = 8						; size = 1
?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen, COMDAT
; _this$ = ecx

; 123  : 		{	// convert _Byte to character using imbued locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 124  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T174867[esp+36]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00030	50		 push	 eax
  00031	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  00039	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  0003e	8b 7c 24 14	 mov	 edi, DWORD PTR $T174867[esp+40]
  00042	83 c4 04	 add	 esp, 4
  00045	8b d8		 mov	 ebx, eax
  00047	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1
  0004f	85 ff		 test	 edi, edi
  00051	74 3d		 je	 SHORT $LN7@widen@2
  00053	6a 00		 push	 0
  00055	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$174891[esp+40]
  00059	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0005e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00061	85 c0		 test	 eax, eax
  00063	76 09		 jbe	 SHORT $LN9@widen@2
  00065	83 f8 ff	 cmp	 eax, -1
  00068	73 04		 jae	 SHORT $LN9@widen@2
  0006a	48		 dec	 eax
  0006b	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN9@widen@2:
  0006e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00071	f7 de		 neg	 esi
  00073	1b f6		 sbb	 esi, esi
  00075	f7 d6		 not	 esi
  00077	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$174891[esp+36]
  0007b	23 f7		 and	 esi, edi
  0007d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00082	85 f6		 test	 esi, esi
  00084	74 0a		 je	 SHORT $LN7@widen@2
  00086	8b 16		 mov	 edx, DWORD PTR [esi]
  00088	8b 02		 mov	 eax, DWORD PTR [edx]
  0008a	6a 01		 push	 1
  0008c	8b ce		 mov	 ecx, esi
  0008e	ff d0		 call	 eax
$LN7@widen@2:

; 125  : 		return (_Ctype_fac.widen(_Byte));

  00090	8b 13		 mov	 edx, DWORD PTR [ebx]
  00092	8b 44 24 28	 mov	 eax, DWORD PTR __Byte$[esp+32]
  00096	8b 52 28	 mov	 edx, DWORD PTR [edx+40]
  00099	50		 push	 eax
  0009a	8b cb		 mov	 ecx, ebx
  0009c	ff d2		 call	 edx

; 126  : 		}

  0009e	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	83 c4 14	 add	 esp, 20			; 00000014H
  000b0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T174867[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen
PUBLIC	?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
PUBLIC	??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
;	COMDAT ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$132047 = -36					; size = 4
__Lock$174913 = -32					; size = 4
__Lock$132046 = -28					; size = 4
$T174906 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$174935 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$132046[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, 0 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$132047[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet@3
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$174913[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, 0 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet@3
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, eax ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
$LN10@use_facet@3:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$174913[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet@3:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet@3
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet@3
$LN30@use_facet@3:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet@3
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet@3
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet@3
$LN20@use_facet@3:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet@3
$LN16@use_facet@3:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet@3:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet@3
$LN31@use_facet@3:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet@3

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet@3
$LN4@use_facet@3:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$132047[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet@3

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T174906[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T174906[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet@3:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$132047[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$174935[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet@3
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet@3:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$174935[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet@3:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$132046[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$132046[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >::_Psave
PUBLIC	??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >
;	COMDAT ?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$132077 = -36					; size = 4
__Lock$174960 = -32					; size = 4
__Lock$132076 = -28					; size = 4
$T174953 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$174982 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$132076[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A, 0 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$132077[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet@4
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$174960[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A, 0 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet@4
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A, eax ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
$LN10@use_facet@4:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$174960[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet@4:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet@4
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet@4
$LN30@use_facet@4:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet@4
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet@4
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet@4
$LN20@use_facet@4:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet@4
$LN16@use_facet@4:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet@4:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet@4
$LN31@use_facet@4:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet@4

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet@4
$LN4@use_facet@4:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$132077[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet@4

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T174953[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T174953[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet@4:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$132077[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$174982[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet@4
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet@4:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$174982[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet@4:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$132076[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet@4:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$132076[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
PUBLIC	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::numpunct<char> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$132655 = -36					; size = 4
__Lock$175007 = -32					; size = 4
__Lock$132654 = -28					; size = 4
$T175000 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$175029 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::numpunct<char> >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$132654[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, 0 ; std::numpunct<char>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$132655[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet@5
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$175007[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, 0 ; std::numpunct<char>::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet@5
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, eax ; std::numpunct<char>::id
$LN10@use_facet@5:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$175007[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet@5:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet@5
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet@5
$LN30@use_facet@5:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet@5
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet@5
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet@5
$LN20@use_facet@5:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet@5
$LN16@use_facet@5:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet@5:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet@5
$LN31@use_facet@5:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet@5

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet@5
$LN4@use_facet@5:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$132655[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet@5

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T175000[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T175000[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet@5:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$132655[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$175029[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::numpunct<char> >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet@5
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet@5:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$175029[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet@5:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$132654[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet@5:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$132654[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<char> >
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<wchar_t> >::_Psave
PUBLIC	??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<wchar_t> >
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::numpunct<wchar_t> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$132685 = -36					; size = 4
__Lock$175054 = -32					; size = 4
__Lock$132684 = -28					; size = 4
$T175047 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$175076 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z PROC ; std::use_facet<std::numpunct<wchar_t> >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$132684[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$numpunct@_W@std@@2V0locale@2@A, 0 ; std::numpunct<wchar_t>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<wchar_t> >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$132685[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet@6
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$175054[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$numpunct@_W@std@@2V0locale@2@A, 0 ; std::numpunct<wchar_t>::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet@6
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$numpunct@_W@std@@2V0locale@2@A, eax ; std::numpunct<wchar_t>::id
$LN10@use_facet@6:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$175054[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet@6:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet@6
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet@6
$LN30@use_facet@6:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet@6
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet@6
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet@6
$LN20@use_facet@6:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet@6
$LN16@use_facet@6:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet@6:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet@6
$LN31@use_facet@6:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet@6

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet@6
$LN4@use_facet@6:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$132685[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<wchar_t>::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet@6

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T175047[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T175047[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet@6:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$132685[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$175076[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::numpunct<wchar_t> >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet@6
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet@6:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$175076[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet@6:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$132684[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet@6:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$132684[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<wchar_t> >
PUBLIC	??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	SEGMENT
__catchsym$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z$8 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z$8
__unwindtable$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >, COMDAT
; _this$ = ecx

; 528  : 		{	// construct tree by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00030	6a 04		 push	 4
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	85 c0		 test	 eax, eax
  0003c	74 04		 je	 SHORT $LN37@Tree@2
  0003e	89 30		 mov	 DWORD PTR [eax], esi
  00040	eb 02		 jmp	 SHORT $LN38@Tree@2
$LN37@Tree@2:
  00042	33 c0		 xor	 eax, eax
$LN38@Tree@2:
  00044	89 06		 mov	 DWORD PTR [esi], eax

; 529  : 		_Init();

  00046	8b ce		 mov	 ecx, esi
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0004f	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Buynode
  00054	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00057	b1 01		 mov	 cl, 1
  00059	88 48 19	 mov	 BYTE PTR [eax+25], cl
  0005c	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005f	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00062	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00065	89 00		 mov	 DWORD PTR [eax], eax
  00067	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0006a	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 530  : 		_TRY_BEGIN
; 531  : 		_Copy(_Right);

  0006d	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00070	88 4d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], cl
  00073	50		 push	 eax
  00074	8b ce		 mov	 ecx, esi
  00076	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  0007d	e8 00 00 00 00	 call	 ?_Copy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXABV12@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Copy

; 535  : 		_CATCH_END
; 536  : 		}

  00082	8b c6		 mov	 eax, esi
  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
__catch$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z$0:

; 532  : 		_CATCH_ALL
; 533  : 		_Tidy();

  00098	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	e8 00 00 00 00	 call	 ?_Tidy@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tidy

; 534  : 		_RERAISE;

  000a0	6a 00		 push	 0
  000a2	6a 00		 push	 0
  000a4	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN86@Tree@2:
  000a9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
PUBLIC	??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	SEGMENT
__catchsym$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$0
__unwindtable$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$2
__ehfuncinfo$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
$T175439 = -40						; size = 8
__Next$ = -32						; size = 8
__Before$133773 = -24					; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__First$ = 16						; size = 8
__Last$ = 24						; size = 8
___formal$ = 32						; size = 1
??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 762  : 		void _Insert(const_iterator _Where,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d ec	 mov	 DWORD PTR _this$[ebp], ebx

; 763  : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 764  : 		{	// insert [_First, _Last) at _Where, forward iterators
; 765  : 
; 766  :  #if _HAS_ITERATOR_DEBUGGING
; 767  : 		_DEBUG_RANGE(_First, _Last);
; 768  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 769  : 
; 770  : 		_Iter _Next = _First;

  00030	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  00033	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  00036	89 45 e0	 mov	 DWORD PTR __Next$[ebp], eax
  00039	89 4d e4	 mov	 DWORD PTR __Next$[ebp+4], ecx

; 771  : 
; 772  : 		_TRY_BEGIN

  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 773  : 		for (; _First != _Last; ++_First)

$LL18@Insert@2:
  00043	85 c0		 test	 eax, eax
  00045	74 05		 je	 SHORT $LN32@Insert@2
  00047	3b 45 18	 cmp	 eax, DWORD PTR __Last$[ebp]
  0004a	74 08		 je	 SHORT $LN33@Insert@2
$LN32@Insert@2:
  0004c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00051	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
$LN33@Insert@2:
  00054	8b 55 14	 mov	 edx, DWORD PTR __First$[ebp+4]
  00057	3b 55 1c	 cmp	 edx, DWORD PTR __Last$[ebp+4]
  0005a	0f 84 de 00 00
	00		 je	 $LN4@Insert@2

; 774  : 			_Insert(_Where, *_First);

  00060	85 c0		 test	 eax, eax
  00062	75 0c		 jne	 SHORT $LN74@Insert@2
  00064	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00069	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  0006c	85 c0		 test	 eax, eax
  0006e	74 04		 je	 SHORT $LN51@Insert@2
$LN74@Insert@2:
  00070	8b 00		 mov	 eax, DWORD PTR [eax]
  00072	eb 02		 jmp	 SHORT $LN52@Insert@2
$LN51@Insert@2:
  00074	33 c0		 xor	 eax, eax
$LN52@Insert@2:
  00076	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  00079	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0007c	75 05		 jne	 SHORT $LN41@Insert@2
  0007e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN41@Insert@2:
  00083	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp+4]
  00086	8b 45 14	 mov	 eax, DWORD PTR __First$[ebp+4]
  00089	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0008c	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
  0008f	83 c0 08	 add	 eax, 8
  00092	50		 push	 eax
  00093	52		 push	 edx
  00094	51		 push	 ecx
  00095	8b cb		 mov	 ecx, ebx
  00097	e8 00 00 00 00	 call	 ?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@0ABK@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode
  0009c	6a 01		 push	 1
  0009e	8b cb		 mov	 ecx, ebx
  000a0	8b f0		 mov	 esi, eax
  000a2	e8 00 00 00 00	 call	 ?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Incsize
  000a7	89 37		 mov	 DWORD PTR [edi], esi
  000a9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ac	89 30		 mov	 DWORD PTR [eax], esi
  000ae	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  000b1	85 c0		 test	 eax, eax
  000b3	75 0c		 jne	 SHORT $LN73@Insert@2
  000b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000ba	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  000bd	85 c0		 test	 eax, eax
  000bf	74 04		 je	 SHORT $LN24@Insert@2
$LN73@Insert@2:

; 773  : 		for (; _First != _Last; ++_First)

  000c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c3	eb 02		 jmp	 SHORT $LN25@Insert@2
$LN24@Insert@2:
  000c5	33 c9		 xor	 ecx, ecx
$LN25@Insert@2:
  000c7	8b 55 14	 mov	 edx, DWORD PTR __First$[ebp+4]
  000ca	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  000cd	75 08		 jne	 SHORT $LN14@Insert@2
  000cf	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000d4	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
$LN14@Insert@2:
  000d7	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	89 55 14	 mov	 DWORD PTR __First$[ebp+4], edx
  000df	e9 5f ff ff ff	 jmp	 $LL18@Insert@2
__catch$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$0:

; 775  : 		_CATCH_ALL
; 776  : 		for (; _Next != _First; ++_Next)

  000e4	8d 45 10	 lea	 eax, DWORD PTR __First$[ebp]
  000e7	50		 push	 eax
  000e8	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  000eb	e8 00 00 00 00	 call	 ??9?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator!=
  000f0	84 c0		 test	 al, al
  000f2	74 41		 je	 SHORT $LN1@Insert@2
  000f4	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
$LL3@Insert@2:

; 777  : 			{	// undo inserts
; 778  : 			const_iterator _Before = _Where;

  000f7	8b 4d 08	 mov	 ecx, DWORD PTR __Where$[ebp]
  000fa	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp+4]
  000fd	89 4d e8	 mov	 DWORD PTR __Before$133773[ebp], ecx

; 779  : 			erase(--_Before);

  00100	8d 4d e8	 lea	 ecx, DWORD PTR __Before$133773[ebp]
  00103	89 55 ec	 mov	 DWORD PTR __Before$133773[ebp+4], edx
  00106	e8 00 00 00 00	 call	 ??F?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator--
  0010b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0010e	8b 10		 mov	 edx, DWORD PTR [eax]
  00110	51		 push	 ecx
  00111	52		 push	 edx
  00112	8d 45 d8	 lea	 eax, DWORD PTR $T175439[ebp]
  00115	50		 push	 eax
  00116	8b ce		 mov	 ecx, esi
  00118	e8 00 00 00 00	 call	 ?erase@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::erase
  0011d	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00120	e8 00 00 00 00	 call	 ??E?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator++
  00125	8d 4d 10	 lea	 ecx, DWORD PTR __First$[ebp]
  00128	51		 push	 ecx
  00129	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  0012c	e8 00 00 00 00	 call	 ??9?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator!=
  00131	84 c0		 test	 al, al
  00133	75 c2		 jne	 SHORT $LL3@Insert@2
$LN1@Insert@2:

; 780  : 			}
; 781  : 		_RERAISE;

  00135	6a 00		 push	 0
  00137	6a 00		 push	 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Insert@2:

; 782  : 		_CATCH_END
; 783  : 		}

  0013e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00141	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00148	59		 pop	 ecx
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 1c 00	 ret	 28			; 0000001cH
$LN76@Insert@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >
PUBLIC	??$_Destroy_range@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CipherShed::SecurityTokenKeyfile> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<CipherShed::SecurityTokenKeyfile> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

  00000	57		 push	 edi

; 233  : 	for (; _First != _Last; ++_First)

  00001	8b 7c 24 08	 mov	 edi, DWORD PTR __First$[esp]
  00005	3b 7c 24 0c	 cmp	 edi, DWORD PTR __Last$[esp]
  00009	0f 84 9c 00 00
	00		 je	 $LN1@Destroy_ra
  0000f	53		 push	 ebx
  00010	55		 push	 ebp
  00011	33 db		 xor	 ebx, ebx
  00013	56		 push	 esi
  00014	8d 77 7c	 lea	 esi, DWORD PTR [edi+124]
  00017	8d 6b 07	 lea	 ebp, DWORD PTR [ebx+7]
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL3@Destroy_ra:

; 234  : 		_Al.destroy(_First);

  00020	83 3e 10	 cmp	 DWORD PTR [esi], 16	; 00000010H
  00023	72 0c		 jb	 SHORT $LN33@Destroy_ra
  00025	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4
$LN33@Destroy_ra:
  00031	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH
  00037	89 5e fc	 mov	 DWORD PTR [esi-4], ebx
  0003a	88 5e ec	 mov	 BYTE PTR [esi-20], bl
  0003d	83 7e e4 08	 cmp	 DWORD PTR [esi-28], 8
  00041	72 0c		 jb	 SHORT $LN61@Destroy_ra
  00043	8b 4e d0	 mov	 ecx, DWORD PTR [esi-48]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004c	83 c4 04	 add	 esp, 4
$LN61@Destroy_ra:
  0004f	33 d2		 xor	 edx, edx
  00051	89 6e e4	 mov	 DWORD PTR [esi-28], ebp
  00054	89 5e e0	 mov	 DWORD PTR [esi-32], ebx
  00057	66 89 56 d0	 mov	 WORD PTR [esi-48], dx
  0005b	83 7e bc 10	 cmp	 DWORD PTR [esi-68], 16	; 00000010H
  0005f	72 0c		 jb	 SHORT $LN87@Destroy_ra
  00061	8b 46 a8	 mov	 eax, DWORD PTR [esi-88]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	83 c4 04	 add	 esp, 4
$LN87@Destroy_ra:
  0006d	c7 46 bc 0f 00
	00 00		 mov	 DWORD PTR [esi-68], 15	; 0000000fH
  00074	89 5e b8	 mov	 DWORD PTR [esi-72], ebx
  00077	88 5e a8	 mov	 BYTE PTR [esi-88], bl
  0007a	83 7e a0 08	 cmp	 DWORD PTR [esi-96], 8
  0007e	72 0c		 jb	 SHORT $LN115@Destroy_ra
  00080	8b 4e 8c	 mov	 ecx, DWORD PTR [esi-116]
  00083	51		 push	 ecx
  00084	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00089	83 c4 04	 add	 esp, 4
$LN115@Destroy_ra:
  0008c	33 d2		 xor	 edx, edx
  0008e	89 6e a0	 mov	 DWORD PTR [esi-96], ebp
  00091	89 5e 9c	 mov	 DWORD PTR [esi-100], ebx
  00094	66 89 56 8c	 mov	 WORD PTR [esi-116], dx
  00098	83 ef 80	 sub	 edi, -128		; ffffff80H
  0009b	83 ee 80	 sub	 esi, -128		; ffffff80H
  0009e	3b 7c 24 18	 cmp	 edi, DWORD PTR __Last$[esp+12]
  000a2	0f 85 78 ff ff
	ff		 jne	 $LL3@Destroy_ra
  000a8	5e		 pop	 esi
  000a9	5d		 pop	 ebp
  000aa	5b		 pop	 ebx
$LN1@Destroy_ra:
  000ab	5f		 pop	 edi

; 235  : 	}

  000ac	c3		 ret	 0
??$_Destroy_range@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<CipherShed::SecurityTokenKeyfile> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAEXPAUSecurityTokenKeyfile@CipherShed@@ABU34@@Z ; std::allocator<CipherShed::SecurityTokenKeyfile>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAEXPAUSecurityTokenKeyfile@CipherShed@@ABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAEXPAUSecurityTokenKeyfile@CipherShed@@ABU34@@Z PROC ; std::allocator<CipherShed::SecurityTokenKeyfile>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	e8 00 00 00 00	 call	 ??$_Construct@USecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@ABU12@@Z ; std::_Construct<CipherShed::SecurityTokenKeyfile,CipherShed::SecurityTokenKeyfile>
  0000f	83 c4 08	 add	 esp, 8

; 156  : 		}

  00012	c2 08 00	 ret	 8
?construct@?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@QAEXPAUSecurityTokenKeyfile@CipherShed@@ABU34@@Z ENDP ; std::allocator<CipherShed::SecurityTokenKeyfile>::construct
_TEXT	ENDS
PUBLIC	?erase@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?erase@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
$T176667 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?erase@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::erase, COMDAT
; _this$ = ecx

; 786  : 		{	// erase element at _Where

  00000	83 ec 08	 sub	 esp, 8

; 787  : 
; 788  :  #if _HAS_ITERATOR_DEBUGGING
; 789  : 		if (_Where._Mycont != this || _Where._Ptr == _Myhead)
; 790  : 			_DEBUG_ERROR("list erase iterator outside range");
; 791  : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 792  : 		_Orphan_ptr(*this, _Pnode);
; 793  : 
; 794  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 795  : 		_Nodeptr _Pnode = (_Where++)._Mynode();

  00003	8b 44 24 10	 mov	 eax, DWORD PTR __Where$[esp+4]
  00007	56		 push	 esi
  00008	8b 74 24 18	 mov	 esi, DWORD PTR __Where$[esp+12]
  0000c	57		 push	 edi
  0000d	8b f9		 mov	 edi, ecx
  0000f	89 44 24 08	 mov	 DWORD PTR $T176667[esp+16], eax
  00013	85 c0		 test	 eax, eax
  00015	75 0d		 jne	 SHORT $LN63@erase@8
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0001c	8b 44 24 18	 mov	 eax, DWORD PTR __Where$[esp+12]
  00020	85 c0		 test	 eax, eax
  00022	74 04		 je	 SHORT $LN16@erase@8
$LN63@erase@8:
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	eb 02		 jmp	 SHORT $LN17@erase@8
$LN16@erase@8:
  00028	33 c0		 xor	 eax, eax
$LN17@erase@8:
  0002a	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Where$[esp+16]
  0002e	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00031	75 05		 jne	 SHORT $LN6@erase@8
  00033	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@erase@8:
  00038	8b 54 24 1c	 mov	 edx, DWORD PTR __Where$[esp+16]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	89 44 24 1c	 mov	 DWORD PTR __Where$[esp+16], eax

; 796  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 797  : 
; 798  : 		if (_Pnode != _Myhead)

  00042	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  00045	74 23		 je	 SHORT $LN1@erase@8

; 799  : 			{	// not list head, safe to erase
; 800  : 			_Nextnode(_Prevnode(_Pnode)) = _Nextnode(_Pnode);

  00047	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0004a	8b 16		 mov	 edx, DWORD PTR [esi]
  0004c	89 11		 mov	 DWORD PTR [ecx], edx

; 801  : 			_Prevnode(_Nextnode(_Pnode)) = _Prevnode(_Pnode);

  0004e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00051	8b 06		 mov	 eax, DWORD PTR [esi]
  00053	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 802  : 			this->_Alnod.destroy(_Pnode);

  00056	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00059	e8 00 00 00 00	 call	 ??1SecurityTokenInfo@CipherShed@@QAE@XZ

; 803  : 			this->_Alnod.deallocate(_Pnode, 1);

  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00064	83 c4 04	 add	 esp, 4

; 804  : 			--_Mysize;

  00067	ff 4f 18	 dec	 DWORD PTR [edi+24]
$LN1@erase@8:

; 805  : 			}
; 806  : 		return (_Make_iter(_Where));

  0006a	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0006c	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  00070	8b 54 24 1c	 mov	 edx, DWORD PTR __Where$[esp+16]
  00074	5f		 pop	 edi
  00075	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00078	89 08		 mov	 DWORD PTR [eax], ecx
  0007a	5e		 pop	 esi

; 807  : 		}

  0007b	83 c4 08	 add	 esp, 8
  0007e	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::erase
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::SecurityTokenKeyfile const *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T176873 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Vptr$176870 = 8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CipherShed::SecurityTokenKeyfile const *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

  0002b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 128  : 
; 129  : 	_TRY_BEGIN

  0002e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_cop@4:

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

  00040	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00043	74 45		 je	 SHORT $LN4@Uninit_cop@4

; 131  : 		_Al.construct(_Dest, *_First);

  00045	89 75 08	 mov	 DWORD PTR __Vptr$176870[ebp], esi
  00048	89 75 e8	 mov	 DWORD PTR $T176873[ebp], esi
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004f	3b f3		 cmp	 esi, ebx
  00051	74 08		 je	 SHORT $LN18@Uninit_cop@4
  00053	57		 push	 edi
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z
$LN18@Uninit_cop@4:
  0005b	83 ee 80	 sub	 esi, -128		; ffffff80H
  0005e	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00061	89 75 10	 mov	 DWORD PTR __Dest$[ebp], esi
  00064	83 ef 80	 sub	 edi, -128		; ffffff80H
  00067	eb d7		 jmp	 SHORT $LL6@Uninit_cop@4
__catch$??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

  00069	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  0006c	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0006f	3b f7		 cmp	 esi, edi
  00071	74 0e		 je	 SHORT $LN1@Uninit_cop@4
$LL3@Uninit_cop@4:

; 134  : 		_Al.destroy(_Next);

  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ??1SecurityTokenKeyfile@CipherShed@@QAE@XZ
  0007a	83 ee 80	 sub	 esi, -128		; ffffff80H
  0007d	3b f7		 cmp	 esi, edi
  0007f	75 f2		 jne	 SHORT $LL3@Uninit_cop@4
$LN1@Uninit_cop@4:

; 135  : 	_RERAISE;

  00081	33 db		 xor	 ebx, ebx
  00083	53		 push	 ebx
  00084	53		 push	 ebx
  00085	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_cop@4:

; 136  : 	_CATCH_END
; 137  : 	return (_Dest);

  0008a	8b c6		 mov	 eax, esi

; 138  : 	}

  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
$LN35@Uninit_cop@4:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Vptr$176870[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T176873[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CipherShed::SecurityTokenKeyfile const *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >
PUBLIC	??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T176939 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Vptr$176936 = 8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

  0002b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 128  : 
; 129  : 	_TRY_BEGIN

  0002e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_cop@5:

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

  00040	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00043	74 45		 je	 SHORT $LN4@Uninit_cop@5

; 131  : 		_Al.construct(_Dest, *_First);

  00045	89 75 08	 mov	 DWORD PTR __Vptr$176936[ebp], esi
  00048	89 75 e8	 mov	 DWORD PTR $T176939[ebp], esi
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004f	3b f3		 cmp	 esi, ebx
  00051	74 08		 je	 SHORT $LN18@Uninit_cop@5
  00053	57		 push	 edi
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z
$LN18@Uninit_cop@5:
  0005b	83 ee 80	 sub	 esi, -128		; ffffff80H
  0005e	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00061	89 75 10	 mov	 DWORD PTR __Dest$[ebp], esi
  00064	83 ef 80	 sub	 edi, -128		; ffffff80H
  00067	eb d7		 jmp	 SHORT $LL6@Uninit_cop@5
__catch$??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

  00069	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  0006c	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0006f	3b f7		 cmp	 esi, edi
  00071	74 0e		 je	 SHORT $LN1@Uninit_cop@5
$LL3@Uninit_cop@5:

; 134  : 		_Al.destroy(_Next);

  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ??1SecurityTokenKeyfile@CipherShed@@QAE@XZ
  0007a	83 ee 80	 sub	 esi, -128		; ffffff80H
  0007d	3b f7		 cmp	 esi, edi
  0007f	75 f2		 jne	 SHORT $LL3@Uninit_cop@5
$LN1@Uninit_cop@5:

; 135  : 	_RERAISE;

  00081	33 db		 xor	 ebx, ebx
  00083	53		 push	 ebx
  00084	53		 push	 ebx
  00085	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_cop@5:

; 136  : 	_CATCH_END
; 137  : 	return (_Dest);

  0008a	8b c6		 mov	 eax, esi

; 138  : 	}

  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
$LN35@Uninit_cop@5:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Vptr$176936[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T176939[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >
PUBLIC	??4SecurityTokenKeyfile@CipherShed@@QAEAAU01@ABU01@@Z ; CipherShed::SecurityTokenKeyfile::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4SecurityTokenKeyfile@CipherShed@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4SecurityTokenKeyfile@CipherShed@@QAEAAU01@ABU01@@Z PROC ; CipherShed::SecurityTokenKeyfile::operator=, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR ___that$[esp+4]
  00006	8b 07		 mov	 eax, DWORD PTR [edi]
  00008	8b f1		 mov	 esi, ecx
  0000a	6a ff		 push	 -1
  0000c	6a 00		 push	 0
  0000e	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00011	51		 push	 ecx
  00012	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00015	89 06		 mov	 DWORD PTR [esi], eax
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0001c	6a ff		 push	 -1
  0001e	6a 00		 push	 0
  00020	8d 57 20	 lea	 edx, DWORD PTR [edi+32]
  00023	52		 push	 edx
  00024	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00027	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002c	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  0002f	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00032	8b 4f 40	 mov	 ecx, DWORD PTR [edi+64]
  00035	6a ff		 push	 -1
  00037	89 4e 40	 mov	 DWORD PTR [esi+64], ecx
  0003a	8b 57 44	 mov	 edx, DWORD PTR [edi+68]
  0003d	6a 00		 push	 0
  0003f	8d 47 48	 lea	 eax, DWORD PTR [edi+72]
  00042	50		 push	 eax
  00043	8d 4e 48	 lea	 ecx, DWORD PTR [esi+72]
  00046	89 56 44	 mov	 DWORD PTR [esi+68], edx
  00049	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0004e	6a ff		 push	 -1
  00050	6a 00		 push	 0
  00052	83 c7 64	 add	 edi, 100		; 00000064H
  00055	57		 push	 edi
  00056	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
  00059	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005e	5f		 pop	 edi
  0005f	8b c6		 mov	 eax, esi
  00061	5e		 pop	 esi
  00062	c2 04 00	 ret	 4
??4SecurityTokenKeyfile@CipherShed@@QAEAAU01@ABU01@@Z ENDP ; CipherShed::SecurityTokenKeyfile::operator=
_TEXT	ENDS
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx

; 54   : 		if (_State != goodbit)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __State$[esp-4]
  00004	85 d2		 test	 edx, edx
  00006	74 17		 je	 SHORT $LN6@setstate

; 55   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00008	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000b	0b c2		 or	 eax, edx
  0000d	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00011	75 03		 jne	 SHORT $LN8@setstate
  00013	83 c8 04	 or	 eax, 4
$LN8@setstate:
  00016	89 44 24 04	 mov	 DWORD PTR __State$[esp-4], eax
  0001a	e9 00 00 00 00	 jmp	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN6@setstate:

; 56   : 		}

  0001f	c2 08 00	 ret	 8
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
PUBLIC	?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
; Function compile flags: /Ogtpy
;	COMDAT ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate, COMDAT
; _this$ = ecx

; 54   : 		if (_State != goodbit)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __State$[esp-4]
  00004	85 d2		 test	 edx, edx
  00006	74 17		 je	 SHORT $LN6@setstate@2

; 55   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00008	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000b	0b c2		 or	 eax, edx
  0000d	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00011	75 03		 jne	 SHORT $LN8@setstate@2
  00013	83 c8 04	 or	 eax, 4
$LN8@setstate@2:
  00016	89 44 24 04	 mov	 DWORD PTR __State$[esp-4], eax
  0001a	e9 00 00 00 00	 jmp	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN6@setstate@2:

; 56   : 		}

  0001f	c2 08 00	 ret	 8
?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
_TEXT	ENDS
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T177242 = -20						; size = 8
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >, COMDAT
; _this$ = ecx

; 539  : 		{	// destroy tree

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 08	 mov	 DWORD PTR _this$[esp+32], esi

; 540  : 		_Tidy();

  0002a	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0002d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002f	8b 10		 mov	 edx, DWORD PTR [eax]
  00031	50		 push	 eax
  00032	51		 push	 ecx
  00033	52		 push	 edx
  00034	51		 push	 ecx
  00035	8d 44 24 1c	 lea	 eax, DWORD PTR $T177242[esp+48]
  00039	50		 push	 eax
  0003a	8b ce		 mov	 ecx, esi
  0003c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00044	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::erase
  00049	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 541  : 		}

  00052	8b 16		 mov	 edx, DWORD PTR [esi]
  00054	52		 push	 edx
  00055	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  0005c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00063	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00068	83 c4 08	 add	 esp, 8
  0006b	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  0006f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00076	59		 pop	 ecx
  00077	5e		 pop	 esi
  00078	83 c4 18	 add	 esp, 24			; 00000018H
  0007b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ$0:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
PUBLIC	??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	6a 04		 push	 4
  00026	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002b	33 c9		 xor	 ecx, ecx
  0002d	83 c4 04	 add	 esp, 4
  00030	3b c1		 cmp	 eax, ecx
  00032	74 04		 je	 SHORT $LN13@vector@3
  00034	89 30		 mov	 DWORD PTR [eax], esi
  00036	eb 02		 jmp	 SHORT $LN14@vector@3
$LN13@vector@3:
  00038	33 c0		 xor	 eax, eax
$LN14@vector@3:
  0003a	89 06		 mov	 DWORD PTR [esi], eax

; 471  : 		_Buy(0);

  0003c	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0003f	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00042	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 472  : 		}

  00045	8b c6		 mov	 eax, esi
  00047	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
PUBLIC	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	6a 04		 push	 4
  00026	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002b	33 c9		 xor	 ecx, ecx
  0002d	83 c4 04	 add	 esp, 4
  00030	3b c1		 cmp	 eax, ecx
  00032	74 04		 je	 SHORT $LN13@vector@4
  00034	89 30		 mov	 DWORD PTR [eax], esi
  00036	eb 02		 jmp	 SHORT $LN14@vector@4
$LN13@vector@4:
  00038	33 c0		 xor	 eax, eax
$LN14@vector@4:
  0003a	89 06		 mov	 DWORD PTR [esi], eax

; 471  : 		_Buy(0);

  0003c	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0003f	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00042	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 472  : 		}

  00045	8b c6		 mov	 eax, esi
  00047	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
PUBLIC	??4?$vector@EV?$allocator@E@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$vector@EV?$allocator@E@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$vector@EV?$allocator@E@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

  00000	53		 push	 ebx

; 564  : 		if (this != &_Right)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Right$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	3b f3		 cmp	 esi, ebx
  0000a	0f 84 c6 00 00
	00		 je	 $LN50@operator@55

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

  00010	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00013	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
  00016	57		 push	 edi
  00017	8b f9		 mov	 edi, ecx
  00019	2b fa		 sub	 edi, edx
  0001b	75 0f		 jne	 SHORT $LN8@operator@55

; 572  : 				clear();	// new sequence empty, erase existing sequence

  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 ?clear@?$vector@EV?$allocator@E@std@@@std@@QAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::clear
  00024	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx

; 599  : 		}

  00029	c2 04 00	 ret	 4
$LN8@operator@55:

; 573  : 			else if (_Right.size() <= size())

  0002c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0002f	55		 push	 ebp
  00030	8b 6e 10	 mov	 ebp, DWORD PTR [esi+16]
  00033	2b e8		 sub	 ebp, eax
  00035	3b fd		 cmp	 edi, ebp
  00037	5d		 pop	 ebp
  00038	77 26		 ja	 SHORT $LN6@operator@55

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

  0003a	2b ca		 sub	 ecx, edx
  0003c	85 c9		 test	 ecx, ecx
  0003e	7e 0c		 jle	 SHORT $LN32@operator@55
  00040	51		 push	 ecx
  00041	52		 push	 edx
  00042	51		 push	 ecx
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _memmove_s
  00049	83 c4 10	 add	 esp, 16			; 00000010H
$LN32@operator@55:

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old
; 578  : 				_Mylast = _Myfirst + _Right.size();

  0004c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0004f	2b 43 0c	 sub	 eax, DWORD PTR [ebx+12]
  00052	5f		 pop	 edi
  00053	03 43 10	 add	 eax, DWORD PTR [ebx+16]

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

  00056	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00059	8b c6		 mov	 eax, esi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx

; 599  : 		}

  0005d	c2 04 00	 ret	 4
$LN6@operator@55:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

  00060	85 c0		 test	 eax, eax
  00062	75 04		 jne	 SHORT $LN41@operator@55
  00064	33 c9		 xor	 ecx, ecx
  00066	eb 05		 jmp	 SHORT $LN42@operator@55
$LN41@operator@55:
  00068	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0006b	2b c8		 sub	 ecx, eax
$LN42@operator@55:
  0006d	3b f9		 cmp	 edi, ecx
  0006f	77 2f		 ja	 SHORT $LN4@operator@55

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

  00071	8b ca		 mov	 ecx, edx
  00073	8b fa		 mov	 edi, edx
  00075	2b f8		 sub	 edi, eax
  00077	03 7e 10	 add	 edi, DWORD PTR [esi+16]

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

  0007a	50		 push	 eax
  0007b	57		 push	 edi
  0007c	51		 push	 ecx
  0007d	e8 00 00 00 00	 call	 ??$unchecked_copy@PAEPAE@stdext@@YAPAEPAE00@Z ; stdext::unchecked_copy<unsigned char *,unsigned char *>

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

  00082	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00085	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008b	51		 push	 ecx
  0008c	52		 push	 edx
  0008d	57		 push	 edi
  0008e	8b ce		 mov	 ecx, esi
  00090	e8 00 00 00 00	 call	 ??$_Ucopy@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Ucopy<unsigned char *>
  00095	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00098	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00099	8b c6		 mov	 eax, esi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx

; 599  : 		}

  0009d	c2 04 00	 ret	 4
$LN4@operator@55:

; 585  : 				}
; 586  : 			else
; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

  000a0	85 c0		 test	 eax, eax
  000a2	74 09		 je	 SHORT $LN45@operator@55

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);
; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000aa	83 c4 04	 add	 esp, 4
$LN45@operator@55:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

  000ad	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  000b0	2b 43 0c	 sub	 eax, DWORD PTR [ebx+12]
  000b3	8b ce		 mov	 ecx, esi
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ?_Buy@?$vector@EV?$allocator@E@std@@@std@@IAE_NI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy
  000bb	84 c0		 test	 al, al
  000bd	74 16		 je	 SHORT $LN49@operator@55

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

  000bf	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000c2	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  000c5	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
  000c8	50		 push	 eax
  000c9	51		 push	 ecx
  000ca	52		 push	 edx
  000cb	8b ce		 mov	 ecx, esi
  000cd	e8 00 00 00 00	 call	 ??$_Ucopy@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Ucopy<unsigned char *>
  000d2	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN49@operator@55:
  000d5	5f		 pop	 edi
$LN50@operator@55:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  000d6	8b c6		 mov	 eax, esi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx

; 599  : 		}

  000da	c2 04 00	 ret	 4
??4?$vector@EV?$allocator@E@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::operator=
_TEXT	ENDS
PUBLIC	?push_back@?$list@KV?$allocator@K@std@@@std@@QAEXABK@Z ; std::list<unsigned long,std::allocator<unsigned long> >::push_back
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?push_back@?$list@KV?$allocator@K@std@@@std@@QAEXABK@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$list@KV?$allocator@K@std@@@std@@QAEXABK@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::push_back, COMDAT
; _this$ = ecx

; 670  : 		_Insert(end(), _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0000c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000f	50		 push	 eax
  00010	51		 push	 ecx
  00011	57		 push	 edi
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@0ABK@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode
  00019	6a 01		 push	 1
  0001b	8b ce		 mov	 ecx, esi
  0001d	8b d8		 mov	 ebx, eax
  0001f	e8 00 00 00 00	 call	 ?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Incsize
  00024	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00027	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	89 1a		 mov	 DWORD PTR [edx], ebx
  0002e	5b		 pop	 ebx

; 671  : 		}

  0002f	c2 04 00	 ret	 4
?push_back@?$list@KV?$allocator@K@std@@@std@@QAEXABK@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::push_back
_TEXT	ENDS
PUBLIC	??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ	; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	6a 04		 push	 4
  00026	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002b	33 c9		 xor	 ecx, ecx
  0002d	83 c4 04	 add	 esp, 4
  00030	3b c1		 cmp	 eax, ecx
  00032	74 04		 je	 SHORT $LN13@vector@5
  00034	89 30		 mov	 DWORD PTR [eax], esi
  00036	eb 02		 jmp	 SHORT $LN14@vector@5
$LN13@vector@5:
  00038	33 c0		 xor	 eax, eax
$LN14@vector@5:
  0003a	89 06		 mov	 DWORD PTR [esi], eax

; 471  : 		_Buy(0);

  0003c	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0003f	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00042	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 472  : 		}

  00045	8b c6		 mov	 eax, esi
  00047	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
PUBLIC	??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__unwindtable$??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	55		 push	 ebp
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 14	 mov	 DWORD PTR _this$[esp+36], esi
  0002b	6a 04		 push	 4
  0002d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00032	33 c9		 xor	 ecx, ecx
  00034	83 c4 04	 add	 esp, 4
  00037	3b c1		 cmp	 eax, ecx
  00039	74 04		 je	 SHORT $LN19@vector@6
  0003b	89 30		 mov	 DWORD PTR [eax], esi
  0003d	eb 02		 jmp	 SHORT $LN20@vector@6
$LN19@vector@6:
  0003f	33 c0		 xor	 eax, eax
$LN20@vector@6:
  00041	89 06		 mov	 DWORD PTR [esi], eax

; 501  : 		if (_Buy(_Right.size()))

  00043	8b 5c 24 28	 mov	 ebx, DWORD PTR __Right$[esp+32]
  00047	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  0004a	2b 7b 0c	 sub	 edi, DWORD PTR [ebx+12]
  0004d	89 4c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ecx
  00051	c1 ff 02	 sar	 edi, 2
  00054	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00057	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0005a	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  0005d	3b f9		 cmp	 edi, ecx
  0005f	74 62		 je	 SHORT $LN5@vector@6
  00061	81 ff ff ff ff
	3f		 cmp	 edi, 1073741823		; 3fffffffH
  00067	76 05		 jbe	 SHORT $LN46@vector@6
  00069	e8 00 00 00 00	 call	 ?_Xlen@?$vector@KV?$allocator@K@std@@@std@@KAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen
$LN46@vector@6:
  0006e	51		 push	 ecx
  0006f	57		 push	 edi
  00070	e8 00 00 00 00	 call	 ??$_Allocate@K@std@@YAPAKIPAK@Z ; std::_Allocate<unsigned long>
  00075	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00078	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0007b	8d 04 b8	 lea	 eax, DWORD PTR [eax+edi*4]
  0007e	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 502  : 			_TRY_BEGIN
; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

  00081	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  00084	83 c4 08	 add	 esp, 8
  00087	39 7b 0c	 cmp	 DWORD PTR [ebx+12], edi
  0008a	76 05		 jbe	 SHORT $LN62@vector@6
  0008c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN62@vector@6:
  00091	8b 6b 0c	 mov	 ebp, DWORD PTR [ebx+12]
  00094	3b 6b 10	 cmp	 ebp, DWORD PTR [ebx+16]
  00097	76 05		 jbe	 SHORT $LN76@vector@6
  00099	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN76@vector@6:
  0009e	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000a1	2b fd		 sub	 edi, ebp
  000a3	c1 ff 02	 sar	 edi, 2
  000a6	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
  000ad	8d 1c 08	 lea	 ebx, DWORD PTR [eax+ecx]
  000b0	85 ff		 test	 edi, edi
  000b2	76 0c		 jbe	 SHORT $LN105@vector@6
  000b4	50		 push	 eax
  000b5	55		 push	 ebp
  000b6	50		 push	 eax
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 _memmove_s
  000bd	83 c4 10	 add	 esp, 16			; 00000010H
$LN105@vector@6:
  000c0	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
$LN5@vector@6:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();
; 506  : 			_RERAISE;
; 507  : 			_CATCH_END
; 508  : 		}

  000c3	8b c6		 mov	 eax, esi
  000c5	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000c9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d0	59		 pop	 ecx
  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	5d		 pop	 ebp
  000d4	5b		 pop	 ebx
  000d5	83 c4 10	 add	 esp, 16			; 00000010H
  000d8	c2 04 00	 ret	 4
$LN111@vector@6:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
PUBLIC	?insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::insert
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 8
$T178477 = -12						; size = 12
$T178476 = -12						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
__Val$ = 20						; size = 4
?insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::insert, COMDAT
; _this$ = ecx

; 664  : 		{	// try to insert node with value _Val using _Where as a hint

  00000	83 ec 14	 sub	 esp, 20			; 00000014H
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 665  : 
; 666  :  #if _HAS_ITERATOR_DEBUGGING
; 667  : 		if (_Where._Mycont != this)
; 668  : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 669  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 670  : 
; 671  : 		const_iterator _Next;
; 672  : 
; 673  : 		if (size() == 0)

  00006	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  0000a	57		 push	 edi
  0000b	75 21		 jne	 SHORT $LN32@insert@3

; 674  : 			return (_Insert(true, _Myhead, _Val));	// insert into empty tree

  0000d	8b 44 24 2c	 mov	 eax, DWORD PTR __Val$[esp+24]
  00011	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00014	8b 7c 24 20	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+24]
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	6a 01		 push	 1
  0001c	57		 push	 edi
  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Insert
  00024	8b c7		 mov	 eax, edi
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 749  : 		}

  00028	83 c4 14	 add	 esp, 20			; 00000014H
  0002b	c2 10 00	 ret	 16			; 00000010H
$LN32@insert@3:

; 675  : 		else if (this->_Multi)
; 676  : 			{	// insert even if duplicate
; 677  : 			if (_Where == begin())
; 678  : 				{	// insert at beginning if before first element
; 679  : 				if (!_DEBUG_LT_PRED(this->comp,
; 680  : 					_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 681  : 					return (_Insert(true, _Where._Mynode(), _Val));
; 682  : 				}
; 683  : 			else if (_Where == end())
; 684  : 				{	// insert at end if after last element
; 685  : 				if (!_DEBUG_LT_PRED(this->comp,
; 686  : 					this->_Kfn(_Val), _Key(_Rmost())))
; 687  : 					return (_Insert(false, _Rmost(), _Val));
; 688  : 				}
; 689  : 			else if (!_DEBUG_LT_PRED(this->comp,
; 690  : 				_Key(_Where._Mynode()), this->_Kfn(_Val))
; 691  : 				&& !_DEBUG_LT_PRED(this->comp,
; 692  : 					this->_Kfn(_Val), _Key((--(_Next = _Where))._Mynode())))
; 693  : 				{	// insert before _Where
; 694  : 				if (_Isnil(_Right(_Next._Mynode())))
; 695  : 					return (_Insert(false, _Next._Mynode(), _Val));
; 696  : 				else
; 697  : 					return (_Insert(true, _Where._Mynode(), _Val));
; 698  : 				}
; 699  : 			else if (!_DEBUG_LT_PRED(this->comp,
; 700  : 				this->_Kfn(_Val), _Key(_Where._Mynode()))
; 701  : 				&& (++(_Next = _Where) == end()
; 702  : 					|| !_DEBUG_LT_PRED(this->comp,
; 703  : 						_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 704  : 				{	// insert after _Where
; 705  : 				if (_Isnil(_Right(_Where._Mynode())))
; 706  : 					return (_Insert(false, _Where._Mynode(), _Val));
; 707  : 				else
; 708  : 					return (_Insert(true, _Next._Mynode(), _Val));
; 709  : 				}
; 710  : 			}
; 711  : 		else
; 712  : 			{	// insert only if unique
; 713  : 			if (_Where == begin())

  0002e	8b 4c 24 24	 mov	 ecx, DWORD PTR __Where$[esp+24]
  00032	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00035	8b 3a		 mov	 edi, DWORD PTR [edx]
  00037	8b 06		 mov	 eax, DWORD PTR [esi]
  00039	85 c9		 test	 ecx, ecx
  0003b	74 04		 je	 SHORT $LN233@insert@3
  0003d	3b c8		 cmp	 ecx, eax
  0003f	74 09		 je	 SHORT $LN234@insert@3
$LN233@insert@3:
  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00046	8b 4c 24 24	 mov	 ecx, DWORD PTR __Where$[esp+24]
$LN234@insert@3:
  0004a	8b 44 24 28	 mov	 eax, DWORD PTR __Where$[esp+28]
  0004e	3b c7		 cmp	 eax, edi
  00050	75 29		 jne	 SHORT $LN14@insert@3

; 714  : 				{	// insert at beginning if before first element
; 715  : 				if (_DEBUG_LT_PRED(this->comp,

  00052	8b 7c 24 2c	 mov	 edi, DWORD PTR __Val$[esp+24]
  00056	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00058	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  0005b	0f 83 48 01 00
	00		 jae	 $LN1@insert@3

; 716  : 					this->_Kfn(_Val), _Key(_Where._Mynode())))
; 717  : 					return (_Insert(true, _Where._Mynode(), _Val));

  00061	57		 push	 edi
  00062	8b 7c 24 24	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+28]
  00066	50		 push	 eax
  00067	6a 01		 push	 1
  00069	57		 push	 edi
  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Insert
  00071	8b c7		 mov	 eax, edi
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi

; 749  : 		}

  00075	83 c4 14	 add	 esp, 20			; 00000014H
  00078	c2 10 00	 ret	 16			; 00000010H
$LN14@insert@3:

; 718  : 				}
; 719  : 			else if (_Where == end())

  0007b	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0007e	8b 16		 mov	 edx, DWORD PTR [esi]
  00080	85 c9		 test	 ecx, ecx
  00082	74 04		 je	 SHORT $LN270@insert@3
  00084	3b ca		 cmp	 ecx, edx
  00086	74 0d		 je	 SHORT $LN271@insert@3
$LN270@insert@3:
  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0008d	8b 44 24 28	 mov	 eax, DWORD PTR __Where$[esp+28]
  00091	8b 4c 24 24	 mov	 ecx, DWORD PTR __Where$[esp+24]
$LN271@insert@3:
  00095	3b c7		 cmp	 eax, edi

; 720  : 				{	// insert at end if after last element
; 721  : 				if (_DEBUG_LT_PRED(this->comp,

  00097	8b 7c 24 2c	 mov	 edi, DWORD PTR __Val$[esp+24]
  0009b	75 2b		 jne	 SHORT $LN11@insert@3
  0009d	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  000a0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000a3	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000a6	3b 0f		 cmp	 ecx, DWORD PTR [edi]
  000a8	0f 83 fb 00 00
	00		 jae	 $LN1@insert@3

; 722  : 					_Key(_Rmost()), this->_Kfn(_Val)))
; 723  : 					return (_Insert(false, _Rmost(), _Val));

  000ae	57		 push	 edi
  000af	8b 7c 24 24	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+28]
  000b3	50		 push	 eax
  000b4	6a 00		 push	 0
  000b6	57		 push	 edi
  000b7	8b ce		 mov	 ecx, esi
  000b9	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Insert
  000be	8b c7		 mov	 eax, edi
  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi

; 749  : 		}

  000c2	83 c4 14	 add	 esp, 20			; 00000014H
  000c5	c2 10 00	 ret	 16			; 00000010H
$LN11@insert@3:

; 724  : 				}
; 725  : 			else if (_DEBUG_LT_PRED(this->comp,
; 726  : 				this->_Kfn(_Val), _Key(_Where._Mynode()))
; 727  : 				&& _DEBUG_LT_PRED(this->comp,

  000c8	8b 17		 mov	 edx, DWORD PTR [edi]
  000ca	39 50 0c	 cmp	 DWORD PTR [eax+12], edx
  000cd	76 61		 jbe	 SHORT $LN384@insert@3
  000cf	89 4c 24 08	 mov	 DWORD PTR __Next$[esp+28], ecx
  000d3	8d 4c 24 08	 lea	 ecx, DWORD PTR __Next$[esp+28]
  000d7	89 44 24 0c	 mov	 DWORD PTR __Next$[esp+32], eax
  000db	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Dec
  000e0	8b 17		 mov	 edx, DWORD PTR [edi]
  000e2	8b 44 24 0c	 mov	 eax, DWORD PTR __Next$[esp+32]
  000e6	39 50 0c	 cmp	 DWORD PTR [eax+12], edx
  000e9	73 3a		 jae	 SHORT $LN383@insert@3

; 728  : 					_Key((--(_Next = _Where))._Mynode()), this->_Kfn(_Val)))
; 729  : 				{	// insert before _Where
; 730  : 				if (_Isnil(_Right(_Next._Mynode())))

  000eb	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000ee	80 7a 19 00	 cmp	 BYTE PTR [edx+25], 0

; 731  : 					return (_Insert(false, _Next._Mynode(), _Val));

  000f2	57		 push	 edi
  000f3	8b 7c 24 24	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+28]
  000f7	8b ce		 mov	 ecx, esi
  000f9	74 13		 je	 SHORT $LN7@insert@3
  000fb	50		 push	 eax
  000fc	6a 00		 push	 0
  000fe	57		 push	 edi
  000ff	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Insert
  00104	8b c7		 mov	 eax, edi
  00106	5f		 pop	 edi
  00107	5e		 pop	 esi

; 749  : 		}

  00108	83 c4 14	 add	 esp, 20			; 00000014H
  0010b	c2 10 00	 ret	 16			; 00000010H
$LN7@insert@3:

; 732  : 				else
; 733  : 					return (_Insert(true, _Where._Mynode(), _Val));

  0010e	8b 44 24 2c	 mov	 eax, DWORD PTR __Where$[esp+32]
  00112	50		 push	 eax
  00113	6a 01		 push	 1
  00115	57		 push	 edi
  00116	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Insert
  0011b	8b c7		 mov	 eax, edi
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi

; 749  : 		}

  0011f	83 c4 14	 add	 esp, 20			; 00000014H
  00122	c2 10 00	 ret	 16			; 00000010H
$LN383@insert@3:

; 732  : 				else
; 733  : 					return (_Insert(true, _Where._Mynode(), _Val));

  00125	8b 44 24 28	 mov	 eax, DWORD PTR __Where$[esp+28]
  00129	8b 4c 24 24	 mov	 ecx, DWORD PTR __Where$[esp+24]

; 734  : 				}
; 735  : 			else if (_DEBUG_LT_PRED(this->comp,
; 736  : 				_Key(_Where._Mynode()), this->_Kfn(_Val))
; 737  : 				&& (++(_Next = _Where) == end()
; 738  : 					|| _DEBUG_LT_PRED(this->comp,

  0012d	39 50 0c	 cmp	 DWORD PTR [eax+12], edx
$LN384@insert@3:
  00130	73 77		 jae	 SHORT $LN1@insert@3
  00132	8b 16		 mov	 edx, DWORD PTR [esi]
  00134	89 4c 24 08	 mov	 DWORD PTR __Next$[esp+28], ecx
  00138	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0013b	89 4c 24 14	 mov	 DWORD PTR $T178476[esp+32], ecx
  0013f	8d 4c 24 08	 lea	 ecx, DWORD PTR __Next$[esp+28]
  00143	89 44 24 0c	 mov	 DWORD PTR __Next$[esp+32], eax
  00147	89 54 24 10	 mov	 DWORD PTR $T178476[esp+28], edx
  0014b	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Inc
  00150	8d 44 24 10	 lea	 eax, DWORD PTR $T178476[esp+28]
  00154	50		 push	 eax
  00155	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Next$[esp+32]
  00159	e8 00 00 00 00	 call	 ??8const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::operator==
  0015e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Next$[esp+32]
  00162	84 c0		 test	 al, al
  00164	75 07		 jne	 SHORT $LN3@insert@3
  00166	8b 17		 mov	 edx, DWORD PTR [edi]
  00168	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  0016b	73 3c		 jae	 SHORT $LN1@insert@3
$LN3@insert@3:

; 739  : 						this->_Kfn(_Val), _Key(_Next._Mynode()))))
; 740  : 				{	// insert after _Where
; 741  : 				if (_Isnil(_Right(_Where._Mynode())))

  0016d	8b 44 24 28	 mov	 eax, DWORD PTR __Where$[esp+28]
  00171	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00174	80 7a 19 00	 cmp	 BYTE PTR [edx+25], 0

; 742  : 					return (_Insert(false, _Where._Mynode(), _Val));

  00178	57		 push	 edi
  00179	8b 7c 24 24	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+28]
  0017d	74 15		 je	 SHORT $LN2@insert@3
  0017f	50		 push	 eax
  00180	6a 00		 push	 0
  00182	57		 push	 edi
  00183	8b ce		 mov	 ecx, esi
  00185	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Insert
  0018a	8b c7		 mov	 eax, edi
  0018c	5f		 pop	 edi
  0018d	5e		 pop	 esi

; 749  : 		}

  0018e	83 c4 14	 add	 esp, 20			; 00000014H
  00191	c2 10 00	 ret	 16			; 00000010H
$LN2@insert@3:

; 743  : 				else
; 744  : 					return (_Insert(true, _Next._Mynode(), _Val));

  00194	51		 push	 ecx
  00195	6a 01		 push	 1
  00197	57		 push	 edi
  00198	8b ce		 mov	 ecx, esi
  0019a	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Insert
  0019f	8b c7		 mov	 eax, edi
  001a1	5f		 pop	 edi
  001a2	5e		 pop	 esi

; 749  : 		}

  001a3	83 c4 14	 add	 esp, 20			; 00000014H
  001a6	c2 10 00	 ret	 16			; 00000010H
$LN1@insert@3:

; 745  : 				}
; 746  : 			}
; 747  : 
; 748  : 		return (insert(_Val).first);	// try usual insert if all else fails

  001a9	57		 push	 edi
  001aa	8d 44 24 14	 lea	 eax, DWORD PTR $T178477[esp+32]
  001ae	50		 push	 eax
  001af	8b ce		 mov	 ecx, esi
  001b1	e8 00 00 00 00	 call	 ?insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::insert
  001b6	8b 10		 mov	 edx, DWORD PTR [eax]
  001b8	8b 4c 24 20	 mov	 ecx, DWORD PTR ___$ReturnUdt$[esp+24]
  001bc	89 11		 mov	 DWORD PTR [ecx], edx
  001be	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001c1	5f		 pop	 edi
  001c2	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  001c5	8b c1		 mov	 eax, ecx
  001c7	5e		 pop	 esi

; 749  : 		}

  001c8	83 c4 14	 add	 esp, 20			; 00000014H
  001cb	c2 10 00	 ret	 16			; 00000010H
?insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::insert
_TEXT	ENDS
PUBLIC	?_Construct_n@?$vector@EV?$allocator@E@std@@@std@@QAEXIABE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Construct_n@?$vector@EV?$allocator@E@std@@@std@@QAEXIABE@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Val$ = 12						; size = 4
?_Construct_n@?$vector@EV?$allocator@E@std@@@std@@QAEXIABE@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n, COMDAT
; _this$ = ecx

; 545  : 		{	// construct from _Count * _Val

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 546  : 		if (_Buy(_Count))

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Count$[esp+4]
  00006	33 db		 xor	 ebx, ebx
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  0000e	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00011	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00014	3b eb		 cmp	 ebp, ebx
  00016	74 3d		 je	 SHORT $LN5@Construct_
  00018	83 fd ff	 cmp	 ebp, -1
  0001b	76 05		 jbe	 SHORT $LN10@Construct_
  0001d	e8 00 00 00 00	 call	 ?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen
$LN10@Construct_:
  00022	57		 push	 edi
  00023	53		 push	 ebx
  00024	55		 push	 ebp
  00025	e8 00 00 00 00	 call	 ??$_Allocate@E@std@@YAPAEIPAE@Z ; std::_Allocate<unsigned char>
  0002a	8d 0c 28	 lea	 ecx, DWORD PTR [eax+ebp]
  0002d	83 c4 08	 add	 esp, 8
  00030	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  00033	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00036	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 547  : 			{	// nonzero, fill it
; 548  : 			_TRY_BEGIN
; 549  : 			_Mylast = _Ufill(_Myfirst, _Count, _Val);

  00039	8b cd		 mov	 ecx, ebp
  0003b	8b f8		 mov	 edi, eax
  0003d	3b eb		 cmp	 ebp, ebx
  0003f	76 0e		 jbe	 SHORT $LN42@Construct_
  00041	8b 54 24 18	 mov	 edx, DWORD PTR __Val$[esp+12]
$LL44@Construct_:
  00045	8a 1a		 mov	 bl, BYTE PTR [edx]
  00047	88 1f		 mov	 BYTE PTR [edi], bl
  00049	49		 dec	 ecx
  0004a	47		 inc	 edi
  0004b	85 c9		 test	 ecx, ecx
  0004d	77 f6		 ja	 SHORT $LL44@Construct_
$LN42@Construct_:
  0004f	03 c5		 add	 eax, ebp
  00051	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00054	5f		 pop	 edi
$LN5@Construct_:
  00055	5e		 pop	 esi
  00056	5d		 pop	 ebp
  00057	5b		 pop	 ebx

; 550  : 			_CATCH_ALL
; 551  : 			_Tidy();
; 552  : 			_RERAISE;
; 553  : 			_CATCH_END
; 554  : 			}
; 555  : 		}

  00058	c2 08 00	 ret	 8
$LN51@Construct_:
?_Construct_n@?$vector@EV?$allocator@E@std@@@std@@QAEXIABE@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n
_TEXT	ENDS
PUBLIC	?insert@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@V?$_Vector_const_iterator@EV?$allocator@E@std@@@2@ABE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@V?$_Vector_const_iterator@EV?$allocator@E@std@@@2@ABE@Z
_TEXT	SEGMENT
__Tmp$179791 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
__Val$ = 20						; size = 4
?insert@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@V?$_Vector_const_iterator@EV?$allocator@E@std@@@2@ABE@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

  00008	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000b	57		 push	 edi
  0000c	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  0000f	8b c8		 mov	 ecx, eax
  00011	2b cf		 sub	 ecx, edi
  00013	75 04		 jne	 SHORT $LN3@insert@4
  00015	33 db		 xor	 ebx, ebx
  00017	eb 22		 jmp	 SHORT $LN4@insert@4
$LN3@insert@4:
  00019	3b f8		 cmp	 edi, eax
  0001b	76 05		 jbe	 SHORT $LN12@insert@4
  0001d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN12@insert@4:
  00022	8b 4c 24 20	 mov	 ecx, DWORD PTR __Where$[esp+20]
  00026	8b 06		 mov	 eax, DWORD PTR [esi]
  00028	85 c9		 test	 ecx, ecx
  0002a	74 04		 je	 SHORT $LN23@insert@4
  0002c	3b c8		 cmp	 ecx, eax
  0002e	74 05		 je	 SHORT $LN24@insert@4
$LN23@insert@4:
  00030	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN24@insert@4:
  00035	8b 5c 24 24	 mov	 ebx, DWORD PTR __Where$[esp+24]
  00039	2b df		 sub	 ebx, edi
$LN4@insert@4:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

  0003b	8b 54 24 28	 mov	 edx, DWORD PTR __Val$[esp+20]
  0003f	8b 44 24 24	 mov	 eax, DWORD PTR __Where$[esp+24]
  00043	8b 4c 24 20	 mov	 ecx, DWORD PTR __Where$[esp+20]
  00047	52		 push	 edx
  00048	6a 01		 push	 1
  0004a	50		 push	 eax
  0004b	51		 push	 ecx
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@EV?$allocator@E@std@@@std@@IAEXV?$_Vector_const_iterator@EV?$allocator@E@std@@@2@IABE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Insert_n

; 878  : 		return (begin() + _Off);

  00053	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00056	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  00059	76 05		 jbe	 SHORT $LN36@insert@4
  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN36@insert@4:
  00060	8b 36		 mov	 esi, DWORD PTR [esi]
  00062	8b ee		 mov	 ebp, esi
  00064	89 7c 24 14	 mov	 DWORD PTR __Tmp$179791[esp+28], edi
  00068	85 f6		 test	 esi, esi
  0006a	75 16		 jne	 SHORT $LN70@insert@4
  0006c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00071	33 c0		 xor	 eax, eax
$LN61@insert@4:
  00073	03 fb		 add	 edi, ebx
  00075	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
  00078	77 13		 ja	 SHORT $LN51@insert@4
  0007a	85 f6		 test	 esi, esi
  0007c	74 08		 je	 SHORT $LN66@insert@4
  0007e	8b 36		 mov	 esi, DWORD PTR [esi]
  00080	eb 06		 jmp	 SHORT $LN67@insert@4
$LN70@insert@4:
  00082	8b 06		 mov	 eax, DWORD PTR [esi]
  00084	eb ed		 jmp	 SHORT $LN61@insert@4
$LN66@insert@4:
  00086	33 f6		 xor	 esi, esi
$LN67@insert@4:
  00088	3b 7e 0c	 cmp	 edi, DWORD PTR [esi+12]
  0008b	73 05		 jae	 SHORT $LN52@insert@4
$LN51@insert@4:
  0008d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN52@insert@4:
  00092	8b 44 24 1c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+20]
  00096	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	89 28		 mov	 DWORD PTR [eax], ebp
  0009d	5d		 pop	 ebp
  0009e	5b		 pop	 ebx

; 879  : 		}

  0009f	83 c4 08	 add	 esp, 8
  000a2	c2 10 00	 ret	 16			; 00000010H
?insert@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@V?$_Vector_const_iterator@EV?$allocator@E@std@@@2@ABE@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::insert
_TEXT	ENDS
PUBLIC	?_Construct_n@?$vector@KV?$allocator@K@std@@@std@@QAEXIABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Construct_n
; Function compile flags: /Ogtpy
;	COMDAT ?_Construct_n@?$vector@KV?$allocator@K@std@@@std@@QAEXIABK@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Val$ = 12						; size = 4
?_Construct_n@?$vector@KV?$allocator@K@std@@@std@@QAEXIABK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Construct_n, COMDAT
; _this$ = ecx

; 545  : 		{	// construct from _Count * _Val

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 546  : 		if (_Buy(_Count))

  00002	33 db		 xor	 ebx, ebx
  00004	57		 push	 edi
  00005	8b 7c 24 10	 mov	 edi, DWORD PTR __Count$[esp+8]
  00009	8b f1		 mov	 esi, ecx
  0000b	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  0000e	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00011	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00014	3b fb		 cmp	 edi, ebx
  00016	74 43		 je	 SHORT $LN5@Construct_@2
  00018	81 ff ff ff ff
	3f		 cmp	 edi, 1073741823		; 3fffffffH
  0001e	76 05		 jbe	 SHORT $LN10@Construct_@2
  00020	e8 00 00 00 00	 call	 ?_Xlen@?$vector@KV?$allocator@K@std@@@std@@KAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen
$LN10@Construct_@2:
  00025	53		 push	 ebx
  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 ??$_Allocate@K@std@@YAPAKIPAK@Z ; std::_Allocate<unsigned long>
  0002c	8d 0c b8	 lea	 ecx, DWORD PTR [eax+edi*4]
  0002f	83 c4 08	 add	 esp, 8
  00032	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  00035	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00038	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 547  : 			{	// nonzero, fill it
; 548  : 			_TRY_BEGIN
; 549  : 			_Mylast = _Ufill(_Myfirst, _Count, _Val);

  0003b	8b cf		 mov	 ecx, edi
  0003d	8b d0		 mov	 edx, eax
  0003f	3b fb		 cmp	 edi, ebx
  00041	76 12		 jbe	 SHORT $LN42@Construct_@2
  00043	8b 5c 24 14	 mov	 ebx, DWORD PTR __Val$[esp+8]
  00047	55		 push	 ebp
$LL44@Construct_@2:
  00048	8b 2b		 mov	 ebp, DWORD PTR [ebx]
  0004a	89 2a		 mov	 DWORD PTR [edx], ebp
  0004c	49		 dec	 ecx
  0004d	83 c2 04	 add	 edx, 4
  00050	85 c9		 test	 ecx, ecx
  00052	77 f4		 ja	 SHORT $LL44@Construct_@2
  00054	5d		 pop	 ebp
$LN42@Construct_@2:
  00055	8d 14 b8	 lea	 edx, DWORD PTR [eax+edi*4]
  00058	89 56 10	 mov	 DWORD PTR [esi+16], edx
$LN5@Construct_@2:
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx

; 550  : 			_CATCH_ALL
; 551  : 			_Tidy();
; 552  : 			_RERAISE;
; 553  : 			_CATCH_END
; 554  : 			}
; 555  : 		}

  0005e	c2 08 00	 ret	 8
$LN51@Construct_@2:
?_Construct_n@?$vector@KV?$allocator@K@std@@@std@@QAEXIABK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Construct_n
_TEXT	ENDS
PUBLIC	?insert@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@KV?$allocator@K@std@@@2@V?$_Vector_const_iterator@KV?$allocator@K@std@@@2@ABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@KV?$allocator@K@std@@@2@V?$_Vector_const_iterator@KV?$allocator@K@std@@@2@ABK@Z
_TEXT	SEGMENT
__Tmp$180275 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
__Val$ = 20						; size = 4
?insert@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@KV?$allocator@K@std@@@2@V?$_Vector_const_iterator@KV?$allocator@K@std@@@2@ABK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

  00008	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000b	57		 push	 edi
  0000c	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  0000f	8b c8		 mov	 ecx, eax
  00011	2b cf		 sub	 ecx, edi
  00013	f7 c1 fc ff ff
	ff		 test	 ecx, -4			; fffffffcH
  00019	75 04		 jne	 SHORT $LN3@insert@5
  0001b	33 db		 xor	 ebx, ebx
  0001d	eb 25		 jmp	 SHORT $LN4@insert@5
$LN3@insert@5:
  0001f	3b f8		 cmp	 edi, eax
  00021	76 05		 jbe	 SHORT $LN12@insert@5
  00023	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN12@insert@5:
  00028	8b 4c 24 20	 mov	 ecx, DWORD PTR __Where$[esp+20]
  0002c	8b 06		 mov	 eax, DWORD PTR [esi]
  0002e	85 c9		 test	 ecx, ecx
  00030	74 04		 je	 SHORT $LN23@insert@5
  00032	3b c8		 cmp	 ecx, eax
  00034	74 05		 je	 SHORT $LN24@insert@5
$LN23@insert@5:
  00036	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN24@insert@5:
  0003b	8b 5c 24 24	 mov	 ebx, DWORD PTR __Where$[esp+24]
  0003f	2b df		 sub	 ebx, edi
  00041	c1 fb 02	 sar	 ebx, 2
$LN4@insert@5:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

  00044	8b 54 24 28	 mov	 edx, DWORD PTR __Val$[esp+20]
  00048	8b 44 24 24	 mov	 eax, DWORD PTR __Where$[esp+24]
  0004c	8b 4c 24 20	 mov	 ecx, DWORD PTR __Where$[esp+20]
  00050	52		 push	 edx
  00051	6a 01		 push	 1
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	8b ce		 mov	 ecx, esi
  00057	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@KV?$allocator@K@std@@@std@@IAEXV?$_Vector_const_iterator@KV?$allocator@K@std@@@2@IABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Insert_n

; 878  : 		return (begin() + _Off);

  0005c	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  0005f	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  00062	76 05		 jbe	 SHORT $LN36@insert@5
  00064	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN36@insert@5:
  00069	8b 36		 mov	 esi, DWORD PTR [esi]
  0006b	8b ee		 mov	 ebp, esi
  0006d	89 7c 24 14	 mov	 DWORD PTR __Tmp$180275[esp+28], edi
  00071	85 f6		 test	 esi, esi
  00073	75 17		 jne	 SHORT $LN70@insert@5
  00075	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0007a	33 c0		 xor	 eax, eax
$LN61@insert@5:
  0007c	8d 3c 9f	 lea	 edi, DWORD PTR [edi+ebx*4]
  0007f	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
  00082	77 13		 ja	 SHORT $LN51@insert@5
  00084	85 f6		 test	 esi, esi
  00086	74 08		 je	 SHORT $LN66@insert@5
  00088	8b 36		 mov	 esi, DWORD PTR [esi]
  0008a	eb 06		 jmp	 SHORT $LN67@insert@5
$LN70@insert@5:
  0008c	8b 06		 mov	 eax, DWORD PTR [esi]
  0008e	eb ec		 jmp	 SHORT $LN61@insert@5
$LN66@insert@5:
  00090	33 f6		 xor	 esi, esi
$LN67@insert@5:
  00092	3b 7e 0c	 cmp	 edi, DWORD PTR [esi+12]
  00095	73 05		 jae	 SHORT $LN52@insert@5
$LN51@insert@5:
  00097	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN52@insert@5:
  0009c	8b 44 24 1c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+20]
  000a0	89 78 04	 mov	 DWORD PTR [eax+4], edi
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	89 28		 mov	 DWORD PTR [eax], ebp
  000a7	5d		 pop	 ebp
  000a8	5b		 pop	 ebx

; 879  : 		}

  000a9	83 c4 08	 add	 esp, 8
  000ac	c2 10 00	 ret	 16			; 00000010H
?insert@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@KV?$allocator@K@std@@@2@V?$_Vector_const_iterator@KV?$allocator@K@std@@@2@ABK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::insert
_TEXT	ENDS
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$3
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -92				; size = 4
$T180286 = -88						; size = 8
$T180281 = -88						; size = 4
$T180283 = -80						; size = 28
$T180282 = -80						; size = 28
$T180287 = -52						; size = 8
__Str$129764 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 1
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1123 : 		{	// put formatted bool to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 50	 sub	 esp, 80			; 00000050H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 4c	 mov	 DWORD PTR __$ArrayPad$[esp+92], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 64	 lea	 eax, DWORD PTR __$EHRec$[esp+112]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+108]

; 1124 : 		_DEBUG_POINTER(_Dest);
; 1125 : 		if (!(_Iosbase.flags() & ios_base::boolalpha))

  00039	f7 45 10 00 40
	00 00		 test	 DWORD PTR [ebp+16], 16384 ; 00004000H
  00040	8b 74 24 74	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+108]
  00044	8b f9		 mov	 edi, ecx

; 1144 : 				}
; 1145 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  00046	89 74 24 14	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+112], esi
  0004a	75 31		 jne	 SHORT $LN5@do_put
  0004c	0f b6 8c 24 88
	00 00 00	 movzx	 ecx, BYTE PTR __Val$[esp+108]
  00054	8b 94 24 84 00
	00 00		 mov	 edx, DWORD PTR __Fill$[esp+108]
  0005b	8b 07		 mov	 eax, DWORD PTR [edi]
  0005d	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00060	51		 push	 ecx
  00061	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+116]
  00068	52		 push	 edx
  00069	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+116]
  00070	55		 push	 ebp
  00071	51		 push	 ecx
  00072	52		 push	 edx
  00073	56		 push	 esi
  00074	8b cf		 mov	 ecx, edi
  00076	ff d0		 call	 eax
  00078	e9 75 01 00 00	 jmp	 $LN142@do_put
$LN5@do_put:

; 1126 : 			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
; 1127 : 		else
; 1128 : 			{	// put "false" or "true"
; 1129 : 			const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  0007d	8d 4c 24 18	 lea	 ecx, DWORD PTR $T180281[esp+112]
  00081	51		 push	 ecx
  00082	8b cd		 mov	 ecx, ebp
  00084	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00089	33 db		 xor	 ebx, ebx
  0008b	50		 push	 eax
  0008c	89 5c 24 70	 mov	 DWORD PTR __$EHRec$[esp+124], ebx
  00090	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  00095	83 c4 04	 add	 esp, 4
  00098	8d 4c 24 18	 lea	 ecx, DWORD PTR $T180281[esp+112]
  0009c	8b f0		 mov	 esi, eax
  0009e	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 1130 : 			_Mystr _Str;

  000a3	c7 44 24 5c 0f
	00 00 00	 mov	 DWORD PTR __Str$129764[esp+136], 15 ; 0000000fH
  000ab	89 5c 24 58	 mov	 DWORD PTR __Str$129764[esp+132], ebx
  000af	88 5c 24 48	 mov	 BYTE PTR __Str$129764[esp+116], bl

; 1131 : 			if (_Val)

  000b3	80 bc 24 88 00
	00 00 00	 cmp	 BYTE PTR __Val$[esp+108], 0
  000bb	bb 01 00 00 00	 mov	 ebx, 1
  000c0	89 5c 24 6c	 mov	 DWORD PTR __$EHRec$[esp+120], ebx
  000c4	74 31		 je	 SHORT $LN3@do_put

; 1132 : 				_Str.assign(_Punct_fac.truename());

  000c6	8d 54 24 20	 lea	 edx, DWORD PTR $T180282[esp+112]
  000ca	52		 push	 edx
  000cb	8b ce		 mov	 ecx, esi
  000cd	e8 00 00 00 00	 call	 ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
  000d2	6a ff		 push	 -1
  000d4	6a 00		 push	 0
  000d6	50		 push	 eax
  000d7	8d 4c 24 50	 lea	 ecx, DWORD PTR __Str$129764[esp+124]
  000db	c6 44 24 78 02	 mov	 BYTE PTR __$EHRec$[esp+132], 2
  000e0	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000e5	83 7c 24 38 10	 cmp	 DWORD PTR $T180282[esp+136], 16 ; 00000010H
  000ea	88 5c 24 6c	 mov	 BYTE PTR __$EHRec$[esp+120], bl
  000ee	72 3e		 jb	 SHORT $LN94@do_put
  000f0	8b 44 24 24	 mov	 eax, DWORD PTR $T180282[esp+116]
  000f4	50		 push	 eax

; 1133 : 			else

  000f5	eb 2f		 jmp	 SHORT $LN155@do_put
$LN3@do_put:

; 1134 : 				_Str.assign(_Punct_fac.falsename());

  000f7	8d 4c 24 20	 lea	 ecx, DWORD PTR $T180283[esp+112]
  000fb	51		 push	 ecx
  000fc	8b ce		 mov	 ecx, esi
  000fe	e8 00 00 00 00	 call	 ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
  00103	6a ff		 push	 -1
  00105	6a 00		 push	 0
  00107	50		 push	 eax
  00108	8d 4c 24 50	 lea	 ecx, DWORD PTR __Str$129764[esp+124]
  0010c	c6 44 24 78 03	 mov	 BYTE PTR __$EHRec$[esp+132], 3
  00111	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00116	83 7c 24 38 10	 cmp	 DWORD PTR $T180283[esp+136], 16 ; 00000010H
  0011b	88 5c 24 6c	 mov	 BYTE PTR __$EHRec$[esp+120], bl
  0011f	72 0d		 jb	 SHORT $LN94@do_put
  00121	8b 54 24 24	 mov	 edx, DWORD PTR $T180283[esp+116]
  00125	52		 push	 edx
$LN155@do_put:
  00126	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012b	83 c4 04	 add	 esp, 4
$LN94@do_put:

; 1135 : 
; 1136 : 			size_t _Fillcount = _Iosbase.width() <= 0
; 1137 : 				|| (size_t)_Iosbase.width() <= _Str.size()
; 1138 : 					? 0 : (size_t)_Iosbase.width() - _Str.size();

  0012e	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00131	8b 4c 24 58	 mov	 ecx, DWORD PTR __Str$129764[esp+132]
  00135	85 c0		 test	 eax, eax
  00137	7e 0a		 jle	 SHORT $LN8@do_put
  00139	3b c1		 cmp	 eax, ecx
  0013b	76 06		 jbe	 SHORT $LN8@do_put
  0013d	2b c1		 sub	 eax, ecx
  0013f	8b f0		 mov	 esi, eax
  00141	eb 02		 jmp	 SHORT $LN9@do_put
$LN8@do_put:
  00143	33 f6		 xor	 esi, esi
$LN9@do_put:

; 1139 : 
; 1140 : 			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)

  00145	8b 45 10	 mov	 eax, DWORD PTR [ebp+16]
  00148	8b 9c 24 84 00
	00 00		 mov	 ebx, DWORD PTR __Fill$[esp+108]
  0014f	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00154	83 f8 40	 cmp	 eax, 64			; 00000040H
  00157	74 30		 je	 SHORT $LN1@do_put

; 1141 : 				{	// put leading fill
; 1142 : 				_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00159	8b 4c 24 7c	 mov	 ecx, DWORD PTR __Dest$[esp+112]
  0015d	8b 54 24 78	 mov	 edx, DWORD PTR __Dest$[esp+108]
  00161	56		 push	 esi
  00162	53		 push	 ebx
  00163	51		 push	 ecx
  00164	52		 push	 edx
  00165	8d 44 24 28	 lea	 eax, DWORD PTR $T180286[esp+128]
  00169	50		 push	 eax
  0016a	57		 push	 edi
  0016b	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00170	8b 08		 mov	 ecx, DWORD PTR [eax]
  00172	89 8c 24 90 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], ecx
  00179	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1143 : 				_Fillcount = 0;

  0017c	8b 4c 24 70	 mov	 ecx, DWORD PTR __Str$129764[esp+156]
  00180	83 c4 18	 add	 esp, 24			; 00000018H
  00183	89 54 24 7c	 mov	 DWORD PTR __Dest$[esp+112], edx
  00187	33 f6		 xor	 esi, esi
$LN1@do_put:

; 1144 : 				}
; 1145 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  00189	83 7c 24 5c 10	 cmp	 DWORD PTR __Str$129764[esp+136], 16 ; 00000010H
  0018e	8b 44 24 48	 mov	 eax, DWORD PTR __Str$129764[esp+116]
  00192	73 04		 jae	 SHORT $LN123@do_put
  00194	8d 44 24 48	 lea	 eax, DWORD PTR __Str$129764[esp+116]
$LN123@do_put:
  00198	51		 push	 ecx
  00199	8b 4c 24 7c	 mov	 ecx, DWORD PTR __Dest$[esp+112]
  0019d	50		 push	 eax
  0019e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+120]
  001a5	50		 push	 eax
  001a6	51		 push	 ecx
  001a7	8d 54 24 4c	 lea	 edx, DWORD PTR $T180287[esp+128]
  001ab	52		 push	 edx
  001ac	57		 push	 edi
  001ad	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  001b2	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1146 : 			_Iosbase.width(0);
; 1147 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  001b4	56		 push	 esi
  001b5	8b 74 24 30	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+140]
  001b9	53		 push	 ebx
  001ba	89 8c 24 98 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], ecx
  001c1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001c4	50		 push	 eax
  001c5	51		 push	 ecx
  001c6	56		 push	 esi
  001c7	57		 push	 edi
  001c8	89 84 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], eax
  001cf	c7 45 18 00 00
	00 00		 mov	 DWORD PTR [ebp+24], 0
  001d6	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  001db	83 c4 30	 add	 esp, 48			; 00000030H
  001de	83 7c 24 5c 10	 cmp	 DWORD PTR __Str$129764[esp+136], 16 ; 00000010H
  001e3	72 0d		 jb	 SHORT $LN142@do_put
  001e5	8b 44 24 48	 mov	 eax, DWORD PTR __Str$129764[esp+116]
  001e9	50		 push	 eax
  001ea	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001ef	83 c4 04	 add	 esp, 4
$LN142@do_put:
  001f2	8b c6		 mov	 eax, esi

; 1148 : 			}
; 1149 : 		}

  001f4	8b 4c 24 64	 mov	 ecx, DWORD PTR __$EHRec$[esp+112]
  001f8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ff	59		 pop	 ecx
  00200	5f		 pop	 edi
  00201	5e		 pop	 esi
  00202	5d		 pop	 ebp
  00203	5b		 pop	 ebx
  00204	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+92]
  00208	33 cc		 xor	 ecx, esp
  0020a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020f	83 c4 5c	 add	 esp, 92			; 0000005cH
  00212	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR $T180281[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Str$129764[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$2:
  00010	8d 4d b0	 lea	 ecx, DWORD PTR $T180282[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$3:
  00018	8d 4d b0	 lea	 ecx, DWORD PTR $T180283[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  00027	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	83 c0 10	 add	 eax, 16			; 00000010H
  00034	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00037	33 c8		 xor	 ecx, eax
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  00043	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$3
__ehfuncinfo$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -92				; size = 4
$T180831 = -88						; size = 8
$T180826 = -88						; size = 4
$T180828 = -80						; size = 28
$T180827 = -80						; size = 28
$T180832 = -52						; size = 8
__Str$129962 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 1
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1123 : 		{	// put formatted bool to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 50	 sub	 esp, 80			; 00000050H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 4c	 mov	 DWORD PTR __$ArrayPad$[esp+92], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 64	 lea	 eax, DWORD PTR __$EHRec$[esp+112]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+108]

; 1124 : 		_DEBUG_POINTER(_Dest);
; 1125 : 		if (!(_Iosbase.flags() & ios_base::boolalpha))

  00039	f7 45 10 00 40
	00 00		 test	 DWORD PTR [ebp+16], 16384 ; 00004000H
  00040	8b 74 24 74	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+108]
  00044	8b f9		 mov	 edi, ecx

; 1144 : 				}
; 1145 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  00046	89 74 24 14	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+112], esi
  0004a	75 31		 jne	 SHORT $LN5@do_put@2
  0004c	0f b6 8c 24 88
	00 00 00	 movzx	 ecx, BYTE PTR __Val$[esp+108]
  00054	8b 94 24 84 00
	00 00		 mov	 edx, DWORD PTR __Fill$[esp+108]
  0005b	8b 07		 mov	 eax, DWORD PTR [edi]
  0005d	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00060	51		 push	 ecx
  00061	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+116]
  00068	52		 push	 edx
  00069	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+116]
  00070	55		 push	 ebp
  00071	51		 push	 ecx
  00072	52		 push	 edx
  00073	56		 push	 esi
  00074	8b cf		 mov	 ecx, edi
  00076	ff d0		 call	 eax
  00078	e9 76 01 00 00	 jmp	 $LN150@do_put@2
$LN5@do_put@2:

; 1126 : 			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
; 1127 : 		else
; 1128 : 			{	// put "false" or "true"
; 1129 : 			const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  0007d	8d 4c 24 18	 lea	 ecx, DWORD PTR $T180826[esp+112]
  00081	51		 push	 ecx
  00082	8b cd		 mov	 ecx, ebp
  00084	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00089	33 db		 xor	 ebx, ebx
  0008b	50		 push	 eax
  0008c	89 5c 24 70	 mov	 DWORD PTR __$EHRec$[esp+124], ebx
  00090	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<wchar_t> >
  00095	83 c4 04	 add	 esp, 4
  00098	8d 4c 24 18	 lea	 ecx, DWORD PTR $T180826[esp+112]
  0009c	8b f0		 mov	 esi, eax
  0009e	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 1130 : 			_Mystr _Str;

  000a3	33 d2		 xor	 edx, edx
  000a5	c7 44 24 5c 07
	00 00 00	 mov	 DWORD PTR __Str$129962[esp+136], 7
  000ad	89 5c 24 58	 mov	 DWORD PTR __Str$129962[esp+132], ebx
  000b1	66 89 54 24 48	 mov	 WORD PTR __Str$129962[esp+116], dx
  000b6	bb 01 00 00 00	 mov	 ebx, 1
  000bb	89 5c 24 6c	 mov	 DWORD PTR __$EHRec$[esp+120], ebx

; 1131 : 			if (_Val)
; 1132 : 				_Str.assign(_Punct_fac.truename());

  000bf	8b ce		 mov	 ecx, esi
  000c1	38 94 24 88 00
	00 00		 cmp	 BYTE PTR __Val$[esp+108], dl
  000c8	74 2f		 je	 SHORT $LN3@do_put@2
  000ca	8d 44 24 20	 lea	 eax, DWORD PTR $T180827[esp+112]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ?truename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::truename
  000d4	6a ff		 push	 -1
  000d6	6a 00		 push	 0
  000d8	50		 push	 eax
  000d9	8d 4c 24 50	 lea	 ecx, DWORD PTR __Str$129962[esp+124]
  000dd	c6 44 24 78 02	 mov	 BYTE PTR __$EHRec$[esp+132], 2
  000e2	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  000e7	83 7c 24 38 08	 cmp	 DWORD PTR $T180827[esp+136], 8
  000ec	88 5c 24 6c	 mov	 BYTE PTR __$EHRec$[esp+120], bl
  000f0	72 3c		 jb	 SHORT $LN100@do_put@2
  000f2	8b 4c 24 24	 mov	 ecx, DWORD PTR $T180827[esp+116]
  000f6	51		 push	 ecx

; 1133 : 			else

  000f7	eb 2d		 jmp	 SHORT $LN163@do_put@2
$LN3@do_put@2:

; 1134 : 				_Str.assign(_Punct_fac.falsename());

  000f9	8d 54 24 20	 lea	 edx, DWORD PTR $T180828[esp+112]
  000fd	52		 push	 edx
  000fe	e8 00 00 00 00	 call	 ?falsename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::falsename
  00103	6a ff		 push	 -1
  00105	6a 00		 push	 0
  00107	50		 push	 eax
  00108	8d 4c 24 50	 lea	 ecx, DWORD PTR __Str$129962[esp+124]
  0010c	c6 44 24 78 03	 mov	 BYTE PTR __$EHRec$[esp+132], 3
  00111	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00116	83 7c 24 38 08	 cmp	 DWORD PTR $T180828[esp+136], 8
  0011b	88 5c 24 6c	 mov	 BYTE PTR __$EHRec$[esp+120], bl
  0011f	72 0d		 jb	 SHORT $LN100@do_put@2
  00121	8b 44 24 24	 mov	 eax, DWORD PTR $T180828[esp+116]
  00125	50		 push	 eax
$LN163@do_put@2:
  00126	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012b	83 c4 04	 add	 esp, 4
$LN100@do_put@2:

; 1135 : 
; 1136 : 			size_t _Fillcount = _Iosbase.width() <= 0
; 1137 : 				|| (size_t)_Iosbase.width() <= _Str.size()
; 1138 : 					? 0 : (size_t)_Iosbase.width() - _Str.size();

  0012e	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00131	8b 4c 24 58	 mov	 ecx, DWORD PTR __Str$129962[esp+132]
  00135	85 c0		 test	 eax, eax
  00137	7e 0a		 jle	 SHORT $LN8@do_put@2
  00139	3b c1		 cmp	 eax, ecx
  0013b	76 06		 jbe	 SHORT $LN8@do_put@2
  0013d	2b c1		 sub	 eax, ecx
  0013f	8b f0		 mov	 esi, eax
  00141	eb 02		 jmp	 SHORT $LN9@do_put@2
$LN8@do_put@2:
  00143	33 f6		 xor	 esi, esi
$LN9@do_put@2:

; 1139 : 
; 1140 : 			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)

  00145	8b 55 10	 mov	 edx, DWORD PTR [ebp+16]
  00148	8b 9c 24 84 00
	00 00		 mov	 ebx, DWORD PTR __Fill$[esp+108]
  0014f	81 e2 c0 01 00
	00		 and	 edx, 448		; 000001c0H
  00155	83 fa 40	 cmp	 edx, 64			; 00000040H
  00158	74 30		 je	 SHORT $LN1@do_put@2

; 1141 : 				{	// put leading fill
; 1142 : 				_Dest = _Rep(_Dest, _Fill, _Fillcount);

  0015a	8b 44 24 7c	 mov	 eax, DWORD PTR __Dest$[esp+112]
  0015e	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  00162	56		 push	 esi
  00163	53		 push	 ebx
  00164	50		 push	 eax
  00165	51		 push	 ecx
  00166	8d 54 24 28	 lea	 edx, DWORD PTR $T180831[esp+128]
  0016a	52		 push	 edx
  0016b	57		 push	 edi
  0016c	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00171	8b 08		 mov	 ecx, DWORD PTR [eax]
  00173	89 8c 24 90 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], ecx
  0017a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1143 : 				_Fillcount = 0;

  0017d	8b 4c 24 70	 mov	 ecx, DWORD PTR __Str$129962[esp+156]
  00181	83 c4 18	 add	 esp, 24			; 00000018H
  00184	89 54 24 7c	 mov	 DWORD PTR __Dest$[esp+112], edx
  00188	33 f6		 xor	 esi, esi
$LN1@do_put@2:

; 1144 : 				}
; 1145 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  0018a	83 7c 24 5c 08	 cmp	 DWORD PTR __Str$129962[esp+136], 8
  0018f	8b 44 24 48	 mov	 eax, DWORD PTR __Str$129962[esp+116]
  00193	73 04		 jae	 SHORT $LN129@do_put@2
  00195	8d 44 24 48	 lea	 eax, DWORD PTR __Str$129962[esp+116]
$LN129@do_put@2:
  00199	51		 push	 ecx
  0019a	8b 4c 24 7c	 mov	 ecx, DWORD PTR __Dest$[esp+112]
  0019e	50		 push	 eax
  0019f	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+120]
  001a6	50		 push	 eax
  001a7	51		 push	 ecx
  001a8	8d 54 24 4c	 lea	 edx, DWORD PTR $T180832[esp+128]
  001ac	52		 push	 edx
  001ad	57		 push	 edi
  001ae	e8 00 00 00 00	 call	 ?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put
  001b3	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1146 : 			_Iosbase.width(0);
; 1147 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  001b5	56		 push	 esi
  001b6	8b 74 24 30	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+140]
  001ba	53		 push	 ebx
  001bb	89 8c 24 98 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], ecx
  001c2	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001c5	50		 push	 eax
  001c6	51		 push	 ecx
  001c7	56		 push	 esi
  001c8	57		 push	 edi
  001c9	89 84 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], eax
  001d0	c7 45 18 00 00
	00 00		 mov	 DWORD PTR [ebp+24], 0
  001d7	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  001dc	83 c4 30	 add	 esp, 48			; 00000030H
  001df	83 7c 24 5c 08	 cmp	 DWORD PTR __Str$129962[esp+136], 8
  001e4	72 0d		 jb	 SHORT $LN150@do_put@2
  001e6	8b 44 24 48	 mov	 eax, DWORD PTR __Str$129962[esp+116]
  001ea	50		 push	 eax
  001eb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001f0	83 c4 04	 add	 esp, 4
$LN150@do_put@2:
  001f3	8b c6		 mov	 eax, esi

; 1148 : 			}
; 1149 : 		}

  001f5	8b 4c 24 64	 mov	 ecx, DWORD PTR __$EHRec$[esp+112]
  001f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00200	59		 pop	 ecx
  00201	5f		 pop	 edi
  00202	5e		 pop	 esi
  00203	5d		 pop	 ebp
  00204	5b		 pop	 ebx
  00205	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+92]
  00209	33 cc		 xor	 ecx, esp
  0020b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00210	83 c4 5c	 add	 esp, 92			; 0000005cH
  00213	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR $T180826[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Str$129962[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$2:
  00010	8d 4d b0	 lea	 ecx, DWORD PTR $T180827[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$3:
  00018	8d 4d b0	 lea	 ecx, DWORD PTR $T180828[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  00027	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	83 c0 10	 add	 eax, 16			; 00000010H
  00034	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00037	33 c8		 xor	 ecx, eax
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
  00043	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?clear@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?clear@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXXZ PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::clear, COMDAT
; _this$ = ecx

; 825  : 		{	// erase all

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 826  : 
; 827  :  #if _HAS_ITERATOR_DEBUGGING
; 828  : 		this->_Orphan_ptr(*this, 0);
; 829  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 830  : 
; 831  : 		_Nodeptr _Pnext;
; 832  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

  00005	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00008	8b 30		 mov	 esi, DWORD PTR [eax]

; 833  : 		_Nextnode(_Myhead) = _Myhead;

  0000a	89 00		 mov	 DWORD PTR [eax], eax

; 834  : 		_Prevnode(_Myhead) = _Myhead;

  0000c	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 835  : 		_Mysize = 0;

  00012	33 db		 xor	 ebx, ebx
  00014	89 5f 18	 mov	 DWORD PTR [edi+24], ebx

; 836  : 
; 837  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

  00017	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  0001a	74 58		 je	 SHORT $LN1@clear@7
  0001c	55		 push	 ebp
  0001d	8d 49 00	 npad	 3
$LL3@clear@7:

; 838  : 			{	// delete an element
; 839  : 			_Pnext = _Nextnode(_Pnode);
; 840  : 			this->_Alnod.destroy(_Pnode);

  00020	83 7e 44 10	 cmp	 DWORD PTR [esi+68], 16	; 00000010H
  00024	8b 2e		 mov	 ebp, DWORD PTR [esi]
  00026	72 0c		 jb	 SHORT $LN41@clear@7
  00028	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00031	83 c4 04	 add	 esp, 4
$LN41@clear@7:
  00034	c7 46 44 0f 00
	00 00		 mov	 DWORD PTR [esi+68], 15	; 0000000fH
  0003b	89 5e 40	 mov	 DWORD PTR [esi+64], ebx
  0003e	88 5e 30	 mov	 BYTE PTR [esi+48], bl
  00041	83 7e 28 08	 cmp	 DWORD PTR [esi+40], 8
  00045	72 0c		 jb	 SHORT $LN69@clear@7
  00047	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00050	83 c4 04	 add	 esp, 4
$LN69@clear@7:
  00053	33 d2		 xor	 edx, edx
  00055	c7 46 28 07 00
	00 00		 mov	 DWORD PTR [esi+40], 7
  0005c	89 5e 24	 mov	 DWORD PTR [esi+36], ebx

; 841  : 			this->_Alnod.deallocate(_Pnode, 1);

  0005f	56		 push	 esi
  00060	66 89 56 14	 mov	 WORD PTR [esi+20], dx
  00064	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00069	83 c4 04	 add	 esp, 4
  0006c	8b f5		 mov	 esi, ebp
  0006e	3b 6f 14	 cmp	 ebp, DWORD PTR [edi+20]
  00071	75 ad		 jne	 SHORT $LL3@clear@7
  00073	5d		 pop	 ebp
$LN1@clear@7:
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx

; 842  : 			}
; 843  : 		}

  00077	c3		 ret	 0
?clear@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXXZ ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::clear
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Buynode
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z$0
__unwindtable$?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z$2
__ehfuncinfo$?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z
_TEXT	SEGMENT
__Pnode$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Buynode, COMDAT
; _this$ = ecx

; 1190 : 		{	// allocate a node and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1191 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  0002b	6a 48		 push	 72			; 00000048H
  0002d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00032	8b f0		 mov	 esi, eax
  00034	83 c4 04	 add	 esp, 4
  00037	89 75 ec	 mov	 DWORD PTR __Pnode$[ebp], esi

; 1192 : 		int _Linkcnt = 0;
; 1193 : 
; 1194 : 		_TRY_BEGIN

  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1195 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Next);

  00041	85 f6		 test	 esi, esi
  00043	74 05		 je	 SHORT $LN27@Buynode@6
  00045	8b 45 08	 mov	 eax, DWORD PTR __Next$[ebp]
  00048	89 06		 mov	 DWORD PTR [esi], eax
$LN27@Buynode@6:

; 1196 : 		++_Linkcnt;
; 1197 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Prev);

  0004a	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0004d	85 c0		 test	 eax, eax
  0004f	74 05		 je	 SHORT $LN37@Buynode@6
  00051	8b 4d 0c	 mov	 ecx, DWORD PTR __Prev$[ebp]
  00054	89 08		 mov	 DWORD PTR [eax], ecx
$LN37@Buynode@6:

; 1198 : 		++_Linkcnt;
; 1199 : 		this->_Alval.construct(&_Myval(_Pnode), _Val);

  00056	8b 55 10	 mov	 edx, DWORD PTR __Val$[ebp]
  00059	52		 push	 edx
  0005a	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??$_Construct@USecurityTokenInfo@CipherShed@@U12@@std@@YAXPAUSecurityTokenInfo@CipherShed@@ABU12@@Z ; std::_Construct<CipherShed::SecurityTokenInfo,CipherShed::SecurityTokenInfo>
  00063	83 c4 08	 add	 esp, 8

; 1207 : 		_CATCH_END
; 1208 : 		return (_Pnode);

  00066	8b c6		 mov	 eax, esi

; 1209 : 		}

  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 0c 00	 ret	 12			; 0000000cH
__catch$?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z$0:

; 1200 : 		_CATCH_ALL
; 1201 : 		if (1 < _Linkcnt)
; 1202 : 			this->_Alptr.destroy(&_Prevnode(_Pnode));
; 1203 : 		if (0 < _Linkcnt)
; 1204 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1205 : 		this->_Alnod.deallocate(_Pnode, 1);

  0007c	8b 4d ec	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00085	83 c4 04	 add	 esp, 4

; 1206 : 		_RERAISE;

  00088	6a 00		 push	 0
  0008a	6a 00		 push	 0
  0008c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN53@Buynode@6:
  00091	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Buynode
PUBLIC	??_C@_01KGKMHCOC@e?$AA@				; `string'
PUBLIC	??_C@_01DDCIFGEA@E?$AA@				; `string'
PUBLIC	__Iosbase$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
EXTRN	_strcspn:PROC
;	COMDAT ??_C@_01KGKMHCOC@e?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_01KGKMHCOC@e?$AA@ DB 'e', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT
??_C@_01DDCIFGEA@E?$AA@ DB 'E', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$2
__ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
_TEXT	SEGMENT
__Enders$ = -112					; size = 3
__Fillcount$ = -108					; size = 4
__Kseparator$ = -104					; size = 1
__Lock$182189 = -104					; size = 4
$T182155 = -100						; size = 8
$T182154 = -100						; size = 8
$T182153 = -100						; size = 8
$T182152 = -100						; size = 8
$T182151 = -100						; size = 8
$T182150 = -100						; size = 8
__Prefix$ = -100					; size = 4
$T182424 = -92						; size = 1
$T182163 = -92						; size = 8
$T182162 = -92						; size = 8
$T182161 = -92						; size = 8
$T182158 = -92						; size = 8
$T182157 = -92						; size = 8
$T182156 = -92						; size = 8
__Punct_fac$ = -92					; size = 4
__Iosbase$GSCopy$ = -84					; size = 4
___$ReturnUdt$GSCopy$ = -80				; size = 4
$T182145 = -76						; size = 4
__Groupstring$ = -72					; size = 28
__Grouping$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Beforepoint$ = 36					; size = 4
__Afterpoint$ = 40					; size = 4
__Trailing$ = 44					; size = 4
__Count$ = 48						; size = 4
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput, COMDAT

; 1313 : 		{	// put formatted floating-point to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 64	 sub	 esp, 100		; 00000064H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 60	 mov	 DWORD PTR __$ArrayPad$[esp+112], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 78	 lea	 eax, DWORD PTR __$EHRec$[esp+132]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1426 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00032	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+128]
  00039	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR __Iosbase$[esp+128]
  00040	8b bc 24 a0 00
	00 00		 mov	 edi, DWORD PTR __Buf$[esp+128]
  00047	8d 54 24 38	 lea	 edx, DWORD PTR $T182145[esp+132]
  0004b	52		 push	 edx
  0004c	89 44 24 38	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+136], eax
  00050	89 4c 24 34	 mov	 DWORD PTR __Iosbase$GSCopy$[esp+136], ecx
  00054	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00059	50		 push	 eax
  0005a	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+144], 0
  00065	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  0006a	8b 6c 24 3c	 mov	 ebp, DWORD PTR $T182145[esp+136]
  0006e	83 c4 04	 add	 esp, 4
  00071	8b d8		 mov	 ebx, eax
  00073	89 5c 24 28	 mov	 DWORD PTR __Punct_fac$[esp+132], ebx
  00077	c7 84 24 80 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+140], -1
  00082	85 ed		 test	 ebp, ebp
  00084	74 3d		 je	 SHORT $LN31@Fput
  00086	6a 00		 push	 0
  00088	8d 4c 24 20	 lea	 ecx, DWORD PTR __Lock$182189[esp+136]
  0008c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00091	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00094	85 c0		 test	 eax, eax
  00096	76 09		 jbe	 SHORT $LN33@Fput

; 1314 : 		_DEBUG_POINTER(_Dest);
; 1315 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  00098	83 f8 ff	 cmp	 eax, -1
  0009b	73 04		 jae	 SHORT $LN33@Fput
  0009d	48		 dec	 eax
  0009e	89 45 04	 mov	 DWORD PTR [ebp+4], eax
$LN33@Fput:
  000a1	8b 75 04	 mov	 esi, DWORD PTR [ebp+4]
  000a4	f7 de		 neg	 esi
  000a6	1b f6		 sbb	 esi, esi
  000a8	f7 d6		 not	 esi
  000aa	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$182189[esp+132]
  000ae	23 f5		 and	 esi, ebp
  000b0	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000b5	85 f6		 test	 esi, esi
  000b7	74 0a		 je	 SHORT $LN31@Fput
  000b9	8b 06		 mov	 eax, DWORD PTR [esi]
  000bb	8b 10		 mov	 edx, DWORD PTR [eax]
  000bd	6a 01		 push	 1
  000bf	8b ce		 mov	 ecx, esi
  000c1	ff d2		 call	 edx
$LN31@Fput:

; 1316 : 		const string _Grouping = _Punct_fac.grouping();

  000c3	8d 44 24 58	 lea	 eax, DWORD PTR __Grouping$[esp+132]
  000c7	50		 push	 eax
  000c8	8b cb		 mov	 ecx, ebx
  000ca	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping

; 1317 : 		const _Elem _Kseparator = _Punct_fac.thousands_sep();

  000cf	8b 13		 mov	 edx, DWORD PTR [ebx]
  000d1	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000d4	be 01 00 00 00	 mov	 esi, 1
  000d9	8b cb		 mov	 ecx, ebx
  000db	89 b4 24 80 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+140], esi
  000e2	ff d0		 call	 eax

; 1318 : 		string _Groupstring;

  000e4	33 c9		 xor	 ecx, ecx
  000e6	88 44 24 1c	 mov	 BYTE PTR __Kseparator$[esp+132], al
  000ea	c7 44 24 54 0f
	00 00 00	 mov	 DWORD PTR __Groupstring$[esp+156], 15 ; 0000000fH
  000f2	89 4c 24 50	 mov	 DWORD PTR __Groupstring$[esp+152], ecx
  000f6	88 4c 24 40	 mov	 BYTE PTR __Groupstring$[esp+136], cl

; 1319 : 		const _Elem _E0 = _MAKLOCCHR(_Elem, '0', _Cvt);
; 1320 : 		size_t _Prefix = _Buf[0] == '+' || _Buf[0] == '-' ? 1 : 0;

  000fa	8a 07		 mov	 al, BYTE PTR [edi]
  000fc	c6 84 24 80 00
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+140], 2
  00104	3c 2b		 cmp	 al, 43			; 0000002bH
  00106	74 08		 je	 SHORT $LN19@Fput
  00108	89 4c 24 20	 mov	 DWORD PTR __Prefix$[esp+132], ecx
  0010c	3c 2d		 cmp	 al, 45			; 0000002dH
  0010e	75 04		 jne	 SHORT $LN20@Fput
$LN19@Fput:
  00110	89 74 24 20	 mov	 DWORD PTR __Prefix$[esp+132], esi
$LN20@Fput:

; 1321 : 
; 1322 : 		char _Enders[3];
; 1323 : 		_Enders[0] = ::localeconv()->decimal_point[0];

  00114	e8 00 00 00 00	 call	 _localeconv
  00119	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1324 : 		_Enders[1] = 'e';
; 1325 : 		_Enders[2] = '\0';
; 1326 : 
; 1327 : 		const char *_Eptr = (const char *)::memchr(_Buf,
; 1328 : 			'e', _Count);	// find exponent

  0011b	8b 9c 24 b0 00
	00 00		 mov	 ebx, DWORD PTR __Count$[esp+128]
  00122	8a 11		 mov	 dl, BYTE PTR [ecx]
  00124	53		 push	 ebx
  00125	6a 65		 push	 101			; 00000065H
  00127	57		 push	 edi
  00128	88 54 24 20	 mov	 BYTE PTR __Enders$[esp+144], dl
  0012c	c6 44 24 21 65	 mov	 BYTE PTR __Enders$[esp+145], 101 ; 00000065H
  00131	c6 44 24 22 00	 mov	 BYTE PTR __Enders$[esp+146], 0
  00136	e8 00 00 00 00	 call	 _memchr
  0013b	8b f0		 mov	 esi, eax

; 1329 : 		const char *_Pointptr = (const char *)::memchr(_Buf,
; 1330 : 			_Enders[0], _Count);	// find decimal point

  0013d	0f be 44 24 20	 movsx	 eax, BYTE PTR __Enders$[esp+144]
  00142	53		 push	 ebx
  00143	50		 push	 eax
  00144	57		 push	 edi
  00145	e8 00 00 00 00	 call	 _memchr
  0014a	8b e8		 mov	 ebp, eax
  0014c	83 c4 18	 add	 esp, 24			; 00000018H

; 1331 : 		if (_Pointptr == 0)

  0014f	85 ed		 test	 ebp, ebp
  00151	75 07		 jne	 SHORT $LN16@Fput

; 1332 : 			_Trailing = 0;

  00153	89 84 24 ac 00
	00 00		 mov	 DWORD PTR __Trailing$[esp+128], eax
$LN16@Fput:

; 1333 : 
; 1334 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  0015a	8b 4c 24 70	 mov	 ecx, DWORD PTR __Grouping$[esp+156]
  0015e	8b 54 24 5c	 mov	 edx, DWORD PTR __Grouping$[esp+136]
  00162	8b c2		 mov	 eax, edx
  00164	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00167	73 04		 jae	 SHORT $LN78@Fput
  00169	8d 44 24 5c	 lea	 eax, DWORD PTR __Grouping$[esp+136]
$LN78@Fput:
  0016d	80 38 7f	 cmp	 BYTE PTR [eax], 127	; 0000007fH
  00170	0f 84 47 01 00
	00		 je	 $LN105@Fput
  00176	8b c2		 mov	 eax, edx
  00178	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0017b	73 04		 jae	 SHORT $LN84@Fput
  0017d	8d 44 24 5c	 lea	 eax, DWORD PTR __Grouping$[esp+136]
$LN84@Fput:
  00181	80 38 00	 cmp	 BYTE PTR [eax], 0
  00184	0f 8e 33 01 00
	00		 jle	 $LN105@Fput

; 1335 : 			{	// grouping specified, add thousands separators
; 1336 : 			_Groupstring.append(_Buf, _Count);	// assemble field into string

  0018a	53		 push	 ebx
  0018b	57		 push	 edi
  0018c	8d 4c 24 44	 lea	 ecx, DWORD PTR __Groupstring$[esp+140]
  00190	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1337 : 			if (_Eptr == 0)

  00195	85 f6		 test	 esi, esi
  00197	75 1c		 jne	 SHORT $LN14@Fput

; 1338 : 				_Groupstring.append(_Trailing, '0');

  00199	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR __Trailing$[esp+128]
  001a0	6a 30		 push	 48			; 00000030H
  001a2	51		 push	 ecx
  001a3	8d 4c 24 44	 lea	 ecx, DWORD PTR __Groupstring$[esp+140]
  001a7	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1339 : 			else

  001ac	8b 9c 24 a4 00
	00 00		 mov	 ebx, DWORD PTR __Beforepoint$[esp+128]
  001b3	eb 38		 jmp	 SHORT $LN13@Fput
$LN14@Fput:

; 1340 : 				{	/* dispose of any zeros before exponent */
; 1341 : 				if (_Pointptr == 0)

  001b5	85 ed		 test	 ebp, ebp
  001b7	75 17		 jne	 SHORT $LN177@Fput

; 1342 : 					{	/* no point but exponent, put scaling zeros */
; 1343 : 					_Groupstring.append(_Beforepoint, '0');

  001b9	8b 94 24 a4 00
	00 00		 mov	 edx, DWORD PTR __Beforepoint$[esp+128]
  001c0	6a 30		 push	 48			; 00000030H
  001c2	52		 push	 edx
  001c3	8d 4c 24 44	 lea	 ecx, DWORD PTR __Groupstring$[esp+140]
  001c7	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1344 : 					_Beforepoint = 0;

  001cc	33 db		 xor	 ebx, ebx
  001ce	eb 07		 jmp	 SHORT $LN12@Fput
$LN177@Fput:
  001d0	8b 9c 24 a4 00
	00 00		 mov	 ebx, DWORD PTR __Beforepoint$[esp+128]
$LN12@Fput:

; 1345 : 					}
; 1346 : 				_Groupstring.insert(_Eptr - _Buf, _Trailing, '0');

  001d7	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR __Trailing$[esp+128]
  001de	6a 30		 push	 48			; 00000030H
  001e0	50		 push	 eax
  001e1	2b f7		 sub	 esi, edi
  001e3	56		 push	 esi
  001e4	8d 4c 24 48	 lea	 ecx, DWORD PTR __Groupstring$[esp+144]
  001e8	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
$LN13@Fput:

; 1347 : 				}
; 1348 : 			_Trailing = 0;
; 1349 : 
; 1350 : 			if (_Pointptr == 0)
; 1351 : 				_Groupstring.append(_Beforepoint, '0');

  001ed	6a 30		 push	 48			; 00000030H
  001ef	85 ed		 test	 ebp, ebp
  001f1	75 0c		 jne	 SHORT $LN11@Fput
  001f3	53		 push	 ebx
  001f4	8d 4c 24 44	 lea	 ecx, DWORD PTR __Groupstring$[esp+140]
  001f8	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1352 : 			else

  001fd	eb 31		 jmp	 SHORT $LN10@Fput
$LN11@Fput:

; 1353 : 				{	// fill in zeros around decimal point
; 1354 : 				_Groupstring.insert(_Pointptr - _Buf + 1, _Afterpoint, '0');

  001ff	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR __Afterpoint$[esp+132]
  00206	8b f5		 mov	 esi, ebp
  00208	2b f7		 sub	 esi, edi
  0020a	51		 push	 ecx
  0020b	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  0020e	52		 push	 edx
  0020f	8d 4c 24 48	 lea	 ecx, DWORD PTR __Groupstring$[esp+144]
  00213	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1355 : 				_Groupstring.insert(_Pointptr - _Buf, _Beforepoint, '0');

  00218	6a 30		 push	 48			; 00000030H
  0021a	53		 push	 ebx
  0021b	56		 push	 esi
  0021c	8d 4c 24 48	 lea	 ecx, DWORD PTR __Groupstring$[esp+144]
  00220	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1356 : 				_Afterpoint = 0;

  00225	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Afterpoint$[esp+128], 0
$LN10@Fput:

; 1357 : 				}
; 1358 : 			_Beforepoint = 0;
; 1359 : 
; 1360 : 			const char *_Pg = _Grouping.c_str();

  00230	8b 7c 24 5c	 mov	 edi, DWORD PTR __Grouping$[esp+136]
  00234	bb 10 00 00 00	 mov	 ebx, 16			; 00000010H
  00239	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Beforepoint$[esp+128], 0
  00244	39 5c 24 70	 cmp	 DWORD PTR __Grouping$[esp+156], ebx
  00248	73 04		 jae	 SHORT $LN90@Fput
  0024a	8d 7c 24 5c	 lea	 edi, DWORD PTR __Grouping$[esp+136]
$LN90@Fput:

; 1361 : 			size_t _Off = ::strcspn(&_Groupstring[0], &_Enders[0]);

  0024e	8b 44 24 40	 mov	 eax, DWORD PTR __Groupstring$[esp+136]
  00252	39 5c 24 54	 cmp	 DWORD PTR __Groupstring$[esp+156], ebx
  00256	73 04		 jae	 SHORT $LN97@Fput
  00258	8d 44 24 40	 lea	 eax, DWORD PTR __Groupstring$[esp+136]
$LN97@Fput:
  0025c	8d 4c 24 14	 lea	 ecx, DWORD PTR __Enders$[esp+132]
  00260	51		 push	 ecx
  00261	50		 push	 eax
  00262	e8 00 00 00 00	 call	 _strcspn
  00267	8b f0		 mov	 esi, eax

; 1362 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1363 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00269	8a 07		 mov	 al, BYTE PTR [edi]
  0026b	83 c4 08	 add	 esp, 8
  0026e	3c 7f		 cmp	 al, 127			; 0000007fH
  00270	74 2e		 je	 SHORT $LN8@Fput
$LL9@Fput:
  00272	84 c0		 test	 al, al
  00274	7e 2a		 jle	 SHORT $LN8@Fput
  00276	8b d6		 mov	 edx, esi
  00278	2b 54 24 20	 sub	 edx, DWORD PTR __Prefix$[esp+132]
  0027c	0f be c0	 movsx	 eax, al
  0027f	3b c2		 cmp	 eax, edx
  00281	73 1d		 jae	 SHORT $LN8@Fput

; 1364 : 				{	// add a NUL to mark thousands separator
; 1365 : 				_Groupstring.insert(_Off -= *_Pg, (size_t)1, '\0');

  00283	6a 00		 push	 0
  00285	2b f0		 sub	 esi, eax
  00287	6a 01		 push	 1
  00289	56		 push	 esi
  0028a	8d 4c 24 48	 lea	 ecx, DWORD PTR __Groupstring$[esp+144]
  0028e	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1366 : 				if ('\0' < _Pg[1])

  00293	80 7f 01 00	 cmp	 BYTE PTR [edi+1], 0
  00297	7e 01		 jle	 SHORT $LN7@Fput

; 1362 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1363 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00299	47		 inc	 edi
$LN7@Fput:
  0029a	8a 07		 mov	 al, BYTE PTR [edi]
  0029c	3c 7f		 cmp	 al, 127			; 0000007fH
  0029e	75 d2		 jne	 SHORT $LL9@Fput
$LN8@Fput:

; 1367 : 					++_Pg;	// not last group, advance
; 1368 : 				}
; 1369 : 
; 1370 : 			_Buf = &_Groupstring[0];

  002a0	8b 7c 24 40	 mov	 edi, DWORD PTR __Groupstring$[esp+136]
  002a4	39 5c 24 54	 cmp	 DWORD PTR __Groupstring$[esp+156], ebx
  002a8	73 04		 jae	 SHORT $LN104@Fput
  002aa	8d 7c 24 40	 lea	 edi, DWORD PTR __Groupstring$[esp+136]
$LN104@Fput:

; 1371 : 			_Trailing = 0;
; 1372 : 			_Count = _Groupstring.size();

  002ae	8b 5c 24 50	 mov	 ebx, DWORD PTR __Groupstring$[esp+152]
  002b2	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Trailing$[esp+128], 0
$LN105@Fput:

; 1373 : 			}
; 1374 : 
; 1375 : 		size_t _Fillcount = _Beforepoint + _Afterpoint + _Trailing + _Count;

  002bd	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __Afterpoint$[esp+128]
  002c4	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR __Beforepoint$[esp+128]

; 1376 : 		_Fillcount = _Iosbase.width() <= 0
; 1377 : 			|| (size_t)_Iosbase.width() <= _Fillcount
; 1378 : 				? 0 : (size_t)_Iosbase.width() - _Fillcount;

  002cb	8b 54 24 30	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+132]
  002cf	03 c1		 add	 eax, ecx
  002d1	03 84 24 ac 00
	00 00		 add	 eax, DWORD PTR __Trailing$[esp+128]
  002d8	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  002db	03 c3		 add	 eax, ebx
  002dd	85 c9		 test	 ecx, ecx
  002df	7e 0c		 jle	 SHORT $LN21@Fput
  002e1	3b c8		 cmp	 ecx, eax
  002e3	76 08		 jbe	 SHORT $LN21@Fput
  002e5	2b c8		 sub	 ecx, eax
  002e7	89 4c 24 18	 mov	 DWORD PTR __Fillcount$[esp+132], ecx
  002eb	eb 08		 jmp	 SHORT $LN22@Fput
$LN21@Fput:
  002ed	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __Fillcount$[esp+132], 0
$LN22@Fput:

; 1379 : 		ios_base::fmtflags _Adjustfield =
; 1380 : 			_Iosbase.flags() & ios_base::adjustfield;

  002f5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]

; 1381 : 		if (_Adjustfield != ios_base::left
; 1382 : 			&& _Adjustfield != ios_base::internal)

  002f8	8b b4 24 88 00
	00 00		 mov	 esi, DWORD PTR _this$[esp+128]
  002ff	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00304	83 f8 40	 cmp	 eax, 64			; 00000040H
  00307	0f 84 c7 00 00
	00		 je	 $LN4@Fput
  0030d	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00312	74 3d		 je	 SHORT $LN174@Fput

; 1383 : 			{	// put leading fill
; 1384 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00314	8b 54 24 18	 mov	 edx, DWORD PTR __Fillcount$[esp+132]
  00318	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+128]
  0031f	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+132]
  00326	52		 push	 edx
  00327	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  0032e	50		 push	 eax
  0032f	51		 push	 ecx
  00330	52		 push	 edx
  00331	8d 44 24 30	 lea	 eax, DWORD PTR $T182150[esp+148]
  00335	50		 push	 eax
  00336	56		 push	 esi
  00337	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0033c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033e	89 8c 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], ecx
  00345	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00348	89 94 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], edx

; 1385 : 			_Fillcount = 0;

  0034f	eb 78		 jmp	 SHORT $LN186@Fput
$LN174@Fput:

; 1386 : 			}
; 1387 : 		else if (_Adjustfield == ios_base::internal)
; 1388 : 			{	// put internal fill
; 1389 : 			if (0 < _Prefix)

  00351	83 7c 24 20 00	 cmp	 DWORD PTR __Prefix$[esp+132], 0
  00356	76 36		 jbe	 SHORT $LN3@Fput

; 1390 : 				{	// but first put sign
; 1391 : 				_Dest = _Putc(_Dest, _Buf, 1);

  00358	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+132]
  0035f	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+128]
  00366	6a 01		 push	 1
  00368	57		 push	 edi
  00369	50		 push	 eax
  0036a	51		 push	 ecx
  0036b	8d 54 24 30	 lea	 edx, DWORD PTR $T182151[esp+148]
  0036f	52		 push	 edx
  00370	56		 push	 esi
  00371	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  00376	8b 08		 mov	 ecx, DWORD PTR [eax]
  00378	89 8c 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], ecx
  0037f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00382	83 c4 18	 add	 esp, 24			; 00000018H

; 1392 : 				++_Buf, --_Count;

  00385	47		 inc	 edi
  00386	89 94 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], edx
  0038d	4b		 dec	 ebx
$LN3@Fput:

; 1393 : 				}
; 1394 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  0038e	8b 44 24 18	 mov	 eax, DWORD PTR __Fillcount$[esp+132]
  00392	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+128]
  00399	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  003a0	50		 push	 eax
  003a1	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+132]
  003a8	51		 push	 ecx
  003a9	52		 push	 edx
  003aa	50		 push	 eax
  003ab	8d 4c 24 30	 lea	 ecx, DWORD PTR $T182152[esp+148]
  003af	51		 push	 ecx
  003b0	56		 push	 esi
  003b1	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  003b6	8b 10		 mov	 edx, DWORD PTR [eax]
  003b8	89 94 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], edx
  003bf	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  003c2	89 84 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], eax
$LN186@Fput:

; 1395 : 			_Fillcount = 0;

  003c9	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __Fillcount$[esp+156], 0
  003d1	83 c4 18	 add	 esp, 24			; 00000018H
$LN4@Fput:

; 1396 : 			}
; 1397 : 
; 1398 : 		_Pointptr = (const char *)::memchr(_Buf,
; 1399 : 			_Enders[0], _Count);	// find decimal point again

  003d4	0f be 4c 24 14	 movsx	 ecx, BYTE PTR __Enders$[esp+132]
  003d9	53		 push	 ebx
  003da	51		 push	 ecx
  003db	57		 push	 edi
  003dc	e8 00 00 00 00	 call	 _memchr
  003e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1400 : 		if (_Pointptr != 0)

  003e4	85 c0		 test	 eax, eax
  003e6	0f 84 e9 00 00
	00		 je	 $LN2@Fput

; 1401 : 			{	// has decimal point, put pieces and zero fills
; 1402 : 			size_t _Fracoffset = _Pointptr - _Buf + 1;
; 1403 : 			_Dest = _Putgrouped(_Dest, _Buf, _Fracoffset - 1, _Kseparator);

  003ec	8b 54 24 1c	 mov	 edx, DWORD PTR __Kseparator$[esp+132]
  003f0	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+132]
  003f7	2b c7		 sub	 eax, edi
  003f9	40		 inc	 eax
  003fa	52		 push	 edx
  003fb	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  00402	8b e8		 mov	 ebp, eax
  00404	8d 45 ff	 lea	 eax, DWORD PTR [ebp-1]
  00407	50		 push	 eax
  00408	57		 push	 edi
  00409	51		 push	 ecx
  0040a	52		 push	 edx
  0040b	8d 44 24 34	 lea	 eax, DWORD PTR $T182153[esp+152]
  0040f	50		 push	 eax
  00410	56		 push	 esi
  00411	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  00416	8b 08		 mov	 ecx, DWORD PTR [eax]
  00418	89 8c 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], ecx
  0041f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1404 : 			_Dest = _Rep(_Dest, _E0, _Beforepoint);

  00422	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __Beforepoint$[esp+156]
  00429	51		 push	 ecx
  0042a	89 94 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], edx
  00431	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00434	8b 00		 mov	 eax, DWORD PTR [eax]
  00436	6a 30		 push	 48			; 00000030H
  00438	52		 push	 edx
  00439	50		 push	 eax
  0043a	8d 4c 24 4c	 lea	 ecx, DWORD PTR $T182154[esp+176]
  0043e	51		 push	 ecx
  0043f	56		 push	 esi
  00440	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00445	8b 10		 mov	 edx, DWORD PTR [eax]

; 1405 : 			_Dest = _Rep(_Dest, _Punct_fac.decimal_point(), 1);

  00447	8b 4c 24 5c	 mov	 ecx, DWORD PTR __Punct_fac$[esp+184]
  0044b	89 94 24 c4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+180], edx
  00452	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00455	89 84 24 c8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+184], eax
  0045c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0045e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00461	83 c4 34	 add	 esp, 52			; 00000034H
  00464	ff d0		 call	 eax
  00466	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  0046d	6a 01		 push	 1
  0046f	88 44 24 2c	 mov	 BYTE PTR $T182424[esp+136], al
  00473	8b 4c 24 2c	 mov	 ecx, DWORD PTR $T182424[esp+136]
  00477	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+132]
  0047e	51		 push	 ecx
  0047f	52		 push	 edx
  00480	50		 push	 eax
  00481	8d 4c 24 30	 lea	 ecx, DWORD PTR $T182155[esp+148]
  00485	51		 push	 ecx
  00486	56		 push	 esi
  00487	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0048c	8b 10		 mov	 edx, DWORD PTR [eax]
  0048e	89 94 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], edx
  00495	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1406 : 			_Dest = _Rep(_Dest, _E0, _Afterpoint);

  00498	8b 94 24 c0 00
	00 00		 mov	 edx, DWORD PTR __Afterpoint$[esp+152]
  0049f	52		 push	 edx
  004a0	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], ecx
  004a7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004aa	8b 10		 mov	 edx, DWORD PTR [eax]
  004ac	6a 30		 push	 48			; 00000030H
  004ae	51		 push	 ecx
  004af	52		 push	 edx
  004b0	8d 44 24 50	 lea	 eax, DWORD PTR $T182156[esp+172]
  004b4	50		 push	 eax
  004b5	56		 push	 esi
  004b6	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  004bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  004bd	89 8c 24 c0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+176], ecx
  004c4	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  004c7	83 c4 30	 add	 esp, 48			; 00000030H

; 1407 : 			_Buf += _Fracoffset, _Count -= _Fracoffset;

  004ca	03 fd		 add	 edi, ebp
  004cc	89 94 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], edx
  004d3	2b dd		 sub	 ebx, ebp
$LN2@Fput:

; 1408 : 			}
; 1409 : 
; 1410 : 		_Eptr = (const char *)::memchr(_Buf,
; 1411 : 			'e', _Count);	// find exponent again

  004d5	53		 push	 ebx
  004d6	6a 65		 push	 101			; 00000065H
  004d8	57		 push	 edi
  004d9	e8 00 00 00 00	 call	 _memchr
  004de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1412 : 		if (_Eptr != 0)

  004e1	85 c0		 test	 eax, eax
  004e3	0f 84 bd 00 00
	00		 je	 $LN1@Fput

; 1413 : 			{	// has exponent field, put it out
; 1414 : 			size_t _Expoffset = _Eptr - _Buf + 1;
; 1415 : 			_Dest = _Putgrouped(_Dest, _Buf, _Expoffset - 1, _Kseparator);

  004e9	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  004f0	2b c7		 sub	 eax, edi
  004f2	40		 inc	 eax
  004f3	8b e8		 mov	 ebp, eax
  004f5	8b 44 24 1c	 mov	 eax, DWORD PTR __Kseparator$[esp+132]
  004f9	50		 push	 eax
  004fa	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+132]
  00501	8d 4d ff	 lea	 ecx, DWORD PTR [ebp-1]
  00504	51		 push	 ecx
  00505	57		 push	 edi
  00506	52		 push	 edx
  00507	50		 push	 eax
  00508	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T182157[esp+152]
  0050c	51		 push	 ecx
  0050d	56		 push	 esi
  0050e	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  00513	8b 10		 mov	 edx, DWORD PTR [eax]
  00515	89 94 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], edx
  0051c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1416 : 			_Dest = _Rep(_Dest, _E0, _Trailing), _Trailing = 0;

  0051f	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR __Trailing$[esp+156]
  00526	52		 push	 edx
  00527	89 8c 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], ecx
  0052e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00531	8b 10		 mov	 edx, DWORD PTR [eax]
  00533	6a 30		 push	 48			; 00000030H
  00535	51		 push	 ecx
  00536	52		 push	 edx
  00537	8d 44 24 54	 lea	 eax, DWORD PTR $T182158[esp+176]
  0053b	50		 push	 eax
  0053c	56		 push	 esi
  0053d	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00542	8b 08		 mov	 ecx, DWORD PTR [eax]
  00544	89 8c 24 c4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+180], ecx

; 1417 : 			_Dest = _Putc(_Dest, _Iosbase.flags() & ios_base::uppercase
; 1418 : 				? "E" : "e", 1);

  0054b	8b 4c 24 64	 mov	 ecx, DWORD PTR __Iosbase$GSCopy$[esp+184]
  0054f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00552	83 c4 34	 add	 esp, 52			; 00000034H
  00555	f6 41 10 04	 test	 BYTE PTR [ecx+16], 4
  00559	89 94 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], edx
  00560	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Trailing$[esp+128], 0
  0056b	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01DDCIFGEA@E?$AA@
  00570	75 05		 jne	 SHORT $LN24@Fput
  00572	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01KGKMHCOC@e?$AA@
$LN24@Fput:
  00577	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0057a	8b 00		 mov	 eax, DWORD PTR [eax]
  0057c	6a 01		 push	 1
  0057e	51		 push	 ecx
  0057f	52		 push	 edx
  00580	50		 push	 eax
  00581	8d 4c 24 38	 lea	 ecx, DWORD PTR $T182161[esp+148]
  00585	51		 push	 ecx
  00586	56		 push	 esi
  00587	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  0058c	8b 10		 mov	 edx, DWORD PTR [eax]
  0058e	89 94 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], edx
  00595	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00598	83 c4 18	 add	 esp, 24			; 00000018H

; 1419 : 			_Buf += _Expoffset, _Count -= _Expoffset;

  0059b	03 fd		 add	 edi, ebp
  0059d	89 84 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], eax
  005a4	2b dd		 sub	 ebx, ebp
$LN1@Fput:

; 1420 : 			}
; 1421 : 
; 1422 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1423 : 			_Kseparator);	// put leftover field

  005a6	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Kseparator$[esp+132]
  005aa	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  005b1	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+128]
  005b8	51		 push	 ecx
  005b9	53		 push	 ebx
  005ba	57		 push	 edi
  005bb	52		 push	 edx
  005bc	50		 push	 eax
  005bd	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T182162[esp+152]
  005c1	51		 push	 ecx
  005c2	56		 push	 esi
  005c3	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  005c8	8b 10		 mov	 edx, DWORD PTR [eax]
  005ca	89 94 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], edx
  005d1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1424 : 		_Dest = _Rep(_Dest, _E0, _Trailing);	// put trailing zeros

  005d4	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR __Trailing$[esp+156]
  005db	52		 push	 edx
  005dc	89 8c 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], ecx
  005e3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005e6	8b 10		 mov	 edx, DWORD PTR [eax]
  005e8	6a 30		 push	 48			; 00000030H
  005ea	51		 push	 ecx
  005eb	52		 push	 edx
  005ec	8d 44 24 54	 lea	 eax, DWORD PTR $T182163[esp+176]
  005f0	50		 push	 eax
  005f1	56		 push	 esi
  005f2	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  005f7	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1425 : 		_Iosbase.width(0);

  005f9	8b 54 24 64	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+184]

; 1426 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  005fd	8b 7c 24 68	 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+184]
  00601	89 8c 24 c4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+180], ecx
  00608	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0060b	33 db		 xor	 ebx, ebx
  0060d	89 5a 18	 mov	 DWORD PTR [edx+24], ebx
  00610	8b 54 24 4c	 mov	 edx, DWORD PTR __Fillcount$[esp+184]
  00614	52		 push	 edx
  00615	8b 94 24 d4 00
	00 00		 mov	 edx, DWORD PTR __Fill$[esp+184]
  0061c	52		 push	 edx
  0061d	50		 push	 eax
  0061e	51		 push	 ecx
  0061f	57		 push	 edi
  00620	56		 push	 esi
  00621	89 84 24 e0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+208], eax
  00628	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0062d	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00632	83 c4 4c	 add	 esp, 76			; 0000004cH
  00635	39 74 24 54	 cmp	 DWORD PTR __Groupstring$[esp+156], esi
  00639	72 0d		 jb	 SHORT $LN137@Fput
  0063b	8b 44 24 40	 mov	 eax, DWORD PTR __Groupstring$[esp+136]
  0063f	50		 push	 eax
  00640	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00645	83 c4 04	 add	 esp, 4
$LN137@Fput:
  00648	c7 44 24 54 0f
	00 00 00	 mov	 DWORD PTR __Groupstring$[esp+156], 15 ; 0000000fH
  00650	89 5c 24 50	 mov	 DWORD PTR __Groupstring$[esp+152], ebx
  00654	c6 44 24 40 00	 mov	 BYTE PTR __Groupstring$[esp+136], 0
  00659	39 74 24 70	 cmp	 DWORD PTR __Grouping$[esp+156], esi
  0065d	72 0d		 jb	 SHORT $LN175@Fput
  0065f	8b 4c 24 5c	 mov	 ecx, DWORD PTR __Grouping$[esp+136]
  00663	51		 push	 ecx
  00664	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00669	83 c4 04	 add	 esp, 4
$LN175@Fput:
  0066c	8b c7		 mov	 eax, edi

; 1427 : 		}

  0066e	8b 4c 24 78	 mov	 ecx, DWORD PTR __$EHRec$[esp+132]
  00672	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00679	59		 pop	 ecx
  0067a	5f		 pop	 edi
  0067b	5e		 pop	 esi
  0067c	5d		 pop	 ebp
  0067d	5b		 pop	 ebx
  0067e	8b 4c 24 60	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+112]
  00682	33 cc		 xor	 ecx, esp
  00684	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00689	83 c4 70	 add	 esp, 112		; 00000070H
  0068c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$0:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR $T182145[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$2:
  00010	8d 4d b8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 8c	 lea	 eax, DWORD PTR [edx-116]
  0001f	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	83 c0 10	 add	 eax, 16			; 00000010H
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
PUBLIC	__Iosbase$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1
__ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
_TEXT	SEGMENT
__Lock$182714 = -76					; size = 4
$T182688 = -76						; size = 8
$T182686 = -76						; size = 8
__Prefix$ = -76						; size = 4
__Iosbase$GSCopy$ = -68					; size = 4
$T182779 = -64						; size = 1
__Punct_fac$ = -64					; size = 4
$T182689 = -60						; size = 8
$T182687 = -60						; size = 8
__Pg$130987 = -60					; size = 4
$T182678 = -52						; size = 4
___$ReturnUdt$GSCopy$ = -48				; size = 4
__Grouping$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput, COMDAT

; 1458 : 		{	// put formatted integer to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 40	 sub	 esp, 64			; 00000040H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 3c	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 54	 lea	 eax, DWORD PTR __$EHRec$[esp+96]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 44 24 68	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+92]
  00036	8b 4c 24 74	 mov	 ecx, DWORD PTR __Iosbase$[esp+92]
  0003a	8b 5c 24 7c	 mov	 ebx, DWORD PTR __Buf$[esp+92]

; 1459 : 		_DEBUG_POINTER(_Dest);
; 1460 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  0003e	8d 54 24 2c	 lea	 edx, DWORD PTR $T182678[esp+96]
  00042	52		 push	 edx
  00043	89 44 24 34	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+100], eax
  00047	89 4c 24 20	 mov	 DWORD PTR __Iosbase$GSCopy$[esp+100], ecx
  0004b	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00050	50		 push	 eax
  00051	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+108], 0
  00059	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  0005e	8b 6c 24 30	 mov	 ebp, DWORD PTR $T182678[esp+100]
  00062	83 c4 04	 add	 esp, 4
  00065	8b f0		 mov	 esi, eax
  00067	89 74 24 20	 mov	 DWORD PTR __Punct_fac$[esp+96], esi
  0006b	c7 44 24 5c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+104], -1
  00073	85 ed		 test	 ebp, ebp
  00075	74 3d		 je	 SHORT $LN22@Iput
  00077	6a 00		 push	 0
  00079	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$182714[esp+100]
  0007d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00082	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00085	85 c0		 test	 eax, eax
  00087	76 09		 jbe	 SHORT $LN24@Iput
  00089	83 f8 ff	 cmp	 eax, -1
  0008c	73 04		 jae	 SHORT $LN24@Iput
  0008e	48		 dec	 eax
  0008f	89 45 04	 mov	 DWORD PTR [ebp+4], eax
$LN24@Iput:
  00092	8b 7d 04	 mov	 edi, DWORD PTR [ebp+4]
  00095	f7 df		 neg	 edi
  00097	1b ff		 sbb	 edi, edi
  00099	f7 d7		 not	 edi
  0009b	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$182714[esp+96]
  0009f	23 fd		 and	 edi, ebp
  000a1	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000a6	85 ff		 test	 edi, edi
  000a8	74 0a		 je	 SHORT $LN22@Iput
  000aa	8b 07		 mov	 eax, DWORD PTR [edi]
  000ac	8b 10		 mov	 edx, DWORD PTR [eax]
  000ae	6a 01		 push	 1
  000b0	8b cf		 mov	 ecx, edi
  000b2	ff d2		 call	 edx
$LN22@Iput:

; 1461 : 		const string _Grouping = _Punct_fac.grouping();

  000b4	8d 44 24 34	 lea	 eax, DWORD PTR __Grouping$[esp+96]
  000b8	50		 push	 eax
  000b9	8b ce		 mov	 ecx, esi
  000bb	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping

; 1462 : 		const size_t _Prefix = *_Buf == '+' || *_Buf == '-' ? 1
; 1463 : 			: *_Buf == '0' && (_Buf[1] == 'x' || _Buf[1] == 'X') ? 2
; 1464 : 			: 0;

  000c0	8a 03		 mov	 al, BYTE PTR [ebx]
  000c2	b9 01 00 00 00	 mov	 ecx, 1
  000c7	89 4c 24 5c	 mov	 DWORD PTR __$EHRec$[esp+104], ecx
  000cb	3c 2b		 cmp	 al, 43			; 0000002bH
  000cd	74 27		 je	 SHORT $LN10@Iput
  000cf	3c 2d		 cmp	 al, 45			; 0000002dH
  000d1	74 23		 je	 SHORT $LN10@Iput
  000d3	3c 30		 cmp	 al, 48			; 00000030H
  000d5	75 15		 jne	 SHORT $LN12@Iput
  000d7	8a 43 01	 mov	 al, BYTE PTR [ebx+1]
  000da	3c 78		 cmp	 al, 120			; 00000078H
  000dc	74 04		 je	 SHORT $LN11@Iput
  000de	3c 58		 cmp	 al, 88			; 00000058H
  000e0	75 0a		 jne	 SHORT $LN12@Iput
$LN11@Iput:
  000e2	c7 44 24 14 02
	00 00 00	 mov	 DWORD PTR __Prefix$[esp+96], 2
  000ea	eb 0e		 jmp	 SHORT $LN14@Iput
$LN12@Iput:
  000ec	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __Prefix$[esp+96], 0
  000f4	eb 04		 jmp	 SHORT $LN14@Iput
$LN10@Iput:
  000f6	89 4c 24 14	 mov	 DWORD PTR __Prefix$[esp+96], ecx
$LN14@Iput:

; 1465 : 
; 1466 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  000fa	8b 4c 24 4c	 mov	 ecx, DWORD PTR __Grouping$[esp+120]
  000fe	8b 54 24 38	 mov	 edx, DWORD PTR __Grouping$[esp+100]
  00102	8b c2		 mov	 eax, edx
  00104	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00107	73 04		 jae	 SHORT $LN33@Iput
  00109	8d 44 24 38	 lea	 eax, DWORD PTR __Grouping$[esp+100]
$LN33@Iput:
  0010d	80 38 7f	 cmp	 BYTE PTR [eax], 127	; 0000007fH
  00110	74 7e		 je	 SHORT $LN87@Iput
  00112	8b c2		 mov	 eax, edx
  00114	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00117	73 04		 jae	 SHORT $LN39@Iput
  00119	8d 44 24 38	 lea	 eax, DWORD PTR __Grouping$[esp+100]
$LN39@Iput:
  0011d	80 38 00	 cmp	 BYTE PTR [eax], 0
  00120	7e 6e		 jle	 SHORT $LN87@Iput

; 1467 : 			{	// grouping specified, add thousands separators
; 1468 : 			const char *_Pg = _Grouping.c_str();

  00122	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00125	72 06		 jb	 SHORT $LN44@Iput
  00127	89 54 24 24	 mov	 DWORD PTR __Pg$130987[esp+96], edx
  0012b	eb 08		 jmp	 SHORT $LN45@Iput
$LN44@Iput:
  0012d	8d 4c 24 38	 lea	 ecx, DWORD PTR __Grouping$[esp+100]
  00131	89 4c 24 24	 mov	 DWORD PTR __Pg$130987[esp+96], ecx
$LN45@Iput:

; 1469 : 			size_t _Off = _Count;
; 1470 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1471 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00135	8b 54 24 24	 mov	 edx, DWORD PTR __Pg$130987[esp+96]
  00139	8a 02		 mov	 al, BYTE PTR [edx]
  0013b	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR __Count$[esp+92]
  00142	8b f5		 mov	 esi, ebp
  00144	3c 7f		 cmp	 al, 127			; 0000007fH
  00146	74 4f		 je	 SHORT $LN5@Iput
$LN6@Iput:
  00148	84 c0		 test	 al, al
  0014a	7e 4b		 jle	 SHORT $LN5@Iput
  0014c	8b ce		 mov	 ecx, esi
  0014e	2b 4c 24 14	 sub	 ecx, DWORD PTR __Prefix$[esp+96]
  00152	0f be c0	 movsx	 eax, al
  00155	3b c1		 cmp	 eax, ecx
  00157	73 3e		 jae	 SHORT $LN5@Iput

; 1472 : 				{	// add a NUL to mark thousands separator
; 1473 : 				_Off -= *_Pg;

  00159	2b f0		 sub	 esi, eax

; 1474 : 				_CRT_SECURE_MEMMOVE(&_Buf[_Off + 1], _Count + 1 - _Off,

  0015b	8b d5		 mov	 edx, ebp
  0015d	2b d6		 sub	 edx, esi
  0015f	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00162	50		 push	 eax
  00163	8d 3c 33	 lea	 edi, DWORD PTR [ebx+esi]
  00166	57		 push	 edi
  00167	50		 push	 eax
  00168	8d 44 33 01	 lea	 eax, DWORD PTR [ebx+esi+1]
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 _memmove_s

; 1475 : 					&_Buf[_Off],	 _Count + 1 - _Off);
; 1476 : 				_Buf[_Off] = '\0', ++_Count;
; 1477 : 				if ('\0' < _Pg[1])

  00172	8b 44 24 34	 mov	 eax, DWORD PTR __Pg$130987[esp+112]
  00176	83 c4 10	 add	 esp, 16			; 00000010H
  00179	c6 07 00	 mov	 BYTE PTR [edi], 0
  0017c	45		 inc	 ebp
  0017d	80 78 01 00	 cmp	 BYTE PTR [eax+1], 0
  00181	7e 05		 jle	 SHORT $LN4@Iput
  00183	40		 inc	 eax
  00184	89 44 24 24	 mov	 DWORD PTR __Pg$130987[esp+96], eax
$LN4@Iput:
  00188	8a 00		 mov	 al, BYTE PTR [eax]
  0018a	3c 7f		 cmp	 al, 127			; 0000007fH
  0018c	75 ba		 jne	 SHORT $LN6@Iput

; 1469 : 			size_t _Off = _Count;
; 1470 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1471 : 				&& (size_t)*_Pg < _Off - _Prefix)

  0018e	eb 07		 jmp	 SHORT $LN5@Iput
$LN87@Iput:
  00190	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR __Count$[esp+92]
$LN5@Iput:

; 1478 : 					++_Pg;	// not last group, advance
; 1479 : 				}
; 1480 : 			}
; 1481 : 
; 1482 : 		size_t _Fillcount = _Iosbase.width() <= 0
; 1483 : 			|| (size_t)_Iosbase.width() <= _Count
; 1484 : 				? 0 : (size_t)_Iosbase.width() - _Count;

  00197	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Iosbase$GSCopy$[esp+96]
  0019b	8b 79 18	 mov	 edi, DWORD PTR [ecx+24]
  0019e	85 ff		 test	 edi, edi
  001a0	7e 08		 jle	 SHORT $LN15@Iput
  001a2	3b fd		 cmp	 edi, ebp
  001a4	76 04		 jbe	 SHORT $LN15@Iput
  001a6	2b fd		 sub	 edi, ebp
  001a8	eb 02		 jmp	 SHORT $LN16@Iput
$LN15@Iput:
  001aa	33 ff		 xor	 edi, edi
$LN16@Iput:

; 1485 : 
; 1486 : 		ios_base::fmtflags _Adjustfield =
; 1487 : 			_Iosbase.flags() & ios_base::adjustfield;
; 1488 : 		if (_Adjustfield != ios_base::left
; 1489 : 			&& _Adjustfield != ios_base::internal)

  001ac	8b 74 24 64	 mov	 esi, DWORD PTR _this$[esp+92]
  001b0	8b d1		 mov	 edx, ecx
  001b2	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001b5	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  001ba	83 f8 40	 cmp	 eax, 64			; 00000040H
  001bd	0f 84 95 00 00
	00		 je	 $LN1@Iput

; 1490 : 			{	// put leading fill
; 1491 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  001c3	8b 4c 24 70	 mov	 ecx, DWORD PTR __Dest$[esp+96]
  001c7	8b 54 24 6c	 mov	 edx, DWORD PTR __Dest$[esp+92]
  001cb	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  001d0	74 28		 je	 SHORT $LN85@Iput
  001d2	8b 44 24 78	 mov	 eax, DWORD PTR __Fill$[esp+92]
  001d6	57		 push	 edi
  001d7	50		 push	 eax
  001d8	51		 push	 ecx
  001d9	52		 push	 edx
  001da	8d 44 24 24	 lea	 eax, DWORD PTR $T182686[esp+112]
  001de	50		 push	 eax
  001df	56		 push	 esi
  001e0	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  001e5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e7	89 8c 24 84 00
	00 00		 mov	 DWORD PTR __Dest$[esp+116], ecx
  001ee	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001f1	83 c4 18	 add	 esp, 24			; 00000018H
  001f4	89 54 24 70	 mov	 DWORD PTR __Dest$[esp+96], edx

; 1492 : 			_Fillcount = 0;

  001f8	eb 5c		 jmp	 SHORT $LN94@Iput
$LN85@Iput:

; 1493 : 			}
; 1494 : 		else if (_Adjustfield == ios_base::internal)
; 1495 : 			{	// put internal fill
; 1496 : 			_Dest = _Putc(_Dest, _Buf, _Prefix);	// put prefix

  001fa	8b 44 24 14	 mov	 eax, DWORD PTR __Prefix$[esp+96]
  001fe	50		 push	 eax
  001ff	53		 push	 ebx
  00200	51		 push	 ecx
  00201	52		 push	 edx
  00202	8d 44 24 34	 lea	 eax, DWORD PTR $T182687[esp+112]
  00206	50		 push	 eax
  00207	56		 push	 esi
  00208	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  0020d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0020f	89 8c 24 84 00
	00 00		 mov	 DWORD PTR __Dest$[esp+116], ecx

; 1497 : 			_Buf += _Prefix, _Count -= _Prefix;

  00216	8b 4c 24 2c	 mov	 ecx, DWORD PTR __Prefix$[esp+120]
  0021a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1498 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount), _Fillcount = 0;

  0021d	57		 push	 edi
  0021e	03 d9		 add	 ebx, ecx
  00220	2b e9		 sub	 ebp, ecx
  00222	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+120]
  00229	51		 push	 ecx
  0022a	89 94 24 90 00
	00 00		 mov	 DWORD PTR __Dest$[esp+128], edx
  00231	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00234	8b 00		 mov	 eax, DWORD PTR [eax]
  00236	52		 push	 edx
  00237	50		 push	 eax
  00238	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T182688[esp+136]
  0023c	51		 push	 ecx
  0023d	56		 push	 esi
  0023e	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00243	8b 10		 mov	 edx, DWORD PTR [eax]
  00245	89 94 24 9c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], edx
  0024c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0024f	83 c4 30	 add	 esp, 48			; 00000030H
  00252	89 44 24 70	 mov	 DWORD PTR __Dest$[esp+96], eax
$LN94@Iput:
  00256	33 ff		 xor	 edi, edi
$LN1@Iput:

; 1499 : 			}
; 1500 : 
; 1501 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1502 : 			_Punct_fac.thousands_sep());	// put field

  00258	8b 4c 24 20	 mov	 ecx, DWORD PTR __Punct_fac$[esp+96]
  0025c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0025e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00261	ff d0		 call	 eax
  00263	8b 54 24 70	 mov	 edx, DWORD PTR __Dest$[esp+96]
  00267	88 44 24 20	 mov	 BYTE PTR $T182779[esp+96], al
  0026b	8b 4c 24 20	 mov	 ecx, DWORD PTR $T182779[esp+96]
  0026f	8b 44 24 6c	 mov	 eax, DWORD PTR __Dest$[esp+92]
  00273	51		 push	 ecx
  00274	55		 push	 ebp
  00275	53		 push	 ebx
  00276	52		 push	 edx
  00277	50		 push	 eax
  00278	8d 4c 24 38	 lea	 ecx, DWORD PTR $T182689[esp+116]
  0027c	51		 push	 ecx
  0027d	56		 push	 esi
  0027e	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  00283	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1503 : 		_Iosbase.width(0);

  00285	8b 54 24 38	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+124]

; 1504 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00289	57		 push	 edi
  0028a	8b 7c 24 50	 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+128]
  0028e	89 8c 24 8c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+124], ecx
  00295	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00298	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], 0
  0029f	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR __Fill$[esp+124]
  002a6	52		 push	 edx
  002a7	50		 push	 eax
  002a8	51		 push	 ecx
  002a9	57		 push	 edi
  002aa	56		 push	 esi
  002ab	89 84 24 a4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+148], eax
  002b2	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  002b7	83 c4 34	 add	 esp, 52			; 00000034H
  002ba	83 7c 24 4c 10	 cmp	 DWORD PTR __Grouping$[esp+120], 16 ; 00000010H
  002bf	72 0d		 jb	 SHORT $LN86@Iput
  002c1	8b 44 24 38	 mov	 eax, DWORD PTR __Grouping$[esp+100]
  002c5	50		 push	 eax
  002c6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002cb	83 c4 04	 add	 esp, 4
$LN86@Iput:
  002ce	8b c7		 mov	 eax, edi

; 1505 : 		}

  002d0	8b 4c 24 54	 mov	 ecx, DWORD PTR __$EHRec$[esp+96]
  002d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002db	59		 pop	 ecx
  002dc	5f		 pop	 edi
  002dd	5e		 pop	 esi
  002de	5d		 pop	 ebp
  002df	5b		 pop	 ebx
  002e0	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+76]
  002e4	33 cc		 xor	 ecx, esp
  002e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002eb	83 c4 4c	 add	 esp, 76			; 0000004cH
  002ee	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR $T182678[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 b0	 lea	 eax, DWORD PTR [edx-80]
  00017	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	83 c0 10	 add	 eax, 16			; 00000010H
  00024	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
PUBLIC	__Iosbase$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z$2
__ehfuncinfo$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z
_TEXT	SEGMENT
__Fillcount$ = -120					; size = 4
__Pointptr$ = -120					; size = 4
__Enders$ = -116					; size = 3
$T183103 = -112						; size = 1
__Kseparator$ = -108					; size = 2
$T182951 = -108						; size = 4
__Mbst1$183102 = -104					; size = 4
__Lock$182960 = -104					; size = 4
$T182925 = -104						; size = 8
$T182924 = -104						; size = 8
$T182923 = -104						; size = 8
$T182922 = -104						; size = 8
$T182921 = -104						; size = 8
__Prefix$ = -104					; size = 4
__Wc$183101 = -96					; size = 2
$T182934 = -92						; size = 8
$T182933 = -92						; size = 8
$T182932 = -92						; size = 8
$T182929 = -92						; size = 8
$T182928 = -92						; size = 8
$T182927 = -92						; size = 8
$T182926 = -92						; size = 8
__Punct_fac$ = -92					; size = 4
__Iosbase$GSCopy$ = -84					; size = 4
$T182916 = -80						; size = 4
___$ReturnUdt$GSCopy$ = -76				; size = 4
__Groupstring$ = -72					; size = 28
__Grouping$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 2
__Buf$ = 32						; size = 4
__Beforepoint$ = 36					; size = 4
__Afterpoint$ = 40					; size = 4
__Trailing$ = 44					; size = 4
__Count$ = 48						; size = 4
?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput, COMDAT

; 1313 : 		{	// put formatted floating-point to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 68	 mov	 DWORD PTR __$ArrayPad$[esp+120], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 84 24 80 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+140]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1426 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00035	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+136]
  0003c	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR __Iosbase$[esp+136]
  00043	8b bc 24 90 00
	00 00		 mov	 edi, DWORD PTR _this$[esp+136]
  0004a	8b b4 24 a8 00
	00 00		 mov	 esi, DWORD PTR __Buf$[esp+136]
  00051	8d 54 24 3c	 lea	 edx, DWORD PTR $T182916[esp+140]
  00055	52		 push	 edx
  00056	89 44 24 44	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+144], eax
  0005a	89 4c 24 3c	 mov	 DWORD PTR __Iosbase$GSCopy$[esp+144], ecx
  0005e	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00063	33 db		 xor	 ebx, ebx
  00065	50		 push	 eax
  00066	89 9c 24 8c 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+152], ebx
  0006d	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<wchar_t> >
  00072	8b e8		 mov	 ebp, eax
  00074	8b 44 24 40	 mov	 eax, DWORD PTR $T182916[esp+144]
  00078	83 c4 04	 add	 esp, 4
  0007b	89 6c 24 30	 mov	 DWORD PTR __Punct_fac$[esp+140], ebp
  0007f	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+148], -1
  0008a	3b c3		 cmp	 eax, ebx
  0008c	74 46		 je	 SHORT $LN31@Fput@2
  0008e	53		 push	 ebx
  0008f	8d 4c 24 28	 lea	 ecx, DWORD PTR __Lock$182960[esp+144]
  00093	89 44 24 24	 mov	 DWORD PTR $T182951[esp+144], eax
  00097	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0009c	8b 4c 24 20	 mov	 ecx, DWORD PTR $T182951[esp+140]
  000a0	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000a3	3b c3		 cmp	 eax, ebx
  000a5	76 09		 jbe	 SHORT $LN33@Fput@2

; 1314 : 		_DEBUG_POINTER(_Dest);
; 1315 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  000a7	83 f8 ff	 cmp	 eax, -1
  000aa	73 04		 jae	 SHORT $LN33@Fput@2
  000ac	48		 dec	 eax
  000ad	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN33@Fput@2:
  000b0	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]
  000b3	f7 db		 neg	 ebx
  000b5	1b db		 sbb	 ebx, ebx
  000b7	f7 d3		 not	 ebx
  000b9	23 d9		 and	 ebx, ecx
  000bb	8d 4c 24 24	 lea	 ecx, DWORD PTR __Lock$182960[esp+140]
  000bf	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000c4	85 db		 test	 ebx, ebx
  000c6	74 0a		 je	 SHORT $LN183@Fput@2
  000c8	8b 03		 mov	 eax, DWORD PTR [ebx]
  000ca	8b 10		 mov	 edx, DWORD PTR [eax]
  000cc	6a 01		 push	 1
  000ce	8b cb		 mov	 ecx, ebx
  000d0	ff d2		 call	 edx
$LN183@Fput@2:
  000d2	33 db		 xor	 ebx, ebx
$LN31@Fput@2:

; 1316 : 		const string _Grouping = _Punct_fac.grouping();

  000d4	8d 44 24 60	 lea	 eax, DWORD PTR __Grouping$[esp+140]
  000d8	50		 push	 eax
  000d9	8b cd		 mov	 ecx, ebp
  000db	e8 00 00 00 00	 call	 ?grouping@?$numpunct@_W@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<wchar_t>::grouping

; 1317 : 		const _Elem _Kseparator = _Punct_fac.thousands_sep();

  000e0	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  000e3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000e6	8b cd		 mov	 ecx, ebp
  000e8	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+148], 1
  000f3	ff d0		 call	 eax
  000f5	0f b7 c8	 movzx	 ecx, ax
  000f8	89 4c 24 20	 mov	 DWORD PTR __Kseparator$[esp+140], ecx

; 1318 : 		string _Groupstring;

  000fc	c7 44 24 5c 0f
	00 00 00	 mov	 DWORD PTR __Groupstring$[esp+164], 15 ; 0000000fH
  00104	89 5c 24 58	 mov	 DWORD PTR __Groupstring$[esp+160], ebx
  00108	c6 44 24 48 00	 mov	 BYTE PTR __Groupstring$[esp+144], 0

; 1319 : 		const _Elem _E0 = _MAKLOCCHR(_Elem, '0', _Cvt);

  0010d	8d 57 08	 lea	 edx, DWORD PTR [edi+8]
  00110	52		 push	 edx
  00111	8d 44 24 28	 lea	 eax, DWORD PTR __Mbst1$183102[esp+144]
  00115	50		 push	 eax
  00116	6a 01		 push	 1
  00118	8d 4c 24 28	 lea	 ecx, DWORD PTR $T183103[esp+152]
  0011c	51		 push	 ecx
  0011d	8d 54 24 3c	 lea	 edx, DWORD PTR __Wc$183101[esp+156]
  00121	52		 push	 edx
  00122	c6 84 24 9c 00
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+168], 2
  0012a	c6 44 24 30 30	 mov	 BYTE PTR $T183103[esp+160], 48 ; 00000030H
  0012f	89 5c 24 40	 mov	 DWORD PTR __Wc$183101[esp+160], ebx
  00133	89 5c 24 38	 mov	 DWORD PTR __Mbst1$183102[esp+160], ebx
  00137	e8 00 00 00 00	 call	 __Mbrtowc

; 1320 : 		size_t _Prefix = _Buf[0] == '+' || _Buf[0] == '-' ? 1 : 0;

  0013c	8a 06		 mov	 al, BYTE PTR [esi]
  0013e	83 c4 14	 add	 esp, 20			; 00000014H
  00141	3c 2b		 cmp	 al, 43			; 0000002bH
  00143	74 08		 je	 SHORT $LN19@Fput@2
  00145	89 5c 24 24	 mov	 DWORD PTR __Prefix$[esp+140], ebx
  00149	3c 2d		 cmp	 al, 45			; 0000002dH
  0014b	75 08		 jne	 SHORT $LN20@Fput@2
$LN19@Fput@2:
  0014d	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR __Prefix$[esp+140], 1
$LN20@Fput@2:

; 1321 : 
; 1322 : 		char _Enders[3];
; 1323 : 		_Enders[0] = ::localeconv()->decimal_point[0];

  00155	e8 00 00 00 00	 call	 _localeconv
  0015a	8b 00		 mov	 eax, DWORD PTR [eax]

; 1324 : 		_Enders[1] = 'e';
; 1325 : 		_Enders[2] = '\0';
; 1326 : 
; 1327 : 		const char *_Eptr = (const char *)::memchr(_Buf,
; 1328 : 			'e', _Count);	// find exponent

  0015c	8b 9c 24 b8 00
	00 00		 mov	 ebx, DWORD PTR __Count$[esp+136]
  00163	8a 08		 mov	 cl, BYTE PTR [eax]
  00165	53		 push	 ebx
  00166	6a 65		 push	 101			; 00000065H
  00168	56		 push	 esi
  00169	88 4c 24 24	 mov	 BYTE PTR __Enders$[esp+152], cl
  0016d	c6 44 24 25 65	 mov	 BYTE PTR __Enders$[esp+153], 101 ; 00000065H
  00172	c6 44 24 26 00	 mov	 BYTE PTR __Enders$[esp+154], 0
  00177	e8 00 00 00 00	 call	 _memchr

; 1329 : 		const char *_Pointptr = (const char *)::memchr(_Buf,
; 1330 : 			_Enders[0], _Count);	// find decimal point

  0017c	0f be 54 24 24	 movsx	 edx, BYTE PTR __Enders$[esp+152]
  00181	53		 push	 ebx
  00182	52		 push	 edx
  00183	56		 push	 esi
  00184	8b e8		 mov	 ebp, eax
  00186	e8 00 00 00 00	 call	 _memchr
  0018b	83 c4 18	 add	 esp, 24			; 00000018H
  0018e	89 44 24 14	 mov	 DWORD PTR __Pointptr$[esp+140], eax

; 1331 : 		if (_Pointptr == 0)

  00192	85 c0		 test	 eax, eax
  00194	75 07		 jne	 SHORT $LN16@Fput@2

; 1332 : 			_Trailing = 0;

  00196	89 84 24 b4 00
	00 00		 mov	 DWORD PTR __Trailing$[esp+136], eax
$LN16@Fput@2:

; 1333 : 
; 1334 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  0019d	8b 54 24 78	 mov	 edx, DWORD PTR __Grouping$[esp+164]
  001a1	8b 44 24 64	 mov	 eax, DWORD PTR __Grouping$[esp+144]
  001a5	8b c8		 mov	 ecx, eax
  001a7	83 fa 10	 cmp	 edx, 16			; 00000010H
  001aa	73 04		 jae	 SHORT $LN78@Fput@2
  001ac	8d 4c 24 64	 lea	 ecx, DWORD PTR __Grouping$[esp+144]
$LN78@Fput@2:
  001b0	80 39 7f	 cmp	 BYTE PTR [ecx], 127	; 0000007fH
  001b3	0f 84 52 01 00
	00		 je	 $LN105@Fput@2
  001b9	83 fa 10	 cmp	 edx, 16			; 00000010H
  001bc	73 04		 jae	 SHORT $LN84@Fput@2
  001be	8d 44 24 64	 lea	 eax, DWORD PTR __Grouping$[esp+144]
$LN84@Fput@2:
  001c2	80 38 00	 cmp	 BYTE PTR [eax], 0
  001c5	0f 8e 40 01 00
	00		 jle	 $LN105@Fput@2

; 1335 : 			{	// grouping specified, add thousands separators
; 1336 : 			_Groupstring.append(_Buf, _Count);	// assemble field into string

  001cb	53		 push	 ebx
  001cc	56		 push	 esi
  001cd	8d 4c 24 4c	 lea	 ecx, DWORD PTR __Groupstring$[esp+148]
  001d1	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1337 : 			if (_Eptr == 0)

  001d6	85 ed		 test	 ebp, ebp
  001d8	75 19		 jne	 SHORT $LN14@Fput@2

; 1338 : 				_Groupstring.append(_Trailing, '0');

  001da	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR __Trailing$[esp+136]
  001e1	6a 30		 push	 48			; 00000030H
  001e3	50		 push	 eax
  001e4	8d 4c 24 4c	 lea	 ecx, DWORD PTR __Groupstring$[esp+148]
  001e8	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1339 : 			else

  001ed	8b 5c 24 14	 mov	 ebx, DWORD PTR __Pointptr$[esp+140]
  001f1	eb 38		 jmp	 SHORT $LN13@Fput@2
$LN14@Fput@2:

; 1340 : 				{	/* dispose of any zeros before exponent */
; 1341 : 				if (_Pointptr == 0)

  001f3	8b 5c 24 14	 mov	 ebx, DWORD PTR __Pointptr$[esp+140]
  001f7	85 db		 test	 ebx, ebx
  001f9	75 1a		 jne	 SHORT $LN12@Fput@2

; 1342 : 					{	/* no point but exponent, put scaling zeros */
; 1343 : 					_Groupstring.append(_Beforepoint, '0');

  001fb	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR __Beforepoint$[esp+136]
  00202	6a 30		 push	 48			; 00000030H
  00204	51		 push	 ecx
  00205	8d 4c 24 4c	 lea	 ecx, DWORD PTR __Groupstring$[esp+148]
  00209	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1344 : 					_Beforepoint = 0;

  0020e	89 9c 24 ac 00
	00 00		 mov	 DWORD PTR __Beforepoint$[esp+136], ebx
$LN12@Fput@2:

; 1345 : 					}
; 1346 : 				_Groupstring.insert(_Eptr - _Buf, _Trailing, '0');

  00215	8b 94 24 b4 00
	00 00		 mov	 edx, DWORD PTR __Trailing$[esp+136]
  0021c	6a 30		 push	 48			; 00000030H
  0021e	52		 push	 edx
  0021f	2b ee		 sub	 ebp, esi
  00221	55		 push	 ebp
  00222	8d 4c 24 50	 lea	 ecx, DWORD PTR __Groupstring$[esp+152]
  00226	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
$LN13@Fput@2:

; 1347 : 				}
; 1348 : 			_Trailing = 0;
; 1349 : 
; 1350 : 			if (_Pointptr == 0)
; 1351 : 				_Groupstring.append(_Beforepoint, '0');

  0022b	6a 30		 push	 48			; 00000030H
  0022d	85 db		 test	 ebx, ebx
  0022f	75 13		 jne	 SHORT $LN11@Fput@2
  00231	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR __Beforepoint$[esp+140]
  00238	50		 push	 eax
  00239	8d 4c 24 4c	 lea	 ecx, DWORD PTR __Groupstring$[esp+148]
  0023d	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1352 : 			else

  00242	eb 36		 jmp	 SHORT $LN10@Fput@2
$LN11@Fput@2:

; 1353 : 				{	// fill in zeros around decimal point
; 1354 : 				_Groupstring.insert(_Pointptr - _Buf + 1, _Afterpoint, '0');

  00244	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR __Afterpoint$[esp+140]
  0024b	2b de		 sub	 ebx, esi
  0024d	51		 push	 ecx
  0024e	8d 53 01	 lea	 edx, DWORD PTR [ebx+1]
  00251	52		 push	 edx
  00252	8d 4c 24 50	 lea	 ecx, DWORD PTR __Groupstring$[esp+152]
  00256	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1355 : 				_Groupstring.insert(_Pointptr - _Buf, _Beforepoint, '0');

  0025b	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR __Beforepoint$[esp+136]
  00262	6a 30		 push	 48			; 00000030H
  00264	50		 push	 eax
  00265	53		 push	 ebx
  00266	8d 4c 24 50	 lea	 ecx, DWORD PTR __Groupstring$[esp+152]
  0026a	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1356 : 				_Afterpoint = 0;

  0026f	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Afterpoint$[esp+136], 0
$LN10@Fput@2:

; 1357 : 				}
; 1358 : 			_Beforepoint = 0;
; 1359 : 
; 1360 : 			const char *_Pg = _Grouping.c_str();

  0027a	8b 5c 24 64	 mov	 ebx, DWORD PTR __Grouping$[esp+144]
  0027e	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  00283	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Beforepoint$[esp+136], 0
  0028e	39 6c 24 78	 cmp	 DWORD PTR __Grouping$[esp+164], ebp
  00292	73 04		 jae	 SHORT $LN90@Fput@2
  00294	8d 5c 24 64	 lea	 ebx, DWORD PTR __Grouping$[esp+144]
$LN90@Fput@2:

; 1361 : 			size_t _Off = ::strcspn(&_Groupstring[0], &_Enders[0]);

  00298	8b 44 24 48	 mov	 eax, DWORD PTR __Groupstring$[esp+144]
  0029c	39 6c 24 5c	 cmp	 DWORD PTR __Groupstring$[esp+164], ebp
  002a0	73 04		 jae	 SHORT $LN97@Fput@2
  002a2	8d 44 24 48	 lea	 eax, DWORD PTR __Groupstring$[esp+144]
$LN97@Fput@2:
  002a6	8d 4c 24 18	 lea	 ecx, DWORD PTR __Enders$[esp+140]
  002aa	51		 push	 ecx
  002ab	50		 push	 eax
  002ac	e8 00 00 00 00	 call	 _strcspn
  002b1	8b f0		 mov	 esi, eax

; 1362 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1363 : 				&& (size_t)*_Pg < _Off - _Prefix)

  002b3	8a 03		 mov	 al, BYTE PTR [ebx]
  002b5	83 c4 08	 add	 esp, 8
  002b8	3c 7f		 cmp	 al, 127			; 0000007fH
  002ba	74 32		 je	 SHORT $LN8@Fput@2
  002bc	8d 64 24 00	 npad	 4
$LL9@Fput@2:
  002c0	84 c0		 test	 al, al
  002c2	7e 2a		 jle	 SHORT $LN8@Fput@2
  002c4	8b d6		 mov	 edx, esi
  002c6	2b 54 24 24	 sub	 edx, DWORD PTR __Prefix$[esp+140]
  002ca	0f be c0	 movsx	 eax, al
  002cd	3b c2		 cmp	 eax, edx
  002cf	73 1d		 jae	 SHORT $LN8@Fput@2

; 1364 : 				{	// add a NUL to mark thousands separator
; 1365 : 				_Groupstring.insert(_Off -= *_Pg, (size_t)1, '\0');

  002d1	6a 00		 push	 0
  002d3	2b f0		 sub	 esi, eax
  002d5	6a 01		 push	 1
  002d7	56		 push	 esi
  002d8	8d 4c 24 50	 lea	 ecx, DWORD PTR __Groupstring$[esp+152]
  002dc	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1366 : 				if ('\0' < _Pg[1])

  002e1	80 7b 01 00	 cmp	 BYTE PTR [ebx+1], 0
  002e5	7e 01		 jle	 SHORT $LN7@Fput@2

; 1362 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1363 : 				&& (size_t)*_Pg < _Off - _Prefix)

  002e7	43		 inc	 ebx
$LN7@Fput@2:
  002e8	8a 03		 mov	 al, BYTE PTR [ebx]
  002ea	3c 7f		 cmp	 al, 127			; 0000007fH
  002ec	75 d2		 jne	 SHORT $LL9@Fput@2
$LN8@Fput@2:

; 1367 : 					++_Pg;	// not last group, advance
; 1368 : 				}
; 1369 : 
; 1370 : 			_Buf = &_Groupstring[0];

  002ee	8b 74 24 48	 mov	 esi, DWORD PTR __Groupstring$[esp+144]
  002f2	39 6c 24 5c	 cmp	 DWORD PTR __Groupstring$[esp+164], ebp
  002f6	73 04		 jae	 SHORT $LN104@Fput@2
  002f8	8d 74 24 48	 lea	 esi, DWORD PTR __Groupstring$[esp+144]
$LN104@Fput@2:

; 1371 : 			_Trailing = 0;
; 1372 : 			_Count = _Groupstring.size();

  002fc	8b 5c 24 58	 mov	 ebx, DWORD PTR __Groupstring$[esp+160]
  00300	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Trailing$[esp+136], 0
$LN105@Fput@2:

; 1373 : 			}
; 1374 : 
; 1375 : 		size_t _Fillcount = _Beforepoint + _Afterpoint + _Trailing + _Count;

  0030b	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR __Afterpoint$[esp+136]
  00312	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR __Beforepoint$[esp+136]

; 1376 : 		_Fillcount = _Iosbase.width() <= 0
; 1377 : 			|| (size_t)_Iosbase.width() <= _Fillcount
; 1378 : 				? 0 : (size_t)_Iosbase.width() - _Fillcount;

  00319	8b 54 24 38	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+140]
  0031d	03 c1		 add	 eax, ecx
  0031f	03 84 24 b4 00
	00 00		 add	 eax, DWORD PTR __Trailing$[esp+136]
  00326	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00329	03 c3		 add	 eax, ebx
  0032b	85 c9		 test	 ecx, ecx
  0032d	7e 0c		 jle	 SHORT $LN21@Fput@2
  0032f	3b c8		 cmp	 ecx, eax
  00331	76 08		 jbe	 SHORT $LN21@Fput@2
  00333	2b c8		 sub	 ecx, eax
  00335	89 4c 24 14	 mov	 DWORD PTR __Fillcount$[esp+140], ecx
  00339	eb 08		 jmp	 SHORT $LN22@Fput@2
$LN21@Fput@2:
  0033b	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __Fillcount$[esp+140], 0
$LN22@Fput@2:

; 1379 : 		ios_base::fmtflags _Adjustfield =
; 1380 : 			_Iosbase.flags() & ios_base::adjustfield;

  00343	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00346	25 c0 01 00 00	 and	 eax, 448		; 000001c0H

; 1381 : 		if (_Adjustfield != ios_base::left
; 1382 : 			&& _Adjustfield != ios_base::internal)

  0034b	83 f8 40	 cmp	 eax, 64			; 00000040H
  0034e	0f 84 c7 00 00
	00		 je	 $LN4@Fput@2
  00354	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00359	74 3d		 je	 SHORT $LN174@Fput@2

; 1383 : 			{	// put leading fill
; 1384 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  0035b	8b 54 24 14	 mov	 edx, DWORD PTR __Fillcount$[esp+140]
  0035f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+136]
  00366	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+140]
  0036d	52		 push	 edx
  0036e	8b 94 24 9c 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+140]
  00375	50		 push	 eax
  00376	51		 push	 ecx
  00377	52		 push	 edx
  00378	8d 44 24 34	 lea	 eax, DWORD PTR $T182921[esp+156]
  0037c	50		 push	 eax
  0037d	57		 push	 edi
  0037e	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00383	8b 08		 mov	 ecx, DWORD PTR [eax]
  00385	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], ecx
  0038c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0038f	89 94 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], edx

; 1385 : 			_Fillcount = 0;

  00396	eb 78		 jmp	 SHORT $LN186@Fput@2
$LN174@Fput@2:

; 1386 : 			}
; 1387 : 		else if (_Adjustfield == ios_base::internal)
; 1388 : 			{	// put internal fill
; 1389 : 			if (0 < _Prefix)

  00398	83 7c 24 24 00	 cmp	 DWORD PTR __Prefix$[esp+140], 0
  0039d	76 36		 jbe	 SHORT $LN3@Fput@2

; 1390 : 				{	// but first put sign
; 1391 : 				_Dest = _Putc(_Dest, _Buf, 1);

  0039f	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+140]
  003a6	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+136]
  003ad	6a 01		 push	 1
  003af	56		 push	 esi
  003b0	50		 push	 eax
  003b1	51		 push	 ecx
  003b2	8d 54 24 34	 lea	 edx, DWORD PTR $T182922[esp+156]
  003b6	52		 push	 edx
  003b7	57		 push	 edi
  003b8	e8 00 00 00 00	 call	 ?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc
  003bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  003bf	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], ecx
  003c6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  003c9	83 c4 18	 add	 esp, 24			; 00000018H

; 1392 : 				++_Buf, --_Count;

  003cc	46		 inc	 esi
  003cd	89 94 24 9c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], edx
  003d4	4b		 dec	 ebx
$LN3@Fput@2:

; 1393 : 				}
; 1394 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  003d5	8b 44 24 14	 mov	 eax, DWORD PTR __Fillcount$[esp+140]
  003d9	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+136]
  003e0	8b 94 24 9c 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+140]
  003e7	50		 push	 eax
  003e8	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+140]
  003ef	51		 push	 ecx
  003f0	52		 push	 edx
  003f1	50		 push	 eax
  003f2	8d 4c 24 34	 lea	 ecx, DWORD PTR $T182923[esp+156]
  003f6	51		 push	 ecx
  003f7	57		 push	 edi
  003f8	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  003fd	8b 10		 mov	 edx, DWORD PTR [eax]
  003ff	89 94 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], edx
  00406	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00409	89 84 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], eax
$LN186@Fput@2:

; 1395 : 			_Fillcount = 0;

  00410	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR __Fillcount$[esp+164], 0
  00418	83 c4 18	 add	 esp, 24			; 00000018H
$LN4@Fput@2:

; 1396 : 			}
; 1397 : 
; 1398 : 		_Pointptr = (const char *)::memchr(_Buf,
; 1399 : 			_Enders[0], _Count);	// find decimal point again

  0041b	0f be 4c 24 18	 movsx	 ecx, BYTE PTR __Enders$[esp+140]
  00420	53		 push	 ebx
  00421	51		 push	 ecx
  00422	56		 push	 esi
  00423	e8 00 00 00 00	 call	 _memchr
  00428	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1400 : 		if (_Pointptr != 0)

  0042b	85 c0		 test	 eax, eax
  0042d	0f 84 ea 00 00
	00		 je	 $LN2@Fput@2

; 1401 : 			{	// has decimal point, put pieces and zero fills
; 1402 : 			size_t _Fracoffset = _Pointptr - _Buf + 1;
; 1403 : 			_Dest = _Putgrouped(_Dest, _Buf, _Fracoffset - 1, _Kseparator);

  00433	8b 54 24 20	 mov	 edx, DWORD PTR __Kseparator$[esp+140]
  00437	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+140]
  0043e	2b c6		 sub	 eax, esi
  00440	40		 inc	 eax
  00441	52		 push	 edx
  00442	8b 94 24 9c 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+140]
  00449	8b e8		 mov	 ebp, eax
  0044b	8d 45 ff	 lea	 eax, DWORD PTR [ebp-1]
  0044e	50		 push	 eax
  0044f	56		 push	 esi
  00450	51		 push	 ecx
  00451	52		 push	 edx
  00452	8d 44 24 38	 lea	 eax, DWORD PTR $T182924[esp+160]
  00456	50		 push	 eax
  00457	57		 push	 edi
  00458	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped
  0045d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0045f	89 8c 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], ecx
  00466	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1404 : 			_Dest = _Rep(_Dest, _E0, _Beforepoint);

  00469	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR __Beforepoint$[esp+164]
  00470	51		 push	 ecx
  00471	89 94 24 bc 00
	00 00		 mov	 DWORD PTR __Dest$[esp+172], edx
  00478	8b 54 24 4c	 mov	 edx, DWORD PTR __Wc$183101[esp+172]
  0047c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0047f	52		 push	 edx
  00480	8b 10		 mov	 edx, DWORD PTR [eax]
  00482	51		 push	 ecx
  00483	52		 push	 edx
  00484	8d 44 24 50	 lea	 eax, DWORD PTR $T182925[esp+184]
  00488	50		 push	 eax
  00489	57		 push	 edi
  0048a	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  0048f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00491	89 8c 24 cc 00
	00 00		 mov	 DWORD PTR __Dest$[esp+188], ecx
  00498	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1405 : 			_Dest = _Rep(_Dest, _Punct_fac.decimal_point(), 1);

  0049b	8b 4c 24 64	 mov	 ecx, DWORD PTR __Punct_fac$[esp+192]
  0049f	89 94 24 d0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+192], edx
  004a6	8b 01		 mov	 eax, DWORD PTR [ecx]
  004a8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  004ab	83 c4 34	 add	 esp, 52			; 00000034H
  004ae	ff d2		 call	 edx
  004b0	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+136]
  004b7	0f b7 c0	 movzx	 eax, ax
  004ba	6a 01		 push	 1
  004bc	50		 push	 eax
  004bd	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+148]
  004c4	50		 push	 eax
  004c5	51		 push	 ecx
  004c6	8d 54 24 40	 lea	 edx, DWORD PTR $T182926[esp+156]
  004ca	52		 push	 edx
  004cb	57		 push	 edi
  004cc	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  004d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  004d3	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], ecx
  004da	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1406 : 			_Dest = _Rep(_Dest, _E0, _Afterpoint);

  004dd	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR __Afterpoint$[esp+160]
  004e4	51		 push	 ecx
  004e5	89 94 24 b8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+168], edx
  004ec	8b 54 24 48	 mov	 edx, DWORD PTR __Wc$183101[esp+168]
  004f0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004f3	52		 push	 edx
  004f4	8b 10		 mov	 edx, DWORD PTR [eax]
  004f6	51		 push	 ecx
  004f7	52		 push	 edx
  004f8	8d 44 24 58	 lea	 eax, DWORD PTR $T182927[esp+180]
  004fc	50		 push	 eax
  004fd	57		 push	 edi
  004fe	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00503	8b 08		 mov	 ecx, DWORD PTR [eax]
  00505	89 8c 24 c8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+184], ecx
  0050c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0050f	83 c4 30	 add	 esp, 48			; 00000030H

; 1407 : 			_Buf += _Fracoffset, _Count -= _Fracoffset;

  00512	03 f5		 add	 esi, ebp
  00514	89 94 24 9c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], edx
  0051b	2b dd		 sub	 ebx, ebp
$LN2@Fput@2:

; 1408 : 			}
; 1409 : 
; 1410 : 		_Eptr = (const char *)::memchr(_Buf,
; 1411 : 			'e', _Count);	// find exponent again

  0051d	53		 push	 ebx
  0051e	6a 65		 push	 101			; 00000065H
  00520	56		 push	 esi
  00521	e8 00 00 00 00	 call	 _memchr
  00526	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1412 : 		if (_Eptr != 0)

  00529	85 c0		 test	 eax, eax
  0052b	0f 84 c0 00 00
	00		 je	 $LN1@Fput@2

; 1413 : 			{	// has exponent field, put it out
; 1414 : 			size_t _Expoffset = _Eptr - _Buf + 1;
; 1415 : 			_Dest = _Putgrouped(_Dest, _Buf, _Expoffset - 1, _Kseparator);

  00531	8b 94 24 9c 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+140]
  00538	2b c6		 sub	 eax, esi
  0053a	40		 inc	 eax
  0053b	8b e8		 mov	 ebp, eax
  0053d	8b 44 24 20	 mov	 eax, DWORD PTR __Kseparator$[esp+140]
  00541	50		 push	 eax
  00542	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+140]
  00549	8d 4d ff	 lea	 ecx, DWORD PTR [ebp-1]
  0054c	51		 push	 ecx
  0054d	56		 push	 esi
  0054e	52		 push	 edx
  0054f	50		 push	 eax
  00550	8d 4c 24 44	 lea	 ecx, DWORD PTR $T182928[esp+160]
  00554	51		 push	 ecx
  00555	57		 push	 edi
  00556	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped
  0055b	8b 10		 mov	 edx, DWORD PTR [eax]
  0055d	89 94 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], edx
  00564	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1416 : 			_Dest = _Rep(_Dest, _E0, _Trailing), _Trailing = 0;

  00567	8b 94 24 d0 00
	00 00		 mov	 edx, DWORD PTR __Trailing$[esp+164]
  0056e	52		 push	 edx
  0056f	89 8c 24 bc 00
	00 00		 mov	 DWORD PTR __Dest$[esp+172], ecx
  00576	8b 4c 24 4c	 mov	 ecx, DWORD PTR __Wc$183101[esp+172]
  0057a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0057d	8b 00		 mov	 eax, DWORD PTR [eax]
  0057f	51		 push	 ecx
  00580	52		 push	 edx
  00581	50		 push	 eax
  00582	8d 4c 24 5c	 lea	 ecx, DWORD PTR $T182929[esp+184]
  00586	51		 push	 ecx
  00587	57		 push	 edi
  00588	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  0058d	8b 10		 mov	 edx, DWORD PTR [eax]
  0058f	89 94 24 cc 00
	00 00		 mov	 DWORD PTR __Dest$[esp+188], edx
  00596	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1417 : 			_Dest = _Putc(_Dest, _Iosbase.flags() & ios_base::uppercase
; 1418 : 				? "E" : "e", 1);

  00599	8b 54 24 6c	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+192]
  0059d	83 c4 34	 add	 esp, 52			; 00000034H
  005a0	f6 42 10 04	 test	 BYTE PTR [edx+16], 4
  005a4	89 8c 24 9c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], ecx
  005ab	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Trailing$[esp+136], 0
  005b6	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01DDCIFGEA@E?$AA@
  005bb	75 05		 jne	 SHORT $LN24@Fput@2
  005bd	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01KGKMHCOC@e?$AA@
$LN24@Fput@2:
  005c2	8b 10		 mov	 edx, DWORD PTR [eax]
  005c4	6a 01		 push	 1
  005c6	51		 push	 ecx
  005c7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005ca	51		 push	 ecx
  005cb	52		 push	 edx
  005cc	8d 44 24 40	 lea	 eax, DWORD PTR $T182932[esp+156]
  005d0	50		 push	 eax
  005d1	57		 push	 edi
  005d2	e8 00 00 00 00	 call	 ?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc
  005d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  005d9	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], ecx
  005e0	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  005e3	83 c4 18	 add	 esp, 24			; 00000018H

; 1419 : 			_Buf += _Expoffset, _Count -= _Expoffset;

  005e6	03 f5		 add	 esi, ebp
  005e8	89 94 24 9c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], edx
  005ef	2b dd		 sub	 ebx, ebp
$LN1@Fput@2:

; 1420 : 			}
; 1421 : 
; 1422 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1423 : 			_Kseparator);	// put leftover field

  005f1	8b 44 24 20	 mov	 eax, DWORD PTR __Kseparator$[esp+140]
  005f5	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+140]
  005fc	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+136]
  00603	50		 push	 eax
  00604	53		 push	 ebx
  00605	56		 push	 esi
  00606	51		 push	 ecx
  00607	52		 push	 edx
  00608	8d 44 24 44	 lea	 eax, DWORD PTR $T182933[esp+160]
  0060c	50		 push	 eax
  0060d	57		 push	 edi
  0060e	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped
  00613	8b 08		 mov	 ecx, DWORD PTR [eax]
  00615	89 8c 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], ecx
  0061c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1424 : 		_Dest = _Rep(_Dest, _E0, _Trailing);	// put trailing zeros

  0061f	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR __Trailing$[esp+164]
  00626	51		 push	 ecx
  00627	89 94 24 bc 00
	00 00		 mov	 DWORD PTR __Dest$[esp+172], edx
  0062e	8b 54 24 4c	 mov	 edx, DWORD PTR __Wc$183101[esp+172]
  00632	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00635	52		 push	 edx
  00636	8b 10		 mov	 edx, DWORD PTR [eax]
  00638	51		 push	 ecx
  00639	52		 push	 edx
  0063a	8d 44 24 5c	 lea	 eax, DWORD PTR $T182934[esp+184]
  0063e	50		 push	 eax
  0063f	57		 push	 edi
  00640	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00645	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1425 : 		_Iosbase.width(0);

  00647	8b 54 24 6c	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+192]

; 1426 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0064b	8b 74 24 74	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+192]
  0064f	89 8c 24 cc 00
	00 00		 mov	 DWORD PTR __Dest$[esp+188], ecx
  00656	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00659	33 db		 xor	 ebx, ebx
  0065b	89 5a 18	 mov	 DWORD PTR [edx+24], ebx
  0065e	8b 54 24 48	 mov	 edx, DWORD PTR __Fillcount$[esp+192]
  00662	52		 push	 edx
  00663	8b 94 24 dc 00
	00 00		 mov	 edx, DWORD PTR __Fill$[esp+192]
  0066a	52		 push	 edx
  0066b	50		 push	 eax
  0066c	51		 push	 ecx
  0066d	56		 push	 esi
  0066e	57		 push	 edi
  0066f	89 84 24 e8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+216], eax
  00676	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  0067b	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  00680	83 c4 4c	 add	 esp, 76			; 0000004cH
  00683	39 7c 24 5c	 cmp	 DWORD PTR __Groupstring$[esp+164], edi
  00687	72 0d		 jb	 SHORT $LN137@Fput@2
  00689	8b 44 24 48	 mov	 eax, DWORD PTR __Groupstring$[esp+144]
  0068d	50		 push	 eax
  0068e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00693	83 c4 04	 add	 esp, 4
$LN137@Fput@2:
  00696	c7 44 24 5c 0f
	00 00 00	 mov	 DWORD PTR __Groupstring$[esp+164], 15 ; 0000000fH
  0069e	89 5c 24 58	 mov	 DWORD PTR __Groupstring$[esp+160], ebx
  006a2	c6 44 24 48 00	 mov	 BYTE PTR __Groupstring$[esp+144], 0
  006a7	39 7c 24 78	 cmp	 DWORD PTR __Grouping$[esp+164], edi
  006ab	72 0d		 jb	 SHORT $LN175@Fput@2
  006ad	8b 4c 24 64	 mov	 ecx, DWORD PTR __Grouping$[esp+144]
  006b1	51		 push	 ecx
  006b2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  006b7	83 c4 04	 add	 esp, 4
$LN175@Fput@2:
  006ba	8b c6		 mov	 eax, esi

; 1427 : 		}

  006bc	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+140]
  006c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  006ca	59		 pop	 ecx
  006cb	5f		 pop	 edi
  006cc	5e		 pop	 esi
  006cd	5d		 pop	 ebp
  006ce	5b		 pop	 ebx
  006cf	8b 4c 24 68	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+120]
  006d3	33 cc		 xor	 ecx, esp
  006d5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006da	83 c4 78	 add	 esp, 120		; 00000078H
  006dd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T182916[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z$2:
  00010	8d 4d b8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 84	 lea	 eax, DWORD PTR [edx-124]
  0001f	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	83 c0 10	 add	 eax, 16			; 00000010H
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput
PUBLIC	__Iosbase$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$1
__ehfuncinfo$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z
_TEXT	SEGMENT
__Lock$183489 = -84					; size = 4
$T183463 = -84						; size = 8
$T183461 = -84						; size = 8
__Prefix$ = -84						; size = 4
_this$GSCopy$ = -76					; size = 4
$T183462 = -72						; size = 8
__Pg$131109 = -72					; size = 4
__Iosbase$GSCopy$ = -64					; size = 4
___$ReturnUdt$GSCopy$ = -60				; size = 4
$T183453 = -56						; size = 4
$T183464 = -52						; size = 8
__Punct_fac$ = -52					; size = 4
__Grouping$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 2
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput, COMDAT

; 1458 : 		{	// put formatted integer to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 48	 sub	 esp, 72			; 00000048H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 44	 mov	 DWORD PTR __$ArrayPad$[esp+84], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 5c	 lea	 eax, DWORD PTR __$EHRec$[esp+104]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1504 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00032	8b 4c 24 70	 mov	 ecx, DWORD PTR ___$ReturnUdt$[esp+100]
  00036	8b 44 24 6c	 mov	 eax, DWORD PTR _this$[esp+100]
  0003a	8b 9c 24 84 00
	00 00		 mov	 ebx, DWORD PTR __Buf$[esp+100]
  00041	89 4c 24 2c	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+104], ecx
  00045	8b 4c 24 7c	 mov	 ecx, DWORD PTR __Iosbase$[esp+100]
  00049	8d 54 24 30	 lea	 edx, DWORD PTR $T183453[esp+104]
  0004d	52		 push	 edx
  0004e	89 44 24 20	 mov	 DWORD PTR _this$GSCopy$[esp+108], eax
  00052	89 4c 24 2c	 mov	 DWORD PTR __Iosbase$GSCopy$[esp+108], ecx
  00056	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  0005b	50		 push	 eax
  0005c	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+116], 0
  00064	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<wchar_t> >
  00069	8b 7c 24 34	 mov	 edi, DWORD PTR $T183453[esp+108]
  0006d	83 c4 04	 add	 esp, 4
  00070	8b e8		 mov	 ebp, eax
  00072	89 6c 24 34	 mov	 DWORD PTR __Punct_fac$[esp+104], ebp
  00076	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+112], -1
  0007e	85 ff		 test	 edi, edi
  00080	74 3d		 je	 SHORT $LN22@Iput@2
  00082	6a 00		 push	 0
  00084	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$183489[esp+108]
  00088	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0008d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00090	85 c0		 test	 eax, eax
  00092	76 09		 jbe	 SHORT $LN24@Iput@2

; 1459 : 		_DEBUG_POINTER(_Dest);
; 1460 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  00094	83 f8 ff	 cmp	 eax, -1
  00097	73 04		 jae	 SHORT $LN24@Iput@2
  00099	48		 dec	 eax
  0009a	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN24@Iput@2:
  0009d	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  000a0	f7 de		 neg	 esi
  000a2	1b f6		 sbb	 esi, esi
  000a4	f7 d6		 not	 esi
  000a6	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$183489[esp+104]
  000aa	23 f7		 and	 esi, edi
  000ac	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000b1	85 f6		 test	 esi, esi
  000b3	74 0a		 je	 SHORT $LN22@Iput@2
  000b5	8b 06		 mov	 eax, DWORD PTR [esi]
  000b7	8b 10		 mov	 edx, DWORD PTR [eax]
  000b9	6a 01		 push	 1
  000bb	8b ce		 mov	 ecx, esi
  000bd	ff d2		 call	 edx
$LN22@Iput@2:

; 1461 : 		const string _Grouping = _Punct_fac.grouping();

  000bf	8d 44 24 3c	 lea	 eax, DWORD PTR __Grouping$[esp+104]
  000c3	50		 push	 eax
  000c4	8b cd		 mov	 ecx, ebp
  000c6	e8 00 00 00 00	 call	 ?grouping@?$numpunct@_W@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<wchar_t>::grouping

; 1462 : 		const size_t _Prefix = *_Buf == '+' || *_Buf == '-' ? 1
; 1463 : 			: *_Buf == '0' && (_Buf[1] == 'x' || _Buf[1] == 'X') ? 2
; 1464 : 			: 0;

  000cb	8a 03		 mov	 al, BYTE PTR [ebx]
  000cd	b9 01 00 00 00	 mov	 ecx, 1
  000d2	89 4c 24 64	 mov	 DWORD PTR __$EHRec$[esp+112], ecx
  000d6	3c 2b		 cmp	 al, 43			; 0000002bH
  000d8	74 27		 je	 SHORT $LN10@Iput@2
  000da	3c 2d		 cmp	 al, 45			; 0000002dH
  000dc	74 23		 je	 SHORT $LN10@Iput@2
  000de	3c 30		 cmp	 al, 48			; 00000030H
  000e0	75 15		 jne	 SHORT $LN12@Iput@2
  000e2	8a 43 01	 mov	 al, BYTE PTR [ebx+1]
  000e5	3c 78		 cmp	 al, 120			; 00000078H
  000e7	74 04		 je	 SHORT $LN11@Iput@2
  000e9	3c 58		 cmp	 al, 88			; 00000058H
  000eb	75 0a		 jne	 SHORT $LN12@Iput@2
$LN11@Iput@2:
  000ed	c7 44 24 14 02
	00 00 00	 mov	 DWORD PTR __Prefix$[esp+104], 2
  000f5	eb 0e		 jmp	 SHORT $LN14@Iput@2
$LN12@Iput@2:
  000f7	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __Prefix$[esp+104], 0
  000ff	eb 04		 jmp	 SHORT $LN14@Iput@2
$LN10@Iput@2:
  00101	89 4c 24 14	 mov	 DWORD PTR __Prefix$[esp+104], ecx
$LN14@Iput@2:

; 1465 : 
; 1466 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  00105	8b 4c 24 54	 mov	 ecx, DWORD PTR __Grouping$[esp+128]
  00109	8b 54 24 40	 mov	 edx, DWORD PTR __Grouping$[esp+108]
  0010d	8b c2		 mov	 eax, edx
  0010f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00112	73 04		 jae	 SHORT $LN33@Iput@2
  00114	8d 44 24 40	 lea	 eax, DWORD PTR __Grouping$[esp+108]
$LN33@Iput@2:
  00118	80 38 7f	 cmp	 BYTE PTR [eax], 127	; 0000007fH
  0011b	74 7e		 je	 SHORT $LN87@Iput@2
  0011d	8b c2		 mov	 eax, edx
  0011f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00122	73 04		 jae	 SHORT $LN39@Iput@2
  00124	8d 44 24 40	 lea	 eax, DWORD PTR __Grouping$[esp+108]
$LN39@Iput@2:
  00128	80 38 00	 cmp	 BYTE PTR [eax], 0
  0012b	7e 6e		 jle	 SHORT $LN87@Iput@2

; 1467 : 			{	// grouping specified, add thousands separators
; 1468 : 			const char *_Pg = _Grouping.c_str();

  0012d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00130	72 06		 jb	 SHORT $LN44@Iput@2
  00132	89 54 24 20	 mov	 DWORD PTR __Pg$131109[esp+104], edx
  00136	eb 08		 jmp	 SHORT $LN45@Iput@2
$LN44@Iput@2:
  00138	8d 4c 24 40	 lea	 ecx, DWORD PTR __Grouping$[esp+108]
  0013c	89 4c 24 20	 mov	 DWORD PTR __Pg$131109[esp+104], ecx
$LN45@Iput@2:

; 1469 : 			size_t _Off = _Count;
; 1470 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1471 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00140	8b 54 24 20	 mov	 edx, DWORD PTR __Pg$131109[esp+104]
  00144	8a 02		 mov	 al, BYTE PTR [edx]
  00146	8b ac 24 88 00
	00 00		 mov	 ebp, DWORD PTR __Count$[esp+100]
  0014d	8b f5		 mov	 esi, ebp
  0014f	3c 7f		 cmp	 al, 127			; 0000007fH
  00151	74 4f		 je	 SHORT $LN5@Iput@2
$LN6@Iput@2:
  00153	84 c0		 test	 al, al
  00155	7e 4b		 jle	 SHORT $LN5@Iput@2
  00157	8b ce		 mov	 ecx, esi
  00159	2b 4c 24 14	 sub	 ecx, DWORD PTR __Prefix$[esp+104]
  0015d	0f be c0	 movsx	 eax, al
  00160	3b c1		 cmp	 eax, ecx
  00162	73 3e		 jae	 SHORT $LN5@Iput@2

; 1472 : 				{	// add a NUL to mark thousands separator
; 1473 : 				_Off -= *_Pg;

  00164	2b f0		 sub	 esi, eax

; 1474 : 				_CRT_SECURE_MEMMOVE(&_Buf[_Off + 1], _Count + 1 - _Off,

  00166	8b d5		 mov	 edx, ebp
  00168	2b d6		 sub	 edx, esi
  0016a	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0016d	50		 push	 eax
  0016e	8d 3c 33	 lea	 edi, DWORD PTR [ebx+esi]
  00171	57		 push	 edi
  00172	50		 push	 eax
  00173	8d 44 33 01	 lea	 eax, DWORD PTR [ebx+esi+1]
  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 _memmove_s

; 1475 : 					&_Buf[_Off],	 _Count + 1 - _Off);
; 1476 : 				_Buf[_Off] = '\0', ++_Count;
; 1477 : 				if ('\0' < _Pg[1])

  0017d	8b 44 24 30	 mov	 eax, DWORD PTR __Pg$131109[esp+120]
  00181	83 c4 10	 add	 esp, 16			; 00000010H
  00184	c6 07 00	 mov	 BYTE PTR [edi], 0
  00187	45		 inc	 ebp
  00188	80 78 01 00	 cmp	 BYTE PTR [eax+1], 0
  0018c	7e 05		 jle	 SHORT $LN4@Iput@2
  0018e	40		 inc	 eax
  0018f	89 44 24 20	 mov	 DWORD PTR __Pg$131109[esp+104], eax
$LN4@Iput@2:
  00193	8a 00		 mov	 al, BYTE PTR [eax]
  00195	3c 7f		 cmp	 al, 127			; 0000007fH
  00197	75 ba		 jne	 SHORT $LN6@Iput@2

; 1469 : 			size_t _Off = _Count;
; 1470 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1471 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00199	eb 07		 jmp	 SHORT $LN5@Iput@2
$LN87@Iput@2:
  0019b	8b ac 24 88 00
	00 00		 mov	 ebp, DWORD PTR __Count$[esp+100]
$LN5@Iput@2:

; 1478 : 					++_Pg;	// not last group, advance
; 1479 : 				}
; 1480 : 			}
; 1481 : 
; 1482 : 		size_t _Fillcount = _Iosbase.width() <= 0
; 1483 : 			|| (size_t)_Iosbase.width() <= _Count
; 1484 : 				? 0 : (size_t)_Iosbase.width() - _Count;

  001a2	8b 44 24 28	 mov	 eax, DWORD PTR __Iosbase$GSCopy$[esp+104]
  001a6	8b 70 18	 mov	 esi, DWORD PTR [eax+24]
  001a9	85 f6		 test	 esi, esi
  001ab	7e 08		 jle	 SHORT $LN15@Iput@2
  001ad	3b f5		 cmp	 esi, ebp
  001af	76 04		 jbe	 SHORT $LN15@Iput@2
  001b1	2b f5		 sub	 esi, ebp
  001b3	eb 02		 jmp	 SHORT $LN16@Iput@2
$LN15@Iput@2:
  001b5	33 f6		 xor	 esi, esi
$LN16@Iput@2:

; 1485 : 
; 1486 : 		ios_base::fmtflags _Adjustfield =
; 1487 : 			_Iosbase.flags() & ios_base::adjustfield;

  001b7	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 1488 : 		if (_Adjustfield != ios_base::left
; 1489 : 			&& _Adjustfield != ios_base::internal)

  001ba	8b bc 24 80 00
	00 00		 mov	 edi, DWORD PTR __Fill$[esp+100]
  001c1	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  001c6	83 f8 40	 cmp	 eax, 64			; 00000040H
  001c9	0f 84 8b 00 00
	00		 je	 $LN1@Iput@2
  001cf	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  001d4	74 20		 je	 SHORT $LN85@Iput@2

; 1490 : 			{	// put leading fill
; 1491 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  001d6	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+104]
  001da	8b 54 24 74	 mov	 edx, DWORD PTR __Dest$[esp+100]
  001de	56		 push	 esi
  001df	57		 push	 edi
  001e0	51		 push	 ecx
  001e1	8b 4c 24 28	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+116]
  001e5	52		 push	 edx
  001e6	8d 44 24 24	 lea	 eax, DWORD PTR $T183461[esp+120]
  001ea	50		 push	 eax
  001eb	51		 push	 ecx
  001ec	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  001f1	83 c4 18	 add	 esp, 24			; 00000018H

; 1492 : 			_Fillcount = 0;

  001f4	eb 55		 jmp	 SHORT $LN93@Iput@2
$LN85@Iput@2:

; 1493 : 			}
; 1494 : 		else if (_Adjustfield == ios_base::internal)
; 1495 : 			{	// put internal fill
; 1496 : 			_Dest = _Putc(_Dest, _Buf, _Prefix);	// put prefix

  001f6	8b 4c 24 14	 mov	 ecx, DWORD PTR __Prefix$[esp+104]
  001fa	8b 54 24 78	 mov	 edx, DWORD PTR __Dest$[esp+104]
  001fe	8b 44 24 74	 mov	 eax, DWORD PTR __Dest$[esp+100]
  00202	51		 push	 ecx
  00203	53		 push	 ebx
  00204	52		 push	 edx
  00205	8b 54 24 28	 mov	 edx, DWORD PTR _this$GSCopy$[esp+116]
  00209	50		 push	 eax
  0020a	8d 4c 24 30	 lea	 ecx, DWORD PTR $T183462[esp+120]
  0020e	51		 push	 ecx
  0020f	52		 push	 edx
  00210	e8 00 00 00 00	 call	 ?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc
  00215	8b 08		 mov	 ecx, DWORD PTR [eax]
  00217	89 8c 24 8c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+124], ecx
  0021e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1497 : 			_Buf += _Prefix, _Count -= _Prefix;

  00221	8b 4c 24 2c	 mov	 ecx, DWORD PTR __Prefix$[esp+128]

; 1498 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount), _Fillcount = 0;

  00225	56		 push	 esi
  00226	89 94 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], edx
  0022d	8b 10		 mov	 edx, DWORD PTR [eax]
  0022f	03 d9		 add	 ebx, ecx
  00231	2b e9		 sub	 ebp, ecx
  00233	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00236	57		 push	 edi
  00237	51		 push	 ecx
  00238	8b 4c 24 40	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+140]
  0023c	52		 push	 edx
  0023d	8d 44 24 3c	 lea	 eax, DWORD PTR $T183463[esp+144]
  00241	50		 push	 eax
  00242	51		 push	 ecx
  00243	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00248	83 c4 30	 add	 esp, 48			; 00000030H
$LN93@Iput@2:
  0024b	8b 10		 mov	 edx, DWORD PTR [eax]
  0024d	89 54 24 74	 mov	 DWORD PTR __Dest$[esp+100], edx
  00251	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00254	33 f6		 xor	 esi, esi
  00256	89 44 24 78	 mov	 DWORD PTR __Dest$[esp+104], eax
$LN1@Iput@2:

; 1499 : 			}
; 1500 : 
; 1501 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1502 : 			_Punct_fac.thousands_sep());	// put field

  0025a	8b 4c 24 34	 mov	 ecx, DWORD PTR __Punct_fac$[esp+104]
  0025e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00260	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00263	ff d0		 call	 eax
  00265	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+104]
  00269	8b 54 24 74	 mov	 edx, DWORD PTR __Dest$[esp+100]
  0026d	0f b7 c0	 movzx	 eax, ax
  00270	50		 push	 eax
  00271	55		 push	 ebp
  00272	53		 push	 ebx
  00273	8b 5c 24 28	 mov	 ebx, DWORD PTR _this$GSCopy$[esp+116]
  00277	51		 push	 ecx
  00278	52		 push	 edx
  00279	8d 44 24 48	 lea	 eax, DWORD PTR $T183464[esp+124]
  0027d	50		 push	 eax
  0027e	53		 push	 ebx
  0027f	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped
  00284	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1503 : 		_Iosbase.width(0);

  00286	8b 54 24 44	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+132]

; 1504 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0028a	56		 push	 esi
  0028b	8b 74 24 4c	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+136]
  0028f	57		 push	 edi
  00290	89 8c 24 98 00
	00 00		 mov	 DWORD PTR __Dest$[esp+136], ecx
  00297	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0029a	50		 push	 eax
  0029b	51		 push	 ecx
  0029c	56		 push	 esi
  0029d	53		 push	 ebx
  0029e	89 84 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], eax
  002a5	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], 0
  002ac	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  002b1	83 c4 34	 add	 esp, 52			; 00000034H
  002b4	83 7c 24 54 10	 cmp	 DWORD PTR __Grouping$[esp+128], 16 ; 00000010H
  002b9	72 0d		 jb	 SHORT $LN86@Iput@2
  002bb	8b 44 24 40	 mov	 eax, DWORD PTR __Grouping$[esp+108]
  002bf	50		 push	 eax
  002c0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002c5	83 c4 04	 add	 esp, 4
$LN86@Iput@2:
  002c8	8b c6		 mov	 eax, esi

; 1505 : 		}

  002ca	8b 4c 24 5c	 mov	 ecx, DWORD PTR __$EHRec$[esp+104]
  002ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002d5	59		 pop	 ecx
  002d6	5f		 pop	 edi
  002d7	5e		 pop	 esi
  002d8	5d		 pop	 ebp
  002d9	5b		 pop	 ebx
  002da	8b 4c 24 44	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+84]
  002de	33 cc		 xor	 ecx, esp
  002e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e5	83 c4 54	 add	 esp, 84			; 00000054H
  002e8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$0:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR $T183453[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 a8	 lea	 eax, DWORD PTR [edx-88]
  00017	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	83 c0 10	 add	 eax, 16			; 00000010H
  00024	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput
PUBLIC	?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
_TEXT	SEGMENT
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::init, COMDAT
; _this$ = ecx

; 131  : 		{	// initialize with stream buffer pointer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 132  : 		_Init();	// initialize ios_base

  00003	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init

; 133  : 		_Mystrbuf = _Strbuf;

  00008	8b 44 24 08	 mov	 eax, DWORD PTR __Strbuf$[esp]

; 134  : 		_Tiestr = 0;
; 135  : 		_Fillch = widen(' ');

  0000c	6a 20		 push	 32			; 00000020H
  0000e	8b ce		 mov	 ecx, esi
  00010	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00013	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  0001a	e8 00 00 00 00	 call	 ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen

; 136  : 
; 137  : 		if (_Mystrbuf == 0)

  0001f	83 7e 28 00	 cmp	 DWORD PTR [esi+40], 0
  00023	88 46 30	 mov	 BYTE PTR [esi+48], al
  00026	75 10		 jne	 SHORT $LN11@init

; 138  : 			setstate(badbit);

  00028	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002b	83 c8 04	 or	 eax, 4
  0002e	6a 00		 push	 0
  00030	50		 push	 eax
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN11@init:

; 139  : 
; 140  : 		if (_Isstd)

  00038	80 7c 24 0c 00	 cmp	 BYTE PTR __Isstd$[esp], 0
  0003d	74 0d		 je	 SHORT $LN2@init

; 141  : 			_Addstd(this);	// special handling for standard streams

  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  00045	83 c4 04	 add	 esp, 4
  00048	5e		 pop	 esi

; 144  : 		}

  00049	c2 08 00	 ret	 8
$LN2@init:

; 142  : 		else
; 143  : 		_Stdstr = 0;

  0004c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00053	5e		 pop	 esi

; 144  : 		}

  00054	c2 08 00	 ret	 8
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::init
_TEXT	ENDS
PUBLIC	?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init
; Function compile flags: /Ogtpy
;	COMDAT ?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z
_TEXT	SEGMENT
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init, COMDAT
; _this$ = ecx

; 131  : 		{	// initialize with stream buffer pointer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 132  : 		_Init();	// initialize ios_base

  00003	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init

; 133  : 		_Mystrbuf = _Strbuf;

  00008	8b 44 24 08	 mov	 eax, DWORD PTR __Strbuf$[esp]

; 134  : 		_Tiestr = 0;
; 135  : 		_Fillch = widen(' ');

  0000c	6a 20		 push	 32			; 00000020H
  0000e	8b ce		 mov	 ecx, esi
  00010	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00013	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  0001a	e8 00 00 00 00	 call	 ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen

; 136  : 
; 137  : 		if (_Mystrbuf == 0)

  0001f	83 7e 28 00	 cmp	 DWORD PTR [esi+40], 0
  00023	66 89 46 30	 mov	 WORD PTR [esi+48], ax
  00027	75 10		 jne	 SHORT $LN11@init@2

; 138  : 			setstate(badbit);

  00029	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002c	83 c8 04	 or	 eax, 4
  0002f	6a 00		 push	 0
  00031	50		 push	 eax
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN11@init@2:

; 139  : 
; 140  : 		if (_Isstd)

  00039	80 7c 24 0c 00	 cmp	 BYTE PTR __Isstd$[esp], 0
  0003e	74 0d		 je	 SHORT $LN2@init@2

; 141  : 			_Addstd(this);	// special handling for standard streams

  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  00046	83 c4 04	 add	 esp, 4
  00049	5e		 pop	 esi

; 144  : 		}

  0004a	c2 08 00	 ret	 8
$LN2@init@2:

; 142  : 		else
; 143  : 		_Stdstr = 0;

  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00054	5e		 pop	 esi

; 144  : 		}

  00055	c2 08 00	 ret	 8
?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init
_TEXT	ENDS
PUBLIC	??$insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ; std::list<unsigned long,std::allocator<unsigned long> >::insert<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??$insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
__First$ = 16						; size = 8
$T183739 = 24						; size = 1
__Last$ = 24						; size = 8
??$insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::insert<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 731  : 		{	// insert [_First, _Last) at _Where
; 732  : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));

  00000	8b 44 24 14	 mov	 eax, DWORD PTR $T183739[esp-4]
  00004	8b 54 24 18	 mov	 edx, DWORD PTR __Last$[esp]
  00008	50		 push	 eax
  00009	8b 44 24 18	 mov	 eax, DWORD PTR __Last$[esp]
  0000d	52		 push	 edx
  0000e	8b 54 24 18	 mov	 edx, DWORD PTR __First$[esp+8]
  00012	50		 push	 eax
  00013	8b 44 24 18	 mov	 eax, DWORD PTR __First$[esp+8]
  00017	52		 push	 edx
  00018	8b 54 24 18	 mov	 edx, DWORD PTR __Where$[esp+16]
  0001c	50		 push	 eax
  0001d	8b 44 24 18	 mov	 eax, DWORD PTR __Where$[esp+16]
  00021	52		 push	 edx
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >

; 733  : 		}

  00028	c2 18 00	 ret	 24			; 00000018H
??$insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::insert<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@@Z ; std::_Destroy_range<std::allocator<CipherShed::SecurityTokenKeyfile> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@@Z
_TEXT	SEGMENT
__Cat$183750 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CipherShed::SecurityTokenKeyfile> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

  00000	51		 push	 ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00001	8b 04 24	 mov	 eax, DWORD PTR __Cat$183750[esp+4]
  00004	8b 4c 24 10	 mov	 ecx, DWORD PTR __Al$[esp]
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp]
  0000c	50		 push	 eax
  0000d	8b 44 24 0c	 mov	 eax, DWORD PTR __First$[esp+4]
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CipherShed::SecurityTokenKeyfile> >

; 226  : 	}

  00019	83 c4 14	 add	 esp, 20			; 00000014H
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CipherShed::SecurityTokenKeyfile> >
_TEXT	ENDS
PUBLIC	??_7?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::`vftable'
PUBLIC	??0?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@KV?$allocator@K@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >
PUBLIC	??_R4?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?IsNotEnd@?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBEXXZ ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::Next
EXTRN	??_E?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 DD 00H ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AU?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$vector@KV?$allocator@K@std@@@s'
	DB	'td@@@ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@ DD 00H ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@ DD FLAT:??_R4?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@KV?$allocator@K@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@KV?$allocator@K@std@@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@KV?$allocator@K@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@KV?$allocator@K@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
xdata$x	ENDS
;	COMDAT ??0?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@KV?$allocator@K@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@KV?$allocator@K@std@@@std@@@Z PROC ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@KV?$allocator@K@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	55		 push	 ebp
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 14	 mov	 DWORD PTR _this$[esp+36], esi
  0002b	33 db		 xor	 ebx, ebx
  0002d	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00031	88 5e 05	 mov	 BYTE PTR [esi+5], bl
  00034	8b 44 24 28	 mov	 eax, DWORD PTR _container$[esp+32]
  00038	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0003b	50		 push	 eax
  0003c	8b cf		 mov	 ecx, edi
  0003e	89 5c 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], ebx
  00042	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@
  00048	e8 00 00 00 00	 call	 ??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
  0004d	8b 6f 10	 mov	 ebp, DWORD PTR [edi+16]
  00050	89 5e 20	 mov	 DWORD PTR [esi+32], ebx
  00053	39 6f 0c	 cmp	 DWORD PTR [edi+12], ebp
  00056	77 05		 ja	 SHORT $LN9@ContainerF@2
  00058	3b 6f 10	 cmp	 ebp, DWORD PTR [edi+16]
  0005b	76 05		 jbe	 SHORT $LN10@ContainerF@2
$LN9@ContainerF@2:
  0005d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN10@ContainerF@2:
  00062	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00064	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00067	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0006a	8b 6f 0c	 mov	 ebp, DWORD PTR [edi+12]
  0006d	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00070	39 6f 0c	 cmp	 DWORD PTR [edi+12], ebp
  00073	77 05		 ja	 SHORT $LN23@ContainerF@2
  00075	3b 6f 10	 cmp	 ebp, DWORD PTR [edi+16]
  00078	76 05		 jbe	 SHORT $LN24@ContainerF@2
$LN23@ContainerF@2:
  0007a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN24@ContainerF@2:
  0007f	8b 17		 mov	 edx, DWORD PTR [edi]
  00081	89 56 28	 mov	 DWORD PTR [esi+40], edx
  00084	89 6e 2c	 mov	 DWORD PTR [esi+44], ebp
  00087	8b c6		 mov	 eax, esi
  00089	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	5b		 pop	 ebx
  00099	83 c4 10	 add	 esp, 16			; 00000010H
  0009c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@KV?$allocator@K@std@@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@KV?$allocator@K@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@KV?$allocator@K@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@KV?$allocator@K@std@@@std@@@Z ENDP ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >
PUBLIC	??E?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::operator++, COMDAT
; _this$ = ecx

; 115  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 116  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN13@operator@56
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 117  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN9@operator@56
$LN13@operator@56:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN10@operator@56
$LN9@operator@56:
  00018	33 c0		 xor	 eax, eax
$LN10@operator@56:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 05		 jb	 SHORT $LN14@operator@56
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN14@operator@56:

; 118  : 
; 119  :  #if _HAS_ITERATOR_DEBUGGING
; 120  : 		if (this->_Mycont == 0
; 121  : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 122  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 123  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 124  : 
; 125  : 		++_Myptr;

  00027	83 46 04 04	 add	 DWORD PTR [esi+4], 4

; 126  : 		return (*this);

  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 127  : 		}

  0002e	c3		 ret	 0
??E?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN1@operator@57
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN2@operator@57
$LN1@operator@57:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN2@operator@57:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 212  : 		}

  00026	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::operator==
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
_TEXT	ENDS
;	COMDAT ?Next@?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBEXXZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00006	85 c0		 test	 eax, eax
  00008	75 0c		 jne	 SHORT $LN15@Next
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN11@Next
$LN15@Next:
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	eb 02		 jmp	 SHORT $LN12@Next
$LN11@Next:
  0001a	33 c0		 xor	 eax, eax
$LN12@Next:
  0001c	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0001f	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00022	72 05		 jb	 SHORT $LN16@Next
  00024	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN16@Next:
  00029	83 46 2c 04	 add	 DWORD PTR [esi+44], 4
  0002d	5e		 pop	 esi
  0002e	c3		 ret	 0
?Next@?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBEXXZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::Next
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::operator!=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 216  : 		return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN3@operator@58
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN4@operator@58
$LN3@operator@58:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN4@operator@58:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 217  : 		}

  00026	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@KV?$allocator@K@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<unsigned long,std::allocator<unsigned long> >::operator!=
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
_TEXT	ENDS
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBE_NXZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00007	74 21		 je	 SHORT $LN3@IsNotEnd
  00009	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0000c	85 c0		 test	 eax, eax
  0000e	74 05		 je	 SHORT $LN7@IsNotEnd
  00010	3b 46 20	 cmp	 eax, DWORD PTR [esi+32]
  00013	74 05		 je	 SHORT $LN8@IsNotEnd
$LN7@IsNotEnd:
  00015	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@IsNotEnd:
  0001a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001d	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00020	74 08		 je	 SHORT $LN3@IsNotEnd
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
$LN3@IsNotEnd:
  0002a	32 c0		 xor	 al, al
  0002c	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::IsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z PROC ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN11@scalar@34
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN11@scalar@34:
  00013	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00016	50		 push	 eax
  00017	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001e	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00025	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00031	83 c4 04	 add	 esp, 4
  00034	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00039	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0003f	74 09		 je	 SHORT $LN23@scalar@34
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00047	83 c4 04	 add	 esp, 4
$LN23@scalar@34:
  0004a	8b c6		 mov	 eax, esi
  0004c	5e		 pop	 esi
  0004d	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z ENDP ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAE@ABV01@@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAE@ABV01@@Z PROC ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
  0000d	8b c6		 mov	 eax, esi
  0000f	5e		 pop	 esi
  00010	c2 04 00	 ret	 4
??0?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAE@ABV01@@Z ENDP ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAUSecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@2@@stdext@@YAPAUSecurityTokenKeyfile@CipherShed@@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAUSecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@2@@stdext@@YAPAUSecurityTokenKeyfile@CipherShed@@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@4@@Z
_TEXT	SEGMENT
$T184058 = -4						; size = 1
__First$ = 8						; size = 8
__Cat$184062 = 16					; size = 1
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAUSecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@2@@stdext@@YAPAUSecurityTokenKeyfile@CipherShed@@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$184062[esp]
  00005	8b 54 24 1c	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T184058[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T184058[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 1c	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001a	52		 push	 edx
  0001b	8b 54 24 18	 mov	 edx, DWORD PTR __First$[esp+16]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::SecurityTokenKeyfile const *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >

; 823  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAUSecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@2@@stdext@@YAPAUSecurityTokenKeyfile@CipherShed@@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CipherShed::SecurityTokenKeyfile *,unsigned int,CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T184129 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Vptr$184126 = 12					; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<CipherShed::SecurityTokenKeyfile *,unsigned int,CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

  0002b	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]

; 401  : 
; 402  : 	_TRY_BEGIN

  0002e	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_fil@3:

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

  00040	3b fb		 cmp	 edi, ebx
  00042	76 46		 jbe	 SHORT $LN4@Uninit_fil@3

; 404  : 		_Al.construct(_First, _Val);

  00044	89 75 0c	 mov	 DWORD PTR __Vptr$184126[ebp], esi
  00047	89 75 e8	 mov	 DWORD PTR $T184129[ebp], esi
  0004a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004e	3b f3		 cmp	 esi, ebx
  00050	74 0b		 je	 SHORT $LN18@Uninit_fil@3
  00052	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00055	50		 push	 eax
  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z
$LN18@Uninit_fil@3:
  0005d	4f		 dec	 edi
  0005e	83 ee 80	 sub	 esi, -128		; ffffff80H
  00061	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00064	89 75 08	 mov	 DWORD PTR __First$[ebp], esi
  00067	eb d7		 jmp	 SHORT $LL6@Uninit_fil@3
__catch$??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

  00069	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  0006c	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0006f	3b f7		 cmp	 esi, edi
  00071	74 0e		 je	 SHORT $LN1@Uninit_fil@3
$LL3@Uninit_fil@3:

; 407  : 		_Al.destroy(_Next);

  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ??1SecurityTokenKeyfile@CipherShed@@QAE@XZ
  0007a	83 ee 80	 sub	 esi, -128		; ffffff80H
  0007d	3b f7		 cmp	 esi, edi
  0007f	75 f2		 jne	 SHORT $LL3@Uninit_fil@3
$LN1@Uninit_fil@3:

; 408  : 	_RERAISE;

  00081	33 db		 xor	 ebx, ebx
  00083	53		 push	 ebx
  00084	53		 push	 ebx
  00085	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_fil@3:

; 409  : 	_CATCH_END
; 410  : 	}

  0008a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
$LN35@Uninit_fil@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 0c	 mov	 eax, DWORD PTR __Vptr$184126[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T184129[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<CipherShed::SecurityTokenKeyfile *,unsigned int,CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
PUBLIC	??$_Fill@PAUSecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0ABU12@@Z ; std::_Fill<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Fill@PAUSecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0ABU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUSecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0ABU12@@Z PROC ; std::_Fill<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

  00000	53		 push	 ebx

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  00005	3b 5c 24 0c	 cmp	 ebx, DWORD PTR __Last$[esp]
  00009	74 6e		 je	 SHORT $LN1@Fill@3
  0000b	55		 push	 ebp
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 7c 24 1c	 mov	 edi, DWORD PTR __Val$[esp+12]
  00012	8d 6f 04	 lea	 ebp, DWORD PTR [edi+4]
  00015	8d 73 48	 lea	 esi, DWORD PTR [ebx+72]
$LL3@Fill@3:

; 3159 : 		*_First = _Val;

  00018	8b 07		 mov	 eax, DWORD PTR [edi]
  0001a	6a ff		 push	 -1
  0001c	6a 00		 push	 0
  0001e	55		 push	 ebp
  0001f	8d 4e bc	 lea	 ecx, DWORD PTR [esi-68]
  00022	89 03		 mov	 DWORD PTR [ebx], eax
  00024	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00029	6a ff		 push	 -1
  0002b	6a 00		 push	 0
  0002d	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  00030	50		 push	 eax
  00031	8d 4e d8	 lea	 ecx, DWORD PTR [esi-40]
  00034	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00039	8b 4f 3c	 mov	 ecx, DWORD PTR [edi+60]
  0003c	89 4e f4	 mov	 DWORD PTR [esi-12], ecx
  0003f	8b 57 40	 mov	 edx, DWORD PTR [edi+64]
  00042	89 56 f8	 mov	 DWORD PTR [esi-8], edx
  00045	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00048	6a ff		 push	 -1
  0004a	89 46 fc	 mov	 DWORD PTR [esi-4], eax
  0004d	6a 00		 push	 0
  0004f	8d 47 48	 lea	 eax, DWORD PTR [edi+72]
  00052	50		 push	 eax
  00053	8b ce		 mov	 ecx, esi
  00055	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0005a	6a ff		 push	 -1
  0005c	6a 00		 push	 0
  0005e	8d 47 64	 lea	 eax, DWORD PTR [edi+100]
  00061	50		 push	 eax
  00062	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00065	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0006a	83 eb 80	 sub	 ebx, -128		; ffffff80H
  0006d	83 ee 80	 sub	 esi, -128		; ffffff80H
  00070	3b 5c 24 18	 cmp	 ebx, DWORD PTR __Last$[esp+12]
  00074	75 a2		 jne	 SHORT $LL3@Fill@3
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5d		 pop	 ebp
$LN1@Fill@3:
  00079	5b		 pop	 ebx

; 3160 : 	}

  0007a	c3		 ret	 0
??$_Fill@PAUSecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0ABU12@@Z ENDP ; std::_Fill<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@stdext@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@stdext@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@Z
_TEXT	SEGMENT
$T184236 = -4						; size = 1
__First$ = 8						; size = 4
__Cat$184240 = 12					; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@stdext@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Cat$184240[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T184236[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T184236[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >

; 823  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_uninitialized_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@stdext@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUSecurityTokenKeyfile@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUSecurityTokenKeyfile@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUSecurityTokenKeyfile@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	53		 push	 ebx

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	39 5c 24 08	 cmp	 DWORD PTR __First$[esp], ebx
  00009	74 7a		 je	 SHORT $LN27@Copy_backw@3
  0000b	55		 push	 ebp
  0000c	8b 6c 24 14	 mov	 ebp, DWORD PTR __Dest$[esp+4]
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8d 7d 48	 lea	 edi, DWORD PTR [ebp+72]
  00015	8d 73 48	 lea	 esi, DWORD PTR [ebx+72]
$LL2@Copy_backw@3:

; 2676 : 		*--_Dest = *--_Last;

  00018	8b 43 80	 mov	 eax, DWORD PTR [ebx-128]
  0001b	6a ff		 push	 -1
  0001d	83 c6 80	 add	 esi, -128		; ffffff80H
  00020	6a 00		 push	 0
  00022	8d 4e bc	 lea	 ecx, DWORD PTR [esi-68]
  00025	83 c3 80	 add	 ebx, -128		; ffffff80H
  00028	83 c7 80	 add	 edi, -128		; ffffff80H
  0002b	51		 push	 ecx
  0002c	83 c5 80	 add	 ebp, -128		; ffffff80H
  0002f	8d 4f bc	 lea	 ecx, DWORD PTR [edi-68]
  00032	89 45 00	 mov	 DWORD PTR [ebp], eax
  00035	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0003a	6a ff		 push	 -1
  0003c	6a 00		 push	 0
  0003e	8d 56 d8	 lea	 edx, DWORD PTR [esi-40]
  00041	52		 push	 edx
  00042	8d 4f d8	 lea	 ecx, DWORD PTR [edi-40]
  00045	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004a	8b 46 f4	 mov	 eax, DWORD PTR [esi-12]
  0004d	89 47 f4	 mov	 DWORD PTR [edi-12], eax
  00050	8b 4e f8	 mov	 ecx, DWORD PTR [esi-8]
  00053	6a ff		 push	 -1
  00055	89 4f f8	 mov	 DWORD PTR [edi-8], ecx
  00058	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0005b	6a 00		 push	 0
  0005d	56		 push	 esi
  0005e	8b cf		 mov	 ecx, edi
  00060	89 57 fc	 mov	 DWORD PTR [edi-4], edx
  00063	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00068	6a ff		 push	 -1
  0006a	6a 00		 push	 0
  0006c	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  0006f	50		 push	 eax
  00070	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  00073	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00078	3b 5c 24 14	 cmp	 ebx, DWORD PTR __First$[esp+12]
  0007c	75 9a		 jne	 SHORT $LL2@Copy_backw@3
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi

; 2677 : 	return (_Dest);

  00080	8b c5		 mov	 eax, ebp
  00082	5d		 pop	 ebp
  00083	5b		 pop	 ebx

; 2678 : 	}

  00084	c3		 ret	 0
$LN27@Copy_backw@3:

; 2677 : 	return (_Dest);

  00085	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00089	5b		 pop	 ebx

; 2678 : 	}

  0008a	c3		 ret	 0
??$_Copy_backward_opt@PAUSecurityTokenKeyfile@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??1?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAE@XZ ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::~map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAE@XZ PROC ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::~map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
??1?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAE@XZ ENDP ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::~map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >
_TEXT	ENDS
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT
; _this$ = ecx

; 550  : 		{	// flush output stream

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 551  : 		ios_base::iostate _State = ios_base::goodbit;
; 552  : 		if (!ios_base::fail() && _Myios::rdbuf()->pubsync() == -1)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00008	57		 push	 edi
  00009	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  0000c	33 ff		 xor	 edi, edi
  0000e	f6 40 08 06	 test	 BYTE PTR [eax+8], 6
  00012	75 16		 jne	 SHORT $LN1@flush
  00014	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00017	8b 10		 mov	 edx, DWORD PTR [eax]
  00019	8b c8		 mov	 ecx, eax
  0001b	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0001e	ff d0		 call	 eax
  00020	83 f8 ff	 cmp	 eax, -1
  00023	75 05		 jne	 SHORT $LN1@flush

; 553  : 			_State |= ios_base::badbit;	// sync failed

  00025	bf 04 00 00 00	 mov	 edi, 4
$LN1@flush:

; 554  : 		_Myios::setstate(_State);

  0002a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0002f	03 ce		 add	 ecx, esi
  00031	85 ff		 test	 edi, edi
  00033	74 16		 je	 SHORT $LN21@flush
  00035	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00038	0b c7		 or	 eax, edi
  0003a	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  0003e	75 03		 jne	 SHORT $LN19@flush
  00040	83 c8 04	 or	 eax, 4
$LN19@flush:
  00043	6a 00		 push	 0
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN21@flush:
  0004b	5f		 pop	 edi

; 555  : 		return (*this);

  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi

; 556  : 		}

  0004f	c3		 ret	 0
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
_TEXT	ENDS
PUBLIC	?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
; Function compile flags: /Ogtpy
;	COMDAT ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush, COMDAT
; _this$ = ecx

; 550  : 		{	// flush output stream

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 551  : 		ios_base::iostate _State = ios_base::goodbit;
; 552  : 		if (!ios_base::fail() && _Myios::rdbuf()->pubsync() == -1)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00008	57		 push	 edi
  00009	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  0000c	33 ff		 xor	 edi, edi
  0000e	f6 40 08 06	 test	 BYTE PTR [eax+8], 6
  00012	75 16		 jne	 SHORT $LN1@flush@2
  00014	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00017	8b 10		 mov	 edx, DWORD PTR [eax]
  00019	8b c8		 mov	 ecx, eax
  0001b	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0001e	ff d0		 call	 eax
  00020	83 f8 ff	 cmp	 eax, -1
  00023	75 05		 jne	 SHORT $LN1@flush@2

; 553  : 			_State |= ios_base::badbit;	// sync failed

  00025	bf 04 00 00 00	 mov	 edi, 4
$LN1@flush@2:

; 554  : 		_Myios::setstate(_State);

  0002a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0002f	03 ce		 add	 ecx, esi
  00031	85 ff		 test	 edi, edi
  00033	74 16		 je	 SHORT $LN21@flush@2
  00035	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00038	0b c7		 or	 eax, edi
  0003a	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  0003e	75 03		 jne	 SHORT $LN19@flush@2
  00040	83 c8 04	 or	 eax, 4
$LN19@flush@2:
  00043	6a 00		 push	 0
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN21@flush@2:
  0004b	5f		 pop	 edi

; 555  : 		return (*this);

  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi

; 556  : 		}

  0004f	c3		 ret	 0
?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
_TEXT	ENDS
PUBLIC	??0?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAE@XZ ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\map
;	COMDAT ??0?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
$T184424 = -1						; size = 1
$T184423 = -1						; size = 1
??0?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAE@XZ PROC ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >, COMDAT
; _this$ = ecx

; 103  : 		{	// construct empty map from defaults

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	8d 44 24 07	 lea	 eax, DWORD PTR $T184423[esp+8]
  00008	50		 push	 eax
  00009	8d 4c 24 0b	 lea	 ecx, DWORD PTR $T184424[esp+12]
  0000d	51		 push	 ecx
  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >

; 104  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	59		 pop	 ecx
  00019	c3		 ret	 0
??0?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAE@XZ ENDP ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >
_TEXT	ENDS
PUBLIC	??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z
_TEXT	SEGMENT
$T184435 = -20						; size = 8
$T184433 = -20						; size = 8
$T184431 = -20						; size = 8
$T184432 = -12						; size = 12
__Keyval$ = 8						; size = 4
??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z PROC ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[], COMDAT
; _this$ = ecx

; 169  : 		iterator _Where = this->lower_bound(_Keyval);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Keyval$[esp-4]
  00004	83 ec 14	 sub	 esp, 20			; 00000014H
  00007	53		 push	 ebx
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  0000e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00011	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  00015	8b d9		 mov	 ebx, ecx
  00017	75 1b		 jne	 SHORT $LN9@operator@59
  00019	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0001b	eb 03 8d 49 00	 npad	 5
$LL10@operator@59:
  00020	39 48 0c	 cmp	 DWORD PTR [eax+12], ecx
  00023	73 05		 jae	 SHORT $LN8@operator@59
  00025	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00028	eb 04		 jmp	 SHORT $LN7@operator@59
$LN8@operator@59:
  0002a	8b d8		 mov	 ebx, eax
  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@operator@59:
  0002e	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  00032	74 ec		 je	 SHORT $LL10@operator@59
$LN9@operator@59:

; 170  : 		if (_Where == this->end()
; 171  : 			|| this->comp(_Keyval, this->_Key(_Where._Mynode())))

  00034	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00037	56		 push	 esi
  00038	8b 37		 mov	 esi, DWORD PTR [edi]
  0003a	89 44 24 10	 mov	 DWORD PTR $T184431[esp+36], eax
  0003e	85 f6		 test	 esi, esi
  00040	74 04		 je	 SHORT $LN59@operator@59
  00042	3b f6		 cmp	 esi, esi
  00044	74 09		 je	 SHORT $LN60@operator@59
$LN59@operator@59:
  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0004b	8b 54 24 24	 mov	 edx, DWORD PTR __Keyval$[esp+28]
$LN60@operator@59:
  0004f	3b 5c 24 10	 cmp	 ebx, DWORD PTR $T184431[esp+36]
  00053	74 07		 je	 SHORT $LN1@operator@59
  00055	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00057	3b 4b 0c	 cmp	 ecx, DWORD PTR [ebx+12]
  0005a	73 33		 jae	 SHORT $LN2@operator@59
$LN1@operator@59:

; 172  : 			_Where = this->insert(_Where,
; 173  : 				value_type(_Keyval, mapped_type()));

  0005c	8b 12		 mov	 edx, DWORD PTR [edx]
  0005e	8b 44 24 0c	 mov	 eax, DWORD PTR $T184433[esp+32]
  00062	89 54 24 14	 mov	 DWORD PTR $T184432[esp+32], edx
  00066	8d 54 24 14	 lea	 edx, DWORD PTR $T184432[esp+32]
  0006a	52		 push	 edx
  0006b	53		 push	 ebx
  0006c	c6 44 24 18 00	 mov	 BYTE PTR $T184433[esp+44], 0
  00071	8b 4c 24 18	 mov	 ecx, DWORD PTR $T184433[esp+44]
  00075	89 44 24 20	 mov	 DWORD PTR $T184432[esp+44], eax
  00079	56		 push	 esi
  0007a	8d 44 24 18	 lea	 eax, DWORD PTR $T184435[esp+44]
  0007e	89 4c 24 28	 mov	 DWORD PTR $T184432[esp+52], ecx
  00082	50		 push	 eax
  00083	8b cf		 mov	 ecx, edi
  00085	e8 00 00 00 00	 call	 ?insert@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBKUPkcs11Session@CipherShed@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::insert
  0008a	8b 30		 mov	 esi, DWORD PTR [eax]
  0008c	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
$LN2@operator@59:

; 174  : 		return ((*_Where).second);

  0008f	85 f6		 test	 esi, esi
  00091	75 1b		 jne	 SHORT $LN98@operator@59
  00093	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN92@operator@59:
  00098	3b 5e 18	 cmp	 ebx, DWORD PTR [esi+24]
  0009b	5e		 pop	 esi
  0009c	75 05		 jne	 SHORT $LN99@operator@59
  0009e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN99@operator@59:
  000a3	5f		 pop	 edi
  000a4	8d 43 10	 lea	 eax, DWORD PTR [ebx+16]
  000a7	5b		 pop	 ebx

; 175  : 		}

  000a8	83 c4 14	 add	 esp, 20			; 00000014H
  000ab	c2 04 00	 ret	 4
$LN98@operator@59:

; 174  : 		return ((*_Where).second);

  000ae	8b 36		 mov	 esi, DWORD PTR [esi]
  000b0	eb e6		 jmp	 SHORT $LN92@operator@59
??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ENDP ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
_TEXT	ENDS
PUBLIC	??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z$0
__ehfuncinfo$??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z
_TEXT	SEGMENT
$T184741 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 482  : 		{	// construct from _Count * _Ty()

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	6a 04		 push	 4
  0002c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00031	33 c9		 xor	 ecx, ecx
  00033	83 c4 04	 add	 esp, 4
  00036	3b c1		 cmp	 eax, ecx
  00038	74 04		 je	 SHORT $LN13@vector@7
  0003a	89 30		 mov	 DWORD PTR [eax], esi
  0003c	eb 02		 jmp	 SHORT $LN14@vector@7
$LN13@vector@7:
  0003e	33 c0		 xor	 eax, eax
$LN14@vector@7:
  00040	89 06		 mov	 DWORD PTR [esi], eax
  00042	89 4c 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], ecx

; 483  : 		_Construct_n(_Count, _Ty());

  00046	88 4c 24 0b	 mov	 BYTE PTR $T184741[esp+28], cl
  0004a	8b 4c 24 20	 mov	 ecx, DWORD PTR __Count$[esp+24]
  0004e	8d 44 24 0b	 lea	 eax, DWORD PTR $T184741[esp+28]
  00052	50		 push	 eax
  00053	51		 push	 ecx
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ?_Construct_n@?$vector@EV?$allocator@E@std@@@std@@QAEXIABE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n

; 484  : 		}

  0005b	8b c6		 mov	 eax, esi
  0005d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5e		 pop	 esi
  0006a	83 c4 14	 add	 esp, 20			; 00000014H
  0006d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
PUBLIC	?push_back@?$vector@EV?$allocator@E@std@@@std@@QAEXABE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$vector@EV?$allocator@E@std@@@std@@QAEXABE@Z
_TEXT	SEGMENT
$T184869 = -8						; size = 8
__Val$ = 8						; size = 4
?push_back@?$vector@EV?$allocator@E@std@@@std@@QAEXABE@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

  00000	83 ec 08	 sub	 esp, 8
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 810  : 		if (size() < capacity())

  00006	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00009	57		 push	 edi
  0000a	85 c9		 test	 ecx, ecx
  0000c	75 04		 jne	 SHORT $LN9@push_back
  0000e	33 c0		 xor	 eax, eax
  00010	eb 05		 jmp	 SHORT $LN10@push_back
$LN9@push_back:
  00012	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00015	2b c1		 sub	 eax, ecx
$LN10@push_back:
  00017	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0001a	8b d7		 mov	 edx, edi
  0001c	2b d1		 sub	 edx, ecx
  0001e	3b d0		 cmp	 edx, eax
  00020	73 14		 jae	 SHORT $LN2@push_back

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

  00022	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+12]
  00026	8a 08		 mov	 cl, BYTE PTR [eax]
  00028	88 0f		 mov	 BYTE PTR [edi], cl
  0002a	47		 inc	 edi
  0002b	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi

; 824  : 		}

  00030	83 c4 08	 add	 esp, 8
  00033	c2 04 00	 ret	 4
$LN2@push_back:

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else
; 823  : 			insert(end(), _Val);

  00036	3b cf		 cmp	 ecx, edi
  00038	76 05		 jbe	 SHORT $LN39@push_back
  0003a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN39@push_back:
  0003f	8b 54 24 14	 mov	 edx, DWORD PTR __Val$[esp+12]
  00043	8b 06		 mov	 eax, DWORD PTR [esi]
  00045	52		 push	 edx
  00046	57		 push	 edi
  00047	50		 push	 eax
  00048	8d 44 24 14	 lea	 eax, DWORD PTR $T184869[esp+28]
  0004c	50		 push	 eax
  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 ?insert@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@V?$_Vector_const_iterator@EV?$allocator@E@std@@@2@ABE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::insert
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi

; 824  : 		}

  00056	83 c4 08	 add	 esp, 8
  00059	c2 04 00	 ret	 4
?push_back@?$vector@EV?$allocator@E@std@@@std@@QAEXABE@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::push_back
_TEXT	ENDS
PUBLIC	??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$7
__unwindtable$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T185114 = -28						; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T185522 = 8						; size = 1
__Right$ = 8						; size = 4
??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z PROC	; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 467  : 		{	// construct list by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00030	6a 04		 push	 4
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	85 c0		 test	 eax, eax
  0003c	74 04		 je	 SHORT $LN28@list@3
  0003e	89 30		 mov	 DWORD PTR [eax], esi
  00040	eb 02		 jmp	 SHORT $LN29@list@3
$LN28@list@3:
  00042	33 c0		 xor	 eax, eax
$LN29@list@3:
  00044	89 06		 mov	 DWORD PTR [esi], eax
  00046	8b ce		 mov	 ecx, esi
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0004f	e8 00 00 00 00	 call	 ?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode

; 468  : 		_TRY_BEGIN
; 469  : 		insert(begin(), _Right.begin(), _Right.end());

  00054	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00057	8b 3e		 mov	 edi, DWORD PTR [esi]
  00059	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0005c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00063	8b 10		 mov	 edx, DWORD PTR [eax]
  00065	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00068	8b 18		 mov	 ebx, DWORD PTR [eax]
  0006a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0006c	89 5d e8	 mov	 DWORD PTR $T185114[ebp+4], ebx
  0006f	8b 5d 08	 mov	 ebx, DWORD PTR $T185522[ebp]
  00072	53		 push	 ebx
  00073	50		 push	 eax
  00074	8b 45 e8	 mov	 eax, DWORD PTR $T185114[ebp+4]
  00077	51		 push	 ecx
  00078	50		 push	 eax
  00079	51		 push	 ecx
  0007a	52		 push	 edx
  0007b	57		 push	 edi
  0007c	8b ce		 mov	 ecx, esi
  0007e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00082	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >

; 473  : 		_CATCH_END
; 474  : 		}

  00087	8b c6		 mov	 eax, esi
  00089	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00093	59		 pop	 ecx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
__catch$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$0:

; 470  : 		_CATCH_ALL
; 471  : 		_Tidy();

  0009d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	e8 00 00 00 00	 call	 ?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy

; 472  : 		_RERAISE;

  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN112@list@3:
  000ae	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_val@KV?$allocator@K@std@@@std@@QAE@XZ
__ehhandler$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >
PUBLIC	??0?$vector@KV?$allocator@K@std@@@std@@QAE@I@Z	; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0?$vector@KV?$allocator@K@std@@@std@@QAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@KV?$allocator@K@std@@@std@@QAE@I@Z$0
__ehfuncinfo$??0?$vector@KV?$allocator@K@std@@@std@@QAE@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@KV?$allocator@K@std@@@std@@QAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@KV?$allocator@K@std@@@std@@QAE@I@Z
_TEXT	SEGMENT
$T185541 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
??0?$vector@KV?$allocator@K@std@@@std@@QAE@I@Z PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 482  : 		{	// construct from _Count * _Ty()

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$vector@KV?$allocator@K@std@@@std@@QAE@I@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	6a 04		 push	 4
  0002c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00031	33 c9		 xor	 ecx, ecx
  00033	83 c4 04	 add	 esp, 4
  00036	3b c1		 cmp	 eax, ecx
  00038	74 04		 je	 SHORT $LN13@vector@8
  0003a	89 30		 mov	 DWORD PTR [eax], esi
  0003c	eb 02		 jmp	 SHORT $LN14@vector@8
$LN13@vector@8:
  0003e	33 c0		 xor	 eax, eax
$LN14@vector@8:
  00040	89 06		 mov	 DWORD PTR [esi], eax
  00042	89 4c 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], ecx

; 483  : 		_Construct_n(_Count, _Ty());

  00046	89 4c 24 08	 mov	 DWORD PTR $T185541[esp+28], ecx
  0004a	8b 4c 24 20	 mov	 ecx, DWORD PTR __Count$[esp+24]
  0004e	8d 44 24 08	 lea	 eax, DWORD PTR $T185541[esp+28]
  00052	50		 push	 eax
  00053	51		 push	 ecx
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ?_Construct_n@?$vector@KV?$allocator@K@std@@@std@@QAEXIABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Construct_n

; 484  : 		}

  0005b	8b c6		 mov	 eax, esi
  0005d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5e		 pop	 esi
  0006a	83 c4 14	 add	 esp, 20			; 00000014H
  0006d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@KV?$allocator@K@std@@@std@@QAE@I@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@KV?$allocator@K@std@@@std@@QAE@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@KV?$allocator@K@std@@@std@@QAE@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@KV?$allocator@K@std@@@std@@QAE@I@Z ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
PUBLIC	?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEXABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEXABK@Z
_TEXT	SEGMENT
$T185669 = -8						; size = 8
__Val$ = 8						; size = 4
?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEXABK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

  00000	83 ec 08	 sub	 esp, 8
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 810  : 		if (size() < capacity())

  00006	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00009	57		 push	 edi
  0000a	85 c9		 test	 ecx, ecx
  0000c	75 04		 jne	 SHORT $LN9@push_back@2
  0000e	33 c0		 xor	 eax, eax
  00010	eb 08		 jmp	 SHORT $LN10@push_back@2
$LN9@push_back@2:
  00012	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 f8 02	 sar	 eax, 2
$LN10@push_back@2:
  0001a	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0001d	8b d7		 mov	 edx, edi
  0001f	2b d1		 sub	 edx, ecx
  00021	c1 fa 02	 sar	 edx, 2
  00024	3b d0		 cmp	 edx, eax
  00026	73 16		 jae	 SHORT $LN2@push_back@2

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

  00028	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+12]
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	89 0f		 mov	 DWORD PTR [edi], ecx
  00030	83 c7 04	 add	 edi, 4
  00033	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi

; 824  : 		}

  00038	83 c4 08	 add	 esp, 8
  0003b	c2 04 00	 ret	 4
$LN2@push_back@2:

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else
; 823  : 			insert(end(), _Val);

  0003e	3b cf		 cmp	 ecx, edi
  00040	76 05		 jbe	 SHORT $LN39@push_back@2
  00042	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN39@push_back@2:
  00047	8b 54 24 14	 mov	 edx, DWORD PTR __Val$[esp+12]
  0004b	8b 06		 mov	 eax, DWORD PTR [esi]
  0004d	52		 push	 edx
  0004e	57		 push	 edi
  0004f	50		 push	 eax
  00050	8d 44 24 14	 lea	 eax, DWORD PTR $T185669[esp+28]
  00054	50		 push	 eax
  00055	8b ce		 mov	 ecx, esi
  00057	e8 00 00 00 00	 call	 ?insert@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@KV?$allocator@K@std@@@2@V?$_Vector_const_iterator@KV?$allocator@K@std@@@2@ABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::insert
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi

; 824  : 		}

  0005e	83 c4 08	 add	 esp, 8
  00061	c2 04 00	 ret	 4
?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEXABK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::push_back
_TEXT	ENDS
PUBLIC	?_Insert@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUSecurityTokenInfo@CipherShed@@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Insert
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Insert@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUSecurityTokenInfo@CipherShed@@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
__Val$ = 16						; size = 4
?_Insert@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUSecurityTokenInfo@CipherShed@@@Z PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Insert, COMDAT
; _this$ = ecx

; 711  : 
; 712  :  #if _HAS_ITERATOR_DEBUGGING
; 713  : 		if (_Where._Mycont != this)
; 714  : 			_DEBUG_ERROR("list insert iterator outside range");
; 715  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 716  : 
; 717  : 		_Nodeptr _Pnode = _Where._Mynode();
; 718  : 		_Nodeptr _Newnode = _Buynode(_Pnode, _Prevnode(_Pnode), _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Where$[esp]
  00004	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 4c 24 18	 mov	 ecx, DWORD PTR __Val$[esp+8]
  00010	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  00013	51		 push	 ecx
  00014	52		 push	 edx
  00015	50		 push	 eax
  00016	8b cf		 mov	 ecx, edi
  00018	e8 00 00 00 00	 call	 ?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Buynode

; 719  : 		_Incsize(1);

  0001d	6a 01		 push	 1
  0001f	8b cf		 mov	 ecx, edi
  00021	8b f0		 mov	 esi, eax
  00023	e8 00 00 00 00	 call	 ?_Incsize@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Incsize

; 720  : 		_Prevnode(_Pnode) = _Newnode;

  00028	89 33		 mov	 DWORD PTR [ebx], esi

; 721  : 		_Nextnode(_Prevnode(_Newnode)) = _Newnode;

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	5f		 pop	 edi
  0002e	89 30		 mov	 DWORD PTR [eax], esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx

; 722  : 		}

  00032	c2 0c 00	 ret	 12			; 0000000cH
?_Insert@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUSecurityTokenInfo@CipherShed@@@Z ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Insert
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXXZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXXZ PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1212 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1213 : 		clear();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::clear

; 1214 : 		this->_Alptr.destroy(&_Nextnode(_Myhead));
; 1215 : 		this->_Alptr.destroy(&_Prevnode(_Myhead));
; 1216 : 		this->_Alnod.deallocate(_Myhead, 1);

  00008	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	83 c4 04	 add	 esp, 4

; 1217 : 		_Myhead = 0;

  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	5e		 pop	 esi

; 1218 : 		}

  0001c	c3		 ret	 0
?_Tidy@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXXZ ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 95   : 			{	// construct locking and testing stream

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f9		 mov	 edi, ecx
  00025	89 7c 24 0c	 mov	 DWORD PTR _this$[esp+28], edi
  00029	8b 74 24 20	 mov	 esi, DWORD PTR __Ostr$[esp+24]
  0002d	89 37		 mov	 DWORD PTR [edi], esi
  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	8b 44 31 28	 mov	 eax, DWORD PTR [ecx+esi+40]
  00038	85 c0		 test	 eax, eax
  0003a	74 08		 je	 SHORT $LN12@sentry
  0003c	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0003f	e8 00 00 00 00	 call	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
$LN12@sentry:

; 96   : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00044	8b 16		 mov	 edx, DWORD PTR [esi]
  00046	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00049	03 c6		 add	 eax, esi
  0004b	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0004f	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 0
  00057	75 0e		 jne	 SHORT $LN1@sentry
  00059	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  0005c	85 c0		 test	 eax, eax
  0005e	74 07		 je	 SHORT $LN1@sentry

; 97   : 				_Ostr.tie()->flush();

  00060	8b c8		 mov	 ecx, eax
  00062	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN1@sentry:

; 98   : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006c	83 7c 32 08 00	 cmp	 DWORD PTR [edx+esi+8], 0
  00071	0f 94 c0	 sete	 al
  00074	88 47 04	 mov	 BYTE PTR [edi+4], al

; 99   : 			}

  00077	8b c7		 mov	 eax, edi
  00079	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0007d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00084	59		 pop	 ecx
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	83 c4 10	 add	 esp, 16			; 00000010H
  0008a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??_C@_02EAOCLKAK@ld?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	_sprintf_s:PROC
;	COMDAT ??_C@_02EAOCLKAK@ld?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02EAOCLKAK@ld?$AA@ DB 'ld', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 6
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1153 : 		{	// put formatted long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]

; 1154 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1155 : 		char _Buf[_Buf_size], _Fmt[6];
; 1156 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1157 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "ld",
; 1158 : 				_Iosbase.flags()), _Val)));

  00013	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  0001c	8b f1		 mov	 esi, ecx
  0001e	8b 4c 24 70	 mov	 ecx, DWORD PTR __Val$[esp+84]
  00022	51		 push	 ecx
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02EAOCLKAK@ld?$AA@
  00029	8d 54 24 18	 lea	 edx, DWORD PTR __Fmt$[esp+100]
  0002d	52		 push	 edx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 44 24 1c	 lea	 eax, DWORD PTR __Buf$[esp+96]
  0003c	6a 40		 push	 64			; 00000040H
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _sprintf_s
  00044	8b 54 24 7c	 mov	 edx, DWORD PTR __Fill$[esp+100]
  00048	50		 push	 eax
  00049	8b 44 24 78	 mov	 eax, DWORD PTR __Dest$[esp+108]
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR __Buf$[esp+108]
  00051	51		 push	 ecx
  00052	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  00056	52		 push	 edx
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	51		 push	 ecx
  0005a	57		 push	 edi
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1159 : 		}

  00061	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  00068	83 c4 30	 add	 esp, 48			; 00000030H
  0006b	8b c7		 mov	 eax, edi
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	33 cc		 xor	 ecx, esp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	83 c4 4c	 add	 esp, 76			; 0000004cH
  0007a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02BDDLJJBK@lu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02BDDLJJBK@lu?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02BDDLJJBK@lu?$AA@ DB 'lu', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 6
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1163 : 		{	// put formatted unsigned long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]

; 1164 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1165 : 		char _Buf[_Buf_size], _Fmt[6];
; 1166 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1167 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "lu",
; 1168 : 				_Iosbase.flags()), _Val)));

  00013	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  0001c	8b f1		 mov	 esi, ecx
  0001e	8b 4c 24 70	 mov	 ecx, DWORD PTR __Val$[esp+84]
  00022	51		 push	 ecx
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02BDDLJJBK@lu?$AA@
  00029	8d 54 24 18	 lea	 edx, DWORD PTR __Fmt$[esp+100]
  0002d	52		 push	 edx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 44 24 1c	 lea	 eax, DWORD PTR __Buf$[esp+96]
  0003c	6a 40		 push	 64			; 00000040H
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _sprintf_s
  00044	8b 54 24 7c	 mov	 edx, DWORD PTR __Fill$[esp+100]
  00048	50		 push	 eax
  00049	8b 44 24 78	 mov	 eax, DWORD PTR __Dest$[esp+108]
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR __Buf$[esp+108]
  00051	51		 push	 ecx
  00052	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  00056	52		 push	 edx
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	51		 push	 ecx
  0005a	57		 push	 edi
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1169 : 		}

  00061	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  00068	83 c4 30	 add	 esp, 48			; 00000030H
  0006b	8b c7		 mov	 eax, edi
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	33 cc		 xor	 ecx, esp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	83 c4 4c	 add	 esp, 76			; 0000004cH
  0007a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02HIKPPMOK@Ld?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02HIKPPMOK@Ld?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02HIKPPMOK@Ld?$AA@ DB 'Ld', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 8
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1174 : 		{	// put formatted long long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax

; 1175 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1176 : 		char _Buf[_Buf_size], _Fmt[8];
; 1177 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1178 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "Ld",
; 1179 : 				_Iosbase.flags()), _Val)));

  0000e	8b 54 24 64	 mov	 edx, DWORD PTR __Val$[esp+72]
  00012	53		 push	 ebx
  00013	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]
  00017	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  00020	8b f1		 mov	 esi, ecx
  00022	8b 4c 24 74	 mov	 ecx, DWORD PTR __Val$[esp+88]
  00026	51		 push	 ecx
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02HIKPPMOK@Ld?$AA@
  0002e	8d 44 24 1c	 lea	 eax, DWORD PTR __Fmt$[esp+104]
  00032	50		 push	 eax
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	50		 push	 eax
  0003d	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  00041	6a 40		 push	 64			; 00000040H
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _sprintf_s
  00049	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  0004d	50		 push	 eax
  0004e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+108]
  00055	8d 54 24 2c	 lea	 edx, DWORD PTR __Buf$[esp+112]
  00059	52		 push	 edx
  0005a	8b 54 24 7c	 mov	 edx, DWORD PTR __Dest$[esp+112]
  0005e	50		 push	 eax
  0005f	53		 push	 ebx
  00060	51		 push	 ecx
  00061	52		 push	 edx
  00062	57		 push	 edi
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1180 : 		}

  00069	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140]
  00070	83 c4 34	 add	 esp, 52			; 00000034H
  00073	8b c7		 mov	 eax, edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 4c	 add	 esp, 76			; 0000004cH
  00082	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02CLHGNPPK@Lu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02CLHGNPPK@Lu?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02CLHGNPPK@Lu?$AA@ DB 'Lu', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 8
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1184 : 		{	// put formatted unsigned long long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax

; 1185 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1186 : 		char _Buf[_Buf_size], _Fmt[8];
; 1187 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1188 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "Lu",
; 1189 : 				_Iosbase.flags()), _Val)));

  0000e	8b 54 24 64	 mov	 edx, DWORD PTR __Val$[esp+72]
  00012	53		 push	 ebx
  00013	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]
  00017	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  00020	8b f1		 mov	 esi, ecx
  00022	8b 4c 24 74	 mov	 ecx, DWORD PTR __Val$[esp+88]
  00026	51		 push	 ecx
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02CLHGNPPK@Lu?$AA@
  0002e	8d 44 24 1c	 lea	 eax, DWORD PTR __Fmt$[esp+104]
  00032	50		 push	 eax
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	50		 push	 eax
  0003d	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  00041	6a 40		 push	 64			; 00000040H
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _sprintf_s
  00049	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  0004d	50		 push	 eax
  0004e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+108]
  00055	8d 54 24 2c	 lea	 edx, DWORD PTR __Buf$[esp+112]
  00059	52		 push	 edx
  0005a	8b 54 24 7c	 mov	 edx, DWORD PTR __Dest$[esp+112]
  0005e	50		 push	 eax
  0005f	53		 push	 ebx
  00060	51		 push	 ecx
  00061	52		 push	 edx
  00062	57		 push	 edi
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1190 : 		}

  00069	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140]
  00070	83 c4 34	 add	 esp, 52			; 00000034H
  00073	8b c7		 mov	 eax, edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 4c	 add	 esp, 76			; 0000004cH
  00082	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	__real@38aa95a5b7f87a0f
PUBLIC	__real@4202a05f20000000
PUBLIC	__real@4733426172c74d82
PUBLIC	__real@0000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__fltused:DWORD
;	COMDAT __real@38aa95a5b7f87a0f
CONST	SEGMENT
__real@38aa95a5b7f87a0f DQ 038aa95a5b7f87a0fr	; 1e-035
CONST	ENDS
;	COMDAT __real@4202a05f20000000
CONST	SEGMENT
__real@4202a05f20000000 DQ 04202a05f20000000r	; 1e+010
CONST	ENDS
;	COMDAT __real@4733426172c74d82
CONST	SEGMENT
__real@4733426172c74d82 DQ 04733426172c74d82r	; 1e+035
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
_TEXT	SEGMENT
__Signed$129880 = -129					; size = 1
_this$ = -128						; size = 4
___$ReturnUdt$GSCopy$ = -124				; size = 4
__Fmt$ = -120						; size = 8
__Buf$ = -112						; size = 108
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1195 : 		{	// put formatted double to _Dest

  00000	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 80 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+132], eax
  00014	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+128]
  0001b	53		 push	 ebx
  0001c	55		 push	 ebp
  0001d	8b ac 24 9c 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+136]

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

  00024	89 44 24 10	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+140], eax
  00028	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	89 4c 24 14	 mov	 DWORD PTR _this$[esp+148], ecx
  00031	85 c0		 test	 eax, eax
  00033	7f 0e		 jg	 SHORT $LN13@do_put@3

; 1196 : 		const size_t _Buf_size = _MAX_EXP_DIG + _MAX_SIG_DIG + 64;
; 1197 : 		char _Buf[_Buf_size], _Fmt[8];
; 1198 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1199 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1200 : 				? 6 : _Iosbase.precision();	// desired precision

  00035	f7 45 10 00 20
	00 00		 test	 DWORD PTR [ebp+16], 8192 ; 00002000H
  0003c	75 05		 jne	 SHORT $LN13@do_put@3
  0003e	b8 06 00 00 00	 mov	 eax, 6
$LN13@do_put@3:
  00043	8b f0		 mov	 esi, eax

; 1201 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1202 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  00045	83 fe 24	 cmp	 esi, 36			; 00000024H
  00048	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  0004d	7f 02		 jg	 SHORT $LN16@do_put@3
  0004f	8b d6		 mov	 edx, esi
$LN16@do_put@3:

; 1203 : 		_Precision -= _Significance;
; 1204 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1205 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1206 : 
; 1207 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed
; 1208 : 			&& _Val * 0.5 != _Val)	// skip -Inf, 0, Inf

  00051	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  00054	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
  0005b	8b c1		 mov	 eax, ecx
  0005d	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00062	2b f2		 sub	 esi, edx
  00064	33 db		 xor	 ebx, ebx
  00066	33 ff		 xor	 edi, edi
  00068	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0006d	0f 85 ad 00 00
	00		 jne	 $LN1@do_put@3
  00073	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe0000000000000
  00079	d8 c9		 fmul	 ST(0), ST(1)
  0007b	dd e9		 fucomp	 ST(1)
  0007d	df e0		 fnstsw	 ax
  0007f	f6 c4 44	 test	 ah, 68			; 00000044H
  00082	0f 8b 98 00 00
	00		 jnp	 $LN1@do_put@3

; 1209 : 			{	// scale silly fixed-point value
; 1210 : 			bool _Signed = _Val < 0;

  00088	d9 ee		 fldz
  0008a	d8 d1		 fcom	 ST(1)
  0008c	df e0		 fnstsw	 ax
  0008e	f6 c4 41	 test	 ah, 65			; 00000041H
  00091	75 0b		 jne	 SHORT $LN17@do_put@3

; 1211 : 			if (_Signed)
; 1212 : 				_Val = -_Val;

  00093	d9 c9		 fxch	 ST(1)
  00095	c6 44 24 13 01	 mov	 BYTE PTR __Signed$129880[esp+148], 1
  0009a	d9 e0		 fchs
  0009c	eb 06		 jmp	 SHORT $LN9@do_put@3
$LN17@do_put@3:

; 1209 : 			{	// scale silly fixed-point value
; 1210 : 			bool _Signed = _Val < 0;

  0009e	88 5c 24 13	 mov	 BYTE PTR __Signed$129880[esp+148], bl

; 1226 : 				_Val = -_Val;

  000a2	d9 c9		 fxch	 ST(1)
$LN9@do_put@3:
  000a4	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  000aa	d8 d1		 fcom	 ST(1)
  000ac	df e0		 fnstsw	 ax
  000ae	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  000b4	f6 c4 41	 test	 ah, 65			; 00000041H
  000b7	7b 06		 jnp	 SHORT $LN8@do_put@3
$LN52@do_put@3:

; 1213 : 
; 1214 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000b9	dd d9		 fstp	 ST(1)
  000bb	eb 1c		 jmp	 SHORT $LN6@do_put@3
$LN58@do_put@3:
  000bd	d9 c9		 fxch	 ST(1)
$LN8@do_put@3:
  000bf	81 fb 88 13 00
	00		 cmp	 ebx, 5000		; 00001388H
  000c5	73 f2		 jae	 SHORT $LN52@do_put@3

; 1215 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000c7	dc fa		 fdiv	 ST(2), ST(0)
  000c9	83 c3 0a	 add	 ebx, 10			; 0000000aH
  000cc	d9 c9		 fxch	 ST(1)
  000ce	d8 d2		 fcom	 ST(2)
  000d0	df e0		 fnstsw	 ax
  000d2	f6 c4 41	 test	 ah, 65			; 00000041H
  000d5	7b e6		 jnp	 SHORT $LN58@do_put@3

; 1213 : 
; 1214 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000d7	dd d8		 fstp	 ST(0)
$LN6@do_put@3:

; 1216 : 
; 1217 : 			if (0 < _Val)

  000d9	d9 ca		 fxch	 ST(2)
  000db	d8 d9		 fcomp	 ST(1)
  000dd	df e0		 fnstsw	 ax
  000df	f6 c4 05	 test	 ah, 5
  000e2	7a 31		 jp	 SHORT $LN60@do_put@3

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000e4	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000e7	7c 2c		 jl	 SHORT $LN60@do_put@3
  000e9	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  000ef	eb 02		 jmp	 SHORT $LN4@do_put@3
$LN73@do_put@3:
  000f1	d9 c9		 fxch	 ST(1)
$LN4@do_put@3:
  000f3	d8 d1		 fcom	 ST(1)
  000f5	df e0		 fnstsw	 ax
  000f7	f6 c4 01	 test	 ah, 1
  000fa	75 5e		 jne	 SHORT $LN67@do_put@3
  000fc	81 ff 88 13 00
	00		 cmp	 edi, 5000		; 00001388H
  00102	73 56		 jae	 SHORT $LN67@do_put@3

; 1220 : 					{	// drop 10 zeros after decimal point
; 1221 : 					_Val *= 1e10;
; 1222 : 					_Precision -= 10;

  00104	83 ee 0a	 sub	 esi, 10			; 0000000aH
  00107	d9 c9		 fxch	 ST(1)
  00109	83 c7 0a	 add	 edi, 10			; 0000000aH
  0010c	d8 ca		 fmul	 ST(0), ST(2)
  0010e	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00111	7d de		 jge	 SHORT $LN73@do_put@3

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00113	dd d9		 fstp	 ST(1)
$LN60@do_put@3:

; 1223 : 					}
; 1224 : 
; 1225 : 			if (_Signed)

  00115	80 7c 24 13 00	 cmp	 BYTE PTR __Signed$129880[esp+148], 0
  0011a	dd d9		 fstp	 ST(1)
  0011c	74 02		 je	 SHORT $LN1@do_put@3

; 1226 : 				_Val = -_Val;

  0011e	d9 e0		 fchs
$LN1@do_put@3:

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

  00120	c6 44 24 1c 25	 mov	 BYTE PTR __Fmt$[esp+148], 37 ; 00000025H
  00125	8d 44 24 1d	 lea	 eax, DWORD PTR __Fmt$[esp+149]
  00129	f6 c1 20	 test	 cl, 32			; 00000020H
  0012c	74 09		 je	 SHORT $LN31@do_put@3
  0012e	c6 44 24 1d 2b	 mov	 BYTE PTR __Fmt$[esp+149], 43 ; 0000002bH
  00133	8d 44 24 1e	 lea	 eax, DWORD PTR __Fmt$[esp+150]
$LN31@do_put@3:
  00137	f6 c1 10	 test	 cl, 16			; 00000010H
  0013a	74 04		 je	 SHORT $LN30@do_put@3
  0013c	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  0013f	40		 inc	 eax
$LN30@do_put@3:
  00140	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
  00143	40		 inc	 eax
  00144	c6 00 2a	 mov	 BYTE PTR [eax], 42	; 0000002aH
  00147	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  0014d	40		 inc	 eax
  0014e	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  00154	75 08		 jne	 SHORT $LN36@do_put@3
  00156	b1 66		 mov	 cl, 102			; 00000066H
  00158	eb 1d		 jmp	 SHORT $LN35@do_put@3
$LN67@do_put@3:

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  0015a	dd d8		 fstp	 ST(0)
  0015c	eb b7		 jmp	 SHORT $LN60@do_put@3

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

$LN36@do_put@3:
  0015e	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  00164	75 04		 jne	 SHORT $LN34@do_put@3
  00166	b1 61		 mov	 cl, 97			; 00000061H
  00168	eb 0d		 jmp	 SHORT $LN35@do_put@3
$LN34@do_put@3:
  0016a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00170	0f 95 c1	 setne	 cl
  00173	8d 4c 09 65	 lea	 ecx, DWORD PTR [ecx+ecx+101]
$LN35@do_put@3:
  00177	83 ec 08	 sub	 esp, 8
  0017a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0017d	52		 push	 edx
  0017e	88 08		 mov	 BYTE PTR [eax], cl
  00180	8d 4c 24 28	 lea	 ecx, DWORD PTR __Fmt$[esp+160]
  00184	51		 push	 ecx
  00185	8d 54 24 34	 lea	 edx, DWORD PTR __Buf$[esp+164]
  00189	6a 6c		 push	 108			; 0000006cH
  0018b	52		 push	 edx
  0018c	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  00190	e8 00 00 00 00	 call	 _sprintf_s
  00195	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+168]
  0019c	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+172]
  001a3	50		 push	 eax
  001a4	56		 push	 esi
  001a5	8b 74 24 38	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+180]
  001a9	57		 push	 edi
  001aa	53		 push	 ebx
  001ab	8d 44 24 4c	 lea	 eax, DWORD PTR __Buf$[esp+188]
  001af	50		 push	 eax
  001b0	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+188]
  001b7	51		 push	 ecx
  001b8	8b 4c 24 44	 mov	 ecx, DWORD PTR _this$[esp+196]
  001bc	55		 push	 ebp
  001bd	52		 push	 edx
  001be	50		 push	 eax
  001bf	56		 push	 esi
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput

; 1233 : 		}

  001c6	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+216]
  001cd	83 c4 44	 add	 esp, 68			; 00000044H
  001d0	5f		 pop	 edi
  001d1	8b c6		 mov	 eax, esi
  001d3	5e		 pop	 esi
  001d4	5d		 pop	 ebp
  001d5	5b		 pop	 ebx
  001d6	33 cc		 xor	 ecx, esp
  001d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001dd	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H
  001e3	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
_TEXT	SEGMENT
__Signed$129908 = -129					; size = 1
_this$ = -128						; size = 4
___$ReturnUdt$GSCopy$ = -124				; size = 4
__Fmt$ = -120						; size = 8
__Buf$ = -112						; size = 108
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1237 : 		{	// put formatted long double to _Dest

  00000	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 80 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+132], eax
  00014	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+128]
  0001b	53		 push	 ebx
  0001c	55		 push	 ebp
  0001d	8b ac 24 9c 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+136]

; 1268 : 			}
; 1269 : 
; 1270 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1271 : 			_Beforepoint, _Afterpoint, _Precision,
; 1272 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1273 : 					_Significance, _Val)));	// convert and put

  00024	89 44 24 10	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+140], eax
  00028	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	89 4c 24 14	 mov	 DWORD PTR _this$[esp+148], ecx
  00031	85 c0		 test	 eax, eax
  00033	7f 0e		 jg	 SHORT $LN13@do_put@4

; 1238 : 		const size_t _Buf_size = _MAX_EXP_DIG + _MAX_SIG_DIG + 64;
; 1239 : 		char _Buf[_Buf_size], _Fmt[8];
; 1240 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1241 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1242 : 				? 6 : _Iosbase.precision();	// desired precision

  00035	f7 45 10 00 20
	00 00		 test	 DWORD PTR [ebp+16], 8192 ; 00002000H
  0003c	75 05		 jne	 SHORT $LN13@do_put@4
  0003e	b8 06 00 00 00	 mov	 eax, 6
$LN13@do_put@4:
  00043	8b f0		 mov	 esi, eax

; 1243 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1244 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  00045	83 fe 24	 cmp	 esi, 36			; 00000024H
  00048	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  0004d	7f 02		 jg	 SHORT $LN16@do_put@4
  0004f	8b d6		 mov	 edx, esi
$LN16@do_put@4:

; 1245 : 		_Precision -= _Significance;
; 1246 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1247 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1248 : 
; 1249 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed)

  00051	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  00054	8b c1		 mov	 eax, ecx
  00056	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  0005b	2b f2		 sub	 esi, edx
  0005d	33 db		 xor	 ebx, ebx
  0005f	33 ff		 xor	 edi, edi
  00061	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  00066	0f 85 a1 00 00
	00		 jne	 $LN43@do_put@4

; 1250 : 			{	// scale silly fixed-point value
; 1251 : 			bool _Signed = _Val < 0;

  0006c	d9 ee		 fldz
  0006e	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
  00075	d8 d1		 fcom	 ST(1)
  00077	df e0		 fnstsw	 ax
  00079	f6 c4 05	 test	 ah, 5
  0007c	7a 20		 jp	 SHORT $LN17@do_put@4
  0007e	c6 44 24 13 01	 mov	 BYTE PTR __Signed$129908[esp+148], 1

; 1253 : 				_Val = -_Val;

  00083	d9 e0		 fchs
$LN9@do_put@4:

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  00085	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  0008b	d8 d1		 fcom	 ST(1)
  0008d	df e0		 fnstsw	 ax
  0008f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  00095	f6 c4 41	 test	 ah, 65			; 00000041H
  00098	7b 0c		 jnp	 SHORT $LN8@do_put@4
$LN49@do_put@4:
  0009a	dd d9		 fstp	 ST(1)
  0009c	eb 22		 jmp	 SHORT $LN6@do_put@4
$LN17@do_put@4:

; 1250 : 			{	// scale silly fixed-point value
; 1251 : 			bool _Signed = _Val < 0;

  0009e	88 5c 24 13	 mov	 BYTE PTR __Signed$129908[esp+148], bl

; 1252 : 			if (_Signed)

  000a2	eb e1		 jmp	 SHORT $LN9@do_put@4
$LN55@do_put@4:

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000a4	d9 c9		 fxch	 ST(1)
$LN8@do_put@4:
  000a6	81 fb 88 13 00
	00		 cmp	 ebx, 5000		; 00001388H
  000ac	73 ec		 jae	 SHORT $LN49@do_put@4

; 1256 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000ae	dc fa		 fdiv	 ST(2), ST(0)
  000b0	83 c3 0a	 add	 ebx, 10			; 0000000aH
  000b3	d9 c9		 fxch	 ST(1)
  000b5	d8 d2		 fcom	 ST(2)
  000b7	df e0		 fnstsw	 ax
  000b9	f6 c4 41	 test	 ah, 65			; 00000041H
  000bc	7b e6		 jnp	 SHORT $LN55@do_put@4

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000be	dd d8		 fstp	 ST(0)
$LN6@do_put@4:

; 1257 : 
; 1258 : 			if (0 < _Val)

  000c0	d9 ca		 fxch	 ST(2)
  000c2	d8 d9		 fcomp	 ST(1)
  000c4	df e0		 fnstsw	 ax
  000c6	f6 c4 05	 test	 ah, 5
  000c9	7a 31		 jp	 SHORT $LN57@do_put@4

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000cb	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000ce	7c 2c		 jl	 SHORT $LN57@do_put@4
  000d0	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  000d6	eb 02		 jmp	 SHORT $LN4@do_put@4
$LN70@do_put@4:
  000d8	d9 c9		 fxch	 ST(1)
$LN4@do_put@4:
  000da	d8 d1		 fcom	 ST(1)
  000dc	df e0		 fnstsw	 ax
  000de	f6 c4 01	 test	 ah, 1
  000e1	75 26		 jne	 SHORT $LN64@do_put@4
  000e3	81 ff 88 13 00
	00		 cmp	 edi, 5000		; 00001388H
  000e9	73 1e		 jae	 SHORT $LN64@do_put@4

; 1261 : 					{	// drop 10 zeros after decimal point
; 1262 : 					_Val *= 1e10;
; 1263 : 					_Precision -= 10;

  000eb	83 ee 0a	 sub	 esi, 10			; 0000000aH
  000ee	d9 c9		 fxch	 ST(1)
  000f0	83 c7 0a	 add	 edi, 10			; 0000000aH
  000f3	d8 ca		 fmul	 ST(0), ST(2)
  000f5	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000f8	7d de		 jge	 SHORT $LN70@do_put@4

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000fa	dd d9		 fstp	 ST(1)
$LN57@do_put@4:

; 1264 : 					}
; 1265 : 
; 1266 : 			if (_Signed)

  000fc	80 7c 24 13 00	 cmp	 BYTE PTR __Signed$129908[esp+148], 0
  00101	dd d9		 fstp	 ST(1)
  00103	74 0f		 je	 SHORT $LN1@do_put@4

; 1267 : 				_Val = -_Val;

  00105	d9 e0		 fchs
  00107	eb 0b		 jmp	 SHORT $LN1@do_put@4
$LN64@do_put@4:

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00109	dd d8		 fstp	 ST(0)
  0010b	eb ef		 jmp	 SHORT $LN57@do_put@4
$LN43@do_put@4:

; 1267 : 				_Val = -_Val;

  0010d	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
$LN1@do_put@4:

; 1268 : 			}
; 1269 : 
; 1270 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1271 : 			_Beforepoint, _Afterpoint, _Precision,
; 1272 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1273 : 					_Significance, _Val)));	// convert and put

  00114	c6 44 24 1c 25	 mov	 BYTE PTR __Fmt$[esp+148], 37 ; 00000025H
  00119	8d 44 24 1d	 lea	 eax, DWORD PTR __Fmt$[esp+149]
  0011d	f6 c1 20	 test	 cl, 32			; 00000020H
  00120	74 09		 je	 SHORT $LN31@do_put@4
  00122	c6 44 24 1d 2b	 mov	 BYTE PTR __Fmt$[esp+149], 43 ; 0000002bH
  00127	8d 44 24 1e	 lea	 eax, DWORD PTR __Fmt$[esp+150]
$LN31@do_put@4:
  0012b	f6 c1 10	 test	 cl, 16			; 00000010H
  0012e	74 04		 je	 SHORT $LN30@do_put@4
  00130	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  00133	40		 inc	 eax
$LN30@do_put@4:
  00134	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
  00137	40		 inc	 eax
  00138	c6 00 2a	 mov	 BYTE PTR [eax], 42	; 0000002aH
  0013b	40		 inc	 eax
  0013c	c6 00 4c	 mov	 BYTE PTR [eax], 76	; 0000004cH
  0013f	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  00145	40		 inc	 eax
  00146	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  0014c	75 04		 jne	 SHORT $LN36@do_put@4
  0014e	b1 66		 mov	 cl, 102			; 00000066H
  00150	eb 19		 jmp	 SHORT $LN35@do_put@4
$LN36@do_put@4:
  00152	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  00158	75 04		 jne	 SHORT $LN34@do_put@4
  0015a	b1 61		 mov	 cl, 97			; 00000061H
  0015c	eb 0d		 jmp	 SHORT $LN35@do_put@4
$LN34@do_put@4:
  0015e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00164	0f 95 c1	 setne	 cl
  00167	8d 4c 09 65	 lea	 ecx, DWORD PTR [ecx+ecx+101]
$LN35@do_put@4:
  0016b	83 ec 08	 sub	 esp, 8
  0016e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00171	52		 push	 edx
  00172	88 08		 mov	 BYTE PTR [eax], cl
  00174	8d 4c 24 28	 lea	 ecx, DWORD PTR __Fmt$[esp+160]
  00178	51		 push	 ecx
  00179	8d 54 24 34	 lea	 edx, DWORD PTR __Buf$[esp+164]
  0017d	6a 6c		 push	 108			; 0000006cH
  0017f	52		 push	 edx
  00180	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  00184	e8 00 00 00 00	 call	 _sprintf_s
  00189	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+168]
  00190	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+172]
  00197	50		 push	 eax
  00198	56		 push	 esi
  00199	8b 74 24 38	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+180]
  0019d	57		 push	 edi
  0019e	53		 push	 ebx
  0019f	8d 44 24 4c	 lea	 eax, DWORD PTR __Buf$[esp+188]
  001a3	50		 push	 eax
  001a4	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+188]
  001ab	51		 push	 ecx
  001ac	8b 4c 24 44	 mov	 ecx, DWORD PTR _this$[esp+196]
  001b0	55		 push	 ebp
  001b1	52		 push	 edx
  001b2	50		 push	 eax
  001b3	56		 push	 esi
  001b4	51		 push	 ecx
  001b5	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput

; 1274 : 		}

  001ba	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+216]
  001c1	83 c4 44	 add	 esp, 68			; 00000044H
  001c4	5f		 pop	 edi
  001c5	8b c6		 mov	 eax, esi
  001c7	5e		 pop	 esi
  001c8	5d		 pop	 ebp
  001c9	5b		 pop	 ebx
  001ca	33 cc		 xor	 ecx, esp
  001cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d1	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H
  001d7	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02BBAHNLBA@?$CFp?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp?$AA@ DB '%p', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
_TEXT	SEGMENT
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1278 : 		{	// put formatted void pointer to _Dest

  00000	83 ec 44	 sub	 esp, 68			; 00000044H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 40	 mov	 DWORD PTR __$ArrayPad$[esp+68], eax
  0000e	8b 44 24 5c	 mov	 eax, DWORD PTR __Val$[esp+64]
  00012	53		 push	 ebx
  00013	8b 5c 24 58	 mov	 ebx, DWORD PTR __Iosbase$[esp+68]
  00017	56		 push	 esi
  00018	8b 74 24 50	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+72]
  0001c	57		 push	 edi

; 1279 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1280 : 		char _Buf[_Buf_size];
; 1281 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1282 : 			::sprintf_s(_Buf, _Buf_size, "%p", _Val)));

  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_02BBAHNLBA@?$CFp?$AA@
  00023	8d 44 24 14	 lea	 eax, DWORD PTR __Buf$[esp+88]
  00027	6a 40		 push	 64			; 00000040H
  00029	50		 push	 eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	e8 00 00 00 00	 call	 _sprintf_s
  00031	8b 54 24 74	 mov	 edx, DWORD PTR __Fill$[esp+92]
  00035	50		 push	 eax
  00036	8b 44 24 70	 mov	 eax, DWORD PTR __Dest$[esp+100]
  0003a	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  0003e	51		 push	 ecx
  0003f	8b 4c 24 70	 mov	 ecx, DWORD PTR __Dest$[esp+100]
  00043	52		 push	 edx
  00044	53		 push	 ebx
  00045	50		 push	 eax
  00046	51		 push	 ecx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1283 : 		}

  0004e	8b 4c 24 7c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+128]
  00052	83 c4 30	 add	 esp, 48			; 00000030H
  00055	5f		 pop	 edi
  00056	8b c6		 mov	 eax, esi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	33 cc		 xor	 ecx, esp
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	83 c4 44	 add	 esp, 68			; 00000044H
  00064	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry, COMDAT
; _this$ = ecx

; 95   : 			{	// construct locking and testing stream

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f9		 mov	 edi, ecx
  00025	89 7c 24 0c	 mov	 DWORD PTR _this$[esp+28], edi
  00029	8b 74 24 20	 mov	 esi, DWORD PTR __Ostr$[esp+24]
  0002d	89 37		 mov	 DWORD PTR [edi], esi
  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	8b 44 31 28	 mov	 eax, DWORD PTR [ecx+esi+40]
  00038	85 c0		 test	 eax, eax
  0003a	74 08		 je	 SHORT $LN12@sentry@2
  0003c	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0003f	e8 00 00 00 00	 call	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
$LN12@sentry@2:

; 96   : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00044	8b 16		 mov	 edx, DWORD PTR [esi]
  00046	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00049	03 c6		 add	 eax, esi
  0004b	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0004f	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 0
  00057	75 0e		 jne	 SHORT $LN1@sentry@2
  00059	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  0005c	85 c0		 test	 eax, eax
  0005e	74 07		 je	 SHORT $LN1@sentry@2

; 97   : 				_Ostr.tie()->flush();

  00060	8b c8		 mov	 ecx, eax
  00062	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
$LN1@sentry@2:

; 98   : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006c	83 7c 32 08 00	 cmp	 DWORD PTR [edx+esi+8], 0
  00071	0f 94 c0	 sete	 al
  00074	88 47 04	 mov	 BYTE PTR [edi+4], al

; 99   : 			}

  00077	8b c7		 mov	 eax, edi
  00079	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0007d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00084	59		 pop	 ecx
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	83 c4 10	 add	 esp, 16			; 00000010H
  0008a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 6
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 4
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1153 : 		{	// put formatted long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]

; 1154 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1155 : 		char _Buf[_Buf_size], _Fmt[6];
; 1156 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1157 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "ld",
; 1158 : 				_Iosbase.flags()), _Val)));

  00013	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  0001c	8b f1		 mov	 esi, ecx
  0001e	8b 4c 24 70	 mov	 ecx, DWORD PTR __Val$[esp+84]
  00022	51		 push	 ecx
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02EAOCLKAK@ld?$AA@
  00029	8d 54 24 18	 lea	 edx, DWORD PTR __Fmt$[esp+100]
  0002d	52		 push	 edx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 44 24 1c	 lea	 eax, DWORD PTR __Buf$[esp+96]
  0003c	6a 40		 push	 64			; 00000040H
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _sprintf_s
  00044	8b 54 24 7c	 mov	 edx, DWORD PTR __Fill$[esp+100]
  00048	50		 push	 eax
  00049	8b 44 24 78	 mov	 eax, DWORD PTR __Dest$[esp+108]
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR __Buf$[esp+108]
  00051	51		 push	 ecx
  00052	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  00056	52		 push	 edx
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	51		 push	 ecx
  0005a	57		 push	 edi
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1159 : 		}

  00061	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  00068	83 c4 30	 add	 esp, 48			; 00000030H
  0006b	8b c7		 mov	 eax, edi
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	33 cc		 xor	 ecx, esp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	83 c4 4c	 add	 esp, 76			; 0000004cH
  0007a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 6
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 4
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1163 : 		{	// put formatted unsigned long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]

; 1164 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1165 : 		char _Buf[_Buf_size], _Fmt[6];
; 1166 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1167 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "lu",
; 1168 : 				_Iosbase.flags()), _Val)));

  00013	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  0001c	8b f1		 mov	 esi, ecx
  0001e	8b 4c 24 70	 mov	 ecx, DWORD PTR __Val$[esp+84]
  00022	51		 push	 ecx
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02BDDLJJBK@lu?$AA@
  00029	8d 54 24 18	 lea	 edx, DWORD PTR __Fmt$[esp+100]
  0002d	52		 push	 edx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 44 24 1c	 lea	 eax, DWORD PTR __Buf$[esp+96]
  0003c	6a 40		 push	 64			; 00000040H
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _sprintf_s
  00044	8b 54 24 7c	 mov	 edx, DWORD PTR __Fill$[esp+100]
  00048	50		 push	 eax
  00049	8b 44 24 78	 mov	 eax, DWORD PTR __Dest$[esp+108]
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR __Buf$[esp+108]
  00051	51		 push	 ecx
  00052	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  00056	52		 push	 edx
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	51		 push	 ecx
  0005a	57		 push	 edi
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1169 : 		}

  00061	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  00068	83 c4 30	 add	 esp, 48			; 00000030H
  0006b	8b c7		 mov	 eax, edi
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	33 cc		 xor	 ecx, esp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	83 c4 4c	 add	 esp, 76			; 0000004cH
  0007a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 8
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1174 : 		{	// put formatted long long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax

; 1175 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1176 : 		char _Buf[_Buf_size], _Fmt[8];
; 1177 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1178 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "Ld",
; 1179 : 				_Iosbase.flags()), _Val)));

  0000e	8b 54 24 64	 mov	 edx, DWORD PTR __Val$[esp+72]
  00012	53		 push	 ebx
  00013	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]
  00017	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  00020	8b f1		 mov	 esi, ecx
  00022	8b 4c 24 74	 mov	 ecx, DWORD PTR __Val$[esp+88]
  00026	51		 push	 ecx
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02HIKPPMOK@Ld?$AA@
  0002e	8d 44 24 1c	 lea	 eax, DWORD PTR __Fmt$[esp+104]
  00032	50		 push	 eax
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	50		 push	 eax
  0003d	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  00041	6a 40		 push	 64			; 00000040H
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _sprintf_s
  00049	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  0004d	50		 push	 eax
  0004e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+108]
  00055	8d 54 24 2c	 lea	 edx, DWORD PTR __Buf$[esp+112]
  00059	52		 push	 edx
  0005a	8b 54 24 7c	 mov	 edx, DWORD PTR __Dest$[esp+112]
  0005e	50		 push	 eax
  0005f	53		 push	 ebx
  00060	51		 push	 ecx
  00061	52		 push	 edx
  00062	57		 push	 edi
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1180 : 		}

  00069	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140]
  00070	83 c4 34	 add	 esp, 52			; 00000034H
  00073	8b c7		 mov	 eax, edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 4c	 add	 esp, 76			; 0000004cH
  00082	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 8
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1184 : 		{	// put formatted unsigned long long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax

; 1185 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1186 : 		char _Buf[_Buf_size], _Fmt[8];
; 1187 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1188 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "Lu",
; 1189 : 				_Iosbase.flags()), _Val)));

  0000e	8b 54 24 64	 mov	 edx, DWORD PTR __Val$[esp+72]
  00012	53		 push	 ebx
  00013	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]
  00017	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  00020	8b f1		 mov	 esi, ecx
  00022	8b 4c 24 74	 mov	 ecx, DWORD PTR __Val$[esp+88]
  00026	51		 push	 ecx
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02CLHGNPPK@Lu?$AA@
  0002e	8d 44 24 1c	 lea	 eax, DWORD PTR __Fmt$[esp+104]
  00032	50		 push	 eax
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	50		 push	 eax
  0003d	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  00041	6a 40		 push	 64			; 00000040H
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _sprintf_s
  00049	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  0004d	50		 push	 eax
  0004e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+108]
  00055	8d 54 24 2c	 lea	 edx, DWORD PTR __Buf$[esp+112]
  00059	52		 push	 edx
  0005a	8b 54 24 7c	 mov	 edx, DWORD PTR __Dest$[esp+112]
  0005e	50		 push	 eax
  0005f	53		 push	 ebx
  00060	51		 push	 ecx
  00061	52		 push	 edx
  00062	57		 push	 edi
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1190 : 		}

  00069	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140]
  00070	83 c4 34	 add	 esp, 52			; 00000034H
  00073	8b c7		 mov	 eax, edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 4c	 add	 esp, 76			; 0000004cH
  00082	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z
_TEXT	SEGMENT
__Signed$130069 = -129					; size = 1
_this$GSCopy$ = -128					; size = 4
___$ReturnUdt$GSCopy$ = -124				; size = 4
__Fmt$ = -120						; size = 8
__Buf$ = -112						; size = 108
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1195 : 		{	// put formatted double to _Dest

  00000	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 80 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+132], eax
  00014	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+128]
  0001b	53		 push	 ebx
  0001c	55		 push	 ebp
  0001d	8b ac 24 9c 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+136]

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

  00024	89 44 24 10	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+140], eax
  00028	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	89 4c 24 14	 mov	 DWORD PTR _this$GSCopy$[esp+148], ecx
  00031	85 c0		 test	 eax, eax
  00033	7f 0e		 jg	 SHORT $LN13@do_put@5

; 1196 : 		const size_t _Buf_size = _MAX_EXP_DIG + _MAX_SIG_DIG + 64;
; 1197 : 		char _Buf[_Buf_size], _Fmt[8];
; 1198 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1199 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1200 : 				? 6 : _Iosbase.precision();	// desired precision

  00035	f7 45 10 00 20
	00 00		 test	 DWORD PTR [ebp+16], 8192 ; 00002000H
  0003c	75 05		 jne	 SHORT $LN13@do_put@5
  0003e	b8 06 00 00 00	 mov	 eax, 6
$LN13@do_put@5:
  00043	8b f0		 mov	 esi, eax

; 1201 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1202 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  00045	83 fe 24	 cmp	 esi, 36			; 00000024H
  00048	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  0004d	7f 02		 jg	 SHORT $LN16@do_put@5
  0004f	8b d6		 mov	 edx, esi
$LN16@do_put@5:

; 1203 : 		_Precision -= _Significance;
; 1204 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1205 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1206 : 
; 1207 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed
; 1208 : 			&& _Val * 0.5 != _Val)	// skip -Inf, 0, Inf

  00051	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  00054	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
  0005b	8b c1		 mov	 eax, ecx
  0005d	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00062	2b f2		 sub	 esi, edx
  00064	33 db		 xor	 ebx, ebx
  00066	33 ff		 xor	 edi, edi
  00068	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0006d	0f 85 ad 00 00
	00		 jne	 $LN1@do_put@5
  00073	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe0000000000000
  00079	d8 c9		 fmul	 ST(0), ST(1)
  0007b	dd e9		 fucomp	 ST(1)
  0007d	df e0		 fnstsw	 ax
  0007f	f6 c4 44	 test	 ah, 68			; 00000044H
  00082	0f 8b 98 00 00
	00		 jnp	 $LN1@do_put@5

; 1209 : 			{	// scale silly fixed-point value
; 1210 : 			bool _Signed = _Val < 0;

  00088	d9 ee		 fldz
  0008a	d8 d1		 fcom	 ST(1)
  0008c	df e0		 fnstsw	 ax
  0008e	f6 c4 41	 test	 ah, 65			; 00000041H
  00091	75 0b		 jne	 SHORT $LN17@do_put@5

; 1211 : 			if (_Signed)
; 1212 : 				_Val = -_Val;

  00093	d9 c9		 fxch	 ST(1)
  00095	c6 44 24 13 01	 mov	 BYTE PTR __Signed$130069[esp+148], 1
  0009a	d9 e0		 fchs
  0009c	eb 06		 jmp	 SHORT $LN9@do_put@5
$LN17@do_put@5:

; 1209 : 			{	// scale silly fixed-point value
; 1210 : 			bool _Signed = _Val < 0;

  0009e	88 5c 24 13	 mov	 BYTE PTR __Signed$130069[esp+148], bl

; 1226 : 				_Val = -_Val;

  000a2	d9 c9		 fxch	 ST(1)
$LN9@do_put@5:
  000a4	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  000aa	d8 d1		 fcom	 ST(1)
  000ac	df e0		 fnstsw	 ax
  000ae	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  000b4	f6 c4 41	 test	 ah, 65			; 00000041H
  000b7	7b 06		 jnp	 SHORT $LN8@do_put@5
$LN52@do_put@5:

; 1213 : 
; 1214 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000b9	dd d9		 fstp	 ST(1)
  000bb	eb 1c		 jmp	 SHORT $LN6@do_put@5
$LN58@do_put@5:
  000bd	d9 c9		 fxch	 ST(1)
$LN8@do_put@5:
  000bf	81 fb 88 13 00
	00		 cmp	 ebx, 5000		; 00001388H
  000c5	73 f2		 jae	 SHORT $LN52@do_put@5

; 1215 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000c7	dc fa		 fdiv	 ST(2), ST(0)
  000c9	83 c3 0a	 add	 ebx, 10			; 0000000aH
  000cc	d9 c9		 fxch	 ST(1)
  000ce	d8 d2		 fcom	 ST(2)
  000d0	df e0		 fnstsw	 ax
  000d2	f6 c4 41	 test	 ah, 65			; 00000041H
  000d5	7b e6		 jnp	 SHORT $LN58@do_put@5

; 1213 : 
; 1214 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000d7	dd d8		 fstp	 ST(0)
$LN6@do_put@5:

; 1216 : 
; 1217 : 			if (0 < _Val)

  000d9	d9 ca		 fxch	 ST(2)
  000db	d8 d9		 fcomp	 ST(1)
  000dd	df e0		 fnstsw	 ax
  000df	f6 c4 05	 test	 ah, 5
  000e2	7a 31		 jp	 SHORT $LN60@do_put@5

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000e4	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000e7	7c 2c		 jl	 SHORT $LN60@do_put@5
  000e9	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  000ef	eb 02		 jmp	 SHORT $LN4@do_put@5
$LN73@do_put@5:
  000f1	d9 c9		 fxch	 ST(1)
$LN4@do_put@5:
  000f3	d8 d1		 fcom	 ST(1)
  000f5	df e0		 fnstsw	 ax
  000f7	f6 c4 01	 test	 ah, 1
  000fa	75 5e		 jne	 SHORT $LN67@do_put@5
  000fc	81 ff 88 13 00
	00		 cmp	 edi, 5000		; 00001388H
  00102	73 56		 jae	 SHORT $LN67@do_put@5

; 1220 : 					{	// drop 10 zeros after decimal point
; 1221 : 					_Val *= 1e10;
; 1222 : 					_Precision -= 10;

  00104	83 ee 0a	 sub	 esi, 10			; 0000000aH
  00107	d9 c9		 fxch	 ST(1)
  00109	83 c7 0a	 add	 edi, 10			; 0000000aH
  0010c	d8 ca		 fmul	 ST(0), ST(2)
  0010e	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00111	7d de		 jge	 SHORT $LN73@do_put@5

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00113	dd d9		 fstp	 ST(1)
$LN60@do_put@5:

; 1223 : 					}
; 1224 : 
; 1225 : 			if (_Signed)

  00115	80 7c 24 13 00	 cmp	 BYTE PTR __Signed$130069[esp+148], 0
  0011a	dd d9		 fstp	 ST(1)
  0011c	74 02		 je	 SHORT $LN1@do_put@5

; 1226 : 				_Val = -_Val;

  0011e	d9 e0		 fchs
$LN1@do_put@5:

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

  00120	c6 44 24 1c 25	 mov	 BYTE PTR __Fmt$[esp+148], 37 ; 00000025H
  00125	8d 44 24 1d	 lea	 eax, DWORD PTR __Fmt$[esp+149]
  00129	f6 c1 20	 test	 cl, 32			; 00000020H
  0012c	74 09		 je	 SHORT $LN31@do_put@5
  0012e	c6 44 24 1d 2b	 mov	 BYTE PTR __Fmt$[esp+149], 43 ; 0000002bH
  00133	8d 44 24 1e	 lea	 eax, DWORD PTR __Fmt$[esp+150]
$LN31@do_put@5:
  00137	f6 c1 10	 test	 cl, 16			; 00000010H
  0013a	74 04		 je	 SHORT $LN30@do_put@5
  0013c	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  0013f	40		 inc	 eax
$LN30@do_put@5:
  00140	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
  00143	40		 inc	 eax
  00144	c6 00 2a	 mov	 BYTE PTR [eax], 42	; 0000002aH
  00147	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  0014d	40		 inc	 eax
  0014e	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  00154	75 08		 jne	 SHORT $LN36@do_put@5
  00156	b1 66		 mov	 cl, 102			; 00000066H
  00158	eb 1d		 jmp	 SHORT $LN35@do_put@5
$LN67@do_put@5:

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  0015a	dd d8		 fstp	 ST(0)
  0015c	eb b7		 jmp	 SHORT $LN60@do_put@5

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

$LN36@do_put@5:
  0015e	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  00164	75 04		 jne	 SHORT $LN34@do_put@5
  00166	b1 61		 mov	 cl, 97			; 00000061H
  00168	eb 0d		 jmp	 SHORT $LN35@do_put@5
$LN34@do_put@5:
  0016a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00170	0f 95 c1	 setne	 cl
  00173	8d 4c 09 65	 lea	 ecx, DWORD PTR [ecx+ecx+101]
$LN35@do_put@5:
  00177	83 ec 08	 sub	 esp, 8
  0017a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0017d	52		 push	 edx
  0017e	88 08		 mov	 BYTE PTR [eax], cl
  00180	8d 4c 24 28	 lea	 ecx, DWORD PTR __Fmt$[esp+160]
  00184	51		 push	 ecx
  00185	8d 54 24 34	 lea	 edx, DWORD PTR __Buf$[esp+164]
  00189	6a 6c		 push	 108			; 0000006cH
  0018b	52		 push	 edx
  0018c	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  00190	e8 00 00 00 00	 call	 _sprintf_s
  00195	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+168]
  0019c	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+172]
  001a3	50		 push	 eax
  001a4	56		 push	 esi
  001a5	8b 74 24 38	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+180]
  001a9	57		 push	 edi
  001aa	53		 push	 ebx
  001ab	8d 44 24 4c	 lea	 eax, DWORD PTR __Buf$[esp+188]
  001af	50		 push	 eax
  001b0	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+188]
  001b7	51		 push	 ecx
  001b8	8b 4c 24 44	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+196]
  001bc	55		 push	 ebp
  001bd	52		 push	 edx
  001be	50		 push	 eax
  001bf	56		 push	 esi
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 ?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput

; 1233 : 		}

  001c6	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+216]
  001cd	83 c4 44	 add	 esp, 68			; 00000044H
  001d0	5f		 pop	 edi
  001d1	8b c6		 mov	 eax, esi
  001d3	5e		 pop	 esi
  001d4	5d		 pop	 ebp
  001d5	5b		 pop	 ebx
  001d6	33 cc		 xor	 ecx, esp
  001d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001dd	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H
  001e3	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z
_TEXT	SEGMENT
__Signed$130092 = -129					; size = 1
_this$GSCopy$ = -128					; size = 4
___$ReturnUdt$GSCopy$ = -124				; size = 4
__Fmt$ = -120						; size = 8
__Buf$ = -112						; size = 108
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1237 : 		{	// put formatted long double to _Dest

  00000	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 80 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+132], eax
  00014	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+128]
  0001b	53		 push	 ebx
  0001c	55		 push	 ebp
  0001d	8b ac 24 9c 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+136]

; 1268 : 			}
; 1269 : 
; 1270 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1271 : 			_Beforepoint, _Afterpoint, _Precision,
; 1272 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1273 : 					_Significance, _Val)));	// convert and put

  00024	89 44 24 10	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+140], eax
  00028	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	89 4c 24 14	 mov	 DWORD PTR _this$GSCopy$[esp+148], ecx
  00031	85 c0		 test	 eax, eax
  00033	7f 0e		 jg	 SHORT $LN13@do_put@6

; 1238 : 		const size_t _Buf_size = _MAX_EXP_DIG + _MAX_SIG_DIG + 64;
; 1239 : 		char _Buf[_Buf_size], _Fmt[8];
; 1240 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1241 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1242 : 				? 6 : _Iosbase.precision();	// desired precision

  00035	f7 45 10 00 20
	00 00		 test	 DWORD PTR [ebp+16], 8192 ; 00002000H
  0003c	75 05		 jne	 SHORT $LN13@do_put@6
  0003e	b8 06 00 00 00	 mov	 eax, 6
$LN13@do_put@6:
  00043	8b f0		 mov	 esi, eax

; 1243 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1244 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  00045	83 fe 24	 cmp	 esi, 36			; 00000024H
  00048	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  0004d	7f 02		 jg	 SHORT $LN16@do_put@6
  0004f	8b d6		 mov	 edx, esi
$LN16@do_put@6:

; 1245 : 		_Precision -= _Significance;
; 1246 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1247 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1248 : 
; 1249 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed)

  00051	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  00054	8b c1		 mov	 eax, ecx
  00056	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  0005b	2b f2		 sub	 esi, edx
  0005d	33 db		 xor	 ebx, ebx
  0005f	33 ff		 xor	 edi, edi
  00061	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  00066	0f 85 a1 00 00
	00		 jne	 $LN43@do_put@6

; 1250 : 			{	// scale silly fixed-point value
; 1251 : 			bool _Signed = _Val < 0;

  0006c	d9 ee		 fldz
  0006e	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
  00075	d8 d1		 fcom	 ST(1)
  00077	df e0		 fnstsw	 ax
  00079	f6 c4 05	 test	 ah, 5
  0007c	7a 20		 jp	 SHORT $LN17@do_put@6
  0007e	c6 44 24 13 01	 mov	 BYTE PTR __Signed$130092[esp+148], 1

; 1253 : 				_Val = -_Val;

  00083	d9 e0		 fchs
$LN9@do_put@6:

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  00085	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  0008b	d8 d1		 fcom	 ST(1)
  0008d	df e0		 fnstsw	 ax
  0008f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  00095	f6 c4 41	 test	 ah, 65			; 00000041H
  00098	7b 0c		 jnp	 SHORT $LN8@do_put@6
$LN49@do_put@6:
  0009a	dd d9		 fstp	 ST(1)
  0009c	eb 22		 jmp	 SHORT $LN6@do_put@6
$LN17@do_put@6:

; 1250 : 			{	// scale silly fixed-point value
; 1251 : 			bool _Signed = _Val < 0;

  0009e	88 5c 24 13	 mov	 BYTE PTR __Signed$130092[esp+148], bl

; 1252 : 			if (_Signed)

  000a2	eb e1		 jmp	 SHORT $LN9@do_put@6
$LN55@do_put@6:

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000a4	d9 c9		 fxch	 ST(1)
$LN8@do_put@6:
  000a6	81 fb 88 13 00
	00		 cmp	 ebx, 5000		; 00001388H
  000ac	73 ec		 jae	 SHORT $LN49@do_put@6

; 1256 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000ae	dc fa		 fdiv	 ST(2), ST(0)
  000b0	83 c3 0a	 add	 ebx, 10			; 0000000aH
  000b3	d9 c9		 fxch	 ST(1)
  000b5	d8 d2		 fcom	 ST(2)
  000b7	df e0		 fnstsw	 ax
  000b9	f6 c4 41	 test	 ah, 65			; 00000041H
  000bc	7b e6		 jnp	 SHORT $LN55@do_put@6

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000be	dd d8		 fstp	 ST(0)
$LN6@do_put@6:

; 1257 : 
; 1258 : 			if (0 < _Val)

  000c0	d9 ca		 fxch	 ST(2)
  000c2	d8 d9		 fcomp	 ST(1)
  000c4	df e0		 fnstsw	 ax
  000c6	f6 c4 05	 test	 ah, 5
  000c9	7a 31		 jp	 SHORT $LN57@do_put@6

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000cb	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000ce	7c 2c		 jl	 SHORT $LN57@do_put@6
  000d0	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  000d6	eb 02		 jmp	 SHORT $LN4@do_put@6
$LN70@do_put@6:
  000d8	d9 c9		 fxch	 ST(1)
$LN4@do_put@6:
  000da	d8 d1		 fcom	 ST(1)
  000dc	df e0		 fnstsw	 ax
  000de	f6 c4 01	 test	 ah, 1
  000e1	75 26		 jne	 SHORT $LN64@do_put@6
  000e3	81 ff 88 13 00
	00		 cmp	 edi, 5000		; 00001388H
  000e9	73 1e		 jae	 SHORT $LN64@do_put@6

; 1261 : 					{	// drop 10 zeros after decimal point
; 1262 : 					_Val *= 1e10;
; 1263 : 					_Precision -= 10;

  000eb	83 ee 0a	 sub	 esi, 10			; 0000000aH
  000ee	d9 c9		 fxch	 ST(1)
  000f0	83 c7 0a	 add	 edi, 10			; 0000000aH
  000f3	d8 ca		 fmul	 ST(0), ST(2)
  000f5	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000f8	7d de		 jge	 SHORT $LN70@do_put@6

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000fa	dd d9		 fstp	 ST(1)
$LN57@do_put@6:

; 1264 : 					}
; 1265 : 
; 1266 : 			if (_Signed)

  000fc	80 7c 24 13 00	 cmp	 BYTE PTR __Signed$130092[esp+148], 0
  00101	dd d9		 fstp	 ST(1)
  00103	74 0f		 je	 SHORT $LN1@do_put@6

; 1267 : 				_Val = -_Val;

  00105	d9 e0		 fchs
  00107	eb 0b		 jmp	 SHORT $LN1@do_put@6
$LN64@do_put@6:

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00109	dd d8		 fstp	 ST(0)
  0010b	eb ef		 jmp	 SHORT $LN57@do_put@6
$LN43@do_put@6:

; 1267 : 				_Val = -_Val;

  0010d	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
$LN1@do_put@6:

; 1268 : 			}
; 1269 : 
; 1270 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1271 : 			_Beforepoint, _Afterpoint, _Precision,
; 1272 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1273 : 					_Significance, _Val)));	// convert and put

  00114	c6 44 24 1c 25	 mov	 BYTE PTR __Fmt$[esp+148], 37 ; 00000025H
  00119	8d 44 24 1d	 lea	 eax, DWORD PTR __Fmt$[esp+149]
  0011d	f6 c1 20	 test	 cl, 32			; 00000020H
  00120	74 09		 je	 SHORT $LN31@do_put@6
  00122	c6 44 24 1d 2b	 mov	 BYTE PTR __Fmt$[esp+149], 43 ; 0000002bH
  00127	8d 44 24 1e	 lea	 eax, DWORD PTR __Fmt$[esp+150]
$LN31@do_put@6:
  0012b	f6 c1 10	 test	 cl, 16			; 00000010H
  0012e	74 04		 je	 SHORT $LN30@do_put@6
  00130	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  00133	40		 inc	 eax
$LN30@do_put@6:
  00134	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
  00137	40		 inc	 eax
  00138	c6 00 2a	 mov	 BYTE PTR [eax], 42	; 0000002aH
  0013b	40		 inc	 eax
  0013c	c6 00 4c	 mov	 BYTE PTR [eax], 76	; 0000004cH
  0013f	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  00145	40		 inc	 eax
  00146	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  0014c	75 04		 jne	 SHORT $LN36@do_put@6
  0014e	b1 66		 mov	 cl, 102			; 00000066H
  00150	eb 19		 jmp	 SHORT $LN35@do_put@6
$LN36@do_put@6:
  00152	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  00158	75 04		 jne	 SHORT $LN34@do_put@6
  0015a	b1 61		 mov	 cl, 97			; 00000061H
  0015c	eb 0d		 jmp	 SHORT $LN35@do_put@6
$LN34@do_put@6:
  0015e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00164	0f 95 c1	 setne	 cl
  00167	8d 4c 09 65	 lea	 ecx, DWORD PTR [ecx+ecx+101]
$LN35@do_put@6:
  0016b	83 ec 08	 sub	 esp, 8
  0016e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00171	52		 push	 edx
  00172	88 08		 mov	 BYTE PTR [eax], cl
  00174	8d 4c 24 28	 lea	 ecx, DWORD PTR __Fmt$[esp+160]
  00178	51		 push	 ecx
  00179	8d 54 24 34	 lea	 edx, DWORD PTR __Buf$[esp+164]
  0017d	6a 6c		 push	 108			; 0000006cH
  0017f	52		 push	 edx
  00180	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  00184	e8 00 00 00 00	 call	 _sprintf_s
  00189	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+168]
  00190	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+172]
  00197	50		 push	 eax
  00198	56		 push	 esi
  00199	8b 74 24 38	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+180]
  0019d	57		 push	 edi
  0019e	53		 push	 ebx
  0019f	8d 44 24 4c	 lea	 eax, DWORD PTR __Buf$[esp+188]
  001a3	50		 push	 eax
  001a4	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+188]
  001ab	51		 push	 ecx
  001ac	8b 4c 24 44	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+196]
  001b0	55		 push	 ebp
  001b1	52		 push	 edx
  001b2	50		 push	 eax
  001b3	56		 push	 esi
  001b4	51		 push	 ecx
  001b5	e8 00 00 00 00	 call	 ?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput

; 1274 : 		}

  001ba	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+216]
  001c1	83 c4 44	 add	 esp, 68			; 00000044H
  001c4	5f		 pop	 edi
  001c5	8b c6		 mov	 eax, esi
  001c7	5e		 pop	 esi
  001c8	5d		 pop	 ebp
  001c9	5b		 pop	 ebx
  001ca	33 cc		 xor	 ecx, esp
  001cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d1	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H
  001d7	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z
_TEXT	SEGMENT
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 4
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1278 : 		{	// put formatted void pointer to _Dest

  00000	83 ec 44	 sub	 esp, 68			; 00000044H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 40	 mov	 DWORD PTR __$ArrayPad$[esp+68], eax
  0000e	8b 44 24 5c	 mov	 eax, DWORD PTR __Val$[esp+64]
  00012	53		 push	 ebx
  00013	8b 5c 24 58	 mov	 ebx, DWORD PTR __Iosbase$[esp+68]
  00017	56		 push	 esi
  00018	8b 74 24 50	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+72]
  0001c	57		 push	 edi

; 1279 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1280 : 		char _Buf[_Buf_size];
; 1281 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1282 : 			::sprintf_s(_Buf, _Buf_size, "%p", _Val)));

  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_02BBAHNLBA@?$CFp?$AA@
  00023	8d 44 24 14	 lea	 eax, DWORD PTR __Buf$[esp+88]
  00027	6a 40		 push	 64			; 00000040H
  00029	50		 push	 eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	e8 00 00 00 00	 call	 _sprintf_s
  00031	8b 54 24 74	 mov	 edx, DWORD PTR __Fill$[esp+92]
  00035	50		 push	 eax
  00036	8b 44 24 70	 mov	 eax, DWORD PTR __Dest$[esp+100]
  0003a	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  0003e	51		 push	 ecx
  0003f	8b 4c 24 70	 mov	 ecx, DWORD PTR __Dest$[esp+100]
  00043	52		 push	 edx
  00044	53		 push	 ebx
  00045	50		 push	 eax
  00046	51		 push	 ecx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1283 : 		}

  0004e	8b 4c 24 7c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+128]
  00052	83 c4 30	 add	 esp, 48			; 00000030H
  00055	5f		 pop	 edi
  00056	8b c6		 mov	 eax, esi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	33 cc		 xor	 ecx, esp
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	83 c4 44	 add	 esp, 68			; 00000044H
  00064	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 139  : 		{	// perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 140  : 		_TRY_BEGIN
; 141  : 		if (ios_base::flags() & ios_base::unitbuf)

  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002e	f6 44 0a 10 02	 test	 BYTE PTR [edx+ecx+16], 2
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003a	74 05		 je	 SHORT $LN8@Osfx

; 142  : 			flush();	// flush stream as needed

  0003c	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN8@Osfx:

; 145  : 		}

  00041	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00044	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004b	59		 pop	 ecx
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:

; 143  : 		_CATCH_ALL
; 144  : 		_CATCH_END

  00053	b8 00 00 00 00	 mov	 eax, $LN8@Osfx
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx, COMDAT
; _this$ = ecx

; 139  : 		{	// perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 140  : 		_TRY_BEGIN
; 141  : 		if (ios_base::flags() & ios_base::unitbuf)

  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002e	f6 44 0a 10 02	 test	 BYTE PTR [edx+ecx+16], 2
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003a	74 05		 je	 SHORT $LN8@Osfx@2

; 142  : 			flush();	// flush stream as needed

  0003c	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
$LN8@Osfx@2:

; 145  : 		}

  00041	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00044	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004b	59		 pop	 ecx
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
__catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0:

; 143  : 		_CATCH_ALL
; 144  : 		_CATCH_END

  00053	b8 00 00 00 00	 mov	 eax, $LN8@Osfx@2
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
PUBLIC	??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
;	COMDAT ??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0
__ehfuncinfo$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
xdata$x	ENDS
;	COMDAT ??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
_TEXT	SEGMENT
$T186587 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 32   : 		{	// construct from stream buffer pointer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 08	 mov	 DWORD PTR $T186587[esp+28], eax
  00030	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+24], eax
  00034	74 19		 je	 SHORT $LN1@basic_istr
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  00043	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  00047	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR $T186587[esp+28], 1
$LN1@basic_istr:
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 33   : 		_Myios::init(_Strbuf, _Isstd);

  00054	8b 4c 24 20	 mov	 ecx, DWORD PTR __Strbuf$[esp+24]
  00058	c7 04 16 00 00
	00 00		 mov	 DWORD PTR [esi+edx], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0005f	8b 16		 mov	 edx, DWORD PTR [esi]
  00061	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00064	8b 44 24 24	 mov	 eax, DWORD PTR __Isstd$[esp+24]
  00068	50		 push	 eax
  00069	51		 push	 ecx
  0006a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0006d	03 ce		 add	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init

; 34   : 		}

  00074	8b c6		 mov	 eax, esi
  00076	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5e		 pop	 esi
  00083	83 c4 14	 add	 esp, 20			; 00000014H
  00086	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T186587[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_istr
  0000c	83 65 ec fe	 and	 DWORD PTR $T186587[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_istr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
PUBLIC	??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >
;	COMDAT ??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@ DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0
__ehfuncinfo$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
xdata$x	ENDS
;	COMDAT ??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
_TEXT	SEGMENT
$T186607 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 32   : 		{	// construct from stream buffer pointer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 08	 mov	 DWORD PTR $T186607[esp+28], eax
  00030	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+24], eax
  00034	74 19		 je	 SHORT $LN1@basic_istr@2
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  00043	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  00047	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR $T186607[esp+28], 1
$LN1@basic_istr@2:
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 33   : 		_Myios::init(_Strbuf, _Isstd);

  00054	8b 4c 24 20	 mov	 ecx, DWORD PTR __Strbuf$[esp+24]
  00058	c7 04 16 00 00
	00 00		 mov	 DWORD PTR [esi+edx], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0005f	8b 16		 mov	 edx, DWORD PTR [esi]
  00061	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00064	8b 44 24 24	 mov	 eax, DWORD PTR __Isstd$[esp+24]
  00068	50		 push	 eax
  00069	51		 push	 ecx
  0006a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0006d	03 ce		 add	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init

; 34   : 		}

  00074	8b c6		 mov	 eax, esi
  00076	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5e		 pop	 esi
  00083	83 c4 14	 add	 esp, 20			; 00000014H
  00086	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T186607[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_istr@2
  0000c	83 65 ec fe	 and	 DWORD PTR $T186607[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_istr@2:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?_Destroy@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXPAUSecurityTokenKeyfile@CipherShed@@0@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXPAUSecurityTokenKeyfile@CipherShed@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Cat$186637 = 12					; size = 1
__Last$ = 12						; size = 4
?_Destroy@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXPAUSecurityTokenKeyfile@CipherShed@@0@Z PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Destroy, COMDAT
; _this$ = ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Cat$186637[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	50		 push	 eax
  00009	83 c1 08	 add	 ecx, 8
  0000c	51		 push	 ecx
  0000d	8b 4c 24 10	 mov	 ecx, DWORD PTR __Last$[esp+4]
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CipherShed::SecurityTokenKeyfile> >
  00018	83 c4 10	 add	 esp, 16			; 00000010H

; 1120 : 		}

  0001b	c2 08 00	 ret	 8
?_Destroy@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXPAUSecurityTokenKeyfile@CipherShed@@0@Z ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Destroy
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@01@ABV?$vector@KV?$allocator@K@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@01@ABV?$vector@KV?$allocator@K@std@@@std@@@Z
_TEXT	SEGMENT
$T186644 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@01@ABV?$vector@KV?$allocator@K@std@@@std@@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >, COMDAT

; 69   : 		{

  00000	51		 push	 ecx

; 70   : 			return ContainerForward <T> (container);

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR _container$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	50		 push	 eax
  0000b	8b ce		 mov	 ecx, esi
  0000d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T186644[esp+12], 0
  00015	e8 00 00 00 00	 call	 ??0?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@KV?$allocator@K@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >::ContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi

; 71   : 		}

  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??$GetContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@01@ABV?$vector@KV?$allocator@K@std@@@std@@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEPAUSecurityTokenKeyfile@CipherShed@@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@1@0PAU23@@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Ucopy<std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEPAUSecurityTokenKeyfile@CipherShed@@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@1@0PAU23@@Z
_TEXT	SEGMENT
$T186690 = -4						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Cat$186693 = 24					; size = 1
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEPAUSecurityTokenKeyfile@CipherShed@@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@1@0PAU23@@Z PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Ucopy<std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

  00001	8b 54 24 18	 mov	 edx, DWORD PTR __Cat$186693[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T186690[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T186690[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 1c	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 20	 mov	 ecx, DWORD PTR __Last$[esp+16]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::SecurityTokenKeyfile const *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >

; 1142 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 14 00	 ret	 20			; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEPAUSecurityTokenKeyfile@CipherShed@@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@1@0PAU23@@Z ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Ucopy<std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@stdext@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<CipherShed::SecurityTokenKeyfile *,unsigned int,CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@stdext@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@Z
_TEXT	SEGMENT
$T186715 = -4						; size = 1
__Cat$186720 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@stdext@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<CipherShed::SecurityTokenKeyfile *,unsigned int,CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

  00000	51		 push	 ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

  00001	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T186715[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T186715[esp+4]
  0000c	8b 0c 24	 mov	 ecx, DWORD PTR __Cat$186720[esp+4]
  0000f	50		 push	 eax
  00010	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+4]
  00014	51		 push	 ecx
  00015	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00019	52		 push	 edx
  0001a	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CipherShed::SecurityTokenKeyfile *,unsigned int,CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >

; 943  : 	}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c3		 ret	 0
??$unchecked_uninitialized_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@stdext@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<CipherShed::SecurityTokenKeyfile *,unsigned int,CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
_TEXT	ENDS
PUBLIC	??$fill@PAUSecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0ABU12@@Z ; std::fill<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAUSecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0ABU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUSecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0ABU12@@Z PROC ; std::fill<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile>, COMDAT

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

  00000	e9 00 00 00 00	 jmp	 ??$_Fill@PAUSecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0ABU12@@Z ; std::_Fill<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile>
??$fill@PAUSecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0ABU12@@Z ENDP ; std::fill<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile>
_TEXT	ENDS
PUBLIC	??_7?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::`vftable'
PUBLIC	??0?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@QAE@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >
PUBLIC	??_R4?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?IsNotEnd@?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UBE_NXZ ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UBEXXZ ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::Next
EXTRN	??_E?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@8 DD 00H ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AU?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$map@KUPkcs11Session@CipherShed'
	DB	'@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@Cip'
	DB	'herShed@@@std@@@4@@std@@@ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@6B@ DD 00H ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@6B@ DD FLAT:??_R4?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UBEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@QAE@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@QAE@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@QAE@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@QAE@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
xdata$x	ENDS
;	COMDAT ??0?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@QAE@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@QAE@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z PROC ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@QAE@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002a	33 db		 xor	 ebx, ebx
  0002c	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00030	88 5e 05	 mov	 BYTE PTR [esi+5], bl
  00033	8b 44 24 24	 mov	 eax, DWORD PTR _container$[esp+28]
  00037	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0003a	50		 push	 eax
  0003b	8b cf		 mov	 ecx, edi
  0003d	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@6B@
  00047	e8 00 00 00 00	 call	 ??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
  0004c	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0004f	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00052	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00055	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00057	89 4e 28	 mov	 DWORD PTR [esi+40], ecx
  0005a	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  00062	89 46 34	 mov	 DWORD PTR [esi+52], eax
  00065	8b 07		 mov	 eax, DWORD PTR [edi]
  00067	89 46 30	 mov	 DWORD PTR [esi+48], eax
  0006a	8b c6		 mov	 eax, esi
  0006c	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00070	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00077	59		 pop	 ecx
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@QAE@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@QAE@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@QAE@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@QAE@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z ENDP ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >
; Function compile flags: /Ogtpy
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UBE_NXZ PROC ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00007	74 21		 je	 SHORT $LN3@IsNotEnd@2
  00009	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0000c	85 c0		 test	 eax, eax
  0000e	74 05		 je	 SHORT $LN7@IsNotEnd@2
  00010	3b 46 28	 cmp	 eax, DWORD PTR [esi+40]
  00013	74 05		 je	 SHORT $LN8@IsNotEnd@2
$LN7@IsNotEnd@2:
  00015	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@IsNotEnd@2:
  0001a	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0001d	3b 46 2c	 cmp	 eax, DWORD PTR [esi+44]
  00020	74 08		 je	 SHORT $LN3@IsNotEnd@2
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
$LN3@IsNotEnd@2:
  0002a	32 c0		 xor	 al, al
  0002c	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UBE_NXZ ENDP ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::IsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Next@?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UBEXXZ PROC ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	83 c1 30	 add	 ecx, 48			; 00000030H
  00003	e9 00 00 00 00	 jmp	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::const_iterator::_Inc
?Next@?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UBEXXZ ENDP ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::Next
_TEXT	ENDS
PUBLIC	??_7?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`vftable'
PUBLIC	??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
PUBLIC	??_R4?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?IsNotEnd@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBEXXZ ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::Next
EXTRN	??_E?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 DD 00H ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std'
	DB	'@@@ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@ DD 00H ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@ DD FLAT:??_R4?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
xdata$x	ENDS
;	COMDAT ??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z PROC ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002a	33 db		 xor	 ebx, ebx
  0002c	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00030	88 5e 05	 mov	 BYTE PTR [esi+5], bl
  00033	8b 44 24 24	 mov	 eax, DWORD PTR _container$[esp+28]
  00037	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0003a	50		 push	 eax
  0003b	8b cf		 mov	 ecx, edi
  0003d	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@
  00047	e8 00 00 00 00	 call	 ??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >
  0004c	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0004f	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
  00052	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00055	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00057	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
  0005a	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00062	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00065	8b 07		 mov	 eax, DWORD PTR [edi]
  00067	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0006a	8b c6		 mov	 eax, esi
  0006c	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00070	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00077	59		 pop	 ecx
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z ENDP ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBE_NXZ PROC ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00007	74 21		 je	 SHORT $LN3@IsNotEnd@3
  00009	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0000c	85 c0		 test	 eax, eax
  0000e	74 05		 je	 SHORT $LN7@IsNotEnd@3
  00010	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00013	74 05		 je	 SHORT $LN8@IsNotEnd@3
$LN7@IsNotEnd@3:
  00015	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@IsNotEnd@3:
  0001a	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0001d	3b 46 28	 cmp	 eax, DWORD PTR [esi+40]
  00020	74 08		 je	 SHORT $LN3@IsNotEnd@3
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
$LN3@IsNotEnd@3:
  0002a	32 c0		 xor	 al, al
  0002c	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::IsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Next@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBEXXZ PROC ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00006	85 c0		 test	 eax, eax
  00008	75 0c		 jne	 SHORT $LN19@Next@2
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN13@Next@2
$LN19@Next@2:
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	eb 02		 jmp	 SHORT $LN14@Next@2
$LN13@Next@2:
  0001a	33 c0		 xor	 eax, eax
$LN14@Next@2:
  0001c	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0001f	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00022	75 05		 jne	 SHORT $LN3@Next@2
  00024	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Next@2:
  00029	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00031	5e		 pop	 esi
  00032	c3		 ret	 0
?Next@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBEXXZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::Next
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z PROC ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
  00004	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy
  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
  00019	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00024	74 09		 je	 SHORT $LN22@scalar@35
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	83 c4 04	 add	 esp, 4
$LN22@scalar@35:
  0002f	5f		 pop	 edi
  00030	8b c6		 mov	 eax, esi
  00032	5e		 pop	 esi
  00033	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z ENDP ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Insert<std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	SEGMENT
__catchsym$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$0
__unwindtable$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$2
__ehfuncinfo$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
$T187191 = -40						; size = 8
__Next$ = -32						; size = 8
__Before$133935 = -24					; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__First$ = 16						; size = 8
__Last$ = 24						; size = 8
___formal$ = 32						; size = 1
??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Insert<std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 762  : 		void _Insert(const_iterator _Where,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d ec	 mov	 DWORD PTR _this$[ebp], ebx

; 763  : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 764  : 		{	// insert [_First, _Last) at _Where, forward iterators
; 765  : 
; 766  :  #if _HAS_ITERATOR_DEBUGGING
; 767  : 		_DEBUG_RANGE(_First, _Last);
; 768  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 769  : 
; 770  : 		_Iter _Next = _First;

  00030	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  00033	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  00036	89 45 e0	 mov	 DWORD PTR __Next$[ebp], eax
  00039	89 4d e4	 mov	 DWORD PTR __Next$[ebp+4], ecx

; 771  : 
; 772  : 		_TRY_BEGIN

  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 773  : 		for (; _First != _Last; ++_First)

$LL18@Insert@3:
  00043	85 c0		 test	 eax, eax
  00045	74 05		 je	 SHORT $LN32@Insert@3
  00047	3b 45 18	 cmp	 eax, DWORD PTR __Last$[ebp]
  0004a	74 08		 je	 SHORT $LN33@Insert@3
$LN32@Insert@3:
  0004c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00051	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
$LN33@Insert@3:
  00054	8b 55 14	 mov	 edx, DWORD PTR __First$[ebp+4]
  00057	3b 55 1c	 cmp	 edx, DWORD PTR __Last$[ebp+4]
  0005a	0f 84 de 00 00
	00		 je	 $LN4@Insert@3

; 774  : 			_Insert(_Where, *_First);

  00060	85 c0		 test	 eax, eax
  00062	75 0c		 jne	 SHORT $LN74@Insert@3
  00064	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00069	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  0006c	85 c0		 test	 eax, eax
  0006e	74 04		 je	 SHORT $LN51@Insert@3
$LN74@Insert@3:
  00070	8b 00		 mov	 eax, DWORD PTR [eax]
  00072	eb 02		 jmp	 SHORT $LN52@Insert@3
$LN51@Insert@3:
  00074	33 c0		 xor	 eax, eax
$LN52@Insert@3:
  00076	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  00079	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0007c	75 05		 jne	 SHORT $LN41@Insert@3
  0007e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN41@Insert@3:
  00083	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp+4]
  00086	8b 45 14	 mov	 eax, DWORD PTR __First$[ebp+4]
  00089	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0008c	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
  0008f	83 c0 08	 add	 eax, 8
  00092	50		 push	 eax
  00093	52		 push	 edx
  00094	51		 push	 ecx
  00095	8b cb		 mov	 ecx, ebx
  00097	e8 00 00 00 00	 call	 ?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Buynode
  0009c	6a 01		 push	 1
  0009e	8b cb		 mov	 ecx, ebx
  000a0	8b f0		 mov	 esi, eax
  000a2	e8 00 00 00 00	 call	 ?_Incsize@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Incsize
  000a7	89 37		 mov	 DWORD PTR [edi], esi
  000a9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ac	89 30		 mov	 DWORD PTR [eax], esi
  000ae	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  000b1	85 c0		 test	 eax, eax
  000b3	75 0c		 jne	 SHORT $LN73@Insert@3
  000b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000ba	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  000bd	85 c0		 test	 eax, eax
  000bf	74 04		 je	 SHORT $LN24@Insert@3
$LN73@Insert@3:

; 773  : 		for (; _First != _Last; ++_First)

  000c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c3	eb 02		 jmp	 SHORT $LN25@Insert@3
$LN24@Insert@3:
  000c5	33 c9		 xor	 ecx, ecx
$LN25@Insert@3:
  000c7	8b 55 14	 mov	 edx, DWORD PTR __First$[ebp+4]
  000ca	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  000cd	75 08		 jne	 SHORT $LN14@Insert@3
  000cf	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000d4	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
$LN14@Insert@3:
  000d7	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	89 55 14	 mov	 DWORD PTR __First$[ebp+4], edx
  000df	e9 5f ff ff ff	 jmp	 $LL18@Insert@3
__catch$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$0:

; 775  : 		_CATCH_ALL
; 776  : 		for (; _Next != _First; ++_Next)

  000e4	8d 45 10	 lea	 eax, DWORD PTR __First$[ebp]
  000e7	50		 push	 eax
  000e8	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  000eb	e8 00 00 00 00	 call	 ??9?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator!=
  000f0	84 c0		 test	 al, al
  000f2	74 41		 je	 SHORT $LN1@Insert@3
  000f4	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
$LL3@Insert@3:

; 777  : 			{	// undo inserts
; 778  : 			const_iterator _Before = _Where;

  000f7	8b 4d 08	 mov	 ecx, DWORD PTR __Where$[ebp]
  000fa	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp+4]
  000fd	89 4d e8	 mov	 DWORD PTR __Before$133935[ebp], ecx

; 779  : 			erase(--_Before);

  00100	8d 4d e8	 lea	 ecx, DWORD PTR __Before$133935[ebp]
  00103	89 55 ec	 mov	 DWORD PTR __Before$133935[ebp+4], edx
  00106	e8 00 00 00 00	 call	 ??F?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator--
  0010b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0010e	8b 10		 mov	 edx, DWORD PTR [eax]
  00110	51		 push	 ecx
  00111	52		 push	 edx
  00112	8d 45 d8	 lea	 eax, DWORD PTR $T187191[ebp]
  00115	50		 push	 eax
  00116	8b ce		 mov	 ecx, esi
  00118	e8 00 00 00 00	 call	 ?erase@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::erase
  0011d	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00120	e8 00 00 00 00	 call	 ??E?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator++
  00125	8d 4d 10	 lea	 ecx, DWORD PTR __First$[ebp]
  00128	51		 push	 ecx
  00129	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  0012c	e8 00 00 00 00	 call	 ??9?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1>::operator!=
  00131	84 c0		 test	 al, al
  00133	75 c2		 jne	 SHORT $LL3@Insert@3
$LN1@Insert@3:

; 780  : 			}
; 781  : 		_RERAISE;

  00135	6a 00		 push	 0
  00137	6a 00		 push	 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Insert@3:

; 782  : 		_CATCH_END
; 783  : 		}

  0013e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00141	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00148	59		 pop	 ecx
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 1c 00	 ret	 28			; 0000001cH
$LN76@Insert@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Insert<std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1> >
PUBLIC	??$_Uninit_move@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@U_Undefined_move_tag@4@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile>,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@U_Undefined_move_tag@4@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T187375 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$187378 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@U_Undefined_move_tag@4@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

  00000	51		 push	 ecx

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$187378[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T187375[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T187375[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >

; 208  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Uninit_move@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@U_Undefined_move_tag@4@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUSecurityTokenKeyfile@CipherShed@@PAU12@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUSecurityTokenKeyfile@CipherShed@@PAU12@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T187395 = -8						; size = 1
$T187396 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
$T187397 = 16						; size = 1
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUSecurityTokenKeyfile@CipherShed@@PAU12@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	83 ec 08	 sub	 esp, 8

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);
; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

  00003	8b 54 24 14	 mov	 edx, DWORD PTR $T187397[esp+4]
  00007	53		 push	 ebx
  00008	8b 5c 24 10	 mov	 ebx, DWORD PTR __First$[esp+8]
  0000c	56		 push	 esi
  0000d	8b 74 24 18	 mov	 esi, DWORD PTR __Last$[esp+12]
  00011	57		 push	 edi
  00012	8b 7c 24 20	 mov	 edi, DWORD PTR __Dest$[esp+16]
  00016	32 c0		 xor	 al, al
  00018	88 44 24 10	 mov	 BYTE PTR $T187396[esp+20], al
  0001c	8b 4c 24 10	 mov	 ecx, DWORD PTR $T187396[esp+20]
  00020	88 44 24 0c	 mov	 BYTE PTR $T187395[esp+20], al
  00024	8b 44 24 0c	 mov	 eax, DWORD PTR $T187395[esp+20]
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	52		 push	 edx
  0002b	57		 push	 edi
  0002c	56		 push	 esi
  0002d	53		 push	 ebx
  0002e	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUSecurityTokenKeyfile@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::forward_iterator_tag>
  00033	2b f3		 sub	 esi, ebx
  00035	83 c4 18	 add	 esp, 24			; 00000018H
  00038	c1 fe 07	 sar	 esi, 7
  0003b	c1 e6 07	 shl	 esi, 7
  0003e	8b c7		 mov	 eax, edi
  00040	5f		 pop	 edi
  00041	2b c6		 sub	 eax, esi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx

; 2690 : 	return _Result;
; 2691 : 	}

  00045	83 c4 08	 add	 esp, 8
  00048	c3		 ret	 0
??$_Copy_backward_opt@PAUSecurityTokenKeyfile@CipherShed@@PAU12@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *>
_TEXT	ENDS
PUBLIC	??1?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::~ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAE@XZ$0
__ehfuncinfo$??1?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??1?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAE@XZ PROC ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::~ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0002b	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00033	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
  00038	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0003e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	5e		 pop	 esi
  0004b	83 c4 10	 add	 esp, 16			; 00000010H
  0004e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??1?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAE@XZ ENDP ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::~ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >
PUBLIC	??_C@_0CM@LGPNOOEF@CipherShed?3?3SecurityToken?3?3Close@ ; `string'
PUBLIC	__TI2?AUParameterIncorrect@CipherShed@@
PUBLIC	?CloseSession@SecurityToken@CipherShed@@KAXK@Z	; CipherShed::SecurityToken::CloseSession
PUBLIC	__CTA2?AUParameterIncorrect@CipherShed@@
PUBLIC	__CT??_R0?AUParameterIncorrect@CipherShed@@@8??0ParameterIncorrect@CipherShed@@QAE@ABU01@@Z8
PUBLIC	??0ParameterIncorrect@CipherShed@@QAE@ABU01@@Z	; CipherShed::ParameterIncorrect::ParameterIncorrect
;	COMDAT __CT??_R0?AUParameterIncorrect@CipherShed@@@8??0ParameterIncorrect@CipherShed@@QAE@ABU01@@Z8
; File c:\home\public\desktop\projects\ciphershed.build\src\common\exception.h
xdata$x	SEGMENT
__CT??_R0?AUParameterIncorrect@CipherShed@@@8??0ParameterIncorrect@CipherShed@@QAE@ABU01@@Z8 DD 00H
	DD	FLAT:??_R0?AUParameterIncorrect@CipherShed@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	08H
	DD	FLAT:??0ParameterIncorrect@CipherShed@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AUParameterIncorrect@CipherShed@@
xdata$x	SEGMENT
__CTA2?AUParameterIncorrect@CipherShed@@ DD 02H
	DD	FLAT:__CT??_R0?AUParameterIncorrect@CipherShed@@@8??0ParameterIncorrect@CipherShed@@QAE@ABU01@@Z8
	DD	FLAT:__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
xdata$x	ENDS
;	COMDAT ??_C@_0CM@LGPNOOEF@CipherShed?3?3SecurityToken?3?3Close@
CONST	SEGMENT
??_C@_0CM@LGPNOOEF@CipherShed?3?3SecurityToken?3?3Close@ DB 'CipherShed::'
	DB	'SecurityToken::CloseSession:108', 00H	; `string'
CONST	ENDS
;	COMDAT __TI2?AUParameterIncorrect@CipherShed@@
xdata$x	SEGMENT
__TI2?AUParameterIncorrect@CipherShed@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2?AUParameterIncorrect@CipherShed@@
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
xdata$x	ENDS
;	COMDAT ?CloseSession@SecurityToken@CipherShed@@KAXK@Z
_TEXT	SEGMENT
$T187431 = -16						; size = 8
$T187429 = -16						; size = 8
$T187427 = -16						; size = 8
$T187432 = -8						; size = 8
_slotId$ = 8						; size = 4
?CloseSession@SecurityToken@CipherShed@@KAXK@Z PROC	; CipherShed::SecurityToken::CloseSession, COMDAT

; 106  : 	{

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	53		 push	 ebx

; 107  : 		if (Sessions.find (slotId) == Sessions.end())

  00004	8b 1d 18 00 00
	00		 mov	 ebx, DWORD PTR ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A+24
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A
  00012	8d 44 24 20	 lea	 eax, DWORD PTR _slotId$[esp+24]
  00016	50		 push	 eax
  00017	8d 4c 24 10	 lea	 ecx, DWORD PTR $T187427[esp+32]
  0001b	51		 push	 ecx
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  00021	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::find
  00026	8b f0		 mov	 esi, eax
  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	85 c0		 test	 eax, eax
  0002c	74 04		 je	 SHORT $LN19@CloseSessi
  0002e	3b c7		 cmp	 eax, edi
  00030	74 05		 je	 SHORT $LN20@CloseSessi
$LN19@CloseSessi:
  00032	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN20@CloseSessi:
  00037	39 5e 04	 cmp	 DWORD PTR [esi+4], ebx
  0003a	75 1f		 jne	 SHORT $LN1@CloseSessi

; 108  : 			throw ParameterIncorrect (SRC_POS);

  0003c	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00041	8d 54 24 10	 lea	 edx, DWORD PTR $T187429[esp+32]
  00045	52		 push	 edx
  00046	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T187429[esp+36], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  0004e	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR $T187429[esp+40], OFFSET ??_C@_0CM@LGPNOOEF@CipherShed?3?3SecurityToken?3?3Close@
  00056	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@CloseSessi:

; 109  : 
; 110  : 		Pkcs11Functions->C_CloseSession (Sessions[slotId].Handle);

  0005b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  00061	8d 44 24 20	 lea	 eax, DWORD PTR _slotId$[esp+24]
  00065	50		 push	 eax
  00066	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  0006b	83 c6 36	 add	 esi, 54			; 00000036H
  0006e	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	8b 16		 mov	 edx, DWORD PTR [esi]
  00077	51		 push	 ecx
  00078	ff d2		 call	 edx
  0007a	83 c4 04	 add	 esp, 4

; 111  : 		Sessions.erase (Sessions.find (slotId));

  0007d	8d 44 24 20	 lea	 eax, DWORD PTR _slotId$[esp+24]
  00081	50		 push	 eax
  00082	8d 4c 24 10	 lea	 ecx, DWORD PTR $T187431[esp+32]
  00086	51		 push	 ecx
  00087	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  0008c	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::find
  00091	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00094	8b 00		 mov	 eax, DWORD PTR [eax]
  00096	52		 push	 edx
  00097	50		 push	 eax
  00098	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T187432[esp+36]
  0009c	51		 push	 ecx
  0009d	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  000a2	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::erase
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx

; 112  : 	}

  000aa	83 c4 10	 add	 esp, 16			; 00000010H
  000ad	c3		 ret	 0
$LN31@CloseSessi:
?CloseSession@SecurityToken@CipherShed@@KAXK@Z ENDP	; CipherShed::SecurityToken::CloseSession
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0ParameterIncorrect@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0ParameterIncorrect@CipherShed@@QAE@ABU01@@Z PROC	; CipherShed::ParameterIncorrect::ParameterIncorrect, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR ___that$[esp-4]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  0000c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00012	c2 04 00	 ret	 4
??0ParameterIncorrect@CipherShed@@QAE@ABU01@@Z ENDP	; CipherShed::ParameterIncorrect::ParameterIncorrect
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??1Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@XZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??1Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@XZ$0
__unwindtable$??1Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??1Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??1Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@XZ$2
__ehfuncinfo$??1Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@XZ
	DD	01H
	DD	FLAT:__tryblocktable$??1Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??1Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
??1Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@XZ PROC ; `CipherShed::SecurityToken::GetObjects'::`6'::Finally331::~Finally331, COMDAT

; 331  : 		finally_do_arg (CK_SLOT_ID, slotId, { Pkcs11Functions->C_FindObjectsFinal (Sessions[finally_arg].Handle); });

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00029	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	50		 push	 eax
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00039	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
  0003e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00040	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  00046	8b 42 72	 mov	 eax, DWORD PTR [edx+114]
  00049	51		 push	 ecx
  0004a	ff d0		 call	 eax
  0004c	83 c4 04	 add	 esp, 4
$LN7@Finally331:
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
__catch$??1Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@XZ$0:
  00063	b8 00 00 00 00	 mov	 eax, $LN7@Finally331
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@XZ ENDP ; `CipherShed::SecurityToken::GetObjects'::`6'::Finally331::~Finally331
PUBLIC	??_C@_0DC@MLHNLEHK@CipherShed?3?3SecurityToken?3?3GetOb@ ; `string'
PUBLIC	?GetObjectAttribute@SecurityToken@CipherShed@@KAXKKKAAV?$vector@EV?$allocator@E@std@@@std@@@Z ; CipherShed::SecurityToken::GetObjectAttribute
;	COMDAT ??_C@_0DC@MLHNLEHK@CipherShed?3?3SecurityToken?3?3GetOb@
; File c:\home\public\desktop\projects\ciphershed.build\src\common\exception.h
CONST	SEGMENT
??_C@_0DC@MLHNLEHK@CipherShed?3?3SecurityToken?3?3GetOb@ DB 'CipherShed::'
	DB	'SecurityToken::GetObjectAttribute:357', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetObjectAttribute@SecurityToken@CipherShed@@KAXKKKAAV?$vector@EV?$allocator@E@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetObjectAttribute@SecurityToken@CipherShed@@KAXKKKAAV?$vector@EV?$allocator@E@std@@@std@@@Z$0
__ehfuncinfo$?GetObjectAttribute@SecurityToken@CipherShed@@KAXKKKAAV?$vector@EV?$allocator@E@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetObjectAttribute@SecurityToken@CipherShed@@KAXKKKAAV?$vector@EV?$allocator@E@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
xdata$x	ENDS
;	COMDAT ?GetObjectAttribute@SecurityToken@CipherShed@@KAXKKKAAV?$vector@EV?$allocator@E@std@@@std@@@Z
_TEXT	SEGMENT
$T187686 = -80						; size = 8
$T187542 = -80						; size = 8
$T187540 = -80						; size = 8
_attribute$ = -72					; size = 12
$T187544 = -60						; size = 24
$T187543 = -60						; size = 24
$T187545 = -36						; size = 24
__$EHRec$ = -12						; size = 12
_slotId$ = 8						; size = 4
_tokenObject$ = 12					; size = 4
_attributeType$ = 16					; size = 4
_attributeValue$ = 20					; size = 4
?GetObjectAttribute@SecurityToken@CipherShed@@KAXKKKAAV?$vector@EV?$allocator@E@std@@@std@@@Z PROC ; CipherShed::SecurityToken::GetObjectAttribute, COMDAT

; 353  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetObjectAttribute@SecurityToken@CipherShed@@KAXKKKAAV?$vector@EV?$allocator@E@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	53		 push	 ebx
  00012	55		 push	 ebp
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c4		 xor	 eax, esp
  0001c	50		 push	 eax
  0001d	8d 44 24 58	 lea	 eax, DWORD PTR __$EHRec$[esp+100]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 354  : 		attributeValue.clear();

  00027	8b 74 24 74	 mov	 esi, DWORD PTR _attributeValue$[esp+96]
  0002b	8b 6e 10	 mov	 ebp, DWORD PTR [esi+16]
  0002e	39 6e 0c	 cmp	 DWORD PTR [esi+12], ebp
  00031	76 05		 jbe	 SHORT $LN15@GetObjectA
  00033	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN15@GetObjectA:
  00038	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  0003b	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0003d	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  00040	76 05		 jbe	 SHORT $LN31@GetObjectA
  00042	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN31@GetObjectA:
  00047	8b 06		 mov	 eax, DWORD PTR [esi]
  00049	55		 push	 ebp
  0004a	53		 push	 ebx
  0004b	57		 push	 edi
  0004c	50		 push	 eax
  0004d	8d 44 24 24	 lea	 eax, DWORD PTR $T187686[esp+116]
  00051	50		 push	 eax
  00052	8b ce		 mov	 ecx, esi
  00054	e8 00 00 00 00	 call	 ?erase@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@V?$_Vector_const_iterator@EV?$allocator@E@std@@@2@0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::erase

; 355  : 
; 356  : 		if (Sessions.find (slotId) == Sessions.end())

  00059	8b 1d 18 00 00
	00		 mov	 ebx, DWORD PTR ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A+24
  0005f	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A
  00065	8d 4c 24 68	 lea	 ecx, DWORD PTR _slotId$[esp+96]
  00069	51		 push	 ecx
  0006a	8d 54 24 18	 lea	 edx, DWORD PTR $T187540[esp+104]
  0006e	52		 push	 edx
  0006f	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  00074	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::find
  00079	8b f8		 mov	 edi, eax
  0007b	8b 07		 mov	 eax, DWORD PTR [edi]
  0007d	85 c0		 test	 eax, eax
  0007f	74 04		 je	 SHORT $LN57@GetObjectA
  00081	3b c5		 cmp	 eax, ebp
  00083	74 05		 je	 SHORT $LN58@GetObjectA
$LN57@GetObjectA:
  00085	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN58@GetObjectA:
  0008a	39 5f 04	 cmp	 DWORD PTR [edi+4], ebx
  0008d	75 1f		 jne	 SHORT $LN4@GetObjectA

; 357  : 			throw ParameterIncorrect (SRC_POS);

  0008f	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00094	8d 44 24 18	 lea	 eax, DWORD PTR $T187542[esp+104]
  00098	50		 push	 eax
  00099	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T187542[esp+108], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  000a1	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T187542[esp+112], OFFSET ??_C@_0DC@MLHNLEHK@CipherShed?3?3SecurityToken?3?3GetOb@
  000a9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@GetObjectA:

; 358  : 
; 359  : 		CK_ATTRIBUTE attribute;
; 360  : 		attribute.type = attributeType;

  000ae	8b 4c 24 70	 mov	 ecx, DWORD PTR _attributeType$[esp+96]

; 361  : 		attribute.pValue = NULL_PTR;
; 362  : 
; 363  : 		CK_RV status = Pkcs11Functions->C_GetAttributeValue (Sessions[slotId].Handle, tokenObject, &attribute, 1);

  000b2	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  000b8	8d 54 24 68	 lea	 edx, DWORD PTR _slotId$[esp+96]
  000bc	89 4c 24 1c	 mov	 DWORD PTR _attribute$[esp+100], ecx
  000c0	52		 push	 edx
  000c1	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  000c6	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR _attribute$[esp+108], 0
  000ce	83 c5 62	 add	 ebp, 98			; 00000062H
  000d1	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
  000d6	8b 7c 24 6c	 mov	 edi, DWORD PTR _tokenObject$[esp+96]
  000da	8b 10		 mov	 edx, DWORD PTR [eax]
  000dc	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  000df	6a 01		 push	 1
  000e1	8d 4c 24 20	 lea	 ecx, DWORD PTR _attribute$[esp+104]
  000e5	51		 push	 ecx
  000e6	57		 push	 edi
  000e7	52		 push	 edx
  000e8	ff d0		 call	 eax
  000ea	83 c4 10	 add	 esp, 16			; 00000010H

; 364  : 		if (status != CKR_OK)

  000ed	85 c0		 test	 eax, eax
  000ef	74 20		 je	 SHORT $LN3@GetObjectA

; 365  : 			throw Pkcs11Exception (status);

  000f1	68 00 00 00 00	 push	 OFFSET __TI2?AUPkcs11Exception@CipherShed@@
  000f6	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T187543[esp+104]
  000fa	51		 push	 ecx
  000fb	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR $T187543[esp+108], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  00103	89 44 24 34	 mov	 DWORD PTR $T187543[esp+112], eax
  00107	c6 44 24 38 00	 mov	 BYTE PTR $T187543[esp+116], 0
  0010c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@GetObjectA:

; 366  : 
; 367  : 		if (attribute.ulValueLen == 0)

  00111	8b 44 24 24	 mov	 eax, DWORD PTR _attribute$[esp+108]
  00115	85 c0		 test	 eax, eax
  00117	0f 84 84 00 00
	00		 je	 $LN1@GetObjectA

; 368  : 			return;
; 369  : 
; 370  : 		attributeValue = vector <byte> (attribute.ulValueLen);

  0011d	50		 push	 eax
  0011e	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T187544[esp+104]
  00122	e8 00 00 00 00	 call	 ??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
  00127	50		 push	 eax
  00128	8b ce		 mov	 ecx, esi
  0012a	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+112], 0
  00132	e8 00 00 00 00	 call	 ??4?$vector@EV?$allocator@E@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator=
  00137	8d 4c 24 28	 lea	 ecx, DWORD PTR $T187544[esp+100]
  0013b	c7 44 24 60 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+108], -1
  00143	e8 00 00 00 00	 call	 ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >

; 371  : 		attribute.pValue = &attributeValue.front();

  00148	8b ce		 mov	 ecx, esi
  0014a	e8 00 00 00 00	 call	 ?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::front

; 372  : 
; 373  : 		status = Pkcs11Functions->C_GetAttributeValue (Sessions[slotId].Handle, tokenObject, &attribute, 1);

  0014f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  00155	8d 54 24 68	 lea	 edx, DWORD PTR _slotId$[esp+96]
  00159	52		 push	 edx
  0015a	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  0015f	89 44 24 24	 mov	 DWORD PTR _attribute$[esp+108], eax
  00163	83 c6 62	 add	 esi, 98			; 00000062H
  00166	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
  0016b	8b 10		 mov	 edx, DWORD PTR [eax]
  0016d	8b 06		 mov	 eax, DWORD PTR [esi]
  0016f	6a 01		 push	 1
  00171	8d 4c 24 20	 lea	 ecx, DWORD PTR _attribute$[esp+104]
  00175	51		 push	 ecx
  00176	57		 push	 edi
  00177	52		 push	 edx
  00178	ff d0		 call	 eax
  0017a	83 c4 10	 add	 esp, 16			; 00000010H

; 374  : 		if (status != CKR_OK)

  0017d	85 c0		 test	 eax, eax
  0017f	74 20		 je	 SHORT $LN1@GetObjectA

; 375  : 			throw Pkcs11Exception (status);

  00181	68 00 00 00 00	 push	 OFFSET __TI2?AUPkcs11Exception@CipherShed@@
  00186	8d 4c 24 44	 lea	 ecx, DWORD PTR $T187545[esp+104]
  0018a	51		 push	 ecx
  0018b	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR $T187545[esp+108], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  00193	89 44 24 4c	 mov	 DWORD PTR $T187545[esp+112], eax
  00197	c6 44 24 50 00	 mov	 BYTE PTR $T187545[esp+116], 0
  0019c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@GetObjectA:

; 376  : 	}

  001a1	8b 4c 24 58	 mov	 ecx, DWORD PTR __$EHRec$[esp+100]
  001a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ac	59		 pop	 ecx
  001ad	5f		 pop	 edi
  001ae	5e		 pop	 esi
  001af	5d		 pop	 ebp
  001b0	5b		 pop	 ebx
  001b1	83 c4 50	 add	 esp, 80			; 00000050H
  001b4	c3		 ret	 0
$LN78@GetObjectA:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetObjectAttribute@SecurityToken@CipherShed@@KAXKKKAAV?$vector@EV?$allocator@E@std@@@std@@@Z$0:
  00000	8d 4d c4	 lea	 ecx, DWORD PTR $T187544[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
__ehhandler$?GetObjectAttribute@SecurityToken@CipherShed@@KAXKKKAAV?$vector@EV?$allocator@E@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ac	 lea	 eax, DWORD PTR [edx-84]
  0000f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetObjectAttribute@SecurityToken@CipherShed@@KAXKKKAAV?$vector@EV?$allocator@E@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetObjectAttribute@SecurityToken@CipherShed@@KAXKKKAAV?$vector@EV?$allocator@E@std@@@std@@@Z ENDP ; CipherShed::SecurityToken::GetObjectAttribute
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GetTokenSlots@SecurityToken@CipherShed@@KA?AV?$list@KV?$allocator@K@std@@@std@@XZ ; CipherShed::SecurityToken::GetTokenSlots
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$?GetTokenSlots@SecurityToken@CipherShed@@KA?AV?$list@KV?$allocator@K@std@@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTokenSlots@SecurityToken@CipherShed@@KA?AV?$list@KV?$allocator@K@std@@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetTokenSlots@SecurityToken@CipherShed@@KA?AV?$list@KV?$allocator@K@std@@@std@@XZ$1
__ehfuncinfo$?GetTokenSlots@SecurityToken@CipherShed@@KA?AV?$list@KV?$allocator@K@std@@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetTokenSlots@SecurityToken@CipherShed@@KA?AV?$list@KV?$allocator@K@std@@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
xdata$x	ENDS
;	COMDAT ?GetTokenSlots@SecurityToken@CipherShed@@KA?AV?$list@KV?$allocator@K@std@@@std@@XZ
_TEXT	SEGMENT
_slotCount$ = -184					; size = 4
_slotArray$126027 = -180				; size = 24
$T187831 = -180						; size = 24
$T187848 = -156						; size = 4
$T187834 = -152						; size = 4
___$ReturnUdt$GSCopy$ = -148				; size = 4
$T187832 = -144						; size = 24
_slotInfo$126035 = -120					; size = 104
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetTokenSlots@SecurityToken@CipherShed@@KA?AV?$list@KV?$allocator@K@std@@@std@@XZ PROC ; CipherShed::SecurityToken::GetTokenSlots, COMDAT

; 379  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetTokenSlots@SecurityToken@CipherShed@@KA?AV?$list@KV?$allocator@K@std@@@std@@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 a8 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+184], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c4		 xor	 eax, esp
  0002c	50		 push	 eax
  0002d	8d 84 24 bc 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+200]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	8b bc 24 cc 00
	00 00		 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+196]
  00041	33 db		 xor	 ebx, ebx
  00043	89 5c 24 30	 mov	 DWORD PTR $T187834[esp+200], ebx
  00047	89 9c 24 c4 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+208], ebx

; 380  : 		CheckLibraryStatus();

  0004e	89 7c 24 34	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+200], edi
  00052	38 1d 00 00 00
	00		 cmp	 BYTE PTR ?Initialized@SecurityToken@CipherShed@@1_NA, bl ; CipherShed::SecurityToken::Initialized
  00058	75 17		 jne	 SHORT $LN14@GetTokenSl
  0005a	68 00 00 00 00	 push	 OFFSET __TI2?AUSecurityTokenLibraryNotInitialized@CipherShed@@
  0005f	8d 44 24 30	 lea	 eax, DWORD PTR $T187848[esp+204]
  00063	50		 push	 eax
  00064	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR $T187848[esp+208], OFFSET ??_7SecurityTokenLibraryNotInitialized@CipherShed@@6B@
  0006c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN14@GetTokenSl:

; 381  : 
; 382  : 		list <CK_SLOT_ID> slots;

  00071	8b cf		 mov	 ecx, edi
  00073	e8 00 00 00 00	 call	 ??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >

; 407  : 
; 408  : 		return slots;

  00078	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  0007e	8b 42 12	 mov	 eax, DWORD PTR [edx+18]
  00081	8d 4c 24 10	 lea	 ecx, DWORD PTR _slotCount$[esp+200]
  00085	51		 push	 ecx
  00086	53		 push	 ebx
  00087	6a 01		 push	 1
  00089	89 9c 24 d0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+220], ebx
  00090	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR $T187834[esp+212], 1
  00098	ff d0		 call	 eax
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009d	3b c3		 cmp	 eax, ebx
  0009f	74 1f		 je	 SHORT $LN8@GetTokenSl
  000a1	68 00 00 00 00	 push	 OFFSET __TI2?AUPkcs11Exception@CipherShed@@
  000a6	8d 4c 24 18	 lea	 ecx, DWORD PTR $T187831[esp+204]
  000aa	51		 push	 ecx
  000ab	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T187831[esp+208], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  000b3	89 44 24 20	 mov	 DWORD PTR $T187831[esp+212], eax
  000b7	88 5c 24 24	 mov	 BYTE PTR $T187831[esp+216], bl
  000bb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@GetTokenSl:

; 383  : 		CK_ULONG slotCount;
; 384  : 
; 385  : 		CK_RV status = Pkcs11Functions->C_GetSlotList (TRUE, NULL_PTR, &slotCount);
; 386  : 		if (status != CKR_OK)
; 387  : 			throw Pkcs11Exception (status);
; 388  : 
; 389  : 		if (slotCount > 0)

  000c0	8b 44 24 10	 mov	 eax, DWORD PTR _slotCount$[esp+200]
  000c4	3b c3		 cmp	 eax, ebx
  000c6	0f 86 15 01 00
	00		 jbe	 $LN83@GetTokenSl

; 390  : 		{
; 391  : 			vector <CK_SLOT_ID> slotArray (slotCount);

  000cc	50		 push	 eax
  000cd	8d 4c 24 18	 lea	 ecx, DWORD PTR _slotArray$126027[esp+204]
  000d1	e8 00 00 00 00	 call	 ??0?$vector@KV?$allocator@K@std@@@std@@QAE@I@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >

; 392  : 			status = Pkcs11Functions->C_GetSlotList (TRUE, &slotArray.front(), &slotCount);

  000d6	8b 44 24 20	 mov	 eax, DWORD PTR _slotArray$126027[esp+212]
  000da	c7 84 24 c4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+208], 1
  000e5	8b f0		 mov	 esi, eax
  000e7	3b 44 24 24	 cmp	 eax, DWORD PTR _slotArray$126027[esp+216]
  000eb	76 05		 jbe	 SHORT $LN33@GetTokenSl
  000ed	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN33@GetTokenSl:
  000f2	8b 44 24 14	 mov	 eax, DWORD PTR _slotArray$126027[esp+200]
  000f6	3b c3		 cmp	 eax, ebx
  000f8	75 49		 jne	 SHORT $LN89@GetTokenSl
  000fa	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000ff	33 c0		 xor	 eax, eax
$LN55@GetTokenSl:
  00101	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  00104	72 05		 jb	 SHORT $LN46@GetTokenSl
  00106	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN46@GetTokenSl:
  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  00110	8b 48 12	 mov	 ecx, DWORD PTR [eax+18]
  00113	8d 54 24 10	 lea	 edx, DWORD PTR _slotCount$[esp+200]
  00117	52		 push	 edx
  00118	56		 push	 esi
  00119	6a 01		 push	 1
  0011b	ff d1		 call	 ecx
  0011d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 393  : 			if (status != CKR_OK)

  00120	3b c3		 cmp	 eax, ebx
  00122	74 23		 je	 SHORT $LN6@GetTokenSl

; 394  : 				throw Pkcs11Exception (status);

  00124	68 00 00 00 00	 push	 OFFSET __TI2?AUPkcs11Exception@CipherShed@@
  00129	8d 54 24 3c	 lea	 edx, DWORD PTR $T187832[esp+204]
  0012d	52		 push	 edx
  0012e	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR $T187832[esp+208], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  00136	89 44 24 44	 mov	 DWORD PTR $T187832[esp+212], eax
  0013a	88 5c 24 48	 mov	 BYTE PTR $T187832[esp+216], bl
  0013e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN89@GetTokenSl:

; 392  : 			status = Pkcs11Functions->C_GetSlotList (TRUE, &slotArray.front(), &slotCount);

  00143	8b 00		 mov	 eax, DWORD PTR [eax]
  00145	eb ba		 jmp	 SHORT $LN55@GetTokenSl
$LN6@GetTokenSl:

; 395  : 
; 396  : 			for (size_t i = 0; i < slotCount; i++)

  00147	33 f6		 xor	 esi, esi
  00149	39 5c 24 10	 cmp	 DWORD PTR _slotCount$[esp+200], ebx
  0014d	76 68		 jbe	 SHORT $LN3@GetTokenSl
  0014f	90		 npad	 1
$LL5@GetTokenSl:

; 397  : 			{
; 398  : 				CK_SLOT_INFO slotInfo;
; 399  : 				status = Pkcs11Functions->C_GetSlotInfo (slotArray[i], &slotInfo);

  00150	8b 44 24 24	 mov	 eax, DWORD PTR _slotArray$126027[esp+216]
  00154	2b 44 24 20	 sub	 eax, DWORD PTR _slotArray$126027[esp+212]
  00158	c1 f8 02	 sar	 eax, 2
  0015b	3b f0		 cmp	 esi, eax
  0015d	72 05		 jb	 SHORT $LN62@GetTokenSl
  0015f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN62@GetTokenSl:
  00164	8b 54 24 20	 mov	 edx, DWORD PTR _slotArray$126027[esp+212]
  00168	8b 04 b2	 mov	 eax, DWORD PTR [edx+esi*4]
  0016b	8d 4c 24 50	 lea	 ecx, DWORD PTR _slotInfo$126035[esp+200]
  0016f	51		 push	 ecx
  00170	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  00176	8b 51 16	 mov	 edx, DWORD PTR [ecx+22]
  00179	50		 push	 eax
  0017a	ff d2		 call	 edx
  0017c	83 c4 08	 add	 esp, 8

; 400  : 
; 401  : 				if (status != CKR_OK || !(slotInfo.flags & CKF_TOKEN_PRESENT))

  0017f	3b c3		 cmp	 eax, ebx
  00181	75 2d		 jne	 SHORT $LN4@GetTokenSl
  00183	f6 84 24 b0 00
	00 00 01	 test	 BYTE PTR _slotInfo$126035[esp+296], 1
  0018b	74 23		 je	 SHORT $LN4@GetTokenSl

; 402  : 					continue;
; 403  : 
; 404  : 				slots.push_back (slotArray[i]);

  0018d	8b 44 24 24	 mov	 eax, DWORD PTR _slotArray$126027[esp+216]
  00191	2b 44 24 20	 sub	 eax, DWORD PTR _slotArray$126027[esp+212]
  00195	c1 f8 02	 sar	 eax, 2
  00198	3b f0		 cmp	 esi, eax
  0019a	72 05		 jb	 SHORT $LN67@GetTokenSl
  0019c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN67@GetTokenSl:
  001a1	8b 4c 24 20	 mov	 ecx, DWORD PTR _slotArray$126027[esp+212]
  001a5	8d 14 b1	 lea	 edx, DWORD PTR [ecx+esi*4]
  001a8	52		 push	 edx
  001a9	8b cf		 mov	 ecx, edi
  001ab	e8 00 00 00 00	 call	 ?push_back@?$list@KV?$allocator@K@std@@@std@@QAEXABK@Z ; std::list<unsigned long,std::allocator<unsigned long> >::push_back
$LN4@GetTokenSl:
  001b0	46		 inc	 esi
  001b1	3b 74 24 10	 cmp	 esi, DWORD PTR _slotCount$[esp+200]
  001b5	72 99		 jb	 SHORT $LL5@GetTokenSl
$LN3@GetTokenSl:

; 405  : 			}
; 406  : 		}

  001b7	8b 44 24 20	 mov	 eax, DWORD PTR _slotArray$126027[esp+212]
  001bb	3b c3		 cmp	 eax, ebx
  001bd	74 09		 je	 SHORT $LN77@GetTokenSl
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001c5	83 c4 04	 add	 esp, 4
$LN77@GetTokenSl:
  001c8	8b 44 24 14	 mov	 eax, DWORD PTR _slotArray$126027[esp+200]
  001cc	50		 push	 eax
  001cd	89 5c 24 24	 mov	 DWORD PTR _slotArray$126027[esp+216], ebx
  001d1	89 5c 24 28	 mov	 DWORD PTR _slotArray$126027[esp+220], ebx
  001d5	89 5c 24 2c	 mov	 DWORD PTR _slotArray$126027[esp+224], ebx
  001d9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001de	83 c4 04	 add	 esp, 4
$LN83@GetTokenSl:

; 407  : 
; 408  : 		return slots;

  001e1	8b c7		 mov	 eax, edi

; 409  : 	}

  001e3	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+200]
  001ea	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001f1	59		 pop	 ecx
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
  001f5	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+184]
  001fc	33 cc		 xor	 ecx, esp
  001fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00203	81 c4 b8 00 00
	00		 add	 esp, 184		; 000000b8H
  00209	c3		 ret	 0
$LN91@GetTokenSl:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetTokenSlots@SecurityToken@CipherShed@@KA?AV?$list@KV?$allocator@K@std@@@std@@XZ$0:
  00000	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR $T187834[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 12 00 00
	00		 je	 $LN12@GetTokenSl
  0000f	83 a5 68 ff ff
	ff fe		 and	 DWORD PTR $T187834[ebp], -2 ; fffffffeH
  00016	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$list@KV?$allocator@K@std@@@std@@QAE@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::~list<unsigned long,std::allocator<unsigned long> >
$LN12@GetTokenSl:
  00021	c3		 ret	 0
__unwindfunclet$?GetTokenSlots@SecurityToken@CipherShed@@KA?AV?$list@KV?$allocator@K@std@@@std@@XZ$1:
  00022	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _slotArray$126027[ebp]
  00028	e9 00 00 00 00	 jmp	 ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
__ehhandler$?GetTokenSlots@SecurityToken@CipherShed@@KA?AV?$list@KV?$allocator@K@std@@@std@@XZ:
  0002d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00031	8d 82 48 ff ff
	ff		 lea	 eax, DWORD PTR [edx-184]
  00037	8b 8a 44 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-188]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	83 c0 0c	 add	 eax, 12			; 0000000cH
  00047	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004a	33 c8		 xor	 ecx, eax
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetTokenSlots@SecurityToken@CipherShed@@KA?AV?$list@KV?$allocator@K@std@@@std@@XZ
  00056	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetTokenSlots@SecurityToken@CipherShed@@KA?AV?$list@KV?$allocator@K@std@@@std@@XZ ENDP ; CipherShed::SecurityToken::GetTokenSlots
PUBLIC	?OpenSession@SecurityToken@CipherShed@@KAXK@Z	; CipherShed::SecurityToken::OpenSession
; Function compile flags: /Ogtpy
;	COMDAT ?OpenSession@SecurityToken@CipherShed@@KAXK@Z
_TEXT	SEGMENT
_session$ = -100					; size = 4
$T188098 = -96						; size = 8
$T188102 = -88						; size = 24
$T188101 = -64						; size = 64
_slotId$ = 8						; size = 4
?OpenSession@SecurityToken@CipherShed@@KAXK@Z PROC	; CipherShed::SecurityToken::OpenSession, COMDAT

; 546  : 	{

  00000	83 ec 64	 sub	 esp, 100		; 00000064H
  00003	53		 push	 ebx

; 547  : 		if (Sessions.find (slotId) != Sessions.end())

  00004	8b 1d 18 00 00
	00		 mov	 ebx, DWORD PTR ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A+24
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A
  00012	8d 44 24 74	 lea	 eax, DWORD PTR _slotId$[esp+108]
  00016	50		 push	 eax
  00017	8d 4c 24 14	 lea	 ecx, DWORD PTR $T188098[esp+116]
  0001b	51		 push	 ecx
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  00021	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::find
  00026	8b f0		 mov	 esi, eax
  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	85 c0		 test	 eax, eax
  0002c	74 04		 je	 SHORT $LN24@OpenSessio
  0002e	3b c7		 cmp	 eax, edi
  00030	74 05		 je	 SHORT $LN25@OpenSessio
$LN24@OpenSessio:
  00032	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN25@OpenSessio:
  00037	39 5e 04	 cmp	 DWORD PTR [esi+4], ebx
  0003a	0f 85 85 00 00
	00		 jne	 $LN4@OpenSessio

; 548  : 			return;
; 549  : 
; 550  : 		CK_SESSION_HANDLE session;
; 551  : 
; 552  : 		CK_FLAGS flags = CKF_SERIAL_SESSION;
; 553  : 
; 554  : 		if (!(GetTokenInfo (slotId).Flags & CKF_WRITE_PROTECTED))

  00040	8b 7c 24 74	 mov	 edi, DWORD PTR _slotId$[esp+108]
  00044	8d 54 24 30	 lea	 edx, DWORD PTR $T188101[esp+112]
  00048	57		 push	 edi
  00049	52		 push	 edx
  0004a	be 04 00 00 00	 mov	 esi, 4
  0004f	e8 00 00 00 00	 call	 ?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z ; CipherShed::SecurityToken::GetTokenInfo
  00054	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  00057	d1 eb		 shr	 ebx, 1
  00059	f6 d3		 not	 bl
  0005b	83 c4 08	 add	 esp, 8
  0005e	8d 4c 24 30	 lea	 ecx, DWORD PTR $T188101[esp+112]
  00062	80 e3 01	 and	 bl, 1
  00065	e8 00 00 00 00	 call	 ??1SecurityTokenInfo@CipherShed@@QAE@XZ
  0006a	84 db		 test	 bl, bl
  0006c	74 05		 je	 SHORT $LN2@OpenSessio

; 555  : 			 flags |= CKF_RW_SESSION;

  0006e	be 06 00 00 00	 mov	 esi, 6
$LN2@OpenSessio:

; 556  : 
; 557  : 		CK_RV status = Pkcs11Functions->C_OpenSession (slotId, flags, NULL_PTR, NULL_PTR, &session);

  00073	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  00079	8b 51 32	 mov	 edx, DWORD PTR [ecx+50]
  0007c	8d 44 24 0c	 lea	 eax, DWORD PTR _session$[esp+112]
  00080	50		 push	 eax
  00081	6a 00		 push	 0
  00083	6a 00		 push	 0
  00085	56		 push	 esi
  00086	57		 push	 edi
  00087	ff d2		 call	 edx
  00089	83 c4 14	 add	 esp, 20			; 00000014H

; 558  : 		if (status != CKR_OK)

  0008c	85 c0		 test	 eax, eax
  0008e	74 20		 je	 SHORT $LN1@OpenSessio

; 559  : 			throw Pkcs11Exception (status);

  00090	89 44 24 1c	 mov	 DWORD PTR $T188102[esp+116], eax
  00094	68 00 00 00 00	 push	 OFFSET __TI2?AUPkcs11Exception@CipherShed@@
  00099	8d 44 24 1c	 lea	 eax, DWORD PTR $T188102[esp+116]
  0009d	50		 push	 eax
  0009e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T188102[esp+120], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  000a6	c6 44 24 28 00	 mov	 BYTE PTR $T188102[esp+128], 0
  000ab	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@OpenSessio:

; 560  : 
; 561  : 		Sessions[slotId].Handle = session;

  000b0	8d 4c 24 74	 lea	 ecx, DWORD PTR _slotId$[esp+108]
  000b4	51		 push	 ecx
  000b5	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  000ba	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
  000bf	8b 54 24 0c	 mov	 edx, DWORD PTR _session$[esp+112]
  000c3	89 10		 mov	 DWORD PTR [eax], edx
$LN4@OpenSessio:
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx

; 562  : 	}

  000c8	83 c4 64	 add	 esp, 100		; 00000064H
  000cb	c3		 ret	 0
$LN36@OpenSessio:
?OpenSession@SecurityToken@CipherShed@@KAXK@Z ENDP	; CipherShed::SecurityToken::OpenSession
_TEXT	ENDS
PUBLIC	??1?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::~list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??1?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::~list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >, COMDAT
; _this$ = ecx

; 520  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 521  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::clear
  00008	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 522  : 		}

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	51		 push	 ecx
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 08	 add	 esp, 8
  00023	5e		 pop	 esi
  00024	c3		 ret	 0
??1?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::~list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
_TEXT	ENDS
PUBLIC	?push_back@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXABUSecurityTokenInfo@CipherShed@@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXABUSecurityTokenInfo@CipherShed@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXABUSecurityTokenInfo@CipherShed@@@Z PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::push_back, COMDAT
; _this$ = ecx

; 670  : 		_Insert(end(), _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0000c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000f	50		 push	 eax
  00010	51		 push	 ecx
  00011	57		 push	 edi
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Buynode
  00019	6a 01		 push	 1
  0001b	8b ce		 mov	 ecx, esi
  0001d	8b d8		 mov	 ebx, eax
  0001f	e8 00 00 00 00	 call	 ?_Incsize@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Incsize
  00024	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00027	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	89 1a		 mov	 DWORD PTR [edx], ebx
  0002e	5b		 pop	 ebx

; 671  : 		}

  0002f	c2 04 00	 ret	 4
?push_back@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXABUSecurityTokenInfo@CipherShed@@@Z ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::push_back
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXXZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
__Cat$188394 = -4					; size = 1
?_Tidy@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXXZ PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1124 : 		if (_Myfirst != 0)

  00004	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00007	85 c0		 test	 eax, eax
  00009	74 1f		 je	 SHORT $LN10@Tidy@9

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

  0000b	8b 4c 24 04	 mov	 ecx, DWORD PTR __Cat$188394[esp+8]
  0000f	51		 push	 ecx
  00010	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00013	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
  00016	52		 push	 edx
  00017	51		 push	 ecx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CipherShed::SecurityTokenKeyfile> >

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0001e	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00027	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@Tidy@9:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  0002a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00031	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00038	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0003f	5e		 pop	 esi

; 1135 : 		}

  00040	59		 pop	 ecx
  00041	c3		 ret	 0
?_Tidy@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXXZ ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEPAUSecurityTokenKeyfile@CipherShed@@PAU34@IABU34@@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Ufill
; Function compile flags: /Ogtpy
;	COMDAT ?_Ufill@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEPAUSecurityTokenKeyfile@CipherShed@@PAU34@IABU34@@Z
_TEXT	SEGMENT
$T188414 = -4						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Cat$188417 = 16					; size = 1
__Val$ = 16						; size = 4
?_Ufill@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEPAUSecurityTokenKeyfile@CipherShed@@PAU34@IABU34@@Z PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

  00000	51		 push	 ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$188417[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __Count$[esp+4]
  0000a	57		 push	 edi
  0000b	8b 7c 24 10	 mov	 edi, DWORD PTR __Ptr$[esp+8]
  0000f	c6 44 24 08 00	 mov	 BYTE PTR $T188414[esp+12], 0
  00014	8b 44 24 08	 mov	 eax, DWORD PTR $T188414[esp+12]
  00018	50		 push	 eax
  00019	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+12]
  0001d	52		 push	 edx
  0001e	83 c1 08	 add	 ecx, 8
  00021	51		 push	 ecx
  00022	50		 push	 eax
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CipherShed::SecurityTokenKeyfile *,unsigned int,CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >

; 1255 : 		return (_Ptr + _Count);

  0002a	8b c6		 mov	 eax, esi
  0002c	83 c4 18	 add	 esp, 24			; 00000018H
  0002f	c1 e0 07	 shl	 eax, 7
  00032	03 c7		 add	 eax, edi
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi

; 1256 : 		}

  00036	59		 pop	 ecx
  00037	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEPAUSecurityTokenKeyfile@CipherShed@@PAU34@IABU34@@Z ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Ufill
_TEXT	ENDS
PUBLIC	??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
;	COMDAT ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
CONST	SEGMENT
??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	0cH
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$0
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$1
	DD	02H
	DD	00H
__ehfuncinfo$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
xdata$x	ENDS
;	COMDAT ??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
_TEXT	SEGMENT
$T188422 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 914  : 		{	// construct from stream buffer pointer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx
  00028	89 7c 24 14	 mov	 DWORD PTR _this$[esp+36], edi
  0002c	33 db		 xor	 ebx, ebx
  0002e	89 5c 24 10	 mov	 DWORD PTR $T188422[esp+36], ebx
  00032	39 5c 24 2c	 cmp	 DWORD PTR _$initVBases$[esp+32], ebx
  00036	74 20		 je	 SHORT $LN1@basic_iost
  00038	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
  0003e	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
  00045	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  0004c	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00050	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR $T188422[esp+36], 1
$LN1@basic_iost:
  00058	8b 07		 mov	 eax, DWORD PTR [edi]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005d	c7 04 0f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00064	8b 17		 mov	 edx, DWORD PTR [edi]
  00066	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00069	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0006c	03 f7		 add	 esi, edi
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init
  00075	8b 44 24 28	 mov	 eax, DWORD PTR __Strbuf$[esp+32]
  00079	6a 20		 push	 32			; 00000020H
  0007b	8b ce		 mov	 ecx, esi
  0007d	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00080	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00083	e8 00 00 00 00	 call	 ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen
  00088	66 89 46 30	 mov	 WORD PTR [esi+48], ax
  0008c	39 5e 28	 cmp	 DWORD PTR [esi+40], ebx
  0008f	75 12		 jne	 SHORT $LN31@basic_iost
  00091	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00094	83 c8 04	 or	 eax, 4
  00097	83 c8 04	 or	 eax, 4
  0009a	53		 push	 ebx
  0009b	50		 push	 eax
  0009c	8b ce		 mov	 ecx, esi
  0009e	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN31@basic_iost:
  000a3	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  000a6	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000a9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ac	c7 44 17 08 00
	00 00 00	 mov	 DWORD PTR [edi+edx+8], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  000b4	8b 07		 mov	 eax, DWORD PTR [edi]
  000b6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b9	c7 04 0f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@

; 915  : 		}

  000c0	8b c7		 mov	 eax, edi
  000c2	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000c6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cd	59		 pop	 ecx
  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
  000d0	5b		 pop	 ebx
  000d1	83 c4 14	 add	 esp, 20			; 00000014H
  000d4	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T188422[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_iost
  0000c	83 65 ec fe	 and	 DWORD PTR $T188422[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_iost:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 08	 add	 ecx, 8
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0002e	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
;	COMDAT ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
	DD	0cH
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$0
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$1
	DD	02H
	DD	00H
__ehfuncinfo$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
xdata$x	ENDS
;	COMDAT ??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
$T188540 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 914  : 		{	// construct from stream buffer pointer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx
  00028	89 7c 24 14	 mov	 DWORD PTR _this$[esp+36], edi
  0002c	33 db		 xor	 ebx, ebx
  0002e	89 5c 24 10	 mov	 DWORD PTR $T188540[esp+36], ebx
  00032	39 5c 24 2c	 cmp	 DWORD PTR _$initVBases$[esp+32], ebx
  00036	74 20		 je	 SHORT $LN1@basic_iost@2
  00038	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0003e	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00045	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  0004c	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00050	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR $T188540[esp+36], 1
$LN1@basic_iost@2:
  00058	8b 07		 mov	 eax, DWORD PTR [edi]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005d	c7 04 0f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00064	8b 17		 mov	 edx, DWORD PTR [edi]
  00066	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00069	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0006c	03 f7		 add	 esi, edi
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init
  00075	8b 44 24 28	 mov	 eax, DWORD PTR __Strbuf$[esp+32]
  00079	6a 20		 push	 32			; 00000020H
  0007b	8b ce		 mov	 ecx, esi
  0007d	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00080	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00083	e8 00 00 00 00	 call	 ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
  00088	88 46 30	 mov	 BYTE PTR [esi+48], al
  0008b	39 5e 28	 cmp	 DWORD PTR [esi+40], ebx
  0008e	75 12		 jne	 SHORT $LN31@basic_iost@2
  00090	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00093	83 c8 04	 or	 eax, 4
  00096	83 c8 04	 or	 eax, 4
  00099	53		 push	 ebx
  0009a	50		 push	 eax
  0009b	8b ce		 mov	 ecx, esi
  0009d	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN31@basic_iost@2:
  000a2	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  000a5	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000a8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ab	c7 44 17 08 00
	00 00 00	 mov	 DWORD PTR [edi+edx+8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  000b3	8b 07		 mov	 eax, DWORD PTR [edi]
  000b5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b8	c7 04 0f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@

; 915  : 		}

  000bf	8b c7		 mov	 eax, edi
  000c1	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cc	59		 pop	 ecx
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	83 c4 14	 add	 esp, 20			; 00000014H
  000d3	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T188540[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_iost@2
  0000c	83 65 ec fe	 and	 DWORD PTR $T188540[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_iost@2:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 08	 add	 ecx, 8
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
__ehhandler$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0002e	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 102  : 			{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0

; 103  : 
; 104  :  #if _HAS_EXCEPTIONS
; 105  : 			if (!_XSTD uncaught_exception())

  00030	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00035	84 c0		 test	 al, al
  00037	75 07		 jne	 SHORT $LN1@sentry@3

; 106  : 				this->_Myostr._Osfx();

  00039	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003b	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN1@sentry@3:

; 107  : 			}

  00040	8b 06		 mov	 eax, DWORD PTR [esi]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00047	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  0004b	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+32], -1
  00053	85 c0		 test	 eax, eax
  00055	74 08		 je	 SHORT $LN12@sentry@3
  00057	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0005a	e8 00 00 00 00	 call	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN12@sentry@3:
  0005f	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	5e		 pop	 esi
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 102  : 			{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0

; 103  : 
; 104  :  #if _HAS_EXCEPTIONS
; 105  : 			if (!_XSTD uncaught_exception())

  00030	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00035	84 c0		 test	 al, al
  00037	75 07		 jne	 SHORT $LN1@sentry@4

; 106  : 				this->_Myostr._Osfx();

  00039	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003b	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN1@sentry@4:

; 107  : 			}

  00040	8b 06		 mov	 eax, DWORD PTR [esi]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00047	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  0004b	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+32], -1
  00053	85 c0		 test	 eax, eax
  00055	74 08		 je	 SHORT $LN12@sentry@4
  00057	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0005a	e8 00 00 00 00	 call	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN12@sentry@4:
  0005f	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	5e		 pop	 esi
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
PUBLIC	??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$9 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$0
__tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z DD 01H
	DD	01H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$9
__ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
_TEXT	SEGMENT
__Ok$ = -32						; size = 8
__Pad$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z PROC ; std::operator<<<wchar_t,std::char_traits<wchar_t> >, COMDAT

; 827  : 	{	// insert NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 828  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 829  : 	ios_base::iostate _State = ios_base::goodbit;
; 830  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0002e	33 db		 xor	 ebx, ebx
  00030	89 5d ec	 mov	 DWORD PTR __State$[ebp], ebx
  00033	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL134@operator@60:
  00036	66 8b 08	 mov	 cx, WORD PTR [eax]
  00039	83 c0 02	 add	 eax, 2
  0003c	66 3b cb	 cmp	 cx, bx
  0003f	75 f5		 jne	 SHORT $LL134@operator@60

; 831  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 832  : 		? 0 : _Ostr.width() - _Count;

  00041	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	8b f8		 mov	 edi, eax
  0004a	8b 06		 mov	 eax, DWORD PTR [esi]
  0004c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004f	8b 44 31 18	 mov	 eax, DWORD PTR [ecx+esi+24]
  00053	3b c3		 cmp	 eax, ebx
  00055	7e 0d		 jle	 SHORT $LN17@operator@60
  00057	3b c7		 cmp	 eax, edi
  00059	7e 09		 jle	 SHORT $LN17@operator@60
  0005b	2b c7		 sub	 eax, edi
  0005d	8b d8		 mov	 ebx, eax
  0005f	89 45 e8	 mov	 DWORD PTR __Pad$[ebp], eax
  00062	eb 03		 jmp	 SHORT $LN18@operator@60
$LN17@operator@60:
  00064	89 5d e8	 mov	 DWORD PTR __Pad$[ebp], ebx
$LN18@operator@60:

; 833  : 	const typename _Myos::sentry _Ok(_Ostr);

  00067	56		 push	 esi
  00068	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0006b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry

; 834  : 
; 835  : 	if (!_Ok)

  00070	80 7d e4 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0007b	75 0a		 jne	 SHORT $LN14@operator@60

; 836  : 		_State |= ios_base::badbit;

  0007d	ba 04 00 00 00	 mov	 edx, 4

; 837  : 	else

  00082	e9 ab 00 00 00	 jmp	 $LN22@operator@60
$LN14@operator@60:

; 838  : 		{	// state okay, insert
; 839  : 		_TRY_IO_BEGIN
; 840  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00087	8b 16		 mov	 edx, DWORD PTR [esi]
  00089	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0008c	8b 44 30 10	 mov	 eax, DWORD PTR [eax+esi+16]
  00090	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00095	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00099	83 f8 40	 cmp	 eax, 64			; 00000040H
  0009c	74 63		 je	 SHORT $LN132@operator@60
  0009e	8b ff		 npad	 2
$LL10@operator@60:

; 841  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  000a0	85 db		 test	 ebx, ebx
  000a2	7e 57		 jle	 SHORT $LN8@operator@60

; 842  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 843  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  000a4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000a6	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a9	8b 4c 32 28	 mov	 ecx, DWORD PTR [edx+esi+40]
  000ad	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  000b0	0f b7 50 30	 movzx	 edx, WORD PTR [eax+48]
  000b4	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  000b7	83 38 00	 cmp	 DWORD PTR [eax], 0
  000ba	74 1f		 je	 SHORT $LN42@operator@60
  000bc	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  000bf	83 38 00	 cmp	 DWORD PTR [eax], 0
  000c2	7e 17		 jle	 SHORT $LN42@operator@60
  000c4	ff 08		 dec	 DWORD PTR [eax]
  000c6	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000c9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cb	8d 58 02	 lea	 ebx, DWORD PTR [eax+2]
  000ce	89 19		 mov	 DWORD PTR [ecx], ebx
  000d0	8b 5d e8	 mov	 ebx, DWORD PTR __Pad$[ebp]
  000d3	66 89 10	 mov	 WORD PTR [eax], dx
  000d6	0f b7 c2	 movzx	 eax, dx
  000d9	eb 0e		 jmp	 SHORT $LN43@operator@60
$LN42@operator@60:
  000db	8b 01		 mov	 eax, DWORD PTR [ecx]
  000dd	52		 push	 edx
  000de	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000e1	ff d2		 call	 edx
  000e3	0f b7 c0	 movzx	 eax, ax
  000e6	0f b7 c0	 movzx	 eax, ax
$LN43@operator@60:
  000e9	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  000ee	66 3b c8	 cmp	 cx, ax
  000f1	0f 85 7f 00 00
	00		 jne	 $LN9@operator@60

; 844  : 					{	// insertion failed, quit
; 845  : 					_State |= ios_base::badbit;

  000f7	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN8@operator@60:

; 846  : 					break;
; 847  : 					}
; 848  : 
; 849  : 		if (_State == ios_base::goodbit
; 850  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  000fb	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  000ff	75 1f		 jne	 SHORT $LN2@operator@60
$LN132@operator@60:
  00101	8b 16		 mov	 edx, DWORD PTR [esi]
  00103	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00106	8b 4c 30 28	 mov	 ecx, DWORD PTR [eax+esi+40]
  0010a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0010c	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0010f	57		 push	 edi
  00110	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00113	ff d0		 call	 eax
  00115	3b c7		 cmp	 eax, edi
  00117	74 67		 je	 SHORT $LL133@operator@60

; 851  : 			_State |= ios_base::badbit;

  00119	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN2@operator@60:

; 860  : 					}
; 861  : 		_Ostr.width(0);

  00120	8b 06		 mov	 eax, DWORD PTR [esi]
  00122	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00125	03 c6		 add	 eax, esi
  00127	33 c9		 xor	 ecx, ecx
  00129	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  0012c	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
$LN141@operator@60:
  0012f	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
$LN22@operator@60:

; 863  : 		}
; 864  : 
; 865  : 	_Ostr.setstate(_State);

  00132	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00134	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00137	03 ce		 add	 ecx, esi
  00139	85 d2		 test	 edx, edx
  0013b	74 16		 je	 SHORT $LN125@operator@60
  0013d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00140	0b c2		 or	 eax, edx
  00142	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00146	75 03		 jne	 SHORT $LN127@operator@60
  00148	83 c8 04	 or	 eax, 4
$LN127@operator@60:
  0014b	6a 00		 push	 0
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN125@operator@60:

; 866  : 	return (_Ostr);

  00153	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00156	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0015d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
  00162	8b c6		 mov	 eax, esi

; 867  : 	}

  00164	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00167	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016e	59		 pop	 ecx
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	5b		 pop	 ebx
  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c3		 ret	 0
$LN9@operator@60:

; 841  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00176	4b		 dec	 ebx
  00177	89 5d e8	 mov	 DWORD PTR __Pad$[ebp], ebx
  0017a	e9 21 ff ff ff	 jmp	 $LL10@operator@60
  0017f	90		 npad	 1
$LL133@operator@60:

; 852  : 
; 853  : 		if (_State == ios_base::goodbit)
; 854  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00180	85 db		 test	 ebx, ebx
  00182	7e 9c		 jle	 SHORT $LN2@operator@60

; 855  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 856  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00184	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00186	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00189	8b 4c 32 28	 mov	 ecx, DWORD PTR [edx+esi+40]
  0018d	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  00190	0f b7 50 30	 movzx	 edx, WORD PTR [eax+48]
  00194	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00197	83 38 00	 cmp	 DWORD PTR [eax], 0
  0019a	74 1c		 je	 SHORT $LN68@operator@60
  0019c	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0019f	83 38 00	 cmp	 DWORD PTR [eax], 0
  001a2	7e 14		 jle	 SHORT $LN68@operator@60
  001a4	ff 08		 dec	 DWORD PTR [eax]
  001a6	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  001a9	8b 01		 mov	 eax, DWORD PTR [ecx]
  001ab	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  001ae	89 39		 mov	 DWORD PTR [ecx], edi
  001b0	66 89 10	 mov	 WORD PTR [eax], dx
  001b3	0f b7 c2	 movzx	 eax, dx
  001b6	eb 0e		 jmp	 SHORT $LN69@operator@60
$LN68@operator@60:
  001b8	8b 01		 mov	 eax, DWORD PTR [ecx]
  001ba	52		 push	 edx
  001bb	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001be	ff d2		 call	 edx
  001c0	0f b7 c0	 movzx	 eax, ax
  001c3	0f b7 c0	 movzx	 eax, ax
$LN69@operator@60:
  001c6	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  001cb	66 3b c8	 cmp	 cx, ax
  001ce	75 09		 jne	 SHORT $LN3@operator@60

; 857  : 					{	// insertion failed, quit
; 858  : 					_State |= ios_base::badbit;

  001d0	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4

; 859  : 					break;

  001d4	e9 47 ff ff ff	 jmp	 $LN2@operator@60
$LN3@operator@60:

; 852  : 
; 853  : 		if (_State == ios_base::goodbit)
; 854  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  001d9	4b		 dec	 ebx
  001da	eb a4		 jmp	 SHORT $LL133@operator@60
__catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$0:

; 862  : 		_CATCH_IO_(_Ostr)

  001dc	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  001df	8b 11		 mov	 edx, DWORD PTR [ecx]
  001e1	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e4	03 c1		 add	 eax, ecx
  001e6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001e9	83 c9 04	 or	 ecx, 4
  001ec	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  001f0	75 03		 jne	 SHORT $LN93@operator@60
  001f2	83 c9 04	 or	 ecx, 4
$LN93@operator@60:
  001f5	83 e1 17	 and	 ecx, 23			; 00000017H
  001f8	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  001fb	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  001fe	75 15		 jne	 SHORT $LN102@operator@60
  00200	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00207	b8 00 00 00 00	 mov	 eax, $LN23@operator@60
  0020c	c3		 ret	 0
$LN23@operator@60:
  0020d	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00210	e9 1a ff ff ff	 jmp	 $LN141@operator@60
$LN102@operator@60:
  00215	6a 00		 push	 0
  00217	6a 00		 push	 0
  00219	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN140@operator@60:
  0021e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
__ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ENDP ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__catchsym$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$0
__tryblocktable$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z DD 01H
	DD	01H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$10
__ehfuncinfo$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$9
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT
__Ok$ = -36						; size = 8
__Size$ = -28						; size = 4
__Pad$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z PROC ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 540  : 	{	// insert a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 541  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 542  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 543  : 	typedef typename _Mystr::size_type _Mysizt;
; 544  : 
; 545  : 	ios_base::iostate _State = ios_base::goodbit;
; 546  : 	_Mysizt _Size = _Str.size();
; 547  : 	_Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
; 548  : 			? 0 : (_Mysizt)_Ostr.width() - _Size;

  0002b	8b 7d 08	 mov	 edi, DWORD PTR __Ostr$[ebp]
  0002e	8b 07		 mov	 eax, DWORD PTR [edi]
  00030	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00033	8b 5d 0c	 mov	 ebx, DWORD PTR __Str$[ebp]
  00036	8b 44 3a 18	 mov	 eax, DWORD PTR [edx+edi+24]
  0003a	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  0003d	33 f6		 xor	 esi, esi
  0003f	3b c6		 cmp	 eax, esi
  00041	89 75 ec	 mov	 DWORD PTR __State$[ebp], esi
  00044	89 4d e4	 mov	 DWORD PTR __Size$[ebp], ecx
  00047	7e 0b		 jle	 SHORT $LN21@operator@61
  00049	3b c1		 cmp	 eax, ecx
  0004b	76 07		 jbe	 SHORT $LN21@operator@61
  0004d	2b c1		 sub	 eax, ecx
  0004f	89 45 e8	 mov	 DWORD PTR __Pad$[ebp], eax
  00052	eb 03		 jmp	 SHORT $LN22@operator@61
$LN21@operator@61:
  00054	89 75 e8	 mov	 DWORD PTR __Pad$[ebp], esi
$LN22@operator@61:

; 549  : 	const typename _Myos::sentry _Ok(_Ostr);

  00057	57		 push	 edi
  00058	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0005b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry

; 550  : 
; 551  : 	if (!_Ok)

  00060	80 7d e0 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00064	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  00067	75 0c		 jne	 SHORT $LN18@operator@61

; 552  : 		_State |= ios_base::badbit;

  00069	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4

; 553  : 	else

  00070	e9 60 01 00 00	 jmp	 $LN26@operator@61
$LN18@operator@61:

; 554  : 		{	// state okay, insert characters
; 555  : 	_TRY_IO_BEGIN
; 556  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00075	8b 07		 mov	 eax, DWORD PTR [edi]
  00077	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007a	8b 44 39 10	 mov	 eax, DWORD PTR [ecx+edi+16]
  0007e	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00083	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00087	83 f8 40	 cmp	 eax, 64			; 00000040H
  0008a	74 65		 je	 SHORT $LL173@operator@61
  0008c	8d 64 24 00	 npad	 4
$LL14@operator@61:

; 557  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00090	83 7d e8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00094	76 50		 jbe	 SHORT $LN12@operator@61

; 558  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 559  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00096	8b 17		 mov	 edx, DWORD PTR [edi]
  00098	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009b	8b 4c 38 28	 mov	 ecx, DWORD PTR [eax+edi+40]
  0009f	0f b7 54 38 30	 movzx	 edx, WORD PTR [eax+edi+48]
  000a4	03 c7		 add	 eax, edi
  000a6	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  000a9	83 38 00	 cmp	 DWORD PTR [eax], 0
  000ac	74 1c		 je	 SHORT $LN46@operator@61
  000ae	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  000b1	83 38 00	 cmp	 DWORD PTR [eax], 0
  000b4	7e 14		 jle	 SHORT $LN46@operator@61
  000b6	ff 08		 dec	 DWORD PTR [eax]
  000b8	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000bb	8b 01		 mov	 eax, DWORD PTR [ecx]
  000bd	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
  000c0	89 31		 mov	 DWORD PTR [ecx], esi
  000c2	66 89 10	 mov	 WORD PTR [eax], dx
  000c5	0f b7 c2	 movzx	 eax, dx
  000c8	eb 0e		 jmp	 SHORT $LN47@operator@61
$LN46@operator@61:
  000ca	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cc	52		 push	 edx
  000cd	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000d0	ff d2		 call	 edx
  000d2	0f b7 c0	 movzx	 eax, ax
  000d5	0f b7 c0	 movzx	 eax, ax
$LN47@operator@61:
  000d8	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  000dd	66 3b c8	 cmp	 cx, ax
  000e0	75 29		 jne	 SHORT $LN13@operator@61

; 560  : 					{	// insertion failed, quit
; 561  : 					_State |= ios_base::badbit;

  000e2	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN12@operator@61:

; 562  : 					break;
; 563  : 					}
; 564  : 
; 565  : 		if (_State == ios_base::goodbit)

  000e6	33 f6		 xor	 esi, esi
  000e8	39 75 ec	 cmp	 DWORD PTR __State$[ebp], esi
  000eb	0f 85 d5 00 00
	00		 jne	 $LN2@operator@61
$LL173@operator@61:

; 566  : 			for (_Mysizt _Count = 0; _Count < _Size; ++_Count)

  000f1	3b 75 e4	 cmp	 esi, DWORD PTR __Size$[ebp]
  000f4	73 6a		 jae	 SHORT $LN7@operator@61

; 567  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 568  : 					_Ostr.rdbuf()->sputc(_Str[_Count])))

  000f6	3b 73 14	 cmp	 esi, DWORD PTR [ebx+20]
  000f9	76 05		 jbe	 SHORT $LN62@operator@61
  000fb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN62@operator@61:
  00100	83 7b 18 08	 cmp	 DWORD PTR [ebx+24], 8
  00104	72 0a		 jb	 SHORT $LN67@operator@61
  00106	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00109	eb 08		 jmp	 SHORT $LN68@operator@61
$LN13@operator@61:

; 557  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  0010b	ff 4d e8	 dec	 DWORD PTR __Pad$[ebp]
  0010e	eb 80		 jmp	 SHORT $LL14@operator@61

; 567  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 568  : 					_Ostr.rdbuf()->sputc(_Str[_Count])))

$LN67@operator@61:
  00110	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN68@operator@61:
  00113	8b 17		 mov	 edx, DWORD PTR [edi]
  00115	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00118	8b 4c 39 28	 mov	 ecx, DWORD PTR [ecx+edi+40]
  0011c	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0011f	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00122	0f b7 04 70	 movzx	 eax, WORD PTR [eax+esi*2]
  00126	74 1c		 je	 SHORT $LN73@operator@61
  00128	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0012b	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0012e	7e 14		 jle	 SHORT $LN73@operator@61
  00130	ff 0a		 dec	 DWORD PTR [edx]
  00132	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00135	8b 11		 mov	 edx, DWORD PTR [ecx]
  00137	8d 5a 02	 lea	 ebx, DWORD PTR [edx+2]
  0013a	89 19		 mov	 DWORD PTR [ecx], ebx
  0013c	8b 5d 0c	 mov	 ebx, DWORD PTR __Str$[ebp]
  0013f	66 89 02	 mov	 WORD PTR [edx], ax
  00142	eb 0b		 jmp	 SHORT $LN181@operator@61
$LN73@operator@61:
  00144	8b 11		 mov	 edx, DWORD PTR [ecx]
  00146	50		 push	 eax
  00147	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0014a	ff d0		 call	 eax
  0014c	0f b7 c0	 movzx	 eax, ax
$LN181@operator@61:
  0014f	0f b7 c0	 movzx	 eax, ax
  00152	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00157	66 3b c8	 cmp	 cx, ax
  0015a	75 44		 jne	 SHORT $LN8@operator@61

; 569  : 					{	// insertion failed, quit
; 570  : 					_State |= ios_base::badbit;

  0015c	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN7@operator@61:

; 571  : 					break;
; 572  : 					}
; 573  : 
; 574  : 		if (_State == ios_base::goodbit)

  00160	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  00164	75 60		 jne	 SHORT $LN2@operator@61
$LL4@operator@61:

; 575  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00166	83 7d e8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  0016a	76 5a		 jbe	 SHORT $LN2@operator@61

; 576  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 577  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  0016c	8b 17		 mov	 edx, DWORD PTR [edi]
  0016e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00171	8b 4c 38 28	 mov	 ecx, DWORD PTR [eax+edi+40]
  00175	0f b7 54 38 30	 movzx	 edx, WORD PTR [eax+edi+48]
  0017a	03 c7		 add	 eax, edi
  0017c	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0017f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00182	74 22		 je	 SHORT $LN95@operator@61
  00184	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00187	83 38 00	 cmp	 DWORD PTR [eax], 0
  0018a	7e 1a		 jle	 SHORT $LN95@operator@61
  0018c	ff 08		 dec	 DWORD PTR [eax]
  0018e	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00191	8b 01		 mov	 eax, DWORD PTR [ecx]
  00193	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
  00196	89 31		 mov	 DWORD PTR [ecx], esi
  00198	66 89 10	 mov	 WORD PTR [eax], dx
  0019b	0f b7 c2	 movzx	 eax, dx
  0019e	eb 14		 jmp	 SHORT $LN96@operator@61
$LN8@operator@61:

; 566  : 			for (_Mysizt _Count = 0; _Count < _Size; ++_Count)

  001a0	46		 inc	 esi
  001a1	e9 4b ff ff ff	 jmp	 $LL173@operator@61

; 576  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 577  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

$LN95@operator@61:
  001a6	8b 01		 mov	 eax, DWORD PTR [ecx]
  001a8	52		 push	 edx
  001a9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001ac	ff d2		 call	 edx
  001ae	0f b7 c0	 movzx	 eax, ax
  001b1	0f b7 c0	 movzx	 eax, ax
$LN96@operator@61:
  001b4	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  001b9	66 3b c8	 cmp	 cx, ax
  001bc	0f 85 82 00 00
	00		 jne	 $LN3@operator@61

; 578  : 					{	// insertion failed, quit
; 579  : 					_State |= ios_base::badbit;

  001c2	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN2@operator@61:

; 580  : 					break;
; 581  : 					}
; 582  : 		_Ostr.width(0);

  001c6	8b 07		 mov	 eax, DWORD PTR [edi]
  001c8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001cb	03 c7		 add	 eax, edi
  001cd	33 c9		 xor	 ecx, ecx
  001cf	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  001d2	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
$LN26@operator@61:

; 584  : 		}
; 585  : 
; 586  : 	_Ostr.setstate(_State);

  001d5	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001d7	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  001da	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  001dd	03 cf		 add	 ecx, edi
  001df	85 d2		 test	 edx, edx
  001e1	74 16		 je	 SHORT $LN152@operator@61
  001e3	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001e6	0b c2		 or	 eax, edx
  001e8	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  001ec	75 03		 jne	 SHORT $LN154@operator@61
  001ee	83 c8 04	 or	 eax, 4
$LN154@operator@61:
  001f1	6a 00		 push	 0
  001f3	50		 push	 eax
  001f4	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN152@operator@61:

; 587  : 	return (_Ostr);

  001f9	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 6
  00200	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00205	84 c0		 test	 al, al
  00207	75 08		 jne	 SHORT $LN156@operator@61
  00209	8b 4d dc	 mov	 ecx, DWORD PTR __Ok$[ebp]
  0020c	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN156@operator@61:
  00211	8b 45 dc	 mov	 eax, DWORD PTR __Ok$[ebp]
  00214	8b 10		 mov	 edx, DWORD PTR [eax]
  00216	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00219	8b 44 01 28	 mov	 eax, DWORD PTR [ecx+eax+40]
  0021d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00224	85 c0		 test	 eax, eax
  00226	74 08		 je	 SHORT $LN167@operator@61
  00228	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0022b	e8 00 00 00 00	 call	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN167@operator@61:
  00230	8b c7		 mov	 eax, edi

; 588  : 	}

  00232	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00235	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0023c	59		 pop	 ecx
  0023d	5f		 pop	 edi
  0023e	5e		 pop	 esi
  0023f	5b		 pop	 ebx
  00240	8b e5		 mov	 esp, ebp
  00242	5d		 pop	 ebp
  00243	c3		 ret	 0
$LN3@operator@61:

; 575  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00244	ff 4d e8	 dec	 DWORD PTR __Pad$[ebp]
  00247	e9 1a ff ff ff	 jmp	 $LL4@operator@61
__catch$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$0:

; 583  : 		_CATCH_IO_(_Ostr)

  0024c	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0024f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00251	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00254	03 c1		 add	 eax, ecx
  00256	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00259	83 c9 04	 or	 ecx, 4
  0025c	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00260	75 03		 jne	 SHORT $LN120@operator@61
  00262	83 c9 04	 or	 ecx, 4
$LN120@operator@61:
  00265	83 e1 17	 and	 ecx, 23			; 00000017H
  00268	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0026b	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  0026e	75 15		 jne	 SHORT $LN129@operator@61
  00270	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00277	b8 00 00 00 00	 mov	 eax, $LN27@operator@61
  0027c	c3		 ret	 0
$LN27@operator@61:
  0027d	8b 7d 08	 mov	 edi, DWORD PTR __Ostr$[ebp]
  00280	e9 50 ff ff ff	 jmp	 $LN26@operator@61
$LN129@operator@61:
  00285	6a 00		 push	 0
  00287	6a 00		 push	 0
  00289	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN180@operator@61:
  0028e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$2:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$9:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ENDP ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$GetContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@01@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@01@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z
_TEXT	SEGMENT
$T189432 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@01@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >, COMDAT

; 69   : 		{

  00000	51		 push	 ecx

; 70   : 			return ContainerForward <T> (container);

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR _container$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	50		 push	 eax
  0000b	8b ce		 mov	 ecx, esi
  0000d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T189432[esp+12], 0
  00015	e8 00 00 00 00	 call	 ??0?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@QAE@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi

; 71   : 		}

  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??$GetContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@01@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z
_TEXT	SEGMENT
$T189437 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >, COMDAT

; 69   : 		{

  00000	51		 push	 ecx

; 70   : 			return ContainerForward <T> (container);

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR _container$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	50		 push	 eax
  0000b	8b ce		 mov	 ecx, esi
  0000d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T189437[esp+12], 0
  00015	e8 00 00 00 00	 call	 ??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi

; 71   : 		}

  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$9 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$9
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -32						; size = 8
__Pad$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 741  : 	{	// insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 742  : 	typedef char _Elem;
; 743  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 744  : 	ios_base::iostate _State = ios_base::goodbit;
; 745  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0002e	33 db		 xor	 ebx, ebx
  00030	89 5d ec	 mov	 DWORD PTR __State$[ebp], ebx
  00033	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL134@operator@62:
  00036	8a 08		 mov	 cl, BYTE PTR [eax]
  00038	40		 inc	 eax
  00039	84 c9		 test	 cl, cl
  0003b	75 f9		 jne	 SHORT $LL134@operator@62

; 746  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 747  : 		? 0 : _Ostr.width() - _Count;

  0003d	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00040	2b c2		 sub	 eax, edx
  00042	8b f8		 mov	 edi, eax
  00044	8b 06		 mov	 eax, DWORD PTR [esi]
  00046	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00049	8b 44 31 18	 mov	 eax, DWORD PTR [ecx+esi+24]
  0004d	3b c3		 cmp	 eax, ebx
  0004f	7e 0d		 jle	 SHORT $LN17@operator@62
  00051	3b c7		 cmp	 eax, edi
  00053	7e 09		 jle	 SHORT $LN17@operator@62
  00055	2b c7		 sub	 eax, edi
  00057	8b d8		 mov	 ebx, eax
  00059	89 45 e8	 mov	 DWORD PTR __Pad$[ebp], eax
  0005c	eb 03		 jmp	 SHORT $LN18@operator@62
$LN17@operator@62:
  0005e	89 5d e8	 mov	 DWORD PTR __Pad$[ebp], ebx
$LN18@operator@62:

; 748  : 	const typename _Myos::sentry _Ok(_Ostr);

  00061	56		 push	 esi
  00062	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00065	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 749  : 
; 750  : 	if (!_Ok)

  0006a	80 7d e4 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00075	75 0a		 jne	 SHORT $LN14@operator@62

; 751  : 		_State |= ios_base::badbit;

  00077	ba 04 00 00 00	 mov	 edx, 4

; 752  : 	else

  0007c	e9 9b 00 00 00	 jmp	 $LN22@operator@62
$LN14@operator@62:

; 753  : 		{	// state okay, insert
; 754  : 		_TRY_IO_BEGIN
; 755  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00081	8b 16		 mov	 edx, DWORD PTR [esi]
  00083	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00086	8b 44 30 10	 mov	 eax, DWORD PTR [eax+esi+16]
  0008a	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0008f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00093	83 f8 40	 cmp	 eax, 64			; 00000040H
  00096	74 53		 je	 SHORT $LN132@operator@62
$LL10@operator@62:

; 756  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00098	85 db		 test	 ebx, ebx
  0009a	7e 49		 jle	 SHORT $LN8@operator@62

; 757  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 758  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  0009c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0009e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a1	8a 44 32 30	 mov	 al, BYTE PTR [edx+esi+48]
  000a5	8d 0c 32	 lea	 ecx, DWORD PTR [edx+esi]
  000a8	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  000ab	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000ae	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000b1	74 1e		 je	 SHORT $LN42@operator@62
  000b3	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000b6	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000b9	7e 16		 jle	 SHORT $LN42@operator@62
  000bb	ff 0a		 dec	 DWORD PTR [edx]
  000bd	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000c0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c2	8d 5a 01	 lea	 ebx, DWORD PTR [edx+1]
  000c5	89 19		 mov	 DWORD PTR [ecx], ebx
  000c7	8b 5d e8	 mov	 ebx, DWORD PTR __Pad$[ebp]
  000ca	88 02		 mov	 BYTE PTR [edx], al
  000cc	0f b6 c0	 movzx	 eax, al
  000cf	eb 0b		 jmp	 SHORT $LN43@operator@62
$LN42@operator@62:
  000d1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	50		 push	 eax
  000d7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000da	ff d0		 call	 eax
$LN43@operator@62:
  000dc	83 f8 ff	 cmp	 eax, -1
  000df	75 7f		 jne	 SHORT $LN9@operator@62

; 759  : 					{	// insertion failed, quit
; 760  : 					_State |= ios_base::badbit;

  000e1	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN8@operator@62:

; 761  : 					break;
; 762  : 					}
; 763  : 
; 764  : 		if (_State == ios_base::goodbit
; 765  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  000e5	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  000e9	75 1f		 jne	 SHORT $LN2@operator@62
$LN132@operator@62:
  000eb	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ed	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000f0	8b 4c 32 28	 mov	 ecx, DWORD PTR [edx+esi+40]
  000f4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f6	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  000f9	57		 push	 edi
  000fa	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  000fd	ff d2		 call	 edx
  000ff	3b c7		 cmp	 eax, edi
  00101	74 6d		 je	 SHORT $LL133@operator@62

; 766  : 			_State |= ios_base::badbit;

  00103	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN2@operator@62:

; 775  : 					}
; 776  : 		_Ostr.width(0);

  0010a	8b 06		 mov	 eax, DWORD PTR [esi]
  0010c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010f	03 c6		 add	 eax, esi
  00111	33 c9		 xor	 ecx, ecx
  00113	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00116	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
$LN141@operator@62:
  00119	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
$LN22@operator@62:

; 778  : 		}
; 779  : 
; 780  : 	_Ostr.setstate(_State);

  0011c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0011e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00121	03 ce		 add	 ecx, esi
  00123	85 d2		 test	 edx, edx
  00125	74 16		 je	 SHORT $LN125@operator@62
  00127	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0012a	0b c2		 or	 eax, edx
  0012c	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00130	75 03		 jne	 SHORT $LN127@operator@62
  00132	83 c8 04	 or	 eax, 4
$LN127@operator@62:
  00135	6a 00		 push	 0
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN125@operator@62:

; 781  : 	return (_Ostr);

  0013d	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00140	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00147	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0014c	8b c6		 mov	 eax, esi

; 782  : 	}

  0014e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00151	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00158	59		 pop	 ecx
  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi
  0015b	5b		 pop	 ebx
  0015c	8b e5		 mov	 esp, ebp
  0015e	5d		 pop	 ebp
  0015f	c3		 ret	 0
$LN9@operator@62:

; 756  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00160	4b		 dec	 ebx
  00161	89 5d e8	 mov	 DWORD PTR __Pad$[ebp], ebx
  00164	e9 2f ff ff ff	 jmp	 $LL10@operator@62
  00169	8d a4 24 00 00
	00 00		 npad	 7
$LL133@operator@62:

; 767  : 
; 768  : 		if (_State == ios_base::goodbit)
; 769  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00170	85 db		 test	 ebx, ebx
  00172	7e 96		 jle	 SHORT $LN2@operator@62

; 770  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 771  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00174	8b 06		 mov	 eax, DWORD PTR [esi]
  00176	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00179	8a 44 31 30	 mov	 al, BYTE PTR [ecx+esi+48]
  0017d	03 ce		 add	 ecx, esi
  0017f	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00182	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00185	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00188	74 1b		 je	 SHORT $LN68@operator@62
  0018a	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0018d	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00190	7e 13		 jle	 SHORT $LN68@operator@62
  00192	ff 0a		 dec	 DWORD PTR [edx]
  00194	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00197	8b 11		 mov	 edx, DWORD PTR [ecx]
  00199	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
  0019c	89 39		 mov	 DWORD PTR [ecx], edi
  0019e	88 02		 mov	 BYTE PTR [edx], al
  001a0	0f b6 c0	 movzx	 eax, al
  001a3	eb 0b		 jmp	 SHORT $LN69@operator@62
$LN68@operator@62:
  001a5	8b 11		 mov	 edx, DWORD PTR [ecx]
  001a7	0f b6 c0	 movzx	 eax, al
  001aa	50		 push	 eax
  001ab	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001ae	ff d0		 call	 eax
$LN69@operator@62:
  001b0	83 f8 ff	 cmp	 eax, -1
  001b3	75 09		 jne	 SHORT $LN3@operator@62

; 772  : 					{	// insertion failed, quit
; 773  : 					_State |= ios_base::badbit;

  001b5	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4

; 774  : 					break;

  001b9	e9 4c ff ff ff	 jmp	 $LN2@operator@62
$LN3@operator@62:

; 767  : 
; 768  : 		if (_State == ios_base::goodbit)
; 769  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  001be	4b		 dec	 ebx
  001bf	eb af		 jmp	 SHORT $LL133@operator@62
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 777  : 		_CATCH_IO_(_Ostr)

  001c1	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  001c4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001c9	03 c1		 add	 eax, ecx
  001cb	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001ce	83 c9 04	 or	 ecx, 4
  001d1	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  001d5	75 03		 jne	 SHORT $LN93@operator@62
  001d7	83 c9 04	 or	 ecx, 4
$LN93@operator@62:
  001da	83 e1 17	 and	 ecx, 23			; 00000017H
  001dd	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  001e0	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  001e3	75 15		 jne	 SHORT $LN102@operator@62
  001e5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  001ec	b8 00 00 00 00	 mov	 eax, $LN23@operator@62
  001f1	c3		 ret	 0
$LN23@operator@62:
  001f2	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  001f5	e9 1f ff ff ff	 jmp	 $LN141@operator@62
$LN102@operator@62:
  001fa	6a 00		 push	 0
  001fc	6a 00		 push	 0
  001fe	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN140@operator@62:
  00203	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
PUBLIC	??$insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::insert<std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??$insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
__First$ = 16						; size = 8
$T189750 = 24						; size = 1
__Last$ = 24						; size = 8
??$insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::insert<std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 731  : 		{	// insert [_First, _Last) at _Where
; 732  : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));

  00000	8b 44 24 14	 mov	 eax, DWORD PTR $T189750[esp-4]
  00004	8b 54 24 18	 mov	 edx, DWORD PTR __Last$[esp]
  00008	50		 push	 eax
  00009	8b 44 24 18	 mov	 eax, DWORD PTR __Last$[esp]
  0000d	52		 push	 edx
  0000e	8b 54 24 18	 mov	 edx, DWORD PTR __First$[esp+8]
  00012	50		 push	 eax
  00013	8b 44 24 18	 mov	 eax, DWORD PTR __First$[esp+8]
  00017	52		 push	 edx
  00018	8b 54 24 18	 mov	 edx, DWORD PTR __Where$[esp+16]
  0001c	50		 push	 eax
  0001d	8b 44 24 18	 mov	 eax, DWORD PTR __Where$[esp+16]
  00021	52		 push	 edx
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Insert<std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1> >

; 733  : 		}

  00028	c2 18 00	 ret	 24			; 00000018H
??$insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::insert<std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAEPAXI@Z PROC ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAE@XZ
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@36
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@36:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAEPAXI@Z ENDP ; CipherShed::ForEach::ContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@stdext@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@stdext@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@Z
_TEXT	SEGMENT
$T189836 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$189840 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@stdext@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$189840[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T189836[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T189836[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >

; 865  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Unchecked_uninitialized_move@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@stdext@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUSecurityTokenKeyfile@CipherShed@@PAU12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Move_backward_opt@PAUSecurityTokenKeyfile@CipherShed@@PAU12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T189879 = -8						; size = 1
$T189880 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
$T189881 = 16						; size = 1
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUSecurityTokenKeyfile@CipherShed@@PAU12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

  00000	83 ec 08	 sub	 esp, 8

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

  00003	8b 54 24 14	 mov	 edx, DWORD PTR $T189881[esp+4]
  00007	53		 push	 ebx
  00008	8b 5c 24 10	 mov	 ebx, DWORD PTR __First$[esp+8]
  0000c	56		 push	 esi
  0000d	8b 74 24 18	 mov	 esi, DWORD PTR __Last$[esp+12]
  00011	57		 push	 edi
  00012	8b 7c 24 20	 mov	 edi, DWORD PTR __Dest$[esp+16]
  00016	32 c0		 xor	 al, al
  00018	88 44 24 10	 mov	 BYTE PTR $T189880[esp+20], al
  0001c	8b 4c 24 10	 mov	 ecx, DWORD PTR $T189880[esp+20]
  00020	88 44 24 0c	 mov	 BYTE PTR $T189879[esp+20], al
  00024	8b 44 24 0c	 mov	 eax, DWORD PTR $T189879[esp+20]
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	52		 push	 edx
  0002b	57		 push	 edi
  0002c	56		 push	 esi
  0002d	53		 push	 ebx
  0002e	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUSecurityTokenKeyfile@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::forward_iterator_tag>
  00033	2b f3		 sub	 esi, ebx
  00035	83 c4 18	 add	 esp, 24			; 00000018H
  00038	c1 fe 07	 sar	 esi, 7
  0003b	c1 e6 07	 shl	 esi, 7
  0003e	8b c7		 mov	 eax, edi
  00040	5f		 pop	 edi
  00041	2b c6		 sub	 eax, esi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx

; 2755 : 	}

  00045	83 c4 08	 add	 esp, 8
  00048	c3		 ret	 0
??$_Move_backward_opt@PAUSecurityTokenKeyfile@CipherShed@@PAU12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ ; CipherShed::SecurityToken::CloseAllSessions
;	COMDAT xdata$x
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
xdata$x	SEGMENT
__catchsym$?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ$0
__tryblocktable$?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ$6
__unwindtable$?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ$3
__ehfuncinfo$?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
xdata$x	ENDS
;	COMDAT ?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ
_TEXT	SEGMENT
_$S1$123543 = -88					; size = 56
_p$123573 = -32						; size = 12
_forEachContainer$123441 = -20				; size = 4
__$EHRec$ = -16						; size = 16
?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ PROC	; CipherShed::SecurityToken::CloseAllSessions, COMDAT

; 89   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 90   : 		if (!Initialized)

  0002b	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?Initialized@SecurityToken@CipherShed@@1_NA, 0 ; CipherShed::SecurityToken::Initialized
  00032	0f 84 c5 00 00
	00		 je	 $LN51@CloseAllSe

; 91   : 			return;
; 92   : 
; 93   : 		typedef pair <CK_SLOT_ID, Pkcs11Session> SessionMapPair;
; 94   : 
; 95   : 		foreach (SessionMapPair p, Sessions)

  00038	8d 45 a8	 lea	 eax, DWORD PTR _$S1$123543[ebp]
  0003b	68 00 00 00 00	 push	 OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@01@ABV?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > > >
  00046	83 c4 08	 add	 esp, 8
  00049	8d 75 a8	 lea	 esi, DWORD PTR _$S1$123543[ebp]
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00053	89 75 ec	 mov	 DWORD PTR _forEachContainer$123441[ebp], esi
  00056	b3 01		 mov	 bl, 1
$LL7@CloseAllSe:
  00058	8b 16		 mov	 edx, DWORD PTR [esi]
  0005a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0005d	8b ce		 mov	 ecx, esi
  0005f	ff d0		 call	 eax
  00061	84 c0		 test	 al, al
  00063	0f 84 85 00 00
	00		 je	 $LN5@CloseAllSe
  00069	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0006c	85 c0		 test	 eax, eax
  0006e	75 0c		 jne	 SHORT $LN56@CloseAllSe
  00070	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00075	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00078	85 c0		 test	 eax, eax
  0007a	74 04		 je	 SHORT $LN32@CloseAllSe
$LN56@CloseAllSe:
  0007c	8b 00		 mov	 eax, DWORD PTR [eax]
  0007e	eb 02		 jmp	 SHORT $LN33@CloseAllSe
$LN32@CloseAllSe:
  00080	33 c0		 xor	 eax, eax
$LN33@CloseAllSe:
  00082	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00085	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00088	75 05		 jne	 SHORT $LN24@CloseAllSe
  0008a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN24@CloseAllSe:
  0008f	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00092	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00095	83 c0 0c	 add	 eax, 12			; 0000000cH
  00098	89 55 e0	 mov	 DWORD PTR _p$123573[ebp], edx
  0009b	eb 03 8d 49 00	 npad	 5
$LL40@CloseAllSe:
  000a0	80 7e 05 00	 cmp	 BYTE PTR [esi+5], 0
  000a4	0f 94 c0	 sete	 al
  000a7	88 46 05	 mov	 BYTE PTR [esi+5], al
  000aa	84 c0		 test	 al, al
  000ac	74 32		 je	 SHORT $LN6@CloseAllSe

; 96   : 		{
; 97   : 			try
; 98   : 			{
; 99   : 				CloseSession (p.first);

  000ae	8b 45 e0	 mov	 eax, DWORD PTR _p$123573[ebp]
  000b1	50		 push	 eax
  000b2	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  000b5	e8 00 00 00 00	 call	 ?CloseSession@SecurityToken@CipherShed@@KAXK@Z ; CipherShed::SecurityToken::CloseSession
  000ba	83 c4 04	 add	 esp, 4
  000bd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 91   : 			return;
; 92   : 
; 93   : 		typedef pair <CK_SLOT_ID, Pkcs11Session> SessionMapPair;
; 94   : 
; 95   : 		foreach (SessionMapPair p, Sessions)

  000c4	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  000c7	eb d7		 jmp	 SHORT $LL40@CloseAllSe
__catch$?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ$0:

; 100  : 			}
; 101  : 			catch (...) { }

  000c9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000d0	b8 00 00 00 00	 mov	 eax, $LN57@CloseAllSe
  000d5	c3		 ret	 0
$LN57@CloseAllSe:
  000d6	8b 75 ec	 mov	 esi, DWORD PTR _forEachContainer$123441[ebp]
  000d9	b3 01		 mov	 bl, 1
  000db	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  000de	eb c0		 jmp	 SHORT $LL40@CloseAllSe
$LN6@CloseAllSe:

; 91   : 			return;
; 92   : 
; 93   : 		typedef pair <CK_SLOT_ID, Pkcs11Session> SessionMapPair;
; 94   : 
; 95   : 		foreach (SessionMapPair p, Sessions)

  000e0	8b 16		 mov	 edx, DWORD PTR [esi]
  000e2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000e5	8b ce		 mov	 ecx, esi
  000e7	ff d0		 call	 eax
  000e9	e9 6a ff ff ff	 jmp	 $LL7@CloseAllSe
$LN5@CloseAllSe:

; 102  : 		}

  000ee	8d 4d b0	 lea	 ecx, DWORD PTR _$S1$123543[ebp+8]
  000f1	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  000f8	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
$LN51@CloseAllSe:

; 103  : 	}

  000fd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00100	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00107	59		 pop	 ecx
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ$2:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR _$S1$123543[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ$3:
  00008	8d 4d a8	 lea	 ecx, DWORD PTR _$S1$123543[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ ENDP	; CipherShed::SecurityToken::CloseAllSessions
PUBLIC	??_C@_0CK@JPLECCJP@CipherShed?3?3SecurityToken?3?3GetOb@ ; `string'
PUBLIC	?GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z ; CipherShed::SecurityToken::GetObjects
;	COMDAT ??_C@_0CK@JPLECCJP@CipherShed?3?3SecurityToken?3?3GetOb@
; File c:\home\public\desktop\projects\ciphershed.build\src\common\exception.h
CONST	SEGMENT
??_C@_0CK@JPLECCJP@CipherShed?3?3SecurityToken?3?3GetOb@ DB 'CipherShed::'
	DB	'SecurityToken::GetObjects:320', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z$0
__ehfuncinfo$?GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
xdata$x	ENDS
;	COMDAT ?GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z
_TEXT	SEGMENT
_objectCount$ = -68					; size = 4
_object$125964 = -64					; size = 4
$T190001 = -60						; size = 4
_finally331$ = -56					; size = 4
$T189996 = -56						; size = 8
$T189994 = -56						; size = 8
_findTemplate$ = -48					; size = 12
$T189998 = -36						; size = 24
$T189997 = -36						; size = 24
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_slotId$ = 12						; size = 4
_objectClass$ = 16					; size = 4
?GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z PROC ; CipherShed::SecurityToken::GetObjects, COMDAT

; 318  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 38	 sub	 esp, 56			; 00000038H
  00011	53		 push	 ebx
  00012	55		 push	 ebp
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c4		 xor	 eax, esp
  0001c	50		 push	 eax
  0001d	8d 44 24 4c	 lea	 eax, DWORD PTR __$EHRec$[esp+88]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 319  : 		if (Sessions.find (slotId) == Sessions.end())

  00027	8d 44 24 60	 lea	 eax, DWORD PTR _slotId$[esp+84]
  0002b	50		 push	 eax
  0002c	8d 4c 24 24	 lea	 ecx, DWORD PTR $T189994[esp+92]
  00030	33 db		 xor	 ebx, ebx
  00032	89 5c 24 20	 mov	 DWORD PTR $T190001[esp+92], ebx
  00036	8b 2d 18 00 00
	00		 mov	 ebp, DWORD PTR ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A+24
  0003c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A
  00042	51		 push	 ecx
  00043	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  00048	89 5c 24 5c	 mov	 DWORD PTR __$EHRec$[esp+104], ebx
  0004c	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::find
  00051	8b f0		 mov	 esi, eax
  00053	8b 06		 mov	 eax, DWORD PTR [esi]
  00055	3b c3		 cmp	 eax, ebx
  00057	74 04		 je	 SHORT $LN27@GetObjects
  00059	3b c7		 cmp	 eax, edi
  0005b	74 05		 je	 SHORT $LN28@GetObjects
$LN27@GetObjects:
  0005d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@GetObjects:
  00062	39 6e 04	 cmp	 DWORD PTR [esi+4], ebp
  00065	75 1f		 jne	 SHORT $LN6@GetObjects

; 320  : 			throw ParameterIncorrect (SRC_POS);

  00067	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  0006c	8d 54 24 24	 lea	 edx, DWORD PTR $T189996[esp+92]
  00070	52		 push	 edx
  00071	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR $T189996[esp+96], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00079	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR $T189996[esp+100], OFFSET ??_C@_0CK@JPLECCJP@CipherShed?3?3SecurityToken?3?3GetOb@
  00081	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN6@GetObjects:

; 321  : 
; 322  : 		CK_ATTRIBUTE findTemplate;
; 323  : 		findTemplate.type = CKA_CLASS;
; 324  : 		findTemplate.pValue = &objectClass;
; 325  : 		findTemplate.ulValueLen = sizeof (objectClass);
; 326  : 
; 327  : 		CK_RV status = Pkcs11Functions->C_FindObjectsInit (Sessions[slotId].Handle, &findTemplate, 1);

  00086	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  0008c	8d 4c 24 60	 lea	 ecx, DWORD PTR _slotId$[esp+84]
  00090	8d 44 24 64	 lea	 eax, DWORD PTR _objectClass$[esp+84]
  00094	51		 push	 ecx
  00095	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  0009a	89 5c 24 2c	 mov	 DWORD PTR _findTemplate$[esp+92], ebx
  0009e	89 44 24 30	 mov	 DWORD PTR _findTemplate$[esp+96], eax
  000a2	c7 44 24 34 04
	00 00 00	 mov	 DWORD PTR _findTemplate$[esp+100], 4
  000aa	83 c6 6a	 add	 esi, 106		; 0000006aH
  000ad	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
  000b2	8b 00		 mov	 eax, DWORD PTR [eax]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	bd 01 00 00 00	 mov	 ebp, 1
  000bb	55		 push	 ebp
  000bc	8d 54 24 2c	 lea	 edx, DWORD PTR _findTemplate$[esp+92]
  000c0	52		 push	 edx
  000c1	50		 push	 eax
  000c2	ff d1		 call	 ecx
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 328  : 		if (status != CKR_OK)

  000c7	3b c3		 cmp	 eax, ebx
  000c9	74 1f		 je	 SHORT $LN5@GetObjects

; 329  : 			throw Pkcs11Exception (status);

  000cb	68 00 00 00 00	 push	 OFFSET __TI2?AUPkcs11Exception@CipherShed@@
  000d0	8d 54 24 38	 lea	 edx, DWORD PTR $T189997[esp+92]
  000d4	52		 push	 edx
  000d5	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR $T189997[esp+96], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  000dd	89 44 24 40	 mov	 DWORD PTR $T189997[esp+100], eax
  000e1	88 5c 24 44	 mov	 BYTE PTR $T189997[esp+104], bl
  000e5	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@GetObjects:

; 330  : 
; 331  : 		finally_do_arg (CK_SLOT_ID, slotId, { Pkcs11Functions->C_FindObjectsFinal (Sessions[finally_arg].Handle); });

  000ea	8b 44 24 60	 mov	 eax, DWORD PTR _slotId$[esp+84]
  000ee	89 44 24 20	 mov	 DWORD PTR _finally331$[esp+88], eax

; 332  : 
; 333  : 		CK_ULONG objectCount;	
; 334  : 		vector <CK_OBJECT_HANDLE> objects;

  000f2	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  000f6	8b cf		 mov	 ecx, edi
  000f8	89 6c 24 54	 mov	 DWORD PTR __$EHRec$[esp+96], ebp
  000fc	e8 00 00 00 00	 call	 ??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >

; 347  : 		}
; 348  : 
; 349  : 		return objects;

  00101	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  00107	8d 4c 24 60	 lea	 ecx, DWORD PTR _slotId$[esp+84]
  0010b	51		 push	 ecx
  0010c	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  00111	89 6c 24 20	 mov	 DWORD PTR $T190001[esp+92], ebp
  00115	83 c6 6e	 add	 esi, 110		; 0000006eH
  00118	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
  0011d	8d 54 24 14	 lea	 edx, DWORD PTR _objectCount$[esp+88]
  00121	52		 push	 edx
  00122	8b 10		 mov	 edx, DWORD PTR [eax]
  00124	8b 06		 mov	 eax, DWORD PTR [esi]
  00126	55		 push	 ebp
  00127	8d 4c 24 20	 lea	 ecx, DWORD PTR _object$125964[esp+96]
  0012b	51		 push	 ecx
  0012c	52		 push	 edx
  0012d	ff d0		 call	 eax
  0012f	83 c4 10	 add	 esp, 16			; 00000010H
  00132	3b c3		 cmp	 eax, ebx
  00134	75 43		 jne	 SHORT $LN51@GetObjects
$LL4@GetObjects:

; 342  : 
; 343  : 			if (objectCount != 1)

  00136	39 6c 24 14	 cmp	 DWORD PTR _objectCount$[esp+88], ebp
  0013a	75 5c		 jne	 SHORT $LN52@GetObjects

; 344  : 				break;
; 345  : 
; 346  : 			objects.push_back (object);

  0013c	8d 4c 24 18	 lea	 ecx, DWORD PTR _object$125964[esp+88]
  00140	51		 push	 ecx
  00141	8b cf		 mov	 ecx, edi
  00143	e8 00 00 00 00	 call	 ?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEXABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::push_back
  00148	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  0014e	8d 54 24 60	 lea	 edx, DWORD PTR _slotId$[esp+84]
  00152	52		 push	 edx
  00153	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  00158	83 c6 6e	 add	 esi, 110		; 0000006eH
  0015b	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
  00160	8b 00		 mov	 eax, DWORD PTR [eax]
  00162	8d 4c 24 14	 lea	 ecx, DWORD PTR _objectCount$[esp+88]
  00166	51		 push	 ecx
  00167	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00169	55		 push	 ebp
  0016a	8d 54 24 20	 lea	 edx, DWORD PTR _object$125964[esp+96]
  0016e	52		 push	 edx
  0016f	50		 push	 eax
  00170	ff d1		 call	 ecx
  00172	83 c4 10	 add	 esp, 16			; 00000010H
  00175	3b c3		 cmp	 eax, ebx
  00177	74 bd		 je	 SHORT $LL4@GetObjects
$LN51@GetObjects:

; 335  : 
; 336  : 		while (true)
; 337  : 		{
; 338  : 			CK_OBJECT_HANDLE object;
; 339  : 			CK_RV status = Pkcs11Functions->C_FindObjects (Sessions[slotId].Handle, &object, 1, &objectCount);
; 340  : 			if (status != CKR_OK)
; 341  : 				throw Pkcs11Exception (status);

  00179	68 00 00 00 00	 push	 OFFSET __TI2?AUPkcs11Exception@CipherShed@@
  0017e	8d 54 24 38	 lea	 edx, DWORD PTR $T189998[esp+92]
  00182	52		 push	 edx
  00183	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR $T189998[esp+96], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  0018b	89 44 24 40	 mov	 DWORD PTR $T189998[esp+100], eax
  0018f	88 5c 24 44	 mov	 BYTE PTR $T189998[esp+104], bl
  00193	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN52@GetObjects:

; 347  : 		}
; 348  : 
; 349  : 		return objects;

  00198	8d 44 24 20	 lea	 eax, DWORD PTR _finally331$[esp+88]
  0019c	50		 push	 eax
  0019d	88 5c 24 58	 mov	 BYTE PTR __$EHRec$[esp+100], bl
  001a1	e8 00 00 00 00	 call	 ??1Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@XZ ; `CipherShed::SecurityToken::GetObjects'::`6'::Finally331::~Finally331
  001a6	8b c7		 mov	 eax, edi

; 350  : 	}

  001a8	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$EHRec$[esp+88]
  001ac	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b3	59		 pop	 ecx
  001b4	5f		 pop	 edi
  001b5	5e		 pop	 esi
  001b6	5d		 pop	 ebp
  001b7	5b		 pop	 ebx
  001b8	83 c4 44	 add	 esp, 68			; 00000044H
  001bb	c3		 ret	 0
$LN55@GetObjects:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z$0:
  00000	8d 45 c8	 lea	 eax, DWORD PTR _finally331$[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??1Finally331@?5??GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z@QAE@XZ ; `CipherShed::SecurityToken::GetObjects'::`6'::Finally331::~Finally331
  00009	c3		 ret	 0
__unwindfunclet$?GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z$1:
  0000a	8b 45 c4	 mov	 eax, DWORD PTR $T190001[ebp]
  0000d	83 e0 01	 and	 eax, 1
  00010	0f 84 0c 00 00
	00		 je	 $LN11@GetObjects
  00016	83 65 c4 fe	 and	 DWORD PTR $T190001[ebp], -2 ; fffffffeH
  0001a	8b 4d 04	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp-4]
  0001d	e9 00 00 00 00	 jmp	 ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
$LN11@GetObjects:
  00022	c3		 ret	 0
__ehhandler$?GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z:
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 42 b8	 lea	 eax, DWORD PTR [edx-72]
  0002a	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z ENDP ; CipherShed::SecurityToken::GetObjects
PUBLIC	?Login@SecurityToken@CipherShed@@KAXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::SecurityToken::Login
; Function compile flags: /Ogtpy
;	COMDAT ?Login@SecurityToken@CipherShed@@KAXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T190121 = -32						; size = 8
$T190123 = -24						; size = 24
_slotId$ = 8						; size = 4
_pin$ = 12						; size = 4
?Login@SecurityToken@CipherShed@@KAXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CipherShed::SecurityToken::Login, COMDAT

; 417  : 	{

  00000	83 ec 20	 sub	 esp, 32			; 00000020H
  00003	53		 push	 ebx

; 418  : 		if (Sessions.find (slotId) == Sessions.end())

  00004	8b 1d 18 00 00
	00		 mov	 ebx, DWORD PTR ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A+24
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A
  00012	8d 44 24 30	 lea	 eax, DWORD PTR _slotId$[esp+40]
  00016	50		 push	 eax
  00017	8d 4c 24 10	 lea	 ecx, DWORD PTR $T190121[esp+48]
  0001b	51		 push	 ecx
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  00021	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::find
  00026	8b f0		 mov	 esi, eax
  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	85 c0		 test	 eax, eax
  0002c	74 04		 je	 SHORT $LN22@Login
  0002e	3b c7		 cmp	 eax, edi
  00030	74 05		 je	 SHORT $LN23@Login
$LN22@Login:
  00032	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN23@Login:
  00037	39 5e 04	 cmp	 DWORD PTR [esi+4], ebx
  0003a	75 0f		 jne	 SHORT $LN4@Login

; 419  : 			OpenSession (slotId);

  0003c	8b 54 24 30	 mov	 edx, DWORD PTR _slotId$[esp+40]
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 ?OpenSession@SecurityToken@CipherShed@@KAXK@Z ; CipherShed::SecurityToken::OpenSession
  00046	83 c4 04	 add	 esp, 4
  00049	eb 15		 jmp	 SHORT $LN2@Login
$LN4@Login:

; 420  : 		else if (Sessions[slotId].UserLoggedIn)

  0004b	8d 44 24 30	 lea	 eax, DWORD PTR _slotId$[esp+40]
  0004f	50		 push	 eax
  00050	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  00055	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
  0005a	80 78 04 00	 cmp	 BYTE PTR [eax+4], 0
  0005e	75 72		 jne	 SHORT $LN5@Login
$LN2@Login:

; 421  : 			return;
; 422  : 
; 423  : 		CK_RV status = Pkcs11Functions->C_Login (Sessions[slotId].Handle, CKU_USER, (CK_CHAR_PTR) pin.c_str(), pin.size());

  00060	8b 7c 24 34	 mov	 edi, DWORD PTR _pin$[esp+40]
  00064	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  00068	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  0006b	72 05		 jb	 SHORT $LN36@Login
  0006d	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  00070	eb 03		 jmp	 SHORT $LN37@Login
$LN36@Login:
  00072	83 c7 04	 add	 edi, 4
$LN37@Login:
  00075	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  0007b	8d 4c 24 30	 lea	 ecx, DWORD PTR _slotId$[esp+40]
  0007f	51		 push	 ecx
  00080	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  00085	83 c6 4a	 add	 esi, 74			; 0000004aH
  00088	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
  0008d	8b 10		 mov	 edx, DWORD PTR [eax]
  0008f	8b 06		 mov	 eax, DWORD PTR [esi]
  00091	53		 push	 ebx
  00092	57		 push	 edi
  00093	6a 01		 push	 1
  00095	52		 push	 edx
  00096	ff d0		 call	 eax
  00098	83 c4 10	 add	 esp, 16			; 00000010H

; 424  : 
; 425  : 		if (status != CKR_OK)

  0009b	85 c0		 test	 eax, eax
  0009d	74 20		 je	 SHORT $LN1@Login

; 426  : 			throw Pkcs11Exception (status);

  0009f	68 00 00 00 00	 push	 OFFSET __TI2?AUPkcs11Exception@CipherShed@@
  000a4	8d 4c 24 18	 lea	 ecx, DWORD PTR $T190123[esp+48]
  000a8	51		 push	 ecx
  000a9	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T190123[esp+52], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  000b1	89 44 24 20	 mov	 DWORD PTR $T190123[esp+56], eax
  000b5	c6 44 24 24 00	 mov	 BYTE PTR $T190123[esp+60], 0
  000ba	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@Login:

; 427  : 
; 428  : 		Sessions[slotId].UserLoggedIn = true;

  000bf	8d 54 24 30	 lea	 edx, DWORD PTR _slotId$[esp+40]
  000c3	52		 push	 edx
  000c4	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  000c9	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
  000ce	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
$LN5@Login:
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx

; 429  : 	}

  000d5	83 c4 20	 add	 esp, 32			; 00000020H
  000d8	c3		 ret	 0
$LN42@Login:
?Login@SecurityToken@CipherShed@@KAXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CipherShed::SecurityToken::Login
_TEXT	ENDS
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z DD 02H
	DD	02H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$10
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
_TEXT	SEGMENT
$T190234 = -48						; size = 8
$T190233 = -48						; size = 8
__Ok$ = -40						; size = 8
$T190249 = -32						; size = 1
$T190230 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 329  : 		{	// insert an unsigned long

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 330  : 		ios_base::iostate _State = ios_base::goodbit;

  00030	33 ff		 xor	 edi, edi

; 331  : 		const sentry _Ok(*this);

  00032	56		 push	 esi
  00033	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00036	33 db		 xor	 ebx, ebx
  00038	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
  0003b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00040	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 332  : 
; 333  : 		if (_Ok)

  00043	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00046	74 74		 je	 SHORT $LN12@operator@63

; 334  : 			{	// state okay, use facet to insert
; 335  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00048	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004d	8d 45 e4	 lea	 eax, DWORD PTR $T190230[ebp]
  00050	50		 push	 eax
  00051	03 ce		 add	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00058	50		 push	 eax
  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0005d	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00062	83 c4 04	 add	 esp, 4
  00065	8d 4d e4	 lea	 ecx, DWORD PTR $T190230[ebp]
  00068	8b f8		 mov	 edi, eax
  0006a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 336  : 
; 337  : 			_TRY_IO_BEGIN
; 338  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 339  : 				_Myios::fill(), (unsigned long)_Val).failed())

  0006f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00071	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00074	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00077	8d 0c 32	 lea	 ecx, DWORD PTR [edx+esi]
  0007a	8a 51 30	 mov	 dl, BYTE PTR [ecx+48]
  0007d	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00080	88 5d d0	 mov	 BYTE PTR $T190233[ebp], bl
  00083	8b 5d 08	 mov	 ebx, DWORD PTR __Val$[ebp]
  00086	53		 push	 ebx
  00087	88 55 e0	 mov	 BYTE PTR $T190249[ebp], dl
  0008a	8b 5d e0	 mov	 ebx, DWORD PTR $T190249[ebp]
  0008d	8b 17		 mov	 edx, DWORD PTR [edi]
  0008f	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00092	53		 push	 ebx
  00093	03 c6		 add	 eax, esi
  00095	50		 push	 eax
  00096	8b 45 d0	 mov	 eax, DWORD PTR $T190233[ebp]
  00099	51		 push	 ecx
  0009a	50		 push	 eax
  0009b	8d 4d d0	 lea	 ecx, DWORD PTR $T190234[ebp]
  0009e	51		 push	 ecx
  0009f	8b cf		 mov	 ecx, edi
  000a1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000a5	ff d2		 call	 edx
  000a7	80 7d d0 00	 cmp	 BYTE PTR $T190234[ebp], 0

; 340  : 				_State |= ios_base::badbit;

  000ab	bf 04 00 00 00	 mov	 edi, 4
  000b0	75 03		 jne	 SHORT $LN1@operator@63
  000b2	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
$LN1@operator@63:
  000b5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN12@operator@63:

; 342  : 			}
; 343  : 
; 344  : 		_Myios::setstate(_State);

  000bc	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000be	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c1	03 ce		 add	 ecx, esi
  000c3	85 ff		 test	 edi, edi
  000c5	74 16		 je	 SHORT $LN65@operator@63
  000c7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ca	0b c7		 or	 eax, edi
  000cc	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  000d0	75 03		 jne	 SHORT $LN67@operator@63
  000d2	83 c8 04	 or	 eax, 4
$LN67@operator@63:
  000d5	6a 00		 push	 0
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN65@operator@63:

; 345  : 		return (*this);

  000dd	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000e7	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000ec	8b c6		 mov	 eax, esi

; 346  : 		}

  000ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f8	59		 pop	 ecx
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 04 00	 ret	 4
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$0:

; 341  : 			_CATCH_IO_END

  00102	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	8b 01		 mov	 eax, DWORD PTR [ecx]
  00107	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010a	03 c1		 add	 eax, ecx
  0010c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0010f	83 c9 04	 or	 ecx, 4
  00112	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00116	75 03		 jne	 SHORT $LN33@operator@63
  00118	83 c9 04	 or	 ecx, 4
$LN33@operator@63:
  0011b	83 e1 17	 and	 ecx, 23			; 00000017H
  0011e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00121	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  00124	75 15		 jne	 SHORT $LN42@operator@63
  00126	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0012d	b8 00 00 00 00	 mov	 eax, $LN13@operator@63
  00132	c3		 ret	 0
$LN13@operator@63:
  00133	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00136	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
  00139	eb 81		 jmp	 SHORT $LN12@operator@63
$LN42@operator@63:
  0013b	6a 00		 push	 0
  0013d	6a 00		 push	 0
  0013f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN73@operator@63:
  00144	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T190230[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z$0
__tryblocktable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z DD 02H
	DD	02H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z$10
__ehfuncinfo$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z
_TEXT	SEGMENT
$T190420 = -48						; size = 8
$T190419 = -48						; size = 8
__Ok$ = -40						; size = 8
$T190439 = -32						; size = 4
$T190416 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<, COMDAT
; _this$ = ecx

; 329  : 		{	// insert an unsigned long

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 330  : 		ios_base::iostate _State = ios_base::goodbit;

  00030	33 ff		 xor	 edi, edi

; 331  : 		const sentry _Ok(*this);

  00032	56		 push	 esi
  00033	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00036	33 db		 xor	 ebx, ebx
  00038	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
  0003b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
  00040	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 332  : 
; 333  : 		if (_Ok)

  00043	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00046	74 75		 je	 SHORT $LN12@operator@64

; 334  : 			{	// state okay, use facet to insert
; 335  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00048	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004d	8d 45 e4	 lea	 eax, DWORD PTR $T190416[ebp]
  00050	50		 push	 eax
  00051	03 ce		 add	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00058	50		 push	 eax
  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0005d	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >
  00062	83 c4 04	 add	 esp, 4
  00065	8d 4d e4	 lea	 ecx, DWORD PTR $T190416[ebp]
  00068	8b f8		 mov	 edi, eax
  0006a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 336  : 
; 337  : 			_TRY_IO_BEGIN
; 338  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 339  : 				_Myios::fill(), (unsigned long)_Val).failed())

  0006f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00071	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00074	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00077	8d 0c 32	 lea	 ecx, DWORD PTR [edx+esi]
  0007a	0f b7 51 30	 movzx	 edx, WORD PTR [ecx+48]
  0007e	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00081	89 4d e0	 mov	 DWORD PTR $T190439[ebp], ecx
  00084	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  00087	51		 push	 ecx
  00088	52		 push	 edx
  00089	8b 55 e0	 mov	 edx, DWORD PTR $T190439[ebp]
  0008c	03 c6		 add	 eax, esi
  0008e	50		 push	 eax
  0008f	88 5d d0	 mov	 BYTE PTR $T190419[ebp], bl
  00092	8b 45 d0	 mov	 eax, DWORD PTR $T190419[ebp]
  00095	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00097	52		 push	 edx
  00098	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  0009b	50		 push	 eax
  0009c	8d 4d d0	 lea	 ecx, DWORD PTR $T190420[ebp]
  0009f	51		 push	 ecx
  000a0	8b cf		 mov	 ecx, edi
  000a2	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000a6	ff d2		 call	 edx
  000a8	80 7d d0 00	 cmp	 BYTE PTR $T190420[ebp], 0

; 340  : 				_State |= ios_base::badbit;

  000ac	bf 04 00 00 00	 mov	 edi, 4
  000b1	75 03		 jne	 SHORT $LN1@operator@64
  000b3	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
$LN1@operator@64:
  000b6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN12@operator@64:

; 342  : 			}
; 343  : 
; 344  : 		_Myios::setstate(_State);

  000bd	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000bf	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c2	03 ce		 add	 ecx, esi
  000c4	85 ff		 test	 edi, edi
  000c6	74 16		 je	 SHORT $LN65@operator@64
  000c8	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000cb	0b c7		 or	 eax, edi
  000cd	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  000d1	75 03		 jne	 SHORT $LN67@operator@64
  000d3	83 c8 04	 or	 eax, 4
$LN67@operator@64:
  000d6	6a 00		 push	 0
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN65@operator@64:

; 345  : 		return (*this);

  000de	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000e8	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
  000ed	8b c6		 mov	 eax, esi

; 346  : 		}

  000ef	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f9	59		 pop	 ecx
  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 04 00	 ret	 4
__catch$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z$0:

; 341  : 			_CATCH_IO_END

  00103	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00106	8b 01		 mov	 eax, DWORD PTR [ecx]
  00108	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010b	03 c1		 add	 eax, ecx
  0010d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00110	83 c9 04	 or	 ecx, 4
  00113	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00117	75 03		 jne	 SHORT $LN33@operator@64
  00119	83 c9 04	 or	 ecx, 4
$LN33@operator@64:
  0011c	83 e1 17	 and	 ecx, 23			; 00000017H
  0011f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00122	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  00125	75 15		 jne	 SHORT $LN42@operator@64
  00127	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0012e	b8 00 00 00 00	 mov	 eax, $LN13@operator@64
  00133	c3		 ret	 0
$LN13@operator@64:
  00134	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00137	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
  0013a	eb 81		 jmp	 SHORT $LN12@operator@64
$LN42@operator@64:
  0013c	6a 00		 push	 0
  0013e	6a 00		 push	 0
  00140	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN73@operator@64:
  00145	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T190416[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<
PUBLIC	??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z$0
__tryblocktable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z DD 02H
	DD	02H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z$10
__ehfuncinfo$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z
_TEXT	SEGMENT
$T190605 = -48						; size = 8
__Ok$ = -40						; size = 8
$T190625 = -32						; size = 4
$T190602 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T190606 = 8						; size = 8
__Val$ = 8						; size = 8
??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<, COMDAT
; _this$ = ecx

; 370  : 		{	// insert an unsigned long long

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 371  : 		ios_base::iostate _State = ios_base::goodbit;

  00030	33 ff		 xor	 edi, edi

; 372  : 		const sentry _Ok(*this);

  00032	56		 push	 esi
  00033	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00036	33 db		 xor	 ebx, ebx
  00038	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
  0003b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
  00040	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 373  : 
; 374  : 		if (_Ok)

  00043	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00046	74 79		 je	 SHORT $LN12@operator@65

; 375  : 			{	// state okay, use facet to insert
; 376  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00048	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004d	8d 45 e4	 lea	 eax, DWORD PTR $T190602[ebp]
  00050	50		 push	 eax
  00051	03 ce		 add	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00058	50		 push	 eax
  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0005d	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >
  00062	83 c4 04	 add	 esp, 4
  00065	8d 4d e4	 lea	 ecx, DWORD PTR $T190602[ebp]
  00068	8b f8		 mov	 edi, eax
  0006a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 377  : 
; 378  : 			_TRY_IO_BEGIN
; 379  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 380  : 				_Myios::fill(), _Val).failed())

  0006f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00071	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00074	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00077	8d 0c 32	 lea	 ecx, DWORD PTR [edx+esi]
  0007a	0f b7 51 30	 movzx	 edx, WORD PTR [ecx+48]
  0007e	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00081	89 4d e0	 mov	 DWORD PTR $T190625[ebp], ecx
  00084	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp+4]
  00087	51		 push	 ecx
  00088	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  0008b	51		 push	 ecx
  0008c	52		 push	 edx
  0008d	8b 55 e0	 mov	 edx, DWORD PTR $T190625[ebp]
  00090	03 c6		 add	 eax, esi
  00092	50		 push	 eax
  00093	52		 push	 edx
  00094	88 5d d0	 mov	 BYTE PTR $T190605[ebp], bl
  00097	8b 45 d0	 mov	 eax, DWORD PTR $T190605[ebp]
  0009a	8b 1f		 mov	 ebx, DWORD PTR [edi]
  0009c	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  0009f	50		 push	 eax
  000a0	8d 4d 08	 lea	 ecx, DWORD PTR $T190606[ebp]
  000a3	51		 push	 ecx
  000a4	8b cf		 mov	 ecx, edi
  000a6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000aa	ff d2		 call	 edx
  000ac	80 7d 08 00	 cmp	 BYTE PTR $T190606[ebp], 0

; 381  : 				_State |= ios_base::badbit;

  000b0	bf 04 00 00 00	 mov	 edi, 4
  000b5	75 03		 jne	 SHORT $LN1@operator@65
  000b7	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
$LN1@operator@65:
  000ba	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN12@operator@65:

; 383  : 			}
; 384  : 
; 385  : 		_Myios::setstate(_State);

  000c1	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000c3	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c6	03 ce		 add	 ecx, esi
  000c8	85 ff		 test	 edi, edi
  000ca	74 16		 je	 SHORT $LN65@operator@65
  000cc	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000cf	0b c7		 or	 eax, edi
  000d1	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  000d5	75 03		 jne	 SHORT $LN67@operator@65
  000d7	83 c8 04	 or	 eax, 4
$LN67@operator@65:
  000da	6a 00		 push	 0
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN65@operator@65:

; 386  : 		return (*this);

  000e2	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000ec	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
  000f1	8b c6		 mov	 eax, esi

; 387  : 		}

  000f3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fd	59		 pop	 ecx
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c2 08 00	 ret	 8
__catch$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z$0:

; 382  : 			_CATCH_IO_END

  00107	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0010c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010f	03 c1		 add	 eax, ecx
  00111	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00114	83 c9 04	 or	 ecx, 4
  00117	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  0011b	75 03		 jne	 SHORT $LN33@operator@65
  0011d	83 c9 04	 or	 ecx, 4
$LN33@operator@65:
  00120	83 e1 17	 and	 ecx, 23			; 00000017H
  00123	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00126	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  00129	75 15		 jne	 SHORT $LN42@operator@65
  0012b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00132	b8 00 00 00 00	 mov	 eax, $LN13@operator@65
  00137	c3		 ret	 0
$LN13@operator@65:
  00138	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0013b	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
  0013e	eb 81		 jmp	 SHORT $LN12@operator@65
$LN42@operator@65:
  00140	6a 00		 push	 0
  00142	6a 00		 push	 0
  00144	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN73@operator@65:
  00149	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T190602[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<
PUBLIC	??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z$5
__unwindtable$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T190984 = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T191116 = 8						; size = 1
__Cat$191119 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d e8	 mov	 DWORD PTR _this$[ebp], edi
  00030	6a 04		 push	 4
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	33 c9		 xor	 ecx, ecx
  00039	83 c4 04	 add	 esp, 4
  0003c	3b c1		 cmp	 eax, ecx
  0003e	74 04		 je	 SHORT $LN19@vector@9
  00040	89 38		 mov	 DWORD PTR [eax], edi
  00042	eb 02		 jmp	 SHORT $LN20@vector@9
$LN19@vector@9:
  00044	33 c0		 xor	 eax, eax
$LN20@vector@9:
  00046	89 07		 mov	 DWORD PTR [edi], eax

; 501  : 		if (_Buy(_Right.size()))

  00048	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  0004b	8b 73 10	 mov	 esi, DWORD PTR [ebx+16]
  0004e	2b 73 0c	 sub	 esi, DWORD PTR [ebx+12]
  00051	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
  00054	c1 fe 07	 sar	 esi, 7
  00057	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx
  0005a	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0005d	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  00060	3b f1		 cmp	 esi, ecx
  00062	74 6a		 je	 SHORT $LN8@vector@9
  00064	81 fe ff ff ff
	01		 cmp	 esi, 33554431		; 01ffffffH
  0006a	76 05		 jbe	 SHORT $LN46@vector@9
  0006c	e8 00 00 00 00	 call	 ?_Xlen@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@KAXXZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Xlen
$LN46@vector@9:
  00071	51		 push	 ecx
  00072	56		 push	 esi
  00073	e8 00 00 00 00	 call	 ??$_Allocate@USecurityTokenKeyfile@CipherShed@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@IPAU12@@Z ; std::_Allocate<CipherShed::SecurityTokenKeyfile>
  00078	c1 e6 07	 shl	 esi, 7
  0007b	03 f0		 add	 esi, eax
  0007d	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00080	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00083	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 502  : 			_TRY_BEGIN
; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

  00086	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00089	83 c4 08	 add	 esp, 8
  0008c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00090	89 45 ec	 mov	 DWORD PTR $T190984[ebp], eax
  00093	39 43 0c	 cmp	 DWORD PTR [ebx+12], eax
  00096	76 05		 jbe	 SHORT $LN62@vector@9
  00098	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN62@vector@9:
  0009d	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]
  000a0	3b 73 10	 cmp	 esi, DWORD PTR [ebx+16]
  000a3	76 05		 jbe	 SHORT $LN76@vector@9
  000a5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN76@vector@9:
  000aa	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000ad	c6 45 08 00	 mov	 BYTE PTR $T191116[ebp], 0
  000b1	8b 4d 08	 mov	 ecx, DWORD PTR $T191116[ebp]
  000b4	8b 55 08	 mov	 edx, DWORD PTR __Cat$191119[ebp]
  000b7	51		 push	 ecx
  000b8	52		 push	 edx
  000b9	8b 55 ec	 mov	 edx, DWORD PTR $T190984[ebp]
  000bc	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  000bf	51		 push	 ecx
  000c0	50		 push	 eax
  000c1	52		 push	 edx
  000c2	56		 push	 esi
  000c3	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PBU12@0PAU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::SecurityTokenKeyfile const *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >
  000c8	83 c4 18	 add	 esp, 24			; 00000018H
  000cb	89 47 10	 mov	 DWORD PTR [edi+16], eax
$LN8@vector@9:

; 507  : 			_CATCH_END
; 508  : 		}

  000ce	8b c7		 mov	 eax, edi
  000d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000da	59		 pop	 ecx
  000db	5f		 pop	 edi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 04 00	 ret	 4
__catch$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

  000e4	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e7	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXXZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Tidy

; 506  : 			_RERAISE;

  000ec	6a 00		 push	 0
  000ee	6a 00		 push	 0
  000f0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN108@vector@9:
  000f5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
PUBLIC	??1?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::~vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Cat$191191 = -4					; size = 1
??1?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::~vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 559  : 		_Tidy();

  00004	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00007	85 c0		 test	 eax, eax
  00009	74 1f		 je	 SHORT $LN13@vector@10
  0000b	8b 4c 24 04	 mov	 ecx, DWORD PTR __Cat$191191[esp+8]
  0000f	51		 push	 ecx
  00010	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00013	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
  00016	52		 push	 edx
  00017	51		 push	 ecx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CipherShed::SecurityTokenKeyfile> >
  0001e	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00027	83 c4 14	 add	 esp, 20			; 00000014H
$LN13@vector@10:

; 560  : 		}

  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	50		 push	 eax
  0002d	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00034	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0003b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00042	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00047	83 c4 04	 add	 esp, 4
  0004a	5e		 pop	 esi
  0004b	59		 pop	 ecx
  0004c	c3		 ret	 0
??1?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::~vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
_TEXT	ENDS
PUBLIC	??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
PUBLIC	??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
	DD	04cH
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
	DD	054H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$1
__ehfuncinfo$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
_TEXT	SEGMENT
$T191220 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 484  : 		{	// construct empty character buffer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002b	33 c0		 xor	 eax, eax
  0002d	89 44 24 0c	 mov	 DWORD PTR $T191220[esp+32], eax
  00031	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+28], eax
  00035	74 20		 je	 SHORT $LN1@basic_stri@7
  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
  0003d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
  00044	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  0004b	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  0004f	c7 44 24 0c 01
	00 00 00	 mov	 DWORD PTR $T191220[esp+32], 1
$LN1@basic_stri@7:
  00057	50		 push	 eax
  00058	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  0005b	57		 push	 edi
  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
  00063	8b 06		 mov	 eax, DWORD PTR [esi]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00068	8b 54 24 24	 mov	 edx, DWORD PTR __Mode$[esp+28]
  0006c	c7 04 0e 00 00
	00 00		 mov	 DWORD PTR [esi+ecx], OFFSET ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00073	52		 push	 edx
  00074	8b cf		 mov	 ecx, edi
  00076	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 1
  0007e	e8 00 00 00 00	 call	 ??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 485  : 		}

  00083	8b c6		 mov	 eax, esi
  00085	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	83 c4 14	 add	 esp, 20			; 00000014H
  00096	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T191220[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_stri@7
  0000c	83 65 ec fe	 and	 DWORD PTR $T191220[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 54	 add	 ecx, 84			; 00000054H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_stri@7:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0002e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@ABV01@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@ABV01@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@ABV01@@Z$7
__unwindtable$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T191244 = -28						; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T191652 = 8						; size = 1
__Right$ = 8						; size = 4
??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@ABV01@@Z PROC ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >, COMDAT
; _this$ = ecx

; 467  : 		{	// construct list by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00030	6a 04		 push	 4
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	85 c0		 test	 eax, eax
  0003c	74 04		 je	 SHORT $LN28@list@4
  0003e	89 30		 mov	 DWORD PTR [eax], esi
  00040	eb 02		 jmp	 SHORT $LN29@list@4
$LN28@list@4:
  00042	33 c0		 xor	 eax, eax
$LN29@list@4:
  00044	89 06		 mov	 DWORD PTR [esi], eax
  00046	8b ce		 mov	 ecx, esi
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0004f	e8 00 00 00 00	 call	 ?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@XZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Buynode

; 468  : 		_TRY_BEGIN
; 469  : 		insert(begin(), _Right.begin(), _Right.end());

  00054	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00057	8b 3e		 mov	 edi, DWORD PTR [esi]
  00059	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0005c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00063	8b 10		 mov	 edx, DWORD PTR [eax]
  00065	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00068	8b 18		 mov	 ebx, DWORD PTR [eax]
  0006a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0006c	89 5d e8	 mov	 DWORD PTR $T191244[ebp+4], ebx
  0006f	8b 5d 08	 mov	 ebx, DWORD PTR $T191652[ebp]
  00072	53		 push	 ebx
  00073	50		 push	 eax
  00074	8b 45 e8	 mov	 eax, DWORD PTR $T191244[ebp+4]
  00077	51		 push	 ecx
  00078	50		 push	 eax
  00079	51		 push	 ecx
  0007a	52		 push	 edx
  0007b	57		 push	 edi
  0007c	8b ce		 mov	 ecx, esi
  0007e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00082	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Insert<std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Const_iterator<1> >

; 473  : 		_CATCH_END
; 474  : 		}

  00087	8b c6		 mov	 eax, esi
  00089	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00093	59		 pop	 ecx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
__catch$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@ABV01@@Z$0:

; 470  : 		_CATCH_ALL
; 471  : 		_Tidy();

  0009d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	e8 00 00 00 00	 call	 ?_Tidy@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXXZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Tidy

; 472  : 		_RERAISE;

  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN112@list@4:
  000ae	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_val@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ
__ehhandler$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	04cH
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	054H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1
__ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
$T191670 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 484  : 		{	// construct empty character buffer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002b	33 c0		 xor	 eax, eax
  0002d	89 44 24 0c	 mov	 DWORD PTR $T191670[esp+32], eax
  00031	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+28], eax
  00035	74 20		 je	 SHORT $LN1@basic_stri@8
  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0003d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00044	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  0004b	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  0004f	c7 44 24 0c 01
	00 00 00	 mov	 DWORD PTR $T191670[esp+32], 1
$LN1@basic_stri@8:
  00057	50		 push	 eax
  00058	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  0005b	57		 push	 edi
  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
  00063	8b 06		 mov	 eax, DWORD PTR [esi]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00068	8b 54 24 24	 mov	 edx, DWORD PTR __Mode$[esp+28]
  0006c	c7 04 0e 00 00
	00 00		 mov	 DWORD PTR [esi+ecx], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00073	52		 push	 edx
  00074	8b cf		 mov	 ecx, edi
  00076	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 1
  0007e	e8 00 00 00 00	 call	 ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >

; 485  : 		}

  00083	8b c6		 mov	 eax, esi
  00085	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	83 c4 14	 add	 esp, 20			; 00000014H
  00096	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T191670[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_stri@8
  0000c	83 65 ec fe	 and	 DWORD PTR $T191670[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 54	 add	 ecx, 84			; 00000054H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_stri@8:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0002e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Umove@PAUSecurityTokenKeyfile@CipherShed@@@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEPAUSecurityTokenKeyfile@CipherShed@@PAU23@00@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Umove<CipherShed::SecurityTokenKeyfile *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAUSecurityTokenKeyfile@CipherShed@@@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEPAUSecurityTokenKeyfile@CipherShed@@PAU23@00@Z
_TEXT	SEGMENT
$T191806 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$191810 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUSecurityTokenKeyfile@CipherShed@@@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEPAUSecurityTokenKeyfile@CipherShed@@PAU23@00@Z PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Umove<CipherShed::SecurityTokenKeyfile *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$191810[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T191806[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T191806[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 14	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 10	 mov	 edx, DWORD PTR __First$[esp+8]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 18	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >

; 1149 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUSecurityTokenKeyfile@CipherShed@@@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEPAUSecurityTokenKeyfile@CipherShed@@PAU23@00@Z ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Umove<CipherShed::SecurityTokenKeyfile *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUSecurityTokenKeyfile@CipherShed@@PAU12@@stdext@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00@Z ; stdext::_Unchecked_move_backward<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Unchecked_move_backward@PAUSecurityTokenKeyfile@CipherShed@@PAU12@@stdext@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00@Z
_TEXT	SEGMENT
$T191901 = -8						; size = 1
$T191902 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
$T191903 = 16						; size = 1
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUSecurityTokenKeyfile@CipherShed@@PAU12@@stdext@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00@Z PROC ; stdext::_Unchecked_move_backward<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

  00000	83 ec 08	 sub	 esp, 8

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

  00003	8b 54 24 14	 mov	 edx, DWORD PTR $T191903[esp+4]
  00007	53		 push	 ebx
  00008	8b 5c 24 10	 mov	 ebx, DWORD PTR __First$[esp+8]
  0000c	56		 push	 esi
  0000d	8b 74 24 18	 mov	 esi, DWORD PTR __Last$[esp+12]
  00011	57		 push	 edi
  00012	8b 7c 24 20	 mov	 edi, DWORD PTR __Dest$[esp+16]
  00016	32 c0		 xor	 al, al
  00018	88 44 24 10	 mov	 BYTE PTR $T191902[esp+20], al
  0001c	8b 4c 24 10	 mov	 ecx, DWORD PTR $T191902[esp+20]
  00020	88 44 24 0c	 mov	 BYTE PTR $T191901[esp+20], al
  00024	8b 44 24 0c	 mov	 eax, DWORD PTR $T191901[esp+20]
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	52		 push	 edx
  0002b	57		 push	 edi
  0002c	56		 push	 esi
  0002d	53		 push	 ebx
  0002e	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUSecurityTokenKeyfile@CipherShed@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::forward_iterator_tag>
  00033	2b f3		 sub	 esi, ebx
  00035	83 c4 18	 add	 esp, 24			; 00000018H
  00038	c1 fe 07	 sar	 esi, 7
  0003b	c1 e6 07	 shl	 esi, 7
  0003e	8b c7		 mov	 eax, edi
  00040	5f		 pop	 edi
  00041	2b c6		 sub	 eax, esi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx

; 3697 : 	}

  00045	83 c4 08	 add	 esp, 8
  00048	c3		 ret	 0
??$_Unchecked_move_backward@PAUSecurityTokenKeyfile@CipherShed@@PAU12@@stdext@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00@Z ENDP ; stdext::_Unchecked_move_backward<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *>
_TEXT	ENDS
PUBLIC	??_7?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::`vftable'
PUBLIC	??0?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >
PUBLIC	??_R4?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?IsNotEnd@?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::Next
EXTRN	??_E?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD 00H ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AU?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$vector@USecurityTokenKeyfile@C'
	DB	'ipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@st'
	DB	'd@@@std@@@ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ DD 00H ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ DD FLAT:??_R4?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
xdata$x	ENDS
;	COMDAT ??0?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	55		 push	 ebp
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 14	 mov	 DWORD PTR _this$[esp+36], esi
  0002b	33 db		 xor	 ebx, ebx
  0002d	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00031	88 5e 05	 mov	 BYTE PTR [esi+5], bl
  00034	8b 44 24 28	 mov	 eax, DWORD PTR _container$[esp+32]
  00038	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0003b	50		 push	 eax
  0003c	8b cf		 mov	 ecx, edi
  0003e	89 5c 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], ebx
  00042	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
  00048	e8 00 00 00 00	 call	 ??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@ABV01@@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
  0004d	8b 6f 10	 mov	 ebp, DWORD PTR [edi+16]
  00050	89 5e 20	 mov	 DWORD PTR [esi+32], ebx
  00053	39 6f 0c	 cmp	 DWORD PTR [edi+12], ebp
  00056	77 05		 ja	 SHORT $LN9@ContainerF@3
  00058	3b 6f 10	 cmp	 ebp, DWORD PTR [edi+16]
  0005b	76 05		 jbe	 SHORT $LN10@ContainerF@3
$LN9@ContainerF@3:
  0005d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN10@ContainerF@3:
  00062	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00064	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00067	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0006a	8b 6f 0c	 mov	 ebp, DWORD PTR [edi+12]
  0006d	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00070	39 6f 0c	 cmp	 DWORD PTR [edi+12], ebp
  00073	77 05		 ja	 SHORT $LN23@ContainerF@3
  00075	3b 6f 10	 cmp	 ebp, DWORD PTR [edi+16]
  00078	76 05		 jbe	 SHORT $LN24@ContainerF@3
$LN23@ContainerF@3:
  0007a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN24@ContainerF@3:
  0007f	8b 17		 mov	 edx, DWORD PTR [edi]
  00081	89 56 28	 mov	 DWORD PTR [esi+40], edx
  00084	89 6e 2c	 mov	 DWORD PTR [esi+44], ebp
  00087	8b c6		 mov	 eax, esi
  00089	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	5b		 pop	 ebx
  00099	83 c4 10	 add	 esp, 16			; 00000010H
  0009c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >
PUBLIC	??E?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator++, COMDAT
; _this$ = ecx

; 115  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 116  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN13@operator@66
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 117  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN9@operator@66
$LN13@operator@66:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN10@operator@66
$LN9@operator@66:
  00018	33 c0		 xor	 eax, eax
$LN10@operator@66:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 05		 jb	 SHORT $LN14@operator@66
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN14@operator@66:

; 118  : 
; 119  :  #if _HAS_ITERATOR_DEBUGGING
; 120  : 		if (this->_Mycont == 0
; 121  : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 122  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 123  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 124  : 
; 125  : 		++_Myptr;

  00027	83 6e 04 80	 sub	 DWORD PTR [esi+4], -128	; ffffff80H

; 126  : 		return (*this);

  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 127  : 		}

  0002e	c3		 ret	 0
??E?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN1@operator@67
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN2@operator@67
$LN1@operator@67:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN2@operator@67:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 212  : 		}

  00026	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator==
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
_TEXT	ENDS
;	COMDAT ?Next@?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00006	85 c0		 test	 eax, eax
  00008	75 0c		 jne	 SHORT $LN15@Next@3
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN11@Next@3
$LN15@Next@3:
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	eb 02		 jmp	 SHORT $LN12@Next@3
$LN11@Next@3:
  0001a	33 c0		 xor	 eax, eax
$LN12@Next@3:
  0001c	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0001f	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00022	72 05		 jb	 SHORT $LN16@Next@3
  00024	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN16@Next@3:
  00029	83 6e 2c 80	 sub	 DWORD PTR [esi+44], -128 ; ffffff80H
  0002d	5e		 pop	 esi
  0002e	c3		 ret	 0
?Next@?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::Next
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator!=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 216  : 		return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN3@operator@68
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN4@operator@68
$LN3@operator@68:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN4@operator@68:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 217  : 		}

  00026	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::operator!=
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
_TEXT	ENDS
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00007	74 21		 je	 SHORT $LN3@IsNotEnd@4
  00009	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0000c	85 c0		 test	 eax, eax
  0000e	74 05		 je	 SHORT $LN7@IsNotEnd@4
  00010	3b 46 20	 cmp	 eax, DWORD PTR [esi+32]
  00013	74 05		 je	 SHORT $LN8@IsNotEnd@4
$LN7@IsNotEnd@4:
  00015	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@IsNotEnd@4:
  0001a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001d	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00020	74 08		 je	 SHORT $LN3@IsNotEnd@4
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
$LN3@IsNotEnd@4:
  0002a	32 c0		 xor	 al, al
  0002c	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::IsNotEnd
_TEXT	ENDS
PUBLIC	??_C@_1BM@IPMKACB@?$AAt?$AAo?$AAk?$AAe?$AAn?$AA?3?$AA?1?$AA?1?$AAs?$AAl?$AAo?$AAt?$AA?1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@HIAFDIDB@?$AA?1?$AAf?$AAi?$AAl?$AAe?$AA?1?$AA?$AA@ ; `string'
PUBLIC	??BSecurityTokenKeyfile@CipherShed@@QBE?AUSecurityTokenKeyfilePath@1@XZ ; CipherShed::SecurityTokenKeyfile::operator CipherShed::SecurityTokenKeyfilePath
;	COMDAT ??_C@_1BM@IPMKACB@?$AAt?$AAo?$AAk?$AAe?$AAn?$AA?3?$AA?1?$AA?1?$AAs?$AAl?$AAo?$AAt?$AA?1?$AA?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_1BM@IPMKACB@?$AAt?$AAo?$AAk?$AAe?$AAn?$AA?3?$AA?1?$AA?1?$AAs?$AAl?$AAo?$AAt?$AA?1?$AA?$AA@ DB 't'
	DB	00H, 'o', 00H, 'k', 00H, 'e', 00H, 'n', 00H, ':', 00H, '/', 00H
	DB	'/', 00H, 's', 00H, 'l', 00H, 'o', 00H, 't', 00H, '/', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@HIAFDIDB@?$AA?1?$AAf?$AAi?$AAl?$AAe?$AA?1?$AA?$AA@
CONST	SEGMENT
??_C@_1O@HIAFDIDB@?$AA?1?$AAf?$AAi?$AAl?$AAe?$AA?1?$AA?$AA@ DB '/', 00H, 'f'
	DB	00H, 'i', 00H, 'l', 00H, 'e', 00H, '/', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??BSecurityTokenKeyfile@CipherShed@@QBE?AUSecurityTokenKeyfilePath@1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??BSecurityTokenKeyfile@CipherShed@@QBE?AUSecurityTokenKeyfilePath@1@XZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$??BSecurityTokenKeyfile@CipherShed@@QBE?AUSecurityTokenKeyfilePath@1@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$??BSecurityTokenKeyfile@CipherShed@@QBE?AUSecurityTokenKeyfilePath@1@XZ$1
__ehfuncinfo$??BSecurityTokenKeyfile@CipherShed@@QBE?AUSecurityTokenKeyfilePath@1@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??BSecurityTokenKeyfile@CipherShed@@QBE?AUSecurityTokenKeyfilePath@1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
xdata$x	ENDS
;	COMDAT ??BSecurityTokenKeyfile@CipherShed@@QBE?AUSecurityTokenKeyfilePath@1@XZ
_TEXT	SEGMENT
$T192149 = -180						; size = 4
$T192145 = -176						; size = 28
_path$ = -148						; size = 136
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
??BSecurityTokenKeyfile@CipherShed@@QBE?AUSecurityTokenKeyfilePath@1@XZ PROC ; CipherShed::SecurityTokenKeyfile::operator CipherShed::SecurityTokenKeyfilePath, COMDAT
; _this$ = ecx

; 60   : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??BSecurityTokenKeyfile@CipherShed@@QBE?AUSecurityTokenKeyfilePath@1@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c4		 xor	 eax, esp
  0001d	50		 push	 eax
  0001e	8d 84 24 b4 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+192]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx

; 61   : 		wstringstream path;

  0002d	6a 01		 push	 1
  0002f	33 db		 xor	 ebx, ebx
  00031	6a 03		 push	 3
  00033	8d 4c 24 34	 lea	 ecx, DWORD PTR _path$[esp+200]
  00037	89 5c 24 14	 mov	 DWORD PTR $T192149[esp+200], ebx
  0003b	e8 00 00 00 00	 call	 ??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 62   : 		path << TC_SECURITY_TOKEN_KEYFILE_URL_PREFIX TC_SECURITY_TOKEN_KEYFILE_URL_SLOT L"/" << SlotId << L"/" TC_SECURITY_TOKEN_KEYFILE_URL_FILE L"/" << Id;

  00040	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  00043	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00046	50		 push	 eax
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_1O@HIAFDIDB@?$AA?1?$AAf?$AAi?$AAl?$AAe?$AA?1?$AA?$AA@
  0004c	51		 push	 ecx
  0004d	8d 54 24 40	 lea	 edx, DWORD PTR _path$[esp+212]
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@IPMKACB@?$AAt?$AAo?$AAk?$AAe?$AAn?$AA?3?$AA?1?$AA?1?$AAs?$AAl?$AAo?$AAt?$AA?1?$AA?$AA@
  00056	52		 push	 edx
  00057	c7 84 24 d0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+220], 1
  00062	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
  00067	83 c4 08	 add	 esp, 8
  0006a	8b c8		 mov	 ecx, eax
  0006c	e8 00 00 00 00	 call	 ??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
  00077	83 c4 08	 add	 esp, 8
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00080	83 c4 08	 add	 esp, 8

; 63   : 		return path.str();

  00083	8d 44 24 10	 lea	 eax, DWORD PTR $T192145[esp+192]
  00087	50		 push	 eax
  00088	8d 4c 24 30	 lea	 ecx, DWORD PTR _path$[esp+196]
  0008c	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
  00091	8b b4 24 c4 00
	00 00		 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+188]
  00098	6a ff		 push	 -1
  0009a	33 c9		 xor	 ecx, ecx
  0009c	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  000a3	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  000a6	53		 push	 ebx
  000a7	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  000ab	50		 push	 eax
  000ac	8b ce		 mov	 ecx, esi
  000ae	c6 84 24 c8 00
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+212], 2
  000b6	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  000bb	83 7c 24 28 08	 cmp	 DWORD PTR $T192145[esp+216], 8
  000c0	c7 44 24 0c 01
	00 00 00	 mov	 DWORD PTR $T192149[esp+192], 1
  000c8	72 0d		 jb	 SHORT $LN58@SecurityTo@4
  000ca	8b 54 24 14	 mov	 edx, DWORD PTR $T192145[esp+196]
  000ce	52		 push	 edx
  000cf	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d4	83 c4 04	 add	 esp, 4
$LN58@SecurityTo@4:
  000d7	33 c0		 xor	 eax, eax
  000d9	8d 8c 24 80 00
	00 00		 lea	 ecx, DWORD PTR _path$[esp+276]
  000e0	c7 44 24 28 07
	00 00 00	 mov	 DWORD PTR $T192145[esp+216], 7
  000e8	89 5c 24 24	 mov	 DWORD PTR $T192145[esp+212], ebx
  000ec	66 89 44 24 14	 mov	 WORD PTR $T192145[esp+196], ax
  000f1	88 9c 24 bc 00
	00 00		 mov	 BYTE PTR __$EHRec$[esp+200], bl
  000f8	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000fd	8d 8c 24 80 00
	00 00		 lea	 ecx, DWORD PTR _path$[esp+276]
  00104	51		 push	 ecx
  00105	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _path$[esp+280], OFFSET ??_7ios_base@std@@6B@
  00110	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00115	83 c4 04	 add	 esp, 4
  00118	8b c6		 mov	 eax, esi

; 64   : 	}

  0011a	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+192]
  00121	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00128	59		 pop	 ecx
  00129	5e		 pop	 esi
  0012a	5b		 pop	 ebx
  0012b	81 c4 b4 00 00
	00		 add	 esp, 180		; 000000b4H
  00131	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??BSecurityTokenKeyfile@CipherShed@@QBE?AUSecurityTokenKeyfilePath@1@XZ$0:
  00000	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
__unwindfunclet$??BSecurityTokenKeyfile@CipherShed@@QBE?AUSecurityTokenKeyfilePath@1@XZ$1:
  0000b	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T192145[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??BSecurityTokenKeyfile@CipherShed@@QBE?AUSecurityTokenKeyfilePath@1@XZ$2:
  00016	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR $T192149[ebp]
  0001c	83 e0 01	 and	 eax, 1
  0001f	0f 84 0f 00 00
	00		 je	 $LN8@SecurityTo@4
  00025	83 a5 4c ff ff
	ff fe		 and	 DWORD PTR $T192149[ebp], -2 ; fffffffeH
  0002c	8b 4d 04	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp-4]
  0002f	e9 00 00 00 00	 jmp	 ??1SecurityTokenKeyfilePath@CipherShed@@QAE@XZ
$LN8@SecurityTo@4:
  00034	c3		 ret	 0
__ehhandler$??BSecurityTokenKeyfile@CipherShed@@QBE?AUSecurityTokenKeyfilePath@1@XZ:
  00035	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00039	8d 82 50 ff ff
	ff		 lea	 eax, DWORD PTR [edx-176]
  0003f	8b 8a 4c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-180]
  00045	33 c8		 xor	 ecx, eax
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??BSecurityTokenKeyfile@CipherShed@@QBE?AUSecurityTokenKeyfilePath@1@XZ
  00051	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??BSecurityTokenKeyfile@CipherShed@@QBE?AUSecurityTokenKeyfilePath@1@XZ ENDP ; CipherShed::SecurityTokenKeyfile::operator CipherShed::SecurityTokenKeyfilePath
PUBLIC	?CloseLibrary@SecurityToken@CipherShed@@SAXXZ	; CipherShed::SecurityToken::CloseLibrary
EXTRN	__imp__FreeLibrary@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?CloseLibrary@SecurityToken@CipherShed@@SAXXZ
_TEXT	SEGMENT
?CloseLibrary@SecurityToken@CipherShed@@SAXXZ PROC	; CipherShed::SecurityToken::CloseLibrary, COMDAT

; 74   : 		if (Initialized)

  00000	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?Initialized@SecurityToken@CipherShed@@1_NA, 0 ; CipherShed::SecurityToken::Initialized
  00007	74 28		 je	 SHORT $LN1@CloseLibra

; 75   : 		{
; 76   : 			CloseAllSessions();

  00009	e8 00 00 00 00	 call	 ?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ ; CipherShed::SecurityToken::CloseAllSessions

; 77   : 			Pkcs11Functions->C_Finalize (NULL_PTR);

  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  00013	8b 48 06	 mov	 ecx, DWORD PTR [eax+6]
  00016	6a 00		 push	 0
  00018	ff d1		 call	 ecx

; 78   : 
; 79   : #ifdef TC_WINDOWS
; 80   : 			FreeLibrary (Pkcs11LibraryHandle);

  0001a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?Pkcs11LibraryHandle@SecurityToken@CipherShed@@1PAUHINSTANCE__@@A ; CipherShed::SecurityToken::Pkcs11LibraryHandle
  00020	83 c4 04	 add	 esp, 4
  00023	52		 push	 edx
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeLibrary@4

; 81   : #else
; 82   : 			dlclose (Pkcs11LibraryHandle);
; 83   : #endif
; 84   : 			Initialized = false;

  0002a	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Initialized@SecurityToken@CipherShed@@1_NA, 0 ; CipherShed::SecurityToken::Initialized
$LN1@CloseLibra:

; 85   : 		}
; 86   : 	}

  00031	c3		 ret	 0
?CloseLibrary@SecurityToken@CipherShed@@SAXXZ ENDP	; CipherShed::SecurityToken::CloseLibrary
_TEXT	ENDS
PUBLIC	??1?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::~ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::~ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 ??1?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::~vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
  0000b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00011	5e		 pop	 esi
  00012	c3		 ret	 0
??1?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::~ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >
_TEXT	ENDS
PUBLIC	?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ ; CipherShed::SecurityToken::GetAvailableTokens
;	COMDAT xdata$x
; File c:\home\public\desktop\projects\ciphershed.build\src\common\exception.h
xdata$x	SEGMENT
__catchsym$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ$7 DD 08H
	DD	FLAT:??_R0?AUPkcs11Exception@CipherShed@@@8
	DD	050H
	DD	FLAT:__catch$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ$0
__tryblocktable$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ DD 04H
	DD	05H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ$7
__ehfuncinfo$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ$3
	DD	01H
	DD	FLAT:__unwindfunclet$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ$4
	DD	00H
	DD	FLAT:__unwindfunclet$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ$4
	DD	03H
	DD	00H
	DD	04H
	DD	FLAT:__unwindfunclet$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ$6
	DD	03H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
xdata$x	ENDS
;	COMDAT ?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ
_TEXT	SEGMENT
$T192468 = -132						; size = 28
$T192476 = -104						; size = 64
$T192477 = -40						; size = 24
__$EHRec$ = -16						; size = 16
_$S5$125874 = 0						; size = 52
$T192473 = 52						; size = 28
_e$125889 = 80						; size = 4
_slotId$125878 = 84					; size = 4
_forEachContainer$125871 = 88				; size = 4
$T192481 = 92						; size = 4
_unrecognizedTokenPresent$ = 99				; size = 1
___$ReturnUdt$ = 108					; size = 4
?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ PROC ; CipherShed::SecurityToken::GetAvailableTokens, COMDAT

; 252  : 	{

  00000	55		 push	 ebp
  00001	8d 6c 24 9c	 lea	 ebp, DWORD PTR [esp-100]
  00005	83 ec 64	 sub	 esp, 100		; 00000064H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 78	 sub	 esp, 120		; 00000078H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00030	33 ff		 xor	 edi, edi
  00032	89 7d 5c	 mov	 DWORD PTR $T192481[ebp], edi

; 253  : 		bool unrecognizedTokenPresent = false;
; 254  : 		list <SecurityTokenInfo> tokens;

  00035	8b 4d 6c	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00038	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  0003b	c6 45 63 00	 mov	 BYTE PTR _unrecognizedTokenPresent$[ebp], 0
  0003f	e8 00 00 00 00	 call	 ??0?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >

; 276  : 
; 277  : 		return tokens;

  00044	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR $T192468[ebp]
  0004a	be 01 00 00 00	 mov	 esi, 1
  0004f	50		 push	 eax
  00050	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  00053	89 75 5c	 mov	 DWORD PTR $T192481[ebp], esi
  00056	e8 00 00 00 00	 call	 ?GetTokenSlots@SecurityToken@CipherShed@@KA?AV?$list@KV?$allocator@K@std@@@std@@XZ ; CipherShed::SecurityToken::GetTokenSlots
  0005b	50		 push	 eax
  0005c	8d 4d 00	 lea	 ecx, DWORD PTR _$S5$125874[ebp]
  0005f	51		 push	 ecx
  00060	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  00063	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006b	8d 5d 00	 lea	 ebx, DWORD PTR _$S5$125874[ebp]
  0006e	89 5d 58	 mov	 DWORD PTR _forEachContainer$125871[ebp], ebx
  00071	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T192468[ebp]
  00077	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  0007b	e8 00 00 00 00	 call	 ?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy
  00080	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR $T192468[ebp]
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008c	83 c4 04	 add	 esp, 4
  0008f	90		 npad	 1
$LL9@GetAvailab:
  00090	8b 03		 mov	 eax, DWORD PTR [ebx]
  00092	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00095	8b cb		 mov	 ecx, ebx
  00097	ff d2		 call	 edx
  00099	84 c0		 test	 al, al
  0009b	0f 84 5d 01 00
	00		 je	 $LN7@GetAvailab
  000a1	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  000a4	3b c7		 cmp	 eax, edi
  000a6	75 0c		 jne	 SHORT $LN250@GetAvailab
  000a8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000ad	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  000b0	3b c7		 cmp	 eax, edi
  000b2	74 04		 je	 SHORT $LN58@GetAvailab
$LN250@GetAvailab:

; 255  : 
; 256  : 		foreach (const CK_SLOT_ID &slotId, GetTokenSlots())

  000b4	8b 00		 mov	 eax, DWORD PTR [eax]
  000b6	eb 02		 jmp	 SHORT $LN59@GetAvailab
$LN58@GetAvailab:
  000b8	33 c0		 xor	 eax, eax
$LN59@GetAvailab:
  000ba	8b 4b 30	 mov	 ecx, DWORD PTR [ebx+48]
  000bd	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  000c0	75 05		 jne	 SHORT $LN48@GetAvailab
  000c2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN48@GetAvailab:
  000c7	8b 7b 30	 mov	 edi, DWORD PTR [ebx+48]
  000ca	83 c7 08	 add	 edi, 8
  000cd	f6 45 5c 02	 test	 BYTE PTR $T192481[ebp], 2
  000d1	89 7d 54	 mov	 DWORD PTR _slotId$125878[ebp], edi
  000d4	74 4c		 je	 SHORT $LL251@GetAvailab
  000d6	8b 4d 48	 mov	 ecx, DWORD PTR $T192473[ebp+20]
  000d9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000db	83 65 5c fd	 and	 DWORD PTR $T192481[ebp], -3 ; fffffffdH
  000df	89 09		 mov	 DWORD PTR [ecx], ecx
  000e1	8b 4d 48	 mov	 ecx, DWORD PTR $T192473[ebp+20]
  000e4	89 49 04	 mov	 DWORD PTR [ecx+4], ecx
  000e7	8b 4d 48	 mov	 ecx, DWORD PTR $T192473[ebp+20]
  000ea	c7 45 4c 00 00
	00 00		 mov	 DWORD PTR $T192473[ebp+24], 0
  000f1	3b c1		 cmp	 eax, ecx
  000f3	74 14		 je	 SHORT $LN68@GetAvailab
$LL70@GetAvailab:
  000f5	8b 30		 mov	 esi, DWORD PTR [eax]
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000fd	8b 4d 48	 mov	 ecx, DWORD PTR $T192473[ebp+20]
  00100	83 c4 04	 add	 esp, 4
  00103	8b c6		 mov	 eax, esi
  00105	3b f1		 cmp	 esi, ecx
  00107	75 ec		 jne	 SHORT $LL70@GetAvailab
$LN68@GetAvailab:
  00109	51		 push	 ecx
  0010a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0010f	8b 55 34	 mov	 edx, DWORD PTR $T192473[ebp]
  00112	52		 push	 edx
  00113	c7 45 48 00 00
	00 00		 mov	 DWORD PTR $T192473[ebp+20], 0
  0011a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011f	83 c4 08	 add	 esp, 8
$LL251@GetAvailab:
  00122	80 7b 05 00	 cmp	 BYTE PTR [ebx+5], 0
  00126	0f 94 c0	 sete	 al
  00129	88 43 05	 mov	 BYTE PTR [ebx+5], al
  0012c	84 c0		 test	 al, al
  0012e	0f 84 ba 00 00
	00		 je	 $LN8@GetAvailab

; 257  : 		{
; 258  : 			try
; 259  : 			{
; 260  : 				tokens.push_back (GetTokenInfo (slotId));

  00134	8b 07		 mov	 eax, DWORD PTR [edi]
  00136	50		 push	 eax
  00137	8d 4d 98	 lea	 ecx, DWORD PTR $T192476[ebp]
  0013a	51		 push	 ecx
  0013b	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  0013f	e8 00 00 00 00	 call	 ?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z ; CipherShed::SecurityToken::GetTokenInfo
  00144	83 c4 08	 add	 esp, 8
  00147	8b 4d 6c	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0014a	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]
  0014d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00150	50		 push	 eax
  00151	52		 push	 edx
  00152	56		 push	 esi
  00153	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  00157	e8 00 00 00 00	 call	 ?_Buynode@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenInfo@CipherShed@@@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Buynode
  0015c	8b 4d 6c	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0015f	6a 01		 push	 1
  00161	8b f8		 mov	 edi, eax
  00163	e8 00 00 00 00	 call	 ?_Incsize@?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::_Incsize
  00168	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0016b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0016e	89 38		 mov	 DWORD PTR [eax], edi
  00170	83 7d d4 10	 cmp	 DWORD PTR $T192476[ebp+60], 16 ; 00000010H
  00174	72 0c		 jb	 SHORT $LN153@GetAvailab
  00176	8b 45 c0	 mov	 eax, DWORD PTR $T192476[ebp+40]
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0017f	83 c4 04	 add	 esp, 4
$LN153@GetAvailab:
  00182	83 7d b8 08	 cmp	 DWORD PTR $T192476[ebp+32], 8
  00186	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T192476[ebp+60], 15 ; 0000000fH
  0018d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T192476[ebp+56], 0
  00194	c6 45 c0 00	 mov	 BYTE PTR $T192476[ebp+40], 0
  00198	72 0c		 jb	 SHORT $LN181@GetAvailab
  0019a	8b 4d a4	 mov	 ecx, DWORD PTR $T192476[ebp+12]
  0019d	51		 push	 ecx
  0019e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001a3	83 c4 04	 add	 esp, 4
$LN181@GetAvailab:
  001a6	8b 7d 54	 mov	 edi, DWORD PTR _slotId$125878[ebp]
  001a9	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3

; 255  : 
; 256  : 		foreach (const CK_SLOT_ID &slotId, GetTokenSlots())

  001b0	c6 43 04 01	 mov	 BYTE PTR [ebx+4], 1
  001b4	e9 69 ff ff ff	 jmp	 $LL251@GetAvailab
__catch$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ$0:

; 261  : 			}
; 262  : 			catch (Pkcs11Exception &e)
; 263  : 			{
; 264  : 				if (e.GetErrorCode() == CKR_TOKEN_NOT_RECOGNIZED)

  001b9	8b 55 50	 mov	 edx, DWORD PTR _e$125889[ebp]
  001bc	81 7a 04 e1 00
	00 00		 cmp	 DWORD PTR [edx+4], 225	; 000000e1H
  001c3	75 20		 jne	 SHORT $LN2@GetAvailab

; 265  : 				{
; 266  : 					unrecognizedTokenPresent = true;

  001c5	c6 45 63 01	 mov	 BYTE PTR _unrecognizedTokenPresent$[ebp], 1

; 267  : 					continue;

  001c9	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  001d0	b8 00 00 00 00	 mov	 eax, $LN255@GetAvailab
  001d5	c3		 ret	 0
$LN255@GetAvailab:
  001d6	8b 5d 58	 mov	 ebx, DWORD PTR _forEachContainer$125871[ebp]
  001d9	8b 7d 54	 mov	 edi, DWORD PTR _slotId$125878[ebp]
  001dc	c6 43 04 01	 mov	 BYTE PTR [ebx+4], 1
  001e0	e9 3d ff ff ff	 jmp	 $LL251@GetAvailab
$LN2@GetAvailab:

; 268  : 				}
; 269  : 
; 270  : 				throw;

  001e5	6a 00		 push	 0
  001e7	6a 00		 push	 0
  001e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@GetAvailab:

; 255  : 
; 256  : 		foreach (const CK_SLOT_ID &slotId, GetTokenSlots())

  001ee	8b 03		 mov	 eax, DWORD PTR [ebx]
  001f0	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001f3	8b cb		 mov	 ecx, ebx
  001f5	ff d2		 call	 edx
  001f7	33 ff		 xor	 edi, edi
  001f9	e9 92 fe ff ff	 jmp	 $LL9@GetAvailab
$LN7@GetAvailab:

; 271  : 			}
; 272  : 		}

  001fe	8b 4d 1c	 mov	 ecx, DWORD PTR _$S5$125874[ebp+28]
  00201	8b 01		 mov	 eax, DWORD PTR [ecx]
  00203	89 09		 mov	 DWORD PTR [ecx], ecx
  00205	8b 4d 1c	 mov	 ecx, DWORD PTR _$S5$125874[ebp+28]
  00208	89 49 04	 mov	 DWORD PTR [ecx+4], ecx
  0020b	8b 4d 1c	 mov	 ecx, DWORD PTR _$S5$125874[ebp+28]
  0020e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00212	89 7d 20	 mov	 DWORD PTR _$S5$125874[ebp+32], edi
  00215	3b c1		 cmp	 eax, ecx
  00217	74 1b		 je	 SHORT $LN199@GetAvailab
  00219	8d a4 24 00 00
	00 00		 npad	 7
$LL201@GetAvailab:
  00220	8b 30		 mov	 esi, DWORD PTR [eax]
  00222	50		 push	 eax
  00223	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00228	8b 4d 1c	 mov	 ecx, DWORD PTR _$S5$125874[ebp+28]
  0022b	83 c4 04	 add	 esp, 4
  0022e	8b c6		 mov	 eax, esi
  00230	3b f1		 cmp	 esi, ecx
  00232	75 ec		 jne	 SHORT $LL201@GetAvailab
$LN199@GetAvailab:
  00234	51		 push	 ecx
  00235	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0023a	8b 45 08	 mov	 eax, DWORD PTR _$S5$125874[ebp+8]
  0023d	50		 push	 eax
  0023e	89 7d 1c	 mov	 DWORD PTR _$S5$125874[ebp+28], edi
  00241	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 273  : 
; 274  : 		if (tokens.empty() && unrecognizedTokenPresent)

  00246	8b 45 6c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00249	83 c4 08	 add	 esp, 8
  0024c	c7 45 00 00 00
	00 00		 mov	 DWORD PTR _$S5$125874[ebp], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00253	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  00256	75 26		 jne	 SHORT $LN10@GetAvailab
  00258	80 7d 63 00	 cmp	 BYTE PTR _unrecognizedTokenPresent$[ebp], 0
  0025c	74 20		 je	 SHORT $LN10@GetAvailab

; 275  : 			throw Pkcs11Exception (CKR_TOKEN_NOT_RECOGNIZED);

  0025e	68 00 00 00 00	 push	 OFFSET __TI2?AUPkcs11Exception@CipherShed@@
  00263	8d 4d d8	 lea	 ecx, DWORD PTR $T192477[ebp]
  00266	51		 push	 ecx
  00267	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T192477[ebp], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  0026e	c7 45 dc e1 00
	00 00		 mov	 DWORD PTR $T192477[ebp+4], 225 ; 000000e1H
  00275	c6 45 e0 00	 mov	 BYTE PTR $T192477[ebp+8], 0
  00279	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@GetAvailab:

; 278  : 	}

  0027e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00281	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00288	59		 pop	 ecx
  00289	5f		 pop	 edi
  0028a	5e		 pop	 esi
  0028b	5b		 pop	 ebx
  0028c	83 c5 64	 add	 ebp, 100		; 00000064H
  0028f	8b e5		 mov	 esp, ebp
  00291	5d		 pop	 ebp
  00292	c3		 ret	 0
$LN257@GetAvailab:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ$2:
  00000	8b 45 5c	 mov	 eax, DWORD PTR $T192481[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN17@GetAvailab
  0000c	83 65 5c fe	 and	 DWORD PTR $T192481[ebp], -2 ; fffffffeH
  00010	8b 4d 6c	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >::~list<CipherShed::SecurityTokenInfo,std::allocator<CipherShed::SecurityTokenInfo> >
$LN17@GetAvailab:
  00018	c3		 ret	 0
__unwindfunclet$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ$3:
  00019	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T192468[ebp]
  0001f	e9 00 00 00 00	 jmp	 ??1?$list@KV?$allocator@K@std@@@std@@QAE@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::~list<unsigned long,std::allocator<unsigned long> >
__unwindfunclet$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ$4:
  00024	8d 4d 00	 lea	 ecx, DWORD PTR _$S5$125874[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ$6:
  0002c	8d 4d 98	 lea	 ecx, DWORD PTR $T192476[ebp]
  0002f	e9 00 00 00 00	 jmp	 ??1SecurityTokenInfo@CipherShed@@QAE@XZ
__ehhandler$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003b	8b 8a 78 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-136]
  00041	33 c8		 xor	 ecx, eax
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ
  0004d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetAvailableTokens@SecurityToken@CipherShed@@SA?AV?$list@USecurityTokenInfo@CipherShed@@V?$allocator@USecurityTokenInfo@CipherShed@@@std@@@std@@XZ ENDP ; CipherShed::SecurityToken::GetAvailableTokens
PUBLIC	??_C@_01IPJKGB@?$CD?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z ; CipherShed::SecurityToken::LoginUserIfRequired
;	COMDAT ??_C@_01IPJKGB@?$CD?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_01IPJKGB@?$CD?$AA@ DB '#', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z$11 DD 08H
	DD	FLAT:??_R0?AUPkcs11Exception@CipherShed@@@8
	DD	0ffffffd0H
	DD	FLAT:__catch$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z$2
__catchsym$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z$0
__ehfuncinfo$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z
	DD	02H
	DD	FLAT:__tryblocktable$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z$10
	DD	03H
	DD	07H
	DD	08H
	DD	01H
	DD	FLAT:__catchsym$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z$11
__unwindtable$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z$4
	DD	02H
	DD	00H
	DD	03H
	DD	FLAT:__unwindfunclet$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z$7
	DD	04H
	DD	FLAT:__unwindfunclet$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z$8
	DD	02H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
xdata$x	ENDS
;	COMDAT ?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z
_TEXT	SEGMENT
_s$126231 = -208					; size = 136
$T193460 = -72						; size = 24
_e$126335 = -48						; size = 4
$T193463 = -44						; size = 28
_sessionInfo$126064 = -32				; size = 16
$T193456 = -24						; size = 8
_finally482$126334 = -20				; size = 4
__$EHRec$ = -16						; size = 16
$T193495 = 0						; size = 4
_tokenInfo$ = 4						; size = 64
_pin$126079 = 68					; size = 28
$T193464 = 72						; size = 24
__$ArrayPad$ = 96					; size = 4
_slotId$ = 108						; size = 4
?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z PROC ; CipherShed::SecurityToken::LoginUserIfRequired, COMDAT

; 432  : 	{

  00000	55		 push	 ebp
  00001	8d 6c 24 9c	 lea	 ebp, DWORD PTR [esp-100]
  00005	83 ec 64	 sub	 esp, 100		; 00000064H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 60	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 433  : 		CheckLibraryStatus();

  00036	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?Initialized@SecurityToken@CipherShed@@1_NA, 0 ; CipherShed::SecurityToken::Initialized
  0003d	75 15		 jne	 SHORT $LN39@LoginUserI
  0003f	68 00 00 00 00	 push	 OFFSET __TI2?AUSecurityTokenLibraryNotInitialized@CipherShed@@
  00044	8d 45 00	 lea	 eax, DWORD PTR $T193495[ebp]
  00047	50		 push	 eax
  00048	c7 45 00 00 00
	00 00		 mov	 DWORD PTR $T193495[ebp], OFFSET ??_7SecurityTokenLibraryNotInitialized@CipherShed@@6B@
  0004f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN39@LoginUserI:

; 434  : 		CK_RV status;
; 435  : 
; 436  : 		if (Sessions.find (slotId) == Sessions.end())

  00054	8b 1d 18 00 00
	00		 mov	 ebx, DWORD PTR ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A+24
  0005a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A
  00060	8d 4d 6c	 lea	 ecx, DWORD PTR _slotId$[ebp]
  00063	51		 push	 ecx
  00064	8d 55 e8	 lea	 edx, DWORD PTR $T193456[ebp]
  00067	52		 push	 edx
  00068	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  0006d	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::find
  00072	8b f0		 mov	 esi, eax
  00074	8b 06		 mov	 eax, DWORD PTR [esi]
  00076	85 c0		 test	 eax, eax
  00078	74 04		 je	 SHORT $LN62@LoginUserI
  0007a	3b c7		 cmp	 eax, edi
  0007c	74 05		 je	 SHORT $LN63@LoginUserI
$LN62@LoginUserI:
  0007e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN63@LoginUserI:
  00083	39 5e 04	 cmp	 DWORD PTR [esi+4], ebx

; 437  : 		{
; 438  : 			OpenSession (slotId);
; 439  : 		}
; 440  : 		else

  00086	74 78		 je	 SHORT $LN243@LoginUserI

; 441  : 		{
; 442  : 			CK_SESSION_INFO sessionInfo;
; 443  : 			status = Pkcs11Functions->C_GetSessionInfo (Sessions[slotId].Handle, &sessionInfo);

  00088	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  0008e	8d 45 6c	 lea	 eax, DWORD PTR _slotId$[ebp]
  00091	50		 push	 eax
  00092	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  00097	83 c6 3e	 add	 esi, 62			; 0000003eH
  0009a	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
  0009f	8b 10		 mov	 edx, DWORD PTR [eax]
  000a1	8b 06		 mov	 eax, DWORD PTR [esi]
  000a3	8d 4d e0	 lea	 ecx, DWORD PTR _sessionInfo$126064[ebp]
  000a6	51		 push	 ecx
  000a7	52		 push	 edx
  000a8	ff d0		 call	 eax

; 444  : 			
; 445  : 			if (status == CKR_OK)

  000aa	33 db		 xor	 ebx, ebx
  000ac	83 c4 08	 add	 esp, 8
  000af	3b c3		 cmp	 eax, ebx
  000b1	75 28		 jne	 SHORT $LN13@LoginUserI

; 446  : 			{
; 447  : 				Sessions[slotId].UserLoggedIn = (sessionInfo.state == CKS_RO_USER_FUNCTIONS || sessionInfo.state == CKS_RW_USER_FUNCTIONS);

  000b3	8b 45 e4	 mov	 eax, DWORD PTR _sessionInfo$126064[ebp+4]
  000b6	83 f8 01	 cmp	 eax, 1
  000b9	74 05		 je	 SHORT $LN18@LoginUserI
  000bb	83 f8 03	 cmp	 eax, 3
  000be	75 05		 jne	 SHORT $LN19@LoginUserI
$LN18@LoginUserI:
  000c0	bb 01 00 00 00	 mov	 ebx, 1
$LN19@LoginUserI:
  000c5	8d 4d 6c	 lea	 ecx, DWORD PTR _slotId$[ebp]
  000c8	51		 push	 ecx
  000c9	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  000ce	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]

; 448  : 			}
; 449  : 			else

  000d3	8b 75 6c	 mov	 esi, DWORD PTR _slotId$[ebp]
  000d6	88 58 04	 mov	 BYTE PTR [eax+4], bl
  000d9	eb 31		 jmp	 SHORT $LN12@LoginUserI
$LN13@LoginUserI:

; 450  : 			{
; 451  : 				try
; 452  : 				{
; 453  : 					CloseSession (slotId);

  000db	8b 75 6c	 mov	 esi, DWORD PTR _slotId$[ebp]
  000de	56		 push	 esi
  000df	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  000e2	e8 00 00 00 00	 call	 ?CloseSession@SecurityToken@CipherShed@@KAXK@Z ; CipherShed::SecurityToken::CloseSession
  000e7	83 c4 04	 add	 esp, 4
  000ea	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000f1	eb 10		 jmp	 SHORT $LN32@LoginUserI
__catch$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z$0:

; 454  : 				}
; 455  : 				catch (...) { }

  000f3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000fa	b8 00 00 00 00	 mov	 eax, $LN243@LoginUserI
  000ff	c3		 ret	 0
$LN243@LoginUserI:
  00100	8b 75 6c	 mov	 esi, DWORD PTR _slotId$[ebp]
$LN32@LoginUserI:

; 456  : 				OpenSession (slotId);

  00103	56		 push	 esi
  00104	e8 00 00 00 00	 call	 ?OpenSession@SecurityToken@CipherShed@@KAXK@Z ; CipherShed::SecurityToken::OpenSession
  00109	83 c4 04	 add	 esp, 4
$LN12@LoginUserI:

; 457  : 			}
; 458  : 		}
; 459  : 
; 460  : 		SecurityTokenInfo tokenInfo = GetTokenInfo (slotId);

  0010c	8d 55 04	 lea	 edx, DWORD PTR _tokenInfo$[ebp]
  0010f	56		 push	 esi
  00110	52		 push	 edx
  00111	e8 00 00 00 00	 call	 ?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z ; CipherShed::SecurityToken::GetTokenInfo
  00116	83 c4 08	 add	 esp, 8
  00119	b3 04		 mov	 bl, 4
  0011b	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
$LN246@LoginUserI:
  00120	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
$LL10@LoginUserI:

; 461  : 
; 462  : 		while (!Sessions[slotId].UserLoggedIn && (tokenInfo.Flags & CKF_LOGIN_REQUIRED))

  00127	8d 45 6c	 lea	 eax, DWORD PTR _slotId$[ebp]
  0012a	50		 push	 eax
  0012b	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  00130	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
  00135	80 78 04 00	 cmp	 BYTE PTR [eax+4], 0
  00139	0f 85 78 01 00
	00		 jne	 $LN9@LoginUserI
  0013f	84 5d 08	 test	 BYTE PTR _tokenInfo$[ebp+4], bl
  00142	0f 84 6f 01 00
	00		 je	 $LN9@LoginUserI

; 463  : 		{
; 464  : 			try
; 465  : 			{
; 466  : 				if (tokenInfo.Flags & CKF_PROTECTED_AUTHENTICATION_PATH)

  00148	f7 45 08 00 01
	00 00		 test	 DWORD PTR _tokenInfo$[ebp+4], 256 ; 00000100H
  0014f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  00153	74 48		 je	 SHORT $LN7@LoginUserI

; 467  : 				{
; 468  : 					status = Pkcs11Functions->C_Login (Sessions[slotId].Handle, CKU_USER, NULL_PTR, 0);

  00155	8d 4d 6c	 lea	 ecx, DWORD PTR _slotId$[ebp]
  00158	51		 push	 ecx
  00159	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  0015e	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
  00163	8b 10		 mov	 edx, DWORD PTR [eax]
  00165	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  0016a	8b 48 4a	 mov	 ecx, DWORD PTR [eax+74]
  0016d	6a 00		 push	 0
  0016f	6a 00		 push	 0
  00171	6a 01		 push	 1
  00173	52		 push	 edx
  00174	ff d1		 call	 ecx
  00176	83 c4 10	 add	 esp, 16			; 00000010H

; 469  : 					if (status != CKR_OK)

  00179	85 c0		 test	 eax, eax
  0017b	0f 84 07 01 00
	00		 je	 $LN161@LoginUserI

; 470  : 						throw Pkcs11Exception (status);

  00181	68 00 00 00 00	 push	 OFFSET __TI2?AUPkcs11Exception@CipherShed@@
  00186	8d 55 b8	 lea	 edx, DWORD PTR $T193460[ebp]
  00189	52		 push	 edx
  0018a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T193460[ebp], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  00191	89 45 bc	 mov	 DWORD PTR $T193460[ebp+4], eax
  00194	c6 45 c0 00	 mov	 BYTE PTR $T193460[ebp+8], 0
  00198	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@LoginUserI:

; 471  : 				}
; 472  : 				else
; 473  : 				{
; 474  : 					string pin = tokenInfo.LabelUtf8;

  0019d	6a ff		 push	 -1
  0019f	6a 00		 push	 0
  001a1	8d 45 28	 lea	 eax, DWORD PTR _tokenInfo$[ebp+36]
  001a4	50		 push	 eax
  001a5	8d 4d 44	 lea	 ecx, DWORD PTR _pin$126079[ebp]
  001a8	c7 45 5c 0f 00
	00 00		 mov	 DWORD PTR _pin$126079[ebp+24], 15 ; 0000000fH
  001af	c7 45 58 00 00
	00 00		 mov	 DWORD PTR _pin$126079[ebp+20], 0
  001b6	c6 45 48 00	 mov	 BYTE PTR _pin$126079[ebp+4], 0
  001ba	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 475  : 					if (tokenInfo.Label.empty())

  001bf	83 7d 20 00	 cmp	 DWORD PTR _tokenInfo$[ebp+28], 0
  001c3	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  001c6	75 7e		 jne	 SHORT $LN137@LoginUserI

; 476  : 					{
; 477  : 						stringstream s;

  001c8	6a 01		 push	 1
  001ca	6a 03		 push	 3
  001cc	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _s$126231[ebp]
  001d2	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >

; 478  : 						s << "#" << slotId;

  001d7	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _s$126231[ebp+8]
  001dd	68 00 00 00 00	 push	 OFFSET ??_C@_01IPJKGB@?$CD?$AA@
  001e2	51		 push	 ecx
  001e3	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  001e7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001ec	83 c4 08	 add	 esp, 8
  001ef	56		 push	 esi
  001f0	8b c8		 mov	 ecx, eax
  001f2	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 479  : 						pin = s.str();

  001f7	8d 55 d4	 lea	 edx, DWORD PTR $T193463[ebp]
  001fa	52		 push	 edx
  001fb	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _s$126231[ebp]
  00201	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00206	6a ff		 push	 -1
  00208	6a 00		 push	 0
  0020a	50		 push	 eax
  0020b	8d 4d 44	 lea	 ecx, DWORD PTR _pin$126079[ebp]
  0020e	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  00212	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00217	39 7d ec	 cmp	 DWORD PTR $T193463[ebp+24], edi
  0021a	72 0c		 jb	 SHORT $LN122@LoginUserI
  0021c	8b 45 d8	 mov	 eax, DWORD PTR $T193463[ebp+4]
  0021f	50		 push	 eax
  00220	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00225	83 c4 04	 add	 esp, 4
$LN122@LoginUserI:

; 480  : 					}

  00228	8d 4d 84	 lea	 ecx, DWORD PTR _s$126231[ebp+84]
  0022b	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  0022e	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00233	8d 4d 84	 lea	 ecx, DWORD PTR _s$126231[ebp+84]
  00236	51		 push	 ecx
  00237	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _s$126231[ebp+84], OFFSET ??_7ios_base@std@@6B@
  0023e	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00243	83 c4 04	 add	 esp, 4
$LN137@LoginUserI:

; 481  : 
; 482  : 					finally_do_arg (string*, &pin, { burn ((void *) finally_arg->c_str(), finally_arg->size()); });

  00246	8d 55 44	 lea	 edx, DWORD PTR _pin$126079[ebp]
  00249	89 55 ec	 mov	 DWORD PTR _finally482$126334[ebp], edx

; 483  : 
; 484  : 					(*PinCallback) (pin);

  0024c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?PinCallback@SecurityToken@CipherShed@@1V?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@A ; CipherShed::SecurityToken::PinCallback
  00252	8b 01		 mov	 eax, DWORD PTR [ecx]
  00254	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00257	52		 push	 edx
  00258	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  0025c	ff d0		 call	 eax

; 485  : 					Login (slotId, pin);

  0025e	8d 4d 44	 lea	 ecx, DWORD PTR _pin$126079[ebp]
  00261	51		 push	 ecx
  00262	56		 push	 esi
  00263	e8 00 00 00 00	 call	 ?Login@SecurityToken@CipherShed@@KAXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::SecurityToken::Login
  00268	83 c4 08	 add	 esp, 8

; 486  : 				}

  0026b	8d 45 ec	 lea	 eax, DWORD PTR _finally482$126334[ebp]
  0026e	e8 00 00 00 00	 call	 ??1Finally482@?BL@??LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z@QAE@XZ ; `CipherShed::SecurityToken::LoginUserIfRequired'::`27'::Finally482::~Finally482
  00273	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  00277	39 7d 5c	 cmp	 DWORD PTR _pin$126079[ebp+24], edi
  0027a	72 0c		 jb	 SHORT $LN161@LoginUserI
  0027c	8b 55 48	 mov	 edx, DWORD PTR _pin$126079[ebp+4]
  0027f	52		 push	 edx
  00280	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00285	83 c4 04	 add	 esp, 4
$LN161@LoginUserI:

; 487  : 
; 488  : 				Sessions[slotId].UserLoggedIn = true;

  00288	8d 45 6c	 lea	 eax, DWORD PTR _slotId$[ebp]
  0028b	50		 push	 eax
  0028c	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  00291	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
  00296	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 505  : 			}
; 506  : 		}

  0029a	e9 81 fe ff ff	 jmp	 $LN246@LoginUserI
__catch$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z$2:

; 489  : 			}
; 490  : 			catch (Pkcs11Exception &e)
; 491  : 			{
; 492  : 				CK_RV error = e.GetErrorCode();

  0029f	8b 4d d0	 mov	 ecx, DWORD PTR _e$126335[ebp]
  002a2	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 493  : 
; 494  : 				if (error == CKR_USER_ALREADY_LOGGED_IN)

  002a5	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  002aa	75 5f		 jne	 SHORT $LN3@LoginUserI

; 495  : 				{
; 496  : 					break;

  002ac	b8 00 00 00 00	 mov	 eax, $LN34@LoginUserI
  002b1	c3		 ret	 0
$LN34@LoginUserI:
  002b2	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
$LN9@LoginUserI:

; 507  : 	}

  002b7	39 7d 40	 cmp	 DWORD PTR _tokenInfo$[ebp+60], edi
  002ba	72 0c		 jb	 SHORT $LN199@LoginUserI
  002bc	8b 45 2c	 mov	 eax, DWORD PTR _tokenInfo$[ebp+40]
  002bf	50		 push	 eax
  002c0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002c5	83 c4 04	 add	 esp, 4
$LN199@LoginUserI:
  002c8	83 7d 24 08	 cmp	 DWORD PTR _tokenInfo$[ebp+32], 8
  002cc	c7 45 40 0f 00
	00 00		 mov	 DWORD PTR _tokenInfo$[ebp+60], 15 ; 0000000fH
  002d3	c7 45 3c 00 00
	00 00		 mov	 DWORD PTR _tokenInfo$[ebp+56], 0
  002da	c6 45 2c 00	 mov	 BYTE PTR _tokenInfo$[ebp+40], 0
  002de	72 0c		 jb	 SHORT $LN227@LoginUserI
  002e0	8b 4d 10	 mov	 ecx, DWORD PTR _tokenInfo$[ebp+12]
  002e3	51		 push	 ecx
  002e4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002e9	83 c4 04	 add	 esp, 4
$LN227@LoginUserI:
  002ec	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002ef	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002f6	59		 pop	 ecx
  002f7	5f		 pop	 edi
  002f8	5e		 pop	 esi
  002f9	5b		 pop	 ebx
  002fa	8b 4d 60	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002fd	33 cd		 xor	 ecx, ebp
  002ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00304	83 c5 64	 add	 ebp, 100		; 00000064H
  00307	8b e5		 mov	 esp, ebp
  00309	5d		 pop	 ebp
  0030a	c3		 ret	 0
$LN3@LoginUserI:

; 497  : 				}
; 498  : 				else if (error == CKR_PIN_INCORRECT && !(tokenInfo.Flags & CKF_PROTECTED_AUTHENTICATION_PATH))

  0030b	3d a0 00 00 00	 cmp	 eax, 160		; 000000a0H
  00310	75 44		 jne	 SHORT $LN1@LoginUserI
  00312	f7 45 08 00 01
	00 00		 test	 DWORD PTR _tokenInfo$[ebp+4], 256 ; 00000100H
  00319	75 3b		 jne	 SHORT $LN1@LoginUserI

; 499  : 				{
; 500  : 					(*WarningCallback) (Pkcs11Exception (CKR_PIN_INCORRECT));

  0031b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?WarningCallback@SecurityToken@CipherShed@@1V?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@A ; CipherShed::SecurityToken::WarningCallback
  00321	89 45 4c	 mov	 DWORD PTR $T193464[ebp+4], eax
  00324	c7 45 48 00 00
	00 00		 mov	 DWORD PTR $T193464[ebp], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  0032b	c6 45 50 00	 mov	 BYTE PTR $T193464[ebp+8], 0
  0032f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00331	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00334	8d 45 48	 lea	 eax, DWORD PTR $T193464[ebp]
  00337	50		 push	 eax
  00338	ff d2		 call	 edx

; 501  : 					continue;

  0033a	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00341	b8 00 00 00 00	 mov	 eax, $LN36@LoginUserI
  00346	c3		 ret	 0
$LN36@LoginUserI:
  00347	8b 75 6c	 mov	 esi, DWORD PTR _slotId$[ebp]
  0034a	b3 04		 mov	 bl, 4
  0034c	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  00351	e9 d1 fd ff ff	 jmp	 $LL10@LoginUserI
$LN1@LoginUserI:

; 502  : 				}
; 503  : 
; 504  : 				throw;

  00356	6a 00		 push	 0
  00358	6a 00		 push	 0
  0035a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN245@LoginUserI:
  0035f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z$4:
  00000	8d 4d 04	 lea	 ecx, DWORD PTR _tokenInfo$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SecurityTokenInfo@CipherShed@@QAE@XZ
__unwindfunclet$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z$5:
  00008	8d 4d 44	 lea	 ecx, DWORD PTR _pin$126079[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z$6:
  00010	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _s$126231[ebp]
  00016	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z$7:
  0001b	8d 4d d4	 lea	 ecx, DWORD PTR $T193463[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z$8:
  00023	8d 45 ec	 lea	 eax, DWORD PTR _finally482$126334[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1Finally482@?BL@??LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z@QAE@XZ ; `CipherShed::SecurityToken::LoginUserIfRequired'::`27'::Finally482::~Finally482
__ehhandler$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z:
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 8a 2c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-212]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00042	33 c8		 xor	 ecx, eax
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z
  0004e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z ENDP ; CipherShed::SecurityToken::LoginUserIfRequired
PUBLIC	??_C@_0BC@GHFGDNNP@C_GetFunctionList?$AA@	; `string'
PUBLIC	__TI2?AUSystemException@CipherShed@@
PUBLIC	?InitLibrary@SecurityToken@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$auto_ptr@UGetPinFunctor@CipherShed@@@4@V?$auto_ptr@USendExceptionFunctor@CipherShed@@@4@@Z ; CipherShed::SecurityToken::InitLibrary
PUBLIC	__CTA2?AUSystemException@CipherShed@@
PUBLIC	__CT??_R0?AUSystemException@CipherShed@@@8??0SystemException@CipherShed@@QAE@ABU01@@Z8
PUBLIC	??0SystemException@CipherShed@@QAE@ABU01@@Z	; CipherShed::SystemException::SystemException
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
;	COMDAT __CT??_R0?AUSystemException@CipherShed@@@8??0SystemException@CipherShed@@QAE@ABU01@@Z8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__CT??_R0?AUSystemException@CipherShed@@@8??0SystemException@CipherShed@@QAE@ABU01@@Z8 DD 00H
	DD	FLAT:??_R0?AUSystemException@CipherShed@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	08H
	DD	FLAT:??0SystemException@CipherShed@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AUSystemException@CipherShed@@
xdata$x	SEGMENT
__CTA2?AUSystemException@CipherShed@@ DD 02H
	DD	FLAT:__CT??_R0?AUSystemException@CipherShed@@@8??0SystemException@CipherShed@@QAE@ABU01@@Z8
	DD	FLAT:__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
xdata$x	ENDS
;	COMDAT ??_C@_0BC@GHFGDNNP@C_GetFunctionList?$AA@
CONST	SEGMENT
??_C@_0BC@GHFGDNNP@C_GetFunctionList?$AA@ DB 'C_GetFunctionList', 00H ; `string'
CONST	ENDS
;	COMDAT __TI2?AUSystemException@CipherShed@@
xdata$x	SEGMENT
__TI2?AUSystemException@CipherShed@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2?AUSystemException@CipherShed@@
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InitLibrary@SecurityToken@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$auto_ptr@UGetPinFunctor@CipherShed@@@4@V?$auto_ptr@USendExceptionFunctor@CipherShed@@@4@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitLibrary@SecurityToken@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$auto_ptr@UGetPinFunctor@CipherShed@@@4@V?$auto_ptr@USendExceptionFunctor@CipherShed@@@4@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?InitLibrary@SecurityToken@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$auto_ptr@UGetPinFunctor@CipherShed@@@4@V?$auto_ptr@USendExceptionFunctor@CipherShed@@@4@@Z$1
__ehfuncinfo$?InitLibrary@SecurityToken@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$auto_ptr@UGetPinFunctor@CipherShed@@@4@V?$auto_ptr@USendExceptionFunctor@CipherShed@@@4@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?InitLibrary@SecurityToken@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$auto_ptr@UGetPinFunctor@CipherShed@@@4@V?$auto_ptr@USendExceptionFunctor@CipherShed@@@4@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
xdata$x	ENDS
;	COMDAT ?InitLibrary@SecurityToken@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$auto_ptr@UGetPinFunctor@CipherShed@@@4@V?$auto_ptr@USendExceptionFunctor@CipherShed@@@4@@Z
_TEXT	SEGMENT
$T194295 = -44						; size = 8
$T194298 = -36						; size = 24
$T194297 = -36						; size = 24
__$EHRec$ = -12						; size = 12
$T194296 = 8						; size = 4
_pkcs11LibraryPath$ = 8					; size = 4
_pinCallback$ = 12					; size = 4
_warningCallback$ = 16					; size = 4
?InitLibrary@SecurityToken@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$auto_ptr@UGetPinFunctor@CipherShed@@@4@V?$auto_ptr@USendExceptionFunctor@CipherShed@@@4@@Z PROC ; CipherShed::SecurityToken::InitLibrary, COMDAT

; 510  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?InitLibrary@SecurityToken@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$auto_ptr@UGetPinFunctor@CipherShed@@@4@V?$auto_ptr@USendExceptionFunctor@CipherShed@@@4@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 511  : 		if (Initialized)

  00024	33 db		 xor	 ebx, ebx
  00026	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 1
  0002e	38 1d 00 00 00
	00		 cmp	 BYTE PTR ?Initialized@SecurityToken@CipherShed@@1_NA, bl ; CipherShed::SecurityToken::Initialized
  00034	74 26		 je	 SHORT $LN13@InitLibrar

; 512  : 			CloseLibrary();

  00036	e8 00 00 00 00	 call	 ?CloseAllSessions@SecurityToken@CipherShed@@SAXXZ ; CipherShed::SecurityToken::CloseAllSessions
  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  00040	8b 48 06	 mov	 ecx, DWORD PTR [eax+6]
  00043	53		 push	 ebx
  00044	ff d1		 call	 ecx
  00046	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?Pkcs11LibraryHandle@SecurityToken@CipherShed@@1PAUHINSTANCE__@@A ; CipherShed::SecurityToken::Pkcs11LibraryHandle
  0004c	83 c4 04	 add	 esp, 4
  0004f	52		 push	 edx
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeLibrary@4
  00056	88 1d 00 00 00
	00		 mov	 BYTE PTR ?Initialized@SecurityToken@CipherShed@@1_NA, bl ; CipherShed::SecurityToken::Initialized
$LN13@InitLibrar:

; 513  : 
; 514  : #ifdef TC_WINDOWS
; 515  : 		Pkcs11LibraryHandle = LoadLibraryA (pkcs11LibraryPath.c_str());

  0005c	8b 44 24 38	 mov	 eax, DWORD PTR _pkcs11LibraryPath$[esp+48]
  00060	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00064	72 05		 jb	 SHORT $LN20@InitLibrar
  00066	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00069	eb 03		 jmp	 SHORT $LN21@InitLibrar
$LN20@InitLibrar:
  0006b	83 c0 04	 add	 eax, 4
$LN21@InitLibrar:
  0006e	50		 push	 eax
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
  00075	a3 00 00 00 00	 mov	 DWORD PTR ?Pkcs11LibraryHandle@SecurityToken@CipherShed@@1PAUHINSTANCE__@@A, eax ; CipherShed::SecurityToken::Pkcs11LibraryHandle

; 516  : #else
; 517  : 		Pkcs11LibraryHandle = dlopen (pkcs11LibraryPath.c_str(), RTLD_NOW | RTLD_LOCAL);
; 518  : #endif
; 519  : 		throw_sys_if (!Pkcs11LibraryHandle);

  0007a	3b c3		 cmp	 eax, ebx
  0007c	75 21		 jne	 SHORT $LN6@InitLibrar
  0007e	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T194295[esp+52], OFFSET ??_7SystemException@CipherShed@@6B@
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0008c	89 44 24 0c	 mov	 DWORD PTR $T194295[esp+56], eax
  00090	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@CipherShed@@
  00095	8d 44 24 0c	 lea	 eax, DWORD PTR $T194295[esp+56]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN6@InitLibrar:

; 520  : 
; 521  : 		typedef CK_RV (*C_GetFunctionList_t) (CK_FUNCTION_LIST_PTR_PTR ppFunctionList);
; 522  : #ifdef TC_WINDOWS
; 523  : 		C_GetFunctionList_t C_GetFunctionList = (C_GetFunctionList_t) GetProcAddress (Pkcs11LibraryHandle, "C_GetFunctionList");

  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GHFGDNNP@C_GetFunctionList?$AA@
  000a4	50		 push	 eax
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8

; 524  : #else
; 525  : 		C_GetFunctionList_t C_GetFunctionList = (C_GetFunctionList_t) dlsym (Pkcs11LibraryHandle, "C_GetFunctionList");
; 526  : #endif
; 527  : 
; 528  : 		if (!C_GetFunctionList)

  000ab	3b c3		 cmp	 eax, ebx
  000ad	75 17		 jne	 SHORT $LN3@InitLibrar

; 529  : 			throw SecurityTokenLibraryNotInitialized();

  000af	68 00 00 00 00	 push	 OFFSET __TI2?AUSecurityTokenLibraryNotInitialized@CipherShed@@
  000b4	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T194296[esp+52]
  000b8	51		 push	 ecx
  000b9	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR $T194296[esp+56], OFFSET ??_7SecurityTokenLibraryNotInitialized@CipherShed@@6B@
  000c1	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@InitLibrar:

; 530  : 
; 531  : 		CK_RV status = C_GetFunctionList (&Pkcs11Functions);

  000c6	68 00 00 00 00	 push	 OFFSET ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  000cb	ff d0		 call	 eax
  000cd	83 c4 04	 add	 esp, 4

; 532  : 		if (status != CKR_OK)

  000d0	3b c3		 cmp	 eax, ebx
  000d2	74 1f		 je	 SHORT $LN2@InitLibrar

; 533  : 			throw Pkcs11Exception (status);

  000d4	68 00 00 00 00	 push	 OFFSET __TI2?AUPkcs11Exception@CipherShed@@
  000d9	8d 54 24 14	 lea	 edx, DWORD PTR $T194297[esp+56]
  000dd	52		 push	 edx
  000de	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR $T194297[esp+60], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  000e6	89 44 24 1c	 mov	 DWORD PTR $T194297[esp+64], eax
  000ea	88 5c 24 20	 mov	 BYTE PTR $T194297[esp+68], bl
  000ee	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@InitLibrar:

; 534  : 
; 535  : 		status = Pkcs11Functions->C_Initialize (NULL_PTR);

  000f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  000f8	8b 48 02	 mov	 ecx, DWORD PTR [eax+2]
  000fb	53		 push	 ebx
  000fc	ff d1		 call	 ecx
  000fe	83 c4 04	 add	 esp, 4

; 536  : 		if (status != CKR_OK)

  00101	3b c3		 cmp	 eax, ebx
  00103	74 1f		 je	 SHORT $LN1@InitLibrar

; 537  : 			throw Pkcs11Exception (status);

  00105	68 00 00 00 00	 push	 OFFSET __TI2?AUPkcs11Exception@CipherShed@@
  0010a	8d 54 24 14	 lea	 edx, DWORD PTR $T194298[esp+56]
  0010e	52		 push	 edx
  0010f	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR $T194298[esp+60], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  00117	89 44 24 1c	 mov	 DWORD PTR $T194298[esp+64], eax
  0011b	88 5c 24 20	 mov	 BYTE PTR $T194298[esp+68], bl
  0011f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@InitLibrar:

; 538  : 
; 539  : 		PinCallback = pinCallback;

  00124	8d 44 24 3c	 lea	 eax, DWORD PTR _pinCallback$[esp+48]
  00128	50		 push	 eax
  00129	b9 00 00 00 00	 mov	 ecx, OFFSET ?PinCallback@SecurityToken@CipherShed@@1V?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@A ; CipherShed::SecurityToken::PinCallback
  0012e	e8 00 00 00 00	 call	 ??4?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAEAAV01@AAV01@@Z ; std::auto_ptr<CipherShed::GetPinFunctor>::operator=

; 540  : 		WarningCallback = warningCallback;

  00133	8d 4c 24 40	 lea	 ecx, DWORD PTR _warningCallback$[esp+48]
  00137	51		 push	 ecx
  00138	b9 00 00 00 00	 mov	 ecx, OFFSET ?WarningCallback@SecurityToken@CipherShed@@1V?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@A ; CipherShed::SecurityToken::WarningCallback
  0013d	e8 00 00 00 00	 call	 ??4?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAEAAV01@AAV01@@Z ; std::auto_ptr<CipherShed::SendExceptionFunctor>::operator=

; 541  : 
; 542  : 		Initialized = true;
; 543  : 	}

  00142	8b 4c 24 3c	 mov	 ecx, DWORD PTR _pinCallback$[esp+48]
  00146	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?Initialized@SecurityToken@CipherShed@@1_NA, 1 ; CipherShed::SecurityToken::Initialized
  0014d	88 5c 24 30	 mov	 BYTE PTR __$EHRec$[esp+60], bl
  00151	3b cb		 cmp	 ecx, ebx
  00153	74 08		 je	 SHORT $LN40@InitLibrar
  00155	8b 11		 mov	 edx, DWORD PTR [ecx]
  00157	8b 02		 mov	 eax, DWORD PTR [edx]
  00159	6a 01		 push	 1
  0015b	ff d0		 call	 eax
$LN40@InitLibrar:
  0015d	8b 4c 24 40	 mov	 ecx, DWORD PTR _warningCallback$[esp+48]
  00161	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  00169	3b cb		 cmp	 ecx, ebx
  0016b	74 08		 je	 SHORT $LN44@InitLibrar
  0016d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0016f	8b 02		 mov	 eax, DWORD PTR [edx]
  00171	6a 01		 push	 1
  00173	ff d0		 call	 eax
$LN44@InitLibrar:
  00175	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00179	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00180	59		 pop	 ecx
  00181	5b		 pop	 ebx
  00182	83 c4 2c	 add	 esp, 44			; 0000002cH
  00185	c3		 ret	 0
$LN48@InitLibrar:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitLibrary@SecurityToken@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$auto_ptr@UGetPinFunctor@CipherShed@@@4@V?$auto_ptr@USendExceptionFunctor@CipherShed@@@4@@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR _warningCallback$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@QAE@XZ ; std::auto_ptr<CipherShed::SendExceptionFunctor>::~auto_ptr<CipherShed::SendExceptionFunctor>
__unwindfunclet$?InitLibrary@SecurityToken@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$auto_ptr@UGetPinFunctor@CipherShed@@@4@V?$auto_ptr@USendExceptionFunctor@CipherShed@@@4@@Z$1:
  00008	8d 4d 08	 lea	 ecx, DWORD PTR _pinCallback$[ebp-4]
  0000b	e9 00 00 00 00	 jmp	 ??1?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@QAE@XZ ; std::auto_ptr<CipherShed::GetPinFunctor>::~auto_ptr<CipherShed::GetPinFunctor>
__ehhandler$?InitLibrary@SecurityToken@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$auto_ptr@UGetPinFunctor@CipherShed@@@4@V?$auto_ptr@USendExceptionFunctor@CipherShed@@@4@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  00017	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InitLibrary@SecurityToken@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$auto_ptr@UGetPinFunctor@CipherShed@@@4@V?$auto_ptr@USendExceptionFunctor@CipherShed@@@4@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InitLibrary@SecurityToken@CipherShed@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$auto_ptr@UGetPinFunctor@CipherShed@@@4@V?$auto_ptr@USendExceptionFunctor@CipherShed@@@4@@Z ENDP ; CipherShed::SecurityToken::InitLibrary
; Function compile flags: /Ogtpy
;	COMDAT ??0SystemException@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0SystemException@CipherShed@@QAE@ABU01@@Z PROC	; CipherShed::SystemException::SystemException, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR ___that$[esp-4]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7SystemException@CipherShed@@6B@
  0000c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00012	c2 04 00	 ret	 4
??0SystemException@CipherShed@@QAE@ABU01@@Z ENDP	; CipherShed::SystemException::SystemException
_TEXT	ENDS
PUBLIC	??_C@_02MDDDDAID@0x?$AA@			; `string'
PUBLIC	??BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CipherShed::Pkcs11Exception::operator std::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_C@_0L@JIDCKNME@CKR_CANCEL?$AA@		; `string'
PUBLIC	??_C@_0BA@HHDKGBBP@CKR_HOST_MEMORY?$AA@		; `string'
PUBLIC	??_C@_0BE@FOAEJLLC@CKR_SLOT_ID_INVALID?$AA@	; `string'
PUBLIC	??_C@_0BC@BPPOLCIH@CKR_GENERAL_ERROR?$AA@	; `string'
PUBLIC	??_C@_0BE@DIFKEOGI@CKR_FUNCTION_FAILED?$AA@	; `string'
PUBLIC	??_C@_0BC@LNHMJFHC@CKR_ARGUMENTS_BAD?$AA@	; `string'
PUBLIC	??_C@_0N@KFPEOGN@CKR_NO_EVENT?$AA@		; `string'
PUBLIC	??_C@_0BL@NDINCBKJ@CKR_NEED_TO_CREATE_THREADS?$AA@ ; `string'
PUBLIC	??_C@_0O@OHMKMDKB@CKR_CANT_LOCK?$AA@		; `string'
PUBLIC	??_C@_0BI@IDDIMLAI@CKR_ATTRIBUTE_READ_ONLY?$AA@	; `string'
PUBLIC	??_C@_0BI@LPANBEIN@CKR_ATTRIBUTE_SENSITIVE?$AA@	; `string'
PUBLIC	??_C@_0BL@CJHMMHEH@CKR_ATTRIBUTE_TYPE_INVALID?$AA@ ; `string'
PUBLIC	??_C@_0BM@LMONJDMA@CKR_ATTRIBUTE_VALUE_INVALID?$AA@ ; `string'
PUBLIC	??_C@_0BB@HONBBNLK@CKR_DATA_INVALID?$AA@	; `string'
PUBLIC	??_C@_0BD@BPCFCEOF@CKR_DATA_LEN_RANGE?$AA@	; `string'
PUBLIC	??_C@_0BB@OAEPJIAO@CKR_DEVICE_ERROR?$AA@	; `string'
PUBLIC	??_C@_0BC@EDKNPIJF@CKR_DEVICE_MEMORY?$AA@	; `string'
PUBLIC	??_C@_0BD@CLPGKOPG@CKR_DEVICE_REMOVED?$AA@	; `string'
PUBLIC	??_C@_0BL@HMMBAKLE@CKR_ENCRYPTED_DATA_INVALID?$AA@ ; `string'
PUBLIC	??_C@_0BN@CHFIOLM@CKR_ENCRYPTED_DATA_LEN_RANGE?$AA@ ; `string'
PUBLIC	??_C@_0BG@GFNGJBLD@CKR_FUNCTION_CANCELED?$AA@	; `string'
PUBLIC	??_C@_0BK@CPMALGEH@CKR_FUNCTION_NOT_PARALLEL?$AA@ ; `string'
PUBLIC	??_C@_0BL@FLCFPGMF@CKR_FUNCTION_NOT_SUPPORTED?$AA@ ; `string'
PUBLIC	??_C@_0BH@JBCBCIHC@CKR_KEY_HANDLE_INVALID?$AA@	; `string'
PUBLIC	??_C@_0BD@DCCEPOIK@CKR_KEY_SIZE_RANGE?$AA@	; `string'
PUBLIC	??_C@_0BK@FBLHAPGA@CKR_KEY_TYPE_INCONSISTENT?$AA@ ; `string'
PUBLIC	??_C@_0BD@CADJPHKC@CKR_KEY_NOT_NEEDED?$AA@	; `string'
PUBLIC	??_C@_0BA@PBNACHHM@CKR_KEY_CHANGED?$AA@		; `string'
PUBLIC	??_C@_0P@CIJPGKMN@CKR_KEY_NEEDED?$AA@		; `string'
PUBLIC	??_C@_0BF@GCBGIGLD@CKR_KEY_INDIGESTIBLE?$AA@	; `string'
PUBLIC	??_C@_0BP@PCNBFOEJ@CKR_KEY_FUNCTION_NOT_PERMITTED?$AA@ ; `string'
PUBLIC	??_C@_0BG@IEKNAGOL@CKR_KEY_NOT_WRAPPABLE?$AA@	; `string'
PUBLIC	??_C@_0BG@OIKHBDLJ@CKR_KEY_UNEXTRACTABLE?$AA@	; `string'
PUBLIC	??_C@_0BG@FIBINAPL@CKR_MECHANISM_INVALID?$AA@	; `string'
PUBLIC	??_C@_0BM@NHMBLBHF@CKR_MECHANISM_PARAM_INVALID?$AA@ ; `string'
PUBLIC	??_C@_0BK@NIGFIGL@CKR_OBJECT_HANDLE_INVALID?$AA@ ; `string'
PUBLIC	??_C@_0BF@LACBDJFM@CKR_OPERATION_ACTIVE?$AA@	; `string'
PUBLIC	??_C@_0BO@NIGNIKB@CKR_OPERATION_NOT_INITIALIZED?$AA@ ; `string'
PUBLIC	??_C@_0BC@PIDGDJNE@CKR_PIN_INCORRECT?$AA@	; `string'
PUBLIC	??_C@_0BA@PDLKJELN@CKR_PIN_INVALID?$AA@		; `string'
PUBLIC	??_C@_0BC@MEAAAEMN@CKR_PIN_LEN_RANGE?$AA@	; `string'
PUBLIC	??_C@_0BA@PPOOFJBC@CKR_PIN_EXPIRED?$AA@		; `string'
PUBLIC	??_C@_0P@JGPCDBMN@CKR_PIN_LOCKED?$AA@		; `string'
PUBLIC	??_C@_0BD@EFPEBFCO@CKR_SESSION_CLOSED?$AA@	; `string'
PUBLIC	??_C@_0BC@GFNLAALM@CKR_SESSION_COUNT?$AA@	; `string'
PUBLIC	??_C@_0BL@JFEIAJEO@CKR_SESSION_HANDLE_INVALID?$AA@ ; `string'
PUBLIC	??_C@_0CD@CNJKDODF@CKR_SESSION_PARALLEL_NOT_SUPPORT@ ; `string'
PUBLIC	??_C@_0BG@NACFPKBK@CKR_SESSION_READ_ONLY?$AA@	; `string'
PUBLIC	??_C@_0BD@CJEENIOI@CKR_SESSION_EXISTS?$AA@	; `string'
PUBLIC	??_C@_0BN@FEECMDLD@CKR_SESSION_READ_ONLY_EXISTS?$AA@ ; `string'
PUBLIC	??_C@_0CB@MOHOJDLI@CKR_SESSION_READ_WRITE_SO_EXISTS@ ; `string'
PUBLIC	??_C@_0BG@FJFGJBPL@CKR_SIGNATURE_INVALID?$AA@	; `string'
PUBLIC	??_C@_0BI@BCEJLCCN@CKR_SIGNATURE_LEN_RANGE?$AA@	; `string'
PUBLIC	??_C@_0BI@OKLBFCJN@CKR_TEMPLATE_INCOMPLETE?$AA@	; `string'
PUBLIC	??_C@_0BK@NFOMODKD@CKR_TEMPLATE_INCONSISTENT?$AA@ ; `string'
PUBLIC	??_C@_0BG@GJCOFLCP@CKR_TOKEN_NOT_PRESENT?$AA@	; `string'
PUBLIC	??_C@_0BJ@DKIDJOKM@CKR_TOKEN_NOT_RECOGNIZED?$AA@ ; `string'
PUBLIC	??_C@_0BK@LICPHIEK@CKR_TOKEN_WRITE_PROTECTED?$AA@ ; `string'
PUBLIC	??_C@_0CC@BHIKKBJK@CKR_UNWRAPPING_KEY_HANDLE_INVALI@ ; `string'
PUBLIC	??_C@_0BO@EDNGDMCF@CKR_UNWRAPPING_KEY_SIZE_RANGE?$AA@ ; `string'
PUBLIC	??_C@_0CF@FNADNHJM@CKR_UNWRAPPING_KEY_TYPE_INCONSIS@ ; `string'
PUBLIC	??_C@_0BL@HHCLDMIB@CKR_USER_ALREADY_LOGGED_IN?$AA@ ; `string'
PUBLIC	??_C@_0BH@PHIJDFPC@CKR_USER_NOT_LOGGED_IN?$AA@	; `string'
PUBLIC	??_C@_0BN@CJFMMEDO@CKR_USER_PIN_NOT_INITIALIZED?$AA@ ; `string'
PUBLIC	??_C@_0BG@ECPOFDO@CKR_USER_TYPE_INVALID?$AA@	; `string'
PUBLIC	??_C@_0CD@GJCCPLNL@CKR_USER_ANOTHER_ALREADY_LOGGED_@ ; `string'
PUBLIC	??_C@_0BI@MGNIFGMM@CKR_USER_TOO_MANY_TYPES?$AA@	; `string'
PUBLIC	??_C@_0BI@CPLHFH@CKR_WRAPPED_KEY_INVALID?$AA@	; `string'
PUBLIC	??_C@_0BK@MCPGJNEM@CKR_WRAPPED_KEY_LEN_RANGE?$AA@ ; `string'
PUBLIC	??_C@_0CA@DLBMIHED@CKR_WRAPPING_KEY_HANDLE_INVALID?$AA@ ; `string'
PUBLIC	??_C@_0BM@OCCHBGKK@CKR_WRAPPING_KEY_SIZE_RANGE?$AA@ ; `string'
PUBLIC	??_C@_0CD@FOJGMFK@CKR_WRAPPING_KEY_TYPE_INCONSISTE@ ; `string'
PUBLIC	??_C@_0BO@GILEANPO@CKR_RANDOM_SEED_NOT_SUPPORTED?$AA@ ; `string'
PUBLIC	??_C@_0BC@JEFNGGNK@CKR_RANDOM_NO_RNG?$AA@	; `string'
PUBLIC	??_C@_0BK@MMHDGADE@CKR_DOMAIN_PARAMS_INVALID?$AA@ ; `string'
PUBLIC	??_C@_0BF@DHOMKFCE@CKR_BUFFER_TOO_SMALL?$AA@	; `string'
PUBLIC	??_C@_0BI@JPLEOJGD@CKR_SAVED_STATE_INVALID?$AA@	; `string'
PUBLIC	??_C@_0BK@NJDKONLD@CKR_INFORMATION_SENSITIVE?$AA@ ; `string'
PUBLIC	??_C@_0BF@EAMMCHLP@CKR_STATE_UNSAVEABLE?$AA@	; `string'
PUBLIC	??_C@_0BN@ODFNBLKM@CKR_CRYPTOKI_NOT_INITIALIZED?$AA@ ; `string'
PUBLIC	??_C@_0CB@JBBGANIO@CKR_CRYPTOKI_ALREADY_INITIALIZED@ ; `string'
PUBLIC	??_C@_0O@GIMOJHGA@CKR_MUTEX_BAD?$AA@		; `string'
PUBLIC	??_C@_0BF@NLNAHNBM@CKR_MUTEX_NOT_LOCKED?$AA@	; `string'
PUBLIC	??_C@_0BB@NJDNOJFN@CKR_NEW_PIN_MODE?$AA@	; `string'
PUBLIC	??_C@_0N@IBMCNMKC@CKR_NEXT_OTP?$AA@		; `string'
PUBLIC	??_C@_0BG@GCNMIEKF@CKR_FUNCTION_REJECTED?$AA@	; `string'
;	COMDAT ??_C@_0BG@GCNMIEKF@CKR_FUNCTION_REJECTED?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_0BG@GCNMIEKF@CKR_FUNCTION_REJECTED?$AA@ DB 'CKR_FUNCTION_REJECTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IBMCNMKC@CKR_NEXT_OTP?$AA@
CONST	SEGMENT
??_C@_0N@IBMCNMKC@CKR_NEXT_OTP?$AA@ DB 'CKR_NEXT_OTP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NJDNOJFN@CKR_NEW_PIN_MODE?$AA@
CONST	SEGMENT
??_C@_0BB@NJDNOJFN@CKR_NEW_PIN_MODE?$AA@ DB 'CKR_NEW_PIN_MODE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NLNAHNBM@CKR_MUTEX_NOT_LOCKED?$AA@
CONST	SEGMENT
??_C@_0BF@NLNAHNBM@CKR_MUTEX_NOT_LOCKED?$AA@ DB 'CKR_MUTEX_NOT_LOCKED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GIMOJHGA@CKR_MUTEX_BAD?$AA@
CONST	SEGMENT
??_C@_0O@GIMOJHGA@CKR_MUTEX_BAD?$AA@ DB 'CKR_MUTEX_BAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JBBGANIO@CKR_CRYPTOKI_ALREADY_INITIALIZED@
CONST	SEGMENT
??_C@_0CB@JBBGANIO@CKR_CRYPTOKI_ALREADY_INITIALIZED@ DB 'CKR_CRYPTOKI_ALR'
	DB	'EADY_INITIALIZED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@ODFNBLKM@CKR_CRYPTOKI_NOT_INITIALIZED?$AA@
CONST	SEGMENT
??_C@_0BN@ODFNBLKM@CKR_CRYPTOKI_NOT_INITIALIZED?$AA@ DB 'CKR_CRYPTOKI_NOT'
	DB	'_INITIALIZED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EAMMCHLP@CKR_STATE_UNSAVEABLE?$AA@
CONST	SEGMENT
??_C@_0BF@EAMMCHLP@CKR_STATE_UNSAVEABLE?$AA@ DB 'CKR_STATE_UNSAVEABLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NJDKONLD@CKR_INFORMATION_SENSITIVE?$AA@
CONST	SEGMENT
??_C@_0BK@NJDKONLD@CKR_INFORMATION_SENSITIVE?$AA@ DB 'CKR_INFORMATION_SEN'
	DB	'SITIVE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JPLEOJGD@CKR_SAVED_STATE_INVALID?$AA@
CONST	SEGMENT
??_C@_0BI@JPLEOJGD@CKR_SAVED_STATE_INVALID?$AA@ DB 'CKR_SAVED_STATE_INVAL'
	DB	'ID', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DHOMKFCE@CKR_BUFFER_TOO_SMALL?$AA@
CONST	SEGMENT
??_C@_0BF@DHOMKFCE@CKR_BUFFER_TOO_SMALL?$AA@ DB 'CKR_BUFFER_TOO_SMALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MMHDGADE@CKR_DOMAIN_PARAMS_INVALID?$AA@
CONST	SEGMENT
??_C@_0BK@MMHDGADE@CKR_DOMAIN_PARAMS_INVALID?$AA@ DB 'CKR_DOMAIN_PARAMS_I'
	DB	'NVALID', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JEFNGGNK@CKR_RANDOM_NO_RNG?$AA@
CONST	SEGMENT
??_C@_0BC@JEFNGGNK@CKR_RANDOM_NO_RNG?$AA@ DB 'CKR_RANDOM_NO_RNG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GILEANPO@CKR_RANDOM_SEED_NOT_SUPPORTED?$AA@
CONST	SEGMENT
??_C@_0BO@GILEANPO@CKR_RANDOM_SEED_NOT_SUPPORTED?$AA@ DB 'CKR_RANDOM_SEED'
	DB	'_NOT_SUPPORTED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FOJGMFK@CKR_WRAPPING_KEY_TYPE_INCONSISTE@
CONST	SEGMENT
??_C@_0CD@FOJGMFK@CKR_WRAPPING_KEY_TYPE_INCONSISTE@ DB 'CKR_WRAPPING_KEY_'
	DB	'TYPE_INCONSISTENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OCCHBGKK@CKR_WRAPPING_KEY_SIZE_RANGE?$AA@
CONST	SEGMENT
??_C@_0BM@OCCHBGKK@CKR_WRAPPING_KEY_SIZE_RANGE?$AA@ DB 'CKR_WRAPPING_KEY_'
	DB	'SIZE_RANGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DLBMIHED@CKR_WRAPPING_KEY_HANDLE_INVALID?$AA@
CONST	SEGMENT
??_C@_0CA@DLBMIHED@CKR_WRAPPING_KEY_HANDLE_INVALID?$AA@ DB 'CKR_WRAPPING_'
	DB	'KEY_HANDLE_INVALID', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MCPGJNEM@CKR_WRAPPED_KEY_LEN_RANGE?$AA@
CONST	SEGMENT
??_C@_0BK@MCPGJNEM@CKR_WRAPPED_KEY_LEN_RANGE?$AA@ DB 'CKR_WRAPPED_KEY_LEN'
	DB	'_RANGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CPLHFH@CKR_WRAPPED_KEY_INVALID?$AA@
CONST	SEGMENT
??_C@_0BI@CPLHFH@CKR_WRAPPED_KEY_INVALID?$AA@ DB 'CKR_WRAPPED_KEY_INVALID'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MGNIFGMM@CKR_USER_TOO_MANY_TYPES?$AA@
CONST	SEGMENT
??_C@_0BI@MGNIFGMM@CKR_USER_TOO_MANY_TYPES?$AA@ DB 'CKR_USER_TOO_MANY_TYP'
	DB	'ES', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@GJCCPLNL@CKR_USER_ANOTHER_ALREADY_LOGGED_@
CONST	SEGMENT
??_C@_0CD@GJCCPLNL@CKR_USER_ANOTHER_ALREADY_LOGGED_@ DB 'CKR_USER_ANOTHER'
	DB	'_ALREADY_LOGGED_IN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ECPOFDO@CKR_USER_TYPE_INVALID?$AA@
CONST	SEGMENT
??_C@_0BG@ECPOFDO@CKR_USER_TYPE_INVALID?$AA@ DB 'CKR_USER_TYPE_INVALID', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CJFMMEDO@CKR_USER_PIN_NOT_INITIALIZED?$AA@
CONST	SEGMENT
??_C@_0BN@CJFMMEDO@CKR_USER_PIN_NOT_INITIALIZED?$AA@ DB 'CKR_USER_PIN_NOT'
	DB	'_INITIALIZED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PHIJDFPC@CKR_USER_NOT_LOGGED_IN?$AA@
CONST	SEGMENT
??_C@_0BH@PHIJDFPC@CKR_USER_NOT_LOGGED_IN?$AA@ DB 'CKR_USER_NOT_LOGGED_IN'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HHCLDMIB@CKR_USER_ALREADY_LOGGED_IN?$AA@
CONST	SEGMENT
??_C@_0BL@HHCLDMIB@CKR_USER_ALREADY_LOGGED_IN?$AA@ DB 'CKR_USER_ALREADY_L'
	DB	'OGGED_IN', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FNADNHJM@CKR_UNWRAPPING_KEY_TYPE_INCONSIS@
CONST	SEGMENT
??_C@_0CF@FNADNHJM@CKR_UNWRAPPING_KEY_TYPE_INCONSIS@ DB 'CKR_UNWRAPPING_K'
	DB	'EY_TYPE_INCONSISTENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EDNGDMCF@CKR_UNWRAPPING_KEY_SIZE_RANGE?$AA@
CONST	SEGMENT
??_C@_0BO@EDNGDMCF@CKR_UNWRAPPING_KEY_SIZE_RANGE?$AA@ DB 'CKR_UNWRAPPING_'
	DB	'KEY_SIZE_RANGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BHIKKBJK@CKR_UNWRAPPING_KEY_HANDLE_INVALI@
CONST	SEGMENT
??_C@_0CC@BHIKKBJK@CKR_UNWRAPPING_KEY_HANDLE_INVALI@ DB 'CKR_UNWRAPPING_K'
	DB	'EY_HANDLE_INVALID', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LICPHIEK@CKR_TOKEN_WRITE_PROTECTED?$AA@
CONST	SEGMENT
??_C@_0BK@LICPHIEK@CKR_TOKEN_WRITE_PROTECTED?$AA@ DB 'CKR_TOKEN_WRITE_PRO'
	DB	'TECTED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DKIDJOKM@CKR_TOKEN_NOT_RECOGNIZED?$AA@
CONST	SEGMENT
??_C@_0BJ@DKIDJOKM@CKR_TOKEN_NOT_RECOGNIZED?$AA@ DB 'CKR_TOKEN_NOT_RECOGN'
	DB	'IZED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GJCOFLCP@CKR_TOKEN_NOT_PRESENT?$AA@
CONST	SEGMENT
??_C@_0BG@GJCOFLCP@CKR_TOKEN_NOT_PRESENT?$AA@ DB 'CKR_TOKEN_NOT_PRESENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NFOMODKD@CKR_TEMPLATE_INCONSISTENT?$AA@
CONST	SEGMENT
??_C@_0BK@NFOMODKD@CKR_TEMPLATE_INCONSISTENT?$AA@ DB 'CKR_TEMPLATE_INCONS'
	DB	'ISTENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OKLBFCJN@CKR_TEMPLATE_INCOMPLETE?$AA@
CONST	SEGMENT
??_C@_0BI@OKLBFCJN@CKR_TEMPLATE_INCOMPLETE?$AA@ DB 'CKR_TEMPLATE_INCOMPLE'
	DB	'TE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BCEJLCCN@CKR_SIGNATURE_LEN_RANGE?$AA@
CONST	SEGMENT
??_C@_0BI@BCEJLCCN@CKR_SIGNATURE_LEN_RANGE?$AA@ DB 'CKR_SIGNATURE_LEN_RAN'
	DB	'GE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FJFGJBPL@CKR_SIGNATURE_INVALID?$AA@
CONST	SEGMENT
??_C@_0BG@FJFGJBPL@CKR_SIGNATURE_INVALID?$AA@ DB 'CKR_SIGNATURE_INVALID', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MOHOJDLI@CKR_SESSION_READ_WRITE_SO_EXISTS@
CONST	SEGMENT
??_C@_0CB@MOHOJDLI@CKR_SESSION_READ_WRITE_SO_EXISTS@ DB 'CKR_SESSION_READ'
	DB	'_WRITE_SO_EXISTS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FEECMDLD@CKR_SESSION_READ_ONLY_EXISTS?$AA@
CONST	SEGMENT
??_C@_0BN@FEECMDLD@CKR_SESSION_READ_ONLY_EXISTS?$AA@ DB 'CKR_SESSION_READ'
	DB	'_ONLY_EXISTS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CJEENIOI@CKR_SESSION_EXISTS?$AA@
CONST	SEGMENT
??_C@_0BD@CJEENIOI@CKR_SESSION_EXISTS?$AA@ DB 'CKR_SESSION_EXISTS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NACFPKBK@CKR_SESSION_READ_ONLY?$AA@
CONST	SEGMENT
??_C@_0BG@NACFPKBK@CKR_SESSION_READ_ONLY?$AA@ DB 'CKR_SESSION_READ_ONLY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CNJKDODF@CKR_SESSION_PARALLEL_NOT_SUPPORT@
CONST	SEGMENT
??_C@_0CD@CNJKDODF@CKR_SESSION_PARALLEL_NOT_SUPPORT@ DB 'CKR_SESSION_PARA'
	DB	'LLEL_NOT_SUPPORTED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JFEIAJEO@CKR_SESSION_HANDLE_INVALID?$AA@
CONST	SEGMENT
??_C@_0BL@JFEIAJEO@CKR_SESSION_HANDLE_INVALID?$AA@ DB 'CKR_SESSION_HANDLE'
	DB	'_INVALID', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GFNLAALM@CKR_SESSION_COUNT?$AA@
CONST	SEGMENT
??_C@_0BC@GFNLAALM@CKR_SESSION_COUNT?$AA@ DB 'CKR_SESSION_COUNT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EFPEBFCO@CKR_SESSION_CLOSED?$AA@
CONST	SEGMENT
??_C@_0BD@EFPEBFCO@CKR_SESSION_CLOSED?$AA@ DB 'CKR_SESSION_CLOSED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JGPCDBMN@CKR_PIN_LOCKED?$AA@
CONST	SEGMENT
??_C@_0P@JGPCDBMN@CKR_PIN_LOCKED?$AA@ DB 'CKR_PIN_LOCKED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PPOOFJBC@CKR_PIN_EXPIRED?$AA@
CONST	SEGMENT
??_C@_0BA@PPOOFJBC@CKR_PIN_EXPIRED?$AA@ DB 'CKR_PIN_EXPIRED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MEAAAEMN@CKR_PIN_LEN_RANGE?$AA@
CONST	SEGMENT
??_C@_0BC@MEAAAEMN@CKR_PIN_LEN_RANGE?$AA@ DB 'CKR_PIN_LEN_RANGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PDLKJELN@CKR_PIN_INVALID?$AA@
CONST	SEGMENT
??_C@_0BA@PDLKJELN@CKR_PIN_INVALID?$AA@ DB 'CKR_PIN_INVALID', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PIDGDJNE@CKR_PIN_INCORRECT?$AA@
CONST	SEGMENT
??_C@_0BC@PIDGDJNE@CKR_PIN_INCORRECT?$AA@ DB 'CKR_PIN_INCORRECT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NIGNIKB@CKR_OPERATION_NOT_INITIALIZED?$AA@
CONST	SEGMENT
??_C@_0BO@NIGNIKB@CKR_OPERATION_NOT_INITIALIZED?$AA@ DB 'CKR_OPERATION_NO'
	DB	'T_INITIALIZED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LACBDJFM@CKR_OPERATION_ACTIVE?$AA@
CONST	SEGMENT
??_C@_0BF@LACBDJFM@CKR_OPERATION_ACTIVE?$AA@ DB 'CKR_OPERATION_ACTIVE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NIGFIGL@CKR_OBJECT_HANDLE_INVALID?$AA@
CONST	SEGMENT
??_C@_0BK@NIGFIGL@CKR_OBJECT_HANDLE_INVALID?$AA@ DB 'CKR_OBJECT_HANDLE_IN'
	DB	'VALID', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NHMBLBHF@CKR_MECHANISM_PARAM_INVALID?$AA@
CONST	SEGMENT
??_C@_0BM@NHMBLBHF@CKR_MECHANISM_PARAM_INVALID?$AA@ DB 'CKR_MECHANISM_PAR'
	DB	'AM_INVALID', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FIBINAPL@CKR_MECHANISM_INVALID?$AA@
CONST	SEGMENT
??_C@_0BG@FIBINAPL@CKR_MECHANISM_INVALID?$AA@ DB 'CKR_MECHANISM_INVALID', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OIKHBDLJ@CKR_KEY_UNEXTRACTABLE?$AA@
CONST	SEGMENT
??_C@_0BG@OIKHBDLJ@CKR_KEY_UNEXTRACTABLE?$AA@ DB 'CKR_KEY_UNEXTRACTABLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IEKNAGOL@CKR_KEY_NOT_WRAPPABLE?$AA@
CONST	SEGMENT
??_C@_0BG@IEKNAGOL@CKR_KEY_NOT_WRAPPABLE?$AA@ DB 'CKR_KEY_NOT_WRAPPABLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PCNBFOEJ@CKR_KEY_FUNCTION_NOT_PERMITTED?$AA@
CONST	SEGMENT
??_C@_0BP@PCNBFOEJ@CKR_KEY_FUNCTION_NOT_PERMITTED?$AA@ DB 'CKR_KEY_FUNCTI'
	DB	'ON_NOT_PERMITTED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GCBGIGLD@CKR_KEY_INDIGESTIBLE?$AA@
CONST	SEGMENT
??_C@_0BF@GCBGIGLD@CKR_KEY_INDIGESTIBLE?$AA@ DB 'CKR_KEY_INDIGESTIBLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CIJPGKMN@CKR_KEY_NEEDED?$AA@
CONST	SEGMENT
??_C@_0P@CIJPGKMN@CKR_KEY_NEEDED?$AA@ DB 'CKR_KEY_NEEDED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PBNACHHM@CKR_KEY_CHANGED?$AA@
CONST	SEGMENT
??_C@_0BA@PBNACHHM@CKR_KEY_CHANGED?$AA@ DB 'CKR_KEY_CHANGED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CADJPHKC@CKR_KEY_NOT_NEEDED?$AA@
CONST	SEGMENT
??_C@_0BD@CADJPHKC@CKR_KEY_NOT_NEEDED?$AA@ DB 'CKR_KEY_NOT_NEEDED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FBLHAPGA@CKR_KEY_TYPE_INCONSISTENT?$AA@
CONST	SEGMENT
??_C@_0BK@FBLHAPGA@CKR_KEY_TYPE_INCONSISTENT?$AA@ DB 'CKR_KEY_TYPE_INCONS'
	DB	'ISTENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DCCEPOIK@CKR_KEY_SIZE_RANGE?$AA@
CONST	SEGMENT
??_C@_0BD@DCCEPOIK@CKR_KEY_SIZE_RANGE?$AA@ DB 'CKR_KEY_SIZE_RANGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JBCBCIHC@CKR_KEY_HANDLE_INVALID?$AA@
CONST	SEGMENT
??_C@_0BH@JBCBCIHC@CKR_KEY_HANDLE_INVALID?$AA@ DB 'CKR_KEY_HANDLE_INVALID'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FLCFPGMF@CKR_FUNCTION_NOT_SUPPORTED?$AA@
CONST	SEGMENT
??_C@_0BL@FLCFPGMF@CKR_FUNCTION_NOT_SUPPORTED?$AA@ DB 'CKR_FUNCTION_NOT_S'
	DB	'UPPORTED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CPMALGEH@CKR_FUNCTION_NOT_PARALLEL?$AA@
CONST	SEGMENT
??_C@_0BK@CPMALGEH@CKR_FUNCTION_NOT_PARALLEL?$AA@ DB 'CKR_FUNCTION_NOT_PA'
	DB	'RALLEL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GFNGJBLD@CKR_FUNCTION_CANCELED?$AA@
CONST	SEGMENT
??_C@_0BG@GFNGJBLD@CKR_FUNCTION_CANCELED?$AA@ DB 'CKR_FUNCTION_CANCELED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CHFIOLM@CKR_ENCRYPTED_DATA_LEN_RANGE?$AA@
CONST	SEGMENT
??_C@_0BN@CHFIOLM@CKR_ENCRYPTED_DATA_LEN_RANGE?$AA@ DB 'CKR_ENCRYPTED_DAT'
	DB	'A_LEN_RANGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HMMBAKLE@CKR_ENCRYPTED_DATA_INVALID?$AA@
CONST	SEGMENT
??_C@_0BL@HMMBAKLE@CKR_ENCRYPTED_DATA_INVALID?$AA@ DB 'CKR_ENCRYPTED_DATA'
	DB	'_INVALID', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CLPGKOPG@CKR_DEVICE_REMOVED?$AA@
CONST	SEGMENT
??_C@_0BD@CLPGKOPG@CKR_DEVICE_REMOVED?$AA@ DB 'CKR_DEVICE_REMOVED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EDKNPIJF@CKR_DEVICE_MEMORY?$AA@
CONST	SEGMENT
??_C@_0BC@EDKNPIJF@CKR_DEVICE_MEMORY?$AA@ DB 'CKR_DEVICE_MEMORY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OAEPJIAO@CKR_DEVICE_ERROR?$AA@
CONST	SEGMENT
??_C@_0BB@OAEPJIAO@CKR_DEVICE_ERROR?$AA@ DB 'CKR_DEVICE_ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BPCFCEOF@CKR_DATA_LEN_RANGE?$AA@
CONST	SEGMENT
??_C@_0BD@BPCFCEOF@CKR_DATA_LEN_RANGE?$AA@ DB 'CKR_DATA_LEN_RANGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HONBBNLK@CKR_DATA_INVALID?$AA@
CONST	SEGMENT
??_C@_0BB@HONBBNLK@CKR_DATA_INVALID?$AA@ DB 'CKR_DATA_INVALID', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LMONJDMA@CKR_ATTRIBUTE_VALUE_INVALID?$AA@
CONST	SEGMENT
??_C@_0BM@LMONJDMA@CKR_ATTRIBUTE_VALUE_INVALID?$AA@ DB 'CKR_ATTRIBUTE_VAL'
	DB	'UE_INVALID', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CJHMMHEH@CKR_ATTRIBUTE_TYPE_INVALID?$AA@
CONST	SEGMENT
??_C@_0BL@CJHMMHEH@CKR_ATTRIBUTE_TYPE_INVALID?$AA@ DB 'CKR_ATTRIBUTE_TYPE'
	DB	'_INVALID', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LPANBEIN@CKR_ATTRIBUTE_SENSITIVE?$AA@
CONST	SEGMENT
??_C@_0BI@LPANBEIN@CKR_ATTRIBUTE_SENSITIVE?$AA@ DB 'CKR_ATTRIBUTE_SENSITI'
	DB	'VE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IDDIMLAI@CKR_ATTRIBUTE_READ_ONLY?$AA@
CONST	SEGMENT
??_C@_0BI@IDDIMLAI@CKR_ATTRIBUTE_READ_ONLY?$AA@ DB 'CKR_ATTRIBUTE_READ_ON'
	DB	'LY', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OHMKMDKB@CKR_CANT_LOCK?$AA@
CONST	SEGMENT
??_C@_0O@OHMKMDKB@CKR_CANT_LOCK?$AA@ DB 'CKR_CANT_LOCK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NDINCBKJ@CKR_NEED_TO_CREATE_THREADS?$AA@
CONST	SEGMENT
??_C@_0BL@NDINCBKJ@CKR_NEED_TO_CREATE_THREADS?$AA@ DB 'CKR_NEED_TO_CREATE'
	DB	'_THREADS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KFPEOGN@CKR_NO_EVENT?$AA@
CONST	SEGMENT
??_C@_0N@KFPEOGN@CKR_NO_EVENT?$AA@ DB 'CKR_NO_EVENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LNHMJFHC@CKR_ARGUMENTS_BAD?$AA@
CONST	SEGMENT
??_C@_0BC@LNHMJFHC@CKR_ARGUMENTS_BAD?$AA@ DB 'CKR_ARGUMENTS_BAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DIFKEOGI@CKR_FUNCTION_FAILED?$AA@
CONST	SEGMENT
??_C@_0BE@DIFKEOGI@CKR_FUNCTION_FAILED?$AA@ DB 'CKR_FUNCTION_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BPPOLCIH@CKR_GENERAL_ERROR?$AA@
CONST	SEGMENT
??_C@_0BC@BPPOLCIH@CKR_GENERAL_ERROR?$AA@ DB 'CKR_GENERAL_ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FOAEJLLC@CKR_SLOT_ID_INVALID?$AA@
CONST	SEGMENT
??_C@_0BE@FOAEJLLC@CKR_SLOT_ID_INVALID?$AA@ DB 'CKR_SLOT_ID_INVALID', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HHDKGBBP@CKR_HOST_MEMORY?$AA@
CONST	SEGMENT
??_C@_0BA@HHDKGBBP@CKR_HOST_MEMORY?$AA@ DB 'CKR_HOST_MEMORY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JIDCKNME@CKR_CANCEL?$AA@
CONST	SEGMENT
??_C@_0L@JIDCKNME@CKR_CANCEL?$AA@ DB 'CKR_CANCEL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02MDDDDAID@0x?$AA@
CONST	SEGMENT
??_C@_02MDDDDAID@0x?$AA@ DB '0x', 00H			; `string'
CONST	ENDS
;	COMDAT ?ErrorStrings@?3???BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ@4QBU<unnamed-type-ErrorStrings>@?3???B12@QBE?AV34@XZ@B
CONST	SEGMENT
?ErrorStrings@?3???BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ@4QBU<unnamed-type-ErrorStrings>@?3???B12@QBE?AV34@XZ@B DD 01H ;  ?? ::B::XZ::`CipherShed::Pkcs11Exception::operator std::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`4'::QBU<unnamed-type-ErrorStrings>::std::XZ::`CipherShed::Pkcs11Exception::operator std::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`4'::ErrorStrings
	DD	FLAT:??_C@_0L@JIDCKNME@CKR_CANCEL?$AA@
	DD	02H
	DD	FLAT:??_C@_0BA@HHDKGBBP@CKR_HOST_MEMORY?$AA@
	DD	03H
	DD	FLAT:??_C@_0BE@FOAEJLLC@CKR_SLOT_ID_INVALID?$AA@
	DD	05H
	DD	FLAT:??_C@_0BC@BPPOLCIH@CKR_GENERAL_ERROR?$AA@
	DD	06H
	DD	FLAT:??_C@_0BE@DIFKEOGI@CKR_FUNCTION_FAILED?$AA@
	DD	07H
	DD	FLAT:??_C@_0BC@LNHMJFHC@CKR_ARGUMENTS_BAD?$AA@
	DD	08H
	DD	FLAT:??_C@_0N@KFPEOGN@CKR_NO_EVENT?$AA@
	DD	09H
	DD	FLAT:??_C@_0BL@NDINCBKJ@CKR_NEED_TO_CREATE_THREADS?$AA@
	DD	0aH
	DD	FLAT:??_C@_0O@OHMKMDKB@CKR_CANT_LOCK?$AA@
	DD	010H
	DD	FLAT:??_C@_0BI@IDDIMLAI@CKR_ATTRIBUTE_READ_ONLY?$AA@
	DD	011H
	DD	FLAT:??_C@_0BI@LPANBEIN@CKR_ATTRIBUTE_SENSITIVE?$AA@
	DD	012H
	DD	FLAT:??_C@_0BL@CJHMMHEH@CKR_ATTRIBUTE_TYPE_INVALID?$AA@
	DD	013H
	DD	FLAT:??_C@_0BM@LMONJDMA@CKR_ATTRIBUTE_VALUE_INVALID?$AA@
	DD	020H
	DD	FLAT:??_C@_0BB@HONBBNLK@CKR_DATA_INVALID?$AA@
	DD	021H
	DD	FLAT:??_C@_0BD@BPCFCEOF@CKR_DATA_LEN_RANGE?$AA@
	DD	030H
	DD	FLAT:??_C@_0BB@OAEPJIAO@CKR_DEVICE_ERROR?$AA@
	DD	031H
	DD	FLAT:??_C@_0BC@EDKNPIJF@CKR_DEVICE_MEMORY?$AA@
	DD	032H
	DD	FLAT:??_C@_0BD@CLPGKOPG@CKR_DEVICE_REMOVED?$AA@
	DD	040H
	DD	FLAT:??_C@_0BL@HMMBAKLE@CKR_ENCRYPTED_DATA_INVALID?$AA@
	DD	041H
	DD	FLAT:??_C@_0BN@CHFIOLM@CKR_ENCRYPTED_DATA_LEN_RANGE?$AA@
	DD	050H
	DD	FLAT:??_C@_0BG@GFNGJBLD@CKR_FUNCTION_CANCELED?$AA@
	DD	051H
	DD	FLAT:??_C@_0BK@CPMALGEH@CKR_FUNCTION_NOT_PARALLEL?$AA@
	DD	054H
	DD	FLAT:??_C@_0BL@FLCFPGMF@CKR_FUNCTION_NOT_SUPPORTED?$AA@
	DD	060H
	DD	FLAT:??_C@_0BH@JBCBCIHC@CKR_KEY_HANDLE_INVALID?$AA@
	DD	062H
	DD	FLAT:??_C@_0BD@DCCEPOIK@CKR_KEY_SIZE_RANGE?$AA@
	DD	063H
	DD	FLAT:??_C@_0BK@FBLHAPGA@CKR_KEY_TYPE_INCONSISTENT?$AA@
	DD	064H
	DD	FLAT:??_C@_0BD@CADJPHKC@CKR_KEY_NOT_NEEDED?$AA@
	DD	065H
	DD	FLAT:??_C@_0BA@PBNACHHM@CKR_KEY_CHANGED?$AA@
	DD	066H
	DD	FLAT:??_C@_0P@CIJPGKMN@CKR_KEY_NEEDED?$AA@
	DD	067H
	DD	FLAT:??_C@_0BF@GCBGIGLD@CKR_KEY_INDIGESTIBLE?$AA@
	DD	068H
	DD	FLAT:??_C@_0BP@PCNBFOEJ@CKR_KEY_FUNCTION_NOT_PERMITTED?$AA@
	DD	069H
	DD	FLAT:??_C@_0BG@IEKNAGOL@CKR_KEY_NOT_WRAPPABLE?$AA@
	DD	06aH
	DD	FLAT:??_C@_0BG@OIKHBDLJ@CKR_KEY_UNEXTRACTABLE?$AA@
	DD	070H
	DD	FLAT:??_C@_0BG@FIBINAPL@CKR_MECHANISM_INVALID?$AA@
	DD	071H
	DD	FLAT:??_C@_0BM@NHMBLBHF@CKR_MECHANISM_PARAM_INVALID?$AA@
	DD	082H
	DD	FLAT:??_C@_0BK@NIGFIGL@CKR_OBJECT_HANDLE_INVALID?$AA@
	DD	090H
	DD	FLAT:??_C@_0BF@LACBDJFM@CKR_OPERATION_ACTIVE?$AA@
	DD	091H
	DD	FLAT:??_C@_0BO@NIGNIKB@CKR_OPERATION_NOT_INITIALIZED?$AA@
	DD	0a0H
	DD	FLAT:??_C@_0BC@PIDGDJNE@CKR_PIN_INCORRECT?$AA@
	DD	0a1H
	DD	FLAT:??_C@_0BA@PDLKJELN@CKR_PIN_INVALID?$AA@
	DD	0a2H
	DD	FLAT:??_C@_0BC@MEAAAEMN@CKR_PIN_LEN_RANGE?$AA@
	DD	0a3H
	DD	FLAT:??_C@_0BA@PPOOFJBC@CKR_PIN_EXPIRED?$AA@
	DD	0a4H
	DD	FLAT:??_C@_0P@JGPCDBMN@CKR_PIN_LOCKED?$AA@
	DD	0b0H
	DD	FLAT:??_C@_0BD@EFPEBFCO@CKR_SESSION_CLOSED?$AA@
	DD	0b1H
	DD	FLAT:??_C@_0BC@GFNLAALM@CKR_SESSION_COUNT?$AA@
	DD	0b3H
	DD	FLAT:??_C@_0BL@JFEIAJEO@CKR_SESSION_HANDLE_INVALID?$AA@
	DD	0b4H
	DD	FLAT:??_C@_0CD@CNJKDODF@CKR_SESSION_PARALLEL_NOT_SUPPORT@
	DD	0b5H
	DD	FLAT:??_C@_0BG@NACFPKBK@CKR_SESSION_READ_ONLY?$AA@
	DD	0b6H
	DD	FLAT:??_C@_0BD@CJEENIOI@CKR_SESSION_EXISTS?$AA@
	DD	0b7H
	DD	FLAT:??_C@_0BN@FEECMDLD@CKR_SESSION_READ_ONLY_EXISTS?$AA@
	DD	0b8H
	DD	FLAT:??_C@_0CB@MOHOJDLI@CKR_SESSION_READ_WRITE_SO_EXISTS@
	DD	0c0H
	DD	FLAT:??_C@_0BG@FJFGJBPL@CKR_SIGNATURE_INVALID?$AA@
	DD	0c1H
	DD	FLAT:??_C@_0BI@BCEJLCCN@CKR_SIGNATURE_LEN_RANGE?$AA@
	DD	0d0H
	DD	FLAT:??_C@_0BI@OKLBFCJN@CKR_TEMPLATE_INCOMPLETE?$AA@
	DD	0d1H
	DD	FLAT:??_C@_0BK@NFOMODKD@CKR_TEMPLATE_INCONSISTENT?$AA@
	DD	0e0H
	DD	FLAT:??_C@_0BG@GJCOFLCP@CKR_TOKEN_NOT_PRESENT?$AA@
	DD	0e1H
	DD	FLAT:??_C@_0BJ@DKIDJOKM@CKR_TOKEN_NOT_RECOGNIZED?$AA@
	DD	0e2H
	DD	FLAT:??_C@_0BK@LICPHIEK@CKR_TOKEN_WRITE_PROTECTED?$AA@
	DD	0f0H
	DD	FLAT:??_C@_0CC@BHIKKBJK@CKR_UNWRAPPING_KEY_HANDLE_INVALI@
	DD	0f1H
	DD	FLAT:??_C@_0BO@EDNGDMCF@CKR_UNWRAPPING_KEY_SIZE_RANGE?$AA@
	DD	0f2H
	DD	FLAT:??_C@_0CF@FNADNHJM@CKR_UNWRAPPING_KEY_TYPE_INCONSIS@
	DD	0100H
	DD	FLAT:??_C@_0BL@HHCLDMIB@CKR_USER_ALREADY_LOGGED_IN?$AA@
	DD	0101H
	DD	FLAT:??_C@_0BH@PHIJDFPC@CKR_USER_NOT_LOGGED_IN?$AA@
	DD	0102H
	DD	FLAT:??_C@_0BN@CJFMMEDO@CKR_USER_PIN_NOT_INITIALIZED?$AA@
	DD	0103H
	DD	FLAT:??_C@_0BG@ECPOFDO@CKR_USER_TYPE_INVALID?$AA@
	DD	0104H
	DD	FLAT:??_C@_0CD@GJCCPLNL@CKR_USER_ANOTHER_ALREADY_LOGGED_@
	DD	0105H
	DD	FLAT:??_C@_0BI@MGNIFGMM@CKR_USER_TOO_MANY_TYPES?$AA@
	DD	0110H
	DD	FLAT:??_C@_0BI@CPLHFH@CKR_WRAPPED_KEY_INVALID?$AA@
	DD	0112H
	DD	FLAT:??_C@_0BK@MCPGJNEM@CKR_WRAPPED_KEY_LEN_RANGE?$AA@
	DD	0113H
	DD	FLAT:??_C@_0CA@DLBMIHED@CKR_WRAPPING_KEY_HANDLE_INVALID?$AA@
	DD	0114H
	DD	FLAT:??_C@_0BM@OCCHBGKK@CKR_WRAPPING_KEY_SIZE_RANGE?$AA@
	DD	0115H
	DD	FLAT:??_C@_0CD@FOJGMFK@CKR_WRAPPING_KEY_TYPE_INCONSISTE@
	DD	0120H
	DD	FLAT:??_C@_0BO@GILEANPO@CKR_RANDOM_SEED_NOT_SUPPORTED?$AA@
	DD	0121H
	DD	FLAT:??_C@_0BC@JEFNGGNK@CKR_RANDOM_NO_RNG?$AA@
	DD	0130H
	DD	FLAT:??_C@_0BK@MMHDGADE@CKR_DOMAIN_PARAMS_INVALID?$AA@
	DD	0150H
	DD	FLAT:??_C@_0BF@DHOMKFCE@CKR_BUFFER_TOO_SMALL?$AA@
	DD	0160H
	DD	FLAT:??_C@_0BI@JPLEOJGD@CKR_SAVED_STATE_INVALID?$AA@
	DD	0170H
	DD	FLAT:??_C@_0BK@NJDKONLD@CKR_INFORMATION_SENSITIVE?$AA@
	DD	0180H
	DD	FLAT:??_C@_0BF@EAMMCHLP@CKR_STATE_UNSAVEABLE?$AA@
	DD	0190H
	DD	FLAT:??_C@_0BN@ODFNBLKM@CKR_CRYPTOKI_NOT_INITIALIZED?$AA@
	DD	0191H
	DD	FLAT:??_C@_0CB@JBBGANIO@CKR_CRYPTOKI_ALREADY_INITIALIZED@
	DD	01a0H
	DD	FLAT:??_C@_0O@GIMOJHGA@CKR_MUTEX_BAD?$AA@
	DD	01a1H
	DD	FLAT:??_C@_0BF@NLNAHNBM@CKR_MUTEX_NOT_LOCKED?$AA@
	DD	01b0H
	DD	FLAT:??_C@_0BB@NJDNOJFN@CKR_NEW_PIN_MODE?$AA@
	DD	01b1H
	DD	FLAT:??_C@_0N@IBMCNMKC@CKR_NEXT_OTP?$AA@
	DD	0200H
	DD	FLAT:??_C@_0BG@GCNMIEKF@CKR_FUNCTION_REJECTED?$AA@
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
__ehfuncinfo$??BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
xdata$x	ENDS
;	COMDAT ??BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T194391 = -152						; size = 4
_s$ = -148						; size = 136
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
??BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CipherShed::Pkcs11Exception::operator std::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 565  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 9c 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+168]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002c	8b f1		 mov	 esi, ecx
  0002e	33 db		 xor	 ebx, ebx
  00030	89 5c 24 10	 mov	 DWORD PTR $T194391[esp+168], ebx

; 566  : 		if (ErrorCode == CKR_OK)

  00034	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00037	3b cb		 cmp	 ecx, ebx
  00039	75 19		 jne	 SHORT $LN5@basic_stri@9

; 567  : 			return string();

  0003b	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+164]
  00042	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH
  00049	89 58 14	 mov	 DWORD PTR [eax+20], ebx
  0004c	88 58 04	 mov	 BYTE PTR [eax+4], bl
  0004f	e9 e0 00 00 00	 jmp	 $LN6@basic_stri@9
$LN5@basic_stri@9:

; 568  : 
; 569  : 		static const struct
; 570  : 		{
; 571  : 			CK_RV ErrorCode;
; 572  : 			const char *ErrorString;
; 573  : 		} ErrorStrings[] =
; 574  : 		{
; 575  : #			define TC_TOKEN_ERR(CODE) { CODE, #CODE },
; 576  : 
; 577  : 			TC_TOKEN_ERR (CKR_CANCEL)
; 578  : 			TC_TOKEN_ERR (CKR_HOST_MEMORY)
; 579  : 			TC_TOKEN_ERR (CKR_SLOT_ID_INVALID)
; 580  : 			TC_TOKEN_ERR (CKR_GENERAL_ERROR)
; 581  : 			TC_TOKEN_ERR (CKR_FUNCTION_FAILED)
; 582  : 			TC_TOKEN_ERR (CKR_ARGUMENTS_BAD)
; 583  : 			TC_TOKEN_ERR (CKR_NO_EVENT)
; 584  : 			TC_TOKEN_ERR (CKR_NEED_TO_CREATE_THREADS)
; 585  : 			TC_TOKEN_ERR (CKR_CANT_LOCK)
; 586  : 			TC_TOKEN_ERR (CKR_ATTRIBUTE_READ_ONLY)
; 587  : 			TC_TOKEN_ERR (CKR_ATTRIBUTE_SENSITIVE)
; 588  : 			TC_TOKEN_ERR (CKR_ATTRIBUTE_TYPE_INVALID)
; 589  : 			TC_TOKEN_ERR (CKR_ATTRIBUTE_VALUE_INVALID)
; 590  : 			TC_TOKEN_ERR (CKR_DATA_INVALID)
; 591  : 			TC_TOKEN_ERR (CKR_DATA_LEN_RANGE)
; 592  : 			TC_TOKEN_ERR (CKR_DEVICE_ERROR)
; 593  : 			TC_TOKEN_ERR (CKR_DEVICE_MEMORY)
; 594  : 			TC_TOKEN_ERR (CKR_DEVICE_REMOVED)
; 595  : 			TC_TOKEN_ERR (CKR_ENCRYPTED_DATA_INVALID)
; 596  : 			TC_TOKEN_ERR (CKR_ENCRYPTED_DATA_LEN_RANGE)
; 597  : 			TC_TOKEN_ERR (CKR_FUNCTION_CANCELED)
; 598  : 			TC_TOKEN_ERR (CKR_FUNCTION_NOT_PARALLEL)
; 599  : 			TC_TOKEN_ERR (CKR_FUNCTION_NOT_SUPPORTED)
; 600  : 			TC_TOKEN_ERR (CKR_KEY_HANDLE_INVALID)
; 601  : 			TC_TOKEN_ERR (CKR_KEY_SIZE_RANGE)
; 602  : 			TC_TOKEN_ERR (CKR_KEY_TYPE_INCONSISTENT)
; 603  : 			TC_TOKEN_ERR (CKR_KEY_NOT_NEEDED)
; 604  : 			TC_TOKEN_ERR (CKR_KEY_CHANGED)
; 605  : 			TC_TOKEN_ERR (CKR_KEY_NEEDED)
; 606  : 			TC_TOKEN_ERR (CKR_KEY_INDIGESTIBLE)
; 607  : 			TC_TOKEN_ERR (CKR_KEY_FUNCTION_NOT_PERMITTED)
; 608  : 			TC_TOKEN_ERR (CKR_KEY_NOT_WRAPPABLE)
; 609  : 			TC_TOKEN_ERR (CKR_KEY_UNEXTRACTABLE)
; 610  : 			TC_TOKEN_ERR (CKR_MECHANISM_INVALID)
; 611  : 			TC_TOKEN_ERR (CKR_MECHANISM_PARAM_INVALID)
; 612  : 			TC_TOKEN_ERR (CKR_OBJECT_HANDLE_INVALID)
; 613  : 			TC_TOKEN_ERR (CKR_OPERATION_ACTIVE)
; 614  : 			TC_TOKEN_ERR (CKR_OPERATION_NOT_INITIALIZED)
; 615  : 			TC_TOKEN_ERR (CKR_PIN_INCORRECT)
; 616  : 			TC_TOKEN_ERR (CKR_PIN_INVALID)
; 617  : 			TC_TOKEN_ERR (CKR_PIN_LEN_RANGE)
; 618  : 			TC_TOKEN_ERR (CKR_PIN_EXPIRED)
; 619  : 			TC_TOKEN_ERR (CKR_PIN_LOCKED)
; 620  : 			TC_TOKEN_ERR (CKR_SESSION_CLOSED)
; 621  : 			TC_TOKEN_ERR (CKR_SESSION_COUNT)
; 622  : 			TC_TOKEN_ERR (CKR_SESSION_HANDLE_INVALID)
; 623  : 			TC_TOKEN_ERR (CKR_SESSION_PARALLEL_NOT_SUPPORTED)
; 624  : 			TC_TOKEN_ERR (CKR_SESSION_READ_ONLY)
; 625  : 			TC_TOKEN_ERR (CKR_SESSION_EXISTS)
; 626  : 			TC_TOKEN_ERR (CKR_SESSION_READ_ONLY_EXISTS)
; 627  : 			TC_TOKEN_ERR (CKR_SESSION_READ_WRITE_SO_EXISTS)
; 628  : 			TC_TOKEN_ERR (CKR_SIGNATURE_INVALID)
; 629  : 			TC_TOKEN_ERR (CKR_SIGNATURE_LEN_RANGE)
; 630  : 			TC_TOKEN_ERR (CKR_TEMPLATE_INCOMPLETE)
; 631  : 			TC_TOKEN_ERR (CKR_TEMPLATE_INCONSISTENT)
; 632  : 			TC_TOKEN_ERR (CKR_TOKEN_NOT_PRESENT)
; 633  : 			TC_TOKEN_ERR (CKR_TOKEN_NOT_RECOGNIZED)
; 634  : 			TC_TOKEN_ERR (CKR_TOKEN_WRITE_PROTECTED)
; 635  : 			TC_TOKEN_ERR (CKR_UNWRAPPING_KEY_HANDLE_INVALID)
; 636  : 			TC_TOKEN_ERR (CKR_UNWRAPPING_KEY_SIZE_RANGE)
; 637  : 			TC_TOKEN_ERR (CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT)
; 638  : 			TC_TOKEN_ERR (CKR_USER_ALREADY_LOGGED_IN)
; 639  : 			TC_TOKEN_ERR (CKR_USER_NOT_LOGGED_IN)
; 640  : 			TC_TOKEN_ERR (CKR_USER_PIN_NOT_INITIALIZED)
; 641  : 			TC_TOKEN_ERR (CKR_USER_TYPE_INVALID)
; 642  : 			TC_TOKEN_ERR (CKR_USER_ANOTHER_ALREADY_LOGGED_IN)
; 643  : 			TC_TOKEN_ERR (CKR_USER_TOO_MANY_TYPES)
; 644  : 			TC_TOKEN_ERR (CKR_WRAPPED_KEY_INVALID)
; 645  : 			TC_TOKEN_ERR (CKR_WRAPPED_KEY_LEN_RANGE)
; 646  : 			TC_TOKEN_ERR (CKR_WRAPPING_KEY_HANDLE_INVALID)
; 647  : 			TC_TOKEN_ERR (CKR_WRAPPING_KEY_SIZE_RANGE)
; 648  : 			TC_TOKEN_ERR (CKR_WRAPPING_KEY_TYPE_INCONSISTENT)
; 649  : 			TC_TOKEN_ERR (CKR_RANDOM_SEED_NOT_SUPPORTED)
; 650  : 			TC_TOKEN_ERR (CKR_RANDOM_NO_RNG)
; 651  : 			TC_TOKEN_ERR (CKR_DOMAIN_PARAMS_INVALID)
; 652  : 			TC_TOKEN_ERR (CKR_BUFFER_TOO_SMALL)
; 653  : 			TC_TOKEN_ERR (CKR_SAVED_STATE_INVALID)
; 654  : 			TC_TOKEN_ERR (CKR_INFORMATION_SENSITIVE)
; 655  : 			TC_TOKEN_ERR (CKR_STATE_UNSAVEABLE)
; 656  : 			TC_TOKEN_ERR (CKR_CRYPTOKI_NOT_INITIALIZED)
; 657  : 			TC_TOKEN_ERR (CKR_CRYPTOKI_ALREADY_INITIALIZED)
; 658  : 			TC_TOKEN_ERR (CKR_MUTEX_BAD)
; 659  : 			TC_TOKEN_ERR (CKR_MUTEX_NOT_LOCKED)
; 660  : 			TC_TOKEN_ERR (CKR_NEW_PIN_MODE)
; 661  : 			TC_TOKEN_ERR (CKR_NEXT_OTP)
; 662  : 			TC_TOKEN_ERR (CKR_FUNCTION_REJECTED)
; 663  : 
; 664  : #undef		TC_TOKEN_ERR
; 665  : 		};
; 666  : 
; 667  : 
; 668  : 		for (size_t i = 0; i < array_capacity (ErrorStrings); ++i)

  00054	33 c0		 xor	 eax, eax
  00056	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL4@basic_stri@9:

; 669  : 		{
; 670  : 			if (ErrorStrings[i].ErrorCode == ErrorCode)

  00060	39 0c c5 00 00
	00 00		 cmp	 DWORD PTR ?ErrorStrings@?3???BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ@4QBU<unnamed-type-ErrorStrings>@?3???B12@QBE?AV34@XZ@B[eax*8], ecx
  00067	74 34		 je	 SHORT $LN97@basic_stri@9
  00069	03 c7		 add	 eax, edi
  0006b	83 f8 56	 cmp	 eax, 86			; 00000056H
  0006e	72 f0		 jb	 SHORT $LL4@basic_stri@9

; 672  : 		}
; 673  : 
; 674  : 		stringstream s;

  00070	57		 push	 edi
  00071	6a 03		 push	 3
  00073	8d 4c 24 1c	 lea	 ecx, DWORD PTR _s$[esp+176]
  00077	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >

; 675  : 		s << "0x" << hex << ErrorCode;

  0007c	8d 44 24 1c	 lea	 eax, DWORD PTR _s$[esp+176]
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_02MDDDDAID@0x?$AA@
  00085	50		 push	 eax
  00086	89 bc 24 ac 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+184], edi
  0008d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00092	83 c4 08	 add	 esp, 8
  00095	3b c3		 cmp	 eax, ebx
  00097	75 3b		 jne	 SHORT $LN83@basic_stri@9
  00099	33 d2		 xor	 edx, edx
  0009b	eb 3e		 jmp	 SHORT $LN84@basic_stri@9
$LN97@basic_stri@9:

; 671  : 				return ErrorStrings[i].ErrorString;

  0009d	8b 0c c5 04 00
	00 00		 mov	 ecx, DWORD PTR ?ErrorStrings@?3???BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ@4QBU<unnamed-type-ErrorStrings>@?3???B12@QBE?AV34@XZ@B[eax*8+4]
  000a4	8b b4 24 ac 00
	00 00		 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+164]
  000ab	8b c1		 mov	 eax, ecx
  000ad	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  000b4	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  000b7	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  000ba	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  000bd	8d 49 00	 npad	 3
$LL99@basic_stri@9:
  000c0	8a 10		 mov	 dl, BYTE PTR [eax]
  000c2	40		 inc	 eax
  000c3	3a d3		 cmp	 dl, bl
  000c5	75 f9		 jne	 SHORT $LL99@basic_stri@9
  000c7	2b c7		 sub	 eax, edi
  000c9	50		 push	 eax
  000ca	51		 push	 ecx
  000cb	8b ce		 mov	 ecx, esi
  000cd	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000d2	eb 5e		 jmp	 SHORT $LN101@basic_stri@9

; 675  : 		s << "0x" << hex << ErrorCode;

$LN83@basic_stri@9:
  000d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d6	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d9	03 d0		 add	 edx, eax
$LN84@basic_stri@9:
  000db	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  000de	81 e1 ff f9 ff
	ff		 and	 ecx, -1537		; fffff9ffH
  000e4	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  000ea	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  000ed	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000f0	52		 push	 edx
  000f1	8b c8		 mov	 ecx, eax
  000f3	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 676  : 		return s.str();

  000f8	8b b4 24 ac 00
	00 00		 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+164]
  000ff	56		 push	 esi
  00100	8d 4c 24 18	 lea	 ecx, DWORD PTR _s$[esp+172]
  00104	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00109	8d 4c 24 68	 lea	 ecx, DWORD PTR _s$[esp+252]
  0010d	89 7c 24 10	 mov	 DWORD PTR $T194391[esp+168], edi
  00111	88 9c 24 a4 00
	00 00		 mov	 BYTE PTR __$EHRec$[esp+176], bl
  00118	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0011d	8d 44 24 68	 lea	 eax, DWORD PTR _s$[esp+252]
  00121	50		 push	 eax
  00122	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR _s$[esp+256], OFFSET ??_7ios_base@std@@6B@
  0012a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0012f	83 c4 04	 add	 esp, 4
$LN101@basic_stri@9:
  00132	8b c6		 mov	 eax, esi
$LN6@basic_stri@9:

; 677  : 
; 678  : 	}

  00134	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+168]
  0013b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00142	59		 pop	 ecx
  00143	5f		 pop	 edi
  00144	5e		 pop	 esi
  00145	5b		 pop	 ebx
  00146	81 c4 98 00 00
	00		 add	 esp, 152		; 00000098H
  0014c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
  00000	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR $T194391[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 0f 00 00
	00		 je	 $LN11@basic_stri@9
  0000f	83 a5 68 ff ff
	ff fe		 and	 DWORD PTR $T194391[ebp], -2 ; fffffffeH
  00016	8b 4d 04	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp-4]
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN11@basic_stri@9:
  0001e	c3		 ret	 0
__unwindfunclet$??BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
  0001f	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  00025	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__ehhandler$??BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
  0002a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002e	8d 82 68 ff ff
	ff		 lea	 eax, DWORD PTR [edx-152]
  00034	8b 8a 64 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-156]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00046	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CipherShed::Pkcs11Exception::operator std::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_C@_1BK@FLCMNAGD@?$AA?6?$AA?6?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAo?$AAd?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@PNNJJJBG@?$AA?$CF?$AAs?$AA?3?$AA?6?$AA?6?$AA?$CF?$AAh?$AAs?$AA?$CF?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BF@NKGFDJIN@SECURITY_TOKEN_ERROR?$AA@	; `string'
PUBLIC	??_C@_04DIIAEOAC@CKR_?$AA@			; `string'
PUBLIC	??_C@_15ELOONFKJ@?$AA?3?$AA?5?$AA?$AA@		; `string'
PUBLIC	__$ArrayPad$
EXTRN	_ErrorDirect:PROC
EXTRN	__imp__wsprintfW:PROC
EXTRN	_GetString:PROC
EXTRN	_GetDictionaryValue:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_1BK@FLCMNAGD@?$AA?6?$AA?6?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAo?$AAd?$AAe?$AA?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_1BK@FLCMNAGD@?$AA?6?$AA?6?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAo?$AAd?$AAe?$AA?$AA@ DB 0aH
	DB	00H, 0aH, 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@PNNJJJBG@?$AA?$CF?$AAs?$AA?3?$AA?6?$AA?6?$AA?$CF?$AAh?$AAs?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@PNNJJJBG@?$AA?$CF?$AAs?$AA?3?$AA?6?$AA?6?$AA?$CF?$AAh?$AAs?$AA?$CF?$AAs?$AA?$AA@ DB '%'
	DB	00H, 's', 00H, ':', 00H, 0aH, 00H, 0aH, 00H, '%', 00H, 'h', 00H
	DB	's', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NKGFDJIN@SECURITY_TOKEN_ERROR?$AA@
CONST	SEGMENT
??_C@_0BF@NKGFDJIN@SECURITY_TOKEN_ERROR?$AA@ DB 'SECURITY_TOKEN_ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DIIAEOAC@CKR_?$AA@
CONST	SEGMENT
??_C@_04DIIAEOAC@CKR_?$AA@ DB 'CKR_', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_15ELOONFKJ@?$AA?3?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_15ELOONFKJ@?$AA?3?$AA?5?$AA?$AA@ DB ':', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z$7
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
xdata$x	ENDS
;	COMDAT ?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z
_TEXT	SEGMENT
$T194724 = -16676					; size = 28
$T194730 = -16648					; size = 28
$T194729 = -16620					; size = 28
_subjectErrorCode$126564 = -16592			; size = 136
_errorString$ = -16456					; size = 28
_err$126581 = -16428					; size = 28
$T194728 = -16428					; size = 28
$T194727 = -16428					; size = 28
_err$126576 = -16400					; size = 16384
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_parent$ = 8						; size = 4
?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z PROC ; CipherShed::Pkcs11Exception::Show, COMDAT
; _this$ = ecx

; 682  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	b8 18 41 00 00	 mov	 eax, 16664		; 00004118H
  00013	e8 00 00 00 00	 call	 __chkstk
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c4		 xor	 eax, esp
  0001f	89 84 24 14 41
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+16676], eax
  00026	53		 push	 ebx
  00027	55		 push	 ebp
  00028	56		 push	 esi
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c4		 xor	 eax, esp
  00030	50		 push	 eax
  00031	8d 84 24 28 41
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+16692]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 683  : 		string errorString = string (*this);

  0003e	8d 44 24 10	 lea	 eax, DWORD PTR $T194724[esp+16692]
  00042	50		 push	 eax
  00043	8b f1		 mov	 esi, ecx
  00045	e8 00 00 00 00	 call	 ??BPkcs11Exception@CipherShed@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CipherShed::Pkcs11Exception::operator std::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0004a	33 db		 xor	 ebx, ebx
  0004c	6a ff		 push	 -1
  0004e	53		 push	 ebx
  0004f	8d 4c 24 18	 lea	 ecx, DWORD PTR $T194724[esp+16700]
  00053	51		 push	 ecx
  00054	8d 8c 24 f8 00
	00 00		 lea	 ecx, DWORD PTR _errorString$[esp+16704]
  0005b	89 9c 24 3c 41
	00 00		 mov	 DWORD PTR __$EHRec$[esp+16712], ebx
  00062	c7 84 24 10 01
	00 00 0f 00 00
	00		 mov	 DWORD PTR _errorString$[esp+16728], 15 ; 0000000fH
  0006d	89 9c 24 0c 01
	00 00		 mov	 DWORD PTR _errorString$[esp+16724], ebx
  00074	88 9c 24 fc 00
	00 00		 mov	 BYTE PTR _errorString$[esp+16708], bl
  0007b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00080	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  00085	c6 84 24 30 41
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+16700], 2
  0008d	39 6c 24 28	 cmp	 DWORD PTR $T194724[esp+16716], ebp
  00091	72 0d		 jb	 SHORT $LN65@Show@3
  00093	8b 54 24 14	 mov	 edx, DWORD PTR $T194724[esp+16696]
  00097	52		 push	 edx
  00098	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009d	83 c4 04	 add	 esp, 4
$LN65@Show@3:
  000a0	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T194724[esp+16716], 15 ; 0000000fH
  000a8	89 5c 24 24	 mov	 DWORD PTR $T194724[esp+16712], ebx
  000ac	88 5c 24 14	 mov	 BYTE PTR $T194724[esp+16696], bl

; 684  : 
; 685  : 		if (!errorString.empty())

  000b0	39 9c 24 00 01
	00 00		 cmp	 DWORD PTR _errorString$[esp+16712], ebx
  000b7	0f 84 bf 02 00
	00		 je	 $LN222@Show@3

; 686  : 		{
; 687  : 			wstringstream subjectErrorCode;

  000bd	6a 01		 push	 1
  000bf	6a 03		 push	 3
  000c1	8d 4c 24 6c	 lea	 ecx, DWORD PTR _subjectErrorCode$126564[esp+16700]
  000c5	e8 00 00 00 00	 call	 ??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000ca	c6 84 24 30 41
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+16700], 3

; 688  : 			if (SubjectErrorCodeValid)

  000d2	38 5e 08	 cmp	 BYTE PTR [esi+8], bl
  000d5	74 21		 je	 SHORT $LN9@Show@3

; 689  : 				subjectErrorCode << L": " << SubjectErrorCode;

  000d7	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000da	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000dd	50		 push	 eax
  000de	51		 push	 ecx
  000df	8d 54 24 74	 lea	 edx, DWORD PTR _subjectErrorCode$126564[esp+16708]
  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_15ELOONFKJ@?$AA?3?$AA?5?$AA?$AA@
  000e8	52		 push	 edx
  000e9	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
  000ee	83 c4 08	 add	 esp, 8
  000f1	8b c8		 mov	 ecx, eax
  000f3	e8 00 00 00 00	 call	 ??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_K@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<
$LN9@Show@3:

; 690  : 
; 691  : 			if (!GetDictionaryValue (errorString.c_str()))

  000f8	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR _errorString$[esp+16696]
  000ff	39 ac 24 04 01
	00 00		 cmp	 DWORD PTR _errorString$[esp+16716], ebp
  00106	73 07		 jae	 SHORT $LN82@Show@3
  00108	8d 84 24 f0 00
	00 00		 lea	 eax, DWORD PTR _errorString$[esp+16696]
$LN82@Show@3:
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 _GetDictionaryValue
  00115	83 c4 04	 add	 esp, 4
  00118	85 c0		 test	 eax, eax
  0011a	0f 85 62 01 00
	00		 jne	 $LN8@Show@3

; 692  : 			{
; 693  : 				if (errorString.find ("CKR_") == 0)

  00120	6a 04		 push	 4
  00122	53		 push	 ebx
  00123	68 00 00 00 00	 push	 OFFSET ??_C@_04DIIAEOAC@CKR_?$AA@
  00128	8d 8c 24 f8 00
	00 00		 lea	 ecx, DWORD PTR _errorString$[esp+16704]
  0012f	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00134	85 c0		 test	 eax, eax
  00136	0f 85 bb 00 00
	00		 jne	 $LN4@Show@3

; 694  : 				{
; 695  : 					errorString = errorString.substr (4);

  0013c	6a ff		 push	 -1
  0013e	6a 04		 push	 4
  00140	8d 84 24 10 01
	00 00		 lea	 eax, DWORD PTR $T194727[esp+16700]
  00147	50		 push	 eax
  00148	8d 8c 24 f8 00
	00 00		 lea	 ecx, DWORD PTR _errorString$[esp+16704]
  0014f	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  00154	6a ff		 push	 -1
  00156	53		 push	 ebx
  00157	50		 push	 eax
  00158	8d 8c 24 f8 00
	00 00		 lea	 ecx, DWORD PTR _errorString$[esp+16704]
  0015f	c6 84 24 3c 41
	00 00 04	 mov	 BYTE PTR __$EHRec$[esp+16712], 4
  00167	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0016c	c6 84 24 30 41
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+16700], 3
  00174	39 ac 24 20 01
	00 00		 cmp	 DWORD PTR $T194727[esp+16716], ebp
  0017b	72 10		 jb	 SHORT $LN107@Show@3
  0017d	8b 8c 24 0c 01
	00 00		 mov	 ecx, DWORD PTR $T194727[esp+16696]
  00184	51		 push	 ecx
  00185	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0018a	83 c4 04	 add	 esp, 4
$LN107@Show@3:

; 696  : 					for (size_t i = 0; i < errorString.size(); ++i)

  0018d	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR _errorString$[esp+16712]
  00194	33 f6		 xor	 esi, esi
  00196	3b cb		 cmp	 ecx, ebx
  00198	76 5d		 jbe	 SHORT $LN4@Show@3

; 697  : 					{
; 698  : 						if (errorString[i] == '_')

  0019a	3b f1		 cmp	 esi, ecx
  0019c	76 0c		 jbe	 SHORT $LN119@Show@3
  0019e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  001a3	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR _errorString$[esp+16712]
$LN119@Show@3:
  001aa	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR _errorString$[esp+16696]
  001b1	39 ac 24 04 01
	00 00		 cmp	 DWORD PTR _errorString$[esp+16716], ebp
  001b8	73 07		 jae	 SHORT $LN125@Show@3
  001ba	8d 84 24 f0 00
	00 00		 lea	 eax, DWORD PTR _errorString$[esp+16696]
$LN125@Show@3:
  001c1	80 3c 30 5f	 cmp	 BYTE PTR [eax+esi], 95	; 0000005fH
  001c5	75 2b		 jne	 SHORT $LN5@Show@3

; 699  : 							errorString[i] = ' ';

  001c7	3b f1		 cmp	 esi, ecx
  001c9	76 05		 jbe	 SHORT $LN126@Show@3
  001cb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN126@Show@3:
  001d0	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR _errorString$[esp+16696]
  001d7	39 ac 24 04 01
	00 00		 cmp	 DWORD PTR _errorString$[esp+16716], ebp
  001de	73 07		 jae	 SHORT $LN132@Show@3
  001e0	8d 84 24 f0 00
	00 00		 lea	 eax, DWORD PTR _errorString$[esp+16696]
$LN132@Show@3:
  001e7	c6 04 30 20	 mov	 BYTE PTR [eax+esi], 32	; 00000020H
  001eb	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR _errorString$[esp+16712]
$LN5@Show@3:
  001f2	46		 inc	 esi
  001f3	3b f1		 cmp	 esi, ecx
  001f5	72 b3		 jb	 SHORT $LN119@Show@3
$LN4@Show@3:

; 700  : 					}
; 701  : 				}
; 702  : 				wchar_t err[8192];
; 703  : 				wsprintfW (err, L"%s:\n\n%hs%s", GetString ("SECURITY_TOKEN_ERROR"), errorString.c_str(), subjectErrorCode.str().c_str());

  001f7	8d 94 24 08 01
	00 00		 lea	 edx, DWORD PTR $T194728[esp+16692]
  001fe	52		 push	 edx
  001ff	8d 4c 24 68	 lea	 ecx, DWORD PTR _subjectErrorCode$126564[esp+16696]
  00203	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
  00208	be 08 00 00 00	 mov	 esi, 8
  0020d	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  00210	72 05		 jb	 SHORT $LN137@Show@3
  00212	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00215	eb 03		 jmp	 SHORT $LN138@Show@3
$LN137@Show@3:
  00217	83 c0 04	 add	 eax, 4
$LN138@Show@3:
  0021a	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR _errorString$[esp+16696]
  00221	39 ac 24 04 01
	00 00		 cmp	 DWORD PTR _errorString$[esp+16716], ebp
  00228	73 07		 jae	 SHORT $LN144@Show@3
  0022a	8d 8c 24 f0 00
	00 00		 lea	 ecx, DWORD PTR _errorString$[esp+16696]
$LN144@Show@3:
  00231	50		 push	 eax
  00232	51		 push	 ecx
  00233	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@NKGFDJIN@SECURITY_TOKEN_ERROR?$AA@
  00238	e8 00 00 00 00	 call	 _GetString
  0023d	83 c4 04	 add	 esp, 4
  00240	50		 push	 eax
  00241	8d 84 24 30 01
	00 00		 lea	 eax, DWORD PTR _err$126576[esp+16704]
  00248	68 00 00 00 00	 push	 OFFSET ??_C@_1BG@PNNJJJBG@?$AA?$CF?$AAs?$AA?3?$AA?6?$AA?6?$AA?$CF?$AAh?$AAs?$AA?$CF?$AAs?$AA?$AA@
  0024d	50		 push	 eax
  0024e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  00254	83 c4 14	 add	 esp, 20			; 00000014H
  00257	39 b4 24 20 01
	00 00		 cmp	 DWORD PTR $T194728[esp+16716], esi
  0025e	72 10		 jb	 SHORT $LN163@Show@3
  00260	8b 8c 24 0c 01
	00 00		 mov	 ecx, DWORD PTR $T194728[esp+16696]
  00267	51		 push	 ecx
  00268	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0026d	83 c4 04	 add	 esp, 4
$LN163@Show@3:

; 704  : 				ErrorDirect (err);

  00270	8d 94 24 24 01
	00 00		 lea	 edx, DWORD PTR _err$126576[esp+16692]
  00277	52		 push	 edx
  00278	e8 00 00 00 00	 call	 _ErrorDirect

; 705  : 			}
; 706  : 			else

  0027d	e9 c8 00 00 00	 jmp	 $LN254@Show@3
$LN8@Show@3:

; 707  : 			{
; 708  : 				wstring err = GetString (errorString.c_str());

  00282	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR _errorString$[esp+16696]
  00289	39 ac 24 04 01
	00 00		 cmp	 DWORD PTR _errorString$[esp+16716], ebp
  00290	73 07		 jae	 SHORT $LN178@Show@3
  00292	8d 84 24 f0 00
	00 00		 lea	 eax, DWORD PTR _errorString$[esp+16696]
$LN178@Show@3:
  00299	50		 push	 eax
  0029a	e8 00 00 00 00	 call	 _GetString
  0029f	83 c4 04	 add	 esp, 4
  002a2	50		 push	 eax
  002a3	8d 8c 24 0c 01
	00 00		 lea	 ecx, DWORD PTR _err$126581[esp+16696]
  002aa	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  002af	c6 84 24 30 41
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+16700], 5

; 709  : 
; 710  : 				if (SubjectErrorCodeValid)

  002b7	38 5e 08	 cmp	 BYTE PTR [esi+8], bl
  002ba	74 53		 je	 SHORT $LN1@Show@3

; 711  : 					err += L"\n\nError code" + subjectErrorCode.str();

  002bc	8d 44 24 48	 lea	 eax, DWORD PTR $T194729[esp+16692]
  002c0	50		 push	 eax
  002c1	8d 4c 24 68	 lea	 ecx, DWORD PTR _subjectErrorCode$126564[esp+16696]
  002c5	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
  002ca	50		 push	 eax
  002cb	8d 4c 24 30	 lea	 ecx, DWORD PTR $T194730[esp+16696]
  002cf	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@FLCMNAGD@?$AA?6?$AA?6?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAo?$AAd?$AAe?$AA?$AA@
  002d4	51		 push	 ecx
  002d5	c6 84 24 3c 41
	00 00 06	 mov	 BYTE PTR __$EHRec$[esp+16712], 6
  002dd	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  002e2	83 c4 0c	 add	 esp, 12			; 0000000cH
  002e5	6a ff		 push	 -1
  002e7	53		 push	 ebx
  002e8	50		 push	 eax
  002e9	8d 8c 24 14 01
	00 00		 lea	 ecx, DWORD PTR _err$126581[esp+16704]
  002f0	c6 84 24 3c 41
	00 00 07	 mov	 BYTE PTR __$EHRec$[esp+16712], 7
  002f8	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  002fd	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T194730[esp+16692]
  00301	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00306	8d 4c 24 48	 lea	 ecx, DWORD PTR $T194729[esp+16692]
  0030a	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN1@Show@3:

; 712  : 
; 713  : 				ErrorDirect (err.c_str());

  0030f	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR _err$126581[esp+16696]
  00316	be 08 00 00 00	 mov	 esi, 8
  0031b	39 b4 24 20 01
	00 00		 cmp	 DWORD PTR _err$126581[esp+16716], esi
  00322	73 07		 jae	 SHORT $LN188@Show@3
  00324	8d 84 24 0c 01
	00 00		 lea	 eax, DWORD PTR _err$126581[esp+16696]
$LN188@Show@3:
  0032b	50		 push	 eax
  0032c	e8 00 00 00 00	 call	 _ErrorDirect
  00331	83 c4 04	 add	 esp, 4

; 714  : 			}

  00334	39 b4 24 20 01
	00 00		 cmp	 DWORD PTR _err$126581[esp+16716], esi
  0033b	72 10		 jb	 SHORT $LN207@Show@3
  0033d	8b 94 24 0c 01
	00 00		 mov	 edx, DWORD PTR _err$126581[esp+16696]
  00344	52		 push	 edx
  00345	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
$LN254@Show@3:
  0034a	83 c4 04	 add	 esp, 4
$LN207@Show@3:

; 715  : 		}

  0034d	8d 8c 24 b8 00
	00 00		 lea	 ecx, DWORD PTR _subjectErrorCode$126564[esp+16776]
  00354	c6 84 24 30 41
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+16700], 2
  0035c	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00361	8d 84 24 b8 00
	00 00		 lea	 eax, DWORD PTR _subjectErrorCode$126564[esp+16776]
  00368	50		 push	 eax
  00369	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _subjectErrorCode$126564[esp+16780], OFFSET ??_7ios_base@std@@6B@
  00374	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00379	83 c4 04	 add	 esp, 4
$LN222@Show@3:

; 716  : 	}

  0037c	39 ac 24 04 01
	00 00		 cmp	 DWORD PTR _errorString$[esp+16716], ebp
  00383	72 10		 jb	 SHORT $LN240@Show@3
  00385	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR _errorString$[esp+16696]
  0038c	51		 push	 ecx
  0038d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00392	83 c4 04	 add	 esp, 4
$LN240@Show@3:
  00395	8b 8c 24 28 41
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+16692]
  0039c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003a3	59		 pop	 ecx
  003a4	5e		 pop	 esi
  003a5	5d		 pop	 ebp
  003a6	5b		 pop	 ebx
  003a7	8b 8c 24 14 41
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16676]
  003ae	33 cc		 xor	 ecx, esp
  003b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003b5	81 c4 24 41 00
	00		 add	 esp, 16676		; 00004124H
  003bb	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z$0:
  00000	8d 8d dc be ff
	ff		 lea	 ecx, DWORD PTR $T194724[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z$1:
  0000b	8d 8d b8 bf ff
	ff		 lea	 ecx, DWORD PTR _errorString$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z$2:
  00016	8d 8d 30 bf ff
	ff		 lea	 ecx, DWORD PTR _subjectErrorCode$126564[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
__unwindfunclet$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z$3:
  00021	8d 8d d4 bf ff
	ff		 lea	 ecx, DWORD PTR $T194727[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z$5:
  0002c	8d 8d d4 bf ff
	ff		 lea	 ecx, DWORD PTR _err$126581[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z$6:
  00037	8d 8d 14 bf ff
	ff		 lea	 ecx, DWORD PTR $T194729[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z$7:
  00042	8d 8d f8 be ff
	ff		 lea	 ecx, DWORD PTR $T194730[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z:
  0004d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00051	8d 82 dc be ff
	ff		 lea	 eax, DWORD PTR [edx-16676]
  00057	8b 8a d8 be ff
	ff		 mov	 ecx, DWORD PTR [edx-16680]
  0005d	33 c8		 xor	 ecx, eax
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	83 c0 0c	 add	 eax, 12			; 0000000cH
  00067	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0006a	33 c8		 xor	 ecx, eax
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z
  00076	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Show@Pkcs11Exception@CipherShed@@UBEXPAUHWND__@@@Z ENDP ; CipherShed::Pkcs11Exception::Show
PUBLIC	__Val$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z$2
__catchsym$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z$0
__ehfuncinfo$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z$6
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z$7
__unwindtable$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z$4
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z
_TEXT	SEGMENT
__Ncopied$130451 = -40					; size = 4
_this$GSCopy$ = -36					; size = 4
__Newvec$130449 = -32					; size = 4
$T195987 = -28						; size = 1
$T195812 = -28						; size = 1
__Val$GSCopy$ = -28					; size = 4
tv581 = -24						; size = 4
__Cat$196034 = -24					; size = 1
__Cat$195991 = -24					; size = 1
__Cat$195816 = -24					; size = 1
__Whereoff$130450 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Tmp$130474 = 0					; size = 128
__Tmp$130464 = 128					; size = 128
__$ArrayPad$ = 256					; size = 4
__Where$ = 268						; size = 8
__Count$ = 276						; size = 4
__Val$ = 280						; size = 4
?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

  00000	55		 push	 ebp
  00001	8d ac 24 fc fe
	ff ff		 lea	 ebp, DWORD PTR [esp-260]
  00008	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 85 00 01 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002c	53		 push	 ebx
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1249 : 			}

  0003c	8b 85 18 01 00
	00		 mov	 eax, DWORD PTR __Val$[ebp]
  00042	8b f1		 mov	 esi, ecx
  00044	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00047	89 75 dc	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0004a	89 45 e4	 mov	 DWORD PTR __Val$GSCopy$[ebp], eax
  0004d	85 db		 test	 ebx, ebx
  0004f	75 04		 jne	 SHORT $LN31@Insert_n@3

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

  00051	33 c9		 xor	 ecx, ecx
  00053	eb 0a		 jmp	 SHORT $LN32@Insert_n@3
$LN31@Insert_n@3:
  00055	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00058	2b c3		 sub	 eax, ebx
  0005a	c1 f8 07	 sar	 eax, 7
  0005d	8b c8		 mov	 ecx, eax
$LN32@Insert_n@3:

; 1162 : 
; 1163 : 		if (_Count == 0)

  0005f	8b bd 14 01 00
	00		 mov	 edi, DWORD PTR __Count$[ebp]
  00065	85 ff		 test	 edi, edi
  00067	0f 84 9e 02 00
	00		 je	 $LN1@Insert_n@3

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

  0006d	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00070	8b c2		 mov	 eax, edx
  00072	2b c3		 sub	 eax, ebx
  00074	c1 f8 07	 sar	 eax, 7
  00077	bb ff ff ff 01	 mov	 ebx, 33554431		; 01ffffffH
  0007c	2b d8		 sub	 ebx, eax
  0007e	3b df		 cmp	 ebx, edi
  00080	73 05		 jae	 SHORT $LN12@Insert_n@3

; 1166 : 			_Xlen();	// result too long

  00082	e8 00 00 00 00	 call	 ?_Xlen@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@KAXXZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Xlen
$LN12@Insert_n@3:

; 1167 : 		else if (_Capacity < size() + _Count)

  00087	8d 1c 38	 lea	 ebx, DWORD PTR [eax+edi]
  0008a	3b cb		 cmp	 ecx, ebx
  0008c	0f 83 62 01 00
	00		 jae	 $LN10@Insert_n@3

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00092	8b c1		 mov	 eax, ecx
  00094	d1 e8		 shr	 eax, 1
  00096	ba ff ff ff 01	 mov	 edx, 33554431		; 01ffffffH
  0009b	2b d0		 sub	 edx, eax
  0009d	3b d1		 cmp	 edx, ecx
  0009f	73 0c		 jae	 SHORT $LN17@Insert_n@3
  000a1	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Capacity$[ebp], 0
  000a8	8b 4d ec	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  000ab	eb 05		 jmp	 SHORT $LN18@Insert_n@3
$LN17@Insert_n@3:
  000ad	03 c8		 add	 ecx, eax
  000af	89 4d ec	 mov	 DWORD PTR __Capacity$[ebp], ecx
$LN18@Insert_n@3:

; 1171 : 			if (_Capacity < size() + _Count)

  000b2	3b cb		 cmp	 ecx, ebx
  000b4	73 05		 jae	 SHORT $LN9@Insert_n@3

; 1172 : 				_Capacity = size() + _Count;

  000b6	89 5d ec	 mov	 DWORD PTR __Capacity$[ebp], ebx
  000b9	8b cb		 mov	 ecx, ebx
$LN9@Insert_n@3:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000bb	6a 00		 push	 0
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??$_Allocate@USecurityTokenKeyfile@CipherShed@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@IPAU12@@Z ; std::_Allocate<CipherShed::SecurityTokenKeyfile>

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

  000c3	8b 9d 10 01 00
	00		 mov	 ebx, DWORD PTR __Where$[ebp+4]
  000c9	2b 5e 0c	 sub	 ebx, DWORD PTR [esi+12]

; 1175 : 			int _Ncopied = 0;

  000cc	33 c9		 xor	 ecx, ecx
  000ce	83 c4 08	 add	 esp, 8
  000d1	c1 fb 07	 sar	 ebx, 7
  000d4	89 4d d8	 mov	 DWORD PTR __Ncopied$130451[ebp], ecx

; 1176 : 
; 1177 : 			_TRY_BEGIN

  000d7	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

  000da	8b 4d e4	 mov	 ecx, DWORD PTR __Val$GSCopy$[ebp]
  000dd	51		 push	 ecx
  000de	8b d3		 mov	 edx, ebx
  000e0	c1 e2 07	 shl	 edx, 7
  000e3	57		 push	 edi
  000e4	03 d0		 add	 edx, eax
  000e6	52		 push	 edx
  000e7	8b ce		 mov	 ecx, esi
  000e9	89 45 e0	 mov	 DWORD PTR __Newvec$130449[ebp], eax
  000ec	89 5d e8	 mov	 DWORD PTR __Whereoff$130450[ebp], ebx
  000ef	e8 00 00 00 00	 call	 ?_Ufill@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEPAUSecurityTokenKeyfile@CipherShed@@PAU34@IABU34@@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Ufill

; 1179 : 			++_Ncopied;
; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

  000f4	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000f7	c6 45 e4 00	 mov	 BYTE PTR $T195812[ebp], 0
  000fb	8b 55 e4	 mov	 edx, DWORD PTR $T195812[ebp]
  000fe	52		 push	 edx
  000ff	8b 55 e8	 mov	 edx, DWORD PTR __Cat$195816[ebp]
  00102	52		 push	 edx
  00103	8b 95 10 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  00109	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0010c	51		 push	 ecx
  0010d	8b 4d e0	 mov	 ecx, DWORD PTR __Newvec$130449[ebp]
  00110	51		 push	 ecx
  00111	52		 push	 edx
  00112	50		 push	 eax
  00113	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR __Ncopied$130451[ebp], 1
  0011a	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >

; 1182 : 			++_Ncopied;
; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

  0011f	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00122	83 c4 18	 add	 esp, 24			; 00000018H
  00125	c6 45 e4 00	 mov	 BYTE PTR $T195987[ebp], 0
  00129	8b 55 e4	 mov	 edx, DWORD PTR $T195987[ebp]
  0012c	52		 push	 edx
  0012d	8b 55 e8	 mov	 edx, DWORD PTR __Cat$195991[ebp]
  00130	52		 push	 edx
  00131	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  00134	8b 5d e0	 mov	 ebx, DWORD PTR __Newvec$130449[ebp]
  00137	c1 e0 07	 shl	 eax, 7
  0013a	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
  0013d	52		 push	 edx
  0013e	03 c3		 add	 eax, ebx
  00140	50		 push	 eax
  00141	8b 85 10 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  00147	51		 push	 ecx
  00148	50		 push	 eax
  00149	c7 45 d8 02 00
	00 00		 mov	 DWORD PTR __Ncopied$130451[ebp], 2
  00150	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUSecurityTokenKeyfile@CipherShed@@PAU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *,std::allocator<CipherShed::SecurityTokenKeyfile> >

; 1192 : 			_CATCH_END
; 1193 : 
; 1194 : 			_Count += size();

  00155	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00158	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0015b	2b c8		 sub	 ecx, eax
  0015d	c1 f9 07	 sar	 ecx, 7
  00160	83 c4 18	 add	 esp, 24			; 00000018H
  00163	03 f9		 add	 edi, ecx

; 1195 : 			if (_Myfirst != 0)

  00165	85 c0		 test	 eax, eax
  00167	74 1e		 je	 SHORT $LN121@Insert_n@3

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

  00169	8b 55 e8	 mov	 edx, DWORD PTR __Cat$196034[ebp]
  0016c	52		 push	 edx
  0016d	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00170	51		 push	 ecx
  00171	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00174	51		 push	 ecx
  00175	50		 push	 eax
  00176	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CipherShed::SecurityTokenKeyfile> >

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0017b	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0017e	52		 push	 edx
  0017f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00184	83 c4 14	 add	 esp, 20			; 00000014H
$LN121@Insert_n@3:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

  00187	8b 45 ec	 mov	 eax, DWORD PTR __Capacity$[ebp]
  0018a	c1 e0 07	 shl	 eax, 7
  0018d	03 c3		 add	 eax, ebx

; 1206 : 			_Mylast = _Newvec + _Count;

  0018f	c1 e7 07	 shl	 edi, 7
  00192	03 fb		 add	 edi, ebx
  00194	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00197	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 1207 : 			_Myfirst = _Newvec;

  0019a	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  0019d	e9 69 01 00 00	 jmp	 $LN1@Insert_n@3
__catch$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

  001a2	8b 5d d8	 mov	 ebx, DWORD PTR __Ncopied$130451[ebp]
  001a5	83 fb 01	 cmp	 ebx, 1

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

  001a8	8b 75 e8	 mov	 esi, DWORD PTR __Whereoff$130450[ebp]
  001ab	8b 7d e0	 mov	 edi, DWORD PTR __Newvec$130449[ebp]
  001ae	7e 11		 jle	 SHORT $LN7@Insert_n@3
  001b0	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001b3	8b c6		 mov	 eax, esi
  001b5	c1 e0 07	 shl	 eax, 7
  001b8	03 c7		 add	 eax, edi
  001ba	50		 push	 eax
  001bb	57		 push	 edi
  001bc	e8 00 00 00 00	 call	 ?_Destroy@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXPAUSecurityTokenKeyfile@CipherShed@@0@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Destroy
$LN7@Insert_n@3:

; 1188 : 			if (0 < _Ncopied)

  001c1	85 db		 test	 ebx, ebx
  001c3	7e 1d		 jle	 SHORT $LN6@Insert_n@3

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

  001c5	8b 8d 14 01 00
	00		 mov	 ecx, DWORD PTR __Count$[ebp]
  001cb	8d 14 0e	 lea	 edx, DWORD PTR [esi+ecx]
  001ce	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001d1	c1 e2 07	 shl	 edx, 7
  001d4	03 d7		 add	 edx, edi
  001d6	c1 e6 07	 shl	 esi, 7
  001d9	52		 push	 edx
  001da	03 f7		 add	 esi, edi
  001dc	56		 push	 esi
  001dd	e8 00 00 00 00	 call	 ?_Destroy@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXPAUSecurityTokenKeyfile@CipherShed@@0@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Destroy
$LN6@Insert_n@3:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

  001e2	57		 push	 edi
  001e3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001e8	83 c4 04	 add	 esp, 4

; 1191 : 			_RERAISE;

  001eb	6a 00		 push	 0
  001ed	6a 00		 push	 0
  001ef	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Insert_n@3:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

  001f4	2b 95 10 01 00
	00		 sub	 edx, DWORD PTR __Where$[ebp+4]

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

  001fa	8b 45 e4	 mov	 eax, DWORD PTR __Val$GSCopy$[ebp]
  001fd	c1 fa 07	 sar	 edx, 7
  00200	50		 push	 eax
  00201	3b d7		 cmp	 edx, edi
  00203	0f 83 a8 00 00
	00		 jae	 $LN3@Insert_n@3
  00209	8d 8d 80 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$130464[ebp]
  0020f	e8 00 00 00 00	 call	 ??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

  00214	8b 85 10 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  0021a	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0021d	8b df		 mov	 ebx, edi
  0021f	c1 e3 07	 shl	 ebx, 7
  00222	8d 0c 03	 lea	 ecx, DWORD PTR [ebx+eax]
  00225	51		 push	 ecx
  00226	52		 push	 edx
  00227	50		 push	 eax
  00228	8b ce		 mov	 ecx, esi
  0022a	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00231	e8 00 00 00 00	 call	 ??$_Umove@PAUSecurityTokenKeyfile@CipherShed@@@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEPAUSecurityTokenKeyfile@CipherShed@@PAU23@00@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Umove<CipherShed::SecurityTokenKeyfile *>

; 1215 : 
; 1216 : 			_TRY_BEGIN
; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

  00236	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00239	8b d0		 mov	 edx, eax
  0023b	2b 95 10 01 00
	00		 sub	 edx, DWORD PTR __Where$[ebp+4]
  00241	8d 8d 80 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$130464[ebp]
  00247	51		 push	 ecx
  00248	c1 fa 07	 sar	 edx, 7
  0024b	2b fa		 sub	 edi, edx
  0024d	57		 push	 edi
  0024e	50		 push	 eax
  0024f	8b ce		 mov	 ecx, esi
  00251	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  00255	e8 00 00 00 00	 call	 ?_Ufill@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEPAUSecurityTokenKeyfile@CipherShed@@PAU34@IABU34@@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Ufill

; 1222 : 			_CATCH_END
; 1223 : 
; 1224 : 			_Mylast += _Count;

  0025a	01 5e 10	 add	 DWORD PTR [esi+16], ebx
  0025d	8b 76 10	 mov	 esi, DWORD PTR [esi+16]

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

  00260	8b 8d 10 01 00
	00		 mov	 ecx, DWORD PTR __Where$[ebp+4]
  00266	8d 85 80 00 00
	00		 lea	 eax, DWORD PTR __Tmp$130464[ebp]
  0026c	50		 push	 eax
  0026d	2b f3		 sub	 esi, ebx
  0026f	56		 push	 esi
  00270	51		 push	 ecx
  00271	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00278	e8 00 00 00 00	 call	 ??$_Fill@PAUSecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0ABU12@@Z ; std::_Fill<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile>
  0027d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1232 : 			}

  00280	8d 8d 80 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$130464[ebp]

; 1233 : 		else

  00286	eb 7e		 jmp	 SHORT $LN148@Insert_n@3
__catch$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

  00288	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0028b	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR __Count$[ebp]
  00291	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00294	c1 e0 07	 shl	 eax, 7
  00297	03 d0		 add	 edx, eax
  00299	52		 push	 edx
  0029a	8b 95 10 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  002a0	03 c2		 add	 eax, edx
  002a2	50		 push	 eax
  002a3	e8 00 00 00 00	 call	 ?_Destroy@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXPAUSecurityTokenKeyfile@CipherShed@@0@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Destroy

; 1221 : 			_RERAISE;

  002a8	6a 00		 push	 0
  002aa	6a 00		 push	 0
  002ac	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Insert_n@3:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

  002b1	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$130474[ebp]
  002b4	e8 00 00 00 00	 call	 ??0SecurityTokenKeyfile@CipherShed@@QAE@ABU01@@Z

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

  002b9	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

  002bc	c1 e7 07	 shl	 edi, 7
  002bf	8b c7		 mov	 eax, edi
  002c1	53		 push	 ebx
  002c2	8b fb		 mov	 edi, ebx
  002c4	2b f8		 sub	 edi, eax
  002c6	53		 push	 ebx
  002c7	57		 push	 edi
  002c8	8b ce		 mov	 ecx, esi
  002ca	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
  002d1	89 45 e8	 mov	 DWORD PTR tv581[ebp], eax
  002d4	e8 00 00 00 00	 call	 ??$_Umove@PAUSecurityTokenKeyfile@CipherShed@@@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEPAUSecurityTokenKeyfile@CipherShed@@PAU23@00@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Umove<CipherShed::SecurityTokenKeyfile *>

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

  002d9	8b 8d 10 01 00
	00		 mov	 ecx, DWORD PTR __Where$[ebp+4]
  002df	53		 push	 ebx
  002e0	57		 push	 edi
  002e1	51		 push	 ecx
  002e2	89 46 10	 mov	 DWORD PTR [esi+16], eax
  002e5	e8 00 00 00 00	 call	 ??$_Unchecked_move_backward@PAUSecurityTokenKeyfile@CipherShed@@PAU12@@stdext@@YAPAUSecurityTokenKeyfile@CipherShed@@PAU12@00@Z ; stdext::_Unchecked_move_backward<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile *>

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

  002ea	8b 85 10 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  002f0	8b 4d e8	 mov	 ecx, DWORD PTR tv581[ebp]
  002f3	8d 55 00	 lea	 edx, DWORD PTR __Tmp$130474[ebp]
  002f6	52		 push	 edx
  002f7	03 c8		 add	 ecx, eax
  002f9	51		 push	 ecx
  002fa	50		 push	 eax
  002fb	e8 00 00 00 00	 call	 ??$_Fill@PAUSecurityTokenKeyfile@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0ABU12@@Z ; std::_Fill<CipherShed::SecurityTokenKeyfile *,CipherShed::SecurityTokenKeyfile>
  00300	83 c4 18	 add	 esp, 24			; 00000018H

; 1249 : 			}

  00303	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$130474[ebp]
$LN148@Insert_n@3:
  00306	e8 00 00 00 00	 call	 ??1SecurityTokenKeyfile@CipherShed@@QAE@XZ
$LN1@Insert_n@3:

; 1250 : 		}

  0030b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0030e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00315	59		 pop	 ecx
  00316	5f		 pop	 edi
  00317	5e		 pop	 esi
  00318	5b		 pop	 ebx
  00319	8b 8d 00 01 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031f	33 cd		 xor	 ecx, ebp
  00321	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00326	81 c5 04 01 00
	00		 add	 ebp, 260		; 00000104H
  0032c	8b e5		 mov	 esp, ebp
  0032e	5d		 pop	 ebp
  0032f	c2 10 00	 ret	 16			; 00000010H
$LN147@Insert_n@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z$4:
  00000	8d 8d 80 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$130464[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SecurityTokenKeyfile@CipherShed@@QAE@XZ
__unwindfunclet$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z$5:
  0000b	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$130474[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1SecurityTokenKeyfile@CipherShed@@QAE@XZ
__ehhandler$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	8b 8a 0c 01 00
	00		 mov	 ecx, DWORD PTR [edx+268]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Insert_n
PUBLIC	??$GetContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@01@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@01@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
$T196128 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@01@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >, COMDAT

; 69   : 		{

  00000	51		 push	 ecx

; 70   : 			return ContainerForward <T> (container);

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR _container$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	50		 push	 eax
  0000b	8b ce		 mov	 ecx, esi
  0000d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T196128[esp+12], 0
  00015	e8 00 00 00 00	 call	 ??0?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi

; 71   : 		}

  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??$GetContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@01@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z PROC ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 ??1?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::~vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
  0000b	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00016	74 09		 je	 SHORT $LN8@scalar@37
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	83 c4 04	 add	 esp, 4
$LN8@scalar@37:
  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi
  00024	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z ENDP ; CipherShed::ForEach::ContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?DeleteKeyfile@SecurityToken@CipherShed@@SAXABUSecurityTokenKeyfile@2@@Z ; CipherShed::SecurityToken::DeleteKeyfile
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
;	COMDAT ?DeleteKeyfile@SecurityToken@CipherShed@@SAXABUSecurityTokenKeyfile@2@@Z
_TEXT	SEGMENT
$T196143 = -24						; size = 24
_keyfile$ = 8						; size = 4
?DeleteKeyfile@SecurityToken@CipherShed@@SAXABUSecurityTokenKeyfile@2@@Z PROC ; CipherShed::SecurityToken::DeleteKeyfile, COMDAT

; 171  : 	{

  00000	83 ec 18	 sub	 esp, 24			; 00000018H
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 172  : 		LoginUserIfRequired (keyfile.SlotId);

  00006	8b 7c 24 28	 mov	 edi, DWORD PTR _keyfile$[esp+32]
  0000a	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  0000d	8d 77 3c	 lea	 esi, DWORD PTR [edi+60]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z ; CipherShed::SecurityToken::LoginUserIfRequired

; 173  : 		
; 174  : 		CK_RV status = Pkcs11Functions->C_DestroyObject (Sessions[keyfile.SlotId].Handle, keyfile.Handle);

  00016	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  0001c	83 c4 04	 add	 esp, 4
  0001f	56		 push	 esi
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  00025	83 c3 5a	 add	 ebx, 90			; 0000005aH
  00028	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
  0002d	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0002f	8b 10		 mov	 edx, DWORD PTR [eax]
  00031	8b 03		 mov	 eax, DWORD PTR [ebx]
  00033	51		 push	 ecx
  00034	52		 push	 edx
  00035	ff d0		 call	 eax
  00037	83 c4 08	 add	 esp, 8
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx

; 175  : 		if (status != CKR_OK)

  0003d	85 c0		 test	 eax, eax
  0003f	74 20		 je	 SHORT $LN1@DeleteKeyf

; 176  : 			throw Pkcs11Exception (status);

  00041	68 00 00 00 00	 push	 OFFSET __TI2?AUPkcs11Exception@CipherShed@@
  00046	8d 4c 24 04	 lea	 ecx, DWORD PTR $T196143[esp+28]
  0004a	51		 push	 ecx
  0004b	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T196143[esp+32], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  00053	89 44 24 0c	 mov	 DWORD PTR $T196143[esp+36], eax
  00057	c6 44 24 10 00	 mov	 BYTE PTR $T196143[esp+40], 0
  0005c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@DeleteKeyf:

; 177  : 	}

  00061	83 c4 18	 add	 esp, 24			; 00000018H
  00064	c3		 ret	 0
$LN8@DeleteKeyf:
?DeleteKeyfile@SecurityToken@CipherShed@@SAXABUSecurityTokenKeyfile@2@@Z ENDP ; CipherShed::SecurityToken::DeleteKeyfile
_TEXT	ENDS
PUBLIC	?GetKeyfileData@SecurityToken@CipherShed@@SAXABUSecurityTokenKeyfile@2@AAV?$vector@EV?$allocator@E@std@@@std@@@Z ; CipherShed::SecurityToken::GetKeyfileData
; Function compile flags: /Ogtpy
;	COMDAT ?GetKeyfileData@SecurityToken@CipherShed@@SAXABUSecurityTokenKeyfile@2@AAV?$vector@EV?$allocator@E@std@@@std@@@Z
_TEXT	SEGMENT
_keyfile$ = 8						; size = 4
_keyfileData$ = 12					; size = 4
?GetKeyfileData@SecurityToken@CipherShed@@SAXABUSecurityTokenKeyfile@2@AAV?$vector@EV?$allocator@E@std@@@std@@@Z PROC ; CipherShed::SecurityToken::GetKeyfileData, COMDAT

; 312  : 	{

  00000	56		 push	 esi

; 313  : 		LoginUserIfRequired (keyfile.SlotId);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _keyfile$[esp]
  00005	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z ; CipherShed::SecurityToken::LoginUserIfRequired

; 314  : 		GetObjectAttribute (keyfile.SlotId, keyfile.Handle, CKA_VALUE, keyfileData);

  0000e	8b 4c 24 10	 mov	 ecx, DWORD PTR _keyfileData$[esp+4]
  00012	8b 16		 mov	 edx, DWORD PTR [esi]
  00014	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00017	51		 push	 ecx
  00018	6a 11		 push	 17			; 00000011H
  0001a	52		 push	 edx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?GetObjectAttribute@SecurityToken@CipherShed@@KAXKKKAAV?$vector@EV?$allocator@E@std@@@std@@@Z ; CipherShed::SecurityToken::GetObjectAttribute
  00021	83 c4 14	 add	 esp, 20			; 00000014H
  00024	5e		 pop	 esi

; 315  : 	}

  00025	c3		 ret	 0
?GetKeyfileData@SecurityToken@CipherShed@@SAXABUSecurityTokenKeyfile@2@AAV?$vector@EV?$allocator@E@std@@@std@@@Z ENDP ; CipherShed::SecurityToken::GetKeyfileData
_TEXT	ENDS
PUBLIC	?insert@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@ABUSecurityTokenKeyfile@CipherShed@@@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::insert
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?insert@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@ABUSecurityTokenKeyfile@CipherShed@@@Z
_TEXT	SEGMENT
__Tmp$196380 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
__Val$ = 20						; size = 4
?insert@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@ABUSecurityTokenKeyfile@CipherShed@@@Z PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

  00008	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000b	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  0000e	8b c8		 mov	 ecx, eax
  00010	2b cb		 sub	 ecx, ebx
  00012	57		 push	 edi
  00013	f7 c1 80 ff ff
	ff		 test	 ecx, -128		; ffffff80H
  00019	75 04		 jne	 SHORT $LN3@insert@6
  0001b	33 ff		 xor	 edi, edi
  0001d	eb 25		 jmp	 SHORT $LN4@insert@6
$LN3@insert@6:
  0001f	3b d8		 cmp	 ebx, eax
  00021	76 05		 jbe	 SHORT $LN12@insert@6
  00023	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN12@insert@6:
  00028	8b 4c 24 20	 mov	 ecx, DWORD PTR __Where$[esp+20]
  0002c	8b 06		 mov	 eax, DWORD PTR [esi]
  0002e	85 c9		 test	 ecx, ecx
  00030	74 04		 je	 SHORT $LN23@insert@6
  00032	3b c8		 cmp	 ecx, eax
  00034	74 05		 je	 SHORT $LN24@insert@6
$LN23@insert@6:
  00036	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN24@insert@6:
  0003b	8b 7c 24 24	 mov	 edi, DWORD PTR __Where$[esp+24]
  0003f	2b fb		 sub	 edi, ebx
  00041	c1 ff 07	 sar	 edi, 7
$LN4@insert@6:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

  00044	8b 54 24 28	 mov	 edx, DWORD PTR __Val$[esp+20]
  00048	8b 44 24 24	 mov	 eax, DWORD PTR __Where$[esp+24]
  0004c	8b 4c 24 20	 mov	 ecx, DWORD PTR __Where$[esp+20]
  00050	52		 push	 edx
  00051	6a 01		 push	 1
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	8b ce		 mov	 ecx, esi
  00057	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@IAEXV?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@IABUSecurityTokenKeyfile@CipherShed@@@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::_Insert_n

; 878  : 		return (begin() + _Off);

  0005c	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  0005f	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00062	76 05		 jbe	 SHORT $LN36@insert@6
  00064	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN36@insert@6:
  00069	8b 36		 mov	 esi, DWORD PTR [esi]
  0006b	8b ee		 mov	 ebp, esi
  0006d	89 5c 24 14	 mov	 DWORD PTR __Tmp$196380[esp+28], ebx
  00071	85 f6		 test	 esi, esi
  00073	75 19		 jne	 SHORT $LN70@insert@6
  00075	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0007a	33 c0		 xor	 eax, eax
$LN61@insert@6:
  0007c	c1 e7 07	 shl	 edi, 7
  0007f	03 fb		 add	 edi, ebx
  00081	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
  00084	77 13		 ja	 SHORT $LN51@insert@6
  00086	85 f6		 test	 esi, esi
  00088	74 08		 je	 SHORT $LN66@insert@6
  0008a	8b 36		 mov	 esi, DWORD PTR [esi]
  0008c	eb 06		 jmp	 SHORT $LN67@insert@6
$LN70@insert@6:
  0008e	8b 06		 mov	 eax, DWORD PTR [esi]
  00090	eb ea		 jmp	 SHORT $LN61@insert@6
$LN66@insert@6:
  00092	33 f6		 xor	 esi, esi
$LN67@insert@6:
  00094	3b 7e 0c	 cmp	 edi, DWORD PTR [esi+12]
  00097	73 05		 jae	 SHORT $LN52@insert@6
$LN51@insert@6:
  00099	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN52@insert@6:
  0009e	8b 44 24 1c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+20]
  000a2	89 78 04	 mov	 DWORD PTR [eax+4], edi
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	89 28		 mov	 DWORD PTR [eax], ebp
  000a9	5d		 pop	 ebp
  000aa	5b		 pop	 ebx

; 879  : 		}

  000ab	83 c4 08	 add	 esp, 8
  000ae	c2 10 00	 ret	 16			; 00000010H
?insert@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@ABUSecurityTokenKeyfile@CipherShed@@@Z ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::insert
_TEXT	ENDS
PUBLIC	?push_back@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEXABUSecurityTokenKeyfile@CipherShed@@@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEXABUSecurityTokenKeyfile@CipherShed@@@Z
_TEXT	SEGMENT
$T196439 = -8						; size = 1
$T196408 = -8						; size = 8
__Cat$196442 = 8					; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEXABUSecurityTokenKeyfile@CipherShed@@@Z PROC ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

  00000	83 ec 08	 sub	 esp, 8
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 810  : 		if (size() < capacity())

  00006	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00009	57		 push	 edi
  0000a	85 c9		 test	 ecx, ecx
  0000c	75 04		 jne	 SHORT $LN9@push_back@3
  0000e	33 c0		 xor	 eax, eax
  00010	eb 08		 jmp	 SHORT $LN10@push_back@3
$LN9@push_back@3:
  00012	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 f8 07	 sar	 eax, 7
$LN10@push_back@3:
  0001a	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0001d	8b d7		 mov	 edx, edi
  0001f	2b d1		 sub	 edx, ecx
  00021	c1 fa 07	 sar	 edx, 7
  00024	3b d0		 cmp	 edx, eax
  00026	73 31		 jae	 SHORT $LN2@push_back@3

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

  00028	8b 4c 24 14	 mov	 ecx, DWORD PTR __Cat$196442[esp+12]
  0002c	c6 44 24 08 00	 mov	 BYTE PTR $T196439[esp+16], 0
  00031	8b 44 24 08	 mov	 eax, DWORD PTR $T196439[esp+16]
  00035	50		 push	 eax
  00036	8b 44 24 18	 mov	 eax, DWORD PTR __Val$[esp+16]
  0003a	51		 push	 ecx
  0003b	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
  0003e	52		 push	 edx
  0003f	50		 push	 eax
  00040	6a 01		 push	 1
  00042	57		 push	 edi
  00043	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUSecurityTokenKeyfile@CipherShed@@IU12@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@IABU12@AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CipherShed::SecurityTokenKeyfile *,unsigned int,CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
  00048	83 c4 18	 add	 esp, 24			; 00000018H
  0004b	83 ef 80	 sub	 edi, -128		; ffffff80H
  0004e	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi

; 824  : 		}

  00053	83 c4 08	 add	 esp, 8
  00056	c2 04 00	 ret	 4
$LN2@push_back@3:

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else
; 823  : 			insert(end(), _Val);

  00059	3b cf		 cmp	 ecx, edi
  0005b	76 05		 jbe	 SHORT $LN22@push_back@3
  0005d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN22@push_back@3:
  00062	8b 4c 24 14	 mov	 ecx, DWORD PTR __Val$[esp+12]
  00066	8b 06		 mov	 eax, DWORD PTR [esi]
  00068	51		 push	 ecx
  00069	57		 push	 edi
  0006a	50		 push	 eax
  0006b	8d 54 24 14	 lea	 edx, DWORD PTR $T196408[esp+28]
  0006f	52		 push	 edx
  00070	8b ce		 mov	 ecx, esi
  00072	e8 00 00 00 00	 call	 ?insert@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE?AV?$_Vector_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@V?$_Vector_const_iterator@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@2@ABUSecurityTokenKeyfile@CipherShed@@@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::insert
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi

; 824  : 		}

  00079	83 c4 08	 add	 esp, 8
  0007c	c2 04 00	 ret	 4
?push_back@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEXABUSecurityTokenKeyfile@CipherShed@@@Z ENDP ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::push_back
_TEXT	ENDS
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z ; CipherShed::SecurityToken::GetAvailableKeyfiles
PUBLIC	??_R0?AUUserAbort@CipherShed@@@8		; CipherShed::UserAbort `RTTI Type Descriptor'
;	COMDAT ??_R0?AUUserAbort@CipherShed@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
_DATA	SEGMENT
??_R0?AUUserAbort@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::UserAbort `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUUserAbort@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__tryblocktable$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z DD 06H
	DD	07H
	DD	08H
	DD	02H
	DD	FLAT:__catchsym$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$24
__catchsym$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$24 DD 08H
	DD	FLAT:??_R0?AUUserAbort@CipherShed@@@8
	DD	00H
	DD	FLAT:__catch$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$0
	DD	08H
	DD	FLAT:??_R0?AUPkcs11Exception@CipherShed@@@8
	DD	0ffffff44H
	DD	FLAT:__catch$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$1
__ehfuncinfo$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z DD 019930522H
	DD	013H
	DD	FLAT:__unwindtable$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$5
	DD	02H
	DD	FLAT:__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$6
	DD	01H
	DD	FLAT:__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$8
	DD	05H
	DD	00H
	DD	06H
	DD	FLAT:__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$9
	DD	05H
	DD	00H
	DD	05H
	DD	FLAT:__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$10
	DD	09H
	DD	FLAT:__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$11
	DD	05H
	DD	FLAT:__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$13
	DD	0cH
	DD	FLAT:__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$18
	DD	0cH
	DD	FLAT:__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$14
	DD	0eH
	DD	FLAT:__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$21
	DD	0eH
	DD	FLAT:__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$15
	DD	010H
	DD	FLAT:__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$16
	DD	011H
	DD	FLAT:__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$17
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
xdata$x	ENDS
;	COMDAT ?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z
_TEXT	SEGMENT
_$S3$124870 = -404					; size = 52
$T196512 = -352						; size = 28
$T200404 = -324						; size = 8
$T196532 = -316						; size = 24
$T196526 = -292						; size = 24
$T196531 = -268						; size = 28
$T196530 = -240						; size = 28
$T196521 = -212						; size = 24
_e$124910 = -188					; size = 4
$T196517 = -184						; size = 28
$T196520 = -156						; size = 64
_$S4$125265 = -140					; size = 48
___$ReturnUdt$GSCopy$ = -92				; size = 4
_dataHandle$125269 = -88				; size = 4
_forEachContainer$124292 = -84				; size = 4
_slotId$124874 = -80					; size = 4
_privateAttrib$125304 = -76				; size = 24
_label$125312 = -52					; size = 24
$T196529 = -25						; size = 1
$T196538 = -24						; size = 4
_unrecognizedTokenPresent$ = -17			; size = 1
__$EHRec$ = -16						; size = 16
_token$124904 = 0					; size = 64
_keyfile$125299 = 64					; size = 128
__$ArrayPad$ = 192					; size = 4
___$ReturnUdt$ = 204					; size = 4
_slotIdFilter$ = 208					; size = 4
_keyfileIdFilter$ = 212					; size = 28
?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z PROC ; CipherShed::SecurityToken::GetAvailableKeyfiles, COMDAT

; 180  : 	{

  00000	55		 push	 ebp
  00001	8d ac 24 3c ff
	ff ff		 lea	 ebp, DWORD PTR [esp-196]
  00008	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec 88 01 00
	00		 sub	 esp, 392		; 00000188H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 c0 00 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0003f	8b b5 cc 00 00
	00		 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00045	33 db		 xor	 ebx, ebx
  00047	89 75 a4	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi
  0004a	89 5d e8	 mov	 DWORD PTR $T196538[ebp], ebx
  0004d	bf 01 00 00 00	 mov	 edi, 1

; 181  : 		bool unrecognizedTokenPresent = false;
; 182  : 		vector <SecurityTokenKeyfile> keyfiles;

  00052	8b ce		 mov	 ecx, esi
  00054	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  00057	88 5d ef	 mov	 BYTE PTR _unrecognizedTokenPresent$[ebp], bl
  0005a	e8 00 00 00 00	 call	 ??0?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >

; 247  : 
; 248  : 		return keyfiles;

  0005f	8d 85 a0 fe ff
	ff		 lea	 eax, DWORD PTR $T196512[ebp]
  00065	50		 push	 eax
  00066	89 7d e8	 mov	 DWORD PTR $T196538[ebp], edi
  00069	e8 00 00 00 00	 call	 ?GetTokenSlots@SecurityToken@CipherShed@@KA?AV?$list@KV?$allocator@K@std@@@std@@XZ ; CipherShed::SecurityToken::GetTokenSlots
  0006e	50		 push	 eax
  0006f	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _$S3$124870[ebp]
  00075	51		 push	 ecx
  00076	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0007a	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00082	8d bd 6c fe ff
	ff		 lea	 edi, DWORD PTR _$S3$124870[ebp]
  00088	89 7d ac	 mov	 DWORD PTR _forEachContainer$124292[ebp], edi
  0008b	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR $T196512[ebp]
  00091	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  00095	e8 00 00 00 00	 call	 ?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy
  0009a	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR $T196512[ebp]
  000a0	52		 push	 edx
  000a1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a6	83 c4 04	 add	 esp, 4
  000a9	8d a4 24 00 00
	00 00		 npad	 7
$LL20@GetAvailab@2:
  000b0	8b 07		 mov	 eax, DWORD PTR [edi]
  000b2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000b5	8b cf		 mov	 ecx, edi
  000b7	ff d2		 call	 edx
  000b9	84 c0		 test	 al, al
  000bb	0f 84 99 09 00
	00		 je	 $LN18@GetAvailab@2
  000c1	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000c4	3b c3		 cmp	 eax, ebx
  000c6	75 0c		 jne	 SHORT $LN1475@GetAvailab@2
  000c8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000cd	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000d0	3b c3		 cmp	 eax, ebx
  000d2	74 04		 je	 SHORT $LN86@GetAvailab@2
$LN1475@GetAvailab@2:

; 183  : 
; 184  : 		foreach (const CK_SLOT_ID &slotId, GetTokenSlots())

  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
  000d6	eb 02		 jmp	 SHORT $LN87@GetAvailab@2
$LN86@GetAvailab@2:
  000d8	33 c0		 xor	 eax, eax
$LN87@GetAvailab@2:
  000da	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  000dd	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  000e0	75 05		 jne	 SHORT $LN76@GetAvailab@2
  000e2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN76@GetAvailab@2:
  000e7	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  000ea	83 c0 08	 add	 eax, 8
  000ed	f6 45 e8 02	 test	 BYTE PTR $T196538[ebp], 2
  000f1	89 45 b0	 mov	 DWORD PTR _slotId$124874[ebp], eax
  000f4	74 5c		 je	 SHORT $LL1482@GetAvailab@2
  000f6	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR $T196517[ebp+20]
  000fc	8b 01		 mov	 eax, DWORD PTR [ecx]
  000fe	83 65 e8 fd	 and	 DWORD PTR $T196538[ebp], -3 ; fffffffdH
  00102	89 09		 mov	 DWORD PTR [ecx], ecx
  00104	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR $T196517[ebp+20]
  0010a	89 49 04	 mov	 DWORD PTR [ecx+4], ecx
  0010d	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR $T196517[ebp+20]
  00113	89 9d 60 ff ff
	ff		 mov	 DWORD PTR $T196517[ebp+24], ebx
  00119	3b c1		 cmp	 eax, ecx
  0011b	74 1a		 je	 SHORT $LN96@GetAvailab@2
  0011d	8d 49 00	 npad	 3
$LL98@GetAvailab@2:
  00120	8b 30		 mov	 esi, DWORD PTR [eax]
  00122	50		 push	 eax
  00123	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00128	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR $T196517[ebp+20]
  0012e	83 c4 04	 add	 esp, 4
  00131	8b c6		 mov	 eax, esi
  00133	3b f1		 cmp	 esi, ecx
  00135	75 e9		 jne	 SHORT $LL98@GetAvailab@2
$LN96@GetAvailab@2:
  00137	51		 push	 ecx
  00138	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0013d	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR $T196517[ebp]
  00143	52		 push	 edx
  00144	89 9d 5c ff ff
	ff		 mov	 DWORD PTR $T196517[ebp+20], ebx
  0014a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0014f	83 c4 08	 add	 esp, 8
$LL1482@GetAvailab@2:
  00152	38 5f 05	 cmp	 BYTE PTR [edi+5], bl
  00155	0f 94 c0	 sete	 al
  00158	88 47 05	 mov	 BYTE PTR [edi+5], al
  0015b	3a c3		 cmp	 al, bl
  0015d	0f 84 e6 08 00
	00		 je	 $LN19@GetAvailab@2

; 185  : 		{
; 186  : 			SecurityTokenInfo token;

  00163	33 c0		 xor	 eax, eax
  00165	c7 45 20 07 00
	00 00		 mov	 DWORD PTR _token$124904[ebp+32], 7
  0016c	89 5d 1c	 mov	 DWORD PTR _token$124904[ebp+28], ebx
  0016f	66 89 45 0c	 mov	 WORD PTR _token$124904[ebp+12], ax
  00173	c7 45 3c 0f 00
	00 00		 mov	 DWORD PTR _token$124904[ebp+60], 15 ; 0000000fH
  0017a	89 5d 38	 mov	 DWORD PTR _token$124904[ebp+56], ebx
  0017d	88 5d 28	 mov	 BYTE PTR _token$124904[ebp+40], bl

; 187  : 
; 188  : 			if (slotIdFilter && *slotIdFilter != slotId)

  00180	8b 85 d0 00 00
	00		 mov	 eax, DWORD PTR _slotIdFilter$[ebp]
  00186	3b c3		 cmp	 eax, ebx
  00188	74 13		 je	 SHORT $LN14@GetAvailab@2
  0018a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018c	8b 55 b0	 mov	 edx, DWORD PTR _slotId$124874[ebp]
  0018f	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  00191	74 0a		 je	 SHORT $LN14@GetAvailab@2

; 189  : 				continue;

  00193	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  00197	c6 47 04 01	 mov	 BYTE PTR [edi+4], 1
  0019b	eb b5		 jmp	 SHORT $LL1482@GetAvailab@2
$LN14@GetAvailab@2:

; 190  : 
; 191  : 			try
; 192  : 			{
; 193  : 				LoginUserIfRequired (slotId);

  0019d	8b 45 b0	 mov	 eax, DWORD PTR _slotId$124874[ebp]
  001a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a2	51		 push	 ecx
  001a3	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  001a7	e8 00 00 00 00	 call	 ?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z ; CipherShed::SecurityToken::LoginUserIfRequired

; 194  : 				token = GetTokenInfo (slotId);

  001ac	8b 7d b0	 mov	 edi, DWORD PTR _slotId$124874[ebp]
  001af	8b 17		 mov	 edx, DWORD PTR [edi]
  001b1	83 c4 04	 add	 esp, 4
  001b4	52		 push	 edx
  001b5	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T196520[ebp]
  001bb	50		 push	 eax
  001bc	e8 00 00 00 00	 call	 ?GetTokenInfo@SecurityToken@CipherShed@@SA?AUSecurityTokenInfo@2@K@Z ; CipherShed::SecurityToken::GetTokenInfo
  001c1	83 c4 08	 add	 esp, 8
  001c4	8b f0		 mov	 esi, eax
  001c6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001c8	6a ff		 push	 -1
  001ca	89 4d 00	 mov	 DWORD PTR _token$124904[ebp], ecx
  001cd	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  001d0	53		 push	 ebx
  001d1	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  001d4	50		 push	 eax
  001d5	8d 4d 08	 lea	 ecx, DWORD PTR _token$124904[ebp+8]
  001d8	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  001dc	89 55 04	 mov	 DWORD PTR _token$124904[ebp+4], edx
  001df	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  001e4	6a ff		 push	 -1
  001e6	53		 push	 ebx
  001e7	83 c6 24	 add	 esi, 36			; 00000024H
  001ea	56		 push	 esi
  001eb	8d 4d 24	 lea	 ecx, DWORD PTR _token$124904[ebp+36]
  001ee	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  001f3	83 7d a0 10	 cmp	 DWORD PTR $T196520[ebp+60], 16 ; 00000010H
  001f7	72 0c		 jb	 SHORT $LN285@GetAvailab@2
  001f9	8b 4d 8c	 mov	 ecx, DWORD PTR $T196520[ebp+40]
  001fc	51		 push	 ecx
  001fd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00202	83 c4 04	 add	 esp, 4
$LN285@GetAvailab@2:
  00205	83 7d 84 08	 cmp	 DWORD PTR $T196520[ebp+32], 8
  00209	c7 45 a0 0f 00
	00 00		 mov	 DWORD PTR $T196520[ebp+60], 15 ; 0000000fH
  00210	89 5d 9c	 mov	 DWORD PTR $T196520[ebp+56], ebx
  00213	88 5d 8c	 mov	 BYTE PTR $T196520[ebp+40], bl
  00216	72 0f		 jb	 SHORT $LN313@GetAvailab@2
  00218	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR $T196520[ebp+12]
  0021e	52		 push	 edx
  0021f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00224	83 c4 04	 add	 esp, 4
$LN313@GetAvailab@2:

; 209  : 			}
; 210  : 
; 211  : 			foreach (const CK_OBJECT_HANDLE &dataHandle, GetObjects (slotId, CKO_DATA))

  00227	8b 07		 mov	 eax, DWORD PTR [edi]
  00229	53		 push	 ebx
  0022a	50		 push	 eax
  0022b	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T196521[ebp]
  00231	51		 push	 ecx
  00232	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
  00239	e8 00 00 00 00	 call	 ?GetObjects@SecurityToken@CipherShed@@KA?AV?$vector@KV?$allocator@K@std@@@std@@KK@Z ; CipherShed::SecurityToken::GetObjects
  0023e	50		 push	 eax
  0023f	8d 95 74 ff ff
	ff		 lea	 edx, DWORD PTR _$S4$125265[ebp]
  00245	52		 push	 edx
  00246	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+12], 9
  0024a	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@01@ABV?$vector@KV?$allocator@K@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<unsigned long,std::allocator<unsigned long> > >
  0024f	83 c4 14	 add	 esp, 20			; 00000014H
  00252	8d b5 74 ff ff
	ff		 lea	 esi, DWORD PTR _$S4$125265[ebp]
  00258	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T196521[ebp+12]
  0025e	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+12], 11 ; 0000000bH
  00262	3b c3		 cmp	 eax, ebx
  00264	74 09		 je	 SHORT $LN330@GetAvailab@2
  00266	50		 push	 eax
  00267	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0026c	83 c4 04	 add	 esp, 4
$LN330@GetAvailab@2:
  0026f	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR $T196521[ebp]
  00275	50		 push	 eax
  00276	89 9d 38 ff ff
	ff		 mov	 DWORD PTR $T196521[ebp+12], ebx
  0027c	89 9d 3c ff ff
	ff		 mov	 DWORD PTR $T196521[ebp+16], ebx
  00282	89 9d 40 ff ff
	ff		 mov	 DWORD PTR $T196521[ebp+20], ebx
  00288	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0028d	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _$S4$125265[ebp]
  00293	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00296	83 c4 04	 add	 esp, 4
  00299	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _$S4$125265[ebp]
  0029f	ff d0		 call	 eax
  002a1	84 c0		 test	 al, al
  002a3	0f 84 10 07 00
	00		 je	 $LN9@GetAvailab@2
  002a9	8d a4 24 00 00
	00 00		 npad	 7
$LL11@GetAvailab@2:
  002b0	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  002b3	3b c3		 cmp	 eax, ebx
  002b5	75 0c		 jne	 SHORT $LN1476@GetAvailab@2
  002b7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  002bc	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  002bf	3b c3		 cmp	 eax, ebx
  002c1	74 04		 je	 SHORT $LN354@GetAvailab@2
$LN1476@GetAvailab@2:
  002c3	8b 00		 mov	 eax, DWORD PTR [eax]
  002c5	eb 02		 jmp	 SHORT $LN355@GetAvailab@2
$LN354@GetAvailab@2:
  002c7	33 c0		 xor	 eax, eax
$LN355@GetAvailab@2:
  002c9	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  002cc	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  002cf	72 05		 jb	 SHORT $LN346@GetAvailab@2
  002d1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN346@GetAvailab@2:
  002d6	f6 45 e8 04	 test	 BYTE PTR $T196538[ebp], 4
  002da	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  002dd	89 55 a8	 mov	 DWORD PTR _dataHandle$125269[ebp], edx
  002e0	74 38		 je	 SHORT $LN369@GetAvailab@2
  002e2	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR $T196526[ebp+12]
  002e8	83 65 e8 fb	 and	 DWORD PTR $T196538[ebp], -5 ; fffffffbH
  002ec	3b c3		 cmp	 eax, ebx
  002ee	74 09		 je	 SHORT $LN363@GetAvailab@2
  002f0	50		 push	 eax
  002f1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002f6	83 c4 04	 add	 esp, 4
$LN363@GetAvailab@2:
  002f9	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR $T196526[ebp]
  002ff	50		 push	 eax
  00300	89 9d e8 fe ff
	ff		 mov	 DWORD PTR $T196526[ebp+12], ebx
  00306	89 9d ec fe ff
	ff		 mov	 DWORD PTR $T196526[ebp+16], ebx
  0030c	89 9d f0 fe ff
	ff		 mov	 DWORD PTR $T196526[ebp+20], ebx
  00312	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00317	83 c4 04	 add	 esp, 4
$LN369@GetAvailab@2:
  0031a	38 5e 05	 cmp	 BYTE PTR [esi+5], bl
  0031d	0f 94 c0	 sete	 al
  00320	88 46 05	 mov	 BYTE PTR [esi+5], al
  00323	3a c3		 cmp	 al, bl
  00325	0f 84 6e 06 00
	00		 je	 $LN10@GetAvailab@2
  0032b	eb 03 8d 49 00	 npad	 5
$LL373@GetAvailab@2:

; 212  : 			{
; 213  : 				SecurityTokenKeyfile keyfile;

  00330	b9 07 00 00 00	 mov	 ecx, 7
  00335	89 4d 5c	 mov	 DWORD PTR _keyfile$125299[ebp+28], ecx
  00338	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  0033d	89 8d a0 00 00
	00		 mov	 DWORD PTR _keyfile$125299[ebp+96], ecx
  00343	33 d2		 xor	 edx, edx
  00345	33 c9		 xor	 ecx, ecx
  00347	89 5d 58	 mov	 DWORD PTR _keyfile$125299[ebp+24], ebx
  0034a	66 89 55 48	 mov	 WORD PTR _keyfile$125299[ebp+8], dx
  0034e	89 45 78	 mov	 DWORD PTR _keyfile$125299[ebp+56], eax
  00351	89 5d 74	 mov	 DWORD PTR _keyfile$125299[ebp+52], ebx
  00354	88 5d 64	 mov	 BYTE PTR _keyfile$125299[ebp+36], bl
  00357	89 9d 9c 00 00
	00		 mov	 DWORD PTR _keyfile$125299[ebp+92], ebx
  0035d	66 89 8d 8c 00
	00 00		 mov	 WORD PTR _keyfile$125299[ebp+76], cx
  00364	89 85 bc 00 00
	00		 mov	 DWORD PTR _keyfile$125299[ebp+124], eax
  0036a	89 9d b8 00 00
	00		 mov	 DWORD PTR _keyfile$125299[ebp+120], ebx
  00370	88 9d a8 00 00
	00		 mov	 BYTE PTR _keyfile$125299[ebp+104], bl

; 214  : 				keyfile.Handle = dataHandle;
; 215  : 				keyfile.SlotId = slotId;

  00376	8b 7d b0	 mov	 edi, DWORD PTR _slotId$124874[ebp]
  00379	8b 07		 mov	 eax, DWORD PTR [edi]
  0037b	8b 75 a8	 mov	 esi, DWORD PTR _dataHandle$125269[ebp]
  0037e	8b 16		 mov	 edx, DWORD PTR [esi]

; 216  : 				keyfile.Token = token;

  00380	8b 4d 00	 mov	 ecx, DWORD PTR _token$124904[ebp]
  00383	6a ff		 push	 -1
  00385	89 45 7c	 mov	 DWORD PTR _keyfile$125299[ebp+60], eax
  00388	89 55 40	 mov	 DWORD PTR _keyfile$125299[ebp], edx
  0038b	8b 55 04	 mov	 edx, DWORD PTR _token$124904[ebp+4]
  0038e	53		 push	 ebx
  0038f	8d 45 08	 lea	 eax, DWORD PTR _token$124904[ebp+8]
  00392	89 8d 80 00 00
	00		 mov	 DWORD PTR _keyfile$125299[ebp+64], ecx
  00398	50		 push	 eax
  00399	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR _keyfile$125299[ebp+72]
  0039f	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+12], 12 ; 0000000cH
  003a3	89 95 84 00 00
	00		 mov	 DWORD PTR _keyfile$125299[ebp+68], edx
  003a9	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  003ae	6a ff		 push	 -1
  003b0	53		 push	 ebx
  003b1	8d 4d 24	 lea	 ecx, DWORD PTR _token$124904[ebp+36]
  003b4	51		 push	 ecx
  003b5	8d 8d a4 00 00
	00		 lea	 ecx, DWORD PTR _keyfile$125299[ebp+100]
  003bb	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 217  : 
; 218  : 				vector <byte> privateAttrib;

  003c0	6a 04		 push	 4
  003c2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  003c7	83 c4 04	 add	 esp, 4
  003ca	3b c3		 cmp	 eax, ebx
  003cc	74 07		 je	 SHORT $LN535@GetAvailab@2
  003ce	8d 55 b4	 lea	 edx, DWORD PTR _privateAttrib$125304[ebp]
  003d1	89 10		 mov	 DWORD PTR [eax], edx
  003d3	eb 02		 jmp	 SHORT $LN536@GetAvailab@2
$LN535@GetAvailab@2:
  003d5	33 c0		 xor	 eax, eax
$LN536@GetAvailab@2:
  003d7	89 45 b4	 mov	 DWORD PTR _privateAttrib$125304[ebp], eax
  003da	89 5d c0	 mov	 DWORD PTR _privateAttrib$125304[ebp+12], ebx
  003dd	89 5d c4	 mov	 DWORD PTR _privateAttrib$125304[ebp+16], ebx
  003e0	89 5d c8	 mov	 DWORD PTR _privateAttrib$125304[ebp+20], ebx

; 219  : 				GetObjectAttribute (slotId, dataHandle, CKA_PRIVATE, privateAttrib);

  003e3	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003e5	8b 17		 mov	 edx, DWORD PTR [edi]
  003e7	8d 45 b4	 lea	 eax, DWORD PTR _privateAttrib$125304[ebp]
  003ea	50		 push	 eax
  003eb	6a 02		 push	 2
  003ed	51		 push	 ecx
  003ee	52		 push	 edx
  003ef	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+12], 14 ; 0000000eH
  003f3	e8 00 00 00 00	 call	 ?GetObjectAttribute@SecurityToken@CipherShed@@KAXKKKAAV?$vector@EV?$allocator@E@std@@@std@@@Z ; CipherShed::SecurityToken::GetObjectAttribute

; 220  : 
; 221  : 				if (privateAttrib.size() == sizeof (CK_BBOOL) && *(CK_BBOOL *) &privateAttrib.front() != CK_TRUE)

  003f8	8b 4d c4	 mov	 ecx, DWORD PTR _privateAttrib$125304[ebp+16]
  003fb	8b 45 c0	 mov	 eax, DWORD PTR _privateAttrib$125304[ebp+12]
  003fe	8b d1		 mov	 edx, ecx
  00400	2b d0		 sub	 edx, eax
  00402	83 c4 10	 add	 esp, 16			; 00000010H
  00405	83 fa 01	 cmp	 edx, 1
  00408	0f 85 00 01 00
	00		 jne	 $LN5@GetAvailab@2
  0040e	8b f0		 mov	 esi, eax
  00410	3b c1		 cmp	 eax, ecx
  00412	76 08		 jbe	 SHORT $LN592@GetAvailab@2
  00414	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00419	8b 45 c0	 mov	 eax, DWORD PTR _privateAttrib$125304[ebp+12]
$LN592@GetAvailab@2:
  0041c	8b 4d b4	 mov	 ecx, DWORD PTR _privateAttrib$125304[ebp]
  0041f	3b cb		 cmp	 ecx, ebx
  00421	0f 85 dd 00 00
	00		 jne	 $LN1469@GetAvailab@2
  00427	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0042c	8b 45 c0	 mov	 eax, DWORD PTR _privateAttrib$125304[ebp+12]
  0042f	33 c9		 xor	 ecx, ecx
$LN614@GetAvailab@2:
  00431	3b 71 10	 cmp	 esi, DWORD PTR [ecx+16]
  00434	72 08		 jb	 SHORT $LN605@GetAvailab@2
  00436	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0043b	8b 45 c0	 mov	 eax, DWORD PTR _privateAttrib$125304[ebp+12]
$LN605@GetAvailab@2:
  0043e	80 3e 01	 cmp	 BYTE PTR [esi], 1
  00441	0f 84 c4 00 00
	00		 je	 $LN1502@GetAvailab@2

; 222  : 					continue;

  00447	3b c3		 cmp	 eax, ebx
  00449	74 09		 je	 SHORT $LN622@GetAvailab@2
  0044b	50		 push	 eax
  0044c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00451	83 c4 04	 add	 esp, 4
$LN622@GetAvailab@2:
  00454	8b 45 b4	 mov	 eax, DWORD PTR _privateAttrib$125304[ebp]
  00457	50		 push	 eax
  00458	89 5d c0	 mov	 DWORD PTR _privateAttrib$125304[ebp+12], ebx
  0045b	89 5d c4	 mov	 DWORD PTR _privateAttrib$125304[ebp+16], ebx
  0045e	89 5d c8	 mov	 DWORD PTR _privateAttrib$125304[ebp+20], ebx
  00461	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00466	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  0046b	83 c4 04	 add	 esp, 4
  0046e	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+12], 11 ; 0000000bH
  00472	39 bd bc 00 00
	00		 cmp	 DWORD PTR _keyfile$125299[ebp+124], edi
  00478	72 0f		 jb	 SHORT $LN652@GetAvailab@2
  0047a	8b 8d a8 00 00
	00		 mov	 ecx, DWORD PTR _keyfile$125299[ebp+104]
  00480	51		 push	 ecx
  00481	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00486	83 c4 04	 add	 esp, 4
$LN652@GetAvailab@2:
  00489	be 08 00 00 00	 mov	 esi, 8
  0048e	c7 85 bc 00 00
	00 0f 00 00 00	 mov	 DWORD PTR _keyfile$125299[ebp+124], 15 ; 0000000fH
  00498	89 9d b8 00 00
	00		 mov	 DWORD PTR _keyfile$125299[ebp+120], ebx
  0049e	88 9d a8 00 00
	00		 mov	 BYTE PTR _keyfile$125299[ebp+104], bl
  004a4	39 b5 a0 00 00
	00		 cmp	 DWORD PTR _keyfile$125299[ebp+96], esi
  004aa	72 0f		 jb	 SHORT $LN680@GetAvailab@2
  004ac	8b 95 8c 00 00
	00		 mov	 edx, DWORD PTR _keyfile$125299[ebp+76]
  004b2	52		 push	 edx
  004b3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004b8	83 c4 04	 add	 esp, 4
$LN680@GetAvailab@2:
  004bb	33 c0		 xor	 eax, eax
  004bd	c7 85 a0 00 00
	00 07 00 00 00	 mov	 DWORD PTR _keyfile$125299[ebp+96], 7
  004c7	89 9d 9c 00 00
	00		 mov	 DWORD PTR _keyfile$125299[ebp+92], ebx
  004cd	66 89 85 8c 00
	00 00		 mov	 WORD PTR _keyfile$125299[ebp+76], ax
  004d4	39 7d 78	 cmp	 DWORD PTR _keyfile$125299[ebp+56], edi
  004d7	72 0c		 jb	 SHORT $LN706@GetAvailab@2
  004d9	8b 4d 64	 mov	 ecx, DWORD PTR _keyfile$125299[ebp+36]
  004dc	51		 push	 ecx
  004dd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004e2	83 c4 04	 add	 esp, 4
$LN706@GetAvailab@2:
  004e5	c7 45 78 0f 00
	00 00		 mov	 DWORD PTR _keyfile$125299[ebp+56], 15 ; 0000000fH
  004ec	89 5d 74	 mov	 DWORD PTR _keyfile$125299[ebp+52], ebx
  004ef	88 5d 64	 mov	 BYTE PTR _keyfile$125299[ebp+36], bl
  004f2	39 75 5c	 cmp	 DWORD PTR _keyfile$125299[ebp+28], esi
  004f5	0f 82 a3 03 00
	00		 jb	 $LN7@GetAvailab@2
  004fb	8b 55 48	 mov	 edx, DWORD PTR _keyfile$125299[ebp+8]
  004fe	52		 push	 edx
  004ff	e9 92 03 00 00	 jmp	 $LN1506@GetAvailab@2
$LN1469@GetAvailab@2:

; 220  : 
; 221  : 				if (privateAttrib.size() == sizeof (CK_BBOOL) && *(CK_BBOOL *) &privateAttrib.front() != CK_TRUE)

  00504	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00506	e9 26 ff ff ff	 jmp	 $LN614@GetAvailab@2
$LN1502@GetAvailab@2:
  0050b	8b 75 a8	 mov	 esi, DWORD PTR _dataHandle$125269[ebp]
$LN5@GetAvailab@2:

; 223  : 
; 224  : 				vector <byte> label;

  0050e	6a 04		 push	 4
  00510	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00515	83 c4 04	 add	 esp, 4
  00518	3b c3		 cmp	 eax, ebx
  0051a	74 07		 je	 SHORT $LN756@GetAvailab@2
  0051c	8d 4d cc	 lea	 ecx, DWORD PTR _label$125312[ebp]
  0051f	89 08		 mov	 DWORD PTR [eax], ecx
  00521	eb 02		 jmp	 SHORT $LN757@GetAvailab@2
$LN756@GetAvailab@2:
  00523	33 c0		 xor	 eax, eax
$LN757@GetAvailab@2:
  00525	89 45 cc	 mov	 DWORD PTR _label$125312[ebp], eax
  00528	89 5d d8	 mov	 DWORD PTR _label$125312[ebp+12], ebx
  0052b	89 5d dc	 mov	 DWORD PTR _label$125312[ebp+16], ebx
  0052e	89 5d e0	 mov	 DWORD PTR _label$125312[ebp+20], ebx

; 225  : 				GetObjectAttribute (slotId, dataHandle, CKA_LABEL, label);

  00531	8b 06		 mov	 eax, DWORD PTR [esi]
  00533	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00535	8d 55 cc	 lea	 edx, DWORD PTR _label$125312[ebp]
  00538	52		 push	 edx
  00539	6a 03		 push	 3
  0053b	50		 push	 eax
  0053c	51		 push	 ecx
  0053d	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+12], 16 ; 00000010H
  00541	e8 00 00 00 00	 call	 ?GetObjectAttribute@SecurityToken@CipherShed@@KAXKKKAAV?$vector@EV?$allocator@E@std@@@std@@@Z ; CipherShed::SecurityToken::GetObjectAttribute

; 226  : 				label.push_back (0);

  00546	8b 45 d8	 mov	 eax, DWORD PTR _label$125312[ebp+12]
  00549	83 c4 10	 add	 esp, 16			; 00000010H
  0054c	88 5d e7	 mov	 BYTE PTR $T196529[ebp], bl
  0054f	3b c3		 cmp	 eax, ebx
  00551	75 04		 jne	 SHORT $LN811@GetAvailab@2
  00553	33 c9		 xor	 ecx, ecx
  00555	eb 05		 jmp	 SHORT $LN812@GetAvailab@2
$LN811@GetAvailab@2:
  00557	8b 4d e0	 mov	 ecx, DWORD PTR _label$125312[ebp+20]
  0055a	2b c8		 sub	 ecx, eax
$LN812@GetAvailab@2:
  0055c	8b 75 dc	 mov	 esi, DWORD PTR _label$125312[ebp+16]
  0055f	8b d6		 mov	 edx, esi
  00561	2b d0		 sub	 edx, eax
  00563	3b d1		 cmp	 edx, ecx
  00565	73 17		 jae	 SHORT $LN804@GetAvailab@2
  00567	8b ce		 mov	 ecx, esi
  00569	b8 01 00 00 00	 mov	 eax, 1
  0056e	8b ff		 npad	 2
$LL833@GetAvailab@2:
  00570	88 1e		 mov	 BYTE PTR [esi], bl
  00572	48		 dec	 eax
  00573	46		 inc	 esi
  00574	3b c3		 cmp	 eax, ebx
  00576	77 f8		 ja	 SHORT $LL833@GetAvailab@2
  00578	41		 inc	 ecx
  00579	89 4d dc	 mov	 DWORD PTR _label$125312[ebp+16], ecx
  0057c	eb 21		 jmp	 SHORT $LN803@GetAvailab@2
$LN804@GetAvailab@2:
  0057e	3b c6		 cmp	 eax, esi
  00580	76 05		 jbe	 SHORT $LN841@GetAvailab@2
  00582	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN841@GetAvailab@2:
  00587	8b 45 cc	 mov	 eax, DWORD PTR _label$125312[ebp]
  0058a	8d 4d e7	 lea	 ecx, DWORD PTR $T196529[ebp]
  0058d	51		 push	 ecx
  0058e	56		 push	 esi
  0058f	50		 push	 eax
  00590	8d 95 bc fe ff
	ff		 lea	 edx, DWORD PTR $T200404[ebp]
  00596	52		 push	 edx
  00597	8d 4d cc	 lea	 ecx, DWORD PTR _label$125312[ebp]
  0059a	e8 00 00 00 00	 call	 ?insert@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@V?$_Vector_const_iterator@EV?$allocator@E@std@@@2@ABE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::insert
$LN803@GetAvailab@2:

; 227  : 
; 228  : 				keyfile.IdUtf8 = (char *) &label.front();

  0059f	8b 75 d8	 mov	 esi, DWORD PTR _label$125312[ebp+12]
  005a2	3b 75 dc	 cmp	 esi, DWORD PTR _label$125312[ebp+16]
  005a5	76 05		 jbe	 SHORT $LN859@GetAvailab@2
  005a7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN859@GetAvailab@2:
  005ac	8b 45 cc	 mov	 eax, DWORD PTR _label$125312[ebp]
  005af	3b c3		 cmp	 eax, ebx
  005b1	0f 85 5e 01 00
	00		 jne	 $LN1468@GetAvailab@2
  005b7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  005bc	33 c0		 xor	 eax, eax
$LN881@GetAvailab@2:
  005be	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  005c1	72 05		 jb	 SHORT $LN872@GetAvailab@2
  005c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN872@GetAvailab@2:
  005c8	8b c6		 mov	 eax, esi
  005ca	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  005cd	8d 49 00	 npad	 3
$LL1487@GetAvailab@2:
  005d0	8a 08		 mov	 cl, BYTE PTR [eax]
  005d2	40		 inc	 eax
  005d3	3a cb		 cmp	 cl, bl
  005d5	75 f9		 jne	 SHORT $LL1487@GetAvailab@2
  005d7	2b c2		 sub	 eax, edx
  005d9	50		 push	 eax
  005da	56		 push	 esi
  005db	8d 4d 60	 lea	 ecx, DWORD PTR _keyfile$125299[ebp+32]
  005de	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 229  : 
; 230  : #if defined (TC_WINDOWS) && !defined (TC_PROTOTYPE)
; 231  : 				keyfile.Id = Utf8StringToWide ((const char *) &label.front());

  005e3	8b 75 d8	 mov	 esi, DWORD PTR _label$125312[ebp+12]
  005e6	3b 75 dc	 cmp	 esi, DWORD PTR _label$125312[ebp+16]
  005e9	76 05		 jbe	 SHORT $LN897@GetAvailab@2
  005eb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN897@GetAvailab@2:
  005f0	8b 45 cc	 mov	 eax, DWORD PTR _label$125312[ebp]
  005f3	3b c3		 cmp	 eax, ebx
  005f5	0f 85 21 01 00
	00		 jne	 $LN1467@GetAvailab@2
  005fb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00600	33 c0		 xor	 eax, eax
$LN919@GetAvailab@2:
  00602	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  00605	72 05		 jb	 SHORT $LN910@GetAvailab@2
  00607	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN910@GetAvailab@2:
  0060c	8b c6		 mov	 eax, esi
  0060e	c7 85 28 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T196530[ebp+24], 15 ; 0000000fH
  00618	89 9d 24 ff ff
	ff		 mov	 DWORD PTR $T196530[ebp+20], ebx
  0061e	88 9d 14 ff ff
	ff		 mov	 BYTE PTR $T196530[ebp+4], bl
  00624	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL1488@GetAvailab@2:
  00627	8a 08		 mov	 cl, BYTE PTR [eax]
  00629	40		 inc	 eax
  0062a	3a cb		 cmp	 cl, bl
  0062c	75 f9		 jne	 SHORT $LL1488@GetAvailab@2
  0062e	2b c2		 sub	 eax, edx
  00630	50		 push	 eax
  00631	56		 push	 esi
  00632	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T196530[ebp]
  00638	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0063d	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T196530[ebp]
  00643	50		 push	 eax
  00644	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T196531[ebp]
  0064a	51		 push	 ecx
  0064b	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+12], 17 ; 00000011H
  0064f	e8 00 00 00 00	 call	 ?Utf8StringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; Utf8StringToWide
  00654	83 c4 08	 add	 esp, 8
  00657	6a ff		 push	 -1
  00659	53		 push	 ebx
  0065a	50		 push	 eax
  0065b	8d 4d 44	 lea	 ecx, DWORD PTR _keyfile$125299[ebp+4]
  0065e	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+12], 18 ; 00000012H
  00662	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00667	83 bd 0c ff ff
	ff 08		 cmp	 DWORD PTR $T196531[ebp+24], 8
  0066e	72 0f		 jb	 SHORT $LN980@GetAvailab@2
  00670	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR $T196531[ebp+4]
  00676	52		 push	 edx
  00677	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0067c	83 c4 04	 add	 esp, 4
$LN980@GetAvailab@2:
  0067f	33 c0		 xor	 eax, eax
  00681	83 bd 28 ff ff
	ff 10		 cmp	 DWORD PTR $T196530[ebp+24], 16 ; 00000010H
  00688	c7 85 0c ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T196531[ebp+24], 7
  00692	89 9d 08 ff ff
	ff		 mov	 DWORD PTR $T196531[ebp+20], ebx
  00698	66 89 85 f8 fe
	ff ff		 mov	 WORD PTR $T196531[ebp+4], ax
  0069f	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+12], 16 ; 00000010H
  006a3	72 0f		 jb	 SHORT $LN1006@GetAvailab@2
  006a5	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR $T196530[ebp+4]
  006ab	51		 push	 ecx
  006ac	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  006b1	83 c4 04	 add	 esp, 4
$LN1006@GetAvailab@2:

; 232  : #else
; 233  : 				keyfile.Id = StringConverter::ToWide ((const char *) &label.front());
; 234  : #endif
; 235  : 				if (keyfile.Id.empty() || (!keyfileIdFilter.empty() && keyfileIdFilter != keyfile.Id))

  006b4	8b 7d 58	 mov	 edi, DWORD PTR _keyfile$125299[ebp+24]
  006b7	3b fb		 cmp	 edi, ebx
  006b9	0f 84 01 01 00
	00		 je	 $LN3@GetAvailab@2
  006bf	8b b5 e8 00 00
	00		 mov	 esi, DWORD PTR _keyfileIdFilter$[ebp+20]
  006c5	3b f3		 cmp	 esi, ebx
  006c7	0f 84 80 00 00
	00		 je	 $LN4@GetAvailab@2
  006cd	8b 45 48	 mov	 eax, DWORD PTR _keyfile$125299[ebp+8]
  006d0	b9 08 00 00 00	 mov	 ecx, 8
  006d5	39 4d 5c	 cmp	 DWORD PTR _keyfile$125299[ebp+28], ecx
  006d8	73 03		 jae	 SHORT $LN1031@GetAvailab@2
  006da	8d 45 48	 lea	 eax, DWORD PTR _keyfile$125299[ebp+8]
$LN1031@GetAvailab@2:
  006dd	8b d6		 mov	 edx, esi
  006df	3b f7		 cmp	 esi, edi
  006e1	72 02		 jb	 SHORT $LN1037@GetAvailab@2
  006e3	8b d7		 mov	 edx, edi
$LN1037@GetAvailab@2:
  006e5	39 8d ec 00 00
	00		 cmp	 DWORD PTR _keyfileIdFilter$[ebp+24], ecx
  006eb	8b 8d d8 00 00
	00		 mov	 ecx, DWORD PTR _keyfileIdFilter$[ebp+4]
  006f1	73 06		 jae	 SHORT $LN1045@GetAvailab@2
  006f3	8d 8d d8 00 00
	00		 lea	 ecx, DWORD PTR _keyfileIdFilter$[ebp+4]
$LN1045@GetAvailab@2:
  006f9	3b d3		 cmp	 edx, ebx
  006fb	76 3d		 jbe	 SHORT $LN1040@GetAvailab@2
  006fd	8d 49 00	 npad	 3
$LL1051@GetAvailab@2:
  00700	66 8b 39	 mov	 di, WORD PTR [ecx]
  00703	66 3b 38	 cmp	 di, WORD PTR [eax]
  00706	75 1b		 jne	 SHORT $LN1453@GetAvailab@2
  00708	83 c1 02	 add	 ecx, 2
  0070b	83 c0 02	 add	 eax, 2
  0070e	83 ea 01	 sub	 edx, 1
  00711	75 ed		 jne	 SHORT $LL1051@GetAvailab@2

; 239  : 
; 240  : 				if (!keyfileIdFilter.empty())

  00713	eb 22		 jmp	 SHORT $LN1501@GetAvailab@2
$LN1468@GetAvailab@2:

; 227  : 
; 228  : 				keyfile.IdUtf8 = (char *) &label.front();

  00715	8b 00		 mov	 eax, DWORD PTR [eax]
  00717	e9 a2 fe ff ff	 jmp	 $LN881@GetAvailab@2
$LN1467@GetAvailab@2:

; 229  : 
; 230  : #if defined (TC_WINDOWS) && !defined (TC_PROTOTYPE)
; 231  : 				keyfile.Id = Utf8StringToWide ((const char *) &label.front());

  0071c	8b 00		 mov	 eax, DWORD PTR [eax]
  0071e	e9 df fe ff ff	 jmp	 $LN919@GetAvailab@2
$LN1453@GetAvailab@2:

; 232  : #else
; 233  : 				keyfile.Id = StringConverter::ToWide ((const char *) &label.front());
; 234  : #endif
; 235  : 				if (keyfile.Id.empty() || (!keyfileIdFilter.empty() && keyfileIdFilter != keyfile.Id))

  00723	66 8b d7	 mov	 dx, di
  00726	66 3b 10	 cmp	 dx, WORD PTR [eax]
  00729	1b c0		 sbb	 eax, eax
  0072b	83 e0 fe	 and	 eax, -2			; fffffffeH
  0072e	40		 inc	 eax
  0072f	3b c3		 cmp	 eax, ebx
  00731	0f 85 89 00 00
	00		 jne	 $LN3@GetAvailab@2
$LN1501@GetAvailab@2:
  00737	8b 7d 58	 mov	 edi, DWORD PTR _keyfile$125299[ebp+24]
$LN1040@GetAvailab@2:
  0073a	3b f7		 cmp	 esi, edi
  0073c	0f 82 7e 00 00
	00		 jb	 $LN3@GetAvailab@2
  00742	33 c0		 xor	 eax, eax
  00744	3b f7		 cmp	 esi, edi
  00746	0f 95 c0	 setne	 al
  00749	3b c3		 cmp	 eax, ebx
  0074b	75 73		 jne	 SHORT $LN3@GetAvailab@2
$LN4@GetAvailab@2:

; 237  : 
; 238  : 				keyfiles.push_back (keyfile);

  0074d	8b 4d a4	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00750	8d 45 40	 lea	 eax, DWORD PTR _keyfile$125299[ebp]
  00753	50		 push	 eax
  00754	e8 00 00 00 00	 call	 ?push_back@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEXABUSecurityTokenKeyfile@CipherShed@@@Z ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::push_back

; 242  : 			}

  00759	8b 45 d8	 mov	 eax, DWORD PTR _label$125312[ebp+12]
  0075c	39 9d e8 00 00
	00		 cmp	 DWORD PTR _keyfileIdFilter$[ebp+20], ebx
  00762	0f 85 56 01 00
	00		 jne	 $LN1456@GetAvailab@2
  00768	3b c3		 cmp	 eax, ebx
  0076a	74 09		 je	 SHORT $LN1345@GetAvailab@2
  0076c	50		 push	 eax
  0076d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00772	83 c4 04	 add	 esp, 4
$LN1345@GetAvailab@2:
  00775	8b 4d cc	 mov	 ecx, DWORD PTR _label$125312[ebp]
  00778	51		 push	 ecx
  00779	89 5d d8	 mov	 DWORD PTR _label$125312[ebp+12], ebx
  0077c	89 5d dc	 mov	 DWORD PTR _label$125312[ebp+16], ebx
  0077f	89 5d e0	 mov	 DWORD PTR _label$125312[ebp+20], ebx
  00782	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00787	8b 45 c0	 mov	 eax, DWORD PTR _privateAttrib$125304[ebp+12]
  0078a	83 c4 04	 add	 esp, 4
  0078d	3b c3		 cmp	 eax, ebx
  0078f	74 09		 je	 SHORT $LN1360@GetAvailab@2
  00791	50		 push	 eax
  00792	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00797	83 c4 04	 add	 esp, 4
$LN1360@GetAvailab@2:
  0079a	8b 55 b4	 mov	 edx, DWORD PTR _privateAttrib$125304[ebp]
  0079d	52		 push	 edx
  0079e	89 5d c0	 mov	 DWORD PTR _privateAttrib$125304[ebp+12], ebx
  007a1	89 5d c4	 mov	 DWORD PTR _privateAttrib$125304[ebp+16], ebx
  007a4	89 5d c8	 mov	 DWORD PTR _privateAttrib$125304[ebp+20], ebx
  007a7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  007ac	83 c4 04	 add	 esp, 4
  007af	8d 4d 40	 lea	 ecx, DWORD PTR _keyfile$125299[ebp]
  007b2	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+12], 11 ; 0000000bH
  007b6	e8 00 00 00 00	 call	 ??1SecurityTokenKeyfile@CipherShed@@QAE@XZ
  007bb	e9 de 00 00 00	 jmp	 $LN7@GetAvailab@2
$LN3@GetAvailab@2:

; 236  : 					continue;

  007c0	8b 45 d8	 mov	 eax, DWORD PTR _label$125312[ebp+12]
  007c3	3b c3		 cmp	 eax, ebx
  007c5	74 09		 je	 SHORT $LN1059@GetAvailab@2
  007c7	50		 push	 eax
  007c8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  007cd	83 c4 04	 add	 esp, 4
$LN1059@GetAvailab@2:
  007d0	8b 45 cc	 mov	 eax, DWORD PTR _label$125312[ebp]
  007d3	50		 push	 eax
  007d4	89 5d d8	 mov	 DWORD PTR _label$125312[ebp+12], ebx
  007d7	89 5d dc	 mov	 DWORD PTR _label$125312[ebp+16], ebx
  007da	89 5d e0	 mov	 DWORD PTR _label$125312[ebp+20], ebx
  007dd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  007e2	8b 45 c0	 mov	 eax, DWORD PTR _privateAttrib$125304[ebp+12]
  007e5	83 c4 04	 add	 esp, 4
  007e8	3b c3		 cmp	 eax, ebx
  007ea	74 09		 je	 SHORT $LN1074@GetAvailab@2
  007ec	50		 push	 eax
  007ed	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  007f2	83 c4 04	 add	 esp, 4
$LN1074@GetAvailab@2:
  007f5	8b 4d b4	 mov	 ecx, DWORD PTR _privateAttrib$125304[ebp]
  007f8	51		 push	 ecx
  007f9	89 5d c0	 mov	 DWORD PTR _privateAttrib$125304[ebp+12], ebx
  007fc	89 5d c4	 mov	 DWORD PTR _privateAttrib$125304[ebp+16], ebx
  007ff	89 5d c8	 mov	 DWORD PTR _privateAttrib$125304[ebp+20], ebx
  00802	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00807	83 c4 04	 add	 esp, 4
  0080a	83 bd bc 00 00
	00 10		 cmp	 DWORD PTR _keyfile$125299[ebp+124], 16 ; 00000010H
  00811	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+12], 11 ; 0000000bH
  00815	72 0f		 jb	 SHORT $LN1104@GetAvailab@2
  00817	8b 95 a8 00 00
	00		 mov	 edx, DWORD PTR _keyfile$125299[ebp+104]
  0081d	52		 push	 edx
  0081e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00823	83 c4 04	 add	 esp, 4
$LN1104@GetAvailab@2:
  00826	be 08 00 00 00	 mov	 esi, 8
  0082b	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00830	89 bd bc 00 00
	00		 mov	 DWORD PTR _keyfile$125299[ebp+124], edi
  00836	89 9d b8 00 00
	00		 mov	 DWORD PTR _keyfile$125299[ebp+120], ebx
  0083c	88 9d a8 00 00
	00		 mov	 BYTE PTR _keyfile$125299[ebp+104], bl
  00842	39 b5 a0 00 00
	00		 cmp	 DWORD PTR _keyfile$125299[ebp+96], esi
  00848	72 0f		 jb	 SHORT $LN1132@GetAvailab@2
  0084a	8b 85 8c 00 00
	00		 mov	 eax, DWORD PTR _keyfile$125299[ebp+76]
  00850	50		 push	 eax
  00851	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00856	83 c4 04	 add	 esp, 4
$LN1132@GetAvailab@2:
  00859	33 c9		 xor	 ecx, ecx
  0085b	83 7d 78 10	 cmp	 DWORD PTR _keyfile$125299[ebp+56], 16 ; 00000010H
  0085f	c7 85 a0 00 00
	00 07 00 00 00	 mov	 DWORD PTR _keyfile$125299[ebp+96], 7
  00869	89 9d 9c 00 00
	00		 mov	 DWORD PTR _keyfile$125299[ebp+92], ebx
  0086f	66 89 8d 8c 00
	00 00		 mov	 WORD PTR _keyfile$125299[ebp+76], cx
  00876	72 0c		 jb	 SHORT $LN1158@GetAvailab@2
  00878	8b 55 64	 mov	 edx, DWORD PTR _keyfile$125299[ebp+36]
  0087b	52		 push	 edx
  0087c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00881	83 c4 04	 add	 esp, 4
$LN1158@GetAvailab@2:
  00884	89 7d 78	 mov	 DWORD PTR _keyfile$125299[ebp+56], edi
  00887	89 5d 74	 mov	 DWORD PTR _keyfile$125299[ebp+52], ebx
  0088a	88 5d 64	 mov	 BYTE PTR _keyfile$125299[ebp+36], bl
  0088d	39 75 5c	 cmp	 DWORD PTR _keyfile$125299[ebp+28], esi
  00890	72 0c		 jb	 SHORT $LN7@GetAvailab@2
  00892	8b 45 48	 mov	 eax, DWORD PTR _keyfile$125299[ebp+8]
  00895	50		 push	 eax
$LN1506@GetAvailab@2:
  00896	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0089b	83 c4 04	 add	 esp, 4
$LN7@GetAvailab@2:
  0089e	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _$S4$125265[ebp]
  008a4	c6 41 04 01	 mov	 BYTE PTR [ecx+4], 1
  008a8	38 59 05	 cmp	 BYTE PTR [ecx+5], bl
  008ab	0f 94 c0	 sete	 al
  008ae	88 41 05	 mov	 BYTE PTR [ecx+5], al
  008b1	3a c3		 cmp	 al, bl
  008b3	0f 85 77 fa ff
	ff		 jne	 $LL373@GetAvailab@2

; 239  : 
; 240  : 				if (!keyfileIdFilter.empty())

  008b9	e9 db 00 00 00	 jmp	 $LN10@GetAvailab@2
$LN1456@GetAvailab@2:

; 241  : 					break;

  008be	3b c3		 cmp	 eax, ebx
  008c0	74 09		 je	 SHORT $LN1203@GetAvailab@2
  008c2	50		 push	 eax
  008c3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  008c8	83 c4 04	 add	 esp, 4
$LN1203@GetAvailab@2:
  008cb	8b 4d cc	 mov	 ecx, DWORD PTR _label$125312[ebp]
  008ce	51		 push	 ecx
  008cf	89 5d d8	 mov	 DWORD PTR _label$125312[ebp+12], ebx
  008d2	89 5d dc	 mov	 DWORD PTR _label$125312[ebp+16], ebx
  008d5	89 5d e0	 mov	 DWORD PTR _label$125312[ebp+20], ebx
  008d8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  008dd	8b 45 c0	 mov	 eax, DWORD PTR _privateAttrib$125304[ebp+12]
  008e0	83 c4 04	 add	 esp, 4
  008e3	3b c3		 cmp	 eax, ebx
  008e5	74 09		 je	 SHORT $LN1218@GetAvailab@2
  008e7	50		 push	 eax
  008e8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  008ed	83 c4 04	 add	 esp, 4
$LN1218@GetAvailab@2:
  008f0	8b 55 b4	 mov	 edx, DWORD PTR _privateAttrib$125304[ebp]
  008f3	52		 push	 edx
  008f4	89 5d c0	 mov	 DWORD PTR _privateAttrib$125304[ebp+12], ebx
  008f7	89 5d c4	 mov	 DWORD PTR _privateAttrib$125304[ebp+16], ebx
  008fa	89 5d c8	 mov	 DWORD PTR _privateAttrib$125304[ebp+20], ebx
  008fd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00902	83 c4 04	 add	 esp, 4
  00905	83 bd bc 00 00
	00 10		 cmp	 DWORD PTR _keyfile$125299[ebp+124], 16 ; 00000010H
  0090c	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+12], 11 ; 0000000bH
  00910	72 0f		 jb	 SHORT $LN1248@GetAvailab@2
  00912	8b 85 a8 00 00
	00		 mov	 eax, DWORD PTR _keyfile$125299[ebp+104]
  00918	50		 push	 eax
  00919	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0091e	83 c4 04	 add	 esp, 4
$LN1248@GetAvailab@2:
  00921	be 08 00 00 00	 mov	 esi, 8
  00926	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  0092b	89 bd bc 00 00
	00		 mov	 DWORD PTR _keyfile$125299[ebp+124], edi
  00931	89 9d b8 00 00
	00		 mov	 DWORD PTR _keyfile$125299[ebp+120], ebx
  00937	88 9d a8 00 00
	00		 mov	 BYTE PTR _keyfile$125299[ebp+104], bl
  0093d	39 b5 a0 00 00
	00		 cmp	 DWORD PTR _keyfile$125299[ebp+96], esi
  00943	72 0f		 jb	 SHORT $LN1276@GetAvailab@2
  00945	8b 8d 8c 00 00
	00		 mov	 ecx, DWORD PTR _keyfile$125299[ebp+76]
  0094b	51		 push	 ecx
  0094c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00951	83 c4 04	 add	 esp, 4
$LN1276@GetAvailab@2:
  00954	33 d2		 xor	 edx, edx
  00956	83 7d 78 10	 cmp	 DWORD PTR _keyfile$125299[ebp+56], 16 ; 00000010H
  0095a	c7 85 a0 00 00
	00 07 00 00 00	 mov	 DWORD PTR _keyfile$125299[ebp+96], 7
  00964	89 9d 9c 00 00
	00		 mov	 DWORD PTR _keyfile$125299[ebp+92], ebx
  0096a	66 89 95 8c 00
	00 00		 mov	 WORD PTR _keyfile$125299[ebp+76], dx
  00971	72 0c		 jb	 SHORT $LN1302@GetAvailab@2
  00973	8b 45 64	 mov	 eax, DWORD PTR _keyfile$125299[ebp+36]
  00976	50		 push	 eax
  00977	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0097c	83 c4 04	 add	 esp, 4
$LN1302@GetAvailab@2:
  0097f	89 7d 78	 mov	 DWORD PTR _keyfile$125299[ebp+56], edi
  00982	89 5d 74	 mov	 DWORD PTR _keyfile$125299[ebp+52], ebx
  00985	88 5d 64	 mov	 BYTE PTR _keyfile$125299[ebp+36], bl
  00988	39 75 5c	 cmp	 DWORD PTR _keyfile$125299[ebp+28], esi
  0098b	72 0c		 jb	 SHORT $LN10@GetAvailab@2
  0098d	8b 4d 48	 mov	 ecx, DWORD PTR _keyfile$125299[ebp+8]
  00990	51		 push	 ecx
  00991	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00996	83 c4 04	 add	 esp, 4
$LN10@GetAvailab@2:
  00999	8d b5 74 ff ff
	ff		 lea	 esi, DWORD PTR _$S4$125265[ebp]
  0099f	8b 16		 mov	 edx, DWORD PTR [esi]
  009a1	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  009a4	8b ce		 mov	 ecx, esi
  009a6	ff d0		 call	 eax
  009a8	8b 16		 mov	 edx, DWORD PTR [esi]
  009aa	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  009ad	8b ce		 mov	 ecx, esi
  009af	ff d0		 call	 eax
  009b1	84 c0		 test	 al, al
  009b3	0f 85 f7 f8 ff
	ff		 jne	 $LL11@GetAvailab@2
$LN9@GetAvailab@2:

; 242  : 			}

  009b9	8b 45 88	 mov	 eax, DWORD PTR _$S4$125265[ebp+20]
  009bc	3b c3		 cmp	 eax, ebx
  009be	74 09		 je	 SHORT $LN1377@GetAvailab@2
  009c0	50		 push	 eax
  009c1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  009c6	83 c4 04	 add	 esp, 4
$LN1377@GetAvailab@2:
  009c9	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _$S4$125265[ebp+8]
  009cf	51		 push	 ecx
  009d0	89 5d 88	 mov	 DWORD PTR _$S4$125265[ebp+20], ebx
  009d3	89 5d 8c	 mov	 DWORD PTR _$S4$125265[ebp+24], ebx
  009d6	89 5d 90	 mov	 DWORD PTR _$S4$125265[ebp+28], ebx
  009d9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  009de	83 c4 04	 add	 esp, 4

; 243  : 		}

  009e1	8d 4d 00	 lea	 ecx, DWORD PTR _token$124904[ebp]
  009e4	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  009e8	e8 00 00 00 00	 call	 ??1SecurityTokenInfo@CipherShed@@QAE@XZ
  009ed	8b 7d ac	 mov	 edi, DWORD PTR _forEachContainer$124292[ebp]
  009f0	c6 47 04 01	 mov	 BYTE PTR [edi+4], 1
  009f4	e9 59 f7 ff ff	 jmp	 $LL1482@GetAvailab@2
__catch$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$0:

; 195  : 			}
; 196  : 			catch (UserAbort &)
; 197  : 			{
; 198  : 				continue;

  009f9	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
  00a00	b8 00 00 00 00	 mov	 eax, $LN53@GetAvailab@2
  00a05	c3		 ret	 0
__catch$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$1:

; 199  : 			}
; 200  : 			catch (Pkcs11Exception &e)
; 201  : 			{
; 202  : 				if (e.GetErrorCode() == CKR_TOKEN_NOT_RECOGNIZED)

  00a06	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _e$124910[ebp]
  00a0c	81 7a 04 e1 00
	00 00		 cmp	 DWORD PTR [edx+4], 225	; 000000e1H
  00a13	75 2b		 jne	 SHORT $LN12@GetAvailab@2

; 203  : 				{
; 204  : 					unrecognizedTokenPresent = true;

  00a15	c6 45 ef 01	 mov	 BYTE PTR _unrecognizedTokenPresent$[ebp], 1

; 205  : 					continue;

  00a19	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
  00a20	b8 00 00 00 00	 mov	 eax, $LN53@GetAvailab@2
  00a25	c3		 ret	 0
$LN53@GetAvailab@2:
  00a26	8d 4d 00	 lea	 ecx, DWORD PTR _token$124904[ebp]
  00a29	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  00a2d	e8 00 00 00 00	 call	 ??1SecurityTokenInfo@CipherShed@@QAE@XZ
  00a32	8b 7d ac	 mov	 edi, DWORD PTR _forEachContainer$124292[ebp]
  00a35	33 db		 xor	 ebx, ebx
  00a37	c6 47 04 01	 mov	 BYTE PTR [edi+4], 1
  00a3b	e9 12 f7 ff ff	 jmp	 $LL1482@GetAvailab@2
$LN12@GetAvailab@2:

; 206  : 				}
; 207  : 
; 208  : 				throw;

  00a40	33 db		 xor	 ebx, ebx
  00a42	53		 push	 ebx
  00a43	53		 push	 ebx
  00a44	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN19@GetAvailab@2:

; 183  : 
; 184  : 		foreach (const CK_SLOT_ID &slotId, GetTokenSlots())

  00a49	8b 07		 mov	 eax, DWORD PTR [edi]
  00a4b	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00a4e	8b cf		 mov	 ecx, edi
  00a50	ff d2		 call	 edx
  00a52	8b 75 a4	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00a55	e9 56 f6 ff ff	 jmp	 $LL20@GetAvailab@2
$LN18@GetAvailab@2:

; 243  : 		}

  00a5a	8d 8d 74 fe ff
	ff		 lea	 ecx, DWORD PTR _$S3$124870[ebp+8]
  00a60	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00a64	e8 00 00 00 00	 call	 ?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy
  00a69	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR _$S3$124870[ebp+8]
  00a6f	50		 push	 eax
  00a70	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 244  : 
; 245  : 		if (keyfiles.empty() && unrecognizedTokenPresent)

  00a75	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00a78	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  00a7b	83 c4 04	 add	 esp, 4
  00a7e	c7 85 6c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S3$124870[ebp], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00a88	f7 c1 80 ff ff
	ff		 test	 ecx, -128		; ffffff80H
  00a8e	75 30		 jne	 SHORT $LN1@GetAvailab@2
  00a90	38 5d ef	 cmp	 BYTE PTR _unrecognizedTokenPresent$[ebp], bl
  00a93	74 2b		 je	 SHORT $LN1@GetAvailab@2

; 246  : 			throw Pkcs11Exception (CKR_TOKEN_NOT_RECOGNIZED);

  00a95	68 00 00 00 00	 push	 OFFSET __TI2?AUPkcs11Exception@CipherShed@@
  00a9a	8d 95 c4 fe ff
	ff		 lea	 edx, DWORD PTR $T196532[ebp]
  00aa0	52		 push	 edx
  00aa1	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T196532[ebp], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  00aab	c7 85 c8 fe ff
	ff e1 00 00 00	 mov	 DWORD PTR $T196532[ebp+4], 225 ; 000000e1H
  00ab5	88 9d cc fe ff
	ff		 mov	 BYTE PTR $T196532[ebp+8], bl
  00abb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@GetAvailab@2:

; 247  : 
; 248  : 		return keyfiles;

  00ac0	83 bd ec 00 00
	00 08		 cmp	 DWORD PTR _keyfileIdFilter$[ebp+24], 8
  00ac7	72 0f		 jb	 SHORT $LN1433@GetAvailab@2
  00ac9	8b 85 d8 00 00
	00		 mov	 eax, DWORD PTR _keyfileIdFilter$[ebp+4]
  00acf	50		 push	 eax
  00ad0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00ad5	83 c4 04	 add	 esp, 4
$LN1433@GetAvailab@2:
  00ad8	8b c6		 mov	 eax, esi

; 249  : 	}

  00ada	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00add	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00ae4	59		 pop	 ecx
  00ae5	5f		 pop	 edi
  00ae6	5e		 pop	 esi
  00ae7	5b		 pop	 ebx
  00ae8	8b 8d c0 00 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00aee	33 cd		 xor	 ecx, ebp
  00af0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00af5	81 c5 c4 00 00
	00		 add	 ebp, 196		; 000000c4H
  00afb	8b e5		 mov	 esp, ebp
  00afd	5d		 pop	 ebp
  00afe	c3		 ret	 0
$LN1505@GetAvailab@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$3:
  00000	8d 8d d4 00 00
	00		 lea	 ecx, DWORD PTR _keyfileIdFilter$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$4:
  0000b	8b 45 e8	 mov	 eax, DWORD PTR $T196538[ebp]
  0000e	83 e0 01	 and	 eax, 1
  00011	0f 84 0c 00 00
	00		 je	 $LN32@GetAvailab@2
  00017	83 65 e8 fe	 and	 DWORD PTR $T196538[ebp], -2 ; fffffffeH
  0001b	8b 4d a4	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::~vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
$LN32@GetAvailab@2:
  00023	c3		 ret	 0
__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$5:
  00024	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR $T196512[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$list@KV?$allocator@K@std@@@std@@QAE@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::~list<unsigned long,std::allocator<unsigned long> >
__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$6:
  0002f	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _$S3$124870[ebp]
  00035	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$8:
  0003a	8d 4d 00	 lea	 ecx, DWORD PTR _token$124904[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1SecurityTokenInfo@CipherShed@@QAE@XZ
__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$9:
  00042	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T196520[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1SecurityTokenInfo@CipherShed@@QAE@XZ
__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$10:
  0004d	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T196521[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$11:
  00058	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _$S4$125265[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$13:
  00063	8d 4d 40	 lea	 ecx, DWORD PTR _keyfile$125299[ebp]
  00066	e9 00 00 00 00	 jmp	 ??1SecurityTokenKeyfile@CipherShed@@QAE@XZ
__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$18:
  0006b	8d 4d b4	 lea	 ecx, DWORD PTR _privateAttrib$125304[ebp]
  0006e	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ
__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$14:
  00073	8d 4d b4	 lea	 ecx, DWORD PTR _privateAttrib$125304[ebp]
  00076	e9 00 00 00 00	 jmp	 ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$21:
  0007b	8d 4d cc	 lea	 ecx, DWORD PTR _label$125312[ebp]
  0007e	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ
__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$15:
  00083	8d 4d cc	 lea	 ecx, DWORD PTR _label$125312[ebp]
  00086	e9 00 00 00 00	 jmp	 ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$16:
  0008b	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T196530[ebp]
  00091	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z$17:
  00096	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T196531[ebp]
  0009c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z:
  000a1	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000a5	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000a8	8b 8a 68 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-408]
  000ae	33 c8		 xor	 ecx, eax
  000b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b5	8b 8a cc 00 00
	00		 mov	 ecx, DWORD PTR [edx+204]
  000bb	33 c8		 xor	 ecx, eax
  000bd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c2	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z
  000c7	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z ENDP ; CipherShed::SecurityToken::GetAvailableKeyfiles
PUBLIC	__TI2?AUSecurityTokenKeyfileNotFound@CipherShed@@
PUBLIC	__TI2?AUInvalidSecurityTokenKeyfilePath@CipherShed@@
PUBLIC	??_C@_1CC@OMDFECBP@?$AAt?$AAo?$AAk?$AAe?$AAn?$AA?3?$AA?1?$AA?1?$AAs?$AAl?$AAo?$AAt?$AA?1?$AA?$CF?$AAl?$AAu?$AA?$AA@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z ; CipherShed::SecurityTokenKeyfile::SecurityTokenKeyfile
PUBLIC	__CTA2?AUInvalidSecurityTokenKeyfilePath@CipherShed@@
PUBLIC	__CT??_R0?AUInvalidSecurityTokenKeyfilePath@CipherShed@@@8??0InvalidSecurityTokenKeyfilePath@CipherShed@@QAE@ABU01@@Z4
PUBLIC	??0InvalidSecurityTokenKeyfilePath@CipherShed@@QAE@ABU01@@Z ; CipherShed::InvalidSecurityTokenKeyfilePath::InvalidSecurityTokenKeyfilePath
PUBLIC	__CTA2?AUSecurityTokenKeyfileNotFound@CipherShed@@
PUBLIC	__CT??_R0?AUSecurityTokenKeyfileNotFound@CipherShed@@@8??0SecurityTokenKeyfileNotFound@CipherShed@@QAE@ABU01@@Z4
PUBLIC	??0SecurityTokenKeyfileNotFound@CipherShed@@QAE@ABU01@@Z ; CipherShed::SecurityTokenKeyfileNotFound::SecurityTokenKeyfileNotFound
EXTRN	_swscanf:PROC
;	COMDAT __CT??_R0?AUSecurityTokenKeyfileNotFound@CipherShed@@@8??0SecurityTokenKeyfileNotFound@CipherShed@@QAE@ABU01@@Z4
; File c:\home\public\desktop\projects\ciphershed.build\src\common\exception.h
xdata$x	SEGMENT
__CT??_R0?AUSecurityTokenKeyfileNotFound@CipherShed@@@8??0SecurityTokenKeyfileNotFound@CipherShed@@QAE@ABU01@@Z4 DD 00H
	DD	FLAT:??_R0?AUSecurityTokenKeyfileNotFound@CipherShed@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	FLAT:??0SecurityTokenKeyfileNotFound@CipherShed@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AUSecurityTokenKeyfileNotFound@CipherShed@@
xdata$x	SEGMENT
__CTA2?AUSecurityTokenKeyfileNotFound@CipherShed@@ DD 02H
	DD	FLAT:__CT??_R0?AUSecurityTokenKeyfileNotFound@CipherShed@@@8??0SecurityTokenKeyfileNotFound@CipherShed@@QAE@ABU01@@Z4
	DD	FLAT:__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
xdata$x	ENDS
;	COMDAT __CT??_R0?AUInvalidSecurityTokenKeyfilePath@CipherShed@@@8??0InvalidSecurityTokenKeyfilePath@CipherShed@@QAE@ABU01@@Z4
xdata$x	SEGMENT
__CT??_R0?AUInvalidSecurityTokenKeyfilePath@CipherShed@@@8??0InvalidSecurityTokenKeyfilePath@CipherShed@@QAE@ABU01@@Z4 DD 00H
	DD	FLAT:??_R0?AUInvalidSecurityTokenKeyfilePath@CipherShed@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	FLAT:??0InvalidSecurityTokenKeyfilePath@CipherShed@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AUInvalidSecurityTokenKeyfilePath@CipherShed@@
xdata$x	SEGMENT
__CTA2?AUInvalidSecurityTokenKeyfilePath@CipherShed@@ DD 02H
	DD	FLAT:__CT??_R0?AUInvalidSecurityTokenKeyfilePath@CipherShed@@@8??0InvalidSecurityTokenKeyfilePath@CipherShed@@QAE@ABU01@@Z4
	DD	FLAT:__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
xdata$x	ENDS
;	COMDAT __TI2?AUSecurityTokenKeyfileNotFound@CipherShed@@
xdata$x	SEGMENT
__TI2?AUSecurityTokenKeyfileNotFound@CipherShed@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2?AUSecurityTokenKeyfileNotFound@CipherShed@@
xdata$x	ENDS
;	COMDAT __TI2?AUInvalidSecurityTokenKeyfilePath@CipherShed@@
xdata$x	SEGMENT
__TI2?AUInvalidSecurityTokenKeyfilePath@CipherShed@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2?AUInvalidSecurityTokenKeyfilePath@CipherShed@@
xdata$x	ENDS
;	COMDAT ??_C@_1CC@OMDFECBP@?$AAt?$AAo?$AAk?$AAe?$AAn?$AA?3?$AA?1?$AA?1?$AAs?$AAl?$AAo?$AAt?$AA?1?$AA?$CF?$AAl?$AAu?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@OMDFECBP@?$AAt?$AAo?$AAk?$AAe?$AAn?$AA?3?$AA?1?$AA?1?$AAs?$AAl?$AAo?$AAt?$AA?1?$AA?$CF?$AAl?$AAu?$AA?$AA@ DB 't'
	DB	00H, 'o', 00H, 'k', 00H, 'e', 00H, 'n', 00H, ':', 00H, '/', 00H
	DB	'/', 00H, 's', 00H, 'l', 00H, 'o', 00H, 't', 00H, '/', 00H, '%'
	DB	00H, 'l', 00H, 'u', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z$4
	DD	05H
	DD	FLAT:__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z$5
	DD	06H
	DD	FLAT:__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z$8
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
xdata$x	ENDS
;	COMDAT ??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z
_TEXT	SEGMENT
$T203340 = -164						; size = 4
$T203339 = -164						; size = 4
$T203336 = -164						; size = 4
$T203335 = -164						; size = 4
_slotId$ = -160						; size = 4
_this$GSCopy$ = -156					; size = 4
$T203334 = -152						; size = 28
$T203338 = -124						; size = 28
_keyfiles$ = -96					; size = 24
$T203337 = -72						; size = 28
_pathStr$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_path$ = 8						; size = 4
??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z PROC ; CipherShed::SecurityTokenKeyfile::SecurityTokenKeyfile, COMDAT
; _this$ = ecx

; 36   : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 94 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+164], eax
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c4		 xor	 eax, esp
  0002d	50		 push	 eax
  0002e	8d 84 24 ac 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+184]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	8b f1		 mov	 esi, ecx
  0003d	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR _path$[esp+180]
  00044	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  00047	bd 07 00 00 00	 mov	 ebp, 7
  0004c	33 db		 xor	 ebx, ebx
  0004e	33 c0		 xor	 eax, eax
  00050	89 6f 18	 mov	 DWORD PTR [edi+24], ebp
  00053	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  00056	89 74 24 1c	 mov	 DWORD PTR _this$GSCopy$[esp+184], esi
  0005a	66 89 47 04	 mov	 WORD PTR [edi+4], ax
  0005e	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  00063	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00066	89 5e 34	 mov	 DWORD PTR [esi+52], ebx
  00069	89 9c 24 b4 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+192], ebx
  00070	88 5e 24	 mov	 BYTE PTR [esi+36], bl
  00073	89 6e 60	 mov	 DWORD PTR [esi+96], ebp
  00076	89 5e 5c	 mov	 DWORD PTR [esi+92], ebx
  00079	33 d2		 xor	 edx, edx
  0007b	66 89 56 4c	 mov	 WORD PTR [esi+76], dx
  0007f	89 46 7c	 mov	 DWORD PTR [esi+124], eax
  00082	89 5e 78	 mov	 DWORD PTR [esi+120], ebx
  00085	88 5e 68	 mov	 BYTE PTR [esi+104], bl

; 37   : 		wstring pathStr = path;

  00088	8d 44 24 20	 lea	 eax, DWORD PTR $T203334[esp+184]
  0008c	50		 push	 eax
  0008d	c6 84 24 b8 00
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+196], 2
  00095	e8 00 00 00 00	 call	 ??BSecurityTokenKeyfilePath@CipherShed@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; CipherShed::SecurityTokenKeyfilePath::operator std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0009a	6a ff		 push	 -1
  0009c	33 c9		 xor	 ecx, ecx
  0009e	53		 push	 ebx
  0009f	8d 54 24 28	 lea	 edx, DWORD PTR $T203334[esp+192]
  000a3	66 89 8c 24 98
	00 00 00	 mov	 WORD PTR _pathStr$[esp+196], cx
  000ab	52		 push	 edx
  000ac	8d 8c 24 98 00
	00 00		 lea	 ecx, DWORD PTR _pathStr$[esp+196]
  000b3	c6 84 24 c0 00
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+204], 3
  000bb	89 ac 24 b0 00
	00 00		 mov	 DWORD PTR _pathStr$[esp+220], ebp
  000c2	89 9c 24 ac 00
	00 00		 mov	 DWORD PTR _pathStr$[esp+216], ebx
  000c9	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  000ce	83 7c 24 38 08	 cmp	 DWORD PTR $T203334[esp+208], 8
  000d3	c6 84 24 b4 00
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+192], 5
  000db	72 0d		 jb	 SHORT $LN195@SecurityTo@5
  000dd	8b 44 24 24	 mov	 eax, DWORD PTR $T203334[esp+188]
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e7	83 c4 04	 add	 esp, 4
$LN195@SecurityTo@5:

; 38   : 		unsigned long slotId;
; 39   : 
; 40   : 		if (swscanf (pathStr.c_str(), TC_SECURITY_TOKEN_KEYFILE_URL_PREFIX TC_SECURITY_TOKEN_KEYFILE_URL_SLOT L"/%lu", &slotId) != 1)

  000ea	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR _pathStr$[esp+188]
  000f1	33 c9		 xor	 ecx, ecx
  000f3	83 bc 24 a4 00
	00 00 08	 cmp	 DWORD PTR _pathStr$[esp+208], 8
  000fb	89 6c 24 38	 mov	 DWORD PTR $T203334[esp+208], ebp
  000ff	89 5c 24 34	 mov	 DWORD PTR $T203334[esp+204], ebx
  00103	66 89 4c 24 24	 mov	 WORD PTR $T203334[esp+188], cx
  00108	73 07		 jae	 SHORT $LN210@SecurityTo@5
  0010a	8d 84 24 90 00
	00 00		 lea	 eax, DWORD PTR _pathStr$[esp+188]
$LN210@SecurityTo@5:
  00111	8d 54 24 18	 lea	 edx, DWORD PTR _slotId$[esp+184]
  00115	52		 push	 edx
  00116	68 00 00 00 00	 push	 OFFSET ??_C@_1CC@OMDFECBP@?$AAt?$AAo?$AAk?$AAe?$AAn?$AA?3?$AA?1?$AA?1?$AAs?$AAl?$AAo?$AAt?$AA?1?$AA?$CF?$AAl?$AAu?$AA?$AA@
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _swscanf
  00121	83 c4 0c	 add	 esp, 12			; 0000000cH
  00124	83 f8 01	 cmp	 eax, 1
  00127	74 17		 je	 SHORT $LN3@SecurityTo@5

; 41   : 			throw InvalidSecurityTokenKeyfilePath();

  00129	68 00 00 00 00	 push	 OFFSET __TI2?AUInvalidSecurityTokenKeyfilePath@CipherShed@@
  0012e	8d 44 24 18	 lea	 eax, DWORD PTR $T203335[esp+188]
  00132	50		 push	 eax
  00133	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T203335[esp+192], OFFSET ??_7InvalidSecurityTokenKeyfilePath@CipherShed@@6B@
  0013b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@SecurityTo@5:

; 42   : 
; 43   : 		SlotId = slotId;

  00140	8b 4c 24 18	 mov	 ecx, DWORD PTR _slotId$[esp+184]

; 44   : 
; 45   : 		size_t keyIdPos = pathStr.find (L"/" TC_SECURITY_TOKEN_KEYFILE_URL_FILE L"/");

  00144	6a 06		 push	 6
  00146	53		 push	 ebx
  00147	89 4e 3c	 mov	 DWORD PTR [esi+60], ecx
  0014a	68 00 00 00 00	 push	 OFFSET ??_C@_1O@HIAFDIDB@?$AA?1?$AAf?$AAi?$AAl?$AAe?$AA?1?$AA?$AA@
  0014f	8d 8c 24 98 00
	00 00		 lea	 ecx, DWORD PTR _pathStr$[esp+196]
  00156	e8 00 00 00 00	 call	 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find
  0015b	8b e8		 mov	 ebp, eax

; 46   : 		if (keyIdPos == string::npos)

  0015d	83 fd ff	 cmp	 ebp, -1
  00160	75 17		 jne	 SHORT $LN2@SecurityTo@5

; 47   : 			throw InvalidSecurityTokenKeyfilePath();

  00162	68 00 00 00 00	 push	 OFFSET __TI2?AUInvalidSecurityTokenKeyfilePath@CipherShed@@
  00167	8d 54 24 18	 lea	 edx, DWORD PTR $T203336[esp+188]
  0016b	52		 push	 edx
  0016c	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T203336[esp+192], OFFSET ??_7InvalidSecurityTokenKeyfilePath@CipherShed@@6B@
  00174	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@SecurityTo@5:

; 48   : 
; 49   : 		Id = pathStr.substr (keyIdPos + wstring (L"/" TC_SECURITY_TOKEN_KEYFILE_URL_FILE L"/").size());

  00179	68 00 00 00 00	 push	 OFFSET ??_C@_1O@HIAFDIDB@?$AA?1?$AAf?$AAi?$AAl?$AAe?$AA?1?$AA?$AA@
  0017e	8d 4c 24 74	 lea	 ecx, DWORD PTR $T203337[esp+188]
  00182	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00187	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0018a	6a ff		 push	 -1
  0018c	03 c5		 add	 eax, ebp
  0018e	50		 push	 eax
  0018f	8d 44 24 44	 lea	 eax, DWORD PTR $T203338[esp+192]
  00193	50		 push	 eax
  00194	8d 8c 24 98 00
	00 00		 lea	 ecx, DWORD PTR _pathStr$[esp+196]
  0019b	c6 84 24 c0 00
	00 00 06	 mov	 BYTE PTR __$EHRec$[esp+204], 6
  001a3	e8 00 00 00 00	 call	 ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
  001a8	6a ff		 push	 -1
  001aa	53		 push	 ebx
  001ab	50		 push	 eax
  001ac	8b cf		 mov	 ecx, edi
  001ae	c6 84 24 c0 00
	00 00 07	 mov	 BYTE PTR __$EHRec$[esp+204], 7
  001b6	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  001bb	bd 08 00 00 00	 mov	 ebp, 8
  001c0	39 6c 24 54	 cmp	 DWORD PTR $T203338[esp+208], ebp
  001c4	72 0d		 jb	 SHORT $LN247@SecurityTo@5
  001c6	8b 4c 24 40	 mov	 ecx, DWORD PTR $T203338[esp+188]
  001ca	51		 push	 ecx
  001cb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001d0	83 c4 04	 add	 esp, 4
$LN247@SecurityTo@5:
  001d3	33 d2		 xor	 edx, edx
  001d5	c7 44 24 54 07
	00 00 00	 mov	 DWORD PTR $T203338[esp+208], 7
  001dd	89 5c 24 50	 mov	 DWORD PTR $T203338[esp+204], ebx
  001e1	66 89 54 24 40	 mov	 WORD PTR $T203338[esp+188], dx
  001e6	c6 84 24 b4 00
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+192], 5
  001ee	39 ac 24 88 00
	00 00		 cmp	 DWORD PTR $T203337[esp+208], ebp
  001f5	72 0d		 jb	 SHORT $LN275@SecurityTo@5
  001f7	8b 44 24 74	 mov	 eax, DWORD PTR $T203337[esp+188]
  001fb	50		 push	 eax
  001fc	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00201	83 c4 04	 add	 esp, 4
$LN275@SecurityTo@5:

; 50   : 
; 51   : 		vector <SecurityTokenKeyfile> keyfiles = SecurityToken::GetAvailableKeyfiles (&SlotId, Id);

  00204	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00207	8b cc		 mov	 ecx, esp
  00209	89 64 24 30	 mov	 DWORD PTR $T203339[esp+212], esp
  0020d	6a ff		 push	 -1
  0020f	53		 push	 ebx
  00210	33 d2		 xor	 edx, edx
  00212	c7 41 18 07 00
	00 00		 mov	 DWORD PTR [ecx+24], 7
  00219	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  0021c	57		 push	 edi
  0021d	66 89 51 04	 mov	 WORD PTR [ecx+4], dx
  00221	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00226	8d 46 3c	 lea	 eax, DWORD PTR [esi+60]
  00229	50		 push	 eax
  0022a	8d 44 24 78	 lea	 eax, DWORD PTR _keyfiles$[esp+216]
  0022e	50		 push	 eax
  0022f	e8 00 00 00 00	 call	 ?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z ; CipherShed::SecurityToken::GetAvailableKeyfiles
  00234	83 c4 24	 add	 esp, 36			; 00000024H

; 52   : 
; 53   : 		if (keyfiles.empty())

  00237	8b 4c 24 68	 mov	 ecx, DWORD PTR _keyfiles$[esp+200]
  0023b	2b 4c 24 64	 sub	 ecx, DWORD PTR _keyfiles$[esp+196]
  0023f	c6 84 24 b4 00
	00 00 08	 mov	 BYTE PTR __$EHRec$[esp+192], 8
  00247	f7 c1 80 ff ff
	ff		 test	 ecx, -128		; ffffff80H
  0024d	75 17		 jne	 SHORT $LN1@SecurityTo@5

; 54   : 			throw SecurityTokenKeyfileNotFound();

  0024f	68 00 00 00 00	 push	 OFFSET __TI2?AUSecurityTokenKeyfileNotFound@CipherShed@@
  00254	8d 54 24 18	 lea	 edx, DWORD PTR $T203340[esp+188]
  00258	52		 push	 edx
  00259	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T203340[esp+192], OFFSET ??_7SecurityTokenKeyfileNotFound@CipherShed@@6B@
  00261	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@SecurityTo@5:

; 55   : 
; 56   : 		*this = keyfiles.front();

  00266	8d 4c 24 58	 lea	 ecx, DWORD PTR _keyfiles$[esp+184]
  0026a	e8 00 00 00 00	 call	 ?front@?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAEAAUSecurityTokenKeyfile@CipherShed@@XZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::front
  0026f	50		 push	 eax
  00270	8b ce		 mov	 ecx, esi
  00272	e8 00 00 00 00	 call	 ??4SecurityTokenKeyfile@CipherShed@@QAEAAU01@ABU01@@Z

; 57   : 	}

  00277	8d 4c 24 58	 lea	 ecx, DWORD PTR _keyfiles$[esp+184]
  0027b	e8 00 00 00 00	 call	 ??1?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::~vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
  00280	8d 8c 24 8c 00
	00 00		 lea	 ecx, DWORD PTR _pathStr$[esp+184]
  00287	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0028c	8b c6		 mov	 eax, esi
  0028e	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+184]
  00295	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0029c	59		 pop	 ecx
  0029d	5f		 pop	 edi
  0029e	5e		 pop	 esi
  0029f	5d		 pop	 ebp
  002a0	5b		 pop	 ebx
  002a1	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+164]
  002a8	33 cc		 xor	 ecx, esp
  002aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002af	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  002b5	c2 04 00	 ret	 4
$LN322@SecurityTo@5:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z$0:
  00000	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00006	83 c1 04	 add	 ecx, 4
  00009	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z$1:
  0000e	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00014	83 c1 20	 add	 ecx, 32			; 00000020H
  00017	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z$2:
  0001c	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00022	83 c1 40	 add	 ecx, 64			; 00000040H
  00025	e9 00 00 00 00	 jmp	 ??1SecurityTokenInfo@CipherShed@@QAE@XZ
__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z$3:
  0002a	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T203334[ebp]
  00030	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z$4:
  00035	8d 4d d4	 lea	 ecx, DWORD PTR _pathStr$[ebp]
  00038	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z$5:
  0003d	8d 4d b8	 lea	 ecx, DWORD PTR $T203337[ebp]
  00040	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z$6:
  00045	8d 4d 84	 lea	 ecx, DWORD PTR $T203338[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z$8:
  0004d	8d 4d a0	 lea	 ecx, DWORD PTR _keyfiles$[ebp]
  00050	e9 00 00 00 00	 jmp	 ??1?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::~vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
__ehhandler$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z:
  00055	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00059	8d 82 58 ff ff
	ff		 lea	 eax, DWORD PTR [edx-168]
  0005f	8b 8a 54 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-172]
  00065	33 c8		 xor	 ecx, eax
  00067	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006c	83 c0 10	 add	 eax, 16			; 00000010H
  0006f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00072	33 c8		 xor	 ecx, eax
  00074	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00079	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z
  0007e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z ENDP ; CipherShed::SecurityTokenKeyfile::SecurityTokenKeyfile
; Function compile flags: /Ogtpy
;	COMDAT ??0SecurityTokenKeyfileNotFound@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0SecurityTokenKeyfileNotFound@CipherShed@@QAE@ABU01@@Z PROC ; CipherShed::SecurityTokenKeyfileNotFound::SecurityTokenKeyfileNotFound, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7SecurityTokenKeyfileNotFound@CipherShed@@6B@
  00008	c2 04 00	 ret	 4
??0SecurityTokenKeyfileNotFound@CipherShed@@QAE@ABU01@@Z ENDP ; CipherShed::SecurityTokenKeyfileNotFound::SecurityTokenKeyfileNotFound
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0InvalidSecurityTokenKeyfilePath@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0InvalidSecurityTokenKeyfilePath@CipherShed@@QAE@ABU01@@Z PROC ; CipherShed::InvalidSecurityTokenKeyfilePath::InvalidSecurityTokenKeyfilePath, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InvalidSecurityTokenKeyfilePath@CipherShed@@6B@
  00008	c2 04 00	 ret	 4
??0InvalidSecurityTokenKeyfilePath@CipherShed@@QAE@ABU01@@Z ENDP ; CipherShed::InvalidSecurityTokenKeyfilePath::InvalidSecurityTokenKeyfilePath
_TEXT	ENDS
PUBLIC	__TI2?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@
PUBLIC	??_C@_0CN@JHEJGEDF@CipherShed?3?3SecurityToken?3?3Creat@ ; `string'
PUBLIC	?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z ; CipherShed::SecurityToken::CreateKeyfile
PUBLIC	__CTA2?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@
PUBLIC	__CT??_R0?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@@8??0SecurityTokenKeyfileAlreadyExists@CipherShed@@QAE@ABU01@@Z4
PUBLIC	??0SecurityTokenKeyfileAlreadyExists@CipherShed@@QAE@ABU01@@Z ; CipherShed::SecurityTokenKeyfileAlreadyExists::SecurityTokenKeyfileAlreadyExists
;	COMDAT __CT??_R0?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@@8??0SecurityTokenKeyfileAlreadyExists@CipherShed@@QAE@ABU01@@Z4
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__CT??_R0?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@@8??0SecurityTokenKeyfileAlreadyExists@CipherShed@@QAE@ABU01@@Z4 DD 00H
	DD	FLAT:??_R0?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	FLAT:??0SecurityTokenKeyfileAlreadyExists@CipherShed@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@
xdata$x	SEGMENT
__CTA2?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@ DD 02H
	DD	FLAT:__CT??_R0?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@@8??0SecurityTokenKeyfileAlreadyExists@CipherShed@@QAE@ABU01@@Z4
	DD	FLAT:__CT??_R0?AUException@CipherShed@@@8??0Exception@CipherShed@@QAE@ABU01@@Z4
xdata$x	ENDS
;	COMDAT __TI2?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@
xdata$x	SEGMENT
__TI2?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@
xdata$x	ENDS
;	COMDAT ??_C@_0CN@JHEJGEDF@CipherShed?3?3SecurityToken?3?3Creat@
CONST	SEGMENT
??_C@_0CN@JHEJGEDF@CipherShed?3?3SecurityToken?3?3Creat@ DB 'CipherShed::'
	DB	'SecurityToken::CreateKeyfile:117', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z$6
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.cpp
xdata$x	ENDS
;	COMDAT ?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z
_TEXT	SEGMENT
_trueVal$ = -237					; size = 1
tv910 = -236						; size = 4
_finally161$ = -236					; size = 4
$T204701 = -236						; size = 4
$T204691 = -236						; size = 4
$T204690 = -236						; size = 8
__Cat$205366 = -228					; size = 1
__Cat$205134 = -228					; size = 1
_dataClass$ = -228					; size = 4
$T204708 = -224						; size = 4
_keyfileHandle$ = -220					; size = 4
_$S2$123830 = -216					; size = 48
$T204702 = -168						; size = 24
$T204698 = -168						; size = 24
_objectData$ = -144					; size = 24
_keyfileTemplate$ = -120				; size = 60
$T204703 = -60						; size = 24
$T204692 = -36						; size = 24
__$EHRec$ = -12						; size = 12
_slotId$ = 8						; size = 4
_keyfileData$ = 12					; size = 4
_name$ = 16						; size = 4
?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z PROC ; CipherShed::SecurityToken::CreateKeyfile, COMDAT

; 115  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00014	53		 push	 ebx
  00015	55		 push	 ebp
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c4		 xor	 eax, esp
  0001f	50		 push	 eax
  00020	8d 84 24 f8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+260]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 116  : 		if (name.empty())

  0002d	8b b4 24 10 01
	00 00		 mov	 esi, DWORD PTR _name$[esp+256]

; 156  : 
; 157  : 		// Some tokens report success even if the new object was truncated to fit in the available memory
; 158  : 		vector <byte> objectData;

  00034	33 ff		 xor	 edi, edi
  00036	89 7c 24 24	 mov	 DWORD PTR $T204708[esp+260], edi
  0003a	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0003d	75 1f		 jne	 SHORT $LN14@CreateKeyf
  0003f	68 00 00 00 00	 push	 OFFSET __TI2?AUParameterIncorrect@CipherShed@@
  00044	8d 44 24 1c	 lea	 eax, DWORD PTR $T204690[esp+264]
  00048	50		 push	 eax
  00049	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T204690[esp+268], OFFSET ??_7ParameterIncorrect@CipherShed@@6B@
  00051	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T204690[esp+272], OFFSET ??_C@_0CN@JHEJGEDF@CipherShed?3?3SecurityToken?3?3Creat@
  00059	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN14@CreateKeyf:

; 117  : 			throw ParameterIncorrect (SRC_POS);
; 118  : 
; 119  : 		LoginUserIfRequired (slotId);

  0005e	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR _slotId$[esp+256]
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 ?LoginUserIfRequired@SecurityToken@CipherShed@@KAXK@Z ; CipherShed::SecurityToken::LoginUserIfRequired

; 120  : 
; 121  : 		foreach (const SecurityTokenKeyfile &keyfile, GetAvailableKeyfiles (&slotId))

  0006b	83 ec 18	 sub	 esp, 24			; 00000018H
  0006e	8b c4		 mov	 eax, esp
  00070	c7 40 18 07 00
	00 00		 mov	 DWORD PTR [eax+24], 7
  00077	89 78 14	 mov	 DWORD PTR [eax+20], edi
  0007a	33 d2		 xor	 edx, edx
  0007c	66 89 50 04	 mov	 WORD PTR [eax+4], dx
  00080	8d 84 24 24 01
	00 00		 lea	 eax, DWORD PTR _slotId$[esp+284]
  00087	89 64 24 34	 mov	 DWORD PTR $T204691[esp+288], esp
  0008b	50		 push	 eax
  0008c	8d 8c 24 00 01
	00 00		 lea	 ecx, DWORD PTR $T204692[esp+292]
  00093	51		 push	 ecx
  00094	e8 00 00 00 00	 call	 ?GetAvailableKeyfiles@SecurityToken@CipherShed@@SA?AV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@PAKV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z ; CipherShed::SecurityToken::GetAvailableKeyfiles
  00099	50		 push	 eax
  0009a	8d 54 24 54	 lea	 edx, DWORD PTR _$S2$123830[esp+300]
  0009e	52		 push	 edx
  0009f	89 bc 24 2c 01
	00 00		 mov	 DWORD PTR __$EHRec$[esp+312], edi
  000a6	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@01@ABV?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> > >
  000ab	83 c4 2c	 add	 esp, 44			; 0000002cH
  000ae	8d 8c 24 e0 00
	00 00		 lea	 ecx, DWORD PTR $T204692[esp+260]
  000b5	c6 84 24 00 01
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+268], 2
  000bd	e8 00 00 00 00	 call	 ??1?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::~vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
  000c2	8b 44 24 2c	 mov	 eax, DWORD PTR _$S2$123830[esp+260]
  000c6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000c9	8d 4c 24 2c	 lea	 ecx, DWORD PTR _$S2$123830[esp+260]
  000cd	ff d2		 call	 edx
  000cf	84 c0		 test	 al, al
  000d1	0f 84 23 01 00
	00		 je	 $LN11@CreateKeyf
$LN13@CreateKeyf:
  000d7	8b 44 24 54	 mov	 eax, DWORD PTR _$S2$123830[esp+300]
  000db	3b c7		 cmp	 eax, edi
  000dd	75 0d		 jne	 SHORT $LN275@CreateKeyf
  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000e4	8b 44 24 54	 mov	 eax, DWORD PTR _$S2$123830[esp+300]
  000e8	3b c7		 cmp	 eax, edi
  000ea	74 04		 je	 SHORT $LN116@CreateKeyf
$LN275@CreateKeyf:
  000ec	8b 00		 mov	 eax, DWORD PTR [eax]
  000ee	eb 02		 jmp	 SHORT $LN117@CreateKeyf
$LN116@CreateKeyf:
  000f0	33 c0		 xor	 eax, eax
$LN117@CreateKeyf:
  000f2	8b 4c 24 58	 mov	 ecx, DWORD PTR _$S2$123830[esp+304]
  000f6	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000f9	72 05		 jb	 SHORT $LN108@CreateKeyf
  000fb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN108@CreateKeyf:
  00100	f6 44 24 24 01	 test	 BYTE PTR $T204708[esp+260], 1
  00105	8b 6c 24 58	 mov	 ebp, DWORD PTR _$S2$123830[esp+304]
  00109	74 48		 je	 SHORT $LN137@CreateKeyf
  0010b	8b 44 24 68	 mov	 eax, DWORD PTR $T204698[esp+272]
  0010f	83 64 24 24 fe	 and	 DWORD PTR $T204708[esp+260], -2 ; fffffffeH
  00114	3b c7		 cmp	 eax, edi
  00116	74 22		 je	 SHORT $LN131@CreateKeyf
  00118	8b 54 24 20	 mov	 edx, DWORD PTR __Cat$205134[esp+260]
  0011c	52		 push	 edx
  0011d	8b 54 24 70	 mov	 edx, DWORD PTR $T204698[esp+280]
  00121	8d 4c 24 68	 lea	 ecx, DWORD PTR $T204698[esp+272]
  00125	51		 push	 ecx
  00126	52		 push	 edx
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CipherShed::SecurityTokenKeyfile> >
  0012d	8b 44 24 78	 mov	 eax, DWORD PTR $T204698[esp+288]
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00137	83 c4 14	 add	 esp, 20			; 00000014H
$LN131@CreateKeyf:
  0013a	8b 4c 24 5c	 mov	 ecx, DWORD PTR $T204698[esp+260]
  0013e	51		 push	 ecx
  0013f	89 7c 24 6c	 mov	 DWORD PTR $T204698[esp+276], edi
  00143	89 7c 24 70	 mov	 DWORD PTR $T204698[esp+280], edi
  00147	89 7c 24 74	 mov	 DWORD PTR $T204698[esp+284], edi
  0014b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00150	83 c4 04	 add	 esp, 4
$LN137@CreateKeyf:
  00153	80 7c 24 31 00	 cmp	 BYTE PTR _$S2$123830[esp+265], 0
  00158	0f 94 c0	 sete	 al
  0015b	88 44 24 31	 mov	 BYTE PTR _$S2$123830[esp+265], al
  0015f	84 c0		 test	 al, al
  00161	74 75		 je	 SHORT $LN12@CreateKeyf
  00163	8b 56 18	 mov	 edx, DWORD PTR [esi+24]

; 122  : 		{
; 123  : 			if (keyfile.IdUtf8 == name)

  00166	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00169	89 54 24 18	 mov	 DWORD PTR tv910[esp+260], edx
  0016d	8d 49 00	 npad	 3
$LL141@CreateKeyf:
  00170	83 7c 24 18 10	 cmp	 DWORD PTR tv910[esp+260], 16 ; 00000010H
  00175	72 05		 jb	 SHORT $LN153@CreateKeyf
  00177	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0017a	eb 03		 jmp	 SHORT $LN154@CreateKeyf
$LN153@CreateKeyf:
  0017c	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN154@CreateKeyf:
  0017f	8b 75 34	 mov	 esi, DWORD PTR [ebp+52]
  00182	8b c6		 mov	 eax, esi
  00184	8b ce		 mov	 ecx, esi
  00186	3b f3		 cmp	 esi, ebx
  00188	72 02		 jb	 SHORT $LN160@CreateKeyf
  0018a	8b cb		 mov	 ecx, ebx
$LN160@CreateKeyf:
  0018c	83 7d 38 10	 cmp	 DWORD PTR [ebp+56], 16	; 00000010H
  00190	72 05		 jb	 SHORT $LN167@CreateKeyf
  00192	8b 45 24	 mov	 eax, DWORD PTR [ebp+36]
  00195	eb 03		 jmp	 SHORT $LN168@CreateKeyf
$LN167@CreateKeyf:
  00197	8d 45 24	 lea	 eax, DWORD PTR [ebp+36]
$LN168@CreateKeyf:
  0019a	51		 push	 ecx
  0019b	52		 push	 edx
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  001a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a5	3b c7		 cmp	 eax, edi
  001a7	75 13		 jne	 SHORT $LN276@CreateKeyf
  001a9	3b f3		 cmp	 esi, ebx
  001ab	72 0f		 jb	 SHORT $LN276@CreateKeyf
  001ad	33 c0		 xor	 eax, eax
  001af	3b f3		 cmp	 esi, ebx
  001b1	0f 95 c0	 setne	 al
  001b4	3b c7		 cmp	 eax, edi
  001b6	0f 84 12 01 00
	00		 je	 $LN271@CreateKeyf
$LN276@CreateKeyf:

; 120  : 
; 121  : 		foreach (const SecurityTokenKeyfile &keyfile, GetAvailableKeyfiles (&slotId))

  001bc	80 7c 24 31 00	 cmp	 BYTE PTR _$S2$123830[esp+265], 0
  001c1	8b b4 24 10 01
	00 00		 mov	 esi, DWORD PTR _name$[esp+256]
  001c8	0f 94 c0	 sete	 al
  001cb	c6 44 24 30 01	 mov	 BYTE PTR _$S2$123830[esp+264], 1
  001d0	88 44 24 31	 mov	 BYTE PTR _$S2$123830[esp+265], al
  001d4	84 c0		 test	 al, al
  001d6	75 98		 jne	 SHORT $LL141@CreateKeyf
$LN12@CreateKeyf:
  001d8	8b 44 24 2c	 mov	 eax, DWORD PTR _$S2$123830[esp+260]
  001dc	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001df	8d 4c 24 2c	 lea	 ecx, DWORD PTR _$S2$123830[esp+260]
  001e3	ff d2		 call	 edx
  001e5	8b 44 24 2c	 mov	 eax, DWORD PTR _$S2$123830[esp+260]
  001e9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001ec	8d 4c 24 2c	 lea	 ecx, DWORD PTR _$S2$123830[esp+260]
  001f0	ff d2		 call	 edx
  001f2	84 c0		 test	 al, al
  001f4	0f 85 dd fe ff
	ff		 jne	 $LN13@CreateKeyf
$LN11@CreateKeyf:

; 125  : 		}

  001fa	8b 44 24 40	 mov	 eax, DWORD PTR _$S2$123830[esp+280]
  001fe	c7 84 24 00 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+268], -1
  00209	3b c7		 cmp	 eax, edi
  0020b	74 22		 je	 SHORT $LN186@CreateKeyf
  0020d	8b 4c 24 20	 mov	 ecx, DWORD PTR __Cat$205366[esp+260]
  00211	51		 push	 ecx
  00212	8b 4c 24 48	 mov	 ecx, DWORD PTR _$S2$123830[esp+288]
  00216	8d 54 24 40	 lea	 edx, DWORD PTR _$S2$123830[esp+280]
  0021a	52		 push	 edx
  0021b	51		 push	 ecx
  0021c	50		 push	 eax
  0021d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@YAXPAUSecurityTokenKeyfile@CipherShed@@0AAV?$allocator@USecurityTokenKeyfile@CipherShed@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CipherShed::SecurityTokenKeyfile> >
  00222	8b 54 24 50	 mov	 edx, DWORD PTR _$S2$123830[esp+296]
  00226	52		 push	 edx
  00227	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0022c	83 c4 14	 add	 esp, 20			; 00000014H
$LN186@CreateKeyf:
  0022f	8b 44 24 34	 mov	 eax, DWORD PTR _$S2$123830[esp+268]
  00233	50		 push	 eax
  00234	89 7c 24 44	 mov	 DWORD PTR _$S2$123830[esp+284], edi
  00238	89 7c 24 48	 mov	 DWORD PTR _$S2$123830[esp+288], edi
  0023c	89 7c 24 4c	 mov	 DWORD PTR _$S2$123830[esp+292], edi
  00240	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 126  : 
; 127  : 		CK_OBJECT_CLASS dataClass = CKO_DATA;
; 128  : 		CK_BBOOL trueVal = CK_TRUE;
; 129  : 
; 130  : 		CK_ATTRIBUTE keyfileTemplate[] =
; 131  : 		{
; 132  : 			{ CKA_CLASS, &dataClass, sizeof (dataClass) },

  00245	8d 4c 24 24	 lea	 ecx, DWORD PTR _dataClass$[esp+264]

; 133  : 			{ CKA_TOKEN, &trueVal, sizeof (trueVal) },

  00249	8d 54 24 1b	 lea	 edx, DWORD PTR _trueVal$[esp+264]
  0024d	b8 01 00 00 00	 mov	 eax, 1
  00252	89 8c 24 94 00
	00 00		 mov	 DWORD PTR _keyfileTemplate$[esp+268], ecx
  00259	83 c4 04	 add	 esp, 4

; 134  : 			{ CKA_PRIVATE, &trueVal, sizeof (trueVal) },
; 135  : 			{ CKA_LABEL, (CK_UTF8CHAR *) name.c_str(), name.size() },

  0025c	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00260	bb 04 00 00 00	 mov	 ebx, 4
  00265	8b ca		 mov	 ecx, edx
  00267	bd 03 00 00 00	 mov	 ebp, 3
  0026c	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR _$S2$123830[esp+260], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00274	89 7c 24 20	 mov	 DWORD PTR _dataClass$[esp+260], edi
  00278	c6 44 24 17 01	 mov	 BYTE PTR _trueVal$[esp+260], 1
  0027d	89 bc 24 8c 00
	00 00		 mov	 DWORD PTR _keyfileTemplate$[esp+260], edi
  00284	89 9c 24 94 00
	00 00		 mov	 DWORD PTR _keyfileTemplate$[esp+268], ebx
  0028b	89 84 24 98 00
	00 00		 mov	 DWORD PTR _keyfileTemplate$[esp+272], eax
  00292	89 94 24 9c 00
	00 00		 mov	 DWORD PTR _keyfileTemplate$[esp+276], edx
  00299	89 84 24 a0 00
	00 00		 mov	 DWORD PTR _keyfileTemplate$[esp+280], eax
  002a0	c7 84 24 a4 00
	00 00 02 00 00
	00		 mov	 DWORD PTR _keyfileTemplate$[esp+284], 2
  002ab	89 8c 24 a8 00
	00 00		 mov	 DWORD PTR _keyfileTemplate$[esp+288], ecx
  002b2	89 84 24 ac 00
	00 00		 mov	 DWORD PTR _keyfileTemplate$[esp+292], eax
  002b9	89 ac 24 b0 00
	00 00		 mov	 DWORD PTR _keyfileTemplate$[esp+296], ebp
  002c0	72 23		 jb	 SHORT $LN202@CreateKeyf
  002c2	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  002c5	89 94 24 b4 00
	00 00		 mov	 DWORD PTR _keyfileTemplate$[esp+300], edx
  002cc	eb 21		 jmp	 SHORT $LN203@CreateKeyf
$LN271@CreateKeyf:

; 124  : 				throw SecurityTokenKeyfileAlreadyExists();

  002ce	68 00 00 00 00	 push	 OFFSET __TI2?AUSecurityTokenKeyfileAlreadyExists@CipherShed@@
  002d3	8d 44 24 1c	 lea	 eax, DWORD PTR $T204701[esp+264]
  002d7	50		 push	 eax
  002d8	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T204701[esp+268], OFFSET ??_7SecurityTokenKeyfileAlreadyExists@CipherShed@@6B@
  002e0	e8 00 00 00 00	 call	 __CxxThrowException@8

; 134  : 			{ CKA_PRIVATE, &trueVal, sizeof (trueVal) },
; 135  : 			{ CKA_LABEL, (CK_UTF8CHAR *) name.c_str(), name.size() },

$LN202@CreateKeyf:
  002e5	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  002e8	89 84 24 b4 00
	00 00		 mov	 DWORD PTR _keyfileTemplate$[esp+300], eax
$LN203@CreateKeyf:
  002ef	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 136  : 			{ CKA_VALUE, &keyfileData.front(), keyfileData.size() }

  002f2	8b b4 24 0c 01
	00 00		 mov	 esi, DWORD PTR _keyfileData$[esp+256]
  002f9	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  002fc	89 8c 24 b8 00
	00 00		 mov	 DWORD PTR _keyfileTemplate$[esp+304], ecx
  00303	c7 84 24 bc 00
	00 00 11 00 00
	00		 mov	 DWORD PTR _keyfileTemplate$[esp+308], 17 ; 00000011H
  0030e	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  00311	76 05		 jbe	 SHORT $LN213@CreateKeyf
  00313	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN213@CreateKeyf:
  00318	8b 06		 mov	 eax, DWORD PTR [esi]
  0031a	85 c0		 test	 eax, eax
  0031c	75 6c		 jne	 SHORT $LN274@CreateKeyf
  0031e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00323	33 c0		 xor	 eax, eax
$LN235@CreateKeyf:
  00325	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
  00328	72 05		 jb	 SHORT $LN226@CreateKeyf
  0032a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN226@CreateKeyf:
  0032f	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00332	2b 56 0c	 sub	 edx, DWORD PTR [esi+12]
  00335	89 bc 24 c0 00
	00 00		 mov	 DWORD PTR _keyfileTemplate$[esp+312], edi

; 137  : 		};
; 138  : 
; 139  : 		CK_OBJECT_HANDLE keyfileHandle;
; 140  : 
; 141  : 		CK_RV status = Pkcs11Functions->C_CreateObject (Sessions[slotId].Handle, keyfileTemplate, array_capacity (keyfileTemplate), &keyfileHandle);

  0033c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  00342	8d 84 24 08 01
	00 00		 lea	 eax, DWORD PTR _slotId$[esp+256]
  00349	50		 push	 eax
  0034a	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  0034f	89 94 24 c8 00
	00 00		 mov	 DWORD PTR _keyfileTemplate$[esp+320], edx
  00356	83 c7 52	 add	 edi, 82			; 00000052H
  00359	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
  0035e	8b 00		 mov	 eax, DWORD PTR [eax]
  00360	8d 4c 24 28	 lea	 ecx, DWORD PTR _keyfileHandle$[esp+260]
  00364	51		 push	 ecx
  00365	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00367	6a 05		 push	 5
  00369	8d 94 24 94 00
	00 00		 lea	 edx, DWORD PTR _keyfileTemplate$[esp+268]
  00370	52		 push	 edx
  00371	50		 push	 eax
  00372	ff d1		 call	 ecx
  00374	83 c4 10	 add	 esp, 16			; 00000010H

; 142  : 
; 143  : 		switch (status)

  00377	83 f8 21	 cmp	 eax, 33			; 00000021H
  0037a	74 12		 je	 SHORT $LN4@CreateKeyf
  0037c	3d b5 00 00 00	 cmp	 eax, 181		; 000000b5H
  00381	75 12		 jne	 SHORT $LN5@CreateKeyf

; 147  : 			break;
; 148  : 
; 149  : 		case CKR_SESSION_READ_ONLY:
; 150  : 			status = CKR_TOKEN_WRITE_PROTECTED;

  00383	b8 e2 00 00 00	 mov	 eax, 226		; 000000e2H

; 151  : 			break;

  00388	eb 11		 jmp	 SHORT $LN277@CreateKeyf
$LN274@CreateKeyf:

; 136  : 			{ CKA_VALUE, &keyfileData.front(), keyfileData.size() }

  0038a	8b 00		 mov	 eax, DWORD PTR [eax]
  0038c	eb 97		 jmp	 SHORT $LN235@CreateKeyf
$LN4@CreateKeyf:

; 144  : 		{
; 145  : 		case CKR_DATA_LEN_RANGE:
; 146  : 			status = CKR_DEVICE_MEMORY;

  0038e	b8 31 00 00 00	 mov	 eax, 49			; 00000031H

; 152  : 		}
; 153  : 
; 154  : 		if (status != CKR_OK)

  00393	eb 06		 jmp	 SHORT $LN277@CreateKeyf
$LN5@CreateKeyf:
  00395	33 ff		 xor	 edi, edi
  00397	3b c7		 cmp	 eax, edi
  00399	74 20		 je	 SHORT $LN2@CreateKeyf
$LN277@CreateKeyf:

; 155  : 			throw Pkcs11Exception (status);

  0039b	68 00 00 00 00	 push	 OFFSET __TI2?AUPkcs11Exception@CipherShed@@
  003a0	8d 54 24 60	 lea	 edx, DWORD PTR $T204702[esp+264]
  003a4	52		 push	 edx
  003a5	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR $T204702[esp+268], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  003ad	89 44 24 68	 mov	 DWORD PTR $T204702[esp+272], eax
  003b1	c6 44 24 6c 00	 mov	 BYTE PTR $T204702[esp+276], 0
  003b6	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@CreateKeyf:

; 156  : 
; 157  : 		// Some tokens report success even if the new object was truncated to fit in the available memory
; 158  : 		vector <byte> objectData;

  003bb	8d 4c 24 74	 lea	 ecx, DWORD PTR _objectData$[esp+260]
  003bf	e8 00 00 00 00	 call	 ??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >

; 159  : 
; 160  : 		GetObjectAttribute (slotId, keyfileHandle, CKA_VALUE, objectData);

  003c4	8b 4c 24 28	 mov	 ecx, DWORD PTR _keyfileHandle$[esp+260]
  003c8	8b 94 24 08 01
	00 00		 mov	 edx, DWORD PTR _slotId$[esp+256]
  003cf	8d 44 24 74	 lea	 eax, DWORD PTR _objectData$[esp+260]
  003d3	50		 push	 eax
  003d4	6a 11		 push	 17			; 00000011H
  003d6	51		 push	 ecx
  003d7	52		 push	 edx
  003d8	89 ac 24 10 01
	00 00		 mov	 DWORD PTR __$EHRec$[esp+284], ebp
  003df	e8 00 00 00 00	 call	 ?GetObjectAttribute@SecurityToken@CipherShed@@KAXKKKAAV?$vector@EV?$allocator@E@std@@@std@@@Z ; CipherShed::SecurityToken::GetObjectAttribute

; 161  : 		finally_do_arg (vector <byte> *, &objectData, { if (!finally_arg->empty()) burn (&finally_arg->front(), finally_arg->size()); });

  003e4	8d 84 24 84 00
	00 00		 lea	 eax, DWORD PTR _objectData$[esp+276]
  003eb	83 c4 10	 add	 esp, 16			; 00000010H
  003ee	89 44 24 18	 mov	 DWORD PTR _finally161$[esp+260], eax

; 162  : 
; 163  : 		if (objectData.size() != keyfileData.size())

  003f2	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  003f5	8b 94 24 84 00
	00 00		 mov	 edx, DWORD PTR _objectData$[esp+276]
  003fc	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  003ff	2b 94 24 80 00
	00 00		 sub	 edx, DWORD PTR _objectData$[esp+272]
  00406	88 9c 24 00 01
	00 00		 mov	 BYTE PTR __$EHRec$[esp+268], bl
  0040d	3b d1		 cmp	 edx, ecx
  0040f	74 5a		 je	 SHORT $LN1@CreateKeyf

; 164  : 		{
; 165  : 			Pkcs11Functions->C_DestroyObject (Sessions[slotId].Handle, keyfileHandle);

  00411	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?Pkcs11Functions@SecurityToken@CipherShed@@1PAUCK_FUNCTION_LIST@@A ; CipherShed::SecurityToken::Pkcs11Functions
  00417	8d 84 24 08 01
	00 00		 lea	 eax, DWORD PTR _slotId$[esp+256]
  0041e	50		 push	 eax
  0041f	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  00424	83 c6 5a	 add	 esi, 90			; 0000005aH
  00427	e8 00 00 00 00	 call	 ??A?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@QAEAAUPkcs11Session@CipherShed@@ABK@Z ; std::map<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> > >::operator[]
  0042c	8b 4c 24 28	 mov	 ecx, DWORD PTR _keyfileHandle$[esp+260]
  00430	8b 10		 mov	 edx, DWORD PTR [eax]
  00432	8b 06		 mov	 eax, DWORD PTR [esi]
  00434	51		 push	 ecx
  00435	52		 push	 edx
  00436	ff d0		 call	 eax
  00438	83 c4 08	 add	 esp, 8

; 166  : 			throw Pkcs11Exception (CKR_DEVICE_MEMORY);

  0043b	68 00 00 00 00	 push	 OFFSET __TI2?AUPkcs11Exception@CipherShed@@
  00440	8d 8c 24 cc 00
	00 00		 lea	 ecx, DWORD PTR $T204703[esp+264]
  00447	51		 push	 ecx
  00448	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR $T204703[esp+268], OFFSET ??_7Pkcs11Exception@CipherShed@@6B@
  00453	c7 84 24 d4 00
	00 00 31 00 00
	00		 mov	 DWORD PTR $T204703[esp+272], 49 ; 00000031H
  0045e	c6 84 24 d8 00
	00 00 00	 mov	 BYTE PTR $T204703[esp+276], 0
  00466	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@CreateKeyf:

; 167  : 		}
; 168  : 	}

  0046b	8d 44 24 18	 lea	 eax, DWORD PTR _finally161$[esp+260]
  0046f	e8 00 00 00 00	 call	 ??1Finally161@?N@??CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z@QAE@XZ ; `CipherShed::SecurityToken::CreateKeyfile'::`13'::Finally161::~Finally161
  00474	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR _objectData$[esp+272]
  0047b	3b c7		 cmp	 eax, edi
  0047d	74 09		 je	 SHORT $LN259@CreateKeyf
  0047f	50		 push	 eax
  00480	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00485	83 c4 04	 add	 esp, 4
$LN259@CreateKeyf:
  00488	8b 54 24 74	 mov	 edx, DWORD PTR _objectData$[esp+260]
  0048c	52		 push	 edx
  0048d	89 bc 24 84 00
	00 00		 mov	 DWORD PTR _objectData$[esp+276], edi
  00494	89 bc 24 88 00
	00 00		 mov	 DWORD PTR _objectData$[esp+280], edi
  0049b	89 bc 24 8c 00
	00 00		 mov	 DWORD PTR _objectData$[esp+284], edi
  004a2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004a7	83 c4 04	 add	 esp, 4
  004aa	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+260]
  004b1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004b8	59		 pop	 ecx
  004b9	5f		 pop	 edi
  004ba	5e		 pop	 esi
  004bb	5d		 pop	 ebp
  004bc	5b		 pop	 ebx
  004bd	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  004c3	c3		 ret	 0
$LN281@CreateKeyf:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z$1:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR $T204692[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@QAE@XZ ; std::vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >::~vector<CipherShed::SecurityTokenKeyfile,std::allocator<CipherShed::SecurityTokenKeyfile> >
__unwindfunclet$?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z$2:
  00008	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$123830[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@USecurityTokenKeyfile@CipherShed@@V?$allocator@USecurityTokenKeyfile@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z$5:
  00013	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _objectData$[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
__unwindfunclet$?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z$6:
  0001e	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR _finally161$[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1Finally161@?N@??CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z@QAE@XZ ; `CipherShed::SecurityToken::CreateKeyfile'::`13'::Finally161::~Finally161
__ehhandler$?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 82 0c ff ff
	ff		 lea	 eax, DWORD PTR [edx-244]
  00033	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  00039	33 c8		 xor	 ecx, eax
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateKeyfile@SecurityToken@CipherShed@@SAXKAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z ENDP ; CipherShed::SecurityToken::CreateKeyfile
; Function compile flags: /Ogtpy
;	COMDAT ??0SecurityTokenKeyfileAlreadyExists@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0SecurityTokenKeyfileAlreadyExists@CipherShed@@QAE@ABU01@@Z PROC ; CipherShed::SecurityTokenKeyfileAlreadyExists::SecurityTokenKeyfileAlreadyExists, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7SecurityTokenKeyfileAlreadyExists@CipherShed@@6B@
  00008	c2 04 00	 ret	 4
??0SecurityTokenKeyfileAlreadyExists@CipherShed@@QAE@ABU01@@Z ENDP ; CipherShed::SecurityTokenKeyfileAlreadyExists::SecurityTokenKeyfileAlreadyExists
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??__E?PinCallback@SecurityToken@CipherShed@@1V?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@A@@YAXXZ
text$yc	SEGMENT
??__E?PinCallback@SecurityToken@CipherShed@@1V?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@A@@YAXXZ PROC ; `dynamic initializer for 'CipherShed::SecurityToken::PinCallback'', COMDAT

; 719  : 	auto_ptr <GetPinFunctor> SecurityToken::PinCallback;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?PinCallback@SecurityToken@CipherShed@@1V?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@A@@YAXXZ ; `dynamic atexit destructor for 'CipherShed::SecurityToken::PinCallback''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?PinCallback@SecurityToken@CipherShed@@1V?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@A@@YAXXZ ENDP ; `dynamic initializer for 'CipherShed::SecurityToken::PinCallback''
; Function compile flags: /Ogtpy
text$yc	ENDS
;	COMDAT ??__E?WarningCallback@SecurityToken@CipherShed@@1V?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@A@@YAXXZ
text$yc	SEGMENT
??__E?WarningCallback@SecurityToken@CipherShed@@1V?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@A@@YAXXZ PROC ; `dynamic initializer for 'CipherShed::SecurityToken::WarningCallback'', COMDAT

; 720  : 	auto_ptr <SendExceptionFunctor> SecurityToken::WarningCallback;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?WarningCallback@SecurityToken@CipherShed@@1V?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@A@@YAXXZ ; `dynamic atexit destructor for 'CipherShed::SecurityToken::WarningCallback''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?WarningCallback@SecurityToken@CipherShed@@1V?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@A@@YAXXZ ENDP ; `dynamic initializer for 'CipherShed::SecurityToken::WarningCallback''
; Function compile flags: /Ogtpy
text$yc	ENDS
;	COMDAT ??__E?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A@@YAXXZ
text$yc	SEGMENT
$T205668 = -1						; size = 1
$T205667 = -1						; size = 1
??__E?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A@@YAXXZ PROC ; `dynamic initializer for 'CipherShed::SecurityToken::Sessions'', COMDAT

; 724  : 	map <CK_SLOT_ID, Pkcs11Session> SecurityToken::Sessions;

  00000	51		 push	 ecx
  00001	8d 44 24 03	 lea	 eax, DWORD PTR $T205667[esp+4]
  00005	50		 push	 eax
  00006	8d 4c 24 07	 lea	 ecx, DWORD PTR $T205668[esp+8]
  0000a	51		 push	 ecx
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  00010	e8 00 00 00 00	 call	 ??0?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
  00015	68 00 00 00 00	 push	 OFFSET ??__F?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A@@YAXXZ ; `dynamic atexit destructor for 'CipherShed::SecurityToken::Sessions''
  0001a	e8 00 00 00 00	 call	 _atexit
  0001f	83 c4 08	 add	 esp, 8
  00022	c3		 ret	 0
??__E?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A@@YAXXZ ENDP ; `dynamic initializer for 'CipherShed::SecurityToken::Sessions''
; Function compile flags: /Ogtpy
text$yc	ENDS
;	COMDAT ??__F?PinCallback@SecurityToken@CipherShed@@1V?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@A@@YAXXZ
text$yd	SEGMENT
??__F?PinCallback@SecurityToken@CipherShed@@1V?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CipherShed::SecurityToken::PinCallback'', COMDAT
  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?PinCallback@SecurityToken@CipherShed@@1V?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@A ; CipherShed::SecurityToken::PinCallback
  00006	85 c9		 test	 ecx, ecx
  00008	74 08		 je	 SHORT $LN5@PinCallbac
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	8b 10		 mov	 edx, DWORD PTR [eax]
  0000e	6a 01		 push	 1
  00010	ff d2		 call	 edx
$LN5@PinCallbac:
  00012	c3		 ret	 0
??__F?PinCallback@SecurityToken@CipherShed@@1V?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CipherShed::SecurityToken::PinCallback''
; Function compile flags: /Ogtpy
text$yd	ENDS
;	COMDAT ??__F?WarningCallback@SecurityToken@CipherShed@@1V?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@A@@YAXXZ
text$yd	SEGMENT
??__F?WarningCallback@SecurityToken@CipherShed@@1V?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CipherShed::SecurityToken::WarningCallback'', COMDAT
  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?WarningCallback@SecurityToken@CipherShed@@1V?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@A ; CipherShed::SecurityToken::WarningCallback
  00006	85 c9		 test	 ecx, ecx
  00008	74 08		 je	 SHORT $LN5@WarningCal
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	8b 10		 mov	 edx, DWORD PTR [eax]
  0000e	6a 01		 push	 1
  00010	ff d2		 call	 edx
$LN5@WarningCal:
  00012	c3		 ret	 0
??__F?WarningCallback@SecurityToken@CipherShed@@1V?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CipherShed::SecurityToken::WarningCallback''
; Function compile flags: /Ogtpy
text$yd	ENDS
;	COMDAT ??__F?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A@@YAXXZ
text$yd	SEGMENT
??__F?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CipherShed::SecurityToken::Sessions'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
  00005	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CipherShed::Pkcs11Session,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CipherShed::Pkcs11Session> >,0> >
??__F?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CipherShed::SecurityToken::Sessions''
text$yd	ENDS
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?WarningCallback@SecurityToken@CipherShed@@1V?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@A ; CipherShed::SecurityToken::WarningCallback
PUBLIC	?PinCallback@SecurityToken@CipherShed@@1V?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@A ; CipherShed::SecurityToken::PinCallback
PUBLIC	?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A ; CipherShed::SecurityToken::Sessions
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
_BSS	SEGMENT
?WarningCallback@SecurityToken@CipherShed@@1V?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@A DD 01H DUP (?) ; CipherShed::SecurityToken::WarningCallback
?PinCallback@SecurityToken@CipherShed@@1V?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@A DD 01H DUP (?) ; CipherShed::SecurityToken::PinCallback
?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A DB 020H DUP (?) ; CipherShed::SecurityToken::Sessions
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
_BSS	ENDS
CRT$XCU	SEGMENT
?PinCallback$initializer$@SecurityToken@CipherShed@@1P6AXXZA DD FLAT:??__E?PinCallback@SecurityToken@CipherShed@@1V?$auto_ptr@UGetPinFunctor@CipherShed@@@std@@A@@YAXXZ ; CipherShed::SecurityToken::PinCallback$initializer$
?WarningCallback$initializer$@SecurityToken@CipherShed@@1P6AXXZA DD FLAT:??__E?WarningCallback@SecurityToken@CipherShed@@1V?$auto_ptr@USendExceptionFunctor@CipherShed@@@std@@A@@YAXXZ ; CipherShed::SecurityToken::WarningCallback$initializer$
?Sessions$initializer$@SecurityToken@CipherShed@@1P6AXXZA DD FLAT:??__E?Sessions@SecurityToken@CipherShed@@1V?$map@KUPkcs11Session@CipherShed@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUPkcs11Session@CipherShed@@@std@@@4@@std@@A@@YAXXZ ; CipherShed::SecurityToken::Sessions$initializer$
CRT$XCU	ENDS
END
