; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	sha1_begin
; Function compile flags: /Ogspy
; File c:\home\public\desktop\projects\ciphershed.build\src\crypto\sha1.c
;	COMDAT sha1_begin
_TEXT	SEGMENT
ctx$ = 8
sha1_begin PROC						; COMDAT

; 198  :     ctx->count[0] = ctx->count[1] = 0;

  00000	83 61 04 00	 and	 DWORD PTR [rcx+4], 0
  00004	83 21 00	 and	 DWORD PTR [rcx], 0

; 199  :     ctx->hash[0] = 0x67452301;

  00007	c7 41 08 01 23
	45 67		 mov	 DWORD PTR [rcx+8], 1732584193 ; 67452301H

; 200  :     ctx->hash[1] = 0xefcdab89;

  0000e	c7 41 0c 89 ab
	cd ef		 mov	 DWORD PTR [rcx+12], -271733879 ; efcdab89H

; 201  :     ctx->hash[2] = 0x98badcfe;

  00015	c7 41 10 fe dc
	ba 98		 mov	 DWORD PTR [rcx+16], -1732584194 ; 98badcfeH

; 202  :     ctx->hash[3] = 0x10325476;

  0001c	c7 41 14 76 54
	32 10		 mov	 DWORD PTR [rcx+20], 271733878 ; 10325476H

; 203  :     ctx->hash[4] = 0xc3d2e1f0;

  00023	c7 41 18 f0 e1
	d2 c3		 mov	 DWORD PTR [rcx+24], -1009589776 ; c3d2e1f0H

; 204  : }

  0002a	c3		 ret	 0
sha1_begin ENDP
_TEXT	ENDS
PUBLIC	sha1_compile
;	COMDAT pdata
pdata	SEGMENT
$pdata$sha1_compile DD imagerel $LN3
	DD	imagerel $LN3+4829
	DD	imagerel $unwind$sha1_compile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sha1_compile DD 091501H
	DD	0f0118215H
	DD	0d00de00fH
	DD	07009c00bH
	DD	050076008H
	DD	03006H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT sha1_compile
_TEXT	SEGMENT
tv2261 = 0
tv2036 = 0
tv2013 = 0
tv2011 = 4
tv2010 = 4
tv1619 = 4
tv1614 = 4
tv2567 = 8
tv1739 = 8
tv635 = 8
tv2370 = 12
tv870 = 12
tv580 = 12
tv725 = 16
tv651 = 16
tv573 = 16
tv2478 = 20
tv2298 = 20
tv1479 = 20
tv2493 = 24
tv1875 = 24
tv569 = 24
tv2523 = 28
tv566 = 28
tv565 = 28
tv2035 = 32
tv776 = 32
tv577 = 32
tv2355 = 36
tv2112 = 36
tv1606 = 40
tv585 = 40
tv2014 = 44
tv584 = 44
tv1612 = 48
tv579 = 48
tv1168 = 52
ctx$ = 144
tv518 = 152
tv2399 = 160
tv1103 = 160
tv576 = 160
tv2538 = 168
tv2385 = 168
tv1034 = 168
sha1_compile PROC					; COMDAT

; 141  : {   sha1_32t    *w = ctx->wbuf;

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	55		 push	 rbp
  00007	56		 push	 rsi
  00008	57		 push	 rdi
  00009	41 54		 push	 r12
  0000b	41 55		 push	 r13
  0000d	41 56		 push	 r14
  0000f	41 57		 push	 r15
  00011	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 142  : 
; 143  : #ifdef ARRAY
; 144  :     sha1_32t    v[5];
; 145  :     memcpy(v, ctx->hash, 5 * sizeof(sha1_32t));
; 146  : #else
; 147  :     sha1_32t    v0, v1, v2, v3, v4;
; 148  :     v0 = ctx->hash[0]; v1 = ctx->hash[1];
; 149  :     v2 = ctx->hash[2]; v3 = ctx->hash[3];

  00015	44 8b 49 10	 mov	 r9d, DWORD PTR [rcx+16]
  00019	44 8b 41 14	 mov	 r8d, DWORD PTR [rcx+20]
  0001d	8b 59 08	 mov	 ebx, DWORD PTR [rcx+8]
  00020	44 8b 51 0c	 mov	 r10d, DWORD PTR [rcx+12]

; 150  :     v4 = ctx->hash[4];
; 151  : #endif
; 152  : 
; 153  : #define hf(i)   w[i]
; 154  : 
; 155  :     five_cycle(v, ch, 0x5a827999,  0);

  00024	8b 69 1c	 mov	 ebp, DWORD PTR [rcx+28]
  00027	4c 8b f1	 mov	 r14, rcx
  0002a	41 8b 7e 24	 mov	 edi, DWORD PTR [r14+36]
  0002e	41 8b c0	 mov	 eax, r8d
  00031	8b d3		 mov	 edx, ebx
  00033	41 33 c1	 xor	 eax, r9d
  00036	c1 ca 1b	 ror	 edx, 27
  00039	41 23 c2	 and	 eax, r10d
  0003c	41 33 c0	 xor	 eax, r8d
  0003f	03 d0		 add	 edx, eax
  00041	41 8b c1	 mov	 eax, r9d
  00044	03 51 18	 add	 edx, DWORD PTR [rcx+24]
  00047	41 c1 ca 02	 ror	 r10d, 2
  0004b	41 33 c2	 xor	 eax, r10d
  0004e	44 8d 9c 2a 99
	79 82 5a	 lea	 r11d, DWORD PTR [rdx+rbp+1518500249]
  00056	23 c3		 and	 eax, ebx
  00058	41 8b cb	 mov	 ecx, r11d
  0005b	41 33 c1	 xor	 eax, r9d
  0005e	c1 c9 1b	 ror	 ecx, 27
  00061	03 c8		 add	 ecx, eax
  00063	41 03 4e 20	 add	 ecx, DWORD PTR [r14+32]
  00067	c1 cb 02	 ror	 ebx, 2
  0006a	41 8d 94 08 99
	79 82 5a	 lea	 edx, DWORD PTR [r8+rcx+1518500249]
  00072	41 8b ca	 mov	 ecx, r10d
  00075	33 cb		 xor	 ecx, ebx
  00077	8b c2		 mov	 eax, edx
  00079	c1 c8 1b	 ror	 eax, 27
  0007c	41 23 cb	 and	 ecx, r11d
  0007f	03 c7		 add	 eax, edi
  00081	41 33 ca	 xor	 ecx, r10d
  00084	03 c8		 add	 ecx, eax
  00086	41 c1 cb 02	 ror	 r11d, 2
  0008a	45 8d 84 09 99
	79 82 5a	 lea	 r8d, DWORD PTR [r9+rcx+1518500249]
  00092	41 8b c3	 mov	 eax, r11d
  00095	33 c3		 xor	 eax, ebx
  00097	41 8b c8	 mov	 ecx, r8d
  0009a	23 c2		 and	 eax, edx
  0009c	c1 c9 1b	 ror	 ecx, 27
  0009f	33 c3		 xor	 eax, ebx
  000a1	03 c8		 add	 ecx, eax
  000a3	41 8b c3	 mov	 eax, r11d
  000a6	41 03 4e 28	 add	 ecx, DWORD PTR [r14+40]
  000aa	c1 ca 02	 ror	 edx, 2
  000ad	33 c2		 xor	 eax, edx
  000af	45 8d 8c 0a 99
	79 82 5a	 lea	 r9d, DWORD PTR [r10+rcx+1518500249]
  000b7	41 23 c0	 and	 eax, r8d
  000ba	41 8b c9	 mov	 ecx, r9d
  000bd	41 33 c3	 xor	 eax, r11d
  000c0	c1 c9 1b	 ror	 ecx, 27
  000c3	03 c8		 add	 ecx, eax

; 156  :     five_cycle(v, ch, 0x5a827999,  5);

  000c5	8b c2		 mov	 eax, edx
  000c7	41 03 4e 2c	 add	 ecx, DWORD PTR [r14+44]
  000cb	41 c1 c8 02	 ror	 r8d, 2
  000cf	44 8d 94 0b 99
	79 82 5a	 lea	 r10d, DWORD PTR [rbx+rcx+1518500249]
  000d7	41 33 c0	 xor	 eax, r8d
  000da	41 23 c1	 and	 eax, r9d
  000dd	41 8b ca	 mov	 ecx, r10d
  000e0	33 c2		 xor	 eax, edx
  000e2	c1 c9 1b	 ror	 ecx, 27
  000e5	03 c8		 add	 ecx, eax
  000e7	41 8b c0	 mov	 eax, r8d
  000ea	41 03 4e 30	 add	 ecx, DWORD PTR [r14+48]
  000ee	41 c1 c9 02	 ror	 r9d, 2
  000f2	45 8d 9c 0b 99
	79 82 5a	 lea	 r11d, DWORD PTR [r11+rcx+1518500249]
  000fa	41 33 c1	 xor	 eax, r9d
  000fd	41 23 c2	 and	 eax, r10d
  00100	41 8b cb	 mov	 ecx, r11d
  00103	c1 c9 1b	 ror	 ecx, 27
  00106	41 33 c0	 xor	 eax, r8d
  00109	03 c8		 add	 ecx, eax
  0010b	41 8b c1	 mov	 eax, r9d
  0010e	41 03 4e 34	 add	 ecx, DWORD PTR [r14+52]
  00112	41 c1 ca 02	 ror	 r10d, 2
  00116	8d 94 0a 99 79
	82 5a		 lea	 edx, DWORD PTR [rdx+rcx+1518500249]
  0011d	8b ca		 mov	 ecx, edx
  0011f	c1 c9 1b	 ror	 ecx, 27
  00122	41 33 c2	 xor	 eax, r10d
  00125	41 23 c3	 and	 eax, r11d
  00128	41 8b 5e 3c	 mov	 ebx, DWORD PTR [r14+60]

; 157  :     five_cycle(v, ch, 0x5a827999, 10);

  0012c	45 8b 6e 50	 mov	 r13d, DWORD PTR [r14+80]
  00130	41 33 c1	 xor	 eax, r9d
  00133	03 c8		 add	 ecx, eax
  00135	41 03 4e 38	 add	 ecx, DWORD PTR [r14+56]
  00139	41 c1 cb 02	 ror	 r11d, 2
  0013d	45 8d 84 08 99
	79 82 5a	 lea	 r8d, DWORD PTR [r8+rcx+1518500249]
  00145	41 8b cb	 mov	 ecx, r11d
  00148	41 33 ca	 xor	 ecx, r10d
  0014b	41 8b c0	 mov	 eax, r8d
  0014e	c1 c8 1b	 ror	 eax, 27
  00151	23 ca		 and	 ecx, edx
  00153	03 c3		 add	 eax, ebx
  00155	41 33 ca	 xor	 ecx, r10d
  00158	03 c8		 add	 ecx, eax
  0015a	c1 ca 02	 ror	 edx, 2
  0015d	41 8b c3	 mov	 eax, r11d
  00160	33 c2		 xor	 eax, edx
  00162	45 8d 8c 09 99
	79 82 5a	 lea	 r9d, DWORD PTR [r9+rcx+1518500249]
  0016a	41 23 c0	 and	 eax, r8d
  0016d	41 8b c9	 mov	 ecx, r9d
  00170	41 33 c3	 xor	 eax, r11d
  00173	c1 c9 1b	 ror	 ecx, 27
  00176	03 c8		 add	 ecx, eax
  00178	8b c2		 mov	 eax, edx
  0017a	41 03 4e 40	 add	 ecx, DWORD PTR [r14+64]
  0017e	41 c1 c8 02	 ror	 r8d, 2
  00182	41 33 c0	 xor	 eax, r8d
  00185	45 8d 94 0a 99
	79 82 5a	 lea	 r10d, DWORD PTR [r10+rcx+1518500249]
  0018d	41 23 c1	 and	 eax, r9d
  00190	41 8b ca	 mov	 ecx, r10d
  00193	c1 c9 1b	 ror	 ecx, 27
  00196	33 c2		 xor	 eax, edx
  00198	03 c8		 add	 ecx, eax
  0019a	41 8b c0	 mov	 eax, r8d
  0019d	41 03 4e 44	 add	 ecx, DWORD PTR [r14+68]
  001a1	41 c1 c9 02	 ror	 r9d, 2
  001a5	41 33 c1	 xor	 eax, r9d
  001a8	45 8d 9c 0b 99
	79 82 5a	 lea	 r11d, DWORD PTR [r11+rcx+1518500249]
  001b0	41 23 c2	 and	 eax, r10d
  001b3	41 8b cb	 mov	 ecx, r11d
  001b6	c1 c9 1b	 ror	 ecx, 27
  001b9	41 33 c0	 xor	 eax, r8d
  001bc	03 c8		 add	 ecx, eax
  001be	41 8b c1	 mov	 eax, r9d
  001c1	41 03 4e 48	 add	 ecx, DWORD PTR [r14+72]
  001c5	41 c1 ca 02	 ror	 r10d, 2
  001c9	8d 94 0a 99 79
	82 5a		 lea	 edx, DWORD PTR [rdx+rcx+1518500249]
  001d0	41 33 c2	 xor	 eax, r10d
  001d3	41 23 c3	 and	 eax, r11d
  001d6	8b ca		 mov	 ecx, edx
  001d8	c1 c9 1b	 ror	 ecx, 27
  001db	41 33 c1	 xor	 eax, r9d
  001de	03 c8		 add	 ecx, eax
  001e0	41 03 4e 4c	 add	 ecx, DWORD PTR [r14+76]
  001e4	41 c1 cb 02	 ror	 r11d, 2
  001e8	45 8d 84 08 99
	79 82 5a	 lea	 r8d, DWORD PTR [r8+rcx+1518500249]
  001f0	41 8b cb	 mov	 ecx, r11d
  001f3	41 33 ca	 xor	 ecx, r10d
  001f6	41 8b c0	 mov	 eax, r8d
  001f9	c1 c8 1b	 ror	 eax, 27
  001fc	23 ca		 and	 ecx, edx
  001fe	41 03 c5	 add	 eax, r13d
  00201	41 33 ca	 xor	 ecx, r10d
  00204	03 c8		 add	 ecx, eax
  00206	c1 ca 02	 ror	 edx, 2
  00209	41 8b c3	 mov	 eax, r11d
  0020c	45 8d 8c 09 99
	79 82 5a	 lea	 r9d, DWORD PTR [r9+rcx+1518500249]
  00214	33 c2		 xor	 eax, edx
  00216	41 23 c0	 and	 eax, r8d
  00219	41 8b c9	 mov	 ecx, r9d
  0021c	c1 c9 1b	 ror	 ecx, 27
  0021f	41 33 c3	 xor	 eax, r11d
  00222	03 c8		 add	 ecx, eax

; 158  :     one_cycle(v,0,1,2,3,4, ch, 0x5a827999, hf(15)); \

  00224	8b c2		 mov	 eax, edx
  00226	41 03 4e 54	 add	 ecx, DWORD PTR [r14+84]
  0022a	41 c1 c8 02	 ror	 r8d, 2
  0022e	45 8d 94 0a 99
	79 82 5a	 lea	 r10d, DWORD PTR [r10+rcx+1518500249]
  00236	41 8b ca	 mov	 ecx, r10d
  00239	c1 c9 1b	 ror	 ecx, 27

; 159  : 
; 160  : #undef  hf
; 161  : #define hf(i) (w[(i) & 15] = rotl32(                    \
; 162  :                  w[((i) + 13) & 15] ^ w[((i) + 8) & 15] \
; 163  :                ^ w[((i) +  2) & 15] ^ w[(i) & 15], 1))
; 164  : 
; 165  :     one_cycle(v,4,0,1,2,3, ch, 0x5a827999, hf(16));
; 166  :     one_cycle(v,3,4,0,1,2, ch, 0x5a827999, hf(17));

  0023c	45 8b 66 40	 mov	 r12d, DWORD PTR [r14+64]

; 167  :     one_cycle(v,2,3,4,0,1, ch, 0x5a827999, hf(18));

  00240	45 8b 7e 58	 mov	 r15d, DWORD PTR [r14+88]
  00244	41 33 c0	 xor	 eax, r8d
  00247	45 33 66 54	 xor	 r12d, DWORD PTR [r14+84]
  0024b	45 33 7e 44	 xor	 r15d, DWORD PTR [r14+68]
  0024f	41 23 c1	 and	 eax, r9d
  00252	45 33 66 28	 xor	 r12d, DWORD PTR [r14+40]
  00256	45 33 7e 2c	 xor	 r15d, DWORD PTR [r14+44]
  0025a	33 c2		 xor	 eax, edx
  0025c	45 33 66 20	 xor	 r12d, DWORD PTR [r14+32]
  00260	03 c8		 add	 ecx, eax
  00262	45 33 7e 24	 xor	 r15d, DWORD PTR [r14+36]
  00266	41 03 4e 58	 add	 ecx, DWORD PTR [r14+88]
  0026a	41 c1 c9 02	 ror	 r9d, 2
  0026e	44 33 eb	 xor	 r13d, ebx
  00271	41 8d b4 0b 99
	79 82 5a	 lea	 esi, DWORD PTR [r11+rcx+1518500249]
  00279	44 33 ef	 xor	 r13d, edi
  0027c	41 8b c8	 mov	 ecx, r8d
  0027f	41 33 c9	 xor	 ecx, r9d
  00282	44 33 ed	 xor	 r13d, ebp
  00285	8b c6		 mov	 eax, esi
  00287	41 23 ca	 and	 ecx, r10d
  0028a	41 d1 c5	 rol	 r13d, 1
  0028d	c1 c8 1b	 ror	 eax, 27
  00290	41 33 c8	 xor	 ecx, r8d
  00293	41 03 c5	 add	 eax, r13d
  00296	45 89 6e 1c	 mov	 DWORD PTR [r14+28], r13d
  0029a	03 c8		 add	 ecx, eax
  0029c	41 c1 ca 02	 ror	 r10d, 2
  002a0	41 d1 c4	 rol	 r12d, 1
  002a3	8d bc 0a 99 79
	82 5a		 lea	 edi, DWORD PTR [rdx+rcx+1518500249]
  002aa	45 89 66 20	 mov	 DWORD PTR [r14+32], r12d
  002ae	41 8b c9	 mov	 ecx, r9d
  002b1	41 33 ca	 xor	 ecx, r10d
  002b4	8b c7		 mov	 eax, edi
  002b6	44 89 a4 24 a0
	00 00 00	 mov	 DWORD PTR tv576[rsp], r12d
  002be	23 ce		 and	 ecx, esi
  002c0	c1 c8 1b	 ror	 eax, 27
  002c3	44 89 6c 24 04	 mov	 DWORD PTR tv2011[rsp], r13d
  002c8	41 33 c9	 xor	 ecx, r9d
  002cb	41 03 c4	 add	 eax, r12d
  002ce	03 c8		 add	 ecx, eax
  002d0	c1 ce 02	 ror	 esi, 2
  002d3	41 d1 c7	 rol	 r15d, 1
  002d6	41 8d 9c 08 99
	79 82 5a	 lea	 ebx, DWORD PTR [r8+rcx+1518500249]

; 168  :     one_cycle(v,1,2,3,4,0, ch, 0x5a827999, hf(19));

  002de	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR ctx$[rsp]
  002e6	45 89 7e 24	 mov	 DWORD PTR [r14+36], r15d
  002ea	45 8b 76 48	 mov	 r14d, DWORD PTR [r14+72]

; 169  : 
; 170  :     five_cycle(v, parity, 0x6ed9eba1,  20);

  002ee	41 8b 68 4c	 mov	 ebp, DWORD PTR [r8+76]
  002f2	8b c3		 mov	 eax, ebx
  002f4	45 33 70 30	 xor	 r14d, DWORD PTR [r8+48]
  002f8	41 33 68 34	 xor	 ebp, DWORD PTR [r8+52]
  002fc	c1 c8 1b	 ror	 eax, 27
  002ff	41 33 68 2c	 xor	 ebp, DWORD PTR [r8+44]
  00303	41 03 c7	 add	 eax, r15d
  00306	45 33 f5	 xor	 r14d, r13d
  00309	45 33 70 28	 xor	 r14d, DWORD PTR [r8+40]
  0030d	41 33 ec	 xor	 ebp, r12d
  00310	8b ce		 mov	 ecx, esi
  00312	41 33 ca	 xor	 ecx, r10d
  00315	44 89 7c 24 0c	 mov	 DWORD PTR tv580[rsp], r15d
  0031a	4d 8b e0	 mov	 r12, r8
  0031d	23 cf		 and	 ecx, edi
  0031f	41 33 ca	 xor	 ecx, r10d
  00322	03 c8		 add	 ecx, eax
  00324	c1 cf 02	 ror	 edi, 2
  00327	41 d1 c6	 rol	 r14d, 1
  0032a	45 8d 9c 09 99
	79 82 5a	 lea	 r11d, DWORD PTR [r9+rcx+1518500249]
  00332	8b ce		 mov	 ecx, esi
  00334	45 89 70 28	 mov	 DWORD PTR [r8+40], r14d
  00338	33 cf		 xor	 ecx, edi
  0033a	41 8b c3	 mov	 eax, r11d
  0033d	23 cb		 and	 ecx, ebx
  0033f	c1 c8 1b	 ror	 eax, 27
  00342	41 03 c6	 add	 eax, r14d
  00345	33 ce		 xor	 ecx, esi
  00347	03 c8		 add	 ecx, eax
  00349	c1 cb 02	 ror	 ebx, 2
  0034c	d1 c5		 rol	 ebp, 1
  0034e	41 89 68 2c	 mov	 DWORD PTR [r8+44], ebp
  00352	41 8d 94 0a 99
	79 82 5a	 lea	 edx, DWORD PTR [r10+rcx+1518500249]
  0035a	8b cf		 mov	 ecx, edi
  0035c	8b c2		 mov	 eax, edx
  0035e	33 cb		 xor	 ecx, ebx
  00360	c1 c8 1b	 ror	 eax, 27
  00363	41 33 cb	 xor	 ecx, r11d
  00366	03 c5		 add	 eax, ebp
  00368	03 c8		 add	 ecx, eax
  0036a	41 c1 cb 02	 ror	 r11d, 2
  0036e	44 8d 84 0e a1
	eb d9 6e	 lea	 r8d, DWORD PTR [rsi+rcx+1859775393]
  00376	41 8b 74 24 50	 mov	 esi, DWORD PTR [r12+80]
  0037b	8b cb		 mov	 ecx, ebx
  0037d	41 33 74 24 38	 xor	 esi, DWORD PTR [r12+56]
  00382	41 33 cb	 xor	 ecx, r11d
  00385	41 8b c0	 mov	 eax, r8d
  00388	41 33 74 24 30	 xor	 esi, DWORD PTR [r12+48]
  0038d	33 ca		 xor	 ecx, edx
  0038f	41 33 f7	 xor	 esi, r15d
  00392	d1 c6		 rol	 esi, 1
  00394	c1 c8 1b	 ror	 eax, 27
  00397	03 c6		 add	 eax, esi
  00399	41 89 74 24 30	 mov	 DWORD PTR [r12+48], esi
  0039e	03 c8		 add	 ecx, eax
  003a0	c1 ca 02	 ror	 edx, 2
  003a3	44 8d 8c 0f a1
	eb d9 6e	 lea	 r9d, DWORD PTR [rdi+rcx+1859775393]
  003ab	41 8b 7c 24 54	 mov	 edi, DWORD PTR [r12+84]
  003b0	41 8b c8	 mov	 ecx, r8d
  003b3	41 33 7c 24 3c	 xor	 edi, DWORD PTR [r12+60]
  003b8	41 33 cb	 xor	 ecx, r11d
  003bb	41 8b c1	 mov	 eax, r9d
  003be	41 33 7c 24 34	 xor	 edi, DWORD PTR [r12+52]
  003c3	33 ca		 xor	 ecx, edx
  003c5	41 33 fe	 xor	 edi, r14d
  003c8	d1 c7		 rol	 edi, 1
  003ca	c1 c8 1b	 ror	 eax, 27
  003cd	03 c7		 add	 eax, edi
  003cf	41 89 7c 24 34	 mov	 DWORD PTR [r12+52], edi
  003d4	03 c8		 add	 ecx, eax
  003d6	41 c1 c8 02	 ror	 r8d, 2
  003da	44 8d 94 0b a1
	eb d9 6e	 lea	 r10d, DWORD PTR [rbx+rcx+1859775393]
  003e2	41 8b 5c 24 58	 mov	 ebx, DWORD PTR [r12+88]
  003e7	41 8b c8	 mov	 ecx, r8d
  003ea	41 33 5c 24 40	 xor	 ebx, DWORD PTR [r12+64]
  003ef	41 33 c9	 xor	 ecx, r9d
  003f2	41 8b c2	 mov	 eax, r10d
  003f5	41 33 5c 24 38	 xor	 ebx, DWORD PTR [r12+56]
  003fa	33 ca		 xor	 ecx, edx
  003fc	33 dd		 xor	 ebx, ebp
  003fe	d1 c3		 rol	 ebx, 1
  00400	c1 c8 1b	 ror	 eax, 27
  00403	03 c3		 add	 eax, ebx
  00405	41 89 5c 24 38	 mov	 DWORD PTR [r12+56], ebx
  0040a	44 8b e6	 mov	 r12d, esi
  0040d	03 c8		 add	 ecx, eax
  0040f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00417	41 c1 c9 02	 ror	 r9d, 2
  0041b	44 33 60 44	 xor	 r12d, DWORD PTR [rax+68]
  0041f	45 8d 9c 0b a1
	eb d9 6e	 lea	 r11d, DWORD PTR [r11+rcx+1859775393]
  00427	41 8b c8	 mov	 ecx, r8d
  0042a	44 33 60 3c	 xor	 r12d, DWORD PTR [rax+60]
  0042e	41 33 c9	 xor	 ecx, r9d
  00431	45 33 e5	 xor	 r12d, r13d
  00434	41 33 ca	 xor	 ecx, r10d
  00437	41 d1 c4	 rol	 r12d, 1
  0043a	44 89 60 3c	 mov	 DWORD PTR [rax+60], r12d
  0043e	41 8b c3	 mov	 eax, r11d
  00441	c1 c8 1b	 ror	 eax, 27
  00444	41 03 c4	 add	 eax, r12d
  00447	03 c8		 add	 ecx, eax

; 171  :     five_cycle(v, parity, 0x6ed9eba1,  25);

  00449	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00451	41 c1 ca 02	 ror	 r10d, 2
  00455	44 8b 68 48	 mov	 r13d, DWORD PTR [rax+72]
  00459	8d 94 0a a1 eb
	d9 6e		 lea	 edx, DWORD PTR [rdx+rcx+1859775393]
  00460	41 8b c9	 mov	 ecx, r9d
  00463	44 33 68 40	 xor	 r13d, DWORD PTR [rax+64]
  00467	44 33 ef	 xor	 r13d, edi
  0046a	44 33 ac 24 a0
	00 00 00	 xor	 r13d, DWORD PTR tv576[rsp]
  00472	41 d1 c5	 rol	 r13d, 1
  00475	44 89 68 40	 mov	 DWORD PTR [rax+64], r13d
  00479	8b c2		 mov	 eax, edx
  0047b	c1 c8 1b	 ror	 eax, 27
  0047e	41 33 ca	 xor	 ecx, r10d
  00481	41 33 cb	 xor	 ecx, r11d
  00484	41 03 c5	 add	 eax, r13d
  00487	03 c8		 add	 ecx, eax
  00489	41 c1 cb 02	 ror	 r11d, 2
  0048d	8b c3		 mov	 eax, ebx
  0048f	45 8d 84 08 a1
	eb d9 6e	 lea	 r8d, DWORD PTR [r8+rcx+1859775393]
  00497	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  0049f	33 41 4c	 xor	 eax, DWORD PTR [rcx+76]
  004a2	33 41 44	 xor	 eax, DWORD PTR [rcx+68]
  004a5	41 33 c7	 xor	 eax, r15d
  004a8	d1 c0		 rol	 eax, 1
  004aa	89 41 44	 mov	 DWORD PTR [rcx+68], eax
  004ad	89 44 24 08	 mov	 DWORD PTR tv2567[rsp], eax
  004b1	41 8b ca	 mov	 ecx, r10d
  004b4	44 8b 7c 24 08	 mov	 r15d, DWORD PTR tv2567[rsp]
  004b9	41 33 cb	 xor	 ecx, r11d
  004bc	41 8b c0	 mov	 eax, r8d
  004bf	33 ca		 xor	 ecx, edx
  004c1	c1 c8 1b	 ror	 eax, 27
  004c4	41 03 c7	 add	 eax, r15d
  004c7	03 c8		 add	 ecx, eax
  004c9	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  004d1	c1 ca 02	 ror	 edx, 2
  004d4	44 8b 78 50	 mov	 r15d, DWORD PTR [rax+80]
  004d8	45 8d 8c 09 a1
	eb d9 6e	 lea	 r9d, DWORD PTR [r9+rcx+1859775393]
  004e0	41 8b c8	 mov	 ecx, r8d
  004e3	44 33 78 48	 xor	 r15d, DWORD PTR [rax+72]
  004e7	41 33 cb	 xor	 ecx, r11d
  004ea	45 33 fc	 xor	 r15d, r12d
  004ed	33 ca		 xor	 ecx, edx
  004ef	45 33 fe	 xor	 r15d, r14d
  004f2	41 d1 c7	 rol	 r15d, 1
  004f5	44 89 78 48	 mov	 DWORD PTR [rax+72], r15d
  004f9	44 89 7c 24 1c	 mov	 DWORD PTR tv2523[rsp], r15d
  004fe	41 8b c1	 mov	 eax, r9d
  00501	c1 c8 1b	 ror	 eax, 27
  00504	41 03 c7	 add	 eax, r15d
  00507	03 c8		 add	 ecx, eax
  00509	41 c1 c8 02	 ror	 r8d, 2
  0050d	41 8b c5	 mov	 eax, r13d
  00510	45 8d 94 0a a1
	eb d9 6e	 lea	 r10d, DWORD PTR [r10+rcx+1859775393]
  00518	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  00520	33 41 54	 xor	 eax, DWORD PTR [rcx+84]
  00523	33 41 4c	 xor	 eax, DWORD PTR [rcx+76]
  00526	33 c5		 xor	 eax, ebp
  00528	d1 c0		 rol	 eax, 1
  0052a	89 41 4c	 mov	 DWORD PTR [rcx+76], eax
  0052d	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv2538[rsp], eax
  00534	41 8b c2	 mov	 eax, r10d
  00537	44 8b bc 24 a8
	00 00 00	 mov	 r15d, DWORD PTR tv2538[rsp]
  0053f	c1 c8 1b	 ror	 eax, 27
  00542	41 8b c8	 mov	 ecx, r8d
  00545	41 03 c7	 add	 eax, r15d
  00548	41 33 c9	 xor	 ecx, r9d
  0054b	33 ca		 xor	 ecx, edx
  0054d	03 c8		 add	 ecx, eax
  0054f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00557	41 c1 c9 02	 ror	 r9d, 2
  0055b	44 8b 78 58	 mov	 r15d, DWORD PTR [rax+88]
  0055f	45 8d 9c 0b a1
	eb d9 6e	 lea	 r11d, DWORD PTR [r11+rcx+1859775393]
  00567	41 8b c8	 mov	 ecx, r8d
  0056a	44 33 78 50	 xor	 r15d, DWORD PTR [rax+80]
  0056e	41 33 c9	 xor	 ecx, r9d
  00571	44 33 fe	 xor	 r15d, esi
  00574	41 33 ca	 xor	 ecx, r10d
  00577	44 33 7c 24 08	 xor	 r15d, DWORD PTR tv2567[rsp]
  0057c	41 d1 c7	 rol	 r15d, 1
  0057f	44 89 78 50	 mov	 DWORD PTR [rax+80], r15d
  00583	44 89 7c 24 18	 mov	 DWORD PTR tv2493[rsp], r15d
  00588	41 8b c3	 mov	 eax, r11d
  0058b	c1 c8 1b	 ror	 eax, 27
  0058e	41 03 c7	 add	 eax, r15d

; 172  :     five_cycle(v, parity, 0x6ed9eba1,  30);

  00591	44 8b 7c 24 1c	 mov	 r15d, DWORD PTR tv2523[rsp]
  00596	03 c8		 add	 ecx, eax
  00598	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  005a0	41 c1 ca 02	 ror	 r10d, 2
  005a4	44 33 78 54	 xor	 r15d, DWORD PTR [rax+84]
  005a8	8d 94 0a a1 eb
	d9 6e		 lea	 edx, DWORD PTR [rdx+rcx+1859775393]
  005af	44 33 ff	 xor	 r15d, edi
  005b2	44 33 7c 24 04	 xor	 r15d, DWORD PTR tv2011[rsp]
  005b7	41 d1 c7	 rol	 r15d, 1
  005ba	44 89 78 54	 mov	 DWORD PTR [rax+84], r15d
  005be	44 89 7c 24 14	 mov	 DWORD PTR tv2478[rsp], r15d
  005c3	41 8b c9	 mov	 ecx, r9d
  005c6	41 33 ca	 xor	 ecx, r10d
  005c9	8b c2		 mov	 eax, edx
  005cb	c1 c8 1b	 ror	 eax, 27
  005ce	41 33 cb	 xor	 ecx, r11d
  005d1	41 03 c7	 add	 eax, r15d
  005d4	03 c8		 add	 ecx, eax
  005d6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  005de	41 c1 cb 02	 ror	 r11d, 2
  005e2	44 8b 78 58	 mov	 r15d, DWORD PTR [rax+88]
  005e6	45 8d 84 08 a1
	eb d9 6e	 lea	 r8d, DWORD PTR [r8+rcx+1859775393]
  005ee	41 8b ca	 mov	 ecx, r10d
  005f1	41 33 cb	 xor	 ecx, r11d
  005f4	44 33 fb	 xor	 r15d, ebx
  005f7	44 33 bc 24 a8
	00 00 00	 xor	 r15d, DWORD PTR tv2538[rsp]
  005ff	33 ca		 xor	 ecx, edx
  00601	44 33 bc 24 a0
	00 00 00	 xor	 r15d, DWORD PTR tv576[rsp]
  00609	41 d1 c7	 rol	 r15d, 1
  0060c	44 89 78 58	 mov	 DWORD PTR [rax+88], r15d
  00610	44 89 bc 24 98
	00 00 00	 mov	 DWORD PTR tv518[rsp], r15d
  00618	41 8b c0	 mov	 eax, r8d
  0061b	c1 c8 1b	 ror	 eax, 27
  0061e	41 03 c7	 add	 eax, r15d
  00621	44 8b 7c 24 0c	 mov	 r15d, DWORD PTR tv580[rsp]
  00626	03 c8		 add	 ecx, eax
  00628	8b 44 24 18	 mov	 eax, DWORD PTR tv2493[rsp]
  0062c	c1 ca 02	 ror	 edx, 2
  0062f	41 33 c4	 xor	 eax, r12d
  00632	45 8d 8c 09 a1
	eb d9 6e	 lea	 r9d, DWORD PTR [r9+rcx+1859775393]
  0063a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  00642	33 44 24 04	 xor	 eax, DWORD PTR tv2011[rsp]
  00646	41 33 c7	 xor	 eax, r15d
  00649	d1 c0		 rol	 eax, 1
  0064b	89 41 1c	 mov	 DWORD PTR [rcx+28], eax
  0064e	89 44 24 10	 mov	 DWORD PTR tv573[rsp], eax
  00652	41 8b c1	 mov	 eax, r9d
  00655	44 8b 7c 24 10	 mov	 r15d, DWORD PTR tv573[rsp]
  0065a	c1 c8 1b	 ror	 eax, 27
  0065d	41 8b c8	 mov	 ecx, r8d
  00660	41 03 c7	 add	 eax, r15d
  00663	41 33 cb	 xor	 ecx, r11d
  00666	45 8b fd	 mov	 r15d, r13d
  00669	44 33 7c 24 14	 xor	 r15d, DWORD PTR tv2478[rsp]
  0066e	33 ca		 xor	 ecx, edx
  00670	03 c8		 add	 ecx, eax
  00672	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  0067a	45 33 fe	 xor	 r15d, r14d
  0067d	44 33 bc 24 a0
	00 00 00	 xor	 r15d, DWORD PTR tv576[rsp]
  00685	45 8d 94 0a a1
	eb d9 6e	 lea	 r10d, DWORD PTR [r10+rcx+1859775393]
  0068d	41 c1 c8 02	 ror	 r8d, 2
  00691	41 d1 c7	 rol	 r15d, 1
  00694	41 8b c8	 mov	 ecx, r8d
  00697	44 89 78 20	 mov	 DWORD PTR [rax+32], r15d
  0069b	41 33 c9	 xor	 ecx, r9d
  0069e	44 89 7c 24 20	 mov	 DWORD PTR tv577[rsp], r15d
  006a3	33 ca		 xor	 ecx, edx
  006a5	41 8b c2	 mov	 eax, r10d
  006a8	c1 c8 1b	 ror	 eax, 27
  006ab	41 03 c7	 add	 eax, r15d
  006ae	44 8b 7c 24 0c	 mov	 r15d, DWORD PTR tv580[rsp]
  006b3	03 c8		 add	 ecx, eax
  006b5	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv518[rsp]
  006bc	41 c1 c9 02	 ror	 r9d, 2
  006c0	33 44 24 08	 xor	 eax, DWORD PTR tv2567[rsp]
  006c4	45 8d 9c 0b a1
	eb d9 6e	 lea	 r11d, DWORD PTR [r11+rcx+1859775393]
  006cc	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  006d4	33 c5		 xor	 eax, ebp
  006d6	41 33 c7	 xor	 eax, r15d
  006d9	d1 c0		 rol	 eax, 1
  006db	89 41 24	 mov	 DWORD PTR [rcx+36], eax
  006de	89 04 24	 mov	 DWORD PTR tv2013[rsp], eax
  006e1	41 8b c3	 mov	 eax, r11d
  006e4	44 8b 3c 24	 mov	 r15d, DWORD PTR tv2013[rsp]
  006e8	c1 c8 1b	 ror	 eax, 27
  006eb	41 8b c8	 mov	 ecx, r8d
  006ee	41 33 c9	 xor	 ecx, r9d
  006f1	41 03 c7	 add	 eax, r15d
  006f4	41 33 ca	 xor	 ecx, r10d
  006f7	03 c8		 add	 ecx, eax

; 173  :     five_cycle(v, parity, 0x6ed9eba1,  35);

  006f9	44 8b 7c 24 1c	 mov	 r15d, DWORD PTR tv2523[rsp]
  006fe	8d 94 0a a1 eb
	d9 6e		 lea	 edx, DWORD PTR [rdx+rcx+1859775393]
  00705	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  0070d	41 c1 ca 02	 ror	 r10d, 2
  00711	41 8b c7	 mov	 eax, r15d
  00714	33 c6		 xor	 eax, esi
  00716	33 44 24 10	 xor	 eax, DWORD PTR tv573[rsp]
  0071a	41 33 c6	 xor	 eax, r14d
  0071d	d1 c0		 rol	 eax, 1
  0071f	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00722	89 44 24 04	 mov	 DWORD PTR tv1614[rsp], eax
  00726	41 8b c9	 mov	 ecx, r9d
  00729	44 8b 74 24 04	 mov	 r14d, DWORD PTR tv1614[rsp]
  0072e	41 33 ca	 xor	 ecx, r10d
  00731	8b c2		 mov	 eax, edx
  00733	c1 c8 1b	 ror	 eax, 27
  00736	41 33 cb	 xor	 ecx, r11d
  00739	41 03 c6	 add	 eax, r14d
  0073c	44 8b b4 24 a8
	00 00 00	 mov	 r14d, DWORD PTR tv2538[rsp]
  00744	03 c8		 add	 ecx, eax
  00746	41 c1 cb 02	 ror	 r11d, 2
  0074a	41 8b c6	 mov	 eax, r14d
  0074d	33 c7		 xor	 eax, edi
  0074f	45 8d 84 08 a1
	eb d9 6e	 lea	 r8d, DWORD PTR [r8+rcx+1859775393]
  00757	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  0075f	33 c5		 xor	 eax, ebp
  00761	33 44 24 20	 xor	 eax, DWORD PTR tv577[rsp]
  00765	d1 c0		 rol	 eax, 1
  00767	89 41 2c	 mov	 DWORD PTR [rcx+44], eax
  0076a	89 44 24 1c	 mov	 DWORD PTR tv566[rsp], eax
  0076e	41 8b ca	 mov	 ecx, r10d
  00771	8b 6c 24 1c	 mov	 ebp, DWORD PTR tv566[rsp]
  00775	41 33 cb	 xor	 ecx, r11d
  00778	41 8b c0	 mov	 eax, r8d
  0077b	c1 c8 1b	 ror	 eax, 27
  0077e	33 ca		 xor	 ecx, edx
  00780	03 c5		 add	 eax, ebp
  00782	8b 6c 24 18	 mov	 ebp, DWORD PTR tv2493[rsp]
  00786	03 c8		 add	 ecx, eax
  00788	c1 ca 02	 ror	 edx, 2
  0078b	8b c5		 mov	 eax, ebp
  0078d	33 c3		 xor	 eax, ebx
  0078f	45 8d 8c 09 a1
	eb d9 6e	 lea	 r9d, DWORD PTR [r9+rcx+1859775393]
  00797	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  0079f	33 c6		 xor	 eax, esi
  007a1	33 04 24	 xor	 eax, DWORD PTR tv2013[rsp]
  007a4	d1 c0		 rol	 eax, 1
  007a6	89 41 30	 mov	 DWORD PTR [rcx+48], eax
  007a9	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv2399[rsp], eax
  007b0	41 8b c8	 mov	 ecx, r8d
  007b3	8b b4 24 a0 00
	00 00		 mov	 esi, DWORD PTR tv2399[rsp]
  007ba	41 33 cb	 xor	 ecx, r11d
  007bd	41 8b c1	 mov	 eax, r9d
  007c0	c1 c8 1b	 ror	 eax, 27
  007c3	33 ca		 xor	 ecx, edx
  007c5	03 c6		 add	 eax, esi
  007c7	8b 74 24 14	 mov	 esi, DWORD PTR tv2478[rsp]
  007cb	03 c8		 add	 ecx, eax
  007cd	41 c1 c8 02	 ror	 r8d, 2
  007d1	8b c6		 mov	 eax, esi
  007d3	41 33 c4	 xor	 eax, r12d
  007d6	45 8d 94 0a a1
	eb d9 6e	 lea	 r10d, DWORD PTR [r10+rcx+1859775393]
  007de	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  007e6	33 c7		 xor	 eax, edi
  007e8	33 44 24 04	 xor	 eax, DWORD PTR tv1614[rsp]
  007ec	d1 c0		 rol	 eax, 1
  007ee	89 41 34	 mov	 DWORD PTR [rcx+52], eax
  007f1	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv2385[rsp], eax
  007f8	41 8b c2	 mov	 eax, r10d
  007fb	8b bc 24 a8 00
	00 00		 mov	 edi, DWORD PTR tv2385[rsp]
  00802	c1 c8 1b	 ror	 eax, 27
  00805	41 8b c8	 mov	 ecx, r8d
  00808	03 c7		 add	 eax, edi
  0080a	8b bc 24 98 00
	00 00		 mov	 edi, DWORD PTR tv518[rsp]
  00811	41 33 c9	 xor	 ecx, r9d
  00814	33 ca		 xor	 ecx, edx
  00816	41 33 fd	 xor	 edi, r13d
  00819	03 c8		 add	 ecx, eax
  0081b	41 c1 c9 02	 ror	 r9d, 2
  0081f	33 fb		 xor	 edi, ebx
  00821	45 8d 9c 0b a1
	eb d9 6e	 lea	 r11d, DWORD PTR [r11+rcx+1859775393]
  00829	33 7c 24 1c	 xor	 edi, DWORD PTR tv566[rsp]
  0082d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00835	41 8b c8	 mov	 ecx, r8d
  00838	41 33 c9	 xor	 ecx, r9d
  0083b	d1 c7		 rol	 edi, 1
  0083d	41 33 ca	 xor	 ecx, r10d
  00840	89 78 38	 mov	 DWORD PTR [rax+56], edi
  00843	89 7c 24 0c	 mov	 DWORD PTR tv2370[rsp], edi
  00847	41 8b c3	 mov	 eax, r11d
  0084a	c1 c8 1b	 ror	 eax, 27
  0084d	03 c7		 add	 eax, edi

; 174  : 
; 175  :     five_cycle(v, maj, 0x8f1bbcdc,  40);

  0084f	8b 7c 24 08	 mov	 edi, DWORD PTR tv2567[rsp]
  00853	03 c8		 add	 ecx, eax
  00855	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv2399[rsp]
  0085c	41 c1 ca 02	 ror	 r10d, 2
  00860	33 c7		 xor	 eax, edi
  00862	8d 9c 0a a1 eb
	d9 6e		 lea	 ebx, DWORD PTR [rdx+rcx+1859775393]
  00869	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  00871	41 33 c4	 xor	 eax, r12d
  00874	44 8b 64 24 10	 mov	 r12d, DWORD PTR tv573[rsp]
  00879	8b d3		 mov	 edx, ebx
  0087b	41 33 c4	 xor	 eax, r12d
  0087e	d1 c0		 rol	 eax, 1
  00880	c1 ca 1b	 ror	 edx, 27
  00883	89 41 3c	 mov	 DWORD PTR [rcx+60], eax
  00886	89 44 24 24	 mov	 DWORD PTR tv2355[rsp], eax
  0088a	41 8b ca	 mov	 ecx, r10d
  0088d	41 33 cb	 xor	 ecx, r11d
  00890	41 8b c2	 mov	 eax, r10d
  00893	41 23 c9	 and	 ecx, r9d
  00896	41 23 c3	 and	 eax, r11d
  00899	0b c8		 or	 ecx, eax
  0089b	41 8b c7	 mov	 eax, r15d
  0089e	03 4c 24 24	 add	 ecx, DWORD PTR tv2355[rsp]
  008a2	41 33 c5	 xor	 eax, r13d
  008a5	44 8b 6c 24 20	 mov	 r13d, DWORD PTR tv577[rsp]
  008aa	33 84 24 a8 00
	00 00		 xor	 eax, DWORD PTR tv2385[rsp]
  008b1	41 03 c8	 add	 ecx, r8d
  008b4	41 c1 cb 02	 ror	 r11d, 2
  008b8	44 8d 84 11 dc
	bc 1b 8f	 lea	 r8d, DWORD PTR [rcx+rdx-1894007588]
  008c0	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  008c8	41 33 c5	 xor	 eax, r13d
  008cb	d1 c0		 rol	 eax, 1
  008cd	41 8b d0	 mov	 edx, r8d
  008d0	89 41 40	 mov	 DWORD PTR [rcx+64], eax
  008d3	89 44 24 14	 mov	 DWORD PTR tv2298[rsp], eax
  008d7	c1 ca 1b	 ror	 edx, 27
  008da	41 8b cb	 mov	 ecx, r11d
  008dd	41 8b c3	 mov	 eax, r11d
  008e0	33 cb		 xor	 ecx, ebx
  008e2	23 c3		 and	 eax, ebx
  008e4	41 23 ca	 and	 ecx, r10d
  008e7	0b c8		 or	 ecx, eax
  008e9	8b 44 24 0c	 mov	 eax, DWORD PTR tv2370[rsp]
  008ed	03 4c 24 14	 add	 ecx, DWORD PTR tv2298[rsp]
  008f1	41 33 c6	 xor	 eax, r14d
  008f4	41 03 c9	 add	 ecx, r9d
  008f7	33 c7		 xor	 eax, edi
  008f9	8b 3c 24	 mov	 edi, DWORD PTR tv2013[rsp]
  008fc	44 8d 8c 11 dc
	bc 1b 8f	 lea	 r9d, DWORD PTR [rcx+rdx-1894007588]
  00904	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  0090c	33 c7		 xor	 eax, edi
  0090e	c1 cb 02	 ror	 ebx, 2
  00911	d1 c0		 rol	 eax, 1
  00913	41 8b d1	 mov	 edx, r9d
  00916	89 41 44	 mov	 DWORD PTR [rcx+68], eax
  00919	89 44 24 18	 mov	 DWORD PTR tv1875[rsp], eax
  0091d	c1 ca 1b	 ror	 edx, 27
  00920	41 8b c8	 mov	 ecx, r8d
  00923	41 8b c0	 mov	 eax, r8d
  00926	33 cb		 xor	 ecx, ebx
  00928	23 c3		 and	 eax, ebx
  0092a	41 23 cb	 and	 ecx, r11d
  0092d	0b c8		 or	 ecx, eax
  0092f	8b c5		 mov	 eax, ebp
  00931	03 4c 24 18	 add	 ecx, DWORD PTR tv1875[rsp]
  00935	41 33 c7	 xor	 eax, r15d
  00938	41 03 ca	 add	 ecx, r10d
  0093b	41 c1 c8 02	 ror	 r8d, 2
  0093f	33 44 24 24	 xor	 eax, DWORD PTR tv2355[rsp]
  00943	44 8d 94 11 dc
	bc 1b 8f	 lea	 r10d, DWORD PTR [rcx+rdx-1894007588]
  0094b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  00953	44 8b 7c 24 04	 mov	 r15d, DWORD PTR tv1614[rsp]
  00958	41 8b d2	 mov	 edx, r10d
  0095b	41 33 c7	 xor	 eax, r15d
  0095e	d1 c0		 rol	 eax, 1
  00960	c1 ca 1b	 ror	 edx, 27
  00963	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00966	89 04 24	 mov	 DWORD PTR tv2261[rsp], eax
  00969	41 8b c8	 mov	 ecx, r8d
  0096c	41 33 c9	 xor	 ecx, r9d
  0096f	41 8b c0	 mov	 eax, r8d
  00972	23 cb		 and	 ecx, ebx
  00974	41 23 c1	 and	 eax, r9d
  00977	0b c8		 or	 ecx, eax
  00979	8b 44 24 14	 mov	 eax, DWORD PTR tv2298[rsp]
  0097d	03 0c 24	 add	 ecx, DWORD PTR tv2261[rsp]
  00980	33 c6		 xor	 eax, esi
  00982	41 03 cb	 add	 ecx, r11d
  00985	41 33 c6	 xor	 eax, r14d

; 176  :     five_cycle(v, maj, 0x8f1bbcdc,  45);

  00988	44 8b b4 24 98
	00 00 00	 mov	 r14d, DWORD PTR tv518[rsp]
  00990	33 44 24 1c	 xor	 eax, DWORD PTR tv566[rsp]
  00994	44 8d 9c 11 dc
	bc 1b 8f	 lea	 r11d, DWORD PTR [rcx+rdx-1894007588]
  0099c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  009a4	41 c1 c9 02	 ror	 r9d, 2
  009a8	d1 c0		 rol	 eax, 1
  009aa	44 33 f5	 xor	 r14d, ebp
  009ad	44 33 b4 24 a0
	00 00 00	 xor	 r14d, DWORD PTR tv2399[rsp]
  009b5	48 8b ac 24 90
	00 00 00	 mov	 rbp, QWORD PTR ctx$[rsp]
  009bd	89 41 4c	 mov	 DWORD PTR [rcx+76], eax
  009c0	44 33 74 24 18	 xor	 r14d, DWORD PTR tv1875[rsp]
  009c5	89 44 24 08	 mov	 DWORD PTR tv1739[rsp], eax
  009c9	41 8b c9	 mov	 ecx, r9d
  009cc	41 33 ca	 xor	 ecx, r10d
  009cf	41 8b c1	 mov	 eax, r9d
  009d2	41 8b d3	 mov	 edx, r11d
  009d5	41 23 c8	 and	 ecx, r8d
  009d8	41 23 c2	 and	 eax, r10d
  009db	c1 ca 1b	 ror	 edx, 27
  009de	0b c8		 or	 ecx, eax
  009e0	03 4c 24 08	 add	 ecx, DWORD PTR tv1739[rsp]
  009e4	03 cb		 add	 ecx, ebx
  009e6	41 c1 ca 02	 ror	 r10d, 2
  009ea	41 d1 c6	 rol	 r14d, 1
  009ed	8d 9c 11 dc bc
	1b 8f		 lea	 ebx, DWORD PTR [rcx+rdx-1894007588]
  009f4	44 89 74 24 10	 mov	 DWORD PTR tv725[rsp], r14d
  009f9	44 89 75 50	 mov	 DWORD PTR [rbp+80], r14d
  009fd	8b d3		 mov	 edx, ebx
  009ff	41 8b ca	 mov	 ecx, r10d
  00a02	41 8b c2	 mov	 eax, r10d
  00a05	41 33 cb	 xor	 ecx, r11d
  00a08	41 23 c3	 and	 eax, r11d
  00a0b	c1 ca 1b	 ror	 edx, 27
  00a0e	41 23 c9	 and	 ecx, r9d
  00a11	0b c8		 or	 ecx, eax
  00a13	41 03 ce	 add	 ecx, r14d
  00a16	44 8b 34 24	 mov	 r14d, DWORD PTR tv2261[rsp]
  00a1a	41 03 c8	 add	 ecx, r8d
  00a1d	44 33 f6	 xor	 r14d, esi
  00a20	8b b4 24 98 00
	00 00		 mov	 esi, DWORD PTR tv518[rsp]
  00a27	44 33 b4 24 a8
	00 00 00	 xor	 r14d, DWORD PTR tv2385[rsp]
  00a2f	33 74 24 0c	 xor	 esi, DWORD PTR tv2370[rsp]
  00a33	44 8d 84 11 dc
	bc 1b 8f	 lea	 r8d, DWORD PTR [rcx+rdx-1894007588]
  00a3b	33 74 24 08	 xor	 esi, DWORD PTR tv1739[rsp]
  00a3f	41 c1 cb 02	 ror	 r11d, 2
  00a43	45 33 f4	 xor	 r14d, r12d
  00a46	41 d1 c6	 rol	 r14d, 1
  00a49	41 8b cb	 mov	 ecx, r11d
  00a4c	41 8b c3	 mov	 eax, r11d
  00a4f	33 cb		 xor	 ecx, ebx
  00a51	23 c3		 and	 eax, ebx
  00a53	41 8b d0	 mov	 edx, r8d
  00a56	41 23 ca	 and	 ecx, r10d
  00a59	c1 ca 1b	 ror	 edx, 27
  00a5c	44 89 74 24 20	 mov	 DWORD PTR tv776[rsp], r14d
  00a61	0b c8		 or	 ecx, eax
  00a63	44 89 75 54	 mov	 DWORD PTR [rbp+84], r14d
  00a67	41 03 ce	 add	 ecx, r14d
  00a6a	41 03 c9	 add	 ecx, r9d
  00a6d	c1 cb 02	 ror	 ebx, 2
  00a70	41 33 f5	 xor	 esi, r13d
  00a73	44 8d 8c 11 dc
	bc 1b 8f	 lea	 r9d, DWORD PTR [rcx+rdx-1894007588]
  00a7b	d1 c6		 rol	 esi, 1
  00a7d	41 8b c8	 mov	 ecx, r8d
  00a80	41 8b c0	 mov	 eax, r8d
  00a83	33 cb		 xor	 ecx, ebx
  00a85	23 c3		 and	 eax, ebx
  00a87	89 75 58	 mov	 DWORD PTR [rbp+88], esi
  00a8a	41 23 cb	 and	 ecx, r11d
  00a8d	89 b4 24 98 00
	00 00		 mov	 DWORD PTR tv518[rsp], esi
  00a94	41 8b d1	 mov	 edx, r9d
  00a97	0b c8		 or	 ecx, eax
  00a99	c1 ca 1b	 ror	 edx, 27
  00a9c	03 ce		 add	 ecx, esi
  00a9e	8b 74 24 10	 mov	 esi, DWORD PTR tv725[rsp]
  00aa2	33 74 24 24	 xor	 esi, DWORD PTR tv2355[rsp]
  00aa6	41 03 ca	 add	 ecx, r10d
  00aa9	41 c1 c8 02	 ror	 r8d, 2
  00aad	44 8d 94 11 dc
	bc 1b 8f	 lea	 r10d, DWORD PTR [rcx+rdx-1894007588]
  00ab5	41 33 f4	 xor	 esi, r12d
  00ab8	41 8b c8	 mov	 ecx, r8d
  00abb	41 33 c9	 xor	 ecx, r9d
  00abe	33 f7		 xor	 esi, edi
  00ac0	41 8b c0	 mov	 eax, r8d
  00ac3	23 cb		 and	 ecx, ebx
  00ac5	41 23 c1	 and	 eax, r9d
  00ac8	d1 c6		 rol	 esi, 1
  00aca	0b c8		 or	 ecx, eax
  00acc	89 75 1c	 mov	 DWORD PTR [rbp+28], esi
  00acf	8b 6c 24 14	 mov	 ebp, DWORD PTR tv2298[rsp]
  00ad3	03 ce		 add	 ecx, esi
  00ad5	41 33 ee	 xor	 ebp, r14d

; 177  :     five_cycle(v, maj, 0x8f1bbcdc,  50);

  00ad8	44 8b b4 24 98
	00 00 00	 mov	 r14d, DWORD PTR tv518[rsp]
  00ae0	44 33 74 24 18	 xor	 r14d, DWORD PTR tv1875[rsp]
  00ae5	41 03 cb	 add	 ecx, r11d
  00ae8	41 33 ef	 xor	 ebp, r15d
  00aeb	41 33 ed	 xor	 ebp, r13d
  00aee	4c 8b ac 24 90
	00 00 00	 mov	 r13, QWORD PTR ctx$[rsp]
  00af6	41 8b d2	 mov	 edx, r10d
  00af9	c1 ca 1b	 ror	 edx, 27
  00afc	41 c1 c9 02	 ror	 r9d, 2
  00b00	d1 c5		 rol	 ebp, 1
  00b02	44 8d 9c 11 dc
	bc 1b 8f	 lea	 r11d, DWORD PTR [rcx+rdx-1894007588]
  00b0a	89 74 24 2c	 mov	 DWORD PTR tv2014[rsp], esi
  00b0e	8b 74 24 1c	 mov	 esi, DWORD PTR tv566[rsp]
  00b12	44 8b 64 24 2c	 mov	 r12d, DWORD PTR tv2014[rsp]
  00b17	44 33 f6	 xor	 r14d, esi
  00b1a	41 8b d3	 mov	 edx, r11d
  00b1d	44 33 f7	 xor	 r14d, edi
  00b20	8b 3c 24	 mov	 edi, DWORD PTR tv2261[rsp]
  00b23	c1 ca 1b	 ror	 edx, 27
  00b26	33 bc 24 a0 00
	00 00		 xor	 edi, DWORD PTR tv2399[rsp]
  00b2d	41 8b c9	 mov	 ecx, r9d
  00b30	41 8b c1	 mov	 eax, r9d
  00b33	41 33 ca	 xor	 ecx, r10d
  00b36	41 23 c2	 and	 eax, r10d
  00b39	41 33 fc	 xor	 edi, r12d
  00b3c	41 23 c8	 and	 ecx, r8d
  00b3f	41 33 ff	 xor	 edi, r15d
  00b42	89 6c 24 28	 mov	 DWORD PTR tv585[rsp], ebp
  00b46	0b c8		 or	 ecx, eax
  00b48	41 89 6d 20	 mov	 DWORD PTR [r13+32], ebp
  00b4c	03 cd		 add	 ecx, ebp
  00b4e	03 cb		 add	 ecx, ebx
  00b50	41 c1 ca 02	 ror	 r10d, 2
  00b54	41 d1 c6	 rol	 r14d, 1
  00b57	8d 9c 11 dc bc
	1b 8f		 lea	 ebx, DWORD PTR [rcx+rdx-1894007588]
  00b5e	41 8b ca	 mov	 ecx, r10d
  00b61	41 8b c2	 mov	 eax, r10d
  00b64	41 33 cb	 xor	 ecx, r11d
  00b67	41 23 c3	 and	 eax, r11d
  00b6a	8b d3		 mov	 edx, ebx
  00b6c	41 23 c9	 and	 ecx, r9d
  00b6f	c1 ca 1b	 ror	 edx, 27
  00b72	44 89 74 24 30	 mov	 DWORD PTR tv1612[rsp], r14d
  00b77	0b c8		 or	 ecx, eax
  00b79	45 89 75 24	 mov	 DWORD PTR [r13+36], r14d
  00b7d	41 03 ce	 add	 ecx, r14d
  00b80	41 03 c8	 add	 ecx, r8d
  00b83	41 c1 cb 02	 ror	 r11d, 2
  00b87	d1 c7		 rol	 edi, 1
  00b89	89 7c 24 04	 mov	 DWORD PTR tv1619[rsp], edi
  00b8d	44 8d 84 11 dc
	bc 1b 8f	 lea	 r8d, DWORD PTR [rcx+rdx-1894007588]
  00b95	44 8b 7c 24 10	 mov	 r15d, DWORD PTR tv725[rsp]
  00b9a	41 89 7d 28	 mov	 DWORD PTR [r13+40], edi
  00b9e	44 8b 6c 24 08	 mov	 r13d, DWORD PTR tv1739[rsp]
  00ba3	44 33 ac 24 a8
	00 00 00	 xor	 r13d, DWORD PTR tv2385[rsp]
  00bab	44 33 7c 24 0c	 xor	 r15d, DWORD PTR tv2370[rsp]
  00bb0	41 8b c3	 mov	 eax, r11d
  00bb3	44 33 bc 24 a0
	00 00 00	 xor	 r15d, DWORD PTR tv2399[rsp]
  00bbb	23 c3		 and	 eax, ebx
  00bbd	44 33 ee	 xor	 r13d, esi
  00bc0	48 8b b4 24 90
	00 00 00	 mov	 rsi, QWORD PTR ctx$[rsp]
  00bc8	44 33 ed	 xor	 r13d, ebp
  00bcb	8b 6c 24 20	 mov	 ebp, DWORD PTR tv776[rsp]
  00bcf	33 6c 24 24	 xor	 ebp, DWORD PTR tv2355[rsp]
  00bd3	45 33 fe	 xor	 r15d, r14d
  00bd6	41 8b cb	 mov	 ecx, r11d
  00bd9	33 ac 24 a8 00
	00 00		 xor	 ebp, DWORD PTR tv2385[rsp]
  00be0	33 cb		 xor	 ecx, ebx
  00be2	41 8b d0	 mov	 edx, r8d
  00be5	41 23 ca	 and	 ecx, r10d
  00be8	c1 ca 1b	 ror	 edx, 27
  00beb	33 ef		 xor	 ebp, edi
  00bed	0b c8		 or	 ecx, eax
  00bef	41 8b c0	 mov	 eax, r8d
  00bf2	03 cf		 add	 ecx, edi
  00bf4	41 03 c9	 add	 ecx, r9d
  00bf7	c1 cb 02	 ror	 ebx, 2
  00bfa	41 d1 c5	 rol	 r13d, 1
  00bfd	44 8d 8c 11 dc
	bc 1b 8f	 lea	 r9d, DWORD PTR [rcx+rdx-1894007588]
  00c05	23 c3		 and	 eax, ebx
  00c07	44 89 6e 2c	 mov	 DWORD PTR [rsi+44], r13d
  00c0b	41 8b c8	 mov	 ecx, r8d
  00c0e	41 8b d1	 mov	 edx, r9d
  00c11	44 89 6c 24 1c	 mov	 DWORD PTR tv565[rsp], r13d
  00c16	33 cb		 xor	 ecx, ebx
  00c18	c1 ca 1b	 ror	 edx, 27
  00c1b	41 23 cb	 and	 ecx, r11d
  00c1e	0b c8		 or	 ecx, eax
  00c20	41 03 cd	 add	 ecx, r13d
  00c23	41 03 ca	 add	 ecx, r10d
  00c26	41 c1 c8 02	 ror	 r8d, 2
  00c2a	41 d1 c7	 rol	 r15d, 1
  00c2d	44 8d 94 11 dc
	bc 1b 8f	 lea	 r10d, DWORD PTR [rcx+rdx-1894007588]
  00c35	44 89 7e 30	 mov	 DWORD PTR [rsi+48], r15d
  00c39	41 8b c0	 mov	 eax, r8d
  00c3c	41 23 c1	 and	 eax, r9d
  00c3f	41 8b d2	 mov	 edx, r10d
  00c42	41 8b c8	 mov	 ecx, r8d
  00c45	41 33 c9	 xor	 ecx, r9d
  00c48	c1 ca 1b	 ror	 edx, 27
  00c4b	44 89 7c 24 34	 mov	 DWORD PTR tv1168[rsp], r15d
  00c50	23 cb		 and	 ecx, ebx
  00c52	0b c8		 or	 ecx, eax
  00c54	41 03 cf	 add	 ecx, r15d
  00c57	41 03 cb	 add	 ecx, r11d
  00c5a	41 c1 c9 02	 ror	 r9d, 2
  00c5e	d1 c5		 rol	 ebp, 1
  00c60	44 8d 9c 11 dc
	bc 1b 8f	 lea	 r11d, DWORD PTR [rcx+rdx-1894007588]
  00c68	89 6e 34	 mov	 DWORD PTR [rsi+52], ebp

; 178  :     five_cycle(v, maj, 0x8f1bbcdc,  55);

  00c6b	8b b4 24 98 00
	00 00		 mov	 esi, DWORD PTR tv518[rsp]
  00c72	33 74 24 14	 xor	 esi, DWORD PTR tv2298[rsp]
  00c76	41 8b c1	 mov	 eax, r9d
  00c79	41 8b c9	 mov	 ecx, r9d
  00c7c	33 74 24 0c	 xor	 esi, DWORD PTR tv2370[rsp]
  00c80	41 33 ca	 xor	 ecx, r10d
  00c83	41 23 c2	 and	 eax, r10d
  00c86	41 23 c8	 and	 ecx, r8d
  00c89	41 33 f5	 xor	 esi, r13d
  00c8c	41 8b d3	 mov	 edx, r11d
  00c8f	0b c8		 or	 ecx, eax
  00c91	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00c99	c1 ca 1b	 ror	 edx, 27
  00c9c	03 cd		 add	 ecx, ebp
  00c9e	89 ac 24 a0 00
	00 00		 mov	 DWORD PTR tv1103[rsp], ebp
  00ca5	03 cb		 add	 ecx, ebx
  00ca7	41 c1 ca 02	 ror	 r10d, 2
  00cab	d1 c6		 rol	 esi, 1
  00cad	8d bc 11 dc bc
	1b 8f		 lea	 edi, DWORD PTR [rcx+rdx-1894007588]
  00cb4	89 b4 24 a8 00
	00 00		 mov	 DWORD PTR tv1034[rsp], esi
  00cbb	89 70 38	 mov	 DWORD PTR [rax+56], esi
  00cbe	8b d7		 mov	 edx, edi
  00cc0	c1 ca 1b	 ror	 edx, 27
  00cc3	41 8b c2	 mov	 eax, r10d
  00cc6	41 8b ca	 mov	 ecx, r10d
  00cc9	41 33 cb	 xor	 ecx, r11d
  00ccc	41 23 c3	 and	 eax, r11d
  00ccf	41 23 c9	 and	 ecx, r9d
  00cd2	0b c8		 or	 ecx, eax
  00cd4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00cdc	03 ce		 add	 ecx, esi
  00cde	41 03 c8	 add	 ecx, r8d
  00ce1	41 c1 cb 02	 ror	 r11d, 2
  00ce5	45 8b c7	 mov	 r8d, r15d
  00ce8	44 33 44 24 18	 xor	 r8d, DWORD PTR tv1875[rsp]
  00ced	8d 9c 11 dc bc
	1b 8f		 lea	 ebx, DWORD PTR [rcx+rdx-1894007588]
  00cf4	41 8b cb	 mov	 ecx, r11d
  00cf7	44 33 44 24 24	 xor	 r8d, DWORD PTR tv2355[rsp]
  00cfc	33 cf		 xor	 ecx, edi
  00cfe	8b d3		 mov	 edx, ebx
  00d00	41 23 ca	 and	 ecx, r10d
  00d03	45 33 c4	 xor	 r8d, r12d
  00d06	44 8b 24 24	 mov	 r12d, DWORD PTR tv2261[rsp]
  00d0a	44 33 64 24 14	 xor	 r12d, DWORD PTR tv2298[rsp]
  00d0f	41 d1 c0	 rol	 r8d, 1
  00d12	c1 ca 1b	 ror	 edx, 27
  00d15	44 33 e5	 xor	 r12d, ebp
  00d18	44 89 40 3c	 mov	 DWORD PTR [rax+60], r8d
  00d1c	41 8b c3	 mov	 eax, r11d
  00d1f	44 33 64 24 28	 xor	 r12d, DWORD PTR tv585[rsp]
  00d24	23 c7		 and	 eax, edi
  00d26	8b ee		 mov	 ebp, esi
  00d28	33 6c 24 08	 xor	 ebp, DWORD PTR tv1739[rsp]
  00d2c	48 8b b4 24 90
	00 00 00	 mov	 rsi, QWORD PTR ctx$[rsp]
  00d34	0b c8		 or	 ecx, eax
  00d36	33 6c 24 18	 xor	 ebp, DWORD PTR tv1875[rsp]
  00d3a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00d42	41 03 c8	 add	 ecx, r8d
  00d45	41 03 c9	 add	 ecx, r9d
  00d48	c1 cf 02	 ror	 edi, 2
  00d4b	41 d1 c4	 rol	 r12d, 1
  00d4e	44 8d 8c 11 dc
	bc 1b 8f	 lea	 r9d, DWORD PTR [rcx+rdx-1894007588]
  00d56	41 33 ee	 xor	 ebp, r14d
  00d59	44 8b 74 24 10	 mov	 r14d, DWORD PTR tv725[rsp]
  00d5e	44 33 34 24	 xor	 r14d, DWORD PTR tv2261[rsp]
  00d62	44 89 60 40	 mov	 DWORD PTR [rax+64], r12d
  00d66	8b cb		 mov	 ecx, ebx
  00d68	33 cf		 xor	 ecx, edi
  00d6a	45 33 f0	 xor	 r14d, r8d
  00d6d	8b c3		 mov	 eax, ebx
  00d6f	44 33 74 24 04	 xor	 r14d, DWORD PTR tv1619[rsp]
  00d74	41 23 cb	 and	 ecx, r11d
  00d77	23 c7		 and	 eax, edi
  00d79	0b c8		 or	 ecx, eax
  00d7b	41 8b d1	 mov	 edx, r9d
  00d7e	44 89 44 24 24	 mov	 DWORD PTR tv2112[rsp], r8d
  00d83	41 03 cc	 add	 ecx, r12d
  00d86	c1 ca 1b	 ror	 edx, 27
  00d89	44 89 64 24 14	 mov	 DWORD PTR tv1479[rsp], r12d
  00d8e	41 03 ca	 add	 ecx, r10d
  00d91	c1 cb 02	 ror	 ebx, 2
  00d94	d1 c5		 rol	 ebp, 1
  00d96	44 8d 94 11 dc
	bc 1b 8f	 lea	 r10d, DWORD PTR [rcx+rdx-1894007588]
  00d9e	8b cb		 mov	 ecx, ebx
  00da0	8b c3		 mov	 eax, ebx
  00da2	41 33 c9	 xor	 ecx, r9d
  00da5	41 23 c1	 and	 eax, r9d
  00da8	41 8b d2	 mov	 edx, r10d
  00dab	23 cf		 and	 ecx, edi
  00dad	c1 ca 1b	 ror	 edx, 27
  00db0	89 6c 24 0c	 mov	 DWORD PTR tv870[rsp], ebp
  00db4	0b c8		 or	 ecx, eax
  00db6	89 6e 44	 mov	 DWORD PTR [rsi+68], ebp
  00db9	03 cd		 add	 ecx, ebp
  00dbb	41 03 cb	 add	 ecx, r11d
  00dbe	41 c1 c9 02	 ror	 r9d, 2
  00dc2	41 d1 c6	 rol	 r14d, 1
  00dc5	44 8d 9c 11 dc
	bc 1b 8f	 lea	 r11d, DWORD PTR [rcx+rdx-1894007588]
  00dcd	41 8b c9	 mov	 ecx, r9d
  00dd0	44 89 34 24	 mov	 DWORD PTR tv2036[rsp], r14d
  00dd4	41 8b d3	 mov	 edx, r11d
  00dd7	44 89 76 48	 mov	 DWORD PTR [rsi+72], r14d
  00ddb	c1 ca 1b	 ror	 edx, 27
  00dde	41 33 ca	 xor	 ecx, r10d
  00de1	23 cb		 and	 ecx, ebx
  00de3	41 8b c1	 mov	 eax, r9d

; 179  : 
; 180  :     five_cycle(v, parity, 0xca62c1d6,  60);

  00de6	41 8b f4	 mov	 esi, r12d
  00de9	41 23 c2	 and	 eax, r10d
  00dec	0b c8		 or	 ecx, eax
  00dee	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00df6	41 03 ce	 add	 ecx, r14d
  00df9	03 cf		 add	 ecx, edi
  00dfb	8b 7c 24 20	 mov	 edi, DWORD PTR tv776[rsp]
  00dff	41 c1 ca 02	 ror	 r10d, 2
  00e03	33 f7		 xor	 esi, edi
  00e05	44 8d 84 11 dc
	bc 1b 8f	 lea	 r8d, DWORD PTR [rcx+rdx-1894007588]
  00e0d	33 74 24 08	 xor	 esi, DWORD PTR tv1739[rsp]
  00e11	41 8b c8	 mov	 ecx, r8d
  00e14	41 33 f5	 xor	 esi, r13d
  00e17	44 8b ac 24 98
	00 00 00	 mov	 r13d, DWORD PTR tv518[rsp]
  00e1f	44 33 6c 24 10	 xor	 r13d, DWORD PTR tv725[rsp]
  00e24	d1 c6		 rol	 esi, 1
  00e26	c1 c9 1b	 ror	 ecx, 27
  00e29	89 70 4c	 mov	 DWORD PTR [rax+76], esi
  00e2c	45 33 ef	 xor	 r13d, r15d
  00e2f	41 8b c1	 mov	 eax, r9d
  00e32	41 33 c2	 xor	 eax, r10d
  00e35	44 33 ed	 xor	 r13d, ebp
  00e38	8b ac 24 98 00
	00 00		 mov	 ebp, DWORD PTR tv518[rsp]
  00e3f	33 ac 24 a8 00
	00 00		 xor	 ebp, DWORD PTR tv1034[rsp]
  00e46	41 33 c3	 xor	 eax, r11d
  00e49	45 8b fe	 mov	 r15d, r14d
  00e4c	03 c6		 add	 eax, esi
  00e4e	44 33 ff	 xor	 r15d, edi
  00e51	8b 7c 24 2c	 mov	 edi, DWORD PTR tv2014[rsp]
  00e55	44 33 bc 24 a0
	00 00 00	 xor	 r15d, DWORD PTR tv1103[rsp]
  00e5d	03 c3		 add	 eax, ebx
  00e5f	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR ctx$[rsp]
  00e67	8d 94 08 d6 c1
	62 ca		 lea	 edx, DWORD PTR [rax+rcx-899497514]
  00e6e	41 c1 cb 02	 ror	 r11d, 2
  00e72	41 d1 c5	 rol	 r13d, 1
  00e75	44 33 ff	 xor	 r15d, edi
  00e78	33 ee		 xor	 ebp, esi
  00e7a	41 8b c2	 mov	 eax, r10d
  00e7d	41 33 c3	 xor	 eax, r11d
  00e80	8b ca		 mov	 ecx, edx
  00e82	44 89 6b 50	 mov	 DWORD PTR [rbx+80], r13d
  00e86	41 33 c0	 xor	 eax, r8d
  00e89	c1 c9 1b	 ror	 ecx, 27
  00e8c	89 74 24 20	 mov	 DWORD PTR tv2035[rsp], esi
  00e90	41 03 c5	 add	 eax, r13d
  00e93	44 89 6c 24 10	 mov	 DWORD PTR tv651[rsp], r13d
  00e98	41 03 c1	 add	 eax, r9d
  00e9b	41 c1 c8 02	 ror	 r8d, 2
  00e9f	41 d1 c7	 rol	 r15d, 1
  00ea2	44 8d 8c 08 d6
	c1 62 ca	 lea	 r9d, DWORD PTR [rax+rcx-899497514]
  00eaa	8b c2		 mov	 eax, edx
  00eac	44 89 7b 54	 mov	 DWORD PTR [rbx+84], r15d
  00eb0	8b 5c 24 28	 mov	 ebx, DWORD PTR tv585[rsp]
  00eb4	41 33 c3	 xor	 eax, r11d
  00eb7	41 8b c9	 mov	 ecx, r9d
  00eba	41 33 c0	 xor	 eax, r8d
  00ebd	c1 c9 1b	 ror	 ecx, 27
  00ec0	33 eb		 xor	 ebp, ebx
  00ec2	41 03 c7	 add	 eax, r15d
  00ec5	44 89 7c 24 08	 mov	 DWORD PTR tv635[rsp], r15d
  00eca	41 03 c2	 add	 eax, r10d
  00ecd	c1 ca 02	 ror	 edx, 2
  00ed0	d1 c5		 rol	 ebp, 1
  00ed2	44 8d 94 08 d6
	c1 62 ca	 lea	 r10d, DWORD PTR [rax+rcx-899497514]
  00eda	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00ee2	89 ac 24 98 00
	00 00		 mov	 DWORD PTR tv518[rsp], ebp
  00ee9	89 68 58	 mov	 DWORD PTR [rax+88], ebp
  00eec	8b c2		 mov	 eax, edx
  00eee	41 8b ca	 mov	 ecx, r10d
  00ef1	41 33 c1	 xor	 eax, r9d
  00ef4	c1 c9 1b	 ror	 ecx, 27
  00ef7	41 33 c0	 xor	 eax, r8d
  00efa	03 c5		 add	 eax, ebp
  00efc	41 8b ed	 mov	 ebp, r13d
  00eff	33 6c 24 24	 xor	 ebp, DWORD PTR tv2112[rsp]
  00f03	41 03 c3	 add	 eax, r11d
  00f06	41 c1 c9 02	 ror	 r9d, 2
  00f0a	33 ef		 xor	 ebp, edi
  00f0c	44 8d 9c 08 d6
	c1 62 ca	 lea	 r11d, DWORD PTR [rax+rcx-899497514]
  00f14	8b 7c 24 30	 mov	 edi, DWORD PTR tv1612[rsp]
  00f18	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]

; 181  :     five_cycle(v, parity, 0xca62c1d6,  65);

  00f20	33 b4 24 a0 00
	00 00		 xor	 esi, DWORD PTR tv1103[rsp]
  00f27	33 74 24 1c	 xor	 esi, DWORD PTR tv565[rsp]
  00f2b	33 ef		 xor	 ebp, edi
  00f2d	45 33 e7	 xor	 r12d, r15d
  00f30	44 33 64 24 04	 xor	 r12d, DWORD PTR tv1619[rsp]
  00f35	d1 c5		 rol	 ebp, 1
  00f37	41 8b cb	 mov	 ecx, r11d
  00f3a	89 68 1c	 mov	 DWORD PTR [rax+28], ebp
  00f3d	c1 c9 1b	 ror	 ecx, 27
  00f40	44 33 e3	 xor	 r12d, ebx
  00f43	8b 9c 24 98 00
	00 00		 mov	 ebx, DWORD PTR tv518[rsp]
  00f4a	8b c2		 mov	 eax, edx
  00f4c	89 6c 24 18	 mov	 DWORD PTR tv569[rsp], ebp
  00f50	33 5c 24 0c	 xor	 ebx, DWORD PTR tv870[rsp]
  00f54	41 33 c1	 xor	 eax, r9d
  00f57	33 5c 24 1c	 xor	 ebx, DWORD PTR tv565[rsp]
  00f5b	41 33 c2	 xor	 eax, r10d
  00f5e	03 c5		 add	 eax, ebp
  00f60	33 df		 xor	 ebx, edi
  00f62	41 8b fe	 mov	 edi, r14d
  00f65	33 7c 24 34	 xor	 edi, DWORD PTR tv1168[rsp]
  00f69	41 03 c0	 add	 eax, r8d
  00f6c	41 c1 ca 02	 ror	 r10d, 2
  00f70	44 8d 84 08 d6
	c1 62 ca	 lea	 r8d, DWORD PTR [rax+rcx-899497514]
  00f78	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00f80	41 d1 c4	 rol	 r12d, 1
  00f83	44 89 60 20	 mov	 DWORD PTR [rax+32], r12d
  00f87	33 fd		 xor	 edi, ebp
  00f89	41 8b c1	 mov	 eax, r9d
  00f8c	33 7c 24 04	 xor	 edi, DWORD PTR tv1619[rsp]
  00f90	41 33 c2	 xor	 eax, r10d
  00f93	41 33 f4	 xor	 esi, r12d
  00f96	41 33 c3	 xor	 eax, r11d
  00f99	41 8b c8	 mov	 ecx, r8d
  00f9c	44 89 64 24 28	 mov	 DWORD PTR tv1606[rsp], r12d
  00fa1	41 03 c4	 add	 eax, r12d
  00fa4	4c 8b a4 24 90
	00 00 00	 mov	 r12, QWORD PTR ctx$[rsp]
  00fac	c1 c9 1b	 ror	 ecx, 27
  00faf	03 c2		 add	 eax, edx
  00fb1	41 c1 cb 02	 ror	 r11d, 2
  00fb5	d1 c3		 rol	 ebx, 1
  00fb7	8d 94 08 d6 c1
	62 ca		 lea	 edx, DWORD PTR [rax+rcx-899497514]
  00fbe	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00fc6	89 5c 24 30	 mov	 DWORD PTR tv579[rsp], ebx
  00fca	89 58 24	 mov	 DWORD PTR [rax+36], ebx
  00fcd	41 8b c2	 mov	 eax, r10d
  00fd0	8b ca		 mov	 ecx, edx
  00fd2	41 33 c3	 xor	 eax, r11d
  00fd5	c1 c9 1b	 ror	 ecx, 27
  00fd8	41 33 c0	 xor	 eax, r8d
  00fdb	03 c3		 add	 eax, ebx
  00fdd	41 03 c1	 add	 eax, r9d
  00fe0	41 c1 c8 02	 ror	 r8d, 2
  00fe4	d1 c7		 rol	 edi, 1
  00fe6	44 8d 8c 08 d6
	c1 62 ca	 lea	 r9d, DWORD PTR [rax+rcx-899497514]
  00fee	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00ff6	89 7c 24 2c	 mov	 DWORD PTR tv584[rsp], edi
  00ffa	89 78 28	 mov	 DWORD PTR [rax+40], edi
  00ffd	8b c2		 mov	 eax, edx
  00fff	41 8b c9	 mov	 ecx, r9d
  01002	41 33 c3	 xor	 eax, r11d
  01005	c1 c9 1b	 ror	 ecx, 27
  01008	41 33 c0	 xor	 eax, r8d
  0100b	03 c7		 add	 eax, edi
  0100d	41 03 c2	 add	 eax, r10d
  01010	c1 ca 02	 ror	 edx, 2
  01013	d1 c6		 rol	 esi, 1
  01015	44 8d 94 08 d6
	c1 62 ca	 lea	 r10d, DWORD PTR [rax+rcx-899497514]
  0101d	8b c2		 mov	 eax, edx
  0101f	89 74 24 04	 mov	 DWORD PTR tv2010[rsp], esi
  01023	41 33 c1	 xor	 eax, r9d
  01026	41 8b ca	 mov	 ecx, r10d
  01029	41 89 74 24 2c	 mov	 DWORD PTR [r12+44], esi
  0102e	41 33 c0	 xor	 eax, r8d
  01031	c1 c9 1b	 ror	 ecx, 27
  01034	03 c6		 add	 eax, esi
  01036	41 03 c3	 add	 eax, r11d
  01039	41 c1 c9 02	 ror	 r9d, 2
  0103d	44 8d 9c 08 d6
	c1 62 ca	 lea	 r11d, DWORD PTR [rax+rcx-899497514]
  01045	8b c2		 mov	 eax, edx
  01047	45 8b f5	 mov	 r14d, r13d

; 182  :     five_cycle(v, parity, 0xca62c1d6,  70);

  0104a	44 8b ac 24 98
	00 00 00	 mov	 r13d, DWORD PTR tv518[rsp]
  01052	44 33 b4 24 a8
	00 00 00	 xor	 r14d, DWORD PTR tv1034[rsp]
  0105a	41 33 c1	 xor	 eax, r9d
  0105d	41 8b cb	 mov	 ecx, r11d
  01060	44 33 74 24 34	 xor	 r14d, DWORD PTR tv1168[rsp]
  01065	41 33 c2	 xor	 eax, r10d
  01068	44 33 f3	 xor	 r14d, ebx
  0106b	41 d1 c6	 rol	 r14d, 1
  0106e	c1 c9 1b	 ror	 ecx, 27
  01071	41 03 c6	 add	 eax, r14d
  01074	45 89 74 24 30	 mov	 DWORD PTR [r12+48], r14d
  01079	44 8b 64 24 24	 mov	 r12d, DWORD PTR tv2112[rsp]
  0107e	41 03 c0	 add	 eax, r8d
  01081	44 8b 44 24 14	 mov	 r8d, DWORD PTR tv1479[rsp]
  01086	45 33 fc	 xor	 r15d, r12d
  01089	44 33 bc 24 a0
	00 00 00	 xor	 r15d, DWORD PTR tv1103[rsp]
  01091	8d 9c 08 d6 c1
	62 ca		 lea	 ebx, DWORD PTR [rax+rcx-899497514]
  01098	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  010a0	41 c1 ca 02	 ror	 r10d, 2
  010a4	44 33 ff	 xor	 r15d, edi
  010a7	45 33 e8	 xor	 r13d, r8d
  010aa	44 33 ac 24 a8
	00 00 00	 xor	 r13d, DWORD PTR tv1034[rsp]
  010b2	41 d1 c7	 rol	 r15d, 1
  010b5	8b cb		 mov	 ecx, ebx
  010b7	44 89 78 34	 mov	 DWORD PTR [rax+52], r15d
  010bb	c1 c9 1b	 ror	 ecx, 27
  010be	44 33 ee	 xor	 r13d, esi
  010c1	48 8b b4 24 90
	00 00 00	 mov	 rsi, QWORD PTR ctx$[rsp]
  010c9	41 8b c1	 mov	 eax, r9d
  010cc	41 33 c2	 xor	 eax, r10d
  010cf	41 33 c3	 xor	 eax, r11d
  010d2	41 03 c7	 add	 eax, r15d
  010d5	03 c2		 add	 eax, edx
  010d7	41 c1 cb 02	 ror	 r11d, 2
  010db	41 d1 c5	 rol	 r13d, 1
  010de	8d bc 08 d6 c1
	62 ca		 lea	 edi, DWORD PTR [rax+rcx-899497514]
  010e5	41 8b c2	 mov	 eax, r10d
  010e8	41 8b d6	 mov	 edx, r14d
  010eb	33 54 24 0c	 xor	 edx, DWORD PTR tv870[rsp]
  010ef	41 33 c3	 xor	 eax, r11d
  010f2	8b cf		 mov	 ecx, edi
  010f4	33 c3		 xor	 eax, ebx
  010f6	41 33 d4	 xor	 edx, r12d
  010f9	44 8b 24 24	 mov	 r12d, DWORD PTR tv2036[rsp]
  010fd	41 03 c5	 add	 eax, r13d
  01100	c1 c9 1b	 ror	 ecx, 27
  01103	33 d5		 xor	 edx, ebp
  01105	41 03 c1	 add	 eax, r9d
  01108	c1 cb 02	 ror	 ebx, 2
  0110b	d1 c2		 rol	 edx, 1
  0110d	44 8d 8c 08 d6
	c1 62 ca	 lea	 r9d, DWORD PTR [rax+rcx-899497514]
  01115	45 33 e0	 xor	 r12d, r8d
  01118	8b c7		 mov	 eax, edi
  0111a	41 33 c3	 xor	 eax, r11d
  0111d	45 33 e7	 xor	 r12d, r15d
  01120	41 8b c9	 mov	 ecx, r9d
  01123	44 33 64 24 28	 xor	 r12d, DWORD PTR tv1606[rsp]
  01128	33 c3		 xor	 eax, ebx
  0112a	c1 c9 1b	 ror	 ecx, 27
  0112d	03 c2		 add	 eax, edx
  0112f	44 89 6e 38	 mov	 DWORD PTR [rsi+56], r13d
  01133	89 56 3c	 mov	 DWORD PTR [rsi+60], edx
  01136	41 03 c2	 add	 eax, r10d
  01139	4c 8b 94 24 90
	00 00 00	 mov	 r10, QWORD PTR ctx$[rsp]
  01141	c1 cf 02	 ror	 edi, 2
  01144	8d b4 08 d6 c1
	62 ca		 lea	 esi, DWORD PTR [rax+rcx-899497514]
  0114b	41 d1 c4	 rol	 r12d, 1
  0114e	8b c7		 mov	 eax, edi
  01150	41 33 c1	 xor	 eax, r9d
  01153	8b ce		 mov	 ecx, esi
  01155	45 8b c5	 mov	 r8d, r13d
  01158	33 c3		 xor	 eax, ebx
  0115a	c1 c9 1b	 ror	 ecx, 27
  0115d	45 89 62 40	 mov	 DWORD PTR [r10+64], r12d
  01161	41 03 c4	 add	 eax, r12d
  01164	41 03 c3	 add	 eax, r11d
  01167	41 c1 c9 02	 ror	 r9d, 2
  0116b	44 33 44 24 20	 xor	 r8d, DWORD PTR tv2035[rsp]
  01170	8d ac 08 d6 c1
	62 ca		 lea	 ebp, DWORD PTR [rax+rcx-899497514]
  01177	44 33 44 24 0c	 xor	 r8d, DWORD PTR tv870[rsp]
  0117c	8b c7		 mov	 eax, edi
  0117e	8b cd		 mov	 ecx, ebp
  01180	44 33 44 24 30	 xor	 r8d, DWORD PTR tv579[rsp]
  01185	41 33 c1	 xor	 eax, r9d
  01188	33 c6		 xor	 eax, esi
  0118a	41 d1 c0	 rol	 r8d, 1
  0118d	c1 c9 1b	 ror	 ecx, 27
  01190	41 03 c0	 add	 eax, r8d
  01193	45 89 42 44	 mov	 DWORD PTR [r10+68], r8d

; 183  :     five_cycle(v, parity, 0xca62c1d6,  75);

  01197	44 8b 54 24 10	 mov	 r10d, DWORD PTR tv651[rsp]
  0119c	44 33 14 24	 xor	 r10d, DWORD PTR tv2036[rsp]
  011a0	03 c3		 add	 eax, ebx
  011a2	c1 ce 02	 ror	 esi, 2
  011a5	8d 9c 08 d6 c1
	62 ca		 lea	 ebx, DWORD PTR [rax+rcx-899497514]
  011ac	44 33 d2	 xor	 r10d, edx
  011af	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR ctx$[rsp]
  011b7	44 33 54 24 2c	 xor	 r10d, DWORD PTR tv584[rsp]
  011bc	41 8b c1	 mov	 eax, r9d
  011bf	8b cb		 mov	 ecx, ebx
  011c1	33 c6		 xor	 eax, esi
  011c3	41 d1 c2	 rol	 r10d, 1
  011c6	c1 c9 1b	 ror	 ecx, 27
  011c9	33 c5		 xor	 eax, ebp
  011cb	44 89 52 48	 mov	 DWORD PTR [rdx+72], r10d
  011cf	41 03 c2	 add	 eax, r10d
  011d2	03 c7		 add	 eax, edi
  011d4	8b 7c 24 08	 mov	 edi, DWORD PTR tv635[rsp]
  011d8	c1 cd 02	 ror	 ebp, 2
  011db	44 8d 9c 08 d6
	c1 62 ca	 lea	 r11d, DWORD PTR [rax+rcx-899497514]
  011e3	44 33 e7	 xor	 r12d, edi
  011e6	44 33 d7	 xor	 r10d, edi
  011e9	44 33 64 24 20	 xor	 r12d, DWORD PTR tv2035[rsp]
  011ee	45 33 d7	 xor	 r10d, r15d
  011f1	41 8b cb	 mov	 ecx, r11d
  011f4	44 33 64 24 04	 xor	 r12d, DWORD PTR tv2010[rsp]
  011f9	44 33 54 24 18	 xor	 r10d, DWORD PTR tv569[rsp]
  011fe	8b c6		 mov	 eax, esi
  01200	33 c5		 xor	 eax, ebp
  01202	41 d1 c4	 rol	 r12d, 1
  01205	c1 c9 1b	 ror	 ecx, 27
  01208	33 c3		 xor	 eax, ebx
  0120a	44 89 62 4c	 mov	 DWORD PTR [rdx+76], r12d
  0120e	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR tv518[rsp]
  01215	33 54 24 10	 xor	 edx, DWORD PTR tv651[rsp]
  01219	41 03 c4	 add	 eax, r12d
  0121c	41 03 c1	 add	 eax, r9d
  0121f	41 33 d6	 xor	 edx, r14d
  01222	4c 8b b4 24 90
	00 00 00	 mov	 r14, QWORD PTR ctx$[rsp]
  0122a	44 8d 8c 08 d6
	c1 62 ca	 lea	 r9d, DWORD PTR [rax+rcx-899497514]
  01232	41 33 d0	 xor	 edx, r8d
  01235	c1 cb 02	 ror	 ebx, 2
  01238	d1 c2		 rol	 edx, 1
  0123a	41 8b c3	 mov	 eax, r11d
  0123d	41 8b c9	 mov	 ecx, r9d
  01240	33 c5		 xor	 eax, ebp
  01242	c1 c9 1b	 ror	 ecx, 27
  01245	41 89 56 50	 mov	 DWORD PTR [r14+80], edx
  01249	33 c3		 xor	 eax, ebx
  0124b	03 c2		 add	 eax, edx
  0124d	03 c6		 add	 eax, esi
  0124f	41 c1 cb 02	 ror	 r11d, 2
  01253	41 d1 c2	 rol	 r10d, 1
  01256	44 8d 84 08 d6
	c1 62 ca	 lea	 r8d, DWORD PTR [rax+rcx-899497514]
  0125e	45 89 56 54	 mov	 DWORD PTR [r14+84], r10d
  01262	41 8b c3	 mov	 eax, r11d
  01265	41 33 c1	 xor	 eax, r9d
  01268	41 8b c8	 mov	 ecx, r8d
  0126b	33 c3		 xor	 eax, ebx
  0126d	c1 c9 1b	 ror	 ecx, 27
  01270	41 03 c2	 add	 eax, r10d
  01273	44 8b 94 24 98
	00 00 00	 mov	 r10d, DWORD PTR tv518[rsp]
  0127b	45 33 d5	 xor	 r10d, r13d
  0127e	03 c5		 add	 eax, ebp
  01280	41 c1 c9 02	 ror	 r9d, 2
  01284	45 33 d4	 xor	 r10d, r12d
  01287	8d 94 08 d6 c1
	62 ca		 lea	 edx, DWORD PTR [rax+rcx-899497514]
  0128e	44 33 54 24 28	 xor	 r10d, DWORD PTR tv1606[rsp]
  01293	8b ca		 mov	 ecx, edx
  01295	41 d1 c2	 rol	 r10d, 1
  01298	45 89 56 58	 mov	 DWORD PTR [r14+88], r10d

; 184  : 
; 185  : #ifdef ARRAY
; 186  :     ctx->hash[0] += v[0]; ctx->hash[1] += v[1];
; 187  :     ctx->hash[2] += v[2]; ctx->hash[3] += v[3];
; 188  :     ctx->hash[4] += v[4];
; 189  : #else
; 190  :     ctx->hash[0] += v0; ctx->hash[1] += v1;

  0129c	41 01 56 0c	 add	 DWORD PTR [r14+12], edx

; 191  :     ctx->hash[2] += v2; ctx->hash[3] += v3;

  012a0	45 01 4e 14	 add	 DWORD PTR [r14+20], r9d
  012a4	c1 c9 1b	 ror	 ecx, 27
  012a7	41 8b c3	 mov	 eax, r11d
  012aa	41 33 c1	 xor	 eax, r9d
  012ad	41 33 c0	 xor	 eax, r8d
  012b0	41 03 c2	 add	 eax, r10d
  012b3	03 c3		 add	 eax, ebx
  012b5	8d 84 08 d6 c1
	62 ca		 lea	 eax, DWORD PTR [rax+rcx-899497514]
  012bc	41 01 46 08	 add	 DWORD PTR [r14+8], eax
  012c0	41 c1 c8 02	 ror	 r8d, 2
  012c4	45 01 46 10	 add	 DWORD PTR [r14+16], r8d

; 192  :     ctx->hash[4] += v4;

  012c8	45 01 5e 18	 add	 DWORD PTR [r14+24], r11d

; 193  : #endif
; 194  : }

  012cc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  012d0	41 5f		 pop	 r15
  012d2	41 5e		 pop	 r14
  012d4	41 5d		 pop	 r13
  012d6	41 5c		 pop	 r12
  012d8	5f		 pop	 rdi
  012d9	5e		 pop	 rsi
  012da	5d		 pop	 rbp
  012db	5b		 pop	 rbx
  012dc	c3		 ret	 0
sha1_compile ENDP
PUBLIC	sha1_end
;	COMDAT pdata
pdata	SEGMENT
$pdata$sha1_end DD imagerel $LN20
	DD	imagerel $LN20+293
	DD	imagerel $unwind$sha1_end
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sha1_end DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT sha1_end
_TEXT	SEGMENT
hval$ = 48
ctx$ = 56
sha1_end PROC						; COMDAT

; 231  : {   sha1_32t    i = (sha1_32t)(ctx->count[0] & SHA1_MASK);

$LN20:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	44 8b 0a	 mov	 r9d, DWORD PTR [rdx]
  00012	48 8b da	 mov	 rbx, rdx

; 232  : 
; 233  :     /* put bytes in the buffer in an order in which references to   */
; 234  :     /* 32-bit words will put bytes with lower addresses into the    */
; 235  :     /* top of 32 bit words on BOTH big and little endian machines   */
; 236  :     bsw_32(ctx->wbuf, (i + 3) >> 2);

  00015	33 ff		 xor	 edi, edi
  00017	41 83 e1 3f	 and	 r9d, 63			; 0000003fH
  0001b	48 8b f1	 mov	 rsi, rcx
  0001e	41 8d 41 03	 lea	 eax, DWORD PTR [r9+3]
  00022	c1 e8 02	 shr	 eax, 2
  00025	8b d0		 mov	 edx, eax
  00027	48 3b d7	 cmp	 rdx, rdi
  0002a	74 2c		 je	 SHORT $LN16@sha1_end

; 231  : {   sha1_32t    i = (sha1_32t)(ctx->count[0] & SHA1_MASK);

  0002c	4c 8d 44 83 1c	 lea	 r8, QWORD PTR [rbx+rax*4+28]
$LL10@sha1_end:

; 232  : 
; 233  :     /* put bytes in the buffer in an order in which references to   */
; 234  :     /* 32-bit words will put bytes with lower addresses into the    */
; 235  :     /* top of 32 bit words on BOTH big and little endian machines   */
; 236  :     bsw_32(ctx->wbuf, (i + 3) >> 2);

  00031	49 83 e8 04	 sub	 r8, 4
  00035	48 ff ca	 dec	 rdx
  00038	41 8b 00	 mov	 eax, DWORD PTR [r8]
  0003b	8b c8		 mov	 ecx, eax
  0003d	c1 c9 18	 ror	 ecx, 24
  00040	81 e1 ff 00 ff
	00		 and	 ecx, 16711935		; 00ff00ffH
  00046	c1 c8 08	 ror	 eax, 8
  00049	25 00 ff 00 ff	 and	 eax, -16711936		; ff00ff00H
  0004e	0b c8		 or	 ecx, eax
  00050	41 89 08	 mov	 DWORD PTR [r8], ecx
  00053	48 3b d7	 cmp	 rdx, rdi
  00056	75 d9		 jne	 SHORT $LL10@sha1_end
$LN16@sha1_end:

; 237  : 
; 238  :     /* we now need to mask valid bytes and add the padding which is */
; 239  :     /* a single 1 bit and as many zero bits as necessary. Note that */
; 240  :     /* we can always add the first padding byte here because the    */
; 241  :     /* buffer always has at least one empty slot                    */
; 242  :     ctx->wbuf[i >> 2] &= 0xffffff80 << 8 * (~i & 3);

  00058	41 8b c9	 mov	 ecx, r9d
  0005b	45 8b c1	 mov	 r8d, r9d
  0005e	ba 80 ff ff ff	 mov	 edx, -128		; ffffff80H
  00063	49 c1 e8 02	 shr	 r8, 2
  00067	f7 d1		 not	 ecx

; 243  :     ctx->wbuf[i >> 2] |= 0x00000080 << 8 * (~i & 3);

  00069	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  0006e	83 e1 03	 and	 ecx, 3
  00071	c1 e1 03	 shl	 ecx, 3
  00074	d3 e2		 shl	 edx, cl
  00076	d3 e0		 shl	 eax, cl
  00078	42 23 54 83 1c	 and	 edx, DWORD PTR [rbx+r8*4+28]
  0007d	0b d0		 or	 edx, eax
  0007f	42 89 54 83 1c	 mov	 DWORD PTR [rbx+r8*4+28], edx

; 244  : 
; 245  :     /* we need 9 or more empty positions, one for the padding byte  */
; 246  :     /* (above) and eight for the length count. If there is not      */
; 247  :     /* enough space, pad and empty the buffer                       */
; 248  :     if(i > SHA1_BLOCK_SIZE - 9)

  00084	41 83 f9 37	 cmp	 r9d, 55			; 00000037H
  00088	76 16		 jbe	 SHORT $LN8@sha1_end

; 249  :     {
; 250  :         if(i < 60) ctx->wbuf[15] = 0;

  0008a	41 83 f9 3c	 cmp	 r9d, 60			; 0000003cH
  0008e	73 03		 jae	 SHORT $LN7@sha1_end
  00090	89 7b 58	 mov	 DWORD PTR [rbx+88], edi
$LN7@sha1_end:

; 251  :         sha1_compile(ctx);

  00093	48 8b cb	 mov	 rcx, rbx
  00096	e8 00 00 00 00	 call	 sha1_compile

; 252  :         i = 0;

  0009b	44 8b cf	 mov	 r9d, edi

; 253  :     }
; 254  :     else    /* compute a word index for the empty buffer positions  */

  0009e	eb 07		 jmp	 SHORT $LN14@sha1_end
$LN8@sha1_end:

; 255  :         i = (i >> 2) + 1;

  000a0	41 c1 e9 02	 shr	 r9d, 2
  000a4	41 ff c1	 inc	 r9d
$LN14@sha1_end:

; 256  : 
; 257  :     while(i < 14) /* and zero pad all but last two positions        */

  000a7	b8 0e 00 00 00	 mov	 eax, 14
  000ac	49 63 c9	 movsxd	 rcx, r9d
  000af	44 3b c8	 cmp	 r9d, eax
  000b2	73 16		 jae	 SHORT $LN5@sha1_end

; 258  :         ctx->wbuf[i++] = 0;

  000b4	41 2b c1	 sub	 eax, r9d
  000b7	48 8d 4c 8b 1c	 lea	 rcx, QWORD PTR [rbx+rcx*4+28]
  000bc	33 d2		 xor	 edx, edx
  000be	44 8b c0	 mov	 r8d, eax
  000c1	49 c1 e0 02	 shl	 r8, 2
  000c5	e8 00 00 00 00	 call	 memset
$LN5@sha1_end:

; 259  : 
; 260  :     /* the following 32-bit length fields are assembled in the      */
; 261  :     /* wrong byte order on little endian machines but this is       */
; 262  :     /* corrected later since they are only ever used as 32-bit      */
; 263  :     /* word values.                                                 */
; 264  :     ctx->wbuf[14] = (ctx->count[1] << 3) | (ctx->count[0] >> 29);

  000ca	8b 13		 mov	 edx, DWORD PTR [rbx]
  000cc	8b 4b 04	 mov	 ecx, DWORD PTR [rbx+4]
  000cf	c1 e1 03	 shl	 ecx, 3
  000d2	8b c2		 mov	 eax, edx
  000d4	c1 e8 1d	 shr	 eax, 29
  000d7	0b c8		 or	 ecx, eax

; 265  :     ctx->wbuf[15] = ctx->count[0] << 3;

  000d9	8b c2		 mov	 eax, edx
  000db	c1 e0 03	 shl	 eax, 3
  000de	89 4b 54	 mov	 DWORD PTR [rbx+84], ecx

; 266  :     sha1_compile(ctx);

  000e1	48 8b cb	 mov	 rcx, rbx
  000e4	89 43 58	 mov	 DWORD PTR [rbx+88], eax
  000e7	e8 00 00 00 00	 call	 sha1_compile
  000ec	48 8b d7	 mov	 rdx, rdi
$LL3@sha1_end:

; 267  : 
; 268  :     /* extract the hash value as bytes in case the hash buffer is   */
; 269  :     /* misaligned for 32-bit words                                  */
; 270  :     for(i = 0; i < SHA1_DIGEST_SIZE; ++i)
; 271  :         hval[i] = (unsigned char)(ctx->hash[i >> 2] >> (8 * (~i & 3)));

  000ef	48 8b c2	 mov	 rax, rdx
  000f2	8b cf		 mov	 ecx, edi
  000f4	ff c7		 inc	 edi
  000f6	48 c1 e8 02	 shr	 rax, 2
  000fa	f7 d1		 not	 ecx
  000fc	48 ff c2	 inc	 rdx
  000ff	8b 44 83 08	 mov	 eax, DWORD PTR [rbx+rax*4+8]
  00103	83 e1 03	 and	 ecx, 3
  00106	c1 e1 03	 shl	 ecx, 3
  00109	d3 e8		 shr	 eax, cl
  0010b	88 06		 mov	 BYTE PTR [rsi], al
  0010d	48 ff c6	 inc	 rsi
  00110	83 ff 14	 cmp	 edi, 20
  00113	72 da		 jb	 SHORT $LL3@sha1_end

; 272  : }

  00115	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0011a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0011f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00123	5f		 pop	 rdi
  00124	c3		 ret	 0
sha1_end ENDP
_TEXT	ENDS
PUBLIC	sha1_hash
;	COMDAT pdata
pdata	SEGMENT
$pdata$sha1_hash DD imagerel $LN13
	DD	imagerel $LN13+205
	DD	imagerel $unwind$sha1_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sha1_hash DD 0c1d01H
	DD	0b741dH
	DD	0a641dH
	DD	09541dH
	DD	08341dH
	DD	0e019321dH
	DD	0c015d017H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT sha1_hash
_TEXT	SEGMENT
data$ = 64
len$ = 72
ctx$ = 80
sha1_hash PROC						; COMDAT

; 210  : {   sha1_32t pos = (sha1_32t)(ctx->count[0] & SHA1_MASK),

$LN13:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  00013	41 54		 push	 r12
  00015	41 55		 push	 r13
  00017	41 56		 push	 r14
  00019	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001d	41 8b 00	 mov	 eax, DWORD PTR [r8]

; 211  :             space = SHA1_BLOCK_SIZE - pos;

  00020	bd 40 00 00 00	 mov	 ebp, 64			; 00000040H
  00025	49 8b f8	 mov	 rdi, r8
  00028	44 8b e0	 mov	 r12d, eax

; 212  :     const unsigned char *sp = data;
; 213  : 
; 214  :     if((ctx->count[0] += len) < len)

  0002b	03 c2		 add	 eax, edx
  0002d	8b f2		 mov	 esi, edx
  0002f	41 83 e4 3f	 and	 r12d, 63		; 0000003fH
  00033	4c 8b e9	 mov	 r13, rcx
  00036	41 89 00	 mov	 DWORD PTR [r8], eax
  00039	41 2b ec	 sub	 ebp, r12d
  0003c	3b c2		 cmp	 eax, edx
  0003e	73 04		 jae	 SHORT $LN8@sha1_hash

; 215  :         ++(ctx->count[1]);

  00040	41 ff 40 04	 inc	 DWORD PTR [r8+4]
$LN8@sha1_hash:

; 216  : 
; 217  :     while(len >= space)     /* tranfer whole blocks if possible  */

  00044	3b d5		 cmp	 edx, ebp
  00046	72 57		 jb	 SHORT $LN3@sha1_hash
$LL4@sha1_hash:

; 218  :     {
; 219  :         memcpy(((unsigned char*)ctx->wbuf) + pos, sp, space);

  00048	49 8d 4c 3c 1c	 lea	 rcx, QWORD PTR [r12+rdi+28]
  0004d	44 8b c5	 mov	 r8d, ebp
  00050	49 8b d5	 mov	 rdx, r13
  00053	8b dd		 mov	 ebx, ebp
  00055	e8 00 00 00 00	 call	 memcpy

; 220  :         sp += space; len -= space; space = SHA1_BLOCK_SIZE; pos = 0;

  0005a	2b f5		 sub	 esi, ebp
  0005c	bd 40 00 00 00	 mov	 ebp, 64			; 00000040H
  00061	4c 03 eb	 add	 r13, rbx
  00064	4c 8d 47 5c	 lea	 r8, QWORD PTR [rdi+92]

; 221  :         bsw_32(ctx->wbuf, SHA1_BLOCK_SIZE >> 2);

  00068	8d 55 d0	 lea	 edx, QWORD PTR [rbp-48]
  0006b	45 33 e4	 xor	 r12d, r12d
$LL2@sha1_hash:
  0006e	49 83 e8 04	 sub	 r8, 4
  00072	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00075	8b c8		 mov	 ecx, eax
  00077	c1 c9 18	 ror	 ecx, 24
  0007a	81 e1 ff 00 ff
	00		 and	 ecx, 16711935		; 00ff00ffH
  00080	c1 c8 08	 ror	 eax, 8
  00083	25 00 ff 00 ff	 and	 eax, -16711936		; ff00ff00H
  00088	0b c8		 or	 ecx, eax
  0008a	48 83 ea 01	 sub	 rdx, 1
  0008e	41 89 08	 mov	 DWORD PTR [r8], ecx
  00091	75 db		 jne	 SHORT $LL2@sha1_hash

; 222  :         sha1_compile(ctx);

  00093	48 8b cf	 mov	 rcx, rdi
  00096	e8 00 00 00 00	 call	 sha1_compile
  0009b	3b f5		 cmp	 esi, ebp
  0009d	73 a9		 jae	 SHORT $LL4@sha1_hash
$LN3@sha1_hash:

; 223  :     }
; 224  : 
; 225  :     memcpy(((unsigned char*)ctx->wbuf) + pos, sp, len);

  0009f	49 8d 4c 3c 1c	 lea	 rcx, QWORD PTR [r12+rdi+28]
  000a4	44 8b c6	 mov	 r8d, esi
  000a7	49 8b d5	 mov	 rdx, r13

; 226  : }

  000aa	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000af	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000b4	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000b9	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  000be	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c2	41 5e		 pop	 r14
  000c4	41 5d		 pop	 r13
  000c6	41 5c		 pop	 r12
  000c8	e9 00 00 00 00	 jmp	 memcpy
sha1_hash ENDP
END
