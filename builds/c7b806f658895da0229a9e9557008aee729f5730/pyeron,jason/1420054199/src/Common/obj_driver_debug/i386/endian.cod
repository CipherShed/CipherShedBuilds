; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	c:\home\public\desktop\projects\ciphershed.build\src\common\endian.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_MirrorBytes16@4
; Function compile flags: /Odtp
; File c:\home\public\desktop\projects\ciphershed.build\src\common\endian.c
;	COMDAT _MirrorBytes16@4
_TEXT	SEGMENT
_x$ = 8							; size = 2
_MirrorBytes16@4 PROC					; COMDAT

; 16   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 17   : 	return (x << 8) | (x >> 8);

  00005	0f b7 45 08	 movzx	 eax, WORD PTR _x$[ebp]
  00009	c1 e0 08	 shl	 eax, 8
  0000c	0f b7 4d 08	 movzx	 ecx, WORD PTR _x$[ebp]
  00010	c1 f9 08	 sar	 ecx, 8
  00013	0b c1		 or	 eax, ecx

; 18   : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
_MirrorBytes16@4 ENDP
_TEXT	ENDS
PUBLIC	_MirrorBytes32@4
; Function compile flags: /Odtp
;	COMDAT _MirrorBytes32@4
_TEXT	SEGMENT
_n$ = -4						; size = 4
_x$ = 8							; size = 4
_MirrorBytes32@4 PROC					; COMDAT

; 22   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 23   : 	unsigned __int32 n = (unsigned __int8) x;

  00006	0f b6 45 08	 movzx	 eax, BYTE PTR _x$[ebp]
  0000a	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 24   : 	n <<= 8; n |= (unsigned __int8) (x >> 8);

  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00010	c1 e1 08	 shl	 ecx, 8
  00013	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
  00016	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00019	c1 ea 08	 shr	 edx, 8
  0001c	0f b6 c2	 movzx	 eax, dl
  0001f	0b 45 fc	 or	 eax, DWORD PTR _n$[ebp]
  00022	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 25   : 	n <<= 8; n |= (unsigned __int8) (x >> 16);

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00028	c1 e1 08	 shl	 ecx, 8
  0002b	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
  0002e	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00031	c1 ea 10	 shr	 edx, 16			; 00000010H
  00034	0f b6 c2	 movzx	 eax, dl
  00037	0b 45 fc	 or	 eax, DWORD PTR _n$[ebp]
  0003a	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 26   : 	return (n << 8) | (unsigned __int8) (x >> 24);

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00040	c1 e0 08	 shl	 eax, 8
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00046	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00049	0f b6 d1	 movzx	 edx, cl
  0004c	0b c2		 or	 eax, edx

; 27   : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
_MirrorBytes32@4 ENDP
_TEXT	ENDS
PUBLIC	_MirrorBytes64@8
EXTRN	__aullshr:PROC
EXTRN	__allshl:PROC
; Function compile flags: /Odtp
;	COMDAT _MirrorBytes64@8
_TEXT	SEGMENT
_n$ = -8						; size = 8
_x$ = 8							; size = 8
_MirrorBytes64@8 PROC					; COMDAT

; 31   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 08	 sub	 esp, 8
  00008	56		 push	 esi
  00009	57		 push	 edi

; 32   : 	uint64 n = (unsigned __int8) x;

  0000a	0f b6 45 08	 movzx	 eax, BYTE PTR _x$[ebp]
  0000e	99		 cdq
  0000f	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  00012	89 55 fc	 mov	 DWORD PTR _n$[ebp+4], edx

; 33   : 	n <<= 8; n |= (unsigned __int8) (x >> 8);

  00015	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00018	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp+4]
  0001b	b1 08		 mov	 cl, 8
  0001d	e8 00 00 00 00	 call	 __allshl
  00022	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  00025	89 55 fc	 mov	 DWORD PTR _n$[ebp+4], edx
  00028	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0002b	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp+4]
  0002e	b1 08		 mov	 cl, 8
  00030	e8 00 00 00 00	 call	 __aullshr
  00035	0f b6 c0	 movzx	 eax, al
  00038	99		 cdq
  00039	0b 45 f8	 or	 eax, DWORD PTR _n$[ebp]
  0003c	0b 55 fc	 or	 edx, DWORD PTR _n$[ebp+4]
  0003f	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  00042	89 55 fc	 mov	 DWORD PTR _n$[ebp+4], edx

; 34   : 	n <<= 8; n |= (unsigned __int8) (x >> 16);

  00045	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00048	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp+4]
  0004b	b1 08		 mov	 cl, 8
  0004d	e8 00 00 00 00	 call	 __allshl
  00052	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  00055	89 55 fc	 mov	 DWORD PTR _n$[ebp+4], edx
  00058	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0005b	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp+4]
  0005e	b1 10		 mov	 cl, 16			; 00000010H
  00060	e8 00 00 00 00	 call	 __aullshr
  00065	0f b6 c0	 movzx	 eax, al
  00068	99		 cdq
  00069	0b 45 f8	 or	 eax, DWORD PTR _n$[ebp]
  0006c	0b 55 fc	 or	 edx, DWORD PTR _n$[ebp+4]
  0006f	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  00072	89 55 fc	 mov	 DWORD PTR _n$[ebp+4], edx

; 35   : 	n <<= 8; n |= (unsigned __int8) (x >> 24);

  00075	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00078	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp+4]
  0007b	b1 08		 mov	 cl, 8
  0007d	e8 00 00 00 00	 call	 __allshl
  00082	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  00085	89 55 fc	 mov	 DWORD PTR _n$[ebp+4], edx
  00088	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0008b	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp+4]
  0008e	b1 18		 mov	 cl, 24			; 00000018H
  00090	e8 00 00 00 00	 call	 __aullshr
  00095	0f b6 c0	 movzx	 eax, al
  00098	99		 cdq
  00099	0b 45 f8	 or	 eax, DWORD PTR _n$[ebp]
  0009c	0b 55 fc	 or	 edx, DWORD PTR _n$[ebp+4]
  0009f	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  000a2	89 55 fc	 mov	 DWORD PTR _n$[ebp+4], edx

; 36   : 	n <<= 8; n |= (unsigned __int8) (x >> 32);

  000a5	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  000a8	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp+4]
  000ab	b1 08		 mov	 cl, 8
  000ad	e8 00 00 00 00	 call	 __allshl
  000b2	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  000b5	89 55 fc	 mov	 DWORD PTR _n$[ebp+4], edx
  000b8	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000bb	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp+4]
  000be	b1 20		 mov	 cl, 32			; 00000020H
  000c0	e8 00 00 00 00	 call	 __aullshr
  000c5	0f b6 c0	 movzx	 eax, al
  000c8	99		 cdq
  000c9	0b 45 f8	 or	 eax, DWORD PTR _n$[ebp]
  000cc	0b 55 fc	 or	 edx, DWORD PTR _n$[ebp+4]
  000cf	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  000d2	89 55 fc	 mov	 DWORD PTR _n$[ebp+4], edx

; 37   : 	n <<= 8; n |= (unsigned __int8) (x >> 40);

  000d5	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  000d8	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp+4]
  000db	b1 08		 mov	 cl, 8
  000dd	e8 00 00 00 00	 call	 __allshl
  000e2	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  000e5	89 55 fc	 mov	 DWORD PTR _n$[ebp+4], edx
  000e8	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000eb	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp+4]
  000ee	b1 28		 mov	 cl, 40			; 00000028H
  000f0	e8 00 00 00 00	 call	 __aullshr
  000f5	0f b6 c0	 movzx	 eax, al
  000f8	99		 cdq
  000f9	0b 45 f8	 or	 eax, DWORD PTR _n$[ebp]
  000fc	0b 55 fc	 or	 edx, DWORD PTR _n$[ebp+4]
  000ff	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  00102	89 55 fc	 mov	 DWORD PTR _n$[ebp+4], edx

; 38   : 	n <<= 8; n |= (unsigned __int8) (x >> 48);

  00105	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00108	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp+4]
  0010b	b1 08		 mov	 cl, 8
  0010d	e8 00 00 00 00	 call	 __allshl
  00112	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  00115	89 55 fc	 mov	 DWORD PTR _n$[ebp+4], edx
  00118	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0011b	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp+4]
  0011e	b1 30		 mov	 cl, 48			; 00000030H
  00120	e8 00 00 00 00	 call	 __aullshr
  00125	0f b6 c0	 movzx	 eax, al
  00128	99		 cdq
  00129	0b 45 f8	 or	 eax, DWORD PTR _n$[ebp]
  0012c	0b 55 fc	 or	 edx, DWORD PTR _n$[ebp+4]
  0012f	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  00132	89 55 fc	 mov	 DWORD PTR _n$[ebp+4], edx

; 39   : 	return (n << 8) | (unsigned __int8) (x >> 56);

  00135	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00138	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp+4]
  0013b	b1 08		 mov	 cl, 8
  0013d	e8 00 00 00 00	 call	 __allshl
  00142	8b f0		 mov	 esi, eax
  00144	8b fa		 mov	 edi, edx
  00146	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00149	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp+4]
  0014c	b1 38		 mov	 cl, 56			; 00000038H
  0014e	e8 00 00 00 00	 call	 __aullshr
  00153	0f b6 c0	 movzx	 eax, al
  00156	99		 cdq
  00157	0b f0		 or	 esi, eax
  00159	0b fa		 or	 edi, edx
  0015b	8b c6		 mov	 eax, esi
  0015d	8b d7		 mov	 edx, edi

; 40   : }

  0015f	5f		 pop	 edi
  00160	5e		 pop	 esi
  00161	8b e5		 mov	 esp, ebp
  00163	5d		 pop	 ebp
  00164	c2 08 00	 ret	 8
_MirrorBytes64@8 ENDP
_TEXT	ENDS
END
