; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	c:\home\public\desktop\projects\ciphershed.build\src\common\crc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_crc_32_tab
_DATA	SEGMENT
_crc_32_tab DD	00H
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
_DATA	ENDS
PUBLIC	_crc32int@4
; Function compile flags: /Odtp
; File c:\home\public\desktop\projects\ciphershed.build\src\common\crc.c
;	COMDAT _crc32int@4
_TEXT	SEGMENT
_CRC$ = -8						; size = 4
_d$ = -4						; size = 4
_data$ = 8						; size = 4
_crc32int@4 PROC					; COMDAT

; 60   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 08	 sub	 esp, 8

; 61   : 	unsigned char *d = (unsigned char *) data;

  00008	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0000b	89 45 fc	 mov	 DWORD PTR _d$[ebp], eax

; 62   : 	unsigned __int32 CRC = 0xffffffff;

  0000e	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _CRC$[ebp], -1

; 63   : 
; 64   : 	CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d++) & 0xFF ];

  00015	8b 4d f8	 mov	 ecx, DWORD PTR _CRC$[ebp]
  00018	c1 e9 08	 shr	 ecx, 8
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _d$[ebp]
  0001e	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00021	33 45 f8	 xor	 eax, DWORD PTR _CRC$[ebp]
  00024	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00029	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR _crc_32_tab[eax*4]
  00030	89 4d f8	 mov	 DWORD PTR _CRC$[ebp], ecx
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _d$[ebp]
  00036	83 c1 01	 add	 ecx, 1
  00039	89 4d fc	 mov	 DWORD PTR _d$[ebp], ecx

; 65   : 	CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d++) & 0xFF ];

  0003c	8b 55 f8	 mov	 edx, DWORD PTR _CRC$[ebp]
  0003f	c1 ea 08	 shr	 edx, 8
  00042	8b 45 fc	 mov	 eax, DWORD PTR _d$[ebp]
  00045	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00048	33 4d f8	 xor	 ecx, DWORD PTR _CRC$[ebp]
  0004b	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00051	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR _crc_32_tab[ecx*4]
  00058	89 55 f8	 mov	 DWORD PTR _CRC$[ebp], edx
  0005b	8b 55 fc	 mov	 edx, DWORD PTR _d$[ebp]
  0005e	83 c2 01	 add	 edx, 1
  00061	89 55 fc	 mov	 DWORD PTR _d$[ebp], edx

; 66   : 	CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d++) & 0xFF ];

  00064	8b 45 f8	 mov	 eax, DWORD PTR _CRC$[ebp]
  00067	c1 e8 08	 shr	 eax, 8
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _d$[ebp]
  0006d	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00070	33 55 f8	 xor	 edx, DWORD PTR _CRC$[ebp]
  00073	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00079	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR _crc_32_tab[edx*4]
  00080	89 45 f8	 mov	 DWORD PTR _CRC$[ebp], eax
  00083	8b 45 fc	 mov	 eax, DWORD PTR _d$[ebp]
  00086	83 c0 01	 add	 eax, 1
  00089	89 45 fc	 mov	 DWORD PTR _d$[ebp], eax

; 67   : 	return (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d) & 0xFF ] ^ 0xffffffff;

  0008c	8b 45 f8	 mov	 eax, DWORD PTR _CRC$[ebp]
  0008f	c1 e8 08	 shr	 eax, 8
  00092	8b 4d fc	 mov	 ecx, DWORD PTR _d$[ebp]
  00095	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00098	33 55 f8	 xor	 edx, DWORD PTR _CRC$[ebp]
  0009b	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  000a1	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR _crc_32_tab[edx*4]
  000a8	83 f0 ff	 xor	 eax, -1

; 68   : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
_crc32int@4 ENDP
_TEXT	ENDS
PUBLIC	_GetCrc32@8
; Function compile flags: /Odtp
;	COMDAT _GetCrc32@8
_TEXT	SEGMENT
_data$ = 8						; size = 4
_length$ = 12						; size = 4
_GetCrc32@8 PROC					; COMDAT

; 137  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 138  : #	ifndef TC_MINIMIZE_CODE_SIZE
; 139  : 		return GetCrc32Large(data,length);

  00005	8b 45 0c	 mov	 eax, DWORD PTR _length$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _GetCrc32Large@8

; 140  : #	else
; 141  : 		return GetCrc32Small(data, length);
; 142  : #	endif
; 143  : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
_GetCrc32@8 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _GetCrc32Large@8
_TEXT	SEGMENT
_CRC$ = -4						; size = 4
_data$ = 8						; size = 4
_length$ = 12						; size = 4
_GetCrc32Large@8 PROC					; COMDAT

; 105  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 106  : 	unsigned __int32 CRC = 0xffffffff;

  00006	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _CRC$[ebp], -1
$LN2@GetCrc32La:

; 107  : 
; 108  : 	while (length--)

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _length$[ebp]
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _length$[ebp]
  00013	83 e9 01	 sub	 ecx, 1
  00016	89 4d 0c	 mov	 DWORD PTR _length$[ebp], ecx
  00019	85 c0		 test	 eax, eax
  0001b	74 2a		 je	 SHORT $LN1@GetCrc32La

; 109  : 	{
; 110  : 		CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *data++) & 0xFF ];

  0001d	8b 55 fc	 mov	 edx, DWORD PTR _CRC$[ebp]
  00020	c1 ea 08	 shr	 edx, 8
  00023	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00026	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00029	33 4d fc	 xor	 ecx, DWORD PTR _CRC$[ebp]
  0002c	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00032	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR _crc_32_tab[ecx*4]
  00039	89 55 fc	 mov	 DWORD PTR _CRC$[ebp], edx
  0003c	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  0003f	83 c2 01	 add	 edx, 1
  00042	89 55 08	 mov	 DWORD PTR _data$[ebp], edx

; 111  : 	}

  00045	eb c6		 jmp	 SHORT $LN2@GetCrc32La
$LN1@GetCrc32La:

; 112  : 
; 113  : 	return CRC ^ 0xffffffff;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _CRC$[ebp]
  0004a	83 f0 ff	 xor	 eax, -1

; 114  : }

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 08 00	 ret	 8
_GetCrc32Large@8 ENDP
_TEXT	ENDS
PUBLIC	_crc32_selftests@0
; Function compile flags: /Odtp
;	COMDAT _crc32_selftests@0
_TEXT	SEGMENT
_crc32_selftests@0 PROC					; COMDAT

; 148  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 149  : #	ifndef TC_MINIMIZE_CODE_SIZE
; 150  : 		return crc32_selfTestLarge();

  00005	e8 00 00 00 00	 call	 _crc32_selfTestLarge@0

; 151  : #	else
; 152  : 		return crc32_selfTestSmall();
; 153  : #	endif
; 154  : }

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
_crc32_selftests@0 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _crc32_selfTestLarge@0
_TEXT	SEGMENT
_bSuccess$ = -12					; size = 4
_i$ = -8						; size = 4
_crc$ = -4						; size = 4
_crc32_selfTestLarge@0 PROC				; COMDAT

; 121  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 122  : 	int i;
; 123  : 	unsigned __int32 crc  = 0xffffffff;

  00008	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _crc$[ebp], -1

; 124  : 	BOOL bSuccess = FALSE;

  0000f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bSuccess$[ebp], 0

; 125  : 
; 126  : 	for (i = 0; i < (int)sizeof(crc_32_tab); i++)

  00016	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001d	eb 09		 jmp	 SHORT $LN3@crc32_self
$LN2@crc32_self:
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN3@crc32_self:
  00028	81 7d f8 00 04
	00 00		 cmp	 DWORD PTR _i$[ebp], 1024 ; 00000400H
  0002f	7d 25		 jge	 SHORT $LN1@crc32_self

; 127  : 		crc = UPDC32 (((unsigned char *) crc_32_tab)[i], crc);

  00031	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00034	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _crc_32_tab[ecx]
  0003b	33 55 fc	 xor	 edx, DWORD PTR _crc$[ebp]
  0003e	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00044	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  00047	c1 e8 08	 shr	 eax, 8
  0004a	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR _crc_32_tab[edx*4]
  00051	89 45 fc	 mov	 DWORD PTR _crc$[ebp], eax
  00054	eb c9		 jmp	 SHORT $LN2@crc32_self
$LN1@crc32_self:

; 128  : 
; 129  : 	bSuccess = CRC_SELFTEST == (crc ^ 0xffffffff);

  00056	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  00059	83 f1 ff	 xor	 ecx, -1
  0005c	33 d2		 xor	 edx, edx
  0005e	81 f9 13 9e cf
	6f		 cmp	 ecx, 1875877395		; 6fcf9e13H
  00064	0f 94 c2	 sete	 dl
  00067	89 55 f4	 mov	 DWORD PTR _bSuccess$[ebp], edx

; 130  : 
; 131  : 	bSuccess &= GetCrc32Large ((unsigned char *)crc_32_tab, sizeof crc_32_tab) == CRC_SELFTEST;

  0006a	68 00 04 00 00	 push	 1024			; 00000400H
  0006f	68 00 00 00 00	 push	 OFFSET _crc_32_tab
  00074	e8 00 00 00 00	 call	 _GetCrc32Large@8
  00079	33 c9		 xor	 ecx, ecx
  0007b	3d 13 9e cf 6f	 cmp	 eax, 1875877395		; 6fcf9e13H
  00080	0f 94 c1	 sete	 cl
  00083	23 4d f4	 and	 ecx, DWORD PTR _bSuccess$[ebp]
  00086	89 4d f4	 mov	 DWORD PTR _bSuccess$[ebp], ecx

; 132  : 
; 133  : 	return bSuccess;

  00089	8b 45 f4	 mov	 eax, DWORD PTR _bSuccess$[ebp]

; 134  : }

  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_crc32_selfTestLarge@0 ENDP
_TEXT	ENDS
END
