; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\home\public\Desktop\projects\ciphershed.build\src\Common\BaseCom.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@UtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT>::VT
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?RescueIsoImageSize@BootEncryption@CipherShed@@1IB ; CipherShed::BootEncryption::RescueIsoImageSize
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?RescueIsoImageSize@BootEncryption@CipherShed@@1IB
CONST	SEGMENT
?RescueIsoImageSize@BootEncryption@CipherShed@@1IB DD 01c0000H ; CipherShed::BootEncryption::RescueIsoImageSize
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@UtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@UtagVARIANT@@@ATL@@2GB DW 0cH	; ATL::CVarTypeInfo<tagVARIANT>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
PUBLIC	??_7Thank_you@Define_the_symbol__ATL_MIXED@@6B@	; Define_the_symbol__ATL_MIXED::Thank_you::`vftable'
PUBLIC	??0Thank_you@Define_the_symbol__ATL_MIXED@@QAE@XZ ; Define_the_symbol__ATL_MIXED::Thank_you::Thank_you
PUBLIC	??_R4Thank_you@Define_the_symbol__ATL_MIXED@@6B@ ; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUThank_you@Define_the_symbol__ATL_MIXED@@@8 ; Define_the_symbol__ATL_MIXED::Thank_you `RTTI Type Descriptor'
PUBLIC	??_R3Thank_you@Define_the_symbol__ATL_MIXED@@8	; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Thank_you@Define_the_symbol__ATL_MIXED@@8	; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Thank_you@Define_the_symbol__ATL_MIXED@@8 ; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?one@Thank_you@Define_the_symbol__ATL_MIXED@@UAEXXZ ; Define_the_symbol__ATL_MIXED::Thank_you::one
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@Thank_you@Define_the_symbol__ATL_MIXED@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Thank_you@Define_the_symbol__ATL_MIXED@@8 DD FLAT:??_R0?AUThank_you@Define_the_symbol__ATL_MIXED@@@8 ; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Thank_you@Define_the_symbol__ATL_MIXED@@8
rdata$r	ENDS
;	COMDAT ??_R2Thank_you@Define_the_symbol__ATL_MIXED@@8
rdata$r	SEGMENT
??_R2Thank_you@Define_the_symbol__ATL_MIXED@@8 DD FLAT:??_R1A@?0A@EA@Thank_you@Define_the_symbol__ATL_MIXED@@8 ; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Thank_you@Define_the_symbol__ATL_MIXED@@8
rdata$r	SEGMENT
??_R3Thank_you@Define_the_symbol__ATL_MIXED@@8 DD 00H	; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Thank_you@Define_the_symbol__ATL_MIXED@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUThank_you@Define_the_symbol__ATL_MIXED@@@8
_DATA	SEGMENT
??_R0?AUThank_you@Define_the_symbol__ATL_MIXED@@@8 DD FLAT:??_7type_info@@6B@ ; Define_the_symbol__ATL_MIXED::Thank_you `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUThank_you@Define_the_symbol__ATL_MIXED@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Thank_you@Define_the_symbol__ATL_MIXED@@6B@
rdata$r	SEGMENT
??_R4Thank_you@Define_the_symbol__ATL_MIXED@@6B@ DD 00H	; Define_the_symbol__ATL_MIXED::Thank_you::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUThank_you@Define_the_symbol__ATL_MIXED@@@8
	DD	FLAT:??_R3Thank_you@Define_the_symbol__ATL_MIXED@@8
rdata$r	ENDS
;	COMDAT ??_7Thank_you@Define_the_symbol__ATL_MIXED@@6B@
CONST	SEGMENT
??_7Thank_you@Define_the_symbol__ATL_MIXED@@6B@ DD FLAT:??_R4Thank_you@Define_the_symbol__ATL_MIXED@@6B@ ; Define_the_symbol__ATL_MIXED::Thank_you::`vftable'
	DD	FLAT:?one@Thank_you@Define_the_symbol__ATL_MIXED@@UAEXXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0Thank_you@Define_the_symbol__ATL_MIXED@@QAE@XZ
_TEXT	SEGMENT
??0Thank_you@Define_the_symbol__ATL_MIXED@@QAE@XZ PROC	; Define_the_symbol__ATL_MIXED::Thank_you::Thank_you, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Thank_you@Define_the_symbol__ATL_MIXED@@6B@
  00008	c3		 ret	 0
??0Thank_you@Define_the_symbol__ATL_MIXED@@QAE@XZ ENDP	; Define_the_symbol__ATL_MIXED::Thank_you::Thank_you
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atldef.h
_TEXT	ENDS
;	COMDAT ?one@Thank_you@Define_the_symbol__ATL_MIXED@@UAEXXZ
_TEXT	SEGMENT
?one@Thank_you@Define_the_symbol__ATL_MIXED@@UAEXXZ PROC ; Define_the_symbol__ATL_MIXED::Thank_you::one, COMDAT
; _this$ = ecx

; 80   : 	struct Thank_you { virtual void one(){} };

  00000	c3		 ret	 0
?one@Thank_you@Define_the_symbol__ATL_MIXED@@UAEXXZ ENDP ; Define_the_symbol__ATL_MIXED::Thank_you::one
_TEXT	ENDS
PUBLIC	_HRESULT_FROM_WIN32
; Function compile flags: /Ogtpy
; File c:\program files\microsoft sdks\windows\v7.1\include\winerror.h
;	COMDAT _HRESULT_FROM_WIN32
_TEXT	SEGMENT
_x$ = 8							; size = 4
_HRESULT_FROM_WIN32 PROC				; COMDAT

; 23841: FORCEINLINE HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _x$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	7e 0a		 jle	 SHORT $LN4@HRESULT_FR
  00008	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000d	0d 00 00 07 80	 or	 eax, -2147024896	; 80070000H
$LN4@HRESULT_FR:
  00012	c3		 ret	 0
_HRESULT_FROM_WIN32 ENDP
_TEXT	ENDS
PUBLIC	?_AtlGetConversionACP@ATL@@YGIXZ		; ATL::_AtlGetConversionACP
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetConversionACP@ATL@@YGIXZ PROC			; ATL::_AtlGetConversionACP, COMDAT

; 104  : #ifdef _CONVERSION_DONT_USE_THREAD_LOCALE
; 105  : 	return CP_ACP;
; 106  : #else
; 107  : 	return CP_THREAD_ACP;

  00000	b8 03 00 00 00	 mov	 eax, 3

; 108  : #endif
; 109  : }

  00005	c3		 ret	 0
?_AtlGetConversionACP@ATL@@YGIXZ ENDP			; ATL::_AtlGetConversionACP
_TEXT	ENDS
PUBLIC	??0CAtlException@ATL@@QAE@J@Z			; ATL::CAtlException::CAtlException
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlexcept.h
;	COMDAT ??0CAtlException@ATL@@QAE@J@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
??0CAtlException@ATL@@QAE@J@Z PROC			; ATL::CAtlException::CAtlException, COMDAT
; _this$ = ecx

; 42   : 	{

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR _hr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 43   : 	}

  00008	c2 04 00	 ret	 4
??0CAtlException@ATL@@QAE@J@Z ENDP			; ATL::CAtlException::CAtlException
_TEXT	ENDS
PUBLIC	__TI1?AVCAtlException@ATL@@
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
PUBLIC	__CTA1?AVCAtlException@ATL@@
PUBLIC	__CT??_R0?AVCAtlException@ATL@@@84
PUBLIC	??_R0?AVCAtlException@ATL@@@8			; ATL::CAtlException `RTTI Type Descriptor'
EXTRN	__CxxThrowException@8:PROC
;	COMDAT ??_R0?AVCAtlException@ATL@@@8
_DATA	SEGMENT
??_R0?AVCAtlException@ATL@@@8 DD FLAT:??_7type_info@@6B@ ; ATL::CAtlException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAtlException@ATL@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVCAtlException@ATL@@@84
xdata$x	SEGMENT
__CT??_R0?AVCAtlException@ATL@@@84 DD 00H
	DD	FLAT:??_R0?AVCAtlException@ATL@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1?AVCAtlException@ATL@@
xdata$x	SEGMENT
__CTA1?AVCAtlException@ATL@@ DD 01H
	DD	FLAT:__CT??_R0?AVCAtlException@ATL@@@84
xdata$x	ENDS
;	COMDAT __TI1?AVCAtlException@ATL@@
xdata$x	SEGMENT
__TI1?AVCAtlException@ATL@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AVCAtlException@ATL@@
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T117734 = 8						; size = 4
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 64   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 65   : #ifdef _AFX
; 66   : 	if( hr == E_OUTOFMEMORY )
; 67   : 	{
; 68   : 		AfxThrowMemoryException();
; 69   : 	}
; 70   : 	else
; 71   : 	{
; 72   : 		AfxThrowOleException( hr );
; 73   : 	}
; 74   : #else
; 75   : 	throw CAtlException( hr );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _hr$[esp-4]
  00004	68 00 00 00 00	 push	 OFFSET __TI1?AVCAtlException@ATL@@
  00009	8d 4c 24 08	 lea	 ecx, DWORD PTR $T117734[esp]
  0000d	51		 push	 ecx
  0000e	89 44 24 0c	 mov	 DWORD PTR $T117734[esp+4], eax
  00012	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@AtlThrowIm:
  00017	cc		 int	 3
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
PUBLIC	?AtlThrowLastWin32@ATL@@YGXXZ			; ATL::AtlThrowLastWin32
EXTRN	__imp__GetLastError@0:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?AtlThrowLastWin32@ATL@@YGXXZ
_TEXT	SEGMENT
?AtlThrowLastWin32@ATL@@YGXXZ PROC			; ATL::AtlThrowLastWin32, COMDAT

; 83   : 	DWORD dwError = ::GetLastError();

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 84   : 	AtlThrow( HRESULT_FROM_WIN32( dwError ) );

  00006	85 c0		 test	 eax, eax
  00008	7e 0a		 jle	 SHORT $LN6@AtlThrowLa
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	0d 00 00 07 80	 or	 eax, -2147024896	; 80070000H
$LN6@AtlThrowLa:
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN7@AtlThrowLa:
  0001a	cc		 int	 3
?AtlThrowLastWin32@ATL@@YGXXZ ENDP			; ATL::AtlThrowLastWin32
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 425  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 426  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 448  : //		_DEBUG_POINTER(_First);
; 449  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $LL3@length
  0000e	2b c2		 sub	 eax, edx

; 450  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Copy_s
EXTRN	_memcpy_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Copy_s, COMDAT

; 463  : //		_DEBUG_POINTER(_First1);
; 464  : //		_DEBUG_POINTER(_First2);
; 465  : 		_CRT_SECURE_MEMCPY(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 466  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 467  : 		}

  00020	c3		 ret	 0
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Copy_s
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Move_s
EXTRN	_memmove_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Move_s, COMDAT

; 487  : //		_DEBUG_POINTER(_First1);
; 488  : //		_DEBUG_POINTER(_First2);
; 489  : 		_CRT_SECURE_MEMMOVE(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 490  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 491  : 		}

  00020	c3		 ret	 0
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Move_s
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

  00000	56		 push	 esi
  00001	8d 44 24 08	 lea	 eax, DWORD PTR __Message$[esp]
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtpy
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00009	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000e	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00013	74 09		 je	 SHORT $LN6@scalar
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_1DO@BMONIIMG@?$AAE?$AAl?$AAe?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AAA?$AAd?$AAm?$AAi?$AAn?$AAi?$AAs?$AAt?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$CB?$AAn?$AAe?$AAw?$AA?3?$AA?$CF?$AAs?$AA?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CreateElevatedComObject@@YAJPAUHWND__@@ABU_GUID@@1PAPAX@Z ; CreateElevatedComObject
EXTRN	__imp__CoGetObject@16:PROC
EXTRN	_ProcessPaintMessages:PROC
EXTRN	_swprintf_s:PROC
EXTRN	__imp__StringFromGUID2@12:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_1DO@BMONIIMG@?$AAE?$AAl?$AAe?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AAA?$AAd?$AAm?$AAi?$AAn?$AAi?$AAs?$AAt?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$CB?$AAn?$AAe?$AAw?$AA?3?$AA?$CF?$AAs?$AA?$AA@
; File c:\home\public\desktop\projects\ciphershed.build\src\common\basecom.cpp
CONST	SEGMENT
??_C@_1DO@BMONIIMG@?$AAE?$AAl?$AAe?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AAA?$AAd?$AAm?$AAi?$AAn?$AAi?$AAs?$AAt?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$CB?$AAn?$AAe?$AAw?$AA?3?$AA?$CF?$AAs?$AA?$AA@ DB 'E'
	DB	00H, 'l', 00H, 'e', 00H, 'v', 00H, 'a', 00H, 't', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, ':', 00H, 'A', 00H, 'd', 00H, 'm', 00H, 'i'
	DB	00H, 'n', 00H, 'i', 00H, 's', 00H, 't', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '!', 00H, 'n', 00H, 'e', 00H, 'w'
	DB	00H, ':', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?CreateElevatedComObject@@YAJPAUHWND__@@ABU_GUID@@1PAPAX@Z
_TEXT	SEGMENT
_bo$ = -4136						; size = 36
_clsid$ = -4100						; size = 2048
_monikerName$ = -2052					; size = 2048
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_guid$ = 12						; size = 4
_iid$ = 16						; size = 4
_ppv$ = 20						; size = 4
?CreateElevatedComObject@@YAJPAUHWND__@@ABU_GUID@@1PAPAX@Z PROC ; CreateElevatedComObject, COMDAT

; 23   : {

  00000	b8 28 10 00 00	 mov	 eax, 4136		; 00001028H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 24 10
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+4136], eax
  00018	8b 84 24 30 10
	00 00		 mov	 eax, DWORD PTR _guid$[esp+4132]
  0001f	53		 push	 ebx
  00020	8b 9c 24 3c 10
	00 00		 mov	 ebx, DWORD PTR _ppv$[esp+4136]
  00027	56		 push	 esi
  00028	8b b4 24 34 10
	00 00		 mov	 esi, DWORD PTR _hwnd$[esp+4140]
  0002f	57		 push	 edi
  00030	8b bc 24 40 10
	00 00		 mov	 edi, DWORD PTR _iid$[esp+4144]

; 24   :     WCHAR monikerName[1024];
; 25   :     WCHAR clsid[1024];
; 26   :     BIND_OPTS3 bo;
; 27   : 
; 28   :     StringFromGUID2 (guid, clsid, sizeof (clsid) / 2);

  00037	68 00 04 00 00	 push	 1024			; 00000400H
  0003c	8d 4c 24 34	 lea	 ecx, DWORD PTR _clsid$[esp+4152]
  00040	51		 push	 ecx
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__StringFromGUID2@12

; 29   : 	swprintf_s (monikerName, sizeof (monikerName) / 2, L"Elevation:Administrator!new:%s", clsid);

  00048	8d 54 24 30	 lea	 edx, DWORD PTR _clsid$[esp+4148]
  0004c	52		 push	 edx
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_1DO@BMONIIMG@?$AAE?$AAl?$AAe?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AAA?$AAd?$AAm?$AAi?$AAn?$AAi?$AAs?$AAt?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$CB?$AAn?$AAe?$AAw?$AA?3?$AA?$CF?$AAs?$AA?$AA@
  00052	8d 84 24 38 08
	00 00		 lea	 eax, DWORD PTR _monikerName$[esp+4156]
  00059	68 00 04 00 00	 push	 1024			; 00000400H
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _swprintf_s

; 30   : 
; 31   :     memset (&bo, 0, sizeof (bo));

  00064	33 c0		 xor	 eax, eax

; 32   :     bo.cbStruct = sizeof (bo);
; 33   :     bo.hwnd = hwnd;
; 34   :     bo.dwClassContext = CLSCTX_LOCAL_SERVER;
; 35   : 
; 36   : 	// Prevent the GUI from being half-rendered when the UAC prompt "freezes" it
; 37   : 	ProcessPaintMessages (hwnd, 5000);

  00066	68 88 13 00 00	 push	 5000			; 00001388H
  0006b	89 44 24 20	 mov	 DWORD PTR _bo$[esp+4168], eax
  0006f	89 44 24 34	 mov	 DWORD PTR _bo$[esp+4188], eax
  00073	89 44 24 40	 mov	 DWORD PTR _bo$[esp+4200], eax
  00077	56		 push	 esi
  00078	89 44 24 28	 mov	 DWORD PTR _bo$[esp+4176], eax
  0007c	89 44 24 2c	 mov	 DWORD PTR _bo$[esp+4180], eax
  00080	89 44 24 30	 mov	 DWORD PTR _bo$[esp+4184], eax
  00084	89 44 24 34	 mov	 DWORD PTR _bo$[esp+4188], eax
  00088	89 44 24 3c	 mov	 DWORD PTR _bo$[esp+4196], eax
  0008c	89 44 24 40	 mov	 DWORD PTR _bo$[esp+4200], eax
  00090	c7 44 24 24 24
	00 00 00	 mov	 DWORD PTR _bo$[esp+4172], 36 ; 00000024H
  00098	89 74 24 44	 mov	 DWORD PTR _bo$[esp+4204], esi
  0009c	c7 44 24 38 04
	00 00 00	 mov	 DWORD PTR _bo$[esp+4192], 4
  000a4	e8 00 00 00 00	 call	 _ProcessPaintMessages
  000a9	83 c4 18	 add	 esp, 24			; 00000018H

; 38   : 
; 39   :     return CoGetObject (monikerName, &bo, iid, ppv);

  000ac	53		 push	 ebx
  000ad	57		 push	 edi
  000ae	8d 4c 24 14	 lea	 ecx, DWORD PTR _bo$[esp+4156]
  000b2	51		 push	 ecx
  000b3	8d 94 24 3c 08
	00 00		 lea	 edx, DWORD PTR _monikerName$[esp+4160]
  000ba	52		 push	 edx
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoGetObject@16

; 40   : }

  000c1	8b 8c 24 30 10
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+4148]
  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx
  000cb	33 cc		 xor	 ecx, esp
  000cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d2	81 c4 28 10 00
	00		 add	 esp, 4136		; 00001028H
  000d8	c3		 ret	 0
?CreateElevatedComObject@@YAJPAUHWND__@@ABU_GUID@@1PAPAX@Z ENDP ; CreateElevatedComObject
_TEXT	ENDS
PUBLIC	??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@		; `string'
PUBLIC	?ComGetInstanceBase@@YAHPAUHWND__@@ABU_GUID@@1PAPAX@Z ; ComGetInstanceBase
EXTRN	_Error:PROC
EXTRN	__imp__CoCreateInstance@20:PROC
EXTRN	_IsUacSupported:PROC
;	COMDAT ??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@
CONST	SEGMENT
??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@ DB 'UAC_INIT_ERROR', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?ComGetInstanceBase@@YAHPAUHWND__@@ABU_GUID@@1PAPAX@Z
_TEXT	SEGMENT
_hWnd$ = 8						; size = 4
_clsid$ = 12						; size = 4
_iid$ = 16						; size = 4
_tcServer$ = 20						; size = 4
?ComGetInstanceBase@@YAHPAUHWND__@@ABU_GUID@@1PAPAX@Z PROC ; ComGetInstanceBase, COMDAT

; 44   : {

  00000	56		 push	 esi

; 45   : 	BOOL r;
; 46   : 
; 47   : 	if (IsUacSupported ())

  00001	e8 00 00 00 00	 call	 _IsUacSupported
  00006	85 c0		 test	 eax, eax
  00008	74 1e		 je	 SHORT $LN3@ComGetInst

; 48   : 		r = CreateElevatedComObject (hWnd, clsid, iid, tcServer) == S_OK;

  0000a	8b 44 24 14	 mov	 eax, DWORD PTR _tcServer$[esp]
  0000e	8b 4c 24 10	 mov	 ecx, DWORD PTR _iid$[esp]
  00012	8b 54 24 0c	 mov	 edx, DWORD PTR _clsid$[esp]
  00016	50		 push	 eax
  00017	8b 44 24 0c	 mov	 eax, DWORD PTR _hWnd$[esp+4]
  0001b	51		 push	 ecx
  0001c	52		 push	 edx
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ?CreateElevatedComObject@@YAJPAUHWND__@@ABU_GUID@@1PAPAX@Z ; CreateElevatedComObject
  00023	83 c4 10	 add	 esp, 16			; 00000010H

; 49   : 	else

  00026	eb 19		 jmp	 SHORT $LN7@ComGetInst
$LN3@ComGetInst:

; 50   : 		r = CoCreateInstance (clsid, NULL, CLSCTX_LOCAL_SERVER, iid, tcServer) == S_OK;

  00028	8b 4c 24 14	 mov	 ecx, DWORD PTR _tcServer$[esp]
  0002c	8b 54 24 10	 mov	 edx, DWORD PTR _iid$[esp]
  00030	8b 44 24 0c	 mov	 eax, DWORD PTR _clsid$[esp]
  00034	51		 push	 ecx
  00035	52		 push	 edx
  00036	6a 04		 push	 4
  00038	6a 00		 push	 0
  0003a	50		 push	 eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoCreateInstance@20
$LN7@ComGetInst:
  00041	8b f0		 mov	 esi, eax
  00043	f7 de		 neg	 esi
  00045	1b f6		 sbb	 esi, esi
  00047	46		 inc	 esi

; 51   : 
; 52   : 	if (!r)

  00048	85 f6		 test	 esi, esi
  0004a	75 0d		 jne	 SHORT $LN6@ComGetInst

; 53   : 		Error ("UAC_INIT_ERROR");

  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@
  00051	e8 00 00 00 00	 call	 _Error
  00056	83 c4 04	 add	 esp, 4
$LN6@ComGetInst:

; 54   : 
; 55   : 	return r;

  00059	8b c6		 mov	 eax, esi
  0005b	5e		 pop	 esi

; 56   : }

  0005c	c3		 ret	 0
?ComGetInstanceBase@@YAHPAUHWND__@@ABU_GUID@@1PAPAX@Z ENDP ; ComGetInstanceBase
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z		; BaseCom::CallDriver
PUBLIC	??_R0?AUSystemException@CipherShed@@@8		; CipherShed::SystemException `RTTI Type Descriptor'
PUBLIC	??_R0?AUException@CipherShed@@@8		; CipherShed::Exception `RTTI Type Descriptor'
EXTRN	??1BootEncryption@CipherShed@@QAE@XZ:PROC	; CipherShed::BootEncryption::~BootEncryption
EXTRN	?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z:PROC ; CipherShed::BootEncryption::CallDriver
EXTRN	??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z:PROC ; CipherShed::BootEncryption::BootEncryption
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT ??_R0?AUException@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUException@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUException@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AUSystemException@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUSystemException@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::SystemException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSystemException@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__tryblocktable$?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z DD 00H
	DD	01H
	DD	02H
	DD	03H
	DD	FLAT:__catchsym$?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z$5
__unwindtable$?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z$4
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z
	DD	01H
	DD	FLAT:__tryblocktable$?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__catchsym$?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z$5 DD 08H
	DD	FLAT:??_R0?AUSystemException@CipherShed@@@8
	DD	00H
	DD	FLAT:__catch$?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z$0
	DD	08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffff9ccH
	DD	FLAT:__catch$?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z$1
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z$2
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z
_TEXT	SEGMENT
_e$114377 = -1588					; size = 4
$T117792 = -1584					; size = 4
_bootEnc$114365 = -1580					; size = 1560
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_ioctl$ = 8						; size = 4
_input$ = 12						; size = 4
_output$ = 16						; size = 4
?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z PROC		; BaseCom::CallDriver, COMDAT

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 28 06 00
	00		 sub	 esp, 1576		; 00000628H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	8b 75 0c	 mov	 esi, DWORD PTR _input$[ebp]
  00034	8b 7d 10	 mov	 edi, DWORD PTR _output$[ebp]

; 61   : 	try
; 62   : 	{

  00037	33 db		 xor	 ebx, ebx

; 63   : 		BootEncryption bootEnc (NULL);

  00039	53		 push	 ebx
  0003a	8d 8d d4 f9 ff
	ff		 lea	 ecx, DWORD PTR _bootEnc$114365[ebp]
  00040	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00043	e8 00 00 00 00	 call	 ??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z ; CipherShed::BootEncryption::BootEncryption

; 64   : 		bootEnc.CallDriver (ioctl,
; 65   : 			(BYTE *) input, !(BYTE *) input ? 0 : ((DWORD *) ((BYTE *) input))[-1],
; 66   : 			(BYTE *) *output, !(BYTE *) *output ? 0 : ((DWORD *) ((BYTE *) *output))[-1]);

  00048	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0004a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004e	3b cb		 cmp	 ecx, ebx
  00050	75 04		 jne	 SHORT $LN4@CallDriver
  00052	33 d2		 xor	 edx, edx
  00054	eb 03		 jmp	 SHORT $LN5@CallDriver
$LN4@CallDriver:
  00056	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
$LN5@CallDriver:
  00059	3b f3		 cmp	 esi, ebx
  0005b	75 04		 jne	 SHORT $LN6@CallDriver
  0005d	33 c0		 xor	 eax, eax
  0005f	eb 03		 jmp	 SHORT $LN7@CallDriver
$LN6@CallDriver:
  00061	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
$LN7@CallDriver:
  00064	52		 push	 edx
  00065	51		 push	 ecx
  00066	50		 push	 eax
  00067	8b 45 08	 mov	 eax, DWORD PTR _ioctl$[ebp]
  0006a	56		 push	 esi
  0006b	50		 push	 eax
  0006c	8d 8d d4 f9 ff
	ff		 lea	 ecx, DWORD PTR _bootEnc$114365[ebp]
  00072	e8 00 00 00 00	 call	 ?CallDriver@BootEncryption@CipherShed@@QAEXKPAXK0K@Z ; CipherShed::BootEncryption::CallDriver

; 67   : 	}

  00077	8d 8d d4 f9 ff
	ff		 lea	 ecx, DWORD PTR _bootEnc$114365[ebp]
  0007d	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00080	e8 00 00 00 00	 call	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption

; 80   : 	}
; 81   : 
; 82   : 	return ERROR_SUCCESS;

  00085	33 c0		 xor	 eax, eax
  00087	eb 39		 jmp	 SHORT $LN2@CallDriver
__catch$?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z$0:

; 68   : 	catch (SystemException &)
; 69   : 	{
; 70   : 		return GetLastError();

  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0008f	89 85 d0 f9 ff
	ff		 mov	 DWORD PTR $T117792[ebp], eax
  00095	b8 00 00 00 00	 mov	 eax, $LN14@CallDriver
  0009a	c3		 ret	 0
$LN14@CallDriver:
  0009b	8b 85 d0 f9 ff
	ff		 mov	 eax, DWORD PTR $T117792[ebp]
  000a1	eb 1f		 jmp	 SHORT $LN2@CallDriver
__catch$?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z$1:

; 71   : 	}
; 72   : 	catch (Exception &e)
; 73   : 	{
; 74   : 		e.Show (NULL);

  000a3	8b 8d cc f9 ff
	ff		 mov	 ecx, DWORD PTR _e$114377[ebp]
  000a9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ab	8b 02		 mov	 eax, DWORD PTR [edx]
  000ad	6a 00		 push	 0
  000af	ff d0		 call	 eax

; 75   : 		return ERROR_EXCEPTION_IN_SERVICE;

  000b1	b8 00 00 00 00	 mov	 eax, $LN18@CallDriver
  000b6	c3		 ret	 0
__catch$?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z$2:

; 76   : 	}
; 77   : 	catch (...)
; 78   : 	{
; 79   : 		return ERROR_EXCEPTION_IN_SERVICE;

  000b7	b8 00 00 00 00	 mov	 eax, $LN18@CallDriver
  000bc	c3		 ret	 0
$LN18@CallDriver:
  000bd	b8 28 04 00 00	 mov	 eax, 1064		; 00000428H
$LN2@CallDriver:

; 83   : }

  000c2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cc	59		 pop	 ecx
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d3	33 cd		 xor	 ecx, ebp
  000d5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z$4:
  00000	8d 8d d4 f9 ff
	ff		 lea	 ecx, DWORD PTR _bootEnc$114365[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
__ehhandler$?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a c8 f9 ff
	ff		 mov	 ecx, DWORD PTR [edx-1592]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z ENDP		; BaseCom::CallDriver
PUBLIC	?IsPagingFileActive@BaseCom@@SAHH@Z		; BaseCom::IsPagingFileActive
EXTRN	_IsPagingFileActive:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?IsPagingFileActive@BaseCom@@SAHH@Z
_TEXT	SEGMENT
_checkNonWindowsPartitionsOnly$ = 8			; size = 4
?IsPagingFileActive@BaseCom@@SAHH@Z PROC		; BaseCom::IsPagingFileActive, COMDAT

; 110  : 	return ::IsPagingFileActive (checkNonWindowsPartitionsOnly);

  00000	e9 00 00 00 00	 jmp	 _IsPagingFileActive
?IsPagingFileActive@BaseCom@@SAHH@Z ENDP		; BaseCom::IsPagingFileActive
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?RegisterFilterDriver@BaseCom@@SAKHH@Z		; BaseCom::RegisterFilterDriver
EXTRN	?RegisterFilterDriver@BootEncryption@CipherShed@@QAEX_NW4FilterType@12@@Z:PROC ; CipherShed::BootEncryption::RegisterFilterDriver
;	COMDAT xdata$x
xdata$x	SEGMENT
__tryblocktable$?RegisterFilterDriver@BaseCom@@SAKHH@Z DD 00H
	DD	01H
	DD	02H
	DD	03H
	DD	FLAT:__catchsym$?RegisterFilterDriver@BaseCom@@SAKHH@Z$5
__unwindtable$?RegisterFilterDriver@BaseCom@@SAKHH@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?RegisterFilterDriver@BaseCom@@SAKHH@Z$4
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?RegisterFilterDriver@BaseCom@@SAKHH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?RegisterFilterDriver@BaseCom@@SAKHH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?RegisterFilterDriver@BaseCom@@SAKHH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__catchsym$?RegisterFilterDriver@BaseCom@@SAKHH@Z$5 DD 08H
	DD	FLAT:??_R0?AUSystemException@CipherShed@@@8
	DD	00H
	DD	FLAT:__catch$?RegisterFilterDriver@BaseCom@@SAKHH@Z$0
	DD	08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffff9ccH
	DD	FLAT:__catch$?RegisterFilterDriver@BaseCom@@SAKHH@Z$1
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?RegisterFilterDriver@BaseCom@@SAKHH@Z$2
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?RegisterFilterDriver@BaseCom@@SAKHH@Z
_TEXT	SEGMENT
_e$114531 = -1588					; size = 4
$T117828 = -1584					; size = 4
_bootEnc$114527 = -1580					; size = 1560
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_registerDriver$ = 8					; size = 4
_filterType$ = 12					; size = 4
?RegisterFilterDriver@BaseCom@@SAKHH@Z PROC		; BaseCom::RegisterFilterDriver, COMDAT

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterFilterDriver@BaseCom@@SAKHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 28 06 00
	00		 sub	 esp, 1576		; 00000628H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 153  : 	try
; 154  : 	{

  00031	33 db		 xor	 ebx, ebx

; 155  : 		BootEncryption bootEnc (NULL);

  00033	53		 push	 ebx
  00034	8d 8d d4 f9 ff
	ff		 lea	 ecx, DWORD PTR _bootEnc$114527[ebp]
  0003a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  0003d	e8 00 00 00 00	 call	 ??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z ; CipherShed::BootEncryption::BootEncryption

; 156  : 		bootEnc.RegisterFilterDriver (registerDriver ? true : false, (BootEncryption::FilterType) filterType);

  00042	39 5d 08	 cmp	 DWORD PTR _registerDriver$[ebp], ebx
  00045	8b 45 0c	 mov	 eax, DWORD PTR _filterType$[ebp]
  00048	0f 95 c1	 setne	 cl
  0004b	0f b6 d1	 movzx	 edx, cl
  0004e	50		 push	 eax
  0004f	52		 push	 edx
  00050	8d 8d d4 f9 ff
	ff		 lea	 ecx, DWORD PTR _bootEnc$114527[ebp]
  00056	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0005a	e8 00 00 00 00	 call	 ?RegisterFilterDriver@BootEncryption@CipherShed@@QAEX_NW4FilterType@12@@Z ; CipherShed::BootEncryption::RegisterFilterDriver

; 157  : 	}

  0005f	8d 8d d4 f9 ff
	ff		 lea	 ecx, DWORD PTR _bootEnc$114527[ebp]
  00065	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00068	e8 00 00 00 00	 call	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption

; 170  : 	}
; 171  : 
; 172  : 	return ERROR_SUCCESS;

  0006d	33 c0		 xor	 eax, eax
  0006f	eb 39		 jmp	 SHORT $LN2@RegisterFi
__catch$?RegisterFilterDriver@BaseCom@@SAKHH@Z$0:

; 158  : 	catch (SystemException &)
; 159  : 	{
; 160  : 		return GetLastError();

  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00077	89 85 d0 f9 ff
	ff		 mov	 DWORD PTR $T117828[ebp], eax
  0007d	b8 00 00 00 00	 mov	 eax, $LN10@RegisterFi
  00082	c3		 ret	 0
$LN10@RegisterFi:
  00083	8b 85 d0 f9 ff
	ff		 mov	 eax, DWORD PTR $T117828[ebp]
  00089	eb 1f		 jmp	 SHORT $LN2@RegisterFi
__catch$?RegisterFilterDriver@BaseCom@@SAKHH@Z$1:

; 161  : 	}
; 162  : 	catch (Exception &e)
; 163  : 	{
; 164  : 		e.Show (NULL);

  0008b	8b 8d cc f9 ff
	ff		 mov	 ecx, DWORD PTR _e$114531[ebp]
  00091	8b 01		 mov	 eax, DWORD PTR [ecx]
  00093	8b 10		 mov	 edx, DWORD PTR [eax]
  00095	6a 00		 push	 0
  00097	ff d2		 call	 edx

; 165  : 		return ERROR_EXCEPTION_IN_SERVICE;

  00099	b8 00 00 00 00	 mov	 eax, $LN14@RegisterFi
  0009e	c3		 ret	 0
__catch$?RegisterFilterDriver@BaseCom@@SAKHH@Z$2:

; 166  : 	}
; 167  : 	catch (...)
; 168  : 	{
; 169  : 		return ERROR_EXCEPTION_IN_SERVICE;

  0009f	b8 00 00 00 00	 mov	 eax, $LN14@RegisterFi
  000a4	c3		 ret	 0
$LN14@RegisterFi:
  000a5	b8 28 04 00 00	 mov	 eax, 1064		; 00000428H
$LN2@RegisterFi:

; 173  : }

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bb	33 cd		 xor	 ecx, ebp
  000bd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterFilterDriver@BaseCom@@SAKHH@Z$4:
  00000	8d 8d d4 f9 ff
	ff		 lea	 ecx, DWORD PTR _bootEnc$114527[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
__ehhandler$?RegisterFilterDriver@BaseCom@@SAKHH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a c8 f9 ff
	ff		 mov	 ecx, DWORD PTR [edx-1592]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterFilterDriver@BaseCom@@SAKHH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterFilterDriver@BaseCom@@SAKHH@Z ENDP		; BaseCom::RegisterFilterDriver
PUBLIC	__$ArrayPad$
PUBLIC	?RegisterSystemFavoritesService@BaseCom@@SAKH@Z	; BaseCom::RegisterSystemFavoritesService
EXTRN	?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z:PROC ; CipherShed::BootEncryption::RegisterSystemFavoritesService
;	COMDAT xdata$x
xdata$x	SEGMENT
__tryblocktable$?RegisterSystemFavoritesService@BaseCom@@SAKH@Z DD 00H
	DD	01H
	DD	02H
	DD	03H
	DD	FLAT:__catchsym$?RegisterSystemFavoritesService@BaseCom@@SAKH@Z$5
__unwindtable$?RegisterSystemFavoritesService@BaseCom@@SAKH@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?RegisterSystemFavoritesService@BaseCom@@SAKH@Z$4
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?RegisterSystemFavoritesService@BaseCom@@SAKH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?RegisterSystemFavoritesService@BaseCom@@SAKH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?RegisterSystemFavoritesService@BaseCom@@SAKH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__catchsym$?RegisterSystemFavoritesService@BaseCom@@SAKH@Z$5 DD 08H
	DD	FLAT:??_R0?AUSystemException@CipherShed@@@8
	DD	00H
	DD	FLAT:__catch$?RegisterSystemFavoritesService@BaseCom@@SAKH@Z$0
	DD	08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffff9ccH
	DD	FLAT:__catch$?RegisterSystemFavoritesService@BaseCom@@SAKH@Z$1
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?RegisterSystemFavoritesService@BaseCom@@SAKH@Z$2
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?RegisterSystemFavoritesService@BaseCom@@SAKH@Z
_TEXT	SEGMENT
_e$114541 = -1588					; size = 4
$T117855 = -1584					; size = 4
_bootEnc$114538 = -1580					; size = 1560
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_registerService$ = 8					; size = 4
?RegisterSystemFavoritesService@BaseCom@@SAKH@Z PROC	; BaseCom::RegisterSystemFavoritesService, COMDAT

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterSystemFavoritesService@BaseCom@@SAKH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 28 06 00
	00		 sub	 esp, 1576		; 00000628H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 178  : 	try
; 179  : 	{

  00031	33 db		 xor	 ebx, ebx

; 180  : 		BootEncryption bootEnc (NULL);

  00033	53		 push	 ebx
  00034	8d 8d d4 f9 ff
	ff		 lea	 ecx, DWORD PTR _bootEnc$114538[ebp]
  0003a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  0003d	e8 00 00 00 00	 call	 ??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z ; CipherShed::BootEncryption::BootEncryption

; 181  : 		bootEnc.RegisterSystemFavoritesService (registerService);

  00042	8b 45 08	 mov	 eax, DWORD PTR _registerService$[ebp]
  00045	50		 push	 eax
  00046	8d 8d d4 f9 ff
	ff		 lea	 ecx, DWORD PTR _bootEnc$114538[ebp]
  0004c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00050	e8 00 00 00 00	 call	 ?RegisterSystemFavoritesService@BootEncryption@CipherShed@@QAEXH@Z ; CipherShed::BootEncryption::RegisterSystemFavoritesService

; 182  : 	}

  00055	8d 8d d4 f9 ff
	ff		 lea	 ecx, DWORD PTR _bootEnc$114538[ebp]
  0005b	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  0005e	e8 00 00 00 00	 call	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption

; 195  : 	}
; 196  : 
; 197  : 	return ERROR_SUCCESS;

  00063	33 c0		 xor	 eax, eax
  00065	eb 39		 jmp	 SHORT $LN2@RegisterSy
__catch$?RegisterSystemFavoritesService@BaseCom@@SAKH@Z$0:

; 183  : 	catch (SystemException &)
; 184  : 	{
; 185  : 		return GetLastError();

  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0006d	89 85 d0 f9 ff
	ff		 mov	 DWORD PTR $T117855[ebp], eax
  00073	b8 00 00 00 00	 mov	 eax, $LN10@RegisterSy
  00078	c3		 ret	 0
$LN10@RegisterSy:
  00079	8b 85 d0 f9 ff
	ff		 mov	 eax, DWORD PTR $T117855[ebp]
  0007f	eb 1f		 jmp	 SHORT $LN2@RegisterSy
__catch$?RegisterSystemFavoritesService@BaseCom@@SAKH@Z$1:

; 186  : 	}
; 187  : 	catch (Exception &e)
; 188  : 	{
; 189  : 		e.Show (NULL);

  00081	8b 8d cc f9 ff
	ff		 mov	 ecx, DWORD PTR _e$114541[ebp]
  00087	8b 11		 mov	 edx, DWORD PTR [ecx]
  00089	8b 02		 mov	 eax, DWORD PTR [edx]
  0008b	6a 00		 push	 0
  0008d	ff d0		 call	 eax

; 190  : 		return ERROR_EXCEPTION_IN_SERVICE;

  0008f	b8 00 00 00 00	 mov	 eax, $LN14@RegisterSy
  00094	c3		 ret	 0
__catch$?RegisterSystemFavoritesService@BaseCom@@SAKH@Z$2:

; 191  : 	}
; 192  : 	catch (...)
; 193  : 	{
; 194  : 		return ERROR_EXCEPTION_IN_SERVICE;

  00095	b8 00 00 00 00	 mov	 eax, $LN14@RegisterSy
  0009a	c3		 ret	 0
$LN14@RegisterSy:
  0009b	b8 28 04 00 00	 mov	 eax, 1064		; 00000428H
$LN2@RegisterSy:

; 198  : }

  000a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000aa	59		 pop	 ecx
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b1	33 cd		 xor	 ecx, ebp
  000b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterSystemFavoritesService@BaseCom@@SAKH@Z$4:
  00000	8d 8d d4 f9 ff
	ff		 lea	 ecx, DWORD PTR _bootEnc$114538[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
__ehhandler$?RegisterSystemFavoritesService@BaseCom@@SAKH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a c8 f9 ff
	ff		 mov	 ecx, DWORD PTR [edx-1592]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterSystemFavoritesService@BaseCom@@SAKH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterSystemFavoritesService@BaseCom@@SAKH@Z ENDP	; BaseCom::RegisterSystemFavoritesService
PUBLIC	__$ArrayPad$
PUBLIC	?SetDriverServiceStartType@BaseCom@@SAKK@Z	; BaseCom::SetDriverServiceStartType
EXTRN	?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z:PROC ; CipherShed::BootEncryption::SetDriverServiceStartType
;	COMDAT xdata$x
xdata$x	SEGMENT
__tryblocktable$?SetDriverServiceStartType@BaseCom@@SAKK@Z DD 00H
	DD	01H
	DD	02H
	DD	03H
	DD	FLAT:__catchsym$?SetDriverServiceStartType@BaseCom@@SAKK@Z$5
__unwindtable$?SetDriverServiceStartType@BaseCom@@SAKK@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?SetDriverServiceStartType@BaseCom@@SAKK@Z$4
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?SetDriverServiceStartType@BaseCom@@SAKK@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?SetDriverServiceStartType@BaseCom@@SAKK@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SetDriverServiceStartType@BaseCom@@SAKK@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__catchsym$?SetDriverServiceStartType@BaseCom@@SAKK@Z$5 DD 08H
	DD	FLAT:??_R0?AUSystemException@CipherShed@@@8
	DD	00H
	DD	FLAT:__catch$?SetDriverServiceStartType@BaseCom@@SAKK@Z$0
	DD	08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffff9ccH
	DD	FLAT:__catch$?SetDriverServiceStartType@BaseCom@@SAKK@Z$1
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SetDriverServiceStartType@BaseCom@@SAKK@Z$2
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?SetDriverServiceStartType@BaseCom@@SAKK@Z
_TEXT	SEGMENT
_e$114551 = -1588					; size = 4
$T117882 = -1584					; size = 4
_bootEnc$114548 = -1580					; size = 1560
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_startType$ = 8						; size = 4
?SetDriverServiceStartType@BaseCom@@SAKK@Z PROC		; BaseCom::SetDriverServiceStartType, COMDAT

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetDriverServiceStartType@BaseCom@@SAKK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 28 06 00
	00		 sub	 esp, 1576		; 00000628H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 203  : 	try
; 204  : 	{

  00031	33 db		 xor	 ebx, ebx

; 205  : 		BootEncryption bootEnc (NULL);

  00033	53		 push	 ebx
  00034	8d 8d d4 f9 ff
	ff		 lea	 ecx, DWORD PTR _bootEnc$114548[ebp]
  0003a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  0003d	e8 00 00 00 00	 call	 ??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z ; CipherShed::BootEncryption::BootEncryption

; 206  : 		bootEnc.SetDriverServiceStartType (startType);

  00042	8b 45 08	 mov	 eax, DWORD PTR _startType$[ebp]
  00045	50		 push	 eax
  00046	8d 8d d4 f9 ff
	ff		 lea	 ecx, DWORD PTR _bootEnc$114548[ebp]
  0004c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00050	e8 00 00 00 00	 call	 ?SetDriverServiceStartType@BootEncryption@CipherShed@@QAEXK@Z ; CipherShed::BootEncryption::SetDriverServiceStartType

; 207  : 	}

  00055	8d 8d d4 f9 ff
	ff		 lea	 ecx, DWORD PTR _bootEnc$114548[ebp]
  0005b	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  0005e	e8 00 00 00 00	 call	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption

; 220  : 	}
; 221  : 
; 222  : 	return ERROR_SUCCESS;

  00063	33 c0		 xor	 eax, eax
  00065	eb 39		 jmp	 SHORT $LN2@SetDriverS
__catch$?SetDriverServiceStartType@BaseCom@@SAKK@Z$0:

; 208  : 	catch (SystemException &)
; 209  : 	{
; 210  : 		return GetLastError();

  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0006d	89 85 d0 f9 ff
	ff		 mov	 DWORD PTR $T117882[ebp], eax
  00073	b8 00 00 00 00	 mov	 eax, $LN10@SetDriverS
  00078	c3		 ret	 0
$LN10@SetDriverS:
  00079	8b 85 d0 f9 ff
	ff		 mov	 eax, DWORD PTR $T117882[ebp]
  0007f	eb 1f		 jmp	 SHORT $LN2@SetDriverS
__catch$?SetDriverServiceStartType@BaseCom@@SAKK@Z$1:

; 211  : 	}
; 212  : 	catch (Exception &e)
; 213  : 	{
; 214  : 		e.Show (NULL);

  00081	8b 8d cc f9 ff
	ff		 mov	 ecx, DWORD PTR _e$114551[ebp]
  00087	8b 11		 mov	 edx, DWORD PTR [ecx]
  00089	8b 02		 mov	 eax, DWORD PTR [edx]
  0008b	6a 00		 push	 0
  0008d	ff d0		 call	 eax

; 215  : 		return ERROR_EXCEPTION_IN_SERVICE;

  0008f	b8 00 00 00 00	 mov	 eax, $LN14@SetDriverS
  00094	c3		 ret	 0
__catch$?SetDriverServiceStartType@BaseCom@@SAKK@Z$2:

; 216  : 	}
; 217  : 	catch (...)
; 218  : 	{
; 219  : 		return ERROR_EXCEPTION_IN_SERVICE;

  00095	b8 00 00 00 00	 mov	 eax, $LN14@SetDriverS
  0009a	c3		 ret	 0
$LN14@SetDriverS:
  0009b	b8 28 04 00 00	 mov	 eax, 1064		; 00000428H
$LN2@SetDriverS:

; 223  : }

  000a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000aa	59		 pop	 ecx
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b1	33 cd		 xor	 ecx, ebp
  000b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetDriverServiceStartType@BaseCom@@SAKK@Z$4:
  00000	8d 8d d4 f9 ff
	ff		 lea	 ecx, DWORD PTR _bootEnc$114548[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
__ehhandler$?SetDriverServiceStartType@BaseCom@@SAKK@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a c8 f9 ff
	ff		 mov	 ecx, DWORD PTR [edx-1592]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetDriverServiceStartType@BaseCom@@SAKK@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetDriverServiceStartType@BaseCom@@SAKK@Z ENDP		; BaseCom::SetDriverServiceStartType
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ			; ATL::CW2AEX<128>::operator char *
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlconv.h
;	COMDAT ??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ
_TEXT	SEGMENT
??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ PROC			; ATL::CW2AEX<128>::operator char *, COMDAT
; _this$ = ecx

; 415  : 		return( m_psz );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 416  : 	}

  00002	c3		 ret	 0
??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ ENDP			; ATL::CW2AEX<128>::operator char *
_TEXT	ENDS
PUBLIC	??0?$auto_ptr@VFile@CipherShed@@@std@@QAE@PAVFile@CipherShed@@@Z ; std::auto_ptr<CipherShed::File>::auto_ptr<CipherShed::File>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??0?$auto_ptr@VFile@CipherShed@@@std@@QAE@PAVFile@CipherShed@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$auto_ptr@VFile@CipherShed@@@std@@QAE@PAVFile@CipherShed@@@Z PROC ; std::auto_ptr<CipherShed::File>::auto_ptr<CipherShed::File>, COMDAT
; _this$ = ecx

; 661  : 		{	// construct from object pointer

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 662  : 		}

  00008	c2 04 00	 ret	 4
??0?$auto_ptr@VFile@CipherShed@@@std@@QAE@PAVFile@CipherShed@@@Z ENDP ; std::auto_ptr<CipherShed::File>::auto_ptr<CipherShed::File>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?get@?$auto_ptr@VFile@CipherShed@@@std@@QBEPAVFile@CipherShed@@XZ ; std::auto_ptr<CipherShed::File>::get
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ?get@?$auto_ptr@VFile@CipherShed@@@std@@QBEPAVFile@CipherShed@@XZ
_TEXT	SEGMENT
?get@?$auto_ptr@VFile@CipherShed@@@std@@QBEPAVFile@CipherShed@@XZ PROC ; std::auto_ptr<CipherShed::File>::get, COMDAT
; _this$ = ecx

; 750  : 		return (_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 751  : 		}

  00002	c3		 ret	 0
?get@?$auto_ptr@VFile@CipherShed@@@std@@QBEPAVFile@CipherShed@@XZ ENDP ; std::auto_ptr<CipherShed::File>::get
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@2:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2c		 je	 SHORT $LN2@Inside
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 10	 cmp	 esi, 16			; 00000010H
  00013	72 04		 jb	 SHORT $LN8@Inside
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 17		 jb	 SHORT $LN2@Inside
  0001f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00022	72 02		 jb	 SHORT $LN12@Inside
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	03 c8		 add	 ecx, eax
  0002b	3b cf		 cmp	 ecx, edi
  0002d	76 07		 jbe	 SHORT $LN2@Inside
  0002f	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00030	b0 01		 mov	 al, 1
  00032	5e		 pop	 esi

; 2138 : 		}

  00033	c2 04 00	 ret	 4
$LN2@Inside:
  00036	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00037	32 c0		 xor	 al, al
  00039	5e		 pop	 esi

; 2138 : 		}

  0003a	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 167  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z		; ATL::AtlConvFreeMemory<char>
EXTRN	_free:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlconv.h
;	COMDAT ??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z
_TEXT	SEGMENT
_pBuff$ = 8						; size = 4
_pszFixedBuffer$ = 12					; size = 4
_nFixedBufferLength$ = 16				; size = 4
??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z PROC		; ATL::AtlConvFreeMemory<char>, COMDAT

; 156  : 	(nFixedBufferLength);
; 157  : 	if( pBuff != pszFixedBuffer )

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _pBuff$[esp-4]
  00004	3b 44 24 08	 cmp	 eax, DWORD PTR _pszFixedBuffer$[esp-4]
  00008	74 07		 je	 SHORT $LN1@AtlConvFre

; 158  : 	{
; 159  : 		free( pBuff );

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _free
  00010	59		 pop	 ecx
$LN1@AtlConvFre:

; 160  : 	} 	
; 161  : #ifdef _DEBUG
; 162  : 	else
; 163  : 	{		
; 164  : 		memset(pszFixedBuffer,ATLCONV_DEADLAND_FILL,nFixedBufferLength*sizeof(_CharType));
; 165  : 	}
; 166  : #endif
; 167  : 
; 168  : }

  00011	c3		 ret	 0
??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z ENDP		; ATL::AtlConvFreeMemory<char>
_TEXT	ENDS
PUBLIC	??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z	; ATL::AtlConvAllocMemory<char>
EXTRN	_calloc:PROC
EXTRN	__recalloc:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z
_TEXT	SEGMENT
_ppBuff$ = 8						; size = 4
_nLength$ = 12						; size = 4
_pszFixedBuffer$ = 16					; size = 4
_nFixedBufferLength$ = 20				; size = 4
??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z PROC	; ATL::AtlConvAllocMemory<char>, COMDAT

; 113  : {

  00000	56		 push	 esi

; 114  : 	ATLENSURE_THROW(ppBuff != NULL, E_INVALIDARG);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _ppBuff$[esp]
  00005	85 f6		 test	 esi, esi
  00007	75 0a		 jne	 SHORT $LN19@AtlConvAll
  00009	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0000e	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN19@AtlConvAll:

; 115  : 	ATLENSURE_THROW(nLength >= 0, E_INVALIDARG);

  00013	8b 4c 24 0c	 mov	 ecx, DWORD PTR _nLength$[esp]
  00017	85 c9		 test	 ecx, ecx
  00019	7d 0a		 jge	 SHORT $LN15@AtlConvAll
  0001b	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00020	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN15@AtlConvAll:
  00025	57		 push	 edi

; 116  : 	ATLENSURE_THROW(pszFixedBuffer != NULL, E_INVALIDARG);

  00026	8b 7c 24 14	 mov	 edi, DWORD PTR _pszFixedBuffer$[esp+4]
  0002a	85 ff		 test	 edi, edi
  0002c	75 0a		 jne	 SHORT $LN11@AtlConvAll
  0002e	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00033	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN11@AtlConvAll:

; 117  : 
; 118  : 	//if buffer malloced, try to realloc.
; 119  : 	if (*ppBuff != pszFixedBuffer)

  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	3b c7		 cmp	 eax, edi
  0003c	74 3a		 je	 SHORT $LN8@AtlConvAll

; 120  : 	{
; 121  : 		if( nLength > nFixedBufferLength )

  0003e	3b 4c 24 18	 cmp	 ecx, DWORD PTR _nFixedBufferLength$[esp+4]
  00042	7e 1a		 jle	 SHORT $LN7@AtlConvAll

; 122  : 		{
; 123  : 			_CharType* ppReallocBuf = static_cast< _CharType* >( _recalloc(*ppBuff, nLength,sizeof( _CharType ) ) );

  00044	6a 01		 push	 1
  00046	51		 push	 ecx
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 __recalloc
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 124  : 			if (ppReallocBuf == NULL) 

  00050	85 c0		 test	 eax, eax
  00052	75 35		 jne	 SHORT $LN6@AtlConvAll

; 125  : 			{
; 126  : 				AtlThrow( E_OUTOFMEMORY );

  00054	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00059	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN7@AtlConvAll:

; 127  : 			}
; 128  : 			*ppBuff = ppReallocBuf;
; 129  : 		} else
; 130  : 		{
; 131  : 			free(*ppBuff);

  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _free
  00064	83 c4 04	 add	 esp, 4
$LN3@AtlConvAll:

; 141  : 		{			
; 142  : 			*ppBuff=pszFixedBuffer;

  00067	89 3e		 mov	 DWORD PTR [esi], edi
$LN2@AtlConvAll:

; 143  : 		}
; 144  : 	}
; 145  : 
; 146  : 	if (*ppBuff == NULL)

  00069	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0006c	75 1f		 jne	 SHORT $LN23@AtlConvAll

; 147  : 	{
; 148  : 		AtlThrow( E_OUTOFMEMORY );

  0006e	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00073	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN8@AtlConvAll:

; 132  : 			*ppBuff=pszFixedBuffer;
; 133  : 		}
; 134  : 
; 135  : 	} else //Buffer is not currently malloced.
; 136  : 	{
; 137  : 		if( nLength > nFixedBufferLength )

  00078	3b 4c 24 18	 cmp	 ecx, DWORD PTR _nFixedBufferLength$[esp+4]
  0007c	7e e9		 jle	 SHORT $LN3@AtlConvAll

; 138  : 		{
; 139  : 			*ppBuff = static_cast< _CharType* >( calloc(nLength,sizeof( _CharType ) ) );

  0007e	6a 01		 push	 1
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 _calloc
  00086	83 c4 08	 add	 esp, 8
$LN6@AtlConvAll:
  00089	89 06		 mov	 DWORD PTR [esi], eax

; 140  : 		} else

  0008b	eb dc		 jmp	 SHORT $LN2@AtlConvAll
$LN23@AtlConvAll:
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi

; 149  : 	}
; 150  : 
; 151  : }

  0008f	c3		 ret	 0
$LN24@AtlConvAll:
??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z ENDP	; ATL::AtlConvAllocMemory<char>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T117956 = -12						; size = 12
$T117960 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 0f		 ja	 SHORT $LN3@Allocate

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00013	83 c4 04	 add	 esp, 4

; 44   : 	}

  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	c3		 ret	 0
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001a	83 c8 ff	 or	 eax, -1
  0001d	33 d2		 xor	 edx, edx
  0001f	f7 f1		 div	 ecx
  00021	83 f8 01	 cmp	 eax, 1
  00024	73 e7		 jae	 SHORT $LN1@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T117960[esp+8]
  0002a	50		 push	 eax
  0002b	8d 4c 24 04	 lea	 ecx, DWORD PTR $T117956[esp+16]
  0002f	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T117960[esp+12], 0
  00037	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003c	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00041	8d 4c 24 04	 lea	 ecx, DWORD PTR $T117956[esp+16]
  00045	51		 push	 ecx
  00046	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T117956[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate:
  00053	cc		 int	 3
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<char> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 598  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 625  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??1?$CW2AEX@$0IA@@ATL@@QAE@XZ			; ATL::CW2AEX<128>::~CW2AEX<128>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlconv.h
;	COMDAT ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CW2AEX@$0IA@@ATL@@QAE@XZ PROC			; ATL::CW2AEX<128>::~CW2AEX<128>, COMDAT
; _this$ = ecx

; 410  : 		AtlConvFreeMemory(m_psz,m_szBuffer,t_nBufferLength);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c1 04	 add	 ecx, 4
  00005	3b c1		 cmp	 eax, ecx
  00007	74 07		 je	 SHORT $LN3@CW2AEX
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	59		 pop	 ecx
$LN3@CW2AEX:

; 411  : 	}

  00010	c3		 ret	 0
??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ENDP			; ATL::CW2AEX<128>::~CW2AEX<128>
_TEXT	ENDS
PUBLIC	??C?$auto_ptr@VFile@CipherShed@@@std@@QBEPAVFile@CipherShed@@XZ ; std::auto_ptr<CipherShed::File>::operator->
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??C?$auto_ptr@VFile@CipherShed@@@std@@QBEPAVFile@CipherShed@@XZ
_TEXT	SEGMENT
??C?$auto_ptr@VFile@CipherShed@@@std@@QBEPAVFile@CipherShed@@XZ PROC ; std::auto_ptr<CipherShed::File>::operator->, COMDAT
; _this$ = ecx

; 739  : 
; 740  :  #if _HAS_ITERATOR_DEBUGGING
; 741  : 		if (_Myptr == 0)
; 742  : 			_DEBUG_ERROR("auto_ptr not dereferencable");
; 743  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 744  : 
; 745  : 		return (get());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 746  : 		}

  00002	c3		 ret	 0
??C?$auto_ptr@VFile@CipherShed@@@std@@QBEPAVFile@CipherShed@@XZ ENDP ; std::auto_ptr<CipherShed::File>::operator->
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z		; ATL::CW2AEX<128>::Init
EXTRN	__imp__WideCharToMultiByte@32:PROC
EXTRN	__imp__lstrlenW@4:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlconv.h
;	COMDAT ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
_nConvertCodePage$ = 12					; size = 4
?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z PROC		; ATL::CW2AEX<128>::Init, COMDAT
; _this$ = ecx

; 420  : 	{

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 421  : 		if (psz == NULL)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR _psz$[esp+4]
  00006	8b d9		 mov	 ebx, ecx
  00008	85 ed		 test	 ebp, ebp
  0000a	75 07		 jne	 SHORT $LN4@Init

; 422  : 		{
; 423  : 			m_psz = NULL;

  0000c	89 2b		 mov	 DWORD PTR [ebx], ebp
  0000e	5d		 pop	 ebp
  0000f	5b		 pop	 ebx

; 444  : 		}
; 445  : 	}

  00010	c2 08 00	 ret	 8
$LN4@Init:
  00013	56		 push	 esi
  00014	57		 push	 edi

; 424  : 			return;
; 425  : 		}
; 426  : 		int nLengthW = lstrlenW( psz )+1;		 

  00015	55		 push	 ebp
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  0001c	8b f8		 mov	 edi, eax

; 427  : 		int nLengthA = nLengthW*4;
; 428  : 		
; 429  : 		AtlConvAllocMemory(&m_psz,nLengthA,m_szBuffer,t_nBufferLength);

  0001e	68 80 00 00 00	 push	 128			; 00000080H
  00023	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00026	47		 inc	 edi
  00027	50		 push	 eax
  00028	8d 34 bd 00 00
	00 00		 lea	 esi, DWORD PTR [edi*4]
  0002f	56		 push	 esi
  00030	53		 push	 ebx
  00031	e8 00 00 00 00	 call	 ??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z ; ATL::AtlConvAllocMemory<char>

; 430  : 
; 431  : 		BOOL bFailed=(0 == ::WideCharToMultiByte( nConvertCodePage, 0, psz, nLengthW, m_psz, nLengthA, NULL, NULL ));

  00036	8b 03		 mov	 eax, DWORD PTR [ebx]
  00038	8b 4c 24 28	 mov	 ecx, DWORD PTR _nConvertCodePage$[esp+28]
  0003c	83 c4 10	 add	 esp, 16			; 00000010H
  0003f	6a 00		 push	 0
  00041	6a 00		 push	 0
  00043	56		 push	 esi
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	55		 push	 ebp
  00047	6a 00		 push	 0
  00049	51		 push	 ecx
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  00050	8b f0		 mov	 esi, eax
  00052	f7 de		 neg	 esi
  00054	1b f6		 sbb	 esi, esi
  00056	83 c6 01	 add	 esi, 1

; 432  : 		if (bFailed)

  00059	74 5e		 je	 SHORT $LN7@Init

; 433  : 		{
; 434  : 			if (GetLastError()==ERROR_INSUFFICIENT_BUFFER)

  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00061	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00064	75 4a		 jne	 SHORT $LN2@Init

; 435  : 			{
; 436  : 				nLengthA = ::WideCharToMultiByte( nConvertCodePage, 0, psz, nLengthW, NULL, 0, NULL, NULL );

  00066	8b 54 24 18	 mov	 edx, DWORD PTR _nConvertCodePage$[esp+12]
  0006a	6a 00		 push	 0
  0006c	6a 00		 push	 0
  0006e	6a 00		 push	 0
  00070	6a 00		 push	 0
  00072	57		 push	 edi
  00073	55		 push	 ebp
  00074	6a 00		 push	 0
  00076	52		 push	 edx
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  0007d	8b f0		 mov	 esi, eax

; 437  : 				AtlConvAllocMemory(&m_psz,nLengthA,m_szBuffer,t_nBufferLength);

  0007f	68 80 00 00 00	 push	 128			; 00000080H
  00084	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00087	50		 push	 eax
  00088	56		 push	 esi
  00089	53		 push	 ebx
  0008a	e8 00 00 00 00	 call	 ??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z ; ATL::AtlConvAllocMemory<char>

; 438  : 				bFailed=(0 == ::WideCharToMultiByte( nConvertCodePage, 0, psz, nLengthW, m_psz, nLengthA, NULL, NULL ));

  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00091	8b 4c 24 28	 mov	 ecx, DWORD PTR _nConvertCodePage$[esp+28]
  00095	83 c4 10	 add	 esp, 16			; 00000010H
  00098	6a 00		 push	 0
  0009a	6a 00		 push	 0
  0009c	56		 push	 esi
  0009d	50		 push	 eax
  0009e	57		 push	 edi
  0009f	55		 push	 ebp
  000a0	6a 00		 push	 0
  000a2	51		 push	 ecx
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  000a9	8b f0		 mov	 esi, eax
  000ab	f7 de		 neg	 esi
  000ad	1b f6		 sbb	 esi, esi
  000af	46		 inc	 esi
$LN2@Init:

; 439  : 			}			
; 440  : 		}
; 441  : 		if (bFailed)

  000b0	85 f6		 test	 esi, esi
  000b2	74 05		 je	 SHORT $LN7@Init

; 442  : 		{
; 443  : 			AtlThrowLastWin32();

  000b4	e8 00 00 00 00	 call	 ?AtlThrowLastWin32@ATL@@YGXXZ ; ATL::AtlThrowLastWin32
$LN7@Init:
  000b9	5f		 pop	 edi
  000ba	5e		 pop	 esi
  000bb	5d		 pop	 ebp
  000bc	5b		 pop	 ebx

; 444  : 		}
; 445  : 	}

  000bd	c2 08 00	 ret	 8
$LN9@Init:
?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ENDP		; ATL::CW2AEX<128>::Init
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $LN5@Eos
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 2115 : 		}

  00014	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 2115 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 590  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 617  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z		; ATL::CW2AEX<128>::CW2AEX<128>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlconv.h
;	COMDAT ??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z PROC			; ATL::CW2AEX<128>::CW2AEX<128>, COMDAT
; _this$ = ecx

; 400  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 401  : 		Init( psz, _AtlGetConversionACP() );

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR _psz$[esp]
  00007	6a 03		 push	 3
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0000c	51		 push	 ecx
  0000d	8b ce		 mov	 ecx, esi
  0000f	89 06		 mov	 DWORD PTR [esi], eax
  00011	e8 00 00 00 00	 call	 ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ; ATL::CW2AEX<128>::Init

; 402  : 	}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	c2 04 00	 ret	 4
??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z ENDP			; ATL::CW2AEX<128>::CW2AEX<128>
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 27		 je	 SHORT $LN15@Tidy

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00013	72 21		 jb	 SHORT $LN15@Tidy

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 0d		 jbe	 SHORT $LN13@Tidy

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	57		 push	 edi
  00020	53		 push	 ebx
  00021	6a 10		 push	 16			; 00000010H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _memcpy_s
  00029	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@Tidy:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00032	83 c4 04	 add	 esp, 4
  00035	5b		 pop	 ebx
$LN15@Tidy:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00036	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00039	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00040	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 2160 : 		}

  00047	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xran
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv130 = 8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 55		 jbe	 SHORT $LN30@erase

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00030	72 09		 jb	 SHORT $LN8@erase
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv130[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase
$LN8@erase:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv130[esp+12], ebp
$LN9@erase:
  0003f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00042	72 05		 jb	 SHORT $LN12@erase
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	eb 02		 jmp	 SHORT $LN13@erase
$LN12@erase:
  00049	8b d5		 mov	 edx, ebp
$LN13@erase:
  0004b	2b c7		 sub	 eax, edi
  0004d	50		 push	 eax
  0004e	8b 44 24 18	 mov	 eax, DWORD PTR tv130[esp+16]
  00052	03 c3		 add	 eax, ebx
  00054	03 c7		 add	 eax, edi
  00056	50		 push	 eax
  00057	2b cb		 sub	 ecx, ebx
  00059	51		 push	 ecx
  0005a	03 d3		 add	 edx, ebx
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00062	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00065	2b c7		 sub	 eax, edi
  00067	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0006a	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0006e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00071	72 03		 jb	 SHORT $LN26@erase
  00073	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN26@erase:
  00076	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  0007a	5d		 pop	 ebp
$LN30@erase:
  0007b	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  0007c	8b c6		 mov	 eax, esi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx

; 1275 : 		}

  00080	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 0f	 or	 esi, 15			; 0000000fH

; 2085 : 		if (max_size() < _Newres)

  00038	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN6@Copy

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  0003f	eb 22		 jmp	 SHORT $LN4@Copy
$LN6@Copy:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00041	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e6		 mul	 esi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b d1		 cmp	 edx, ecx
  00053	73 0e		 jae	 SHORT $LN4@Copy
  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005a	2b c1		 sub	 eax, ecx
  0005c	3b d8		 cmp	 ebx, eax
  0005e	77 03		 ja	 SHORT $LN4@Copy

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00060	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00063	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00066	6a 00		 push	 0
  00068	51		 push	 ecx
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00070	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00075	83 c4 08	 add	 esp, 8
  00078	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0007b	eb 28		 jmp	 SHORT $LN16@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007d	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00080	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00083	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00086	40		 inc	 eax
  00087	6a 00		 push	 0
  00089	50		 push	 eax
  0008a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0008e	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00093	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00096	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  00099	b8 00 00 00 00	 mov	 eax, $LN106@Copy
  0009e	c3		 ret	 0
$LN106@Copy:
  0009f	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a2	8b 75 e8	 mov	 esi, DWORD PTR __Newres$[ebp]
$LN16@Copy:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000a5	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000a8	85 db		 test	 ebx, ebx
  000aa	76 20		 jbe	 SHORT $LN71@Copy

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000ac	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000b0	72 05		 jb	 SHORT $LN63@Copy
  000b2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b5	eb 03		 jmp	 SHORT $LN64@Copy
$LN63@Copy:
  000b7	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN64@Copy:
  000ba	53		 push	 ebx
  000bb	50		 push	 eax
  000bc	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000bf	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _memcpy_s
  000c9	83 c4 10	 add	 esp, 16			; 00000010H
$LN71@Copy:

; 2106 : 		_Tidy(true);

  000cc	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000d0	72 0c		 jb	 SHORT $LN87@Copy
  000d2	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000db	83 c4 04	 add	 esp, 4
$LN87@Copy:

; 2107 : 		_Bx._Ptr = _Ptr;

  000de	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000e1	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000e4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e7	89 08		 mov	 DWORD PTR [eax], ecx

; 2108 : 		_Myres = _Newres;

  000e9	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000ec	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  000ef	83 fe 10	 cmp	 esi, 16			; 00000010H
  000f2	72 02		 jb	 SHORT $LN101@Copy
  000f4	8b c1		 mov	 eax, ecx
$LN101@Copy:
  000f6	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 2110 : 		}

  000fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00104	59		 pop	 ecx
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010e	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00111	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00115	72 0c		 jb	 SHORT $LN51@Copy
  00117	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00120	83 c4 04	 add	 esp, 4
$LN51@Copy:

; 2100 : 			_RERAISE;

  00123	6a 00		 push	 0
  00125	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0012c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00133	6a 00		 push	 0
  00135	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN109@Copy:
  0013e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?CopyFileA@BaseCom@@SAKPA_W0@Z			; BaseCom::CopyFileA
EXTRN	__imp__CopyFileA@12:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlconv.h
xdata$x	SEGMENT
__unwindtable$?CopyFileA@BaseCom@@SAKPA_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CopyFileA@BaseCom@@SAKPA_W0@Z$0
__ehfuncinfo$?CopyFileA@BaseCom@@SAKPA_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CopyFileA@BaseCom@@SAKPA_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\basecom.cpp
xdata$x	ENDS
;	COMDAT ?CopyFileA@BaseCom@@SAKPA_W0@Z
_TEXT	SEGMENT
$T118464 = -276						; size = 132
$T118463 = -144						; size = 132
__$EHRec$ = -12						; size = 12
_sourceFile$ = 8					; size = 4
_destinationFile$ = 12					; size = 4
?CopyFileA@BaseCom@@SAKPA_W0@Z PROC			; BaseCom::CopyFileA, COMDAT

; 87   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?CopyFileA@BaseCom@@SAKPA_W0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00014	53		 push	 ebx
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c4		 xor	 eax, esp
  0001c	50		 push	 eax
  0001d	8d 84 24 10 01
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+284]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 88   : 	USES_CONVERSION;
; 89   : 
; 90   : 	if (!::CopyFile (CW2A (sourceFile), CW2A (destinationFile), FALSE))

  0002a	8b 8c 24 24 01
	00 00		 mov	 ecx, DWORD PTR _destinationFile$[esp+280]
  00031	6a 03		 push	 3
  00033	8d 84 24 94 00
	00 00		 lea	 eax, DWORD PTR $T118463[esp+292]
  0003a	51		 push	 ecx
  0003b	8d 8c 24 94 00
	00 00		 lea	 ecx, DWORD PTR $T118463[esp+292]
  00042	89 84 24 94 00
	00 00		 mov	 DWORD PTR $T118463[esp+292], eax
  00049	e8 00 00 00 00	 call	 ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ; ATL::CW2AEX<128>::Init
  0004e	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR _sourceFile$[esp+280]
  00055	6a 03		 push	 3
  00057	8d 54 24 10	 lea	 edx, DWORD PTR $T118464[esp+292]
  0005b	50		 push	 eax
  0005c	8d 4c 24 10	 lea	 ecx, DWORD PTR $T118464[esp+292]
  00060	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+300], 0
  0006b	89 54 24 10	 mov	 DWORD PTR $T118464[esp+292], edx
  0006f	e8 00 00 00 00	 call	 ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ; ATL::CW2AEX<128>::Init
  00074	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR $T118463[esp+284]
  0007b	8b 54 24 08	 mov	 edx, DWORD PTR $T118464[esp+284]
  0007f	6a 00		 push	 0
  00081	51		 push	 ecx
  00082	52		 push	 edx
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CopyFileA@12
  00089	85 c0		 test	 eax, eax
  0008b	8b 44 24 08	 mov	 eax, DWORD PTR $T118464[esp+284]
  0008f	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T118464[esp+288]
  00093	0f 94 c3	 sete	 bl
  00096	3b c1		 cmp	 eax, ecx
  00098	74 09		 je	 SHORT $LN22@CopyFileA
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 _free
  000a0	83 c4 04	 add	 esp, 4
$LN22@CopyFileA:
  000a3	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR $T118463[esp+284]
  000aa	8d 94 24 90 00
	00 00		 lea	 edx, DWORD PTR $T118463[esp+288]
  000b1	3b c2		 cmp	 eax, edx
  000b3	74 09		 je	 SHORT $LN27@CopyFileA
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _free
  000bb	83 c4 04	 add	 esp, 4
$LN27@CopyFileA:
  000be	84 db		 test	 bl, bl
  000c0	74 1d		 je	 SHORT $LN1@CopyFileA

; 91   : 		return GetLastError();

  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 94   : }

  000c8	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+284]
  000cf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d6	59		 pop	 ecx
  000d7	5b		 pop	 ebx
  000d8	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  000de	c3		 ret	 0
$LN1@CopyFileA:

; 92   : 
; 93   : 	return ERROR_SUCCESS;

  000df	33 c0		 xor	 eax, eax

; 94   : }

  000e1	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+284]
  000e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ef	59		 pop	 ecx
  000f0	5b		 pop	 ebx
  000f1	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  000f7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CopyFileA@BaseCom@@SAKPA_W0@Z$0:
  00000	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T118463[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CW2AEX<128>::~CW2AEX<128>
__ehhandler$?CopyFileA@BaseCom@@SAKPA_W0@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 82 f4 fe ff
	ff		 lea	 eax, DWORD PTR [edx-268]
  00015	8b 8a f0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-272]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CopyFileA@BaseCom@@SAKPA_W0@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CopyFileA@BaseCom@@SAKPA_W0@Z ENDP			; BaseCom::CopyFileA
PUBLIC	?DeleteFileA@BaseCom@@SAKPA_W@Z			; BaseCom::DeleteFileA
EXTRN	__imp__DeleteFileA@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?DeleteFileA@BaseCom@@SAKPA_W@Z
_TEXT	SEGMENT
$T118527 = -132						; size = 132
_file$ = 8						; size = 4
?DeleteFileA@BaseCom@@SAKPA_W@Z PROC			; BaseCom::DeleteFileA, COMDAT

; 98   : {

  00000	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H

; 99   : 	USES_CONVERSION;
; 100  : 
; 101  : 	if (!::DeleteFile (CW2A (file)))

  00006	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR _file$[esp+128]
  0000d	53		 push	 ebx
  0000e	6a 03		 push	 3
  00010	8d 44 24 0c	 lea	 eax, DWORD PTR $T118527[esp+144]
  00014	51		 push	 ecx
  00015	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T118527[esp+144]
  00019	89 44 24 0c	 mov	 DWORD PTR $T118527[esp+144], eax
  0001d	e8 00 00 00 00	 call	 ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ; ATL::CW2AEX<128>::Init
  00022	8b 54 24 04	 mov	 edx, DWORD PTR $T118527[esp+136]
  00026	52		 push	 edx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4
  0002d	85 c0		 test	 eax, eax
  0002f	8b 44 24 04	 mov	 eax, DWORD PTR $T118527[esp+136]
  00033	8d 4c 24 08	 lea	 ecx, DWORD PTR $T118527[esp+140]
  00037	0f 94 c3	 sete	 bl
  0003a	3b c1		 cmp	 eax, ecx
  0003c	74 09		 je	 SHORT $LN15@DeleteFile
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _free
  00044	83 c4 04	 add	 esp, 4
$LN15@DeleteFile:
  00047	84 db		 test	 bl, bl
  00049	5b		 pop	 ebx
  0004a	74 0c		 je	 SHORT $LN1@DeleteFile

; 105  : }

  0004c	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H

; 102  : 		return GetLastError();

  00052	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__GetLastError@0
$LN1@DeleteFile:

; 103  : 
; 104  : 	return ERROR_SUCCESS;

  00058	33 c0		 xor	 eax, eax

; 105  : }

  0005a	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H
  00060	c3		 ret	 0
?DeleteFileA@BaseCom@@SAKPA_W@Z ENDP			; BaseCom::DeleteFileA
_TEXT	ENDS
PUBLIC	?WriteLocalMachineRegistryDwordValue@BaseCom@@SAKPA_W0K@Z ; BaseCom::WriteLocalMachineRegistryDwordValue
EXTRN	_WriteLocalMachineRegistryDword:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlconv.h
xdata$x	SEGMENT
__unwindtable$?WriteLocalMachineRegistryDwordValue@BaseCom@@SAKPA_W0K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WriteLocalMachineRegistryDwordValue@BaseCom@@SAKPA_W0K@Z$0
__ehfuncinfo$?WriteLocalMachineRegistryDwordValue@BaseCom@@SAKPA_W0K@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?WriteLocalMachineRegistryDwordValue@BaseCom@@SAKPA_W0K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\basecom.cpp
xdata$x	ENDS
;	COMDAT ?WriteLocalMachineRegistryDwordValue@BaseCom@@SAKPA_W0K@Z
_TEXT	SEGMENT
$T118561 = -276						; size = 132
$T118560 = -144						; size = 132
__$EHRec$ = -12						; size = 12
_keyPath$ = 8						; size = 4
_valueName$ = 12					; size = 4
_value$ = 16						; size = 4
?WriteLocalMachineRegistryDwordValue@BaseCom@@SAKPA_W0K@Z PROC ; BaseCom::WriteLocalMachineRegistryDwordValue, COMDAT

; 227  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?WriteLocalMachineRegistryDwordValue@BaseCom@@SAKPA_W0K@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00014	53		 push	 ebx
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c4		 xor	 eax, esp
  0001c	50		 push	 eax
  0001d	8d 84 24 10 01
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+284]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 228  : 	USES_CONVERSION;
; 229  : 	if (!::WriteLocalMachineRegistryDword (CW2A (keyPath), CW2A (valueName), value))

  0002a	8b 8c 24 24 01
	00 00		 mov	 ecx, DWORD PTR _valueName$[esp+280]
  00031	6a 03		 push	 3
  00033	8d 84 24 94 00
	00 00		 lea	 eax, DWORD PTR $T118560[esp+292]
  0003a	51		 push	 ecx
  0003b	8d 8c 24 94 00
	00 00		 lea	 ecx, DWORD PTR $T118560[esp+292]
  00042	89 84 24 94 00
	00 00		 mov	 DWORD PTR $T118560[esp+292], eax
  00049	e8 00 00 00 00	 call	 ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ; ATL::CW2AEX<128>::Init
  0004e	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR _keyPath$[esp+280]
  00055	6a 03		 push	 3
  00057	8d 54 24 10	 lea	 edx, DWORD PTR $T118561[esp+292]
  0005b	50		 push	 eax
  0005c	8d 4c 24 10	 lea	 ecx, DWORD PTR $T118561[esp+292]
  00060	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+300], 0
  0006b	89 54 24 10	 mov	 DWORD PTR $T118561[esp+292], edx
  0006f	e8 00 00 00 00	 call	 ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ; ATL::CW2AEX<128>::Init
  00074	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR _value$[esp+280]
  0007b	8b 94 24 8c 00
	00 00		 mov	 edx, DWORD PTR $T118560[esp+284]
  00082	8b 44 24 08	 mov	 eax, DWORD PTR $T118561[esp+284]
  00086	51		 push	 ecx
  00087	52		 push	 edx
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 _WriteLocalMachineRegistryDword
  0008e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00091	85 c0		 test	 eax, eax
  00093	8b 44 24 08	 mov	 eax, DWORD PTR $T118561[esp+284]
  00097	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T118561[esp+288]
  0009b	0f 94 c3	 sete	 bl
  0009e	3b c1		 cmp	 eax, ecx
  000a0	74 09		 je	 SHORT $LN22@WriteLocal
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 _free
  000a8	83 c4 04	 add	 esp, 4
$LN22@WriteLocal:
  000ab	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR $T118560[esp+284]
  000b2	8d 94 24 90 00
	00 00		 lea	 edx, DWORD PTR $T118560[esp+288]
  000b9	3b c2		 cmp	 eax, edx
  000bb	74 09		 je	 SHORT $LN27@WriteLocal
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 _free
  000c3	83 c4 04	 add	 esp, 4
$LN27@WriteLocal:
  000c6	84 db		 test	 bl, bl
  000c8	74 1d		 je	 SHORT $LN1@WriteLocal

; 230  : 		return GetLastError();

  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 233  : }

  000d0	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+284]
  000d7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000de	59		 pop	 ecx
  000df	5b		 pop	 ebx
  000e0	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  000e6	c3		 ret	 0
$LN1@WriteLocal:

; 231  : 
; 232  : 	return ERROR_SUCCESS;

  000e7	33 c0		 xor	 eax, eax

; 233  : }

  000e9	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+284]
  000f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f7	59		 pop	 ecx
  000f8	5b		 pop	 ebx
  000f9	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  000ff	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WriteLocalMachineRegistryDwordValue@BaseCom@@SAKPA_W0K@Z$0:
  00000	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T118560[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CW2AEX<128>::~CW2AEX<128>
__ehhandler$?WriteLocalMachineRegistryDwordValue@BaseCom@@SAKPA_W0K@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 82 f4 fe ff
	ff		 lea	 eax, DWORD PTR [edx-268]
  00015	8b 8a f0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-272]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?WriteLocalMachineRegistryDwordValue@BaseCom@@SAKPA_W0K@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?WriteLocalMachineRegistryDwordValue@BaseCom@@SAKPA_W0K@Z ENDP ; BaseCom::WriteLocalMachineRegistryDwordValue
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $LN17@basic_stri
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN17@basic_stri:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 907  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xlen
; Function compile flags: /Ogtpy
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	53		 push	 ebx

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  0000b	76 05		 jbe	 SHORT $LN6@Grow

; 2121 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow:

; 2122 : 		if (_Myres < _Newsize)

  00012	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00015	3b c3		 cmp	 eax, ebx
  00017	73 19		 jae	 SHORT $LN5@Grow

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001c	50		 push	 eax
  0001d	53		 push	 ebx
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c9		 xor	 ecx, ecx
  00027	3b cb		 cmp	 ecx, ebx
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5b		 pop	 ebx

; 2130 : 		}

  0002f	c2 08 00	 ret	 8
$LN5@Grow:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  00037	74 52		 je	 SHORT $LN3@Grow
  00039	83 fb 10	 cmp	 ebx, 16			; 00000010H
  0003c	73 4d		 jae	 SHORT $LN3@Grow
  0003e	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  0003f	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00042	3b df		 cmp	 ebx, edi
  00044	73 02		 jae	 SHORT $LN9@Grow
  00046	8b fb		 mov	 edi, ebx
$LN9@Grow:
  00048	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004b	72 21		 jb	 SHORT $LN33@Grow
  0004d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00050	55		 push	 ebp
  00051	8b 28		 mov	 ebp, DWORD PTR [eax]
  00053	85 ff		 test	 edi, edi
  00055	76 0d		 jbe	 SHORT $LN31@Grow
  00057	57		 push	 edi
  00058	55		 push	 ebp
  00059	6a 10		 push	 16			; 00000010H
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _memcpy_s
  00061	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@Grow:
  00064	55		 push	 ebp
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	83 c4 04	 add	 esp, 4
  0006d	5d		 pop	 ebp
$LN33@Grow:
  0006e	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00071	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00078	33 c9		 xor	 ecx, ecx
  0007a	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  0007f	3b cb		 cmp	 ecx, ebx
  00081	5f		 pop	 edi
  00082	1b c0		 sbb	 eax, eax
  00084	5e		 pop	 esi
  00085	f7 d8		 neg	 eax
  00087	5b		 pop	 ebx

; 2130 : 		}

  00088	c2 08 00	 ret	 8
$LN3@Grow:

; 2127 : 		else if (_Newsize == 0)

  0008b	85 db		 test	 ebx, ebx
  0008d	75 20		 jne	 SHORT $LN49@Grow

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  0008f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00092	83 f8 10	 cmp	 eax, 16			; 00000010H
  00095	72 12		 jb	 SHORT $LN47@Grow
  00097	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  0009a	33 c9		 xor	 ecx, ecx
  0009c	3b cb		 cmp	 ecx, ebx
  0009e	88 1e		 mov	 BYTE PTR [esi], bl
  000a0	1b c0		 sbb	 eax, eax
  000a2	5e		 pop	 esi
  000a3	f7 d8		 neg	 eax
  000a5	5b		 pop	 ebx

; 2130 : 		}

  000a6	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN47@Grow:
  000a9	83 c6 04	 add	 esi, 4
  000ac	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN49@Grow:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000af	33 c9		 xor	 ecx, ecx
  000b1	3b cb		 cmp	 ecx, ebx
  000b3	1b c0		 sbb	 eax, eax
  000b5	5e		 pop	 esi
  000b6	f7 d8		 neg	 eax
  000b8	5b		 pop	 ebx

; 2130 : 		}

  000b9	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	??1File@CipherShed@@QAE@XZ			; CipherShed::File::~File
EXTRN	?Close@File@CipherShed@@QAEXXZ:PROC		; CipherShed::File::Close
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??1File@CipherShed@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1File@CipherShed@@QAE@XZ$0
__ehfuncinfo$??1File@CipherShed@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1File@CipherShed@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\bootencryption.h
xdata$x	ENDS
;	COMDAT ??1File@CipherShed@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1File@CipherShed@@QAE@XZ PROC				; CipherShed::File::~File, COMDAT
; _this$ = ecx

; 27   : 		~File () { Close(); }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1File@CipherShed@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00030	e8 00 00 00 00	 call	 ?Close@File@CipherShed@@QAEXXZ ; CipherShed::File::Close
  00035	83 7e 30 10	 cmp	 DWORD PTR [esi+48], 16	; 00000010H
  00039	72 0c		 jb	 SHORT $LN20@File
  0003b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00044	83 c4 04	 add	 esp, 4
$LN20@File:
  00047	c7 46 30 0f 00
	00 00		 mov	 DWORD PTR [esi+48], 15	; 0000000fH
  0004e	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  00055	c6 46 1c 00	 mov	 BYTE PTR [esi+28], 0
  00059	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5e		 pop	 esi
  00066	83 c4 10	 add	 esp, 16			; 00000010H
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1File@CipherShed@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??1File@CipherShed@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00012	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1File@CipherShed@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1File@CipherShed@@QAE@XZ ENDP				; CipherShed::File::~File
PUBLIC	??_GFile@CipherShed@@QAEPAXI@Z			; CipherShed::File::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GFile@CipherShed@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GFile@CipherShed@@QAEPAXI@Z PROC			; CipherShed::File::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1File@CipherShed@@QAE@XZ ; CipherShed::File::~File
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@2
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GFile@CipherShed@@QAEPAXI@Z ENDP			; CipherShed::File::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Right$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 10	 mov	 ebp, DWORD PTR __Roff$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 6b 14	 cmp	 DWORD PTR [ebx+20], ebp
  00011	73 05		 jae	 SHORT $LN5@assign

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fd		 sub	 edi, ebp
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f3		 cmp	 esi, ebx
  00029	75 1f		 jne	 SHORT $LN3@assign

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fd		 add	 edi, ebp
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	55		 push	 ebp
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign:

; 1055 : 		else if (_Grow(_Num))

  0004a	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004d	76 05		 jbe	 SHORT $LN17@assign
  0004f	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign:
  00054	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00057	3b c7		 cmp	 eax, edi
  00059	73 1b		 jae	 SHORT $LN16@assign
  0005b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005e	50		 push	 eax
  0005f	57		 push	 edi
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00067	85 ff		 test	 edi, edi
$LN87@assign:
  00069	76 66		 jbe	 SHORT $LN86@assign

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006b	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0006f	72 2f		 jb	 SHORT $LN64@assign
  00071	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00074	eb 2d		 jmp	 SHORT $LN65@assign

; 1055 : 		else if (_Grow(_Num))

$LN16@assign:
  00076	85 ff		 test	 edi, edi
  00078	75 ef		 jne	 SHORT $LN87@assign
  0007a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0007d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00080	72 0f		 jb	 SHORT $LN58@assign
  00082	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00085	5f		 pop	 edi
  00086	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00089	8b c6		 mov	 eax, esi
  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	5b		 pop	 ebx

; 1061 : 		}

  0008e	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN58@assign:
  00091	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00098	8b c6		 mov	 eax, esi
  0009a	5e		 pop	 esi
  0009b	5d		 pop	 ebp
  0009c	5b		 pop	 ebx

; 1061 : 		}

  0009d	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN64@assign:
  000a0	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN65@assign:
  000a3	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000a6	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a9	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000ac	72 04		 jb	 SHORT $LN68@assign
  000ae	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b0	eb 02		 jmp	 SHORT $LN69@assign
$LN68@assign:
  000b2	8b c3		 mov	 eax, ebx
$LN69@assign:
  000b4	57		 push	 edi
  000b5	03 d5		 add	 edx, ebp
  000b7	52		 push	 edx
  000b8	51		 push	 ecx
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _memcpy_s
  000bf	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000c2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c9	72 02		 jb	 SHORT $LN82@assign
  000cb	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN82@assign:
  000cd	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN86@assign:
  000d1	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000d2	8b c6		 mov	 eax, esi
  000d4	5e		 pop	 esi
  000d5	5d		 pop	 ebp
  000d6	5b		 pop	 ebx

; 1061 : 		}

  000d7	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 ed		 test	 ebp, ebp
  0000b	74 46		 je	 SHORT $LN93@assign@2
  0000d	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 fa 10	 cmp	 edx, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN12@assign@2
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@2
$LN12@assign@2:
  0001c	8b c8		 mov	 ecx, eax
$LN13@assign@2:
  0001e	3b e9		 cmp	 ebp, ecx
  00020	72 31		 jb	 SHORT $LN93@assign@2
  00022	83 fa 10	 cmp	 edx, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN16@assign@2
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@2
$LN16@assign@2:
  0002b	8b c8		 mov	 ecx, eax
$LN17@assign@2:
  0002d	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00030	03 f9		 add	 edi, ecx
  00032	3b fd		 cmp	 edi, ebp
  00034	76 1d		 jbe	 SHORT $LN93@assign@2

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 fa 10	 cmp	 edx, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN20@assign@2
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@2:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b e8		 sub	 ebp, eax
  00044	55		 push	 ebp
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp

; 1080 : 		}

  00050	c2 08 00	 ret	 8
$LN93@assign@2:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00053	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  00057	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0005a	76 05		 jbe	 SHORT $LN27@assign@2
  0005c	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@2:
  00061	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00064	3b c7		 cmp	 eax, edi
  00066	73 20		 jae	 SHORT $LN26@assign@2
  00068	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0006b	52		 push	 edx
  0006c	57		 push	 edi
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00074	85 ff		 test	 edi, edi
$LN94@assign@2:
  00076	76 56		 jbe	 SHORT $LN90@assign@2

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  00078	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0007b	53		 push	 ebx
  0007c	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  0007f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00082	72 2c		 jb	 SHORT $LN74@assign@2
  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	eb 2a		 jmp	 SHORT $LN75@assign@2

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@2:
  00088	85 ff		 test	 edi, edi
  0008a	75 ea		 jne	 SHORT $LN94@assign@2
  0008c	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00092	72 0e		 jb	 SHORT $LN68@assign@2
  00094	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00097	5f		 pop	 edi
  00098	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5d		 pop	 ebp

; 1080 : 		}

  0009f	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN68@assign@2:
  000a2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000a5	5f		 pop	 edi
  000a6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  000a9	8b c6		 mov	 eax, esi
  000ab	5e		 pop	 esi
  000ac	5d		 pop	 ebp

; 1080 : 		}

  000ad	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN74@assign@2:
  000b0	8b c3		 mov	 eax, ebx
$LN75@assign@2:
  000b2	57		 push	 edi
  000b3	55		 push	 ebp
  000b4	51		 push	 ecx
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _memcpy_s
  000bb	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000be	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c2	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c5	72 02		 jb	 SHORT $LN88@assign@2
  000c7	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN88@assign@2:
  000c9	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
  000cd	5b		 pop	 ebx
$LN90@assign@2:
  000ce	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000cf	8b c6		 mov	 eax, esi
  000d1	5e		 pop	 esi
  000d2	5d		 pop	 ebp

; 1080 : 		}

  000d3	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??1?$auto_ptr@VFile@CipherShed@@@std@@QAE@XZ	; std::auto_ptr<CipherShed::File>::~auto_ptr<CipherShed::File>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??1?$auto_ptr@VFile@CipherShed@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$auto_ptr@VFile@CipherShed@@@std@@QAE@XZ PROC	; std::auto_ptr<CipherShed::File>::~auto_ptr<CipherShed::File>, COMDAT
; _this$ = ecx

; 720  : 		{	// destroy the object

  00000	56		 push	 esi

; 721  : 		delete _Myptr;

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]
  00003	85 f6		 test	 esi, esi
  00005	74 10		 je	 SHORT $LN3@auto_ptr
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ??1File@CipherShed@@QAE@XZ ; CipherShed::File::~File
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN3@auto_ptr:
  00017	5e		 pop	 esi

; 722  : 		}

  00018	c3		 ret	 0
??1?$auto_ptr@VFile@CipherShed@@@std@@QAE@XZ ENDP	; std::auto_ptr<CipherShed::File>::~auto_ptr<CipherShed::File>
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@3:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@assign@3
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 1086 : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$LL37@basic_stri@2:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL37@basic_stri@2
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 654  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z	; BaseCom::ReadWriteFile
EXTRN	?Read@File@CipherShed@@QAEKPAEK@Z:PROC		; CipherShed::File::Read
EXTRN	?Write@File@CipherShed@@QAEXPAEK@Z:PROC		; CipherShed::File::Write
EXTRN	?SeekAt@File@CipherShed@@QAEX_J@Z:PROC		; CipherShed::File::SeekAt
EXTRN	??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z:PROC ; CipherShed::File::File
EXTRN	??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CipherShed::Device::Device
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atlalloc.h
xdata$x	SEGMENT
__tryblocktable$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z DD 00H
	DD	09H
	DD	0aH
	DD	03H
	DD	FLAT:__catchsym$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$11
__ehfuncinfo$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z
	DD	01H
	DD	FLAT:__tryblocktable$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__catchsym$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$11 DD 08H
	DD	FLAT:??_R0?AUSystemException@CipherShed@@@8
	DD	00H
	DD	FLAT:__catch$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$0
	DD	08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe4H
	DD	FLAT:__catch$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$1
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$2
__unwindtable$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$7
	DD	04H
	DD	FLAT:__unwindfunclet$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$8
	DD	03H
	DD	FLAT:__unwindfunclet$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$8
	DD	06H
	DD	FLAT:__unwindfunclet$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$10
	DD	03H
	DD	FLAT:__unwindfunclet$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$10
	DD	00H
	DD	FLAT:__unwindfunclet$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$10
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\basecom.cpp
xdata$x	ENDS
;	COMDAT ?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z
_TEXT	SEGMENT
$T119608 = -296						; size = 132
$T119614 = -164						; size = 132
_e$114519 = -28						; size = 4
$T119613 = -24						; size = 4
$T119607 = -24						; size = 4
$T119627 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_write$ = 8						; size = 4
$T119619 = 12						; size = 4
$T119612 = 12						; size = 4
$T119606 = 12						; size = 4
_file$114503 = 12					; size = 4
_device$ = 12						; size = 4
_filePath$ = 16						; size = 4
_bufferBstr$ = 20					; size = 4
_offset$ = 24						; size = 8
_size$ = 32						; size = 4
_sizeDone$ = 36						; size = 4
?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z PROC	; BaseCom::ReadWriteFile, COMDAT

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	33 db		 xor	 ebx, ebx

; 141  : 	}
; 142  : 	catch (...)
; 143  : 	{
; 144  : 		return ERROR_EXCEPTION_IN_SERVICE;

  00030	89 5d ec	 mov	 DWORD PTR $T119627[ebp], ebx
  00033	6a 38		 push	 56			; 00000038H
  00035	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	39 5d 0c	 cmp	 DWORD PTR _device$[ebp], ebx
  00043	8b f0		 mov	 esi, eax
  00045	89 75 0c	 mov	 DWORD PTR $T119606[ebp], esi
  00048	74 5e		 je	 SHORT $LN10@ReadWriteF
  0004a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004e	85 f6		 test	 esi, esi
  00050	74 52		 je	 SHORT $LN6@ReadWriteF
  00052	39 5d 08	 cmp	 DWORD PTR _write$[ebp], ebx
  00055	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR $T119608[ebp+4]
  0005b	0f 94 c0	 sete	 al
  0005e	0f b6 c8	 movzx	 ecx, al
  00061	8b 45 10	 mov	 eax, DWORD PTR _filePath$[ebp]
  00064	51		 push	 ecx
  00065	6a 03		 push	 3
  00067	50		 push	 eax
  00068	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T119608[ebp]
  0006e	89 95 d8 fe ff
	ff		 mov	 DWORD PTR $T119608[ebp], edx
  00074	e8 00 00 00 00	 call	 ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ; ATL::CW2AEX<128>::Init
  00079	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR $T119608[ebp]
  0007f	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00082	8b cc		 mov	 ecx, esp
  00084	89 65 e8	 mov	 DWORD PTR $T119607[ebp], esp
  00087	bb 01 00 00 00	 mov	 ebx, 1
  0008c	52		 push	 edx
  0008d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00091	89 5d ec	 mov	 DWORD PTR $T119627[ebp], ebx
  00094	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00099	8b ce		 mov	 ecx, esi
  0009b	e8 00 00 00 00	 call	 ??0Device@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CipherShed::Device::Device
  000a0	8b f0		 mov	 esi, eax
  000a2	eb 02		 jmp	 SHORT $LN7@ReadWriteF
$LN6@ReadWriteF:

; 116  : 	USES_CONVERSION;
; 117  : 
; 118  : 	try
; 119  : 	{
; 120  : 		auto_ptr <File> file (device ? new Device (string (CW2A (filePath)), !write) : new File (string (CW2A (filePath)), !write));

  000a4	33 f6		 xor	 esi, esi
$LN7@ReadWriteF:
  000a6	eb 62		 jmp	 SHORT $LN11@ReadWriteF
$LN10@ReadWriteF:
  000a8	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  000af	85 f6		 test	 esi, esi
  000b1	74 55		 je	 SHORT $LN8@ReadWriteF
  000b3	83 7d 08 00	 cmp	 DWORD PTR _write$[ebp], 0
  000b7	6a 00		 push	 0
  000b9	0f 94 c0	 sete	 al
  000bc	0f b6 c8	 movzx	 ecx, al
  000bf	8b 45 10	 mov	 eax, DWORD PTR _filePath$[ebp]
  000c2	51		 push	 ecx
  000c3	6a 03		 push	 3
  000c5	8d 95 60 ff ff
	ff		 lea	 edx, DWORD PTR $T119614[ebp+4]
  000cb	50		 push	 eax
  000cc	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T119614[ebp]
  000d2	89 95 5c ff ff
	ff		 mov	 DWORD PTR $T119614[ebp], edx
  000d8	e8 00 00 00 00	 call	 ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ; ATL::CW2AEX<128>::Init
  000dd	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR $T119614[ebp]
  000e3	83 ec 1c	 sub	 esp, 28			; 0000001cH
  000e6	8b cc		 mov	 ecx, esp
  000e8	89 65 e8	 mov	 DWORD PTR $T119613[ebp], esp
  000eb	bb 02 00 00 00	 mov	 ebx, 2
  000f0	52		 push	 edx
  000f1	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  000f5	89 5d ec	 mov	 DWORD PTR $T119627[ebp], ebx
  000f8	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000fd	8b ce		 mov	 ecx, esi
  000ff	e8 00 00 00 00	 call	 ??0File@CipherShed@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N1@Z ; CipherShed::File::File
  00104	8b f0		 mov	 esi, eax
  00106	eb 02		 jmp	 SHORT $LN9@ReadWriteF
$LN8@ReadWriteF:
  00108	33 f6		 xor	 esi, esi
$LN9@ReadWriteF:
$LN11@ReadWriteF:
  0010a	89 75 0c	 mov	 DWORD PTR _file$114503[ebp], esi
  0010d	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 7
  00114	f6 c3 02	 test	 bl, 2
  00117	74 1c		 je	 SHORT $LN51@ReadWriteF
  00119	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T119614[ebp]
  0011f	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T119614[ebp+4]
  00125	83 e3 fd	 and	 ebx, -3			; fffffffdH
  00128	3b c1		 cmp	 eax, ecx
  0012a	74 09		 je	 SHORT $LN51@ReadWriteF
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 _free
  00132	83 c4 04	 add	 esp, 4
$LN51@ReadWriteF:
  00135	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+12], 9
  00139	f6 c3 01	 test	 bl, 1
  0013c	74 19		 je	 SHORT $LN56@ReadWriteF
  0013e	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR $T119608[ebp]
  00144	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR $T119608[ebp+4]
  0014a	3b c2		 cmp	 eax, edx
  0014c	74 09		 je	 SHORT $LN56@ReadWriteF
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 _free
  00154	83 c4 04	 add	 esp, 4
$LN56@ReadWriteF:

; 121  : 		file->SeekAt (offset);

  00157	8b 45 1c	 mov	 eax, DWORD PTR _offset$[ebp+4]
  0015a	8b 4d 18	 mov	 ecx, DWORD PTR _offset$[ebp]
  0015d	50		 push	 eax
  0015e	51		 push	 ecx
  0015f	8b ce		 mov	 ecx, esi
  00161	e8 00 00 00 00	 call	 ?SeekAt@File@CipherShed@@QAEX_J@Z ; CipherShed::File::SeekAt

; 122  : 
; 123  : 		if (write)

  00166	83 7d 08 00	 cmp	 DWORD PTR _write$[ebp], 0
  0016a	74 18		 je	 SHORT $LN2@ReadWriteF

; 124  : 		{
; 125  : 			file->Write ((BYTE *) *bufferBstr, size);

  0016c	8b 55 14	 mov	 edx, DWORD PTR _bufferBstr$[ebp]
  0016f	8b 7d 20	 mov	 edi, DWORD PTR _size$[ebp]
  00172	8b 02		 mov	 eax, DWORD PTR [edx]
  00174	57		 push	 edi
  00175	50		 push	 eax
  00176	8b ce		 mov	 ecx, esi
  00178	e8 00 00 00 00	 call	 ?Write@File@CipherShed@@QAEXPAEK@Z ; CipherShed::File::Write

; 126  : 			*sizeDone = size;

  0017d	8b 4d 24	 mov	 ecx, DWORD PTR _sizeDone$[ebp]
  00180	89 39		 mov	 DWORD PTR [ecx], edi

; 127  : 		}
; 128  : 		else

  00182	eb 16		 jmp	 SHORT $LN1@ReadWriteF
$LN2@ReadWriteF:

; 129  : 		{
; 130  : 			*sizeDone = file->Read ((BYTE *) *bufferBstr, size);

  00184	8b 55 20	 mov	 edx, DWORD PTR _size$[ebp]
  00187	8b 45 14	 mov	 eax, DWORD PTR _bufferBstr$[ebp]
  0018a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018c	52		 push	 edx
  0018d	51		 push	 ecx
  0018e	8b ce		 mov	 ecx, esi
  00190	e8 00 00 00 00	 call	 ?Read@File@CipherShed@@QAEKPAEK@Z ; CipherShed::File::Read
  00195	8b 55 24	 mov	 edx, DWORD PTR _sizeDone$[ebp]
  00198	89 02		 mov	 DWORD PTR [edx], eax
$LN1@ReadWriteF:

; 131  : 		}
; 132  : 	}

  0019a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  0019e	85 f6		 test	 esi, esi
  001a0	74 10		 je	 SHORT $LN73@ReadWriteF
  001a2	8b ce		 mov	 ecx, esi
  001a4	e8 00 00 00 00	 call	 ??1File@CipherShed@@QAE@XZ ; CipherShed::File::~File
  001a9	56		 push	 esi
  001aa	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001af	83 c4 04	 add	 esp, 4
$LN73@ReadWriteF:

; 145  : 	}
; 146  : 
; 147  : 	return ERROR_SUCCESS;

  001b2	33 c0		 xor	 eax, eax

; 148  : }

  001b4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001b7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001be	59		 pop	 ecx
  001bf	5f		 pop	 edi
  001c0	5e		 pop	 esi
  001c1	5b		 pop	 ebx
  001c2	8b e5		 mov	 esp, ebp
  001c4	5d		 pop	 ebp
  001c5	c3		 ret	 0
__catch$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$0:

; 133  : 	catch (SystemException &)
; 134  : 	{
; 135  : 		return GetLastError();

  001c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  001cc	89 45 0c	 mov	 DWORD PTR $T119619[ebp], eax
  001cf	b8 00 00 00 00	 mov	 eax, $LN28@ReadWriteF
  001d4	c3		 ret	 0
$LN28@ReadWriteF:
  001d5	8b 45 0c	 mov	 eax, DWORD PTR $T119619[ebp]

; 148  : }

  001d8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001db	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e2	59		 pop	 ecx
  001e3	5f		 pop	 edi
  001e4	5e		 pop	 esi
  001e5	5b		 pop	 ebx
  001e6	8b e5		 mov	 esp, ebp
  001e8	5d		 pop	 ebp
  001e9	c3		 ret	 0
__catch$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$1:

; 136  : 	}
; 137  : 	catch (Exception &e)
; 138  : 	{
; 139  : 		e.Show (NULL);

  001ea	8b 4d e4	 mov	 ecx, DWORD PTR _e$114519[ebp]
  001ed	8b 01		 mov	 eax, DWORD PTR [ecx]
  001ef	8b 10		 mov	 edx, DWORD PTR [eax]
  001f1	6a 00		 push	 0
  001f3	ff d2		 call	 edx

; 140  : 		return ERROR_EXCEPTION_IN_SERVICE;

  001f5	b8 00 00 00 00	 mov	 eax, $LN32@ReadWriteF
  001fa	c3		 ret	 0
__catch$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$2:

; 141  : 	}
; 142  : 	catch (...)
; 143  : 	{
; 144  : 		return ERROR_EXCEPTION_IN_SERVICE;

  001fb	b8 00 00 00 00	 mov	 eax, $LN32@ReadWriteF
  00200	c3		 ret	 0
$LN32@ReadWriteF:
  00201	b8 28 04 00 00	 mov	 eax, 1064		; 00000428H

; 148  : }

  00206	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00209	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00210	59		 pop	 ecx
  00211	5f		 pop	 edi
  00212	5e		 pop	 esi
  00213	5b		 pop	 ebx
  00214	8b e5		 mov	 esp, ebp
  00216	5d		 pop	 ebp
  00217	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$4:
  00000	8b 45 0c	 mov	 eax, DWORD PTR $T119606[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__unwindfunclet$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$5:
  0000b	8b 45 ec	 mov	 eax, DWORD PTR $T119627[ebp]
  0000e	83 e0 01	 and	 eax, 1
  00011	0f 84 0f 00 00
	00		 je	 $LN18@ReadWriteF
  00017	83 65 ec fe	 and	 DWORD PTR $T119627[ebp], -2 ; fffffffeH
  0001b	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T119608[ebp]
  00021	e9 00 00 00 00	 jmp	 ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CW2AEX<128>::~CW2AEX<128>
$LN18@ReadWriteF:
  00026	c3		 ret	 0
__unwindfunclet$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$7:
  00027	8b 45 0c	 mov	 eax, DWORD PTR $T119612[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	59		 pop	 ecx
  00031	c3		 ret	 0
__unwindfunclet$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$8:
  00032	8b 45 ec	 mov	 eax, DWORD PTR $T119627[ebp]
  00035	83 e0 02	 and	 eax, 2
  00038	0f 84 0f 00 00
	00		 je	 $LN22@ReadWriteF
  0003e	83 65 ec fd	 and	 DWORD PTR $T119627[ebp], -3 ; fffffffdH
  00042	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T119614[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CW2AEX<128>::~CW2AEX<128>
$LN22@ReadWriteF:
  0004d	c3		 ret	 0
__unwindfunclet$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z$10:
  0004e	8d 4d 0c	 lea	 ecx, DWORD PTR _file$114503[ebp]
  00051	e9 00 00 00 00	 jmp	 ??1?$auto_ptr@VFile@CipherShed@@@std@@QAE@XZ ; std::auto_ptr<CipherShed::File>::~auto_ptr<CipherShed::File>
__ehhandler$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z:
  00056	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0005a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005d	8b 8a d4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-300]
  00063	33 c8		 xor	 ecx, eax
  00065	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z
  0006f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z ENDP	; BaseCom::ReadWriteFile
PUBLIC	?clash@Define_the_symbol__ATL_MIXED@@3UThank_you@1@A ; Define_the_symbol__ATL_MIXED::clash
;	COMDAT ?clash@Define_the_symbol__ATL_MIXED@@3UThank_you@1@A
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atldef.h
_DATA	SEGMENT
?clash@Define_the_symbol__ATL_MIXED@@3UThank_you@1@A DD FLAT:??_7Thank_you@Define_the_symbol__ATL_MIXED@@6B@ ; Define_the_symbol__ATL_MIXED::clash
_DATA	ENDS
PUBLIC	?clash@Inconsistent_definition_of_symbol__ATL_MIXED@@3U_Please_define_it_the_same_throughout_your_project@1@A ; Inconsistent_definition_of_symbol__ATL_MIXED::clash
;	COMDAT ?clash@Inconsistent_definition_of_symbol__ATL_MIXED@@3U_Please_define_it_the_same_throughout_your_project@1@A
_BSS	SEGMENT
?clash@Inconsistent_definition_of_symbol__ATL_MIXED@@3U_Please_define_it_the_same_throughout_your_project@1@A DB 01H DUP (?) ; Inconsistent_definition_of_symbol__ATL_MIXED::clash
_BSS	ENDS
END
