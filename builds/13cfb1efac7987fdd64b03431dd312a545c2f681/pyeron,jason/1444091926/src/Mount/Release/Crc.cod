; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\Public\Desktop\projects\ciphershed\src\Common\Crc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_crc_32_tab
_DATA	SEGMENT
_crc_32_tab DD	00H
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
_DATA	ENDS
PUBLIC	_crc32int
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\common\crc.c
;	COMDAT _crc32int
_TEXT	SEGMENT
_data$ = 8						; size = 4
_crc32int PROC						; COMDAT

; 58   : 	unsigned char *d = (unsigned char *) data;
; 59   : 	unsigned __int32 CRC = 0xffffffff;
; 60   : 
; 61   : 	CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d++) & 0xFF ];

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _data$[esp-4]
  00004	0f b6 01	 movzx	 eax, BYTE PTR [ecx]

; 62   : 	CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d++) & 0xFF ];

  00007	0f b6 51 01	 movzx	 edx, BYTE PTR [ecx+1]
  0000b	f7 d0		 not	 eax
  0000d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00012	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _crc_32_tab[eax*4]
  00019	35 ff ff ff 00	 xor	 eax, 16777215		; 00ffffffH
  0001e	33 d0		 xor	 edx, eax
  00020	41		 inc	 ecx
  00021	c1 e8 08	 shr	 eax, 8
  00024	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0002a	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR _crc_32_tab[edx*4]

; 63   : 	CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d++) & 0xFF ];

  00031	0f b6 51 01	 movzx	 edx, BYTE PTR [ecx+1]
  00035	33 d0		 xor	 edx, eax
  00037	41		 inc	 ecx
  00038	c1 e8 08	 shr	 eax, 8
  0003b	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00041	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR _crc_32_tab[edx*4]
  00048	8b d0		 mov	 edx, eax

; 64   : 	return (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d) & 0xFF ] ^ 0xffffffff;

  0004a	0f b6 41 01	 movzx	 eax, BYTE PTR [ecx+1]
  0004e	33 c2		 xor	 eax, edx
  00050	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00055	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _crc_32_tab[eax*4]
  0005c	f7 d0		 not	 eax
  0005e	c1 ea 08	 shr	 edx, 8
  00061	33 c2		 xor	 eax, edx

; 65   : }

  00063	c3		 ret	 0
_crc32int ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _GetCrc32Large
_TEXT	SEGMENT
_GetCrc32Large PROC					; COMDAT
; _data$ = edx
; _length$ = ecx

; 106  : 	unsigned __int32 CRC = 0xffffffff;

  00000	83 c8 ff	 or	 eax, -1

; 107  : 
; 108  : 	while (length--)

  00003	85 c9		 test	 ecx, ecx
  00005	74 25		 je	 SHORT $LN6@GetCrc32La
  00007	56		 push	 esi
  00008	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL2@GetCrc32La:

; 109  : 	{
; 110  : 		CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *data++) & 0xFF ];

  00010	0f b6 32	 movzx	 esi, BYTE PTR [edx]
  00013	33 f0		 xor	 esi, eax
  00015	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  0001b	c1 e8 08	 shr	 eax, 8
  0001e	33 04 b5 00 00
	00 00		 xor	 eax, DWORD PTR _crc_32_tab[esi*4]
  00025	49		 dec	 ecx
  00026	42		 inc	 edx
  00027	85 c9		 test	 ecx, ecx
  00029	75 e5		 jne	 SHORT $LL2@GetCrc32La
  0002b	5e		 pop	 esi
$LN6@GetCrc32La:

; 111  : 	}
; 112  : 
; 113  : 	return CRC ^ 0xffffffff;

  0002c	f7 d0		 not	 eax

; 114  : }

  0002e	c3		 ret	 0
_GetCrc32Large ENDP
_TEXT	ENDS
PUBLIC	_crc32_selfTestLarge
; Function compile flags: /Ogtpy
;	COMDAT _crc32_selfTestLarge
_TEXT	SEGMENT
_crc32_selfTestLarge PROC				; COMDAT

; 120  : 	int i;
; 121  : 	unsigned __int32 crc  = 0xffffffff;

  00000	83 c8 ff	 or	 eax, -1

; 122  : 	BOOL bSuccess = FALSE;
; 123  : 
; 124  : 	for (i = 0; i < (int)sizeof(crc_32_tab); i++)

  00003	33 c9		 xor	 ecx, ecx
  00005	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL3@crc32_self:

; 125  : 		crc = UPDC32 (((unsigned char *) crc_32_tab)[i], crc);

  00010	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _crc_32_tab[ecx]
  00017	33 d0		 xor	 edx, eax
  00019	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0001f	c1 e8 08	 shr	 eax, 8
  00022	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR _crc_32_tab[edx*4]
  00029	0f b6 91 01 00
	00 00		 movzx	 edx, BYTE PTR _crc_32_tab[ecx+1]
  00030	33 d0		 xor	 edx, eax
  00032	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00038	c1 e8 08	 shr	 eax, 8
  0003b	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR _crc_32_tab[edx*4]
  00042	0f b6 91 02 00
	00 00		 movzx	 edx, BYTE PTR _crc_32_tab[ecx+2]
  00049	33 d0		 xor	 edx, eax
  0004b	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00051	c1 e8 08	 shr	 eax, 8
  00054	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR _crc_32_tab[edx*4]
  0005b	0f b6 91 03 00
	00 00		 movzx	 edx, BYTE PTR _crc_32_tab[ecx+3]
  00062	33 d0		 xor	 edx, eax
  00064	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0006a	c1 e8 08	 shr	 eax, 8
  0006d	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR _crc_32_tab[edx*4]
  00074	83 c1 04	 add	 ecx, 4
  00077	81 f9 00 04 00
	00		 cmp	 ecx, 1024		; 00000400H
  0007d	7c 91		 jl	 SHORT $LL3@crc32_self

; 126  : 
; 127  : 	bSuccess = CRC_SELFTEST == (crc ^ 0xffffffff);

  0007f	33 c9		 xor	 ecx, ecx
  00081	f7 d0		 not	 eax
  00083	3d 13 9e cf 6f	 cmp	 eax, 1875877395		; 6fcf9e13H
  00088	0f 94 c1	 sete	 cl
  0008b	56		 push	 esi
  0008c	57		 push	 edi

; 128  : 
; 129  : 	bSuccess &= GetCrc32Large ((unsigned char *)crc_32_tab, sizeof crc_32_tab) == CRC_SELFTEST;

  0008d	ba 00 00 00 00	 mov	 edx, OFFSET _crc_32_tab
  00092	83 c8 ff	 or	 eax, -1
  00095	8b f1		 mov	 esi, ecx
  00097	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  0009c	8d 64 24 00	 npad	 4
$LL7@crc32_self:
  000a0	0f b6 3a	 movzx	 edi, BYTE PTR [edx]
  000a3	33 f8		 xor	 edi, eax
  000a5	81 e7 ff 00 00
	00		 and	 edi, 255		; 000000ffH
  000ab	c1 e8 08	 shr	 eax, 8
  000ae	33 04 bd 00 00
	00 00		 xor	 eax, DWORD PTR _crc_32_tab[edi*4]
  000b5	49		 dec	 ecx
  000b6	42		 inc	 edx
  000b7	85 c9		 test	 ecx, ecx
  000b9	75 e5		 jne	 SHORT $LL7@crc32_self
  000bb	f7 d0		 not	 eax
  000bd	33 d2		 xor	 edx, edx
  000bf	3d 13 9e cf 6f	 cmp	 eax, 1875877395		; 6fcf9e13H
  000c4	0f 94 c2	 sete	 dl
  000c7	5f		 pop	 edi
  000c8	23 d6		 and	 edx, esi

; 130  : 
; 131  : 	return bSuccess;

  000ca	8b c2		 mov	 eax, edx
  000cc	5e		 pop	 esi

; 132  : }

  000cd	c3		 ret	 0
_crc32_selfTestLarge ENDP
_TEXT	ENDS
PUBLIC	_GetCrc32
; Function compile flags: /Ogtpy
;	COMDAT _GetCrc32
_TEXT	SEGMENT
_data$ = 8						; size = 4
_length$ = 12						; size = 4
_GetCrc32 PROC						; COMDAT

; 137  : #	ifndef TC_MINIMIZE_CODE_SIZE
; 138  : 		return GetCrc32Large(data,length);

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _length$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR _data$[esp-4]
  00008	e9 00 00 00 00	 jmp	 _GetCrc32Large
_GetCrc32 ENDP
_TEXT	ENDS
PUBLIC	_crc32_selftests
; Function compile flags: /Ogtpy
;	COMDAT _crc32_selftests
_TEXT	SEGMENT
_crc32_selftests PROC					; COMDAT

; 148  : #	ifndef TC_MINIMIZE_CODE_SIZE
; 149  : 		return crc32_selfTestLarge();

  00000	e9 00 00 00 00	 jmp	 _crc32_selfTestLarge
_crc32_selftests ENDP
_TEXT	ENDS
END
