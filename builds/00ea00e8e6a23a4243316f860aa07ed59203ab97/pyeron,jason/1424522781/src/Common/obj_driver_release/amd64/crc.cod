; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	crc_32_tab
crc_32_tab DD	00H
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
; Function compile flags: /Ogspy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\crc.c
;	COMDAT GetCrc32Large
_TEXT	SEGMENT
data$ = 8
length$ = 16
GetCrc32Large PROC					; COMDAT

; 105  : 	unsigned __int32 CRC = 0xffffffff;

  00000	41 83 c9 ff	 or	 r9d, -1			; ffffffffH
  00004	4c 8b d1	 mov	 r10, rcx

; 106  : 
; 107  : 	while (length--)

  00007	85 d2		 test	 edx, edx
  00009	74 2a		 je	 SHORT $LN6@GetCrc32La
$LL2@GetCrc32La:

; 108  : 	{
; 109  : 		CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *data++) & 0xFF ];

  0000b	45 0f b6 02	 movzx	 r8d, BYTE PTR [r10]
  0000f	41 8b c1	 mov	 eax, r9d
  00012	41 8b c9	 mov	 ecx, r9d
  00015	4c 33 c0	 xor	 r8, rax
  00018	c1 e9 08	 shr	 ecx, 8
  0001b	49 ff c2	 inc	 r10
  0001e	41 0f b6 c0	 movzx	 eax, r8b
  00022	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_32_tab
  00029	45 8b 0c 80	 mov	 r9d, DWORD PTR [r8+rax*4]
  0002d	44 33 c9	 xor	 r9d, ecx
  00030	83 ea 01	 sub	 edx, 1
  00033	75 d6		 jne	 SHORT $LL2@GetCrc32La
$LN6@GetCrc32La:

; 110  : 	}
; 111  : 
; 112  : 	return CRC ^ 0xffffffff;

  00035	41 f7 d1	 not	 r9d
  00038	41 8b c1	 mov	 eax, r9d

; 113  : }

  0003b	c3		 ret	 0
GetCrc32Large ENDP
_TEXT	ENDS
PUBLIC	crc32int
; Function compile flags: /Ogspy
;	COMDAT crc32int
_TEXT	SEGMENT
data$ = 8
crc32int PROC						; COMDAT

; 58   : 	unsigned char *d = (unsigned char *) data;
; 59   : 	unsigned __int32 CRC = 0xffffffff;
; 60   : 
; 61   : 	CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d++) & 0xFF ];

  00000	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00003	4c 8d 49 01	 lea	 r9, QWORD PTR [rcx+1]
  00007	4c 8d 15 00 00
	00 00		 lea	 r10, OFFSET FLAT:crc_32_tab

; 62   : 	CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d++) & 0xFF ];

  0000e	41 0f b6 09	 movzx	 ecx, BYTE PTR [r9]
  00012	48 f7 d0	 not	 rax
  00015	0f b6 d0	 movzx	 edx, al
  00018	45 8b 04 92	 mov	 r8d, DWORD PTR [r10+rdx*4]
  0001c	41 81 f0 ff ff
	ff 00		 xor	 r8d, 16777215		; 00ffffffH
  00023	41 8b c0	 mov	 eax, r8d
  00026	41 c1 e8 08	 shr	 r8d, 8
  0002a	48 33 c8	 xor	 rcx, rax
  0002d	0f b6 c1	 movzx	 eax, cl

; 63   : 	CRC = (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d++) & 0xFF ];

  00030	41 0f b6 49 01	 movzx	 ecx, BYTE PTR [r9+1]
  00035	41 8b 14 82	 mov	 edx, DWORD PTR [r10+rax*4]
  00039	41 33 d0	 xor	 edx, r8d
  0003c	8b c2		 mov	 eax, edx
  0003e	c1 ea 08	 shr	 edx, 8
  00041	48 33 c8	 xor	 rcx, rax
  00044	0f b6 c1	 movzx	 eax, cl

; 64   : 	return (CRC >> 8) ^ crc_32_tab[ (CRC ^ *d) & 0xFF ] ^ 0xffffffff;

  00047	41 0f b6 49 02	 movzx	 ecx, BYTE PTR [r9+2]
  0004c	45 8b 04 82	 mov	 r8d, DWORD PTR [r10+rax*4]
  00050	44 33 c2	 xor	 r8d, edx
  00053	41 8b c0	 mov	 eax, r8d
  00056	41 c1 e8 08	 shr	 r8d, 8
  0005a	48 33 c8	 xor	 rcx, rax
  0005d	0f b6 c1	 movzx	 eax, cl
  00060	41 8b 04 82	 mov	 eax, DWORD PTR [r10+rax*4]
  00064	f7 d0		 not	 eax
  00066	41 33 c0	 xor	 eax, r8d

; 65   : }

  00069	c3		 ret	 0
crc32int ENDP
PUBLIC	GetCrc32
; Function compile flags: /Ogspy
;	COMDAT GetCrc32
_TEXT	SEGMENT
data$ = 8
length$ = 16
GetCrc32 PROC						; COMDAT

; 136  : #	ifndef TC_MINIMIZE_CODE_SIZE
; 137  : 		return GetCrc32Large(data,length);

  00000	41 83 c8 ff	 or	 r8d, -1			; ffffffffH
  00004	44 8b ca	 mov	 r9d, edx
  00007	4c 8b d1	 mov	 r10, rcx
  0000a	85 d2		 test	 edx, edx
  0000c	74 2a		 je	 SHORT $LN8@GetCrc32
$LL4@GetCrc32:
  0000e	41 0f b6 12	 movzx	 edx, BYTE PTR [r10]
  00012	41 8b c0	 mov	 eax, r8d
  00015	41 8b c8	 mov	 ecx, r8d
  00018	48 33 d0	 xor	 rdx, rax
  0001b	c1 e9 08	 shr	 ecx, 8
  0001e	49 ff c2	 inc	 r10
  00021	0f b6 c2	 movzx	 eax, dl
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:crc_32_tab
  0002b	44 8b 04 82	 mov	 r8d, DWORD PTR [rdx+rax*4]
  0002f	44 33 c1	 xor	 r8d, ecx
  00032	41 83 e9 01	 sub	 r9d, 1
  00036	75 d6		 jne	 SHORT $LL4@GetCrc32
$LN8@GetCrc32:
  00038	41 f7 d0	 not	 r8d
  0003b	41 8b c0	 mov	 eax, r8d

; 138  : #	else
; 139  : 		return GetCrc32Small(data, length);
; 140  : #	endif
; 141  : }

  0003e	c3		 ret	 0
GetCrc32 ENDP
_TEXT	ENDS
PUBLIC	crc32_selfTestLarge
;	COMDAT pdata
pdata	SEGMENT
$pdata$crc32_selfTestLarge DD imagerel $LN15
	DD	imagerel $LN15+151
	DD	imagerel $unwind$crc32_selfTestLarge
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$crc32_selfTestLarge DD 040a01H
	DD	02740aH
	DD	013405H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT crc32_selfTestLarge
_TEXT	SEGMENT
crc32_selfTestLarge PROC				; COMDAT

; 118  : {

$LN15:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 7c 24 10	 mov	 QWORD PTR [rsp+16], rdi

; 119  : 	int i;
; 120  : 	unsigned __int32 crc  = 0xffffffff;

  0000a	41 83 c9 ff	 or	 r9d, -1			; ffffffffH

; 121  : 	BOOL bSuccess = FALSE;
; 122  : 
; 123  : 	for (i = 0; i < (int)sizeof(crc_32_tab); i++)

  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:crc_32_tab
  00018	4d 8b d8	 mov	 r11, r8
  0001b	45 8b d1	 mov	 r10d, r9d
  0001e	bb 00 04 00 00	 mov	 ebx, 1024		; 00000400H
$LL3@crc32_self:

; 124  : 		crc = UPDC32 (((unsigned char *) crc_32_tab)[i], crc);

  00023	41 0f b6 0c 3b	 movzx	 ecx, BYTE PTR [r11+rdi]
  00028	41 8b c2	 mov	 eax, r10d
  0002b	49 ff c3	 inc	 r11
  0002e	48 33 c8	 xor	 rcx, rax
  00031	c1 e8 08	 shr	 eax, 8
  00034	0f b6 d1	 movzx	 edx, cl
  00037	44 8b 14 97	 mov	 r10d, DWORD PTR [rdi+rdx*4]
  0003b	44 33 d0	 xor	 r10d, eax
  0003e	4c 3b db	 cmp	 r11, rbx
  00041	7c e0		 jl	 SHORT $LL3@crc32_self

; 125  : 
; 126  : 	bSuccess = CRC_SELFTEST == (crc ^ 0xffffffff);

  00043	41 f7 d2	 not	 r10d
  00046	41 bb 13 9e cf
	6f		 mov	 r11d, 1875877395	; 6fcf9e13H
  0004c	41 8b d0	 mov	 edx, r8d
  0004f	45 3b d3	 cmp	 r10d, r11d

; 127  : 
; 128  : 	bSuccess &= GetCrc32Large ((unsigned char *)crc_32_tab, sizeof crc_32_tab) == CRC_SELFTEST;

  00052	4c 8b d7	 mov	 r10, rdi
  00055	0f 94 c2	 sete	 dl
$LL7@crc32_self:
  00058	41 0f b6 0a	 movzx	 ecx, BYTE PTR [r10]
  0005c	41 8b c1	 mov	 eax, r9d
  0005f	ff cb		 dec	 ebx
  00061	48 33 c8	 xor	 rcx, rax
  00064	49 ff c2	 inc	 r10
  00067	0f b6 c1	 movzx	 eax, cl
  0006a	41 8b c9	 mov	 ecx, r9d
  0006d	44 8b 0c 87	 mov	 r9d, DWORD PTR [rdi+rax*4]
  00071	c1 e9 08	 shr	 ecx, 8
  00074	44 33 c9	 xor	 r9d, ecx
  00077	41 3b d8	 cmp	 ebx, r8d
  0007a	75 dc		 jne	 SHORT $LL7@crc32_self

; 129  : 
; 130  : 	return bSuccess;
; 131  : }

  0007c	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00081	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
  00086	41 f7 d1	 not	 r9d
  00089	45 3b cb	 cmp	 r9d, r11d
  0008c	41 0f 94 c0	 sete	 r8b
  00090	44 23 c2	 and	 r8d, edx
  00093	41 8b c0	 mov	 eax, r8d
  00096	c3		 ret	 0
crc32_selfTestLarge ENDP
PUBLIC	crc32_selftests
;	COMDAT pdata
pdata	SEGMENT
$pdata$crc32_selftests DD imagerel $LN17
	DD	imagerel $LN17+151
	DD	imagerel $unwind$crc32_selftests
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$crc32_selftests DD 040a01H
	DD	02740aH
	DD	013405H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT crc32_selftests
_TEXT	SEGMENT
crc32_selftests PROC					; COMDAT

; 146  : {

$LN17:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 7c 24 10	 mov	 QWORD PTR [rsp+16], rdi

; 147  : #	ifndef TC_MINIMIZE_CODE_SIZE
; 148  : 		return crc32_selfTestLarge();

  0000a	41 83 c9 ff	 or	 r9d, -1			; ffffffffH
  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:crc_32_tab
  00018	4d 8b d8	 mov	 r11, r8
  0001b	45 8b d1	 mov	 r10d, r9d
  0001e	bb 00 04 00 00	 mov	 ebx, 1024		; 00000400H
$LL5@crc32_self@2:
  00023	41 0f b6 0c 3b	 movzx	 ecx, BYTE PTR [r11+rdi]
  00028	41 8b c2	 mov	 eax, r10d
  0002b	49 ff c3	 inc	 r11
  0002e	48 33 c8	 xor	 rcx, rax
  00031	c1 e8 08	 shr	 eax, 8
  00034	0f b6 d1	 movzx	 edx, cl
  00037	44 8b 14 97	 mov	 r10d, DWORD PTR [rdi+rdx*4]
  0003b	44 33 d0	 xor	 r10d, eax
  0003e	4c 3b db	 cmp	 r11, rbx
  00041	7c e0		 jl	 SHORT $LL5@crc32_self@2
  00043	41 f7 d2	 not	 r10d
  00046	41 bb 13 9e cf
	6f		 mov	 r11d, 1875877395	; 6fcf9e13H
  0004c	41 8b d0	 mov	 edx, r8d
  0004f	45 3b d3	 cmp	 r10d, r11d
  00052	4c 8b d7	 mov	 r10, rdi
  00055	0f 94 c2	 sete	 dl
$LL9@crc32_self@2:
  00058	41 0f b6 0a	 movzx	 ecx, BYTE PTR [r10]
  0005c	41 8b c1	 mov	 eax, r9d
  0005f	ff cb		 dec	 ebx
  00061	48 33 c8	 xor	 rcx, rax
  00064	49 ff c2	 inc	 r10
  00067	0f b6 c1	 movzx	 eax, cl
  0006a	41 8b c9	 mov	 ecx, r9d
  0006d	44 8b 0c 87	 mov	 r9d, DWORD PTR [rdi+rax*4]
  00071	c1 e9 08	 shr	 ecx, 8
  00074	44 33 c9	 xor	 r9d, ecx
  00077	41 3b d8	 cmp	 ebx, r8d
  0007a	75 dc		 jne	 SHORT $LL9@crc32_self@2

; 149  : #	else
; 150  : 		return crc32_selfTestSmall();
; 151  : #	endif
; 152  : }

  0007c	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00081	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
  00086	41 f7 d1	 not	 r9d
  00089	45 3b cb	 cmp	 r9d, r11d
  0008c	41 0f 94 c0	 sete	 r8b
  00090	44 23 c2	 and	 r8d, edx
  00093	41 8b c0	 mov	 eax, r8d
  00096	c3		 ret	 0
crc32_selftests ENDP
END
